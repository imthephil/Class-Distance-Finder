<?xml version="1.0" encoding="utf-8" ?>

<!DOCTYPE dependencies SYSTEM "http://depfind.sourceforge.net/dtd/dependencies.dtd">

<dependencies>
    <package confirmed="no">
        <name></name>
        <class confirmed="no">
            <name>boolean[]</name>
            <inbound type="feature" confirmed="yes">org.mvel.asm.AnnotationWriter.visit(java.lang.String, java.lang.Object)</inbound>
        </class>
        <class confirmed="no">
            <name>byte[]</name>
            <inbound type="feature" confirmed="yes">org.mvel.asm.AnnotationWriter.visit(java.lang.String, java.lang.Object)</inbound>
        </class>
        <class confirmed="no">
            <name>char[]</name>
            <inbound type="feature" confirmed="yes">org.mvel.AbstractParser.nextToken()</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.AbstractParser.setExpression(java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.TemplateCompiler.compileExpression()</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.TemplateInterpreter.TemplateInterpreter(java.lang.CharSequence)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.TemplateInterpreter.TemplateInterpreter(java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.asm.AnnotationWriter.visit(java.lang.String, java.lang.Object)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.ast.NewObjectNode.updateClassName(int)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.refl.ReflectiveAccessorOptimizer.optimizeSetAccessor(char[], java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory, boolean, java.lang.Object)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.util.PropertyTools.isNumber(java.lang.Object)</inbound>
        </class>
        <class confirmed="no">
            <name>double[]</name>
            <inbound type="feature" confirmed="yes">org.mvel.asm.AnnotationWriter.visit(java.lang.String, java.lang.Object)</inbound>
        </class>
        <class confirmed="no">
            <name>float[]</name>
            <inbound type="feature" confirmed="yes">org.mvel.asm.AnnotationWriter.visit(java.lang.String, java.lang.Object)</inbound>
        </class>
        <class confirmed="no">
            <name>int[]</name>
            <inbound type="feature" confirmed="yes">org.mvel.asm.AnnotationWriter.visit(java.lang.String, java.lang.Object)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.asm.ClassReader.accept(org.mvel.asm.ClassVisitor, org.mvel.asm.Attribute[], int)</inbound>
        </class>
        <class confirmed="no">
            <name>long[]</name>
            <inbound type="feature" confirmed="yes">org.mvel.asm.AnnotationWriter.visit(java.lang.String, java.lang.Object)</inbound>
        </class>
        <class confirmed="no">
            <name>short[]</name>
            <inbound type="feature" confirmed="yes">org.mvel.asm.AnnotationWriter.visit(java.lang.String, java.lang.Object)</inbound>
        </class>
    </package>
    <package confirmed="no">
        <name>java.io</name>
        <class confirmed="no">
            <name>java.io.BufferedReader</name>
            <feature confirmed="no">
                <name>java.io.BufferedReader.BufferedReader(java.io.Reader)</name>
                <inbound type="feature" confirmed="yes">org.mvel.MVELSH.main(java.lang.String[])</inbound>
            </feature>
            <feature confirmed="no">
                <name>java.io.BufferedReader.readLine()</name>
                <inbound type="feature" confirmed="yes">org.mvel.MVELSH.main(java.lang.String[])</inbound>
            </feature>
        </class>
        <class confirmed="no">
            <name>java.io.File</name>
            <inbound type="feature" confirmed="yes">org.mvel.TemplateInterpreter.parse(java.io.File, java.lang.Object, java.util.Map)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.TemplateInterpreter.parse(java.io.File, java.lang.Object, java.util.Map, org.mvel.TemplateRegistry)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.TemplateInterpreter.parseToStream(java.io.File, java.lang.Object, java.util.Map, java.io.OutputStream)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.util.ParseTools.getDebugFileWriter()</inbound>
            <feature confirmed="no">
                <name>java.io.File.File(java.lang.String)</name>
                <inbound type="feature" confirmed="yes">org.mvel.util.ParseTools.getDebugFileWriter()</inbound>
            </feature>
            <feature confirmed="no">
                <name>java.io.File.exists()</name>
                <inbound type="feature" confirmed="yes">org.mvel.TemplateInterpreter.parse(java.io.File, java.lang.Object, java.util.Map, org.mvel.TemplateRegistry)</inbound>
            </feature>
            <feature confirmed="no">
                <name>java.io.File.getName()</name>
                <inbound type="feature" confirmed="yes">org.mvel.TemplateInterpreter.parse(java.io.File, java.lang.Object, java.util.Map, org.mvel.TemplateRegistry)</inbound>
            </feature>
            <feature confirmed="no">
                <name>java.io.File.length()</name>
                <inbound type="feature" confirmed="yes">org.mvel.TemplateInterpreter.parse(java.io.File, java.lang.Object, java.util.Map, org.mvel.TemplateRegistry)</inbound>
            </feature>
        </class>
        <class confirmed="no">
            <name>java.io.FileInputStream</name>
            <feature confirmed="no">
                <name>java.io.FileInputStream.FileInputStream(java.io.File)</name>
                <inbound type="feature" confirmed="yes">org.mvel.TemplateInterpreter.parse(java.io.File, java.lang.Object, java.util.Map, org.mvel.TemplateRegistry)</inbound>
            </feature>
            <feature confirmed="no">
                <name>java.io.FileInputStream.close()</name>
                <inbound type="feature" confirmed="yes">org.mvel.TemplateInterpreter.parse(java.io.File, java.lang.Object, java.util.Map, org.mvel.TemplateRegistry)</inbound>
            </feature>
            <feature confirmed="no">
                <name>java.io.FileInputStream.getChannel()</name>
                <inbound type="feature" confirmed="yes">org.mvel.TemplateInterpreter.parse(java.io.File, java.lang.Object, java.util.Map, org.mvel.TemplateRegistry)</inbound>
            </feature>
        </class>
        <class confirmed="no">
            <name>java.io.FileNotFoundException</name>
            <inbound type="feature" confirmed="yes">org.mvel.TemplateInterpreter.parse(java.io.File, java.lang.Object, java.util.Map, org.mvel.TemplateRegistry)</inbound>
        </class>
        <class confirmed="no">
            <name>java.io.FileWriter</name>
            <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.asm.ASMAccessorOptimizer.dumpAdvancedDebugging()</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.util.ParseTools.getDebugFileWriter()</inbound>
            <feature confirmed="no">
                <name>java.io.FileWriter.FileWriter(java.io.File, boolean)</name>
                <inbound type="feature" confirmed="yes">org.mvel.util.ParseTools.getDebugFileWriter()</inbound>
            </feature>
            <feature confirmed="no">
                <name>java.io.FileWriter.close()</name>
                <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.asm.ASMAccessorOptimizer.dumpAdvancedDebugging()</inbound>
            </feature>
            <feature confirmed="no">
                <name>java.io.FileWriter.flush()</name>
                <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.asm.ASMAccessorOptimizer.dumpAdvancedDebugging()</inbound>
            </feature>
            <feature confirmed="no">
                <name>java.io.FileWriter.write(java.lang.String)</name>
                <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.asm.ASMAccessorOptimizer.dumpAdvancedDebugging()</inbound>
            </feature>
        </class>
        <class confirmed="no">
            <name>java.io.IOException</name>
            <inbound type="feature" confirmed="yes">org.mvel.MVELTemplateRegistry.registerTemplate(java.io.Reader)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.TemplateInterpreter.parse(java.io.File, java.lang.Object, java.util.Map)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.TemplateInterpreter.parse(java.io.File, java.lang.Object, java.util.Map, org.mvel.TemplateRegistry)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.TemplateInterpreter.parseToStream(java.io.File, java.lang.Object, java.util.Map, java.io.OutputStream)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.asm.ClassReader.ClassReader(java.io.InputStream)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.asm.ClassReader.ClassReader(java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.asm.ClassReader.readClass(java.io.InputStream)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.asm.ASMAccessorOptimizer.dumpAdvancedDebugging()</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.util.ParseTools.getDebugFileWriter()</inbound>
            <feature confirmed="no">
                <name>java.io.IOException.IOException(java.lang.String)</name>
                <inbound type="feature" confirmed="yes">org.mvel.asm.ClassReader.readClass(java.io.InputStream)</inbound>
            </feature>
        </class>
        <class confirmed="no">
            <name>java.io.InputStream</name>
            <inbound type="feature" confirmed="yes">org.mvel.MVELSH.main(java.lang.String[])</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.asm.ClassReader.ClassReader(java.io.InputStream)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.asm.ClassReader.ClassReader(java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.asm.ClassReader.readClass(java.io.InputStream)</inbound>
            <feature confirmed="no">
                <name>java.io.InputStream.available()</name>
                <inbound type="feature" confirmed="yes">org.mvel.asm.ClassReader.readClass(java.io.InputStream)</inbound>
            </feature>
            <feature confirmed="no">
                <name>java.io.InputStream.read(byte[], int, int)</name>
                <inbound type="feature" confirmed="yes">org.mvel.asm.ClassReader.readClass(java.io.InputStream)</inbound>
            </feature>
        </class>
        <class confirmed="no">
            <name>java.io.InputStreamReader</name>
            <feature confirmed="no">
                <name>java.io.InputStreamReader.InputStreamReader(java.io.InputStream)</name>
                <inbound type="feature" confirmed="yes">org.mvel.MVELSH.main(java.lang.String[])</inbound>
            </feature>
        </class>
        <class confirmed="no">
            <name>java.io.OutputStream</name>
            <inbound type="feature" confirmed="yes">org.mvel.TemplateInterpreter.parseToStream(java.io.File, java.lang.Object, java.util.Map, java.io.OutputStream)</inbound>
        </class>
        <class confirmed="no">
            <name>java.io.OutputStreamWriter</name>
            <feature confirmed="no">
                <name>java.io.OutputStreamWriter.OutputStreamWriter(java.io.OutputStream)</name>
                <inbound type="feature" confirmed="yes">org.mvel.TemplateInterpreter.parseToStream(java.io.File, java.lang.Object, java.util.Map, java.io.OutputStream)</inbound>
            </feature>
            <feature confirmed="no">
                <name>java.io.OutputStreamWriter.close()</name>
                <inbound type="feature" confirmed="yes">org.mvel.TemplateInterpreter.parseToStream(java.io.File, java.lang.Object, java.util.Map, java.io.OutputStream)</inbound>
            </feature>
            <feature confirmed="no">
                <name>java.io.OutputStreamWriter.flush()</name>
                <inbound type="feature" confirmed="yes">org.mvel.TemplateInterpreter.parseToStream(java.io.File, java.lang.Object, java.util.Map, java.io.OutputStream)</inbound>
            </feature>
            <feature confirmed="no">
                <name>java.io.OutputStreamWriter.write(int)</name>
                <inbound type="feature" confirmed="yes">org.mvel.TemplateInterpreter.parseToStream(java.io.File, java.lang.Object, java.util.Map, java.io.OutputStream)</inbound>
            </feature>
        </class>
        <class confirmed="no">
            <name>java.io.PrintStream</name>
            <inbound type="feature" confirmed="yes">org.mvel.CompileException.CompileException(java.lang.String, java.util.List)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.MVELSH.main(java.lang.String[])</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.MVELSH.showHelp()</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.PropertyAccessor.reportCacheSizes()</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.TemplateCompiler.compileExpression()</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.optimizers.OptimizerFactory.static {}</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.asm.ASMAccessorOptimizer._initializeAccessor()</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.asm.ASMAccessorOptimizer.dumpAdvancedDebugging()</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.util.CompilerTools.optimizeAST(org.mvel.ASTLinkedList, boolean)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.util.ExecutionStack.showStack()</inbound>
            <feature confirmed="no">
                <name>java.io.PrintStream.flush()</name>
                <inbound type="feature" confirmed="yes">org.mvel.CompileException.CompileException(java.lang.String, java.util.List)</inbound>
            </feature>
            <feature confirmed="no">
                <name>java.io.PrintStream.print(java.lang.String)</name>
                <inbound type="feature" confirmed="yes">org.mvel.MVELSH.main(java.lang.String[])</inbound>
            </feature>
            <feature confirmed="no">
                <name>java.io.PrintStream.println(java.lang.String)</name>
                <inbound type="feature" confirmed="yes">org.mvel.CompileException.CompileException(java.lang.String, java.util.List)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.MVELSH.main(java.lang.String[])</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.MVELSH.showHelp()</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.PropertyAccessor.reportCacheSizes()</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.TemplateCompiler.compileExpression()</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.optimizers.OptimizerFactory.static {}</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.asm.ASMAccessorOptimizer._initializeAccessor()</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.asm.ASMAccessorOptimizer.dumpAdvancedDebugging()</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.util.CompilerTools.optimizeAST(org.mvel.ASTLinkedList, boolean)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.util.ExecutionStack.showStack()</inbound>
            </feature>
        </class>
        <class confirmed="no">
            <name>java.io.Reader</name>
            <inbound type="feature" confirmed="yes">org.mvel.MVELSH.main(java.lang.String[])</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.MVELTemplateRegistry.registerTemplate(java.io.Reader)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.TemplateRegistry.registerTemplate(java.io.Reader)</inbound>
            <feature confirmed="no">
                <name>java.io.Reader.read()</name>
                <inbound type="feature" confirmed="yes">org.mvel.MVELTemplateRegistry.registerTemplate(java.io.Reader)</inbound>
            </feature>
        </class>
        <class confirmed="no">
            <name>java.io.Serializable</name>
            <inbound type="class" confirmed="yes">org.mvel.ASTArrayList</inbound>
            <inbound type="class" confirmed="yes">org.mvel.ASTIterator</inbound>
            <inbound type="class" confirmed="yes">org.mvel.ASTNode</inbound>
            <inbound type="class" confirmed="yes">org.mvel.AbstractParser</inbound>
            <inbound type="class" confirmed="yes">org.mvel.AccessorNode</inbound>
            <inbound type="class" confirmed="yes">org.mvel.BlankLiteral</inbound>
            <inbound type="class" confirmed="yes">org.mvel.CompiledExpression</inbound>
            <inbound type="class" confirmed="yes">org.mvel.CompiledSetExpression</inbound>
            <inbound type="class" confirmed="yes">org.mvel.ExecutableStatement</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.MVEL.compileExpression(char[])</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.MVEL.compileExpression(char[], java.util.Map)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.MVEL.compileExpression(char[], java.util.Map, java.util.Map)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.MVEL.compileExpression(char[], java.util.Map, java.util.Map, java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.MVEL.compileExpression(java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.MVEL.compileExpression(java.lang.String, java.util.Map)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.MVEL.compileExpression(java.lang.String, java.util.Map, java.util.Map)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.MVEL.compileExpression(java.lang.String, java.util.Map, java.util.Map, java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.MVEL.compileSetExpression(char[])</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.MVEL.compileSetExpression(java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.MVEL.executeAllExpression(java.io.Serializable[], java.lang.Object, org.mvel.integration.VariableResolverFactory)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.MVEL.executeSetExpression(java.io.Serializable, java.lang.Object, java.lang.Object)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.MVEL.executeSetExpression(java.io.Serializable, java.lang.Object, org.mvel.integration.VariableResolverFactory, java.lang.Object)</inbound>
            <inbound type="class" confirmed="yes">org.mvel.ParserContext</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.TemplateInterpreter.execute(java.lang.Object, java.util.Map, org.mvel.TemplateRegistry)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.ast.AssertNode.AssertNode(char[], int)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.ast.AssignAdd.AssignAdd(char[], int, java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.ast.AssignDiv.AssignDiv(char[], int, java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.ast.AssignMult.AssignMult(char[], int, java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.ast.AssignSub.AssignSub(char[], int, java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.ast.AssignmentNode.AssignmentNode(char[], int, int, java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.ast.AssignmentNode.getReducedValueAccelerated(java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.ast.DeepAssignmentNode.DeepAssignmentNode(char[], int, int, java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.ast.DeepAssignmentNode.getReducedValueAccelerated(java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.ast.ForEachNode.ForEachNode(char[], char[], int)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.ast.ForEachNode.handleCond(char[])</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.ast.IfNode.IfNode(char[], char[], int)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.ast.IfNode.setElseBlock(char[])</inbound>
            <inbound type="class" confirmed="yes">org.mvel.ast.NewObjectNode$ArraySize</inbound>
            <inbound type="class" confirmed="yes">org.mvel.ast.NewObjectNode$NewObjectArray</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.ast.NewObjectNode.updateClassName(int)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.ast.RegExMatch.RegExMatch(char[], int, char[])</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.ast.ReturnNode.ReturnNode(char[], int)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.ast.ReturnNode.getReducedValueAccelerated(java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.ast.Substatement.Substatement(char[], int)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.ast.TypeCast.TypeCast(char[], int, int, int, java.lang.Class)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.ast.TypedVarNode.TypedVarNode(char[], int, java.lang.Class)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.ast.TypedVarNode.getReducedValueAccelerated(java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.ast.WhileNode.WhileNode(char[], char[], int)</inbound>
            <inbound type="class" confirmed="yes">org.mvel.ast.WithNode$ParmValuePair</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.ast.WithNode$ParmValuePair.WithNode$ParmValuePair(java.lang.String, org.mvel.ExecutableStatement)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.ast.WithNode$ParmValuePair.getSetExpression()</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.ast.WithNode$ParmValuePair.setExpression</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.ast.WithNode$ParmValuePair.setSetExpression(java.io.Serializable)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.ast.WithNode.WithNode(char[], char[], int)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.ast.WithNode.compileWithExpressions()</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.ast.WithNode.getReducedValueAccelerated(java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.debug.DebugTools.decompile(java.io.Serializable)</inbound>
            <inbound type="class" confirmed="yes">org.mvel.integration.VariableResolver</inbound>
            <inbound type="class" confirmed="yes">org.mvel.integration.VariableResolverFactory</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.asm.ASMAccessorOptimizer._getAccessor(java.lang.Object)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.asm.ASMAccessorOptimizer.getCollectionProperty(java.lang.Object, java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.asm.ASMAccessorOptimizer.getMethod(java.lang.Object, java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.asm.ASMAccessorOptimizer.optimizeObjectCreation(char[], java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.refl.ArrayAccessorNest.ArrayAccessorNest(java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.refl.ListAccessorNest.ListAccessorNest(java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.refl.MapAccessorNest.MapAccessorNest(java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.refl.ReflectiveAccessorOptimizer.compileConstructor(char[], java.lang.Object, org.mvel.integration.VariableResolverFactory)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.refl.ReflectiveAccessorOptimizer.getCollectionProperty(java.lang.Object, java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.refl.ReflectiveAccessorOptimizer.getMethod(java.lang.Object, java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.refl.collection.ExprValueAccessor.ExprValueAccessor(java.lang.String)</inbound>
            <inbound type="class" confirmed="yes">org.mvel.util.MethodStub</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.util.ParseTools.optimizeTree(org.mvel.CompiledExpression)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.util.ParseTools.subCompileExpression(char[])</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.util.ParseTools.subCompileExpression(java.lang.String)</inbound>
            <inbound type="class" confirmed="yes">org.mvel.util.Stack</inbound>
            <inbound type="class" confirmed="yes">org.mvel.util.StackElement</inbound>
        </class>
    </package>
    <package confirmed="no">
        <name>java.lang</name>
        <class confirmed="no">
            <name>java.lang.ArrayIndexOutOfBoundsException</name>
            <inbound type="feature" confirmed="yes">org.mvel.MVELInterpretedRuntime.parse()</inbound>
            <feature confirmed="no">
                <name>java.lang.ArrayIndexOutOfBoundsException.printStackTrace()</name>
                <inbound type="feature" confirmed="yes">org.mvel.MVELInterpretedRuntime.parse()</inbound>
            </feature>
        </class>
        <class confirmed="no">
            <name>java.lang.AssertionError</name>
            <feature confirmed="no">
                <name>java.lang.AssertionError.AssertionError()</name>
                <inbound type="feature" confirmed="yes">org.mvel.ast.OperatorNode.OperatorNode(java.lang.Integer)</inbound>
            </feature>
            <feature confirmed="no">
                <name>java.lang.AssertionError.AssertionError(java.lang.Object)</name>
                <inbound type="feature" confirmed="yes">org.mvel.ast.AssertNode.getReducedValue(java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.ast.AssertNode.getReducedValueAccelerated(java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory)</inbound>
            </feature>
        </class>
        <class confirmed="no">
            <name>java.lang.Boolean</name>
            <inbound type="feature" confirmed="yes">org.mvel.ASTNode.valRet(java.lang.Object)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.AbstractParser.arithmeticFunctionReduction(int)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.AbstractParser.reduce()</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.AbstractParser.static {}</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.MVEL.evalToBoolean(java.lang.String, java.lang.Object)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.MVEL.evalToBoolean(java.lang.String, java.lang.Object, java.util.Map)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.MVEL.evalToBoolean(java.lang.String, java.lang.Object, org.mvel.integration.VariableResolverFactory)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.MVEL.evalToBoolean(java.lang.String, java.util.Map)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.MVEL.evalToBoolean(java.lang.String, org.mvel.integration.VariableResolverFactory)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.MVELInterpretedRuntime.procBooleanOperator(int)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.MVELRuntime.execute(boolean, org.mvel.CompiledExpression, java.lang.Object, org.mvel.integration.VariableResolverFactory)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.TemplateInterpreter.execute(java.lang.Object, java.util.Map, org.mvel.TemplateRegistry)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.asm.AnnotationWriter.visit(java.lang.String, java.lang.Object)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.asm.ClassReader.readAnnotationValue(int, char[], java.lang.String, org.mvel.asm.AnnotationVisitor)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.asm.ClassWriter.newConstItem(java.lang.Object)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.ast.And.getReducedValueAccelerated(java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.ast.AssertNode.getReducedValue(java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.ast.AssertNode.getReducedValueAccelerated(java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.ast.IfNode.getReducedValue(java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.ast.IfNode.getReducedValueAccelerated(java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.ast.Or.getReducedValueAccelerated(java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.ast.WhileNode.getReducedValue(java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.ast.WhileNode.getReducedValueAccelerated(java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.conversion.BooleanCH$10.convert(java.lang.Object)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.conversion.BooleanCH$4.convert(java.lang.Object)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.conversion.BooleanCH$5.convert(java.lang.Object)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.conversion.BooleanCH$6.convert(java.lang.Object)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.conversion.BooleanCH$7.convert(java.lang.Object)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.conversion.BooleanCH$8.convert(java.lang.Object)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.conversion.BooleanCH$9.convert(java.lang.Object)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.math.IEEEFloatingPointMath.doBigDecimalArithmetic(java.math.BigDecimal, int, java.math.BigDecimal)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.math.IEEEFloatingPointMath.doOperationNonNumeric(java.lang.Object, int, java.lang.Object)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.math.IEEEFloatingPointMath.doOperationsSameType(int, java.lang.Object, int, java.lang.Object)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.math.IEEEFloatingPointMath.getBigDecimalFromType(java.lang.Object, int)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.math.IEEEFloatingPointMath.safeEquals(java.lang.Object, java.lang.Object)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.math.IEEEFloatingPointMath.safeNotEquals(java.lang.Object, java.lang.Object)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.math.JDK14CompatabilityMath.doBigDecimalArithmetic(java.math.BigDecimal, int, java.math.BigDecimal)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.math.JDK14CompatabilityMath.doOperationNonNumeric(java.lang.Object, int, java.lang.Object)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.math.JDK14CompatabilityMath.doOperationsSameType(int, java.lang.Object, int, java.lang.Object)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.math.JDK14CompatabilityMath.getBigDecimalFromType(java.lang.Object, int)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.math.JDK14CompatabilityMath.safeEquals(java.lang.Object, java.lang.Object)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.math.JDK14CompatabilityMath.safeNotEquals(java.lang.Object, java.lang.Object)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.asm.ASMAccessorOptimizer.getMethod(java.lang.Object, java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.asm.ASMAccessorOptimizer.writeOutLiteralWrapped(java.lang.Object)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.util.ParseTools.containsCheck(java.lang.Object, java.lang.Object)</inbound>
            <feature confirmed="no">
                <name>java.lang.Boolean.Boolean(boolean)</name>
                <inbound type="feature" confirmed="yes">org.mvel.ASTNode.valRet(java.lang.Object)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.AbstractParser.reduce()</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.MVELRuntime.execute(boolean, org.mvel.CompiledExpression, java.lang.Object, org.mvel.integration.VariableResolverFactory)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.ast.And.getReducedValueAccelerated(java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.ast.Or.getReducedValueAccelerated(java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.ast.RegExMatch.getReducedValue(java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.ast.RegExMatch.getReducedValueAccelerated(java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.conversion.BooleanCH$1.convert(java.lang.Object)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.math.IEEEFloatingPointMath.safeEquals(java.lang.Object, java.lang.Object)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.math.JDK14CompatabilityMath.safeEquals(java.lang.Object, java.lang.Object)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.math.JDK14CompatabilityMath.safeNotEquals(java.lang.Object, java.lang.Object)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.util.ArrayTools.listTranspose(boolean[])</inbound>
            </feature>
            <feature confirmed="no">
                <name>java.lang.Boolean.FALSE</name>
                <inbound type="feature" confirmed="yes">org.mvel.AbstractParser.static {}</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.asm.ClassReader.readAnnotationValue(int, char[], java.lang.String, org.mvel.asm.AnnotationVisitor)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.math.IEEEFloatingPointMath.doBigDecimalArithmetic(java.math.BigDecimal, int, java.math.BigDecimal)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.math.IEEEFloatingPointMath.doOperationNonNumeric(java.lang.Object, int, java.lang.Object)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.math.IEEEFloatingPointMath.doOperationsSameType(int, java.lang.Object, int, java.lang.Object)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.math.IEEEFloatingPointMath.safeEquals(java.lang.Object, java.lang.Object)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.math.IEEEFloatingPointMath.safeNotEquals(java.lang.Object, java.lang.Object)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.math.JDK14CompatabilityMath.doBigDecimalArithmetic(java.math.BigDecimal, int, java.math.BigDecimal)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.math.JDK14CompatabilityMath.doOperationNonNumeric(java.lang.Object, int, java.lang.Object)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.math.JDK14CompatabilityMath.doOperationsSameType(int, java.lang.Object, int, java.lang.Object)</inbound>
            </feature>
            <feature confirmed="no">
                <name>java.lang.Boolean.TRUE</name>
                <inbound type="feature" confirmed="yes">org.mvel.AbstractParser.static {}</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.asm.ClassReader.readAnnotationValue(int, char[], java.lang.String, org.mvel.asm.AnnotationVisitor)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.math.IEEEFloatingPointMath.doBigDecimalArithmetic(java.math.BigDecimal, int, java.math.BigDecimal)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.math.IEEEFloatingPointMath.doOperationNonNumeric(java.lang.Object, int, java.lang.Object)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.math.IEEEFloatingPointMath.doOperationsSameType(int, java.lang.Object, int, java.lang.Object)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.math.IEEEFloatingPointMath.safeEquals(java.lang.Object, java.lang.Object)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.math.IEEEFloatingPointMath.safeNotEquals(java.lang.Object, java.lang.Object)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.math.JDK14CompatabilityMath.doBigDecimalArithmetic(java.math.BigDecimal, int, java.math.BigDecimal)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.math.JDK14CompatabilityMath.doOperationNonNumeric(java.lang.Object, int, java.lang.Object)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.math.JDK14CompatabilityMath.doOperationsSameType(int, java.lang.Object, int, java.lang.Object)</inbound>
            </feature>
            <feature confirmed="no">
                <name>java.lang.Boolean.TYPE</name>
                <inbound type="feature" confirmed="yes">org.mvel.DataConversion.static {}</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.asm.Type.getDescriptor(java.lang.StringBuffer, java.lang.Class)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.asm.Type.getType(java.lang.Class)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.conversion.BooleanCH.static {}</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.asm.ASMAccessorOptimizer.getMethod(java.lang.Object, java.lang.String)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.asm.ASMAccessorOptimizer.getWrapperClass(java.lang.Class)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.asm.ASMAccessorOptimizer.unwrapPrimitive(java.lang.Class)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.asm.ASMAccessorOptimizer.wrapPrimitive(java.lang.Class)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.asm.ASMAccessorOptimizer.writeOutLiteralWrapped(java.lang.Object)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.util.ParseTools.boxPrimitive(java.lang.Class)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.util.ParseTools.resolveType(java.lang.Class)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.util.ParseTools.unboxPrimitive(java.lang.Class)</inbound>
            </feature>
            <feature confirmed="no">
                <name>java.lang.Boolean.booleanValue()</name>
                <inbound type="feature" confirmed="yes">org.mvel.ASTNode.valRet(java.lang.Object)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.AbstractParser.arithmeticFunctionReduction(int)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.AbstractParser.reduce()</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.MVELInterpretedRuntime.procBooleanOperator(int)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.MVELRuntime.execute(boolean, org.mvel.CompiledExpression, java.lang.Object, org.mvel.integration.VariableResolverFactory)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.TemplateInterpreter.execute(java.lang.Object, java.util.Map, org.mvel.TemplateRegistry)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.asm.AnnotationWriter.visit(java.lang.String, java.lang.Object)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.asm.ClassWriter.newConstItem(java.lang.Object)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.ast.And.getReducedValueAccelerated(java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.ast.AssertNode.getReducedValue(java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.ast.AssertNode.getReducedValueAccelerated(java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.ast.IfNode.getReducedValue(java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.ast.IfNode.getReducedValueAccelerated(java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.ast.Or.getReducedValueAccelerated(java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.ast.WhileNode.getReducedValue(java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.ast.WhileNode.getReducedValueAccelerated(java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.math.IEEEFloatingPointMath.doOperationNonNumeric(java.lang.Object, int, java.lang.Object)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.math.IEEEFloatingPointMath.getBigDecimalFromType(java.lang.Object, int)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.math.JDK14CompatabilityMath.doOperationsSameType(int, java.lang.Object, int, java.lang.Object)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.math.JDK14CompatabilityMath.getBigDecimalFromType(java.lang.Object, int)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.asm.ASMAccessorOptimizer.getMethod(java.lang.Object, java.lang.String)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.util.ParseTools.containsCheck(java.lang.Object, java.lang.Object)</inbound>
            </feature>
            <feature confirmed="no">
                <name>java.lang.Boolean.getBoolean(java.lang.String)</name>
                <inbound type="feature" confirmed="yes">org.mvel.MVEL.static {}</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.TemplateCompiler.static {}</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.optimizers.OptimizerFactory.static {}</inbound>
            </feature>
        </class>
        <class confirmed="no">
            <name>java.lang.Byte</name>
            <inbound type="feature" confirmed="yes">org.mvel.asm.AnnotationWriter.visit(java.lang.String, java.lang.Object)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.asm.ClassWriter.newConstItem(java.lang.Object)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.conversion.ByteCH$3.convert(java.lang.Object)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.asm.ASMAccessorOptimizer.writeOutLiteralWrapped(java.lang.Object)</inbound>
            <feature confirmed="no">
                <name>java.lang.Byte.Byte(byte)</name>
                <inbound type="feature" confirmed="yes">org.mvel.asm.ClassReader.readAnnotationValue(int, char[], java.lang.String, org.mvel.asm.AnnotationVisitor)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.conversion.ByteCH$1.convert(java.lang.Object)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.conversion.ByteCH$3.convert(java.lang.Object)</inbound>
            </feature>
            <feature confirmed="no">
                <name>java.lang.Byte.TYPE</name>
                <inbound type="feature" confirmed="yes">org.mvel.DataConversion.static {}</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.asm.Type.getDescriptor(java.lang.StringBuffer, java.lang.Class)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.asm.Type.getType(java.lang.Class)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.asm.ASMAccessorOptimizer.getWrapperClass(java.lang.Class)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.asm.ASMAccessorOptimizer.unwrapPrimitive(java.lang.Class)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.asm.ASMAccessorOptimizer.wrapPrimitive(java.lang.Class)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.asm.ASMAccessorOptimizer.writeOutLiteralWrapped(java.lang.Object)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.util.ParseTools.boxPrimitive(java.lang.Class)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.util.ParseTools.resolveType(java.lang.Class)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.util.ParseTools.unboxPrimitive(java.lang.Class)</inbound>
            </feature>
            <feature confirmed="no">
                <name>java.lang.Byte.byteValue()</name>
                <inbound type="feature" confirmed="yes">org.mvel.asm.AnnotationWriter.visit(java.lang.String, java.lang.Object)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.conversion.ByteCH$3.convert(java.lang.Object)</inbound>
            </feature>
            <feature confirmed="no">
                <name>java.lang.Byte.intValue()</name>
                <inbound type="feature" confirmed="yes">org.mvel.asm.ClassWriter.newConstItem(java.lang.Object)</inbound>
            </feature>
            <feature confirmed="no">
                <name>java.lang.Byte.parseByte(java.lang.String)</name>
                <inbound type="feature" confirmed="yes">org.mvel.conversion.ByteCH$1.convert(java.lang.Object)</inbound>
            </feature>
        </class>
        <class confirmed="no">
            <name>java.lang.CharSequence</name>
            <inbound type="feature" confirmed="yes">org.mvel.AbstractParser.reduce()</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.CompileException.CompileException(java.lang.String, char[], int)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.CompileException.CompileException(java.lang.String, char[], int, boolean)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.CompileException.CompileException(java.lang.String, char[], int, java.lang.Exception)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.CompileException.showCodeNearError(char[], int)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.PropertyAccessor.getCollectionProperty(java.lang.Object, java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.TemplateCompiler.showCodeNearError()</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.TemplateCompiler.structuredCaptureArray(int)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.TemplateInterpreter.TemplateInterpreter(java.lang.CharSequence)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.TemplateInterpreter.parse(java.io.File, java.lang.Object, java.util.Map, org.mvel.TemplateRegistry)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.TemplateInterpreter.parse(java.lang.CharSequence, java.lang.Object, java.util.Map)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.TemplateInterpreter.parse(java.lang.CharSequence, java.lang.Object, java.util.Map, org.mvel.TemplateRegistry)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.TemplateInterpreter.parseToStream(java.io.File, java.lang.Object, java.util.Map, java.io.OutputStream)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.ast.ForEachNode.getReducedValue(java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.ast.ForEachNode.getReducedValueAccelerated(java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.ast.RegExMatch.getReducedValue(java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.ast.RegExMatch.getReducedValueAccelerated(java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.asm.ASMAccessorOptimizer.getCollectionProperty(java.lang.Object, java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.refl.ReflectiveAccessorOptimizer.getCollectionProperty(java.lang.Object, java.lang.String)</inbound>
            <inbound type="class" confirmed="yes">org.mvel.util.StringAppender</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.util.StringAppender.StringAppender(java.lang.CharSequence)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.util.StringAppender.append(java.lang.CharSequence)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.util.StringAppender.subSequence(int, int)</inbound>
            <feature confirmed="no">
                <name>java.lang.CharSequence.charAt(int)</name>
                <inbound type="feature" confirmed="yes">org.mvel.PropertyAccessor.getCollectionProperty(java.lang.Object, java.lang.String)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.TemplateInterpreter.parseToStream(java.io.File, java.lang.Object, java.util.Map, java.io.OutputStream)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.asm.ASMAccessorOptimizer.getCollectionProperty(java.lang.Object, java.lang.String)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.refl.ReflectiveAccessorOptimizer.getCollectionProperty(java.lang.Object, java.lang.String)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.util.StringAppender.StringAppender(java.lang.CharSequence)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.util.StringAppender.append(java.lang.CharSequence)</inbound>
            </feature>
            <feature confirmed="no">
                <name>java.lang.CharSequence.length()</name>
                <inbound type="feature" confirmed="yes">org.mvel.TemplateInterpreter.parseToStream(java.io.File, java.lang.Object, java.util.Map, java.io.OutputStream)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.util.StringAppender.StringAppender(java.lang.CharSequence)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.util.StringAppender.append(java.lang.CharSequence)</inbound>
            </feature>
            <feature confirmed="no">
                <name>java.lang.CharSequence.toString()</name>
                <inbound type="feature" confirmed="yes">org.mvel.TemplateInterpreter.TemplateInterpreter(java.lang.CharSequence)</inbound>
            </feature>
        </class>
        <class confirmed="no">
            <name>java.lang.Character</name>
            <inbound type="feature" confirmed="yes">org.mvel.asm.AnnotationWriter.visit(java.lang.String, java.lang.Object)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.asm.ClassWriter.newConstItem(java.lang.Object)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.conversion.CharCH$3.convert(java.lang.Object)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.math.IEEEFloatingPointMath.getBigDecimalFromType(java.lang.Object, int)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.asm.ASMAccessorOptimizer.writeOutLiteralWrapped(java.lang.Object)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.util.ParseTools.increment(java.lang.Object)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.util.PropertyTools.isNumber(java.lang.Object)</inbound>
            <feature confirmed="no">
                <name>java.lang.Character.Character(char)</name>
                <inbound type="feature" confirmed="yes">org.mvel.PropertyAccessor.getCollectionProperty(java.lang.Object, java.lang.String)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.asm.ClassReader.readAnnotationValue(int, char[], java.lang.String, org.mvel.asm.AnnotationVisitor)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.ast.ForEachNode.getReducedValue(java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.ast.ForEachNode.getReducedValueAccelerated(java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.conversion.CharCH$1.convert(java.lang.Object)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.conversion.CharCH$3.convert(java.lang.Object)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.conversion.CharCH$4.convert(java.lang.Object)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.conversion.CharCH$5.convert(java.lang.Object)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.asm.ASMAccessorOptimizer.getCollectionProperty(java.lang.Object, java.lang.String)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.refl.IndexedCharSeqAccessor.getValue(java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.refl.IndexedCharSeqAccessorNest.getValue(java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.refl.ReflectiveAccessorOptimizer.getCollectionProperty(java.lang.Object, java.lang.String)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.util.ArrayTools.listTranspose(char[])</inbound>
            </feature>
            <feature confirmed="no">
                <name>java.lang.Character.TYPE</name>
                <inbound type="feature" confirmed="yes">org.mvel.DataConversion.static {}</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.asm.Type.getDescriptor(java.lang.StringBuffer, java.lang.Class)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.asm.Type.getType(java.lang.Class)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.asm.ASMAccessorOptimizer.getCollectionProperty(java.lang.Object, java.lang.String)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.asm.ASMAccessorOptimizer.getWrapperClass(java.lang.Class)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.asm.ASMAccessorOptimizer.unwrapPrimitive(java.lang.Class)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.asm.ASMAccessorOptimizer.wrapPrimitive(java.lang.Class)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.asm.ASMAccessorOptimizer.writeOutLiteralWrapped(java.lang.Object)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.util.ParseTools.resolveType(java.lang.Class)</inbound>
            </feature>
            <feature confirmed="no">
                <name>java.lang.Character.charValue()</name>
                <inbound type="feature" confirmed="yes">org.mvel.asm.AnnotationWriter.visit(java.lang.String, java.lang.Object)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.asm.ClassWriter.newConstItem(java.lang.Object)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.conversion.CharCH$3.convert(java.lang.Object)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.math.IEEEFloatingPointMath.getBigDecimalFromType(java.lang.Object, int)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.util.ParseTools.increment(java.lang.Object)</inbound>
            </feature>
            <feature confirmed="no">
                <name>java.lang.Character.isJavaIdentifierPart(char)</name>
                <inbound type="feature" confirmed="yes">org.mvel.PropertyAccessor.nextToken()</inbound>
            </feature>
            <feature confirmed="no">
                <name>java.lang.Character.isWhitespace(char)</name>
                <inbound type="feature" confirmed="yes">org.mvel.AbstractParser.blockContinues()</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.AbstractParser.captureCodeBlock(int)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.AbstractParser.captureToEOT()</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.AbstractParser.isStatementManuallyTerminated()</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.AbstractParser.nextToken()</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.AbstractParser.setExpression(char[])</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.AbstractParser.setExpression(java.lang.String)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.AbstractParser.skipToNextTokenJunction()</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.AbstractParser.skipWhitespace()</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.AbstractParser.skipWhitespaceWithLineAccounting()</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.AbstractParser.tokenContinues()</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.AbstractParser.trimLeft(int)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.AbstractParser.trimRight(int)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.AbstractParser.trimWhitespace()</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.CompileException.showCodeNearError(char[], int)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.MacroProcessor.captureToWhitespace()</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.MacroProcessor.parse(char[])</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.PropertyAccessor.nextToken()</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.PropertyAccessor.trimLeft(int)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.PropertyAccessor.whiteSpaceSkip()</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.TemplateCompiler.buildIncludeRef(char[])</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.TemplateCompiler.compileExpression()</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.ast.NewObjectNode.updateClassName(int)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.optimizers.AbstractOptimizer.containsStringLiteralTermination()</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.optimizers.AbstractOptimizer.whiteSpaceSkip()</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.util.CollectionParser.parseCollection(char[])</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.util.CollectionParser.subset(char[], int, int)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.util.ParseTools.balancedCaptureWithLineAccounting(char[], int, char)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.util.ParseTools.parseParameterList(char[], int, int)</inbound>
            </feature>
        </class>
        <class confirmed="no">
            <name>java.lang.Class</name>
            <inbound type="feature" confirmed="yes">org.mvel.ASTArrayList.showNodeChain()</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.ASTNode.egressType</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.ASTNode.getEgressType()</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.ASTNode.getReducedValue(java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.ASTNode.getReducedValueAccelerated(java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.ASTNode.setEgressType(java.lang.Class)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.ASTNode.setName(char[])</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.ASTNode.tryStaticAccess(java.lang.Object, org.mvel.integration.VariableResolverFactory)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.AbstractParser.createPropertyToken(int, int)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.AbstractParser.nextToken()</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.AbstractParser.reduce()</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.AbstractParser.static {}</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.BlankLiteral.equals(java.lang.Object)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.CompiledExpression.CompiledExpression(org.mvel.ASTIterator, java.lang.String, java.lang.Class, org.mvel.ParserContext, boolean)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.CompiledExpression.accessorOptimizer</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.CompiledExpression.computeTypeConversionRule()</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.CompiledExpression.getAccessorOptimizer()</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.CompiledExpression.getKnownEgressType()</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.CompiledExpression.getKnownIngressType()</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.CompiledExpression.knownEgressType</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.CompiledExpression.knownIngressType</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.CompiledExpression.setAccessorOptimizer(java.lang.Class)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.CompiledExpression.setKnownEgressType(java.lang.Class)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.CompiledExpression.setKnownIngressType(java.lang.Class)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.CompiledExpression.setupOptimizers()</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.ConversionHandler.canConvertFrom(java.lang.Class)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.DataConversion.addConversionHandler(java.lang.Class, org.mvel.ConversionHandler)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.DataConversion.canConvert(java.lang.Class, java.lang.Class)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.DataConversion.convert(java.lang.Object, java.lang.Class)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.DataConversion.static {}</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.ExecutableAccessor.ExecutableAccessor(org.mvel.ASTNode, boolean, java.lang.Class)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.ExecutableAccessor.computeTypeConversionRule()</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.ExecutableAccessor.egress</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.ExecutableAccessor.getKnownEgressType()</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.ExecutableAccessor.getKnownIngressType()</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.ExecutableAccessor.ingress</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.ExecutableAccessor.setKnownEgressType(java.lang.Class)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.ExecutableAccessor.setKnownIngressType(java.lang.Class)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.ExecutableLiteral.getKnownEgressType()</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.ExecutableLiteral.getKnownIngressType()</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.ExecutableLiteral.setKnownEgressType(java.lang.Class)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.ExecutableLiteral.setKnownIngressType(java.lang.Class)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.ExecutableStatement.getKnownEgressType()</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.ExecutableStatement.getKnownIngressType()</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.ExecutableStatement.setKnownEgressType(java.lang.Class)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.ExecutableStatement.setKnownIngressType(java.lang.Class)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.ExpressionCompiler._compile()</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.ExpressionCompiler.getReturnType()</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.ExpressionCompiler.returnType</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.ExpressionCompiler.setReturnType(java.lang.Class)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.ExpressionCompiler.verify(org.mvel.ParserContext, org.mvel.ASTNode)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.MVEL.eval(char[], java.lang.Object, java.lang.Class)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.MVEL.eval(char[], java.lang.Object, java.util.Map, java.lang.Class)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.MVEL.eval(char[], java.lang.Object, org.mvel.integration.VariableResolverFactory, java.lang.Class)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.MVEL.eval(char[], java.util.Map, java.lang.Class)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.MVEL.eval(java.lang.String, java.lang.Object, java.lang.Class)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.MVEL.eval(java.lang.String, java.lang.Object, java.util.Map, java.lang.Class)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.MVEL.eval(java.lang.String, java.lang.Object, org.mvel.integration.VariableResolverFactory, java.lang.Class)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.MVEL.eval(java.lang.String, java.util.Map, java.lang.Class)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.MVEL.eval(java.lang.String, org.mvel.integration.VariableResolverFactory, java.lang.Class)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.MVEL.evalToBoolean(java.lang.String, java.lang.Object)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.MVEL.evalToBoolean(java.lang.String, java.lang.Object, java.util.Map)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.MVEL.evalToBoolean(java.lang.String, java.lang.Object, org.mvel.integration.VariableResolverFactory)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.MVEL.evalToBoolean(java.lang.String, org.mvel.integration.VariableResolverFactory)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.MVEL.executeExpression(java.lang.Object, java.lang.Object, java.lang.Class)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.MVEL.executeExpression(java.lang.Object, java.lang.Object, java.util.Map, java.lang.Class)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.MVEL.executeExpression(java.lang.Object, java.util.Map, java.lang.Class)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.MVELInterpretedRuntime.getImport(java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.MVELInterpretedRuntime.parse()</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.MVELRuntime.execute(boolean, org.mvel.CompiledExpression, java.lang.Object, org.mvel.integration.VariableResolverFactory)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.ParserContext.addImport(java.lang.Class)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.ParserContext.addImport(java.lang.String, java.lang.Class)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.ParserContext.addInput(java.lang.String, java.lang.Class)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.ParserContext.addVariable(java.lang.String, java.lang.Class)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.ParserContext.checkForDynamicImport(java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.ParserContext.getImport(java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.ParserContext.getVarOrInputType(java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.ParserContext.setImports(java.util.Map)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.PropertyAccessor.addMethodCache(java.lang.Class, java.lang.Integer, java.lang.reflect.Method)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.PropertyAccessor.addReadCache(java.lang.Class, java.lang.Integer, java.lang.reflect.Member)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.PropertyAccessor.addWriteCache(java.lang.Class, java.lang.Integer, java.lang.reflect.Member)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.PropertyAccessor.checkMethodCache(java.lang.Class, java.lang.Integer)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.PropertyAccessor.checkReadCache(java.lang.Class, java.lang.Integer)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.PropertyAccessor.checkWriteCache(java.lang.Class, java.lang.Integer)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.PropertyAccessor.get()</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.PropertyAccessor.getBeanProperty(java.lang.Object, java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.PropertyAccessor.getCollectionProperty(java.lang.Object, java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.PropertyAccessor.getMethod(java.lang.Object, java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.PropertyAccessor.reportCacheSizes()</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.PropertyAccessor.set(java.lang.Object)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.PropertyVerifier.analyze()</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.PropertyVerifier.getBeanProperty(java.lang.Class, java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.PropertyVerifier.getCollectionProperty(java.lang.Class, java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.PropertyVerifier.getMethod(java.lang.Class, java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.asm.ClassWriter.getCommonSuperClass(java.lang.String, java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.asm.Type.getArgumentTypes(java.lang.reflect.Method)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.asm.Type.getConstructorDescriptor(java.lang.reflect.Constructor)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.asm.Type.getDescriptor(java.lang.Class)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.asm.Type.getDescriptor(java.lang.StringBuffer, java.lang.Class)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.asm.Type.getInternalName(java.lang.Class)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.asm.Type.getMethodDescriptor(java.lang.reflect.Method)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.asm.Type.getReturnType(java.lang.reflect.Method)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.asm.Type.getType(java.lang.Class)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.ast.AssignmentNode.AssignmentNode(char[], int, int, java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.ast.AssignmentNode.getReducedValueAccelerated(java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.ast.DeepAssignmentNode.DeepAssignmentNode(char[], int, int, java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.ast.ForEachNode.getReducedValue(java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.ast.ForEachNode.getReducedValueAccelerated(java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.ast.IfNode.getReducedValue(java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.ast.IfNode.getReducedValueAccelerated(java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.ast.ImportNode.ImportNode(char[])</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.ast.ImportNode.getImportClass()</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.ast.ImportNode.getReducedValueAccelerated(java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.ast.ImportNode.importClass</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.ast.InlineCollectionNode.getReducedValueAccelerated(java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.ast.LiteralNode.LiteralNode(java.lang.Object, java.lang.Class)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.ast.NewObjectNode$NewObjectArray.NewObjectNode$NewObjectArray(java.lang.Class, org.mvel.ExecutableStatement[])</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.ast.NewObjectNode$NewObjectArray.arrayType</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.ast.NewObjectNode$NewObjectArray.getValue(java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.ast.NewObjectNode.EMPTYCLS</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.ast.NewObjectNode.NewObjectNode(char[], int)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.ast.NewObjectNode.getReducedValue(java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.ast.NewObjectNode.getReducedValueAccelerated(java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.ast.NewObjectNode.rewriteClassReferenceToFQCN(int)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.ast.NewObjectNode.static {}</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.ast.OperatorNode.static {}</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.ast.PropertyASTNode.initializePropertyNode(java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.ast.StaticImportNode.StaticImportNode(char[], int)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.ast.StaticImportNode.declaringClass</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.ast.StaticImportNode.resolveMethod()</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.ast.Substatement.Substatement(char[], int)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.ast.TypeCast.TypeCast(char[], int, int, int, java.lang.Class)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.ast.TypeCast.getReducedValue(java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.ast.TypeCast.getReducedValueAccelerated(java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.ast.TypedVarNode.TypedVarNode(char[], int, java.lang.Class)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.ast.TypedVarNode.getReducedValue(java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.ast.TypedVarNode.getReducedValueAccelerated(java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.conversion.ArrayCH.canConvertFrom(java.lang.Class)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.conversion.ArrayCH.convertFrom(java.lang.Object)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.conversion.ArrayCH.static {}</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.conversion.BigDecimalCH.canConvertFrom(java.lang.Class)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.conversion.BigDecimalCH.convertFrom(java.lang.Object)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.conversion.BigDecimalCH.static {}</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.conversion.BigIntegerCH.canConvertFrom(java.lang.Class)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.conversion.BigIntegerCH.convertFrom(java.lang.Object)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.conversion.BigIntegerCH.static {}</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.conversion.BooleanCH$2.convert(java.lang.Object)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.conversion.BooleanCH.canConvertFrom(java.lang.Class)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.conversion.BooleanCH.convertFrom(java.lang.Object)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.conversion.BooleanCH.static {}</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.conversion.ByteCH$2.convert(java.lang.Object)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.conversion.ByteCH.canConvertFrom(java.lang.Class)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.conversion.ByteCH.convertFrom(java.lang.Object)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.conversion.ByteCH.static {}</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.conversion.CharArrayCH.canConvertFrom(java.lang.Class)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.conversion.CharArrayCH.convertFrom(java.lang.Object)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.conversion.CharArrayCH.static {}</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.conversion.CharCH$2.convert(java.lang.Object)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.conversion.CharCH.canConvertFrom(java.lang.Class)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.conversion.CharCH.convertFrom(java.lang.Object)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.conversion.CharCH.static {}</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.conversion.DoubleCH$2.convert(java.lang.Object)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.conversion.DoubleCH.canConvertFrom(java.lang.Class)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.conversion.DoubleCH.convertFrom(java.lang.Object)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.conversion.DoubleCH.static {}</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.conversion.FloatCH$2.convert(java.lang.Object)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.conversion.FloatCH.canConvertFrom(java.lang.Class)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.conversion.FloatCH.convertFrom(java.lang.Object)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.conversion.FloatCH.static {}</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.conversion.IntArrayCH.canConvertFrom(java.lang.Class)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.conversion.IntArrayCH.convertFrom(java.lang.Object)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.conversion.IntArrayCH.static {}</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.conversion.IntegerCH.canConvertFrom(java.lang.Class)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.conversion.IntegerCH.convertFrom(java.lang.Object)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.conversion.IntegerCH.static {}</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.conversion.LongCH$2.convert(java.lang.Object)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.conversion.LongCH.canConvertFrom(java.lang.Class)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.conversion.LongCH.convertFrom(java.lang.Object)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.conversion.LongCH.static {}</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.conversion.ObjectCH.canConvertFrom(java.lang.Class)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.conversion.PrimArrayHandler$1.convert(java.lang.Object)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.conversion.PrimArrayHandler$2.convert(java.lang.Object)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.conversion.PrimArrayHandler.PrimArrayHandler(java.lang.Class)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.conversion.PrimArrayHandler.access$0(org.mvel.conversion.PrimArrayHandler)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.conversion.PrimArrayHandler.access$1(java.lang.Class, java.lang.Object[], java.lang.Class)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.conversion.PrimArrayHandler.canConvertFrom(java.lang.Class)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.conversion.PrimArrayHandler.convertFrom(java.lang.Object)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.conversion.PrimArrayHandler.handleLooseTypeConversion(java.lang.Class, java.lang.Object[], java.lang.Class)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.conversion.PrimArrayHandler.primitiveType</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.conversion.PrimIntArrayCH.canConvertFrom(java.lang.Class)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.conversion.PrimIntArrayCH.convertFrom(java.lang.Object)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.conversion.PrimIntArrayCH.static {}</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.conversion.ShortCH$2.convert(java.lang.Object)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.conversion.ShortCH.canConvertFrom(java.lang.Class)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.conversion.ShortCH.convertFrom(java.lang.Object)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.conversion.ShortCH.static {}</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.conversion.StringArrayCH.canConvertFrom(java.lang.Class)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.conversion.StringArrayCH.convertFrom(java.lang.Object)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.conversion.StringArrayCH.static {}</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.conversion.StringCH.canConvertFrom(java.lang.Class)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.conversion.UnitConversion.canConvertFrom(java.lang.Class)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.conversion.UnitConversion.convertFrom(java.lang.Object)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.debug.DebugTools.decompile(java.io.Serializable)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.debug.DebugTools.decompile(org.mvel.CompiledExpression, boolean, org.mvel.debug.DebugTools$DecompileContext)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.debug.DebugTools.determineType(java.lang.String, org.mvel.CompiledExpression)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.integration.VariableResolver.getType()</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.integration.VariableResolver.setStaticType(java.lang.Class)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.integration.VariableResolverFactory.createVariable(java.lang.String, java.lang.Object, java.lang.Class)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.integration.impl.ClassImportResolver.ClassImportResolver(java.lang.String, java.lang.Class)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.integration.impl.ClassImportResolver.getType()</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.integration.impl.ClassImportResolver.getValue()</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.integration.impl.ClassImportResolver.setStaticType(java.lang.Class)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.integration.impl.ClassImportResolver.type</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.integration.impl.ClassImportResolverFactory.addClass(java.lang.Class)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.integration.impl.ClassImportResolverFactory.createVariable(java.lang.String, java.lang.Object, java.lang.Class)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.integration.impl.ClassImportResolverFactory.isResolveable(java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.integration.impl.ItemResolverFactory$ItemResolver.ItemResolverFactory$ItemResolver(java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.integration.impl.ItemResolverFactory$ItemResolver.getType()</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.integration.impl.ItemResolverFactory$ItemResolver.setStaticType(java.lang.Class)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.integration.impl.ItemResolverFactory$ItemResolver.type</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.integration.impl.ItemResolverFactory.createVariable(java.lang.String, java.lang.Object, java.lang.Class)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.integration.impl.MapVariableResolver.MapVariableResolver(java.util.Map, java.lang.String, java.lang.Class)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.integration.impl.MapVariableResolver.MapVariableResolver(java.util.Map, java.lang.String, java.lang.Class, boolean)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.integration.impl.MapVariableResolver.getType()</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.integration.impl.MapVariableResolver.knownType</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.integration.impl.MapVariableResolver.setStaticType(java.lang.Class)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.integration.impl.MapVariableResolver.setValue(java.lang.Object)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.integration.impl.MapVariableResolverFactory.createVariable(java.lang.String, java.lang.Object, java.lang.Class)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.integration.impl.SimpleValueResolver.getType()</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.integration.impl.SimpleValueResolver.setStaticType(java.lang.Class)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.integration.impl.StaticMethodImportResolver.getType()</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.integration.impl.StaticMethodImportResolver.setStaticType(java.lang.Class)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.integration.impl.StaticMethodImportResolverFactory.createVariable(java.lang.String, java.lang.Object, java.lang.Class)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.math.IEEEFloatingPointMath._doOperations(int, java.lang.Object, int, int, java.lang.Object)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.math.IEEEFloatingPointMath.doOperation(java.lang.Object, int, java.lang.Object)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.math.IEEEFloatingPointMath.doOperationNonNumeric(java.lang.Object, int, java.lang.Object)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.math.JDK14CompatabilityMath._doOperations(int, java.lang.Object, int, int, java.lang.Object)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.math.JDK14CompatabilityMath.doOperation(java.lang.Object, int, java.lang.Object)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.math.JDK14CompatabilityMath.doOperationNonNumeric(java.lang.Object, int, java.lang.Object)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.optimizers.AbstractOptimizer.tryStaticAccess()</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.optimizers.AccessorOptimizer.getEgressType()</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.optimizers.OptimizerFactory.getAccessorCompiler(java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.optimizers.OptimizerFactory.getDefaultAccessorCompiler()</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.optimizers.OptimizerFactory.getThreadAccessorOptimizer()</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.optimizers.OptimizerFactory.setDefaultOptimizer(java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.optimizers.OptimizerFactory.setThreadAccessorOptimizer(java.lang.Class)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.optimizers.OptimizerFactory.static {}</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.optimizers.OptimizerHook.isOptimizerSupported(java.lang.Class)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.asm.ASMAccessorOptimizer.EMPTYCLS</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.asm.ASMAccessorOptimizer._finishJIT()</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.asm.ASMAccessorOptimizer._getAccessor(java.lang.Object)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.asm.ASMAccessorOptimizer._initializeAccessor()</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.asm.ASMAccessorOptimizer.anyArrayCheck(java.lang.Class)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.asm.ASMAccessorOptimizer.checkcast(java.lang.Class)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.asm.ASMAccessorOptimizer.dataConversion(java.lang.Class)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.asm.ASMAccessorOptimizer.getBeanProperty(java.lang.Object, java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.asm.ASMAccessorOptimizer.getCollectionProperty(java.lang.Object, java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.asm.ASMAccessorOptimizer.getEgressType()</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.asm.ASMAccessorOptimizer.getMethod(java.lang.Object, java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.asm.ASMAccessorOptimizer.getWrapperClass(java.lang.Class)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.asm.ASMAccessorOptimizer.ldcClassConstant(java.lang.Class)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.asm.ASMAccessorOptimizer.loadClass(java.lang.String, byte[])</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.asm.ASMAccessorOptimizer.optimizeCollection(char[], java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.asm.ASMAccessorOptimizer.optimizeObjectCreation(char[], java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.asm.ASMAccessorOptimizer.returnType</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.asm.ASMAccessorOptimizer.static {}</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.asm.ASMAccessorOptimizer.unwrapPrimitive(java.lang.Class)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.asm.ASMAccessorOptimizer.wrapPrimitive(java.lang.Class)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.asm.ASMAccessorOptimizer.writeLiteralOrSubexpression(java.lang.Object)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.asm.ASMAccessorOptimizer.writeLiteralOrSubexpression(java.lang.Object, java.lang.Class)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.asm.ASMAccessorOptimizer.writeOutLiteralWrapped(java.lang.Object)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.refl.ArrayAccessorNest.setValue(java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory, java.lang.Object)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.refl.ConstructorAccessor.ConstructorAccessor(java.lang.reflect.Constructor, org.mvel.ExecutableStatement[])</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.refl.ConstructorAccessor.executeAndCoerce(java.lang.Class[], java.lang.Object, org.mvel.integration.VariableResolverFactory)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.refl.ConstructorAccessor.getValue(java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.refl.ConstructorAccessor.parmTypes</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.refl.DynamicFieldAccessor.setValue(java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory, java.lang.Object)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.refl.DynamicSetterAccessor.DynamicSetterAccessor(java.lang.reflect.Method)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.refl.DynamicSetterAccessor.setValue(java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory, java.lang.Object)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.refl.DynamicSetterAccessor.targetType</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.refl.DynamicSetterAccessor.toString()</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.refl.GetterAccessor.getValue(java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.refl.GetterAccessor.toString()</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.refl.MethodAccessor.MethodAccessor(java.lang.reflect.Method, org.mvel.ExecutableStatement[])</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.refl.MethodAccessor.executeAndCoerce(java.lang.Class[], java.lang.Object, org.mvel.integration.VariableResolverFactory)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.refl.MethodAccessor.getValue(java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.refl.MethodAccessor.parameterTypes</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.refl.MethodAccessor.setMethod(java.lang.reflect.Method)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.refl.ReflectiveAccessorOptimizer.EMPTYCLS</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.refl.ReflectiveAccessorOptimizer._getAccessor(java.lang.Object)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.refl.ReflectiveAccessorOptimizer.compileConstructor(char[], java.lang.Object, org.mvel.integration.VariableResolverFactory)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.refl.ReflectiveAccessorOptimizer.compileGetChain()</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.refl.ReflectiveAccessorOptimizer.createSignatureHash(java.lang.String, java.lang.Object)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.refl.ReflectiveAccessorOptimizer.getBeanProperty(java.lang.Object, java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.refl.ReflectiveAccessorOptimizer.getCollectionProperty(java.lang.Object, java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.refl.ReflectiveAccessorOptimizer.getEgressType()</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.refl.ReflectiveAccessorOptimizer.getMethod(java.lang.Object, java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.refl.ReflectiveAccessorOptimizer.optimizeSetAccessor(char[], java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory, boolean, java.lang.Object)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.refl.ReflectiveAccessorOptimizer.returnType</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.refl.ReflectiveAccessorOptimizer.static {}</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.refl.SetterAccessor.SetterAccessor(java.lang.reflect.Method)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.refl.SetterAccessor.setValue(java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory, java.lang.Object)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.refl.SetterAccessor.targetType</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.refl.SetterAccessor.toString()</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.util.ArrayTools.collectionTranspose(java.util.Collection, java.lang.Class)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.util.MethodStub.MethodStub(java.lang.Class, java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.util.MethodStub.MethodStub(java.lang.reflect.Method)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.util.MethodStub.classReference</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.util.MethodStub.getClassReference()</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.util.MethodStub.getMethod()</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.util.MethodStub.setClassReference(java.lang.Class)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.util.ParseTools.boxPrimitive(java.lang.Class)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.util.ParseTools.containsCheck(java.lang.Object, java.lang.Object)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.util.ParseTools.createClass(java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.util.ParseTools.createClassSafe(java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.util.ParseTools.createClassSignatureHash(java.lang.Class, java.lang.Class[])</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.util.ParseTools.determineActualTargetMethod(java.lang.reflect.Method)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.util.ParseTools.findClass(org.mvel.integration.VariableResolverFactory, java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.util.ParseTools.getBestCandidate(java.lang.Class[], java.lang.String, java.lang.Class, java.lang.reflect.Method[])</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.util.ParseTools.getBestCandidate(java.lang.Object[], java.lang.String, java.lang.Class, java.lang.reflect.Method[])</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.util.ParseTools.getBestConstructorCanadidate(java.lang.Object[], java.lang.Class)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.util.ParseTools.getConstructors(java.lang.Class)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.util.ParseTools.getConstructors(java.lang.reflect.Constructor)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.util.ParseTools.getExactMatch(java.lang.String, java.lang.Class[], java.lang.Class, java.lang.Class)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.util.ParseTools.getSimpleClassName(java.lang.Class)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.util.ParseTools.getWidenedTarget(java.lang.reflect.Method)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.util.ParseTools.increment(java.lang.Object)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.util.ParseTools.isNumericallyCoercible(java.lang.Class, java.lang.Class)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.util.ParseTools.isPrimitiveWrapper(java.lang.Class)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.util.ParseTools.optimizeTree(org.mvel.CompiledExpression)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.util.ParseTools.resolveType(java.lang.Class)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.util.ParseTools.static {}</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.util.ParseTools.unboxPrimitive(java.lang.Class)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.util.PropertyTools.contains(java.lang.Object, java.lang.Object)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.util.PropertyTools.getBaseComponentType(java.lang.Class)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.util.PropertyTools.getFieldOrAccessor(java.lang.Class, java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.util.PropertyTools.getFieldOrWriteAccessor(java.lang.Class, java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.util.PropertyTools.getGetter(java.lang.Class, java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.util.PropertyTools.getSetter(java.lang.Class, java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.util.PropertyTools.getSubComponentType(java.lang.Class)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.util.PropertyTools.getWritableFieldOrAccessor(java.lang.Class, java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.util.PropertyTools.hasGetter(java.lang.reflect.Field)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.util.PropertyTools.hasSetter(java.lang.reflect.Field)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.util.PropertyTools.isNumeric(java.lang.Object)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.util.PropertyTools.isPropertyReadAndWrite(java.lang.Class, java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.util.ReflectionUtil.getAllFields(java.lang.Class)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.util.ReflectionUtil.isAssignable(java.lang.Object, java.lang.Class)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.util.ReflectionUtil.parameterizeClassName(java.lang.Class)</inbound>
            <feature confirmed="no">
                <name>java.lang.Class.desiredAssertionStatus()</name>
                <inbound type="feature" confirmed="yes">org.mvel.ast.OperatorNode.static {}</inbound>
            </feature>
            <feature confirmed="no">
                <name>java.lang.Class.forName(java.lang.String)</name>
                <inbound type="feature" confirmed="yes">org.mvel.ASTNode.getReducedValue(java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.ASTNode.setName(char[])</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.AbstractParser.createPropertyToken(int, int)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.AbstractParser.nextToken()</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.AbstractParser.static {}</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.DataConversion.static {}</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.ExpressionCompiler.verify(org.mvel.ParserContext, org.mvel.ASTNode)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.MVEL.evalToBoolean(java.lang.String, java.lang.Object)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.MVEL.evalToBoolean(java.lang.String, java.lang.Object, java.util.Map)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.MVEL.evalToBoolean(java.lang.String, java.lang.Object, org.mvel.integration.VariableResolverFactory)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.MVEL.evalToBoolean(java.lang.String, org.mvel.integration.VariableResolverFactory)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.MVELInterpretedRuntime.parse()</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.ParserContext.addInput(java.lang.String, java.lang.Class)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.ParserContext.addVariable(java.lang.String, java.lang.Class)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.ParserContext.getVarOrInputType(java.lang.String)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.PropertyAccessor.set(java.lang.Object)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.PropertyVerifier.analyze()</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.PropertyVerifier.getBeanProperty(java.lang.Class, java.lang.String)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.PropertyVerifier.getCollectionProperty(java.lang.Class, java.lang.String)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.PropertyVerifier.getMethod(java.lang.Class, java.lang.String)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.ast.AssignmentNode.getReducedValueAccelerated(java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.ast.IfNode.getReducedValue(java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.ast.IfNode.getReducedValueAccelerated(java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.ast.InlineCollectionNode.getReducedValueAccelerated(java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.ast.NewObjectNode$NewObjectArray.getValue(java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.ast.NewObjectNode.getReducedValue(java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.ast.NewObjectNode.getReducedValueAccelerated(java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.ast.OperatorNode.static {}</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.ast.PropertyASTNode.initializePropertyNode(java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.conversion.ArrayCH.convertFrom(java.lang.Object)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.conversion.ArrayCH.static {}</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.conversion.BigDecimalCH.convertFrom(java.lang.Object)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.conversion.BigDecimalCH.static {}</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.conversion.BigIntegerCH.convertFrom(java.lang.Object)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.conversion.BigIntegerCH.static {}</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.conversion.BooleanCH$2.convert(java.lang.Object)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.conversion.BooleanCH.convertFrom(java.lang.Object)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.conversion.BooleanCH.static {}</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.conversion.ByteCH$2.convert(java.lang.Object)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.conversion.ByteCH.convertFrom(java.lang.Object)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.conversion.ByteCH.static {}</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.conversion.CharArrayCH.convertFrom(java.lang.Object)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.conversion.CharArrayCH.static {}</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.conversion.CharCH$2.convert(java.lang.Object)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.conversion.CharCH.convertFrom(java.lang.Object)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.conversion.CharCH.static {}</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.conversion.DoubleCH$2.convert(java.lang.Object)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.conversion.DoubleCH.convertFrom(java.lang.Object)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.conversion.DoubleCH.static {}</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.conversion.FloatCH$2.convert(java.lang.Object)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.conversion.FloatCH.convertFrom(java.lang.Object)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.conversion.FloatCH.static {}</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.conversion.IntArrayCH.convertFrom(java.lang.Object)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.conversion.IntArrayCH.static {}</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.conversion.IntegerCH.convertFrom(java.lang.Object)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.conversion.IntegerCH.static {}</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.conversion.LongCH$2.convert(java.lang.Object)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.conversion.LongCH.convertFrom(java.lang.Object)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.conversion.LongCH.static {}</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.conversion.PrimArrayHandler.PrimArrayHandler(java.lang.Class)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.conversion.PrimIntArrayCH.convertFrom(java.lang.Object)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.conversion.PrimIntArrayCH.static {}</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.conversion.ShortCH$2.convert(java.lang.Object)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.conversion.ShortCH.convertFrom(java.lang.Object)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.conversion.ShortCH.static {}</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.conversion.StringArrayCH.static {}</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.conversion.StringCH.canConvertFrom(java.lang.Class)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.conversion.UnitConversion.canConvertFrom(java.lang.Class)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.conversion.UnitConversion.convertFrom(java.lang.Object)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.integration.impl.ClassImportResolver.getType()</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.integration.impl.ItemResolverFactory$ItemResolver.ItemResolverFactory$ItemResolver(java.lang.String)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.integration.impl.SimpleValueResolver.getType()</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.math.IEEEFloatingPointMath._doOperations(int, java.lang.Object, int, int, java.lang.Object)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.math.JDK14CompatabilityMath._doOperations(int, java.lang.Object, int, int, java.lang.Object)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.asm.ASMAccessorOptimizer._initializeAccessor()</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.asm.ASMAccessorOptimizer.anyArrayCheck(java.lang.Class)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.asm.ASMAccessorOptimizer.getBeanProperty(java.lang.Object, java.lang.String)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.asm.ASMAccessorOptimizer.getCollectionProperty(java.lang.Object, java.lang.String)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.asm.ASMAccessorOptimizer.getMethod(java.lang.Object, java.lang.String)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.asm.ASMAccessorOptimizer.getWrapperClass(java.lang.Class)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.asm.ASMAccessorOptimizer.optimizeCollection(char[], java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.asm.ASMAccessorOptimizer.static {}</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.asm.ASMAccessorOptimizer.wrapPrimitive(java.lang.Class)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.asm.ASMAccessorOptimizer.writeLiteralOrSubexpression(java.lang.Object, java.lang.Class)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.refl.ReflectiveAccessorOptimizer._getAccessor(java.lang.Object)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.refl.ReflectiveAccessorOptimizer.optimizeSetAccessor(char[], java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory, boolean, java.lang.Object)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.util.ParseTools.boxPrimitive(java.lang.Class)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.util.ParseTools.createClass(java.lang.String)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.util.ParseTools.getBestCandidate(java.lang.Class[], java.lang.String, java.lang.Class, java.lang.reflect.Method[])</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.util.ParseTools.isNumericallyCoercible(java.lang.Class, java.lang.Class)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.util.ParseTools.isPrimitiveWrapper(java.lang.Class)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.util.ParseTools.resolveType(java.lang.Class)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.util.ParseTools.static {}</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.util.ParseTools.unboxPrimitive(java.lang.Class)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.util.PropertyTools.isNumeric(java.lang.Object)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.util.ReflectionUtil.isAssignable(java.lang.Object, java.lang.Class)</inbound>
            </feature>
            <feature confirmed="no">
                <name>java.lang.Class.getComponentType()</name>
                <inbound type="feature" confirmed="yes">org.mvel.asm.Type.getDescriptor(java.lang.StringBuffer, java.lang.Class)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.ast.NewObjectNode.getReducedValueAccelerated(java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.conversion.PrimArrayHandler.handleLooseTypeConversion(java.lang.Class, java.lang.Object[], java.lang.Class)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.util.PropertyTools.getBaseComponentType(java.lang.Class)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.util.PropertyTools.getSubComponentType(java.lang.Class)</inbound>
            </feature>
            <feature confirmed="no">
                <name>java.lang.Class.getConstructor(java.lang.Class[])</name>
                <inbound type="feature" confirmed="yes">org.mvel.ast.NewObjectNode.getReducedValue(java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.asm.ASMAccessorOptimizer._initializeAccessor()</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.asm.ASMAccessorOptimizer.optimizeObjectCreation(char[], java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.refl.ReflectiveAccessorOptimizer.compileConstructor(char[], java.lang.Object, org.mvel.integration.VariableResolverFactory)</inbound>
            </feature>
            <feature confirmed="no">
                <name>java.lang.Class.getConstructors()</name>
                <inbound type="feature" confirmed="yes">org.mvel.util.ParseTools.getConstructors(java.lang.Class)</inbound>
            </feature>
            <feature confirmed="no">
                <name>java.lang.Class.getDeclaredMethod(java.lang.String, java.lang.Class[])</name>
                <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.asm.ASMAccessorOptimizer.static {}</inbound>
            </feature>
            <feature confirmed="no">
                <name>java.lang.Class.getDeclaredMethods()</name>
                <inbound type="feature" confirmed="yes">org.mvel.PropertyAccessor.getMethod(java.lang.Object, java.lang.String)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.PropertyVerifier.getMethod(java.lang.Class, java.lang.String)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.asm.ASMAccessorOptimizer.getMethod(java.lang.Object, java.lang.String)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.refl.ReflectiveAccessorOptimizer.getMethod(java.lang.Object, java.lang.String)</inbound>
            </feature>
            <feature confirmed="no">
                <name>java.lang.Class.getField(java.lang.String)</name>
                <inbound type="feature" confirmed="yes">org.mvel.optimizers.AbstractOptimizer.tryStaticAccess()</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.util.PropertyTools.getFieldOrAccessor(java.lang.Class, java.lang.String)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.util.PropertyTools.getFieldOrWriteAccessor(java.lang.Class, java.lang.String)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.util.PropertyTools.getWritableFieldOrAccessor(java.lang.Class, java.lang.String)</inbound>
            </feature>
            <feature confirmed="no">
                <name>java.lang.Class.getFields()</name>
                <inbound type="feature" confirmed="yes">org.mvel.util.ReflectionUtil.getAllFields(java.lang.Class)</inbound>
            </feature>
            <feature confirmed="no">
                <name>java.lang.Class.getInterfaces()</name>
                <inbound type="feature" confirmed="yes">org.mvel.util.ParseTools.determineActualTargetMethod(java.lang.reflect.Method)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.util.ParseTools.getWidenedTarget(java.lang.reflect.Method)</inbound>
            </feature>
            <feature confirmed="no">
                <name>java.lang.Class.getMethods()</name>
                <inbound type="feature" confirmed="yes">org.mvel.PropertyAccessor.getBeanProperty(java.lang.Object, java.lang.String)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.PropertyAccessor.getMethod(java.lang.Object, java.lang.String)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.PropertyVerifier.getBeanProperty(java.lang.Class, java.lang.String)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.PropertyVerifier.getMethod(java.lang.Class, java.lang.String)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.ast.StaticImportNode.resolveMethod()</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.asm.ASMAccessorOptimizer.getBeanProperty(java.lang.Object, java.lang.String)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.asm.ASMAccessorOptimizer.getMethod(java.lang.Object, java.lang.String)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.refl.ReflectiveAccessorOptimizer.getBeanProperty(java.lang.Object, java.lang.String)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.refl.ReflectiveAccessorOptimizer.getMethod(java.lang.Object, java.lang.String)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.util.MethodStub.getMethod()</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.util.ParseTools.determineActualTargetMethod(java.lang.reflect.Method)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.util.ParseTools.getExactMatch(java.lang.String, java.lang.Class[], java.lang.Class, java.lang.Class)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.util.PropertyTools.getGetter(java.lang.Class, java.lang.String)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.util.PropertyTools.getSetter(java.lang.Class, java.lang.String)</inbound>
            </feature>
            <feature confirmed="no">
                <name>java.lang.Class.getName()</name>
                <inbound type="feature" confirmed="yes">org.mvel.AbstractParser.reduce()</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.PropertyAccessor.getCollectionProperty(java.lang.Object, java.lang.String)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.PropertyAccessor.getMethod(java.lang.Object, java.lang.String)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.PropertyAccessor.reportCacheSizes()</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.PropertyAccessor.set(java.lang.Object)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.PropertyVerifier.getMethod(java.lang.Class, java.lang.String)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.asm.ClassWriter.getCommonSuperClass(java.lang.String, java.lang.String)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.asm.Type.getDescriptor(java.lang.StringBuffer, java.lang.Class)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.asm.Type.getInternalName(java.lang.Class)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.ast.ForEachNode.getReducedValue(java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.ast.ForEachNode.getReducedValueAccelerated(java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.ast.NewObjectNode.NewObjectNode(char[], int)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.ast.NewObjectNode.getReducedValue(java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.ast.NewObjectNode.getReducedValueAccelerated(java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.ast.NewObjectNode.rewriteClassReferenceToFQCN(int)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.ast.StaticImportNode.StaticImportNode(char[], int)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.conversion.ArrayCH.convertFrom(java.lang.Object)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.conversion.BigDecimalCH.convertFrom(java.lang.Object)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.conversion.BigIntegerCH.convertFrom(java.lang.Object)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.conversion.BooleanCH.convertFrom(java.lang.Object)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.conversion.ByteCH.convertFrom(java.lang.Object)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.conversion.CharArrayCH.convertFrom(java.lang.Object)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.conversion.CharCH.convertFrom(java.lang.Object)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.conversion.DoubleCH.convertFrom(java.lang.Object)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.conversion.FloatCH.convertFrom(java.lang.Object)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.conversion.IntArrayCH.convertFrom(java.lang.Object)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.conversion.IntegerCH.convertFrom(java.lang.Object)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.conversion.LongCH.convertFrom(java.lang.Object)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.conversion.PrimArrayHandler.convertFrom(java.lang.Object)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.conversion.PrimArrayHandler.handleLooseTypeConversion(java.lang.Class, java.lang.Object[], java.lang.Class)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.conversion.PrimIntArrayCH.convertFrom(java.lang.Object)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.conversion.ShortCH.convertFrom(java.lang.Object)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.debug.DebugTools.decompile(java.io.Serializable)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.integration.impl.MapVariableResolver.setValue(java.lang.Object)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.math.IEEEFloatingPointMath.doOperationNonNumeric(java.lang.Object, int, java.lang.Object)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.math.JDK14CompatabilityMath.doOperationNonNumeric(java.lang.Object, int, java.lang.Object)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.asm.ASMAccessorOptimizer.getCollectionProperty(java.lang.Object, java.lang.String)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.asm.ASMAccessorOptimizer.getMethod(java.lang.Object, java.lang.String)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.asm.ASMAccessorOptimizer.ldcClassConstant(java.lang.Class)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.asm.ASMAccessorOptimizer.optimizeObjectCreation(char[], java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.refl.DynamicSetterAccessor.toString()</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.refl.GetterAccessor.getValue(java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.refl.GetterAccessor.toString()</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.refl.ReflectiveAccessorOptimizer.compileConstructor(char[], java.lang.Object, org.mvel.integration.VariableResolverFactory)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.refl.ReflectiveAccessorOptimizer.getCollectionProperty(java.lang.Object, java.lang.String)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.refl.ReflectiveAccessorOptimizer.getMethod(java.lang.Object, java.lang.String)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.refl.ReflectiveAccessorOptimizer.optimizeSetAccessor(char[], java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory, boolean, java.lang.Object)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.refl.SetterAccessor.toString()</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.util.ParseTools.getSimpleClassName(java.lang.Class)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.util.ParseTools.increment(java.lang.Object)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.util.ReflectionUtil.parameterizeClassName(java.lang.Class)</inbound>
            </feature>
            <feature confirmed="no">
                <name>java.lang.Class.getSimpleName()</name>
                <inbound type="feature" confirmed="yes">org.mvel.util.ParseTools.getSimpleClassName(java.lang.Class)</inbound>
            </feature>
            <feature confirmed="no">
                <name>java.lang.Class.getSuperclass()</name>
                <inbound type="feature" confirmed="yes">org.mvel.asm.ClassWriter.getCommonSuperClass(java.lang.String, java.lang.String)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.util.ParseTools.getWidenedTarget(java.lang.reflect.Method)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.util.ReflectionUtil.isAssignable(java.lang.Object, java.lang.Class)</inbound>
            </feature>
            <feature confirmed="no">
                <name>java.lang.Class.isArray()</name>
                <inbound type="feature" confirmed="yes">org.mvel.BlankLiteral.equals(java.lang.Object)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.PropertyAccessor.getBeanProperty(java.lang.Object, java.lang.String)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.PropertyAccessor.getMethod(java.lang.Object, java.lang.String)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.PropertyAccessor.set(java.lang.Object)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.PropertyVerifier.getMethod(java.lang.Class, java.lang.String)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.asm.Type.getDescriptor(java.lang.StringBuffer, java.lang.Class)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.conversion.StringArrayCH.convertFrom(java.lang.Object)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.asm.ASMAccessorOptimizer.getBeanProperty(java.lang.Object, java.lang.String)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.asm.ASMAccessorOptimizer.getMethod(java.lang.Object, java.lang.String)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.refl.ReflectiveAccessorOptimizer.getBeanProperty(java.lang.Object, java.lang.String)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.refl.ReflectiveAccessorOptimizer.getMethod(java.lang.Object, java.lang.String)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.refl.ReflectiveAccessorOptimizer.optimizeSetAccessor(char[], java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory, boolean, java.lang.Object)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.util.ParseTools.containsCheck(java.lang.Object, java.lang.Object)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.util.ParseTools.getSimpleClassName(java.lang.Class)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.util.PropertyTools.contains(java.lang.Object, java.lang.Object)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.util.PropertyTools.getBaseComponentType(java.lang.Class)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.util.PropertyTools.getSubComponentType(java.lang.Class)</inbound>
            </feature>
            <feature confirmed="no">
                <name>java.lang.Class.isAssignableFrom(java.lang.Class)</name>
                <inbound type="feature" confirmed="yes">org.mvel.CompiledExpression.computeTypeConversionRule()</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.DataConversion.canConvert(java.lang.Class, java.lang.Class)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.DataConversion.convert(java.lang.Object, java.lang.Class)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.ExecutableAccessor.computeTypeConversionRule()</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.PropertyAccessor.set(java.lang.Object)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.asm.ClassWriter.getCommonSuperClass(java.lang.String, java.lang.String)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.conversion.UnitConversion.canConvertFrom(java.lang.Class)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.asm.ASMAccessorOptimizer.getMethod(java.lang.Object, java.lang.String)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.asm.ASMAccessorOptimizer.optimizeObjectCreation(char[], java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.refl.ReflectiveAccessorOptimizer.optimizeSetAccessor(char[], java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory, boolean, java.lang.Object)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.util.ParseTools.getBestCandidate(java.lang.Class[], java.lang.String, java.lang.Class, java.lang.reflect.Method[])</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.util.ParseTools.getBestConstructorCanadidate(java.lang.Object[], java.lang.Class)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.util.ParseTools.isNumericallyCoercible(java.lang.Class, java.lang.Class)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.util.ParseTools.resolveType(java.lang.Class)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.util.PropertyTools.hasGetter(java.lang.reflect.Field)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.util.PropertyTools.hasSetter(java.lang.reflect.Field)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.util.PropertyTools.isNumeric(java.lang.Object)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.util.ReflectionUtil.isAssignable(java.lang.Object, java.lang.Class)</inbound>
            </feature>
            <feature confirmed="no">
                <name>java.lang.Class.isInstance(java.lang.Object)</name>
                <inbound type="feature" confirmed="yes">org.mvel.AbstractParser.reduce()</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.MVELRuntime.execute(boolean, org.mvel.CompiledExpression, java.lang.Object, org.mvel.integration.VariableResolverFactory)</inbound>
            </feature>
            <feature confirmed="no">
                <name>java.lang.Class.isInterface()</name>
                <inbound type="feature" confirmed="yes">org.mvel.asm.ClassWriter.getCommonSuperClass(java.lang.String, java.lang.String)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.asm.ASMAccessorOptimizer.getMethod(java.lang.Object, java.lang.String)</inbound>
            </feature>
            <feature confirmed="no">
                <name>java.lang.Class.isPrimitive()</name>
                <inbound type="feature" confirmed="yes">org.mvel.asm.Type.getDescriptor(java.lang.StringBuffer, java.lang.Class)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.asm.Type.getType(java.lang.Class)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.asm.ASMAccessorOptimizer._finishJIT()</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.asm.ASMAccessorOptimizer.getBeanProperty(java.lang.Object, java.lang.String)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.asm.ASMAccessorOptimizer.getMethod(java.lang.Object, java.lang.String)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.asm.ASMAccessorOptimizer.optimizeObjectCreation(char[], java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.util.ParseTools.getBestCandidate(java.lang.Class[], java.lang.String, java.lang.Class, java.lang.reflect.Method[])</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.util.ParseTools.getBestConstructorCanadidate(java.lang.Object[], java.lang.Class)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.util.ParseTools.isNumericallyCoercible(java.lang.Class, java.lang.Class)</inbound>
            </feature>
            <feature confirmed="no">
                <name>java.lang.Class.newInstance()</name>
                <inbound type="feature" confirmed="yes">org.mvel.conversion.UnitConversion.canConvertFrom(java.lang.Class)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.conversion.UnitConversion.convertFrom(java.lang.Object)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.optimizers.OptimizerFactory.getAccessorCompiler(java.lang.String)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.optimizers.OptimizerFactory.getDefaultAccessorCompiler()</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.optimizers.OptimizerFactory.getThreadAccessorOptimizer()</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.asm.ASMAccessorOptimizer._initializeAccessor()</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.util.ParseTools.static {}</inbound>
            </feature>
        </class>
        <class confirmed="no">
            <name>java.lang.ClassCastException</name>
            <inbound type="feature" confirmed="yes">org.mvel.ASTNode.setName(char[])</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.AbstractParser.reduce()</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.MVELRuntime.execute(boolean, org.mvel.CompiledExpression, java.lang.Object, org.mvel.integration.VariableResolverFactory)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.TemplateInterpreter.execute(java.lang.Object, java.util.Map, org.mvel.TemplateRegistry)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.ast.AssertNode.getReducedValue(java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.ast.AssertNode.getReducedValueAccelerated(java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.ast.ContextDeepPropertyNode.getReducedValueAccelerated(java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.ast.NewObjectNode.getReducedValueAccelerated(java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory)</inbound>
        </class>
        <class confirmed="no">
            <name>java.lang.ClassLoader</name>
            <inbound type="feature" confirmed="yes">org.mvel.ASTNode.tryStaticAccess(java.lang.Object, org.mvel.integration.VariableResolverFactory)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.AbstractParser.reduce()</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.AbstractParser.static {}</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.MVELRuntime.execute(boolean, org.mvel.CompiledExpression, java.lang.Object, org.mvel.integration.VariableResolverFactory)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.ParserContext.checkForDynamicImport(java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.asm.ClassWriter.getCommonSuperClass(java.lang.String, java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.ast.ImportNode.ImportNode(char[])</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.ast.NewObjectNode.NewObjectNode(char[], int)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.ast.NewObjectNode.getReducedValue(java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.ast.StaticImportNode.StaticImportNode(char[], int)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.optimizers.AbstractOptimizer.tryStaticAccess()</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.optimizers.OptimizerFactory.static {}</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.asm.ASMAccessorOptimizer.classLoader</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.asm.ASMAccessorOptimizer.loadClass(java.lang.String, byte[])</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.asm.ASMAccessorOptimizer.static {}</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.refl.ReflectiveAccessorOptimizer.compileConstructor(char[], java.lang.Object, org.mvel.integration.VariableResolverFactory)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.util.ParseTools.createClass(java.lang.String)</inbound>
            <feature confirmed="no">
                <name>java.lang.ClassLoader.getSystemResourceAsStream(java.lang.String)</name>
                <inbound type="feature" confirmed="yes">org.mvel.asm.ClassReader.ClassReader(java.lang.String)</inbound>
            </feature>
            <feature confirmed="no">
                <name>java.lang.ClassLoader.loadClass(java.lang.String)</name>
                <inbound type="feature" confirmed="yes">org.mvel.ASTNode.tryStaticAccess(java.lang.Object, org.mvel.integration.VariableResolverFactory)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.AbstractParser.reduce()</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.AbstractParser.static {}</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.MVELRuntime.execute(boolean, org.mvel.CompiledExpression, java.lang.Object, org.mvel.integration.VariableResolverFactory)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.ParserContext.checkForDynamicImport(java.lang.String)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.asm.ClassWriter.getCommonSuperClass(java.lang.String, java.lang.String)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.ast.ImportNode.ImportNode(char[])</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.ast.NewObjectNode.NewObjectNode(char[], int)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.ast.NewObjectNode.getReducedValue(java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.ast.StaticImportNode.StaticImportNode(char[], int)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.optimizers.AbstractOptimizer.tryStaticAccess()</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.optimizers.OptimizerFactory.static {}</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.refl.ReflectiveAccessorOptimizer.compileConstructor(char[], java.lang.Object, org.mvel.integration.VariableResolverFactory)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.util.ParseTools.createClass(java.lang.String)</inbound>
            </feature>
        </class>
        <class confirmed="no">
            <name>java.lang.ClassNotFoundException</name>
            <inbound type="feature" confirmed="yes">org.mvel.ASTNode.getReducedValue(java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.ASTNode.setName(char[])</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.ASTNode.tryStaticAccess(java.lang.Object, org.mvel.integration.VariableResolverFactory)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.AbstractParser.createPropertyToken(int, int)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.AbstractParser.nextToken()</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.AbstractParser.static {}</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.DataConversion.static {}</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.ExpressionCompiler.verify(org.mvel.ParserContext, org.mvel.ASTNode)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.MVEL.evalToBoolean(java.lang.String, java.lang.Object)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.MVEL.evalToBoolean(java.lang.String, java.lang.Object, java.util.Map)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.MVEL.evalToBoolean(java.lang.String, java.lang.Object, org.mvel.integration.VariableResolverFactory)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.MVEL.evalToBoolean(java.lang.String, org.mvel.integration.VariableResolverFactory)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.MVELInterpretedRuntime.parse()</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.ParserContext.addInput(java.lang.String, java.lang.Class)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.ParserContext.addVariable(java.lang.String, java.lang.Class)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.ParserContext.checkForDynamicImport(java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.ParserContext.getVarOrInputType(java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.PropertyAccessor.set(java.lang.Object)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.PropertyVerifier.analyze()</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.PropertyVerifier.getBeanProperty(java.lang.Class, java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.PropertyVerifier.getCollectionProperty(java.lang.Class, java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.PropertyVerifier.getMethod(java.lang.Class, java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.asm.ClassWriter.getCommonSuperClass(java.lang.String, java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.ast.AssignmentNode.getReducedValueAccelerated(java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.ast.IfNode.getReducedValue(java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.ast.IfNode.getReducedValueAccelerated(java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.ast.ImportNode.ImportNode(char[])</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.ast.InlineCollectionNode.getReducedValueAccelerated(java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.ast.NewObjectNode$NewObjectArray.getValue(java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.ast.NewObjectNode.NewObjectNode(char[], int)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.ast.NewObjectNode.getReducedValue(java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.ast.NewObjectNode.getReducedValueAccelerated(java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.ast.OperatorNode.static {}</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.ast.PropertyASTNode.initializePropertyNode(java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.conversion.ArrayCH.convertFrom(java.lang.Object)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.conversion.ArrayCH.static {}</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.conversion.BigDecimalCH.convertFrom(java.lang.Object)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.conversion.BigDecimalCH.static {}</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.conversion.BigIntegerCH.convertFrom(java.lang.Object)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.conversion.BigIntegerCH.static {}</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.conversion.BooleanCH$2.convert(java.lang.Object)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.conversion.BooleanCH.convertFrom(java.lang.Object)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.conversion.BooleanCH.static {}</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.conversion.ByteCH$2.convert(java.lang.Object)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.conversion.ByteCH.convertFrom(java.lang.Object)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.conversion.ByteCH.static {}</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.conversion.CharArrayCH.convertFrom(java.lang.Object)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.conversion.CharArrayCH.static {}</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.conversion.CharCH$2.convert(java.lang.Object)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.conversion.CharCH.convertFrom(java.lang.Object)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.conversion.CharCH.static {}</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.conversion.DoubleCH$2.convert(java.lang.Object)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.conversion.DoubleCH.convertFrom(java.lang.Object)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.conversion.DoubleCH.static {}</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.conversion.FloatCH$2.convert(java.lang.Object)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.conversion.FloatCH.convertFrom(java.lang.Object)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.conversion.FloatCH.static {}</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.conversion.IntArrayCH.convertFrom(java.lang.Object)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.conversion.IntArrayCH.static {}</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.conversion.IntegerCH.convertFrom(java.lang.Object)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.conversion.IntegerCH.static {}</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.conversion.LongCH$2.convert(java.lang.Object)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.conversion.LongCH.convertFrom(java.lang.Object)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.conversion.LongCH.static {}</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.conversion.PrimArrayHandler.PrimArrayHandler(java.lang.Class)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.conversion.PrimIntArrayCH.convertFrom(java.lang.Object)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.conversion.PrimIntArrayCH.static {}</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.conversion.ShortCH$2.convert(java.lang.Object)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.conversion.ShortCH.convertFrom(java.lang.Object)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.conversion.ShortCH.static {}</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.conversion.StringArrayCH.static {}</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.conversion.StringCH.canConvertFrom(java.lang.Class)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.conversion.UnitConversion.canConvertFrom(java.lang.Class)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.conversion.UnitConversion.convertFrom(java.lang.Object)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.integration.impl.ClassImportResolver.getType()</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.integration.impl.ClassImportResolverFactory.isResolveable(java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.integration.impl.ItemResolverFactory$ItemResolver.ItemResolverFactory$ItemResolver(java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.integration.impl.SimpleValueResolver.getType()</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.math.IEEEFloatingPointMath._doOperations(int, java.lang.Object, int, int, java.lang.Object)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.math.JDK14CompatabilityMath._doOperations(int, java.lang.Object, int, int, java.lang.Object)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.optimizers.AbstractOptimizer.tryStaticAccess()</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.optimizers.OptimizerFactory.static {}</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.asm.ASMAccessorOptimizer._initializeAccessor()</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.asm.ASMAccessorOptimizer.anyArrayCheck(java.lang.Class)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.asm.ASMAccessorOptimizer.getBeanProperty(java.lang.Object, java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.asm.ASMAccessorOptimizer.getCollectionProperty(java.lang.Object, java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.asm.ASMAccessorOptimizer.getMethod(java.lang.Object, java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.asm.ASMAccessorOptimizer.getWrapperClass(java.lang.Class)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.asm.ASMAccessorOptimizer.optimizeCollection(char[], java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.asm.ASMAccessorOptimizer.optimizeObjectCreation(char[], java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.asm.ASMAccessorOptimizer.static {}</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.asm.ASMAccessorOptimizer.wrapPrimitive(java.lang.Class)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.asm.ASMAccessorOptimizer.writeLiteralOrSubexpression(java.lang.Object, java.lang.Class)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.refl.ReflectiveAccessorOptimizer._getAccessor(java.lang.Object)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.refl.ReflectiveAccessorOptimizer.compileConstructor(char[], java.lang.Object, org.mvel.integration.VariableResolverFactory)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.refl.ReflectiveAccessorOptimizer.optimizeSetAccessor(char[], java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory, boolean, java.lang.Object)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.util.ParseTools.boxPrimitive(java.lang.Class)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.util.ParseTools.createClass(java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.util.ParseTools.createClassSafe(java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.util.ParseTools.findClass(org.mvel.integration.VariableResolverFactory, java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.util.ParseTools.getBestCandidate(java.lang.Class[], java.lang.String, java.lang.Class, java.lang.reflect.Method[])</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.util.ParseTools.isNumericallyCoercible(java.lang.Class, java.lang.Class)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.util.ParseTools.isPrimitiveWrapper(java.lang.Class)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.util.ParseTools.resolveType(java.lang.Class)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.util.ParseTools.unboxPrimitive(java.lang.Class)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.util.PropertyTools.isNumeric(java.lang.Object)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.util.ReflectionUtil.isAssignable(java.lang.Object, java.lang.Class)</inbound>
            <feature confirmed="no">
                <name>java.lang.ClassNotFoundException.getMessage()</name>
                <inbound type="feature" confirmed="yes">org.mvel.ast.NewObjectNode.getReducedValue(java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory)</inbound>
            </feature>
        </class>
        <class confirmed="no">
            <name>java.lang.Class[]</name>
            <inbound type="feature" confirmed="yes">org.mvel.PropertyAccessor.getMethod(java.lang.Object, java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.asm.ASMAccessorOptimizer.getMethod(java.lang.Object, java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.refl.ReflectiveAccessorOptimizer.getMethod(java.lang.Object, java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.util.ParseTools.getConstructors(java.lang.reflect.Constructor)</inbound>
        </class>
        <class confirmed="no">
            <name>java.lang.CloneNotSupportedException</name>
            <inbound type="feature" confirmed="yes">org.mvel.ForeachContext.clone()</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.Node.clone()</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.TemplateInterpreter.cloneAll(org.mvel.Node[])</inbound>
        </class>
        <class confirmed="no">
            <name>java.lang.Cloneable</name>
            <inbound type="class" confirmed="yes">org.mvel.ASTNode</inbound>
            <inbound type="class" confirmed="yes">org.mvel.ExecutableStatement</inbound>
            <inbound type="class" confirmed="yes">org.mvel.Node</inbound>
        </class>
        <class confirmed="no">
            <name>java.lang.Comparable</name>
            <inbound type="feature" confirmed="yes">org.mvel.math.IEEEFloatingPointMath.doOperationNonNumeric(java.lang.Object, int, java.lang.Object)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.math.JDK14CompatabilityMath.doOperationNonNumeric(java.lang.Object, int, java.lang.Object)</inbound>
            <feature confirmed="no">
                <name>java.lang.Comparable.compareTo(java.lang.Object)</name>
                <inbound type="feature" confirmed="yes">org.mvel.math.IEEEFloatingPointMath.doOperationNonNumeric(java.lang.Object, int, java.lang.Object)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.math.JDK14CompatabilityMath.doOperationNonNumeric(java.lang.Object, int, java.lang.Object)</inbound>
            </feature>
        </class>
        <class confirmed="no">
            <name>java.lang.Double</name>
            <inbound type="feature" confirmed="yes">org.mvel.asm.ClassWriter.newConstItem(java.lang.Object)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.conversion.DoubleCH$10.convert(java.lang.Object)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.conversion.DoubleCH$3.convert(java.lang.Object)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.conversion.DoubleCH$4.convert(java.lang.Object)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.conversion.DoubleCH$6.convert(java.lang.Object)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.conversion.DoubleCH$7.convert(java.lang.Object)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.conversion.DoubleCH$8.convert(java.lang.Object)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.conversion.DoubleCH$9.convert(java.lang.Object)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.conversion.IntegerCH$8.convert(java.lang.Object)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.math.IEEEFloatingPointMath.doOperationsSameType(int, java.lang.Object, int, java.lang.Object)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.math.IEEEFloatingPointMath.getBigDecimalFromType(java.lang.Object, int)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.math.JDK14CompatabilityMath.doOperationsSameType(int, java.lang.Object, int, java.lang.Object)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.math.JDK14CompatabilityMath.getBigDecimalFromType(java.lang.Object, int)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.asm.ASMAccessorOptimizer.writeOutLiteralWrapped(java.lang.Object)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.util.ParseTools.increment(java.lang.Object)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.util.PropertyTools.isNumber(java.lang.Object)</inbound>
            <feature confirmed="no">
                <name>java.lang.Double.Double(double)</name>
                <inbound type="feature" confirmed="yes">org.mvel.asm.ClassReader.readConst(int, char[])</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.conversion.DoubleCH$1.convert(java.lang.Object)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.math.IEEEFloatingPointMath.doBigDecimalArithmetic(java.math.BigDecimal, int, java.math.BigDecimal)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.math.IEEEFloatingPointMath.doOperationsSameType(int, java.lang.Object, int, java.lang.Object)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.math.JDK14CompatabilityMath.doBigDecimalArithmetic(java.math.BigDecimal, int, java.math.BigDecimal)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.math.JDK14CompatabilityMath.doOperationsSameType(int, java.lang.Object, int, java.lang.Object)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.util.ArrayTools.listTranspose(double[])</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.util.ParseTools.handleParserEgress(java.lang.Object, boolean)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.util.ParseTools.increment(java.lang.Object)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.util.PropertyTools.handleNumericConversion(char[])</inbound>
            </feature>
            <feature confirmed="no">
                <name>java.lang.Double.TYPE</name>
                <inbound type="feature" confirmed="yes">org.mvel.AbstractParser.static {}</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.DataConversion.static {}</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.asm.Type.getDescriptor(java.lang.StringBuffer, java.lang.Class)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.asm.Type.getType(java.lang.Class)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.asm.ASMAccessorOptimizer.getWrapperClass(java.lang.Class)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.asm.ASMAccessorOptimizer.unwrapPrimitive(java.lang.Class)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.asm.ASMAccessorOptimizer.wrapPrimitive(java.lang.Class)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.asm.ASMAccessorOptimizer.writeOutLiteralWrapped(java.lang.Object)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.util.ParseTools.boxPrimitive(java.lang.Class)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.util.ParseTools.resolveType(java.lang.Class)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.util.ParseTools.unboxPrimitive(java.lang.Class)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.util.PropertyTools.isNumeric(java.lang.Object)</inbound>
            </feature>
            <feature confirmed="no">
                <name>java.lang.Double.doubleToRawLongBits(double)</name>
                <inbound type="feature" confirmed="yes">org.mvel.asm.Item.set(double)</inbound>
            </feature>
            <feature confirmed="no">
                <name>java.lang.Double.doubleValue()</name>
                <inbound type="feature" confirmed="yes">org.mvel.asm.ClassWriter.newConstItem(java.lang.Object)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.conversion.IntegerCH$8.convert(java.lang.Object)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.math.IEEEFloatingPointMath.doOperationsSameType(int, java.lang.Object, int, java.lang.Object)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.math.IEEEFloatingPointMath.getBigDecimalFromType(java.lang.Object, int)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.math.JDK14CompatabilityMath.doOperationsSameType(int, java.lang.Object, int, java.lang.Object)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.math.JDK14CompatabilityMath.getBigDecimalFromType(java.lang.Object, int)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.util.ParseTools.increment(java.lang.Object)</inbound>
            </feature>
            <feature confirmed="no">
                <name>java.lang.Double.intValue()</name>
                <inbound type="feature" confirmed="yes">org.mvel.conversion.IntegerCH$8.convert(java.lang.Object)</inbound>
            </feature>
            <feature confirmed="no">
                <name>java.lang.Double.longBitsToDouble(long)</name>
                <inbound type="feature" confirmed="yes">org.mvel.asm.ClassReader.copyPool(org.mvel.asm.ClassWriter)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.asm.ClassReader.readAnnotationValue(int, char[], java.lang.String, org.mvel.asm.AnnotationVisitor)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.asm.ClassReader.readConst(int, char[])</inbound>
            </feature>
            <feature confirmed="no">
                <name>java.lang.Double.parseDouble(java.lang.String)</name>
                <inbound type="feature" confirmed="yes">org.mvel.conversion.DoubleCH$1.convert(java.lang.Object)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.util.ParseTools.static {}</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.util.PropertyTools.handleNumericConversion(char[])</inbound>
            </feature>
        </class>
        <class confirmed="no">
            <name>java.lang.Exception</name>
            <inbound type="feature" confirmed="yes">org.mvel.ASTNode.tryStaticAccess(java.lang.Object, org.mvel.integration.VariableResolverFactory)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.ASTNode.valRet(java.lang.Object)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.AbstractParser.nextToken()</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.AbstractParser.reduce()</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.AbstractParser.static {}</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.CompileException.CompileException(java.lang.String, char[], int, java.lang.Exception)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.MVELRuntime.execute(boolean, org.mvel.CompiledExpression, java.lang.Object, org.mvel.integration.VariableResolverFactory)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.MVELSH.main(java.lang.String[])</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.PropertyAccessor.get()</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.PropertyAccessor.getCollectionProperty(java.lang.Object, java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.PropertyAccessor.getMethod(java.lang.Object, java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.PropertyVerifier.getBeanProperty(java.lang.Class, java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.TemplateInterpreter.execute(java.lang.Object, java.util.Map, org.mvel.TemplateRegistry)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.ast.NewObjectNode.NewObjectNode(char[], int)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.ast.NewObjectNode.getReducedValue(java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.ast.NewObjectNode.getReducedValueAccelerated(java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.ast.StaticImportNode.StaticImportNode(char[], int)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.integration.impl.MapVariableResolver.setValue(java.lang.Object)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.optimizers.AbstractOptimizer.tryStaticAccess()</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.optimizers.OptimizerFactory.getAccessorCompiler(java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.optimizers.OptimizerFactory.getDefaultAccessorCompiler()</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.optimizers.OptimizerFactory.getThreadAccessorOptimizer()</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.optimizers.OptimizerFactory.setDefaultOptimizer(java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.asm.ASMAccessorOptimizer._initializeAccessor()</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.asm.ASMAccessorOptimizer.compileAccessor()</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.asm.ASMAccessorOptimizer.getBeanProperty(java.lang.Object, java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.asm.ASMAccessorOptimizer.loadClass(java.lang.String, byte[])</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.asm.ASMAccessorOptimizer.optimizeCollection(char[], java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.asm.ASMAccessorOptimizer.optimizeObjectCreation(char[], java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.asm.ASMAccessorOptimizer.static {}</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.refl.ConstructorAccessor.getValue(java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.refl.DynamicFieldAccessor.getValue(java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.refl.DynamicFieldAccessor.setValue(java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory, java.lang.Object)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.refl.DynamicSetterAccessor.setValue(java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory, java.lang.Object)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.refl.FieldAccessor.getValue(java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.refl.FieldAccessor.setValue(java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory, java.lang.Object)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.refl.GetterAccessor.getValue(java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.refl.MethodAccessor.getValue(java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.refl.ReflectiveAccessorOptimizer.compileGetChain()</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.refl.ReflectiveAccessorOptimizer.getCollectionProperty(java.lang.Object, java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.refl.ReflectiveAccessorOptimizer.getMethod(java.lang.Object, java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.refl.ReflectiveAccessorOptimizer.getValue(java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.refl.ReflectiveAccessorOptimizer.optimizeObjectCreation(char[], java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.refl.SetterAccessor.setValue(java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory, java.lang.Object)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.refl.StaticVarAccessor.getValue(java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.refl.StaticVarAccessor.setValue(java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory, java.lang.Object)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.util.ParseTools.findClass(org.mvel.integration.VariableResolverFactory, java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.util.ParseTools.static {}</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.util.PropertyTools.getFieldOrAccessor(java.lang.Class, java.lang.String)</inbound>
            <feature confirmed="no">
                <name>java.lang.Exception.getMessage()</name>
                <inbound type="feature" confirmed="yes">org.mvel.MVELSH.main(java.lang.String[])</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.TemplateInterpreter.execute(java.lang.Object, java.util.Map, org.mvel.TemplateRegistry)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.ast.NewObjectNode.getReducedValue(java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.asm.ASMAccessorOptimizer.compileAccessor()</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.refl.ReflectiveAccessorOptimizer.compileGetChain()</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.refl.ReflectiveAccessorOptimizer.optimizeObjectCreation(char[], java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory)</inbound>
            </feature>
            <feature confirmed="no">
                <name>java.lang.Exception.printStackTrace()</name>
                <inbound type="feature" confirmed="yes">org.mvel.MVELSH.main(java.lang.String[])</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.ast.NewObjectNode.NewObjectNode(char[], int)</inbound>
            </feature>
        </class>
        <class confirmed="no">
            <name>java.lang.Float</name>
            <inbound type="feature" confirmed="yes">org.mvel.asm.ClassWriter.newConstItem(java.lang.Object)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.conversion.FloatCH$10.convert(java.lang.Object)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.conversion.FloatCH$3.convert(java.lang.Object)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.conversion.FloatCH$4.convert(java.lang.Object)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.conversion.FloatCH$6.convert(java.lang.Object)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.conversion.FloatCH$7.convert(java.lang.Object)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.conversion.FloatCH$8.convert(java.lang.Object)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.conversion.FloatCH$9.convert(java.lang.Object)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.conversion.IntegerCH$7.convert(java.lang.Object)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.math.IEEEFloatingPointMath.doOperationsSameType(int, java.lang.Object, int, java.lang.Object)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.math.IEEEFloatingPointMath.getBigDecimalFromType(java.lang.Object, int)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.math.JDK14CompatabilityMath.doOperationsSameType(int, java.lang.Object, int, java.lang.Object)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.math.JDK14CompatabilityMath.getBigDecimalFromType(java.lang.Object, int)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.asm.ASMAccessorOptimizer.writeOutLiteralWrapped(java.lang.Object)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.util.ParseTools.increment(java.lang.Object)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.util.PropertyTools.isNumber(java.lang.Object)</inbound>
            <feature confirmed="no">
                <name>java.lang.Float.Float(float)</name>
                <inbound type="feature" confirmed="yes">org.mvel.AbstractParser.reduce()</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.MVELRuntime.execute(boolean, org.mvel.CompiledExpression, java.lang.Object, org.mvel.integration.VariableResolverFactory)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.asm.ClassReader.readConst(int, char[])</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.conversion.FloatCH$1.convert(java.lang.Object)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.conversion.IntegerCH$5.convert(java.lang.Object)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.math.IEEEFloatingPointMath.doOperationsSameType(int, java.lang.Object, int, java.lang.Object)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.math.JDK14CompatabilityMath.doOperationsSameType(int, java.lang.Object, int, java.lang.Object)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.util.ParseTools.handleParserEgress(java.lang.Object, boolean)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.util.ParseTools.increment(java.lang.Object)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.util.PropertyTools.handleNumericConversion(char[])</inbound>
            </feature>
            <feature confirmed="no">
                <name>java.lang.Float.TYPE</name>
                <inbound type="feature" confirmed="yes">org.mvel.AbstractParser.static {}</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.DataConversion.static {}</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.asm.Type.getDescriptor(java.lang.StringBuffer, java.lang.Class)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.asm.Type.getType(java.lang.Class)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.asm.ASMAccessorOptimizer.getWrapperClass(java.lang.Class)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.asm.ASMAccessorOptimizer.unwrapPrimitive(java.lang.Class)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.asm.ASMAccessorOptimizer.wrapPrimitive(java.lang.Class)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.asm.ASMAccessorOptimizer.writeOutLiteralWrapped(java.lang.Object)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.util.ParseTools.boxPrimitive(java.lang.Class)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.util.ParseTools.resolveType(java.lang.Class)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.util.ParseTools.unboxPrimitive(java.lang.Class)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.util.PropertyTools.isNumeric(java.lang.Object)</inbound>
            </feature>
            <feature confirmed="no">
                <name>java.lang.Float.floatToRawIntBits(float)</name>
                <inbound type="feature" confirmed="yes">org.mvel.asm.Item.set(float)</inbound>
            </feature>
            <feature confirmed="no">
                <name>java.lang.Float.floatValue()</name>
                <inbound type="feature" confirmed="yes">org.mvel.asm.ClassWriter.newConstItem(java.lang.Object)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.conversion.IntegerCH$7.convert(java.lang.Object)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.math.IEEEFloatingPointMath.doOperationsSameType(int, java.lang.Object, int, java.lang.Object)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.math.IEEEFloatingPointMath.getBigDecimalFromType(java.lang.Object, int)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.math.JDK14CompatabilityMath.doOperationsSameType(int, java.lang.Object, int, java.lang.Object)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.math.JDK14CompatabilityMath.getBigDecimalFromType(java.lang.Object, int)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.util.ParseTools.increment(java.lang.Object)</inbound>
            </feature>
            <feature confirmed="no">
                <name>java.lang.Float.intBitsToFloat(int)</name>
                <inbound type="feature" confirmed="yes">org.mvel.asm.ClassReader.copyPool(org.mvel.asm.ClassWriter)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.asm.ClassReader.readAnnotationValue(int, char[], java.lang.String, org.mvel.asm.AnnotationVisitor)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.asm.ClassReader.readConst(int, char[])</inbound>
            </feature>
            <feature confirmed="no">
                <name>java.lang.Float.intValue()</name>
                <inbound type="feature" confirmed="yes">org.mvel.conversion.IntegerCH$7.convert(java.lang.Object)</inbound>
            </feature>
            <feature confirmed="no">
                <name>java.lang.Float.parseFloat(java.lang.String)</name>
                <inbound type="feature" confirmed="yes">org.mvel.AbstractParser.static {}</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.conversion.FloatCH$1.convert(java.lang.Object)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.util.ArrayTools.floatTranspose(java.lang.Object[])</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.util.PropertyTools.handleNumericConversion(char[])</inbound>
            </feature>
        </class>
        <class confirmed="no">
            <name>java.lang.IllegalAccessException</name>
            <inbound type="feature" confirmed="yes">org.mvel.PropertyAccessor.get()</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.PropertyAccessor.getBeanProperty(java.lang.Object, java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.PropertyAccessor.getMethod(java.lang.Object, java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.PropertyAccessor.set(java.lang.Object)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.conversion.UnitConversion.canConvertFrom(java.lang.Class)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.conversion.UnitConversion.convertFrom(java.lang.Object)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.asm.ASMAccessorOptimizer.compileAccessor()</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.asm.ASMAccessorOptimizer.getBeanProperty(java.lang.Object, java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.asm.ASMAccessorOptimizer.getCollectionProperty(java.lang.Object, java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.asm.ASMAccessorOptimizer.getMethod(java.lang.Object, java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.refl.ReflectiveAccessorOptimizer.compileConstructor(char[], java.lang.Object, org.mvel.integration.VariableResolverFactory)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.refl.ReflectiveAccessorOptimizer.compileGetChain()</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.refl.ReflectiveAccessorOptimizer.getBeanProperty(java.lang.Object, java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.refl.ReflectiveAccessorOptimizer.optimizeSetAccessor(char[], java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory, boolean, java.lang.Object)</inbound>
            <feature confirmed="no">
                <name>java.lang.IllegalAccessException.printStackTrace()</name>
                <inbound type="feature" confirmed="yes">org.mvel.conversion.UnitConversion.canConvertFrom(java.lang.Class)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.conversion.UnitConversion.convertFrom(java.lang.Object)</inbound>
            </feature>
        </class>
        <class confirmed="no">
            <name>java.lang.IllegalArgumentException</name>
            <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.refl.ConstructorAccessor.getValue(java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.refl.GetterAccessor.getValue(java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.refl.MethodAccessor.getValue(java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.refl.SetterAccessor.setValue(java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory, java.lang.Object)</inbound>
            <feature confirmed="no">
                <name>java.lang.IllegalArgumentException.IllegalArgumentException(java.lang.String)</name>
                <inbound type="feature" confirmed="yes">org.mvel.asm.ClassWriter.newConstItem(java.lang.Object)</inbound>
            </feature>
        </class>
        <class confirmed="no">
            <name>java.lang.IllegalStateException</name>
            <feature confirmed="no">
                <name>java.lang.IllegalStateException.IllegalStateException(java.lang.String)</name>
                <inbound type="feature" confirmed="yes">org.mvel.asm.Label.getOffset()</inbound>
            </feature>
        </class>
        <class confirmed="no">
            <name>java.lang.IndexOutOfBoundsException</name>
            <inbound type="feature" confirmed="yes">org.mvel.PropertyAccessor.get()</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.asm.ASMAccessorOptimizer.compileAccessor()</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.refl.ReflectiveAccessorOptimizer.compileGetChain()</inbound>
        </class>
        <class confirmed="no">
            <name>java.lang.InstantiationException</name>
            <inbound type="feature" confirmed="yes">org.mvel.conversion.UnitConversion.canConvertFrom(java.lang.Class)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.conversion.UnitConversion.convertFrom(java.lang.Object)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.refl.ReflectiveAccessorOptimizer.compileConstructor(char[], java.lang.Object, org.mvel.integration.VariableResolverFactory)</inbound>
            <feature confirmed="no">
                <name>java.lang.InstantiationException.printStackTrace()</name>
                <inbound type="feature" confirmed="yes">org.mvel.conversion.UnitConversion.canConvertFrom(java.lang.Class)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.conversion.UnitConversion.convertFrom(java.lang.Object)</inbound>
            </feature>
        </class>
        <class confirmed="no">
            <name>java.lang.Integer</name>
            <inbound type="feature" confirmed="yes">org.mvel.ASTNode.getOperator()</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.ASTNode.isOperator(java.lang.Integer)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.ASTNode.setName(char[])</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.ASTNode.valRet(java.lang.Object)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.AbstractParser.arithmeticFunctionReduction(int)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.AbstractParser.asInt(java.lang.Object)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.AbstractParser.createOperator(char[], int, int, int)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.AbstractParser.nextToken()</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.AbstractParser.reduce()</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.ExpressionCompiler._compile()</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.ExpressionCompiler.verify(org.mvel.ParserContext, org.mvel.ASTNode)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.MVELInterpretedRuntime.parseAndExecuteInterpreted()</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.MVELInterpretedRuntime.procBooleanOperator(int)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.MVELInterpretedRuntime.unwindStatement(int)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.MVELRuntime.execute(boolean, org.mvel.CompiledExpression, java.lang.Object, org.mvel.integration.VariableResolverFactory)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.PropertyAccessor.addMethodCache(java.lang.Class, java.lang.Integer, java.lang.reflect.Method)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.PropertyAccessor.addReadCache(java.lang.Class, java.lang.Integer, java.lang.reflect.Member)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.PropertyAccessor.addWriteCache(java.lang.Class, java.lang.Integer, java.lang.reflect.Member)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.PropertyAccessor.checkMethodCache(java.lang.Class, java.lang.Integer)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.PropertyAccessor.checkReadCache(java.lang.Class, java.lang.Integer)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.PropertyAccessor.checkWriteCache(java.lang.Class, java.lang.Integer)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.PropertyAccessor.getBeanProperty(java.lang.Object, java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.PropertyAccessor.getCollectionProperty(java.lang.Object, java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.PropertyAccessor.getMethod(java.lang.Object, java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.PropertyAccessor.set(java.lang.Object)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.asm.ClassReader.accept(org.mvel.asm.ClassVisitor, org.mvel.asm.Attribute[], int)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.asm.ClassReader.readFrameType(java.lang.Object[], int, int, char[], org.mvel.asm.Label[])</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.asm.ClassWriter.newConstItem(java.lang.Object)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.asm.MethodWriter.visitFrame(int, int, java.lang.Object[], int, java.lang.Object[])</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.asm.MethodWriter.writeFrameType(java.lang.Object)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.asm.Opcodes.DOUBLE</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.asm.Opcodes.FLOAT</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.asm.Opcodes.INTEGER</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.asm.Opcodes.LONG</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.asm.Opcodes.NULL</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.asm.Opcodes.TOP</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.asm.Opcodes.UNINITIALIZED_THIS</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.asm.Opcodes.static {}</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.ast.EndOfStatement.EndOfStatement()</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.ast.EndOfStatement.getOperator()</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.ast.ForEachNode.getReducedValue(java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.ast.ForEachNode.getReducedValueAccelerated(java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.ast.LiteralNode.LiteralNode(java.lang.Object)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.ast.NewObjectNode$NewObjectArray.getValue(java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.ast.NewObjectNode.getReducedValue(java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.ast.OperatorNode.OperatorNode(java.lang.Integer)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.ast.OperatorNode.getOperator()</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.ast.OperatorNode.getReducedValue(java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.ast.OperatorNode.getReducedValueAccelerated(java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.ast.OperatorNode.isOperator(java.lang.Integer)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.ast.OperatorNode.operator</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.conversion.ArrayCH$2.convert(java.lang.Object)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.conversion.CharCH$5.convert(java.lang.Object)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.conversion.IntArrayCH$1.convert(java.lang.Object)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.conversion.IntArrayCH$2.convert(java.lang.Object)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.conversion.IntegerCH$10.convert(java.lang.Object)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.conversion.IntegerCH$11.convert(java.lang.Object)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.conversion.IntegerCH$2.convert(java.lang.Object)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.conversion.IntegerCH$3.convert(java.lang.Object)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.conversion.LongCH$7.convert(java.lang.Object)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.debug.DebugTools.decompile(org.mvel.CompiledExpression, boolean, org.mvel.debug.DebugTools$DecompileContext)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.math.IEEEFloatingPointMath.doOperationsSameType(int, java.lang.Object, int, java.lang.Object)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.math.IEEEFloatingPointMath.getBigDecimalFromType(java.lang.Object, int)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.math.JDK14CompatabilityMath.doOperationsSameType(int, java.lang.Object, int, java.lang.Object)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.math.JDK14CompatabilityMath.getBigDecimalFromType(java.lang.Object, int)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.asm.ASMAccessorOptimizer.getCollectionProperty(java.lang.Object, java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.asm.ASMAccessorOptimizer.getMethod(java.lang.Object, java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.asm.ASMAccessorOptimizer.writeOutLiteralWrapped(java.lang.Object)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.refl.ArrayAccessorNest.getValue(java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.refl.ArrayAccessorNest.setValue(java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory, java.lang.Object)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.refl.IndexedCharSeqAccessorNest.getValue(java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.refl.ListAccessorNest.getValue(java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.refl.ListAccessorNest.setValue(java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory, java.lang.Object)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.refl.ReflectiveAccessorOptimizer.getCollectionProperty(java.lang.Object, java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.refl.ReflectiveAccessorOptimizer.optimizeFold(char[], java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.refl.ReflectiveAccessorOptimizer.optimizeSetAccessor(char[], java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory, boolean, java.lang.Object)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.util.CompilerTools.optimizeAST(org.mvel.ASTLinkedList, boolean)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.util.ParseTools.increment(java.lang.Object)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.util.PropertyTools.isNumber(java.lang.Object)</inbound>
            <feature confirmed="no">
                <name>java.lang.Integer.Integer(int)</name>
                <inbound type="feature" confirmed="yes">org.mvel.ASTNode.setName(char[])</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.ASTNode.valRet(java.lang.Object)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.AbstractParser._loadLanguageFeaturesByLevel(int)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.AbstractParser.arithmeticFunctionReduction(int)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.AbstractParser.reduce()</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.ExecutableLiteral.ExecutableLiteral(int)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.ExpressionCompiler._compile()</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.ExpressionCompiler.verify(org.mvel.ParserContext, org.mvel.ASTNode)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.MVELInterpretedRuntime.parseAndExecuteInterpreted()</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.MVELInterpretedRuntime.procBooleanOperator(int)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.MVELInterpretedRuntime.unwindStatement(int)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.MVELRuntime.execute(boolean, org.mvel.CompiledExpression, java.lang.Object, org.mvel.integration.VariableResolverFactory)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.ParserContext.addKnownLine(java.lang.String, int)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.ParserContext.isKnownLine(java.lang.String, int)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.PropertyAccessor.getBeanProperty(java.lang.Object, java.lang.String)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.PropertyAccessor.getMethod(java.lang.Object, java.lang.String)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.PropertyAccessor.set(java.lang.Object)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.TemplateInterpreter.execute(java.lang.Object, java.util.Map, org.mvel.TemplateRegistry)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.asm.ClassReader.readConst(int, char[])</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.asm.Opcodes.static {}</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.ast.EndOfStatement.getOperator()</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.ast.ForEachNode.getReducedValue(java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.ast.ForEachNode.getReducedValueAccelerated(java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.ast.PostFixDecNode.getReducedValueAccelerated(java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.ast.PostFixIncNode.getReducedValueAccelerated(java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.ast.PreFixDecNode.getReducedValueAccelerated(java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.ast.PreFixIncNode.getReducedValueAccelerated(java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.conversion.ArrayCH$2.convert(java.lang.Object)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.conversion.IntArrayCH$1.convert(java.lang.Object)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.conversion.IntArrayCH$2.convert(java.lang.Object)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.conversion.IntegerCH$1.convert(java.lang.Object)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.conversion.IntegerCH$4.convert(java.lang.Object)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.conversion.IntegerCH$6.convert(java.lang.Object)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.conversion.IntegerCH$7.convert(java.lang.Object)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.conversion.IntegerCH$8.convert(java.lang.Object)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.debug.DebugTools.decompile(org.mvel.CompiledExpression, boolean, org.mvel.debug.DebugTools$DecompileContext)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.debug.DebuggerContext.hasBreakpoint(java.lang.String, int)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.debug.DebuggerContext.hasBreakpoint(org.mvel.ast.LineLabel)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.debug.DebuggerContext.registerBreakpoint(java.lang.String, int)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.debug.DebuggerContext.removeBreakpoint(java.lang.String, int)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.math.IEEEFloatingPointMath.doOperationsSameType(int, java.lang.Object, int, java.lang.Object)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.math.JDK14CompatabilityMath.doOperationsSameType(int, java.lang.Object, int, java.lang.Object)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.asm.ASMAccessorOptimizer.getBeanProperty(java.lang.Object, java.lang.String)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.asm.ASMAccessorOptimizer.getMethod(java.lang.Object, java.lang.String)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.asm.ASMAccessorOptimizer.loadClass(java.lang.String, byte[])</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.refl.ArrayLength.getValue(java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.refl.ReflectiveAccessorOptimizer.get(java.lang.String, java.lang.Object)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.refl.ReflectiveAccessorOptimizer.getBeanProperty(java.lang.Object, java.lang.String)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.refl.ReflectiveAccessorOptimizer.getCollectionProperty(java.lang.Object, java.lang.String)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.refl.ReflectiveAccessorOptimizer.getMethod(java.lang.Object, java.lang.String)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.refl.ReflectiveAccessorOptimizer.optimizeFold(char[], java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.util.ArrayTools.listTranspose(int[])</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.util.CompilerTools.optimizeAST(org.mvel.ASTLinkedList, boolean)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.util.ParseTools.getBestCandidate(java.lang.Class[], java.lang.String, java.lang.Class, java.lang.reflect.Method[])</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.util.ParseTools.getBestConstructorCanadidate(java.lang.Object[], java.lang.Class)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.util.ParseTools.handleParserEgress(java.lang.Object, boolean)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.util.ParseTools.increment(java.lang.Object)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.util.PropertyTools.handleNumericConversion(char[])</inbound>
            </feature>
            <feature confirmed="no">
                <name>java.lang.Integer.TYPE</name>
                <inbound type="feature" confirmed="yes">org.mvel.DataConversion.static {}</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.asm.Type.getDescriptor(java.lang.StringBuffer, java.lang.Class)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.asm.Type.getType(java.lang.Class)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.asm.ASMAccessorOptimizer.getBeanProperty(java.lang.Object, java.lang.String)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.asm.ASMAccessorOptimizer.getCollectionProperty(java.lang.Object, java.lang.String)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.asm.ASMAccessorOptimizer.getMethod(java.lang.Object, java.lang.String)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.asm.ASMAccessorOptimizer.getWrapperClass(java.lang.Class)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.asm.ASMAccessorOptimizer.static {}</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.asm.ASMAccessorOptimizer.unwrapPrimitive(java.lang.Class)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.asm.ASMAccessorOptimizer.wrapPrimitive(java.lang.Class)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.asm.ASMAccessorOptimizer.writeOutLiteralWrapped(java.lang.Object)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.util.ParseTools.boxPrimitive(java.lang.Class)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.util.ParseTools.resolveType(java.lang.Class)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.util.ParseTools.unboxPrimitive(java.lang.Class)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.util.PropertyTools.isNumeric(java.lang.Object)</inbound>
            </feature>
            <feature confirmed="no">
                <name>java.lang.Integer.equals(java.lang.Object)</name>
                <inbound type="feature" confirmed="yes">org.mvel.ASTNode.isOperator(java.lang.Integer)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.ast.OperatorNode.isOperator(java.lang.Integer)</inbound>
            </feature>
            <feature confirmed="no">
                <name>java.lang.Integer.intValue()</name>
                <inbound type="feature" confirmed="yes">org.mvel.ASTNode.setName(char[])</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.ASTNode.valRet(java.lang.Object)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.AbstractParser.arithmeticFunctionReduction(int)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.AbstractParser.asInt(java.lang.Object)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.AbstractParser.nextToken()</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.AbstractParser.reduce()</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.ExpressionCompiler._compile()</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.MVELInterpretedRuntime.parseAndExecuteInterpreted()</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.MVELRuntime.execute(boolean, org.mvel.CompiledExpression, java.lang.Object, org.mvel.integration.VariableResolverFactory)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.PropertyAccessor.getCollectionProperty(java.lang.Object, java.lang.String)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.PropertyAccessor.set(java.lang.Object)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.asm.ClassWriter.newConstItem(java.lang.Object)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.asm.MethodWriter.visitFrame(int, int, java.lang.Object[], int, java.lang.Object[])</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.asm.MethodWriter.writeFrameType(java.lang.Object)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.ast.ForEachNode.getReducedValue(java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.ast.ForEachNode.getReducedValueAccelerated(java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.ast.LiteralNode.LiteralNode(java.lang.Object)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.ast.NewObjectNode$NewObjectArray.getValue(java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.ast.NewObjectNode.getReducedValue(java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.conversion.CharCH$5.convert(java.lang.Object)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.conversion.PrimIntArrayCH$3.convert(java.lang.Object)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.debug.DebugTools.decompile(org.mvel.CompiledExpression, boolean, org.mvel.debug.DebugTools$DecompileContext)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.math.IEEEFloatingPointMath.doOperationsSameType(int, java.lang.Object, int, java.lang.Object)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.math.IEEEFloatingPointMath.getBigDecimalFromType(java.lang.Object, int)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.math.JDK14CompatabilityMath.doOperationsSameType(int, java.lang.Object, int, java.lang.Object)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.math.JDK14CompatabilityMath.getBigDecimalFromType(java.lang.Object, int)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.asm.ASMAccessorOptimizer.getCollectionProperty(java.lang.Object, java.lang.String)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.asm.ASMAccessorOptimizer.getMethod(java.lang.Object, java.lang.String)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.asm.ASMAccessorOptimizer.writeOutLiteralWrapped(java.lang.Object)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.refl.ArrayAccessorNest.getValue(java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.refl.ArrayAccessorNest.setValue(java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory, java.lang.Object)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.refl.IndexedCharSeqAccessorNest.getValue(java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.refl.ListAccessorNest.getValue(java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.refl.ListAccessorNest.setValue(java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory, java.lang.Object)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.refl.ReflectiveAccessorOptimizer.getCollectionProperty(java.lang.Object, java.lang.String)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.refl.ReflectiveAccessorOptimizer.optimizeSetAccessor(char[], java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory, boolean, java.lang.Object)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.util.CompilerTools.optimizeAST(org.mvel.ASTLinkedList, boolean)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.util.ParseTools.increment(java.lang.Object)</inbound>
            </feature>
            <feature confirmed="no">
                <name>java.lang.Integer.longValue()</name>
                <inbound type="feature" confirmed="yes">org.mvel.conversion.LongCH$7.convert(java.lang.Object)</inbound>
            </feature>
            <feature confirmed="no">
                <name>java.lang.Integer.parseInt(java.lang.String)</name>
                <inbound type="feature" confirmed="yes">org.mvel.conversion.ArrayCH$2.convert(java.lang.Object)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.conversion.ArrayCH$3.convert(java.lang.Object)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.conversion.IntArrayCH$1.convert(java.lang.Object)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.conversion.IntArrayCH$2.convert(java.lang.Object)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.conversion.IntegerCH$1.convert(java.lang.Object)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.conversion.IntegerCH$4.convert(java.lang.Object)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.conversion.PrimIntArrayCH$1.convert(java.lang.Object)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.conversion.PrimIntArrayCH$2.convert(java.lang.Object)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.refl.ReflectiveAccessorOptimizer.getCollectionProperty(java.lang.Object, java.lang.String)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.util.ArrayTools.intTranspose(java.lang.Object[])</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.util.PropertyTools.handleNumericConversion(char[])</inbound>
            </feature>
        </class>
        <class confirmed="no">
            <name>java.lang.Integer[]</name>
            <inbound type="feature" confirmed="yes">org.mvel.conversion.PrimIntArrayCH$3.convert(java.lang.Object)</inbound>
        </class>
        <class confirmed="no">
            <name>java.lang.Iterable</name>
            <inbound type="feature" confirmed="yes">org.mvel.ast.ForEachNode.getReducedValue(java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.ast.ForEachNode.getReducedValueAccelerated(java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory)</inbound>
            <feature confirmed="no">
                <name>java.lang.Iterable.iterator()</name>
                <inbound type="feature" confirmed="yes">org.mvel.ast.ForEachNode.getReducedValue(java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.ast.ForEachNode.getReducedValueAccelerated(java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory)</inbound>
            </feature>
        </class>
        <class confirmed="no">
            <name>java.lang.Long</name>
            <inbound type="feature" confirmed="yes">org.mvel.asm.ClassWriter.newConstItem(java.lang.Object)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.conversion.IntegerCH$6.convert(java.lang.Object)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.conversion.LongCH$3.convert(java.lang.Object)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.conversion.LongCH$4.convert(java.lang.Object)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.conversion.LongCH$6.convert(java.lang.Object)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.conversion.LongCH$8.convert(java.lang.Object)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.math.IEEEFloatingPointMath.doOperationsSameType(int, java.lang.Object, int, java.lang.Object)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.math.IEEEFloatingPointMath.getBigDecimalFromType(java.lang.Object, int)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.math.JDK14CompatabilityMath.doOperationsSameType(int, java.lang.Object, int, java.lang.Object)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.math.JDK14CompatabilityMath.getBigDecimalFromType(java.lang.Object, int)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.asm.ASMAccessorOptimizer.writeOutLiteralWrapped(java.lang.Object)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.util.PropertyTools.isNumber(java.lang.Object)</inbound>
            <feature confirmed="no">
                <name>java.lang.Long.Long(long)</name>
                <inbound type="feature" confirmed="yes">org.mvel.asm.ClassReader.readConst(int, char[])</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.conversion.LongCH$1.convert(java.lang.Object)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.conversion.LongCH$5.convert(java.lang.Object)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.conversion.LongCH$6.convert(java.lang.Object)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.conversion.LongCH$7.convert(java.lang.Object)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.math.IEEEFloatingPointMath.doOperationsSameType(int, java.lang.Object, int, java.lang.Object)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.math.JDK14CompatabilityMath.doOperationsSameType(int, java.lang.Object, int, java.lang.Object)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.util.ArrayTools.listTranspose(long[])</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.util.ParseTools.handleParserEgress(java.lang.Object, boolean)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.util.PropertyTools.handleNumericConversion(char[])</inbound>
            </feature>
            <feature confirmed="no">
                <name>java.lang.Long.TYPE</name>
                <inbound type="feature" confirmed="yes">org.mvel.DataConversion.static {}</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.asm.ASMAccessorOptimizer.getWrapperClass(java.lang.Class)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.asm.ASMAccessorOptimizer.unwrapPrimitive(java.lang.Class)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.asm.ASMAccessorOptimizer.wrapPrimitive(java.lang.Class)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.asm.ASMAccessorOptimizer.writeOutLiteralWrapped(java.lang.Object)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.util.ParseTools.boxPrimitive(java.lang.Class)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.util.ParseTools.resolveType(java.lang.Class)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.util.ParseTools.unboxPrimitive(java.lang.Class)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.util.PropertyTools.isNumeric(java.lang.Object)</inbound>
            </feature>
            <feature confirmed="no">
                <name>java.lang.Long.intValue()</name>
                <inbound type="feature" confirmed="yes">org.mvel.conversion.IntegerCH$6.convert(java.lang.Object)</inbound>
            </feature>
            <feature confirmed="no">
                <name>java.lang.Long.longValue()</name>
                <inbound type="feature" confirmed="yes">org.mvel.asm.ClassWriter.newConstItem(java.lang.Object)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.conversion.IntegerCH$6.convert(java.lang.Object)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.conversion.LongCH$6.convert(java.lang.Object)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.math.IEEEFloatingPointMath.doOperationsSameType(int, java.lang.Object, int, java.lang.Object)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.math.IEEEFloatingPointMath.getBigDecimalFromType(java.lang.Object, int)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.math.JDK14CompatabilityMath.doOperationsSameType(int, java.lang.Object, int, java.lang.Object)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.math.JDK14CompatabilityMath.getBigDecimalFromType(java.lang.Object, int)</inbound>
            </feature>
            <feature confirmed="no">
                <name>java.lang.Long.parseLong(java.lang.String)</name>
                <inbound type="feature" confirmed="yes">org.mvel.conversion.LongCH$1.convert(java.lang.Object)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.util.ArrayTools.longTranspose(java.lang.Object[])</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.util.PropertyTools.handleNumericConversion(char[])</inbound>
            </feature>
        </class>
        <class confirmed="no">
            <name>java.lang.Math</name>
            <feature confirmed="no">
                <name>java.lang.Math.max(int, int)</name>
                <inbound type="feature" confirmed="yes">org.mvel.asm.Frame.init(int)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.asm.Frame.push(int)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.asm.Frame.set(int, int)</inbound>
            </feature>
            <feature confirmed="no">
                <name>java.lang.Math.pow(double, double)</name>
                <inbound type="feature" confirmed="yes">org.mvel.math.IEEEFloatingPointMath.doBigDecimalArithmetic(java.math.BigDecimal, int, java.math.BigDecimal)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.math.IEEEFloatingPointMath.doOperationsSameType(int, java.lang.Object, int, java.lang.Object)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.math.JDK14CompatabilityMath.doBigDecimalArithmetic(java.math.BigDecimal, int, java.math.BigDecimal)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.math.JDK14CompatabilityMath.doOperationsSameType(int, java.lang.Object, int, java.lang.Object)</inbound>
            </feature>
            <feature confirmed="no">
                <name>java.lang.Math.random()</name>
                <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.asm.ASMAccessorOptimizer._initJIT()</inbound>
            </feature>
        </class>
        <class confirmed="no">
            <name>java.lang.NoClassDefFoundError</name>
            <inbound type="feature" confirmed="yes">org.mvel.ParserContext.checkForDynamicImport(java.lang.String)</inbound>
            <feature confirmed="no">
                <name>java.lang.NoClassDefFoundError.NoClassDefFoundError(java.lang.String)</name>
                <inbound type="feature" confirmed="yes">org.mvel.ASTNode.getReducedValue(java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.ASTNode.setName(char[])</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.AbstractParser.createPropertyToken(int, int)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.AbstractParser.nextToken()</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.AbstractParser.static {}</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.DataConversion.static {}</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.ExpressionCompiler.verify(org.mvel.ParserContext, org.mvel.ASTNode)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.MVEL.evalToBoolean(java.lang.String, java.lang.Object)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.MVEL.evalToBoolean(java.lang.String, java.lang.Object, java.util.Map)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.MVEL.evalToBoolean(java.lang.String, java.lang.Object, org.mvel.integration.VariableResolverFactory)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.MVEL.evalToBoolean(java.lang.String, org.mvel.integration.VariableResolverFactory)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.MVELInterpretedRuntime.parse()</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.ParserContext.addInput(java.lang.String, java.lang.Class)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.ParserContext.addVariable(java.lang.String, java.lang.Class)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.ParserContext.getVarOrInputType(java.lang.String)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.PropertyAccessor.set(java.lang.Object)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.PropertyVerifier.analyze()</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.PropertyVerifier.getBeanProperty(java.lang.Class, java.lang.String)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.PropertyVerifier.getCollectionProperty(java.lang.Class, java.lang.String)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.PropertyVerifier.getMethod(java.lang.Class, java.lang.String)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.ast.AssignmentNode.getReducedValueAccelerated(java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.ast.IfNode.getReducedValue(java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.ast.IfNode.getReducedValueAccelerated(java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.ast.InlineCollectionNode.getReducedValueAccelerated(java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.ast.NewObjectNode$NewObjectArray.getValue(java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.ast.NewObjectNode.getReducedValue(java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.ast.NewObjectNode.getReducedValueAccelerated(java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.ast.OperatorNode.static {}</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.ast.PropertyASTNode.initializePropertyNode(java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.conversion.ArrayCH.convertFrom(java.lang.Object)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.conversion.ArrayCH.static {}</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.conversion.BigDecimalCH.convertFrom(java.lang.Object)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.conversion.BigDecimalCH.static {}</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.conversion.BigIntegerCH.convertFrom(java.lang.Object)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.conversion.BigIntegerCH.static {}</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.conversion.BooleanCH$2.convert(java.lang.Object)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.conversion.BooleanCH.convertFrom(java.lang.Object)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.conversion.BooleanCH.static {}</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.conversion.ByteCH$2.convert(java.lang.Object)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.conversion.ByteCH.convertFrom(java.lang.Object)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.conversion.ByteCH.static {}</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.conversion.CharArrayCH.convertFrom(java.lang.Object)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.conversion.CharArrayCH.static {}</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.conversion.CharCH$2.convert(java.lang.Object)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.conversion.CharCH.convertFrom(java.lang.Object)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.conversion.CharCH.static {}</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.conversion.DoubleCH$2.convert(java.lang.Object)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.conversion.DoubleCH.convertFrom(java.lang.Object)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.conversion.DoubleCH.static {}</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.conversion.FloatCH$2.convert(java.lang.Object)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.conversion.FloatCH.convertFrom(java.lang.Object)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.conversion.FloatCH.static {}</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.conversion.IntArrayCH.convertFrom(java.lang.Object)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.conversion.IntArrayCH.static {}</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.conversion.IntegerCH.convertFrom(java.lang.Object)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.conversion.IntegerCH.static {}</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.conversion.LongCH$2.convert(java.lang.Object)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.conversion.LongCH.convertFrom(java.lang.Object)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.conversion.LongCH.static {}</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.conversion.PrimArrayHandler.PrimArrayHandler(java.lang.Class)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.conversion.PrimIntArrayCH.convertFrom(java.lang.Object)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.conversion.PrimIntArrayCH.static {}</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.conversion.ShortCH$2.convert(java.lang.Object)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.conversion.ShortCH.convertFrom(java.lang.Object)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.conversion.ShortCH.static {}</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.conversion.StringArrayCH.static {}</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.conversion.StringCH.canConvertFrom(java.lang.Class)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.conversion.UnitConversion.canConvertFrom(java.lang.Class)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.conversion.UnitConversion.convertFrom(java.lang.Object)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.integration.impl.ClassImportResolver.getType()</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.integration.impl.ItemResolverFactory$ItemResolver.ItemResolverFactory$ItemResolver(java.lang.String)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.integration.impl.SimpleValueResolver.getType()</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.math.IEEEFloatingPointMath._doOperations(int, java.lang.Object, int, int, java.lang.Object)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.math.JDK14CompatabilityMath._doOperations(int, java.lang.Object, int, int, java.lang.Object)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.asm.ASMAccessorOptimizer._initializeAccessor()</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.asm.ASMAccessorOptimizer.anyArrayCheck(java.lang.Class)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.asm.ASMAccessorOptimizer.getBeanProperty(java.lang.Object, java.lang.String)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.asm.ASMAccessorOptimizer.getCollectionProperty(java.lang.Object, java.lang.String)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.asm.ASMAccessorOptimizer.getMethod(java.lang.Object, java.lang.String)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.asm.ASMAccessorOptimizer.getWrapperClass(java.lang.Class)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.asm.ASMAccessorOptimizer.optimizeCollection(char[], java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.asm.ASMAccessorOptimizer.static {}</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.asm.ASMAccessorOptimizer.wrapPrimitive(java.lang.Class)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.asm.ASMAccessorOptimizer.writeLiteralOrSubexpression(java.lang.Object, java.lang.Class)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.refl.ReflectiveAccessorOptimizer._getAccessor(java.lang.Object)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.refl.ReflectiveAccessorOptimizer.optimizeSetAccessor(char[], java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory, boolean, java.lang.Object)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.util.ParseTools.boxPrimitive(java.lang.Class)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.util.ParseTools.getBestCandidate(java.lang.Class[], java.lang.String, java.lang.Class, java.lang.reflect.Method[])</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.util.ParseTools.isNumericallyCoercible(java.lang.Class, java.lang.Class)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.util.ParseTools.isPrimitiveWrapper(java.lang.Class)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.util.ParseTools.resolveType(java.lang.Class)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.util.ParseTools.unboxPrimitive(java.lang.Class)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.util.PropertyTools.isNumeric(java.lang.Object)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.util.ReflectionUtil.isAssignable(java.lang.Object, java.lang.Class)</inbound>
            </feature>
            <feature confirmed="no">
                <name>java.lang.NoClassDefFoundError.getMessage()</name>
                <inbound type="feature" confirmed="yes">org.mvel.ParserContext.checkForDynamicImport(java.lang.String)</inbound>
            </feature>
        </class>
        <class confirmed="no">
            <name>java.lang.NoSuchFieldException</name>
            <inbound type="feature" confirmed="yes">org.mvel.util.PropertyTools.getFieldOrWriteAccessor(java.lang.Class, java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.util.PropertyTools.getWritableFieldOrAccessor(java.lang.Class, java.lang.String)</inbound>
        </class>
        <class confirmed="no">
            <name>java.lang.NoSuchMethodException</name>
            <inbound type="feature" confirmed="yes">org.mvel.ast.NewObjectNode.getReducedValue(java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.refl.ReflectiveAccessorOptimizer.compileConstructor(char[], java.lang.Object, org.mvel.integration.VariableResolverFactory)</inbound>
            <feature confirmed="no">
                <name>java.lang.NoSuchMethodException.getMessage()</name>
                <inbound type="feature" confirmed="yes">org.mvel.ast.NewObjectNode.getReducedValue(java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory)</inbound>
            </feature>
        </class>
        <class confirmed="no">
            <name>java.lang.NullPointerException</name>
            <inbound type="feature" confirmed="yes">org.mvel.ASTNode.getReducedValueAccelerated(java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.MVELInterpretedRuntime.parse()</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.MVELInterpretedRuntime.parseAndExecuteInterpreted()</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.MVELRuntime.execute(boolean, org.mvel.CompiledExpression, java.lang.Object, org.mvel.integration.VariableResolverFactory)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.PropertyAccessor.get()</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.TemplateInterpreter.execute(java.lang.Object, java.util.Map, org.mvel.TemplateRegistry)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.asm.ASMAccessorOptimizer.compileAccessor()</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.refl.ReflectiveAccessorOptimizer.compileGetChain()</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.util.PropertyTools.getFieldOrWriteAccessor(java.lang.Class, java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.util.PropertyTools.getWritableFieldOrAccessor(java.lang.Class, java.lang.String)</inbound>
            <feature confirmed="no">
                <name>java.lang.NullPointerException.printStackTrace()</name>
                <inbound type="feature" confirmed="yes">org.mvel.MVELInterpretedRuntime.parse()</inbound>
            </feature>
        </class>
        <class confirmed="no">
            <name>java.lang.Object</name>
            <inbound type="class" confirmed="yes">org.mvel.ASTArrayList</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.ASTArrayList.ASTArrayList(org.mvel.ASTIterator)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.ASTArrayList.showNodeChain()</inbound>
            <inbound type="class" confirmed="yes">org.mvel.ASTIterator</inbound>
            <inbound type="class" confirmed="yes">org.mvel.ASTLinkedList</inbound>
            <inbound type="class" confirmed="yes">org.mvel.ASTNode</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.ASTNode.ASTNode(int, java.lang.Object)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.ASTNode.getLiteralValue()</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.ASTNode.getOperator()</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.ASTNode.getReducedValue(java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.ASTNode.getReducedValueAccelerated(java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.ASTNode.isOperator(java.lang.Integer)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.ASTNode.literal</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.ASTNode.setLiteralValue(java.lang.Object)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.ASTNode.setName(char[])</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.ASTNode.toString()</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.ASTNode.tryStaticAccess(java.lang.Object, org.mvel.integration.VariableResolverFactory)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.ASTNode.valRet(java.lang.Object)</inbound>
            <inbound type="class" confirmed="yes">org.mvel.AbstractParser</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.AbstractParser._loadLanguageFeaturesByLevel(int)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.AbstractParser.arithmeticFunctionReduction(int)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.AbstractParser.asInt(java.lang.Object)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.AbstractParser.contextControl(int, org.mvel.ParserContext, org.mvel.AbstractParser)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.AbstractParser.createBlockToken(int, int, int, int, int)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.AbstractParser.createOperator(char[], int, int, int)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.AbstractParser.createPropertyToken(int, int)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.AbstractParser.ctx</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.AbstractParser.dreduce()</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.AbstractParser.dreduce2()</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.AbstractParser.getCurrentSourceFileName()</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.AbstractParser.getParserContext()</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.AbstractParser.handleSubstatement(org.mvel.ast.Substatement)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.AbstractParser.isReservedWord(java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.AbstractParser.nextToken()</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.AbstractParser.reduce()</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.AbstractParser.setExpression(java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.AbstractParser.static {}</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.AbstractParser.xswap()</inbound>
            <inbound type="class" confirmed="yes">org.mvel.Accessor</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.Accessor.getValue(java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.Accessor.setValue(java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory, java.lang.Object)</inbound>
            <inbound type="class" confirmed="yes">org.mvel.AccessorNode</inbound>
            <inbound type="class" confirmed="yes">org.mvel.BlankLiteral</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.BlankLiteral.equals(java.lang.Object)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.CompileException.CompileException(java.lang.String, char[], int)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.CompileException.CompileException(java.lang.String, char[], int, boolean)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.CompileException.CompileException(java.lang.String, char[], int, java.lang.Exception)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.CompileException.CompileException(java.lang.String, java.util.List)</inbound>
            <inbound type="class" confirmed="yes">org.mvel.CompiledExpression</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.CompiledExpression.getDirectValue(java.lang.Object, org.mvel.integration.VariableResolverFactory)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.CompiledExpression.getValue(java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.CompiledExpression.getValue(java.lang.Object, org.mvel.integration.VariableResolverFactory)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.CompiledExpression.setValue(java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory, java.lang.Object)</inbound>
            <inbound type="class" confirmed="yes">org.mvel.CompiledSetExpression</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.CompiledSetExpression.setValue(java.lang.Object, org.mvel.integration.VariableResolverFactory, java.lang.Object)</inbound>
            <inbound type="class" confirmed="yes">org.mvel.ConversionHandler</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.ConversionHandler.convertFrom(java.lang.Object)</inbound>
            <inbound type="class" confirmed="yes">org.mvel.DataConversion</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.DataConversion.addConversionHandler(java.lang.Class, org.mvel.ConversionHandler)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.DataConversion.canConvert(java.lang.Class, java.lang.Class)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.DataConversion.convert(java.lang.Object, java.lang.Class)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.DataConversion.static {}</inbound>
            <inbound type="class" confirmed="yes">org.mvel.DataTypes</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.EndWithValue.EndWithValue(java.lang.Object)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.EndWithValue.getValue()</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.EndWithValue.value</inbound>
            <inbound type="class" confirmed="yes">org.mvel.ErrorDetail</inbound>
            <inbound type="class" confirmed="yes">org.mvel.ExecutableAccessor</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.ExecutableAccessor.getValue(java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.ExecutableAccessor.getValue(java.lang.Object, org.mvel.integration.VariableResolverFactory)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.ExecutableAccessor.setValue(java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory, java.lang.Object)</inbound>
            <inbound type="class" confirmed="yes">org.mvel.ExecutableLiteral</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.ExecutableLiteral.ExecutableLiteral(int)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.ExecutableLiteral.ExecutableLiteral(java.lang.Object)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.ExecutableLiteral.getKnownEgressType()</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.ExecutableLiteral.getLiteral()</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.ExecutableLiteral.getValue(java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.ExecutableLiteral.getValue(java.lang.Object, org.mvel.integration.VariableResolverFactory)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.ExecutableLiteral.literal</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.ExecutableLiteral.setValue(java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory, java.lang.Object)</inbound>
            <inbound type="class" confirmed="yes">org.mvel.ExecutableStatement</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.ExecutableStatement.getValue(java.lang.Object, org.mvel.integration.VariableResolverFactory)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.ExpressionCompiler._compile()</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.ExpressionCompiler.verify(org.mvel.ParserContext, org.mvel.ASTNode)</inbound>
            <inbound type="class" confirmed="yes">org.mvel.ForeachContext</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.ForeachContext.clone()</inbound>
            <inbound type="class" confirmed="yes">org.mvel.MVEL</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.MVEL.eval(char[], java.lang.Object, java.lang.Class)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.MVEL.eval(char[], java.lang.Object, java.util.Map)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.MVEL.eval(char[], java.lang.Object, java.util.Map, java.lang.Class)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.MVEL.eval(char[], java.lang.Object, org.mvel.integration.VariableResolverFactory)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.MVEL.eval(char[], java.lang.Object, org.mvel.integration.VariableResolverFactory, boolean)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.MVEL.eval(char[], java.lang.Object, org.mvel.integration.VariableResolverFactory, java.lang.Class)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.MVEL.eval(char[], java.util.Map, java.lang.Class)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.MVEL.eval(java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.MVEL.eval(java.lang.String, java.lang.Object)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.MVEL.eval(java.lang.String, java.lang.Object, java.lang.Class)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.MVEL.eval(java.lang.String, java.lang.Object, java.util.Map)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.MVEL.eval(java.lang.String, java.lang.Object, java.util.Map, java.lang.Class)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.MVEL.eval(java.lang.String, java.lang.Object, org.mvel.integration.VariableResolverFactory)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.MVEL.eval(java.lang.String, java.lang.Object, org.mvel.integration.VariableResolverFactory, boolean)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.MVEL.eval(java.lang.String, java.lang.Object, org.mvel.integration.VariableResolverFactory, java.lang.Class)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.MVEL.eval(java.lang.String, java.util.Map)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.MVEL.eval(java.lang.String, java.util.Map, java.lang.Class)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.MVEL.eval(java.lang.String, org.mvel.integration.VariableResolverFactory)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.MVEL.eval(java.lang.String, org.mvel.integration.VariableResolverFactory, java.lang.Class)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.MVEL.evalToBoolean(java.lang.String, java.lang.Object)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.MVEL.evalToBoolean(java.lang.String, java.lang.Object, java.util.Map)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.MVEL.evalToBoolean(java.lang.String, java.lang.Object, org.mvel.integration.VariableResolverFactory)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.MVEL.evalToBoolean(java.lang.String, java.util.Map)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.MVEL.evalToBoolean(java.lang.String, org.mvel.integration.VariableResolverFactory)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.MVEL.evalToString(java.lang.String, java.lang.Object)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.MVEL.evalToString(java.lang.String, java.lang.Object, java.util.Map)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.MVEL.evalToString(java.lang.String, java.util.Map)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.MVEL.executeAllExpression(java.io.Serializable[], java.lang.Object, org.mvel.integration.VariableResolverFactory)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.MVEL.executeDebugger(org.mvel.CompiledExpression, java.lang.Object, org.mvel.integration.VariableResolverFactory)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.MVEL.executeExpression(java.lang.Object)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.MVEL.executeExpression(java.lang.Object, java.lang.Object)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.MVEL.executeExpression(java.lang.Object, java.lang.Object, java.lang.Class)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.MVEL.executeExpression(java.lang.Object, java.lang.Object, java.util.Map)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.MVEL.executeExpression(java.lang.Object, java.lang.Object, java.util.Map, java.lang.Class)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.MVEL.executeExpression(java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.MVEL.executeExpression(java.lang.Object, java.util.Map)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.MVEL.executeExpression(java.lang.Object, java.util.Map, java.lang.Class)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.MVEL.executeExpression(java.lang.Object, org.mvel.integration.VariableResolverFactory)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.MVEL.executeSetExpression(java.io.Serializable, java.lang.Object, java.lang.Object)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.MVEL.executeSetExpression(java.io.Serializable, java.lang.Object, org.mvel.integration.VariableResolverFactory, java.lang.Object)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.MVEL.getProperty(java.lang.String, java.lang.Object)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.MVEL.setProperty(java.lang.Object, java.lang.String, java.lang.Object)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.MVELInterpretedRuntime.MVELInterpretedRuntime(char[], java.lang.Object)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.MVELInterpretedRuntime.MVELInterpretedRuntime(char[], java.lang.Object, java.util.Map)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.MVELInterpretedRuntime.MVELInterpretedRuntime(char[], java.lang.Object, org.mvel.integration.VariableResolverFactory)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.MVELInterpretedRuntime.MVELInterpretedRuntime(char[], java.lang.Object, org.mvel.integration.VariableResolverFactory, boolean)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.MVELInterpretedRuntime.MVELInterpretedRuntime(java.lang.Object, java.util.Map)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.MVELInterpretedRuntime.MVELInterpretedRuntime(java.lang.String, java.lang.Object)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.MVELInterpretedRuntime.MVELInterpretedRuntime(java.lang.String, java.lang.Object, java.util.Map)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.MVELInterpretedRuntime.MVELInterpretedRuntime(java.lang.String, java.lang.Object, org.mvel.integration.VariableResolverFactory)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.MVELInterpretedRuntime.MVELInterpretedRuntime(java.lang.String, java.lang.Object, org.mvel.integration.VariableResolverFactory, boolean)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.MVELInterpretedRuntime.getImport(java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.MVELInterpretedRuntime.holdOverRegister</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.MVELInterpretedRuntime.parse()</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.MVELInterpretedRuntime.parseAndExecuteInterpreted()</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.MVELInterpretedRuntime.procBooleanOperator(int)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.MVELInterpretedRuntime.reduceRight()</inbound>
            <inbound type="class" confirmed="yes">org.mvel.MVELRuntime</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.MVELRuntime.clearAllBreakpoints()</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.MVELRuntime.ensureDebuggerContext()</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.MVELRuntime.execute(boolean, org.mvel.CompiledExpression, java.lang.Object, org.mvel.integration.VariableResolverFactory)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.MVELRuntime.hasBreakpoints()</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.MVELRuntime.hasDebuggerContext()</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.MVELRuntime.registerBreakpoint(java.lang.String, int)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.MVELRuntime.removeBreakpoint(java.lang.String, int)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.MVELRuntime.setThreadDebugger(org.mvel.debug.Debugger)</inbound>
            <inbound type="class" confirmed="yes">org.mvel.MVELSH</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.MVELSH.main(java.lang.String[])</inbound>
            <inbound type="class" confirmed="yes">org.mvel.MVELTemplateRegistry</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.MVELTemplateRegistry.getTemplate(java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.MVELTemplateRegistry.registerTemplate(java.lang.String, java.lang.String)</inbound>
            <inbound type="class" confirmed="yes">org.mvel.Macro</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.MacroProcessor.parse(char[])</inbound>
            <inbound type="class" confirmed="yes">org.mvel.Node</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.Node.clone()</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.Node.getRegister()</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.Node.register</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.Node.setRegister(java.lang.Object)</inbound>
            <inbound type="class" confirmed="yes">org.mvel.NodeType</inbound>
            <inbound type="class" confirmed="yes">org.mvel.Operator</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.ParseException.ParseException(java.lang.String, char[], int)</inbound>
            <inbound type="class" confirmed="yes">org.mvel.ParserContext</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.ParserContext.ParserContext(java.lang.Object)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.ParserContext.addError(org.mvel.ErrorDetail)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.ParserContext.addImport(java.lang.String, java.lang.Class)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.ParserContext.addImport(java.lang.String, org.mvel.util.MethodStub)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.ParserContext.addInput(java.lang.String, java.lang.Class)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.ParserContext.addKnownLine(java.lang.String, int)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.ParserContext.addPackageImport(java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.ParserContext.addVariable(java.lang.String, java.lang.Class)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.ParserContext.checkForDynamicImport(java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.ParserContext.getImport(java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.ParserContext.getRootParser()</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.ParserContext.getStaticImport(java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.ParserContext.getVarOrInputType(java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.ParserContext.hasImport(java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.ParserContext.hasVarOrInput(java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.ParserContext.hasVariable(java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.ParserContext.isKnownLine(java.lang.String, int)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.ParserContext.processTables()</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.ParserContext.rootParser</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.ParserContext.setImports(java.util.Map)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.ParserContext.setRootParser(java.lang.Object)</inbound>
            <inbound type="class" confirmed="yes">org.mvel.PreProcessor</inbound>
            <inbound type="class" confirmed="yes">org.mvel.PropertyAccessor</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.PropertyAccessor.EMPTYARG</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.PropertyAccessor.PropertyAccessor(char[], int, int, java.lang.Object, org.mvel.integration.VariableResolverFactory)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.PropertyAccessor.PropertyAccessor(char[], java.lang.Object)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.PropertyAccessor.PropertyAccessor(char[], java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory, java.lang.Object)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.PropertyAccessor.PropertyAccessor(char[], java.lang.Object, org.mvel.integration.VariableResolverFactory, java.lang.Object)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.PropertyAccessor.PropertyAccessor(java.lang.String, java.lang.Object)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.PropertyAccessor.PropertyAccessor(org.mvel.integration.VariableResolverFactory, java.lang.Object)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.PropertyAccessor.addMethodCache(java.lang.Class, java.lang.Integer, java.lang.reflect.Method)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.PropertyAccessor.addReadCache(java.lang.Class, java.lang.Integer, java.lang.reflect.Member)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.PropertyAccessor.addWriteCache(java.lang.Class, java.lang.Integer, java.lang.reflect.Member)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.PropertyAccessor.checkMethodCache(java.lang.Class, java.lang.Integer)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.PropertyAccessor.checkReadCache(java.lang.Class, java.lang.Integer)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.PropertyAccessor.checkWriteCache(java.lang.Class, java.lang.Integer)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.PropertyAccessor.ctx</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.PropertyAccessor.curr</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.PropertyAccessor.get()</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.PropertyAccessor.get(char[], int, int, java.lang.Object, org.mvel.integration.VariableResolverFactory)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.PropertyAccessor.get(char[], java.lang.Object, org.mvel.integration.VariableResolverFactory, java.lang.Object)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.PropertyAccessor.get(java.lang.String, java.lang.Object)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.PropertyAccessor.get(java.lang.String, java.lang.Object, org.mvel.integration.VariableResolverFactory, java.lang.Object)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.PropertyAccessor.getBeanProperty(java.lang.Object, java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.PropertyAccessor.getCollectionProperty(java.lang.Object, java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.PropertyAccessor.getMethod(java.lang.Object, java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.PropertyAccessor.reportCacheSizes()</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.PropertyAccessor.set(java.lang.Object)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.PropertyAccessor.set(java.lang.Object, java.lang.String, java.lang.Object)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.PropertyAccessor.set(java.lang.Object, org.mvel.integration.VariableResolverFactory, java.lang.String, java.lang.Object)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.PropertyAccessor.static {}</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.PropertyAccessor.thisReference</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.PropertyVerifier.getBeanProperty(java.lang.Class, java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.PropertyVerifier.getMethod(java.lang.Class, java.lang.String)</inbound>
            <inbound type="class" confirmed="yes">org.mvel.SetAccessor</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.SetAccessor.setValue(java.lang.Object, org.mvel.integration.VariableResolverFactory, java.lang.Object)</inbound>
            <inbound type="class" confirmed="yes">org.mvel.Soundex</inbound>
            <inbound type="class" confirmed="yes">org.mvel.TemplateCompiler</inbound>
            <inbound type="class" confirmed="yes">org.mvel.TemplateCompiler$IncludeRef</inbound>
            <inbound type="class" confirmed="yes">org.mvel.TemplateCompiler$IncludeRefParam</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.TemplateCompiler.buildIncludeRef(char[])</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.TemplateCompiler.compileExpression()</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.TemplateCompiler.structuredCaptureArray(int)</inbound>
            <inbound type="class" confirmed="yes">org.mvel.TemplateInterpreter</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.TemplateInterpreter.TemplateInterpreter(java.lang.CharSequence)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.TemplateInterpreter.TemplateInterpreter(java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.TemplateInterpreter.eval(java.lang.String, java.lang.Object)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.TemplateInterpreter.eval(java.lang.String, java.lang.Object, java.util.Map)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.TemplateInterpreter.eval(java.lang.String, java.util.Map)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.TemplateInterpreter.evalToString(java.lang.String, java.lang.Object)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.TemplateInterpreter.evalToString(java.lang.String, java.lang.Object, java.util.Map)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.TemplateInterpreter.evalToString(java.lang.String, java.util.Map)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.TemplateInterpreter.execute(java.lang.Object, java.util.Map)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.TemplateInterpreter.execute(java.lang.Object, java.util.Map, org.mvel.TemplateRegistry)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.TemplateInterpreter.getValuePE(java.lang.String, java.lang.Object, java.util.Map)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.TemplateInterpreter.parse(java.io.File, java.lang.Object, java.util.Map)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.TemplateInterpreter.parse(java.io.File, java.lang.Object, java.util.Map, org.mvel.TemplateRegistry)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.TemplateInterpreter.parse(java.lang.CharSequence, java.lang.Object, java.util.Map)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.TemplateInterpreter.parse(java.lang.CharSequence, java.lang.Object, java.util.Map, org.mvel.TemplateRegistry)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.TemplateInterpreter.parse(java.lang.String, java.lang.Object, java.util.Map)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.TemplateInterpreter.parse(java.lang.String, java.lang.Object, java.util.Map, org.mvel.TemplateRegistry)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.TemplateInterpreter.parseToStream(java.io.File, java.lang.Object, java.util.Map, java.io.OutputStream)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.TemplateInterpreter.pop()</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.TemplateInterpreter.push(org.mvel.Node)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.TemplateInterpreter.pushNode(int)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.TemplateInterpreter.setValuePE(java.lang.String, java.lang.Object, java.lang.Object, java.lang.Object)</inbound>
            <inbound type="class" confirmed="yes">org.mvel.TemplateRegistry</inbound>
            <inbound type="class" confirmed="yes">org.mvel.Unit</inbound>
            <inbound type="class" confirmed="yes">org.mvel.asm.AnnotationVisitor</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.asm.AnnotationVisitor.visit(java.lang.String, java.lang.Object)</inbound>
            <inbound type="class" confirmed="yes">org.mvel.asm.AnnotationWriter</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.asm.AnnotationWriter.visit(java.lang.String, java.lang.Object)</inbound>
            <inbound type="class" confirmed="yes">org.mvel.asm.Attribute</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.asm.Attribute.read(org.mvel.asm.ClassReader, int, int, char[], int, org.mvel.asm.Label[])</inbound>
            <inbound type="class" confirmed="yes">org.mvel.asm.ByteVector</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.asm.ByteVector.enlarge(int)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.asm.ByteVector.putByteArray(byte[], int, int)</inbound>
            <inbound type="class" confirmed="yes">org.mvel.asm.ClassAdapter</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.asm.ClassAdapter.visitField(int, java.lang.String, java.lang.String, java.lang.String, java.lang.Object)</inbound>
            <inbound type="class" confirmed="yes">org.mvel.asm.ClassReader</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.asm.ClassReader.ClassReader(java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.asm.ClassReader.accept(org.mvel.asm.ClassVisitor, org.mvel.asm.Attribute[], int)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.asm.ClassReader.readAnnotationValue(int, char[], java.lang.String, org.mvel.asm.AnnotationVisitor)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.asm.ClassReader.readAttribute(org.mvel.asm.Attribute[], java.lang.String, int, int, char[], int, org.mvel.asm.Label[])</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.asm.ClassReader.readClass(java.io.InputStream)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.asm.ClassReader.readConst(int, char[])</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.asm.ClassReader.readFrameType(java.lang.Object[], int, int, char[], org.mvel.asm.Label[])</inbound>
            <inbound type="class" confirmed="yes">org.mvel.asm.ClassVisitor</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.asm.ClassVisitor.visitField(int, java.lang.String, java.lang.String, java.lang.String, java.lang.Object)</inbound>
            <inbound type="class" confirmed="yes">org.mvel.asm.ClassWriter</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.asm.ClassWriter.addType(org.mvel.asm.Item)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.asm.ClassWriter.newConst(java.lang.Object)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.asm.ClassWriter.newConstItem(java.lang.Object)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.asm.ClassWriter.visitField(int, java.lang.String, java.lang.String, java.lang.String, java.lang.Object)</inbound>
            <inbound type="class" confirmed="yes">org.mvel.asm.Edge</inbound>
            <inbound type="class" confirmed="yes">org.mvel.asm.FieldVisitor</inbound>
            <inbound type="class" confirmed="yes">org.mvel.asm.FieldWriter</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.asm.FieldWriter.FieldWriter(org.mvel.asm.ClassWriter, int, java.lang.String, java.lang.String, java.lang.String, java.lang.Object)</inbound>
            <inbound type="class" confirmed="yes">org.mvel.asm.Frame</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.asm.Frame.init(int)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.asm.Frame.push(int)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.asm.Frame.set(int, int)</inbound>
            <inbound type="class" confirmed="yes">org.mvel.asm.Handler</inbound>
            <inbound type="class" confirmed="yes">org.mvel.asm.Item</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.asm.Item.isEqualTo(org.mvel.asm.Item)</inbound>
            <inbound type="class" confirmed="yes">org.mvel.asm.Label</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.asm.Label.addReference(int, int)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.asm.Label.info</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.asm.Label.toString()</inbound>
            <inbound type="class" confirmed="yes">org.mvel.asm.MethodAdapter</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.asm.MethodAdapter.visitFrame(int, int, java.lang.Object[], int, java.lang.Object[])</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.asm.MethodAdapter.visitLdcInsn(java.lang.Object)</inbound>
            <inbound type="class" confirmed="yes">org.mvel.asm.MethodVisitor</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.asm.MethodVisitor.visitFrame(int, int, java.lang.Object[], int, java.lang.Object[])</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.asm.MethodVisitor.visitLdcInsn(java.lang.Object)</inbound>
            <inbound type="class" confirmed="yes">org.mvel.asm.MethodWriter</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.asm.MethodWriter.MethodWriter(org.mvel.asm.ClassWriter, int, java.lang.String, java.lang.String, java.lang.String, java.lang.String[], boolean, boolean)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.asm.MethodWriter.resizeInstructions()</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.asm.MethodWriter.visitFrame(int, int, java.lang.Object[], int, java.lang.Object[])</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.asm.MethodWriter.visitLdcInsn(java.lang.Object)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.asm.MethodWriter.writeFrameType(java.lang.Object)</inbound>
            <inbound type="class" confirmed="yes">org.mvel.asm.Opcodes</inbound>
            <inbound type="class" confirmed="yes">org.mvel.asm.Type</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.asm.Type.equals(java.lang.Object)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.ast.And.getReducedValue(java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.ast.And.getReducedValueAccelerated(java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.ast.AssertNode.getReducedValue(java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.ast.AssertNode.getReducedValueAccelerated(java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.ast.AssignAdd.getReducedValue(java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.ast.AssignAdd.getReducedValueAccelerated(java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.ast.AssignDiv.getReducedValue(java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.ast.AssignDiv.getReducedValueAccelerated(java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.ast.AssignMult.getReducedValue(java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.ast.AssignMult.getReducedValueAccelerated(java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.ast.AssignSub.getReducedValue(java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.ast.AssignSub.getReducedValueAccelerated(java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory)</inbound>
            <inbound type="class" confirmed="yes">org.mvel.ast.Assignment</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.ast.AssignmentNode.getReducedValue(java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.ast.AssignmentNode.getReducedValueAccelerated(java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.ast.BinaryOperation.getReducedValue(java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.ast.BinaryOperation.getReducedValueAccelerated(java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.ast.BinaryOperation.toString()</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.ast.ContextDeepPropertyNode.getReducedValue(java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.ast.ContextDeepPropertyNode.getReducedValueAccelerated(java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.ast.ContextDeepPropertyNode.handleDynamicDeoptimization(java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.ast.DeepAssignmentNode.getReducedValue(java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.ast.DeepAssignmentNode.getReducedValueAccelerated(java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.ast.EndOfStatement.EndOfStatement()</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.ast.EndOfStatement.getReducedValue(java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.ast.EndOfStatement.getReducedValueAccelerated(java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.ast.ForEachNode.getReducedValue(java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.ast.ForEachNode.getReducedValueAccelerated(java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.ast.IfNode.getReducedValue(java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.ast.IfNode.getReducedValueAccelerated(java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.ast.ImportNode.getReducedValue(java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.ast.ImportNode.getReducedValueAccelerated(java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.ast.InlineCollectionNode.getReducedValue(java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.ast.InlineCollectionNode.getReducedValueAccelerated(java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.ast.InterceptorWrapper.getReducedValue(java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.ast.InterceptorWrapper.getReducedValueAccelerated(java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.ast.LineLabel.getReducedValue(java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.ast.LineLabel.getReducedValueAccelerated(java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.ast.LiteralDeepPropertyNode.LiteralDeepPropertyNode(char[], int, java.lang.Object)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.ast.LiteralDeepPropertyNode.getReducedValue(java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.ast.LiteralDeepPropertyNode.getReducedValueAccelerated(java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.ast.LiteralDeepPropertyNode.literal</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.ast.LiteralNode.LiteralNode(java.lang.Object)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.ast.LiteralNode.LiteralNode(java.lang.Object, int)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.ast.LiteralNode.LiteralNode(java.lang.Object, java.lang.Class)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.ast.LiteralNode.getLiteralValue()</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.ast.LiteralNode.getReducedValue(java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.ast.LiteralNode.getReducedValueAccelerated(java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.ast.LiteralNode.setLiteralValue(java.lang.Object)</inbound>
            <inbound type="class" confirmed="yes">org.mvel.ast.NestedStatement</inbound>
            <inbound type="class" confirmed="yes">org.mvel.ast.NewObjectNode$ArraySize</inbound>
            <inbound type="class" confirmed="yes">org.mvel.ast.NewObjectNode$NewObjectArray</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.ast.NewObjectNode$NewObjectArray.getValue(java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.ast.NewObjectNode$NewObjectArray.setValue(java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory, java.lang.Object)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.ast.NewObjectNode.NewObjectNode(char[], int)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.ast.NewObjectNode.getReducedValue(java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.ast.NewObjectNode.getReducedValueAccelerated(java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.ast.NewObjectNode.updateClassName(int)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.ast.OperatorNode.getReducedValue(java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.ast.OperatorNode.getReducedValueAccelerated(java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.ast.OperatorNode.isOperator(java.lang.Integer)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.ast.Or.getReducedValue(java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.ast.Or.getReducedValueAccelerated(java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.ast.PostFixDecNode.getReducedValue(java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.ast.PostFixDecNode.getReducedValueAccelerated(java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.ast.PostFixIncNode.getReducedValue(java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.ast.PostFixIncNode.getReducedValueAccelerated(java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.ast.PreFixDecNode.getReducedValue(java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.ast.PreFixDecNode.getReducedValueAccelerated(java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.ast.PreFixIncNode.getReducedValue(java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.ast.PreFixIncNode.getReducedValueAccelerated(java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.ast.PropertyASTNode.getReducedValue(java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.ast.PropertyASTNode.getReducedValueAccelerated(java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.ast.PropertyASTNode.initializePropertyNode(java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.ast.RegExMatch.getReducedValue(java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.ast.RegExMatch.getReducedValueAccelerated(java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.ast.ReturnNode.getReducedValue(java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.ast.ReturnNode.getReducedValueAccelerated(java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.ast.StaticImportNode.getReducedValue(java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.ast.StaticImportNode.getReducedValueAccelerated(java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.ast.StaticImportNode.resolveMethod()</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.ast.Substatement.getReducedValue(java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.ast.Substatement.getReducedValueAccelerated(java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.ast.ThisValDeepPropertyNode.getReducedValue(java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.ast.ThisValDeepPropertyNode.getReducedValueAccelerated(java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.ast.ThisValNode.getReducedValue(java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.ast.ThisValNode.getReducedValueAccelerated(java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.ast.TypeCast.getReducedValue(java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.ast.TypeCast.getReducedValueAccelerated(java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.ast.TypedVarNode.getReducedValue(java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.ast.TypedVarNode.getReducedValueAccelerated(java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.ast.Union.getReducedValue(java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.ast.Union.getReducedValueAccelerated(java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.ast.VarPropertyNode.getReducedValue(java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.ast.VarPropertyNode.getReducedValueAccelerated(java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.ast.VariableDeepPropertyNode.getReducedValue(java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.ast.VariableDeepPropertyNode.getReducedValueAccelerated(java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.ast.WhileNode.getReducedValue(java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.ast.WhileNode.getReducedValueAccelerated(java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory)</inbound>
            <inbound type="class" confirmed="yes">org.mvel.ast.WithNode$ParmValuePair</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.ast.WithNode.compileWithExpressions()</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.ast.WithNode.getReducedValue(java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.ast.WithNode.getReducedValueAccelerated(java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory)</inbound>
            <inbound type="class" confirmed="yes">org.mvel.ast.cache.CachedListAccessor</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.ast.cache.CachedListAccessor.CachedListAccessor(java.lang.Object[])</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.ast.cache.CachedListAccessor.CachedListAccessor(java.util.List)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.ast.cache.CachedListAccessor.cached</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.ast.cache.CachedListAccessor.getValue(java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.ast.cache.CachedListAccessor.setValue(java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory, java.lang.Object)</inbound>
            <inbound type="class" confirmed="yes">org.mvel.conversion.ArrayCH</inbound>
            <inbound type="class" confirmed="yes">org.mvel.conversion.ArrayCH$1</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.conversion.ArrayCH$1.convert(java.lang.Object)</inbound>
            <inbound type="class" confirmed="yes">org.mvel.conversion.ArrayCH$2</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.conversion.ArrayCH$2.convert(java.lang.Object)</inbound>
            <inbound type="class" confirmed="yes">org.mvel.conversion.ArrayCH$3</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.conversion.ArrayCH$3.convert(java.lang.Object)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.conversion.ArrayCH.canConvertFrom(java.lang.Class)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.conversion.ArrayCH.convertFrom(java.lang.Object)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.conversion.ArrayCH.static {}</inbound>
            <inbound type="class" confirmed="yes">org.mvel.conversion.BigDecimalCH</inbound>
            <inbound type="class" confirmed="yes">org.mvel.conversion.BigDecimalCH$1</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.conversion.BigDecimalCH$1.convert(java.lang.Object)</inbound>
            <inbound type="class" confirmed="yes">org.mvel.conversion.BigDecimalCH$10</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.conversion.BigDecimalCH$10.convert(java.lang.Object)</inbound>
            <inbound type="class" confirmed="yes">org.mvel.conversion.BigDecimalCH$11</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.conversion.BigDecimalCH$11.convert(java.lang.Object)</inbound>
            <inbound type="class" confirmed="yes">org.mvel.conversion.BigDecimalCH$2</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.conversion.BigDecimalCH$2.convert(java.lang.Object)</inbound>
            <inbound type="class" confirmed="yes">org.mvel.conversion.BigDecimalCH$3</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.conversion.BigDecimalCH$3.convert(java.lang.Object)</inbound>
            <inbound type="class" confirmed="yes">org.mvel.conversion.BigDecimalCH$4</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.conversion.BigDecimalCH$4.convert(java.lang.Object)</inbound>
            <inbound type="class" confirmed="yes">org.mvel.conversion.BigDecimalCH$5</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.conversion.BigDecimalCH$5.convert(java.lang.Object)</inbound>
            <inbound type="class" confirmed="yes">org.mvel.conversion.BigDecimalCH$6</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.conversion.BigDecimalCH$6.convert(java.lang.Object)</inbound>
            <inbound type="class" confirmed="yes">org.mvel.conversion.BigDecimalCH$7</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.conversion.BigDecimalCH$7.convert(java.lang.Object)</inbound>
            <inbound type="class" confirmed="yes">org.mvel.conversion.BigDecimalCH$8</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.conversion.BigDecimalCH$8.convert(java.lang.Object)</inbound>
            <inbound type="class" confirmed="yes">org.mvel.conversion.BigDecimalCH$9</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.conversion.BigDecimalCH$9.convert(java.lang.Object)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.conversion.BigDecimalCH.canConvertFrom(java.lang.Class)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.conversion.BigDecimalCH.convertFrom(java.lang.Object)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.conversion.BigDecimalCH.static {}</inbound>
            <inbound type="class" confirmed="yes">org.mvel.conversion.BigIntegerCH</inbound>
            <inbound type="class" confirmed="yes">org.mvel.conversion.BigIntegerCH$1</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.conversion.BigIntegerCH$1.convert(java.lang.Object)</inbound>
            <inbound type="class" confirmed="yes">org.mvel.conversion.BigIntegerCH$2</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.conversion.BigIntegerCH$2.convert(java.lang.Object)</inbound>
            <inbound type="class" confirmed="yes">org.mvel.conversion.BigIntegerCH$3</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.conversion.BigIntegerCH$3.convert(java.lang.Object)</inbound>
            <inbound type="class" confirmed="yes">org.mvel.conversion.BigIntegerCH$4</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.conversion.BigIntegerCH$4.convert(java.lang.Object)</inbound>
            <inbound type="class" confirmed="yes">org.mvel.conversion.BigIntegerCH$5</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.conversion.BigIntegerCH$5.convert(java.lang.Object)</inbound>
            <inbound type="class" confirmed="yes">org.mvel.conversion.BigIntegerCH$6</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.conversion.BigIntegerCH$6.convert(java.lang.Object)</inbound>
            <inbound type="class" confirmed="yes">org.mvel.conversion.BigIntegerCH$7</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.conversion.BigIntegerCH$7.convert(java.lang.Object)</inbound>
            <inbound type="class" confirmed="yes">org.mvel.conversion.BigIntegerCH$8</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.conversion.BigIntegerCH$8.convert(java.lang.Object)</inbound>
            <inbound type="class" confirmed="yes">org.mvel.conversion.BigIntegerCH$9</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.conversion.BigIntegerCH$9.convert(java.lang.Object)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.conversion.BigIntegerCH.canConvertFrom(java.lang.Class)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.conversion.BigIntegerCH.convertFrom(java.lang.Object)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.conversion.BigIntegerCH.static {}</inbound>
            <inbound type="class" confirmed="yes">org.mvel.conversion.BooleanCH</inbound>
            <inbound type="class" confirmed="yes">org.mvel.conversion.BooleanCH$1</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.conversion.BooleanCH$1.convert(java.lang.Object)</inbound>
            <inbound type="class" confirmed="yes">org.mvel.conversion.BooleanCH$10</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.conversion.BooleanCH$10.convert(java.lang.Object)</inbound>
            <inbound type="class" confirmed="yes">org.mvel.conversion.BooleanCH$2</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.conversion.BooleanCH$2.convert(java.lang.Object)</inbound>
            <inbound type="class" confirmed="yes">org.mvel.conversion.BooleanCH$3</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.conversion.BooleanCH$3.convert(java.lang.Object)</inbound>
            <inbound type="class" confirmed="yes">org.mvel.conversion.BooleanCH$4</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.conversion.BooleanCH$4.convert(java.lang.Object)</inbound>
            <inbound type="class" confirmed="yes">org.mvel.conversion.BooleanCH$5</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.conversion.BooleanCH$5.convert(java.lang.Object)</inbound>
            <inbound type="class" confirmed="yes">org.mvel.conversion.BooleanCH$6</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.conversion.BooleanCH$6.convert(java.lang.Object)</inbound>
            <inbound type="class" confirmed="yes">org.mvel.conversion.BooleanCH$7</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.conversion.BooleanCH$7.convert(java.lang.Object)</inbound>
            <inbound type="class" confirmed="yes">org.mvel.conversion.BooleanCH$8</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.conversion.BooleanCH$8.convert(java.lang.Object)</inbound>
            <inbound type="class" confirmed="yes">org.mvel.conversion.BooleanCH$9</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.conversion.BooleanCH$9.convert(java.lang.Object)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.conversion.BooleanCH.canConvertFrom(java.lang.Class)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.conversion.BooleanCH.convertFrom(java.lang.Object)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.conversion.BooleanCH.static {}</inbound>
            <inbound type="class" confirmed="yes">org.mvel.conversion.ByteCH</inbound>
            <inbound type="class" confirmed="yes">org.mvel.conversion.ByteCH$1</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.conversion.ByteCH$1.convert(java.lang.Object)</inbound>
            <inbound type="class" confirmed="yes">org.mvel.conversion.ByteCH$2</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.conversion.ByteCH$2.convert(java.lang.Object)</inbound>
            <inbound type="class" confirmed="yes">org.mvel.conversion.ByteCH$3</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.conversion.ByteCH$3.convert(java.lang.Object)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.conversion.ByteCH.canConvertFrom(java.lang.Class)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.conversion.ByteCH.convertFrom(java.lang.Object)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.conversion.ByteCH.static {}</inbound>
            <inbound type="class" confirmed="yes">org.mvel.conversion.CharArrayCH</inbound>
            <inbound type="class" confirmed="yes">org.mvel.conversion.CharArrayCH$1</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.conversion.CharArrayCH$1.convert(java.lang.Object)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.conversion.CharArrayCH.canConvertFrom(java.lang.Class)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.conversion.CharArrayCH.convertFrom(java.lang.Object)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.conversion.CharArrayCH.static {}</inbound>
            <inbound type="class" confirmed="yes">org.mvel.conversion.CharCH</inbound>
            <inbound type="class" confirmed="yes">org.mvel.conversion.CharCH$1</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.conversion.CharCH$1.convert(java.lang.Object)</inbound>
            <inbound type="class" confirmed="yes">org.mvel.conversion.CharCH$2</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.conversion.CharCH$2.convert(java.lang.Object)</inbound>
            <inbound type="class" confirmed="yes">org.mvel.conversion.CharCH$3</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.conversion.CharCH$3.convert(java.lang.Object)</inbound>
            <inbound type="class" confirmed="yes">org.mvel.conversion.CharCH$4</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.conversion.CharCH$4.convert(java.lang.Object)</inbound>
            <inbound type="class" confirmed="yes">org.mvel.conversion.CharCH$5</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.conversion.CharCH$5.convert(java.lang.Object)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.conversion.CharCH.canConvertFrom(java.lang.Class)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.conversion.CharCH.convertFrom(java.lang.Object)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.conversion.CharCH.static {}</inbound>
            <inbound type="class" confirmed="yes">org.mvel.conversion.Converter</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.conversion.Converter.convert(java.lang.Object)</inbound>
            <inbound type="class" confirmed="yes">org.mvel.conversion.DoubleCH</inbound>
            <inbound type="class" confirmed="yes">org.mvel.conversion.DoubleCH$1</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.conversion.DoubleCH$1.convert(java.lang.Object)</inbound>
            <inbound type="class" confirmed="yes">org.mvel.conversion.DoubleCH$10</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.conversion.DoubleCH$10.convert(java.lang.Object)</inbound>
            <inbound type="class" confirmed="yes">org.mvel.conversion.DoubleCH$2</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.conversion.DoubleCH$2.convert(java.lang.Object)</inbound>
            <inbound type="class" confirmed="yes">org.mvel.conversion.DoubleCH$3</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.conversion.DoubleCH$3.convert(java.lang.Object)</inbound>
            <inbound type="class" confirmed="yes">org.mvel.conversion.DoubleCH$4</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.conversion.DoubleCH$4.convert(java.lang.Object)</inbound>
            <inbound type="class" confirmed="yes">org.mvel.conversion.DoubleCH$5</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.conversion.DoubleCH$5.convert(java.lang.Object)</inbound>
            <inbound type="class" confirmed="yes">org.mvel.conversion.DoubleCH$6</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.conversion.DoubleCH$6.convert(java.lang.Object)</inbound>
            <inbound type="class" confirmed="yes">org.mvel.conversion.DoubleCH$7</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.conversion.DoubleCH$7.convert(java.lang.Object)</inbound>
            <inbound type="class" confirmed="yes">org.mvel.conversion.DoubleCH$8</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.conversion.DoubleCH$8.convert(java.lang.Object)</inbound>
            <inbound type="class" confirmed="yes">org.mvel.conversion.DoubleCH$9</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.conversion.DoubleCH$9.convert(java.lang.Object)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.conversion.DoubleCH.canConvertFrom(java.lang.Class)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.conversion.DoubleCH.convertFrom(java.lang.Object)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.conversion.DoubleCH.static {}</inbound>
            <inbound type="class" confirmed="yes">org.mvel.conversion.FloatCH</inbound>
            <inbound type="class" confirmed="yes">org.mvel.conversion.FloatCH$1</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.conversion.FloatCH$1.convert(java.lang.Object)</inbound>
            <inbound type="class" confirmed="yes">org.mvel.conversion.FloatCH$10</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.conversion.FloatCH$10.convert(java.lang.Object)</inbound>
            <inbound type="class" confirmed="yes">org.mvel.conversion.FloatCH$2</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.conversion.FloatCH$2.convert(java.lang.Object)</inbound>
            <inbound type="class" confirmed="yes">org.mvel.conversion.FloatCH$3</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.conversion.FloatCH$3.convert(java.lang.Object)</inbound>
            <inbound type="class" confirmed="yes">org.mvel.conversion.FloatCH$4</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.conversion.FloatCH$4.convert(java.lang.Object)</inbound>
            <inbound type="class" confirmed="yes">org.mvel.conversion.FloatCH$5</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.conversion.FloatCH$5.convert(java.lang.Object)</inbound>
            <inbound type="class" confirmed="yes">org.mvel.conversion.FloatCH$6</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.conversion.FloatCH$6.convert(java.lang.Object)</inbound>
            <inbound type="class" confirmed="yes">org.mvel.conversion.FloatCH$7</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.conversion.FloatCH$7.convert(java.lang.Object)</inbound>
            <inbound type="class" confirmed="yes">org.mvel.conversion.FloatCH$8</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.conversion.FloatCH$8.convert(java.lang.Object)</inbound>
            <inbound type="class" confirmed="yes">org.mvel.conversion.FloatCH$9</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.conversion.FloatCH$9.convert(java.lang.Object)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.conversion.FloatCH.canConvertFrom(java.lang.Class)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.conversion.FloatCH.convertFrom(java.lang.Object)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.conversion.FloatCH.static {}</inbound>
            <inbound type="class" confirmed="yes">org.mvel.conversion.IntArrayCH</inbound>
            <inbound type="class" confirmed="yes">org.mvel.conversion.IntArrayCH$1</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.conversion.IntArrayCH$1.convert(java.lang.Object)</inbound>
            <inbound type="class" confirmed="yes">org.mvel.conversion.IntArrayCH$2</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.conversion.IntArrayCH$2.convert(java.lang.Object)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.conversion.IntArrayCH.canConvertFrom(java.lang.Class)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.conversion.IntArrayCH.convertFrom(java.lang.Object)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.conversion.IntArrayCH.static {}</inbound>
            <inbound type="class" confirmed="yes">org.mvel.conversion.IntegerCH</inbound>
            <inbound type="class" confirmed="yes">org.mvel.conversion.IntegerCH$1</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.conversion.IntegerCH$1.convert(java.lang.Object)</inbound>
            <inbound type="class" confirmed="yes">org.mvel.conversion.IntegerCH$10</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.conversion.IntegerCH$10.convert(java.lang.Object)</inbound>
            <inbound type="class" confirmed="yes">org.mvel.conversion.IntegerCH$11</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.conversion.IntegerCH$11.convert(java.lang.Object)</inbound>
            <inbound type="class" confirmed="yes">org.mvel.conversion.IntegerCH$2</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.conversion.IntegerCH$2.convert(java.lang.Object)</inbound>
            <inbound type="class" confirmed="yes">org.mvel.conversion.IntegerCH$3</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.conversion.IntegerCH$3.convert(java.lang.Object)</inbound>
            <inbound type="class" confirmed="yes">org.mvel.conversion.IntegerCH$4</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.conversion.IntegerCH$4.convert(java.lang.Object)</inbound>
            <inbound type="class" confirmed="yes">org.mvel.conversion.IntegerCH$5</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.conversion.IntegerCH$5.convert(java.lang.Object)</inbound>
            <inbound type="class" confirmed="yes">org.mvel.conversion.IntegerCH$6</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.conversion.IntegerCH$6.convert(java.lang.Object)</inbound>
            <inbound type="class" confirmed="yes">org.mvel.conversion.IntegerCH$7</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.conversion.IntegerCH$7.convert(java.lang.Object)</inbound>
            <inbound type="class" confirmed="yes">org.mvel.conversion.IntegerCH$8</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.conversion.IntegerCH$8.convert(java.lang.Object)</inbound>
            <inbound type="class" confirmed="yes">org.mvel.conversion.IntegerCH$9</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.conversion.IntegerCH$9.convert(java.lang.Object)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.conversion.IntegerCH.canConvertFrom(java.lang.Class)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.conversion.IntegerCH.convertFrom(java.lang.Object)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.conversion.IntegerCH.static {}</inbound>
            <inbound type="class" confirmed="yes">org.mvel.conversion.LongCH</inbound>
            <inbound type="class" confirmed="yes">org.mvel.conversion.LongCH$1</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.conversion.LongCH$1.convert(java.lang.Object)</inbound>
            <inbound type="class" confirmed="yes">org.mvel.conversion.LongCH$2</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.conversion.LongCH$2.convert(java.lang.Object)</inbound>
            <inbound type="class" confirmed="yes">org.mvel.conversion.LongCH$3</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.conversion.LongCH$3.convert(java.lang.Object)</inbound>
            <inbound type="class" confirmed="yes">org.mvel.conversion.LongCH$4</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.conversion.LongCH$4.convert(java.lang.Object)</inbound>
            <inbound type="class" confirmed="yes">org.mvel.conversion.LongCH$5</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.conversion.LongCH$5.convert(java.lang.Object)</inbound>
            <inbound type="class" confirmed="yes">org.mvel.conversion.LongCH$6</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.conversion.LongCH$6.convert(java.lang.Object)</inbound>
            <inbound type="class" confirmed="yes">org.mvel.conversion.LongCH$7</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.conversion.LongCH$7.convert(java.lang.Object)</inbound>
            <inbound type="class" confirmed="yes">org.mvel.conversion.LongCH$8</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.conversion.LongCH$8.convert(java.lang.Object)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.conversion.LongCH.canConvertFrom(java.lang.Class)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.conversion.LongCH.convertFrom(java.lang.Object)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.conversion.LongCH.static {}</inbound>
            <inbound type="class" confirmed="yes">org.mvel.conversion.ObjectCH</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.conversion.ObjectCH.convertFrom(java.lang.Object)</inbound>
            <inbound type="class" confirmed="yes">org.mvel.conversion.PrimArrayHandler</inbound>
            <inbound type="class" confirmed="yes">org.mvel.conversion.PrimArrayHandler$1</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.conversion.PrimArrayHandler$1.convert(java.lang.Object)</inbound>
            <inbound type="class" confirmed="yes">org.mvel.conversion.PrimArrayHandler$2</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.conversion.PrimArrayHandler$2.convert(java.lang.Object)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.conversion.PrimArrayHandler.PrimArrayHandler(java.lang.Class)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.conversion.PrimArrayHandler.access$1(java.lang.Class, java.lang.Object[], java.lang.Class)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.conversion.PrimArrayHandler.canConvertFrom(java.lang.Class)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.conversion.PrimArrayHandler.convertFrom(java.lang.Object)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.conversion.PrimArrayHandler.handleLooseTypeConversion(java.lang.Class, java.lang.Object[], java.lang.Class)</inbound>
            <inbound type="class" confirmed="yes">org.mvel.conversion.PrimIntArrayCH</inbound>
            <inbound type="class" confirmed="yes">org.mvel.conversion.PrimIntArrayCH$1</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.conversion.PrimIntArrayCH$1.convert(java.lang.Object)</inbound>
            <inbound type="class" confirmed="yes">org.mvel.conversion.PrimIntArrayCH$2</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.conversion.PrimIntArrayCH$2.convert(java.lang.Object)</inbound>
            <inbound type="class" confirmed="yes">org.mvel.conversion.PrimIntArrayCH$3</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.conversion.PrimIntArrayCH$3.convert(java.lang.Object)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.conversion.PrimIntArrayCH.canConvertFrom(java.lang.Class)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.conversion.PrimIntArrayCH.convertFrom(java.lang.Object)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.conversion.PrimIntArrayCH.static {}</inbound>
            <inbound type="class" confirmed="yes">org.mvel.conversion.ShortCH</inbound>
            <inbound type="class" confirmed="yes">org.mvel.conversion.ShortCH$1</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.conversion.ShortCH$1.convert(java.lang.Object)</inbound>
            <inbound type="class" confirmed="yes">org.mvel.conversion.ShortCH$10</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.conversion.ShortCH$10.convert(java.lang.Object)</inbound>
            <inbound type="class" confirmed="yes">org.mvel.conversion.ShortCH$2</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.conversion.ShortCH$2.convert(java.lang.Object)</inbound>
            <inbound type="class" confirmed="yes">org.mvel.conversion.ShortCH$3</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.conversion.ShortCH$3.convert(java.lang.Object)</inbound>
            <inbound type="class" confirmed="yes">org.mvel.conversion.ShortCH$4</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.conversion.ShortCH$4.convert(java.lang.Object)</inbound>
            <inbound type="class" confirmed="yes">org.mvel.conversion.ShortCH$5</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.conversion.ShortCH$5.convert(java.lang.Object)</inbound>
            <inbound type="class" confirmed="yes">org.mvel.conversion.ShortCH$6</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.conversion.ShortCH$6.convert(java.lang.Object)</inbound>
            <inbound type="class" confirmed="yes">org.mvel.conversion.ShortCH$7</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.conversion.ShortCH$7.convert(java.lang.Object)</inbound>
            <inbound type="class" confirmed="yes">org.mvel.conversion.ShortCH$8</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.conversion.ShortCH$8.convert(java.lang.Object)</inbound>
            <inbound type="class" confirmed="yes">org.mvel.conversion.ShortCH$9</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.conversion.ShortCH$9.convert(java.lang.Object)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.conversion.ShortCH.canConvertFrom(java.lang.Class)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.conversion.ShortCH.convertFrom(java.lang.Object)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.conversion.ShortCH.static {}</inbound>
            <inbound type="class" confirmed="yes">org.mvel.conversion.StringArrayCH</inbound>
            <inbound type="class" confirmed="yes">org.mvel.conversion.StringArrayCH$1</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.conversion.StringArrayCH$1.convert(java.lang.Object)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.conversion.StringArrayCH.canConvertFrom(java.lang.Class)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.conversion.StringArrayCH.convertFrom(java.lang.Object)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.conversion.StringArrayCH.static {}</inbound>
            <inbound type="class" confirmed="yes">org.mvel.conversion.StringCH</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.conversion.StringCH.convertFrom(java.lang.Object)</inbound>
            <inbound type="class" confirmed="yes">org.mvel.conversion.UnitConversion</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.conversion.UnitConversion.canConvertFrom(java.lang.Class)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.conversion.UnitConversion.convertFrom(java.lang.Object)</inbound>
            <inbound type="class" confirmed="yes">org.mvel.debug.DebugTools</inbound>
            <inbound type="class" confirmed="yes">org.mvel.debug.DebugTools$DecompileContext</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.debug.DebugTools.decompile(java.io.Serializable)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.debug.DebugTools.decompile(org.mvel.CompiledExpression, boolean, org.mvel.debug.DebugTools$DecompileContext)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.debug.DebugTools.determineType(java.lang.String, org.mvel.CompiledExpression)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.debug.DebugTools.getAllVariableResolvers(org.mvel.integration.VariableResolverFactory)</inbound>
            <inbound type="class" confirmed="yes">org.mvel.debug.Debugger</inbound>
            <inbound type="class" confirmed="yes">org.mvel.debug.DebuggerContext</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.debug.DebuggerContext.hasBreakpoint(java.lang.String, int)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.debug.DebuggerContext.hasBreakpoint(org.mvel.ast.LineLabel)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.debug.DebuggerContext.registerBreakpoint(java.lang.String, int)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.debug.DebuggerContext.removeBreakpoint(java.lang.String, int)</inbound>
            <inbound type="class" confirmed="yes">org.mvel.debug.Frame</inbound>
            <inbound type="class" confirmed="yes">org.mvel.integration.Interceptor</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.integration.Interceptor.doAfter(java.lang.Object, org.mvel.ASTNode, org.mvel.integration.VariableResolverFactory)</inbound>
            <inbound type="class" confirmed="yes">org.mvel.integration.ResolverTools</inbound>
            <inbound type="class" confirmed="yes">org.mvel.integration.VariableResolver</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.integration.VariableResolver.getValue()</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.integration.VariableResolver.setValue(java.lang.Object)</inbound>
            <inbound type="class" confirmed="yes">org.mvel.integration.VariableResolverFactory</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.integration.VariableResolverFactory.createVariable(java.lang.String, java.lang.Object)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.integration.VariableResolverFactory.createVariable(java.lang.String, java.lang.Object, java.lang.Class)</inbound>
            <inbound type="class" confirmed="yes">org.mvel.integration.impl.BaseVariableResolverFactory</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.integration.impl.BaseVariableResolverFactory.getVariableResolver(java.lang.String)</inbound>
            <inbound type="class" confirmed="yes">org.mvel.integration.impl.ClassImportResolver</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.integration.impl.ClassImportResolver.getValue()</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.integration.impl.ClassImportResolver.setValue(java.lang.Object)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.integration.impl.ClassImportResolverFactory.ClassImportResolverFactory(org.mvel.ParserContext, org.mvel.integration.VariableResolverFactory)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.integration.impl.ClassImportResolverFactory.addClass(java.lang.Class)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.integration.impl.ClassImportResolverFactory.addPackageImport(java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.integration.impl.ClassImportResolverFactory.createVariable(java.lang.String, java.lang.Object)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.integration.impl.ClassImportResolverFactory.createVariable(java.lang.String, java.lang.Object, java.lang.Class)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.integration.impl.ClassImportResolverFactory.getImportedClasses()</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.integration.impl.ClassImportResolverFactory.isResolveable(java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.integration.impl.ClassImportResolverFactory.isTarget(java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.integration.impl.ClassImportResolverFactory.setImportedClasses(java.util.Map)</inbound>
            <inbound type="class" confirmed="yes">org.mvel.integration.impl.ItemResolverFactory$ItemResolver</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.integration.impl.ItemResolverFactory$ItemResolver.getValue()</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.integration.impl.ItemResolverFactory$ItemResolver.setValue(java.lang.Object)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.integration.impl.ItemResolverFactory$ItemResolver.value</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.integration.impl.ItemResolverFactory.createVariable(java.lang.String, java.lang.Object)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.integration.impl.ItemResolverFactory.createVariable(java.lang.String, java.lang.Object, java.lang.Class)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.integration.impl.ItemResolverFactory.isResolveable(java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.integration.impl.ItemResolverFactory.isTarget(java.lang.String)</inbound>
            <inbound type="class" confirmed="yes">org.mvel.integration.impl.LocalVariableResolverFactory</inbound>
            <inbound type="class" confirmed="yes">org.mvel.integration.impl.MapVariableResolver</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.integration.impl.MapVariableResolver.getValue()</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.integration.impl.MapVariableResolver.setValue(java.lang.Object)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.integration.impl.MapVariableResolverFactory.addResolver(java.lang.String, org.mvel.integration.VariableResolver)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.integration.impl.MapVariableResolverFactory.createVariable(java.lang.String, java.lang.Object)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.integration.impl.MapVariableResolverFactory.createVariable(java.lang.String, java.lang.Object, java.lang.Class)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.integration.impl.MapVariableResolverFactory.getVariableResolver(java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.integration.impl.MapVariableResolverFactory.isResolveable(java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.integration.impl.MapVariableResolverFactory.isTarget(java.lang.String)</inbound>
            <inbound type="class" confirmed="yes">org.mvel.integration.impl.SimpleValueResolver</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.integration.impl.SimpleValueResolver.SimpleValueResolver(java.lang.Object)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.integration.impl.SimpleValueResolver.getValue()</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.integration.impl.SimpleValueResolver.setValue(java.lang.Object)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.integration.impl.SimpleValueResolver.value</inbound>
            <inbound type="class" confirmed="yes">org.mvel.integration.impl.StaticMethodImportResolver</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.integration.impl.StaticMethodImportResolver.getValue()</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.integration.impl.StaticMethodImportResolver.setValue(java.lang.Object)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.integration.impl.StaticMethodImportResolverFactory.StaticMethodImportResolverFactory(org.mvel.ParserContext)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.integration.impl.StaticMethodImportResolverFactory.createVariable(java.lang.String, java.lang.Object)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.integration.impl.StaticMethodImportResolverFactory.createVariable(java.lang.String, java.lang.Object, java.lang.Class)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.integration.impl.StaticMethodImportResolverFactory.getImportedMethods()</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.integration.impl.StaticMethodImportResolverFactory.isTarget(java.lang.String)</inbound>
            <inbound type="class" confirmed="yes">org.mvel.integration.impl.TypeInjectionResolverFactory</inbound>
            <inbound type="class" confirmed="yes">org.mvel.math.IEEEFloatingPointMath</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.math.IEEEFloatingPointMath._doOperations(int, java.lang.Object, int, int, java.lang.Object)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.math.IEEEFloatingPointMath.doBigDecimalArithmetic(java.math.BigDecimal, int, java.math.BigDecimal)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.math.IEEEFloatingPointMath.doOperation(java.lang.Object, int, java.lang.Object)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.math.IEEEFloatingPointMath.doOperationNonNumeric(java.lang.Object, int, java.lang.Object)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.math.IEEEFloatingPointMath.doOperationsSameType(int, java.lang.Object, int, java.lang.Object)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.math.IEEEFloatingPointMath.getBigDecimalFromType(java.lang.Object, int)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.math.IEEEFloatingPointMath.safeEquals(java.lang.Object, java.lang.Object)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.math.IEEEFloatingPointMath.safeNotEquals(java.lang.Object, java.lang.Object)</inbound>
            <inbound type="class" confirmed="yes">org.mvel.math.JDK14CompatabilityMath</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.math.JDK14CompatabilityMath._doOperations(int, java.lang.Object, int, int, java.lang.Object)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.math.JDK14CompatabilityMath.doBigDecimalArithmetic(java.math.BigDecimal, int, java.math.BigDecimal)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.math.JDK14CompatabilityMath.doOperation(java.lang.Object, int, java.lang.Object)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.math.JDK14CompatabilityMath.doOperationNonNumeric(java.lang.Object, int, java.lang.Object)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.math.JDK14CompatabilityMath.doOperationsSameType(int, java.lang.Object, int, java.lang.Object)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.math.JDK14CompatabilityMath.getBigDecimalFromType(java.lang.Object, int)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.math.JDK14CompatabilityMath.safeEquals(java.lang.Object, java.lang.Object)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.math.JDK14CompatabilityMath.safeNotEquals(java.lang.Object, java.lang.Object)</inbound>
            <inbound type="class" confirmed="yes">org.mvel.math.MathProcessor</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.math.MathProcessor.doOperation(java.lang.Object, int, java.lang.Object)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.optimizers.AbstractOptimizer.tryStaticAccess()</inbound>
            <inbound type="class" confirmed="yes">org.mvel.optimizers.AccessorOptimizer</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.optimizers.AccessorOptimizer.getResultOptPass()</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.optimizers.AccessorOptimizer.optimizeAccessor(char[], java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory, boolean)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.optimizers.AccessorOptimizer.optimizeCollection(char[], java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.optimizers.AccessorOptimizer.optimizeFold(char[], java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.optimizers.AccessorOptimizer.optimizeObjectCreation(char[], java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.optimizers.AccessorOptimizer.optimizeSetAccessor(char[], java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory, boolean, java.lang.Object)</inbound>
            <inbound type="class" confirmed="yes">org.mvel.optimizers.OptimizerFactory</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.optimizers.OptimizerFactory.getAccessorCompiler(java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.optimizers.OptimizerFactory.getDefaultAccessorCompiler()</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.optimizers.OptimizerFactory.getThreadAccessorOptimizer()</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.optimizers.OptimizerFactory.setDefaultOptimizer(java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.optimizers.OptimizerFactory.setThreadAccessorOptimizer(java.lang.Class)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.optimizers.OptimizerFactory.static {}</inbound>
            <inbound type="class" confirmed="yes">org.mvel.optimizers.OptimizerHook</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.asm.ASMAccessorOptimizer.EMPTYARG</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.asm.ASMAccessorOptimizer._getAccessor(java.lang.Object)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.asm.ASMAccessorOptimizer._initializeAccessor()</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.asm.ASMAccessorOptimizer.addPrintOut(java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.asm.ASMAccessorOptimizer.buildInputs()</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.asm.ASMAccessorOptimizer.compileAccessor()</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.asm.ASMAccessorOptimizer.ctx</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.asm.ASMAccessorOptimizer.getBeanProperty(java.lang.Object, java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.asm.ASMAccessorOptimizer.getCollectionProperty(java.lang.Object, java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.asm.ASMAccessorOptimizer.getMethod(java.lang.Object, java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.asm.ASMAccessorOptimizer.getResultOptPass()</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.asm.ASMAccessorOptimizer.ldcClassConstant(java.lang.Class)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.asm.ASMAccessorOptimizer.loadClass(java.lang.String, byte[])</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.asm.ASMAccessorOptimizer.optimizeAccessor(char[], java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory, boolean)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.asm.ASMAccessorOptimizer.optimizeCollection(char[], java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.asm.ASMAccessorOptimizer.optimizeFold(char[], java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.asm.ASMAccessorOptimizer.optimizeObjectCreation(char[], java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.asm.ASMAccessorOptimizer.optimizeSetAccessor(char[], java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory, boolean, java.lang.Object)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.asm.ASMAccessorOptimizer.static {}</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.asm.ASMAccessorOptimizer.thisRef</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.asm.ASMAccessorOptimizer.val</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.asm.ASMAccessorOptimizer.writeLiteralOrSubexpression(java.lang.Object)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.asm.ASMAccessorOptimizer.writeLiteralOrSubexpression(java.lang.Object, java.lang.Class)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.asm.ASMAccessorOptimizer.writeOutLiteralWrapped(java.lang.Object)</inbound>
            <inbound type="class" confirmed="yes">org.mvel.optimizers.impl.refl.ArrayAccessor</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.refl.ArrayAccessor.getValue(java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.refl.ArrayAccessor.setValue(java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory, java.lang.Object)</inbound>
            <inbound type="class" confirmed="yes">org.mvel.optimizers.impl.refl.ArrayAccessorNest</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.refl.ArrayAccessorNest.getValue(java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.refl.ArrayAccessorNest.setValue(java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory, java.lang.Object)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.refl.ArrayAccessorNest.toString()</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.refl.ArrayLength.getValue(java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.refl.ArrayLength.setValue(java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory, java.lang.Object)</inbound>
            <inbound type="class" confirmed="yes">org.mvel.optimizers.impl.refl.BaseAccessor</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.refl.ConstructorAccessor.executeAll(java.lang.Object, org.mvel.integration.VariableResolverFactory)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.refl.ConstructorAccessor.executeAndCoerce(java.lang.Class[], java.lang.Object, org.mvel.integration.VariableResolverFactory)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.refl.ConstructorAccessor.getValue(java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.refl.ConstructorAccessor.setValue(java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory, java.lang.Object)</inbound>
            <inbound type="class" confirmed="yes">org.mvel.optimizers.impl.refl.DynamicFieldAccessor</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.refl.DynamicFieldAccessor.getValue(java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.refl.DynamicFieldAccessor.setValue(java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory, java.lang.Object)</inbound>
            <inbound type="class" confirmed="yes">org.mvel.optimizers.impl.refl.DynamicSetterAccessor</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.refl.DynamicSetterAccessor.EMPTY</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.refl.DynamicSetterAccessor.getValue(java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.refl.DynamicSetterAccessor.setValue(java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory, java.lang.Object)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.refl.DynamicSetterAccessor.static {}</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.refl.DynamicSetterAccessor.toString()</inbound>
            <inbound type="class" confirmed="yes">org.mvel.optimizers.impl.refl.FieldAccessor</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.refl.FieldAccessor.getValue(java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.refl.FieldAccessor.setValue(java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory, java.lang.Object)</inbound>
            <inbound type="class" confirmed="yes">org.mvel.optimizers.impl.refl.Fold</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.refl.Fold.getValue(java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.refl.Fold.setValue(java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory, java.lang.Object)</inbound>
            <inbound type="class" confirmed="yes">org.mvel.optimizers.impl.refl.GetterAccessor</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.refl.GetterAccessor.EMPTY</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.refl.GetterAccessor.getValue(java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.refl.GetterAccessor.setValue(java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory, java.lang.Object)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.refl.GetterAccessor.static {}</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.refl.GetterAccessor.toString()</inbound>
            <inbound type="class" confirmed="yes">org.mvel.optimizers.impl.refl.IndexedCharSeqAccessor</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.refl.IndexedCharSeqAccessor.getValue(java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.refl.IndexedCharSeqAccessor.setValue(java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory, java.lang.Object)</inbound>
            <inbound type="class" confirmed="yes">org.mvel.optimizers.impl.refl.IndexedCharSeqAccessorNest</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.refl.IndexedCharSeqAccessorNest.getValue(java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.refl.IndexedCharSeqAccessorNest.setValue(java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory, java.lang.Object)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.refl.IndexedCharSeqAccessorNest.toString()</inbound>
            <inbound type="class" confirmed="yes">org.mvel.optimizers.impl.refl.ListAccessor</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.refl.ListAccessor.getValue(java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.refl.ListAccessor.setValue(java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory, java.lang.Object)</inbound>
            <inbound type="class" confirmed="yes">org.mvel.optimizers.impl.refl.ListAccessorNest</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.refl.ListAccessorNest.getValue(java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.refl.ListAccessorNest.setValue(java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory, java.lang.Object)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.refl.ListAccessorNest.toString()</inbound>
            <inbound type="class" confirmed="yes">org.mvel.optimizers.impl.refl.MapAccessor</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.refl.MapAccessor.MapAccessor(java.lang.Object)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.refl.MapAccessor.getProperty()</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.refl.MapAccessor.getValue(java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.refl.MapAccessor.property</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.refl.MapAccessor.setProperty(java.lang.Object)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.refl.MapAccessor.setValue(java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory, java.lang.Object)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.refl.MapAccessor.toString()</inbound>
            <inbound type="class" confirmed="yes">org.mvel.optimizers.impl.refl.MapAccessorNest</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.refl.MapAccessorNest.getValue(java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.refl.MapAccessorNest.setValue(java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory, java.lang.Object)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.refl.MapAccessorNest.toString()</inbound>
            <inbound type="class" confirmed="yes">org.mvel.optimizers.impl.refl.MethodAccessor</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.refl.MethodAccessor.executeAll(java.lang.Object, org.mvel.integration.VariableResolverFactory)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.refl.MethodAccessor.executeAndCoerce(java.lang.Class[], java.lang.Object, org.mvel.integration.VariableResolverFactory)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.refl.MethodAccessor.getValue(java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.refl.MethodAccessor.setValue(java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory, java.lang.Object)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.refl.ReflectiveAccessorOptimizer.EMPTYARG</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.refl.ReflectiveAccessorOptimizer.ReflectiveAccessorOptimizer(char[], java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.refl.ReflectiveAccessorOptimizer._getAccessor(java.lang.Object)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.refl.ReflectiveAccessorOptimizer.compileConstructor(char[], java.lang.Object, org.mvel.integration.VariableResolverFactory)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.refl.ReflectiveAccessorOptimizer.compileGetChain()</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.refl.ReflectiveAccessorOptimizer.createSignatureHash(java.lang.String, java.lang.Object)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.refl.ReflectiveAccessorOptimizer.ctx</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.refl.ReflectiveAccessorOptimizer.get(java.lang.String, java.lang.Object)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.refl.ReflectiveAccessorOptimizer.getBeanProperty(java.lang.Object, java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.refl.ReflectiveAccessorOptimizer.getCollectionProperty(java.lang.Object, java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.refl.ReflectiveAccessorOptimizer.getMethod(java.lang.Object, java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.refl.ReflectiveAccessorOptimizer.getResultOptPass()</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.refl.ReflectiveAccessorOptimizer.getValue(java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.refl.ReflectiveAccessorOptimizer.main(java.lang.String[])</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.refl.ReflectiveAccessorOptimizer.optimizeAccessor(char[], java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory, boolean)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.refl.ReflectiveAccessorOptimizer.optimizeCollection(char[], java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.refl.ReflectiveAccessorOptimizer.optimizeFold(char[], java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.refl.ReflectiveAccessorOptimizer.optimizeObjectCreation(char[], java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.refl.ReflectiveAccessorOptimizer.optimizeSetAccessor(char[], java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory, boolean, java.lang.Object)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.refl.ReflectiveAccessorOptimizer.static {}</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.refl.ReflectiveAccessorOptimizer.thisRef</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.refl.ReflectiveAccessorOptimizer.val</inbound>
            <inbound type="class" confirmed="yes">org.mvel.optimizers.impl.refl.SetterAccessor</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.refl.SetterAccessor.EMPTY</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.refl.SetterAccessor.getValue(java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.refl.SetterAccessor.setValue(java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory, java.lang.Object)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.refl.SetterAccessor.static {}</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.refl.SetterAccessor.toString()</inbound>
            <inbound type="class" confirmed="yes">org.mvel.optimizers.impl.refl.StaticReferenceAccessor</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.refl.StaticReferenceAccessor.StaticReferenceAccessor(java.lang.Object)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.refl.StaticReferenceAccessor.getLiteral()</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.refl.StaticReferenceAccessor.getValue(java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.refl.StaticReferenceAccessor.literal</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.refl.StaticReferenceAccessor.setLiteral(java.lang.Object)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.refl.StaticReferenceAccessor.setValue(java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory, java.lang.Object)</inbound>
            <inbound type="class" confirmed="yes">org.mvel.optimizers.impl.refl.StaticVarAccessor</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.refl.StaticVarAccessor.getValue(java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.refl.StaticVarAccessor.setValue(java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory, java.lang.Object)</inbound>
            <inbound type="class" confirmed="yes">org.mvel.optimizers.impl.refl.ThisValueAccessor</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.refl.ThisValueAccessor.getValue(java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.refl.ThisValueAccessor.setValue(java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory, java.lang.Object)</inbound>
            <inbound type="class" confirmed="yes">org.mvel.optimizers.impl.refl.Union</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.refl.Union.getValue(java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.refl.Union.setValue(java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory, java.lang.Object)</inbound>
            <inbound type="class" confirmed="yes">org.mvel.optimizers.impl.refl.VariableAccessor</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.refl.VariableAccessor.getProperty()</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.refl.VariableAccessor.getValue(java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.refl.VariableAccessor.setValue(java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory, java.lang.Object)</inbound>
            <inbound type="class" confirmed="yes">org.mvel.optimizers.impl.refl.collection.ArrayCreator</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.refl.collection.ArrayCreator.getValue(java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.refl.collection.ArrayCreator.setValue(java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory, java.lang.Object)</inbound>
            <inbound type="class" confirmed="yes">org.mvel.optimizers.impl.refl.collection.ExprValueAccessor</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.refl.collection.ExprValueAccessor.getValue(java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.refl.collection.ExprValueAccessor.setValue(java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory, java.lang.Object)</inbound>
            <inbound type="class" confirmed="yes">org.mvel.optimizers.impl.refl.collection.ListCreator</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.refl.collection.ListCreator.getValue(java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.refl.collection.ListCreator.setValue(java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory, java.lang.Object)</inbound>
            <inbound type="class" confirmed="yes">org.mvel.optimizers.impl.refl.collection.MapCreator</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.refl.collection.MapCreator.getValue(java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.refl.collection.MapCreator.setValue(java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory, java.lang.Object)</inbound>
            <inbound type="class" confirmed="yes">org.mvel.util.ArrayTools</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.util.ArrayTools.charTranspose(java.lang.Object[])</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.util.ArrayTools.collectionTranspose(java.util.Collection, java.lang.Class)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.util.ArrayTools.floatTranspose(java.lang.Object[])</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.util.ArrayTools.intTranspose(java.lang.Object[])</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.util.ArrayTools.listTranspose(boolean[])</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.util.ArrayTools.listTranspose(char[])</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.util.ArrayTools.listTranspose(double[])</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.util.ArrayTools.listTranspose(int[])</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.util.ArrayTools.listTranspose(java.lang.String[])</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.util.ArrayTools.listTranspose(long[])</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.util.ArrayTools.listTranspose(short[])</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.util.ArrayTools.longTranspose(java.lang.Object[])</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.util.ArrayTools.setTranspose(java.lang.String[])</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.util.ArrayTools.shortTranspose(java.lang.Object[])</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.util.ArrayTools.stringTranspose(java.lang.Object[])</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.util.ArrayTools.stringTranspose(java.util.Collection)</inbound>
            <inbound type="class" confirmed="yes">org.mvel.util.CollectionParser</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.util.CollectionParser.EMPTY_ARRAY</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.util.CollectionParser.parseCollection()</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.util.CollectionParser.parseCollection(char[])</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.util.CollectionParser.static {}</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.util.CollectionParser.subset(char[], int, int)</inbound>
            <inbound type="class" confirmed="yes">org.mvel.util.CompilerTools</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.util.CompilerTools.optimizeAST(org.mvel.ASTLinkedList, boolean)</inbound>
            <inbound type="class" confirmed="yes">org.mvel.util.ExecutionStack</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.util.ExecutionStack.add(java.lang.Object)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.util.ExecutionStack.peek()</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.util.ExecutionStack.peek2()</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.util.ExecutionStack.pop()</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.util.ExecutionStack.push(java.lang.Object)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.util.ExecutionStack.push(java.lang.Object, java.lang.Object)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.util.ExecutionStack.push(java.lang.Object, java.lang.Object, java.lang.Object)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.util.ExecutionStack.pushAndPeek(java.lang.Object)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.util.ExecutionStack.showStack()</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.util.ExecutionStack.toString()</inbound>
            <inbound type="class" confirmed="yes">org.mvel.util.FastList$1</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.util.FastList$1.next()</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.util.FastList.FastList(int)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.util.FastList.FastList(java.lang.Object[])</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.util.FastList.access$0(org.mvel.util.FastList)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.util.FastList.add(int, java.lang.Object)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.util.FastList.add(java.lang.Object)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.util.FastList.addAll(int, java.util.Collection)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.util.FastList.clear()</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.util.FastList.contains(java.lang.Object)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.util.FastList.copyArray()</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.util.FastList.elements</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.util.FastList.ensureCapacity(int)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.util.FastList.equals(java.lang.Object)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.util.FastList.get(int)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.util.FastList.increaseSize(int)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.util.FastList.indexOf(java.lang.Object)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.util.FastList.lastIndexOf(java.lang.Object)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.util.FastList.remove(int)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.util.FastList.remove(java.lang.Object)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.util.FastList.set(int, java.lang.Object)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.util.FastList.toArray()</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.util.FastList.toArray(java.lang.Object[])</inbound>
            <inbound type="class" confirmed="yes">org.mvel.util.MethodStub</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.util.MethodStub.getMethod()</inbound>
            <inbound type="class" confirmed="yes">org.mvel.util.ParseTools</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.util.ParseTools.EMPTY_OBJ_ARR</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.util.ParseTools.containsCheck(java.lang.Object, java.lang.Object)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.util.ParseTools.createClass(java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.util.ParseTools.createShortFormOperativeAssignment(java.lang.String, char[], int)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.util.ParseTools.determineActualTargetMethod(java.lang.reflect.Method)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.util.ParseTools.doOperations(java.lang.Object, int, java.lang.Object)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.util.ParseTools.findClass(org.mvel.integration.VariableResolverFactory, java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.util.ParseTools.getBestCandidate(java.lang.Class[], java.lang.String, java.lang.Class, java.lang.reflect.Method[])</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.util.ParseTools.getBestCandidate(java.lang.Object[], java.lang.String, java.lang.Class, java.lang.reflect.Method[])</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.util.ParseTools.getBestConstructorCanadidate(java.lang.Object[], java.lang.Class)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.util.ParseTools.getConstructors(java.lang.Class)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.util.ParseTools.getConstructors(java.lang.reflect.Constructor)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.util.ParseTools.getExactMatch(java.lang.String, java.lang.Class[], java.lang.Class, java.lang.Class)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.util.ParseTools.getSimpleClassName(java.lang.Class)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.util.ParseTools.handleParserEgress(java.lang.Object, boolean)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.util.ParseTools.increment(java.lang.Object)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.util.ParseTools.optimizeTree(org.mvel.CompiledExpression)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.util.ParseTools.parseParameterList(char[], int, int)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.util.ParseTools.parseParameters(char[])</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.util.ParseTools.static {}</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.util.ParseTools.valueOnly(java.lang.Object)</inbound>
            <inbound type="class" confirmed="yes">org.mvel.util.PropertyTools</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.util.PropertyTools.contains(java.lang.Object, java.lang.Object)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.util.PropertyTools.getGetter(java.lang.Class, java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.util.PropertyTools.getSetter(java.lang.Class, java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.util.PropertyTools.handleNumericConversion(char[])</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.util.PropertyTools.isEmpty(java.lang.Object)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.util.PropertyTools.isNumber(java.lang.Object)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.util.PropertyTools.isNumeric(java.lang.Object)</inbound>
            <inbound type="class" confirmed="yes">org.mvel.util.ReflectionUtil</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.util.ReflectionUtil.getAllFields(java.lang.Class)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.util.ReflectionUtil.getGetter(java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.util.ReflectionUtil.getIsGetter(java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.util.ReflectionUtil.isAssignable(java.lang.Object, java.lang.Class)</inbound>
            <inbound type="class" confirmed="yes">org.mvel.util.Stack</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.util.Stack.add(java.lang.Object)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.util.Stack.peek()</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.util.Stack.peek2()</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.util.Stack.pop()</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.util.Stack.push(java.lang.Object)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.util.Stack.push(java.lang.Object, java.lang.Object)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.util.Stack.push(java.lang.Object, java.lang.Object, java.lang.Object)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.util.Stack.pushAndPeek(java.lang.Object)</inbound>
            <inbound type="class" confirmed="yes">org.mvel.util.StackElement</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.util.StackElement.StackElement(org.mvel.util.StackElement, java.lang.Object)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.util.StackElement.value</inbound>
            <inbound type="class" confirmed="yes">org.mvel.util.StringAppender</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.util.StringAppender.append(java.lang.Object)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.util.StringAppender.getChars(int, int)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.util.StringAppender.grow(int)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.util.StringAppender.toChars()</inbound>
            <inbound type="class" confirmed="yes">org.mvel.util.ThisLiteral</inbound>
            <feature confirmed="no">
                <name>java.lang.Object.Object()</name>
                <inbound type="feature" confirmed="yes">org.mvel.ASTArrayList.ASTArrayList(org.mvel.ASTArrayList)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.ASTArrayList.ASTArrayList(org.mvel.ASTIterator)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.ASTLinkedList.ASTLinkedList()</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.ASTLinkedList.ASTLinkedList(org.mvel.ASTNode)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.ASTLinkedList.ASTLinkedList(org.mvel.ASTNode, int)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.ASTNode.ASTNode()</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.ASTNode.ASTNode(char[], int)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.ASTNode.ASTNode(char[], int, int, int)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.ASTNode.ASTNode(int, java.lang.Object)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.AbstractParser.AbstractParser()</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.BlankLiteral.BlankLiteral()</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.CompiledExpression.CompiledExpression(org.mvel.ASTIterator, java.lang.String, boolean)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.CompiledExpression.CompiledExpression(org.mvel.ASTIterator, java.lang.String, java.lang.Class, org.mvel.ParserContext, boolean)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.CompiledSetExpression.CompiledSetExpression(char[])</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.DataConversion.DataConversion()</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.ErrorDetail.ErrorDetail(int, int, boolean, java.lang.String)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.ErrorDetail.ErrorDetail(java.lang.String, boolean)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.ExecutableAccessor.ExecutableAccessor(org.mvel.ASTNode, boolean)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.ExecutableAccessor.ExecutableAccessor(org.mvel.ASTNode, boolean, java.lang.Class)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.ExecutableLiteral.ExecutableLiteral(int)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.ExecutableLiteral.ExecutableLiteral(java.lang.Object)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.ForeachContext.ForeachContext()</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.ForeachContext.ForeachContext(java.lang.String)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.ForeachContext.ForeachContext(java.lang.String, int)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.ForeachContext.ForeachContext(java.lang.String, int, java.lang.String[], java.lang.String[])</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.MVEL.MVEL()</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.MVELRuntime.MVELRuntime()</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.MVELSH.MVELSH()</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.MVELTemplateRegistry.MVELTemplateRegistry()</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.Node.Node()</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.Node.Node(int)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.Node.Node(int, int)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.Node.Node(int, int, int)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.Node.Node(int, int, int, int, int)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.ParserContext.ParserContext()</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.ParserContext.ParserContext(boolean)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.ParserContext.ParserContext(java.lang.Object)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.ParserContext.ParserContext(java.util.Map, java.util.Map, java.lang.String)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.PropertyAccessor.PropertyAccessor(char[], int, int, java.lang.Object, org.mvel.integration.VariableResolverFactory)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.PropertyAccessor.PropertyAccessor(char[], java.lang.Object)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.PropertyAccessor.PropertyAccessor(char[], java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory, java.lang.Object)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.PropertyAccessor.PropertyAccessor(char[], java.lang.Object, org.mvel.integration.VariableResolverFactory, java.lang.Object)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.PropertyAccessor.PropertyAccessor(java.lang.String, java.lang.Object)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.PropertyAccessor.PropertyAccessor(org.mvel.integration.VariableResolverFactory, java.lang.Object)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.SetAccessor.SetAccessor(org.mvel.Accessor, org.mvel.Accessor)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.Soundex.Soundex()</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.TemplateCompiler$IncludeRef.TemplateCompiler$IncludeRef(java.lang.String, org.mvel.TemplateCompiler$IncludeRefParam[])</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.TemplateCompiler$IncludeRefParam.TemplateCompiler$IncludeRefParam(java.lang.String, java.lang.String)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.TemplateCompiler.TemplateCompiler(org.mvel.TemplateInterpreter)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.TemplateInterpreter.TemplateInterpreter(char[])</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.TemplateInterpreter.TemplateInterpreter(java.lang.CharSequence)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.TemplateInterpreter.TemplateInterpreter(java.lang.String)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.asm.AnnotationWriter.AnnotationWriter(org.mvel.asm.ClassWriter, boolean, org.mvel.asm.ByteVector, org.mvel.asm.ByteVector, int)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.asm.Attribute.Attribute(java.lang.String)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.asm.ByteVector.ByteVector()</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.asm.ByteVector.ByteVector(int)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.asm.ClassAdapter.ClassAdapter(org.mvel.asm.ClassVisitor)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.asm.ClassReader.ClassReader(byte[], int, int)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.asm.ClassWriter.ClassWriter(int)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.asm.Edge.Edge()</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.asm.FieldWriter.FieldWriter(org.mvel.asm.ClassWriter, int, java.lang.String, java.lang.String, java.lang.String, java.lang.Object)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.asm.Frame.Frame()</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.asm.Handler.Handler()</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.asm.Item.Item()</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.asm.Item.Item(int)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.asm.Item.Item(int, org.mvel.asm.Item)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.asm.Label.Label()</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.asm.Label.Label(boolean)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.asm.MethodAdapter.MethodAdapter(org.mvel.asm.MethodVisitor)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.asm.MethodWriter.MethodWriter(org.mvel.asm.ClassWriter, int, java.lang.String, java.lang.String, java.lang.String, java.lang.String[], boolean, boolean)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.asm.Type.Type(int)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.asm.Type.Type(int, char[], int, int)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.ast.NewObjectNode$ArraySize.NewObjectNode$ArraySize(char[])</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.ast.NewObjectNode$NewObjectArray.NewObjectNode$NewObjectArray(java.lang.Class, org.mvel.ExecutableStatement[])</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.ast.WithNode$ParmValuePair.WithNode$ParmValuePair()</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.ast.WithNode$ParmValuePair.WithNode$ParmValuePair(java.lang.String, org.mvel.ExecutableStatement)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.ast.cache.CachedListAccessor.CachedListAccessor(java.lang.Object[])</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.ast.cache.CachedListAccessor.CachedListAccessor(java.util.List)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.conversion.ArrayCH$1.ArrayCH$1()</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.conversion.ArrayCH$2.ArrayCH$2()</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.conversion.ArrayCH$3.ArrayCH$3()</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.conversion.ArrayCH.ArrayCH()</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.conversion.BigDecimalCH$1.BigDecimalCH$1()</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.conversion.BigDecimalCH$10.BigDecimalCH$10()</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.conversion.BigDecimalCH$11.BigDecimalCH$11()</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.conversion.BigDecimalCH$2.BigDecimalCH$2()</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.conversion.BigDecimalCH$3.BigDecimalCH$3()</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.conversion.BigDecimalCH$4.BigDecimalCH$4()</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.conversion.BigDecimalCH$5.BigDecimalCH$5()</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.conversion.BigDecimalCH$6.BigDecimalCH$6()</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.conversion.BigDecimalCH$7.BigDecimalCH$7()</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.conversion.BigDecimalCH$8.BigDecimalCH$8()</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.conversion.BigDecimalCH$9.BigDecimalCH$9()</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.conversion.BigDecimalCH.BigDecimalCH()</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.conversion.BigIntegerCH$1.BigIntegerCH$1()</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.conversion.BigIntegerCH$2.BigIntegerCH$2()</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.conversion.BigIntegerCH$3.BigIntegerCH$3()</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.conversion.BigIntegerCH$4.BigIntegerCH$4()</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.conversion.BigIntegerCH$5.BigIntegerCH$5()</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.conversion.BigIntegerCH$6.BigIntegerCH$6()</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.conversion.BigIntegerCH$7.BigIntegerCH$7()</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.conversion.BigIntegerCH$8.BigIntegerCH$8()</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.conversion.BigIntegerCH$9.BigIntegerCH$9()</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.conversion.BigIntegerCH.BigIntegerCH()</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.conversion.BooleanCH$1.BooleanCH$1()</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.conversion.BooleanCH$10.BooleanCH$10()</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.conversion.BooleanCH$2.BooleanCH$2()</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.conversion.BooleanCH$3.BooleanCH$3()</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.conversion.BooleanCH$4.BooleanCH$4()</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.conversion.BooleanCH$5.BooleanCH$5()</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.conversion.BooleanCH$6.BooleanCH$6()</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.conversion.BooleanCH$7.BooleanCH$7()</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.conversion.BooleanCH$8.BooleanCH$8()</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.conversion.BooleanCH$9.BooleanCH$9()</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.conversion.BooleanCH.BooleanCH()</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.conversion.ByteCH$1.ByteCH$1()</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.conversion.ByteCH$2.ByteCH$2()</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.conversion.ByteCH$3.ByteCH$3()</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.conversion.ByteCH.ByteCH()</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.conversion.CharArrayCH$1.CharArrayCH$1()</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.conversion.CharArrayCH.CharArrayCH()</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.conversion.CharCH$1.CharCH$1()</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.conversion.CharCH$2.CharCH$2()</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.conversion.CharCH$3.CharCH$3()</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.conversion.CharCH$4.CharCH$4()</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.conversion.CharCH$5.CharCH$5()</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.conversion.CharCH.CharCH()</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.conversion.DoubleCH$1.DoubleCH$1()</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.conversion.DoubleCH$10.DoubleCH$10()</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.conversion.DoubleCH$2.DoubleCH$2()</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.conversion.DoubleCH$3.DoubleCH$3()</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.conversion.DoubleCH$4.DoubleCH$4()</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.conversion.DoubleCH$5.DoubleCH$5()</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.conversion.DoubleCH$6.DoubleCH$6()</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.conversion.DoubleCH$7.DoubleCH$7()</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.conversion.DoubleCH$8.DoubleCH$8()</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.conversion.DoubleCH$9.DoubleCH$9()</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.conversion.DoubleCH.DoubleCH()</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.conversion.FloatCH$1.FloatCH$1()</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.conversion.FloatCH$10.FloatCH$10()</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.conversion.FloatCH$2.FloatCH$2()</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.conversion.FloatCH$3.FloatCH$3()</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.conversion.FloatCH$4.FloatCH$4()</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.conversion.FloatCH$5.FloatCH$5()</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.conversion.FloatCH$6.FloatCH$6()</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.conversion.FloatCH$7.FloatCH$7()</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.conversion.FloatCH$8.FloatCH$8()</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.conversion.FloatCH$9.FloatCH$9()</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.conversion.FloatCH.FloatCH()</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.conversion.IntArrayCH$1.IntArrayCH$1()</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.conversion.IntArrayCH$2.IntArrayCH$2()</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.conversion.IntArrayCH.IntArrayCH()</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.conversion.IntegerCH$1.IntegerCH$1()</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.conversion.IntegerCH$10.IntegerCH$10()</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.conversion.IntegerCH$11.IntegerCH$11()</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.conversion.IntegerCH$2.IntegerCH$2()</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.conversion.IntegerCH$3.IntegerCH$3()</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.conversion.IntegerCH$4.IntegerCH$4()</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.conversion.IntegerCH$5.IntegerCH$5()</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.conversion.IntegerCH$6.IntegerCH$6()</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.conversion.IntegerCH$7.IntegerCH$7()</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.conversion.IntegerCH$8.IntegerCH$8()</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.conversion.IntegerCH$9.IntegerCH$9()</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.conversion.IntegerCH.IntegerCH()</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.conversion.LongCH$1.LongCH$1()</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.conversion.LongCH$2.LongCH$2()</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.conversion.LongCH$3.LongCH$3()</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.conversion.LongCH$4.LongCH$4()</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.conversion.LongCH$5.LongCH$5()</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.conversion.LongCH$6.LongCH$6()</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.conversion.LongCH$7.LongCH$7()</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.conversion.LongCH$8.LongCH$8()</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.conversion.LongCH.LongCH()</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.conversion.ObjectCH.ObjectCH()</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.conversion.PrimArrayHandler$1.PrimArrayHandler$1(org.mvel.conversion.PrimArrayHandler)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.conversion.PrimArrayHandler$2.PrimArrayHandler$2(org.mvel.conversion.PrimArrayHandler)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.conversion.PrimArrayHandler.PrimArrayHandler(java.lang.Class)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.conversion.PrimIntArrayCH$1.PrimIntArrayCH$1()</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.conversion.PrimIntArrayCH$2.PrimIntArrayCH$2()</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.conversion.PrimIntArrayCH$3.PrimIntArrayCH$3()</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.conversion.PrimIntArrayCH.PrimIntArrayCH()</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.conversion.ShortCH$1.ShortCH$1()</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.conversion.ShortCH$10.ShortCH$10()</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.conversion.ShortCH$2.ShortCH$2()</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.conversion.ShortCH$3.ShortCH$3()</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.conversion.ShortCH$4.ShortCH$4()</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.conversion.ShortCH$5.ShortCH$5()</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.conversion.ShortCH$6.ShortCH$6()</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.conversion.ShortCH$7.ShortCH$7()</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.conversion.ShortCH$8.ShortCH$8()</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.conversion.ShortCH$9.ShortCH$9()</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.conversion.ShortCH.ShortCH()</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.conversion.StringArrayCH$1.StringArrayCH$1()</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.conversion.StringArrayCH.StringArrayCH()</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.conversion.StringCH.StringCH()</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.conversion.UnitConversion.UnitConversion()</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.debug.DebugTools$DecompileContext.DebugTools$DecompileContext()</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.debug.DebugTools.DebugTools()</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.debug.DebuggerContext.DebuggerContext()</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.debug.Frame.Frame(java.lang.String, int, org.mvel.integration.VariableResolverFactory, org.mvel.ParserContext)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.debug.Frame.Frame(org.mvel.ast.LineLabel, org.mvel.integration.VariableResolverFactory, org.mvel.ParserContext)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.integration.ResolverTools.ResolverTools()</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.integration.impl.BaseVariableResolverFactory.BaseVariableResolverFactory()</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.integration.impl.ClassImportResolver.ClassImportResolver(java.lang.String, java.lang.Class)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.integration.impl.ItemResolverFactory$ItemResolver.ItemResolverFactory$ItemResolver(java.lang.String)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.integration.impl.MapVariableResolver.MapVariableResolver(java.util.Map, java.lang.String)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.integration.impl.MapVariableResolver.MapVariableResolver(java.util.Map, java.lang.String, boolean)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.integration.impl.MapVariableResolver.MapVariableResolver(java.util.Map, java.lang.String, java.lang.Class)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.integration.impl.MapVariableResolver.MapVariableResolver(java.util.Map, java.lang.String, java.lang.Class, boolean)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.integration.impl.SimpleValueResolver.SimpleValueResolver(java.lang.Object)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.integration.impl.StaticMethodImportResolver.StaticMethodImportResolver(java.lang.String, org.mvel.util.MethodStub)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.math.IEEEFloatingPointMath.IEEEFloatingPointMath()</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.math.JDK14CompatabilityMath.JDK14CompatabilityMath()</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.optimizers.OptimizerFactory.OptimizerFactory()</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.refl.ArrayAccessor.ArrayAccessor()</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.refl.ArrayAccessor.ArrayAccessor(int)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.refl.ArrayAccessorNest.ArrayAccessorNest()</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.refl.ArrayAccessorNest.ArrayAccessorNest(java.lang.String)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.refl.ArrayAccessorNest.ArrayAccessorNest(org.mvel.ExecutableStatement)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.refl.BaseAccessor.BaseAccessor()</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.refl.DynamicFieldAccessor.DynamicFieldAccessor()</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.refl.DynamicFieldAccessor.DynamicFieldAccessor(java.lang.reflect.Field)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.refl.DynamicSetterAccessor.DynamicSetterAccessor(java.lang.reflect.Method)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.refl.FieldAccessor.FieldAccessor()</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.refl.FieldAccessor.FieldAccessor(java.lang.reflect.Field)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.refl.Fold.Fold(char[], org.mvel.Accessor)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.refl.GetterAccessor.GetterAccessor(java.lang.reflect.Method)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.refl.IndexedCharSeqAccessor.IndexedCharSeqAccessor()</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.refl.IndexedCharSeqAccessor.IndexedCharSeqAccessor(int)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.refl.IndexedCharSeqAccessorNest.IndexedCharSeqAccessorNest()</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.refl.IndexedCharSeqAccessorNest.IndexedCharSeqAccessorNest(org.mvel.ExecutableStatement)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.refl.ListAccessor.ListAccessor()</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.refl.ListAccessor.ListAccessor(int)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.refl.ListAccessorNest.ListAccessorNest()</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.refl.ListAccessorNest.ListAccessorNest(java.lang.String)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.refl.ListAccessorNest.ListAccessorNest(org.mvel.ExecutableStatement)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.refl.MapAccessor.MapAccessor()</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.refl.MapAccessor.MapAccessor(java.lang.Object)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.refl.MapAccessorNest.MapAccessorNest()</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.refl.MapAccessorNest.MapAccessorNest(java.lang.String)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.refl.MapAccessorNest.MapAccessorNest(org.mvel.ExecutableStatement)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.refl.MethodAccessor.MethodAccessor()</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.refl.MethodAccessor.MethodAccessor(java.lang.reflect.Method, org.mvel.ExecutableStatement[])</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.refl.SetterAccessor.SetterAccessor(java.lang.reflect.Method)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.refl.StaticReferenceAccessor.StaticReferenceAccessor()</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.refl.StaticReferenceAccessor.StaticReferenceAccessor(java.lang.Object)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.refl.StaticVarAccessor.StaticVarAccessor(java.lang.reflect.Field)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.refl.ThisValueAccessor.ThisValueAccessor()</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.refl.Union.Union(org.mvel.Accessor, char[])</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.refl.VariableAccessor.VariableAccessor(java.lang.String, org.mvel.integration.VariableResolverFactory)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.refl.collection.ArrayCreator.ArrayCreator(org.mvel.Accessor[])</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.refl.collection.ExprValueAccessor.ExprValueAccessor(java.lang.String)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.refl.collection.ListCreator.ListCreator(org.mvel.Accessor[])</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.refl.collection.MapCreator.MapCreator(org.mvel.Accessor[], org.mvel.Accessor[])</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.util.ArrayTools.ArrayTools()</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.util.CollectionParser.CollectionParser()</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.util.CollectionParser.CollectionParser(int)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.util.CompilerTools.CompilerTools()</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.util.ExecutionStack.ExecutionStack()</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.util.FastList$1.FastList$1(org.mvel.util.FastList, int)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.util.MethodStub.MethodStub()</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.util.MethodStub.MethodStub(java.lang.Class, java.lang.String)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.util.MethodStub.MethodStub(java.lang.reflect.Method)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.util.ParseTools.ParseTools()</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.util.PropertyTools.PropertyTools()</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.util.ReflectionUtil.ReflectionUtil()</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.util.StackElement.StackElement(org.mvel.util.StackElement, java.lang.Object)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.util.StringAppender.StringAppender()</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.util.StringAppender.StringAppender(char)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.util.StringAppender.StringAppender(char[])</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.util.StringAppender.StringAppender(int)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.util.StringAppender.StringAppender(java.lang.CharSequence)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.util.StringAppender.StringAppender(java.lang.String)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.util.ThisLiteral.ThisLiteral()</inbound>
            </feature>
            <feature confirmed="no">
                <name>java.lang.Object.equals(java.lang.Object)</name>
                <inbound type="feature" confirmed="yes">org.mvel.math.IEEEFloatingPointMath.safeEquals(java.lang.Object, java.lang.Object)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.math.IEEEFloatingPointMath.safeNotEquals(java.lang.Object, java.lang.Object)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.math.JDK14CompatabilityMath.safeEquals(java.lang.Object, java.lang.Object)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.math.JDK14CompatabilityMath.safeNotEquals(java.lang.Object, java.lang.Object)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.util.FastList.indexOf(java.lang.Object)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.util.FastList.lastIndexOf(java.lang.Object)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.util.PropertyTools.contains(java.lang.Object, java.lang.Object)</inbound>
            </feature>
            <feature confirmed="no">
                <name>java.lang.Object.getClass()</name>
                <inbound type="feature" confirmed="yes">org.mvel.ASTArrayList.showNodeChain()</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.ASTNode.setName(char[])</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.AbstractParser.reduce()</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.BlankLiteral.equals(java.lang.Object)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.DataConversion.convert(java.lang.Object, java.lang.Class)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.ExecutableLiteral.getKnownEgressType()</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.ExpressionCompiler.verify(org.mvel.ParserContext, org.mvel.ASTNode)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.MVELRuntime.execute(boolean, org.mvel.CompiledExpression, java.lang.Object, org.mvel.integration.VariableResolverFactory)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.PropertyAccessor.get()</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.PropertyAccessor.getBeanProperty(java.lang.Object, java.lang.String)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.PropertyAccessor.getCollectionProperty(java.lang.Object, java.lang.String)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.PropertyAccessor.getMethod(java.lang.Object, java.lang.String)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.PropertyAccessor.set(java.lang.Object)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.PropertyVerifier.getBeanProperty(java.lang.Class, java.lang.String)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.PropertyVerifier.getMethod(java.lang.Class, java.lang.String)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.ast.ForEachNode.getReducedValue(java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.ast.ForEachNode.getReducedValueAccelerated(java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.conversion.ArrayCH.convertFrom(java.lang.Object)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.conversion.BigDecimalCH.convertFrom(java.lang.Object)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.conversion.BigIntegerCH.convertFrom(java.lang.Object)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.conversion.BooleanCH.convertFrom(java.lang.Object)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.conversion.ByteCH.convertFrom(java.lang.Object)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.conversion.CharArrayCH.convertFrom(java.lang.Object)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.conversion.CharCH.convertFrom(java.lang.Object)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.conversion.DoubleCH.convertFrom(java.lang.Object)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.conversion.FloatCH.convertFrom(java.lang.Object)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.conversion.IntArrayCH.convertFrom(java.lang.Object)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.conversion.IntegerCH.convertFrom(java.lang.Object)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.conversion.LongCH.convertFrom(java.lang.Object)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.conversion.PrimArrayHandler$1.convert(java.lang.Object)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.conversion.PrimArrayHandler$2.convert(java.lang.Object)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.conversion.PrimArrayHandler.convertFrom(java.lang.Object)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.conversion.PrimIntArrayCH.convertFrom(java.lang.Object)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.conversion.ShortCH.convertFrom(java.lang.Object)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.conversion.StringArrayCH.convertFrom(java.lang.Object)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.debug.DebugTools.decompile(java.io.Serializable)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.debug.DebugTools.decompile(org.mvel.CompiledExpression, boolean, org.mvel.debug.DebugTools$DecompileContext)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.integration.impl.MapVariableResolver.setValue(java.lang.Object)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.math.IEEEFloatingPointMath.doOperation(java.lang.Object, int, java.lang.Object)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.math.IEEEFloatingPointMath.doOperationNonNumeric(java.lang.Object, int, java.lang.Object)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.math.JDK14CompatabilityMath.doOperation(java.lang.Object, int, java.lang.Object)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.math.JDK14CompatabilityMath.doOperationNonNumeric(java.lang.Object, int, java.lang.Object)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.optimizers.OptimizerFactory.getAccessorCompiler(java.lang.String)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.optimizers.OptimizerFactory.getDefaultAccessorCompiler()</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.optimizers.OptimizerFactory.getThreadAccessorOptimizer()</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.optimizers.OptimizerFactory.setDefaultOptimizer(java.lang.String)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.asm.ASMAccessorOptimizer.getBeanProperty(java.lang.Object, java.lang.String)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.asm.ASMAccessorOptimizer.getCollectionProperty(java.lang.Object, java.lang.String)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.asm.ASMAccessorOptimizer.getMethod(java.lang.Object, java.lang.String)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.asm.ASMAccessorOptimizer.optimizeObjectCreation(char[], java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.asm.ASMAccessorOptimizer.writeLiteralOrSubexpression(java.lang.Object, java.lang.Class)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.refl.ArrayAccessorNest.setValue(java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory, java.lang.Object)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.refl.GetterAccessor.getValue(java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.refl.ReflectiveAccessorOptimizer.compileGetChain()</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.refl.ReflectiveAccessorOptimizer.createSignatureHash(java.lang.String, java.lang.Object)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.refl.ReflectiveAccessorOptimizer.getBeanProperty(java.lang.Object, java.lang.String)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.refl.ReflectiveAccessorOptimizer.getCollectionProperty(java.lang.Object, java.lang.String)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.refl.ReflectiveAccessorOptimizer.getMethod(java.lang.Object, java.lang.String)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.refl.ReflectiveAccessorOptimizer.optimizeSetAccessor(char[], java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory, boolean, java.lang.Object)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.util.ParseTools.containsCheck(java.lang.Object, java.lang.Object)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.util.ParseTools.getBestCandidate(java.lang.Object[], java.lang.String, java.lang.Class, java.lang.reflect.Method[])</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.util.ParseTools.getBestConstructorCanadidate(java.lang.Object[], java.lang.Class)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.util.ParseTools.increment(java.lang.Object)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.util.PropertyTools.contains(java.lang.Object, java.lang.Object)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.util.PropertyTools.isNumeric(java.lang.Object)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.util.ReflectionUtil.isAssignable(java.lang.Object, java.lang.Class)</inbound>
            </feature>
            <feature confirmed="no">
                <name>java.lang.Object.hashCode()</name>
                <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.asm.ASMAccessorOptimizer._getAccessor(java.lang.Object)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.asm.ASMAccessorOptimizer._initJIT()</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.refl.ReflectiveAccessorOptimizer.createSignatureHash(java.lang.String, java.lang.Object)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.util.ParseTools.createClassSignatureHash(java.lang.Class, java.lang.Class[])</inbound>
            </feature>
            <feature confirmed="no">
                <name>java.lang.Object.toString()</name>
                <inbound type="feature" confirmed="yes">org.mvel.ast.ForEachNode.getReducedValue(java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.ast.ForEachNode.getReducedValueAccelerated(java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory)</inbound>
            </feature>
        </class>
        <class confirmed="no">
            <name>java.lang.Object[]</name>
            <inbound type="feature" confirmed="yes">org.mvel.BlankLiteral.equals(java.lang.Object)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.PropertyAccessor.checkMethodCache(java.lang.Class, java.lang.Integer)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.PropertyAccessor.getCollectionProperty(java.lang.Object, java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.TemplateInterpreter.execute(java.lang.Object, java.util.Map, org.mvel.TemplateRegistry)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.asm.ClassReader.accept(org.mvel.asm.ClassVisitor, org.mvel.asm.Attribute[], int)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.ast.ForEachNode.getReducedValue(java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.ast.ForEachNode.getReducedValueAccelerated(java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.conversion.ArrayCH$1.convert(java.lang.Object)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.conversion.ArrayCH$2.convert(java.lang.Object)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.conversion.ArrayCH$3.convert(java.lang.Object)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.conversion.IntArrayCH$2.convert(java.lang.Object)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.conversion.PrimArrayHandler$1.convert(java.lang.Object)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.conversion.PrimIntArrayCH$2.convert(java.lang.Object)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.conversion.StringArrayCH$1.convert(java.lang.Object)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.conversion.StringArrayCH.convertFrom(java.lang.Object)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.asm.ASMAccessorOptimizer._getAccessor(java.lang.Object)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.asm.ASMAccessorOptimizer.getCollectionProperty(java.lang.Object, java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.refl.ArrayAccessor.getValue(java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.refl.ArrayAccessor.setValue(java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory, java.lang.Object)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.refl.ArrayAccessorNest.getValue(java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.refl.ReflectiveAccessorOptimizer._getAccessor(java.lang.Object)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.refl.ReflectiveAccessorOptimizer.getCollectionProperty(java.lang.Object, java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.util.ArrayTools.collectionTranspose(java.util.Collection, java.lang.Class)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.util.ParseTools.containsCheck(java.lang.Object, java.lang.Object)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.util.PropertyTools.contains(java.lang.Object, java.lang.Object)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.util.PropertyTools.isEmpty(java.lang.Object)</inbound>
        </class>
        <class confirmed="no">
            <name>java.lang.Runtime</name>
            <inbound type="feature" confirmed="yes">org.mvel.AbstractParser.contextControl(int, org.mvel.ParserContext, org.mvel.AbstractParser)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.asm.ASMAccessorOptimizer._initJIT()</inbound>
            <feature confirmed="no">
                <name>java.lang.Runtime.getRuntime()</name>
                <inbound type="feature" confirmed="yes">org.mvel.AbstractParser.contextControl(int, org.mvel.ParserContext, org.mvel.AbstractParser)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.asm.ASMAccessorOptimizer._initJIT()</inbound>
            </feature>
        </class>
        <class confirmed="no">
            <name>java.lang.RuntimeException</name>
            <inbound type="feature" confirmed="yes">org.mvel.ASTNode.getReducedValue(java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory)</inbound>
            <inbound type="class" confirmed="yes">org.mvel.CompileException</inbound>
            <inbound type="class" confirmed="yes">org.mvel.EndWithValue</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.ExpressionCompiler._compile()</inbound>
            <inbound type="class" confirmed="yes">org.mvel.ImmutableElementException</inbound>
            <inbound type="class" confirmed="yes">org.mvel.OptimizationFailure</inbound>
            <inbound type="class" confirmed="yes">org.mvel.ParseException</inbound>
            <inbound type="class" confirmed="yes">org.mvel.PropertyAccessException</inbound>
            <inbound type="class" confirmed="yes">org.mvel.UnresolveablePropertyException</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.ast.PropertyASTNode.initializePropertyNode(java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory)</inbound>
            <inbound type="class" confirmed="yes">org.mvel.optimizers.OptimizationNotSupported</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.util.ParseTools.static {}</inbound>
            <feature confirmed="no">
                <name>java.lang.RuntimeException.RuntimeException()</name>
                <inbound type="feature" confirmed="yes">org.mvel.CompileException.CompileException()</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.EndWithValue.EndWithValue(java.lang.Object)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.ImmutableElementException.ImmutableElementException()</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.OptimizationFailure.OptimizationFailure()</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.ParseException.ParseException()</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.ParseException.ParseException(java.lang.String)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.ParseException.ParseException(java.lang.String, char[], int)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.PropertyAccessException.PropertyAccessException()</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.optimizers.OptimizationNotSupported.OptimizationNotSupported()</inbound>
            </feature>
            <feature confirmed="no">
                <name>java.lang.RuntimeException.RuntimeException(java.lang.String)</name>
                <inbound type="feature" confirmed="yes">org.mvel.ASTLinkedList.back()</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.ASTLinkedList.nodesBack(int)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.ASTLinkedList.peekLast()</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.ASTLinkedList.showNodeChain()</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.CompileException.CompileException(java.lang.String)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.CompileException.CompileException(java.lang.String, char[], int)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.CompileException.CompileException(java.lang.String, char[], int, boolean)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.CompileException.CompileException(java.lang.String, java.util.List)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.ImmutableElementException.ImmutableElementException(java.lang.String)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.OptimizationFailure.OptimizationFailure(java.lang.String)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.ParserContext.setImports(java.util.Map)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.PropertyAccessException.PropertyAccessException(java.lang.String)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.UnresolveablePropertyException.UnresolveablePropertyException(org.mvel.ASTNode)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.asm.Frame.execute(int, int, org.mvel.asm.ClassWriter, org.mvel.asm.Item)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.ast.And.getReducedValue(java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.ast.BinaryOperation.getReducedValue(java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.ast.Or.getReducedValue(java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.debug.DebuggerContext.checkBreak(org.mvel.ast.LineLabel, org.mvel.integration.VariableResolverFactory, org.mvel.CompiledExpression)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.integration.impl.ItemResolverFactory.createVariable(java.lang.String, java.lang.Object, java.lang.Class)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.optimizers.OptimizationNotSupported.OptimizationNotSupported(java.lang.String)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.asm.ASMAccessorOptimizer._initializeAccessor()</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.asm.ASMAccessorOptimizer.optimizeSetAccessor(char[], java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory, boolean, java.lang.Object)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.util.CollectionParser.parseCollection()</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.util.FastList.containsAll(java.util.Collection)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.util.FastList.remove(java.lang.Object)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.util.FastList.removeAll(java.util.Collection)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.util.FastList.removeRange(int, int)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.util.FastList.retainAll(java.util.Collection)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.util.FastList.toArray(java.lang.Object[])</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.util.ParseTools.static {}</inbound>
            </feature>
            <feature confirmed="no">
                <name>java.lang.RuntimeException.RuntimeException(java.lang.String, java.lang.Throwable)</name>
                <inbound type="feature" confirmed="yes">org.mvel.AbstractParser.static {}</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.CompileException.CompileException(java.lang.String, char[], int, java.lang.Exception)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.CompileException.CompileException(java.lang.String, java.lang.Throwable)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.ImmutableElementException.ImmutableElementException(java.lang.String, java.lang.Throwable)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.OptimizationFailure.OptimizationFailure(java.lang.String, java.lang.Throwable)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.PropertyAccessException.PropertyAccessException(java.lang.String, java.lang.Throwable)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.UnresolveablePropertyException.UnresolveablePropertyException(org.mvel.ASTNode, java.lang.Throwable)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.optimizers.OptimizationNotSupported.OptimizationNotSupported(java.lang.String, java.lang.Throwable)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.util.ParseTools.static {}</inbound>
            </feature>
            <feature confirmed="no">
                <name>java.lang.RuntimeException.RuntimeException(java.lang.Throwable)</name>
                <inbound type="feature" confirmed="yes">org.mvel.CompileException.CompileException(java.lang.Throwable)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.ImmutableElementException.ImmutableElementException(java.lang.Throwable)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.OptimizationFailure.OptimizationFailure(java.lang.Throwable)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.ParseException.ParseException(java.lang.String, java.lang.Throwable)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.ParseException.ParseException(java.lang.Throwable)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.PropertyAccessException.PropertyAccessException(java.lang.Throwable)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.asm.ClassWriter.getCommonSuperClass(java.lang.String, java.lang.String)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.optimizers.OptimizationNotSupported.OptimizationNotSupported(java.lang.Throwable)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.asm.ASMAccessorOptimizer.static {}</inbound>
            </feature>
            <feature confirmed="no">
                <name>java.lang.RuntimeException.printStackTrace()</name>
                <inbound type="feature" confirmed="yes">org.mvel.ASTNode.getReducedValue(java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.ast.PropertyASTNode.initializePropertyNode(java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory)</inbound>
            </feature>
        </class>
        <class confirmed="no">
            <name>java.lang.Short</name>
            <inbound type="feature" confirmed="yes">org.mvel.asm.AnnotationWriter.visit(java.lang.String, java.lang.Object)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.asm.ClassWriter.newConstItem(java.lang.Object)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.conversion.IntegerCH$5.convert(java.lang.Object)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.conversion.LongCH$5.convert(java.lang.Object)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.conversion.ShortCH$1.convert(java.lang.Object)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.conversion.ShortCH$10.convert(java.lang.Object)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.conversion.ShortCH$3.convert(java.lang.Object)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.conversion.ShortCH$4.convert(java.lang.Object)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.conversion.ShortCH$6.convert(java.lang.Object)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.conversion.ShortCH$7.convert(java.lang.Object)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.conversion.ShortCH$8.convert(java.lang.Object)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.conversion.ShortCH$9.convert(java.lang.Object)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.conversion.ShortCH.FALSE</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.conversion.ShortCH.TRUE</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.conversion.ShortCH.access$1()</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.conversion.ShortCH.access$2()</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.conversion.ShortCH.static {}</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.math.IEEEFloatingPointMath.doOperationsSameType(int, java.lang.Object, int, java.lang.Object)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.math.IEEEFloatingPointMath.getBigDecimalFromType(java.lang.Object, int)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.math.JDK14CompatabilityMath.doOperationsSameType(int, java.lang.Object, int, java.lang.Object)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.math.JDK14CompatabilityMath.getBigDecimalFromType(java.lang.Object, int)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.asm.ASMAccessorOptimizer.writeOutLiteralWrapped(java.lang.Object)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.util.ParseTools.increment(java.lang.Object)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.util.PropertyTools.isNumber(java.lang.Object)</inbound>
            <feature confirmed="no">
                <name>java.lang.Short.Short(short)</name>
                <inbound type="feature" confirmed="yes">org.mvel.asm.ClassReader.readAnnotationValue(int, char[], java.lang.String, org.mvel.asm.AnnotationVisitor)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.conversion.ShortCH.static {}</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.math.IEEEFloatingPointMath.doOperationsSameType(int, java.lang.Object, int, java.lang.Object)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.math.JDK14CompatabilityMath.doOperationsSameType(int, java.lang.Object, int, java.lang.Object)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.util.ArrayTools.listTranspose(short[])</inbound>
            </feature>
            <feature confirmed="no">
                <name>java.lang.Short.TYPE</name>
                <inbound type="feature" confirmed="yes">org.mvel.DataConversion.static {}</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.asm.Type.getDescriptor(java.lang.StringBuffer, java.lang.Class)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.asm.Type.getType(java.lang.Class)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.asm.ASMAccessorOptimizer.getWrapperClass(java.lang.Class)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.asm.ASMAccessorOptimizer.unwrapPrimitive(java.lang.Class)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.asm.ASMAccessorOptimizer.wrapPrimitive(java.lang.Class)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.asm.ASMAccessorOptimizer.writeOutLiteralWrapped(java.lang.Object)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.util.ParseTools.boxPrimitive(java.lang.Class)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.util.ParseTools.resolveType(java.lang.Class)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.util.ParseTools.unboxPrimitive(java.lang.Class)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.util.PropertyTools.isNumeric(java.lang.Object)</inbound>
            </feature>
            <feature confirmed="no">
                <name>java.lang.Short.floatValue()</name>
                <inbound type="feature" confirmed="yes">org.mvel.conversion.IntegerCH$5.convert(java.lang.Object)</inbound>
            </feature>
            <feature confirmed="no">
                <name>java.lang.Short.intValue()</name>
                <inbound type="feature" confirmed="yes">org.mvel.asm.ClassWriter.newConstItem(java.lang.Object)</inbound>
            </feature>
            <feature confirmed="no">
                <name>java.lang.Short.longValue()</name>
                <inbound type="feature" confirmed="yes">org.mvel.conversion.LongCH$5.convert(java.lang.Object)</inbound>
            </feature>
            <feature confirmed="no">
                <name>java.lang.Short.parseShort(java.lang.String)</name>
                <inbound type="feature" confirmed="yes">org.mvel.util.ArrayTools.shortTranspose(java.lang.Object[])</inbound>
            </feature>
            <feature confirmed="no">
                <name>java.lang.Short.shortValue()</name>
                <inbound type="feature" confirmed="yes">org.mvel.asm.AnnotationWriter.visit(java.lang.String, java.lang.Object)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.math.IEEEFloatingPointMath.doOperationsSameType(int, java.lang.Object, int, java.lang.Object)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.math.IEEEFloatingPointMath.getBigDecimalFromType(java.lang.Object, int)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.math.JDK14CompatabilityMath.doOperationsSameType(int, java.lang.Object, int, java.lang.Object)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.math.JDK14CompatabilityMath.getBigDecimalFromType(java.lang.Object, int)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.util.ParseTools.increment(java.lang.Object)</inbound>
            </feature>
        </class>
        <class confirmed="no">
            <name>java.lang.String</name>
            <inbound type="feature" confirmed="yes">org.mvel.ASTArrayList.showNodeChain()</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.ASTIterator.showNodeChain()</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.ASTLinkedList.back()</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.ASTLinkedList.nodesBack(int)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.ASTLinkedList.peekLast()</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.ASTLinkedList.showNodeChain()</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.ASTNode.getAbsoluteName()</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.ASTNode.getAbsoluteRemainder()</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.ASTNode.getAbsoluteRootElement()</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.ASTNode.getName()</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.ASTNode.getReducedValue(java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.ASTNode.getReducedValueAccelerated(java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.ASTNode.nameCache</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.ASTNode.setName(char[])</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.ASTNode.toString()</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.ASTNode.tryStaticAccess(java.lang.Object, org.mvel.integration.VariableResolverFactory)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.ASTNode.valRet(java.lang.Object)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.AbstractParser._captureBlock(org.mvel.ASTNode, char[], boolean, int)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.AbstractParser.addFatalError(java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.AbstractParser.addFatalError(java.lang.String, int, int)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.AbstractParser.addWarning(java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.AbstractParser.captureToEOT()</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.AbstractParser.createPropertyToken(int, int)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.AbstractParser.getCurrentSourceFileName()</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.AbstractParser.isReservedWord(java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.AbstractParser.nextToken()</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.AbstractParser.reduce()</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.AbstractParser.setExpression(java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.AbstractParser.static {}</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.BlankLiteral.equals(java.lang.Object)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.BlankLiteral.toString()</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.CompileException.CompileException(java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.CompileException.CompileException(java.lang.String, char[], int)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.CompileException.CompileException(java.lang.String, char[], int, boolean)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.CompileException.CompileException(java.lang.String, char[], int, java.lang.Exception)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.CompileException.CompileException(java.lang.String, java.lang.Throwable)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.CompileException.CompileException(java.lang.String, java.util.List)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.CompileException.showCodeNearError(char[], int)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.CompiledExpression.CompiledExpression(org.mvel.ASTIterator, java.lang.String, boolean)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.CompiledExpression.CompiledExpression(org.mvel.ASTIterator, java.lang.String, java.lang.Class, org.mvel.ParserContext, boolean)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.CompiledExpression.getSourceName()</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.CompiledExpression.setSourceName(java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.CompiledExpression.sourceName</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.CompiledSetExpression.setValue(java.lang.Object, org.mvel.integration.VariableResolverFactory, java.lang.Object)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.ConversionException.ConversionException(java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.ConversionException.ConversionException(java.lang.String, java.lang.Throwable)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.DataConversion.static {}</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.ErrorDetail.ErrorDetail(int, int, boolean, java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.ErrorDetail.ErrorDetail(java.lang.String, boolean)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.ErrorDetail.getMessage()</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.ErrorDetail.message</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.ErrorDetail.setMessage(java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.ErrorDetail.toString()</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.ExpressionCompiler.ExpressionCompiler(java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.ExpressionCompiler.ExpressionCompiler(java.lang.String, boolean)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.ExpressionCompiler._compile()</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.ExpressionCompiler.compile(org.mvel.ParserContext)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.ExpressionCompiler.getExpression()</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.ExpressionCompiler.verify(org.mvel.ParserContext, org.mvel.ASTNode)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.ForeachContext.ForeachContext(java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.ForeachContext.ForeachContext(java.lang.String, int)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.ForeachContext.ForeachContext(java.lang.String, int, java.lang.String[], java.lang.String[])</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.ForeachContext.aliases</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.ForeachContext.getAliases()</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.ForeachContext.getNames()</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.ForeachContext.getSeperator()</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.ForeachContext.names</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.ForeachContext.seperator</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.ForeachContext.setAliases(java.lang.String[])</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.ForeachContext.setNames(java.lang.String[])</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.ForeachContext.setSeperator(java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.ImmutableElementException.ImmutableElementException(java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.ImmutableElementException.ImmutableElementException(java.lang.String, java.lang.Throwable)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.MVEL.ADVANCED_DEBUGGING_FILE</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.MVEL.CODENAME</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.MVEL.NAME</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.MVEL.VERSION</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.MVEL.VERSION_SUB</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.MVEL.compileExpression(char[])</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.MVEL.compileExpression(char[], java.util.Map)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.MVEL.compileExpression(char[], java.util.Map, java.util.Map)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.MVEL.compileExpression(char[], java.util.Map, java.util.Map, java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.MVEL.compileExpression(java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.MVEL.compileExpression(java.lang.String, java.util.Map)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.MVEL.compileExpression(java.lang.String, java.util.Map, java.util.Map)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.MVEL.compileExpression(java.lang.String, java.util.Map, java.util.Map, java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.MVEL.compileSetExpression(java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.MVEL.eval(java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.MVEL.eval(java.lang.String, java.lang.Object)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.MVEL.eval(java.lang.String, java.lang.Object, java.lang.Class)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.MVEL.eval(java.lang.String, java.lang.Object, java.util.Map)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.MVEL.eval(java.lang.String, java.lang.Object, java.util.Map, java.lang.Class)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.MVEL.eval(java.lang.String, java.lang.Object, org.mvel.integration.VariableResolverFactory)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.MVEL.eval(java.lang.String, java.lang.Object, org.mvel.integration.VariableResolverFactory, boolean)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.MVEL.eval(java.lang.String, java.lang.Object, org.mvel.integration.VariableResolverFactory, java.lang.Class)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.MVEL.eval(java.lang.String, java.util.Map)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.MVEL.eval(java.lang.String, java.util.Map, java.lang.Class)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.MVEL.eval(java.lang.String, org.mvel.integration.VariableResolverFactory)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.MVEL.eval(java.lang.String, org.mvel.integration.VariableResolverFactory, java.lang.Class)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.MVEL.evalToBoolean(java.lang.String, java.lang.Object)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.MVEL.evalToBoolean(java.lang.String, java.lang.Object, java.util.Map)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.MVEL.evalToBoolean(java.lang.String, java.lang.Object, org.mvel.integration.VariableResolverFactory)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.MVEL.evalToBoolean(java.lang.String, java.util.Map)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.MVEL.evalToBoolean(java.lang.String, org.mvel.integration.VariableResolverFactory)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.MVEL.evalToString(java.lang.String, java.lang.Object)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.MVEL.evalToString(java.lang.String, java.lang.Object, java.util.Map)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.MVEL.evalToString(java.lang.String, java.util.Map)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.MVEL.getDebuggingOutputFileName()</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.MVEL.getProperty(java.lang.String, java.lang.Object)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.MVEL.parseMacros(java.lang.String, java.util.Map)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.MVEL.preprocess(char[], org.mvel.PreProcessor[])</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.MVEL.preprocess(java.lang.String, org.mvel.PreProcessor[])</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.MVEL.setProperty(java.lang.Object, java.lang.String, java.lang.Object)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.MVEL.static {}</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.MVELInterpretedRuntime.MVELInterpretedRuntime(java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.MVELInterpretedRuntime.MVELInterpretedRuntime(java.lang.String, java.lang.Object)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.MVELInterpretedRuntime.MVELInterpretedRuntime(java.lang.String, java.lang.Object, java.util.Map)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.MVELInterpretedRuntime.MVELInterpretedRuntime(java.lang.String, java.lang.Object, org.mvel.integration.VariableResolverFactory)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.MVELInterpretedRuntime.MVELInterpretedRuntime(java.lang.String, java.lang.Object, org.mvel.integration.VariableResolverFactory, boolean)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.MVELInterpretedRuntime.MVELInterpretedRuntime(java.lang.String, org.mvel.integration.VariableResolverFactory)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.MVELInterpretedRuntime.getImport(java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.MVELInterpretedRuntime.hasImport(java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.MVELInterpretedRuntime.parse()</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.MVELInterpretedRuntime.parseAndExecuteInterpreted()</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.MVELRuntime.execute(boolean, org.mvel.CompiledExpression, java.lang.Object, org.mvel.integration.VariableResolverFactory)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.MVELRuntime.registerBreakpoint(java.lang.String, int)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.MVELRuntime.removeBreakpoint(java.lang.String, int)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.MVELSH.main(java.lang.String[])</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.MVELSH.showHelp()</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.MVELTemplateRegistry.getTemplate(java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.MVELTemplateRegistry.registerTemplate(java.io.Reader)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.MVELTemplateRegistry.registerTemplate(java.lang.String, java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.Macro.doMacro()</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.MacroProcessor.parse(char[])</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.MacroProcessor.parse(java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.Node.alias</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.Node.getAlias()</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.Node.getName()</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.Node.name</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.Node.setAlias(java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.Node.setName(java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.OptimizationFailure.OptimizationFailure(java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.OptimizationFailure.OptimizationFailure(java.lang.String, java.lang.Throwable)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.ParseException.ParseException(java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.ParseException.ParseException(java.lang.String, char[], int)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.ParseException.ParseException(java.lang.String, java.lang.Throwable)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.ParseException.getMessage()</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.ParseException.message</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.ParserContext.ParserContext(java.util.Map, java.util.Map, java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.ParserContext.addImport(java.lang.Class)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.ParserContext.addImport(java.lang.String, java.lang.Class)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.ParserContext.addImport(java.lang.String, java.lang.reflect.Method)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.ParserContext.addImport(java.lang.String, org.mvel.util.MethodStub)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.ParserContext.addInput(java.lang.String, java.lang.Class)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.ParserContext.addKnownLine(int)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.ParserContext.addKnownLine(java.lang.String, int)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.ParserContext.addPackageImport(java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.ParserContext.addVariable(java.lang.String, java.lang.Class)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.ParserContext.checkForDynamicImport(java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.ParserContext.getImport(java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.ParserContext.getSourceFile()</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.ParserContext.getStaticImport(java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.ParserContext.getVarOrInputType(java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.ParserContext.hasImport(java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.ParserContext.hasVarOrInput(java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.ParserContext.hasVariable(java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.ParserContext.isKnownLine(java.lang.String, int)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.ParserContext.processTables()</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.ParserContext.setImports(java.util.Map)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.ParserContext.setSourceFile(java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.ParserContext.sourceFile</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.PreProcessor.parse(java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.PropertyAccessException.PropertyAccessException(java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.PropertyAccessException.PropertyAccessException(java.lang.String, java.lang.Throwable)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.PropertyAccessor.PropertyAccessor(java.lang.String, java.lang.Object)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.PropertyAccessor.capture()</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.PropertyAccessor.createSignature(java.lang.String, java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.PropertyAccessor.get()</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.PropertyAccessor.get(java.lang.String, java.lang.Object)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.PropertyAccessor.get(java.lang.String, java.lang.Object, org.mvel.integration.VariableResolverFactory, java.lang.Object)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.PropertyAccessor.getBeanProperty(java.lang.Object, java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.PropertyAccessor.getCollectionProperty(java.lang.Object, java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.PropertyAccessor.getMethod(java.lang.Object, java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.PropertyAccessor.reportCacheSizes()</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.PropertyAccessor.set(java.lang.Object)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.PropertyAccessor.set(java.lang.Object, java.lang.String, java.lang.Object)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.PropertyAccessor.set(java.lang.Object, org.mvel.integration.VariableResolverFactory, java.lang.String, java.lang.Object)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.PropertyVerifier.PropertyVerifier(java.lang.String, org.mvel.ParserContext)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.PropertyVerifier.analyze()</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.PropertyVerifier.getBeanProperty(java.lang.Class, java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.PropertyVerifier.getCollectionProperty(java.lang.Class, java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.PropertyVerifier.getMethod(java.lang.Class, java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.Soundex.soundex(java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.TemplateCompiler$IncludeRef.TemplateCompiler$IncludeRef(java.lang.String, org.mvel.TemplateCompiler$IncludeRefParam[])</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.TemplateCompiler$IncludeRef.getName()</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.TemplateCompiler$IncludeRef.name</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.TemplateCompiler$IncludeRefParam.TemplateCompiler$IncludeRefParam(java.lang.String, java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.TemplateCompiler$IncludeRefParam.getIdentifier()</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.TemplateCompiler$IncludeRefParam.getValue()</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.TemplateCompiler$IncludeRefParam.identifier</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.TemplateCompiler$IncludeRefParam.value</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.TemplateCompiler.buildIncludeRef(char[])</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.TemplateCompiler.captureTo(char)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.TemplateCompiler.compileExpression()</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.TemplateCompiler.getNodeTypeName(int)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.TemplateCompiler.indent(int)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.TemplateCompiler.parseAlias(char[], int, int, int)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.TemplateCompiler.showCodeNearError()</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.TemplateCompiler.static {}</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.TemplateCompiler.structuredCaptureArray(int)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.TemplateInterpreter.TemplateInterpreter(java.lang.CharSequence)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.TemplateInterpreter.TemplateInterpreter(java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.TemplateInterpreter.eval(java.lang.String, java.lang.Object)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.TemplateInterpreter.eval(java.lang.String, java.lang.Object, java.util.Map)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.TemplateInterpreter.eval(java.lang.String, java.util.Map)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.TemplateInterpreter.evalToString(java.lang.String, java.lang.Object)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.TemplateInterpreter.evalToString(java.lang.String, java.lang.Object, java.util.Map)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.TemplateInterpreter.evalToString(java.lang.String, java.util.Map)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.TemplateInterpreter.execute(java.lang.Object, java.util.Map, org.mvel.TemplateRegistry)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.TemplateInterpreter.getForEachSegment(org.mvel.Node)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.TemplateInterpreter.getValuePE(java.lang.String, java.lang.Object, java.util.Map)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.TemplateInterpreter.parse(java.io.File, java.lang.Object, java.util.Map, org.mvel.TemplateRegistry)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.TemplateInterpreter.parse(java.lang.String, java.lang.Object, java.util.Map)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.TemplateInterpreter.parse(java.lang.String, java.lang.Object, java.util.Map, org.mvel.TemplateRegistry)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.TemplateInterpreter.parseToStream(java.io.File, java.lang.Object, java.util.Map, java.io.OutputStream)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.TemplateInterpreter.setValuePE(java.lang.String, java.lang.Object, java.lang.Object, java.lang.Object)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.TemplateRegistry.getTemplate(java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.TemplateRegistry.registerTemplate(java.lang.String, java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.UnresolveablePropertyException.UnresolveablePropertyException(org.mvel.ASTNode)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.UnresolveablePropertyException.UnresolveablePropertyException(org.mvel.ASTNode, java.lang.Throwable)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.asm.AnnotationVisitor.visit(java.lang.String, java.lang.Object)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.asm.AnnotationVisitor.visitAnnotation(java.lang.String, java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.asm.AnnotationVisitor.visitArray(java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.asm.AnnotationVisitor.visitEnum(java.lang.String, java.lang.String, java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.asm.AnnotationWriter.visit(java.lang.String, java.lang.Object)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.asm.AnnotationWriter.visitAnnotation(java.lang.String, java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.asm.AnnotationWriter.visitArray(java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.asm.AnnotationWriter.visitEnum(java.lang.String, java.lang.String, java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.asm.Attribute.Attribute(java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.asm.Attribute.getSize(org.mvel.asm.ClassWriter, byte[], int, int, int)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.asm.Attribute.put(org.mvel.asm.ClassWriter, byte[], int, int, int, org.mvel.asm.ByteVector)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.asm.Attribute.read(org.mvel.asm.ClassReader, int, int, char[], int, org.mvel.asm.Label[])</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.asm.Attribute.type</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.asm.ByteVector.putUTF8(java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.asm.ClassAdapter.visit(int, int, java.lang.String, java.lang.String, java.lang.String, java.lang.String[])</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.asm.ClassAdapter.visitAnnotation(java.lang.String, boolean)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.asm.ClassAdapter.visitField(int, java.lang.String, java.lang.String, java.lang.String, java.lang.Object)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.asm.ClassAdapter.visitInnerClass(java.lang.String, java.lang.String, java.lang.String, int)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.asm.ClassAdapter.visitMethod(int, java.lang.String, java.lang.String, java.lang.String, java.lang.String[])</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.asm.ClassAdapter.visitOuterClass(java.lang.String, java.lang.String, java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.asm.ClassAdapter.visitSource(java.lang.String, java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.asm.ClassReader.ClassReader(byte[], int, int)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.asm.ClassReader.ClassReader(java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.asm.ClassReader.accept(org.mvel.asm.ClassVisitor, org.mvel.asm.Attribute[], int)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.asm.ClassReader.copyPool(org.mvel.asm.ClassWriter)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.asm.ClassReader.getClassName()</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.asm.ClassReader.getInterfaces()</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.asm.ClassReader.getSuperName()</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.asm.ClassReader.readAnnotationValue(int, char[], java.lang.String, org.mvel.asm.AnnotationVisitor)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.asm.ClassReader.readAnnotationValues(int, char[], boolean, org.mvel.asm.AnnotationVisitor)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.asm.ClassReader.readAttribute(org.mvel.asm.Attribute[], java.lang.String, int, int, char[], int, org.mvel.asm.Label[])</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.asm.ClassReader.readClass(int, char[])</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.asm.ClassReader.readClass(java.io.InputStream)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.asm.ClassReader.readConst(int, char[])</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.asm.ClassReader.readFrameType(java.lang.Object[], int, int, char[], org.mvel.asm.Label[])</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.asm.ClassReader.readParameterAnnotations(int, char[], boolean, org.mvel.asm.MethodVisitor)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.asm.ClassReader.readUTF(int, int, char[])</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.asm.ClassReader.readUTF8(int, char[])</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.asm.ClassReader.strings</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.asm.ClassVisitor.visit(int, int, java.lang.String, java.lang.String, java.lang.String, java.lang.String[])</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.asm.ClassVisitor.visitAnnotation(java.lang.String, boolean)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.asm.ClassVisitor.visitField(int, java.lang.String, java.lang.String, java.lang.String, java.lang.Object)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.asm.ClassVisitor.visitInnerClass(java.lang.String, java.lang.String, java.lang.String, int)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.asm.ClassVisitor.visitMethod(int, java.lang.String, java.lang.String, java.lang.String, java.lang.String[])</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.asm.ClassVisitor.visitOuterClass(java.lang.String, java.lang.String, java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.asm.ClassVisitor.visitSource(java.lang.String, java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.asm.ClassWriter.addType(java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.asm.ClassWriter.addUninitializedType(java.lang.String, int)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.asm.ClassWriter.getCommonSuperClass(java.lang.String, java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.asm.ClassWriter.getMergedType(int, int)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.asm.ClassWriter.newClass(java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.asm.ClassWriter.newClassItem(java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.asm.ClassWriter.newConstItem(java.lang.Object)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.asm.ClassWriter.newField(java.lang.String, java.lang.String, java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.asm.ClassWriter.newFieldItem(java.lang.String, java.lang.String, java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.asm.ClassWriter.newMethod(java.lang.String, java.lang.String, java.lang.String, boolean)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.asm.ClassWriter.newMethodItem(java.lang.String, java.lang.String, java.lang.String, boolean)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.asm.ClassWriter.newNameType(java.lang.String, java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.asm.ClassWriter.newString(java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.asm.ClassWriter.newUTF8(java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.asm.ClassWriter.thisName</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.asm.ClassWriter.toByteArray()</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.asm.ClassWriter.visit(int, int, java.lang.String, java.lang.String, java.lang.String, java.lang.String[])</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.asm.ClassWriter.visitAnnotation(java.lang.String, boolean)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.asm.ClassWriter.visitField(int, java.lang.String, java.lang.String, java.lang.String, java.lang.Object)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.asm.ClassWriter.visitInnerClass(java.lang.String, java.lang.String, java.lang.String, int)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.asm.ClassWriter.visitMethod(int, java.lang.String, java.lang.String, java.lang.String, java.lang.String[])</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.asm.ClassWriter.visitOuterClass(java.lang.String, java.lang.String, java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.asm.ClassWriter.visitSource(java.lang.String, java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.asm.FieldVisitor.visitAnnotation(java.lang.String, boolean)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.asm.FieldWriter.FieldWriter(org.mvel.asm.ClassWriter, int, java.lang.String, java.lang.String, java.lang.String, java.lang.Object)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.asm.FieldWriter.getSize()</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.asm.FieldWriter.put(org.mvel.asm.ByteVector)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.asm.FieldWriter.visitAnnotation(java.lang.String, boolean)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.asm.Frame.execute(int, int, org.mvel.asm.ClassWriter, org.mvel.asm.Item)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.asm.Frame.init(org.mvel.asm.ClassWriter, int)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.asm.Frame.initInputFrame(org.mvel.asm.ClassWriter, int, org.mvel.asm.Type[], int)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.asm.Frame.merge(org.mvel.asm.ClassWriter, int, int[], int)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.asm.Frame.pop(java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.asm.Frame.push(org.mvel.asm.ClassWriter, java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.asm.Frame.type(org.mvel.asm.ClassWriter, java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.asm.Handler.desc</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.asm.Item.Item(int, org.mvel.asm.Item)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.asm.Item.isEqualTo(org.mvel.asm.Item)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.asm.Item.set(int, java.lang.String, java.lang.String, java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.asm.Item.strVal1</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.asm.Item.strVal2</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.asm.Item.strVal3</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.asm.Label.getOffset()</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.asm.Label.toString()</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.asm.MethodAdapter.visitAnnotation(java.lang.String, boolean)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.asm.MethodAdapter.visitFieldInsn(int, java.lang.String, java.lang.String, java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.asm.MethodAdapter.visitLocalVariable(java.lang.String, java.lang.String, java.lang.String, org.mvel.asm.Label, org.mvel.asm.Label, int)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.asm.MethodAdapter.visitMethodInsn(int, java.lang.String, java.lang.String, java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.asm.MethodAdapter.visitMultiANewArrayInsn(java.lang.String, int)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.asm.MethodAdapter.visitParameterAnnotation(int, java.lang.String, boolean)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.asm.MethodAdapter.visitTryCatchBlock(org.mvel.asm.Label, org.mvel.asm.Label, org.mvel.asm.Label, java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.asm.MethodAdapter.visitTypeInsn(int, java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.asm.MethodVisitor.visitAnnotation(java.lang.String, boolean)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.asm.MethodVisitor.visitFieldInsn(int, java.lang.String, java.lang.String, java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.asm.MethodVisitor.visitLocalVariable(java.lang.String, java.lang.String, java.lang.String, org.mvel.asm.Label, org.mvel.asm.Label, int)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.asm.MethodVisitor.visitMethodInsn(int, java.lang.String, java.lang.String, java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.asm.MethodVisitor.visitMultiANewArrayInsn(java.lang.String, int)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.asm.MethodVisitor.visitParameterAnnotation(int, java.lang.String, boolean)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.asm.MethodVisitor.visitTryCatchBlock(org.mvel.asm.Label, org.mvel.asm.Label, org.mvel.asm.Label, java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.asm.MethodVisitor.visitTypeInsn(int, java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.asm.MethodWriter.MethodWriter(org.mvel.asm.ClassWriter, int, java.lang.String, java.lang.String, java.lang.String, java.lang.String[], boolean, boolean)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.asm.MethodWriter.descriptor</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.asm.MethodWriter.getArgumentsAndReturnSizes(java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.asm.MethodWriter.getSize()</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.asm.MethodWriter.put(org.mvel.asm.ByteVector)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.asm.MethodWriter.resizeInstructions()</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.asm.MethodWriter.signature</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.asm.MethodWriter.visitAnnotation(java.lang.String, boolean)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.asm.MethodWriter.visitFieldInsn(int, java.lang.String, java.lang.String, java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.asm.MethodWriter.visitFrame(int, int, java.lang.Object[], int, java.lang.Object[])</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.asm.MethodWriter.visitLocalVariable(java.lang.String, java.lang.String, java.lang.String, org.mvel.asm.Label, org.mvel.asm.Label, int)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.asm.MethodWriter.visitMaxs(int, int)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.asm.MethodWriter.visitMethodInsn(int, java.lang.String, java.lang.String, java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.asm.MethodWriter.visitMultiANewArrayInsn(java.lang.String, int)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.asm.MethodWriter.visitParameterAnnotation(int, java.lang.String, boolean)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.asm.MethodWriter.visitTryCatchBlock(org.mvel.asm.Label, org.mvel.asm.Label, org.mvel.asm.Label, java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.asm.MethodWriter.visitTypeInsn(int, java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.asm.MethodWriter.writeFrameType(java.lang.Object)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.asm.MethodWriter.writeFrameTypes(int, int)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.asm.Type.getArgumentTypes(java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.asm.Type.getClassName()</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.asm.Type.getConstructorDescriptor(java.lang.reflect.Constructor)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.asm.Type.getDescriptor()</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.asm.Type.getDescriptor(java.lang.Class)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.asm.Type.getDescriptor(java.lang.StringBuffer, java.lang.Class)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.asm.Type.getInternalName()</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.asm.Type.getInternalName(java.lang.Class)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.asm.Type.getMethodDescriptor(java.lang.reflect.Method)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.asm.Type.getMethodDescriptor(org.mvel.asm.Type, org.mvel.asm.Type[])</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.asm.Type.getObjectType(java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.asm.Type.getReturnType(java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.asm.Type.getType(java.lang.Class)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.asm.Type.getType(java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.asm.Type.toString()</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.ast.And.getReducedValue(java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.ast.AssertNode.getReducedValue(java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.ast.AssertNode.getReducedValueAccelerated(java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.ast.AssignAdd.AssignAdd(char[], int, java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.ast.AssignAdd.getReducedValue(java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.ast.AssignAdd.getReducedValueAccelerated(java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.ast.AssignAdd.varName</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.ast.AssignDiv.AssignDiv(char[], int, java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.ast.AssignDiv.getReducedValue(java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.ast.AssignDiv.getReducedValueAccelerated(java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.ast.AssignDiv.varName</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.ast.AssignMult.AssignMult(char[], int, java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.ast.AssignMult.getReducedValue(java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.ast.AssignMult.getReducedValueAccelerated(java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.ast.AssignMult.varName</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.ast.AssignSub.AssignSub(char[], int, java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.ast.AssignSub.getReducedValue(java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.ast.AssignSub.getReducedValueAccelerated(java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.ast.AssignSub.varName</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.ast.Assignment.getAssignmentVar()</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.ast.AssignmentNode.AssignmentNode(char[], int)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.ast.AssignmentNode.AssignmentNode(char[], int, int, java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.ast.AssignmentNode.getAssignmentVar()</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.ast.AssignmentNode.getReducedValue(java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.ast.AssignmentNode.getReducedValueAccelerated(java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.ast.AssignmentNode.name</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.ast.BinaryOperation.getReducedValue(java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.ast.BinaryOperation.toString()</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.ast.DeepAssignmentNode.DeepAssignmentNode(char[], int)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.ast.DeepAssignmentNode.DeepAssignmentNode(char[], int, int, java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.ast.DeepAssignmentNode.getAssignmentVar()</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.ast.DeepAssignmentNode.getReducedValue(java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.ast.DeepAssignmentNode.getReducedValueAccelerated(java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.ast.DeepAssignmentNode.property</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.ast.ForEachNode.getReducedValue(java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.ast.ForEachNode.getReducedValueAccelerated(java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.ast.ForEachNode.handleCond(char[])</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.ast.ForEachNode.item</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.ast.IfNode.getReducedValue(java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.ast.IfNode.getReducedValueAccelerated(java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.ast.ImportNode.ImportNode(char[])</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.ast.ImportNode.getPackageImport()</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.ast.ImportNode.getReducedValueAccelerated(java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.ast.InlineCollectionNode.getReducedValue(java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.ast.InlineCollectionNode.getReducedValueAccelerated(java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.ast.LineLabel.LineLabel(java.lang.String, int)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.ast.LineLabel.getSourceFile()</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.ast.LineLabel.setSourceFile(java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.ast.LineLabel.sourceFile</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.ast.LineLabel.toString()</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.ast.LiteralNode.LiteralNode(java.lang.Object)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.ast.LiteralNode.LiteralNode(java.lang.Object, int)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.ast.NewObjectNode$NewObjectArray.getValue(java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.ast.NewObjectNode.NewObjectNode(char[], int)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.ast.NewObjectNode.className</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.ast.NewObjectNode.getReducedValue(java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.ast.NewObjectNode.getReducedValueAccelerated(java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.ast.NewObjectNode.rewriteClassReferenceToFQCN(int)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.ast.NewObjectNode.updateClassName(int)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.ast.OperatorNode.static {}</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.ast.Or.getReducedValue(java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.ast.PostFixDecNode.PostFixDecNode(char[], int)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.ast.PostFixDecNode.getReducedValueAccelerated(java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.ast.PostFixDecNode.name</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.ast.PostFixIncNode.PostFixIncNode(char[], int)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.ast.PostFixIncNode.getReducedValueAccelerated(java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.ast.PostFixIncNode.name</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.ast.PreFixDecNode.PreFixDecNode(char[], int)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.ast.PreFixDecNode.getReducedValueAccelerated(java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.ast.PreFixDecNode.name</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.ast.PreFixIncNode.PreFixIncNode(char[], int)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.ast.PreFixIncNode.getReducedValueAccelerated(java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.ast.PreFixIncNode.name</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.ast.PropertyASTNode.initializePropertyNode(java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.ast.RegExMatch.getReducedValue(java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.ast.RegExMatch.getReducedValueAccelerated(java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.ast.StaticImportNode.StaticImportNode(char[], int)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.ast.StaticImportNode.getReducedValueAccelerated(java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.ast.StaticImportNode.methodName</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.ast.StaticImportNode.resolveMethod()</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.ast.TypedVarNode.TypedVarNode(char[], int, java.lang.Class)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.ast.TypedVarNode.getAssignmentVar()</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.ast.TypedVarNode.getName()</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.ast.TypedVarNode.getReducedValue(java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.ast.TypedVarNode.getReducedValueAccelerated(java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.ast.TypedVarNode.name</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.ast.VarPropertyNode.VarPropertyNode(char[], int, java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.ast.VarPropertyNode.getReducedValue(java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.ast.VarPropertyNode.getReducedValueAccelerated(java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.ast.VarPropertyNode.name</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.ast.WhileNode.item</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.ast.WithNode$ParmValuePair.WithNode$ParmValuePair(java.lang.String, org.mvel.ExecutableStatement)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.ast.WithNode.WithNode(char[], char[], int)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.ast.WithNode.compileWithExpressions()</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.ast.WithNode.nestParm</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.conversion.ArrayCH$1.convert(java.lang.Object)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.conversion.ArrayCH$2.convert(java.lang.Object)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.conversion.ArrayCH$3.convert(java.lang.Object)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.conversion.ArrayCH.convertFrom(java.lang.Object)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.conversion.ArrayCH.static {}</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.conversion.BigDecimalCH.convertFrom(java.lang.Object)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.conversion.BigDecimalCH.static {}</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.conversion.BigIntegerCH.convertFrom(java.lang.Object)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.conversion.BigIntegerCH.static {}</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.conversion.BooleanCH$1.convert(java.lang.Object)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.conversion.BooleanCH$2.convert(java.lang.Object)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.conversion.BooleanCH.convertFrom(java.lang.Object)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.conversion.BooleanCH.static {}</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.conversion.ByteCH$1.convert(java.lang.Object)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.conversion.ByteCH$2.convert(java.lang.Object)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.conversion.ByteCH.convertFrom(java.lang.Object)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.conversion.ByteCH.static {}</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.conversion.CharArrayCH$1.convert(java.lang.Object)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.conversion.CharArrayCH.convertFrom(java.lang.Object)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.conversion.CharArrayCH.static {}</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.conversion.CharCH$1.convert(java.lang.Object)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.conversion.CharCH$2.convert(java.lang.Object)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.conversion.CharCH.convertFrom(java.lang.Object)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.conversion.CharCH.static {}</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.conversion.DoubleCH$1.convert(java.lang.Object)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.conversion.DoubleCH$2.convert(java.lang.Object)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.conversion.DoubleCH.convertFrom(java.lang.Object)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.conversion.DoubleCH.static {}</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.conversion.FloatCH$1.convert(java.lang.Object)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.conversion.FloatCH$2.convert(java.lang.Object)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.conversion.FloatCH.convertFrom(java.lang.Object)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.conversion.FloatCH.static {}</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.conversion.IntArrayCH$1.convert(java.lang.Object)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.conversion.IntArrayCH$2.convert(java.lang.Object)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.conversion.IntArrayCH.convertFrom(java.lang.Object)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.conversion.IntArrayCH.static {}</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.conversion.IntegerCH$1.convert(java.lang.Object)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.conversion.IntegerCH$4.convert(java.lang.Object)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.conversion.IntegerCH$6.convert(java.lang.Object)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.conversion.IntegerCH$7.convert(java.lang.Object)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.conversion.IntegerCH$8.convert(java.lang.Object)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.conversion.IntegerCH.convertFrom(java.lang.Object)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.conversion.IntegerCH.static {}</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.conversion.LongCH$1.convert(java.lang.Object)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.conversion.LongCH$2.convert(java.lang.Object)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.conversion.LongCH.convertFrom(java.lang.Object)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.conversion.LongCH.static {}</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.conversion.PrimArrayHandler.PrimArrayHandler(java.lang.Class)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.conversion.PrimArrayHandler.convertFrom(java.lang.Object)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.conversion.PrimArrayHandler.handleLooseTypeConversion(java.lang.Class, java.lang.Object[], java.lang.Class)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.conversion.PrimIntArrayCH$1.convert(java.lang.Object)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.conversion.PrimIntArrayCH$2.convert(java.lang.Object)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.conversion.PrimIntArrayCH.convertFrom(java.lang.Object)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.conversion.PrimIntArrayCH.static {}</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.conversion.ShortCH$2.convert(java.lang.Object)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.conversion.ShortCH.convertFrom(java.lang.Object)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.conversion.ShortCH.static {}</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.conversion.StringArrayCH$1.convert(java.lang.Object)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.conversion.StringArrayCH.convertFrom(java.lang.Object)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.conversion.StringArrayCH.static {}</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.conversion.StringCH.canConvertFrom(java.lang.Class)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.conversion.StringCH.convertFrom(java.lang.Object)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.conversion.UnitConversion.canConvertFrom(java.lang.Class)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.conversion.UnitConversion.convertFrom(java.lang.Object)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.debug.DebugTools.decompile(java.io.Serializable)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.debug.DebugTools.decompile(org.mvel.CompiledExpression)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.debug.DebugTools.decompile(org.mvel.CompiledExpression, boolean, org.mvel.debug.DebugTools$DecompileContext)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.debug.DebugTools.determineType(java.lang.String, org.mvel.CompiledExpression)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.debug.DebugTools.getAllVariableResolvers(org.mvel.integration.VariableResolverFactory)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.debug.DebugTools.getOperatorName(int)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.debug.DebuggerContext.checkBreak(org.mvel.ast.LineLabel, org.mvel.integration.VariableResolverFactory, org.mvel.CompiledExpression)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.debug.DebuggerContext.hasBreakpoint(java.lang.String, int)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.debug.DebuggerContext.hasBreakpoint(org.mvel.ast.LineLabel)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.debug.DebuggerContext.registerBreakpoint(java.lang.String, int)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.debug.DebuggerContext.removeBreakpoint(java.lang.String, int)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.debug.Frame.Frame(java.lang.String, int, org.mvel.integration.VariableResolverFactory, org.mvel.ParserContext)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.debug.Frame.Frame(org.mvel.ast.LineLabel, org.mvel.integration.VariableResolverFactory, org.mvel.ParserContext)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.debug.Frame.getSourceName()</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.debug.Frame.setSourceName(java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.debug.Frame.sourceName</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.integration.VariableResolver.getName()</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.integration.VariableResolverFactory.createVariable(java.lang.String, java.lang.Object)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.integration.VariableResolverFactory.createVariable(java.lang.String, java.lang.Object, java.lang.Class)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.integration.VariableResolverFactory.getVariableResolver(java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.integration.VariableResolverFactory.isResolveable(java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.integration.VariableResolverFactory.isTarget(java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.integration.impl.BaseVariableResolverFactory.getVariableResolver(java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.integration.impl.BaseVariableResolverFactory.isNextResolveable(java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.integration.impl.ClassImportResolver.ClassImportResolver(java.lang.String, java.lang.Class)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.integration.impl.ClassImportResolver.getName()</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.integration.impl.ClassImportResolver.getType()</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.integration.impl.ClassImportResolver.name</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.integration.impl.ClassImportResolver.setName(java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.integration.impl.ClassImportResolverFactory.ClassImportResolverFactory(org.mvel.ParserContext, org.mvel.integration.VariableResolverFactory)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.integration.impl.ClassImportResolverFactory.addClass(java.lang.Class)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.integration.impl.ClassImportResolverFactory.addPackageImport(java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.integration.impl.ClassImportResolverFactory.createVariable(java.lang.String, java.lang.Object)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.integration.impl.ClassImportResolverFactory.createVariable(java.lang.String, java.lang.Object, java.lang.Class)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.integration.impl.ClassImportResolverFactory.getImportedClasses()</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.integration.impl.ClassImportResolverFactory.isResolveable(java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.integration.impl.ClassImportResolverFactory.isTarget(java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.integration.impl.ClassImportResolverFactory.setImportedClasses(java.util.Map)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.integration.impl.ItemResolverFactory$ItemResolver.ItemResolverFactory$ItemResolver(java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.integration.impl.ItemResolverFactory$ItemResolver.getName()</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.integration.impl.ItemResolverFactory$ItemResolver.name</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.integration.impl.ItemResolverFactory.createVariable(java.lang.String, java.lang.Object)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.integration.impl.ItemResolverFactory.createVariable(java.lang.String, java.lang.Object, java.lang.Class)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.integration.impl.ItemResolverFactory.getVariableResolver(java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.integration.impl.ItemResolverFactory.isResolveable(java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.integration.impl.ItemResolverFactory.isTarget(java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.integration.impl.MapVariableResolver.MapVariableResolver(java.util.Map, java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.integration.impl.MapVariableResolver.MapVariableResolver(java.util.Map, java.lang.String, boolean)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.integration.impl.MapVariableResolver.MapVariableResolver(java.util.Map, java.lang.String, java.lang.Class)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.integration.impl.MapVariableResolver.MapVariableResolver(java.util.Map, java.lang.String, java.lang.Class, boolean)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.integration.impl.MapVariableResolver.getName()</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.integration.impl.MapVariableResolver.getValue()</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.integration.impl.MapVariableResolver.name</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.integration.impl.MapVariableResolver.setName(java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.integration.impl.MapVariableResolver.setValue(java.lang.Object)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.integration.impl.MapVariableResolverFactory.addResolver(java.lang.String, org.mvel.integration.VariableResolver)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.integration.impl.MapVariableResolverFactory.createVariable(java.lang.String, java.lang.Object)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.integration.impl.MapVariableResolverFactory.createVariable(java.lang.String, java.lang.Object, java.lang.Class)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.integration.impl.MapVariableResolverFactory.getVariableResolver(java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.integration.impl.MapVariableResolverFactory.isResolveable(java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.integration.impl.MapVariableResolverFactory.isTarget(java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.integration.impl.SimpleValueResolver.getName()</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.integration.impl.SimpleValueResolver.getType()</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.integration.impl.StaticMethodImportResolver.StaticMethodImportResolver(java.lang.String, org.mvel.util.MethodStub)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.integration.impl.StaticMethodImportResolver.getName()</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.integration.impl.StaticMethodImportResolver.name</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.integration.impl.StaticMethodImportResolverFactory.StaticMethodImportResolverFactory(org.mvel.ParserContext)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.integration.impl.StaticMethodImportResolverFactory.createVariable(java.lang.String, java.lang.Object)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.integration.impl.StaticMethodImportResolverFactory.createVariable(java.lang.String, java.lang.Object, java.lang.Class)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.integration.impl.StaticMethodImportResolverFactory.getImportedMethods()</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.integration.impl.StaticMethodImportResolverFactory.isResolveable(java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.integration.impl.StaticMethodImportResolverFactory.isTarget(java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.math.IEEEFloatingPointMath._doOperations(int, java.lang.Object, int, int, java.lang.Object)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.math.IEEEFloatingPointMath.doOperationNonNumeric(java.lang.Object, int, java.lang.Object)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.math.IEEEFloatingPointMath.doOperationsSameType(int, java.lang.Object, int, java.lang.Object)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.math.IEEEFloatingPointMath.getBigDecimalFromType(java.lang.Object, int)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.math.JDK14CompatabilityMath._doOperations(int, java.lang.Object, int, int, java.lang.Object)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.math.JDK14CompatabilityMath.doOperationNonNumeric(java.lang.Object, int, java.lang.Object)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.math.JDK14CompatabilityMath.doOperationsSameType(int, java.lang.Object, int, java.lang.Object)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.math.JDK14CompatabilityMath.getBigDecimalFromType(java.lang.Object, int)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.optimizers.AbstractOptimizer.capture()</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.optimizers.AbstractOptimizer.tryStaticAccess()</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.optimizers.OptimizationNotSupported.OptimizationNotSupported(java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.optimizers.OptimizationNotSupported.OptimizationNotSupported(java.lang.String, java.lang.Throwable)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.optimizers.OptimizerFactory.SAFE_REFLECTIVE</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.optimizers.OptimizerFactory.defaultOptimizer</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.optimizers.OptimizerFactory.getAccessorCompiler(java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.optimizers.OptimizerFactory.getDefaultAccessorCompiler()</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.optimizers.OptimizerFactory.getThreadAccessorOptimizer()</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.optimizers.OptimizerFactory.setDefaultOptimizer(java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.optimizers.OptimizerFactory.static {}</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.asm.ASMAccessorOptimizer.LIST_IMPL</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.asm.ASMAccessorOptimizer.MAP_IMPL</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.asm.ASMAccessorOptimizer._finishJIT()</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.asm.ASMAccessorOptimizer._getAccessor(java.lang.Object)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.asm.ASMAccessorOptimizer._initJIT()</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.asm.ASMAccessorOptimizer._initializeAccessor()</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.asm.ASMAccessorOptimizer.addPrintOut(java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.asm.ASMAccessorOptimizer.anyArrayCheck(java.lang.Class)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.asm.ASMAccessorOptimizer.buildInputs()</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.asm.ASMAccessorOptimizer.checkcast(java.lang.Class)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.asm.ASMAccessorOptimizer.className</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.asm.ASMAccessorOptimizer.compileAccessor()</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.asm.ASMAccessorOptimizer.dataConversion(java.lang.Class)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.asm.ASMAccessorOptimizer.debug(java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.asm.ASMAccessorOptimizer.dumpAdvancedDebugging()</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.asm.ASMAccessorOptimizer.getBeanProperty(java.lang.Object, java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.asm.ASMAccessorOptimizer.getCollectionProperty(java.lang.Object, java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.asm.ASMAccessorOptimizer.getMethod(java.lang.Object, java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.asm.ASMAccessorOptimizer.getName()</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.asm.ASMAccessorOptimizer.getWrapperClass(java.lang.Class)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.asm.ASMAccessorOptimizer.intPush(int)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.asm.ASMAccessorOptimizer.ldcClassConstant(java.lang.Class)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.asm.ASMAccessorOptimizer.loadClass(java.lang.String, byte[])</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.asm.ASMAccessorOptimizer.optimizeCollection(char[], java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.asm.ASMAccessorOptimizer.optimizeFold(char[], java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.asm.ASMAccessorOptimizer.optimizeObjectCreation(char[], java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.asm.ASMAccessorOptimizer.optimizeSetAccessor(char[], java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory, boolean, java.lang.Object)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.asm.ASMAccessorOptimizer.static {}</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.asm.ASMAccessorOptimizer.unwrapPrimitive(java.lang.Class)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.asm.ASMAccessorOptimizer.wrapPrimitive(java.lang.Class)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.asm.ASMAccessorOptimizer.writeLiteralOrSubexpression(java.lang.Object, java.lang.Class)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.asm.ASMAccessorOptimizer.writeOutLiteralWrapped(java.lang.Object)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.refl.ArrayAccessor.toString()</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.refl.ArrayAccessorNest.ArrayAccessorNest(java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.refl.ArrayAccessorNest.toString()</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.refl.ConstructorAccessor.getValue(java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.refl.DynamicFieldAccessor.getValue(java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.refl.DynamicFieldAccessor.setValue(java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory, java.lang.Object)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.refl.DynamicSetterAccessor.setValue(java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory, java.lang.Object)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.refl.DynamicSetterAccessor.toString()</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.refl.FieldAccessor.getValue(java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.refl.FieldAccessor.setValue(java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory, java.lang.Object)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.refl.GetterAccessor.getValue(java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.refl.GetterAccessor.toString()</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.refl.IndexedCharSeqAccessor.getValue(java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.refl.IndexedCharSeqAccessor.toString()</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.refl.IndexedCharSeqAccessorNest.getValue(java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.refl.IndexedCharSeqAccessorNest.toString()</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.refl.ListAccessor.toString()</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.refl.ListAccessorNest.ListAccessorNest(java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.refl.ListAccessorNest.toString()</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.refl.MapAccessor.toString()</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.refl.MapAccessorNest.MapAccessorNest(java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.refl.MapAccessorNest.toString()</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.refl.MethodAccessor.getValue(java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.refl.ReflectiveAccessorOptimizer._getAccessor(java.lang.Object)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.refl.ReflectiveAccessorOptimizer.compileConstructor(char[], java.lang.Object, org.mvel.integration.VariableResolverFactory)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.refl.ReflectiveAccessorOptimizer.compileGetChain()</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.refl.ReflectiveAccessorOptimizer.createSignatureHash(java.lang.String, java.lang.Object)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.refl.ReflectiveAccessorOptimizer.get(java.lang.String, java.lang.Object)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.refl.ReflectiveAccessorOptimizer.getBeanProperty(java.lang.Object, java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.refl.ReflectiveAccessorOptimizer.getCollectionProperty(java.lang.Object, java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.refl.ReflectiveAccessorOptimizer.getMethod(java.lang.Object, java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.refl.ReflectiveAccessorOptimizer.main(java.lang.String[])</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.refl.ReflectiveAccessorOptimizer.optimizeFold(char[], java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.refl.ReflectiveAccessorOptimizer.optimizeObjectCreation(char[], java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.refl.ReflectiveAccessorOptimizer.optimizeSetAccessor(char[], java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory, boolean, java.lang.Object)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.refl.SetterAccessor.setValue(java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory, java.lang.Object)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.refl.SetterAccessor.toString()</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.refl.StaticVarAccessor.getValue(java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.refl.StaticVarAccessor.setValue(java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory, java.lang.Object)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.refl.ThisValueAccessor.setValue(java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory, java.lang.Object)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.refl.VariableAccessor.VariableAccessor(java.lang.String, org.mvel.integration.VariableResolverFactory)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.refl.VariableAccessor.getProperty()</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.refl.VariableAccessor.getValue(java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.refl.VariableAccessor.property</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.refl.VariableAccessor.setProperty(java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.refl.VariableAccessor.setValue(java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory, java.lang.Object)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.refl.collection.ExprValueAccessor.ExprValueAccessor(java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.util.ArrayTools.charTranspose(java.lang.Object[])</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.util.ArrayTools.floatTranspose(java.lang.Object[])</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.util.ArrayTools.intTranspose(java.lang.Object[])</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.util.ArrayTools.listTranspose(java.lang.String[])</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.util.ArrayTools.longTranspose(java.lang.Object[])</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.util.ArrayTools.setTranspose(java.lang.String[])</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.util.ArrayTools.shortTranspose(java.lang.Object[])</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.util.ArrayTools.stringTranspose(boolean[])</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.util.ArrayTools.stringTranspose(char[])</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.util.ArrayTools.stringTranspose(double[])</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.util.ArrayTools.stringTranspose(int[])</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.util.ArrayTools.stringTranspose(java.lang.Object[])</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.util.ArrayTools.stringTranspose(java.util.Collection)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.util.ArrayTools.stringTranspose(long[])</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.util.ArrayTools.stringTranspose(short[])</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.util.CollectionParser.parseCollection()</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.util.CompilerTools.optimizeAST(org.mvel.ASTLinkedList, boolean)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.util.ExecutionStack.showStack()</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.util.ExecutionStack.toString()</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.util.FastList$1.remove()</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.util.FastList.containsAll(java.util.Collection)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.util.FastList.remove(java.lang.Object)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.util.FastList.removeAll(java.util.Collection)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.util.FastList.removeRange(int, int)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.util.FastList.retainAll(java.util.Collection)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.util.FastList.toArray(java.lang.Object[])</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.util.FastList.toString()</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.util.MethodStub.MethodStub(java.lang.Class, java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.util.MethodStub.MethodStub(java.lang.reflect.Method)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.util.MethodStub.getMethod()</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.util.MethodStub.getMethodName()</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.util.MethodStub.methodName</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.util.MethodStub.setMethodName(java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.util.ParseTools.balancedCapture(char[], int, char)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.util.ParseTools.balancedCaptureWithLineAccounting(char[], int, char)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.util.ParseTools.boxPrimitive(java.lang.Class)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.util.ParseTools.captureContructorAndResidual(char[])</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.util.ParseTools.captureContructorAndResidual(java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.util.ParseTools.captureStringLiteral(char, char[], int, int)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.util.ParseTools.checkNameSafety(java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.util.ParseTools.containsCheck(java.lang.Object, java.lang.Object)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.util.ParseTools.createClass(java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.util.ParseTools.createClassSafe(java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.util.ParseTools.createShortFormOperativeAssignment(java.lang.String, char[], int)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.util.ParseTools.debug(java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.util.ParseTools.determineActualTargetMethod(java.lang.reflect.Method)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.util.ParseTools.finalLocalVariableFactory(org.mvel.integration.VariableResolverFactory)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.util.ParseTools.findClass(org.mvel.integration.VariableResolverFactory, java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.util.ParseTools.findClassImportResolverFactory(org.mvel.integration.VariableResolverFactory)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.util.ParseTools.findStaticMethodImportResolverFactory(org.mvel.integration.VariableResolverFactory)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.util.ParseTools.getBestCandidate(java.lang.Class[], java.lang.String, java.lang.Class, java.lang.reflect.Method[])</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.util.ParseTools.getBestCandidate(java.lang.Object[], java.lang.String, java.lang.Class, java.lang.reflect.Method[])</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.util.ParseTools.getDebugFileWriter()</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.util.ParseTools.getExactMatch(java.lang.String, java.lang.Class[], java.lang.Class, java.lang.Class)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.util.ParseTools.getSimpleClassName(java.lang.Class)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.util.ParseTools.getWidenedTarget(java.lang.reflect.Method)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.util.ParseTools.handleEscapeSequence(char)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.util.ParseTools.handleStringEscapes(char[])</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.util.ParseTools.increment(java.lang.Object)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.util.ParseTools.isNumericallyCoercible(java.lang.Class, java.lang.Class)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.util.ParseTools.isPrimitiveWrapper(java.lang.Class)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.util.ParseTools.parseMethodOrConstructor(char[])</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.util.ParseTools.parseParameterList(char[], int, int)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.util.ParseTools.parseParameters(char[])</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.util.ParseTools.repeatChar(char, int)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.util.ParseTools.resolveType(java.lang.Class)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.util.ParseTools.static {}</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.util.ParseTools.subCompileExpression(java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.util.ParseTools.unboxPrimitive(java.lang.Class)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.util.PropertyTools.contains(java.lang.Object, java.lang.Object)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.util.PropertyTools.equals(char[], java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.util.PropertyTools.getFieldOrAccessor(java.lang.Class, java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.util.PropertyTools.getFieldOrWriteAccessor(java.lang.Class, java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.util.PropertyTools.getGetter(java.lang.Class, java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.util.PropertyTools.getSetter(java.lang.Class, java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.util.PropertyTools.getWritableFieldOrAccessor(java.lang.Class, java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.util.PropertyTools.handleNumericConversion(char[])</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.util.PropertyTools.hasGetter(java.lang.reflect.Field)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.util.PropertyTools.hasSetter(java.lang.reflect.Field)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.util.PropertyTools.isEmpty(java.lang.Object)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.util.PropertyTools.isNumber(java.lang.Object)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.util.PropertyTools.isNumber(java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.util.PropertyTools.isNumeric(java.lang.Object)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.util.PropertyTools.isPropertyReadAndWrite(java.lang.Class, java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.util.PropertyTools.similarity(java.lang.String, java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.util.ReflectionUtil.getGetter(java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.util.ReflectionUtil.getIsGetter(java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.util.ReflectionUtil.getParameterFromAccessor(java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.util.ReflectionUtil.getSetter(java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.util.ReflectionUtil.isAssignable(java.lang.Object, java.lang.Class)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.util.ReflectionUtil.parameterizeClassName(java.lang.Class)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.util.ReflectionUtil.parameterizeClassName(java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.util.StringAppender.StringAppender(java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.util.StringAppender.append(java.lang.Object)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.util.StringAppender.append(java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.util.StringAppender.toString()</inbound>
            <feature confirmed="no">
                <name>java.lang.String.String(char[])</name>
                <inbound type="feature" confirmed="yes">org.mvel.ASTNode.getAbsoluteRootElement()</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.ASTNode.getName()</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.ASTNode.getReducedValue(java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.ASTNode.setName(char[])</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.ASTNode.toString()</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.AbstractParser.createOperator(char[], int, int, int)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.AbstractParser.createPropertyToken(int, int)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.AbstractParser.nextToken()</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.ExpressionCompiler.getExpression()</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.MVEL.preprocess(char[], org.mvel.PreProcessor[])</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.MVELTemplateRegistry.registerTemplate(java.io.Reader)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.MacroProcessor.parse(java.lang.String)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.PropertyAccessor.get()</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.PropertyAccessor.set(java.lang.Object)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.TemplateInterpreter.execute(java.lang.Object, java.util.Map, org.mvel.TemplateRegistry)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.TemplateInterpreter.getForEachSegment(org.mvel.Node)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.ast.AssertNode.getReducedValue(java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.ast.AssertNode.getReducedValueAccelerated(java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.ast.AssignmentNode.AssignmentNode(char[], int, int, java.lang.String)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.ast.AssignmentNode.getReducedValue(java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.ast.DeepAssignmentNode.DeepAssignmentNode(char[], int, int, java.lang.String)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.ast.ImportNode.ImportNode(char[])</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.ast.NewObjectNode.getReducedValue(java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.ast.NewObjectNode.updateClassName(int)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.ast.PostFixDecNode.PostFixDecNode(char[], int)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.ast.PostFixIncNode.PostFixIncNode(char[], int)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.ast.PreFixDecNode.PreFixDecNode(char[], int)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.ast.PreFixIncNode.PreFixIncNode(char[], int)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.ast.PropertyASTNode.initializePropertyNode(java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.ast.StaticImportNode.StaticImportNode(char[], int)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.ast.TypedVarNode.TypedVarNode(char[], int, java.lang.Class)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.ast.WithNode.WithNode(char[], char[], int)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.asm.ASMAccessorOptimizer._initializeAccessor()</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.asm.ASMAccessorOptimizer.compileAccessor()</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.asm.ASMAccessorOptimizer.dumpAdvancedDebugging()</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.asm.ASMAccessorOptimizer.optimizeObjectCreation(char[], java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.refl.ReflectiveAccessorOptimizer.compileConstructor(char[], java.lang.Object, org.mvel.integration.VariableResolverFactory)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.refl.ReflectiveAccessorOptimizer.compileGetChain()</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.refl.ReflectiveAccessorOptimizer.optimizeSetAccessor(char[], java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory, boolean, java.lang.Object)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.util.CollectionParser.parseCollection()</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.util.ParseTools.captureContructorAndResidual(char[])</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.util.ParseTools.handleStringEscapes(char[])</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.util.ParseTools.repeatChar(char, int)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.util.PropertyTools.handleNumericConversion(char[])</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.util.ReflectionUtil.getGetter(java.lang.String)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.util.ReflectionUtil.getIsGetter(java.lang.String)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.util.ReflectionUtil.getParameterFromAccessor(java.lang.String)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.util.ReflectionUtil.getSetter(java.lang.String)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.util.ReflectionUtil.parameterizeClassName(java.lang.String)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.util.StringAppender.toString()</inbound>
            </feature>
            <feature confirmed="no">
                <name>java.lang.String.String(char[], int, int)</name>
                <inbound type="feature" confirmed="yes">org.mvel.ASTNode.getAbsoluteName()</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.ASTNode.getAbsoluteRemainder()</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.ASTNode.getAbsoluteRootElement()</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.ASTNode.getReducedValue(java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.ASTNode.tryStaticAccess(java.lang.Object, org.mvel.integration.VariableResolverFactory)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.AbstractParser.createPropertyToken(int, int)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.AbstractParser.nextToken()</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.ExpressionCompiler.verify(org.mvel.ParserContext, org.mvel.ASTNode)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.MacroProcessor.parse(char[])</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.ParseException.ParseException(java.lang.String, char[], int)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.PropertyAccessor.capture()</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.PropertyAccessor.getCollectionProperty(java.lang.Object, java.lang.String)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.PropertyAccessor.getMethod(java.lang.Object, java.lang.String)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.PropertyAccessor.set(java.lang.Object)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.PropertyVerifier.getMethod(java.lang.Class, java.lang.String)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.TemplateCompiler.buildIncludeRef(char[])</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.TemplateCompiler.captureTo(char)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.TemplateCompiler.compileExpression()</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.TemplateCompiler.parseAlias(char[], int, int, int)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.TemplateInterpreter.execute(java.lang.Object, java.util.Map, org.mvel.TemplateRegistry)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.asm.ClassReader.readUTF(int, int, char[])</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.asm.Type.getClassName()</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.asm.Type.getInternalName()</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.ast.AssignmentNode.AssignmentNode(char[], int, int, java.lang.String)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.ast.DeepAssignmentNode.DeepAssignmentNode(char[], int, int, java.lang.String)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.ast.ForEachNode.handleCond(char[])</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.ast.ImportNode.getPackageImport()</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.ast.ImportNode.getReducedValueAccelerated(java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.ast.NewObjectNode.updateClassName(int)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.ast.TypedVarNode.TypedVarNode(char[], int, java.lang.Class)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.ast.WithNode.compileWithExpressions()</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.optimizers.AbstractOptimizer.capture()</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.optimizers.AbstractOptimizer.tryStaticAccess()</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.asm.ASMAccessorOptimizer.getCollectionProperty(java.lang.Object, java.lang.String)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.asm.ASMAccessorOptimizer.getMethod(java.lang.Object, java.lang.String)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.refl.ReflectiveAccessorOptimizer.getCollectionProperty(java.lang.Object, java.lang.String)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.refl.ReflectiveAccessorOptimizer.getMethod(java.lang.Object, java.lang.String)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.refl.ReflectiveAccessorOptimizer.optimizeSetAccessor(char[], java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory, boolean, java.lang.Object)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.util.CollectionParser.parseCollection()</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.util.ParseTools.captureContructorAndResidual(char[])</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.util.ParseTools.captureContructorAndResidual(java.lang.String)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.util.ParseTools.parseParameterList(char[], int, int)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.util.ParseTools.parseParameters(char[])</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.util.StringAppender.subSequence(int, int)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.util.StringAppender.toString()</inbound>
            </feature>
            <feature confirmed="no">
                <name>java.lang.String.charAt(int)</name>
                <inbound type="feature" confirmed="yes">org.mvel.asm.AnnotationWriter.visit(java.lang.String, java.lang.Object)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.asm.ByteVector.putUTF8(java.lang.String)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.asm.ClassReader.accept(org.mvel.asm.ClassVisitor, org.mvel.asm.Attribute[], int)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.asm.ClassReader.readConst(int, char[])</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.asm.ClassWriter.static {}</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.asm.Frame.execute(int, int, org.mvel.asm.ClassWriter, org.mvel.asm.Item)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.asm.Frame.pop(java.lang.String)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.asm.Frame.static {}</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.asm.Frame.type(org.mvel.asm.ClassWriter, java.lang.String)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.asm.MethodWriter.getArgumentsAndReturnSizes(java.lang.String)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.asm.MethodWriter.visitFieldInsn(int, java.lang.String, java.lang.String, java.lang.String)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.asm.MethodWriter.visitLocalVariable(java.lang.String, java.lang.String, java.lang.String, org.mvel.asm.Label, org.mvel.asm.Label, int)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.asm.Type.getDescriptor(java.lang.StringBuffer, java.lang.Class)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.conversion.CharCH$1.convert(java.lang.Object)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.refl.IndexedCharSeqAccessor.getValue(java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.refl.IndexedCharSeqAccessorNest.getValue(java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.util.ArrayTools.charTranspose(java.lang.Object[])</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.util.PropertyTools.equals(char[], java.lang.String)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.util.PropertyTools.getFieldOrAccessor(java.lang.Class, java.lang.String)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.util.PropertyTools.isNumber(java.lang.String)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.util.ReflectionUtil.getIsGetter(java.lang.String)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.util.ReflectionUtil.getParameterFromAccessor(java.lang.String)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.util.ReflectionUtil.getSetter(java.lang.String)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.util.ReflectionUtil.parameterizeClassName(java.lang.String)</inbound>
            </feature>
            <feature confirmed="no">
                <name>java.lang.String.copyValueOf(char[])</name>
                <inbound type="feature" confirmed="yes">org.mvel.TemplateCompiler.compileExpression()</inbound>
            </feature>
            <feature confirmed="no">
                <name>java.lang.String.copyValueOf(char[], int, int)</name>
                <inbound type="feature" confirmed="yes">org.mvel.CompileException.showCodeNearError(char[], int)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.TemplateCompiler.showCodeNearError()</inbound>
            </feature>
            <feature confirmed="no">
                <name>java.lang.String.endsWith(java.lang.String)</name>
                <inbound type="feature" confirmed="yes">org.mvel.ast.ImportNode.ImportNode(char[])</inbound>
            </feature>
            <feature confirmed="no">
                <name>java.lang.String.equals(java.lang.Object)</name>
                <inbound type="feature" confirmed="yes">org.mvel.AbstractParser.createPropertyToken(int, int)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.AbstractParser.reduce()</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.AbstractParser.setExpression(java.lang.String)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.BlankLiteral.equals(java.lang.Object)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.MVELRuntime.execute(boolean, org.mvel.CompiledExpression, java.lang.Object, org.mvel.integration.VariableResolverFactory)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.MVELSH.main(java.lang.String[])</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.ParserContext.hasImport(java.lang.String)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.PropertyAccessor.getBeanProperty(java.lang.Object, java.lang.String)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.PropertyAccessor.getMethod(java.lang.Object, java.lang.String)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.PropertyVerifier.getBeanProperty(java.lang.Class, java.lang.String)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.PropertyVerifier.getMethod(java.lang.Class, java.lang.String)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.TemplateCompiler.compileExpression()</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.asm.ClassReader.accept(org.mvel.asm.ClassVisitor, org.mvel.asm.Attribute[], int)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.asm.ClassReader.readAttribute(org.mvel.asm.Attribute[], java.lang.String, int, int, char[], int, org.mvel.asm.Label[])</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.asm.Item.isEqualTo(org.mvel.asm.Item)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.asm.MethodWriter.MethodWriter(org.mvel.asm.ClassWriter, int, java.lang.String, java.lang.String, java.lang.String, java.lang.String[], boolean, boolean)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.ast.StaticImportNode.resolveMethod()</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.conversion.BooleanCH$1.convert(java.lang.Object)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.debug.DebugTools.determineType(java.lang.String, org.mvel.CompiledExpression)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.integration.impl.ItemResolverFactory.isResolveable(java.lang.String)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.integration.impl.ItemResolverFactory.isTarget(java.lang.String)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.asm.ASMAccessorOptimizer.getBeanProperty(java.lang.Object, java.lang.String)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.asm.ASMAccessorOptimizer.getMethod(java.lang.Object, java.lang.String)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.asm.ASMAccessorOptimizer.optimizeObjectCreation(char[], java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.refl.ReflectiveAccessorOptimizer.getBeanProperty(java.lang.Object, java.lang.String)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.refl.ReflectiveAccessorOptimizer.getMethod(java.lang.Object, java.lang.String)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.util.MethodStub.getMethod()</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.util.ParseTools.determineActualTargetMethod(java.lang.reflect.Method)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.util.ParseTools.getBestCandidate(java.lang.Class[], java.lang.String, java.lang.Class, java.lang.reflect.Method[])</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.util.ParseTools.getExactMatch(java.lang.String, java.lang.Class[], java.lang.Class, java.lang.Class)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.util.PropertyTools.getGetter(java.lang.Class, java.lang.String)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.util.PropertyTools.getSetter(java.lang.Class, java.lang.String)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.util.PropertyTools.isEmpty(java.lang.Object)</inbound>
            </feature>
            <feature confirmed="no">
                <name>java.lang.String.equalsIgnoreCase(java.lang.String)</name>
                <inbound type="feature" confirmed="yes">org.mvel.conversion.BooleanCH$1.convert(java.lang.Object)</inbound>
            </feature>
            <feature confirmed="no">
                <name>java.lang.String.getChars(int, int, char[], int)</name>
                <inbound type="feature" confirmed="yes">org.mvel.asm.Type.getObjectType(java.lang.String)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.util.StringAppender.append(java.lang.String)</inbound>
            </feature>
            <feature confirmed="no">
                <name>java.lang.String.hashCode()</name>
                <inbound type="feature" confirmed="yes">org.mvel.PropertyAccessor.createSignature(java.lang.String, java.lang.String)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.PropertyAccessor.getBeanProperty(java.lang.Object, java.lang.String)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.PropertyAccessor.set(java.lang.Object)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.asm.ClassWriter.addUninitializedType(java.lang.String, int)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.asm.Item.set(int, java.lang.String, java.lang.String, java.lang.String)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.refl.ReflectiveAccessorOptimizer.createSignatureHash(java.lang.String, java.lang.Object)</inbound>
            </feature>
            <feature confirmed="no">
                <name>java.lang.String.indexOf(int)</name>
                <inbound type="feature" confirmed="yes">org.mvel.asm.Frame.type(org.mvel.asm.ClassWriter, java.lang.String)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.asm.Type.getReturnType(java.lang.String)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.ast.NewObjectNode.rewriteClassReferenceToFQCN(int)</inbound>
            </feature>
            <feature confirmed="no">
                <name>java.lang.String.indexOf(java.lang.String)</name>
                <inbound type="feature" confirmed="yes">org.mvel.util.ParseTools.containsCheck(java.lang.Object, java.lang.Object)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.util.PropertyTools.contains(java.lang.Object, java.lang.Object)</inbound>
            </feature>
            <feature confirmed="no">
                <name>java.lang.String.intern()</name>
                <inbound type="feature" confirmed="yes">org.mvel.ast.LiteralNode.LiteralNode(java.lang.Object)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.ast.LiteralNode.LiteralNode(java.lang.Object, int)</inbound>
            </feature>
            <feature confirmed="no">
                <name>java.lang.String.lastIndexOf(int)</name>
                <inbound type="feature" confirmed="yes">org.mvel.ast.ImportNode.ImportNode(char[])</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.util.ParseTools.getSimpleClassName(java.lang.Class)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.util.ReflectionUtil.parameterizeClassName(java.lang.Class)</inbound>
            </feature>
            <feature confirmed="no">
                <name>java.lang.String.length()</name>
                <inbound type="feature" confirmed="yes">org.mvel.MVELSH.main(java.lang.String[])</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.PropertyAccessor.getCollectionProperty(java.lang.Object, java.lang.String)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.PropertyAccessor.getMethod(java.lang.Object, java.lang.String)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.PropertyVerifier.getMethod(java.lang.Class, java.lang.String)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.TemplateCompiler.compileExpression()</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.asm.ByteVector.putUTF8(java.lang.String)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.asm.Frame.type(org.mvel.asm.ClassWriter, java.lang.String)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.asm.Type.getDescriptor(java.lang.StringBuffer, java.lang.Class)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.asm.Type.getObjectType(java.lang.String)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.ast.PropertyASTNode.initializePropertyNode(java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.conversion.CharCH$1.convert(java.lang.Object)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.conversion.DoubleCH$1.convert(java.lang.Object)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.conversion.FloatCH$1.convert(java.lang.Object)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.conversion.IntegerCH$1.convert(java.lang.Object)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.conversion.LongCH$1.convert(java.lang.Object)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.asm.ASMAccessorOptimizer.getCollectionProperty(java.lang.Object, java.lang.String)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.asm.ASMAccessorOptimizer.getMethod(java.lang.Object, java.lang.String)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.refl.ReflectiveAccessorOptimizer.getCollectionProperty(java.lang.Object, java.lang.String)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.refl.ReflectiveAccessorOptimizer.getMethod(java.lang.Object, java.lang.String)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.util.ParseTools.createShortFormOperativeAssignment(java.lang.String, char[], int)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.util.ParseTools.parseParameterList(char[], int, int)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.util.PropertyTools.equals(char[], java.lang.String)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.util.PropertyTools.getFieldOrAccessor(java.lang.Class, java.lang.String)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.util.PropertyTools.isNumber(java.lang.String)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.util.ReflectionUtil.getParameterFromAccessor(java.lang.String)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.util.ReflectionUtil.getSetter(java.lang.String)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.util.StringAppender.append(java.lang.String)</inbound>
            </feature>
            <feature confirmed="no">
                <name>java.lang.String.replace(char, char)</name>
                <inbound type="feature" confirmed="yes">org.mvel.asm.ClassReader.ClassReader(java.lang.String)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.asm.ClassWriter.getCommonSuperClass(java.lang.String, java.lang.String)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.asm.Type.getClassName()</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.asm.Type.getInternalName(java.lang.Class)</inbound>
            </feature>
            <feature confirmed="no">
                <name>java.lang.String.replaceAll(java.lang.String, java.lang.String)</name>
                <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.asm.ASMAccessorOptimizer._initJIT()</inbound>
            </feature>
            <feature confirmed="no">
                <name>java.lang.String.startsWith(java.lang.String)</name>
                <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.asm.ASMAccessorOptimizer.static {}</inbound>
            </feature>
            <feature confirmed="no">
                <name>java.lang.String.substring(int)</name>
                <inbound type="feature" confirmed="yes">org.mvel.util.ParseTools.getSimpleClassName(java.lang.Class)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.util.ReflectionUtil.parameterizeClassName(java.lang.Class)</inbound>
            </feature>
            <feature confirmed="no">
                <name>java.lang.String.substring(int, int)</name>
                <inbound type="feature" confirmed="yes">org.mvel.AbstractParser.static {}</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.asm.ClassReader.accept(org.mvel.asm.ClassVisitor, org.mvel.asm.Attribute[], int)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.asm.Frame.type(org.mvel.asm.ClassWriter, java.lang.String)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.util.ParseTools.static {}</inbound>
            </feature>
            <feature confirmed="no">
                <name>java.lang.String.toCharArray()</name>
                <inbound type="feature" confirmed="yes">org.mvel.AbstractParser.setExpression(java.lang.String)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.MVEL.compileSetExpression(java.lang.String)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.MVEL.preprocess(java.lang.String, org.mvel.PreProcessor[])</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.MacroProcessor.parse(java.lang.String)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.PropertyAccessor.PropertyAccessor(java.lang.String, java.lang.Object)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.PropertyAccessor.get(java.lang.String, java.lang.Object, org.mvel.integration.VariableResolverFactory, java.lang.Object)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.PropertyAccessor.getMethod(java.lang.Object, java.lang.String)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.PropertyAccessor.set(java.lang.Object, org.mvel.integration.VariableResolverFactory, java.lang.String, java.lang.Object)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.PropertyVerifier.PropertyVerifier(java.lang.String, org.mvel.ParserContext)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.PropertyVerifier.getMethod(java.lang.Class, java.lang.String)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.Soundex.soundex(java.lang.String)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.TemplateInterpreter.TemplateInterpreter(java.lang.CharSequence)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.TemplateInterpreter.TemplateInterpreter(java.lang.String)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.asm.Type.getArgumentTypes(java.lang.String)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.asm.Type.getReturnType(java.lang.String)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.asm.Type.getType(java.lang.String)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.ast.AssignmentNode.AssignmentNode(char[], int, int, java.lang.String)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.ast.DeepAssignmentNode.DeepAssignmentNode(char[], int, int, java.lang.String)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.ast.DeepAssignmentNode.getReducedValueAccelerated(java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.ast.ForEachNode.getReducedValue(java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.ast.ForEachNode.getReducedValueAccelerated(java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.ast.NewObjectNode.getReducedValue(java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.ast.NewObjectNode.rewriteClassReferenceToFQCN(int)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.asm.ASMAccessorOptimizer.getMethod(java.lang.Object, java.lang.String)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.asm.ASMAccessorOptimizer.optimizeObjectCreation(char[], java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.refl.ReflectiveAccessorOptimizer.compileConstructor(char[], java.lang.Object, org.mvel.integration.VariableResolverFactory)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.refl.ReflectiveAccessorOptimizer.get(java.lang.String, java.lang.Object)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.refl.ReflectiveAccessorOptimizer.getMethod(java.lang.Object, java.lang.String)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.refl.ReflectiveAccessorOptimizer.main(java.lang.String[])</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.util.ParseTools.captureContructorAndResidual(java.lang.String)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.util.ParseTools.createShortFormOperativeAssignment(java.lang.String, char[], int)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.util.PropertyTools.similarity(java.lang.String, java.lang.String)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.util.ReflectionUtil.getGetter(java.lang.String)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.util.ReflectionUtil.getIsGetter(java.lang.String)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.util.ReflectionUtil.parameterizeClassName(java.lang.String)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.util.StringAppender.StringAppender(java.lang.String)</inbound>
            </feature>
            <feature confirmed="no">
                <name>java.lang.String.toString()</name>
                <inbound type="feature" confirmed="yes">org.mvel.util.PropertyTools.contains(java.lang.Object, java.lang.Object)</inbound>
            </feature>
            <feature confirmed="no">
                <name>java.lang.String.toUpperCase()</name>
                <inbound type="feature" confirmed="yes">org.mvel.Soundex.soundex(java.lang.String)</inbound>
            </feature>
            <feature confirmed="no">
                <name>java.lang.String.trim()</name>
                <inbound type="feature" confirmed="yes">org.mvel.ExpressionCompiler.verify(org.mvel.ParserContext, org.mvel.ASTNode)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.TemplateCompiler.parseAlias(char[], int, int, int)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.ast.AssignmentNode.AssignmentNode(char[], int, int, java.lang.String)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.ast.DeepAssignmentNode.DeepAssignmentNode(char[], int, int, java.lang.String)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.ast.ForEachNode.handleCond(char[])</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.ast.TypedVarNode.TypedVarNode(char[], int, java.lang.Class)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.ast.WithNode.WithNode(char[], char[], int)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.ast.WithNode.compileWithExpressions()</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.asm.ASMAccessorOptimizer.optimizeObjectCreation(char[], java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.util.CollectionParser.parseCollection()</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.util.ParseTools.captureContructorAndResidual(char[])</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.util.ParseTools.parseParameterList(char[], int, int)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.util.ParseTools.parseParameters(char[])</inbound>
            </feature>
            <feature confirmed="no">
                <name>java.lang.String.valueOf(boolean)</name>
                <inbound type="feature" confirmed="yes">org.mvel.util.ArrayTools.stringTranspose(boolean[])</inbound>
            </feature>
            <feature confirmed="no">
                <name>java.lang.String.valueOf(char)</name>
                <inbound type="feature" confirmed="yes">org.mvel.util.ArrayTools.stringTranspose(char[])</inbound>
            </feature>
            <feature confirmed="no">
                <name>java.lang.String.valueOf(double)</name>
                <inbound type="feature" confirmed="yes">org.mvel.util.ArrayTools.stringTranspose(double[])</inbound>
            </feature>
            <feature confirmed="no">
                <name>java.lang.String.valueOf(int)</name>
                <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.asm.ASMAccessorOptimizer._initJIT()</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.util.ArrayTools.stringTranspose(int[])</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.util.ArrayTools.stringTranspose(short[])</inbound>
            </feature>
            <feature confirmed="no">
                <name>java.lang.String.valueOf(java.lang.Object)</name>
                <inbound type="feature" confirmed="yes">org.mvel.ASTNode.getReducedValue(java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.ASTNode.toString()</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.AbstractParser.reduce()</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.BlankLiteral.equals(java.lang.Object)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.MVEL.evalToString(java.lang.String, java.lang.Object)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.MVEL.evalToString(java.lang.String, java.lang.Object, java.util.Map)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.MVEL.evalToString(java.lang.String, java.util.Map)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.MVELRuntime.execute(boolean, org.mvel.CompiledExpression, java.lang.Object, org.mvel.integration.VariableResolverFactory)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.MVELSH.main(java.lang.String[])</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.ParseException.ParseException(java.lang.String, char[], int)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.ParserContext.checkForDynamicImport(java.lang.String)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.TemplateCompiler.compileExpression()</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.TemplateInterpreter.evalToString(java.lang.String, java.lang.Object)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.TemplateInterpreter.evalToString(java.lang.String, java.lang.Object, java.util.Map)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.TemplateInterpreter.evalToString(java.lang.String, java.util.Map)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.TemplateInterpreter.execute(java.lang.Object, java.util.Map, org.mvel.TemplateRegistry)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.TemplateInterpreter.parseToStream(java.io.File, java.lang.Object, java.util.Map, java.io.OutputStream)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.TemplateInterpreter.setValuePE(java.lang.String, java.lang.Object, java.lang.Object, java.lang.Object)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.asm.ClassReader.ClassReader(java.lang.String)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.ast.BinaryOperation.toString()</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.ast.NewObjectNode.NewObjectNode(char[], int)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.ast.NewObjectNode.getReducedValueAccelerated(java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.ast.RegExMatch.getReducedValue(java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.ast.RegExMatch.getReducedValueAccelerated(java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.ast.WithNode.compileWithExpressions()</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.conversion.ArrayCH$1.convert(java.lang.Object)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.conversion.ArrayCH$2.convert(java.lang.Object)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.conversion.ArrayCH$3.convert(java.lang.Object)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.conversion.BooleanCH$2.convert(java.lang.Object)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.conversion.ByteCH$2.convert(java.lang.Object)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.conversion.CharArrayCH$1.convert(java.lang.Object)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.conversion.CharCH$2.convert(java.lang.Object)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.conversion.DoubleCH$2.convert(java.lang.Object)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.conversion.FloatCH$2.convert(java.lang.Object)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.conversion.IntArrayCH$2.convert(java.lang.Object)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.conversion.IntegerCH$1.convert(java.lang.Object)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.conversion.IntegerCH$6.convert(java.lang.Object)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.conversion.IntegerCH$7.convert(java.lang.Object)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.conversion.IntegerCH$8.convert(java.lang.Object)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.conversion.LongCH$2.convert(java.lang.Object)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.conversion.PrimIntArrayCH$2.convert(java.lang.Object)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.conversion.ShortCH$2.convert(java.lang.Object)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.conversion.StringArrayCH$1.convert(java.lang.Object)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.conversion.StringArrayCH.convertFrom(java.lang.Object)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.conversion.StringCH.convertFrom(java.lang.Object)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.integration.impl.ClassImportResolverFactory.isResolveable(java.lang.String)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.math.IEEEFloatingPointMath._doOperations(int, java.lang.Object, int, int, java.lang.Object)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.math.IEEEFloatingPointMath.doOperationNonNumeric(java.lang.Object, int, java.lang.Object)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.math.IEEEFloatingPointMath.doOperationsSameType(int, java.lang.Object, int, java.lang.Object)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.math.JDK14CompatabilityMath._doOperations(int, java.lang.Object, int, int, java.lang.Object)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.math.JDK14CompatabilityMath.doOperationNonNumeric(java.lang.Object, int, java.lang.Object)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.math.JDK14CompatabilityMath.doOperationsSameType(int, java.lang.Object, int, java.lang.Object)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.refl.DynamicSetterAccessor.toString()</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.refl.GetterAccessor.getValue(java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.refl.GetterAccessor.toString()</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.refl.SetterAccessor.toString()</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.util.ArrayTools.charTranspose(java.lang.Object[])</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.util.ArrayTools.floatTranspose(java.lang.Object[])</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.util.ArrayTools.intTranspose(java.lang.Object[])</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.util.ArrayTools.longTranspose(java.lang.Object[])</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.util.ArrayTools.shortTranspose(java.lang.Object[])</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.util.ArrayTools.stringTranspose(java.lang.Object[])</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.util.ArrayTools.stringTranspose(java.util.Collection)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.util.CompilerTools.optimizeAST(org.mvel.ASTLinkedList, boolean)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.util.ExecutionStack.toString()</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.util.ParseTools.containsCheck(java.lang.Object, java.lang.Object)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.util.ParseTools.getSimpleClassName(java.lang.Class)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.util.PropertyTools.contains(java.lang.Object, java.lang.Object)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.util.PropertyTools.isEmpty(java.lang.Object)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.util.StringAppender.append(java.lang.Object)</inbound>
            </feature>
            <feature confirmed="no">
                <name>java.lang.String.valueOf(long)</name>
                <inbound type="feature" confirmed="yes">org.mvel.util.ArrayTools.stringTranspose(long[])</inbound>
            </feature>
        </class>
        <class confirmed="no">
            <name>java.lang.StringBuffer</name>
            <inbound type="feature" confirmed="yes">org.mvel.ASTArrayList.showNodeChain()</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.ASTNode.getReducedValue(java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.AbstractParser.nextToken()</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.AbstractParser.reduce()</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.CompileException.CompileException(java.lang.String, char[], int)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.CompileException.CompileException(java.lang.String, char[], int, boolean)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.CompileException.CompileException(java.lang.String, char[], int, java.lang.Exception)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.CompileException.CompileException(java.lang.String, java.util.List)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.ErrorDetail.toString()</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.ExpressionCompiler.compile(org.mvel.ParserContext)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.ExpressionCompiler.verify(org.mvel.ParserContext, org.mvel.ASTNode)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.MVELInterpretedRuntime.parseAndExecuteInterpreted()</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.MVELRuntime.execute(boolean, org.mvel.CompiledExpression, java.lang.Object, org.mvel.integration.VariableResolverFactory)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.MVELSH.main(java.lang.String[])</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.ParseException.ParseException(java.lang.String, char[], int)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.ParserContext.checkForDynamicImport(java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.ParserContext.setImports(java.util.Map)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.PropertyAccessException.PropertyAccessException(java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.PropertyAccessException.PropertyAccessException(java.lang.String, java.lang.Throwable)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.PropertyAccessor.get()</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.PropertyAccessor.getBeanProperty(java.lang.Object, java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.PropertyAccessor.getCollectionProperty(java.lang.Object, java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.PropertyAccessor.getMethod(java.lang.Object, java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.PropertyAccessor.reportCacheSizes()</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.PropertyAccessor.set(java.lang.Object)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.PropertyVerifier.getBeanProperty(java.lang.Class, java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.PropertyVerifier.getMethod(java.lang.Class, java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.TemplateCompiler.compileExpression()</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.TemplateCompiler.parseAlias(char[], int, int, int)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.TemplateCompiler.showCodeNearError()</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.TemplateCompiler.structuredCaptureArray(int)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.TemplateInterpreter.execute(java.lang.Object, java.util.Map, org.mvel.TemplateRegistry)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.TemplateInterpreter.parse(java.io.File, java.lang.Object, java.util.Map, org.mvel.TemplateRegistry)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.UnresolveablePropertyException.UnresolveablePropertyException(org.mvel.ASTNode)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.UnresolveablePropertyException.UnresolveablePropertyException(org.mvel.ASTNode, java.lang.Throwable)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.asm.ClassReader.ClassReader(java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.asm.ClassWriter.newConstItem(java.lang.Object)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.asm.Frame.execute(int, int, org.mvel.asm.ClassWriter, org.mvel.asm.Item)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.asm.Label.toString()</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.asm.MethodWriter.writeFrameTypes(int, int)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.asm.Type.getClassName()</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.asm.Type.getConstructorDescriptor(java.lang.reflect.Constructor)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.asm.Type.getDescriptor()</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.asm.Type.getDescriptor(java.lang.Class)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.asm.Type.getDescriptor(java.lang.StringBuffer)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.asm.Type.getDescriptor(java.lang.StringBuffer, java.lang.Class)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.asm.Type.getMethodDescriptor(java.lang.reflect.Method)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.asm.Type.getMethodDescriptor(org.mvel.asm.Type, org.mvel.asm.Type[])</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.ast.AssertNode.getReducedValue(java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.ast.AssertNode.getReducedValueAccelerated(java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.ast.BinaryOperation.toString()</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.ast.ForEachNode.getReducedValue(java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.ast.ForEachNode.getReducedValueAccelerated(java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.ast.ImportNode.ImportNode(char[])</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.ast.LineLabel.toString()</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.ast.NewObjectNode.NewObjectNode(char[], int)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.ast.NewObjectNode.getReducedValue(java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.ast.NewObjectNode.getReducedValueAccelerated(java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.ast.PropertyASTNode.initializePropertyNode(java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.ast.StaticImportNode.StaticImportNode(char[], int)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.ast.WithNode.compileWithExpressions()</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.conversion.ArrayCH.convertFrom(java.lang.Object)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.conversion.BigDecimalCH.convertFrom(java.lang.Object)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.conversion.BigIntegerCH.convertFrom(java.lang.Object)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.conversion.BooleanCH.convertFrom(java.lang.Object)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.conversion.ByteCH.convertFrom(java.lang.Object)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.conversion.CharArrayCH.convertFrom(java.lang.Object)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.conversion.CharCH.convertFrom(java.lang.Object)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.conversion.DoubleCH.convertFrom(java.lang.Object)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.conversion.FloatCH.convertFrom(java.lang.Object)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.conversion.IntArrayCH.convertFrom(java.lang.Object)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.conversion.IntegerCH$6.convert(java.lang.Object)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.conversion.IntegerCH$7.convert(java.lang.Object)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.conversion.IntegerCH$8.convert(java.lang.Object)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.conversion.IntegerCH.convertFrom(java.lang.Object)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.conversion.LongCH.convertFrom(java.lang.Object)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.conversion.PrimArrayHandler.convertFrom(java.lang.Object)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.conversion.PrimArrayHandler.handleLooseTypeConversion(java.lang.Class, java.lang.Object[], java.lang.Class)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.conversion.PrimIntArrayCH.convertFrom(java.lang.Object)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.conversion.ShortCH.convertFrom(java.lang.Object)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.debug.DebugTools.decompile(java.io.Serializable)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.debug.DebugTools.decompile(org.mvel.CompiledExpression, boolean, org.mvel.debug.DebugTools$DecompileContext)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.integration.impl.ClassImportResolverFactory.isResolveable(java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.integration.impl.ItemResolverFactory.createVariable(java.lang.String, java.lang.Object, java.lang.Class)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.integration.impl.MapVariableResolver.setValue(java.lang.Object)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.integration.impl.MapVariableResolverFactory.createVariable(java.lang.String, java.lang.Object, java.lang.Class)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.math.IEEEFloatingPointMath.doOperationNonNumeric(java.lang.Object, int, java.lang.Object)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.math.IEEEFloatingPointMath.doOperationsSameType(int, java.lang.Object, int, java.lang.Object)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.math.IEEEFloatingPointMath.getBigDecimalFromType(java.lang.Object, int)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.math.JDK14CompatabilityMath.doOperationNonNumeric(java.lang.Object, int, java.lang.Object)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.math.JDK14CompatabilityMath.doOperationsSameType(int, java.lang.Object, int, java.lang.Object)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.math.JDK14CompatabilityMath.getBigDecimalFromType(java.lang.Object, int)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.asm.ASMAccessorOptimizer._finishJIT()</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.asm.ASMAccessorOptimizer._getAccessor(java.lang.Object)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.asm.ASMAccessorOptimizer._initJIT()</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.asm.ASMAccessorOptimizer._initializeAccessor()</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.asm.ASMAccessorOptimizer.buildInputs()</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.asm.ASMAccessorOptimizer.dumpAdvancedDebugging()</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.asm.ASMAccessorOptimizer.getBeanProperty(java.lang.Object, java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.asm.ASMAccessorOptimizer.getCollectionProperty(java.lang.Object, java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.asm.ASMAccessorOptimizer.getMethod(java.lang.Object, java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.asm.ASMAccessorOptimizer.intPush(int)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.asm.ASMAccessorOptimizer.ldcClassConstant(java.lang.Class)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.asm.ASMAccessorOptimizer.optimizeObjectCreation(char[], java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.asm.ASMAccessorOptimizer.writeLiteralOrSubexpression(java.lang.Object, java.lang.Class)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.asm.ASMAccessorOptimizer.writeOutLiteralWrapped(java.lang.Object)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.refl.ArrayAccessor.toString()</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.refl.ArrayAccessorNest.toString()</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.refl.DynamicSetterAccessor.toString()</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.refl.GetterAccessor.getValue(java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.refl.GetterAccessor.toString()</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.refl.IndexedCharSeqAccessor.toString()</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.refl.IndexedCharSeqAccessorNest.toString()</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.refl.ListAccessor.toString()</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.refl.ListAccessorNest.toString()</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.refl.MapAccessor.toString()</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.refl.MapAccessorNest.toString()</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.refl.ReflectiveAccessorOptimizer.compileConstructor(char[], java.lang.Object, org.mvel.integration.VariableResolverFactory)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.refl.ReflectiveAccessorOptimizer.getCollectionProperty(java.lang.Object, java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.refl.ReflectiveAccessorOptimizer.getMethod(java.lang.Object, java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.refl.ReflectiveAccessorOptimizer.optimizeObjectCreation(char[], java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.refl.ReflectiveAccessorOptimizer.optimizeSetAccessor(char[], java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory, boolean, java.lang.Object)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.refl.SetterAccessor.toString()</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.refl.VariableAccessor.getValue(java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.util.CollectionParser.parseCollection()</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.util.CompilerTools.optimizeAST(org.mvel.ASTLinkedList, boolean)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.util.ExecutionStack.showStack()</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.util.ParseTools.checkNameSafety(java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.util.ParseTools.findClass(org.mvel.integration.VariableResolverFactory, java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.util.ParseTools.getSimpleClassName(java.lang.Class)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.util.ParseTools.handleEscapeSequence(char)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.util.ParseTools.increment(java.lang.Object)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.util.ParseTools.static {}</inbound>
            <feature confirmed="no">
                <name>java.lang.StringBuffer.StringBuffer()</name>
                <inbound type="feature" confirmed="yes">org.mvel.asm.MethodWriter.writeFrameTypes(int, int)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.asm.Type.getConstructorDescriptor(java.lang.reflect.Constructor)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.asm.Type.getDescriptor()</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.asm.Type.getDescriptor(java.lang.Class)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.asm.Type.getMethodDescriptor(java.lang.reflect.Method)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.asm.Type.getMethodDescriptor(org.mvel.asm.Type, org.mvel.asm.Type[])</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.debug.DebugTools.decompile(org.mvel.CompiledExpression, boolean, org.mvel.debug.DebugTools$DecompileContext)</inbound>
            </feature>
            <feature confirmed="no">
                <name>java.lang.StringBuffer.StringBuffer(java.lang.String)</name>
                <inbound type="feature" confirmed="yes">org.mvel.ASTArrayList.showNodeChain()</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.ASTNode.getReducedValue(java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.AbstractParser.nextToken()</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.AbstractParser.reduce()</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.CompileException.CompileException(java.lang.String, char[], int)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.CompileException.CompileException(java.lang.String, char[], int, boolean)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.CompileException.CompileException(java.lang.String, char[], int, java.lang.Exception)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.CompileException.CompileException(java.lang.String, java.util.List)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.ErrorDetail.toString()</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.ExpressionCompiler.compile(org.mvel.ParserContext)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.ExpressionCompiler.verify(org.mvel.ParserContext, org.mvel.ASTNode)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.MVELInterpretedRuntime.parseAndExecuteInterpreted()</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.MVELRuntime.execute(boolean, org.mvel.CompiledExpression, java.lang.Object, org.mvel.integration.VariableResolverFactory)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.MVELSH.main(java.lang.String[])</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.ParseException.ParseException(java.lang.String, char[], int)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.ParserContext.checkForDynamicImport(java.lang.String)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.ParserContext.setImports(java.util.Map)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.PropertyAccessException.PropertyAccessException(java.lang.String)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.PropertyAccessException.PropertyAccessException(java.lang.String, java.lang.Throwable)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.PropertyAccessor.get()</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.PropertyAccessor.getBeanProperty(java.lang.Object, java.lang.String)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.PropertyAccessor.getCollectionProperty(java.lang.Object, java.lang.String)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.PropertyAccessor.getMethod(java.lang.Object, java.lang.String)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.PropertyAccessor.reportCacheSizes()</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.PropertyAccessor.set(java.lang.Object)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.PropertyVerifier.getBeanProperty(java.lang.Class, java.lang.String)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.PropertyVerifier.getMethod(java.lang.Class, java.lang.String)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.TemplateCompiler.compileExpression()</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.TemplateCompiler.parseAlias(char[], int, int, int)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.TemplateCompiler.showCodeNearError()</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.TemplateCompiler.structuredCaptureArray(int)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.TemplateInterpreter.execute(java.lang.Object, java.util.Map, org.mvel.TemplateRegistry)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.TemplateInterpreter.parse(java.io.File, java.lang.Object, java.util.Map, org.mvel.TemplateRegistry)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.UnresolveablePropertyException.UnresolveablePropertyException(org.mvel.ASTNode)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.UnresolveablePropertyException.UnresolveablePropertyException(org.mvel.ASTNode, java.lang.Throwable)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.asm.ClassReader.ClassReader(java.lang.String)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.asm.ClassWriter.newConstItem(java.lang.Object)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.asm.Frame.execute(int, int, org.mvel.asm.ClassWriter, org.mvel.asm.Item)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.asm.Label.toString()</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.asm.Type.getClassName()</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.ast.AssertNode.getReducedValue(java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.ast.AssertNode.getReducedValueAccelerated(java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.ast.BinaryOperation.toString()</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.ast.ForEachNode.getReducedValue(java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.ast.ForEachNode.getReducedValueAccelerated(java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.ast.ImportNode.ImportNode(char[])</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.ast.LineLabel.toString()</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.ast.NewObjectNode.NewObjectNode(char[], int)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.ast.NewObjectNode.getReducedValue(java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.ast.NewObjectNode.getReducedValueAccelerated(java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.ast.PropertyASTNode.initializePropertyNode(java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.ast.StaticImportNode.StaticImportNode(char[], int)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.ast.WithNode.compileWithExpressions()</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.conversion.ArrayCH.convertFrom(java.lang.Object)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.conversion.BigDecimalCH.convertFrom(java.lang.Object)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.conversion.BigIntegerCH.convertFrom(java.lang.Object)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.conversion.BooleanCH.convertFrom(java.lang.Object)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.conversion.ByteCH.convertFrom(java.lang.Object)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.conversion.CharArrayCH.convertFrom(java.lang.Object)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.conversion.CharCH.convertFrom(java.lang.Object)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.conversion.DoubleCH.convertFrom(java.lang.Object)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.conversion.FloatCH.convertFrom(java.lang.Object)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.conversion.IntArrayCH.convertFrom(java.lang.Object)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.conversion.IntegerCH$6.convert(java.lang.Object)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.conversion.IntegerCH$7.convert(java.lang.Object)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.conversion.IntegerCH$8.convert(java.lang.Object)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.conversion.IntegerCH.convertFrom(java.lang.Object)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.conversion.LongCH.convertFrom(java.lang.Object)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.conversion.PrimArrayHandler.convertFrom(java.lang.Object)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.conversion.PrimArrayHandler.handleLooseTypeConversion(java.lang.Class, java.lang.Object[], java.lang.Class)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.conversion.PrimIntArrayCH.convertFrom(java.lang.Object)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.conversion.ShortCH.convertFrom(java.lang.Object)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.debug.DebugTools.decompile(java.io.Serializable)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.debug.DebugTools.decompile(org.mvel.CompiledExpression, boolean, org.mvel.debug.DebugTools$DecompileContext)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.integration.impl.ClassImportResolverFactory.isResolveable(java.lang.String)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.integration.impl.ItemResolverFactory.createVariable(java.lang.String, java.lang.Object, java.lang.Class)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.integration.impl.MapVariableResolver.setValue(java.lang.Object)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.integration.impl.MapVariableResolverFactory.createVariable(java.lang.String, java.lang.Object, java.lang.Class)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.math.IEEEFloatingPointMath.doOperationNonNumeric(java.lang.Object, int, java.lang.Object)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.math.IEEEFloatingPointMath.doOperationsSameType(int, java.lang.Object, int, java.lang.Object)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.math.IEEEFloatingPointMath.getBigDecimalFromType(java.lang.Object, int)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.math.JDK14CompatabilityMath.doOperationNonNumeric(java.lang.Object, int, java.lang.Object)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.math.JDK14CompatabilityMath.doOperationsSameType(int, java.lang.Object, int, java.lang.Object)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.math.JDK14CompatabilityMath.getBigDecimalFromType(java.lang.Object, int)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.asm.ASMAccessorOptimizer._finishJIT()</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.asm.ASMAccessorOptimizer._getAccessor(java.lang.Object)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.asm.ASMAccessorOptimizer._initJIT()</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.asm.ASMAccessorOptimizer._initializeAccessor()</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.asm.ASMAccessorOptimizer.buildInputs()</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.asm.ASMAccessorOptimizer.dumpAdvancedDebugging()</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.asm.ASMAccessorOptimizer.getBeanProperty(java.lang.Object, java.lang.String)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.asm.ASMAccessorOptimizer.getCollectionProperty(java.lang.Object, java.lang.String)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.asm.ASMAccessorOptimizer.getMethod(java.lang.Object, java.lang.String)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.asm.ASMAccessorOptimizer.intPush(int)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.asm.ASMAccessorOptimizer.ldcClassConstant(java.lang.Class)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.asm.ASMAccessorOptimizer.optimizeObjectCreation(char[], java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.asm.ASMAccessorOptimizer.writeLiteralOrSubexpression(java.lang.Object, java.lang.Class)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.asm.ASMAccessorOptimizer.writeOutLiteralWrapped(java.lang.Object)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.refl.ArrayAccessor.toString()</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.refl.ArrayAccessorNest.toString()</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.refl.DynamicSetterAccessor.toString()</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.refl.GetterAccessor.getValue(java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.refl.GetterAccessor.toString()</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.refl.IndexedCharSeqAccessor.toString()</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.refl.IndexedCharSeqAccessorNest.toString()</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.refl.ListAccessor.toString()</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.refl.ListAccessorNest.toString()</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.refl.MapAccessor.toString()</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.refl.MapAccessorNest.toString()</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.refl.ReflectiveAccessorOptimizer.compileConstructor(char[], java.lang.Object, org.mvel.integration.VariableResolverFactory)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.refl.ReflectiveAccessorOptimizer.getCollectionProperty(java.lang.Object, java.lang.String)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.refl.ReflectiveAccessorOptimizer.getMethod(java.lang.Object, java.lang.String)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.refl.ReflectiveAccessorOptimizer.optimizeObjectCreation(char[], java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.refl.ReflectiveAccessorOptimizer.optimizeSetAccessor(char[], java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory, boolean, java.lang.Object)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.refl.SetterAccessor.toString()</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.refl.VariableAccessor.getValue(java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.util.CollectionParser.parseCollection()</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.util.CompilerTools.optimizeAST(org.mvel.ASTLinkedList, boolean)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.util.ExecutionStack.showStack()</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.util.ParseTools.checkNameSafety(java.lang.String)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.util.ParseTools.findClass(org.mvel.integration.VariableResolverFactory, java.lang.String)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.util.ParseTools.getSimpleClassName(java.lang.Class)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.util.ParseTools.handleEscapeSequence(char)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.util.ParseTools.increment(java.lang.Object)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.util.ParseTools.static {}</inbound>
            </feature>
            <feature confirmed="no">
                <name>java.lang.StringBuffer.append(char)</name>
                <inbound type="feature" confirmed="yes">org.mvel.asm.MethodWriter.writeFrameTypes(int, int)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.asm.Type.getConstructorDescriptor(java.lang.reflect.Constructor)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.asm.Type.getDescriptor(java.lang.StringBuffer)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.asm.Type.getDescriptor(java.lang.StringBuffer, java.lang.Class)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.asm.Type.getMethodDescriptor(java.lang.reflect.Method)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.asm.Type.getMethodDescriptor(org.mvel.asm.Type, org.mvel.asm.Type[])</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.util.CollectionParser.parseCollection()</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.util.ParseTools.handleEscapeSequence(char)</inbound>
            </feature>
            <feature confirmed="no">
                <name>java.lang.StringBuffer.append(char[], int, int)</name>
                <inbound type="feature" confirmed="yes">org.mvel.asm.Type.getDescriptor(java.lang.StringBuffer)</inbound>
            </feature>
            <feature confirmed="no">
                <name>java.lang.StringBuffer.append(double)</name>
                <inbound type="feature" confirmed="yes">org.mvel.util.ParseTools.static {}</inbound>
            </feature>
            <feature confirmed="no">
                <name>java.lang.StringBuffer.append(int)</name>
                <inbound type="feature" confirmed="yes">org.mvel.ASTArrayList.showNodeChain()</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.AbstractParser.nextToken()</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.ErrorDetail.toString()</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.ExpressionCompiler.compile(org.mvel.ParserContext)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.ParseException.ParseException(java.lang.String, char[], int)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.PropertyAccessor.getCollectionProperty(java.lang.Object, java.lang.String)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.PropertyAccessor.getMethod(java.lang.Object, java.lang.String)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.PropertyAccessor.reportCacheSizes()</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.TemplateCompiler.compileExpression()</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.TemplateCompiler.parseAlias(char[], int, int, int)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.TemplateCompiler.structuredCaptureArray(int)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.TemplateInterpreter.execute(java.lang.Object, java.util.Map, org.mvel.TemplateRegistry)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.asm.Label.toString()</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.ast.LineLabel.toString()</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.debug.DebugTools.decompile(org.mvel.CompiledExpression, boolean, org.mvel.debug.DebugTools$DecompileContext)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.asm.ASMAccessorOptimizer._finishJIT()</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.asm.ASMAccessorOptimizer._getAccessor(java.lang.Object)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.asm.ASMAccessorOptimizer._initJIT()</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.asm.ASMAccessorOptimizer.buildInputs()</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.asm.ASMAccessorOptimizer.getMethod(java.lang.Object, java.lang.String)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.asm.ASMAccessorOptimizer.intPush(int)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.asm.ASMAccessorOptimizer.optimizeObjectCreation(char[], java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.asm.ASMAccessorOptimizer.writeLiteralOrSubexpression(java.lang.Object, java.lang.Class)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.refl.ArrayAccessor.toString()</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.refl.IndexedCharSeqAccessor.toString()</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.refl.ListAccessor.toString()</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.refl.ReflectiveAccessorOptimizer.getMethod(java.lang.Object, java.lang.String)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.util.CollectionParser.parseCollection()</inbound>
            </feature>
            <feature confirmed="no">
                <name>java.lang.StringBuffer.append(java.lang.Object)</name>
                <inbound type="feature" confirmed="yes">org.mvel.ASTArrayList.showNodeChain()</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.AbstractParser.nextToken()</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.CompileException.CompileException(java.lang.String, char[], int)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.CompileException.CompileException(java.lang.String, char[], int, boolean)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.CompileException.CompileException(java.lang.String, char[], int, java.lang.Exception)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.MVELSH.main(java.lang.String[])</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.ParserContext.setImports(java.util.Map)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.PropertyAccessor.get()</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.PropertyAccessor.set(java.lang.Object)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.TemplateCompiler.compileExpression()</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.TemplateCompiler.structuredCaptureArray(int)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.asm.ClassWriter.newConstItem(java.lang.Object)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.debug.DebugTools.decompile(java.io.Serializable)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.debug.DebugTools.decompile(org.mvel.CompiledExpression, boolean, org.mvel.debug.DebugTools$DecompileContext)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.integration.impl.MapVariableResolverFactory.createVariable(java.lang.String, java.lang.Object, java.lang.Class)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.math.IEEEFloatingPointMath.getBigDecimalFromType(java.lang.Object, int)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.math.JDK14CompatabilityMath.getBigDecimalFromType(java.lang.Object, int)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.asm.ASMAccessorOptimizer._initializeAccessor()</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.asm.ASMAccessorOptimizer.getBeanProperty(java.lang.Object, java.lang.String)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.asm.ASMAccessorOptimizer.getCollectionProperty(java.lang.Object, java.lang.String)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.asm.ASMAccessorOptimizer.getMethod(java.lang.Object, java.lang.String)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.asm.ASMAccessorOptimizer.ldcClassConstant(java.lang.Class)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.asm.ASMAccessorOptimizer.writeOutLiteralWrapped(java.lang.Object)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.refl.ArrayAccessorNest.toString()</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.refl.IndexedCharSeqAccessorNest.toString()</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.refl.ListAccessorNest.toString()</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.refl.MapAccessor.toString()</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.refl.MapAccessorNest.toString()</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.refl.ReflectiveAccessorOptimizer.optimizeSetAccessor(char[], java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory, boolean, java.lang.Object)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.util.ExecutionStack.showStack()</inbound>
            </feature>
            <feature confirmed="no">
                <name>java.lang.StringBuffer.append(java.lang.String)</name>
                <inbound type="feature" confirmed="yes">org.mvel.ASTArrayList.showNodeChain()</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.ASTNode.getReducedValue(java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.AbstractParser.nextToken()</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.AbstractParser.reduce()</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.CompileException.CompileException(java.lang.String, char[], int)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.CompileException.CompileException(java.lang.String, char[], int, boolean)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.CompileException.CompileException(java.lang.String, char[], int, java.lang.Exception)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.CompileException.CompileException(java.lang.String, java.util.List)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.ErrorDetail.toString()</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.ExpressionCompiler.compile(org.mvel.ParserContext)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.ExpressionCompiler.verify(org.mvel.ParserContext, org.mvel.ASTNode)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.MVELInterpretedRuntime.parseAndExecuteInterpreted()</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.MVELRuntime.execute(boolean, org.mvel.CompiledExpression, java.lang.Object, org.mvel.integration.VariableResolverFactory)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.MVELSH.main(java.lang.String[])</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.ParseException.ParseException(java.lang.String, char[], int)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.ParserContext.checkForDynamicImport(java.lang.String)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.ParserContext.setImports(java.util.Map)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.PropertyAccessException.PropertyAccessException(java.lang.String)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.PropertyAccessException.PropertyAccessException(java.lang.String, java.lang.Throwable)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.PropertyAccessor.get()</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.PropertyAccessor.getBeanProperty(java.lang.Object, java.lang.String)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.PropertyAccessor.getCollectionProperty(java.lang.Object, java.lang.String)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.PropertyAccessor.getMethod(java.lang.Object, java.lang.String)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.PropertyAccessor.reportCacheSizes()</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.PropertyAccessor.set(java.lang.Object)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.PropertyVerifier.getBeanProperty(java.lang.Class, java.lang.String)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.PropertyVerifier.getMethod(java.lang.Class, java.lang.String)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.TemplateCompiler.compileExpression()</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.TemplateCompiler.showCodeNearError()</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.TemplateCompiler.structuredCaptureArray(int)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.TemplateInterpreter.execute(java.lang.Object, java.util.Map, org.mvel.TemplateRegistry)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.TemplateInterpreter.parse(java.io.File, java.lang.Object, java.util.Map, org.mvel.TemplateRegistry)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.UnresolveablePropertyException.UnresolveablePropertyException(org.mvel.ASTNode)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.UnresolveablePropertyException.UnresolveablePropertyException(org.mvel.ASTNode, java.lang.Throwable)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.asm.ClassReader.ClassReader(java.lang.String)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.asm.Frame.execute(int, int, org.mvel.asm.ClassWriter, org.mvel.asm.Item)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.asm.MethodWriter.writeFrameTypes(int, int)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.asm.Type.getClassName()</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.asm.Type.getConstructorDescriptor(java.lang.reflect.Constructor)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.ast.AssertNode.getReducedValue(java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.ast.AssertNode.getReducedValueAccelerated(java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.ast.BinaryOperation.toString()</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.ast.ForEachNode.getReducedValue(java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.ast.ForEachNode.getReducedValueAccelerated(java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.ast.ImportNode.ImportNode(char[])</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.ast.LineLabel.toString()</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.ast.NewObjectNode.NewObjectNode(char[], int)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.ast.NewObjectNode.getReducedValue(java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.ast.NewObjectNode.getReducedValueAccelerated(java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.ast.PropertyASTNode.initializePropertyNode(java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.ast.StaticImportNode.StaticImportNode(char[], int)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.ast.WithNode.compileWithExpressions()</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.conversion.ArrayCH.convertFrom(java.lang.Object)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.conversion.BigDecimalCH.convertFrom(java.lang.Object)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.conversion.BigIntegerCH.convertFrom(java.lang.Object)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.conversion.BooleanCH.convertFrom(java.lang.Object)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.conversion.ByteCH.convertFrom(java.lang.Object)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.conversion.CharArrayCH.convertFrom(java.lang.Object)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.conversion.CharCH.convertFrom(java.lang.Object)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.conversion.DoubleCH.convertFrom(java.lang.Object)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.conversion.FloatCH.convertFrom(java.lang.Object)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.conversion.IntArrayCH.convertFrom(java.lang.Object)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.conversion.IntegerCH$6.convert(java.lang.Object)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.conversion.IntegerCH$7.convert(java.lang.Object)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.conversion.IntegerCH$8.convert(java.lang.Object)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.conversion.IntegerCH.convertFrom(java.lang.Object)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.conversion.LongCH.convertFrom(java.lang.Object)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.conversion.PrimArrayHandler.convertFrom(java.lang.Object)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.conversion.PrimArrayHandler.handleLooseTypeConversion(java.lang.Class, java.lang.Object[], java.lang.Class)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.conversion.PrimIntArrayCH.convertFrom(java.lang.Object)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.conversion.ShortCH.convertFrom(java.lang.Object)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.debug.DebugTools.decompile(java.io.Serializable)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.debug.DebugTools.decompile(org.mvel.CompiledExpression, boolean, org.mvel.debug.DebugTools$DecompileContext)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.integration.impl.ClassImportResolverFactory.isResolveable(java.lang.String)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.integration.impl.ItemResolverFactory.createVariable(java.lang.String, java.lang.Object, java.lang.Class)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.integration.impl.MapVariableResolver.setValue(java.lang.Object)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.integration.impl.MapVariableResolverFactory.createVariable(java.lang.String, java.lang.Object, java.lang.Class)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.math.IEEEFloatingPointMath.doOperationNonNumeric(java.lang.Object, int, java.lang.Object)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.math.IEEEFloatingPointMath.doOperationsSameType(int, java.lang.Object, int, java.lang.Object)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.math.IEEEFloatingPointMath.getBigDecimalFromType(java.lang.Object, int)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.math.JDK14CompatabilityMath.doOperationNonNumeric(java.lang.Object, int, java.lang.Object)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.math.JDK14CompatabilityMath.doOperationsSameType(int, java.lang.Object, int, java.lang.Object)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.math.JDK14CompatabilityMath.getBigDecimalFromType(java.lang.Object, int)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.asm.ASMAccessorOptimizer._finishJIT()</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.asm.ASMAccessorOptimizer._getAccessor(java.lang.Object)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.asm.ASMAccessorOptimizer._initJIT()</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.asm.ASMAccessorOptimizer._initializeAccessor()</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.asm.ASMAccessorOptimizer.dumpAdvancedDebugging()</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.asm.ASMAccessorOptimizer.getBeanProperty(java.lang.Object, java.lang.String)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.asm.ASMAccessorOptimizer.getCollectionProperty(java.lang.Object, java.lang.String)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.asm.ASMAccessorOptimizer.getMethod(java.lang.Object, java.lang.String)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.asm.ASMAccessorOptimizer.ldcClassConstant(java.lang.Class)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.asm.ASMAccessorOptimizer.optimizeObjectCreation(char[], java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.refl.ArrayAccessor.toString()</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.refl.ArrayAccessorNest.toString()</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.refl.DynamicSetterAccessor.toString()</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.refl.GetterAccessor.getValue(java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.refl.GetterAccessor.toString()</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.refl.IndexedCharSeqAccessor.toString()</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.refl.IndexedCharSeqAccessorNest.toString()</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.refl.ListAccessor.toString()</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.refl.ListAccessorNest.toString()</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.refl.MapAccessor.toString()</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.refl.MapAccessorNest.toString()</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.refl.ReflectiveAccessorOptimizer.compileConstructor(char[], java.lang.Object, org.mvel.integration.VariableResolverFactory)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.refl.ReflectiveAccessorOptimizer.getCollectionProperty(java.lang.Object, java.lang.String)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.refl.ReflectiveAccessorOptimizer.getMethod(java.lang.Object, java.lang.String)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.refl.ReflectiveAccessorOptimizer.optimizeObjectCreation(char[], java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.refl.ReflectiveAccessorOptimizer.optimizeSetAccessor(char[], java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory, boolean, java.lang.Object)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.refl.SetterAccessor.toString()</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.refl.VariableAccessor.getValue(java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.util.CollectionParser.parseCollection()</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.util.CompilerTools.optimizeAST(org.mvel.ASTLinkedList, boolean)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.util.ParseTools.checkNameSafety(java.lang.String)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.util.ParseTools.findClass(org.mvel.integration.VariableResolverFactory, java.lang.String)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.util.ParseTools.getSimpleClassName(java.lang.Class)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.util.ParseTools.increment(java.lang.Object)</inbound>
            </feature>
            <feature confirmed="no">
                <name>java.lang.StringBuffer.append(long)</name>
                <inbound type="feature" confirmed="yes">org.mvel.MVELSH.main(java.lang.String[])</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.asm.ASMAccessorOptimizer._initJIT()</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.asm.ASMAccessorOptimizer._initializeAccessor()</inbound>
            </feature>
            <feature confirmed="no">
                <name>java.lang.StringBuffer.toString()</name>
                <inbound type="feature" confirmed="yes">org.mvel.ASTArrayList.showNodeChain()</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.ASTNode.getReducedValue(java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.AbstractParser.nextToken()</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.AbstractParser.reduce()</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.CompileException.CompileException(java.lang.String, char[], int)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.CompileException.CompileException(java.lang.String, char[], int, boolean)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.CompileException.CompileException(java.lang.String, char[], int, java.lang.Exception)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.CompileException.CompileException(java.lang.String, java.util.List)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.ErrorDetail.toString()</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.ExpressionCompiler.compile(org.mvel.ParserContext)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.ExpressionCompiler.verify(org.mvel.ParserContext, org.mvel.ASTNode)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.MVELInterpretedRuntime.parseAndExecuteInterpreted()</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.MVELRuntime.execute(boolean, org.mvel.CompiledExpression, java.lang.Object, org.mvel.integration.VariableResolverFactory)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.MVELSH.main(java.lang.String[])</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.ParseException.ParseException(java.lang.String, char[], int)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.ParserContext.checkForDynamicImport(java.lang.String)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.ParserContext.setImports(java.util.Map)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.PropertyAccessException.PropertyAccessException(java.lang.String)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.PropertyAccessException.PropertyAccessException(java.lang.String, java.lang.Throwable)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.PropertyAccessor.get()</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.PropertyAccessor.getBeanProperty(java.lang.Object, java.lang.String)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.PropertyAccessor.getCollectionProperty(java.lang.Object, java.lang.String)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.PropertyAccessor.getMethod(java.lang.Object, java.lang.String)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.PropertyAccessor.reportCacheSizes()</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.PropertyAccessor.set(java.lang.Object)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.PropertyVerifier.getBeanProperty(java.lang.Class, java.lang.String)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.PropertyVerifier.getMethod(java.lang.Class, java.lang.String)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.TemplateCompiler.compileExpression()</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.TemplateCompiler.parseAlias(char[], int, int, int)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.TemplateCompiler.showCodeNearError()</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.TemplateCompiler.structuredCaptureArray(int)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.TemplateInterpreter.execute(java.lang.Object, java.util.Map, org.mvel.TemplateRegistry)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.TemplateInterpreter.parse(java.io.File, java.lang.Object, java.util.Map, org.mvel.TemplateRegistry)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.UnresolveablePropertyException.UnresolveablePropertyException(org.mvel.ASTNode)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.UnresolveablePropertyException.UnresolveablePropertyException(org.mvel.ASTNode, java.lang.Throwable)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.asm.ClassReader.ClassReader(java.lang.String)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.asm.ClassWriter.newConstItem(java.lang.Object)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.asm.Frame.execute(int, int, org.mvel.asm.ClassWriter, org.mvel.asm.Item)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.asm.Label.toString()</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.asm.MethodWriter.writeFrameTypes(int, int)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.asm.Type.getClassName()</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.asm.Type.getConstructorDescriptor(java.lang.reflect.Constructor)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.asm.Type.getDescriptor()</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.asm.Type.getDescriptor(java.lang.Class)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.asm.Type.getMethodDescriptor(java.lang.reflect.Method)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.asm.Type.getMethodDescriptor(org.mvel.asm.Type, org.mvel.asm.Type[])</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.ast.AssertNode.getReducedValue(java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.ast.AssertNode.getReducedValueAccelerated(java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.ast.BinaryOperation.toString()</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.ast.ForEachNode.getReducedValue(java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.ast.ForEachNode.getReducedValueAccelerated(java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.ast.ImportNode.ImportNode(char[])</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.ast.LineLabel.toString()</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.ast.NewObjectNode.NewObjectNode(char[], int)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.ast.NewObjectNode.getReducedValue(java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.ast.NewObjectNode.getReducedValueAccelerated(java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.ast.PropertyASTNode.initializePropertyNode(java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.ast.StaticImportNode.StaticImportNode(char[], int)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.ast.WithNode.compileWithExpressions()</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.conversion.ArrayCH.convertFrom(java.lang.Object)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.conversion.BigDecimalCH.convertFrom(java.lang.Object)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.conversion.BigIntegerCH.convertFrom(java.lang.Object)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.conversion.BooleanCH.convertFrom(java.lang.Object)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.conversion.ByteCH.convertFrom(java.lang.Object)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.conversion.CharArrayCH.convertFrom(java.lang.Object)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.conversion.CharCH.convertFrom(java.lang.Object)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.conversion.DoubleCH.convertFrom(java.lang.Object)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.conversion.FloatCH.convertFrom(java.lang.Object)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.conversion.IntArrayCH.convertFrom(java.lang.Object)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.conversion.IntegerCH$6.convert(java.lang.Object)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.conversion.IntegerCH$7.convert(java.lang.Object)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.conversion.IntegerCH$8.convert(java.lang.Object)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.conversion.IntegerCH.convertFrom(java.lang.Object)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.conversion.LongCH.convertFrom(java.lang.Object)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.conversion.PrimArrayHandler.convertFrom(java.lang.Object)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.conversion.PrimArrayHandler.handleLooseTypeConversion(java.lang.Class, java.lang.Object[], java.lang.Class)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.conversion.PrimIntArrayCH.convertFrom(java.lang.Object)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.conversion.ShortCH.convertFrom(java.lang.Object)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.debug.DebugTools.decompile(java.io.Serializable)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.debug.DebugTools.decompile(org.mvel.CompiledExpression, boolean, org.mvel.debug.DebugTools$DecompileContext)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.integration.impl.ClassImportResolverFactory.isResolveable(java.lang.String)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.integration.impl.ItemResolverFactory.createVariable(java.lang.String, java.lang.Object, java.lang.Class)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.integration.impl.MapVariableResolver.setValue(java.lang.Object)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.integration.impl.MapVariableResolverFactory.createVariable(java.lang.String, java.lang.Object, java.lang.Class)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.math.IEEEFloatingPointMath.doOperationNonNumeric(java.lang.Object, int, java.lang.Object)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.math.IEEEFloatingPointMath.doOperationsSameType(int, java.lang.Object, int, java.lang.Object)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.math.IEEEFloatingPointMath.getBigDecimalFromType(java.lang.Object, int)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.math.JDK14CompatabilityMath.doOperationNonNumeric(java.lang.Object, int, java.lang.Object)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.math.JDK14CompatabilityMath.doOperationsSameType(int, java.lang.Object, int, java.lang.Object)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.math.JDK14CompatabilityMath.getBigDecimalFromType(java.lang.Object, int)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.asm.ASMAccessorOptimizer._finishJIT()</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.asm.ASMAccessorOptimizer._getAccessor(java.lang.Object)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.asm.ASMAccessorOptimizer._initJIT()</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.asm.ASMAccessorOptimizer._initializeAccessor()</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.asm.ASMAccessorOptimizer.buildInputs()</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.asm.ASMAccessorOptimizer.dumpAdvancedDebugging()</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.asm.ASMAccessorOptimizer.getBeanProperty(java.lang.Object, java.lang.String)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.asm.ASMAccessorOptimizer.getCollectionProperty(java.lang.Object, java.lang.String)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.asm.ASMAccessorOptimizer.getMethod(java.lang.Object, java.lang.String)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.asm.ASMAccessorOptimizer.intPush(int)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.asm.ASMAccessorOptimizer.ldcClassConstant(java.lang.Class)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.asm.ASMAccessorOptimizer.optimizeObjectCreation(char[], java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.asm.ASMAccessorOptimizer.writeLiteralOrSubexpression(java.lang.Object, java.lang.Class)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.asm.ASMAccessorOptimizer.writeOutLiteralWrapped(java.lang.Object)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.refl.ArrayAccessor.toString()</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.refl.ArrayAccessorNest.toString()</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.refl.DynamicSetterAccessor.toString()</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.refl.GetterAccessor.getValue(java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.refl.GetterAccessor.toString()</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.refl.IndexedCharSeqAccessor.toString()</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.refl.IndexedCharSeqAccessorNest.toString()</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.refl.ListAccessor.toString()</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.refl.ListAccessorNest.toString()</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.refl.MapAccessor.toString()</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.refl.MapAccessorNest.toString()</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.refl.ReflectiveAccessorOptimizer.compileConstructor(char[], java.lang.Object, org.mvel.integration.VariableResolverFactory)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.refl.ReflectiveAccessorOptimizer.getCollectionProperty(java.lang.Object, java.lang.String)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.refl.ReflectiveAccessorOptimizer.getMethod(java.lang.Object, java.lang.String)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.refl.ReflectiveAccessorOptimizer.optimizeObjectCreation(char[], java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.refl.ReflectiveAccessorOptimizer.optimizeSetAccessor(char[], java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory, boolean, java.lang.Object)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.refl.SetterAccessor.toString()</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.refl.VariableAccessor.getValue(java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.util.CollectionParser.parseCollection()</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.util.CompilerTools.optimizeAST(org.mvel.ASTLinkedList, boolean)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.util.ExecutionStack.showStack()</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.util.ParseTools.checkNameSafety(java.lang.String)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.util.ParseTools.findClass(org.mvel.integration.VariableResolverFactory, java.lang.String)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.util.ParseTools.getSimpleClassName(java.lang.Class)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.util.ParseTools.handleEscapeSequence(char)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.util.ParseTools.increment(java.lang.Object)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.util.ParseTools.static {}</inbound>
            </feature>
        </class>
        <class confirmed="no">
            <name>java.lang.String[]</name>
            <inbound type="feature" confirmed="yes">org.mvel.TemplateCompiler.compileExpression()</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.asm.ClassReader.accept(org.mvel.asm.ClassVisitor, org.mvel.asm.Attribute[], int)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.conversion.IntArrayCH$1.convert(java.lang.Object)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.conversion.PrimArrayHandler$2.convert(java.lang.Object)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.conversion.PrimIntArrayCH$1.convert(java.lang.Object)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.util.ParseTools.parseParameterList(char[], int, int)</inbound>
        </class>
        <class confirmed="no">
            <name>java.lang.System</name>
            <feature confirmed="no">
                <name>java.lang.System.arraycopy(java.lang.Object, int, java.lang.Object, int, int)</name>
                <inbound type="feature" confirmed="yes">org.mvel.TemplateCompiler.structuredCaptureArray(int)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.asm.Attribute.read(org.mvel.asm.ClassReader, int, int, char[], int, org.mvel.asm.Label[])</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.asm.ByteVector.enlarge(int)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.asm.ByteVector.putByteArray(byte[], int, int)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.asm.ClassReader.readClass(java.io.InputStream)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.asm.ClassWriter.addType(org.mvel.asm.Item)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.asm.Frame.init(int)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.asm.Frame.push(int)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.asm.Frame.set(int, int)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.asm.Label.addReference(int, int)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.asm.MethodWriter.resizeInstructions()</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.util.CollectionParser.subset(char[], int, int)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.util.ParseTools.createShortFormOperativeAssignment(java.lang.String, char[], int)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.util.ReflectionUtil.getGetter(java.lang.String)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.util.ReflectionUtil.getIsGetter(java.lang.String)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.util.StringAppender.getChars(int, int)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.util.StringAppender.grow(int)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.util.StringAppender.toChars()</inbound>
            </feature>
            <feature confirmed="no">
                <name>java.lang.System.currentTimeMillis()</name>
                <inbound type="feature" confirmed="yes">org.mvel.MVELSH.main(java.lang.String[])</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.asm.ASMAccessorOptimizer._initJIT()</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.asm.ASMAccessorOptimizer._initializeAccessor()</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.asm.ASMAccessorOptimizer.optimizeAccessor(char[], java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory, boolean)</inbound>
            </feature>
            <feature confirmed="no">
                <name>java.lang.System.err</name>
                <inbound type="feature" confirmed="yes">org.mvel.CompileException.CompileException(java.lang.String, java.util.List)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.optimizers.OptimizerFactory.static {}</inbound>
            </feature>
            <feature confirmed="no">
                <name>java.lang.System.getProperty(java.lang.String)</name>
                <inbound type="feature" confirmed="yes">org.mvel.AbstractParser.static {}</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.MVEL.static {}</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.asm.ASMAccessorOptimizer.static {}</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.util.ParseTools.static {}</inbound>
            </feature>
            <feature confirmed="no">
                <name>java.lang.System.identityHashCode(java.lang.Object)</name>
                <inbound type="feature" confirmed="yes">org.mvel.asm.Label.toString()</inbound>
            </feature>
            <feature confirmed="no">
                <name>java.lang.System.in</name>
                <inbound type="feature" confirmed="yes">org.mvel.MVELSH.main(java.lang.String[])</inbound>
            </feature>
            <feature confirmed="no">
                <name>java.lang.System.out</name>
                <inbound type="feature" confirmed="yes">org.mvel.MVELSH.main(java.lang.String[])</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.MVELSH.showHelp()</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.PropertyAccessor.reportCacheSizes()</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.TemplateCompiler.compileExpression()</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.asm.ASMAccessorOptimizer._initializeAccessor()</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.asm.ASMAccessorOptimizer.dumpAdvancedDebugging()</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.util.CompilerTools.optimizeAST(org.mvel.ASTLinkedList, boolean)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.util.ExecutionStack.showStack()</inbound>
            </feature>
        </class>
        <class confirmed="no">
            <name>java.lang.Thread</name>
            <inbound type="feature" confirmed="yes">org.mvel.ASTNode.tryStaticAccess(java.lang.Object, org.mvel.integration.VariableResolverFactory)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.AbstractParser.reduce()</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.AbstractParser.static {}</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.MVELRuntime.execute(boolean, org.mvel.CompiledExpression, java.lang.Object, org.mvel.integration.VariableResolverFactory)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.ParserContext.checkForDynamicImport(java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.asm.ClassWriter.getCommonSuperClass(java.lang.String, java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.ast.ImportNode.ImportNode(char[])</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.ast.NewObjectNode.NewObjectNode(char[], int)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.ast.NewObjectNode.getReducedValue(java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.ast.StaticImportNode.StaticImportNode(char[], int)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.optimizers.AbstractOptimizer.tryStaticAccess()</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.optimizers.OptimizerFactory.static {}</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.asm.ASMAccessorOptimizer.static {}</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.refl.ReflectiveAccessorOptimizer.compileConstructor(char[], java.lang.Object, org.mvel.integration.VariableResolverFactory)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.util.ParseTools.createClass(java.lang.String)</inbound>
            <feature confirmed="no">
                <name>java.lang.Thread.currentThread()</name>
                <inbound type="feature" confirmed="yes">org.mvel.ASTNode.tryStaticAccess(java.lang.Object, org.mvel.integration.VariableResolverFactory)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.AbstractParser.reduce()</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.AbstractParser.static {}</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.MVELRuntime.execute(boolean, org.mvel.CompiledExpression, java.lang.Object, org.mvel.integration.VariableResolverFactory)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.ParserContext.checkForDynamicImport(java.lang.String)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.asm.ClassWriter.getCommonSuperClass(java.lang.String, java.lang.String)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.ast.ImportNode.ImportNode(char[])</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.ast.NewObjectNode.NewObjectNode(char[], int)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.ast.NewObjectNode.getReducedValue(java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.ast.StaticImportNode.StaticImportNode(char[], int)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.optimizers.AbstractOptimizer.tryStaticAccess()</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.optimizers.OptimizerFactory.static {}</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.asm.ASMAccessorOptimizer.static {}</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.refl.ReflectiveAccessorOptimizer.compileConstructor(char[], java.lang.Object, org.mvel.integration.VariableResolverFactory)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.util.ParseTools.createClass(java.lang.String)</inbound>
            </feature>
            <feature confirmed="no">
                <name>java.lang.Thread.getContextClassLoader()</name>
                <inbound type="feature" confirmed="yes">org.mvel.ASTNode.tryStaticAccess(java.lang.Object, org.mvel.integration.VariableResolverFactory)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.AbstractParser.reduce()</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.AbstractParser.static {}</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.MVELRuntime.execute(boolean, org.mvel.CompiledExpression, java.lang.Object, org.mvel.integration.VariableResolverFactory)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.ParserContext.checkForDynamicImport(java.lang.String)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.asm.ClassWriter.getCommonSuperClass(java.lang.String, java.lang.String)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.ast.ImportNode.ImportNode(char[])</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.ast.NewObjectNode.NewObjectNode(char[], int)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.ast.NewObjectNode.getReducedValue(java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.ast.StaticImportNode.StaticImportNode(char[], int)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.optimizers.AbstractOptimizer.tryStaticAccess()</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.optimizers.OptimizerFactory.static {}</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.asm.ASMAccessorOptimizer.static {}</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.refl.ReflectiveAccessorOptimizer.compileConstructor(char[], java.lang.Object, org.mvel.integration.VariableResolverFactory)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.util.ParseTools.createClass(java.lang.String)</inbound>
            </feature>
        </class>
        <class confirmed="no">
            <name>java.lang.ThreadLocal</name>
            <inbound type="feature" confirmed="yes">org.mvel.AbstractParser.contextControl(int, org.mvel.ParserContext, org.mvel.AbstractParser)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.AbstractParser.createPropertyToken(int, int)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.AbstractParser.getCurrentSourceFileName()</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.AbstractParser.getParserContext()</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.AbstractParser.parserContext</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.ExpressionCompiler._compile()</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.MVELInterpretedRuntime.parse()</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.MVELRuntime.clearAllBreakpoints()</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.MVELRuntime.debuggerContext</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.MVELRuntime.ensureDebuggerContext()</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.MVELRuntime.execute(boolean, org.mvel.CompiledExpression, java.lang.Object, org.mvel.integration.VariableResolverFactory)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.MVELRuntime.hasBreakpoints()</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.MVELRuntime.hasDebuggerContext()</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.MVELRuntime.registerBreakpoint(java.lang.String, int)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.MVELRuntime.removeBreakpoint(java.lang.String, int)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.MVELRuntime.resetDebugger()</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.MVELRuntime.setThreadDebugger(org.mvel.debug.Debugger)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.optimizers.OptimizerFactory.getThreadAccessorOptimizer()</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.optimizers.OptimizerFactory.setThreadAccessorOptimizer(java.lang.Class)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.optimizers.OptimizerFactory.threadOptimizer</inbound>
            <feature confirmed="no">
                <name>java.lang.ThreadLocal.ThreadLocal()</name>
                <inbound type="feature" confirmed="yes">org.mvel.AbstractParser.contextControl(int, org.mvel.ParserContext, org.mvel.AbstractParser)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.MVELRuntime.ensureDebuggerContext()</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.optimizers.OptimizerFactory.getThreadAccessorOptimizer()</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.optimizers.OptimizerFactory.setThreadAccessorOptimizer(java.lang.Class)</inbound>
            </feature>
            <feature confirmed="no">
                <name>java.lang.ThreadLocal.get()</name>
                <inbound type="feature" confirmed="yes">org.mvel.AbstractParser.contextControl(int, org.mvel.ParserContext, org.mvel.AbstractParser)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.AbstractParser.createPropertyToken(int, int)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.AbstractParser.getCurrentSourceFileName()</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.AbstractParser.getParserContext()</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.MVELInterpretedRuntime.parse()</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.MVELRuntime.clearAllBreakpoints()</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.MVELRuntime.ensureDebuggerContext()</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.MVELRuntime.execute(boolean, org.mvel.CompiledExpression, java.lang.Object, org.mvel.integration.VariableResolverFactory)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.MVELRuntime.hasBreakpoints()</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.MVELRuntime.hasDebuggerContext()</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.MVELRuntime.registerBreakpoint(java.lang.String, int)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.MVELRuntime.removeBreakpoint(java.lang.String, int)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.MVELRuntime.setThreadDebugger(org.mvel.debug.Debugger)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.optimizers.OptimizerFactory.getThreadAccessorOptimizer()</inbound>
            </feature>
            <feature confirmed="no">
                <name>java.lang.ThreadLocal.set(java.lang.Object)</name>
                <inbound type="feature" confirmed="yes">org.mvel.AbstractParser.contextControl(int, org.mvel.ParserContext, org.mvel.AbstractParser)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.ExpressionCompiler._compile()</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.MVELRuntime.ensureDebuggerContext()</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.optimizers.OptimizerFactory.getThreadAccessorOptimizer()</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.optimizers.OptimizerFactory.setThreadAccessorOptimizer(java.lang.Class)</inbound>
            </feature>
        </class>
        <class confirmed="no">
            <name>java.lang.Throwable</name>
            <inbound type="feature" confirmed="yes">org.mvel.ASTNode.getReducedValue(java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.ASTNode.getReducedValueAccelerated(java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.AbstractParser.reduce()</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.AbstractParser.static {}</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.CompileException.CompileException(java.lang.String, char[], int, java.lang.Exception)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.CompileException.CompileException(java.lang.String, java.lang.Throwable)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.CompileException.CompileException(java.lang.Throwable)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.ConversionException.ConversionException(java.lang.String, java.lang.Throwable)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.ConversionException.ConversionException(java.lang.Throwable)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.ExpressionCompiler._compile()</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.ImmutableElementException.ImmutableElementException(java.lang.String, java.lang.Throwable)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.ImmutableElementException.ImmutableElementException(java.lang.Throwable)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.MVELRuntime.execute(boolean, org.mvel.CompiledExpression, java.lang.Object, org.mvel.integration.VariableResolverFactory)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.OptimizationFailure.OptimizationFailure(java.lang.String, java.lang.Throwable)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.OptimizationFailure.OptimizationFailure(java.lang.Throwable)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.ParseException.ParseException(java.lang.String, java.lang.Throwable)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.ParseException.ParseException(java.lang.Throwable)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.PropertyAccessException.PropertyAccessException(java.lang.String, java.lang.Throwable)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.PropertyAccessException.PropertyAccessException(java.lang.Throwable)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.PropertyAccessor.get()</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.PropertyAccessor.set(java.lang.Object)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.PropertyVerifier.getBeanProperty(java.lang.Class, java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.TemplateInterpreter.execute(java.lang.Object, java.util.Map, org.mvel.TemplateRegistry)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.UnresolveablePropertyException.UnresolveablePropertyException(org.mvel.ASTNode, java.lang.Throwable)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.asm.ClassWriter.getCommonSuperClass(java.lang.String, java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.ast.NewObjectNode.getReducedValueAccelerated(java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.ast.PropertyASTNode.initializePropertyNode(java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.ast.StaticImportNode.StaticImportNode(char[], int)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.optimizers.OptimizationNotSupported.OptimizationNotSupported(java.lang.String, java.lang.Throwable)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.optimizers.OptimizationNotSupported.OptimizationNotSupported(java.lang.Throwable)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.optimizers.OptimizerFactory.getAccessorCompiler(java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.optimizers.OptimizerFactory.getDefaultAccessorCompiler()</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.optimizers.OptimizerFactory.getThreadAccessorOptimizer()</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.optimizers.OptimizerFactory.setDefaultOptimizer(java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.optimizers.OptimizerFactory.static {}</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.asm.ASMAccessorOptimizer.compileAccessor()</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.asm.ASMAccessorOptimizer.getBeanProperty(java.lang.Object, java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.asm.ASMAccessorOptimizer.optimizeCollection(char[], java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.asm.ASMAccessorOptimizer.optimizeObjectCreation(char[], java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.asm.ASMAccessorOptimizer.static {}</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.refl.ConstructorAccessor.getValue(java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.refl.DynamicFieldAccessor.getValue(java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.refl.DynamicFieldAccessor.setValue(java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory, java.lang.Object)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.refl.DynamicSetterAccessor.setValue(java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory, java.lang.Object)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.refl.FieldAccessor.getValue(java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.refl.FieldAccessor.setValue(java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory, java.lang.Object)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.refl.GetterAccessor.getValue(java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.refl.MethodAccessor.getValue(java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.refl.ReflectiveAccessorOptimizer.compileGetChain()</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.refl.ReflectiveAccessorOptimizer.optimizeObjectCreation(char[], java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.refl.ReflectiveAccessorOptimizer.optimizeSetAccessor(char[], java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory, boolean, java.lang.Object)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.refl.SetterAccessor.setValue(java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory, java.lang.Object)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.refl.StaticVarAccessor.getValue(java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.refl.StaticVarAccessor.setValue(java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory, java.lang.Object)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.util.ParseTools.debug(java.lang.Throwable)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.util.ParseTools.findClass(org.mvel.integration.VariableResolverFactory, java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.util.ParseTools.static {}</inbound>
            <feature confirmed="no">
                <name>java.lang.Throwable.getMessage()</name>
                <inbound type="feature" confirmed="yes">org.mvel.ASTNode.getReducedValue(java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.ASTNode.setName(char[])</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.AbstractParser.createPropertyToken(int, int)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.AbstractParser.nextToken()</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.AbstractParser.static {}</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.DataConversion.static {}</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.ExpressionCompiler._compile()</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.ExpressionCompiler.verify(org.mvel.ParserContext, org.mvel.ASTNode)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.MVEL.evalToBoolean(java.lang.String, java.lang.Object)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.MVEL.evalToBoolean(java.lang.String, java.lang.Object, java.util.Map)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.MVEL.evalToBoolean(java.lang.String, java.lang.Object, org.mvel.integration.VariableResolverFactory)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.MVEL.evalToBoolean(java.lang.String, org.mvel.integration.VariableResolverFactory)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.MVELInterpretedRuntime.parse()</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.ParserContext.addInput(java.lang.String, java.lang.Class)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.ParserContext.addVariable(java.lang.String, java.lang.Class)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.ParserContext.getVarOrInputType(java.lang.String)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.PropertyAccessor.set(java.lang.Object)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.PropertyVerifier.analyze()</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.PropertyVerifier.getBeanProperty(java.lang.Class, java.lang.String)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.PropertyVerifier.getCollectionProperty(java.lang.Class, java.lang.String)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.PropertyVerifier.getMethod(java.lang.Class, java.lang.String)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.ast.AssignmentNode.getReducedValueAccelerated(java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.ast.IfNode.getReducedValue(java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.ast.IfNode.getReducedValueAccelerated(java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.ast.InlineCollectionNode.getReducedValueAccelerated(java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.ast.NewObjectNode$NewObjectArray.getValue(java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.ast.NewObjectNode.getReducedValue(java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.ast.NewObjectNode.getReducedValueAccelerated(java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.ast.OperatorNode.static {}</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.ast.PropertyASTNode.initializePropertyNode(java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.conversion.ArrayCH.convertFrom(java.lang.Object)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.conversion.ArrayCH.static {}</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.conversion.BigDecimalCH.convertFrom(java.lang.Object)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.conversion.BigDecimalCH.static {}</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.conversion.BigIntegerCH.convertFrom(java.lang.Object)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.conversion.BigIntegerCH.static {}</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.conversion.BooleanCH$2.convert(java.lang.Object)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.conversion.BooleanCH.convertFrom(java.lang.Object)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.conversion.BooleanCH.static {}</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.conversion.ByteCH$2.convert(java.lang.Object)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.conversion.ByteCH.convertFrom(java.lang.Object)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.conversion.ByteCH.static {}</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.conversion.CharArrayCH.convertFrom(java.lang.Object)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.conversion.CharArrayCH.static {}</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.conversion.CharCH$2.convert(java.lang.Object)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.conversion.CharCH.convertFrom(java.lang.Object)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.conversion.CharCH.static {}</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.conversion.DoubleCH$2.convert(java.lang.Object)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.conversion.DoubleCH.convertFrom(java.lang.Object)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.conversion.DoubleCH.static {}</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.conversion.FloatCH$2.convert(java.lang.Object)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.conversion.FloatCH.convertFrom(java.lang.Object)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.conversion.FloatCH.static {}</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.conversion.IntArrayCH.convertFrom(java.lang.Object)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.conversion.IntArrayCH.static {}</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.conversion.IntegerCH.convertFrom(java.lang.Object)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.conversion.IntegerCH.static {}</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.conversion.LongCH$2.convert(java.lang.Object)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.conversion.LongCH.convertFrom(java.lang.Object)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.conversion.LongCH.static {}</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.conversion.PrimArrayHandler.PrimArrayHandler(java.lang.Class)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.conversion.PrimIntArrayCH.convertFrom(java.lang.Object)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.conversion.PrimIntArrayCH.static {}</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.conversion.ShortCH$2.convert(java.lang.Object)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.conversion.ShortCH.convertFrom(java.lang.Object)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.conversion.ShortCH.static {}</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.conversion.StringArrayCH.static {}</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.conversion.StringCH.canConvertFrom(java.lang.Class)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.conversion.UnitConversion.canConvertFrom(java.lang.Class)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.conversion.UnitConversion.convertFrom(java.lang.Object)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.integration.impl.ClassImportResolver.getType()</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.integration.impl.ItemResolverFactory$ItemResolver.ItemResolverFactory$ItemResolver(java.lang.String)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.integration.impl.SimpleValueResolver.getType()</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.math.IEEEFloatingPointMath._doOperations(int, java.lang.Object, int, int, java.lang.Object)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.math.JDK14CompatabilityMath._doOperations(int, java.lang.Object, int, int, java.lang.Object)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.asm.ASMAccessorOptimizer._initializeAccessor()</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.asm.ASMAccessorOptimizer.anyArrayCheck(java.lang.Class)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.asm.ASMAccessorOptimizer.getBeanProperty(java.lang.Object, java.lang.String)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.asm.ASMAccessorOptimizer.getCollectionProperty(java.lang.Object, java.lang.String)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.asm.ASMAccessorOptimizer.getMethod(java.lang.Object, java.lang.String)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.asm.ASMAccessorOptimizer.getWrapperClass(java.lang.Class)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.asm.ASMAccessorOptimizer.optimizeCollection(char[], java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.asm.ASMAccessorOptimizer.static {}</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.asm.ASMAccessorOptimizer.wrapPrimitive(java.lang.Class)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.asm.ASMAccessorOptimizer.writeLiteralOrSubexpression(java.lang.Object, java.lang.Class)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.refl.ReflectiveAccessorOptimizer._getAccessor(java.lang.Object)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.refl.ReflectiveAccessorOptimizer.optimizeSetAccessor(char[], java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory, boolean, java.lang.Object)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.util.ParseTools.boxPrimitive(java.lang.Class)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.util.ParseTools.getBestCandidate(java.lang.Class[], java.lang.String, java.lang.Class, java.lang.reflect.Method[])</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.util.ParseTools.isNumericallyCoercible(java.lang.Class, java.lang.Class)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.util.ParseTools.isPrimitiveWrapper(java.lang.Class)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.util.ParseTools.resolveType(java.lang.Class)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.util.ParseTools.unboxPrimitive(java.lang.Class)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.util.PropertyTools.isNumeric(java.lang.Object)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.util.ReflectionUtil.isAssignable(java.lang.Object, java.lang.Class)</inbound>
            </feature>
            <feature confirmed="no">
                <name>java.lang.Throwable.printStackTrace()</name>
                <inbound type="feature" confirmed="yes">org.mvel.optimizers.OptimizerFactory.static {}</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.util.ParseTools.debug(java.lang.Throwable)</inbound>
            </feature>
        </class>
        <class confirmed="no">
            <name>java.lang.VerifyError</name>
            <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.asm.ASMAccessorOptimizer._initializeAccessor()</inbound>
        </class>
        <class confirmed="no">
            <name>java.lang.Void</name>
            <feature confirmed="no">
                <name>java.lang.Void.TYPE</name>
                <inbound type="feature" confirmed="yes">org.mvel.asm.Type.getDescriptor(java.lang.StringBuffer, java.lang.Class)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.asm.Type.getType(java.lang.Class)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.asm.ASMAccessorOptimizer._finishJIT()</inbound>
            </feature>
        </class>
    </package>
    <package confirmed="no">
        <name>java.lang.reflect</name>
        <class confirmed="no">
            <name>java.lang.reflect.Array</name>
            <feature confirmed="no">
                <name>java.lang.reflect.Array.getLength(java.lang.Object)</name>
                <inbound type="feature" confirmed="yes">org.mvel.PropertyAccessor.getBeanProperty(java.lang.Object, java.lang.String)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.PropertyAccessor.getMethod(java.lang.Object, java.lang.String)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.asm.ASMAccessorOptimizer.getBeanProperty(java.lang.Object, java.lang.String)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.asm.ASMAccessorOptimizer.getMethod(java.lang.Object, java.lang.String)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.refl.ArrayLength.getValue(java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.refl.ReflectiveAccessorOptimizer.getBeanProperty(java.lang.Object, java.lang.String)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.refl.ReflectiveAccessorOptimizer.getMethod(java.lang.Object, java.lang.String)</inbound>
            </feature>
            <feature confirmed="no">
                <name>java.lang.reflect.Array.newInstance(java.lang.Class, int)</name>
                <inbound type="feature" confirmed="yes">org.mvel.conversion.PrimArrayHandler.handleLooseTypeConversion(java.lang.Class, java.lang.Object[], java.lang.Class)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.util.ArrayTools.collectionTranspose(java.util.Collection, java.lang.Class)</inbound>
            </feature>
            <feature confirmed="no">
                <name>java.lang.reflect.Array.newInstance(java.lang.Class, int[])</name>
                <inbound type="feature" confirmed="yes">org.mvel.ast.NewObjectNode$NewObjectArray.getValue(java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.ast.NewObjectNode.getReducedValue(java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory)</inbound>
            </feature>
            <feature confirmed="no">
                <name>java.lang.reflect.Array.set(java.lang.Object, int, java.lang.Object)</name>
                <inbound type="feature" confirmed="yes">org.mvel.PropertyAccessor.set(java.lang.Object)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.conversion.PrimArrayHandler.handleLooseTypeConversion(java.lang.Class, java.lang.Object[], java.lang.Class)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.refl.ArrayAccessorNest.setValue(java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory, java.lang.Object)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.refl.ReflectiveAccessorOptimizer.optimizeSetAccessor(char[], java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory, boolean, java.lang.Object)</inbound>
            </feature>
        </class>
        <class confirmed="no">
            <name>java.lang.reflect.Constructor</name>
            <inbound type="feature" confirmed="yes">org.mvel.asm.Type.getConstructorDescriptor(java.lang.reflect.Constructor)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.ast.NewObjectNode.getReducedValue(java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.asm.ASMAccessorOptimizer._initializeAccessor()</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.asm.ASMAccessorOptimizer.optimizeObjectCreation(char[], java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.refl.ConstructorAccessor.ConstructorAccessor(java.lang.reflect.Constructor, org.mvel.ExecutableStatement[])</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.refl.ConstructorAccessor.constructor</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.refl.ConstructorAccessor.getValue(java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.refl.ReflectiveAccessorOptimizer.compileConstructor(char[], java.lang.Object, org.mvel.integration.VariableResolverFactory)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.util.ParseTools.getBestConstructorCanadidate(java.lang.Object[], java.lang.Class)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.util.ParseTools.getConstructors(java.lang.Class)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.util.ParseTools.getConstructors(java.lang.reflect.Constructor)</inbound>
            <feature confirmed="no">
                <name>java.lang.reflect.Constructor.getParameterTypes()</name>
                <inbound type="feature" confirmed="yes">org.mvel.asm.Type.getConstructorDescriptor(java.lang.reflect.Constructor)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.ast.NewObjectNode.getReducedValue(java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.asm.ASMAccessorOptimizer.optimizeObjectCreation(char[], java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.refl.ConstructorAccessor.ConstructorAccessor(java.lang.reflect.Constructor, org.mvel.ExecutableStatement[])</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.refl.ReflectiveAccessorOptimizer.compileConstructor(char[], java.lang.Object, org.mvel.integration.VariableResolverFactory)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.util.ParseTools.getConstructors(java.lang.reflect.Constructor)</inbound>
            </feature>
            <feature confirmed="no">
                <name>java.lang.reflect.Constructor.newInstance(java.lang.Object[])</name>
                <inbound type="feature" confirmed="yes">org.mvel.ast.NewObjectNode.getReducedValue(java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.asm.ASMAccessorOptimizer._initializeAccessor()</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.refl.ConstructorAccessor.getValue(java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.refl.ReflectiveAccessorOptimizer.compileConstructor(char[], java.lang.Object, org.mvel.integration.VariableResolverFactory)</inbound>
            </feature>
        </class>
        <class confirmed="no">
            <name>java.lang.reflect.Constructor[]</name>
            <inbound type="feature" confirmed="yes">org.mvel.util.ParseTools.getConstructors(java.lang.Class)</inbound>
        </class>
        <class confirmed="no">
            <name>java.lang.reflect.Field</name>
            <inbound type="feature" confirmed="yes">org.mvel.PropertyAccessor.getBeanProperty(java.lang.Object, java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.PropertyAccessor.set(java.lang.Object)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.PropertyVerifier.getBeanProperty(java.lang.Class, java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.optimizers.AbstractOptimizer.tryStaticAccess()</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.asm.ASMAccessorOptimizer.getBeanProperty(java.lang.Object, java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.refl.DynamicFieldAccessor.DynamicFieldAccessor(java.lang.reflect.Field)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.refl.DynamicFieldAccessor.field</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.refl.DynamicFieldAccessor.getField()</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.refl.DynamicFieldAccessor.getValue(java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.refl.DynamicFieldAccessor.setField(java.lang.reflect.Field)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.refl.DynamicFieldAccessor.setValue(java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory, java.lang.Object)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.refl.FieldAccessor.FieldAccessor(java.lang.reflect.Field)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.refl.FieldAccessor.field</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.refl.FieldAccessor.getField()</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.refl.FieldAccessor.getValue(java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.refl.FieldAccessor.setField(java.lang.reflect.Field)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.refl.FieldAccessor.setValue(java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory, java.lang.Object)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.refl.ReflectiveAccessorOptimizer.getBeanProperty(java.lang.Object, java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.refl.ReflectiveAccessorOptimizer.optimizeSetAccessor(char[], java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory, boolean, java.lang.Object)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.refl.StaticVarAccessor.StaticVarAccessor(java.lang.reflect.Field)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.refl.StaticVarAccessor.field</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.refl.StaticVarAccessor.getValue(java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.refl.StaticVarAccessor.setValue(java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory, java.lang.Object)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.util.PropertyTools.getFieldOrAccessor(java.lang.Class, java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.util.PropertyTools.getFieldOrWriteAccessor(java.lang.Class, java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.util.PropertyTools.getWritableFieldOrAccessor(java.lang.Class, java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.util.PropertyTools.hasGetter(java.lang.reflect.Field)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.util.PropertyTools.hasSetter(java.lang.reflect.Field)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.util.PropertyTools.isPropertyReadAndWrite(java.lang.reflect.Field)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.util.ReflectionUtil.getAllFields(java.lang.Class)</inbound>
            <feature confirmed="no">
                <name>java.lang.reflect.Field.get(java.lang.Object)</name>
                <inbound type="feature" confirmed="yes">org.mvel.PropertyAccessor.getBeanProperty(java.lang.Object, java.lang.String)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.PropertyVerifier.getBeanProperty(java.lang.Class, java.lang.String)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.asm.ASMAccessorOptimizer.getBeanProperty(java.lang.Object, java.lang.String)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.refl.DynamicFieldAccessor.getValue(java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.refl.FieldAccessor.getValue(java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.refl.ReflectiveAccessorOptimizer.getBeanProperty(java.lang.Object, java.lang.String)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.refl.StaticVarAccessor.getValue(java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory)</inbound>
            </feature>
            <feature confirmed="no">
                <name>java.lang.reflect.Field.getDeclaringClass()</name>
                <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.asm.ASMAccessorOptimizer.getBeanProperty(java.lang.Object, java.lang.String)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.util.PropertyTools.hasGetter(java.lang.reflect.Field)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.util.PropertyTools.hasSetter(java.lang.reflect.Field)</inbound>
            </feature>
            <feature confirmed="no">
                <name>java.lang.reflect.Field.getModifiers()</name>
                <inbound type="feature" confirmed="yes">org.mvel.util.PropertyTools.getFieldOrAccessor(java.lang.Class, java.lang.String)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.util.PropertyTools.getFieldOrWriteAccessor(java.lang.Class, java.lang.String)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.util.PropertyTools.getWritableFieldOrAccessor(java.lang.Class, java.lang.String)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.util.PropertyTools.isPropertyReadAndWrite(java.lang.reflect.Field)</inbound>
            </feature>
            <feature confirmed="no">
                <name>java.lang.reflect.Field.getName()</name>
                <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.asm.ASMAccessorOptimizer.getBeanProperty(java.lang.Object, java.lang.String)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.util.PropertyTools.hasGetter(java.lang.reflect.Field)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.util.PropertyTools.hasSetter(java.lang.reflect.Field)</inbound>
            </feature>
            <feature confirmed="no">
                <name>java.lang.reflect.Field.getType()</name>
                <inbound type="feature" confirmed="yes">org.mvel.PropertyAccessor.set(java.lang.Object)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.PropertyVerifier.getBeanProperty(java.lang.Class, java.lang.String)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.asm.ASMAccessorOptimizer.getBeanProperty(java.lang.Object, java.lang.String)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.refl.DynamicFieldAccessor.setValue(java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory, java.lang.Object)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.refl.ReflectiveAccessorOptimizer.optimizeSetAccessor(char[], java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory, boolean, java.lang.Object)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.util.PropertyTools.hasGetter(java.lang.reflect.Field)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.util.PropertyTools.hasSetter(java.lang.reflect.Field)</inbound>
            </feature>
            <feature confirmed="no">
                <name>java.lang.reflect.Field.set(java.lang.Object, java.lang.Object)</name>
                <inbound type="feature" confirmed="yes">org.mvel.PropertyAccessor.set(java.lang.Object)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.refl.DynamicFieldAccessor.setValue(java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory, java.lang.Object)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.refl.FieldAccessor.setValue(java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory, java.lang.Object)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.refl.ReflectiveAccessorOptimizer.optimizeSetAccessor(char[], java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory, boolean, java.lang.Object)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.refl.StaticVarAccessor.setValue(java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory, java.lang.Object)</inbound>
            </feature>
        </class>
        <class confirmed="no">
            <name>java.lang.reflect.InvocationTargetException</name>
            <inbound type="feature" confirmed="yes">org.mvel.PropertyAccessor.get()</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.PropertyAccessor.getBeanProperty(java.lang.Object, java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.PropertyAccessor.set(java.lang.Object)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.asm.ASMAccessorOptimizer.compileAccessor()</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.asm.ASMAccessorOptimizer.getBeanProperty(java.lang.Object, java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.asm.ASMAccessorOptimizer.getCollectionProperty(java.lang.Object, java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.asm.ASMAccessorOptimizer.getMethod(java.lang.Object, java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.refl.ReflectiveAccessorOptimizer.compileConstructor(char[], java.lang.Object, org.mvel.integration.VariableResolverFactory)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.refl.ReflectiveAccessorOptimizer.compileGetChain()</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.refl.ReflectiveAccessorOptimizer.getBeanProperty(java.lang.Object, java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.refl.ReflectiveAccessorOptimizer.optimizeSetAccessor(char[], java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory, boolean, java.lang.Object)</inbound>
        </class>
        <class confirmed="no">
            <name>java.lang.reflect.Member</name>
            <inbound type="feature" confirmed="yes">org.mvel.PropertyAccessor.addReadCache(java.lang.Class, java.lang.Integer, java.lang.reflect.Member)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.PropertyAccessor.addWriteCache(java.lang.Class, java.lang.Integer, java.lang.reflect.Member)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.PropertyAccessor.checkReadCache(java.lang.Class, java.lang.Integer)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.PropertyAccessor.checkWriteCache(java.lang.Class, java.lang.Integer)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.PropertyAccessor.getBeanProperty(java.lang.Object, java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.PropertyAccessor.set(java.lang.Object)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.PropertyVerifier.getBeanProperty(java.lang.Class, java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.asm.ASMAccessorOptimizer.getBeanProperty(java.lang.Object, java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.refl.ReflectiveAccessorOptimizer.getBeanProperty(java.lang.Object, java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.refl.ReflectiveAccessorOptimizer.optimizeSetAccessor(char[], java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory, boolean, java.lang.Object)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.util.PropertyTools.getFieldOrAccessor(java.lang.Class, java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.util.PropertyTools.getFieldOrWriteAccessor(java.lang.Class, java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.util.PropertyTools.getWritableFieldOrAccessor(java.lang.Class, java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.util.PropertyTools.isPropertyReadAndWrite(java.lang.Class, java.lang.String)</inbound>
            <feature confirmed="no">
                <name>java.lang.reflect.Member.getDeclaringClass()</name>
                <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.asm.ASMAccessorOptimizer.getBeanProperty(java.lang.Object, java.lang.String)</inbound>
            </feature>
            <feature confirmed="no">
                <name>java.lang.reflect.Member.getModifiers()</name>
                <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.asm.ASMAccessorOptimizer.getBeanProperty(java.lang.Object, java.lang.String)</inbound>
            </feature>
            <feature confirmed="no">
                <name>java.lang.reflect.Member.getName()</name>
                <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.asm.ASMAccessorOptimizer.getBeanProperty(java.lang.Object, java.lang.String)</inbound>
            </feature>
        </class>
        <class confirmed="no">
            <name>java.lang.reflect.Method</name>
            <inbound type="feature" confirmed="yes">org.mvel.ASTNode.getReducedValue(java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.ParserContext.addImport(java.lang.String, java.lang.reflect.Method)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.ParserContext.setImports(java.util.Map)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.PropertyAccessor.addMethodCache(java.lang.Class, java.lang.Integer, java.lang.reflect.Method)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.PropertyAccessor.getBeanProperty(java.lang.Object, java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.PropertyAccessor.getMethod(java.lang.Object, java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.PropertyAccessor.set(java.lang.Object)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.PropertyVerifier.getBeanProperty(java.lang.Class, java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.PropertyVerifier.getMethod(java.lang.Class, java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.asm.Type.getArgumentTypes(java.lang.reflect.Method)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.asm.Type.getMethodDescriptor(java.lang.reflect.Method)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.asm.Type.getReturnType(java.lang.reflect.Method)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.ast.StaticImportNode.StaticImportNode(char[], int)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.ast.StaticImportNode.getReducedValueAccelerated(java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.ast.StaticImportNode.method</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.ast.StaticImportNode.resolveMethod()</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.integration.impl.StaticMethodImportResolverFactory.StaticMethodImportResolverFactory(org.mvel.ParserContext)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.integration.impl.StaticMethodImportResolverFactory.createVariable(java.lang.String, java.lang.Object)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.integration.impl.StaticMethodImportResolverFactory.getImportedMethods()</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.asm.ASMAccessorOptimizer.defineClass</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.asm.ASMAccessorOptimizer.getBeanProperty(java.lang.Object, java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.asm.ASMAccessorOptimizer.getMethod(java.lang.Object, java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.asm.ASMAccessorOptimizer.loadClass(java.lang.String, byte[])</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.asm.ASMAccessorOptimizer.static {}</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.refl.DynamicSetterAccessor.DynamicSetterAccessor(java.lang.reflect.Method)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.refl.DynamicSetterAccessor.getMethod()</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.refl.DynamicSetterAccessor.method</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.refl.DynamicSetterAccessor.setValue(java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory, java.lang.Object)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.refl.DynamicSetterAccessor.toString()</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.refl.GetterAccessor.GetterAccessor(java.lang.reflect.Method)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.refl.GetterAccessor.getMethod()</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.refl.GetterAccessor.getValue(java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.refl.GetterAccessor.method</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.refl.GetterAccessor.toString()</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.refl.MethodAccessor.MethodAccessor(java.lang.reflect.Method, org.mvel.ExecutableStatement[])</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.refl.MethodAccessor.getMethod()</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.refl.MethodAccessor.getValue(java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.refl.MethodAccessor.method</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.refl.MethodAccessor.setMethod(java.lang.reflect.Method)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.refl.ReflectiveAccessorOptimizer.getBeanProperty(java.lang.Object, java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.refl.ReflectiveAccessorOptimizer.getMethod(java.lang.Object, java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.refl.ReflectiveAccessorOptimizer.optimizeSetAccessor(char[], java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory, boolean, java.lang.Object)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.refl.SetterAccessor.SetterAccessor(java.lang.reflect.Method)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.refl.SetterAccessor.getMethod()</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.refl.SetterAccessor.method</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.refl.SetterAccessor.setValue(java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory, java.lang.Object)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.refl.SetterAccessor.toString()</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.util.MethodStub.MethodStub(java.lang.reflect.Method)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.util.MethodStub.getMethod()</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.util.MethodStub.method</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.util.ParseTools.determineActualTargetMethod(java.lang.reflect.Method)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.util.ParseTools.getBestCandidate(java.lang.Class[], java.lang.String, java.lang.Class, java.lang.reflect.Method[])</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.util.ParseTools.getBestCandidate(java.lang.Object[], java.lang.String, java.lang.Class, java.lang.reflect.Method[])</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.util.ParseTools.getExactMatch(java.lang.String, java.lang.Class[], java.lang.Class, java.lang.Class)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.util.ParseTools.getWidenedTarget(java.lang.reflect.Method)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.util.PropertyTools.getFieldOrAccessor(java.lang.Class, java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.util.PropertyTools.getFieldOrWriteAccessor(java.lang.Class, java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.util.PropertyTools.getGetter(java.lang.Class, java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.util.PropertyTools.getSetter(java.lang.Class, java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.util.PropertyTools.getWritableFieldOrAccessor(java.lang.Class, java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.util.PropertyTools.hasGetter(java.lang.reflect.Field)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.util.PropertyTools.hasSetter(java.lang.reflect.Field)</inbound>
            <feature confirmed="no">
                <name>java.lang.reflect.Method.getDeclaringClass()</name>
                <inbound type="feature" confirmed="yes">org.mvel.ASTNode.getReducedValue(java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.PropertyAccessor.getMethod(java.lang.Object, java.lang.String)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.PropertyVerifier.getMethod(java.lang.Class, java.lang.String)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.asm.ASMAccessorOptimizer.getBeanProperty(java.lang.Object, java.lang.String)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.asm.ASMAccessorOptimizer.getMethod(java.lang.Object, java.lang.String)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.refl.DynamicSetterAccessor.toString()</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.refl.GetterAccessor.getValue(java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.refl.GetterAccessor.toString()</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.refl.ReflectiveAccessorOptimizer.getMethod(java.lang.Object, java.lang.String)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.refl.SetterAccessor.toString()</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.util.MethodStub.MethodStub(java.lang.reflect.Method)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.util.ParseTools.determineActualTargetMethod(java.lang.reflect.Method)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.util.ParseTools.getWidenedTarget(java.lang.reflect.Method)</inbound>
            </feature>
            <feature confirmed="no">
                <name>java.lang.reflect.Method.getModifiers()</name>
                <inbound type="feature" confirmed="yes">org.mvel.ast.StaticImportNode.resolveMethod()</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.asm.ASMAccessorOptimizer.getMethod(java.lang.Object, java.lang.String)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.util.PropertyTools.getGetter(java.lang.Class, java.lang.String)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.util.PropertyTools.getSetter(java.lang.Class, java.lang.String)</inbound>
            </feature>
            <feature confirmed="no">
                <name>java.lang.reflect.Method.getName()</name>
                <inbound type="feature" confirmed="yes">org.mvel.ASTNode.getReducedValue(java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.PropertyAccessor.getBeanProperty(java.lang.Object, java.lang.String)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.PropertyAccessor.getMethod(java.lang.Object, java.lang.String)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.PropertyVerifier.getBeanProperty(java.lang.Class, java.lang.String)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.PropertyVerifier.getMethod(java.lang.Class, java.lang.String)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.ast.StaticImportNode.resolveMethod()</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.asm.ASMAccessorOptimizer.getBeanProperty(java.lang.Object, java.lang.String)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.asm.ASMAccessorOptimizer.getMethod(java.lang.Object, java.lang.String)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.refl.DynamicSetterAccessor.toString()</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.refl.GetterAccessor.getValue(java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.refl.GetterAccessor.toString()</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.refl.ReflectiveAccessorOptimizer.getBeanProperty(java.lang.Object, java.lang.String)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.refl.ReflectiveAccessorOptimizer.getMethod(java.lang.Object, java.lang.String)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.refl.SetterAccessor.toString()</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.util.MethodStub.MethodStub(java.lang.reflect.Method)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.util.MethodStub.getMethod()</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.util.ParseTools.determineActualTargetMethod(java.lang.reflect.Method)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.util.ParseTools.getBestCandidate(java.lang.Class[], java.lang.String, java.lang.Class, java.lang.reflect.Method[])</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.util.ParseTools.getExactMatch(java.lang.String, java.lang.Class[], java.lang.Class, java.lang.Class)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.util.ParseTools.getWidenedTarget(java.lang.reflect.Method)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.util.PropertyTools.getGetter(java.lang.Class, java.lang.String)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.util.PropertyTools.getSetter(java.lang.Class, java.lang.String)</inbound>
            </feature>
            <feature confirmed="no">
                <name>java.lang.reflect.Method.getParameterTypes()</name>
                <inbound type="feature" confirmed="yes">org.mvel.PropertyAccessor.addMethodCache(java.lang.Class, java.lang.Integer, java.lang.reflect.Method)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.PropertyAccessor.getMethod(java.lang.Object, java.lang.String)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.PropertyAccessor.set(java.lang.Object)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.asm.Type.getArgumentTypes(java.lang.reflect.Method)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.asm.Type.getMethodDescriptor(java.lang.reflect.Method)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.asm.ASMAccessorOptimizer.getMethod(java.lang.Object, java.lang.String)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.refl.DynamicSetterAccessor.DynamicSetterAccessor(java.lang.reflect.Method)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.refl.MethodAccessor.MethodAccessor(java.lang.reflect.Method, org.mvel.ExecutableStatement[])</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.refl.MethodAccessor.setMethod(java.lang.reflect.Method)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.refl.ReflectiveAccessorOptimizer.getMethod(java.lang.Object, java.lang.String)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.refl.ReflectiveAccessorOptimizer.optimizeSetAccessor(char[], java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory, boolean, java.lang.Object)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.refl.SetterAccessor.SetterAccessor(java.lang.reflect.Method)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.util.ParseTools.determineActualTargetMethod(java.lang.reflect.Method)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.util.ParseTools.getBestCandidate(java.lang.Class[], java.lang.String, java.lang.Class, java.lang.reflect.Method[])</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.util.ParseTools.getExactMatch(java.lang.String, java.lang.Class[], java.lang.Class, java.lang.Class)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.util.ParseTools.getWidenedTarget(java.lang.reflect.Method)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.util.PropertyTools.getGetter(java.lang.Class, java.lang.String)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.util.PropertyTools.getSetter(java.lang.Class, java.lang.String)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.util.PropertyTools.hasSetter(java.lang.reflect.Field)</inbound>
            </feature>
            <feature confirmed="no">
                <name>java.lang.reflect.Method.getReturnType()</name>
                <inbound type="feature" confirmed="yes">org.mvel.PropertyVerifier.getBeanProperty(java.lang.Class, java.lang.String)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.PropertyVerifier.getMethod(java.lang.Class, java.lang.String)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.asm.Type.getMethodDescriptor(java.lang.reflect.Method)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.asm.Type.getReturnType(java.lang.reflect.Method)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.asm.ASMAccessorOptimizer.getBeanProperty(java.lang.Object, java.lang.String)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.asm.ASMAccessorOptimizer.getMethod(java.lang.Object, java.lang.String)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.util.ParseTools.getExactMatch(java.lang.String, java.lang.Class[], java.lang.Class, java.lang.Class)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.util.ParseTools.getWidenedTarget(java.lang.reflect.Method)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.util.PropertyTools.hasGetter(java.lang.reflect.Field)</inbound>
            </feature>
            <feature confirmed="no">
                <name>java.lang.reflect.Method.invoke(java.lang.Object, java.lang.Object[])</name>
                <inbound type="feature" confirmed="yes">org.mvel.PropertyAccessor.getBeanProperty(java.lang.Object, java.lang.String)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.PropertyAccessor.getMethod(java.lang.Object, java.lang.String)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.PropertyAccessor.set(java.lang.Object)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.asm.ASMAccessorOptimizer.getBeanProperty(java.lang.Object, java.lang.String)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.asm.ASMAccessorOptimizer.getMethod(java.lang.Object, java.lang.String)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.asm.ASMAccessorOptimizer.loadClass(java.lang.String, byte[])</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.refl.DynamicSetterAccessor.setValue(java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory, java.lang.Object)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.refl.GetterAccessor.getValue(java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.refl.MethodAccessor.getValue(java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.refl.ReflectiveAccessorOptimizer.getBeanProperty(java.lang.Object, java.lang.String)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.refl.ReflectiveAccessorOptimizer.getMethod(java.lang.Object, java.lang.String)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.refl.ReflectiveAccessorOptimizer.optimizeSetAccessor(char[], java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory, boolean, java.lang.Object)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.refl.SetterAccessor.setValue(java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory, java.lang.Object)</inbound>
            </feature>
            <feature confirmed="no">
                <name>java.lang.reflect.Method.setAccessible(boolean)</name>
                <inbound type="feature" confirmed="yes">org.mvel.PropertyAccessor.getBeanProperty(java.lang.Object, java.lang.String)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.asm.ASMAccessorOptimizer.loadClass(java.lang.String, byte[])</inbound>
            </feature>
        </class>
        <class confirmed="no">
            <name>java.lang.reflect.Modifier</name>
            <feature confirmed="no">
                <name>java.lang.reflect.Modifier.isPublic(int)</name>
                <inbound type="feature" confirmed="yes">org.mvel.util.PropertyTools.getFieldOrWriteAccessor(java.lang.Class, java.lang.String)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.util.PropertyTools.getWritableFieldOrAccessor(java.lang.Class, java.lang.String)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.util.PropertyTools.isPropertyReadAndWrite(java.lang.reflect.Field)</inbound>
            </feature>
            <feature confirmed="no">
                <name>java.lang.reflect.Modifier.isStatic(int)</name>
                <inbound type="feature" confirmed="yes">org.mvel.ast.StaticImportNode.resolveMethod()</inbound>
            </feature>
        </class>
    </package>
    <package confirmed="no">
        <name>java.math</name>
        <class confirmed="no">
            <name>java.math.BigDecimal</name>
            <inbound type="feature" confirmed="yes">org.mvel.conversion.BigDecimalCH$1.convert(java.lang.Object)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.conversion.BigDecimalCH$10.convert(java.lang.Object)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.conversion.BigDecimalCH$11.convert(java.lang.Object)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.conversion.BigDecimalCH$2.convert(java.lang.Object)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.conversion.BigDecimalCH$3.convert(java.lang.Object)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.conversion.BigDecimalCH$4.convert(java.lang.Object)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.conversion.BigDecimalCH$5.convert(java.lang.Object)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.conversion.BigDecimalCH$6.convert(java.lang.Object)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.conversion.BigDecimalCH$7.convert(java.lang.Object)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.conversion.BigDecimalCH$8.convert(java.lang.Object)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.conversion.BigDecimalCH$9.convert(java.lang.Object)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.conversion.CharCH$4.convert(java.lang.Object)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.math.IEEEFloatingPointMath._doOperations(int, java.lang.Object, int, int, java.lang.Object)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.math.IEEEFloatingPointMath.doBigDecimalArithmetic(java.math.BigDecimal, int, java.math.BigDecimal)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.math.IEEEFloatingPointMath.doOperation(java.lang.Object, int, java.lang.Object)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.math.IEEEFloatingPointMath.doOperationsSameType(int, java.lang.Object, int, java.lang.Object)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.math.IEEEFloatingPointMath.getBigDecimalFromType(java.lang.Object, int)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.math.JDK14CompatabilityMath._doOperations(int, java.lang.Object, int, int, java.lang.Object)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.math.JDK14CompatabilityMath.doBigDecimalArithmetic(java.math.BigDecimal, int, java.math.BigDecimal)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.math.JDK14CompatabilityMath.doOperation(java.lang.Object, int, java.lang.Object)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.math.JDK14CompatabilityMath.doOperationsSameType(int, java.lang.Object, int, java.lang.Object)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.math.JDK14CompatabilityMath.getBigDecimalFromType(java.lang.Object, int)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.util.ParseTools.handleParserEgress(java.lang.Object, boolean)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.util.PropertyTools.isNumber(java.lang.Object)</inbound>
            <feature confirmed="no">
                <name>java.math.BigDecimal.BigDecimal(double)</name>
                <inbound type="feature" confirmed="yes">org.mvel.math.IEEEFloatingPointMath.doOperationsSameType(int, java.lang.Object, int, java.lang.Object)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.math.IEEEFloatingPointMath.getBigDecimalFromType(java.lang.Object, int)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.math.JDK14CompatabilityMath.doOperationsSameType(int, java.lang.Object, int, java.lang.Object)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.math.JDK14CompatabilityMath.getBigDecimalFromType(java.lang.Object, int)</inbound>
            </feature>
            <feature confirmed="no">
                <name>java.math.BigDecimal.BigDecimal(int)</name>
                <inbound type="feature" confirmed="yes">org.mvel.math.IEEEFloatingPointMath.doOperationsSameType(int, java.lang.Object, int, java.lang.Object)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.math.IEEEFloatingPointMath.getBigDecimalFromType(java.lang.Object, int)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.math.JDK14CompatabilityMath.doOperationsSameType(int, java.lang.Object, int, java.lang.Object)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.math.JDK14CompatabilityMath.getBigDecimalFromType(java.lang.Object, int)</inbound>
            </feature>
            <feature confirmed="no">
                <name>java.math.BigDecimal.BigDecimal(java.lang.String)</name>
                <inbound type="feature" confirmed="yes">org.mvel.math.IEEEFloatingPointMath.getBigDecimalFromType(java.lang.Object, int)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.math.JDK14CompatabilityMath.getBigDecimalFromType(java.lang.Object, int)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.util.PropertyTools.handleNumericConversion(char[])</inbound>
            </feature>
            <feature confirmed="no">
                <name>java.math.BigDecimal.BigDecimal(java.math.BigInteger)</name>
                <inbound type="feature" confirmed="yes">org.mvel.math.IEEEFloatingPointMath.getBigDecimalFromType(java.lang.Object, int)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.math.JDK14CompatabilityMath.getBigDecimalFromType(java.lang.Object, int)</inbound>
            </feature>
            <feature confirmed="no">
                <name>java.math.BigDecimal.BigDecimal(long)</name>
                <inbound type="feature" confirmed="yes">org.mvel.math.IEEEFloatingPointMath.doOperationsSameType(int, java.lang.Object, int, java.lang.Object)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.math.IEEEFloatingPointMath.getBigDecimalFromType(java.lang.Object, int)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.math.JDK14CompatabilityMath.doOperationsSameType(int, java.lang.Object, int, java.lang.Object)</inbound>
            </feature>
            <feature confirmed="no">
                <name>java.math.BigDecimal.add(java.math.BigDecimal)</name>
                <inbound type="feature" confirmed="yes">org.mvel.math.IEEEFloatingPointMath.doBigDecimalArithmetic(java.math.BigDecimal, int, java.math.BigDecimal)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.math.JDK14CompatabilityMath.doBigDecimalArithmetic(java.math.BigDecimal, int, java.math.BigDecimal)</inbound>
            </feature>
            <feature confirmed="no">
                <name>java.math.BigDecimal.compareTo(java.math.BigDecimal)</name>
                <inbound type="feature" confirmed="yes">org.mvel.math.IEEEFloatingPointMath.doBigDecimalArithmetic(java.math.BigDecimal, int, java.math.BigDecimal)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.math.JDK14CompatabilityMath.doBigDecimalArithmetic(java.math.BigDecimal, int, java.math.BigDecimal)</inbound>
            </feature>
            <feature confirmed="no">
                <name>java.math.BigDecimal.divide(java.math.BigDecimal, int, int)</name>
                <inbound type="feature" confirmed="yes">org.mvel.math.JDK14CompatabilityMath.doBigDecimalArithmetic(java.math.BigDecimal, int, java.math.BigDecimal)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.math.JDK14CompatabilityMath.doOperationsSameType(int, java.lang.Object, int, java.lang.Object)</inbound>
            </feature>
            <feature confirmed="no">
                <name>java.math.BigDecimal.divide(java.math.BigDecimal, java.math.MathContext)</name>
                <inbound type="feature" confirmed="yes">org.mvel.math.IEEEFloatingPointMath.doBigDecimalArithmetic(java.math.BigDecimal, int, java.math.BigDecimal)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.math.IEEEFloatingPointMath.doOperationsSameType(int, java.lang.Object, int, java.lang.Object)</inbound>
            </feature>
            <feature confirmed="no">
                <name>java.math.BigDecimal.doubleValue()</name>
                <inbound type="feature" confirmed="yes">org.mvel.math.IEEEFloatingPointMath.doBigDecimalArithmetic(java.math.BigDecimal, int, java.math.BigDecimal)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.math.JDK14CompatabilityMath.doBigDecimalArithmetic(java.math.BigDecimal, int, java.math.BigDecimal)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.util.ParseTools.handleParserEgress(java.lang.Object, boolean)</inbound>
            </feature>
            <feature confirmed="no">
                <name>java.math.BigDecimal.floatValue()</name>
                <inbound type="feature" confirmed="yes">org.mvel.util.ParseTools.handleParserEgress(java.lang.Object, boolean)</inbound>
            </feature>
            <feature confirmed="no">
                <name>java.math.BigDecimal.intValue()</name>
                <inbound type="feature" confirmed="yes">org.mvel.conversion.CharCH$4.convert(java.lang.Object)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.math.IEEEFloatingPointMath.doOperationsSameType(int, java.lang.Object, int, java.lang.Object)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.util.ParseTools.handleParserEgress(java.lang.Object, boolean)</inbound>
            </feature>
            <feature confirmed="no">
                <name>java.math.BigDecimal.longValue()</name>
                <inbound type="feature" confirmed="yes">org.mvel.util.ParseTools.handleParserEgress(java.lang.Object, boolean)</inbound>
            </feature>
            <feature confirmed="no">
                <name>java.math.BigDecimal.multiply(java.math.BigDecimal)</name>
                <inbound type="feature" confirmed="yes">org.mvel.math.IEEEFloatingPointMath.doBigDecimalArithmetic(java.math.BigDecimal, int, java.math.BigDecimal)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.math.JDK14CompatabilityMath.doBigDecimalArithmetic(java.math.BigDecimal, int, java.math.BigDecimal)</inbound>
            </feature>
            <feature confirmed="no">
                <name>java.math.BigDecimal.pow(int)</name>
                <inbound type="feature" confirmed="yes">org.mvel.math.IEEEFloatingPointMath.doOperationsSameType(int, java.lang.Object, int, java.lang.Object)</inbound>
            </feature>
            <feature confirmed="no">
                <name>java.math.BigDecimal.remainder(java.math.BigDecimal)</name>
                <inbound type="feature" confirmed="yes">org.mvel.math.IEEEFloatingPointMath.doBigDecimalArithmetic(java.math.BigDecimal, int, java.math.BigDecimal)</inbound>
            </feature>
            <feature confirmed="no">
                <name>java.math.BigDecimal.scale()</name>
                <inbound type="feature" confirmed="yes">org.mvel.util.ParseTools.handleParserEgress(java.lang.Object, boolean)</inbound>
            </feature>
            <feature confirmed="no">
                <name>java.math.BigDecimal.subtract(java.math.BigDecimal)</name>
                <inbound type="feature" confirmed="yes">org.mvel.math.IEEEFloatingPointMath.doBigDecimalArithmetic(java.math.BigDecimal, int, java.math.BigDecimal)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.math.JDK14CompatabilityMath.doBigDecimalArithmetic(java.math.BigDecimal, int, java.math.BigDecimal)</inbound>
            </feature>
            <feature confirmed="no">
                <name>java.math.BigDecimal.valueOf(long)</name>
                <inbound type="feature" confirmed="yes">org.mvel.math.IEEEFloatingPointMath.getBigDecimalFromType(java.lang.Object, int)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.math.JDK14CompatabilityMath.getBigDecimalFromType(java.lang.Object, int)</inbound>
            </feature>
        </class>
        <class confirmed="no">
            <name>java.math.BigInteger</name>
            <inbound type="feature" confirmed="yes">org.mvel.conversion.BigIntegerCH$1.convert(java.lang.Object)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.conversion.BigIntegerCH$2.convert(java.lang.Object)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.conversion.BigIntegerCH$3.convert(java.lang.Object)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.conversion.BigIntegerCH$4.convert(java.lang.Object)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.conversion.BigIntegerCH$5.convert(java.lang.Object)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.conversion.BigIntegerCH$6.convert(java.lang.Object)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.conversion.BigIntegerCH$7.convert(java.lang.Object)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.conversion.BigIntegerCH$8.convert(java.lang.Object)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.conversion.BigIntegerCH$9.convert(java.lang.Object)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.math.IEEEFloatingPointMath.doOperationsSameType(int, java.lang.Object, int, java.lang.Object)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.math.IEEEFloatingPointMath.getBigDecimalFromType(java.lang.Object, int)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.math.JDK14CompatabilityMath.doOperationsSameType(int, java.lang.Object, int, java.lang.Object)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.math.JDK14CompatabilityMath.getBigDecimalFromType(java.lang.Object, int)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.util.PropertyTools.isNumber(java.lang.Object)</inbound>
            <feature confirmed="no">
                <name>java.math.BigInteger.add(java.math.BigInteger)</name>
                <inbound type="feature" confirmed="yes">org.mvel.math.IEEEFloatingPointMath.doOperationsSameType(int, java.lang.Object, int, java.lang.Object)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.math.JDK14CompatabilityMath.doOperationsSameType(int, java.lang.Object, int, java.lang.Object)</inbound>
            </feature>
            <feature confirmed="no">
                <name>java.math.BigInteger.compareTo(java.math.BigInteger)</name>
                <inbound type="feature" confirmed="yes">org.mvel.math.IEEEFloatingPointMath.doOperationsSameType(int, java.lang.Object, int, java.lang.Object)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.math.JDK14CompatabilityMath.doOperationsSameType(int, java.lang.Object, int, java.lang.Object)</inbound>
            </feature>
            <feature confirmed="no">
                <name>java.math.BigInteger.divide(java.math.BigInteger)</name>
                <inbound type="feature" confirmed="yes">org.mvel.math.IEEEFloatingPointMath.doOperationsSameType(int, java.lang.Object, int, java.lang.Object)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.math.JDK14CompatabilityMath.doOperationsSameType(int, java.lang.Object, int, java.lang.Object)</inbound>
            </feature>
            <feature confirmed="no">
                <name>java.math.BigInteger.intValue()</name>
                <inbound type="feature" confirmed="yes">org.mvel.math.IEEEFloatingPointMath.doOperationsSameType(int, java.lang.Object, int, java.lang.Object)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.math.JDK14CompatabilityMath.doOperationsSameType(int, java.lang.Object, int, java.lang.Object)</inbound>
            </feature>
            <feature confirmed="no">
                <name>java.math.BigInteger.multiply(java.math.BigInteger)</name>
                <inbound type="feature" confirmed="yes">org.mvel.math.IEEEFloatingPointMath.doOperationsSameType(int, java.lang.Object, int, java.lang.Object)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.math.JDK14CompatabilityMath.doOperationsSameType(int, java.lang.Object, int, java.lang.Object)</inbound>
            </feature>
            <feature confirmed="no">
                <name>java.math.BigInteger.pow(int)</name>
                <inbound type="feature" confirmed="yes">org.mvel.math.IEEEFloatingPointMath.doOperationsSameType(int, java.lang.Object, int, java.lang.Object)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.math.JDK14CompatabilityMath.doOperationsSameType(int, java.lang.Object, int, java.lang.Object)</inbound>
            </feature>
            <feature confirmed="no">
                <name>java.math.BigInteger.remainder(java.math.BigInteger)</name>
                <inbound type="feature" confirmed="yes">org.mvel.math.IEEEFloatingPointMath.doOperationsSameType(int, java.lang.Object, int, java.lang.Object)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.math.JDK14CompatabilityMath.doOperationsSameType(int, java.lang.Object, int, java.lang.Object)</inbound>
            </feature>
            <feature confirmed="no">
                <name>java.math.BigInteger.subtract(java.math.BigInteger)</name>
                <inbound type="feature" confirmed="yes">org.mvel.math.IEEEFloatingPointMath.doOperationsSameType(int, java.lang.Object, int, java.lang.Object)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.math.JDK14CompatabilityMath.doOperationsSameType(int, java.lang.Object, int, java.lang.Object)</inbound>
            </feature>
        </class>
        <class confirmed="no">
            <name>java.math.MathContext</name>
            <inbound type="feature" confirmed="yes">org.mvel.math.IEEEFloatingPointMath.MATH_CONTEXT</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.math.IEEEFloatingPointMath.doBigDecimalArithmetic(java.math.BigDecimal, int, java.math.BigDecimal)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.math.IEEEFloatingPointMath.doOperationsSameType(int, java.lang.Object, int, java.lang.Object)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.math.IEEEFloatingPointMath.static {}</inbound>
            <feature confirmed="no">
                <name>java.math.MathContext.DECIMAL128</name>
                <inbound type="feature" confirmed="yes">org.mvel.math.IEEEFloatingPointMath.static {}</inbound>
            </feature>
        </class>
    </package>
    <package confirmed="no">
        <name>java.nio</name>
        <class confirmed="no">
            <name>java.nio.Buffer</name>
            <inbound type="feature" confirmed="yes">org.mvel.TemplateInterpreter.parse(java.io.File, java.lang.Object, java.util.Map, org.mvel.TemplateRegistry)</inbound>
        </class>
        <class confirmed="no">
            <name>java.nio.ByteBuffer</name>
            <inbound type="feature" confirmed="yes">org.mvel.TemplateInterpreter.parse(java.io.File, java.lang.Object, java.util.Map, org.mvel.TemplateRegistry)</inbound>
            <feature confirmed="no">
                <name>java.nio.ByteBuffer.allocateDirect(int)</name>
                <inbound type="feature" confirmed="yes">org.mvel.TemplateInterpreter.parse(java.io.File, java.lang.Object, java.util.Map, org.mvel.TemplateRegistry)</inbound>
            </feature>
            <feature confirmed="no">
                <name>java.nio.ByteBuffer.get()</name>
                <inbound type="feature" confirmed="yes">org.mvel.TemplateInterpreter.parse(java.io.File, java.lang.Object, java.util.Map, org.mvel.TemplateRegistry)</inbound>
            </feature>
            <feature confirmed="no">
                <name>java.nio.ByteBuffer.rewind()</name>
                <inbound type="feature" confirmed="yes">org.mvel.TemplateInterpreter.parse(java.io.File, java.lang.Object, java.util.Map, org.mvel.TemplateRegistry)</inbound>
            </feature>
        </class>
    </package>
    <package confirmed="no">
        <name>java.nio.channels</name>
        <class confirmed="no">
            <name>java.nio.channels.FileChannel</name>
            <inbound type="feature" confirmed="yes">org.mvel.TemplateInterpreter.parse(java.io.File, java.lang.Object, java.util.Map, org.mvel.TemplateRegistry)</inbound>
        </class>
        <class confirmed="no">
            <name>java.nio.channels.ReadableByteChannel</name>
            <feature confirmed="no">
                <name>java.nio.channels.ReadableByteChannel.close()</name>
                <inbound type="feature" confirmed="yes">org.mvel.TemplateInterpreter.parse(java.io.File, java.lang.Object, java.util.Map, org.mvel.TemplateRegistry)</inbound>
            </feature>
            <feature confirmed="no">
                <name>java.nio.channels.ReadableByteChannel.read(java.nio.ByteBuffer)</name>
                <inbound type="feature" confirmed="yes">org.mvel.TemplateInterpreter.parse(java.io.File, java.lang.Object, java.util.Map, org.mvel.TemplateRegistry)</inbound>
            </feature>
        </class>
    </package>
    <package confirmed="no">
        <name>java.util</name>
        <class confirmed="no">
            <name>java.util.AbstractList</name>
            <inbound type="class" confirmed="yes">org.mvel.util.FastList</inbound>
            <feature confirmed="no">
                <name>java.util.AbstractList.AbstractList()</name>
                <inbound type="feature" confirmed="yes">org.mvel.util.FastList.FastList(int)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.util.FastList.FastList(java.lang.Object[])</inbound>
            </feature>
            <feature confirmed="no">
                <name>java.util.AbstractList.equals(java.lang.Object)</name>
                <inbound type="feature" confirmed="yes">org.mvel.util.FastList.equals(java.lang.Object)</inbound>
            </feature>
            <feature confirmed="no">
                <name>java.util.AbstractList.hashCode()</name>
                <inbound type="feature" confirmed="yes">org.mvel.util.FastList.hashCode()</inbound>
            </feature>
            <feature confirmed="no">
                <name>java.util.AbstractList.listIterator()</name>
                <inbound type="feature" confirmed="yes">org.mvel.util.FastList.listIterator()</inbound>
            </feature>
            <feature confirmed="no">
                <name>java.util.AbstractList.listIterator(int)</name>
                <inbound type="feature" confirmed="yes">org.mvel.util.FastList.listIterator(int)</inbound>
            </feature>
            <feature confirmed="no">
                <name>java.util.AbstractList.subList(int, int)</name>
                <inbound type="feature" confirmed="yes">org.mvel.util.FastList.subList(int, int)</inbound>
            </feature>
            <feature confirmed="no">
                <name>java.util.AbstractList.toString()</name>
                <inbound type="feature" confirmed="yes">org.mvel.util.FastList.toString()</inbound>
            </feature>
        </class>
        <class confirmed="no">
            <name>java.util.ArrayList</name>
            <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.asm.ASMAccessorOptimizer._initializeAccessor()</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.asm.ASMAccessorOptimizer.buildInputs()</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.asm.ASMAccessorOptimizer.compiledInputs</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.asm.ASMAccessorOptimizer.getMethod(java.lang.Object, java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.asm.ASMAccessorOptimizer.optimizeAccessor(char[], java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory, boolean)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.asm.ASMAccessorOptimizer.optimizeCollection(char[], java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.asm.ASMAccessorOptimizer.optimizeObjectCreation(char[], java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.asm.ASMAccessorOptimizer.writeLiteralOrSubexpression(java.lang.Object, java.lang.Class)</inbound>
            <feature confirmed="no">
                <name>java.util.ArrayList.ArrayList()</name>
                <inbound type="feature" confirmed="yes">org.mvel.ASTArrayList.ASTArrayList(org.mvel.ASTIterator)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.ParserContext.addError(org.mvel.ErrorDetail)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.TemplateCompiler.buildIncludeRef(char[])</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.ast.WithNode.compileWithExpressions()</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.asm.ASMAccessorOptimizer.optimizeAccessor(char[], java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory, boolean)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.asm.ASMAccessorOptimizer.optimizeCollection(char[], java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.asm.ASMAccessorOptimizer.optimizeObjectCreation(char[], java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.refl.Fold.getValue(java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.util.CollectionParser.parseCollection()</inbound>
            </feature>
            <feature confirmed="no">
                <name>java.util.ArrayList.ArrayList(int)</name>
                <inbound type="feature" confirmed="yes">org.mvel.CompileException.getErrors()</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.TemplateCompiler.compileExpression()</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.util.ArrayTools.listTranspose(boolean[])</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.util.ArrayTools.listTranspose(char[])</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.util.ArrayTools.listTranspose(double[])</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.util.ArrayTools.listTranspose(int[])</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.util.ArrayTools.listTranspose(java.lang.String[])</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.util.ArrayTools.listTranspose(long[])</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.util.ArrayTools.listTranspose(short[])</inbound>
            </feature>
            <feature confirmed="no">
                <name>java.util.ArrayList.add(java.lang.Object)</name>
                <inbound type="feature" confirmed="yes">org.mvel.ASTArrayList.ASTArrayList(org.mvel.ASTIterator)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.TemplateCompiler.compileExpression()</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.asm.ASMAccessorOptimizer.getMethod(java.lang.Object, java.lang.String)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.asm.ASMAccessorOptimizer.optimizeObjectCreation(char[], java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.asm.ASMAccessorOptimizer.writeLiteralOrSubexpression(java.lang.Object, java.lang.Class)</inbound>
            </feature>
            <feature confirmed="no">
                <name>java.util.ArrayList.iterator()</name>
                <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.asm.ASMAccessorOptimizer.optimizeObjectCreation(char[], java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory)</inbound>
            </feature>
            <feature confirmed="no">
                <name>java.util.ArrayList.remove(int)</name>
                <inbound type="feature" confirmed="yes">org.mvel.TemplateCompiler.compileExpression()</inbound>
            </feature>
            <feature confirmed="no">
                <name>java.util.ArrayList.size()</name>
                <inbound type="feature" confirmed="yes">org.mvel.ASTArrayList.ASTArrayList(org.mvel.ASTIterator)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.TemplateCompiler.compileExpression()</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.asm.ASMAccessorOptimizer._initializeAccessor()</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.asm.ASMAccessorOptimizer.buildInputs()</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.asm.ASMAccessorOptimizer.getMethod(java.lang.Object, java.lang.String)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.asm.ASMAccessorOptimizer.writeLiteralOrSubexpression(java.lang.Object, java.lang.Class)</inbound>
            </feature>
            <feature confirmed="no">
                <name>java.util.ArrayList.toArray(java.lang.Object[])</name>
                <inbound type="feature" confirmed="yes">org.mvel.ASTArrayList.ASTArrayList(org.mvel.ASTIterator)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.asm.ASMAccessorOptimizer._initializeAccessor()</inbound>
            </feature>
        </class>
        <class confirmed="no">
            <name>java.util.Arrays</name>
            <feature confirmed="no">
                <name>java.util.Arrays.asList(java.lang.Object[])</name>
                <inbound type="feature" confirmed="yes">org.mvel.TemplateInterpreter.execute(java.lang.Object, java.util.Map, org.mvel.TemplateRegistry)</inbound>
            </feature>
        </class>
        <class confirmed="no">
            <name>java.util.Collection</name>
            <inbound type="feature" confirmed="yes">org.mvel.BlankLiteral.equals(java.lang.Object)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.PropertyAccessor.getCollectionProperty(java.lang.Object, java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.TemplateInterpreter.execute(java.lang.Object, java.util.Map, org.mvel.TemplateRegistry)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.integration.impl.BaseVariableResolverFactory.getKnownVariables()</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.integration.impl.MapVariableResolverFactory.getKnownVariables()</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.integration.impl.TypeInjectionResolverFactoryImpl.getKnownVariables()</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.refl.Fold.getValue(java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.util.ArrayTools.collectionTranspose(java.util.Collection, java.lang.Class)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.util.ArrayTools.stringTranspose(java.util.Collection)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.util.FastList.addAll(int, java.util.Collection)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.util.FastList.addAll(java.util.Collection)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.util.FastList.containsAll(java.util.Collection)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.util.FastList.removeAll(java.util.Collection)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.util.FastList.retainAll(java.util.Collection)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.util.ParseTools.containsCheck(java.lang.Object, java.lang.Object)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.util.PropertyTools.contains(java.lang.Object, java.lang.Object)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.util.PropertyTools.isEmpty(java.lang.Object)</inbound>
            <feature confirmed="no">
                <name>java.util.Collection.add(java.lang.Object)</name>
                <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.refl.Fold.getValue(java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory)</inbound>
            </feature>
            <feature confirmed="no">
                <name>java.util.Collection.contains(java.lang.Object)</name>
                <inbound type="feature" confirmed="yes">org.mvel.util.ParseTools.containsCheck(java.lang.Object, java.lang.Object)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.util.PropertyTools.contains(java.lang.Object, java.lang.Object)</inbound>
            </feature>
            <feature confirmed="no">
                <name>java.util.Collection.iterator()</name>
                <inbound type="feature" confirmed="yes">org.mvel.PropertyAccessor.getCollectionProperty(java.lang.Object, java.lang.String)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.TemplateInterpreter.execute(java.lang.Object, java.util.Map, org.mvel.TemplateRegistry)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.refl.Fold.getValue(java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.util.ArrayTools.collectionTranspose(java.util.Collection, java.lang.Class)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.util.ArrayTools.stringTranspose(java.util.Collection)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.util.FastList.addAll(int, java.util.Collection)</inbound>
            </feature>
            <feature confirmed="no">
                <name>java.util.Collection.size()</name>
                <inbound type="feature" confirmed="yes">org.mvel.BlankLiteral.equals(java.lang.Object)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.PropertyAccessor.getCollectionProperty(java.lang.Object, java.lang.String)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.util.ArrayTools.collectionTranspose(java.util.Collection, java.lang.Class)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.util.ArrayTools.stringTranspose(java.util.Collection)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.util.FastList.addAll(int, java.util.Collection)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.util.PropertyTools.isEmpty(java.lang.Object)</inbound>
            </feature>
        </class>
        <class confirmed="no">
            <name>java.util.Collections</name>
            <feature confirmed="no">
                <name>java.util.Collections.EMPTY_MAP</name>
                <inbound type="feature" confirmed="yes">org.mvel.MVELTemplateRegistry.MVELTemplateRegistry()</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.MVELTemplateRegistry.registerTemplate(java.lang.String, java.lang.String)</inbound>
            </feature>
            <feature confirmed="no">
                <name>java.util.Collections.synchronizedMap(java.util.Map)</name>
                <inbound type="feature" confirmed="yes">org.mvel.AbstractParser.configureFactory()</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.MVELTemplateRegistry.registerTemplate(java.lang.String, java.lang.String)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.PropertyAccessor.configureFactory()</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.TemplateInterpreter.static {}</inbound>
            </feature>
        </class>
        <class confirmed="no">
            <name>java.util.HashMap</name>
            <feature confirmed="no">
                <name>java.util.HashMap.HashMap()</name>
                <inbound type="feature" confirmed="yes">org.mvel.DataConversion.static {}</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.MVELSH.main(java.lang.String[])</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.MVELTemplateRegistry.registerTemplate(java.lang.String, java.lang.String)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.ParserContext.addImport(java.lang.String, java.lang.Class)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.ParserContext.addImport(java.lang.String, org.mvel.util.MethodStub)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.ParserContext.addInput(java.lang.String, java.lang.Class)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.ParserContext.addKnownLine(java.lang.String, int)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.ParserContext.initializeTables()</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.TemplateInterpreter.execute(java.lang.Object, java.util.Map, org.mvel.TemplateRegistry)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.TemplateInterpreter.static {}</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.conversion.ArrayCH.static {}</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.conversion.BigDecimalCH.static {}</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.conversion.BigIntegerCH.static {}</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.conversion.BooleanCH.static {}</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.conversion.ByteCH.static {}</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.conversion.CharArrayCH.static {}</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.conversion.CharCH.static {}</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.conversion.DoubleCH.static {}</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.conversion.FloatCH.static {}</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.conversion.IntArrayCH.static {}</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.conversion.LongCH.static {}</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.conversion.PrimArrayHandler.PrimArrayHandler(java.lang.Class)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.conversion.PrimIntArrayCH.static {}</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.conversion.ShortCH.static {}</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.conversion.StringArrayCH.static {}</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.debug.DebugTools.getAllVariableResolvers(org.mvel.integration.VariableResolverFactory)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.debug.DebuggerContext.DebuggerContext()</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.integration.impl.ClassImportResolverFactory.ClassImportResolverFactory()</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.integration.impl.ClassImportResolverFactory.ClassImportResolverFactory(org.mvel.ParserContext, org.mvel.integration.VariableResolverFactory)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.integration.impl.ClassImportResolverFactory.createVariable(java.lang.String, java.lang.Object)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.integration.impl.ClassImportResolverFactory.createVariable(java.lang.String, java.lang.Object, java.lang.Class)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.integration.impl.ClassImportResolverFactory.getImportedClasses()</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.integration.impl.DefaultLocalVariableResolverFactory.DefaultLocalVariableResolverFactory()</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.integration.impl.DefaultLocalVariableResolverFactory.DefaultLocalVariableResolverFactory(org.mvel.integration.VariableResolverFactory)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.integration.impl.MapVariableResolverFactory.addResolver(java.lang.String, org.mvel.integration.VariableResolver)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.integration.impl.StaticMethodImportResolverFactory.StaticMethodImportResolverFactory()</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.integration.impl.StaticMethodImportResolverFactory.getImportedMethods()</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.optimizers.OptimizerFactory.static {}</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.util.CollectionParser.parseCollection()</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.util.ParseTools.finalLocalVariableFactory(org.mvel.integration.VariableResolverFactory)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.util.ParseTools.parseParameters(char[])</inbound>
            </feature>
            <feature confirmed="no">
                <name>java.util.HashMap.HashMap(int)</name>
                <inbound type="feature" confirmed="yes">org.mvel.TemplateInterpreter.execute(java.lang.Object, java.util.Map, org.mvel.TemplateRegistry)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.conversion.IntegerCH.static {}</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.refl.collection.MapCreator.getValue(java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory)</inbound>
            </feature>
            <feature confirmed="no">
                <name>java.util.HashMap.HashMap(int, float)</name>
                <inbound type="feature" confirmed="yes">org.mvel.AbstractParser.static {}</inbound>
            </feature>
        </class>
        <class confirmed="no">
            <name>java.util.HashSet</name>
            <feature confirmed="no">
                <name>java.util.HashSet.HashSet()</name>
                <inbound type="feature" confirmed="yes">org.mvel.ParserContext.addKnownLine(java.lang.String, int)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.ParserContext.addPackageImport(java.lang.String)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.debug.DebuggerContext.registerBreakpoint(java.lang.String, int)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.integration.impl.BaseVariableResolverFactory.getKnownVariables()</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.integration.impl.ClassImportResolverFactory.addPackageImport(java.lang.String)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.integration.impl.MapVariableResolverFactory.getKnownVariables()</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.integration.impl.TypeInjectionResolverFactoryImpl.getKnownVariables()</inbound>
            </feature>
            <feature confirmed="no">
                <name>java.util.HashSet.HashSet(int)</name>
                <inbound type="feature" confirmed="yes">org.mvel.util.ArrayTools.setTranspose(java.lang.String[])</inbound>
            </feature>
            <feature confirmed="no">
                <name>java.util.HashSet.HashSet(int, float)</name>
                <inbound type="feature" confirmed="yes">org.mvel.util.ReflectionUtil.getAllFields(java.lang.Class)</inbound>
            </feature>
        </class>
        <class confirmed="no">
            <name>java.util.Iterator</name>
            <inbound type="feature" confirmed="yes">org.mvel.CompileException.CompileException(java.lang.String, java.util.List)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.ForeachContext.getIter()</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.ForeachContext.getItererators()</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.ForeachContext.iter</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.ForeachContext.setIter(java.util.Iterator[])</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.ForeachContext.setIterators(java.util.Iterator[])</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.MVELTemplateRegistry.iterateTemplates()</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.ParserContext.checkForDynamicImport(java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.ParserContext.processTables()</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.ParserContext.setImports(java.util.Map)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.PropertyAccessor.getCollectionProperty(java.lang.Object, java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.PropertyAccessor.reportCacheSizes()</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.TemplateCompiler.buildIncludeRef(char[])</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.TemplateCompiler.compileExpression()</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.TemplateInterpreter.execute(java.lang.Object, java.util.Map, org.mvel.TemplateRegistry)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.TemplateRegistry.iterateTemplates()</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.ast.ForEachNode.getReducedValue(java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.ast.ForEachNode.getReducedValueAccelerated(java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.ast.NewObjectNode.updateClassName(int)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.debug.DebugTools.getAllVariableResolvers(org.mvel.integration.VariableResolverFactory)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.integration.impl.ClassImportResolverFactory.ClassImportResolverFactory(org.mvel.ParserContext, org.mvel.integration.VariableResolverFactory)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.integration.impl.ClassImportResolverFactory.getImportedClasses()</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.integration.impl.ClassImportResolverFactory.isResolveable(java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.integration.impl.ClassImportResolverFactory.setImportedClasses(java.util.Map)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.integration.impl.StaticMethodImportResolverFactory.StaticMethodImportResolverFactory(org.mvel.ParserContext)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.integration.impl.StaticMethodImportResolverFactory.getImportedMethods()</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.asm.ASMAccessorOptimizer._getAccessor(java.lang.Object)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.asm.ASMAccessorOptimizer.optimizeObjectCreation(char[], java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.refl.Fold.getValue(java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.refl.ReflectiveAccessorOptimizer._getAccessor(java.lang.Object)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.util.ArrayTools.collectionTranspose(java.util.Collection, java.lang.Class)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.util.ArrayTools.stringTranspose(java.util.Collection)</inbound>
            <inbound type="class" confirmed="yes">org.mvel.util.FastList$1</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.util.FastList.addAll(int, java.util.Collection)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.util.FastList.iterator()</inbound>
            <feature confirmed="no">
                <name>java.util.Iterator.hasNext()</name>
                <inbound type="feature" confirmed="yes">org.mvel.CompileException.CompileException(java.lang.String, java.util.List)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.ParserContext.checkForDynamicImport(java.lang.String)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.ParserContext.processTables()</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.ParserContext.setImports(java.util.Map)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.PropertyAccessor.reportCacheSizes()</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.TemplateCompiler.buildIncludeRef(char[])</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.TemplateCompiler.compileExpression()</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.TemplateInterpreter.execute(java.lang.Object, java.util.Map, org.mvel.TemplateRegistry)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.ast.ForEachNode.getReducedValue(java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.ast.ForEachNode.getReducedValueAccelerated(java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.debug.DebugTools.getAllVariableResolvers(org.mvel.integration.VariableResolverFactory)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.integration.impl.ClassImportResolverFactory.ClassImportResolverFactory(org.mvel.ParserContext, org.mvel.integration.VariableResolverFactory)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.integration.impl.ClassImportResolverFactory.getImportedClasses()</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.integration.impl.ClassImportResolverFactory.isResolveable(java.lang.String)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.integration.impl.ClassImportResolverFactory.setImportedClasses(java.util.Map)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.integration.impl.StaticMethodImportResolverFactory.StaticMethodImportResolverFactory(org.mvel.ParserContext)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.integration.impl.StaticMethodImportResolverFactory.getImportedMethods()</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.asm.ASMAccessorOptimizer._getAccessor(java.lang.Object)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.asm.ASMAccessorOptimizer.optimizeObjectCreation(char[], java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.refl.Fold.getValue(java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.refl.ReflectiveAccessorOptimizer._getAccessor(java.lang.Object)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.util.ArrayTools.collectionTranspose(java.util.Collection, java.lang.Class)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.util.ArrayTools.stringTranspose(java.util.Collection)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.util.FastList.addAll(int, java.util.Collection)</inbound>
            </feature>
            <feature confirmed="no">
                <name>java.util.Iterator.next()</name>
                <inbound type="feature" confirmed="yes">org.mvel.CompileException.CompileException(java.lang.String, java.util.List)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.ParserContext.checkForDynamicImport(java.lang.String)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.ParserContext.processTables()</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.ParserContext.setImports(java.util.Map)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.PropertyAccessor.getCollectionProperty(java.lang.Object, java.lang.String)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.PropertyAccessor.reportCacheSizes()</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.TemplateCompiler.buildIncludeRef(char[])</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.TemplateCompiler.compileExpression()</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.TemplateInterpreter.execute(java.lang.Object, java.util.Map, org.mvel.TemplateRegistry)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.ast.ForEachNode.getReducedValue(java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.ast.ForEachNode.getReducedValueAccelerated(java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.ast.NewObjectNode.updateClassName(int)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.debug.DebugTools.getAllVariableResolvers(org.mvel.integration.VariableResolverFactory)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.integration.impl.ClassImportResolverFactory.ClassImportResolverFactory(org.mvel.ParserContext, org.mvel.integration.VariableResolverFactory)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.integration.impl.ClassImportResolverFactory.getImportedClasses()</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.integration.impl.ClassImportResolverFactory.isResolveable(java.lang.String)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.integration.impl.ClassImportResolverFactory.setImportedClasses(java.util.Map)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.integration.impl.StaticMethodImportResolverFactory.StaticMethodImportResolverFactory(org.mvel.ParserContext)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.integration.impl.StaticMethodImportResolverFactory.getImportedMethods()</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.asm.ASMAccessorOptimizer._getAccessor(java.lang.Object)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.asm.ASMAccessorOptimizer.optimizeObjectCreation(char[], java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.refl.Fold.getValue(java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.refl.ReflectiveAccessorOptimizer._getAccessor(java.lang.Object)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.util.ArrayTools.collectionTranspose(java.util.Collection, java.lang.Class)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.util.ArrayTools.stringTranspose(java.util.Collection)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.util.FastList.addAll(int, java.util.Collection)</inbound>
            </feature>
        </class>
        <class confirmed="no">
            <name>java.util.LinkedList</name>
            <feature confirmed="no">
                <name>java.util.LinkedList.LinkedList()</name>
                <inbound type="feature" confirmed="yes">org.mvel.PropertyVerifier.PropertyVerifier(char[], org.mvel.ParserContext)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.PropertyVerifier.PropertyVerifier(java.lang.String, org.mvel.ParserContext)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.TemplateCompiler.compileExpression()</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.ast.NewObjectNode.updateClassName(int)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.util.ParseTools.parseParameterList(char[], int, int)</inbound>
            </feature>
            <feature confirmed="no">
                <name>java.util.LinkedList.add(java.lang.Object)</name>
                <inbound type="feature" confirmed="yes">org.mvel.ast.NewObjectNode.updateClassName(int)</inbound>
            </feature>
            <feature confirmed="no">
                <name>java.util.LinkedList.iterator()</name>
                <inbound type="feature" confirmed="yes">org.mvel.ast.NewObjectNode.updateClassName(int)</inbound>
            </feature>
            <feature confirmed="no">
                <name>java.util.LinkedList.size()</name>
                <inbound type="feature" confirmed="yes">org.mvel.ast.NewObjectNode.updateClassName(int)</inbound>
            </feature>
        </class>
        <class confirmed="no">
            <name>java.util.List</name>
            <inbound type="feature" confirmed="yes">org.mvel.CompileException.CompileException(java.lang.String, java.util.List)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.CompileException.errors</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.CompileException.getErrors()</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.CompileException.setErrors(java.util.List)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.ExpressionCompiler.compile(org.mvel.ParserContext)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.ParserContext.addError(org.mvel.ErrorDetail)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.ParserContext.errorList</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.ParserContext.getErrorList()</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.ParserContext.setErrorList(java.util.List)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.PropertyAccessor.getCollectionProperty(java.lang.Object, java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.PropertyAccessor.set(java.lang.Object)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.PropertyVerifier.PropertyVerifier(char[], org.mvel.ParserContext)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.PropertyVerifier.PropertyVerifier(java.lang.String, org.mvel.ParserContext)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.PropertyVerifier.getInputs()</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.PropertyVerifier.inputs</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.PropertyVerifier.setInputs(java.util.List)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.TemplateInterpreter.execute(java.lang.Object, java.util.Map, org.mvel.TemplateRegistry)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.ast.InlineCollectionNode.getReducedValueAccelerated(java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.ast.cache.CachedListAccessor.CachedListAccessor(java.util.List)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.asm.ASMAccessorOptimizer._getAccessor(java.lang.Object)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.asm.ASMAccessorOptimizer.getCollectionProperty(java.lang.Object, java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.asm.ASMAccessorOptimizer.optimizeCollection(char[], java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.refl.ListAccessor.getValue(java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.refl.ListAccessor.setValue(java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory, java.lang.Object)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.refl.ListAccessorNest.getValue(java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.refl.ListAccessorNest.setValue(java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory, java.lang.Object)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.refl.ReflectiveAccessorOptimizer._getAccessor(java.lang.Object)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.refl.ReflectiveAccessorOptimizer.getCollectionProperty(java.lang.Object, java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.refl.ReflectiveAccessorOptimizer.optimizeCollection(char[], java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.refl.ReflectiveAccessorOptimizer.optimizeSetAccessor(char[], java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory, boolean, java.lang.Object)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.util.ArrayTools.listTranspose(boolean[])</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.util.ArrayTools.listTranspose(char[])</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.util.ArrayTools.listTranspose(double[])</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.util.ArrayTools.listTranspose(int[])</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.util.ArrayTools.listTranspose(java.lang.String[])</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.util.ArrayTools.listTranspose(long[])</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.util.ArrayTools.listTranspose(short[])</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.util.FastList.subList(int, int)</inbound>
            <feature confirmed="no">
                <name>java.util.List.add(int, java.lang.Object)</name>
                <inbound type="feature" confirmed="yes">org.mvel.util.ArrayTools.listTranspose(boolean[])</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.util.ArrayTools.listTranspose(char[])</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.util.ArrayTools.listTranspose(double[])</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.util.ArrayTools.listTranspose(int[])</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.util.ArrayTools.listTranspose(java.lang.String[])</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.util.ArrayTools.listTranspose(long[])</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.util.ArrayTools.listTranspose(short[])</inbound>
            </feature>
            <feature confirmed="no">
                <name>java.util.List.add(java.lang.Object)</name>
                <inbound type="feature" confirmed="yes">org.mvel.ParserContext.addError(org.mvel.ErrorDetail)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.TemplateCompiler.buildIncludeRef(char[])</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.TemplateCompiler.compileExpression()</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.ast.WithNode.compileWithExpressions()</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.util.CollectionParser.parseCollection()</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.util.ParseTools.parseParameterList(char[], int, int)</inbound>
            </feature>
            <feature confirmed="no">
                <name>java.util.List.get(int)</name>
                <inbound type="feature" confirmed="yes">org.mvel.PropertyAccessor.getCollectionProperty(java.lang.Object, java.lang.String)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.TemplateCompiler.compileExpression()</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.ast.cache.CachedListAccessor.CachedListAccessor(java.util.List)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.asm.ASMAccessorOptimizer.getCollectionProperty(java.lang.Object, java.lang.String)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.asm.ASMAccessorOptimizer.optimizeCollection(char[], java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.refl.ListAccessor.getValue(java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.refl.ListAccessorNest.getValue(java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.refl.ReflectiveAccessorOptimizer.getCollectionProperty(java.lang.Object, java.lang.String)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.refl.ReflectiveAccessorOptimizer.optimizeCollection(char[], java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory)</inbound>
            </feature>
            <feature confirmed="no">
                <name>java.util.List.iterator()</name>
                <inbound type="feature" confirmed="yes">org.mvel.CompileException.CompileException(java.lang.String, java.util.List)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.TemplateCompiler.compileExpression()</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.asm.ASMAccessorOptimizer._getAccessor(java.lang.Object)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.refl.ReflectiveAccessorOptimizer._getAccessor(java.lang.Object)</inbound>
            </feature>
            <feature confirmed="no">
                <name>java.util.List.set(int, java.lang.Object)</name>
                <inbound type="feature" confirmed="yes">org.mvel.PropertyAccessor.set(java.lang.Object)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.refl.ListAccessor.setValue(java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory, java.lang.Object)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.refl.ListAccessorNest.setValue(java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory, java.lang.Object)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.refl.ReflectiveAccessorOptimizer.optimizeSetAccessor(char[], java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory, boolean, java.lang.Object)</inbound>
            </feature>
            <feature confirmed="no">
                <name>java.util.List.size()</name>
                <inbound type="feature" confirmed="yes">org.mvel.ExpressionCompiler.compile(org.mvel.ParserContext)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.TemplateCompiler.buildIncludeRef(char[])</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.TemplateCompiler.compileExpression()</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.ast.WithNode.compileWithExpressions()</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.ast.cache.CachedListAccessor.CachedListAccessor(java.util.List)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.asm.ASMAccessorOptimizer._getAccessor(java.lang.Object)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.refl.ReflectiveAccessorOptimizer._getAccessor(java.lang.Object)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.util.ParseTools.parseParameterList(char[], int, int)</inbound>
            </feature>
            <feature confirmed="no">
                <name>java.util.List.toArray()</name>
                <inbound type="feature" confirmed="yes">org.mvel.util.CollectionParser.parseCollection()</inbound>
            </feature>
            <feature confirmed="no">
                <name>java.util.List.toArray(java.lang.Object[])</name>
                <inbound type="feature" confirmed="yes">org.mvel.TemplateCompiler.buildIncludeRef(char[])</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.ast.WithNode.compileWithExpressions()</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.util.ParseTools.parseParameterList(char[], int, int)</inbound>
            </feature>
        </class>
        <class confirmed="no">
            <name>java.util.ListIterator</name>
            <inbound type="feature" confirmed="yes">org.mvel.util.FastList.listIterator()</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.util.FastList.listIterator(int)</inbound>
        </class>
        <class confirmed="no">
            <name>java.util.Map</name>
            <inbound type="feature" confirmed="yes">org.mvel.ASTNode.getReducedValue(java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.ASTNode.setName(char[])</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.AbstractParser.EX_PRECACHE</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.AbstractParser.LITERALS</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.AbstractParser.OPERATORS</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.AbstractParser._loadLanguageFeaturesByLevel(int)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.AbstractParser.configureFactory()</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.AbstractParser.createOperator(char[], int, int, int)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.AbstractParser.isReservedWord(java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.AbstractParser.nextToken()</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.AbstractParser.setExpression(java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.AbstractParser.setLanguageLevel(int)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.AbstractParser.static {}</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.CompiledExpression.setParserContext(org.mvel.ParserContext)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.DataConversion.CONVERTERS</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.DataConversion.addConversionHandler(java.lang.Class, org.mvel.ConversionHandler)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.DataConversion.canConvert(java.lang.Class, java.lang.Class)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.DataConversion.convert(java.lang.Object, java.lang.Class)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.DataConversion.static {}</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.ExpressionCompiler._compile()</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.MVEL.compileExpression(char[])</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.MVEL.compileExpression(char[], java.util.Map)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.MVEL.compileExpression(char[], java.util.Map, java.util.Map)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.MVEL.compileExpression(char[], java.util.Map, java.util.Map, java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.MVEL.compileExpression(java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.MVEL.compileExpression(java.lang.String, java.util.Map)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.MVEL.compileExpression(java.lang.String, java.util.Map, java.util.Map)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.MVEL.compileExpression(java.lang.String, java.util.Map, java.util.Map, java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.MVEL.eval(char[], java.lang.Object, java.util.Map)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.MVEL.eval(char[], java.lang.Object, java.util.Map, java.lang.Class)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.MVEL.eval(char[], java.util.Map, java.lang.Class)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.MVEL.eval(java.lang.String, java.lang.Object, java.util.Map)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.MVEL.eval(java.lang.String, java.lang.Object, java.util.Map, java.lang.Class)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.MVEL.eval(java.lang.String, java.util.Map)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.MVEL.eval(java.lang.String, java.util.Map, java.lang.Class)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.MVEL.evalToBoolean(java.lang.String, java.lang.Object, java.util.Map)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.MVEL.evalToBoolean(java.lang.String, java.util.Map)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.MVEL.evalToString(java.lang.String, java.lang.Object, java.util.Map)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.MVEL.evalToString(java.lang.String, java.util.Map)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.MVEL.executeExpression(java.lang.Object, java.lang.Object, java.util.Map)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.MVEL.executeExpression(java.lang.Object, java.lang.Object, java.util.Map, java.lang.Class)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.MVEL.executeExpression(java.lang.Object, java.util.Map)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.MVEL.executeExpression(java.lang.Object, java.util.Map, java.lang.Class)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.MVEL.parseMacros(java.lang.String, java.util.Map)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.MVELInterpretedRuntime.MVELInterpretedRuntime(char[], java.lang.Object, java.util.Map)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.MVELInterpretedRuntime.MVELInterpretedRuntime(java.lang.Object, java.util.Map)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.MVELInterpretedRuntime.MVELInterpretedRuntime(java.lang.String, java.lang.Object, java.util.Map)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.MVELSH.main(java.lang.String[])</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.MVELTemplateRegistry.MVELTemplateRegistry()</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.MVELTemplateRegistry.getTemplate(java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.MVELTemplateRegistry.isEmpty()</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.MVELTemplateRegistry.iterateTemplates()</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.MVELTemplateRegistry.registerTemplate(java.lang.String, java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.MVELTemplateRegistry.registry</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.MacroProcessor.getMacros()</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.MacroProcessor.macros</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.MacroProcessor.parse(char[])</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.MacroProcessor.setMacros(java.util.Map)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.ParserContext.ParserContext(java.util.Map, java.util.Map, java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.ParserContext.addImport(java.lang.String, java.lang.Class)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.ParserContext.addImport(java.lang.String, org.mvel.util.MethodStub)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.ParserContext.addInput(java.lang.String, java.lang.Class)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.ParserContext.addKnownLine(java.lang.String, int)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.ParserContext.addVariable(java.lang.String, java.lang.Class)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.ParserContext.getImport(java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.ParserContext.getImports()</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.ParserContext.getInputs()</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.ParserContext.getInterceptors()</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.ParserContext.getStaticImport(java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.ParserContext.getVarOrInputType(java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.ParserContext.getVariables()</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.ParserContext.hasImport(java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.ParserContext.hasImports()</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.ParserContext.hasVarOrInput(java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.ParserContext.hasVariable(java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.ParserContext.imports</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.ParserContext.initializeTables()</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.ParserContext.inputs</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.ParserContext.interceptors</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.ParserContext.isKnownLine(java.lang.String, int)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.ParserContext.processTables()</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.ParserContext.setImports(java.util.Map)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.ParserContext.setInputs(java.util.Map)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.ParserContext.setInterceptors(java.util.Map)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.ParserContext.setVariables(java.util.Map)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.ParserContext.sourceMap</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.ParserContext.variables</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.PropertyAccessor.METHOD_RESOLVER_CACHE</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.PropertyAccessor.READ_PROPERTY_RESOLVER_CACHE</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.PropertyAccessor.WRITE_PROPERTY_RESOLVER_CACHE</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.PropertyAccessor.addMethodCache(java.lang.Class, java.lang.Integer, java.lang.reflect.Method)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.PropertyAccessor.addReadCache(java.lang.Class, java.lang.Integer, java.lang.reflect.Member)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.PropertyAccessor.addWriteCache(java.lang.Class, java.lang.Integer, java.lang.reflect.Member)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.PropertyAccessor.checkMethodCache(java.lang.Class, java.lang.Integer)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.PropertyAccessor.checkReadCache(java.lang.Class, java.lang.Integer)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.PropertyAccessor.checkWriteCache(java.lang.Class, java.lang.Integer)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.PropertyAccessor.clearPropertyResolverCache()</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.PropertyAccessor.configureFactory()</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.PropertyAccessor.getBeanProperty(java.lang.Object, java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.PropertyAccessor.getCollectionProperty(java.lang.Object, java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.PropertyAccessor.reportCacheSizes()</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.PropertyAccessor.set(java.lang.Object)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.TemplateCompiler.buildIncludeRef(char[])</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.TemplateInterpreter.EX_NODE_CACHE</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.TemplateInterpreter.EX_PRECACHE</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.TemplateInterpreter.EX_PRECOMP_CACHE</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.TemplateInterpreter.TemplateInterpreter(java.lang.CharSequence)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.TemplateInterpreter.TemplateInterpreter(java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.TemplateInterpreter.eval(java.lang.String, java.lang.Object)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.TemplateInterpreter.eval(java.lang.String, java.lang.Object, java.util.Map)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.TemplateInterpreter.eval(java.lang.String, java.util.Map)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.TemplateInterpreter.evalToString(java.lang.String, java.lang.Object, java.util.Map)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.TemplateInterpreter.evalToString(java.lang.String, java.util.Map)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.TemplateInterpreter.execute(java.lang.Object, java.util.Map)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.TemplateInterpreter.execute(java.lang.Object, java.util.Map, org.mvel.TemplateRegistry)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.TemplateInterpreter.getValuePE(java.lang.String, java.lang.Object, java.util.Map)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.TemplateInterpreter.parse(java.io.File, java.lang.Object, java.util.Map)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.TemplateInterpreter.parse(java.io.File, java.lang.Object, java.util.Map, org.mvel.TemplateRegistry)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.TemplateInterpreter.parse(java.lang.CharSequence, java.lang.Object, java.util.Map)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.TemplateInterpreter.parse(java.lang.CharSequence, java.lang.Object, java.util.Map, org.mvel.TemplateRegistry)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.TemplateInterpreter.parse(java.lang.String, java.lang.Object, java.util.Map)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.TemplateInterpreter.parse(java.lang.String, java.lang.Object, java.util.Map, org.mvel.TemplateRegistry)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.TemplateInterpreter.parseToStream(java.io.File, java.lang.Object, java.util.Map, java.io.OutputStream)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.TemplateInterpreter.static {}</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.ast.PropertyASTNode.initializePropertyNode(java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.conversion.ArrayCH.CNV</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.conversion.ArrayCH.canConvertFrom(java.lang.Class)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.conversion.ArrayCH.convertFrom(java.lang.Object)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.conversion.ArrayCH.static {}</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.conversion.BigDecimalCH.CNV</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.conversion.BigDecimalCH.canConvertFrom(java.lang.Class)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.conversion.BigDecimalCH.convertFrom(java.lang.Object)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.conversion.BigDecimalCH.static {}</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.conversion.BigIntegerCH.CNV</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.conversion.BigIntegerCH.canConvertFrom(java.lang.Class)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.conversion.BigIntegerCH.convertFrom(java.lang.Object)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.conversion.BigIntegerCH.static {}</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.conversion.BooleanCH$2.convert(java.lang.Object)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.conversion.BooleanCH.CNV</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.conversion.BooleanCH.access$0()</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.conversion.BooleanCH.canConvertFrom(java.lang.Class)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.conversion.BooleanCH.convertFrom(java.lang.Object)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.conversion.BooleanCH.static {}</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.conversion.ByteCH$2.convert(java.lang.Object)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.conversion.ByteCH.CNV</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.conversion.ByteCH.access$0()</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.conversion.ByteCH.canConvertFrom(java.lang.Class)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.conversion.ByteCH.convertFrom(java.lang.Object)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.conversion.ByteCH.static {}</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.conversion.CharArrayCH.CNV</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.conversion.CharArrayCH.canConvertFrom(java.lang.Class)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.conversion.CharArrayCH.convertFrom(java.lang.Object)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.conversion.CharArrayCH.static {}</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.conversion.CharCH$2.convert(java.lang.Object)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.conversion.CharCH.CNV</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.conversion.CharCH.access$0()</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.conversion.CharCH.canConvertFrom(java.lang.Class)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.conversion.CharCH.convertFrom(java.lang.Object)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.conversion.CharCH.static {}</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.conversion.DoubleCH$2.convert(java.lang.Object)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.conversion.DoubleCH.CNV</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.conversion.DoubleCH.access$0()</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.conversion.DoubleCH.canConvertFrom(java.lang.Class)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.conversion.DoubleCH.convertFrom(java.lang.Object)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.conversion.DoubleCH.static {}</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.conversion.FloatCH$2.convert(java.lang.Object)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.conversion.FloatCH.CNV</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.conversion.FloatCH.access$0()</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.conversion.FloatCH.canConvertFrom(java.lang.Class)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.conversion.FloatCH.convertFrom(java.lang.Object)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.conversion.FloatCH.static {}</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.conversion.IntArrayCH.CNV</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.conversion.IntArrayCH.canConvertFrom(java.lang.Class)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.conversion.IntArrayCH.convertFrom(java.lang.Object)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.conversion.IntArrayCH.static {}</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.conversion.IntegerCH.CNV</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.conversion.IntegerCH.canConvertFrom(java.lang.Class)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.conversion.IntegerCH.convertFrom(java.lang.Object)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.conversion.IntegerCH.static {}</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.conversion.LongCH$2.convert(java.lang.Object)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.conversion.LongCH.CNV</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.conversion.LongCH.access$0()</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.conversion.LongCH.canConvertFrom(java.lang.Class)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.conversion.LongCH.convertFrom(java.lang.Object)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.conversion.LongCH.static {}</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.conversion.PrimArrayHandler.CNV</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.conversion.PrimArrayHandler.PrimArrayHandler(java.lang.Class)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.conversion.PrimArrayHandler.canConvertFrom(java.lang.Class)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.conversion.PrimArrayHandler.convertFrom(java.lang.Object)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.conversion.PrimIntArrayCH.CNV</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.conversion.PrimIntArrayCH.canConvertFrom(java.lang.Class)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.conversion.PrimIntArrayCH.convertFrom(java.lang.Object)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.conversion.PrimIntArrayCH.static {}</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.conversion.ShortCH$2.convert(java.lang.Object)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.conversion.ShortCH.CNV</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.conversion.ShortCH.access$0()</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.conversion.ShortCH.canConvertFrom(java.lang.Class)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.conversion.ShortCH.convertFrom(java.lang.Object)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.conversion.ShortCH.static {}</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.conversion.StringArrayCH.CNV</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.conversion.StringArrayCH.canConvertFrom(java.lang.Class)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.conversion.StringArrayCH.static {}</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.debug.DebugTools.getAllVariableResolvers(org.mvel.integration.VariableResolverFactory)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.debug.DebuggerContext.DebuggerContext()</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.debug.DebuggerContext.breakpoints</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.debug.DebuggerContext.clearAllBreakpoints()</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.debug.DebuggerContext.getBreakpoints()</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.debug.DebuggerContext.hasBreakpoint(java.lang.String, int)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.debug.DebuggerContext.hasBreakpoint(org.mvel.ast.LineLabel)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.debug.DebuggerContext.hasBreakpoints()</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.debug.DebuggerContext.registerBreakpoint(java.lang.String, int)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.debug.DebuggerContext.removeBreakpoint(java.lang.String, int)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.debug.DebuggerContext.setBreakpoints(java.util.Map)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.integration.impl.BaseVariableResolverFactory.getKnownVariables()</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.integration.impl.BaseVariableResolverFactory.getVariableResolver(java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.integration.impl.BaseVariableResolverFactory.variableResolvers</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.integration.impl.ClassImportResolverFactory.ClassImportResolverFactory()</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.integration.impl.ClassImportResolverFactory.ClassImportResolverFactory(org.mvel.ParserContext, org.mvel.integration.VariableResolverFactory)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.integration.impl.ClassImportResolverFactory.addClass(java.lang.Class)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.integration.impl.ClassImportResolverFactory.clear()</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.integration.impl.ClassImportResolverFactory.createVariable(java.lang.String, java.lang.Object)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.integration.impl.ClassImportResolverFactory.createVariable(java.lang.String, java.lang.Object, java.lang.Class)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.integration.impl.ClassImportResolverFactory.getImportedClasses()</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.integration.impl.ClassImportResolverFactory.isResolveable(java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.integration.impl.ClassImportResolverFactory.isTarget(java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.integration.impl.ClassImportResolverFactory.setImportedClasses(java.util.Map)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.integration.impl.DefaultLocalVariableResolverFactory.DefaultLocalVariableResolverFactory()</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.integration.impl.DefaultLocalVariableResolverFactory.DefaultLocalVariableResolverFactory(java.util.Map)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.integration.impl.DefaultLocalVariableResolverFactory.DefaultLocalVariableResolverFactory(java.util.Map, boolean)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.integration.impl.DefaultLocalVariableResolverFactory.DefaultLocalVariableResolverFactory(java.util.Map, org.mvel.integration.VariableResolverFactory)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.integration.impl.DefaultLocalVariableResolverFactory.DefaultLocalVariableResolverFactory(org.mvel.integration.VariableResolverFactory)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.integration.impl.MapVariableResolver.MapVariableResolver(java.util.Map, java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.integration.impl.MapVariableResolver.MapVariableResolver(java.util.Map, java.lang.String, boolean)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.integration.impl.MapVariableResolver.MapVariableResolver(java.util.Map, java.lang.String, java.lang.Class)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.integration.impl.MapVariableResolver.MapVariableResolver(java.util.Map, java.lang.String, java.lang.Class, boolean)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.integration.impl.MapVariableResolver.getValue()</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.integration.impl.MapVariableResolver.setValue(java.lang.Object)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.integration.impl.MapVariableResolver.setVariableMap(java.util.Map)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.integration.impl.MapVariableResolver.variableMap</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.integration.impl.MapVariableResolverFactory.MapVariableResolverFactory(java.util.Map)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.integration.impl.MapVariableResolverFactory.MapVariableResolverFactory(java.util.Map, boolean)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.integration.impl.MapVariableResolverFactory.MapVariableResolverFactory(java.util.Map, org.mvel.integration.VariableResolverFactory)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.integration.impl.MapVariableResolverFactory.addResolver(java.lang.String, org.mvel.integration.VariableResolver)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.integration.impl.MapVariableResolverFactory.createVariable(java.lang.String, java.lang.Object)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.integration.impl.MapVariableResolverFactory.createVariable(java.lang.String, java.lang.Object, java.lang.Class)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.integration.impl.MapVariableResolverFactory.getKnownVariables()</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.integration.impl.MapVariableResolverFactory.getVariableResolver(java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.integration.impl.MapVariableResolverFactory.isResolveable(java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.integration.impl.MapVariableResolverFactory.isTarget(java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.integration.impl.MapVariableResolverFactory.variables</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.integration.impl.StaticMethodImportResolverFactory.StaticMethodImportResolverFactory()</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.integration.impl.StaticMethodImportResolverFactory.StaticMethodImportResolverFactory(org.mvel.ParserContext)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.integration.impl.StaticMethodImportResolverFactory.createVariable(java.lang.String, java.lang.Object)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.integration.impl.StaticMethodImportResolverFactory.getImportedMethods()</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.integration.impl.StaticMethodImportResolverFactory.isTarget(java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.integration.impl.TypeInjectionResolverFactoryImpl.TypeInjectionResolverFactoryImpl(java.util.Map)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.integration.impl.TypeInjectionResolverFactoryImpl.TypeInjectionResolverFactoryImpl(java.util.Map, boolean)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.integration.impl.TypeInjectionResolverFactoryImpl.TypeInjectionResolverFactoryImpl(java.util.Map, org.mvel.integration.VariableResolverFactory)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.optimizers.OptimizerFactory.accessorCompilers</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.optimizers.OptimizerFactory.getAccessorCompiler(java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.optimizers.OptimizerFactory.getDefaultAccessorCompiler()</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.optimizers.OptimizerFactory.setDefaultOptimizer(java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.optimizers.OptimizerFactory.static {}</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.asm.ASMAccessorOptimizer._getAccessor(java.lang.Object)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.asm.ASMAccessorOptimizer.getBeanProperty(java.lang.Object, java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.asm.ASMAccessorOptimizer.getCollectionProperty(java.lang.Object, java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.refl.MapAccessor.getValue(java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.refl.MapAccessor.setValue(java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory, java.lang.Object)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.refl.MapAccessorNest.getValue(java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.refl.MapAccessorNest.setValue(java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory, java.lang.Object)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.refl.ReflectiveAccessorOptimizer.REFLECTIVE_ACCESSOR_CACHE</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.refl.ReflectiveAccessorOptimizer._getAccessor(java.lang.Object)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.refl.ReflectiveAccessorOptimizer.get(java.lang.String, java.lang.Object)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.refl.ReflectiveAccessorOptimizer.getBeanProperty(java.lang.Object, java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.refl.ReflectiveAccessorOptimizer.getCollectionProperty(java.lang.Object, java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.refl.ReflectiveAccessorOptimizer.optimizeSetAccessor(char[], java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory, boolean, java.lang.Object)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.refl.ReflectiveAccessorOptimizer.static {}</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.util.ParseTools.CLASS_CONSTRUCTOR_CACHE</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.util.ParseTools.CLASS_RESOLVER_CACHE</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.util.ParseTools.CONSTRUCTOR_PARMS_CACHE</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.util.ParseTools.RESOLVED_CONST_CACHE</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.util.ParseTools.RESOLVED_METH_CACHE</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.util.ParseTools.containsCheck(java.lang.Object, java.lang.Object)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.util.ParseTools.createClass(java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.util.ParseTools.finalLocalVariableFactory(org.mvel.integration.VariableResolverFactory)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.util.ParseTools.findClass(org.mvel.integration.VariableResolverFactory, java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.util.ParseTools.getBestCandidate(java.lang.Class[], java.lang.String, java.lang.Class, java.lang.reflect.Method[])</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.util.ParseTools.getBestConstructorCanadidate(java.lang.Object[], java.lang.Class)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.util.ParseTools.getConstructors(java.lang.Class)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.util.ParseTools.getConstructors(java.lang.reflect.Constructor)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.util.ParseTools.parseParameters(char[])</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.util.ParseTools.static {}</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.util.PropertyTools.contains(java.lang.Object, java.lang.Object)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.util.PropertyTools.isEmpty(java.lang.Object)</inbound>
            <feature confirmed="no">
                <name>java.util.Map.clear()</name>
                <inbound type="feature" confirmed="yes">org.mvel.AbstractParser.setLanguageLevel(int)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.MVELSH.main(java.lang.String[])</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.PropertyAccessor.clearPropertyResolverCache()</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.debug.DebuggerContext.clearAllBreakpoints()</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.integration.impl.ClassImportResolverFactory.clear()</inbound>
            </feature>
            <feature confirmed="no">
                <name>java.util.Map.containsKey(java.lang.Object)</name>
                <inbound type="feature" confirmed="yes">org.mvel.ASTNode.getReducedValue(java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.ASTNode.setName(char[])</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.AbstractParser.isReservedWord(java.lang.String)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.AbstractParser.nextToken()</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.DataConversion.canConvert(java.lang.Class, java.lang.Class)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.MacroProcessor.parse(char[])</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.ParserContext.addInput(java.lang.String, java.lang.Class)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.ParserContext.addKnownLine(java.lang.String, int)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.ParserContext.addVariable(java.lang.String, java.lang.Class)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.ParserContext.getImport(java.lang.String)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.ParserContext.getVarOrInputType(java.lang.String)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.ParserContext.hasImport(java.lang.String)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.ParserContext.hasVarOrInput(java.lang.String)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.ParserContext.hasVariable(java.lang.String)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.ParserContext.isKnownLine(java.lang.String, int)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.PropertyAccessor.getBeanProperty(java.lang.Object, java.lang.String)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.TemplateInterpreter.execute(java.lang.Object, java.util.Map, org.mvel.TemplateRegistry)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.ast.PropertyASTNode.initializePropertyNode(java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.conversion.ArrayCH.canConvertFrom(java.lang.Class)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.conversion.ArrayCH.convertFrom(java.lang.Object)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.conversion.BigDecimalCH.canConvertFrom(java.lang.Class)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.conversion.BigDecimalCH.convertFrom(java.lang.Object)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.conversion.BigIntegerCH.canConvertFrom(java.lang.Class)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.conversion.BigIntegerCH.convertFrom(java.lang.Object)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.conversion.BooleanCH.canConvertFrom(java.lang.Class)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.conversion.BooleanCH.convertFrom(java.lang.Object)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.conversion.ByteCH.canConvertFrom(java.lang.Class)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.conversion.ByteCH.convertFrom(java.lang.Object)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.conversion.CharArrayCH.canConvertFrom(java.lang.Class)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.conversion.CharArrayCH.convertFrom(java.lang.Object)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.conversion.CharCH.canConvertFrom(java.lang.Class)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.conversion.CharCH.convertFrom(java.lang.Object)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.conversion.DoubleCH.canConvertFrom(java.lang.Class)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.conversion.DoubleCH.convertFrom(java.lang.Object)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.conversion.FloatCH.canConvertFrom(java.lang.Class)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.conversion.FloatCH.convertFrom(java.lang.Object)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.conversion.IntArrayCH.canConvertFrom(java.lang.Class)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.conversion.IntArrayCH.convertFrom(java.lang.Object)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.conversion.IntegerCH.canConvertFrom(java.lang.Class)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.conversion.IntegerCH.convertFrom(java.lang.Object)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.conversion.LongCH.canConvertFrom(java.lang.Class)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.conversion.LongCH.convertFrom(java.lang.Object)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.conversion.PrimArrayHandler.canConvertFrom(java.lang.Class)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.conversion.PrimArrayHandler.convertFrom(java.lang.Object)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.conversion.PrimIntArrayCH.canConvertFrom(java.lang.Class)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.conversion.PrimIntArrayCH.convertFrom(java.lang.Object)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.conversion.ShortCH.canConvertFrom(java.lang.Class)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.conversion.ShortCH.convertFrom(java.lang.Object)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.conversion.StringArrayCH.canConvertFrom(java.lang.Class)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.debug.DebuggerContext.hasBreakpoint(java.lang.String, int)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.debug.DebuggerContext.hasBreakpoint(org.mvel.ast.LineLabel)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.debug.DebuggerContext.registerBreakpoint(java.lang.String, int)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.debug.DebuggerContext.removeBreakpoint(java.lang.String, int)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.integration.impl.BaseVariableResolverFactory.getVariableResolver(java.lang.String)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.integration.impl.ClassImportResolverFactory.isResolveable(java.lang.String)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.integration.impl.ClassImportResolverFactory.isTarget(java.lang.String)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.integration.impl.MapVariableResolverFactory.getVariableResolver(java.lang.String)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.integration.impl.MapVariableResolverFactory.isResolveable(java.lang.String)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.integration.impl.MapVariableResolverFactory.isTarget(java.lang.String)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.integration.impl.StaticMethodImportResolverFactory.isTarget(java.lang.String)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.asm.ASMAccessorOptimizer.getBeanProperty(java.lang.Object, java.lang.String)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.refl.ReflectiveAccessorOptimizer.getBeanProperty(java.lang.Object, java.lang.String)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.util.ParseTools.containsCheck(java.lang.Object, java.lang.Object)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.util.ParseTools.findClass(org.mvel.integration.VariableResolverFactory, java.lang.String)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.util.PropertyTools.contains(java.lang.Object, java.lang.Object)</inbound>
            </feature>
            <feature confirmed="no">
                <name>java.util.Map.get(java.lang.Object)</name>
                <inbound type="feature" confirmed="yes">org.mvel.ASTNode.getReducedValue(java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.ASTNode.setName(char[])</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.AbstractParser.createOperator(char[], int, int, int)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.AbstractParser.nextToken()</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.AbstractParser.setExpression(java.lang.String)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.DataConversion.canConvert(java.lang.Class, java.lang.Class)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.DataConversion.convert(java.lang.Object, java.lang.Class)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.ExpressionCompiler._compile()</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.MVELTemplateRegistry.getTemplate(java.lang.String)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.MacroProcessor.parse(char[])</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.ParserContext.addKnownLine(java.lang.String, int)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.ParserContext.getImport(java.lang.String)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.ParserContext.getStaticImport(java.lang.String)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.ParserContext.getVarOrInputType(java.lang.String)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.ParserContext.isKnownLine(java.lang.String, int)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.ParserContext.setImports(java.util.Map)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.PropertyAccessor.addMethodCache(java.lang.Class, java.lang.Integer, java.lang.reflect.Method)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.PropertyAccessor.addReadCache(java.lang.Class, java.lang.Integer, java.lang.reflect.Member)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.PropertyAccessor.addWriteCache(java.lang.Class, java.lang.Integer, java.lang.reflect.Member)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.PropertyAccessor.checkMethodCache(java.lang.Class, java.lang.Integer)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.PropertyAccessor.checkReadCache(java.lang.Class, java.lang.Integer)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.PropertyAccessor.checkWriteCache(java.lang.Class, java.lang.Integer)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.PropertyAccessor.getBeanProperty(java.lang.Object, java.lang.String)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.PropertyAccessor.getCollectionProperty(java.lang.Object, java.lang.String)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.PropertyAccessor.reportCacheSizes()</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.TemplateCompiler.buildIncludeRef(char[])</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.TemplateInterpreter.TemplateInterpreter(java.lang.CharSequence)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.TemplateInterpreter.TemplateInterpreter(java.lang.String)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.TemplateInterpreter.execute(java.lang.Object, java.util.Map, org.mvel.TemplateRegistry)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.ast.PropertyASTNode.initializePropertyNode(java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.conversion.ArrayCH.convertFrom(java.lang.Object)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.conversion.BigDecimalCH.convertFrom(java.lang.Object)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.conversion.BigIntegerCH.convertFrom(java.lang.Object)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.conversion.BooleanCH$2.convert(java.lang.Object)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.conversion.BooleanCH.convertFrom(java.lang.Object)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.conversion.ByteCH$2.convert(java.lang.Object)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.conversion.ByteCH.convertFrom(java.lang.Object)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.conversion.CharArrayCH.convertFrom(java.lang.Object)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.conversion.CharCH$2.convert(java.lang.Object)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.conversion.CharCH.convertFrom(java.lang.Object)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.conversion.DoubleCH$2.convert(java.lang.Object)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.conversion.DoubleCH.convertFrom(java.lang.Object)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.conversion.FloatCH$2.convert(java.lang.Object)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.conversion.FloatCH.convertFrom(java.lang.Object)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.conversion.IntArrayCH.convertFrom(java.lang.Object)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.conversion.IntegerCH.convertFrom(java.lang.Object)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.conversion.LongCH$2.convert(java.lang.Object)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.conversion.LongCH.convertFrom(java.lang.Object)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.conversion.PrimArrayHandler.convertFrom(java.lang.Object)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.conversion.PrimIntArrayCH.convertFrom(java.lang.Object)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.conversion.ShortCH$2.convert(java.lang.Object)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.conversion.ShortCH.convertFrom(java.lang.Object)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.debug.DebuggerContext.hasBreakpoint(java.lang.String, int)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.debug.DebuggerContext.hasBreakpoint(org.mvel.ast.LineLabel)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.debug.DebuggerContext.registerBreakpoint(java.lang.String, int)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.debug.DebuggerContext.removeBreakpoint(java.lang.String, int)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.integration.impl.BaseVariableResolverFactory.getVariableResolver(java.lang.String)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.integration.impl.ClassImportResolverFactory.ClassImportResolverFactory(org.mvel.ParserContext, org.mvel.integration.VariableResolverFactory)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.integration.impl.ClassImportResolverFactory.getImportedClasses()</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.integration.impl.ClassImportResolverFactory.setImportedClasses(java.util.Map)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.integration.impl.MapVariableResolver.getValue()</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.integration.impl.MapVariableResolverFactory.getVariableResolver(java.lang.String)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.integration.impl.StaticMethodImportResolverFactory.StaticMethodImportResolverFactory(org.mvel.ParserContext)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.integration.impl.StaticMethodImportResolverFactory.getImportedMethods()</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.optimizers.OptimizerFactory.getAccessorCompiler(java.lang.String)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.optimizers.OptimizerFactory.getDefaultAccessorCompiler()</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.optimizers.OptimizerFactory.setDefaultOptimizer(java.lang.String)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.asm.ASMAccessorOptimizer._getAccessor(java.lang.Object)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.asm.ASMAccessorOptimizer.getBeanProperty(java.lang.Object, java.lang.String)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.asm.ASMAccessorOptimizer.getCollectionProperty(java.lang.Object, java.lang.String)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.refl.MapAccessor.getValue(java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.refl.MapAccessorNest.getValue(java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.refl.ReflectiveAccessorOptimizer._getAccessor(java.lang.Object)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.refl.ReflectiveAccessorOptimizer.get(java.lang.String, java.lang.Object)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.refl.ReflectiveAccessorOptimizer.getBeanProperty(java.lang.Object, java.lang.String)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.refl.ReflectiveAccessorOptimizer.getCollectionProperty(java.lang.Object, java.lang.String)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.util.ParseTools.createClass(java.lang.String)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.util.ParseTools.findClass(org.mvel.integration.VariableResolverFactory, java.lang.String)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.util.ParseTools.getBestCandidate(java.lang.Class[], java.lang.String, java.lang.Class, java.lang.reflect.Method[])</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.util.ParseTools.getBestConstructorCanadidate(java.lang.Object[], java.lang.Class)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.util.ParseTools.getConstructors(java.lang.Class)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.util.ParseTools.getConstructors(java.lang.reflect.Constructor)</inbound>
            </feature>
            <feature confirmed="no">
                <name>java.util.Map.isEmpty()</name>
                <inbound type="feature" confirmed="yes">org.mvel.MVELTemplateRegistry.isEmpty()</inbound>
            </feature>
            <feature confirmed="no">
                <name>java.util.Map.keySet()</name>
                <inbound type="feature" confirmed="yes">org.mvel.MVELTemplateRegistry.iterateTemplates()</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.ParserContext.processTables()</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.ParserContext.setImports(java.util.Map)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.PropertyAccessor.reportCacheSizes()</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.TemplateCompiler.buildIncludeRef(char[])</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.integration.impl.BaseVariableResolverFactory.getKnownVariables()</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.integration.impl.ClassImportResolverFactory.ClassImportResolverFactory(org.mvel.ParserContext, org.mvel.integration.VariableResolverFactory)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.integration.impl.ClassImportResolverFactory.getImportedClasses()</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.integration.impl.ClassImportResolverFactory.setImportedClasses(java.util.Map)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.integration.impl.MapVariableResolverFactory.getKnownVariables()</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.integration.impl.StaticMethodImportResolverFactory.StaticMethodImportResolverFactory(org.mvel.ParserContext)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.integration.impl.StaticMethodImportResolverFactory.getImportedMethods()</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.asm.ASMAccessorOptimizer._getAccessor(java.lang.Object)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.refl.ReflectiveAccessorOptimizer._getAccessor(java.lang.Object)</inbound>
            </feature>
            <feature confirmed="no">
                <name>java.util.Map.put(java.lang.Object, java.lang.Object)</name>
                <inbound type="feature" confirmed="yes">org.mvel.AbstractParser._loadLanguageFeaturesByLevel(int)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.AbstractParser.setExpression(java.lang.String)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.AbstractParser.static {}</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.DataConversion.addConversionHandler(java.lang.Class, org.mvel.ConversionHandler)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.DataConversion.static {}</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.MVELTemplateRegistry.registerTemplate(java.lang.String, java.lang.String)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.ParserContext.addImport(java.lang.String, java.lang.Class)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.ParserContext.addImport(java.lang.String, org.mvel.util.MethodStub)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.ParserContext.addInput(java.lang.String, java.lang.Class)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.ParserContext.addKnownLine(java.lang.String, int)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.ParserContext.addVariable(java.lang.String, java.lang.Class)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.PropertyAccessor.addMethodCache(java.lang.Class, java.lang.Integer, java.lang.reflect.Method)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.PropertyAccessor.addReadCache(java.lang.Class, java.lang.Integer, java.lang.reflect.Member)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.PropertyAccessor.addWriteCache(java.lang.Class, java.lang.Integer, java.lang.reflect.Member)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.PropertyAccessor.set(java.lang.Object)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.TemplateInterpreter.TemplateInterpreter(java.lang.CharSequence)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.TemplateInterpreter.TemplateInterpreter(java.lang.String)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.TemplateInterpreter.execute(java.lang.Object, java.util.Map, org.mvel.TemplateRegistry)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.conversion.ArrayCH.static {}</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.conversion.BigDecimalCH.static {}</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.conversion.BigIntegerCH.static {}</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.conversion.BooleanCH.static {}</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.conversion.ByteCH.static {}</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.conversion.CharArrayCH.static {}</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.conversion.CharCH.static {}</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.conversion.DoubleCH.static {}</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.conversion.FloatCH.static {}</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.conversion.IntArrayCH.static {}</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.conversion.IntegerCH.static {}</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.conversion.LongCH.static {}</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.conversion.PrimArrayHandler.PrimArrayHandler(java.lang.Class)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.conversion.PrimIntArrayCH.static {}</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.conversion.ShortCH.static {}</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.conversion.StringArrayCH.static {}</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.debug.DebugTools.getAllVariableResolvers(org.mvel.integration.VariableResolverFactory)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.debug.DebuggerContext.registerBreakpoint(java.lang.String, int)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.integration.impl.ClassImportResolverFactory.ClassImportResolverFactory(org.mvel.ParserContext, org.mvel.integration.VariableResolverFactory)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.integration.impl.ClassImportResolverFactory.addClass(java.lang.Class)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.integration.impl.ClassImportResolverFactory.getImportedClasses()</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.integration.impl.ClassImportResolverFactory.setImportedClasses(java.util.Map)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.integration.impl.MapVariableResolver.setValue(java.lang.Object)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.integration.impl.MapVariableResolverFactory.addResolver(java.lang.String, org.mvel.integration.VariableResolver)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.integration.impl.StaticMethodImportResolverFactory.createVariable(java.lang.String, java.lang.Object)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.integration.impl.StaticMethodImportResolverFactory.getImportedMethods()</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.optimizers.OptimizerFactory.static {}</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.refl.MapAccessor.setValue(java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory, java.lang.Object)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.refl.MapAccessorNest.setValue(java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory, java.lang.Object)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.refl.ReflectiveAccessorOptimizer.get(java.lang.String, java.lang.Object)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.refl.ReflectiveAccessorOptimizer.optimizeSetAccessor(char[], java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory, boolean, java.lang.Object)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.refl.collection.MapCreator.getValue(java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.util.CollectionParser.parseCollection()</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.util.ParseTools.createClass(java.lang.String)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.util.ParseTools.getBestCandidate(java.lang.Class[], java.lang.String, java.lang.Class, java.lang.reflect.Method[])</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.util.ParseTools.getBestConstructorCanadidate(java.lang.Object[], java.lang.Class)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.util.ParseTools.getConstructors(java.lang.Class)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.util.ParseTools.getConstructors(java.lang.reflect.Constructor)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.util.ParseTools.parseParameters(char[])</inbound>
            </feature>
            <feature confirmed="no">
                <name>java.util.Map.remove(java.lang.Object)</name>
                <inbound type="feature" confirmed="yes">org.mvel.ParserContext.processTables()</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.TemplateInterpreter.execute(java.lang.Object, java.util.Map, org.mvel.TemplateRegistry)</inbound>
            </feature>
            <feature confirmed="no">
                <name>java.util.Map.size()</name>
                <inbound type="feature" confirmed="yes">org.mvel.CompiledExpression.setParserContext(org.mvel.ParserContext)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.ParserContext.hasImports()</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.PropertyAccessor.reportCacheSizes()</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.debug.DebuggerContext.hasBreakpoints()</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.asm.ASMAccessorOptimizer._getAccessor(java.lang.Object)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.refl.ReflectiveAccessorOptimizer._getAccessor(java.lang.Object)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.util.PropertyTools.isEmpty(java.lang.Object)</inbound>
            </feature>
        </class>
        <class confirmed="no">
            <name>java.util.Set</name>
            <inbound type="feature" confirmed="yes">org.mvel.MVELTemplateRegistry.iterateTemplates()</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.ParserContext.addKnownLine(java.lang.String, int)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.ParserContext.addPackageImport(java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.ParserContext.checkForDynamicImport(java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.ParserContext.getPackageImports()</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.ParserContext.hasImports()</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.ParserContext.isKnownLine(java.lang.String, int)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.ParserContext.packageImports</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.ParserContext.processTables()</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.ParserContext.setImports(java.util.Map)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.PropertyAccessor.reportCacheSizes()</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.TemplateCompiler.buildIncludeRef(char[])</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.debug.DebugTools.getAllVariableResolvers(org.mvel.integration.VariableResolverFactory)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.debug.DebuggerContext.hasBreakpoint(java.lang.String, int)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.debug.DebuggerContext.hasBreakpoint(org.mvel.ast.LineLabel)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.debug.DebuggerContext.registerBreakpoint(java.lang.String, int)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.debug.DebuggerContext.removeBreakpoint(java.lang.String, int)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.integration.VariableResolverFactory.getKnownVariables()</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.integration.impl.BaseVariableResolverFactory.getKnownVariables()</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.integration.impl.ClassImportResolverFactory.ClassImportResolverFactory(org.mvel.ParserContext, org.mvel.integration.VariableResolverFactory)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.integration.impl.ClassImportResolverFactory.addPackageImport(java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.integration.impl.ClassImportResolverFactory.getImportedClasses()</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.integration.impl.ClassImportResolverFactory.isResolveable(java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.integration.impl.ClassImportResolverFactory.packageImports</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.integration.impl.ClassImportResolverFactory.setImportedClasses(java.util.Map)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.integration.impl.MapVariableResolverFactory.getKnownVariables()</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.integration.impl.StaticMethodImportResolverFactory.StaticMethodImportResolverFactory(org.mvel.ParserContext)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.integration.impl.StaticMethodImportResolverFactory.getImportedMethods()</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.integration.impl.TypeInjectionResolverFactoryImpl.getKnownVariables()</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.asm.ASMAccessorOptimizer._getAccessor(java.lang.Object)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.refl.ReflectiveAccessorOptimizer._getAccessor(java.lang.Object)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.util.ArrayTools.setTranspose(java.lang.String[])</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.util.ReflectionUtil.getAllFields(java.lang.Class)</inbound>
            <feature confirmed="no">
                <name>java.util.Set.add(java.lang.Object)</name>
                <inbound type="feature" confirmed="yes">org.mvel.ParserContext.addKnownLine(java.lang.String, int)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.ParserContext.addPackageImport(java.lang.String)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.debug.DebuggerContext.registerBreakpoint(java.lang.String, int)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.integration.impl.ClassImportResolverFactory.addPackageImport(java.lang.String)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.util.ArrayTools.setTranspose(java.lang.String[])</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.util.ReflectionUtil.getAllFields(java.lang.Class)</inbound>
            </feature>
            <feature confirmed="no">
                <name>java.util.Set.addAll(java.util.Collection)</name>
                <inbound type="feature" confirmed="yes">org.mvel.integration.impl.BaseVariableResolverFactory.getKnownVariables()</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.integration.impl.MapVariableResolverFactory.getKnownVariables()</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.integration.impl.TypeInjectionResolverFactoryImpl.getKnownVariables()</inbound>
            </feature>
            <feature confirmed="no">
                <name>java.util.Set.contains(java.lang.Object)</name>
                <inbound type="feature" confirmed="yes">org.mvel.ParserContext.isKnownLine(java.lang.String, int)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.debug.DebuggerContext.hasBreakpoint(java.lang.String, int)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.debug.DebuggerContext.hasBreakpoint(org.mvel.ast.LineLabel)</inbound>
            </feature>
            <feature confirmed="no">
                <name>java.util.Set.iterator()</name>
                <inbound type="feature" confirmed="yes">org.mvel.MVELTemplateRegistry.iterateTemplates()</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.ParserContext.checkForDynamicImport(java.lang.String)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.ParserContext.processTables()</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.ParserContext.setImports(java.util.Map)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.PropertyAccessor.reportCacheSizes()</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.TemplateCompiler.buildIncludeRef(char[])</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.debug.DebugTools.getAllVariableResolvers(org.mvel.integration.VariableResolverFactory)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.integration.impl.ClassImportResolverFactory.ClassImportResolverFactory(org.mvel.ParserContext, org.mvel.integration.VariableResolverFactory)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.integration.impl.ClassImportResolverFactory.getImportedClasses()</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.integration.impl.ClassImportResolverFactory.isResolveable(java.lang.String)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.integration.impl.ClassImportResolverFactory.setImportedClasses(java.util.Map)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.integration.impl.StaticMethodImportResolverFactory.StaticMethodImportResolverFactory(org.mvel.ParserContext)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.integration.impl.StaticMethodImportResolverFactory.getImportedMethods()</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.asm.ASMAccessorOptimizer._getAccessor(java.lang.Object)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.refl.ReflectiveAccessorOptimizer._getAccessor(java.lang.Object)</inbound>
            </feature>
            <feature confirmed="no">
                <name>java.util.Set.remove(java.lang.Object)</name>
                <inbound type="feature" confirmed="yes">org.mvel.debug.DebuggerContext.removeBreakpoint(java.lang.String, int)</inbound>
            </feature>
            <feature confirmed="no">
                <name>java.util.Set.size()</name>
                <inbound type="feature" confirmed="yes">org.mvel.ParserContext.hasImports()</inbound>
            </feature>
        </class>
        <class confirmed="no">
            <name>java.util.WeakHashMap</name>
            <feature confirmed="no">
                <name>java.util.WeakHashMap.WeakHashMap()</name>
                <inbound type="feature" confirmed="yes">org.mvel.PropertyAccessor.addMethodCache(java.lang.Class, java.lang.Integer, java.lang.reflect.Method)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.PropertyAccessor.addReadCache(java.lang.Class, java.lang.Integer, java.lang.reflect.Member)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.PropertyAccessor.addWriteCache(java.lang.Class, java.lang.Integer, java.lang.reflect.Member)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.TemplateInterpreter.static {}</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.refl.ReflectiveAccessorOptimizer.static {}</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.util.ParseTools.getBestCandidate(java.lang.Class[], java.lang.String, java.lang.Class, java.lang.reflect.Method[])</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.util.ParseTools.getBestConstructorCanadidate(java.lang.Object[], java.lang.Class)</inbound>
            </feature>
            <feature confirmed="no">
                <name>java.util.WeakHashMap.WeakHashMap(int)</name>
                <inbound type="feature" confirmed="yes">org.mvel.AbstractParser.configureFactory()</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.PropertyAccessor.configureFactory()</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.util.ParseTools.createClass(java.lang.String)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.util.ParseTools.static {}</inbound>
            </feature>
            <feature confirmed="no">
                <name>java.util.WeakHashMap.WeakHashMap(int, float)</name>
                <inbound type="feature" confirmed="yes">org.mvel.util.ParseTools.static {}</inbound>
            </feature>
        </class>
    </package>
    <package confirmed="no">
        <name>java.util.regex</name>
        <class confirmed="no">
            <name>java.util.regex.Matcher</name>
            <inbound type="feature" confirmed="yes">org.mvel.AbstractParser.reduce()</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.ast.RegExMatch.getReducedValue(java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.ast.RegExMatch.getReducedValueAccelerated(java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory)</inbound>
            <feature confirmed="no">
                <name>java.util.regex.Matcher.matches()</name>
                <inbound type="feature" confirmed="yes">org.mvel.AbstractParser.reduce()</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.ast.RegExMatch.getReducedValue(java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.ast.RegExMatch.getReducedValueAccelerated(java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory)</inbound>
            </feature>
        </class>
        <class confirmed="no">
            <name>java.util.regex.Pattern</name>
            <inbound type="feature" confirmed="yes">org.mvel.AbstractParser.reduce()</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.ast.RegExMatch.getReducedValue(java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.ast.RegExMatch.getReducedValueAccelerated(java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory)</inbound>
            <feature confirmed="no">
                <name>java.util.regex.Pattern.compile(java.lang.String)</name>
                <inbound type="feature" confirmed="yes">org.mvel.AbstractParser.reduce()</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.ast.RegExMatch.getReducedValue(java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.ast.RegExMatch.getReducedValueAccelerated(java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory)</inbound>
            </feature>
            <feature confirmed="no">
                <name>java.util.regex.Pattern.matcher(java.lang.CharSequence)</name>
                <inbound type="feature" confirmed="yes">org.mvel.AbstractParser.reduce()</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.ast.RegExMatch.getReducedValue(java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.ast.RegExMatch.getReducedValueAccelerated(java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory)</inbound>
            </feature>
        </class>
    </package>
    <package confirmed="yes">
        <name>org.mvel</name>
        <class confirmed="yes">
            <name>org.mvel.ASTArrayList</name>
            <outbound type="class" confirmed="no">java.io.Serializable</outbound>
            <outbound type="class" confirmed="no">java.lang.Object</outbound>
            <outbound type="class" confirmed="yes">org.mvel.ASTIterator</outbound>
            <feature confirmed="yes">
                <name>org.mvel.ASTArrayList.ASTArrayList(org.mvel.ASTArrayList)</name>
                <outbound type="feature" confirmed="no">java.lang.Object.Object()</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.ASTArrayList.astNodes</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.ASTArrayList.cursor</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.ASTArrayList.length</outbound>
                <outbound type="class" confirmed="yes">org.mvel.ASTNode</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.ASTArrayList.ASTArrayList(org.mvel.ASTIterator)</name>
                <outbound type="class" confirmed="no">java.lang.Object</outbound>
                <outbound type="feature" confirmed="no">java.lang.Object.Object()</outbound>
                <outbound type="feature" confirmed="no">java.util.ArrayList.ArrayList()</outbound>
                <outbound type="feature" confirmed="no">java.util.ArrayList.add(java.lang.Object)</outbound>
                <outbound type="feature" confirmed="no">java.util.ArrayList.size()</outbound>
                <outbound type="feature" confirmed="no">java.util.ArrayList.toArray(java.lang.Object[])</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.ASTArrayList.astNodes</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.ASTArrayList.cursor</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.ASTArrayList.length</outbound>
                <outbound type="class" confirmed="yes">org.mvel.ASTIterator</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.ASTIterator.finish()</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.ASTIterator.hasMoreNodes()</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.ASTIterator.nextNode()</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.ASTIterator.reset()</outbound>
                <outbound type="class" confirmed="yes">org.mvel.ASTNode</outbound>
                <outbound type="class" confirmed="no">org.mvel.ASTNode[]</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.ASTArrayList.astNodes</name>
                <outbound type="class" confirmed="yes">org.mvel.ASTNode</outbound>
                <inbound type="feature" confirmed="yes">org.mvel.ASTArrayList.ASTArrayList(org.mvel.ASTArrayList)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.ASTArrayList.ASTArrayList(org.mvel.ASTIterator)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.ASTArrayList.firstNode()</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.ASTArrayList.nextNode()</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.ASTArrayList.nodesBack(int)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.ASTArrayList.peekLast()</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.ASTArrayList.peekNext()</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.ASTArrayList.peekNode()</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.ASTArrayList.showNodeChain()</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.ASTArrayList.back()</name>
                <outbound type="feature" confirmed="yes">org.mvel.ASTArrayList.cursor</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.ASTArrayList.cursor</name>
                <inbound type="feature" confirmed="yes">org.mvel.ASTArrayList.ASTArrayList(org.mvel.ASTArrayList)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.ASTArrayList.ASTArrayList(org.mvel.ASTIterator)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.ASTArrayList.back()</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.ASTArrayList.hasMoreNodes()</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.ASTArrayList.index()</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.ASTArrayList.nextNode()</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.ASTArrayList.nodesBack(int)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.ASTArrayList.peekLast()</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.ASTArrayList.peekNext()</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.ASTArrayList.peekNode()</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.ASTArrayList.reset()</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.ASTArrayList.skipNode()</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.ASTArrayList.finish()</name>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.ASTArrayList.firstNode()</name>
                <outbound type="feature" confirmed="yes">org.mvel.ASTArrayList.astNodes</outbound>
                <outbound type="class" confirmed="yes">org.mvel.ASTNode</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.ASTArrayList.hasMoreNodes()</name>
                <outbound type="feature" confirmed="yes">org.mvel.ASTArrayList.cursor</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.ASTArrayList.length</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.ASTArrayList.index()</name>
                <outbound type="feature" confirmed="yes">org.mvel.ASTArrayList.cursor</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.ASTArrayList.length</name>
                <inbound type="feature" confirmed="yes">org.mvel.ASTArrayList.ASTArrayList(org.mvel.ASTArrayList)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.ASTArrayList.ASTArrayList(org.mvel.ASTIterator)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.ASTArrayList.hasMoreNodes()</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.ASTArrayList.nextNode()</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.ASTArrayList.peekNext()</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.ASTArrayList.peekNode()</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.ASTArrayList.showNodeChain()</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.ASTArrayList.size()</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.ASTArrayList.nextNode()</name>
                <outbound type="feature" confirmed="yes">org.mvel.ASTArrayList.astNodes</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.ASTArrayList.cursor</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.ASTArrayList.length</outbound>
                <outbound type="class" confirmed="yes">org.mvel.ASTNode</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.ASTArrayList.nodesBack(int)</name>
                <outbound type="feature" confirmed="yes">org.mvel.ASTArrayList.astNodes</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.ASTArrayList.cursor</outbound>
                <outbound type="class" confirmed="yes">org.mvel.ASTNode</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.ASTArrayList.peekLast()</name>
                <outbound type="feature" confirmed="yes">org.mvel.ASTArrayList.astNodes</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.ASTArrayList.cursor</outbound>
                <outbound type="class" confirmed="yes">org.mvel.ASTNode</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.ASTArrayList.peekNext()</name>
                <outbound type="feature" confirmed="yes">org.mvel.ASTArrayList.astNodes</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.ASTArrayList.cursor</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.ASTArrayList.length</outbound>
                <outbound type="class" confirmed="yes">org.mvel.ASTNode</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.ASTArrayList.peekNode()</name>
                <outbound type="feature" confirmed="yes">org.mvel.ASTArrayList.astNodes</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.ASTArrayList.cursor</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.ASTArrayList.length</outbound>
                <outbound type="class" confirmed="yes">org.mvel.ASTNode</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.ASTArrayList.reset()</name>
                <outbound type="feature" confirmed="yes">org.mvel.ASTArrayList.cursor</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.ASTArrayList.showNodeChain()</name>
                <outbound type="class" confirmed="no">java.lang.Class</outbound>
                <outbound type="class" confirmed="no">java.lang.Object</outbound>
                <outbound type="feature" confirmed="no">java.lang.Object.getClass()</outbound>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="class" confirmed="no">java.lang.StringBuffer</outbound>
                <outbound type="feature" confirmed="no">java.lang.StringBuffer.StringBuffer(java.lang.String)</outbound>
                <outbound type="feature" confirmed="no">java.lang.StringBuffer.append(int)</outbound>
                <outbound type="feature" confirmed="no">java.lang.StringBuffer.append(java.lang.Object)</outbound>
                <outbound type="feature" confirmed="no">java.lang.StringBuffer.append(java.lang.String)</outbound>
                <outbound type="feature" confirmed="no">java.lang.StringBuffer.toString()</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.ASTArrayList.astNodes</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.ASTArrayList.length</outbound>
                <outbound type="class" confirmed="yes">org.mvel.ASTNode</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.ASTNode.getLiteralValue()</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.ASTNode.getName()</outbound>
                <outbound type="class" confirmed="yes">org.mvel.util.StringAppender</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.util.StringAppender.StringAppender()</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.util.StringAppender.append(java.lang.String)</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.util.StringAppender.toString()</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.ASTArrayList.size()</name>
                <outbound type="feature" confirmed="yes">org.mvel.ASTArrayList.length</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.ASTArrayList.skipNode()</name>
                <outbound type="feature" confirmed="yes">org.mvel.ASTArrayList.cursor</outbound>
            </feature>
        </class>
        <class confirmed="yes">
            <name>org.mvel.ASTIterator</name>
            <outbound type="class" confirmed="no">java.io.Serializable</outbound>
            <outbound type="class" confirmed="no">java.lang.Object</outbound>
            <inbound type="class" confirmed="yes">org.mvel.ASTArrayList</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.ASTArrayList.ASTArrayList(org.mvel.ASTIterator)</inbound>
            <inbound type="class" confirmed="yes">org.mvel.ASTLinkedList</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.CompiledExpression.CompiledExpression(org.mvel.ASTIterator, java.lang.String, boolean)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.CompiledExpression.CompiledExpression(org.mvel.ASTIterator, java.lang.String, java.lang.Class, org.mvel.ParserContext, boolean)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.CompiledExpression.getTokenIterator()</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.CompiledExpression.getTokens()</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.CompiledExpression.setTokens(org.mvel.ASTIterator)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.CompiledExpression.tokens</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.ExpressionCompiler._compile()</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.MVELRuntime.execute(boolean, org.mvel.CompiledExpression, java.lang.Object, org.mvel.integration.VariableResolverFactory)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.debug.DebugTools.decompile(org.mvel.CompiledExpression, boolean, org.mvel.debug.DebugTools$DecompileContext)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.debug.DebugTools.determineType(java.lang.String, org.mvel.CompiledExpression)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.util.ParseTools.optimizeTree(org.mvel.CompiledExpression)</inbound>
            <feature confirmed="yes">
                <name>org.mvel.ASTIterator.back()</name>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.ASTIterator.finish()</name>
                <inbound type="feature" confirmed="yes">org.mvel.ASTArrayList.ASTArrayList(org.mvel.ASTIterator)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.ASTIterator.firstNode()</name>
                <outbound type="class" confirmed="yes">org.mvel.ASTNode</outbound>
                <inbound type="feature" confirmed="yes">org.mvel.CompiledExpression.getTokens()</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.MVELRuntime.execute(boolean, org.mvel.CompiledExpression, java.lang.Object, org.mvel.integration.VariableResolverFactory)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.util.ParseTools.optimizeTree(org.mvel.CompiledExpression)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.ASTIterator.hasMoreNodes()</name>
                <inbound type="feature" confirmed="yes">org.mvel.ASTArrayList.ASTArrayList(org.mvel.ASTIterator)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.debug.DebugTools.decompile(org.mvel.CompiledExpression, boolean, org.mvel.debug.DebugTools$DecompileContext)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.debug.DebugTools.determineType(java.lang.String, org.mvel.CompiledExpression)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.ASTIterator.index()</name>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.ASTIterator.nextNode()</name>
                <outbound type="class" confirmed="yes">org.mvel.ASTNode</outbound>
                <inbound type="feature" confirmed="yes">org.mvel.ASTArrayList.ASTArrayList(org.mvel.ASTIterator)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.debug.DebugTools.decompile(org.mvel.CompiledExpression, boolean, org.mvel.debug.DebugTools$DecompileContext)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.debug.DebugTools.determineType(java.lang.String, org.mvel.CompiledExpression)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.ASTIterator.nodesBack(int)</name>
                <outbound type="class" confirmed="yes">org.mvel.ASTNode</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.ASTIterator.peekLast()</name>
                <outbound type="class" confirmed="yes">org.mvel.ASTNode</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.ASTIterator.peekNext()</name>
                <outbound type="class" confirmed="yes">org.mvel.ASTNode</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.ASTIterator.peekNode()</name>
                <outbound type="class" confirmed="yes">org.mvel.ASTNode</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.ASTIterator.reset()</name>
                <inbound type="feature" confirmed="yes">org.mvel.ASTArrayList.ASTArrayList(org.mvel.ASTIterator)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.ASTIterator.showNodeChain()</name>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.ASTIterator.size()</name>
                <inbound type="feature" confirmed="yes">org.mvel.CompiledExpression.getTokens()</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.util.ParseTools.optimizeTree(org.mvel.CompiledExpression)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.ASTIterator.skipNode()</name>
            </feature>
        </class>
        <class confirmed="yes">
            <name>org.mvel.ASTLinkedList</name>
            <outbound type="class" confirmed="no">java.lang.Object</outbound>
            <outbound type="class" confirmed="yes">org.mvel.ASTIterator</outbound>
            <inbound type="feature" confirmed="yes">org.mvel.ExpressionCompiler._compile()</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.util.CompilerTools.optimizeAST(org.mvel.ASTLinkedList, boolean)</inbound>
            <feature confirmed="yes">
                <name>org.mvel.ASTLinkedList.ASTLinkedList()</name>
                <outbound type="feature" confirmed="no">java.lang.Object.Object()</outbound>
                <inbound type="feature" confirmed="yes">org.mvel.ExpressionCompiler._compile()</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.util.CompilerTools.optimizeAST(org.mvel.ASTLinkedList, boolean)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.ASTLinkedList.ASTLinkedList(org.mvel.ASTNode)</name>
                <outbound type="feature" confirmed="no">java.lang.Object.Object()</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.ASTLinkedList.current</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.ASTLinkedList.firstASTNode</outbound>
                <outbound type="class" confirmed="yes">org.mvel.ASTNode</outbound>
                <inbound type="feature" confirmed="yes">org.mvel.MVELRuntime.execute(boolean, org.mvel.CompiledExpression, java.lang.Object, org.mvel.integration.VariableResolverFactory)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.ASTLinkedList.ASTLinkedList(org.mvel.ASTNode, int)</name>
                <outbound type="feature" confirmed="no">java.lang.Object.Object()</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.ASTLinkedList.current</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.ASTLinkedList.firstASTNode</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.ASTLinkedList.size</outbound>
                <outbound type="class" confirmed="yes">org.mvel.ASTNode</outbound>
                <inbound type="feature" confirmed="yes">org.mvel.CompiledExpression.getTokens()</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.ASTLinkedList.addTokenNode(org.mvel.ASTNode)</name>
                <outbound type="feature" confirmed="yes">org.mvel.ASTLinkedList.current</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.ASTLinkedList.firstASTNode</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.ASTLinkedList.size</outbound>
                <outbound type="class" confirmed="yes">org.mvel.ASTNode</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.ASTNode.nextASTNode</outbound>
                <inbound type="feature" confirmed="yes">org.mvel.ExpressionCompiler._compile()</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.util.CompilerTools.optimizeAST(org.mvel.ASTLinkedList, boolean)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.ASTLinkedList.addTokenNode(org.mvel.ASTNode, org.mvel.ASTNode)</name>
                <outbound type="feature" confirmed="yes">org.mvel.ASTLinkedList.current</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.ASTLinkedList.firstASTNode</outbound>
                <outbound type="class" confirmed="yes">org.mvel.ASTNode</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.ASTNode.nextASTNode</outbound>
                <inbound type="feature" confirmed="yes">org.mvel.ExpressionCompiler._compile()</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.ASTLinkedList.back()</name>
                <outbound type="feature" confirmed="no">java.lang.RuntimeException.RuntimeException(java.lang.String)</outbound>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.ASTLinkedList.current</name>
                <outbound type="class" confirmed="yes">org.mvel.ASTNode</outbound>
                <inbound type="feature" confirmed="yes">org.mvel.ASTLinkedList.ASTLinkedList(org.mvel.ASTNode)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.ASTLinkedList.ASTLinkedList(org.mvel.ASTNode, int)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.ASTLinkedList.addTokenNode(org.mvel.ASTNode)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.ASTLinkedList.addTokenNode(org.mvel.ASTNode, org.mvel.ASTNode)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.ASTLinkedList.hasMoreNodes()</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.ASTLinkedList.nextNode()</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.ASTLinkedList.peekNext()</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.ASTLinkedList.peekNode()</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.ASTLinkedList.removeToken()</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.ASTLinkedList.reset()</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.ASTLinkedList.setCurrentNode(org.mvel.ASTNode)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.ASTLinkedList.skipNode()</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.ASTLinkedList.finish()</name>
                <outbound type="feature" confirmed="yes">org.mvel.ASTLinkedList.firstASTNode</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.ASTLinkedList.hasMoreNodes()</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.ASTLinkedList.nextNode()</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.ASTLinkedList.reset()</outbound>
                <outbound type="class" confirmed="yes">org.mvel.ASTNode</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.ASTNode.isDiscard()</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.ASTNode.nextASTNode</outbound>
                <inbound type="feature" confirmed="yes">org.mvel.ExpressionCompiler._compile()</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.ASTLinkedList.firstASTNode</name>
                <outbound type="class" confirmed="yes">org.mvel.ASTNode</outbound>
                <inbound type="feature" confirmed="yes">org.mvel.ASTLinkedList.ASTLinkedList(org.mvel.ASTNode)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.ASTLinkedList.ASTLinkedList(org.mvel.ASTNode, int)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.ASTLinkedList.addTokenNode(org.mvel.ASTNode)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.ASTLinkedList.addTokenNode(org.mvel.ASTNode, org.mvel.ASTNode)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.ASTLinkedList.finish()</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.ASTLinkedList.firstNode()</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.ASTLinkedList.reset()</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.ASTLinkedList.firstNode()</name>
                <outbound type="feature" confirmed="yes">org.mvel.ASTLinkedList.firstASTNode</outbound>
                <outbound type="class" confirmed="yes">org.mvel.ASTNode</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.ASTLinkedList.hasMoreNodes()</name>
                <outbound type="feature" confirmed="yes">org.mvel.ASTLinkedList.current</outbound>
                <outbound type="class" confirmed="yes">org.mvel.ASTNode</outbound>
                <inbound type="feature" confirmed="yes">org.mvel.ASTLinkedList.finish()</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.MVELRuntime.execute(boolean, org.mvel.CompiledExpression, java.lang.Object, org.mvel.integration.VariableResolverFactory)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.util.CompilerTools.optimizeAST(org.mvel.ASTLinkedList, boolean)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.ASTLinkedList.index()</name>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.ASTLinkedList.nextNode()</name>
                <outbound type="feature" confirmed="yes">org.mvel.ASTLinkedList.current</outbound>
                <outbound type="class" confirmed="yes">org.mvel.ASTNode</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.ASTNode.nextASTNode</outbound>
                <inbound type="feature" confirmed="yes">org.mvel.ASTLinkedList.finish()</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.MVELRuntime.execute(boolean, org.mvel.CompiledExpression, java.lang.Object, org.mvel.integration.VariableResolverFactory)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.util.CompilerTools.optimizeAST(org.mvel.ASTLinkedList, boolean)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.ASTLinkedList.nodesBack(int)</name>
                <outbound type="feature" confirmed="no">java.lang.RuntimeException.RuntimeException(java.lang.String)</outbound>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="class" confirmed="yes">org.mvel.ASTNode</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.ASTLinkedList.peekLast()</name>
                <outbound type="feature" confirmed="no">java.lang.RuntimeException.RuntimeException(java.lang.String)</outbound>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="class" confirmed="yes">org.mvel.ASTNode</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.ASTLinkedList.peekNext()</name>
                <outbound type="feature" confirmed="yes">org.mvel.ASTLinkedList.current</outbound>
                <outbound type="class" confirmed="yes">org.mvel.ASTNode</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.ASTNode.nextASTNode</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.ASTLinkedList.peekNode()</name>
                <outbound type="feature" confirmed="yes">org.mvel.ASTLinkedList.current</outbound>
                <outbound type="class" confirmed="yes">org.mvel.ASTNode</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.ASTNode.nextASTNode</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.ASTLinkedList.removeToken()</name>
                <outbound type="feature" confirmed="yes">org.mvel.ASTLinkedList.current</outbound>
                <outbound type="class" confirmed="yes">org.mvel.ASTNode</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.ASTNode.nextASTNode</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.ASTLinkedList.reset()</name>
                <outbound type="feature" confirmed="yes">org.mvel.ASTLinkedList.current</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.ASTLinkedList.firstASTNode</outbound>
                <outbound type="class" confirmed="yes">org.mvel.ASTNode</outbound>
                <inbound type="feature" confirmed="yes">org.mvel.ASTLinkedList.finish()</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.util.CompilerTools.optimizeAST(org.mvel.ASTLinkedList, boolean)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.ASTLinkedList.setCurrentNode(org.mvel.ASTNode)</name>
                <outbound type="feature" confirmed="yes">org.mvel.ASTLinkedList.current</outbound>
                <outbound type="class" confirmed="yes">org.mvel.ASTNode</outbound>
                <inbound type="feature" confirmed="yes">org.mvel.util.CompilerTools.optimizeAST(org.mvel.ASTLinkedList, boolean)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.ASTLinkedList.showNodeChain()</name>
                <outbound type="feature" confirmed="no">java.lang.RuntimeException.RuntimeException(java.lang.String)</outbound>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.ASTLinkedList.size</name>
                <inbound type="feature" confirmed="yes">org.mvel.ASTLinkedList.ASTLinkedList(org.mvel.ASTNode, int)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.ASTLinkedList.addTokenNode(org.mvel.ASTNode)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.ASTLinkedList.size()</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.ASTLinkedList.size()</name>
                <outbound type="feature" confirmed="yes">org.mvel.ASTLinkedList.size</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.ASTLinkedList.skipNode()</name>
                <outbound type="feature" confirmed="yes">org.mvel.ASTLinkedList.current</outbound>
                <outbound type="class" confirmed="yes">org.mvel.ASTNode</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.ASTNode.nextASTNode</outbound>
            </feature>
        </class>
        <class confirmed="yes">
            <name>org.mvel.ASTNode</name>
            <outbound type="class" confirmed="no">java.io.Serializable</outbound>
            <outbound type="class" confirmed="no">java.lang.Cloneable</outbound>
            <outbound type="class" confirmed="no">java.lang.Object</outbound>
            <inbound type="feature" confirmed="yes">org.mvel.ASTArrayList.ASTArrayList(org.mvel.ASTArrayList)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.ASTArrayList.ASTArrayList(org.mvel.ASTIterator)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.ASTArrayList.astNodes</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.ASTArrayList.firstNode()</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.ASTArrayList.nextNode()</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.ASTArrayList.nodesBack(int)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.ASTArrayList.peekLast()</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.ASTArrayList.peekNext()</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.ASTArrayList.peekNode()</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.ASTArrayList.showNodeChain()</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.ASTIterator.firstNode()</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.ASTIterator.nextNode()</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.ASTIterator.nodesBack(int)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.ASTIterator.peekLast()</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.ASTIterator.peekNext()</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.ASTIterator.peekNode()</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.ASTLinkedList.ASTLinkedList(org.mvel.ASTNode)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.ASTLinkedList.ASTLinkedList(org.mvel.ASTNode, int)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.ASTLinkedList.addTokenNode(org.mvel.ASTNode)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.ASTLinkedList.addTokenNode(org.mvel.ASTNode, org.mvel.ASTNode)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.ASTLinkedList.current</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.ASTLinkedList.finish()</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.ASTLinkedList.firstASTNode</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.ASTLinkedList.firstNode()</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.ASTLinkedList.hasMoreNodes()</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.ASTLinkedList.nextNode()</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.ASTLinkedList.nodesBack(int)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.ASTLinkedList.peekLast()</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.ASTLinkedList.peekNext()</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.ASTLinkedList.peekNode()</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.ASTLinkedList.removeToken()</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.ASTLinkedList.reset()</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.ASTLinkedList.setCurrentNode(org.mvel.ASTNode)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.ASTLinkedList.skipNode()</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.AbstractParser._captureBlock(org.mvel.ASTNode, char[], boolean, int)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.AbstractParser.arithmeticFunctionReduction(int)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.AbstractParser.captureCodeBlock(int)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.AbstractParser.captureTokenToEOS()</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.AbstractParser.createBlockToken(int, int, int, int, int)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.AbstractParser.createOperator(char[], int, int, int)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.AbstractParser.createPropertyToken(int, int)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.AbstractParser.createToken(char[], int, int, int)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.AbstractParser.handleSubstatement(org.mvel.ast.Substatement)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.AbstractParser.handleUnion(org.mvel.ASTNode)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.AbstractParser.lastNode</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.AbstractParser.nextToken()</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.AbstractParser.nextTokenSkipSymbols()</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.AbstractParser.reduce()</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.CompiledExpression.getTokens()</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.ExecutableAccessor.ExecutableAccessor(org.mvel.ASTNode, boolean)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.ExecutableAccessor.ExecutableAccessor(org.mvel.ASTNode, boolean, java.lang.Class)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.ExecutableAccessor.getNode()</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.ExecutableAccessor.getValue(java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.ExecutableAccessor.getValue(java.lang.Object, org.mvel.integration.VariableResolverFactory)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.ExecutableAccessor.node</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.ExpressionCompiler._compile()</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.ExpressionCompiler.verify(org.mvel.ParserContext, org.mvel.ASTNode)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.MVELInterpretedRuntime.parseAndExecuteInterpreted()</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.MVELInterpretedRuntime.procBooleanOperator(int)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.MVELInterpretedRuntime.unwindStatement(int)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.MVELRuntime.execute(boolean, org.mvel.CompiledExpression, java.lang.Object, org.mvel.integration.VariableResolverFactory)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.UnresolveablePropertyException.UnresolveablePropertyException(org.mvel.ASTNode)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.UnresolveablePropertyException.UnresolveablePropertyException(org.mvel.ASTNode, java.lang.Throwable)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.UnresolveablePropertyException.astNode</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.UnresolveablePropertyException.getToken()</inbound>
            <inbound type="class" confirmed="yes">org.mvel.ast.And</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.ast.And.And(org.mvel.ASTNode, org.mvel.ASTNode)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.ast.And.getLeft()</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.ast.And.getReducedValueAccelerated(java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.ast.And.getRight()</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.ast.And.left</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.ast.And.right</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.ast.And.setLeft(org.mvel.ASTNode)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.ast.And.setRight(org.mvel.ASTNode)</inbound>
            <inbound type="class" confirmed="yes">org.mvel.ast.AssertNode</inbound>
            <inbound type="class" confirmed="yes">org.mvel.ast.AssignAdd</inbound>
            <inbound type="class" confirmed="yes">org.mvel.ast.AssignDiv</inbound>
            <inbound type="class" confirmed="yes">org.mvel.ast.AssignMult</inbound>
            <inbound type="class" confirmed="yes">org.mvel.ast.AssignSub</inbound>
            <inbound type="class" confirmed="yes">org.mvel.ast.AssignmentNode</inbound>
            <inbound type="class" confirmed="yes">org.mvel.ast.BinaryOperation</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.ast.BinaryOperation.BinaryOperation(int, org.mvel.ASTNode, org.mvel.ASTNode)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.ast.BinaryOperation.getLeft()</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.ast.BinaryOperation.getReducedValueAccelerated(java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.ast.BinaryOperation.getRight()</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.ast.BinaryOperation.getRightMost()</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.ast.BinaryOperation.left</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.ast.BinaryOperation.right</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.ast.BinaryOperation.setLeft(org.mvel.ASTNode)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.ast.BinaryOperation.setRight(org.mvel.ASTNode)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.ast.BinaryOperation.setRightMost(org.mvel.ASTNode)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.ast.BinaryOperation.toString()</inbound>
            <inbound type="class" confirmed="yes">org.mvel.ast.BlockNode</inbound>
            <inbound type="class" confirmed="yes">org.mvel.ast.ContextDeepPropertyNode</inbound>
            <inbound type="class" confirmed="yes">org.mvel.ast.DeepAssignmentNode</inbound>
            <inbound type="class" confirmed="yes">org.mvel.ast.EndOfStatement</inbound>
            <inbound type="class" confirmed="yes">org.mvel.ast.IfNode</inbound>
            <inbound type="class" confirmed="yes">org.mvel.ast.ImportNode</inbound>
            <inbound type="class" confirmed="yes">org.mvel.ast.InlineCollectionNode</inbound>
            <inbound type="class" confirmed="yes">org.mvel.ast.InterceptorWrapper</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.ast.InterceptorWrapper.InterceptorWrapper(org.mvel.integration.Interceptor, org.mvel.ASTNode)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.ast.InterceptorWrapper.getReducedValue(java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.ast.InterceptorWrapper.getReducedValueAccelerated(java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.ast.InterceptorWrapper.node</inbound>
            <inbound type="class" confirmed="yes">org.mvel.ast.LineLabel</inbound>
            <inbound type="class" confirmed="yes">org.mvel.ast.LiteralDeepPropertyNode</inbound>
            <inbound type="class" confirmed="yes">org.mvel.ast.LiteralNode</inbound>
            <inbound type="class" confirmed="yes">org.mvel.ast.NewObjectNode</inbound>
            <inbound type="class" confirmed="yes">org.mvel.ast.OperatorNode</inbound>
            <inbound type="class" confirmed="yes">org.mvel.ast.Or</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.ast.Or.Or(org.mvel.ASTNode, org.mvel.ASTNode)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.ast.Or.getLeft()</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.ast.Or.getReducedValueAccelerated(java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.ast.Or.getRight()</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.ast.Or.left</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.ast.Or.right</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.ast.Or.setLeft(org.mvel.ASTNode)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.ast.Or.setRight(org.mvel.ASTNode)</inbound>
            <inbound type="class" confirmed="yes">org.mvel.ast.PostFixDecNode</inbound>
            <inbound type="class" confirmed="yes">org.mvel.ast.PostFixIncNode</inbound>
            <inbound type="class" confirmed="yes">org.mvel.ast.PreFixDecNode</inbound>
            <inbound type="class" confirmed="yes">org.mvel.ast.PreFixIncNode</inbound>
            <inbound type="class" confirmed="yes">org.mvel.ast.PropertyASTNode</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.ast.PropertyASTNode.getReducedValueAccelerated(java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.ast.PropertyASTNode.getWrappedNode()</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.ast.PropertyASTNode.initializePropertyNode(java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.ast.PropertyASTNode.wrappedNode</inbound>
            <inbound type="class" confirmed="yes">org.mvel.ast.RegExMatch</inbound>
            <inbound type="class" confirmed="yes">org.mvel.ast.ReturnNode</inbound>
            <inbound type="class" confirmed="yes">org.mvel.ast.StaticImportNode</inbound>
            <inbound type="class" confirmed="yes">org.mvel.ast.Substatement</inbound>
            <inbound type="class" confirmed="yes">org.mvel.ast.ThisValDeepPropertyNode</inbound>
            <inbound type="class" confirmed="yes">org.mvel.ast.ThisValNode</inbound>
            <inbound type="class" confirmed="yes">org.mvel.ast.TypeCast</inbound>
            <inbound type="class" confirmed="yes">org.mvel.ast.TypedVarNode</inbound>
            <inbound type="class" confirmed="yes">org.mvel.ast.Union</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.ast.Union.Union(char[], int, int, int, org.mvel.ASTNode)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.ast.Union.getReducedValue(java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.ast.Union.getReducedValueAccelerated(java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.ast.Union.main</inbound>
            <inbound type="class" confirmed="yes">org.mvel.ast.VarPropertyNode</inbound>
            <inbound type="class" confirmed="yes">org.mvel.ast.VariableDeepPropertyNode</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.debug.DebugTools.decompile(org.mvel.CompiledExpression, boolean, org.mvel.debug.DebugTools$DecompileContext)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.debug.DebugTools.determineType(java.lang.String, org.mvel.CompiledExpression)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.integration.Interceptor.doAfter(java.lang.Object, org.mvel.ASTNode, org.mvel.integration.VariableResolverFactory)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.integration.Interceptor.doBefore(org.mvel.ASTNode, org.mvel.integration.VariableResolverFactory)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.asm.ASMAccessorOptimizer.getMethod(java.lang.Object, java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.refl.ReflectiveAccessorOptimizer.optimizeFold(char[], java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.util.CompilerTools.optimizeAST(org.mvel.ASTLinkedList, boolean)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.util.ParseTools.optimizeTree(org.mvel.CompiledExpression)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.util.ParseTools.valueOnly(java.lang.Object)</inbound>
            <feature confirmed="yes">
                <name>org.mvel.ASTNode.ASSIGN</name>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.ASTNode.ASTNode()</name>
                <outbound type="feature" confirmed="no">java.lang.Object.Object()</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.ASTNode.fields</outbound>
                <inbound type="feature" confirmed="yes">org.mvel.ast.And.And(org.mvel.ASTNode, org.mvel.ASTNode)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.ast.BinaryOperation.BinaryOperation(int, org.mvel.ASTNode, org.mvel.ASTNode)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.ast.ImportNode.ImportNode(char[])</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.ast.InterceptorWrapper.InterceptorWrapper(org.mvel.integration.Interceptor, org.mvel.ASTNode)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.ast.LineLabel.LineLabel(int)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.ast.LineLabel.LineLabel(java.lang.String, int)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.ast.LiteralNode.LiteralNode(java.lang.Object)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.ast.LiteralNode.LiteralNode(java.lang.Object, int)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.ast.OperatorNode.OperatorNode(java.lang.Integer)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.ast.Or.Or(org.mvel.ASTNode, org.mvel.ASTNode)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.ast.Substatement.Substatement(char[], int)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.ASTNode.ASTNode(char[], int)</name>
                <outbound type="feature" confirmed="no">java.lang.Object.Object()</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.ASTNode.fields</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.ASTNode.name</outbound>
                <inbound type="feature" confirmed="yes">org.mvel.ast.AssertNode.AssertNode(char[], int)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.ast.AssignAdd.AssignAdd(char[], int, java.lang.String)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.ast.AssignDiv.AssignDiv(char[], int, java.lang.String)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.ast.AssignMult.AssignMult(char[], int, java.lang.String)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.ast.AssignSub.AssignSub(char[], int, java.lang.String)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.ast.AssignmentNode.AssignmentNode(char[], int, int, java.lang.String)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.ast.BlockNode.BlockNode(char[], int)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.ast.BlockNode.BlockNode(char[], int, char[])</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.ast.ContextDeepPropertyNode.ContextDeepPropertyNode(char[], int)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.ast.DeepAssignmentNode.DeepAssignmentNode(char[], int, int, java.lang.String)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.ast.EndOfStatement.EndOfStatement()</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.ast.IfNode.IfNode(char[], char[], int)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.ast.InlineCollectionNode.InlineCollectionNode(char[], int)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.ast.LiteralDeepPropertyNode.LiteralDeepPropertyNode(char[], int, java.lang.Object)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.ast.NewObjectNode.NewObjectNode(char[], int)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.ast.PostFixDecNode.PostFixDecNode(char[], int)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.ast.PostFixIncNode.PostFixIncNode(char[], int)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.ast.PreFixDecNode.PreFixDecNode(char[], int)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.ast.PreFixIncNode.PreFixIncNode(char[], int)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.ast.RegExMatch.RegExMatch(char[], int, char[])</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.ast.ReturnNode.ReturnNode(char[], int)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.ast.StaticImportNode.StaticImportNode(char[], int)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.ast.ThisValDeepPropertyNode.ThisValDeepPropertyNode(char[], int)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.ast.ThisValNode.ThisValNode(char[], int)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.ast.TypedVarNode.TypedVarNode(char[], int, java.lang.Class)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.ast.VarPropertyNode.VarPropertyNode(char[], int, java.lang.String)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.ast.VariableDeepPropertyNode.VariableDeepPropertyNode(char[], int)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.ASTNode.ASTNode(char[], int, int, int)</name>
                <outbound type="feature" confirmed="no">java.lang.Object.Object()</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.ASTNode.cursorPosition</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.ASTNode.fields</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.ASTNode.setName(char[])</outbound>
                <inbound type="feature" confirmed="yes">org.mvel.AbstractParser.captureTokenToEOS()</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.AbstractParser.createPropertyToken(int, int)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.AbstractParser.createToken(char[], int, int, int)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.ast.InlineCollectionNode.InlineCollectionNode(char[], int, int, int)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.ast.PropertyASTNode.PropertyASTNode(char[], int, int, int)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.ast.TypeCast.TypeCast(char[], int, int, int, java.lang.Class)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.ast.Union.Union(char[], int, int, int, org.mvel.ASTNode)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.ASTNode.ASTNode(int, java.lang.Object)</name>
                <outbound type="class" confirmed="no">java.lang.Object</outbound>
                <outbound type="feature" confirmed="no">java.lang.Object.Object()</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.ASTNode.fields</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.ASTNode.literal</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.ASTNode.BLOCK_FOREACH</name>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.ASTNode.BLOCK_IF</name>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.ASTNode.BLOCK_WHILE</name>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.ASTNode.BLOCK_WITH</name>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.ASTNode.COLLECTION</name>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.ASTNode.COMPILE_IMMEDIATE</name>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.ASTNode.DEEP_PROPERTY</name>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.ASTNode.FOLD</name>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.ASTNode.IDENTIFIER</name>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.ASTNode.INLINE_COLLECTION</name>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.ASTNode.INTEGER32</name>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.ASTNode.INVERT</name>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.ASTNode.LITERAL</name>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.ASTNode.LOOKAHEAD</name>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.ASTNode.METHOD</name>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.ASTNode.NEGATION</name>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.ASTNode.NUMERIC</name>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.ASTNode.OPERATOR</name>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.ASTNode.STR_LITERAL</name>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.ASTNode.THISREF</name>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.ASTNode.accessor</name>
                <outbound type="class" confirmed="yes">org.mvel.Accessor</outbound>
                <inbound type="feature" confirmed="yes">org.mvel.ASTNode.getAccessor()</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.ASTNode.getReducedValue(java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.ASTNode.getReducedValueAccelerated(java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.ASTNode.setAccessor(org.mvel.Accessor)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.ASTNode.cursorPosition</name>
                <inbound type="feature" confirmed="yes">org.mvel.ASTNode.ASTNode(char[], int, int, int)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.ASTNode.getCursorPosition()</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.ASTNode.setCursorPosition(int)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.ASTNode.discard</name>
                <inbound type="feature" confirmed="yes">org.mvel.ASTNode.discard()</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.ASTNode.isDiscard()</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.ASTNode.setDiscard(boolean)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.ASTNode.discard()</name>
                <outbound type="feature" confirmed="yes">org.mvel.ASTNode.discard</outbound>
                <inbound type="feature" confirmed="yes">org.mvel.AbstractParser.nextToken()</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.ASTNode.egressType</name>
                <outbound type="class" confirmed="no">java.lang.Class</outbound>
                <inbound type="feature" confirmed="yes">org.mvel.ASTNode.getEgressType()</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.ASTNode.getReducedValueAccelerated(java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.ASTNode.setEgressType(java.lang.Class)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.ASTNode.setName(char[])</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.ASTNode.endOfName</name>
                <inbound type="feature" confirmed="yes">org.mvel.ASTNode.getAbsoluteFirstPart()</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.ASTNode.getAbsoluteRemainder()</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.ASTNode.getReducedValue(java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.ASTNode.setName(char[])</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.ASTNode.fields</name>
                <inbound type="feature" confirmed="yes">org.mvel.ASTNode.ASTNode()</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.ASTNode.ASTNode(char[], int)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.ASTNode.ASTNode(char[], int, int, int)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.ASTNode.ASTNode(int, java.lang.Object)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.ASTNode.getAbsoluteFirstPart()</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.ASTNode.getAbsoluteName()</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.ASTNode.getAbsoluteRemainder()</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.ASTNode.getAbsoluteRootElement()</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.ASTNode.getFields()</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.ASTNode.getReducedValue(java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.ASTNode.getReducedValueAccelerated(java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.ASTNode.isAssignment()</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.ASTNode.isCollection()</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.ASTNode.isDebuggingSymbol()</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.ASTNode.isDeepProperty()</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.ASTNode.isIdentifier()</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.ASTNode.isLiteral()</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.ASTNode.isOperator()</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.ASTNode.isOperator(java.lang.Integer)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.ASTNode.isThisVal()</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.ASTNode.setAsLiteral()</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.ASTNode.setName(char[])</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.ASTNode.valRet(java.lang.Object)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.ExpressionCompiler._compile()</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.MVELRuntime.execute(boolean, org.mvel.CompiledExpression, java.lang.Object, org.mvel.integration.VariableResolverFactory)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.ASTNode.firstUnion</name>
                <inbound type="feature" confirmed="yes">org.mvel.ASTNode.getAbsoluteFirstPart()</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.ASTNode.getAbsoluteRemainder()</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.ASTNode.setName(char[])</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.ASTNode.getAbsoluteFirstPart()</name>
                <outbound type="feature" confirmed="yes">org.mvel.ASTNode.endOfName</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.ASTNode.fields</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.ASTNode.firstUnion</outbound>
                <inbound type="feature" confirmed="yes">org.mvel.ASTNode.getAbsoluteName()</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.ASTNode.getAbsoluteRootElement()</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.ASTNode.getAbsoluteName()</name>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="feature" confirmed="no">java.lang.String.String(char[], int, int)</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.ASTNode.fields</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.ASTNode.getAbsoluteFirstPart()</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.ASTNode.getName()</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.ASTNode.name</outbound>
                <inbound type="feature" confirmed="yes">org.mvel.ASTNode.getReducedValue(java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.ExpressionCompiler.verify(org.mvel.ParserContext, org.mvel.ASTNode)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.ASTNode.getAbsoluteRemainder()</name>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="feature" confirmed="no">java.lang.String.String(char[], int, int)</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.ASTNode.endOfName</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.ASTNode.fields</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.ASTNode.firstUnion</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.ASTNode.name</outbound>
                <inbound type="feature" confirmed="yes">org.mvel.ASTNode.getReducedValue(java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.ASTNode.getAbsoluteRootElement()</name>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="feature" confirmed="no">java.lang.String.String(char[])</outbound>
                <outbound type="feature" confirmed="no">java.lang.String.String(char[], int, int)</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.ASTNode.fields</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.ASTNode.getAbsoluteFirstPart()</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.ASTNode.name</outbound>
                <inbound type="feature" confirmed="yes">org.mvel.ASTNode.getReducedValue(java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.ASTNode.getAccessor()</name>
                <outbound type="feature" confirmed="yes">org.mvel.ASTNode.accessor</outbound>
                <outbound type="class" confirmed="yes">org.mvel.Accessor</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.ASTNode.getCursorPosition()</name>
                <outbound type="feature" confirmed="yes">org.mvel.ASTNode.cursorPosition</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.ASTNode.getEgressType()</name>
                <outbound type="class" confirmed="no">java.lang.Class</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.ASTNode.egressType</outbound>
                <inbound type="feature" confirmed="yes">org.mvel.ExpressionCompiler._compile()</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.ExpressionCompiler.verify(org.mvel.ParserContext, org.mvel.ASTNode)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.debug.DebugTools.determineType(java.lang.String, org.mvel.CompiledExpression)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.ASTNode.getFields()</name>
                <outbound type="feature" confirmed="yes">org.mvel.ASTNode.fields</outbound>
                <inbound type="feature" confirmed="yes">org.mvel.AbstractParser.nextTokenSkipSymbols()</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.util.CompilerTools.optimizeAST(org.mvel.ASTLinkedList, boolean)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.util.ParseTools.optimizeTree(org.mvel.CompiledExpression)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.ASTNode.getIntRegister()</name>
                <outbound type="feature" confirmed="yes">org.mvel.ASTNode.intRegister</outbound>
                <inbound type="feature" confirmed="yes">org.mvel.util.ParseTools.optimizeTree(org.mvel.CompiledExpression)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.ASTNode.getLiteralValue()</name>
                <outbound type="class" confirmed="no">java.lang.Object</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.ASTNode.literal</outbound>
                <inbound type="feature" confirmed="yes">org.mvel.ASTArrayList.showNodeChain()</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.AbstractParser.nextToken()</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.ExpressionCompiler._compile()</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.ExpressionCompiler.verify(org.mvel.ParserContext, org.mvel.ASTNode)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.debug.DebugTools.decompile(org.mvel.CompiledExpression, boolean, org.mvel.debug.DebugTools$DecompileContext)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.asm.ASMAccessorOptimizer.getMethod(java.lang.Object, java.lang.String)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.util.ParseTools.optimizeTree(org.mvel.CompiledExpression)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.util.ParseTools.valueOnly(java.lang.Object)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.ASTNode.getName()</name>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="feature" confirmed="no">java.lang.String.String(char[])</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.ASTNode.name</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.ASTNode.nameCache</outbound>
                <inbound type="feature" confirmed="yes">org.mvel.ASTArrayList.showNodeChain()</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.ASTNode.getAbsoluteName()</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.MVELInterpretedRuntime.parseAndExecuteInterpreted()</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.MVELRuntime.execute(boolean, org.mvel.CompiledExpression, java.lang.Object, org.mvel.integration.VariableResolverFactory)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.UnresolveablePropertyException.UnresolveablePropertyException(org.mvel.ASTNode)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.UnresolveablePropertyException.UnresolveablePropertyException(org.mvel.ASTNode, java.lang.Throwable)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.debug.DebugTools.decompile(org.mvel.CompiledExpression, boolean, org.mvel.debug.DebugTools$DecompileContext)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.debug.DebugTools.determineType(java.lang.String, org.mvel.CompiledExpression)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.refl.ReflectiveAccessorOptimizer.optimizeFold(char[], java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.ASTNode.getNameAsArray()</name>
                <outbound type="feature" confirmed="yes">org.mvel.ASTNode.name</outbound>
                <inbound type="feature" confirmed="yes">org.mvel.ExpressionCompiler._compile()</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.ExpressionCompiler.verify(org.mvel.ParserContext, org.mvel.ASTNode)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.refl.ReflectiveAccessorOptimizer.optimizeFold(char[], java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.ASTNode.getOperator()</name>
                <outbound type="class" confirmed="no">java.lang.Integer</outbound>
                <outbound type="class" confirmed="no">java.lang.Object</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.ASTNode.literal</outbound>
                <inbound type="feature" confirmed="yes">org.mvel.AbstractParser.arithmeticFunctionReduction(int)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.AbstractParser.reduce()</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.ExpressionCompiler._compile()</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.MVELInterpretedRuntime.parseAndExecuteInterpreted()</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.MVELRuntime.execute(boolean, org.mvel.CompiledExpression, java.lang.Object, org.mvel.integration.VariableResolverFactory)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.debug.DebugTools.decompile(org.mvel.CompiledExpression, boolean, org.mvel.debug.DebugTools$DecompileContext)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.util.CompilerTools.optimizeAST(org.mvel.ASTLinkedList, boolean)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.ASTNode.getReducedValue(java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory)</name>
                <outbound type="class" confirmed="no">java.lang.Class</outbound>
                <outbound type="feature" confirmed="no">java.lang.Class.forName(java.lang.String)</outbound>
                <outbound type="class" confirmed="no">java.lang.ClassNotFoundException</outbound>
                <outbound type="feature" confirmed="no">java.lang.NoClassDefFoundError.NoClassDefFoundError(java.lang.String)</outbound>
                <outbound type="class" confirmed="no">java.lang.Object</outbound>
                <outbound type="class" confirmed="no">java.lang.RuntimeException</outbound>
                <outbound type="feature" confirmed="no">java.lang.RuntimeException.printStackTrace()</outbound>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="feature" confirmed="no">java.lang.String.String(char[])</outbound>
                <outbound type="feature" confirmed="no">java.lang.String.String(char[], int, int)</outbound>
                <outbound type="feature" confirmed="no">java.lang.String.valueOf(java.lang.Object)</outbound>
                <outbound type="class" confirmed="no">java.lang.StringBuffer</outbound>
                <outbound type="feature" confirmed="no">java.lang.StringBuffer.StringBuffer(java.lang.String)</outbound>
                <outbound type="feature" confirmed="no">java.lang.StringBuffer.append(java.lang.String)</outbound>
                <outbound type="feature" confirmed="no">java.lang.StringBuffer.toString()</outbound>
                <outbound type="class" confirmed="no">java.lang.Throwable</outbound>
                <outbound type="feature" confirmed="no">java.lang.Throwable.getMessage()</outbound>
                <outbound type="class" confirmed="no">java.lang.reflect.Method</outbound>
                <outbound type="feature" confirmed="no">java.lang.reflect.Method.getDeclaringClass()</outbound>
                <outbound type="feature" confirmed="no">java.lang.reflect.Method.getName()</outbound>
                <outbound type="class" confirmed="no">java.util.Map</outbound>
                <outbound type="feature" confirmed="no">java.util.Map.containsKey(java.lang.Object)</outbound>
                <outbound type="feature" confirmed="no">java.util.Map.get(java.lang.Object)</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.ASTNode.accessor</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.ASTNode.endOfName</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.ASTNode.fields</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.ASTNode.getAbsoluteName()</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.ASTNode.getAbsoluteRemainder()</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.ASTNode.getAbsoluteRootElement()</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.ASTNode.isCollection()</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.ASTNode.isOperator()</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.ASTNode.literal</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.ASTNode.name</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.ASTNode.tryStaticAccess(java.lang.Object, org.mvel.integration.VariableResolverFactory)</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.ASTNode.valRet(java.lang.Object)</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.AbstractParser.LITERALS</outbound>
                <outbound type="class" confirmed="yes">org.mvel.Accessor</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.CompileException.CompileException(java.lang.String)</outbound>
                <outbound type="class" confirmed="yes">org.mvel.PropertyAccessException</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.PropertyAccessor.get(char[], java.lang.Object, org.mvel.integration.VariableResolverFactory, java.lang.Object)</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.PropertyAccessor.get(java.lang.String, java.lang.Object, org.mvel.integration.VariableResolverFactory, java.lang.Object)</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.UnresolveablePropertyException.UnresolveablePropertyException(org.mvel.ASTNode)</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.UnresolveablePropertyException.UnresolveablePropertyException(org.mvel.ASTNode, java.lang.Throwable)</outbound>
                <outbound type="class" confirmed="yes">org.mvel.integration.VariableResolver</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.integration.VariableResolver.getValue()</outbound>
                <outbound type="class" confirmed="yes">org.mvel.integration.VariableResolverFactory</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.integration.VariableResolverFactory.getVariableResolver(java.lang.String)</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.integration.VariableResolverFactory.isResolveable(java.lang.String)</outbound>
                <outbound type="class" confirmed="yes">org.mvel.optimizers.AccessorOptimizer</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.optimizers.AccessorOptimizer.getResultOptPass()</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.optimizers.AccessorOptimizer.optimizeFold(char[], java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory)</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.optimizers.OptimizerFactory.SAFE_REFLECTIVE</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.optimizers.OptimizerFactory.getAccessorCompiler(java.lang.String)</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.util.ArrayTools.findFirst(char, char[])</outbound>
                <inbound type="feature" confirmed="yes">org.mvel.AbstractParser.arithmeticFunctionReduction(int)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.MVELInterpretedRuntime.parseAndExecuteInterpreted()</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.ast.InterceptorWrapper.getReducedValue(java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.ast.PropertyASTNode.getReducedValue(java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.ast.Union.getReducedValue(java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.ASTNode.getReducedValueAccelerated(java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory)</name>
                <outbound type="class" confirmed="no">java.lang.Class</outbound>
                <outbound type="class" confirmed="no">java.lang.NullPointerException</outbound>
                <outbound type="class" confirmed="no">java.lang.Object</outbound>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="class" confirmed="no">java.lang.Throwable</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.ASTNode.accessor</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.ASTNode.egressType</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.ASTNode.fields</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.ASTNode.name</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.ASTNode.valRet(java.lang.Object)</outbound>
                <outbound type="class" confirmed="yes">org.mvel.Accessor</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.Accessor.getValue(java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory)</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.OptimizationFailure.OptimizationFailure(java.lang.String, java.lang.Throwable)</outbound>
                <outbound type="class" confirmed="yes">org.mvel.integration.VariableResolverFactory</outbound>
                <outbound type="class" confirmed="yes">org.mvel.optimizers.AccessorOptimizer</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.optimizers.AccessorOptimizer.getEgressType()</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.optimizers.AccessorOptimizer.getResultOptPass()</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.optimizers.AccessorOptimizer.optimizeAccessor(char[], java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory, boolean)</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.optimizers.AccessorOptimizer.optimizeFold(char[], java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory)</outbound>
                <outbound type="class" confirmed="yes">org.mvel.optimizers.OptimizationNotSupported</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.optimizers.OptimizerFactory.SAFE_REFLECTIVE</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.optimizers.OptimizerFactory.getAccessorCompiler(java.lang.String)</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.optimizers.OptimizerFactory.getThreadAccessorOptimizer()</outbound>
                <inbound type="feature" confirmed="yes">org.mvel.ExecutableAccessor.getValue(java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.ExecutableAccessor.getValue(java.lang.Object, org.mvel.integration.VariableResolverFactory)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.ExpressionCompiler._compile()</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.MVELRuntime.execute(boolean, org.mvel.CompiledExpression, java.lang.Object, org.mvel.integration.VariableResolverFactory)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.ast.And.getReducedValueAccelerated(java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.ast.BinaryOperation.getReducedValueAccelerated(java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.ast.InterceptorWrapper.getReducedValueAccelerated(java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.ast.Or.getReducedValueAccelerated(java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.ast.PropertyASTNode.getReducedValueAccelerated(java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.ast.PropertyASTNode.initializePropertyNode(java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.ast.Union.getReducedValueAccelerated(java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.ASTNode.intRegister</name>
                <inbound type="feature" confirmed="yes">org.mvel.ASTNode.getIntRegister()</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.ASTNode.setIntRegister(int)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.ASTNode.setName(char[])</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.ASTNode.isAssignment()</name>
                <outbound type="feature" confirmed="yes">org.mvel.ASTNode.fields</outbound>
                <inbound type="feature" confirmed="yes">org.mvel.ExpressionCompiler.verify(org.mvel.ParserContext, org.mvel.ASTNode)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.debug.DebugTools.determineType(java.lang.String, org.mvel.CompiledExpression)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.ASTNode.isCollection()</name>
                <outbound type="feature" confirmed="yes">org.mvel.ASTNode.fields</outbound>
                <inbound type="feature" confirmed="yes">org.mvel.ASTNode.getReducedValue(java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.ASTNode.isDebuggingSymbol()</name>
                <outbound type="feature" confirmed="yes">org.mvel.ASTNode.fields</outbound>
                <inbound type="feature" confirmed="yes">org.mvel.debug.DebugTools.decompile(org.mvel.CompiledExpression, boolean, org.mvel.debug.DebugTools$DecompileContext)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.ASTNode.isDeepProperty()</name>
                <outbound type="feature" confirmed="yes">org.mvel.ASTNode.fields</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.ASTNode.isDiscard()</name>
                <outbound type="feature" confirmed="yes">org.mvel.ASTNode.discard</outbound>
                <inbound type="feature" confirmed="yes">org.mvel.ASTLinkedList.finish()</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.ExpressionCompiler.verify(org.mvel.ParserContext, org.mvel.ASTNode)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.MVELInterpretedRuntime.parseAndExecuteInterpreted()</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.ASTNode.isIdentifier()</name>
                <outbound type="feature" confirmed="yes">org.mvel.ASTNode.fields</outbound>
                <inbound type="feature" confirmed="yes">org.mvel.AbstractParser.createPropertyToken(int, int)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.AbstractParser.createToken(char[], int, int, int)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.ExpressionCompiler.verify(org.mvel.ParserContext, org.mvel.ASTNode)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.debug.DebugTools.decompile(org.mvel.CompiledExpression, boolean, org.mvel.debug.DebugTools$DecompileContext)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.ASTNode.isLiteral()</name>
                <outbound type="feature" confirmed="yes">org.mvel.ASTNode.fields</outbound>
                <inbound type="feature" confirmed="yes">org.mvel.AbstractParser.nextToken()</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.ExpressionCompiler._compile()</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.ExpressionCompiler.verify(org.mvel.ParserContext, org.mvel.ASTNode)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.debug.DebugTools.decompile(org.mvel.CompiledExpression, boolean, org.mvel.debug.DebugTools$DecompileContext)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.util.ParseTools.optimizeTree(org.mvel.CompiledExpression)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.ASTNode.isOperator()</name>
                <outbound type="feature" confirmed="yes">org.mvel.ASTNode.fields</outbound>
                <inbound type="feature" confirmed="yes">org.mvel.ASTNode.getReducedValue(java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.AbstractParser.arithmeticFunctionReduction(int)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.ExpressionCompiler._compile()</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.ExpressionCompiler.verify(org.mvel.ParserContext, org.mvel.ASTNode)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.MVELInterpretedRuntime.parseAndExecuteInterpreted()</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.MVELRuntime.execute(boolean, org.mvel.CompiledExpression, java.lang.Object, org.mvel.integration.VariableResolverFactory)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.debug.DebugTools.decompile(org.mvel.CompiledExpression, boolean, org.mvel.debug.DebugTools$DecompileContext)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.util.CompilerTools.optimizeAST(org.mvel.ASTLinkedList, boolean)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.ASTNode.isOperator(java.lang.Integer)</name>
                <outbound type="class" confirmed="no">java.lang.Integer</outbound>
                <outbound type="feature" confirmed="no">java.lang.Integer.equals(java.lang.Object)</outbound>
                <outbound type="class" confirmed="no">java.lang.Object</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.ASTNode.fields</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.ASTNode.literal</outbound>
                <inbound type="feature" confirmed="yes">org.mvel.ExpressionCompiler._compile()</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.ExpressionCompiler.verify(org.mvel.ParserContext, org.mvel.ASTNode)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.MVELInterpretedRuntime.procBooleanOperator(int)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.MVELInterpretedRuntime.unwindStatement(int)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.MVELRuntime.execute(boolean, org.mvel.CompiledExpression, java.lang.Object, org.mvel.integration.VariableResolverFactory)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.debug.DebugTools.decompile(org.mvel.CompiledExpression, boolean, org.mvel.debug.DebugTools$DecompileContext)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.refl.ReflectiveAccessorOptimizer.optimizeFold(char[], java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.util.CompilerTools.optimizeAST(org.mvel.ASTLinkedList, boolean)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.ASTNode.isThisVal()</name>
                <outbound type="feature" confirmed="yes">org.mvel.ASTNode.fields</outbound>
                <inbound type="feature" confirmed="yes">org.mvel.util.ParseTools.optimizeTree(org.mvel.CompiledExpression)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.ASTNode.literal</name>
                <outbound type="class" confirmed="no">java.lang.Object</outbound>
                <inbound type="feature" confirmed="yes">org.mvel.ASTNode.ASTNode(int, java.lang.Object)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.ASTNode.getLiteralValue()</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.ASTNode.getOperator()</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.ASTNode.getReducedValue(java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.ASTNode.isOperator(java.lang.Integer)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.ASTNode.setLiteralValue(java.lang.Object)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.ASTNode.setName(char[])</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.ASTNode.toString()</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.ASTNode.name</name>
                <inbound type="feature" confirmed="yes">org.mvel.ASTNode.ASTNode(char[], int)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.ASTNode.getAbsoluteName()</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.ASTNode.getAbsoluteRemainder()</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.ASTNode.getAbsoluteRootElement()</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.ASTNode.getName()</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.ASTNode.getNameAsArray()</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.ASTNode.getReducedValue(java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.ASTNode.getReducedValueAccelerated(java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.ASTNode.setName(char[])</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.ASTNode.toString()</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.ASTNode.tryStaticAccess(java.lang.Object, org.mvel.integration.VariableResolverFactory)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.ASTNode.nameCache</name>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <inbound type="feature" confirmed="yes">org.mvel.ASTNode.getName()</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.ASTNode.nextASTNode</name>
                <inbound type="feature" confirmed="yes">org.mvel.ASTLinkedList.addTokenNode(org.mvel.ASTNode)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.ASTLinkedList.addTokenNode(org.mvel.ASTNode, org.mvel.ASTNode)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.ASTLinkedList.finish()</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.ASTLinkedList.nextNode()</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.ASTLinkedList.peekNext()</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.ASTLinkedList.peekNode()</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.ASTLinkedList.removeToken()</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.ASTLinkedList.skipNode()</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.ASTNode.setAccessor(org.mvel.Accessor)</name>
                <outbound type="feature" confirmed="yes">org.mvel.ASTNode.accessor</outbound>
                <outbound type="class" confirmed="yes">org.mvel.Accessor</outbound>
                <inbound type="feature" confirmed="yes">org.mvel.ExpressionCompiler._compile()</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.ASTNode.setAsLiteral()</name>
                <outbound type="feature" confirmed="yes">org.mvel.ASTNode.fields</outbound>
                <inbound type="feature" confirmed="yes">org.mvel.AbstractParser.nextToken()</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.ASTNode.setCursorPosition(int)</name>
                <outbound type="feature" confirmed="yes">org.mvel.ASTNode.cursorPosition</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.ASTNode.setDiscard(boolean)</name>
                <outbound type="feature" confirmed="yes">org.mvel.ASTNode.discard</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.ASTNode.setEgressType(java.lang.Class)</name>
                <outbound type="class" confirmed="no">java.lang.Class</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.ASTNode.egressType</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.ASTNode.setIntRegister(int)</name>
                <outbound type="feature" confirmed="yes">org.mvel.ASTNode.intRegister</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.ASTNode.setLiteralValue(java.lang.Object)</name>
                <outbound type="class" confirmed="no">java.lang.Object</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.ASTNode.literal</outbound>
                <inbound type="feature" confirmed="yes">org.mvel.AbstractParser.nextToken()</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.ASTNode.setName(char[])</name>
                <outbound type="class" confirmed="no">java.lang.Class</outbound>
                <outbound type="feature" confirmed="no">java.lang.Class.forName(java.lang.String)</outbound>
                <outbound type="class" confirmed="no">java.lang.ClassCastException</outbound>
                <outbound type="class" confirmed="no">java.lang.ClassNotFoundException</outbound>
                <outbound type="class" confirmed="no">java.lang.Integer</outbound>
                <outbound type="feature" confirmed="no">java.lang.Integer.Integer(int)</outbound>
                <outbound type="feature" confirmed="no">java.lang.Integer.intValue()</outbound>
                <outbound type="feature" confirmed="no">java.lang.NoClassDefFoundError.NoClassDefFoundError(java.lang.String)</outbound>
                <outbound type="class" confirmed="no">java.lang.Object</outbound>
                <outbound type="feature" confirmed="no">java.lang.Object.getClass()</outbound>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="feature" confirmed="no">java.lang.String.String(char[])</outbound>
                <outbound type="feature" confirmed="no">java.lang.Throwable.getMessage()</outbound>
                <outbound type="class" confirmed="no">java.util.Map</outbound>
                <outbound type="feature" confirmed="no">java.util.Map.containsKey(java.lang.Object)</outbound>
                <outbound type="feature" confirmed="no">java.util.Map.get(java.lang.Object)</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.ASTNode.egressType</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.ASTNode.endOfName</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.ASTNode.fields</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.ASTNode.firstUnion</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.ASTNode.intRegister</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.ASTNode.literal</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.ASTNode.name</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.ASTNode.valRet(java.lang.Object)</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.AbstractParser.LITERALS</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.AbstractParser.OPERATORS</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.CompileException.CompileException(java.lang.String)</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.util.ArrayTools.findFirst(char, char[])</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.util.PropertyTools.handleNumericConversion(char[])</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.util.PropertyTools.isNumber(char[])</outbound>
                <inbound type="feature" confirmed="yes">org.mvel.ASTNode.ASTNode(char[], int, int, int)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.ASTNode.toString()</name>
                <outbound type="class" confirmed="no">java.lang.Object</outbound>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="feature" confirmed="no">java.lang.String.String(char[])</outbound>
                <outbound type="feature" confirmed="no">java.lang.String.valueOf(java.lang.Object)</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.ASTNode.literal</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.ASTNode.name</outbound>
                <inbound type="feature" confirmed="yes">org.mvel.ast.BinaryOperation.toString()</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.debug.DebugTools.decompile(org.mvel.CompiledExpression, boolean, org.mvel.debug.DebugTools$DecompileContext)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.ASTNode.tryStaticAccess(java.lang.Object, org.mvel.integration.VariableResolverFactory)</name>
                <outbound type="class" confirmed="no">java.lang.Class</outbound>
                <outbound type="class" confirmed="no">java.lang.ClassLoader</outbound>
                <outbound type="feature" confirmed="no">java.lang.ClassLoader.loadClass(java.lang.String)</outbound>
                <outbound type="class" confirmed="no">java.lang.ClassNotFoundException</outbound>
                <outbound type="class" confirmed="no">java.lang.Exception</outbound>
                <outbound type="class" confirmed="no">java.lang.Object</outbound>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="feature" confirmed="no">java.lang.String.String(char[], int, int)</outbound>
                <outbound type="class" confirmed="no">java.lang.Thread</outbound>
                <outbound type="feature" confirmed="no">java.lang.Thread.currentThread()</outbound>
                <outbound type="feature" confirmed="no">java.lang.Thread.getContextClassLoader()</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.ASTNode.name</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.PropertyAccessor.get(java.lang.String, java.lang.Object, org.mvel.integration.VariableResolverFactory, java.lang.Object)</outbound>
                <outbound type="class" confirmed="yes">org.mvel.integration.VariableResolverFactory</outbound>
                <inbound type="feature" confirmed="yes">org.mvel.ASTNode.getReducedValue(java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.ASTNode.valRet(java.lang.Object)</name>
                <outbound type="class" confirmed="no">java.lang.Boolean</outbound>
                <outbound type="feature" confirmed="no">java.lang.Boolean.Boolean(boolean)</outbound>
                <outbound type="feature" confirmed="no">java.lang.Boolean.booleanValue()</outbound>
                <outbound type="class" confirmed="no">java.lang.Exception</outbound>
                <outbound type="class" confirmed="no">java.lang.Integer</outbound>
                <outbound type="feature" confirmed="no">java.lang.Integer.Integer(int)</outbound>
                <outbound type="feature" confirmed="no">java.lang.Integer.intValue()</outbound>
                <outbound type="class" confirmed="no">java.lang.Object</outbound>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.ASTNode.fields</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.CompileException.CompileException(java.lang.String)</outbound>
                <inbound type="feature" confirmed="yes">org.mvel.ASTNode.getReducedValue(java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.ASTNode.getReducedValueAccelerated(java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.ASTNode.setName(char[])</inbound>
            </feature>
        </class>
        <class confirmed="no">
            <name>org.mvel.ASTNode[]</name>
            <inbound type="feature" confirmed="yes">org.mvel.ASTArrayList.ASTArrayList(org.mvel.ASTIterator)</inbound>
        </class>
        <class confirmed="yes">
            <name>org.mvel.AbstractParser</name>
            <outbound type="class" confirmed="no">java.io.Serializable</outbound>
            <outbound type="class" confirmed="no">java.lang.Object</outbound>
            <inbound type="class" confirmed="yes">org.mvel.ExpressionCompiler</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.ExpressionCompiler.compile(org.mvel.ParserContext)</inbound>
            <inbound type="class" confirmed="yes">org.mvel.MVELInterpretedRuntime</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.MVELInterpretedRuntime.parse()</inbound>
            <inbound type="class" confirmed="yes">org.mvel.MacroProcessor</inbound>
            <inbound type="class" confirmed="yes">org.mvel.optimizers.AbstractOptimizer</inbound>
            <feature confirmed="yes">
                <name>org.mvel.AbstractParser.AbstractParser()</name>
                <outbound type="feature" confirmed="no">java.lang.Object.Object()</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.AbstractParser.debugSymbols</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.AbstractParser.greedy</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.AbstractParser.lastWasComment</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.AbstractParser.lastWasIdentifier</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.AbstractParser.lastWasLineLabel</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.AbstractParser.line</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.AbstractParser.literalOnly</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.AbstractParser.splitAccumulator</outbound>
                <outbound type="class" confirmed="yes">org.mvel.util.ExecutionStack</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.util.ExecutionStack.ExecutionStack()</outbound>
                <inbound type="feature" confirmed="yes">org.mvel.ExpressionCompiler.ExpressionCompiler(char[])</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.ExpressionCompiler.ExpressionCompiler(char[], org.mvel.ParserContext)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.ExpressionCompiler.ExpressionCompiler(java.lang.String)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.ExpressionCompiler.ExpressionCompiler(java.lang.String, boolean)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.MVELInterpretedRuntime.MVELInterpretedRuntime(char[])</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.MVELInterpretedRuntime.MVELInterpretedRuntime(char[], java.lang.Object)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.MVELInterpretedRuntime.MVELInterpretedRuntime(char[], java.lang.Object, java.util.Map)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.MVELInterpretedRuntime.MVELInterpretedRuntime(char[], java.lang.Object, org.mvel.integration.VariableResolverFactory)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.MVELInterpretedRuntime.MVELInterpretedRuntime(char[], java.lang.Object, org.mvel.integration.VariableResolverFactory, boolean)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.MVELInterpretedRuntime.MVELInterpretedRuntime(java.lang.Object, java.util.Map)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.MVELInterpretedRuntime.MVELInterpretedRuntime(java.lang.String)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.MVELInterpretedRuntime.MVELInterpretedRuntime(java.lang.String, java.lang.Object)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.MVELInterpretedRuntime.MVELInterpretedRuntime(java.lang.String, java.lang.Object, java.util.Map)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.MVELInterpretedRuntime.MVELInterpretedRuntime(java.lang.String, java.lang.Object, org.mvel.integration.VariableResolverFactory)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.MVELInterpretedRuntime.MVELInterpretedRuntime(java.lang.String, java.lang.Object, org.mvel.integration.VariableResolverFactory, boolean)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.MVELInterpretedRuntime.MVELInterpretedRuntime(java.lang.String, org.mvel.integration.VariableResolverFactory)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.MacroProcessor.MacroProcessor()</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.optimizers.AbstractOptimizer.AbstractOptimizer()</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.AbstractParser.EX_PRECACHE</name>
                <outbound type="class" confirmed="no">java.util.Map</outbound>
                <inbound type="feature" confirmed="yes">org.mvel.AbstractParser.configureFactory()</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.AbstractParser.setExpression(java.lang.String)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.AbstractParser.GET</name>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.AbstractParser.GET_OR_CREATE</name>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.AbstractParser.LEVEL_0_PROPERTY_ONLY</name>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.AbstractParser.LEVEL_1_BASIC_LANG</name>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.AbstractParser.LEVEL_2_MULTI_STATEMENT</name>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.AbstractParser.LEVEL_3_ITERATION</name>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.AbstractParser.LEVEL_4_ASSIGNMENT</name>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.AbstractParser.LEVEL_5_CONTROL_FLOW</name>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.AbstractParser.LITERALS</name>
                <outbound type="class" confirmed="no">java.util.Map</outbound>
                <inbound type="feature" confirmed="yes">org.mvel.ASTNode.getReducedValue(java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.ASTNode.setName(char[])</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.AbstractParser.isReservedWord(java.lang.String)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.AbstractParser.static {}</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.ParserContext.getImport(java.lang.String)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.ParserContext.hasImport(java.lang.String)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.ast.PropertyASTNode.initializePropertyNode(java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.util.ParseTools.findClass(org.mvel.integration.VariableResolverFactory, java.lang.String)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.AbstractParser.OPERATORS</name>
                <outbound type="class" confirmed="no">java.util.Map</outbound>
                <inbound type="feature" confirmed="yes">org.mvel.ASTNode.setName(char[])</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.AbstractParser._loadLanguageFeaturesByLevel(int)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.AbstractParser.createOperator(char[], int, int, int)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.AbstractParser.isReservedWord(java.lang.String)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.AbstractParser.nextToken()</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.AbstractParser.setLanguageLevel(int)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.AbstractParser.static {}</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.AbstractParser.REMOVE</name>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.AbstractParser.SET</name>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.AbstractParser._captureBlock(org.mvel.ASTNode, char[], boolean, int)</name>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="class" confirmed="yes">org.mvel.ASTNode</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.AbstractParser.captureToEOLorOF()</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.AbstractParser.createBlockToken(int, int, int, int, int)</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.AbstractParser.cursor</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.AbstractParser.debugSymbols</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.AbstractParser.getParserContext()</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.AbstractParser.length</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.AbstractParser.line</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.AbstractParser.skipWhitespace()</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.AbstractParser.subArray(int, int)</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.AbstractParser.trimLeft(int)</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.AbstractParser.trimRight(int)</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.CompileException.CompileException(java.lang.String, char[], int)</outbound>
                <outbound type="class" confirmed="yes">org.mvel.ParserContext</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.ParserContext.getLineCount()</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.ParserContext.setLineCount(int)</outbound>
                <outbound type="class" confirmed="yes">org.mvel.ast.IfNode</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.ast.IfNode.setElseBlock(char[])</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.ast.IfNode.setElseIf(org.mvel.ast.IfNode)</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.util.ParseTools.balancedCapture(char[], int, char)</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.util.ParseTools.balancedCaptureWithLineAccounting(char[], int, char)</outbound>
                <inbound type="feature" confirmed="yes">org.mvel.AbstractParser.captureCodeBlock(int)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.AbstractParser._loadLanguageFeaturesByLevel(int)</name>
                <outbound type="feature" confirmed="no">java.lang.Integer.Integer(int)</outbound>
                <outbound type="class" confirmed="no">java.lang.Object</outbound>
                <outbound type="class" confirmed="no">java.util.Map</outbound>
                <outbound type="feature" confirmed="no">java.util.Map.put(java.lang.Object, java.lang.Object)</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.AbstractParser.OPERATORS</outbound>
                <inbound type="feature" confirmed="yes">org.mvel.AbstractParser.setLanguageLevel(int)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.AbstractParser.static {}</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.AbstractParser.addFatalError(java.lang.String)</name>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.AbstractParser.cursor</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.AbstractParser.getParserContext()</outbound>
                <outbound type="class" confirmed="yes">org.mvel.ErrorDetail</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.ErrorDetail.ErrorDetail(int, int, boolean, java.lang.String)</outbound>
                <outbound type="class" confirmed="yes">org.mvel.ParserContext</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.ParserContext.addError(org.mvel.ErrorDetail)</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.ParserContext.getLineCount()</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.ParserContext.getLineOffset()</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.AbstractParser.addFatalError(java.lang.String, int, int)</name>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.AbstractParser.getParserContext()</outbound>
                <outbound type="class" confirmed="yes">org.mvel.ErrorDetail</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.ErrorDetail.ErrorDetail(int, int, boolean, java.lang.String)</outbound>
                <outbound type="class" confirmed="yes">org.mvel.ParserContext</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.ParserContext.addError(org.mvel.ErrorDetail)</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.AbstractParser.addWarning(java.lang.String)</name>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.AbstractParser.getParserContext()</outbound>
                <outbound type="class" confirmed="yes">org.mvel.ErrorDetail</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.ErrorDetail.ErrorDetail(java.lang.String, boolean)</outbound>
                <outbound type="class" confirmed="yes">org.mvel.ParserContext</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.ParserContext.addError(org.mvel.ErrorDetail)</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.AbstractParser.arithmeticFunctionReduction(int)</name>
                <outbound type="class" confirmed="no">java.lang.Boolean</outbound>
                <outbound type="feature" confirmed="no">java.lang.Boolean.booleanValue()</outbound>
                <outbound type="class" confirmed="no">java.lang.Integer</outbound>
                <outbound type="feature" confirmed="no">java.lang.Integer.Integer(int)</outbound>
                <outbound type="feature" confirmed="no">java.lang.Integer.intValue()</outbound>
                <outbound type="class" confirmed="no">java.lang.Object</outbound>
                <outbound type="class" confirmed="yes">org.mvel.ASTNode</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.ASTNode.getOperator()</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.ASTNode.getReducedValue(java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory)</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.ASTNode.isOperator()</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.AbstractParser.ctx</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.AbstractParser.dStack</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.AbstractParser.dreduce()</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.AbstractParser.dreduce2()</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.AbstractParser.isArithmeticOperator(int)</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.AbstractParser.nextToken()</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.AbstractParser.reduce()</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.AbstractParser.splitAccumulator</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.AbstractParser.stk</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.AbstractParser.variableFactory</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.AbstractParser.xswap()</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.Operator.PTABLE</outbound>
                <outbound type="class" confirmed="yes">org.mvel.integration.VariableResolverFactory</outbound>
                <outbound type="class" confirmed="yes">org.mvel.util.ExecutionStack</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.util.ExecutionStack.add(java.lang.Object)</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.util.ExecutionStack.isEmpty()</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.util.ExecutionStack.pop()</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.util.ExecutionStack.push(java.lang.Object)</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.util.ExecutionStack.push(java.lang.Object, java.lang.Object)</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.util.ExecutionStack.size()</outbound>
                <outbound type="class" confirmed="yes">org.mvel.util.Stack</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.util.Stack.peek()</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.util.Stack.peek2()</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.util.Stack.push(java.lang.Object)</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.util.Stack.push(java.lang.Object, java.lang.Object)</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.util.Stack.size()</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.AbstractParser.asInt(java.lang.Object)</name>
                <outbound type="class" confirmed="no">java.lang.Integer</outbound>
                <outbound type="feature" confirmed="no">java.lang.Integer.intValue()</outbound>
                <outbound type="class" confirmed="no">java.lang.Object</outbound>
                <inbound type="feature" confirmed="yes">org.mvel.AbstractParser.reduce()</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.AbstractParser.blockContinues()</name>
                <outbound type="feature" confirmed="no">java.lang.Character.isWhitespace(char)</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.AbstractParser.cursor</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.AbstractParser.expr</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.AbstractParser.length</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.AbstractParser.skipWhitespace()</outbound>
                <inbound type="feature" confirmed="yes">org.mvel.AbstractParser.captureCodeBlock(int)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.AbstractParser.captureCodeBlock(int)</name>
                <outbound type="feature" confirmed="no">java.lang.Character.isWhitespace(char)</outbound>
                <outbound type="class" confirmed="yes">org.mvel.ASTNode</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.AbstractParser._captureBlock(org.mvel.ASTNode, char[], boolean, int)</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.AbstractParser.blockContinues()</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.AbstractParser.cursor</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.AbstractParser.debugSymbols</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.AbstractParser.expr</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.AbstractParser.length</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.AbstractParser.skipToNextTokenJunction()</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.AbstractParser.skipWhitespace()</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.AbstractParser.skipWhitespaceWithLineAccounting()</outbound>
                <outbound type="class" confirmed="yes">org.mvel.ExecutableStatement</outbound>
                <outbound type="class" confirmed="yes">org.mvel.ast.IfNode</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.ast.IfNode.getElseBlock()</outbound>
                <inbound type="feature" confirmed="yes">org.mvel.AbstractParser.nextToken()</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.AbstractParser.captureToEOLorOF()</name>
                <outbound type="feature" confirmed="yes">org.mvel.AbstractParser.cursor</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.AbstractParser.expr</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.AbstractParser.length</outbound>
                <inbound type="feature" confirmed="yes">org.mvel.AbstractParser._captureBlock(org.mvel.ASTNode, char[], boolean, int)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.AbstractParser.captureToEOS()</name>
                <outbound type="feature" confirmed="yes">org.mvel.AbstractParser.cursor</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.AbstractParser.expr</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.AbstractParser.length</outbound>
                <inbound type="feature" confirmed="yes">org.mvel.AbstractParser.captureTokenToEOS()</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.AbstractParser.nextToken()</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.AbstractParser.captureToEOT()</name>
                <outbound type="feature" confirmed="no">java.lang.Character.isWhitespace(char)</outbound>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.AbstractParser.cursor</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.AbstractParser.expr</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.AbstractParser.length</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.AbstractParser.skipWhitespace()</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.AbstractParser.trimWhitespace()</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.CompileException.CompileException(java.lang.String, char[], int)</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.util.ParseTools.balancedCapture(char[], int, char)</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.util.ParseTools.captureStringLiteral(char, char[], int, int)</outbound>
                <inbound type="feature" confirmed="yes">org.mvel.AbstractParser.handleUnion(org.mvel.ASTNode)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.AbstractParser.nextToken()</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.AbstractParser.captureTokenToEOS()</name>
                <outbound type="class" confirmed="yes">org.mvel.ASTNode</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.ASTNode.ASTNode(char[], int, int, int)</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.AbstractParser.captureToEOS()</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.AbstractParser.cursor</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.AbstractParser.expr</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.AbstractParser.lastNode</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.AbstractParser.configureFactory()</name>
                <outbound type="feature" confirmed="no">java.util.Collections.synchronizedMap(java.util.Map)</outbound>
                <outbound type="class" confirmed="no">java.util.Map</outbound>
                <outbound type="feature" confirmed="no">java.util.WeakHashMap.WeakHashMap(int)</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.AbstractParser.EX_PRECACHE</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.MVEL.THREAD_SAFE</outbound>
                <inbound type="feature" confirmed="yes">org.mvel.AbstractParser.static {}</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.AbstractParser.contextControl(int, org.mvel.ParserContext, org.mvel.AbstractParser)</name>
                <outbound type="class" confirmed="no">java.lang.Object</outbound>
                <outbound type="class" confirmed="no">java.lang.Runtime</outbound>
                <outbound type="feature" confirmed="no">java.lang.Runtime.getRuntime()</outbound>
                <outbound type="class" confirmed="no">java.lang.ThreadLocal</outbound>
                <outbound type="feature" confirmed="no">java.lang.ThreadLocal.ThreadLocal()</outbound>
                <outbound type="feature" confirmed="no">java.lang.ThreadLocal.get()</outbound>
                <outbound type="feature" confirmed="no">java.lang.ThreadLocal.set(java.lang.Object)</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.AbstractParser.parserContext</outbound>
                <outbound type="class" confirmed="yes">org.mvel.ParserContext</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.ParserContext.ParserContext(java.lang.Object)</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.ParserContext.setRootParser(java.lang.Object)</outbound>
                <inbound type="feature" confirmed="yes">org.mvel.AbstractParser.getCurrentThreadParserContext()</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.AbstractParser.newContext()</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.AbstractParser.newContext(org.mvel.ParserContext)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.AbstractParser.removeContext()</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.AbstractParser.resetParserContext()</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.AbstractParser.createBlockToken(int, int, int, int, int)</name>
                <outbound type="class" confirmed="no">java.lang.Object</outbound>
                <outbound type="class" confirmed="yes">org.mvel.ASTNode</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.AbstractParser.cursor</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.AbstractParser.fields</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.AbstractParser.isStatementManuallyTerminated()</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.AbstractParser.lastWasIdentifier</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.AbstractParser.splitAccumulator</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.AbstractParser.subArray(int, int)</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.ast.EndOfStatement.EndOfStatement()</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.ast.ForEachNode.ForEachNode(char[], char[], int)</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.ast.IfNode.IfNode(char[], char[], int)</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.ast.WhileNode.WhileNode(char[], char[], int)</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.ast.WithNode.WithNode(char[], char[], int)</outbound>
                <outbound type="class" confirmed="yes">org.mvel.util.ExecutionStack</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.util.ExecutionStack.add(java.lang.Object)</outbound>
                <inbound type="feature" confirmed="yes">org.mvel.AbstractParser._captureBlock(org.mvel.ASTNode, char[], boolean, int)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.AbstractParser.createOperator(char[], int, int, int)</name>
                <outbound type="class" confirmed="no">java.lang.Integer</outbound>
                <outbound type="class" confirmed="no">java.lang.Object</outbound>
                <outbound type="feature" confirmed="no">java.lang.String.String(char[])</outbound>
                <outbound type="class" confirmed="no">java.util.Map</outbound>
                <outbound type="feature" confirmed="no">java.util.Map.get(java.lang.Object)</outbound>
                <outbound type="class" confirmed="yes">org.mvel.ASTNode</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.AbstractParser.OPERATORS</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.AbstractParser.lastNode</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.AbstractParser.lastWasIdentifier</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.ast.OperatorNode.OperatorNode(java.lang.Integer)</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.util.ParseTools.subset(char[], int, int)</outbound>
                <inbound type="feature" confirmed="yes">org.mvel.AbstractParser.nextToken()</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.AbstractParser.createPropertyToken(int, int)</name>
                <outbound type="class" confirmed="no">java.lang.Class</outbound>
                <outbound type="feature" confirmed="no">java.lang.Class.forName(java.lang.String)</outbound>
                <outbound type="class" confirmed="no">java.lang.ClassNotFoundException</outbound>
                <outbound type="feature" confirmed="no">java.lang.NoClassDefFoundError.NoClassDefFoundError(java.lang.String)</outbound>
                <outbound type="class" confirmed="no">java.lang.Object</outbound>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="feature" confirmed="no">java.lang.String.String(char[])</outbound>
                <outbound type="feature" confirmed="no">java.lang.String.String(char[], int, int)</outbound>
                <outbound type="feature" confirmed="no">java.lang.String.equals(java.lang.Object)</outbound>
                <outbound type="class" confirmed="no">java.lang.ThreadLocal</outbound>
                <outbound type="feature" confirmed="no">java.lang.ThreadLocal.get()</outbound>
                <outbound type="feature" confirmed="no">java.lang.Throwable.getMessage()</outbound>
                <outbound type="class" confirmed="yes">org.mvel.ASTNode</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.ASTNode.ASTNode(char[], int, int, int)</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.ASTNode.isIdentifier()</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.AbstractParser.cursor</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.AbstractParser.expr</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.AbstractParser.fields</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.AbstractParser.getParserContext()</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.AbstractParser.lastNode</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.AbstractParser.lastWasIdentifier</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.AbstractParser.parserContext</outbound>
                <outbound type="class" confirmed="yes">org.mvel.ParserContext</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.ParserContext.getImport(java.lang.String)</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.ParserContext.hasImport(java.lang.String)</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.ParserContext.hasImports()</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.ast.LiteralDeepPropertyNode.LiteralDeepPropertyNode(char[], int, java.lang.Object)</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.ast.LiteralNode.LiteralNode(java.lang.Object, java.lang.Class)</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.ast.PropertyASTNode.PropertyASTNode(char[], int, int, int)</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.ast.ThisValDeepPropertyNode.ThisValDeepPropertyNode(char[], int)</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.util.ArrayTools.findFirst(char, char[])</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.util.ParseTools.subset(char[], int, int)</outbound>
                <inbound type="feature" confirmed="yes">org.mvel.AbstractParser.nextToken()</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.AbstractParser.createToken(char[], int, int, int)</name>
                <outbound type="class" confirmed="yes">org.mvel.ASTNode</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.ASTNode.ASTNode(char[], int, int, int)</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.ASTNode.isIdentifier()</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.AbstractParser.lastNode</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.AbstractParser.lastWasIdentifier</outbound>
                <inbound type="feature" confirmed="yes">org.mvel.AbstractParser.nextToken()</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.AbstractParser.ctx</name>
                <outbound type="class" confirmed="no">java.lang.Object</outbound>
                <inbound type="feature" confirmed="yes">org.mvel.AbstractParser.arithmeticFunctionReduction(int)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.AbstractParser.cursor</name>
                <inbound type="feature" confirmed="yes">org.mvel.AbstractParser._captureBlock(org.mvel.ASTNode, char[], boolean, int)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.AbstractParser.addFatalError(java.lang.String)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.AbstractParser.blockContinues()</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.AbstractParser.captureCodeBlock(int)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.AbstractParser.captureToEOLorOF()</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.AbstractParser.captureToEOS()</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.AbstractParser.captureToEOT()</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.AbstractParser.captureTokenToEOS()</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.AbstractParser.createBlockToken(int, int, int, int, int)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.AbstractParser.createPropertyToken(int, int)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.AbstractParser.handleUnion(org.mvel.ASTNode)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.AbstractParser.isRemain(int)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.AbstractParser.isStatementManuallyTerminated()</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.AbstractParser.lookAhead()</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.AbstractParser.lookAhead(int)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.AbstractParser.lookBehind()</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.AbstractParser.lookBehind(int)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.AbstractParser.nextToken()</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.AbstractParser.reduce()</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.AbstractParser.skipToNextTokenJunction()</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.AbstractParser.skipWhitespace()</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.AbstractParser.skipWhitespaceWithLineAccounting()</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.AbstractParser.tokenContinues()</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.AbstractParser.trimWhitespace()</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.AbstractParser.dStack</name>
                <outbound type="class" confirmed="yes">org.mvel.util.ExecutionStack</outbound>
                <inbound type="feature" confirmed="yes">org.mvel.AbstractParser.arithmeticFunctionReduction(int)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.AbstractParser.dreduce()</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.AbstractParser.dreduce2()</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.AbstractParser.debugSymbols</name>
                <inbound type="feature" confirmed="yes">org.mvel.AbstractParser.AbstractParser()</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.AbstractParser._captureBlock(org.mvel.ASTNode, char[], boolean, int)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.AbstractParser.captureCodeBlock(int)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.AbstractParser.isDebugSymbols()</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.AbstractParser.nextToken()</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.AbstractParser.setDebugSymbols(boolean)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.AbstractParser.dreduce()</name>
                <outbound type="class" confirmed="no">java.lang.Object</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.AbstractParser.dStack</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.AbstractParser.reduce()</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.AbstractParser.stk</outbound>
                <outbound type="class" confirmed="yes">org.mvel.util.ExecutionStack</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.util.ExecutionStack.pop()</outbound>
                <outbound type="class" confirmed="yes">org.mvel.util.Stack</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.util.Stack.push(java.lang.Object, java.lang.Object)</outbound>
                <inbound type="feature" confirmed="yes">org.mvel.AbstractParser.arithmeticFunctionReduction(int)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.AbstractParser.dreduce2()</name>
                <outbound type="class" confirmed="no">java.lang.Object</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.AbstractParser.dStack</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.AbstractParser.reduce()</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.AbstractParser.stk</outbound>
                <outbound type="class" confirmed="yes">org.mvel.util.ExecutionStack</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.util.ExecutionStack.isEmpty()</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.util.ExecutionStack.pop()</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.util.ExecutionStack.size()</outbound>
                <outbound type="class" confirmed="yes">org.mvel.util.Stack</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.util.Stack.push(java.lang.Object)</outbound>
                <inbound type="feature" confirmed="yes">org.mvel.AbstractParser.arithmeticFunctionReduction(int)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.AbstractParser.expr</name>
                <inbound type="feature" confirmed="yes">org.mvel.AbstractParser.blockContinues()</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.AbstractParser.captureCodeBlock(int)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.AbstractParser.captureToEOLorOF()</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.AbstractParser.captureToEOS()</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.AbstractParser.captureToEOT()</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.AbstractParser.captureTokenToEOS()</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.AbstractParser.createPropertyToken(int, int)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.AbstractParser.handleUnion(org.mvel.ASTNode)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.AbstractParser.isStatementManuallyTerminated()</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.AbstractParser.lookAhead()</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.AbstractParser.lookAhead(int)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.AbstractParser.lookBehind()</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.AbstractParser.lookBehind(int)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.AbstractParser.nextToken()</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.AbstractParser.reduce()</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.AbstractParser.setExpression(char[])</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.AbstractParser.setExpression(java.lang.String)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.AbstractParser.skipToNextTokenJunction()</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.AbstractParser.skipWhitespace()</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.AbstractParser.skipWhitespaceWithLineAccounting()</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.AbstractParser.subArray(int, int)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.AbstractParser.tokenContinues()</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.AbstractParser.trimLeft(int)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.AbstractParser.trimRight(int)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.AbstractParser.trimWhitespace()</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.AbstractParser.fields</name>
                <inbound type="feature" confirmed="yes">org.mvel.AbstractParser.createBlockToken(int, int, int, int, int)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.AbstractParser.createPropertyToken(int, int)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.AbstractParser.handleSubstatement(org.mvel.ast.Substatement)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.AbstractParser.handleUnion(org.mvel.ASTNode)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.AbstractParser.nextToken()</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.AbstractParser.reduce()</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.AbstractParser.getCurrentSourceFileName()</name>
                <outbound type="class" confirmed="no">java.lang.Object</outbound>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="class" confirmed="no">java.lang.ThreadLocal</outbound>
                <outbound type="feature" confirmed="no">java.lang.ThreadLocal.get()</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.AbstractParser.parserContext</outbound>
                <outbound type="class" confirmed="yes">org.mvel.ParserContext</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.ParserContext.getSourceFile()</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.AbstractParser.getCurrentThreadParserContext()</name>
                <outbound type="feature" confirmed="yes">org.mvel.AbstractParser.contextControl(int, org.mvel.ParserContext, org.mvel.AbstractParser)</outbound>
                <outbound type="class" confirmed="yes">org.mvel.ParserContext</outbound>
                <inbound type="feature" confirmed="yes">org.mvel.ast.NewObjectNode.NewObjectNode(char[], int)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.ast.WithNode.WithNode(char[], char[], int)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.util.ParseTools.findClass(org.mvel.integration.VariableResolverFactory, java.lang.String)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.AbstractParser.getParserContext()</name>
                <outbound type="class" confirmed="no">java.lang.Object</outbound>
                <outbound type="class" confirmed="no">java.lang.ThreadLocal</outbound>
                <outbound type="feature" confirmed="no">java.lang.ThreadLocal.get()</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.AbstractParser.newContext()</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.AbstractParser.parserContext</outbound>
                <outbound type="class" confirmed="yes">org.mvel.ParserContext</outbound>
                <inbound type="feature" confirmed="yes">org.mvel.AbstractParser._captureBlock(org.mvel.ASTNode, char[], boolean, int)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.AbstractParser.addFatalError(java.lang.String)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.AbstractParser.addFatalError(java.lang.String, int, int)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.AbstractParser.addWarning(java.lang.String)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.AbstractParser.createPropertyToken(int, int)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.AbstractParser.nextToken()</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.AbstractParser.greedy</name>
                <inbound type="feature" confirmed="yes">org.mvel.AbstractParser.AbstractParser()</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.AbstractParser.nextToken()</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.AbstractParser.handleSubstatement(org.mvel.ast.Substatement)</name>
                <outbound type="class" confirmed="no">java.lang.Object</outbound>
                <outbound type="class" confirmed="yes">org.mvel.ASTNode</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.AbstractParser.fields</outbound>
                <outbound type="class" confirmed="yes">org.mvel.ExecutableStatement</outbound>
                <outbound type="feature" confirmed="no">org.mvel.ExecutableStatement.getValue(java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory)</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.ExecutableStatement.isLiteralOnly()</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.ast.LiteralNode.LiteralNode(java.lang.Object, int)</outbound>
                <outbound type="class" confirmed="yes">org.mvel.ast.Substatement</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.ast.Substatement.getStatement()</outbound>
                <outbound type="class" confirmed="yes">org.mvel.integration.VariableResolverFactory</outbound>
                <inbound type="feature" confirmed="yes">org.mvel.AbstractParser.nextToken()</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.AbstractParser.handleUnion(org.mvel.ASTNode)</name>
                <outbound type="class" confirmed="yes">org.mvel.ASTNode</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.AbstractParser.captureToEOT()</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.AbstractParser.cursor</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.AbstractParser.expr</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.AbstractParser.fields</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.AbstractParser.lastNode</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.AbstractParser.length</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.AbstractParser.skipWhitespace()</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.ast.Union.Union(char[], int, int, int, org.mvel.ASTNode)</outbound>
                <inbound type="feature" confirmed="yes">org.mvel.AbstractParser.nextToken()</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.AbstractParser.isArithmeticOperator(int)</name>
                <inbound type="feature" confirmed="yes">org.mvel.AbstractParser.arithmeticFunctionReduction(int)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.AbstractParser.isAt(char, int)</name>
                <outbound type="feature" confirmed="yes">org.mvel.AbstractParser.lookAhead(int)</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.AbstractParser.isDebugSymbols()</name>
                <outbound type="feature" confirmed="yes">org.mvel.AbstractParser.debugSymbols</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.AbstractParser.isNext(char)</name>
                <outbound type="feature" confirmed="yes">org.mvel.AbstractParser.lookAhead()</outbound>
                <inbound type="feature" confirmed="yes">org.mvel.AbstractParser.nextToken()</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.AbstractParser.isRemain(int)</name>
                <outbound type="feature" confirmed="yes">org.mvel.AbstractParser.cursor</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.AbstractParser.length</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.AbstractParser.isReservedWord(java.lang.String)</name>
                <outbound type="class" confirmed="no">java.lang.Object</outbound>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="class" confirmed="no">java.util.Map</outbound>
                <outbound type="feature" confirmed="no">java.util.Map.containsKey(java.lang.Object)</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.AbstractParser.LITERALS</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.AbstractParser.OPERATORS</outbound>
                <inbound type="feature" confirmed="yes">org.mvel.util.ParseTools.checkNameSafety(java.lang.String)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.AbstractParser.isStatementManuallyTerminated()</name>
                <outbound type="feature" confirmed="no">java.lang.Character.isWhitespace(char)</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.AbstractParser.cursor</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.AbstractParser.expr</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.AbstractParser.length</outbound>
                <inbound type="feature" confirmed="yes">org.mvel.AbstractParser.createBlockToken(int, int, int, int, int)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.AbstractParser.lastNode</name>
                <outbound type="class" confirmed="yes">org.mvel.ASTNode</outbound>
                <inbound type="feature" confirmed="yes">org.mvel.AbstractParser.captureTokenToEOS()</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.AbstractParser.createOperator(char[], int, int, int)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.AbstractParser.createPropertyToken(int, int)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.AbstractParser.createToken(char[], int, int, int)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.AbstractParser.handleUnion(org.mvel.ASTNode)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.AbstractParser.nextToken()</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.AbstractParser.lastWasComment</name>
                <inbound type="feature" confirmed="yes">org.mvel.AbstractParser.AbstractParser()</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.AbstractParser.nextToken()</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.AbstractParser.lastWasIdentifier</name>
                <inbound type="feature" confirmed="yes">org.mvel.AbstractParser.AbstractParser()</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.AbstractParser.createBlockToken(int, int, int, int, int)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.AbstractParser.createOperator(char[], int, int, int)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.AbstractParser.createPropertyToken(int, int)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.AbstractParser.createToken(char[], int, int, int)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.AbstractParser.nextToken()</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.AbstractParser.lastWasLineLabel</name>
                <inbound type="feature" confirmed="yes">org.mvel.AbstractParser.AbstractParser()</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.AbstractParser.nextToken()</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.AbstractParser.length</name>
                <inbound type="feature" confirmed="yes">org.mvel.AbstractParser._captureBlock(org.mvel.ASTNode, char[], boolean, int)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.AbstractParser.blockContinues()</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.AbstractParser.captureCodeBlock(int)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.AbstractParser.captureToEOLorOF()</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.AbstractParser.captureToEOS()</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.AbstractParser.captureToEOT()</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.AbstractParser.handleUnion(org.mvel.ASTNode)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.AbstractParser.isRemain(int)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.AbstractParser.isStatementManuallyTerminated()</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.AbstractParser.lookAhead()</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.AbstractParser.lookAhead(int)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.AbstractParser.nextToken()</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.AbstractParser.setExpression(char[])</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.AbstractParser.setExpression(java.lang.String)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.AbstractParser.skipToNextTokenJunction()</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.AbstractParser.skipWhitespace()</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.AbstractParser.skipWhitespaceWithLineAccounting()</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.AbstractParser.tokenContinues()</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.AbstractParser.trimRight(int)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.AbstractParser.line</name>
                <inbound type="feature" confirmed="yes">org.mvel.AbstractParser.AbstractParser()</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.AbstractParser._captureBlock(org.mvel.ASTNode, char[], boolean, int)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.AbstractParser.nextToken()</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.AbstractParser.skipWhitespaceWithLineAccounting()</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.AbstractParser.literalOnly</name>
                <inbound type="feature" confirmed="yes">org.mvel.AbstractParser.AbstractParser()</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.AbstractParser.lookAhead()</name>
                <outbound type="feature" confirmed="yes">org.mvel.AbstractParser.cursor</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.AbstractParser.expr</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.AbstractParser.length</outbound>
                <inbound type="feature" confirmed="yes">org.mvel.AbstractParser.isNext(char)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.AbstractParser.nextToken()</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.AbstractParser.lookAhead(int)</name>
                <outbound type="feature" confirmed="yes">org.mvel.AbstractParser.cursor</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.AbstractParser.expr</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.AbstractParser.length</outbound>
                <inbound type="feature" confirmed="yes">org.mvel.AbstractParser.isAt(char, int)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.AbstractParser.nextToken()</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.AbstractParser.lookBehind()</name>
                <outbound type="feature" confirmed="yes">org.mvel.AbstractParser.cursor</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.AbstractParser.expr</outbound>
                <inbound type="feature" confirmed="yes">org.mvel.AbstractParser.nextToken()</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.AbstractParser.lookBehind(int)</name>
                <outbound type="feature" confirmed="yes">org.mvel.AbstractParser.cursor</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.AbstractParser.expr</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.AbstractParser.newContext()</name>
                <outbound type="feature" confirmed="yes">org.mvel.AbstractParser.contextControl(int, org.mvel.ParserContext, org.mvel.AbstractParser)</outbound>
                <outbound type="class" confirmed="yes">org.mvel.ParserContext</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.ParserContext.ParserContext()</outbound>
                <inbound type="feature" confirmed="yes">org.mvel.AbstractParser.getParserContext()</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.AbstractParser.newContext(org.mvel.ParserContext)</name>
                <outbound type="feature" confirmed="yes">org.mvel.AbstractParser.contextControl(int, org.mvel.ParserContext, org.mvel.AbstractParser)</outbound>
                <outbound type="class" confirmed="yes">org.mvel.ParserContext</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.AbstractParser.nextToken()</name>
                <outbound type="class" confirmed="no">char[]</outbound>
                <outbound type="feature" confirmed="no">java.lang.Character.isWhitespace(char)</outbound>
                <outbound type="class" confirmed="no">java.lang.Class</outbound>
                <outbound type="feature" confirmed="no">java.lang.Class.forName(java.lang.String)</outbound>
                <outbound type="class" confirmed="no">java.lang.ClassNotFoundException</outbound>
                <outbound type="class" confirmed="no">java.lang.Exception</outbound>
                <outbound type="class" confirmed="no">java.lang.Integer</outbound>
                <outbound type="feature" confirmed="no">java.lang.Integer.intValue()</outbound>
                <outbound type="feature" confirmed="no">java.lang.NoClassDefFoundError.NoClassDefFoundError(java.lang.String)</outbound>
                <outbound type="class" confirmed="no">java.lang.Object</outbound>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="feature" confirmed="no">java.lang.String.String(char[])</outbound>
                <outbound type="feature" confirmed="no">java.lang.String.String(char[], int, int)</outbound>
                <outbound type="class" confirmed="no">java.lang.StringBuffer</outbound>
                <outbound type="feature" confirmed="no">java.lang.StringBuffer.StringBuffer(java.lang.String)</outbound>
                <outbound type="feature" confirmed="no">java.lang.StringBuffer.append(int)</outbound>
                <outbound type="feature" confirmed="no">java.lang.StringBuffer.append(java.lang.Object)</outbound>
                <outbound type="feature" confirmed="no">java.lang.StringBuffer.append(java.lang.String)</outbound>
                <outbound type="feature" confirmed="no">java.lang.StringBuffer.toString()</outbound>
                <outbound type="feature" confirmed="no">java.lang.Throwable.getMessage()</outbound>
                <outbound type="class" confirmed="no">java.util.Map</outbound>
                <outbound type="feature" confirmed="no">java.util.Map.containsKey(java.lang.Object)</outbound>
                <outbound type="feature" confirmed="no">java.util.Map.get(java.lang.Object)</outbound>
                <outbound type="class" confirmed="yes">org.mvel.ASTNode</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.ASTNode.discard()</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.ASTNode.getLiteralValue()</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.ASTNode.isLiteral()</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.ASTNode.setAsLiteral()</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.ASTNode.setLiteralValue(java.lang.Object)</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.AbstractParser.OPERATORS</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.AbstractParser.captureCodeBlock(int)</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.AbstractParser.captureToEOS()</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.AbstractParser.captureToEOT()</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.AbstractParser.createOperator(char[], int, int, int)</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.AbstractParser.createPropertyToken(int, int)</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.AbstractParser.createToken(char[], int, int, int)</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.AbstractParser.cursor</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.AbstractParser.debugSymbols</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.AbstractParser.expr</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.AbstractParser.fields</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.AbstractParser.getParserContext()</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.AbstractParser.greedy</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.AbstractParser.handleSubstatement(org.mvel.ast.Substatement)</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.AbstractParser.handleUnion(org.mvel.ASTNode)</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.AbstractParser.isNext(char)</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.AbstractParser.lastNode</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.AbstractParser.lastWasComment</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.AbstractParser.lastWasIdentifier</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.AbstractParser.lastWasLineLabel</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.AbstractParser.length</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.AbstractParser.line</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.AbstractParser.lookAhead()</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.AbstractParser.lookAhead(int)</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.AbstractParser.lookBehind()</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.AbstractParser.skipWhitespace()</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.AbstractParser.skipWhitespaceWithLineAccounting()</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.AbstractParser.splitAccumulator</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.AbstractParser.stk</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.AbstractParser.subArray(int, int)</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.AbstractParser.tokenContinues()</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.AbstractParser.trimLeft(int)</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.AbstractParser.trimRight(int)</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.AbstractParser.trimWhitespace()</outbound>
                <outbound type="class" confirmed="yes">org.mvel.CompileException</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.CompileException.CompileException(java.lang.String)</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.CompileException.CompileException(java.lang.String, char[], int)</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.CompileException.CompileException(java.lang.String, char[], int, boolean)</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.CompileException.CompileException(java.lang.String, char[], int, java.lang.Exception)</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.CompileException.getCursor()</outbound>
                <outbound type="feature" confirmed="no">org.mvel.CompileException.getMessage()</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.ParseException.ParseException(java.lang.String)</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.ParseException.ParseException(java.lang.String, char[], int)</outbound>
                <outbound type="class" confirmed="yes">org.mvel.ParserContext</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.ParserContext.addImport(java.lang.String, java.lang.Class)</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.ParserContext.addKnownLine(int)</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.ParserContext.addPackageImport(java.lang.String)</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.ParserContext.getImport(java.lang.String)</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.ParserContext.getInterceptors()</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.ParserContext.getLastLineLabel()</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.ParserContext.getLineCount()</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.ParserContext.getSourceFile()</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.ParserContext.hasImport(java.lang.String)</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.ParserContext.isBlockSymbols()</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.ParserContext.isKnownLine(java.lang.String, int)</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.ParserContext.setLastLineLabel(org.mvel.ast.LineLabel)</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.ParserContext.setLineAndOffset(int, int)</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.ParserContext.setLineCount(int)</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.ast.AssertNode.AssertNode(char[], int)</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.ast.AssignAdd.AssignAdd(char[], int, java.lang.String)</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.ast.AssignDiv.AssignDiv(char[], int, java.lang.String)</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.ast.AssignMult.AssignMult(char[], int, java.lang.String)</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.ast.AssignSub.AssignSub(char[], int, java.lang.String)</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.ast.AssignmentNode.AssignmentNode(char[], int)</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.ast.AssignmentNode.AssignmentNode(char[], int, int, java.lang.String)</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.ast.DeepAssignmentNode.DeepAssignmentNode(char[], int)</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.ast.DeepAssignmentNode.DeepAssignmentNode(char[], int, int, java.lang.String)</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.ast.EndOfStatement.EndOfStatement()</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.ast.ImportNode.ImportNode(char[])</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.ast.ImportNode.getImportClass()</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.ast.ImportNode.getPackageImport()</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.ast.ImportNode.isPackageImport()</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.ast.InlineCollectionNode.InlineCollectionNode(char[], int, int, int)</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.ast.InterceptorWrapper.InterceptorWrapper(org.mvel.integration.Interceptor, org.mvel.ASTNode)</outbound>
                <outbound type="class" confirmed="yes">org.mvel.ast.LineLabel</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.ast.LineLabel.LineLabel(java.lang.String, int)</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.ast.LineLabel.setLineNumber(int)</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.ast.LiteralNode.LiteralNode(java.lang.Object, java.lang.Class)</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.ast.NewObjectNode.NewObjectNode(char[], int)</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.ast.OperatorNode.OperatorNode(java.lang.Integer)</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.ast.PostFixDecNode.PostFixDecNode(char[], int)</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.ast.PostFixIncNode.PostFixIncNode(char[], int)</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.ast.PreFixDecNode.PreFixDecNode(char[], int)</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.ast.PreFixIncNode.PreFixIncNode(char[], int)</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.ast.RegExMatch.RegExMatch(char[], int, char[])</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.ast.ReturnNode.ReturnNode(char[], int)</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.ast.StaticImportNode.StaticImportNode(char[], int)</outbound>
                <outbound type="class" confirmed="yes">org.mvel.ast.Substatement</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.ast.Substatement.Substatement(char[], int)</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.ast.TypeCast.TypeCast(char[], int, int, int, java.lang.Class)</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.ast.TypedVarNode.TypedVarNode(char[], int, java.lang.Class)</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.ast.Union.Union(char[], int, int, int, org.mvel.ASTNode)</outbound>
                <outbound type="class" confirmed="yes">org.mvel.integration.Interceptor</outbound>
                <outbound type="class" confirmed="yes">org.mvel.util.ExecutionStack</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.util.ExecutionStack.isEmpty()</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.util.ExecutionStack.pop()</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.util.ParseTools.balancedCapture(char[], int, char)</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.util.ParseTools.captureStringLiteral(char, char[], int, int)</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.util.ParseTools.createClass(java.lang.String)</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.util.ParseTools.getSimpleClassName(java.lang.Class)</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.util.ParseTools.handleStringEscapes(char[])</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.util.ParseTools.subset(char[], int, int)</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.util.PropertyTools.isDigit(int)</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.util.PropertyTools.isIdentifierPart(int)</outbound>
                <outbound type="class" confirmed="yes">org.mvel.util.Stack</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.util.Stack.peek()</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.util.Stack.pop()</outbound>
                <inbound type="feature" confirmed="yes">org.mvel.AbstractParser.arithmeticFunctionReduction(int)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.AbstractParser.nextTokenSkipSymbols()</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.AbstractParser.reduce()</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.AbstractParser.nextTokenSkipSymbols()</name>
                <outbound type="class" confirmed="yes">org.mvel.ASTNode</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.ASTNode.getFields()</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.AbstractParser.nextToken()</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.AbstractParser.pCtx</name>
                <outbound type="class" confirmed="yes">org.mvel.ParserContext</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.AbstractParser.parserContext</name>
                <outbound type="class" confirmed="no">java.lang.ThreadLocal</outbound>
                <inbound type="feature" confirmed="yes">org.mvel.AbstractParser.contextControl(int, org.mvel.ParserContext, org.mvel.AbstractParser)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.AbstractParser.createPropertyToken(int, int)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.AbstractParser.getCurrentSourceFileName()</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.AbstractParser.getParserContext()</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.AbstractParser.reduce()</name>
                <outbound type="class" confirmed="no">java.lang.Boolean</outbound>
                <outbound type="feature" confirmed="no">java.lang.Boolean.Boolean(boolean)</outbound>
                <outbound type="feature" confirmed="no">java.lang.Boolean.booleanValue()</outbound>
                <outbound type="class" confirmed="no">java.lang.CharSequence</outbound>
                <outbound type="class" confirmed="no">java.lang.Class</outbound>
                <outbound type="feature" confirmed="no">java.lang.Class.getName()</outbound>
                <outbound type="feature" confirmed="no">java.lang.Class.isInstance(java.lang.Object)</outbound>
                <outbound type="class" confirmed="no">java.lang.ClassCastException</outbound>
                <outbound type="class" confirmed="no">java.lang.ClassLoader</outbound>
                <outbound type="feature" confirmed="no">java.lang.ClassLoader.loadClass(java.lang.String)</outbound>
                <outbound type="class" confirmed="no">java.lang.Exception</outbound>
                <outbound type="feature" confirmed="no">java.lang.Float.Float(float)</outbound>
                <outbound type="class" confirmed="no">java.lang.Integer</outbound>
                <outbound type="feature" confirmed="no">java.lang.Integer.Integer(int)</outbound>
                <outbound type="feature" confirmed="no">java.lang.Integer.intValue()</outbound>
                <outbound type="class" confirmed="no">java.lang.Object</outbound>
                <outbound type="feature" confirmed="no">java.lang.Object.getClass()</outbound>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="feature" confirmed="no">java.lang.String.equals(java.lang.Object)</outbound>
                <outbound type="feature" confirmed="no">java.lang.String.valueOf(java.lang.Object)</outbound>
                <outbound type="class" confirmed="no">java.lang.StringBuffer</outbound>
                <outbound type="feature" confirmed="no">java.lang.StringBuffer.StringBuffer(java.lang.String)</outbound>
                <outbound type="feature" confirmed="no">java.lang.StringBuffer.append(java.lang.String)</outbound>
                <outbound type="feature" confirmed="no">java.lang.StringBuffer.toString()</outbound>
                <outbound type="class" confirmed="no">java.lang.Thread</outbound>
                <outbound type="feature" confirmed="no">java.lang.Thread.currentThread()</outbound>
                <outbound type="feature" confirmed="no">java.lang.Thread.getContextClassLoader()</outbound>
                <outbound type="class" confirmed="no">java.lang.Throwable</outbound>
                <outbound type="class" confirmed="no">java.util.regex.Matcher</outbound>
                <outbound type="feature" confirmed="no">java.util.regex.Matcher.matches()</outbound>
                <outbound type="class" confirmed="no">java.util.regex.Pattern</outbound>
                <outbound type="feature" confirmed="no">java.util.regex.Pattern.compile(java.lang.String)</outbound>
                <outbound type="feature" confirmed="no">java.util.regex.Pattern.matcher(java.lang.CharSequence)</outbound>
                <outbound type="class" confirmed="yes">org.mvel.ASTNode</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.ASTNode.getOperator()</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.AbstractParser.asInt(java.lang.Object)</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.AbstractParser.cursor</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.AbstractParser.expr</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.AbstractParser.fields</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.AbstractParser.nextToken()</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.AbstractParser.stk</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.CompileException.CompileException(java.lang.String, char[], int, java.lang.Exception)</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.CompileException.CompileException(java.lang.String, java.lang.Throwable)</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.DataConversion.canConvert(java.lang.Class, java.lang.Class)</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.Soundex.soundex(java.lang.String)</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.util.ParseTools.containsCheck(java.lang.Object, java.lang.Object)</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.util.ParseTools.doOperations(java.lang.Object, int, java.lang.Object)</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.util.PropertyTools.isEmpty(java.lang.Object)</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.util.PropertyTools.similarity(java.lang.String, java.lang.String)</outbound>
                <outbound type="class" confirmed="yes">org.mvel.util.Stack</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.util.Stack.clear()</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.util.Stack.pop()</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.util.Stack.push(java.lang.Object)</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.util.Stack.push(java.lang.Object, java.lang.Object, java.lang.Object)</outbound>
                <outbound type="class" confirmed="yes">org.mvel.util.StringAppender</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.util.StringAppender.StringAppender(java.lang.String)</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.util.StringAppender.append(java.lang.String)</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.util.StringAppender.toString()</outbound>
                <inbound type="feature" confirmed="yes">org.mvel.AbstractParser.arithmeticFunctionReduction(int)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.AbstractParser.dreduce()</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.AbstractParser.dreduce2()</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.AbstractParser.removeContext()</name>
                <outbound type="feature" confirmed="yes">org.mvel.AbstractParser.contextControl(int, org.mvel.ParserContext, org.mvel.AbstractParser)</outbound>
                <outbound type="class" confirmed="yes">org.mvel.ParserContext</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.AbstractParser.resetParserContext()</name>
                <outbound type="feature" confirmed="yes">org.mvel.AbstractParser.contextControl(int, org.mvel.ParserContext, org.mvel.AbstractParser)</outbound>
                <outbound type="class" confirmed="yes">org.mvel.ParserContext</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.AbstractParser.setDebugSymbols(boolean)</name>
                <outbound type="feature" confirmed="yes">org.mvel.AbstractParser.debugSymbols</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.AbstractParser.setExpression(char[])</name>
                <outbound type="feature" confirmed="no">java.lang.Character.isWhitespace(char)</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.AbstractParser.expr</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.AbstractParser.length</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.AbstractParser.setExpression(java.lang.String)</name>
                <outbound type="class" confirmed="no">char[]</outbound>
                <outbound type="feature" confirmed="no">java.lang.Character.isWhitespace(char)</outbound>
                <outbound type="class" confirmed="no">java.lang.Object</outbound>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="feature" confirmed="no">java.lang.String.equals(java.lang.Object)</outbound>
                <outbound type="feature" confirmed="no">java.lang.String.toCharArray()</outbound>
                <outbound type="class" confirmed="no">java.util.Map</outbound>
                <outbound type="feature" confirmed="no">java.util.Map.get(java.lang.Object)</outbound>
                <outbound type="feature" confirmed="no">java.util.Map.put(java.lang.Object, java.lang.Object)</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.AbstractParser.EX_PRECACHE</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.AbstractParser.expr</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.AbstractParser.length</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.AbstractParser.setLanguageLevel(int)</name>
                <outbound type="class" confirmed="no">java.util.Map</outbound>
                <outbound type="feature" confirmed="no">java.util.Map.clear()</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.AbstractParser.OPERATORS</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.AbstractParser._loadLanguageFeaturesByLevel(int)</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.AbstractParser.skipToNextTokenJunction()</name>
                <outbound type="feature" confirmed="no">java.lang.Character.isWhitespace(char)</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.AbstractParser.cursor</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.AbstractParser.expr</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.AbstractParser.length</outbound>
                <inbound type="feature" confirmed="yes">org.mvel.AbstractParser.captureCodeBlock(int)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.AbstractParser.skipWhitespace()</name>
                <outbound type="feature" confirmed="no">java.lang.Character.isWhitespace(char)</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.AbstractParser.cursor</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.AbstractParser.expr</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.AbstractParser.length</outbound>
                <inbound type="feature" confirmed="yes">org.mvel.AbstractParser._captureBlock(org.mvel.ASTNode, char[], boolean, int)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.AbstractParser.blockContinues()</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.AbstractParser.captureCodeBlock(int)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.AbstractParser.captureToEOT()</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.AbstractParser.handleUnion(org.mvel.ASTNode)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.AbstractParser.nextToken()</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.AbstractParser.tokenContinues()</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.AbstractParser.skipWhitespaceWithLineAccounting()</name>
                <outbound type="feature" confirmed="no">java.lang.Character.isWhitespace(char)</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.AbstractParser.cursor</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.AbstractParser.expr</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.AbstractParser.length</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.AbstractParser.line</outbound>
                <inbound type="feature" confirmed="yes">org.mvel.AbstractParser.captureCodeBlock(int)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.AbstractParser.nextToken()</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.AbstractParser.splitAccumulator</name>
                <outbound type="class" confirmed="yes">org.mvel.util.ExecutionStack</outbound>
                <inbound type="feature" confirmed="yes">org.mvel.AbstractParser.AbstractParser()</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.AbstractParser.arithmeticFunctionReduction(int)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.AbstractParser.createBlockToken(int, int, int, int, int)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.AbstractParser.nextToken()</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.AbstractParser.static {}</name>
                <outbound type="class" confirmed="no">java.lang.Boolean</outbound>
                <outbound type="feature" confirmed="no">java.lang.Boolean.FALSE</outbound>
                <outbound type="feature" confirmed="no">java.lang.Boolean.TRUE</outbound>
                <outbound type="class" confirmed="no">java.lang.Class</outbound>
                <outbound type="feature" confirmed="no">java.lang.Class.forName(java.lang.String)</outbound>
                <outbound type="class" confirmed="no">java.lang.ClassLoader</outbound>
                <outbound type="feature" confirmed="no">java.lang.ClassLoader.loadClass(java.lang.String)</outbound>
                <outbound type="class" confirmed="no">java.lang.ClassNotFoundException</outbound>
                <outbound type="feature" confirmed="no">java.lang.Double.TYPE</outbound>
                <outbound type="class" confirmed="no">java.lang.Exception</outbound>
                <outbound type="feature" confirmed="no">java.lang.Float.TYPE</outbound>
                <outbound type="feature" confirmed="no">java.lang.Float.parseFloat(java.lang.String)</outbound>
                <outbound type="feature" confirmed="no">java.lang.NoClassDefFoundError.NoClassDefFoundError(java.lang.String)</outbound>
                <outbound type="class" confirmed="no">java.lang.Object</outbound>
                <outbound type="feature" confirmed="no">java.lang.RuntimeException.RuntimeException(java.lang.String, java.lang.Throwable)</outbound>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="feature" confirmed="no">java.lang.String.substring(int, int)</outbound>
                <outbound type="feature" confirmed="no">java.lang.System.getProperty(java.lang.String)</outbound>
                <outbound type="class" confirmed="no">java.lang.Thread</outbound>
                <outbound type="feature" confirmed="no">java.lang.Thread.currentThread()</outbound>
                <outbound type="feature" confirmed="no">java.lang.Thread.getContextClassLoader()</outbound>
                <outbound type="class" confirmed="no">java.lang.Throwable</outbound>
                <outbound type="feature" confirmed="no">java.lang.Throwable.getMessage()</outbound>
                <outbound type="feature" confirmed="no">java.util.HashMap.HashMap(int, float)</outbound>
                <outbound type="class" confirmed="no">java.util.Map</outbound>
                <outbound type="feature" confirmed="no">java.util.Map.put(java.lang.Object, java.lang.Object)</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.AbstractParser.LITERALS</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.AbstractParser.OPERATORS</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.AbstractParser._loadLanguageFeaturesByLevel(int)</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.AbstractParser.configureFactory()</outbound>
                <outbound type="class" confirmed="yes">org.mvel.BlankLiteral</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.BlankLiteral.INSTANCE</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.AbstractParser.stk</name>
                <outbound type="class" confirmed="yes">org.mvel.util.Stack</outbound>
                <inbound type="feature" confirmed="yes">org.mvel.AbstractParser.arithmeticFunctionReduction(int)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.AbstractParser.dreduce()</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.AbstractParser.dreduce2()</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.AbstractParser.nextToken()</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.AbstractParser.reduce()</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.AbstractParser.xswap()</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.AbstractParser.subArray(int, int)</name>
                <outbound type="feature" confirmed="yes">org.mvel.AbstractParser.expr</outbound>
                <inbound type="feature" confirmed="yes">org.mvel.AbstractParser._captureBlock(org.mvel.ASTNode, char[], boolean, int)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.AbstractParser.createBlockToken(int, int, int, int, int)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.AbstractParser.nextToken()</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.AbstractParser.tokenContinues()</name>
                <outbound type="feature" confirmed="no">java.lang.Character.isWhitespace(char)</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.AbstractParser.cursor</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.AbstractParser.expr</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.AbstractParser.length</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.AbstractParser.skipWhitespace()</outbound>
                <inbound type="feature" confirmed="yes">org.mvel.AbstractParser.nextToken()</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.AbstractParser.trimLeft(int)</name>
                <outbound type="feature" confirmed="no">java.lang.Character.isWhitespace(char)</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.AbstractParser.expr</outbound>
                <inbound type="feature" confirmed="yes">org.mvel.AbstractParser._captureBlock(org.mvel.ASTNode, char[], boolean, int)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.AbstractParser.nextToken()</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.AbstractParser.trimRight(int)</name>
                <outbound type="feature" confirmed="no">java.lang.Character.isWhitespace(char)</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.AbstractParser.expr</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.AbstractParser.length</outbound>
                <inbound type="feature" confirmed="yes">org.mvel.AbstractParser._captureBlock(org.mvel.ASTNode, char[], boolean, int)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.AbstractParser.nextToken()</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.AbstractParser.trimWhitespace()</name>
                <outbound type="feature" confirmed="no">java.lang.Character.isWhitespace(char)</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.AbstractParser.cursor</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.AbstractParser.expr</outbound>
                <inbound type="feature" confirmed="yes">org.mvel.AbstractParser.captureToEOT()</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.AbstractParser.nextToken()</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.AbstractParser.variableFactory</name>
                <outbound type="class" confirmed="yes">org.mvel.integration.VariableResolverFactory</outbound>
                <inbound type="feature" confirmed="yes">org.mvel.AbstractParser.arithmeticFunctionReduction(int)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.AbstractParser.xswap()</name>
                <outbound type="class" confirmed="no">java.lang.Object</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.AbstractParser.stk</outbound>
                <outbound type="class" confirmed="yes">org.mvel.util.Stack</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.util.Stack.pop()</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.util.Stack.push(java.lang.Object, java.lang.Object)</outbound>
                <inbound type="feature" confirmed="yes">org.mvel.AbstractParser.arithmeticFunctionReduction(int)</inbound>
            </feature>
        </class>
        <class confirmed="yes">
            <name>org.mvel.Accessor</name>
            <outbound type="class" confirmed="no">java.lang.Object</outbound>
            <inbound type="feature" confirmed="yes">org.mvel.ASTNode.accessor</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.ASTNode.getAccessor()</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.ASTNode.getReducedValue(java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.ASTNode.getReducedValueAccelerated(java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.ASTNode.setAccessor(org.mvel.Accessor)</inbound>
            <inbound type="class" confirmed="yes">org.mvel.AccessorNode</inbound>
            <inbound type="class" confirmed="yes">org.mvel.ExecutableStatement</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.ExpressionCompiler._compile()</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.SetAccessor.SetAccessor(org.mvel.Accessor, org.mvel.Accessor)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.SetAccessor.rootAccessor</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.SetAccessor.setAccessor</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.SetAccessor.setValue(java.lang.Object, org.mvel.integration.VariableResolverFactory, java.lang.Object)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.ast.ContextDeepPropertyNode.accessor</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.ast.ContextDeepPropertyNode.getReducedValueAccelerated(java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.ast.ContextDeepPropertyNode.handleDynamicDeoptimization(java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.ast.DeepAssignmentNode.DeepAssignmentNode(char[], int, int, java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.ast.DeepAssignmentNode.getReducedValueAccelerated(java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.ast.DeepAssignmentNode.statement</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.ast.InlineCollectionNode.getReducedValue(java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.ast.InlineCollectionNode.getReducedValueAccelerated(java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.ast.LiteralDeepPropertyNode.getReducedValueAccelerated(java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory)</inbound>
            <inbound type="class" confirmed="yes">org.mvel.ast.NewObjectNode$NewObjectArray</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.ast.NewObjectNode.getNewObjectOptimizer()</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.ast.NewObjectNode.getReducedValueAccelerated(java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.ast.NewObjectNode.newObjectOptimizer</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.ast.ReturnNode.ReturnNode(char[], int)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.ast.ReturnNode.accessor</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.ast.ReturnNode.getReducedValueAccelerated(java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.ast.ThisValDeepPropertyNode.accessor</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.ast.ThisValDeepPropertyNode.getReducedValueAccelerated(java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.ast.Union.accessor</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.ast.Union.getReducedValueAccelerated(java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.ast.VariableDeepPropertyNode.accessor</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.ast.VariableDeepPropertyNode.getReducedValueAccelerated(java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory)</inbound>
            <inbound type="class" confirmed="yes">org.mvel.ast.cache.CachedListAccessor</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.optimizers.AccessorOptimizer.optimizeAccessor(char[], java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory, boolean)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.optimizers.AccessorOptimizer.optimizeCollection(char[], java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.optimizers.AccessorOptimizer.optimizeFold(char[], java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.optimizers.AccessorOptimizer.optimizeObjectCreation(char[], java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.optimizers.OptimizerHook.generateAccessor(org.mvel.optimizers.AccessorOptimizer)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.asm.ASMAccessorOptimizer._initializeAccessor()</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.asm.ASMAccessorOptimizer.compileAccessor()</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.asm.ASMAccessorOptimizer.optimizeAccessor(char[], java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory, boolean)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.asm.ASMAccessorOptimizer.optimizeCollection(char[], java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.asm.ASMAccessorOptimizer.optimizeFold(char[], java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.asm.ASMAccessorOptimizer.optimizeObjectCreation(char[], java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory)</inbound>
            <inbound type="class" confirmed="yes">org.mvel.optimizers.impl.refl.Fold</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.refl.Fold.Fold(char[], org.mvel.Accessor)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.refl.Fold.collection</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.refl.Fold.getValue(java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.refl.Fold.propAccessor</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.refl.ReflectiveAccessorOptimizer._getAccessor(java.lang.Object)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.refl.ReflectiveAccessorOptimizer.compileConstructor(char[], java.lang.Object, org.mvel.integration.VariableResolverFactory)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.refl.ReflectiveAccessorOptimizer.compileGetChain()</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.refl.ReflectiveAccessorOptimizer.get(java.lang.String, java.lang.Object)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.refl.ReflectiveAccessorOptimizer.main(java.lang.String[])</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.refl.ReflectiveAccessorOptimizer.optimizeAccessor(char[], java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory, boolean)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.refl.ReflectiveAccessorOptimizer.optimizeCollection(char[], java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.refl.ReflectiveAccessorOptimizer.optimizeFold(char[], java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.refl.ReflectiveAccessorOptimizer.optimizeObjectCreation(char[], java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.refl.ReflectiveAccessorOptimizer.optimizeSetAccessor(char[], java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory, boolean, java.lang.Object)</inbound>
            <inbound type="class" confirmed="yes">org.mvel.optimizers.impl.refl.Union</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.refl.Union.Union(org.mvel.Accessor, char[])</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.refl.Union.accessor</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.refl.Union.getValue(java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.refl.Union.nextAccessor</inbound>
            <inbound type="class" confirmed="yes">org.mvel.optimizers.impl.refl.collection.ArrayCreator</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.refl.collection.ArrayCreator.ArrayCreator(org.mvel.Accessor[])</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.refl.collection.ArrayCreator.getValue(java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.refl.collection.ArrayCreator.template</inbound>
            <inbound type="class" confirmed="yes">org.mvel.optimizers.impl.refl.collection.ExprValueAccessor</inbound>
            <inbound type="class" confirmed="yes">org.mvel.optimizers.impl.refl.collection.ListCreator</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.refl.collection.ListCreator.ListCreator(org.mvel.Accessor[])</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.refl.collection.ListCreator.getValue(java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.refl.collection.ListCreator.values</inbound>
            <inbound type="class" confirmed="yes">org.mvel.optimizers.impl.refl.collection.MapCreator</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.refl.collection.MapCreator.MapCreator(org.mvel.Accessor[], org.mvel.Accessor[])</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.refl.collection.MapCreator.getValue(java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.refl.collection.MapCreator.keys</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.refl.collection.MapCreator.vals</inbound>
            <feature confirmed="yes">
                <name>org.mvel.Accessor.getValue(java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory)</name>
                <outbound type="class" confirmed="no">java.lang.Object</outbound>
                <outbound type="class" confirmed="yes">org.mvel.integration.VariableResolverFactory</outbound>
                <inbound type="feature" confirmed="yes">org.mvel.ASTNode.getReducedValueAccelerated(java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.SetAccessor.setValue(java.lang.Object, org.mvel.integration.VariableResolverFactory, java.lang.Object)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.ast.ContextDeepPropertyNode.getReducedValueAccelerated(java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.ast.DeepAssignmentNode.getReducedValueAccelerated(java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.ast.InlineCollectionNode.getReducedValue(java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.ast.InlineCollectionNode.getReducedValueAccelerated(java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.ast.LiteralDeepPropertyNode.getReducedValueAccelerated(java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.ast.NewObjectNode.getReducedValueAccelerated(java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.ast.ReturnNode.getReducedValueAccelerated(java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.ast.ThisValDeepPropertyNode.getReducedValueAccelerated(java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.ast.Union.getReducedValueAccelerated(java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.ast.VariableDeepPropertyNode.getReducedValueAccelerated(java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.asm.ASMAccessorOptimizer.getMethod(java.lang.Object, java.lang.String)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.refl.Fold.getValue(java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.refl.ReflectiveAccessorOptimizer.get(java.lang.String, java.lang.Object)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.refl.ReflectiveAccessorOptimizer.getMethod(java.lang.Object, java.lang.String)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.refl.ReflectiveAccessorOptimizer.optimizeFold(char[], java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.refl.Union.getValue(java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.refl.collection.ArrayCreator.getValue(java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.refl.collection.ListCreator.getValue(java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.refl.collection.MapCreator.getValue(java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.Accessor.setValue(java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory, java.lang.Object)</name>
                <outbound type="class" confirmed="no">java.lang.Object</outbound>
                <outbound type="class" confirmed="yes">org.mvel.integration.VariableResolverFactory</outbound>
                <inbound type="feature" confirmed="yes">org.mvel.SetAccessor.setValue(java.lang.Object, org.mvel.integration.VariableResolverFactory, java.lang.Object)</inbound>
            </feature>
        </class>
        <class confirmed="yes">
            <name>org.mvel.AccessorNode</name>
            <outbound type="class" confirmed="no">java.io.Serializable</outbound>
            <outbound type="class" confirmed="no">java.lang.Object</outbound>
            <outbound type="class" confirmed="yes">org.mvel.Accessor</outbound>
            <inbound type="class" confirmed="yes">org.mvel.optimizers.impl.refl.ArrayAccessor</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.refl.ArrayAccessor.getNextNode()</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.refl.ArrayAccessor.getValue(java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.refl.ArrayAccessor.nextNode</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.refl.ArrayAccessor.setNextNode(org.mvel.AccessorNode)</inbound>
            <inbound type="class" confirmed="yes">org.mvel.optimizers.impl.refl.ArrayAccessorNest</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.refl.ArrayAccessorNest.getNextNode()</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.refl.ArrayAccessorNest.getValue(java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.refl.ArrayAccessorNest.nextNode</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.refl.ArrayAccessorNest.setNextNode(org.mvel.AccessorNode)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.refl.ArrayLength.getValue(java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory)</inbound>
            <inbound type="class" confirmed="yes">org.mvel.optimizers.impl.refl.BaseAccessor</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.refl.BaseAccessor.getNextNode()</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.refl.BaseAccessor.nextNode</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.refl.BaseAccessor.setNextNode(org.mvel.AccessorNode)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.refl.ConstructorAccessor.getValue(java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory)</inbound>
            <inbound type="class" confirmed="yes">org.mvel.optimizers.impl.refl.DynamicFieldAccessor</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.refl.DynamicFieldAccessor.getNextNode()</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.refl.DynamicFieldAccessor.getValue(java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.refl.DynamicFieldAccessor.nextNode</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.refl.DynamicFieldAccessor.setNextNode(org.mvel.AccessorNode)</inbound>
            <inbound type="class" confirmed="yes">org.mvel.optimizers.impl.refl.DynamicSetterAccessor</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.refl.DynamicSetterAccessor.getNextNode()</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.refl.DynamicSetterAccessor.nextNode</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.refl.DynamicSetterAccessor.setNextNode(org.mvel.AccessorNode)</inbound>
            <inbound type="class" confirmed="yes">org.mvel.optimizers.impl.refl.FieldAccessor</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.refl.FieldAccessor.getNextNode()</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.refl.FieldAccessor.getValue(java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.refl.FieldAccessor.nextNode</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.refl.FieldAccessor.setNextNode(org.mvel.AccessorNode)</inbound>
            <inbound type="class" confirmed="yes">org.mvel.optimizers.impl.refl.GetterAccessor</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.refl.GetterAccessor.getNextNode()</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.refl.GetterAccessor.getValue(java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.refl.GetterAccessor.nextNode</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.refl.GetterAccessor.setNextNode(org.mvel.AccessorNode)</inbound>
            <inbound type="class" confirmed="yes">org.mvel.optimizers.impl.refl.IndexedCharSeqAccessor</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.refl.IndexedCharSeqAccessor.getNextNode()</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.refl.IndexedCharSeqAccessor.getValue(java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.refl.IndexedCharSeqAccessor.nextNode</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.refl.IndexedCharSeqAccessor.setNextNode(org.mvel.AccessorNode)</inbound>
            <inbound type="class" confirmed="yes">org.mvel.optimizers.impl.refl.IndexedCharSeqAccessorNest</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.refl.IndexedCharSeqAccessorNest.getNextNode()</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.refl.IndexedCharSeqAccessorNest.getValue(java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.refl.IndexedCharSeqAccessorNest.nextNode</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.refl.IndexedCharSeqAccessorNest.setNextNode(org.mvel.AccessorNode)</inbound>
            <inbound type="class" confirmed="yes">org.mvel.optimizers.impl.refl.ListAccessor</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.refl.ListAccessor.getNextNode()</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.refl.ListAccessor.getValue(java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.refl.ListAccessor.nextNode</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.refl.ListAccessor.setNextNode(org.mvel.AccessorNode)</inbound>
            <inbound type="class" confirmed="yes">org.mvel.optimizers.impl.refl.ListAccessorNest</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.refl.ListAccessorNest.getNextNode()</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.refl.ListAccessorNest.getValue(java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.refl.ListAccessorNest.nextNode</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.refl.ListAccessorNest.setNextNode(org.mvel.AccessorNode)</inbound>
            <inbound type="class" confirmed="yes">org.mvel.optimizers.impl.refl.MapAccessor</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.refl.MapAccessor.getNextNode()</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.refl.MapAccessor.getValue(java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.refl.MapAccessor.nextNode</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.refl.MapAccessor.setNextNode(org.mvel.AccessorNode)</inbound>
            <inbound type="class" confirmed="yes">org.mvel.optimizers.impl.refl.MapAccessorNest</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.refl.MapAccessorNest.getNextNode()</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.refl.MapAccessorNest.getValue(java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.refl.MapAccessorNest.nextNode</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.refl.MapAccessorNest.setNextNode(org.mvel.AccessorNode)</inbound>
            <inbound type="class" confirmed="yes">org.mvel.optimizers.impl.refl.MethodAccessor</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.refl.MethodAccessor.getNextNode()</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.refl.MethodAccessor.getValue(java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.refl.MethodAccessor.nextNode</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.refl.MethodAccessor.setNextNode(org.mvel.AccessorNode)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.refl.ReflectiveAccessorOptimizer.addAccessorNode(org.mvel.AccessorNode)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.refl.ReflectiveAccessorOptimizer.compileConstructor(char[], java.lang.Object, org.mvel.integration.VariableResolverFactory)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.refl.ReflectiveAccessorOptimizer.compileGetChain()</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.refl.ReflectiveAccessorOptimizer.currNode</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.refl.ReflectiveAccessorOptimizer.getBeanProperty(java.lang.Object, java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.refl.ReflectiveAccessorOptimizer.getCollectionProperty(java.lang.Object, java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.refl.ReflectiveAccessorOptimizer.getMethod(java.lang.Object, java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.refl.ReflectiveAccessorOptimizer.getRootNode()</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.refl.ReflectiveAccessorOptimizer.getValue(java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.refl.ReflectiveAccessorOptimizer.optimizeAccessor(char[], java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory, boolean)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.refl.ReflectiveAccessorOptimizer.optimizeObjectCreation(char[], java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.refl.ReflectiveAccessorOptimizer.optimizeSetAccessor(char[], java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory, boolean, java.lang.Object)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.refl.ReflectiveAccessorOptimizer.rootNode</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.refl.ReflectiveAccessorOptimizer.setRootNode(org.mvel.AccessorNode)</inbound>
            <inbound type="class" confirmed="yes">org.mvel.optimizers.impl.refl.SetterAccessor</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.refl.SetterAccessor.getNextNode()</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.refl.SetterAccessor.nextNode</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.refl.SetterAccessor.setNextNode(org.mvel.AccessorNode)</inbound>
            <inbound type="class" confirmed="yes">org.mvel.optimizers.impl.refl.StaticReferenceAccessor</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.refl.StaticReferenceAccessor.getNextNode()</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.refl.StaticReferenceAccessor.getValue(java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.refl.StaticReferenceAccessor.nextNode</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.refl.StaticReferenceAccessor.setNextNode(org.mvel.AccessorNode)</inbound>
            <inbound type="class" confirmed="yes">org.mvel.optimizers.impl.refl.StaticVarAccessor</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.refl.StaticVarAccessor.getNextNode()</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.refl.StaticVarAccessor.getValue(java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.refl.StaticVarAccessor.nextNode</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.refl.StaticVarAccessor.setNextNode(org.mvel.AccessorNode)</inbound>
            <inbound type="class" confirmed="yes">org.mvel.optimizers.impl.refl.ThisValueAccessor</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.refl.ThisValueAccessor.getNextNode()</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.refl.ThisValueAccessor.getValue(java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.refl.ThisValueAccessor.nextNode</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.refl.ThisValueAccessor.setNextNode(org.mvel.AccessorNode)</inbound>
            <inbound type="class" confirmed="yes">org.mvel.optimizers.impl.refl.VariableAccessor</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.refl.VariableAccessor.getNextNode()</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.refl.VariableAccessor.getValue(java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.refl.VariableAccessor.nextNode</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.refl.VariableAccessor.setNextNode(org.mvel.AccessorNode)</inbound>
            <feature confirmed="yes">
                <name>org.mvel.AccessorNode.getNextNode()</name>
            </feature>
            <feature confirmed="no">
                <name>org.mvel.AccessorNode.getValue(java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory)</name>
                <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.refl.ArrayAccessor.getValue(java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.refl.ArrayAccessorNest.getValue(java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.refl.ArrayLength.getValue(java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.refl.ConstructorAccessor.getValue(java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.refl.DynamicFieldAccessor.getValue(java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.refl.FieldAccessor.getValue(java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.refl.GetterAccessor.getValue(java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.refl.IndexedCharSeqAccessor.getValue(java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.refl.IndexedCharSeqAccessorNest.getValue(java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.refl.ListAccessor.getValue(java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.refl.ListAccessorNest.getValue(java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.refl.MapAccessor.getValue(java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.refl.MapAccessorNest.getValue(java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.refl.MethodAccessor.getValue(java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.refl.ReflectiveAccessorOptimizer.getValue(java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.refl.StaticReferenceAccessor.getValue(java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.refl.StaticVarAccessor.getValue(java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.refl.ThisValueAccessor.getValue(java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.refl.VariableAccessor.getValue(java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.AccessorNode.setNextNode(org.mvel.AccessorNode)</name>
                <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.refl.ReflectiveAccessorOptimizer.addAccessorNode(org.mvel.AccessorNode)</inbound>
            </feature>
        </class>
        <class confirmed="no">
            <name>org.mvel.Accessor[]</name>
            <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.asm.ASMAccessorOptimizer.getMethod(java.lang.Object, java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.refl.ReflectiveAccessorOptimizer.getMethod(java.lang.Object, java.lang.String)</inbound>
        </class>
        <class confirmed="yes">
            <name>org.mvel.BlankLiteral</name>
            <outbound type="class" confirmed="no">java.io.Serializable</outbound>
            <outbound type="class" confirmed="no">java.lang.Object</outbound>
            <inbound type="feature" confirmed="yes">org.mvel.AbstractParser.static {}</inbound>
            <feature confirmed="yes">
                <name>org.mvel.BlankLiteral.BlankLiteral()</name>
                <outbound type="feature" confirmed="no">java.lang.Object.Object()</outbound>
                <inbound type="feature" confirmed="yes">org.mvel.BlankLiteral.static {}</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.BlankLiteral.INSTANCE</name>
                <inbound type="feature" confirmed="yes">org.mvel.AbstractParser.static {}</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.BlankLiteral.static {}</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.BlankLiteral.equals(java.lang.Object)</name>
                <outbound type="class" confirmed="no">java.lang.Class</outbound>
                <outbound type="feature" confirmed="no">java.lang.Class.isArray()</outbound>
                <outbound type="class" confirmed="no">java.lang.Object</outbound>
                <outbound type="feature" confirmed="no">java.lang.Object.getClass()</outbound>
                <outbound type="class" confirmed="no">java.lang.Object[]</outbound>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="feature" confirmed="no">java.lang.String.equals(java.lang.Object)</outbound>
                <outbound type="feature" confirmed="no">java.lang.String.valueOf(java.lang.Object)</outbound>
                <outbound type="class" confirmed="no">java.util.Collection</outbound>
                <outbound type="feature" confirmed="no">java.util.Collection.size()</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.util.PropertyTools.isNumeric(java.lang.Object)</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.BlankLiteral.static {}</name>
                <outbound type="feature" confirmed="yes">org.mvel.BlankLiteral.BlankLiteral()</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.BlankLiteral.INSTANCE</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.BlankLiteral.toString()</name>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
            </feature>
        </class>
        <class confirmed="yes">
            <name>org.mvel.CompileException</name>
            <outbound type="class" confirmed="no">java.lang.RuntimeException</outbound>
            <inbound type="feature" confirmed="yes">org.mvel.AbstractParser.nextToken()</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.PropertyAccessor.get()</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.TemplateInterpreter.execute(java.lang.Object, java.util.Map, org.mvel.TemplateRegistry)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.ast.PropertyASTNode.initializePropertyNode(java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.asm.ASMAccessorOptimizer.compileAccessor()</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.refl.ReflectiveAccessorOptimizer.compileGetChain()</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.refl.ReflectiveAccessorOptimizer.optimizeObjectCreation(char[], java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory)</inbound>
            <feature confirmed="yes">
                <name>org.mvel.CompileException.CompileException()</name>
                <outbound type="feature" confirmed="no">java.lang.RuntimeException.RuntimeException()</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.CompileException.CompileException(java.lang.String)</name>
                <outbound type="feature" confirmed="no">java.lang.RuntimeException.RuntimeException(java.lang.String)</outbound>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <inbound type="feature" confirmed="yes">org.mvel.ASTNode.getReducedValue(java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.ASTNode.setName(char[])</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.ASTNode.valRet(java.lang.Object)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.AbstractParser.nextToken()</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.ExpressionCompiler._compile()</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.ExpressionCompiler.verify(org.mvel.ParserContext, org.mvel.ASTNode)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.MVELInterpretedRuntime.parseAndExecuteInterpreted()</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.MVELRuntime.execute(boolean, org.mvel.CompiledExpression, java.lang.Object, org.mvel.integration.VariableResolverFactory)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.MVELTemplateRegistry.registerTemplate(java.io.Reader)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.ParserContext.checkForDynamicImport(java.lang.String)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.TemplateCompiler.compileExpression()</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.TemplateCompiler.structuredCaptureArray(int)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.TemplateInterpreter.execute(java.lang.Object, java.util.Map, org.mvel.TemplateRegistry)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.TemplateInterpreter.parse(java.io.File, java.lang.Object, java.util.Map, org.mvel.TemplateRegistry)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.ast.AssertNode.getReducedValue(java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.ast.AssertNode.getReducedValueAccelerated(java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.ast.ForEachNode.getReducedValue(java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.ast.ForEachNode.getReducedValueAccelerated(java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.ast.ForEachNode.handleCond(char[])</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.ast.ImportNode.ImportNode(char[])</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.ast.NewObjectNode.getReducedValue(java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.ast.PropertyASTNode.initializePropertyNode(java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.ast.StaticImportNode.StaticImportNode(char[], int)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.integration.impl.MapVariableResolver.setValue(java.lang.Object)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.integration.impl.MapVariableResolverFactory.createVariable(java.lang.String, java.lang.Object, java.lang.Class)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.math.IEEEFloatingPointMath.doOperationNonNumeric(java.lang.Object, int, java.lang.Object)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.math.JDK14CompatabilityMath.doOperationNonNumeric(java.lang.Object, int, java.lang.Object)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.asm.ASMAccessorOptimizer.getCollectionProperty(java.lang.Object, java.lang.String)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.asm.ASMAccessorOptimizer.getMethod(java.lang.Object, java.lang.String)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.asm.ASMAccessorOptimizer.optimizeObjectCreation(char[], java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.refl.ReflectiveAccessorOptimizer.compileConstructor(char[], java.lang.Object, org.mvel.integration.VariableResolverFactory)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.refl.ReflectiveAccessorOptimizer.getCollectionProperty(java.lang.Object, java.lang.String)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.refl.ReflectiveAccessorOptimizer.optimizeFold(char[], java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.refl.ThisValueAccessor.setValue(java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory, java.lang.Object)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.refl.VariableAccessor.getValue(java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.util.ParseTools.checkNameSafety(java.lang.String)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.util.ParseTools.increment(java.lang.Object)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.CompileException.CompileException(java.lang.String, char[], int)</name>
                <outbound type="class" confirmed="no">java.lang.CharSequence</outbound>
                <outbound type="class" confirmed="no">java.lang.Object</outbound>
                <outbound type="feature" confirmed="no">java.lang.RuntimeException.RuntimeException(java.lang.String)</outbound>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="class" confirmed="no">java.lang.StringBuffer</outbound>
                <outbound type="feature" confirmed="no">java.lang.StringBuffer.StringBuffer(java.lang.String)</outbound>
                <outbound type="feature" confirmed="no">java.lang.StringBuffer.append(java.lang.Object)</outbound>
                <outbound type="feature" confirmed="no">java.lang.StringBuffer.append(java.lang.String)</outbound>
                <outbound type="feature" confirmed="no">java.lang.StringBuffer.toString()</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.CompileException.cursor</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.CompileException.expr</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.CompileException.showCodeNearError(char[], int)</outbound>
                <inbound type="feature" confirmed="yes">org.mvel.AbstractParser._captureBlock(org.mvel.ASTNode, char[], boolean, int)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.AbstractParser.captureToEOT()</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.AbstractParser.nextToken()</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.ast.NewObjectNode.updateClassName(int)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.ast.WithNode.compileWithExpressions()</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.util.ParseTools.balancedCapture(char[], int, char)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.util.ParseTools.balancedCaptureWithLineAccounting(char[], int, char)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.util.ParseTools.captureStringLiteral(char, char[], int, int)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.CompileException.CompileException(java.lang.String, char[], int, boolean)</name>
                <outbound type="class" confirmed="no">java.lang.CharSequence</outbound>
                <outbound type="class" confirmed="no">java.lang.Object</outbound>
                <outbound type="feature" confirmed="no">java.lang.RuntimeException.RuntimeException(java.lang.String)</outbound>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="class" confirmed="no">java.lang.StringBuffer</outbound>
                <outbound type="feature" confirmed="no">java.lang.StringBuffer.StringBuffer(java.lang.String)</outbound>
                <outbound type="feature" confirmed="no">java.lang.StringBuffer.append(java.lang.Object)</outbound>
                <outbound type="feature" confirmed="no">java.lang.StringBuffer.append(java.lang.String)</outbound>
                <outbound type="feature" confirmed="no">java.lang.StringBuffer.toString()</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.CompileException.cursor</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.CompileException.expr</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.CompileException.showCodeNearError(char[], int)</outbound>
                <inbound type="feature" confirmed="yes">org.mvel.AbstractParser.nextToken()</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.CompileException.CompileException(java.lang.String, char[], int, java.lang.Exception)</name>
                <outbound type="class" confirmed="no">java.lang.CharSequence</outbound>
                <outbound type="class" confirmed="no">java.lang.Exception</outbound>
                <outbound type="class" confirmed="no">java.lang.Object</outbound>
                <outbound type="feature" confirmed="no">java.lang.RuntimeException.RuntimeException(java.lang.String, java.lang.Throwable)</outbound>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="class" confirmed="no">java.lang.StringBuffer</outbound>
                <outbound type="feature" confirmed="no">java.lang.StringBuffer.StringBuffer(java.lang.String)</outbound>
                <outbound type="feature" confirmed="no">java.lang.StringBuffer.append(java.lang.Object)</outbound>
                <outbound type="feature" confirmed="no">java.lang.StringBuffer.append(java.lang.String)</outbound>
                <outbound type="feature" confirmed="no">java.lang.StringBuffer.toString()</outbound>
                <outbound type="class" confirmed="no">java.lang.Throwable</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.CompileException.cursor</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.CompileException.expr</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.CompileException.showCodeNearError(char[], int)</outbound>
                <inbound type="feature" confirmed="yes">org.mvel.AbstractParser.nextToken()</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.AbstractParser.reduce()</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.CompileException.CompileException(java.lang.String, java.lang.Throwable)</name>
                <outbound type="feature" confirmed="no">java.lang.RuntimeException.RuntimeException(java.lang.String, java.lang.Throwable)</outbound>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="class" confirmed="no">java.lang.Throwable</outbound>
                <inbound type="feature" confirmed="yes">org.mvel.AbstractParser.reduce()</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.ExpressionCompiler._compile()</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.MVELRuntime.execute(boolean, org.mvel.CompiledExpression, java.lang.Object, org.mvel.integration.VariableResolverFactory)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.PropertyVerifier.getBeanProperty(java.lang.Class, java.lang.String)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.TemplateInterpreter.execute(java.lang.Object, java.util.Map, org.mvel.TemplateRegistry)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.ast.NewObjectNode.getReducedValueAccelerated(java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.ast.StaticImportNode.StaticImportNode(char[], int)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.optimizers.OptimizerFactory.getAccessorCompiler(java.lang.String)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.optimizers.OptimizerFactory.getDefaultAccessorCompiler()</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.optimizers.OptimizerFactory.getThreadAccessorOptimizer()</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.optimizers.OptimizerFactory.setDefaultOptimizer(java.lang.String)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.asm.ASMAccessorOptimizer.compileAccessor()</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.refl.ConstructorAccessor.getValue(java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.refl.DynamicFieldAccessor.getValue(java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.refl.DynamicFieldAccessor.setValue(java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory, java.lang.Object)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.refl.DynamicSetterAccessor.setValue(java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory, java.lang.Object)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.refl.FieldAccessor.getValue(java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.refl.FieldAccessor.setValue(java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory, java.lang.Object)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.refl.GetterAccessor.getValue(java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.refl.MethodAccessor.getValue(java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.refl.ReflectiveAccessorOptimizer.compileGetChain()</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.refl.ReflectiveAccessorOptimizer.optimizeObjectCreation(char[], java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.refl.SetterAccessor.setValue(java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory, java.lang.Object)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.refl.StaticVarAccessor.setValue(java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory, java.lang.Object)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.util.ParseTools.findClass(org.mvel.integration.VariableResolverFactory, java.lang.String)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.CompileException.CompileException(java.lang.String, java.util.List)</name>
                <outbound type="class" confirmed="no">java.io.PrintStream</outbound>
                <outbound type="feature" confirmed="no">java.io.PrintStream.flush()</outbound>
                <outbound type="feature" confirmed="no">java.io.PrintStream.println(java.lang.String)</outbound>
                <outbound type="class" confirmed="no">java.lang.Object</outbound>
                <outbound type="feature" confirmed="no">java.lang.RuntimeException.RuntimeException(java.lang.String)</outbound>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="class" confirmed="no">java.lang.StringBuffer</outbound>
                <outbound type="feature" confirmed="no">java.lang.StringBuffer.StringBuffer(java.lang.String)</outbound>
                <outbound type="feature" confirmed="no">java.lang.StringBuffer.append(java.lang.String)</outbound>
                <outbound type="feature" confirmed="no">java.lang.StringBuffer.toString()</outbound>
                <outbound type="feature" confirmed="no">java.lang.System.err</outbound>
                <outbound type="class" confirmed="no">java.util.Iterator</outbound>
                <outbound type="feature" confirmed="no">java.util.Iterator.hasNext()</outbound>
                <outbound type="feature" confirmed="no">java.util.Iterator.next()</outbound>
                <outbound type="class" confirmed="no">java.util.List</outbound>
                <outbound type="feature" confirmed="no">java.util.List.iterator()</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.CompileException.errors</outbound>
                <outbound type="class" confirmed="yes">org.mvel.ErrorDetail</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.ErrorDetail.toString()</outbound>
                <inbound type="feature" confirmed="yes">org.mvel.ExpressionCompiler.compile(org.mvel.ParserContext)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.CompileException.CompileException(java.lang.Throwable)</name>
                <outbound type="feature" confirmed="no">java.lang.RuntimeException.RuntimeException(java.lang.Throwable)</outbound>
                <outbound type="class" confirmed="no">java.lang.Throwable</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.CompileException.cursor</name>
                <inbound type="feature" confirmed="yes">org.mvel.CompileException.CompileException(java.lang.String, char[], int)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.CompileException.CompileException(java.lang.String, char[], int, boolean)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.CompileException.CompileException(java.lang.String, char[], int, java.lang.Exception)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.CompileException.getCursor()</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.CompileException.errors</name>
                <outbound type="class" confirmed="no">java.util.List</outbound>
                <inbound type="feature" confirmed="yes">org.mvel.CompileException.CompileException(java.lang.String, java.util.List)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.CompileException.getErrors()</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.CompileException.setErrors(java.util.List)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.CompileException.expr</name>
                <inbound type="feature" confirmed="yes">org.mvel.CompileException.CompileException(java.lang.String, char[], int)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.CompileException.CompileException(java.lang.String, char[], int, boolean)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.CompileException.CompileException(java.lang.String, char[], int, java.lang.Exception)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.CompileException.getExpr()</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.CompileException.getCursor()</name>
                <outbound type="feature" confirmed="yes">org.mvel.CompileException.cursor</outbound>
                <inbound type="feature" confirmed="yes">org.mvel.AbstractParser.nextToken()</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.CompileException.getErrors()</name>
                <outbound type="feature" confirmed="no">java.util.ArrayList.ArrayList(int)</outbound>
                <outbound type="class" confirmed="no">java.util.List</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.CompileException.errors</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.CompileException.getExpr()</name>
                <outbound type="feature" confirmed="yes">org.mvel.CompileException.expr</outbound>
            </feature>
            <feature confirmed="no">
                <name>org.mvel.CompileException.getMessage()</name>
                <inbound type="feature" confirmed="yes">org.mvel.AbstractParser.nextToken()</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.CompileException.setErrors(java.util.List)</name>
                <outbound type="class" confirmed="no">java.util.List</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.CompileException.errors</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.CompileException.showCodeNearError(char[], int)</name>
                <outbound type="class" confirmed="no">java.lang.CharSequence</outbound>
                <outbound type="feature" confirmed="no">java.lang.Character.isWhitespace(char)</outbound>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="feature" confirmed="no">java.lang.String.copyValueOf(char[], int, int)</outbound>
                <inbound type="feature" confirmed="yes">org.mvel.CompileException.CompileException(java.lang.String, char[], int)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.CompileException.CompileException(java.lang.String, char[], int, boolean)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.CompileException.CompileException(java.lang.String, char[], int, java.lang.Exception)</inbound>
            </feature>
        </class>
        <class confirmed="yes">
            <name>org.mvel.CompiledExpression</name>
            <outbound type="class" confirmed="no">java.io.Serializable</outbound>
            <outbound type="class" confirmed="no">java.lang.Object</outbound>
            <outbound type="class" confirmed="yes">org.mvel.ExecutableStatement</outbound>
            <inbound type="feature" confirmed="yes">org.mvel.ExpressionCompiler._compile()</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.ExpressionCompiler.compile()</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.ExpressionCompiler.compile(org.mvel.ParserContext)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.ExpressionCompiler.verify(org.mvel.ParserContext, org.mvel.ASTNode)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.MVEL.compileExpression(char[], java.util.Map, java.util.Map, java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.MVEL.compileExpression(java.lang.String, java.util.Map, java.util.Map, java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.MVEL.executeDebugger(org.mvel.CompiledExpression, java.lang.Object, org.mvel.integration.VariableResolverFactory)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.MVELRuntime.execute(boolean, org.mvel.CompiledExpression, java.lang.Object, org.mvel.integration.VariableResolverFactory)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.PropertyVerifier.getMethod(java.lang.Class, java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.debug.DebugTools.decompile(java.io.Serializable)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.debug.DebugTools.decompile(org.mvel.CompiledExpression)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.debug.DebugTools.decompile(org.mvel.CompiledExpression, boolean, org.mvel.debug.DebugTools$DecompileContext)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.debug.DebugTools.determineType(java.lang.String, org.mvel.CompiledExpression)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.debug.DebuggerContext.checkBreak(org.mvel.ast.LineLabel, org.mvel.integration.VariableResolverFactory, org.mvel.CompiledExpression)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.util.ParseTools.optimizeTree(org.mvel.CompiledExpression)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.util.ParseTools.subCompileExpression(char[])</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.util.ParseTools.subCompileExpression(java.lang.String)</inbound>
            <feature confirmed="yes">
                <name>org.mvel.CompiledExpression.CompiledExpression(org.mvel.ASTIterator, java.lang.String, boolean)</name>
                <outbound type="feature" confirmed="no">java.lang.Object.Object()</outbound>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="class" confirmed="yes">org.mvel.ASTIterator</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.CompiledExpression.importInjectionRequired</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.CompiledExpression.literalOnly</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.CompiledExpression.optimized</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.CompiledExpression.returnBigDecimal</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.CompiledExpression.sourceName</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.CompiledExpression.tokens</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.CompiledExpression.CompiledExpression(org.mvel.ASTIterator, java.lang.String, java.lang.Class, org.mvel.ParserContext, boolean)</name>
                <outbound type="class" confirmed="no">java.lang.Class</outbound>
                <outbound type="feature" confirmed="no">java.lang.Object.Object()</outbound>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="class" confirmed="yes">org.mvel.ASTIterator</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.CompiledExpression.importInjectionRequired</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.CompiledExpression.knownEgressType</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.CompiledExpression.literalOnly</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.CompiledExpression.optimized</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.CompiledExpression.returnBigDecimal</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.CompiledExpression.setParserContext(org.mvel.ParserContext)</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.CompiledExpression.sourceName</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.CompiledExpression.tokens</outbound>
                <outbound type="class" confirmed="yes">org.mvel.ParserContext</outbound>
                <inbound type="feature" confirmed="yes">org.mvel.ExpressionCompiler._compile()</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.CompiledExpression.accessorOptimizer</name>
                <outbound type="class" confirmed="no">java.lang.Class</outbound>
                <inbound type="feature" confirmed="yes">org.mvel.CompiledExpression.getAccessorOptimizer()</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.CompiledExpression.setAccessorOptimizer(java.lang.Class)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.CompiledExpression.setupOptimizers()</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.CompiledExpression.computeTypeConversionRule()</name>
                <outbound type="class" confirmed="no">java.lang.Class</outbound>
                <outbound type="feature" confirmed="no">java.lang.Class.isAssignableFrom(java.lang.Class)</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.CompiledExpression.convertableIngressEgress</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.CompiledExpression.knownEgressType</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.CompiledExpression.knownIngressType</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.CompiledExpression.convertableIngressEgress</name>
                <inbound type="feature" confirmed="yes">org.mvel.CompiledExpression.computeTypeConversionRule()</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.CompiledExpression.isConvertableIngressEgress()</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.CompiledExpression.setConvertableIngressEgress(boolean)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.CompiledExpression.getAccessorOptimizer()</name>
                <outbound type="class" confirmed="no">java.lang.Class</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.CompiledExpression.accessorOptimizer</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.CompiledExpression.getDirectValue(java.lang.Object, org.mvel.integration.VariableResolverFactory)</name>
                <outbound type="class" confirmed="no">java.lang.Object</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.MVELRuntime.execute(boolean, org.mvel.CompiledExpression, java.lang.Object, org.mvel.integration.VariableResolverFactory)</outbound>
                <outbound type="class" confirmed="yes">org.mvel.integration.VariableResolverFactory</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.CompiledExpression.getKnownEgressType()</name>
                <outbound type="class" confirmed="no">java.lang.Class</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.CompiledExpression.knownEgressType</outbound>
                <inbound type="feature" confirmed="yes">org.mvel.util.ParseTools.optimizeTree(org.mvel.CompiledExpression)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.CompiledExpression.getKnownIngressType()</name>
                <outbound type="class" confirmed="no">java.lang.Class</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.CompiledExpression.knownIngressType</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.CompiledExpression.getParserContext()</name>
                <outbound type="feature" confirmed="yes">org.mvel.CompiledExpression.parserContext</outbound>
                <outbound type="class" confirmed="yes">org.mvel.ParserContext</outbound>
                <inbound type="feature" confirmed="yes">org.mvel.MVELRuntime.execute(boolean, org.mvel.CompiledExpression, java.lang.Object, org.mvel.integration.VariableResolverFactory)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.debug.DebuggerContext.checkBreak(org.mvel.ast.LineLabel, org.mvel.integration.VariableResolverFactory, org.mvel.CompiledExpression)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.CompiledExpression.getSourceName()</name>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.CompiledExpression.sourceName</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.CompiledExpression.getTokenIterator()</name>
                <outbound type="class" confirmed="yes">org.mvel.ASTIterator</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.CompiledExpression.tokens</outbound>
                <inbound type="feature" confirmed="yes">org.mvel.debug.DebugTools.determineType(java.lang.String, org.mvel.CompiledExpression)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.CompiledExpression.getTokens()</name>
                <outbound type="class" confirmed="yes">org.mvel.ASTIterator</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.ASTIterator.firstNode()</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.ASTIterator.size()</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.ASTLinkedList.ASTLinkedList(org.mvel.ASTNode, int)</outbound>
                <outbound type="class" confirmed="yes">org.mvel.ASTNode</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.CompiledExpression.tokens</outbound>
                <inbound type="feature" confirmed="yes">org.mvel.MVELRuntime.execute(boolean, org.mvel.CompiledExpression, java.lang.Object, org.mvel.integration.VariableResolverFactory)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.debug.DebugTools.decompile(org.mvel.CompiledExpression, boolean, org.mvel.debug.DebugTools$DecompileContext)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.util.ParseTools.optimizeTree(org.mvel.CompiledExpression)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.CompiledExpression.getValue(java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory)</name>
                <outbound type="class" confirmed="no">java.lang.Object</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.CompiledExpression.getValue(java.lang.Object, org.mvel.integration.VariableResolverFactory)</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.CompiledExpression.optimized</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.CompiledExpression.setupOptimizers()</outbound>
                <outbound type="class" confirmed="yes">org.mvel.integration.VariableResolverFactory</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.CompiledExpression.getValue(java.lang.Object, org.mvel.integration.VariableResolverFactory)</name>
                <outbound type="class" confirmed="no">java.lang.Object</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.CompiledExpression.optimized</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.CompiledExpression.returnBigDecimal</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.CompiledExpression.setupOptimizers()</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.MVELRuntime.execute(boolean, org.mvel.CompiledExpression, java.lang.Object, org.mvel.integration.VariableResolverFactory)</outbound>
                <outbound type="class" confirmed="yes">org.mvel.integration.VariableResolverFactory</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.util.ParseTools.handleParserEgress(java.lang.Object, boolean)</outbound>
                <inbound type="feature" confirmed="yes">org.mvel.CompiledExpression.getValue(java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.CompiledExpression.importInjectionRequired</name>
                <inbound type="feature" confirmed="yes">org.mvel.CompiledExpression.CompiledExpression(org.mvel.ASTIterator, java.lang.String, boolean)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.CompiledExpression.CompiledExpression(org.mvel.ASTIterator, java.lang.String, java.lang.Class, org.mvel.ParserContext, boolean)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.CompiledExpression.isImportInjectionRequired()</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.CompiledExpression.setImportInjectionRequired(boolean)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.CompiledExpression.setParserContext(org.mvel.ParserContext)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.CompiledExpression.intOptimized()</name>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.CompiledExpression.isConvertableIngressEgress()</name>
                <outbound type="feature" confirmed="yes">org.mvel.CompiledExpression.convertableIngressEgress</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.CompiledExpression.isImportInjectionRequired()</name>
                <outbound type="feature" confirmed="yes">org.mvel.CompiledExpression.importInjectionRequired</outbound>
                <inbound type="feature" confirmed="yes">org.mvel.MVELRuntime.execute(boolean, org.mvel.CompiledExpression, java.lang.Object, org.mvel.integration.VariableResolverFactory)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.CompiledExpression.isLiteralOnly()</name>
                <outbound type="feature" confirmed="yes">org.mvel.CompiledExpression.literalOnly</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.CompiledExpression.isOptimized()</name>
                <outbound type="feature" confirmed="yes">org.mvel.CompiledExpression.optimized</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.CompiledExpression.isReturnBigDecimal()</name>
                <outbound type="feature" confirmed="yes">org.mvel.CompiledExpression.returnBigDecimal</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.CompiledExpression.knownEgressType</name>
                <outbound type="class" confirmed="no">java.lang.Class</outbound>
                <inbound type="feature" confirmed="yes">org.mvel.CompiledExpression.CompiledExpression(org.mvel.ASTIterator, java.lang.String, java.lang.Class, org.mvel.ParserContext, boolean)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.CompiledExpression.computeTypeConversionRule()</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.CompiledExpression.getKnownEgressType()</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.CompiledExpression.setKnownEgressType(java.lang.Class)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.CompiledExpression.knownIngressType</name>
                <outbound type="class" confirmed="no">java.lang.Class</outbound>
                <inbound type="feature" confirmed="yes">org.mvel.CompiledExpression.computeTypeConversionRule()</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.CompiledExpression.getKnownIngressType()</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.CompiledExpression.setKnownIngressType(java.lang.Class)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.CompiledExpression.literalOnly</name>
                <inbound type="feature" confirmed="yes">org.mvel.CompiledExpression.CompiledExpression(org.mvel.ASTIterator, java.lang.String, boolean)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.CompiledExpression.CompiledExpression(org.mvel.ASTIterator, java.lang.String, java.lang.Class, org.mvel.ParserContext, boolean)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.CompiledExpression.isLiteralOnly()</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.CompiledExpression.optimized</name>
                <inbound type="feature" confirmed="yes">org.mvel.CompiledExpression.CompiledExpression(org.mvel.ASTIterator, java.lang.String, boolean)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.CompiledExpression.CompiledExpression(org.mvel.ASTIterator, java.lang.String, java.lang.Class, org.mvel.ParserContext, boolean)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.CompiledExpression.getValue(java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.CompiledExpression.getValue(java.lang.Object, org.mvel.integration.VariableResolverFactory)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.CompiledExpression.isOptimized()</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.CompiledExpression.setOptimized(boolean)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.CompiledExpression.setupOptimizers()</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.CompiledExpression.parserContext</name>
                <outbound type="class" confirmed="yes">org.mvel.ParserContext</outbound>
                <inbound type="feature" confirmed="yes">org.mvel.CompiledExpression.getParserContext()</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.CompiledExpression.setParserContext(org.mvel.ParserContext)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.CompiledExpression.returnBigDecimal</name>
                <inbound type="feature" confirmed="yes">org.mvel.CompiledExpression.CompiledExpression(org.mvel.ASTIterator, java.lang.String, boolean)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.CompiledExpression.CompiledExpression(org.mvel.ASTIterator, java.lang.String, java.lang.Class, org.mvel.ParserContext, boolean)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.CompiledExpression.getValue(java.lang.Object, org.mvel.integration.VariableResolverFactory)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.CompiledExpression.isReturnBigDecimal()</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.CompiledExpression.setReturnBigDecimal(boolean)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.CompiledExpression.setAccessorOptimizer(java.lang.Class)</name>
                <outbound type="class" confirmed="no">java.lang.Class</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.CompiledExpression.accessorOptimizer</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.CompiledExpression.setConvertableIngressEgress(boolean)</name>
                <outbound type="feature" confirmed="yes">org.mvel.CompiledExpression.convertableIngressEgress</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.CompiledExpression.setImportInjectionRequired(boolean)</name>
                <outbound type="feature" confirmed="yes">org.mvel.CompiledExpression.importInjectionRequired</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.CompiledExpression.setKnownEgressType(java.lang.Class)</name>
                <outbound type="class" confirmed="no">java.lang.Class</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.CompiledExpression.knownEgressType</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.CompiledExpression.setKnownIngressType(java.lang.Class)</name>
                <outbound type="class" confirmed="no">java.lang.Class</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.CompiledExpression.knownIngressType</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.CompiledExpression.setOptimized(boolean)</name>
                <outbound type="feature" confirmed="yes">org.mvel.CompiledExpression.optimized</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.CompiledExpression.setParserContext(org.mvel.ParserContext)</name>
                <outbound type="class" confirmed="no">java.util.Map</outbound>
                <outbound type="feature" confirmed="no">java.util.Map.size()</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.CompiledExpression.importInjectionRequired</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.CompiledExpression.parserContext</outbound>
                <outbound type="class" confirmed="yes">org.mvel.ParserContext</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.ParserContext.getImports()</outbound>
                <inbound type="feature" confirmed="yes">org.mvel.CompiledExpression.CompiledExpression(org.mvel.ASTIterator, java.lang.String, java.lang.Class, org.mvel.ParserContext, boolean)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.CompiledExpression.setReturnBigDecimal(boolean)</name>
                <outbound type="feature" confirmed="yes">org.mvel.CompiledExpression.returnBigDecimal</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.CompiledExpression.setSourceName(java.lang.String)</name>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.CompiledExpression.sourceName</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.CompiledExpression.setTokens(org.mvel.ASTIterator)</name>
                <outbound type="class" confirmed="yes">org.mvel.ASTIterator</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.CompiledExpression.tokens</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.CompiledExpression.setValue(java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory, java.lang.Object)</name>
                <outbound type="class" confirmed="no">java.lang.Object</outbound>
                <outbound type="class" confirmed="yes">org.mvel.integration.VariableResolverFactory</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.CompiledExpression.setupOptimizers()</name>
                <outbound type="class" confirmed="no">java.lang.Class</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.CompiledExpression.accessorOptimizer</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.CompiledExpression.optimized</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.optimizers.OptimizerFactory.setThreadAccessorOptimizer(java.lang.Class)</outbound>
                <inbound type="feature" confirmed="yes">org.mvel.CompiledExpression.getValue(java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.CompiledExpression.getValue(java.lang.Object, org.mvel.integration.VariableResolverFactory)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.CompiledExpression.sourceName</name>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <inbound type="feature" confirmed="yes">org.mvel.CompiledExpression.CompiledExpression(org.mvel.ASTIterator, java.lang.String, boolean)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.CompiledExpression.CompiledExpression(org.mvel.ASTIterator, java.lang.String, java.lang.Class, org.mvel.ParserContext, boolean)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.CompiledExpression.getSourceName()</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.CompiledExpression.setSourceName(java.lang.String)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.CompiledExpression.tokens</name>
                <outbound type="class" confirmed="yes">org.mvel.ASTIterator</outbound>
                <inbound type="feature" confirmed="yes">org.mvel.CompiledExpression.CompiledExpression(org.mvel.ASTIterator, java.lang.String, boolean)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.CompiledExpression.CompiledExpression(org.mvel.ASTIterator, java.lang.String, java.lang.Class, org.mvel.ParserContext, boolean)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.CompiledExpression.getTokenIterator()</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.CompiledExpression.getTokens()</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.CompiledExpression.setTokens(org.mvel.ASTIterator)</inbound>
            </feature>
        </class>
        <class confirmed="yes">
            <name>org.mvel.CompiledSetExpression</name>
            <outbound type="class" confirmed="no">java.io.Serializable</outbound>
            <outbound type="class" confirmed="no">java.lang.Object</outbound>
            <inbound type="feature" confirmed="yes">org.mvel.MVEL.executeSetExpression(java.io.Serializable, java.lang.Object, java.lang.Object)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.MVEL.executeSetExpression(java.io.Serializable, java.lang.Object, org.mvel.integration.VariableResolverFactory, java.lang.Object)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.ast.AssignmentNode.AssignmentNode(char[], int, int, java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.ast.AssignmentNode.getReducedValueAccelerated(java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.ast.AssignmentNode.setExpr</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.ast.DeepAssignmentNode.DeepAssignmentNode(char[], int, int, java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.ast.DeepAssignmentNode.getReducedValueAccelerated(java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.ast.DeepAssignmentNode.set</inbound>
            <feature confirmed="yes">
                <name>org.mvel.CompiledSetExpression.CompiledSetExpression(char[])</name>
                <outbound type="feature" confirmed="no">java.lang.Object.Object()</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.CompiledSetExpression.expression</outbound>
                <inbound type="feature" confirmed="yes">org.mvel.MVEL.compileSetExpression(char[])</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.MVEL.compileSetExpression(java.lang.String)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.CompiledSetExpression.accessor</name>
                <outbound type="class" confirmed="yes">org.mvel.SetAccessor</outbound>
                <inbound type="feature" confirmed="yes">org.mvel.CompiledSetExpression.setValue(java.lang.Object, org.mvel.integration.VariableResolverFactory, java.lang.Object)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.CompiledSetExpression.expression</name>
                <inbound type="feature" confirmed="yes">org.mvel.CompiledSetExpression.CompiledSetExpression(char[])</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.CompiledSetExpression.setValue(java.lang.Object, org.mvel.integration.VariableResolverFactory, java.lang.Object)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.CompiledSetExpression.setValue(java.lang.Object, org.mvel.integration.VariableResolverFactory, java.lang.Object)</name>
                <outbound type="class" confirmed="no">java.lang.Object</outbound>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.CompiledSetExpression.accessor</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.CompiledSetExpression.expression</outbound>
                <outbound type="class" confirmed="yes">org.mvel.SetAccessor</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.SetAccessor.setValue(java.lang.Object, org.mvel.integration.VariableResolverFactory, java.lang.Object)</outbound>
                <outbound type="class" confirmed="yes">org.mvel.integration.VariableResolverFactory</outbound>
                <outbound type="class" confirmed="yes">org.mvel.optimizers.AccessorOptimizer</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.optimizers.AccessorOptimizer.optimizeSetAccessor(char[], java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory, boolean, java.lang.Object)</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.optimizers.OptimizerFactory.getAccessorCompiler(java.lang.String)</outbound>
                <inbound type="feature" confirmed="yes">org.mvel.MVEL.executeSetExpression(java.io.Serializable, java.lang.Object, java.lang.Object)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.MVEL.executeSetExpression(java.io.Serializable, java.lang.Object, org.mvel.integration.VariableResolverFactory, java.lang.Object)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.ast.AssignmentNode.getReducedValueAccelerated(java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.ast.DeepAssignmentNode.getReducedValueAccelerated(java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory)</inbound>
            </feature>
        </class>
        <class confirmed="yes">
            <name>org.mvel.ConversionException</name>
            <outbound type="class" confirmed="yes">org.mvel.PropertyAccessException</outbound>
            <feature confirmed="yes">
                <name>org.mvel.ConversionException.ConversionException()</name>
                <outbound type="feature" confirmed="yes">org.mvel.PropertyAccessException.PropertyAccessException()</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.ConversionException.ConversionException(java.lang.String)</name>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.PropertyAccessException.PropertyAccessException(java.lang.String)</outbound>
                <inbound type="feature" confirmed="yes">org.mvel.PropertyAccessor.set(java.lang.Object)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.conversion.ArrayCH.convertFrom(java.lang.Object)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.conversion.BigDecimalCH.convertFrom(java.lang.Object)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.conversion.BigIntegerCH.convertFrom(java.lang.Object)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.conversion.BooleanCH.convertFrom(java.lang.Object)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.conversion.ByteCH.convertFrom(java.lang.Object)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.conversion.CharArrayCH.convertFrom(java.lang.Object)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.conversion.CharCH$1.convert(java.lang.Object)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.conversion.CharCH.convertFrom(java.lang.Object)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.conversion.DoubleCH.convertFrom(java.lang.Object)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.conversion.FloatCH.convertFrom(java.lang.Object)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.conversion.IntArrayCH.convertFrom(java.lang.Object)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.conversion.IntegerCH$6.convert(java.lang.Object)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.conversion.IntegerCH$7.convert(java.lang.Object)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.conversion.IntegerCH$8.convert(java.lang.Object)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.conversion.IntegerCH.convertFrom(java.lang.Object)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.conversion.LongCH.convertFrom(java.lang.Object)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.conversion.PrimArrayHandler.convertFrom(java.lang.Object)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.conversion.PrimArrayHandler.handleLooseTypeConversion(java.lang.Class, java.lang.Object[], java.lang.Class)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.conversion.PrimIntArrayCH.convertFrom(java.lang.Object)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.conversion.ShortCH.convertFrom(java.lang.Object)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.math.IEEEFloatingPointMath.getBigDecimalFromType(java.lang.Object, int)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.math.JDK14CompatabilityMath.getBigDecimalFromType(java.lang.Object, int)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.refl.ReflectiveAccessorOptimizer.optimizeSetAccessor(char[], java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory, boolean, java.lang.Object)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.ConversionException.ConversionException(java.lang.String, java.lang.Throwable)</name>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="class" confirmed="no">java.lang.Throwable</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.PropertyAccessException.PropertyAccessException(java.lang.String, java.lang.Throwable)</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.ConversionException.ConversionException(java.lang.Throwable)</name>
                <outbound type="class" confirmed="no">java.lang.Throwable</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.PropertyAccessException.PropertyAccessException(java.lang.Throwable)</outbound>
            </feature>
        </class>
        <class confirmed="yes">
            <name>org.mvel.ConversionHandler</name>
            <outbound type="class" confirmed="no">java.lang.Object</outbound>
            <inbound type="feature" confirmed="yes">org.mvel.DataConversion.addConversionHandler(java.lang.Class, org.mvel.ConversionHandler)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.DataConversion.canConvert(java.lang.Class, java.lang.Class)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.DataConversion.convert(java.lang.Object, java.lang.Class)</inbound>
            <inbound type="class" confirmed="yes">org.mvel.Unit</inbound>
            <inbound type="class" confirmed="yes">org.mvel.conversion.ArrayCH</inbound>
            <inbound type="class" confirmed="yes">org.mvel.conversion.BigDecimalCH</inbound>
            <inbound type="class" confirmed="yes">org.mvel.conversion.BigIntegerCH</inbound>
            <inbound type="class" confirmed="yes">org.mvel.conversion.BooleanCH</inbound>
            <inbound type="class" confirmed="yes">org.mvel.conversion.ByteCH</inbound>
            <inbound type="class" confirmed="yes">org.mvel.conversion.CharArrayCH</inbound>
            <inbound type="class" confirmed="yes">org.mvel.conversion.CharCH</inbound>
            <inbound type="class" confirmed="yes">org.mvel.conversion.DoubleCH</inbound>
            <inbound type="class" confirmed="yes">org.mvel.conversion.FloatCH</inbound>
            <inbound type="class" confirmed="yes">org.mvel.conversion.IntArrayCH</inbound>
            <inbound type="class" confirmed="yes">org.mvel.conversion.IntegerCH</inbound>
            <inbound type="class" confirmed="yes">org.mvel.conversion.LongCH</inbound>
            <inbound type="class" confirmed="yes">org.mvel.conversion.ObjectCH</inbound>
            <inbound type="class" confirmed="yes">org.mvel.conversion.PrimArrayHandler</inbound>
            <inbound type="class" confirmed="yes">org.mvel.conversion.PrimIntArrayCH</inbound>
            <inbound type="class" confirmed="yes">org.mvel.conversion.ShortCH</inbound>
            <inbound type="class" confirmed="yes">org.mvel.conversion.StringArrayCH</inbound>
            <inbound type="class" confirmed="yes">org.mvel.conversion.StringCH</inbound>
            <inbound type="class" confirmed="yes">org.mvel.conversion.UnitConversion</inbound>
            <feature confirmed="yes">
                <name>org.mvel.ConversionHandler.canConvertFrom(java.lang.Class)</name>
                <outbound type="class" confirmed="no">java.lang.Class</outbound>
                <inbound type="feature" confirmed="yes">org.mvel.DataConversion.canConvert(java.lang.Class, java.lang.Class)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.ConversionHandler.convertFrom(java.lang.Object)</name>
                <outbound type="class" confirmed="no">java.lang.Object</outbound>
                <inbound type="feature" confirmed="yes">org.mvel.DataConversion.convert(java.lang.Object, java.lang.Class)</inbound>
            </feature>
        </class>
        <class confirmed="yes">
            <name>org.mvel.DataConversion</name>
            <outbound type="class" confirmed="no">java.lang.Object</outbound>
            <feature confirmed="yes">
                <name>org.mvel.DataConversion.CONVERTERS</name>
                <outbound type="class" confirmed="no">java.util.Map</outbound>
                <inbound type="feature" confirmed="yes">org.mvel.DataConversion.addConversionHandler(java.lang.Class, org.mvel.ConversionHandler)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.DataConversion.canConvert(java.lang.Class, java.lang.Class)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.DataConversion.convert(java.lang.Object, java.lang.Class)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.DataConversion.static {}</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.DataConversion.DataConversion()</name>
                <outbound type="feature" confirmed="no">java.lang.Object.Object()</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.DataConversion.addConversionHandler(java.lang.Class, org.mvel.ConversionHandler)</name>
                <outbound type="class" confirmed="no">java.lang.Class</outbound>
                <outbound type="class" confirmed="no">java.lang.Object</outbound>
                <outbound type="class" confirmed="no">java.util.Map</outbound>
                <outbound type="feature" confirmed="no">java.util.Map.put(java.lang.Object, java.lang.Object)</outbound>
                <outbound type="class" confirmed="yes">org.mvel.ConversionHandler</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.DataConversion.CONVERTERS</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.DataConversion.canConvert(java.lang.Class, java.lang.Class)</name>
                <outbound type="class" confirmed="no">java.lang.Class</outbound>
                <outbound type="feature" confirmed="no">java.lang.Class.isAssignableFrom(java.lang.Class)</outbound>
                <outbound type="class" confirmed="no">java.lang.Object</outbound>
                <outbound type="class" confirmed="no">java.util.Map</outbound>
                <outbound type="feature" confirmed="no">java.util.Map.containsKey(java.lang.Object)</outbound>
                <outbound type="feature" confirmed="no">java.util.Map.get(java.lang.Object)</outbound>
                <outbound type="class" confirmed="yes">org.mvel.ConversionHandler</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.ConversionHandler.canConvertFrom(java.lang.Class)</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.DataConversion.CONVERTERS</outbound>
                <inbound type="feature" confirmed="yes">org.mvel.AbstractParser.reduce()</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.MVELRuntime.execute(boolean, org.mvel.CompiledExpression, java.lang.Object, org.mvel.integration.VariableResolverFactory)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.PropertyAccessor.set(java.lang.Object)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.conversion.PrimArrayHandler.handleLooseTypeConversion(java.lang.Class, java.lang.Object[], java.lang.Class)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.integration.impl.MapVariableResolver.setValue(java.lang.Object)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.asm.ASMAccessorOptimizer.getMethod(java.lang.Object, java.lang.String)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.refl.ReflectiveAccessorOptimizer.optimizeSetAccessor(char[], java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory, boolean, java.lang.Object)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.util.ParseTools.getBestCandidate(java.lang.Class[], java.lang.String, java.lang.Class, java.lang.reflect.Method[])</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.util.ParseTools.getBestConstructorCanadidate(java.lang.Object[], java.lang.Class)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.DataConversion.convert(java.lang.Object, java.lang.Class)</name>
                <outbound type="class" confirmed="no">java.lang.Class</outbound>
                <outbound type="feature" confirmed="no">java.lang.Class.isAssignableFrom(java.lang.Class)</outbound>
                <outbound type="class" confirmed="no">java.lang.Object</outbound>
                <outbound type="feature" confirmed="no">java.lang.Object.getClass()</outbound>
                <outbound type="class" confirmed="no">java.util.Map</outbound>
                <outbound type="feature" confirmed="no">java.util.Map.get(java.lang.Object)</outbound>
                <outbound type="class" confirmed="yes">org.mvel.ConversionHandler</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.ConversionHandler.convertFrom(java.lang.Object)</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.DataConversion.CONVERTERS</outbound>
                <inbound type="feature" confirmed="yes">org.mvel.MVEL.eval(char[], java.lang.Object, java.lang.Class)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.MVEL.eval(char[], java.lang.Object, java.util.Map, java.lang.Class)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.MVEL.eval(char[], java.lang.Object, org.mvel.integration.VariableResolverFactory, java.lang.Class)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.MVEL.eval(char[], java.util.Map, java.lang.Class)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.MVEL.eval(java.lang.String, java.lang.Object, java.lang.Class)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.MVEL.eval(java.lang.String, java.lang.Object, java.util.Map, java.lang.Class)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.MVEL.eval(java.lang.String, java.lang.Object, org.mvel.integration.VariableResolverFactory, java.lang.Class)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.MVEL.eval(java.lang.String, java.util.Map, java.lang.Class)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.MVEL.eval(java.lang.String, org.mvel.integration.VariableResolverFactory, java.lang.Class)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.MVEL.executeExpression(java.lang.Object, java.lang.Object, java.lang.Class)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.MVEL.executeExpression(java.lang.Object, java.lang.Object, java.util.Map, java.lang.Class)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.MVEL.executeExpression(java.lang.Object, java.util.Map, java.lang.Class)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.PropertyAccessor.getMethod(java.lang.Object, java.lang.String)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.PropertyAccessor.set(java.lang.Object)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.ast.NewObjectNode$NewObjectArray.getValue(java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.ast.NewObjectNode.getReducedValue(java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.ast.TypeCast.getReducedValue(java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.ast.TypeCast.getReducedValueAccelerated(java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.conversion.PrimArrayHandler.handleLooseTypeConversion(java.lang.Class, java.lang.Object[], java.lang.Class)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.integration.impl.MapVariableResolver.setValue(java.lang.Object)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.math.IEEEFloatingPointMath._doOperations(int, java.lang.Object, int, int, java.lang.Object)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.math.JDK14CompatabilityMath._doOperations(int, java.lang.Object, int, int, java.lang.Object)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.asm.ASMAccessorOptimizer.getCollectionProperty(java.lang.Object, java.lang.String)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.asm.ASMAccessorOptimizer.getMethod(java.lang.Object, java.lang.String)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.asm.ASMAccessorOptimizer.writeLiteralOrSubexpression(java.lang.Object, java.lang.Class)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.refl.ArrayAccessorNest.setValue(java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory, java.lang.Object)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.refl.ConstructorAccessor.executeAndCoerce(java.lang.Class[], java.lang.Object, org.mvel.integration.VariableResolverFactory)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.refl.DynamicFieldAccessor.setValue(java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory, java.lang.Object)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.refl.DynamicSetterAccessor.setValue(java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory, java.lang.Object)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.refl.MethodAccessor.executeAndCoerce(java.lang.Class[], java.lang.Object, org.mvel.integration.VariableResolverFactory)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.refl.ReflectiveAccessorOptimizer.compileConstructor(char[], java.lang.Object, org.mvel.integration.VariableResolverFactory)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.refl.ReflectiveAccessorOptimizer.getMethod(java.lang.Object, java.lang.String)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.refl.ReflectiveAccessorOptimizer.optimizeSetAccessor(char[], java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory, boolean, java.lang.Object)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.refl.SetterAccessor.setValue(java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory, java.lang.Object)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.DataConversion.static {}</name>
                <outbound type="feature" confirmed="no">java.lang.Boolean.TYPE</outbound>
                <outbound type="feature" confirmed="no">java.lang.Byte.TYPE</outbound>
                <outbound type="feature" confirmed="no">java.lang.Character.TYPE</outbound>
                <outbound type="class" confirmed="no">java.lang.Class</outbound>
                <outbound type="feature" confirmed="no">java.lang.Class.forName(java.lang.String)</outbound>
                <outbound type="class" confirmed="no">java.lang.ClassNotFoundException</outbound>
                <outbound type="feature" confirmed="no">java.lang.Double.TYPE</outbound>
                <outbound type="feature" confirmed="no">java.lang.Float.TYPE</outbound>
                <outbound type="feature" confirmed="no">java.lang.Integer.TYPE</outbound>
                <outbound type="feature" confirmed="no">java.lang.Long.TYPE</outbound>
                <outbound type="feature" confirmed="no">java.lang.NoClassDefFoundError.NoClassDefFoundError(java.lang.String)</outbound>
                <outbound type="class" confirmed="no">java.lang.Object</outbound>
                <outbound type="feature" confirmed="no">java.lang.Short.TYPE</outbound>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="feature" confirmed="no">java.lang.Throwable.getMessage()</outbound>
                <outbound type="feature" confirmed="no">java.util.HashMap.HashMap()</outbound>
                <outbound type="class" confirmed="no">java.util.Map</outbound>
                <outbound type="feature" confirmed="no">java.util.Map.put(java.lang.Object, java.lang.Object)</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.DataConversion.CONVERTERS</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.conversion.BigDecimalCH.BigDecimalCH()</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.conversion.BigIntegerCH.BigIntegerCH()</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.conversion.BooleanCH.BooleanCH()</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.conversion.ByteCH.ByteCH()</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.conversion.CharArrayCH.CharArrayCH()</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.conversion.CharCH.CharCH()</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.conversion.DoubleCH.DoubleCH()</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.conversion.FloatCH.FloatCH()</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.conversion.IntArrayCH.IntArrayCH()</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.conversion.IntegerCH.IntegerCH()</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.conversion.LongCH.LongCH()</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.conversion.ObjectCH.ObjectCH()</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.conversion.PrimArrayHandler.PrimArrayHandler(java.lang.Class)</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.conversion.ShortCH.ShortCH()</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.conversion.StringArrayCH.StringArrayCH()</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.conversion.StringCH.StringCH()</outbound>
            </feature>
        </class>
        <class confirmed="yes">
            <name>org.mvel.DataTypes</name>
            <outbound type="class" confirmed="no">java.lang.Object</outbound>
            <feature confirmed="yes">
                <name>org.mvel.DataTypes.BIG_DECIMAL</name>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.DataTypes.BIG_INTEGER</name>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.DataTypes.BOOLEAN</name>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.DataTypes.BYTE</name>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.DataTypes.CHAR</name>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.DataTypes.DOUBLE</name>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.DataTypes.EMPTY</name>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.DataTypes.FLOAT</name>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.DataTypes.INTEGER</name>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.DataTypes.LONG</name>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.DataTypes.NULL</name>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.DataTypes.OBJECT</name>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.DataTypes.SHORT</name>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.DataTypes.STRING</name>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.DataTypes.UNIT</name>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.DataTypes.W_BOOLEAN</name>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.DataTypes.W_BYTE</name>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.DataTypes.W_CHAR</name>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.DataTypes.W_DOUBLE</name>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.DataTypes.W_FLOAT</name>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.DataTypes.W_INTEGER</name>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.DataTypes.W_LONG</name>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.DataTypes.W_SHORT</name>
            </feature>
        </class>
        <class confirmed="yes">
            <name>org.mvel.EndWithValue</name>
            <outbound type="class" confirmed="no">java.lang.RuntimeException</outbound>
            <inbound type="feature" confirmed="yes">org.mvel.MVEL.eval(char[], java.lang.Object, java.lang.Class)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.MVEL.eval(char[], java.lang.Object, java.util.Map)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.MVEL.eval(char[], java.lang.Object, java.util.Map, java.lang.Class)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.MVEL.eval(char[], java.lang.Object, org.mvel.integration.VariableResolverFactory, java.lang.Class)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.MVEL.eval(char[], java.util.Map, java.lang.Class)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.MVEL.eval(java.lang.String, java.lang.Object, java.lang.Class)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.MVEL.eval(java.lang.String, java.lang.Object, java.util.Map, java.lang.Class)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.MVEL.eval(java.lang.String, java.lang.Object, org.mvel.integration.VariableResolverFactory, java.lang.Class)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.MVEL.eval(java.lang.String, java.util.Map, java.lang.Class)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.MVEL.eval(java.lang.String, org.mvel.integration.VariableResolverFactory, java.lang.Class)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.MVEL.evalToString(java.lang.String, java.lang.Object)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.MVEL.evalToString(java.lang.String, java.lang.Object, java.util.Map)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.MVEL.executeDebugger(org.mvel.CompiledExpression, java.lang.Object, org.mvel.integration.VariableResolverFactory)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.MVEL.executeExpression(java.lang.Object)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.MVEL.executeExpression(java.lang.Object, java.lang.Object)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.MVEL.executeExpression(java.lang.Object, java.lang.Object, java.lang.Class)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.MVEL.executeExpression(java.lang.Object, java.lang.Object, java.util.Map)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.MVEL.executeExpression(java.lang.Object, java.lang.Object, java.util.Map, java.lang.Class)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.MVEL.executeExpression(java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.MVEL.executeExpression(java.lang.Object, java.util.Map)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.MVEL.executeExpression(java.lang.Object, java.util.Map, java.lang.Class)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.MVEL.executeExpression(java.lang.Object, org.mvel.integration.VariableResolverFactory)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.MVELInterpretedRuntime.parse()</inbound>
            <feature confirmed="yes">
                <name>org.mvel.EndWithValue.EndWithValue(java.lang.Object)</name>
                <outbound type="class" confirmed="no">java.lang.Object</outbound>
                <outbound type="feature" confirmed="no">java.lang.RuntimeException.RuntimeException()</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.EndWithValue.value</outbound>
                <inbound type="feature" confirmed="yes">org.mvel.ast.ReturnNode.getReducedValue(java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.ast.ReturnNode.getReducedValueAccelerated(java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.EndWithValue.getValue()</name>
                <outbound type="class" confirmed="no">java.lang.Object</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.EndWithValue.value</outbound>
                <inbound type="feature" confirmed="yes">org.mvel.MVEL.eval(char[], java.lang.Object, java.lang.Class)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.MVEL.eval(char[], java.lang.Object, java.util.Map)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.MVEL.eval(char[], java.lang.Object, java.util.Map, java.lang.Class)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.MVEL.eval(char[], java.lang.Object, org.mvel.integration.VariableResolverFactory, java.lang.Class)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.MVEL.eval(char[], java.util.Map, java.lang.Class)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.MVEL.eval(java.lang.String, java.lang.Object, java.lang.Class)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.MVEL.eval(java.lang.String, java.lang.Object, java.util.Map, java.lang.Class)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.MVEL.eval(java.lang.String, java.lang.Object, org.mvel.integration.VariableResolverFactory, java.lang.Class)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.MVEL.eval(java.lang.String, java.util.Map, java.lang.Class)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.MVEL.eval(java.lang.String, org.mvel.integration.VariableResolverFactory, java.lang.Class)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.MVEL.evalToString(java.lang.String, java.lang.Object)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.MVEL.evalToString(java.lang.String, java.lang.Object, java.util.Map)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.MVEL.executeDebugger(org.mvel.CompiledExpression, java.lang.Object, org.mvel.integration.VariableResolverFactory)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.MVEL.executeExpression(java.lang.Object)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.MVEL.executeExpression(java.lang.Object, java.lang.Object)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.MVEL.executeExpression(java.lang.Object, java.lang.Object, java.lang.Class)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.MVEL.executeExpression(java.lang.Object, java.lang.Object, java.util.Map)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.MVEL.executeExpression(java.lang.Object, java.lang.Object, java.util.Map, java.lang.Class)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.MVEL.executeExpression(java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.MVEL.executeExpression(java.lang.Object, java.util.Map)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.MVEL.executeExpression(java.lang.Object, java.util.Map, java.lang.Class)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.MVEL.executeExpression(java.lang.Object, org.mvel.integration.VariableResolverFactory)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.MVELInterpretedRuntime.parse()</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.EndWithValue.value</name>
                <outbound type="class" confirmed="no">java.lang.Object</outbound>
                <inbound type="feature" confirmed="yes">org.mvel.EndWithValue.EndWithValue(java.lang.Object)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.EndWithValue.getValue()</inbound>
            </feature>
        </class>
        <class confirmed="yes">
            <name>org.mvel.ErrorDetail</name>
            <outbound type="class" confirmed="no">java.lang.Object</outbound>
            <inbound type="feature" confirmed="yes">org.mvel.AbstractParser.addFatalError(java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.AbstractParser.addFatalError(java.lang.String, int, int)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.AbstractParser.addWarning(java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.CompileException.CompileException(java.lang.String, java.util.List)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.ParserContext.addError(org.mvel.ErrorDetail)</inbound>
            <feature confirmed="yes">
                <name>org.mvel.ErrorDetail.ErrorDetail(int, int, boolean, java.lang.String)</name>
                <outbound type="feature" confirmed="no">java.lang.Object.Object()</outbound>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.ErrorDetail.col</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.ErrorDetail.critical</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.ErrorDetail.message</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.ErrorDetail.row</outbound>
                <inbound type="feature" confirmed="yes">org.mvel.AbstractParser.addFatalError(java.lang.String)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.AbstractParser.addFatalError(java.lang.String, int, int)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.ErrorDetail.ErrorDetail(java.lang.String, boolean)</name>
                <outbound type="feature" confirmed="no">java.lang.Object.Object()</outbound>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.ErrorDetail.critical</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.ErrorDetail.message</outbound>
                <inbound type="feature" confirmed="yes">org.mvel.AbstractParser.addWarning(java.lang.String)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.ErrorDetail.col</name>
                <inbound type="feature" confirmed="yes">org.mvel.ErrorDetail.ErrorDetail(int, int, boolean, java.lang.String)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.ErrorDetail.getCol()</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.ErrorDetail.setCol(int)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.ErrorDetail.toString()</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.ErrorDetail.critical</name>
                <inbound type="feature" confirmed="yes">org.mvel.ErrorDetail.ErrorDetail(int, int, boolean, java.lang.String)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.ErrorDetail.ErrorDetail(java.lang.String, boolean)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.ErrorDetail.isCritical()</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.ErrorDetail.setCritical(boolean)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.ErrorDetail.toString()</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.ErrorDetail.getCol()</name>
                <outbound type="feature" confirmed="yes">org.mvel.ErrorDetail.col</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.ErrorDetail.getMessage()</name>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.ErrorDetail.message</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.ErrorDetail.getRow()</name>
                <outbound type="feature" confirmed="yes">org.mvel.ErrorDetail.row</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.ErrorDetail.isCritical()</name>
                <outbound type="feature" confirmed="yes">org.mvel.ErrorDetail.critical</outbound>
                <inbound type="feature" confirmed="yes">org.mvel.ParserContext.addError(org.mvel.ErrorDetail)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.ErrorDetail.message</name>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <inbound type="feature" confirmed="yes">org.mvel.ErrorDetail.ErrorDetail(int, int, boolean, java.lang.String)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.ErrorDetail.ErrorDetail(java.lang.String, boolean)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.ErrorDetail.getMessage()</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.ErrorDetail.setMessage(java.lang.String)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.ErrorDetail.toString()</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.ErrorDetail.row</name>
                <inbound type="feature" confirmed="yes">org.mvel.ErrorDetail.ErrorDetail(int, int, boolean, java.lang.String)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.ErrorDetail.getRow()</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.ErrorDetail.setRow(int)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.ErrorDetail.toString()</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.ErrorDetail.setCol(int)</name>
                <outbound type="feature" confirmed="yes">org.mvel.ErrorDetail.col</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.ErrorDetail.setCritical(boolean)</name>
                <outbound type="feature" confirmed="yes">org.mvel.ErrorDetail.critical</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.ErrorDetail.setMessage(java.lang.String)</name>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.ErrorDetail.message</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.ErrorDetail.setRow(int)</name>
                <outbound type="feature" confirmed="yes">org.mvel.ErrorDetail.row</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.ErrorDetail.toString()</name>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="class" confirmed="no">java.lang.StringBuffer</outbound>
                <outbound type="feature" confirmed="no">java.lang.StringBuffer.StringBuffer(java.lang.String)</outbound>
                <outbound type="feature" confirmed="no">java.lang.StringBuffer.append(int)</outbound>
                <outbound type="feature" confirmed="no">java.lang.StringBuffer.append(java.lang.String)</outbound>
                <outbound type="feature" confirmed="no">java.lang.StringBuffer.toString()</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.ErrorDetail.col</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.ErrorDetail.critical</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.ErrorDetail.message</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.ErrorDetail.row</outbound>
                <inbound type="feature" confirmed="yes">org.mvel.CompileException.CompileException(java.lang.String, java.util.List)</inbound>
            </feature>
        </class>
        <class confirmed="yes">
            <name>org.mvel.ExecutableAccessor</name>
            <outbound type="class" confirmed="no">java.lang.Object</outbound>
            <outbound type="class" confirmed="yes">org.mvel.ExecutableStatement</outbound>
            <inbound type="feature" confirmed="yes">org.mvel.debug.DebugTools.decompile(java.io.Serializable)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.asm.ASMAccessorOptimizer.getMethod(java.lang.Object, java.lang.String)</inbound>
            <feature confirmed="yes">
                <name>org.mvel.ExecutableAccessor.ExecutableAccessor(org.mvel.ASTNode, boolean)</name>
                <outbound type="feature" confirmed="no">java.lang.Object.Object()</outbound>
                <outbound type="class" confirmed="yes">org.mvel.ASTNode</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.ExecutableAccessor.node</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.ExecutableAccessor.returnBigDecimal</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.ExecutableAccessor.ExecutableAccessor(org.mvel.ASTNode, boolean, java.lang.Class)</name>
                <outbound type="class" confirmed="no">java.lang.Class</outbound>
                <outbound type="feature" confirmed="no">java.lang.Object.Object()</outbound>
                <outbound type="class" confirmed="yes">org.mvel.ASTNode</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.ExecutableAccessor.egress</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.ExecutableAccessor.node</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.ExecutableAccessor.returnBigDecimal</outbound>
                <inbound type="feature" confirmed="yes">org.mvel.util.ParseTools.optimizeTree(org.mvel.CompiledExpression)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.ExecutableAccessor.computeTypeConversionRule()</name>
                <outbound type="class" confirmed="no">java.lang.Class</outbound>
                <outbound type="feature" confirmed="no">java.lang.Class.isAssignableFrom(java.lang.Class)</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.ExecutableAccessor.convertable</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.ExecutableAccessor.egress</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.ExecutableAccessor.ingress</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.ExecutableAccessor.convertable</name>
                <inbound type="feature" confirmed="yes">org.mvel.ExecutableAccessor.computeTypeConversionRule()</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.ExecutableAccessor.isConvertableIngressEgress()</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.ExecutableAccessor.egress</name>
                <outbound type="class" confirmed="no">java.lang.Class</outbound>
                <inbound type="feature" confirmed="yes">org.mvel.ExecutableAccessor.ExecutableAccessor(org.mvel.ASTNode, boolean, java.lang.Class)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.ExecutableAccessor.computeTypeConversionRule()</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.ExecutableAccessor.getKnownEgressType()</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.ExecutableAccessor.setKnownEgressType(java.lang.Class)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.ExecutableAccessor.getKnownEgressType()</name>
                <outbound type="class" confirmed="no">java.lang.Class</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.ExecutableAccessor.egress</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.ExecutableAccessor.getKnownIngressType()</name>
                <outbound type="class" confirmed="no">java.lang.Class</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.ExecutableAccessor.ingress</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.ExecutableAccessor.getNode()</name>
                <outbound type="class" confirmed="yes">org.mvel.ASTNode</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.ExecutableAccessor.node</outbound>
                <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.asm.ASMAccessorOptimizer.getMethod(java.lang.Object, java.lang.String)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.ExecutableAccessor.getValue(java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory)</name>
                <outbound type="class" confirmed="no">java.lang.Object</outbound>
                <outbound type="class" confirmed="yes">org.mvel.ASTNode</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.ASTNode.getReducedValueAccelerated(java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory)</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.ExecutableAccessor.node</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.ExecutableAccessor.returnBigDecimal</outbound>
                <outbound type="class" confirmed="yes">org.mvel.integration.VariableResolverFactory</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.util.ParseTools.handleParserEgress(java.lang.Object, boolean)</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.ExecutableAccessor.getValue(java.lang.Object, org.mvel.integration.VariableResolverFactory)</name>
                <outbound type="class" confirmed="no">java.lang.Object</outbound>
                <outbound type="class" confirmed="yes">org.mvel.ASTNode</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.ASTNode.getReducedValueAccelerated(java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory)</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.ExecutableAccessor.node</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.ExecutableAccessor.returnBigDecimal</outbound>
                <outbound type="class" confirmed="yes">org.mvel.integration.VariableResolverFactory</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.util.ParseTools.handleParserEgress(java.lang.Object, boolean)</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.ExecutableAccessor.ingress</name>
                <outbound type="class" confirmed="no">java.lang.Class</outbound>
                <inbound type="feature" confirmed="yes">org.mvel.ExecutableAccessor.computeTypeConversionRule()</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.ExecutableAccessor.getKnownIngressType()</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.ExecutableAccessor.setKnownIngressType(java.lang.Class)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.ExecutableAccessor.intOptimized()</name>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.ExecutableAccessor.isConvertableIngressEgress()</name>
                <outbound type="feature" confirmed="yes">org.mvel.ExecutableAccessor.convertable</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.ExecutableAccessor.isLiteralOnly()</name>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.ExecutableAccessor.node</name>
                <outbound type="class" confirmed="yes">org.mvel.ASTNode</outbound>
                <inbound type="feature" confirmed="yes">org.mvel.ExecutableAccessor.ExecutableAccessor(org.mvel.ASTNode, boolean)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.ExecutableAccessor.ExecutableAccessor(org.mvel.ASTNode, boolean, java.lang.Class)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.ExecutableAccessor.getNode()</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.ExecutableAccessor.getValue(java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.ExecutableAccessor.getValue(java.lang.Object, org.mvel.integration.VariableResolverFactory)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.ExecutableAccessor.returnBigDecimal</name>
                <inbound type="feature" confirmed="yes">org.mvel.ExecutableAccessor.ExecutableAccessor(org.mvel.ASTNode, boolean)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.ExecutableAccessor.ExecutableAccessor(org.mvel.ASTNode, boolean, java.lang.Class)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.ExecutableAccessor.getValue(java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.ExecutableAccessor.getValue(java.lang.Object, org.mvel.integration.VariableResolverFactory)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.ExecutableAccessor.setKnownEgressType(java.lang.Class)</name>
                <outbound type="class" confirmed="no">java.lang.Class</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.ExecutableAccessor.egress</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.ExecutableAccessor.setKnownIngressType(java.lang.Class)</name>
                <outbound type="class" confirmed="no">java.lang.Class</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.ExecutableAccessor.ingress</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.ExecutableAccessor.setValue(java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory, java.lang.Object)</name>
                <outbound type="class" confirmed="no">java.lang.Object</outbound>
                <outbound type="class" confirmed="yes">org.mvel.integration.VariableResolverFactory</outbound>
            </feature>
        </class>
        <class confirmed="yes">
            <name>org.mvel.ExecutableLiteral</name>
            <outbound type="class" confirmed="no">java.lang.Object</outbound>
            <outbound type="class" confirmed="yes">org.mvel.ExecutableStatement</outbound>
            <inbound type="feature" confirmed="yes">org.mvel.debug.DebugTools.decompile(java.io.Serializable)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.asm.ASMAccessorOptimizer.getMethod(java.lang.Object, java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.asm.ASMAccessorOptimizer.writeLiteralOrSubexpression(java.lang.Object, java.lang.Class)</inbound>
            <feature confirmed="yes">
                <name>org.mvel.ExecutableLiteral.ExecutableLiteral(int)</name>
                <outbound type="feature" confirmed="no">java.lang.Integer.Integer(int)</outbound>
                <outbound type="class" confirmed="no">java.lang.Object</outbound>
                <outbound type="feature" confirmed="no">java.lang.Object.Object()</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.ExecutableLiteral.intOptimized</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.ExecutableLiteral.integer32</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.ExecutableLiteral.literal</outbound>
                <inbound type="feature" confirmed="yes">org.mvel.util.ParseTools.optimizeTree(org.mvel.CompiledExpression)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.ExecutableLiteral.ExecutableLiteral(java.lang.Object)</name>
                <outbound type="class" confirmed="no">java.lang.Object</outbound>
                <outbound type="feature" confirmed="no">java.lang.Object.Object()</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.ExecutableLiteral.literal</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.util.ParseTools.handleParserEgress(java.lang.Object, boolean)</outbound>
                <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.asm.ASMAccessorOptimizer.getMethod(java.lang.Object, java.lang.String)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.util.ParseTools.optimizeTree(org.mvel.CompiledExpression)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.ExecutableLiteral.computeTypeConversionRule()</name>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.ExecutableLiteral.getInteger32()</name>
                <outbound type="feature" confirmed="yes">org.mvel.ExecutableLiteral.integer32</outbound>
                <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.asm.ASMAccessorOptimizer.getMethod(java.lang.Object, java.lang.String)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.ExecutableLiteral.getKnownEgressType()</name>
                <outbound type="class" confirmed="no">java.lang.Class</outbound>
                <outbound type="class" confirmed="no">java.lang.Object</outbound>
                <outbound type="feature" confirmed="no">java.lang.Object.getClass()</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.ExecutableLiteral.literal</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.ExecutableLiteral.getKnownIngressType()</name>
                <outbound type="class" confirmed="no">java.lang.Class</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.ExecutableLiteral.getLiteral()</name>
                <outbound type="class" confirmed="no">java.lang.Object</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.ExecutableLiteral.literal</outbound>
                <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.asm.ASMAccessorOptimizer.getMethod(java.lang.Object, java.lang.String)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.asm.ASMAccessorOptimizer.writeLiteralOrSubexpression(java.lang.Object, java.lang.Class)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.ExecutableLiteral.getValue(java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory)</name>
                <outbound type="class" confirmed="no">java.lang.Object</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.ExecutableLiteral.literal</outbound>
                <outbound type="class" confirmed="yes">org.mvel.integration.VariableResolverFactory</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.ExecutableLiteral.getValue(java.lang.Object, org.mvel.integration.VariableResolverFactory)</name>
                <outbound type="class" confirmed="no">java.lang.Object</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.ExecutableLiteral.literal</outbound>
                <outbound type="class" confirmed="yes">org.mvel.integration.VariableResolverFactory</outbound>
                <inbound type="feature" confirmed="yes">org.mvel.debug.DebugTools.decompile(java.io.Serializable)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.ExecutableLiteral.intOptimized</name>
                <inbound type="feature" confirmed="yes">org.mvel.ExecutableLiteral.ExecutableLiteral(int)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.ExecutableLiteral.intOptimized()</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.ExecutableLiteral.intOptimized()</name>
                <outbound type="feature" confirmed="yes">org.mvel.ExecutableLiteral.intOptimized</outbound>
                <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.asm.ASMAccessorOptimizer.getMethod(java.lang.Object, java.lang.String)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.ExecutableLiteral.integer32</name>
                <inbound type="feature" confirmed="yes">org.mvel.ExecutableLiteral.ExecutableLiteral(int)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.ExecutableLiteral.getInteger32()</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.ExecutableLiteral.setInteger32(int)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.ExecutableLiteral.isConvertableIngressEgress()</name>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.ExecutableLiteral.isLiteralOnly()</name>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.ExecutableLiteral.literal</name>
                <outbound type="class" confirmed="no">java.lang.Object</outbound>
                <inbound type="feature" confirmed="yes">org.mvel.ExecutableLiteral.ExecutableLiteral(int)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.ExecutableLiteral.ExecutableLiteral(java.lang.Object)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.ExecutableLiteral.getKnownEgressType()</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.ExecutableLiteral.getLiteral()</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.ExecutableLiteral.getValue(java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.ExecutableLiteral.getValue(java.lang.Object, org.mvel.integration.VariableResolverFactory)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.ExecutableLiteral.setInteger32(int)</name>
                <outbound type="feature" confirmed="yes">org.mvel.ExecutableLiteral.integer32</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.ExecutableLiteral.setKnownEgressType(java.lang.Class)</name>
                <outbound type="class" confirmed="no">java.lang.Class</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.ExecutableLiteral.setKnownIngressType(java.lang.Class)</name>
                <outbound type="class" confirmed="no">java.lang.Class</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.ExecutableLiteral.setValue(java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory, java.lang.Object)</name>
                <outbound type="class" confirmed="no">java.lang.Object</outbound>
                <outbound type="class" confirmed="yes">org.mvel.integration.VariableResolverFactory</outbound>
            </feature>
        </class>
        <class confirmed="yes">
            <name>org.mvel.ExecutableStatement</name>
            <outbound type="class" confirmed="no">java.io.Serializable</outbound>
            <outbound type="class" confirmed="no">java.lang.Cloneable</outbound>
            <outbound type="class" confirmed="no">java.lang.Object</outbound>
            <outbound type="class" confirmed="yes">org.mvel.Accessor</outbound>
            <inbound type="feature" confirmed="yes">org.mvel.AbstractParser.captureCodeBlock(int)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.AbstractParser.handleSubstatement(org.mvel.ast.Substatement)</inbound>
            <inbound type="class" confirmed="yes">org.mvel.CompiledExpression</inbound>
            <inbound type="class" confirmed="yes">org.mvel.ExecutableAccessor</inbound>
            <inbound type="class" confirmed="yes">org.mvel.ExecutableLiteral</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.MVEL.executeExpression(java.lang.Object)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.MVEL.executeExpression(java.lang.Object, java.lang.Object)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.MVEL.executeExpression(java.lang.Object, java.lang.Object, java.util.Map)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.MVEL.executeExpression(java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.MVEL.executeExpression(java.lang.Object, java.util.Map)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.MVEL.executeExpression(java.lang.Object, org.mvel.integration.VariableResolverFactory)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.ast.AssertNode.AssertNode(char[], int)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.ast.AssertNode.assertion</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.ast.AssertNode.getReducedValueAccelerated(java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.ast.AssignAdd.AssignAdd(char[], int, java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.ast.AssignAdd.getReducedValueAccelerated(java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.ast.AssignAdd.statement</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.ast.AssignDiv.AssignDiv(char[], int, java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.ast.AssignDiv.getReducedValueAccelerated(java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.ast.AssignDiv.statement</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.ast.AssignMult.AssignMult(char[], int, java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.ast.AssignMult.getReducedValueAccelerated(java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.ast.AssignMult.statement</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.ast.AssignSub.AssignSub(char[], int, java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.ast.AssignSub.getReducedValueAccelerated(java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.ast.AssignSub.statement</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.ast.AssignmentNode.AssignmentNode(char[], int, int, java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.ast.AssignmentNode.getReducedValueAccelerated(java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.ast.AssignmentNode.statement</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.ast.DeepAssignmentNode.DeepAssignmentNode(char[], int, int, java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.ast.DeepAssignmentNode.getReducedValueAccelerated(java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.ast.ForEachNode.ForEachNode(char[], char[], int)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.ast.ForEachNode.compiledBlock</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.ast.ForEachNode.condition</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.ast.ForEachNode.getReducedValue(java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.ast.ForEachNode.getReducedValueAccelerated(java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.ast.ForEachNode.handleCond(char[])</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.ast.IfNode.IfNode(char[], char[], int)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.ast.IfNode.condition</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.ast.IfNode.elseBlock</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.ast.IfNode.getElseBlock()</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.ast.IfNode.getNestedStatement()</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.ast.IfNode.getReducedValue(java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.ast.IfNode.getReducedValueAccelerated(java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.ast.IfNode.nestedStatement</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.ast.IfNode.setElseBlock(char[])</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.ast.NestedStatement.getNestedStatement()</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.ast.NewObjectNode$NewObjectArray.NewObjectNode$NewObjectArray(java.lang.Class, org.mvel.ExecutableStatement[])</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.ast.NewObjectNode$NewObjectArray.getValue(java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.ast.NewObjectNode$NewObjectArray.sizes</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.ast.NewObjectNode.compiledArraySize</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.ast.NewObjectNode.getReducedValueAccelerated(java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.ast.NewObjectNode.updateClassName(int)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.ast.RegExMatch.RegExMatch(char[], int, char[])</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.ast.RegExMatch.getReducedValueAccelerated(java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.ast.RegExMatch.patternStmt</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.ast.RegExMatch.stmt</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.ast.Substatement.Substatement(char[], int)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.ast.Substatement.getReducedValueAccelerated(java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.ast.Substatement.getStatement()</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.ast.Substatement.statement</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.ast.TypeCast.TypeCast(char[], int, int, int, java.lang.Class)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.ast.TypeCast.getReducedValueAccelerated(java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.ast.TypeCast.statement</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.ast.TypedVarNode.TypedVarNode(char[], int, java.lang.Class)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.ast.TypedVarNode.getReducedValueAccelerated(java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.ast.TypedVarNode.statement</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.ast.WhileNode.WhileNode(char[], char[], int)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.ast.WhileNode.compiledBlock</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.ast.WhileNode.condition</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.ast.WhileNode.getReducedValue(java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.ast.WhileNode.getReducedValueAccelerated(java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.ast.WithNode$ParmValuePair.WithNode$ParmValuePair(java.lang.String, org.mvel.ExecutableStatement)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.ast.WithNode$ParmValuePair.getStatement()</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.ast.WithNode$ParmValuePair.setStatement(org.mvel.ExecutableStatement)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.ast.WithNode$ParmValuePair.statement</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.ast.WithNode.WithNode(char[], char[], int)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.ast.WithNode.compileWithExpressions()</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.ast.WithNode.getNestedStatement()</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.ast.WithNode.getReducedValueAccelerated(java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.ast.WithNode.nestedStatement</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.debug.DebugTools.decompile(org.mvel.CompiledExpression, boolean, org.mvel.debug.DebugTools$DecompileContext)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.asm.ASMAccessorOptimizer._initializeAccessor()</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.asm.ASMAccessorOptimizer.getCollectionProperty(java.lang.Object, java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.asm.ASMAccessorOptimizer.getMethod(java.lang.Object, java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.asm.ASMAccessorOptimizer.optimizeObjectCreation(char[], java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.asm.ASMAccessorOptimizer.writeLiteralOrSubexpression(java.lang.Object, java.lang.Class)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.refl.ArrayAccessorNest.ArrayAccessorNest(java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.refl.ArrayAccessorNest.ArrayAccessorNest(org.mvel.ExecutableStatement)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.refl.ArrayAccessorNest.getIndex()</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.refl.ArrayAccessorNest.getValue(java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.refl.ArrayAccessorNest.index</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.refl.ArrayAccessorNest.setIndex(org.mvel.ExecutableStatement)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.refl.ArrayAccessorNest.setValue(java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory, java.lang.Object)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.refl.ArrayAccessorNest.toString()</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.refl.ConstructorAccessor.ConstructorAccessor(java.lang.reflect.Constructor, org.mvel.ExecutableStatement[])</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.refl.ConstructorAccessor.executeAll(java.lang.Object, org.mvel.integration.VariableResolverFactory)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.refl.ConstructorAccessor.executeAndCoerce(java.lang.Class[], java.lang.Object, org.mvel.integration.VariableResolverFactory)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.refl.ConstructorAccessor.parms</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.refl.IndexedCharSeqAccessorNest.IndexedCharSeqAccessorNest(org.mvel.ExecutableStatement)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.refl.IndexedCharSeqAccessorNest.getIndex()</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.refl.IndexedCharSeqAccessorNest.getValue(java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.refl.IndexedCharSeqAccessorNest.index</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.refl.IndexedCharSeqAccessorNest.setIndex(org.mvel.ExecutableStatement)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.refl.IndexedCharSeqAccessorNest.toString()</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.refl.ListAccessorNest.ListAccessorNest(java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.refl.ListAccessorNest.ListAccessorNest(org.mvel.ExecutableStatement)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.refl.ListAccessorNest.getIndex()</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.refl.ListAccessorNest.getValue(java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.refl.ListAccessorNest.index</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.refl.ListAccessorNest.setIndex(org.mvel.ExecutableStatement)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.refl.ListAccessorNest.setValue(java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory, java.lang.Object)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.refl.ListAccessorNest.toString()</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.refl.MapAccessorNest.MapAccessorNest(java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.refl.MapAccessorNest.MapAccessorNest(org.mvel.ExecutableStatement)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.refl.MapAccessorNest.getProperty()</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.refl.MapAccessorNest.getValue(java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.refl.MapAccessorNest.property</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.refl.MapAccessorNest.setProperty(org.mvel.ExecutableStatement)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.refl.MapAccessorNest.setValue(java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory, java.lang.Object)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.refl.MapAccessorNest.toString()</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.refl.MethodAccessor.MethodAccessor(java.lang.reflect.Method, org.mvel.ExecutableStatement[])</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.refl.MethodAccessor.executeAll(java.lang.Object, org.mvel.integration.VariableResolverFactory)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.refl.MethodAccessor.executeAndCoerce(java.lang.Class[], java.lang.Object, org.mvel.integration.VariableResolverFactory)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.refl.MethodAccessor.getParms()</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.refl.MethodAccessor.parms</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.refl.MethodAccessor.setParms(org.mvel.ExecutableStatement[])</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.refl.ReflectiveAccessorOptimizer.compileConstructor(char[], java.lang.Object, org.mvel.integration.VariableResolverFactory)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.refl.ReflectiveAccessorOptimizer.getCollectionProperty(java.lang.Object, java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.refl.ReflectiveAccessorOptimizer.getMethod(java.lang.Object, java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.refl.collection.ExprValueAccessor.ExprValueAccessor(java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.refl.collection.ExprValueAccessor.getValue(java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.refl.collection.ExprValueAccessor.stmt</inbound>
            <feature confirmed="yes">
                <name>org.mvel.ExecutableStatement.computeTypeConversionRule()</name>
                <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.asm.ASMAccessorOptimizer.getMethod(java.lang.Object, java.lang.String)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.refl.ReflectiveAccessorOptimizer.getMethod(java.lang.Object, java.lang.String)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.ExecutableStatement.getKnownEgressType()</name>
                <outbound type="class" confirmed="no">java.lang.Class</outbound>
                <inbound type="feature" confirmed="yes">org.mvel.ast.AssignmentNode.AssignmentNode(char[], int, int, java.lang.String)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.ast.DeepAssignmentNode.DeepAssignmentNode(char[], int, int, java.lang.String)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.ast.Substatement.Substatement(char[], int)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.asm.ASMAccessorOptimizer.writeLiteralOrSubexpression(java.lang.Object, java.lang.Class)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.ExecutableStatement.getKnownIngressType()</name>
                <outbound type="class" confirmed="no">java.lang.Class</outbound>
                <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.asm.ASMAccessorOptimizer.getMethod(java.lang.Object, java.lang.String)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.refl.ReflectiveAccessorOptimizer.getMethod(java.lang.Object, java.lang.String)</inbound>
            </feature>
            <feature confirmed="no">
                <name>org.mvel.ExecutableStatement.getValue(java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory)</name>
                <inbound type="feature" confirmed="yes">org.mvel.AbstractParser.handleSubstatement(org.mvel.ast.Substatement)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.ast.AssertNode.getReducedValueAccelerated(java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.ast.AssignAdd.getReducedValueAccelerated(java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.ast.AssignDiv.getReducedValueAccelerated(java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.ast.AssignMult.getReducedValueAccelerated(java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.ast.AssignSub.getReducedValueAccelerated(java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.ast.AssignmentNode.getReducedValueAccelerated(java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.ast.ForEachNode.getReducedValue(java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.ast.ForEachNode.getReducedValueAccelerated(java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.ast.IfNode.getReducedValue(java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.ast.IfNode.getReducedValueAccelerated(java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.ast.NewObjectNode$NewObjectArray.getValue(java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.ast.RegExMatch.getReducedValueAccelerated(java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.ast.Substatement.getReducedValueAccelerated(java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.ast.TypeCast.getReducedValueAccelerated(java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.ast.TypedVarNode.getReducedValueAccelerated(java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.ast.WhileNode.getReducedValue(java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.ast.WhileNode.getReducedValueAccelerated(java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.ast.WithNode.getReducedValueAccelerated(java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.refl.ArrayAccessorNest.getValue(java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.refl.ArrayAccessorNest.setValue(java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory, java.lang.Object)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.refl.IndexedCharSeqAccessorNest.getValue(java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.refl.ListAccessorNest.getValue(java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.refl.ListAccessorNest.setValue(java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory, java.lang.Object)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.refl.MapAccessorNest.getValue(java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.refl.MapAccessorNest.setValue(java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory, java.lang.Object)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.refl.ReflectiveAccessorOptimizer.getCollectionProperty(java.lang.Object, java.lang.String)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.ExecutableStatement.getValue(java.lang.Object, org.mvel.integration.VariableResolverFactory)</name>
                <outbound type="class" confirmed="no">java.lang.Object</outbound>
                <outbound type="class" confirmed="yes">org.mvel.integration.VariableResolverFactory</outbound>
                <inbound type="feature" confirmed="yes">org.mvel.MVEL.executeExpression(java.lang.Object)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.MVEL.executeExpression(java.lang.Object, java.lang.Object)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.MVEL.executeExpression(java.lang.Object, java.lang.Object, java.util.Map)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.MVEL.executeExpression(java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.MVEL.executeExpression(java.lang.Object, java.util.Map)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.MVEL.executeExpression(java.lang.Object, org.mvel.integration.VariableResolverFactory)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.asm.ASMAccessorOptimizer.getCollectionProperty(java.lang.Object, java.lang.String)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.asm.ASMAccessorOptimizer.optimizeObjectCreation(char[], java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.refl.ConstructorAccessor.executeAll(java.lang.Object, org.mvel.integration.VariableResolverFactory)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.refl.ConstructorAccessor.executeAndCoerce(java.lang.Class[], java.lang.Object, org.mvel.integration.VariableResolverFactory)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.refl.MethodAccessor.executeAll(java.lang.Object, org.mvel.integration.VariableResolverFactory)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.refl.MethodAccessor.executeAndCoerce(java.lang.Class[], java.lang.Object, org.mvel.integration.VariableResolverFactory)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.refl.ReflectiveAccessorOptimizer.compileConstructor(char[], java.lang.Object, org.mvel.integration.VariableResolverFactory)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.refl.collection.ExprValueAccessor.getValue(java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.ExecutableStatement.intOptimized()</name>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.ExecutableStatement.isConvertableIngressEgress()</name>
                <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.asm.ASMAccessorOptimizer.getMethod(java.lang.Object, java.lang.String)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.refl.ReflectiveAccessorOptimizer.getMethod(java.lang.Object, java.lang.String)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.ExecutableStatement.isLiteralOnly()</name>
                <inbound type="feature" confirmed="yes">org.mvel.AbstractParser.handleSubstatement(org.mvel.ast.Substatement)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.ExecutableStatement.setKnownEgressType(java.lang.Class)</name>
                <outbound type="class" confirmed="no">java.lang.Class</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.ExecutableStatement.setKnownIngressType(java.lang.Class)</name>
                <outbound type="class" confirmed="no">java.lang.Class</outbound>
                <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.asm.ASMAccessorOptimizer.getMethod(java.lang.Object, java.lang.String)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.refl.ReflectiveAccessorOptimizer.getMethod(java.lang.Object, java.lang.String)</inbound>
            </feature>
        </class>
        <class confirmed="no">
            <name>org.mvel.ExecutableStatement[]</name>
            <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.refl.ReflectiveAccessorOptimizer.getMethod(java.lang.Object, java.lang.String)</inbound>
        </class>
        <class confirmed="yes">
            <name>org.mvel.ExpressionCompiler</name>
            <outbound type="class" confirmed="yes">org.mvel.AbstractParser</outbound>
            <feature confirmed="yes">
                <name>org.mvel.ExpressionCompiler.ExpressionCompiler(char[])</name>
                <outbound type="feature" confirmed="yes">org.mvel.AbstractParser.AbstractParser()</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.ExpressionCompiler.secondPassOptimization</outbound>
                <outbound type="feature" confirmed="no">org.mvel.ExpressionCompiler.setExpression(char[])</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.ExpressionCompiler.verifying</outbound>
                <inbound type="feature" confirmed="yes">org.mvel.MVEL.compileExpression(char[], java.util.Map, java.util.Map, java.lang.String)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.util.ParseTools.subCompileExpression(char[])</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.ExpressionCompiler.ExpressionCompiler(char[], org.mvel.ParserContext)</name>
                <outbound type="feature" confirmed="yes">org.mvel.AbstractParser.AbstractParser()</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.ExpressionCompiler.pCtx</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.ExpressionCompiler.secondPassOptimization</outbound>
                <outbound type="feature" confirmed="no">org.mvel.ExpressionCompiler.setExpression(char[])</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.ExpressionCompiler.verifying</outbound>
                <outbound type="class" confirmed="yes">org.mvel.ParserContext</outbound>
                <inbound type="feature" confirmed="yes">org.mvel.ExpressionCompiler._compile()</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.ExpressionCompiler.ExpressionCompiler(java.lang.String)</name>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.AbstractParser.AbstractParser()</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.ExpressionCompiler.secondPassOptimization</outbound>
                <outbound type="feature" confirmed="no">org.mvel.ExpressionCompiler.setExpression(java.lang.String)</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.ExpressionCompiler.verifying</outbound>
                <inbound type="feature" confirmed="yes">org.mvel.ExpressionCompiler.verify(org.mvel.ParserContext, org.mvel.ASTNode)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.MVEL.compileExpression(java.lang.String, java.util.Map, java.util.Map, java.lang.String)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.PropertyVerifier.getMethod(java.lang.Class, java.lang.String)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.util.ParseTools.subCompileExpression(java.lang.String)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.ExpressionCompiler.ExpressionCompiler(java.lang.String, boolean)</name>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.AbstractParser.AbstractParser()</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.ExpressionCompiler.secondPassOptimization</outbound>
                <outbound type="feature" confirmed="no">org.mvel.ExpressionCompiler.setExpression(java.lang.String)</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.ExpressionCompiler.verifying</outbound>
                <inbound type="feature" confirmed="yes">org.mvel.PropertyVerifier.getMethod(java.lang.Class, java.lang.String)</inbound>
            </feature>
            <feature confirmed="no">
                <name>org.mvel.ExpressionCompiler.LITERALS</name>
                <inbound type="feature" confirmed="yes">org.mvel.ExpressionCompiler._compile()</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.ExpressionCompiler._compile()</name>
                <outbound type="class" confirmed="no">java.lang.Class</outbound>
                <outbound type="class" confirmed="no">java.lang.Integer</outbound>
                <outbound type="feature" confirmed="no">java.lang.Integer.Integer(int)</outbound>
                <outbound type="feature" confirmed="no">java.lang.Integer.intValue()</outbound>
                <outbound type="class" confirmed="no">java.lang.Object</outbound>
                <outbound type="class" confirmed="no">java.lang.RuntimeException</outbound>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="class" confirmed="no">java.lang.ThreadLocal</outbound>
                <outbound type="feature" confirmed="no">java.lang.ThreadLocal.set(java.lang.Object)</outbound>
                <outbound type="class" confirmed="no">java.lang.Throwable</outbound>
                <outbound type="feature" confirmed="no">java.lang.Throwable.getMessage()</outbound>
                <outbound type="class" confirmed="no">java.util.Map</outbound>
                <outbound type="feature" confirmed="no">java.util.Map.get(java.lang.Object)</outbound>
                <outbound type="class" confirmed="yes">org.mvel.ASTIterator</outbound>
                <outbound type="class" confirmed="yes">org.mvel.ASTLinkedList</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.ASTLinkedList.ASTLinkedList()</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.ASTLinkedList.addTokenNode(org.mvel.ASTNode)</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.ASTLinkedList.addTokenNode(org.mvel.ASTNode, org.mvel.ASTNode)</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.ASTLinkedList.finish()</outbound>
                <outbound type="class" confirmed="yes">org.mvel.ASTNode</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.ASTNode.fields</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.ASTNode.getEgressType()</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.ASTNode.getLiteralValue()</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.ASTNode.getNameAsArray()</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.ASTNode.getOperator()</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.ASTNode.getReducedValueAccelerated(java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory)</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.ASTNode.isLiteral()</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.ASTNode.isOperator()</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.ASTNode.isOperator(java.lang.Integer)</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.ASTNode.setAccessor(org.mvel.Accessor)</outbound>
                <outbound type="class" confirmed="yes">org.mvel.Accessor</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.CompileException.CompileException(java.lang.String)</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.CompileException.CompileException(java.lang.String, java.lang.Throwable)</outbound>
                <outbound type="class" confirmed="yes">org.mvel.CompiledExpression</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.CompiledExpression.CompiledExpression(org.mvel.ASTIterator, java.lang.String, java.lang.Class, org.mvel.ParserContext, boolean)</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.ExpressionCompiler.ExpressionCompiler(char[], org.mvel.ParserContext)</outbound>
                <outbound type="feature" confirmed="no">org.mvel.ExpressionCompiler.LITERALS</outbound>
                <outbound type="feature" confirmed="no">org.mvel.ExpressionCompiler.arithmeticFunctionReduction(int)</outbound>
                <outbound type="feature" confirmed="no">org.mvel.ExpressionCompiler.dStack</outbound>
                <outbound type="feature" confirmed="no">org.mvel.ExpressionCompiler.debugSymbols</outbound>
                <outbound type="feature" confirmed="no">org.mvel.ExpressionCompiler.fields</outbound>
                <outbound type="feature" confirmed="no">org.mvel.ExpressionCompiler.getCurrentSourceFileName()</outbound>
                <outbound type="feature" confirmed="no">org.mvel.ExpressionCompiler.getParserContext()</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.ExpressionCompiler.getReturnType()</outbound>
                <outbound type="feature" confirmed="no">org.mvel.ExpressionCompiler.isArithmeticOperator(int)</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.ExpressionCompiler.isBooleanOperator(int)</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.ExpressionCompiler.isLiteralOnly()</outbound>
                <outbound type="feature" confirmed="no">org.mvel.ExpressionCompiler.literalOnly</outbound>
                <outbound type="feature" confirmed="no">org.mvel.ExpressionCompiler.nextToken()</outbound>
                <outbound type="feature" confirmed="no">org.mvel.ExpressionCompiler.nextTokenSkipSymbols()</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.ExpressionCompiler.pCtx</outbound>
                <outbound type="feature" confirmed="no">org.mvel.ExpressionCompiler.parserContext</outbound>
                <outbound type="feature" confirmed="no">org.mvel.ExpressionCompiler.reduce()</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.ExpressionCompiler.returnType</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.ExpressionCompiler.secondPassOptimization</outbound>
                <outbound type="feature" confirmed="no">org.mvel.ExpressionCompiler.stk</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.ExpressionCompiler.verify(org.mvel.ParserContext, org.mvel.ASTNode)</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.ExpressionCompiler.verifying</outbound>
                <outbound type="class" confirmed="yes">org.mvel.ParserContext</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.ParserContext.initializeTables()</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.ParserContext.isDebugSymbols()</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.ParserContext.processTables()</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.ast.LiteralNode.LiteralNode(java.lang.Object)</outbound>
                <outbound type="class" confirmed="yes">org.mvel.ast.Substatement</outbound>
                <outbound type="class" confirmed="yes">org.mvel.integration.VariableResolverFactory</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.util.CompilerTools.optimizeAST(org.mvel.ASTLinkedList, boolean)</outbound>
                <outbound type="class" confirmed="yes">org.mvel.util.ExecutionStack</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.util.ExecutionStack.ExecutionStack()</outbound>
                <outbound type="class" confirmed="yes">org.mvel.util.Stack</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.util.Stack.isEmpty()</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.util.Stack.pop()</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.util.Stack.push(java.lang.Object, java.lang.Object)</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.util.Stack.push(java.lang.Object, java.lang.Object, java.lang.Object)</outbound>
                <inbound type="feature" confirmed="yes">org.mvel.ExpressionCompiler.compile(org.mvel.ParserContext)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.ExpressionCompiler.verify(org.mvel.ParserContext, org.mvel.ASTNode)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.PropertyVerifier.getMethod(java.lang.Class, java.lang.String)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.util.ParseTools.subCompileExpression(char[])</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.util.ParseTools.subCompileExpression(java.lang.String)</inbound>
            </feature>
            <feature confirmed="no">
                <name>org.mvel.ExpressionCompiler.addFatalError(java.lang.String)</name>
                <inbound type="feature" confirmed="yes">org.mvel.ExpressionCompiler.verify(org.mvel.ParserContext, org.mvel.ASTNode)</inbound>
            </feature>
            <feature confirmed="no">
                <name>org.mvel.ExpressionCompiler.arithmeticFunctionReduction(int)</name>
                <inbound type="feature" confirmed="yes">org.mvel.ExpressionCompiler._compile()</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.ExpressionCompiler.compile()</name>
                <outbound type="class" confirmed="yes">org.mvel.CompiledExpression</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.ExpressionCompiler.compile(org.mvel.ParserContext)</outbound>
                <outbound type="class" confirmed="yes">org.mvel.ParserContext</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.ParserContext.ParserContext()</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.ExpressionCompiler.compile(org.mvel.ParserContext)</name>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="class" confirmed="no">java.lang.StringBuffer</outbound>
                <outbound type="feature" confirmed="no">java.lang.StringBuffer.StringBuffer(java.lang.String)</outbound>
                <outbound type="feature" confirmed="no">java.lang.StringBuffer.append(int)</outbound>
                <outbound type="feature" confirmed="no">java.lang.StringBuffer.append(java.lang.String)</outbound>
                <outbound type="feature" confirmed="no">java.lang.StringBuffer.toString()</outbound>
                <outbound type="class" confirmed="no">java.util.List</outbound>
                <outbound type="feature" confirmed="no">java.util.List.size()</outbound>
                <outbound type="class" confirmed="yes">org.mvel.AbstractParser</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.CompileException.CompileException(java.lang.String, java.util.List)</outbound>
                <outbound type="class" confirmed="yes">org.mvel.CompiledExpression</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.ExpressionCompiler._compile()</outbound>
                <outbound type="feature" confirmed="no">org.mvel.ExpressionCompiler.contextControl(int, org.mvel.ParserContext, org.mvel.AbstractParser)</outbound>
                <outbound type="feature" confirmed="no">org.mvel.ExpressionCompiler.debugSymbols</outbound>
                <outbound type="feature" confirmed="no">org.mvel.ExpressionCompiler.newContext(org.mvel.ParserContext)</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.ExpressionCompiler.pCtx</outbound>
                <outbound type="feature" confirmed="no">org.mvel.ExpressionCompiler.removeContext()</outbound>
                <outbound type="class" confirmed="yes">org.mvel.ParserContext</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.ParserContext.getErrorList()</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.ParserContext.isDebugSymbols()</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.ParserContext.isFatalError()</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.ParserContext.setDebugSymbols(boolean)</outbound>
                <inbound type="feature" confirmed="yes">org.mvel.ExpressionCompiler.compile()</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.MVEL.compileExpression(char[], java.util.Map, java.util.Map, java.lang.String)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.MVEL.compileExpression(java.lang.String, java.util.Map, java.util.Map, java.lang.String)</inbound>
            </feature>
            <feature confirmed="no">
                <name>org.mvel.ExpressionCompiler.contextControl(int, org.mvel.ParserContext, org.mvel.AbstractParser)</name>
                <inbound type="feature" confirmed="yes">org.mvel.ExpressionCompiler.compile(org.mvel.ParserContext)</inbound>
            </feature>
            <feature confirmed="no">
                <name>org.mvel.ExpressionCompiler.dStack</name>
                <inbound type="feature" confirmed="yes">org.mvel.ExpressionCompiler._compile()</inbound>
            </feature>
            <feature confirmed="no">
                <name>org.mvel.ExpressionCompiler.debugSymbols</name>
                <inbound type="feature" confirmed="yes">org.mvel.ExpressionCompiler._compile()</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.ExpressionCompiler.compile(org.mvel.ParserContext)</inbound>
            </feature>
            <feature confirmed="no">
                <name>org.mvel.ExpressionCompiler.expr</name>
                <inbound type="feature" confirmed="yes">org.mvel.ExpressionCompiler.getExpression()</inbound>
            </feature>
            <feature confirmed="no">
                <name>org.mvel.ExpressionCompiler.fields</name>
                <inbound type="feature" confirmed="yes">org.mvel.ExpressionCompiler._compile()</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.ExpressionCompiler.verify(org.mvel.ParserContext, org.mvel.ASTNode)</inbound>
            </feature>
            <feature confirmed="no">
                <name>org.mvel.ExpressionCompiler.getCurrentSourceFileName()</name>
                <inbound type="feature" confirmed="yes">org.mvel.ExpressionCompiler._compile()</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.ExpressionCompiler.getExpression()</name>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="feature" confirmed="no">java.lang.String.String(char[])</outbound>
                <outbound type="feature" confirmed="no">org.mvel.ExpressionCompiler.expr</outbound>
            </feature>
            <feature confirmed="no">
                <name>org.mvel.ExpressionCompiler.getParserContext()</name>
                <inbound type="feature" confirmed="yes">org.mvel.ExpressionCompiler._compile()</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.ExpressionCompiler.verify(org.mvel.ParserContext, org.mvel.ASTNode)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.ExpressionCompiler.getParserContextState()</name>
                <outbound type="feature" confirmed="yes">org.mvel.ExpressionCompiler.pCtx</outbound>
                <outbound type="class" confirmed="yes">org.mvel.ParserContext</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.ExpressionCompiler.getReturnType()</name>
                <outbound type="class" confirmed="no">java.lang.Class</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.ExpressionCompiler.returnType</outbound>
                <inbound type="feature" confirmed="yes">org.mvel.ExpressionCompiler._compile()</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.PropertyVerifier.getMethod(java.lang.Class, java.lang.String)</inbound>
            </feature>
            <feature confirmed="no">
                <name>org.mvel.ExpressionCompiler.isArithmeticOperator(int)</name>
                <inbound type="feature" confirmed="yes">org.mvel.ExpressionCompiler._compile()</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.ExpressionCompiler.isBooleanOperator(int)</name>
                <inbound type="feature" confirmed="yes">org.mvel.ExpressionCompiler._compile()</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.ExpressionCompiler.isLiteralOnly()</name>
                <outbound type="feature" confirmed="no">org.mvel.ExpressionCompiler.literalOnly</outbound>
                <inbound type="feature" confirmed="yes">org.mvel.ExpressionCompiler._compile()</inbound>
            </feature>
            <feature confirmed="no">
                <name>org.mvel.ExpressionCompiler.isReservedWord(java.lang.String)</name>
                <inbound type="feature" confirmed="yes">org.mvel.ExpressionCompiler.verify(org.mvel.ParserContext, org.mvel.ASTNode)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.ExpressionCompiler.isVerifying()</name>
                <outbound type="feature" confirmed="yes">org.mvel.ExpressionCompiler.verifying</outbound>
            </feature>
            <feature confirmed="no">
                <name>org.mvel.ExpressionCompiler.literalOnly</name>
                <inbound type="feature" confirmed="yes">org.mvel.ExpressionCompiler._compile()</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.ExpressionCompiler.isLiteralOnly()</inbound>
            </feature>
            <feature confirmed="no">
                <name>org.mvel.ExpressionCompiler.newContext(org.mvel.ParserContext)</name>
                <inbound type="feature" confirmed="yes">org.mvel.ExpressionCompiler.compile(org.mvel.ParserContext)</inbound>
            </feature>
            <feature confirmed="no">
                <name>org.mvel.ExpressionCompiler.nextToken()</name>
                <inbound type="feature" confirmed="yes">org.mvel.ExpressionCompiler._compile()</inbound>
            </feature>
            <feature confirmed="no">
                <name>org.mvel.ExpressionCompiler.nextTokenSkipSymbols()</name>
                <inbound type="feature" confirmed="yes">org.mvel.ExpressionCompiler._compile()</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.ExpressionCompiler.pCtx</name>
                <outbound type="class" confirmed="yes">org.mvel.ParserContext</outbound>
                <inbound type="feature" confirmed="yes">org.mvel.ExpressionCompiler.ExpressionCompiler(char[], org.mvel.ParserContext)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.ExpressionCompiler._compile()</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.ExpressionCompiler.compile(org.mvel.ParserContext)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.ExpressionCompiler.getParserContextState()</inbound>
            </feature>
            <feature confirmed="no">
                <name>org.mvel.ExpressionCompiler.parserContext</name>
                <inbound type="feature" confirmed="yes">org.mvel.ExpressionCompiler._compile()</inbound>
            </feature>
            <feature confirmed="no">
                <name>org.mvel.ExpressionCompiler.reduce()</name>
                <inbound type="feature" confirmed="yes">org.mvel.ExpressionCompiler._compile()</inbound>
            </feature>
            <feature confirmed="no">
                <name>org.mvel.ExpressionCompiler.removeContext()</name>
                <inbound type="feature" confirmed="yes">org.mvel.ExpressionCompiler.compile(org.mvel.ParserContext)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.ExpressionCompiler.removeParserContext()</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.ExpressionCompiler.removeParserContext()</name>
                <outbound type="feature" confirmed="no">org.mvel.ExpressionCompiler.removeContext()</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.ExpressionCompiler.returnType</name>
                <outbound type="class" confirmed="no">java.lang.Class</outbound>
                <inbound type="feature" confirmed="yes">org.mvel.ExpressionCompiler._compile()</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.ExpressionCompiler.getReturnType()</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.ExpressionCompiler.setReturnType(java.lang.Class)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.ExpressionCompiler.verify(org.mvel.ParserContext, org.mvel.ASTNode)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.ExpressionCompiler.secondPassOptimization</name>
                <inbound type="feature" confirmed="yes">org.mvel.ExpressionCompiler.ExpressionCompiler(char[])</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.ExpressionCompiler.ExpressionCompiler(char[], org.mvel.ParserContext)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.ExpressionCompiler.ExpressionCompiler(java.lang.String)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.ExpressionCompiler.ExpressionCompiler(java.lang.String, boolean)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.ExpressionCompiler._compile()</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.ExpressionCompiler.verify(org.mvel.ParserContext, org.mvel.ASTNode)</inbound>
            </feature>
            <feature confirmed="no">
                <name>org.mvel.ExpressionCompiler.setExpression(char[])</name>
                <inbound type="feature" confirmed="yes">org.mvel.ExpressionCompiler.ExpressionCompiler(char[])</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.ExpressionCompiler.ExpressionCompiler(char[], org.mvel.ParserContext)</inbound>
            </feature>
            <feature confirmed="no">
                <name>org.mvel.ExpressionCompiler.setExpression(java.lang.String)</name>
                <inbound type="feature" confirmed="yes">org.mvel.ExpressionCompiler.ExpressionCompiler(java.lang.String)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.ExpressionCompiler.ExpressionCompiler(java.lang.String, boolean)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.ExpressionCompiler.setReturnType(java.lang.Class)</name>
                <outbound type="class" confirmed="no">java.lang.Class</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.ExpressionCompiler.returnType</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.ExpressionCompiler.setVerifying(boolean)</name>
                <outbound type="feature" confirmed="yes">org.mvel.ExpressionCompiler.verifying</outbound>
            </feature>
            <feature confirmed="no">
                <name>org.mvel.ExpressionCompiler.stk</name>
                <inbound type="feature" confirmed="yes">org.mvel.ExpressionCompiler._compile()</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.ExpressionCompiler.verify(org.mvel.ParserContext, org.mvel.ASTNode)</name>
                <outbound type="class" confirmed="no">java.lang.Class</outbound>
                <outbound type="feature" confirmed="no">java.lang.Class.forName(java.lang.String)</outbound>
                <outbound type="class" confirmed="no">java.lang.ClassNotFoundException</outbound>
                <outbound type="class" confirmed="no">java.lang.Integer</outbound>
                <outbound type="feature" confirmed="no">java.lang.Integer.Integer(int)</outbound>
                <outbound type="feature" confirmed="no">java.lang.NoClassDefFoundError.NoClassDefFoundError(java.lang.String)</outbound>
                <outbound type="class" confirmed="no">java.lang.Object</outbound>
                <outbound type="feature" confirmed="no">java.lang.Object.getClass()</outbound>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="feature" confirmed="no">java.lang.String.String(char[], int, int)</outbound>
                <outbound type="feature" confirmed="no">java.lang.String.trim()</outbound>
                <outbound type="class" confirmed="no">java.lang.StringBuffer</outbound>
                <outbound type="feature" confirmed="no">java.lang.StringBuffer.StringBuffer(java.lang.String)</outbound>
                <outbound type="feature" confirmed="no">java.lang.StringBuffer.append(java.lang.String)</outbound>
                <outbound type="feature" confirmed="no">java.lang.StringBuffer.toString()</outbound>
                <outbound type="feature" confirmed="no">java.lang.Throwable.getMessage()</outbound>
                <outbound type="class" confirmed="yes">org.mvel.ASTNode</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.ASTNode.getAbsoluteName()</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.ASTNode.getEgressType()</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.ASTNode.getLiteralValue()</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.ASTNode.getNameAsArray()</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.ASTNode.isAssignment()</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.ASTNode.isDiscard()</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.ASTNode.isIdentifier()</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.ASTNode.isLiteral()</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.ASTNode.isOperator()</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.ASTNode.isOperator(java.lang.Integer)</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.CompileException.CompileException(java.lang.String)</outbound>
                <outbound type="class" confirmed="yes">org.mvel.CompiledExpression</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.ExpressionCompiler.ExpressionCompiler(java.lang.String)</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.ExpressionCompiler._compile()</outbound>
                <outbound type="feature" confirmed="no">org.mvel.ExpressionCompiler.addFatalError(java.lang.String)</outbound>
                <outbound type="feature" confirmed="no">org.mvel.ExpressionCompiler.fields</outbound>
                <outbound type="feature" confirmed="no">org.mvel.ExpressionCompiler.getParserContext()</outbound>
                <outbound type="feature" confirmed="no">org.mvel.ExpressionCompiler.isReservedWord(java.lang.String)</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.ExpressionCompiler.returnType</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.ExpressionCompiler.secondPassOptimization</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.ExpressionCompiler.verifying</outbound>
                <outbound type="class" confirmed="yes">org.mvel.ParserContext</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.ParserContext.addInput(java.lang.String, java.lang.Class)</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.ParserContext.addVariable(java.lang.String, java.lang.Class)</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.ParserContext.hasVarOrInput(java.lang.String)</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.PropertyVerifier.PropertyVerifier(char[], org.mvel.ParserContext)</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.PropertyVerifier.analyze()</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.PropertyVerifier.isResolvedExternally()</outbound>
                <outbound type="class" confirmed="yes">org.mvel.ast.Assignment</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.ast.Assignment.isNewDeclaration()</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.ast.LiteralNode.LiteralNode(java.lang.Object)</outbound>
                <inbound type="feature" confirmed="yes">org.mvel.ExpressionCompiler._compile()</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.ExpressionCompiler.verifying</name>
                <inbound type="feature" confirmed="yes">org.mvel.ExpressionCompiler.ExpressionCompiler(char[])</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.ExpressionCompiler.ExpressionCompiler(char[], org.mvel.ParserContext)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.ExpressionCompiler.ExpressionCompiler(java.lang.String)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.ExpressionCompiler.ExpressionCompiler(java.lang.String, boolean)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.ExpressionCompiler._compile()</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.ExpressionCompiler.isVerifying()</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.ExpressionCompiler.setVerifying(boolean)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.ExpressionCompiler.verify(org.mvel.ParserContext, org.mvel.ASTNode)</inbound>
            </feature>
        </class>
        <class confirmed="yes">
            <name>org.mvel.ForeachContext</name>
            <outbound type="class" confirmed="no">java.lang.Object</outbound>
            <inbound type="feature" confirmed="yes">org.mvel.TemplateCompiler.compileExpression()</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.TemplateInterpreter.execute(java.lang.Object, java.util.Map, org.mvel.TemplateRegistry)</inbound>
            <feature confirmed="yes">
                <name>org.mvel.ForeachContext.ForeachContext()</name>
                <outbound type="feature" confirmed="no">java.lang.Object.Object()</outbound>
                <inbound type="feature" confirmed="yes">org.mvel.TemplateCompiler.compileExpression()</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.ForeachContext.ForeachContext(java.lang.String)</name>
                <outbound type="feature" confirmed="no">java.lang.Object.Object()</outbound>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.ForeachContext.seperator</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.ForeachContext.ForeachContext(java.lang.String, int)</name>
                <outbound type="feature" confirmed="no">java.lang.Object.Object()</outbound>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.ForeachContext.count</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.ForeachContext.seperator</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.ForeachContext.ForeachContext(java.lang.String, int, java.lang.String[], java.lang.String[])</name>
                <outbound type="feature" confirmed="no">java.lang.Object.Object()</outbound>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.ForeachContext.aliases</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.ForeachContext.count</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.ForeachContext.names</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.ForeachContext.seperator</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.ForeachContext.aliases</name>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <inbound type="feature" confirmed="yes">org.mvel.ForeachContext.ForeachContext(java.lang.String, int, java.lang.String[], java.lang.String[])</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.ForeachContext.getAliases()</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.ForeachContext.setAliases(java.lang.String[])</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.ForeachContext.clone()</name>
                <outbound type="class" confirmed="no">java.lang.CloneNotSupportedException</outbound>
                <outbound type="class" confirmed="no">java.lang.Object</outbound>
                <inbound type="feature" confirmed="yes">org.mvel.TemplateInterpreter.execute(java.lang.Object, java.util.Map, org.mvel.TemplateRegistry)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.ForeachContext.count</name>
                <inbound type="feature" confirmed="yes">org.mvel.ForeachContext.ForeachContext(java.lang.String, int)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.ForeachContext.ForeachContext(java.lang.String, int, java.lang.String[], java.lang.String[])</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.ForeachContext.getCount()</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.ForeachContext.incrementCount()</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.ForeachContext.setCount(int)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.ForeachContext.getAliases()</name>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.ForeachContext.aliases</outbound>
                <inbound type="feature" confirmed="yes">org.mvel.TemplateInterpreter.execute(java.lang.Object, java.util.Map, org.mvel.TemplateRegistry)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.ForeachContext.getCount()</name>
                <outbound type="feature" confirmed="yes">org.mvel.ForeachContext.count</outbound>
                <inbound type="feature" confirmed="yes">org.mvel.TemplateInterpreter.execute(java.lang.Object, java.util.Map, org.mvel.TemplateRegistry)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.ForeachContext.getIter()</name>
                <outbound type="class" confirmed="no">java.util.Iterator</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.ForeachContext.iter</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.ForeachContext.getItererators()</name>
                <outbound type="class" confirmed="no">java.util.Iterator</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.ForeachContext.iter</outbound>
                <inbound type="feature" confirmed="yes">org.mvel.TemplateInterpreter.execute(java.lang.Object, java.util.Map, org.mvel.TemplateRegistry)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.ForeachContext.getNames()</name>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.ForeachContext.names</outbound>
                <inbound type="feature" confirmed="yes">org.mvel.TemplateInterpreter.execute(java.lang.Object, java.util.Map, org.mvel.TemplateRegistry)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.ForeachContext.getSeperator()</name>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.ForeachContext.seperator</outbound>
                <inbound type="feature" confirmed="yes">org.mvel.TemplateInterpreter.execute(java.lang.Object, java.util.Map, org.mvel.TemplateRegistry)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.ForeachContext.incrementCount()</name>
                <outbound type="feature" confirmed="yes">org.mvel.ForeachContext.count</outbound>
                <inbound type="feature" confirmed="yes">org.mvel.TemplateInterpreter.execute(java.lang.Object, java.util.Map, org.mvel.TemplateRegistry)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.ForeachContext.iter</name>
                <outbound type="class" confirmed="no">java.util.Iterator</outbound>
                <inbound type="feature" confirmed="yes">org.mvel.ForeachContext.getIter()</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.ForeachContext.getItererators()</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.ForeachContext.setIter(java.util.Iterator[])</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.ForeachContext.setIterators(java.util.Iterator[])</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.ForeachContext.names</name>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <inbound type="feature" confirmed="yes">org.mvel.ForeachContext.ForeachContext(java.lang.String, int, java.lang.String[], java.lang.String[])</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.ForeachContext.getNames()</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.ForeachContext.setNames(java.lang.String[])</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.ForeachContext.seperator</name>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <inbound type="feature" confirmed="yes">org.mvel.ForeachContext.ForeachContext(java.lang.String)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.ForeachContext.ForeachContext(java.lang.String, int)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.ForeachContext.ForeachContext(java.lang.String, int, java.lang.String[], java.lang.String[])</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.ForeachContext.getSeperator()</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.ForeachContext.setSeperator(java.lang.String)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.ForeachContext.setAliases(java.lang.String[])</name>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.ForeachContext.aliases</outbound>
                <inbound type="feature" confirmed="yes">org.mvel.TemplateCompiler.compileExpression()</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.ForeachContext.setCount(int)</name>
                <outbound type="feature" confirmed="yes">org.mvel.ForeachContext.count</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.ForeachContext.setIter(java.util.Iterator[])</name>
                <outbound type="class" confirmed="no">java.util.Iterator</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.ForeachContext.iter</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.ForeachContext.setIterators(java.util.Iterator[])</name>
                <outbound type="class" confirmed="no">java.util.Iterator</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.ForeachContext.iter</outbound>
                <inbound type="feature" confirmed="yes">org.mvel.TemplateInterpreter.execute(java.lang.Object, java.util.Map, org.mvel.TemplateRegistry)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.ForeachContext.setNames(java.lang.String[])</name>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.ForeachContext.names</outbound>
                <inbound type="feature" confirmed="yes">org.mvel.TemplateCompiler.compileExpression()</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.ForeachContext.setSeperator(java.lang.String)</name>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.ForeachContext.seperator</outbound>
                <inbound type="feature" confirmed="yes">org.mvel.TemplateCompiler.compileExpression()</inbound>
            </feature>
        </class>
        <class confirmed="yes">
            <name>org.mvel.ImmutableElementException</name>
            <outbound type="class" confirmed="no">java.lang.RuntimeException</outbound>
            <feature confirmed="yes">
                <name>org.mvel.ImmutableElementException.ImmutableElementException()</name>
                <outbound type="feature" confirmed="no">java.lang.RuntimeException.RuntimeException()</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.ImmutableElementException.ImmutableElementException(java.lang.String)</name>
                <outbound type="feature" confirmed="no">java.lang.RuntimeException.RuntimeException(java.lang.String)</outbound>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <inbound type="feature" confirmed="yes">org.mvel.util.FastList$1.remove()</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.ImmutableElementException.ImmutableElementException(java.lang.String, java.lang.Throwable)</name>
                <outbound type="feature" confirmed="no">java.lang.RuntimeException.RuntimeException(java.lang.String, java.lang.Throwable)</outbound>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="class" confirmed="no">java.lang.Throwable</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.ImmutableElementException.ImmutableElementException(java.lang.Throwable)</name>
                <outbound type="feature" confirmed="no">java.lang.RuntimeException.RuntimeException(java.lang.Throwable)</outbound>
                <outbound type="class" confirmed="no">java.lang.Throwable</outbound>
            </feature>
        </class>
        <class confirmed="yes">
            <name>org.mvel.MVEL</name>
            <outbound type="class" confirmed="no">java.lang.Object</outbound>
            <feature confirmed="yes">
                <name>org.mvel.MVEL.ADVANCED_DEBUG</name>
                <inbound type="feature" confirmed="yes">org.mvel.MVEL.isAdvancedDebugging()</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.MVEL.static {}</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.MVEL.ADVANCED_DEBUGGING_FILE</name>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <inbound type="feature" confirmed="yes">org.mvel.MVEL.getDebuggingOutputFileName()</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.MVEL.static {}</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.MVEL.CODENAME</name>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.MVEL.DEBUG_FILE</name>
                <inbound type="feature" confirmed="yes">org.mvel.MVEL.isFileDebugging()</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.MVEL.static {}</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.MVEL.MVEL()</name>
                <outbound type="feature" confirmed="no">java.lang.Object.Object()</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.MVEL.NAME</name>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.MVEL.NO_JIT</name>
                <inbound type="feature" confirmed="yes">org.mvel.MVEL.static {}</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.TemplateInterpreter.static {}</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.MVEL.OPTIMIZER</name>
                <inbound type="feature" confirmed="yes">org.mvel.MVEL.isOptimizationEnabled()</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.MVEL.static {}</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.MVEL.THREAD_SAFE</name>
                <inbound type="feature" confirmed="yes">org.mvel.AbstractParser.configureFactory()</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.MVEL.isThreadSafe()</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.MVEL.setThreadSafe(boolean)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.MVEL.static {}</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.MVELTemplateRegistry.registerTemplate(java.lang.String, java.lang.String)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.PropertyAccessor.configureFactory()</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.TemplateInterpreter.static {}</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.MVEL.VERSION</name>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.MVEL.VERSION_SUB</name>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.MVEL.WEAK_CACHE</name>
                <inbound type="feature" confirmed="yes">org.mvel.MVEL.static {}</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.TemplateInterpreter.static {}</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.MVEL.compileExpression(char[])</name>
                <outbound type="class" confirmed="no">java.io.Serializable</outbound>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="class" confirmed="no">java.util.Map</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.MVEL.compileExpression(char[], java.util.Map, java.util.Map, java.lang.String)</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.MVEL.compileExpression(char[], java.util.Map)</name>
                <outbound type="class" confirmed="no">java.io.Serializable</outbound>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="class" confirmed="no">java.util.Map</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.MVEL.compileExpression(char[], java.util.Map, java.util.Map, java.lang.String)</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.MVEL.compileExpression(char[], java.util.Map, java.util.Map)</name>
                <outbound type="class" confirmed="no">java.io.Serializable</outbound>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="class" confirmed="no">java.util.Map</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.MVEL.compileExpression(char[], java.util.Map, java.util.Map, java.lang.String)</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.MVEL.compileExpression(char[], java.util.Map, java.util.Map, java.lang.String)</name>
                <outbound type="class" confirmed="no">java.io.Serializable</outbound>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="class" confirmed="no">java.util.Map</outbound>
                <outbound type="class" confirmed="yes">org.mvel.CompiledExpression</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.ExpressionCompiler.ExpressionCompiler(char[])</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.ExpressionCompiler.compile(org.mvel.ParserContext)</outbound>
                <outbound type="class" confirmed="yes">org.mvel.ParserContext</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.ParserContext.ParserContext(java.util.Map, java.util.Map, java.lang.String)</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.util.ParseTools.optimizeTree(org.mvel.CompiledExpression)</outbound>
                <inbound type="feature" confirmed="yes">org.mvel.MVEL.compileExpression(char[])</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.MVEL.compileExpression(char[], java.util.Map)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.MVEL.compileExpression(char[], java.util.Map, java.util.Map)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.MVEL.compileExpression(java.lang.String)</name>
                <outbound type="class" confirmed="no">java.io.Serializable</outbound>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="class" confirmed="no">java.util.Map</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.MVEL.compileExpression(java.lang.String, java.util.Map, java.util.Map, java.lang.String)</outbound>
                <inbound type="feature" confirmed="yes">org.mvel.TemplateInterpreter.execute(java.lang.Object, java.util.Map, org.mvel.TemplateRegistry)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.MVEL.compileExpression(java.lang.String, java.util.Map)</name>
                <outbound type="class" confirmed="no">java.io.Serializable</outbound>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="class" confirmed="no">java.util.Map</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.MVEL.compileExpression(java.lang.String, java.util.Map, java.util.Map, java.lang.String)</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.MVEL.compileExpression(java.lang.String, java.util.Map, java.util.Map)</name>
                <outbound type="class" confirmed="no">java.io.Serializable</outbound>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="class" confirmed="no">java.util.Map</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.MVEL.compileExpression(java.lang.String, java.util.Map, java.util.Map, java.lang.String)</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.MVEL.compileExpression(java.lang.String, java.util.Map, java.util.Map, java.lang.String)</name>
                <outbound type="class" confirmed="no">java.io.Serializable</outbound>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="class" confirmed="no">java.util.Map</outbound>
                <outbound type="class" confirmed="yes">org.mvel.CompiledExpression</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.ExpressionCompiler.ExpressionCompiler(java.lang.String)</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.ExpressionCompiler.compile(org.mvel.ParserContext)</outbound>
                <outbound type="class" confirmed="yes">org.mvel.ParserContext</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.ParserContext.ParserContext(java.util.Map, java.util.Map, java.lang.String)</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.util.ParseTools.optimizeTree(org.mvel.CompiledExpression)</outbound>
                <inbound type="feature" confirmed="yes">org.mvel.MVEL.compileExpression(java.lang.String)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.MVEL.compileExpression(java.lang.String, java.util.Map)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.MVEL.compileExpression(java.lang.String, java.util.Map, java.util.Map)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.MVEL.compileSetExpression(char[])</name>
                <outbound type="class" confirmed="no">java.io.Serializable</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.CompiledSetExpression.CompiledSetExpression(char[])</outbound>
                <inbound type="feature" confirmed="yes">org.mvel.ast.AssignmentNode.AssignmentNode(char[], int, int, java.lang.String)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.ast.AssignmentNode.getReducedValueAccelerated(java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.ast.DeepAssignmentNode.DeepAssignmentNode(char[], int, int, java.lang.String)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.ast.DeepAssignmentNode.getReducedValueAccelerated(java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.MVEL.compileSetExpression(java.lang.String)</name>
                <outbound type="class" confirmed="no">java.io.Serializable</outbound>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="feature" confirmed="no">java.lang.String.toCharArray()</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.CompiledSetExpression.CompiledSetExpression(char[])</outbound>
                <inbound type="feature" confirmed="yes">org.mvel.ast.WithNode$ParmValuePair.WithNode$ParmValuePair(java.lang.String, org.mvel.ExecutableStatement)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.MVEL.eval(char[], java.lang.Object, java.lang.Class)</name>
                <outbound type="class" confirmed="no">java.lang.Class</outbound>
                <outbound type="class" confirmed="no">java.lang.Object</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.DataConversion.convert(java.lang.Object, java.lang.Class)</outbound>
                <outbound type="class" confirmed="yes">org.mvel.EndWithValue</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.EndWithValue.getValue()</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.MVELInterpretedRuntime.MVELInterpretedRuntime(char[], java.lang.Object)</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.MVELInterpretedRuntime.parse()</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.util.ParseTools.handleParserEgress(java.lang.Object, boolean)</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.MVEL.eval(char[], java.lang.Object, java.util.Map)</name>
                <outbound type="class" confirmed="no">java.lang.Object</outbound>
                <outbound type="class" confirmed="no">java.util.Map</outbound>
                <outbound type="class" confirmed="yes">org.mvel.EndWithValue</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.EndWithValue.getValue()</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.MVELInterpretedRuntime.MVELInterpretedRuntime(char[], java.lang.Object, java.util.Map)</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.MVELInterpretedRuntime.parse()</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.util.ParseTools.handleParserEgress(java.lang.Object, boolean)</outbound>
                <inbound type="feature" confirmed="yes">org.mvel.TemplateInterpreter.execute(java.lang.Object, java.util.Map, org.mvel.TemplateRegistry)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.MVEL.eval(char[], java.lang.Object, java.util.Map, java.lang.Class)</name>
                <outbound type="class" confirmed="no">java.lang.Class</outbound>
                <outbound type="class" confirmed="no">java.lang.Object</outbound>
                <outbound type="class" confirmed="no">java.util.Map</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.DataConversion.convert(java.lang.Object, java.lang.Class)</outbound>
                <outbound type="class" confirmed="yes">org.mvel.EndWithValue</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.EndWithValue.getValue()</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.MVELInterpretedRuntime.MVELInterpretedRuntime(char[], java.lang.Object, java.util.Map)</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.MVELInterpretedRuntime.parse()</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.util.ParseTools.handleParserEgress(java.lang.Object, boolean)</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.MVEL.eval(char[], java.lang.Object, org.mvel.integration.VariableResolverFactory)</name>
                <outbound type="class" confirmed="no">java.lang.Object</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.MVELInterpretedRuntime.MVELInterpretedRuntime(char[], java.lang.Object, org.mvel.integration.VariableResolverFactory)</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.MVELInterpretedRuntime.parse()</outbound>
                <outbound type="class" confirmed="yes">org.mvel.integration.VariableResolverFactory</outbound>
                <inbound type="feature" confirmed="yes">org.mvel.ast.AssertNode.getReducedValue(java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.ast.AssignAdd.getReducedValue(java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.ast.AssignDiv.getReducedValue(java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.ast.AssignMult.getReducedValue(java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.ast.AssignSub.getReducedValue(java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.ast.AssignmentNode.getReducedValue(java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.ast.DeepAssignmentNode.getReducedValue(java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.ast.ForEachNode.getReducedValue(java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.ast.IfNode.getReducedValue(java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.ast.NewObjectNode.getReducedValue(java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.ast.RegExMatch.getReducedValue(java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.ast.ReturnNode.getReducedValue(java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.ast.Substatement.getReducedValue(java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.ast.TypeCast.getReducedValue(java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.ast.TypedVarNode.getReducedValue(java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.MVEL.eval(char[], java.lang.Object, org.mvel.integration.VariableResolverFactory, boolean)</name>
                <outbound type="class" confirmed="no">java.lang.Object</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.MVELInterpretedRuntime.MVELInterpretedRuntime(char[], java.lang.Object, org.mvel.integration.VariableResolverFactory, boolean)</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.MVELInterpretedRuntime.parse()</outbound>
                <outbound type="class" confirmed="yes">org.mvel.integration.VariableResolverFactory</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.MVEL.eval(char[], java.lang.Object, org.mvel.integration.VariableResolverFactory, java.lang.Class)</name>
                <outbound type="class" confirmed="no">java.lang.Class</outbound>
                <outbound type="class" confirmed="no">java.lang.Object</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.DataConversion.convert(java.lang.Object, java.lang.Class)</outbound>
                <outbound type="class" confirmed="yes">org.mvel.EndWithValue</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.EndWithValue.getValue()</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.MVELInterpretedRuntime.MVELInterpretedRuntime(char[], java.lang.Object, org.mvel.integration.VariableResolverFactory)</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.MVELInterpretedRuntime.parse()</outbound>
                <outbound type="class" confirmed="yes">org.mvel.integration.VariableResolverFactory</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.util.ParseTools.handleParserEgress(java.lang.Object, boolean)</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.MVEL.eval(char[], java.util.Map, java.lang.Class)</name>
                <outbound type="class" confirmed="no">java.lang.Class</outbound>
                <outbound type="class" confirmed="no">java.lang.Object</outbound>
                <outbound type="class" confirmed="no">java.util.Map</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.DataConversion.convert(java.lang.Object, java.lang.Class)</outbound>
                <outbound type="class" confirmed="yes">org.mvel.EndWithValue</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.EndWithValue.getValue()</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.MVELInterpretedRuntime.MVELInterpretedRuntime(char[], java.lang.Object, java.util.Map)</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.MVELInterpretedRuntime.parse()</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.util.ParseTools.handleParserEgress(java.lang.Object, boolean)</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.MVEL.eval(java.lang.String)</name>
                <outbound type="class" confirmed="no">java.lang.Object</outbound>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.MVELInterpretedRuntime.MVELInterpretedRuntime(java.lang.String)</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.MVELInterpretedRuntime.parse()</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.MVEL.eval(java.lang.String, java.lang.Object)</name>
                <outbound type="class" confirmed="no">java.lang.Object</outbound>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.MVELInterpretedRuntime.MVELInterpretedRuntime(java.lang.String, java.lang.Object)</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.MVELInterpretedRuntime.parse()</outbound>
                <inbound type="feature" confirmed="yes">org.mvel.MVEL.evalToString(java.lang.String, java.lang.Object)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.MVEL.eval(java.lang.String, java.lang.Object, java.lang.Class)</name>
                <outbound type="class" confirmed="no">java.lang.Class</outbound>
                <outbound type="class" confirmed="no">java.lang.Object</outbound>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.DataConversion.convert(java.lang.Object, java.lang.Class)</outbound>
                <outbound type="class" confirmed="yes">org.mvel.EndWithValue</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.EndWithValue.getValue()</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.MVELInterpretedRuntime.MVELInterpretedRuntime(java.lang.String, java.lang.Object)</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.MVELInterpretedRuntime.parse()</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.util.ParseTools.handleParserEgress(java.lang.Object, boolean)</outbound>
                <inbound type="feature" confirmed="yes">org.mvel.MVEL.evalToBoolean(java.lang.String, java.lang.Object)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.MVEL.eval(java.lang.String, java.lang.Object, java.util.Map)</name>
                <outbound type="class" confirmed="no">java.lang.Object</outbound>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="class" confirmed="no">java.util.Map</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.MVELInterpretedRuntime.MVELInterpretedRuntime(java.lang.String, java.lang.Object, java.util.Map)</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.MVELInterpretedRuntime.parse()</outbound>
                <inbound type="feature" confirmed="yes">org.mvel.MVEL.evalToString(java.lang.String, java.lang.Object, java.util.Map)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.TemplateInterpreter.execute(java.lang.Object, java.util.Map, org.mvel.TemplateRegistry)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.MVEL.eval(java.lang.String, java.lang.Object, java.util.Map, java.lang.Class)</name>
                <outbound type="class" confirmed="no">java.lang.Class</outbound>
                <outbound type="class" confirmed="no">java.lang.Object</outbound>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="class" confirmed="no">java.util.Map</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.DataConversion.convert(java.lang.Object, java.lang.Class)</outbound>
                <outbound type="class" confirmed="yes">org.mvel.EndWithValue</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.EndWithValue.getValue()</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.MVELInterpretedRuntime.MVELInterpretedRuntime(java.lang.String, java.lang.Object, java.util.Map)</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.MVELInterpretedRuntime.parse()</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.util.ParseTools.handleParserEgress(java.lang.Object, boolean)</outbound>
                <inbound type="feature" confirmed="yes">org.mvel.MVEL.evalToBoolean(java.lang.String, java.lang.Object, java.util.Map)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.MVEL.eval(java.lang.String, java.lang.Object, org.mvel.integration.VariableResolverFactory)</name>
                <outbound type="class" confirmed="no">java.lang.Object</outbound>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.MVELInterpretedRuntime.MVELInterpretedRuntime(java.lang.String, java.lang.Object, org.mvel.integration.VariableResolverFactory)</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.MVELInterpretedRuntime.parse()</outbound>
                <outbound type="class" confirmed="yes">org.mvel.integration.VariableResolverFactory</outbound>
                <inbound type="feature" confirmed="yes">org.mvel.PropertyAccessor.getCollectionProperty(java.lang.Object, java.lang.String)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.PropertyAccessor.getMethod(java.lang.Object, java.lang.String)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.PropertyAccessor.set(java.lang.Object)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.ast.NewObjectNode.getReducedValue(java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.refl.ReflectiveAccessorOptimizer.optimizeSetAccessor(char[], java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory, boolean, java.lang.Object)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.MVEL.eval(java.lang.String, java.lang.Object, org.mvel.integration.VariableResolverFactory, boolean)</name>
                <outbound type="class" confirmed="no">java.lang.Object</outbound>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.MVELInterpretedRuntime.MVELInterpretedRuntime(java.lang.String, java.lang.Object, org.mvel.integration.VariableResolverFactory, boolean)</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.MVELInterpretedRuntime.parse()</outbound>
                <outbound type="class" confirmed="yes">org.mvel.integration.VariableResolverFactory</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.MVEL.eval(java.lang.String, java.lang.Object, org.mvel.integration.VariableResolverFactory, java.lang.Class)</name>
                <outbound type="class" confirmed="no">java.lang.Class</outbound>
                <outbound type="class" confirmed="no">java.lang.Object</outbound>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.DataConversion.convert(java.lang.Object, java.lang.Class)</outbound>
                <outbound type="class" confirmed="yes">org.mvel.EndWithValue</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.EndWithValue.getValue()</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.MVELInterpretedRuntime.MVELInterpretedRuntime(java.lang.String, java.lang.Object, org.mvel.integration.VariableResolverFactory)</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.MVELInterpretedRuntime.parse()</outbound>
                <outbound type="class" confirmed="yes">org.mvel.integration.VariableResolverFactory</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.util.ParseTools.handleParserEgress(java.lang.Object, boolean)</outbound>
                <inbound type="feature" confirmed="yes">org.mvel.MVEL.evalToBoolean(java.lang.String, java.lang.Object, org.mvel.integration.VariableResolverFactory)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.PropertyAccessor.set(java.lang.Object)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.refl.ReflectiveAccessorOptimizer.optimizeSetAccessor(char[], java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory, boolean, java.lang.Object)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.MVEL.eval(java.lang.String, java.util.Map)</name>
                <outbound type="class" confirmed="no">java.lang.Object</outbound>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="class" confirmed="no">java.util.Map</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.MVELInterpretedRuntime.MVELInterpretedRuntime(java.lang.String, java.lang.Object, java.util.Map)</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.MVELInterpretedRuntime.parse()</outbound>
                <inbound type="feature" confirmed="yes">org.mvel.MVEL.evalToString(java.lang.String, java.util.Map)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.MVEL.eval(java.lang.String, java.util.Map, java.lang.Class)</name>
                <outbound type="class" confirmed="no">java.lang.Class</outbound>
                <outbound type="class" confirmed="no">java.lang.Object</outbound>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="class" confirmed="no">java.util.Map</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.DataConversion.convert(java.lang.Object, java.lang.Class)</outbound>
                <outbound type="class" confirmed="yes">org.mvel.EndWithValue</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.EndWithValue.getValue()</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.MVELInterpretedRuntime.MVELInterpretedRuntime(java.lang.String, java.lang.Object, java.util.Map)</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.MVELInterpretedRuntime.parse()</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.util.ParseTools.handleParserEgress(java.lang.Object, boolean)</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.MVEL.eval(java.lang.String, org.mvel.integration.VariableResolverFactory)</name>
                <outbound type="class" confirmed="no">java.lang.Object</outbound>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.MVELInterpretedRuntime.MVELInterpretedRuntime(java.lang.String, org.mvel.integration.VariableResolverFactory)</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.MVELInterpretedRuntime.parse()</outbound>
                <outbound type="class" confirmed="yes">org.mvel.integration.VariableResolverFactory</outbound>
                <inbound type="feature" confirmed="yes">org.mvel.MVELSH.main(java.lang.String[])</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.MVEL.eval(java.lang.String, org.mvel.integration.VariableResolverFactory, java.lang.Class)</name>
                <outbound type="class" confirmed="no">java.lang.Class</outbound>
                <outbound type="class" confirmed="no">java.lang.Object</outbound>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.DataConversion.convert(java.lang.Object, java.lang.Class)</outbound>
                <outbound type="class" confirmed="yes">org.mvel.EndWithValue</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.EndWithValue.getValue()</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.MVELInterpretedRuntime.MVELInterpretedRuntime(java.lang.String, java.lang.Object, org.mvel.integration.VariableResolverFactory)</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.MVELInterpretedRuntime.parse()</outbound>
                <outbound type="class" confirmed="yes">org.mvel.integration.VariableResolverFactory</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.util.ParseTools.handleParserEgress(java.lang.Object, boolean)</outbound>
                <inbound type="feature" confirmed="yes">org.mvel.MVEL.evalToBoolean(java.lang.String, org.mvel.integration.VariableResolverFactory)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.MVEL.evalToBoolean(java.lang.String, java.lang.Object)</name>
                <outbound type="class" confirmed="no">java.lang.Boolean</outbound>
                <outbound type="class" confirmed="no">java.lang.Class</outbound>
                <outbound type="feature" confirmed="no">java.lang.Class.forName(java.lang.String)</outbound>
                <outbound type="class" confirmed="no">java.lang.ClassNotFoundException</outbound>
                <outbound type="feature" confirmed="no">java.lang.NoClassDefFoundError.NoClassDefFoundError(java.lang.String)</outbound>
                <outbound type="class" confirmed="no">java.lang.Object</outbound>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="feature" confirmed="no">java.lang.Throwable.getMessage()</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.MVEL.eval(java.lang.String, java.lang.Object, java.lang.Class)</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.MVEL.evalToBoolean(java.lang.String, java.lang.Object, java.util.Map)</name>
                <outbound type="class" confirmed="no">java.lang.Boolean</outbound>
                <outbound type="class" confirmed="no">java.lang.Class</outbound>
                <outbound type="feature" confirmed="no">java.lang.Class.forName(java.lang.String)</outbound>
                <outbound type="class" confirmed="no">java.lang.ClassNotFoundException</outbound>
                <outbound type="feature" confirmed="no">java.lang.NoClassDefFoundError.NoClassDefFoundError(java.lang.String)</outbound>
                <outbound type="class" confirmed="no">java.lang.Object</outbound>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="feature" confirmed="no">java.lang.Throwable.getMessage()</outbound>
                <outbound type="class" confirmed="no">java.util.Map</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.MVEL.eval(java.lang.String, java.lang.Object, java.util.Map, java.lang.Class)</outbound>
                <inbound type="feature" confirmed="yes">org.mvel.MVEL.evalToBoolean(java.lang.String, java.util.Map)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.MVEL.evalToBoolean(java.lang.String, java.lang.Object, org.mvel.integration.VariableResolverFactory)</name>
                <outbound type="class" confirmed="no">java.lang.Boolean</outbound>
                <outbound type="class" confirmed="no">java.lang.Class</outbound>
                <outbound type="feature" confirmed="no">java.lang.Class.forName(java.lang.String)</outbound>
                <outbound type="class" confirmed="no">java.lang.ClassNotFoundException</outbound>
                <outbound type="feature" confirmed="no">java.lang.NoClassDefFoundError.NoClassDefFoundError(java.lang.String)</outbound>
                <outbound type="class" confirmed="no">java.lang.Object</outbound>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="feature" confirmed="no">java.lang.Throwable.getMessage()</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.MVEL.eval(java.lang.String, java.lang.Object, org.mvel.integration.VariableResolverFactory, java.lang.Class)</outbound>
                <outbound type="class" confirmed="yes">org.mvel.integration.VariableResolverFactory</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.MVEL.evalToBoolean(java.lang.String, java.util.Map)</name>
                <outbound type="class" confirmed="no">java.lang.Boolean</outbound>
                <outbound type="class" confirmed="no">java.lang.Object</outbound>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="class" confirmed="no">java.util.Map</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.MVEL.evalToBoolean(java.lang.String, java.lang.Object, java.util.Map)</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.MVEL.evalToBoolean(java.lang.String, org.mvel.integration.VariableResolverFactory)</name>
                <outbound type="class" confirmed="no">java.lang.Boolean</outbound>
                <outbound type="class" confirmed="no">java.lang.Class</outbound>
                <outbound type="feature" confirmed="no">java.lang.Class.forName(java.lang.String)</outbound>
                <outbound type="class" confirmed="no">java.lang.ClassNotFoundException</outbound>
                <outbound type="feature" confirmed="no">java.lang.NoClassDefFoundError.NoClassDefFoundError(java.lang.String)</outbound>
                <outbound type="class" confirmed="no">java.lang.Object</outbound>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="feature" confirmed="no">java.lang.Throwable.getMessage()</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.MVEL.eval(java.lang.String, org.mvel.integration.VariableResolverFactory, java.lang.Class)</outbound>
                <outbound type="class" confirmed="yes">org.mvel.integration.VariableResolverFactory</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.MVEL.evalToString(java.lang.String, java.lang.Object)</name>
                <outbound type="class" confirmed="no">java.lang.Object</outbound>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="feature" confirmed="no">java.lang.String.valueOf(java.lang.Object)</outbound>
                <outbound type="class" confirmed="yes">org.mvel.EndWithValue</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.EndWithValue.getValue()</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.MVEL.eval(java.lang.String, java.lang.Object)</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.util.ParseTools.handleParserEgress(java.lang.Object, boolean)</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.MVEL.evalToString(java.lang.String, java.lang.Object, java.util.Map)</name>
                <outbound type="class" confirmed="no">java.lang.Object</outbound>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="feature" confirmed="no">java.lang.String.valueOf(java.lang.Object)</outbound>
                <outbound type="class" confirmed="no">java.util.Map</outbound>
                <outbound type="class" confirmed="yes">org.mvel.EndWithValue</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.EndWithValue.getValue()</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.MVEL.eval(java.lang.String, java.lang.Object, java.util.Map)</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.util.ParseTools.handleParserEgress(java.lang.Object, boolean)</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.MVEL.evalToString(java.lang.String, java.util.Map)</name>
                <outbound type="class" confirmed="no">java.lang.Object</outbound>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="feature" confirmed="no">java.lang.String.valueOf(java.lang.Object)</outbound>
                <outbound type="class" confirmed="no">java.util.Map</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.MVEL.eval(java.lang.String, java.util.Map)</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.MVEL.executeAllExpression(java.io.Serializable[], java.lang.Object, org.mvel.integration.VariableResolverFactory)</name>
                <outbound type="class" confirmed="no">java.io.Serializable</outbound>
                <outbound type="class" confirmed="no">java.lang.Object</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.MVEL.executeExpression(java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory)</outbound>
                <outbound type="class" confirmed="yes">org.mvel.integration.VariableResolverFactory</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.optimizers.impl.refl.GetterAccessor.EMPTY</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.MVEL.executeDebugger(org.mvel.CompiledExpression, java.lang.Object, org.mvel.integration.VariableResolverFactory)</name>
                <outbound type="class" confirmed="no">java.lang.Object</outbound>
                <outbound type="class" confirmed="yes">org.mvel.CompiledExpression</outbound>
                <outbound type="class" confirmed="yes">org.mvel.EndWithValue</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.EndWithValue.getValue()</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.MVELRuntime.execute(boolean, org.mvel.CompiledExpression, java.lang.Object, org.mvel.integration.VariableResolverFactory)</outbound>
                <outbound type="class" confirmed="yes">org.mvel.integration.VariableResolverFactory</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.util.ParseTools.handleParserEgress(java.lang.Object, boolean)</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.MVEL.executeExpression(java.lang.Object)</name>
                <outbound type="class" confirmed="no">java.lang.Object</outbound>
                <outbound type="class" confirmed="yes">org.mvel.EndWithValue</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.EndWithValue.getValue()</outbound>
                <outbound type="class" confirmed="yes">org.mvel.ExecutableStatement</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.ExecutableStatement.getValue(java.lang.Object, org.mvel.integration.VariableResolverFactory)</outbound>
                <outbound type="class" confirmed="yes">org.mvel.integration.VariableResolverFactory</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.util.ParseTools.handleParserEgress(java.lang.Object, boolean)</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.MVEL.executeExpression(java.lang.Object, java.lang.Object)</name>
                <outbound type="class" confirmed="no">java.lang.Object</outbound>
                <outbound type="class" confirmed="yes">org.mvel.EndWithValue</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.EndWithValue.getValue()</outbound>
                <outbound type="class" confirmed="yes">org.mvel.ExecutableStatement</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.ExecutableStatement.getValue(java.lang.Object, org.mvel.integration.VariableResolverFactory)</outbound>
                <outbound type="class" confirmed="yes">org.mvel.integration.VariableResolverFactory</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.util.ParseTools.handleParserEgress(java.lang.Object, boolean)</outbound>
                <inbound type="feature" confirmed="yes">org.mvel.MVEL.executeExpression(java.lang.Object, java.lang.Object, java.lang.Class)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.MVEL.executeExpression(java.lang.Object, java.lang.Object, java.lang.Class)</name>
                <outbound type="class" confirmed="no">java.lang.Class</outbound>
                <outbound type="class" confirmed="no">java.lang.Object</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.DataConversion.convert(java.lang.Object, java.lang.Class)</outbound>
                <outbound type="class" confirmed="yes">org.mvel.EndWithValue</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.EndWithValue.getValue()</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.MVEL.executeExpression(java.lang.Object, java.lang.Object)</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.util.ParseTools.handleParserEgress(java.lang.Object, boolean)</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.MVEL.executeExpression(java.lang.Object, java.lang.Object, java.util.Map)</name>
                <outbound type="class" confirmed="no">java.lang.Object</outbound>
                <outbound type="class" confirmed="no">java.util.Map</outbound>
                <outbound type="class" confirmed="yes">org.mvel.EndWithValue</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.EndWithValue.getValue()</outbound>
                <outbound type="class" confirmed="yes">org.mvel.ExecutableStatement</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.ExecutableStatement.getValue(java.lang.Object, org.mvel.integration.VariableResolverFactory)</outbound>
                <outbound type="class" confirmed="yes">org.mvel.integration.VariableResolverFactory</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.integration.impl.MapVariableResolverFactory.MapVariableResolverFactory(java.util.Map)</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.util.ParseTools.handleParserEgress(java.lang.Object, boolean)</outbound>
                <inbound type="feature" confirmed="yes">org.mvel.MVEL.executeExpression(java.lang.Object, java.lang.Object, java.util.Map, java.lang.Class)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.TemplateInterpreter.execute(java.lang.Object, java.util.Map, org.mvel.TemplateRegistry)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.MVEL.executeExpression(java.lang.Object, java.lang.Object, java.util.Map, java.lang.Class)</name>
                <outbound type="class" confirmed="no">java.lang.Class</outbound>
                <outbound type="class" confirmed="no">java.lang.Object</outbound>
                <outbound type="class" confirmed="no">java.util.Map</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.DataConversion.convert(java.lang.Object, java.lang.Class)</outbound>
                <outbound type="class" confirmed="yes">org.mvel.EndWithValue</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.EndWithValue.getValue()</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.MVEL.executeExpression(java.lang.Object, java.lang.Object, java.util.Map)</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.util.ParseTools.handleParserEgress(java.lang.Object, boolean)</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.MVEL.executeExpression(java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory)</name>
                <outbound type="class" confirmed="no">java.lang.Object</outbound>
                <outbound type="class" confirmed="yes">org.mvel.EndWithValue</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.EndWithValue.getValue()</outbound>
                <outbound type="class" confirmed="yes">org.mvel.ExecutableStatement</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.ExecutableStatement.getValue(java.lang.Object, org.mvel.integration.VariableResolverFactory)</outbound>
                <outbound type="class" confirmed="yes">org.mvel.integration.VariableResolverFactory</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.util.ParseTools.handleParserEgress(java.lang.Object, boolean)</outbound>
                <inbound type="feature" confirmed="yes">org.mvel.MVEL.executeAllExpression(java.io.Serializable[], java.lang.Object, org.mvel.integration.VariableResolverFactory)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.MVEL.executeExpression(java.lang.Object, java.util.Map)</name>
                <outbound type="class" confirmed="no">java.lang.Object</outbound>
                <outbound type="class" confirmed="no">java.util.Map</outbound>
                <outbound type="class" confirmed="yes">org.mvel.EndWithValue</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.EndWithValue.getValue()</outbound>
                <outbound type="class" confirmed="yes">org.mvel.ExecutableStatement</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.ExecutableStatement.getValue(java.lang.Object, org.mvel.integration.VariableResolverFactory)</outbound>
                <outbound type="class" confirmed="yes">org.mvel.integration.VariableResolverFactory</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.integration.impl.MapVariableResolverFactory.MapVariableResolverFactory(java.util.Map)</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.util.ParseTools.handleParserEgress(java.lang.Object, boolean)</outbound>
                <inbound type="feature" confirmed="yes">org.mvel.MVEL.executeExpression(java.lang.Object, java.util.Map, java.lang.Class)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.MVEL.executeExpression(java.lang.Object, java.util.Map, java.lang.Class)</name>
                <outbound type="class" confirmed="no">java.lang.Class</outbound>
                <outbound type="class" confirmed="no">java.lang.Object</outbound>
                <outbound type="class" confirmed="no">java.util.Map</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.DataConversion.convert(java.lang.Object, java.lang.Class)</outbound>
                <outbound type="class" confirmed="yes">org.mvel.EndWithValue</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.EndWithValue.getValue()</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.MVEL.executeExpression(java.lang.Object, java.util.Map)</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.util.ParseTools.handleParserEgress(java.lang.Object, boolean)</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.MVEL.executeExpression(java.lang.Object, org.mvel.integration.VariableResolverFactory)</name>
                <outbound type="class" confirmed="no">java.lang.Object</outbound>
                <outbound type="class" confirmed="yes">org.mvel.EndWithValue</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.EndWithValue.getValue()</outbound>
                <outbound type="class" confirmed="yes">org.mvel.ExecutableStatement</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.ExecutableStatement.getValue(java.lang.Object, org.mvel.integration.VariableResolverFactory)</outbound>
                <outbound type="class" confirmed="yes">org.mvel.integration.VariableResolverFactory</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.util.ParseTools.handleParserEgress(java.lang.Object, boolean)</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.MVEL.executeSetExpression(java.io.Serializable, java.lang.Object, java.lang.Object)</name>
                <outbound type="class" confirmed="no">java.io.Serializable</outbound>
                <outbound type="class" confirmed="no">java.lang.Object</outbound>
                <outbound type="class" confirmed="yes">org.mvel.CompiledSetExpression</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.CompiledSetExpression.setValue(java.lang.Object, org.mvel.integration.VariableResolverFactory, java.lang.Object)</outbound>
                <outbound type="class" confirmed="yes">org.mvel.integration.VariableResolverFactory</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.MVEL.executeSetExpression(java.io.Serializable, java.lang.Object, org.mvel.integration.VariableResolverFactory, java.lang.Object)</name>
                <outbound type="class" confirmed="no">java.io.Serializable</outbound>
                <outbound type="class" confirmed="no">java.lang.Object</outbound>
                <outbound type="class" confirmed="yes">org.mvel.CompiledSetExpression</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.CompiledSetExpression.setValue(java.lang.Object, org.mvel.integration.VariableResolverFactory, java.lang.Object)</outbound>
                <outbound type="class" confirmed="yes">org.mvel.integration.VariableResolverFactory</outbound>
                <inbound type="feature" confirmed="yes">org.mvel.ast.WithNode.getReducedValueAccelerated(java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.MVEL.getDebuggingOutputFileName()</name>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.MVEL.ADVANCED_DEBUGGING_FILE</outbound>
                <inbound type="feature" confirmed="yes">org.mvel.util.ParseTools.getDebugFileWriter()</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.MVEL.getProperty(java.lang.String, java.lang.Object)</name>
                <outbound type="class" confirmed="no">java.lang.Object</outbound>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.optimizers.impl.refl.ReflectiveAccessorOptimizer.get(java.lang.String, java.lang.Object)</outbound>
                <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.refl.GetterAccessor.getValue(java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.MVEL.isAdvancedDebugging()</name>
                <outbound type="feature" confirmed="yes">org.mvel.MVEL.ADVANCED_DEBUG</outbound>
                <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.asm.ASMAccessorOptimizer._initJIT()</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.MVEL.isFileDebugging()</name>
                <outbound type="feature" confirmed="yes">org.mvel.MVEL.DEBUG_FILE</outbound>
                <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.asm.ASMAccessorOptimizer.dumpAdvancedDebugging()</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.MVEL.isOptimizationEnabled()</name>
                <outbound type="feature" confirmed="yes">org.mvel.MVEL.OPTIMIZER</outbound>
                <inbound type="feature" confirmed="yes">org.mvel.util.ParseTools.optimizeTree(org.mvel.CompiledExpression)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.MVEL.isThreadSafe()</name>
                <outbound type="feature" confirmed="yes">org.mvel.MVEL.THREAD_SAFE</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.MVEL.parseMacros(java.lang.String, java.util.Map)</name>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="class" confirmed="no">java.util.Map</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.MacroProcessor.MacroProcessor()</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.MacroProcessor.parse(java.lang.String)</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.MacroProcessor.setMacros(java.util.Map)</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.MVEL.preprocess(char[], org.mvel.PreProcessor[])</name>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="feature" confirmed="no">java.lang.String.String(char[])</outbound>
                <outbound type="class" confirmed="yes">org.mvel.PreProcessor</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.PreProcessor.parse(char[])</outbound>
                <inbound type="feature" confirmed="yes">org.mvel.MVEL.preprocess(java.lang.String, org.mvel.PreProcessor[])</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.MVEL.preprocess(java.lang.String, org.mvel.PreProcessor[])</name>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="feature" confirmed="no">java.lang.String.toCharArray()</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.MVEL.preprocess(char[], org.mvel.PreProcessor[])</outbound>
                <outbound type="class" confirmed="yes">org.mvel.PreProcessor</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.MVEL.setProperty(java.lang.Object, java.lang.String, java.lang.Object)</name>
                <outbound type="class" confirmed="no">java.lang.Object</outbound>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.PropertyAccessor.set(java.lang.Object, java.lang.String, java.lang.Object)</outbound>
                <inbound type="feature" confirmed="yes">org.mvel.ast.AssignmentNode.getReducedValue(java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.MVEL.setThreadSafe(boolean)</name>
                <outbound type="feature" confirmed="yes">org.mvel.MVEL.THREAD_SAFE</outbound>
                <outbound type="feature" confirmed="no">org.mvel.MVELInterpretedRuntime.configureFactory()</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.PropertyAccessor.configureFactory()</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.TemplateInterpreter.configureFactory()</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.MVEL.static {}</name>
                <outbound type="feature" confirmed="no">java.lang.Boolean.getBoolean(java.lang.String)</outbound>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="feature" confirmed="no">java.lang.System.getProperty(java.lang.String)</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.MVEL.ADVANCED_DEBUG</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.MVEL.ADVANCED_DEBUGGING_FILE</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.MVEL.DEBUG_FILE</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.MVEL.NO_JIT</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.MVEL.OPTIMIZER</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.MVEL.THREAD_SAFE</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.MVEL.WEAK_CACHE</outbound>
            </feature>
        </class>
        <class confirmed="yes">
            <name>org.mvel.MVELInterpretedRuntime</name>
            <outbound type="class" confirmed="yes">org.mvel.AbstractParser</outbound>
            <inbound type="feature" confirmed="yes">org.mvel.TemplateInterpreter.execute(java.lang.Object, java.util.Map, org.mvel.TemplateRegistry)</inbound>
            <feature confirmed="yes">
                <name>org.mvel.MVELInterpretedRuntime.MVELInterpretedRuntime(char[])</name>
                <outbound type="feature" confirmed="yes">org.mvel.AbstractParser.AbstractParser()</outbound>
                <outbound type="feature" confirmed="no">org.mvel.MVELInterpretedRuntime.expr</outbound>
                <outbound type="feature" confirmed="no">org.mvel.MVELInterpretedRuntime.length</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.MVELInterpretedRuntime.returnBigDecimal</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.MVELInterpretedRuntime.roundingMode</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.MVELInterpretedRuntime.MVELInterpretedRuntime(char[], java.lang.Object)</name>
                <outbound type="class" confirmed="no">java.lang.Object</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.AbstractParser.AbstractParser()</outbound>
                <outbound type="feature" confirmed="no">org.mvel.MVELInterpretedRuntime.ctx</outbound>
                <outbound type="feature" confirmed="no">org.mvel.MVELInterpretedRuntime.expr</outbound>
                <outbound type="feature" confirmed="no">org.mvel.MVELInterpretedRuntime.length</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.MVELInterpretedRuntime.returnBigDecimal</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.MVELInterpretedRuntime.roundingMode</outbound>
                <inbound type="feature" confirmed="yes">org.mvel.MVEL.eval(char[], java.lang.Object, java.lang.Class)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.MVELInterpretedRuntime.MVELInterpretedRuntime(char[], java.lang.Object, java.util.Map)</name>
                <outbound type="class" confirmed="no">java.lang.Object</outbound>
                <outbound type="class" confirmed="no">java.util.Map</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.AbstractParser.AbstractParser()</outbound>
                <outbound type="feature" confirmed="no">org.mvel.MVELInterpretedRuntime.ctx</outbound>
                <outbound type="feature" confirmed="no">org.mvel.MVELInterpretedRuntime.expr</outbound>
                <outbound type="feature" confirmed="no">org.mvel.MVELInterpretedRuntime.length</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.MVELInterpretedRuntime.returnBigDecimal</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.MVELInterpretedRuntime.roundingMode</outbound>
                <outbound type="feature" confirmed="no">org.mvel.MVELInterpretedRuntime.variableFactory</outbound>
                <outbound type="class" confirmed="yes">org.mvel.integration.VariableResolverFactory</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.integration.impl.MapVariableResolverFactory.MapVariableResolverFactory(java.util.Map)</outbound>
                <inbound type="feature" confirmed="yes">org.mvel.MVEL.eval(char[], java.lang.Object, java.util.Map)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.MVEL.eval(char[], java.lang.Object, java.util.Map, java.lang.Class)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.MVEL.eval(char[], java.util.Map, java.lang.Class)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.MVELInterpretedRuntime.MVELInterpretedRuntime(char[], java.lang.Object, org.mvel.integration.VariableResolverFactory)</name>
                <outbound type="class" confirmed="no">java.lang.Object</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.AbstractParser.AbstractParser()</outbound>
                <outbound type="feature" confirmed="no">org.mvel.MVELInterpretedRuntime.ctx</outbound>
                <outbound type="feature" confirmed="no">org.mvel.MVELInterpretedRuntime.expr</outbound>
                <outbound type="feature" confirmed="no">org.mvel.MVELInterpretedRuntime.length</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.MVELInterpretedRuntime.returnBigDecimal</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.MVELInterpretedRuntime.roundingMode</outbound>
                <outbound type="feature" confirmed="no">org.mvel.MVELInterpretedRuntime.variableFactory</outbound>
                <outbound type="class" confirmed="yes">org.mvel.integration.VariableResolverFactory</outbound>
                <inbound type="feature" confirmed="yes">org.mvel.MVEL.eval(char[], java.lang.Object, org.mvel.integration.VariableResolverFactory)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.MVEL.eval(char[], java.lang.Object, org.mvel.integration.VariableResolverFactory, java.lang.Class)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.MVELInterpretedRuntime.MVELInterpretedRuntime(char[], java.lang.Object, org.mvel.integration.VariableResolverFactory, boolean)</name>
                <outbound type="class" confirmed="no">java.lang.Object</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.AbstractParser.AbstractParser()</outbound>
                <outbound type="feature" confirmed="no">org.mvel.MVELInterpretedRuntime.ctx</outbound>
                <outbound type="feature" confirmed="no">org.mvel.MVELInterpretedRuntime.expr</outbound>
                <outbound type="feature" confirmed="no">org.mvel.MVELInterpretedRuntime.length</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.MVELInterpretedRuntime.returnBigDecimal</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.MVELInterpretedRuntime.roundingMode</outbound>
                <outbound type="feature" confirmed="no">org.mvel.MVELInterpretedRuntime.variableFactory</outbound>
                <outbound type="class" confirmed="yes">org.mvel.integration.VariableResolverFactory</outbound>
                <inbound type="feature" confirmed="yes">org.mvel.MVEL.eval(char[], java.lang.Object, org.mvel.integration.VariableResolverFactory, boolean)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.MVELInterpretedRuntime.MVELInterpretedRuntime(java.lang.Object, java.util.Map)</name>
                <outbound type="class" confirmed="no">java.lang.Object</outbound>
                <outbound type="class" confirmed="no">java.util.Map</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.AbstractParser.AbstractParser()</outbound>
                <outbound type="feature" confirmed="no">org.mvel.MVELInterpretedRuntime.ctx</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.MVELInterpretedRuntime.returnBigDecimal</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.MVELInterpretedRuntime.roundingMode</outbound>
                <outbound type="feature" confirmed="no">org.mvel.MVELInterpretedRuntime.variableFactory</outbound>
                <outbound type="class" confirmed="yes">org.mvel.integration.VariableResolverFactory</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.integration.impl.MapVariableResolverFactory.MapVariableResolverFactory(java.util.Map)</outbound>
                <inbound type="feature" confirmed="yes">org.mvel.TemplateInterpreter.execute(java.lang.Object, java.util.Map, org.mvel.TemplateRegistry)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.MVELInterpretedRuntime.MVELInterpretedRuntime(java.lang.String)</name>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.AbstractParser.AbstractParser()</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.MVELInterpretedRuntime.returnBigDecimal</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.MVELInterpretedRuntime.roundingMode</outbound>
                <outbound type="feature" confirmed="no">org.mvel.MVELInterpretedRuntime.setExpression(java.lang.String)</outbound>
                <inbound type="feature" confirmed="yes">org.mvel.MVEL.eval(java.lang.String)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.MVELInterpretedRuntime.MVELInterpretedRuntime(java.lang.String, java.lang.Object)</name>
                <outbound type="class" confirmed="no">java.lang.Object</outbound>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.AbstractParser.AbstractParser()</outbound>
                <outbound type="feature" confirmed="no">org.mvel.MVELInterpretedRuntime.ctx</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.MVELInterpretedRuntime.returnBigDecimal</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.MVELInterpretedRuntime.roundingMode</outbound>
                <outbound type="feature" confirmed="no">org.mvel.MVELInterpretedRuntime.setExpression(java.lang.String)</outbound>
                <inbound type="feature" confirmed="yes">org.mvel.MVEL.eval(java.lang.String, java.lang.Object)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.MVEL.eval(java.lang.String, java.lang.Object, java.lang.Class)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.MVELInterpretedRuntime.MVELInterpretedRuntime(java.lang.String, java.lang.Object, java.util.Map)</name>
                <outbound type="class" confirmed="no">java.lang.Object</outbound>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="class" confirmed="no">java.util.Map</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.AbstractParser.AbstractParser()</outbound>
                <outbound type="feature" confirmed="no">org.mvel.MVELInterpretedRuntime.ctx</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.MVELInterpretedRuntime.returnBigDecimal</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.MVELInterpretedRuntime.roundingMode</outbound>
                <outbound type="feature" confirmed="no">org.mvel.MVELInterpretedRuntime.setExpression(java.lang.String)</outbound>
                <outbound type="feature" confirmed="no">org.mvel.MVELInterpretedRuntime.variableFactory</outbound>
                <outbound type="class" confirmed="yes">org.mvel.integration.VariableResolverFactory</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.integration.impl.MapVariableResolverFactory.MapVariableResolverFactory(java.util.Map)</outbound>
                <inbound type="feature" confirmed="yes">org.mvel.MVEL.eval(java.lang.String, java.lang.Object, java.util.Map)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.MVEL.eval(java.lang.String, java.lang.Object, java.util.Map, java.lang.Class)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.MVEL.eval(java.lang.String, java.util.Map)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.MVEL.eval(java.lang.String, java.util.Map, java.lang.Class)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.TemplateInterpreter.execute(java.lang.Object, java.util.Map, org.mvel.TemplateRegistry)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.MVELInterpretedRuntime.MVELInterpretedRuntime(java.lang.String, java.lang.Object, org.mvel.integration.VariableResolverFactory)</name>
                <outbound type="class" confirmed="no">java.lang.Object</outbound>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.AbstractParser.AbstractParser()</outbound>
                <outbound type="feature" confirmed="no">org.mvel.MVELInterpretedRuntime.ctx</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.MVELInterpretedRuntime.returnBigDecimal</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.MVELInterpretedRuntime.roundingMode</outbound>
                <outbound type="feature" confirmed="no">org.mvel.MVELInterpretedRuntime.setExpression(java.lang.String)</outbound>
                <outbound type="feature" confirmed="no">org.mvel.MVELInterpretedRuntime.variableFactory</outbound>
                <outbound type="class" confirmed="yes">org.mvel.integration.VariableResolverFactory</outbound>
                <inbound type="feature" confirmed="yes">org.mvel.MVEL.eval(java.lang.String, java.lang.Object, org.mvel.integration.VariableResolverFactory)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.MVEL.eval(java.lang.String, java.lang.Object, org.mvel.integration.VariableResolverFactory, java.lang.Class)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.MVEL.eval(java.lang.String, org.mvel.integration.VariableResolverFactory, java.lang.Class)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.MVELInterpretedRuntime.MVELInterpretedRuntime(java.lang.String, java.lang.Object, org.mvel.integration.VariableResolverFactory, boolean)</name>
                <outbound type="class" confirmed="no">java.lang.Object</outbound>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.AbstractParser.AbstractParser()</outbound>
                <outbound type="feature" confirmed="no">org.mvel.MVELInterpretedRuntime.ctx</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.MVELInterpretedRuntime.returnBigDecimal</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.MVELInterpretedRuntime.roundingMode</outbound>
                <outbound type="feature" confirmed="no">org.mvel.MVELInterpretedRuntime.setExpression(java.lang.String)</outbound>
                <outbound type="feature" confirmed="no">org.mvel.MVELInterpretedRuntime.variableFactory</outbound>
                <outbound type="class" confirmed="yes">org.mvel.integration.VariableResolverFactory</outbound>
                <inbound type="feature" confirmed="yes">org.mvel.MVEL.eval(java.lang.String, java.lang.Object, org.mvel.integration.VariableResolverFactory, boolean)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.MVELInterpretedRuntime.MVELInterpretedRuntime(java.lang.String, org.mvel.integration.VariableResolverFactory)</name>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.AbstractParser.AbstractParser()</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.MVELInterpretedRuntime.returnBigDecimal</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.MVELInterpretedRuntime.roundingMode</outbound>
                <outbound type="feature" confirmed="no">org.mvel.MVELInterpretedRuntime.setExpression(java.lang.String)</outbound>
                <outbound type="feature" confirmed="no">org.mvel.MVELInterpretedRuntime.variableFactory</outbound>
                <outbound type="class" confirmed="yes">org.mvel.integration.VariableResolverFactory</outbound>
                <inbound type="feature" confirmed="yes">org.mvel.MVEL.eval(java.lang.String, org.mvel.integration.VariableResolverFactory)</inbound>
            </feature>
            <feature confirmed="no">
                <name>org.mvel.MVELInterpretedRuntime.arithmeticFunctionReduction(int)</name>
                <inbound type="feature" confirmed="yes">org.mvel.MVELInterpretedRuntime.parseAndExecuteInterpreted()</inbound>
            </feature>
            <feature confirmed="no">
                <name>org.mvel.MVELInterpretedRuntime.configureFactory()</name>
                <inbound type="feature" confirmed="yes">org.mvel.MVEL.setThreadSafe(boolean)</inbound>
            </feature>
            <feature confirmed="no">
                <name>org.mvel.MVELInterpretedRuntime.contextControl(int, org.mvel.ParserContext, org.mvel.AbstractParser)</name>
                <inbound type="feature" confirmed="yes">org.mvel.MVELInterpretedRuntime.parse()</inbound>
            </feature>
            <feature confirmed="no">
                <name>org.mvel.MVELInterpretedRuntime.ctx</name>
                <inbound type="feature" confirmed="yes">org.mvel.MVELInterpretedRuntime.MVELInterpretedRuntime(char[], java.lang.Object)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.MVELInterpretedRuntime.MVELInterpretedRuntime(char[], java.lang.Object, java.util.Map)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.MVELInterpretedRuntime.MVELInterpretedRuntime(char[], java.lang.Object, org.mvel.integration.VariableResolverFactory)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.MVELInterpretedRuntime.MVELInterpretedRuntime(char[], java.lang.Object, org.mvel.integration.VariableResolverFactory, boolean)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.MVELInterpretedRuntime.MVELInterpretedRuntime(java.lang.Object, java.util.Map)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.MVELInterpretedRuntime.MVELInterpretedRuntime(java.lang.String, java.lang.Object)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.MVELInterpretedRuntime.MVELInterpretedRuntime(java.lang.String, java.lang.Object, java.util.Map)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.MVELInterpretedRuntime.MVELInterpretedRuntime(java.lang.String, java.lang.Object, org.mvel.integration.VariableResolverFactory)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.MVELInterpretedRuntime.MVELInterpretedRuntime(java.lang.String, java.lang.Object, org.mvel.integration.VariableResolverFactory, boolean)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.MVELInterpretedRuntime.parseAndExecuteInterpreted()</inbound>
            </feature>
            <feature confirmed="no">
                <name>org.mvel.MVELInterpretedRuntime.cursor</name>
                <inbound type="feature" confirmed="yes">org.mvel.MVELInterpretedRuntime.hasNoMore()</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.MVELInterpretedRuntime.parse()</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.MVELInterpretedRuntime.parseAndExecuteInterpreted()</inbound>
            </feature>
            <feature confirmed="no">
                <name>org.mvel.MVELInterpretedRuntime.dStack</name>
                <inbound type="feature" confirmed="yes">org.mvel.MVELInterpretedRuntime.parse()</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.MVELInterpretedRuntime.parseAndExecuteInterpreted()</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.MVELInterpretedRuntime.reduceRight()</inbound>
            </feature>
            <feature confirmed="no">
                <name>org.mvel.MVELInterpretedRuntime.debugSymbols</name>
                <inbound type="feature" confirmed="yes">org.mvel.MVELInterpretedRuntime.parse()</inbound>
            </feature>
            <feature confirmed="no">
                <name>org.mvel.MVELInterpretedRuntime.expr</name>
                <inbound type="feature" confirmed="yes">org.mvel.MVELInterpretedRuntime.MVELInterpretedRuntime(char[])</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.MVELInterpretedRuntime.MVELInterpretedRuntime(char[], java.lang.Object)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.MVELInterpretedRuntime.MVELInterpretedRuntime(char[], java.lang.Object, java.util.Map)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.MVELInterpretedRuntime.MVELInterpretedRuntime(char[], java.lang.Object, org.mvel.integration.VariableResolverFactory)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.MVELInterpretedRuntime.MVELInterpretedRuntime(char[], java.lang.Object, org.mvel.integration.VariableResolverFactory, boolean)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.MVELInterpretedRuntime.parse()</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.MVELInterpretedRuntime.setExpressionArray(char[])</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.MVELInterpretedRuntime.getImport(java.lang.String)</name>
                <outbound type="class" confirmed="no">java.lang.Class</outbound>
                <outbound type="class" confirmed="no">java.lang.Object</outbound>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="feature" confirmed="no">org.mvel.MVELInterpretedRuntime.getParserContext()</outbound>
                <outbound type="feature" confirmed="no">org.mvel.MVELInterpretedRuntime.variableFactory</outbound>
                <outbound type="class" confirmed="yes">org.mvel.ParserContext</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.ParserContext.getImport(java.lang.String)</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.ParserContext.hasImport(java.lang.String)</outbound>
                <outbound type="class" confirmed="yes">org.mvel.integration.VariableResolver</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.integration.VariableResolver.getValue()</outbound>
                <outbound type="class" confirmed="yes">org.mvel.integration.VariableResolverFactory</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.integration.VariableResolverFactory.getVariableResolver(java.lang.String)</outbound>
                <outbound type="class" confirmed="yes">org.mvel.integration.impl.ClassImportResolverFactory</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.util.ParseTools.findClassImportResolverFactory(org.mvel.integration.VariableResolverFactory)</outbound>
            </feature>
            <feature confirmed="no">
                <name>org.mvel.MVELInterpretedRuntime.getParserContext()</name>
                <inbound type="feature" confirmed="yes">org.mvel.MVELInterpretedRuntime.getImport(java.lang.String)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.MVELInterpretedRuntime.hasImport(java.lang.String)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.MVELInterpretedRuntime.getRoundingMode()</name>
                <outbound type="feature" confirmed="yes">org.mvel.MVELInterpretedRuntime.roundingMode</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.MVELInterpretedRuntime.hasImport(java.lang.String)</name>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="feature" confirmed="no">org.mvel.MVELInterpretedRuntime.getParserContext()</outbound>
                <outbound type="feature" confirmed="no">org.mvel.MVELInterpretedRuntime.variableFactory</outbound>
                <outbound type="class" confirmed="yes">org.mvel.ParserContext</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.ParserContext.hasImport(java.lang.String)</outbound>
                <outbound type="class" confirmed="yes">org.mvel.integration.VariableResolverFactory</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.integration.VariableResolverFactory.isResolveable(java.lang.String)</outbound>
                <outbound type="class" confirmed="yes">org.mvel.integration.impl.ClassImportResolverFactory</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.util.ParseTools.findClassImportResolverFactory(org.mvel.integration.VariableResolverFactory)</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.MVELInterpretedRuntime.hasNoMore()</name>
                <outbound type="feature" confirmed="no">org.mvel.MVELInterpretedRuntime.cursor</outbound>
                <outbound type="feature" confirmed="no">org.mvel.MVELInterpretedRuntime.length</outbound>
                <inbound type="feature" confirmed="yes">org.mvel.MVELInterpretedRuntime.procBooleanOperator(int)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.MVELInterpretedRuntime.holdOverRegister</name>
                <outbound type="class" confirmed="no">java.lang.Object</outbound>
                <inbound type="feature" confirmed="yes">org.mvel.MVELInterpretedRuntime.parseAndExecuteInterpreted()</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.MVELInterpretedRuntime.procBooleanOperator(int)</inbound>
            </feature>
            <feature confirmed="no">
                <name>org.mvel.MVELInterpretedRuntime.isArithmeticOperator(int)</name>
                <inbound type="feature" confirmed="yes">org.mvel.MVELInterpretedRuntime.parseAndExecuteInterpreted()</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.MVELInterpretedRuntime.isReturnBigDecimal()</name>
                <outbound type="feature" confirmed="yes">org.mvel.MVELInterpretedRuntime.returnBigDecimal</outbound>
            </feature>
            <feature confirmed="no">
                <name>org.mvel.MVELInterpretedRuntime.lastNode</name>
                <inbound type="feature" confirmed="yes">org.mvel.MVELInterpretedRuntime.parseAndExecuteInterpreted()</inbound>
            </feature>
            <feature confirmed="no">
                <name>org.mvel.MVELInterpretedRuntime.lastWasIdentifier</name>
                <inbound type="feature" confirmed="yes">org.mvel.MVELInterpretedRuntime.parseAndExecuteInterpreted()</inbound>
            </feature>
            <feature confirmed="no">
                <name>org.mvel.MVELInterpretedRuntime.length</name>
                <inbound type="feature" confirmed="yes">org.mvel.MVELInterpretedRuntime.MVELInterpretedRuntime(char[])</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.MVELInterpretedRuntime.MVELInterpretedRuntime(char[], java.lang.Object)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.MVELInterpretedRuntime.MVELInterpretedRuntime(char[], java.lang.Object, java.util.Map)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.MVELInterpretedRuntime.MVELInterpretedRuntime(char[], java.lang.Object, org.mvel.integration.VariableResolverFactory)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.MVELInterpretedRuntime.MVELInterpretedRuntime(char[], java.lang.Object, org.mvel.integration.VariableResolverFactory, boolean)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.MVELInterpretedRuntime.hasNoMore()</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.MVELInterpretedRuntime.parse()</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.MVELInterpretedRuntime.parseAndExecuteInterpreted()</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.MVELInterpretedRuntime.setExpressionArray(char[])</inbound>
            </feature>
            <feature confirmed="no">
                <name>org.mvel.MVELInterpretedRuntime.nextToken()</name>
                <inbound type="feature" confirmed="yes">org.mvel.MVELInterpretedRuntime.parseAndExecuteInterpreted()</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.MVELInterpretedRuntime.procBooleanOperator(int)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.MVELInterpretedRuntime.unwindStatement(int)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.MVELInterpretedRuntime.parse()</name>
                <outbound type="class" confirmed="no">java.lang.ArrayIndexOutOfBoundsException</outbound>
                <outbound type="feature" confirmed="no">java.lang.ArrayIndexOutOfBoundsException.printStackTrace()</outbound>
                <outbound type="class" confirmed="no">java.lang.Class</outbound>
                <outbound type="feature" confirmed="no">java.lang.Class.forName(java.lang.String)</outbound>
                <outbound type="class" confirmed="no">java.lang.ClassNotFoundException</outbound>
                <outbound type="feature" confirmed="no">java.lang.NoClassDefFoundError.NoClassDefFoundError(java.lang.String)</outbound>
                <outbound type="class" confirmed="no">java.lang.NullPointerException</outbound>
                <outbound type="feature" confirmed="no">java.lang.NullPointerException.printStackTrace()</outbound>
                <outbound type="class" confirmed="no">java.lang.Object</outbound>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="class" confirmed="no">java.lang.ThreadLocal</outbound>
                <outbound type="feature" confirmed="no">java.lang.ThreadLocal.get()</outbound>
                <outbound type="feature" confirmed="no">java.lang.Throwable.getMessage()</outbound>
                <outbound type="class" confirmed="yes">org.mvel.AbstractParser</outbound>
                <outbound type="class" confirmed="yes">org.mvel.EndWithValue</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.EndWithValue.getValue()</outbound>
                <outbound type="feature" confirmed="no">org.mvel.MVELInterpretedRuntime.contextControl(int, org.mvel.ParserContext, org.mvel.AbstractParser)</outbound>
                <outbound type="feature" confirmed="no">org.mvel.MVELInterpretedRuntime.cursor</outbound>
                <outbound type="feature" confirmed="no">org.mvel.MVELInterpretedRuntime.dStack</outbound>
                <outbound type="feature" confirmed="no">org.mvel.MVELInterpretedRuntime.debugSymbols</outbound>
                <outbound type="feature" confirmed="no">org.mvel.MVELInterpretedRuntime.expr</outbound>
                <outbound type="feature" confirmed="no">org.mvel.MVELInterpretedRuntime.length</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.MVELInterpretedRuntime.parseAndExecuteInterpreted()</outbound>
                <outbound type="feature" confirmed="no">org.mvel.MVELInterpretedRuntime.parserContext</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.MVELInterpretedRuntime.returnBigDecimal</outbound>
                <outbound type="feature" confirmed="no">org.mvel.MVELInterpretedRuntime.stk</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.ParseException.ParseException(java.lang.String, char[], int)</outbound>
                <outbound type="class" confirmed="yes">org.mvel.ParserContext</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.ParserContext.getRootParser()</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.optimizers.OptimizerFactory.setThreadAccessorOptimizer(java.lang.Class)</outbound>
                <outbound type="class" confirmed="yes">org.mvel.util.ExecutionStack</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.util.ExecutionStack.ExecutionStack()</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.util.ParseTools.handleParserEgress(java.lang.Object, boolean)</outbound>
                <outbound type="class" confirmed="yes">org.mvel.util.Stack</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.util.Stack.pop()</outbound>
                <inbound type="feature" confirmed="yes">org.mvel.MVEL.eval(char[], java.lang.Object, java.lang.Class)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.MVEL.eval(char[], java.lang.Object, java.util.Map)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.MVEL.eval(char[], java.lang.Object, java.util.Map, java.lang.Class)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.MVEL.eval(char[], java.lang.Object, org.mvel.integration.VariableResolverFactory)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.MVEL.eval(char[], java.lang.Object, org.mvel.integration.VariableResolverFactory, boolean)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.MVEL.eval(char[], java.lang.Object, org.mvel.integration.VariableResolverFactory, java.lang.Class)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.MVEL.eval(char[], java.util.Map, java.lang.Class)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.MVEL.eval(java.lang.String)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.MVEL.eval(java.lang.String, java.lang.Object)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.MVEL.eval(java.lang.String, java.lang.Object, java.lang.Class)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.MVEL.eval(java.lang.String, java.lang.Object, java.util.Map)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.MVEL.eval(java.lang.String, java.lang.Object, java.util.Map, java.lang.Class)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.MVEL.eval(java.lang.String, java.lang.Object, org.mvel.integration.VariableResolverFactory)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.MVEL.eval(java.lang.String, java.lang.Object, org.mvel.integration.VariableResolverFactory, boolean)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.MVEL.eval(java.lang.String, java.lang.Object, org.mvel.integration.VariableResolverFactory, java.lang.Class)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.MVEL.eval(java.lang.String, java.util.Map)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.MVEL.eval(java.lang.String, java.util.Map, java.lang.Class)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.MVEL.eval(java.lang.String, org.mvel.integration.VariableResolverFactory)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.MVEL.eval(java.lang.String, org.mvel.integration.VariableResolverFactory, java.lang.Class)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.TemplateInterpreter.execute(java.lang.Object, java.util.Map, org.mvel.TemplateRegistry)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.MVELInterpretedRuntime.parseAndExecuteInterpreted()</name>
                <outbound type="class" confirmed="no">java.lang.Integer</outbound>
                <outbound type="feature" confirmed="no">java.lang.Integer.Integer(int)</outbound>
                <outbound type="feature" confirmed="no">java.lang.Integer.intValue()</outbound>
                <outbound type="class" confirmed="no">java.lang.NullPointerException</outbound>
                <outbound type="class" confirmed="no">java.lang.Object</outbound>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="class" confirmed="no">java.lang.StringBuffer</outbound>
                <outbound type="feature" confirmed="no">java.lang.StringBuffer.StringBuffer(java.lang.String)</outbound>
                <outbound type="feature" confirmed="no">java.lang.StringBuffer.append(java.lang.String)</outbound>
                <outbound type="feature" confirmed="no">java.lang.StringBuffer.toString()</outbound>
                <outbound type="class" confirmed="yes">org.mvel.ASTNode</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.ASTNode.getName()</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.ASTNode.getOperator()</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.ASTNode.getReducedValue(java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory)</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.ASTNode.isDiscard()</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.ASTNode.isOperator()</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.CompileException.CompileException(java.lang.String)</outbound>
                <outbound type="feature" confirmed="no">org.mvel.MVELInterpretedRuntime.arithmeticFunctionReduction(int)</outbound>
                <outbound type="feature" confirmed="no">org.mvel.MVELInterpretedRuntime.ctx</outbound>
                <outbound type="feature" confirmed="no">org.mvel.MVELInterpretedRuntime.cursor</outbound>
                <outbound type="feature" confirmed="no">org.mvel.MVELInterpretedRuntime.dStack</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.MVELInterpretedRuntime.holdOverRegister</outbound>
                <outbound type="feature" confirmed="no">org.mvel.MVELInterpretedRuntime.isArithmeticOperator(int)</outbound>
                <outbound type="feature" confirmed="no">org.mvel.MVELInterpretedRuntime.lastNode</outbound>
                <outbound type="feature" confirmed="no">org.mvel.MVELInterpretedRuntime.lastWasIdentifier</outbound>
                <outbound type="feature" confirmed="no">org.mvel.MVELInterpretedRuntime.length</outbound>
                <outbound type="feature" confirmed="no">org.mvel.MVELInterpretedRuntime.nextToken()</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.MVELInterpretedRuntime.procBooleanOperator(int)</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.MVELInterpretedRuntime.reduceRight()</outbound>
                <outbound type="feature" confirmed="no">org.mvel.MVELInterpretedRuntime.stk</outbound>
                <outbound type="feature" confirmed="no">org.mvel.MVELInterpretedRuntime.variableFactory</outbound>
                <outbound type="class" confirmed="yes">org.mvel.ast.Substatement</outbound>
                <outbound type="class" confirmed="yes">org.mvel.integration.VariableResolverFactory</outbound>
                <outbound type="class" confirmed="yes">org.mvel.util.ExecutionStack</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.util.ExecutionStack.isEmpty()</outbound>
                <outbound type="class" confirmed="yes">org.mvel.util.Stack</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.util.Stack.discard()</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.util.Stack.isEmpty()</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.util.Stack.push(java.lang.Object)</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.util.Stack.push(java.lang.Object, java.lang.Object)</outbound>
                <inbound type="feature" confirmed="yes">org.mvel.MVELInterpretedRuntime.parse()</inbound>
            </feature>
            <feature confirmed="no">
                <name>org.mvel.MVELInterpretedRuntime.parserContext</name>
                <inbound type="feature" confirmed="yes">org.mvel.MVELInterpretedRuntime.parse()</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.MVELInterpretedRuntime.procBooleanOperator(int)</name>
                <outbound type="class" confirmed="no">java.lang.Boolean</outbound>
                <outbound type="feature" confirmed="no">java.lang.Boolean.booleanValue()</outbound>
                <outbound type="class" confirmed="no">java.lang.Integer</outbound>
                <outbound type="feature" confirmed="no">java.lang.Integer.Integer(int)</outbound>
                <outbound type="class" confirmed="no">java.lang.Object</outbound>
                <outbound type="class" confirmed="yes">org.mvel.ASTNode</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.ASTNode.isOperator(java.lang.Integer)</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.MVELInterpretedRuntime.hasNoMore()</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.MVELInterpretedRuntime.holdOverRegister</outbound>
                <outbound type="feature" confirmed="no">org.mvel.MVELInterpretedRuntime.nextToken()</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.MVELInterpretedRuntime.reduceRight()</outbound>
                <outbound type="feature" confirmed="no">org.mvel.MVELInterpretedRuntime.stk</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.MVELInterpretedRuntime.unwindStatement(int)</outbound>
                <outbound type="class" confirmed="yes">org.mvel.util.Stack</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.util.Stack.clear()</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.util.Stack.discard()</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.util.Stack.peek()</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.util.Stack.pop()</outbound>
                <inbound type="feature" confirmed="yes">org.mvel.MVELInterpretedRuntime.parseAndExecuteInterpreted()</inbound>
            </feature>
            <feature confirmed="no">
                <name>org.mvel.MVELInterpretedRuntime.reduce()</name>
                <inbound type="feature" confirmed="yes">org.mvel.MVELInterpretedRuntime.reduceRight()</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.MVELInterpretedRuntime.reduceRight()</name>
                <outbound type="class" confirmed="no">java.lang.Object</outbound>
                <outbound type="feature" confirmed="no">org.mvel.MVELInterpretedRuntime.dStack</outbound>
                <outbound type="feature" confirmed="no">org.mvel.MVELInterpretedRuntime.reduce()</outbound>
                <outbound type="feature" confirmed="no">org.mvel.MVELInterpretedRuntime.stk</outbound>
                <outbound type="class" confirmed="yes">org.mvel.util.ExecutionStack</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.util.ExecutionStack.isEmpty()</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.util.ExecutionStack.pop()</outbound>
                <outbound type="class" confirmed="yes">org.mvel.util.Stack</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.util.Stack.pop()</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.util.Stack.push(java.lang.Object)</outbound>
                <inbound type="feature" confirmed="yes">org.mvel.MVELInterpretedRuntime.parseAndExecuteInterpreted()</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.MVELInterpretedRuntime.procBooleanOperator(int)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.MVELInterpretedRuntime.returnBigDecimal</name>
                <inbound type="feature" confirmed="yes">org.mvel.MVELInterpretedRuntime.MVELInterpretedRuntime(char[])</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.MVELInterpretedRuntime.MVELInterpretedRuntime(char[], java.lang.Object)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.MVELInterpretedRuntime.MVELInterpretedRuntime(char[], java.lang.Object, java.util.Map)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.MVELInterpretedRuntime.MVELInterpretedRuntime(char[], java.lang.Object, org.mvel.integration.VariableResolverFactory)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.MVELInterpretedRuntime.MVELInterpretedRuntime(char[], java.lang.Object, org.mvel.integration.VariableResolverFactory, boolean)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.MVELInterpretedRuntime.MVELInterpretedRuntime(java.lang.Object, java.util.Map)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.MVELInterpretedRuntime.MVELInterpretedRuntime(java.lang.String)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.MVELInterpretedRuntime.MVELInterpretedRuntime(java.lang.String, java.lang.Object)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.MVELInterpretedRuntime.MVELInterpretedRuntime(java.lang.String, java.lang.Object, java.util.Map)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.MVELInterpretedRuntime.MVELInterpretedRuntime(java.lang.String, java.lang.Object, org.mvel.integration.VariableResolverFactory)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.MVELInterpretedRuntime.MVELInterpretedRuntime(java.lang.String, java.lang.Object, org.mvel.integration.VariableResolverFactory, boolean)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.MVELInterpretedRuntime.MVELInterpretedRuntime(java.lang.String, org.mvel.integration.VariableResolverFactory)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.MVELInterpretedRuntime.isReturnBigDecimal()</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.MVELInterpretedRuntime.parse()</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.MVELInterpretedRuntime.setReturnBigDecimal(boolean)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.MVELInterpretedRuntime.roundingMode</name>
                <inbound type="feature" confirmed="yes">org.mvel.MVELInterpretedRuntime.MVELInterpretedRuntime(char[])</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.MVELInterpretedRuntime.MVELInterpretedRuntime(char[], java.lang.Object)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.MVELInterpretedRuntime.MVELInterpretedRuntime(char[], java.lang.Object, java.util.Map)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.MVELInterpretedRuntime.MVELInterpretedRuntime(char[], java.lang.Object, org.mvel.integration.VariableResolverFactory)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.MVELInterpretedRuntime.MVELInterpretedRuntime(char[], java.lang.Object, org.mvel.integration.VariableResolverFactory, boolean)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.MVELInterpretedRuntime.MVELInterpretedRuntime(java.lang.Object, java.util.Map)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.MVELInterpretedRuntime.MVELInterpretedRuntime(java.lang.String)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.MVELInterpretedRuntime.MVELInterpretedRuntime(java.lang.String, java.lang.Object)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.MVELInterpretedRuntime.MVELInterpretedRuntime(java.lang.String, java.lang.Object, java.util.Map)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.MVELInterpretedRuntime.MVELInterpretedRuntime(java.lang.String, java.lang.Object, org.mvel.integration.VariableResolverFactory)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.MVELInterpretedRuntime.MVELInterpretedRuntime(java.lang.String, java.lang.Object, org.mvel.integration.VariableResolverFactory, boolean)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.MVELInterpretedRuntime.MVELInterpretedRuntime(java.lang.String, org.mvel.integration.VariableResolverFactory)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.MVELInterpretedRuntime.getRoundingMode()</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.MVELInterpretedRuntime.setRoundingMode(int)</inbound>
            </feature>
            <feature confirmed="no">
                <name>org.mvel.MVELInterpretedRuntime.setExpression(java.lang.String)</name>
                <inbound type="feature" confirmed="yes">org.mvel.MVELInterpretedRuntime.MVELInterpretedRuntime(java.lang.String)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.MVELInterpretedRuntime.MVELInterpretedRuntime(java.lang.String, java.lang.Object)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.MVELInterpretedRuntime.MVELInterpretedRuntime(java.lang.String, java.lang.Object, java.util.Map)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.MVELInterpretedRuntime.MVELInterpretedRuntime(java.lang.String, java.lang.Object, org.mvel.integration.VariableResolverFactory)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.MVELInterpretedRuntime.MVELInterpretedRuntime(java.lang.String, java.lang.Object, org.mvel.integration.VariableResolverFactory, boolean)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.MVELInterpretedRuntime.MVELInterpretedRuntime(java.lang.String, org.mvel.integration.VariableResolverFactory)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.MVELInterpretedRuntime.setExpressionArray(char[])</name>
                <outbound type="feature" confirmed="no">org.mvel.MVELInterpretedRuntime.expr</outbound>
                <outbound type="feature" confirmed="no">org.mvel.MVELInterpretedRuntime.length</outbound>
                <inbound type="feature" confirmed="yes">org.mvel.TemplateInterpreter.execute(java.lang.Object, java.util.Map, org.mvel.TemplateRegistry)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.MVELInterpretedRuntime.setReturnBigDecimal(boolean)</name>
                <outbound type="feature" confirmed="yes">org.mvel.MVELInterpretedRuntime.returnBigDecimal</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.MVELInterpretedRuntime.setRoundingMode(int)</name>
                <outbound type="feature" confirmed="yes">org.mvel.MVELInterpretedRuntime.roundingMode</outbound>
            </feature>
            <feature confirmed="no">
                <name>org.mvel.MVELInterpretedRuntime.stk</name>
                <inbound type="feature" confirmed="yes">org.mvel.MVELInterpretedRuntime.parse()</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.MVELInterpretedRuntime.parseAndExecuteInterpreted()</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.MVELInterpretedRuntime.procBooleanOperator(int)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.MVELInterpretedRuntime.reduceRight()</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.MVELInterpretedRuntime.unwindStatement(int)</name>
                <outbound type="class" confirmed="no">java.lang.Integer</outbound>
                <outbound type="feature" confirmed="no">java.lang.Integer.Integer(int)</outbound>
                <outbound type="class" confirmed="yes">org.mvel.ASTNode</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.ASTNode.isOperator(java.lang.Integer)</outbound>
                <outbound type="feature" confirmed="no">org.mvel.MVELInterpretedRuntime.nextToken()</outbound>
                <inbound type="feature" confirmed="yes">org.mvel.MVELInterpretedRuntime.procBooleanOperator(int)</inbound>
            </feature>
            <feature confirmed="no">
                <name>org.mvel.MVELInterpretedRuntime.variableFactory</name>
                <inbound type="feature" confirmed="yes">org.mvel.MVELInterpretedRuntime.MVELInterpretedRuntime(char[], java.lang.Object, java.util.Map)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.MVELInterpretedRuntime.MVELInterpretedRuntime(char[], java.lang.Object, org.mvel.integration.VariableResolverFactory)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.MVELInterpretedRuntime.MVELInterpretedRuntime(char[], java.lang.Object, org.mvel.integration.VariableResolverFactory, boolean)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.MVELInterpretedRuntime.MVELInterpretedRuntime(java.lang.Object, java.util.Map)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.MVELInterpretedRuntime.MVELInterpretedRuntime(java.lang.String, java.lang.Object, java.util.Map)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.MVELInterpretedRuntime.MVELInterpretedRuntime(java.lang.String, java.lang.Object, org.mvel.integration.VariableResolverFactory)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.MVELInterpretedRuntime.MVELInterpretedRuntime(java.lang.String, java.lang.Object, org.mvel.integration.VariableResolverFactory, boolean)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.MVELInterpretedRuntime.MVELInterpretedRuntime(java.lang.String, org.mvel.integration.VariableResolverFactory)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.MVELInterpretedRuntime.getImport(java.lang.String)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.MVELInterpretedRuntime.hasImport(java.lang.String)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.MVELInterpretedRuntime.parseAndExecuteInterpreted()</inbound>
            </feature>
        </class>
        <class confirmed="yes">
            <name>org.mvel.MVELRuntime</name>
            <outbound type="class" confirmed="no">java.lang.Object</outbound>
            <feature confirmed="yes">
                <name>org.mvel.MVELRuntime.MVELRuntime()</name>
                <outbound type="feature" confirmed="no">java.lang.Object.Object()</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.MVELRuntime.clearAllBreakpoints()</name>
                <outbound type="class" confirmed="no">java.lang.Object</outbound>
                <outbound type="class" confirmed="no">java.lang.ThreadLocal</outbound>
                <outbound type="feature" confirmed="no">java.lang.ThreadLocal.get()</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.MVELRuntime.debuggerContext</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.MVELRuntime.hasDebuggerContext()</outbound>
                <outbound type="class" confirmed="yes">org.mvel.debug.DebuggerContext</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.debug.DebuggerContext.clearAllBreakpoints()</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.MVELRuntime.debuggerContext</name>
                <outbound type="class" confirmed="no">java.lang.ThreadLocal</outbound>
                <inbound type="feature" confirmed="yes">org.mvel.MVELRuntime.clearAllBreakpoints()</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.MVELRuntime.ensureDebuggerContext()</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.MVELRuntime.execute(boolean, org.mvel.CompiledExpression, java.lang.Object, org.mvel.integration.VariableResolverFactory)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.MVELRuntime.hasBreakpoints()</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.MVELRuntime.hasDebuggerContext()</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.MVELRuntime.registerBreakpoint(java.lang.String, int)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.MVELRuntime.removeBreakpoint(java.lang.String, int)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.MVELRuntime.resetDebugger()</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.MVELRuntime.setThreadDebugger(org.mvel.debug.Debugger)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.MVELRuntime.ensureDebuggerContext()</name>
                <outbound type="class" confirmed="no">java.lang.Object</outbound>
                <outbound type="class" confirmed="no">java.lang.ThreadLocal</outbound>
                <outbound type="feature" confirmed="no">java.lang.ThreadLocal.ThreadLocal()</outbound>
                <outbound type="feature" confirmed="no">java.lang.ThreadLocal.get()</outbound>
                <outbound type="feature" confirmed="no">java.lang.ThreadLocal.set(java.lang.Object)</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.MVELRuntime.debuggerContext</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.debug.DebuggerContext.DebuggerContext()</outbound>
                <inbound type="feature" confirmed="yes">org.mvel.MVELRuntime.registerBreakpoint(java.lang.String, int)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.MVELRuntime.setThreadDebugger(org.mvel.debug.Debugger)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.MVELRuntime.execute(boolean, org.mvel.CompiledExpression, java.lang.Object, org.mvel.integration.VariableResolverFactory)</name>
                <outbound type="class" confirmed="no">java.lang.Boolean</outbound>
                <outbound type="feature" confirmed="no">java.lang.Boolean.Boolean(boolean)</outbound>
                <outbound type="feature" confirmed="no">java.lang.Boolean.booleanValue()</outbound>
                <outbound type="class" confirmed="no">java.lang.Class</outbound>
                <outbound type="feature" confirmed="no">java.lang.Class.isInstance(java.lang.Object)</outbound>
                <outbound type="class" confirmed="no">java.lang.ClassCastException</outbound>
                <outbound type="class" confirmed="no">java.lang.ClassLoader</outbound>
                <outbound type="feature" confirmed="no">java.lang.ClassLoader.loadClass(java.lang.String)</outbound>
                <outbound type="class" confirmed="no">java.lang.Exception</outbound>
                <outbound type="feature" confirmed="no">java.lang.Float.Float(float)</outbound>
                <outbound type="class" confirmed="no">java.lang.Integer</outbound>
                <outbound type="feature" confirmed="no">java.lang.Integer.Integer(int)</outbound>
                <outbound type="feature" confirmed="no">java.lang.Integer.intValue()</outbound>
                <outbound type="class" confirmed="no">java.lang.NullPointerException</outbound>
                <outbound type="class" confirmed="no">java.lang.Object</outbound>
                <outbound type="feature" confirmed="no">java.lang.Object.getClass()</outbound>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="feature" confirmed="no">java.lang.String.equals(java.lang.Object)</outbound>
                <outbound type="feature" confirmed="no">java.lang.String.valueOf(java.lang.Object)</outbound>
                <outbound type="class" confirmed="no">java.lang.StringBuffer</outbound>
                <outbound type="feature" confirmed="no">java.lang.StringBuffer.StringBuffer(java.lang.String)</outbound>
                <outbound type="feature" confirmed="no">java.lang.StringBuffer.append(java.lang.String)</outbound>
                <outbound type="feature" confirmed="no">java.lang.StringBuffer.toString()</outbound>
                <outbound type="class" confirmed="no">java.lang.Thread</outbound>
                <outbound type="feature" confirmed="no">java.lang.Thread.currentThread()</outbound>
                <outbound type="feature" confirmed="no">java.lang.Thread.getContextClassLoader()</outbound>
                <outbound type="class" confirmed="no">java.lang.ThreadLocal</outbound>
                <outbound type="feature" confirmed="no">java.lang.ThreadLocal.get()</outbound>
                <outbound type="class" confirmed="no">java.lang.Throwable</outbound>
                <outbound type="class" confirmed="yes">org.mvel.ASTIterator</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.ASTIterator.firstNode()</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.ASTLinkedList.ASTLinkedList(org.mvel.ASTNode)</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.ASTLinkedList.hasMoreNodes()</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.ASTLinkedList.nextNode()</outbound>
                <outbound type="class" confirmed="yes">org.mvel.ASTNode</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.ASTNode.fields</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.ASTNode.getName()</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.ASTNode.getOperator()</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.ASTNode.getReducedValueAccelerated(java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory)</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.ASTNode.isOperator()</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.ASTNode.isOperator(java.lang.Integer)</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.CompileException.CompileException(java.lang.String)</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.CompileException.CompileException(java.lang.String, java.lang.Throwable)</outbound>
                <outbound type="class" confirmed="yes">org.mvel.CompiledExpression</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.CompiledExpression.getParserContext()</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.CompiledExpression.getTokens()</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.CompiledExpression.isImportInjectionRequired()</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.DataConversion.canConvert(java.lang.Class, java.lang.Class)</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.MVELRuntime.debuggerContext</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.MVELRuntime.hasDebuggerContext()</outbound>
                <outbound type="class" confirmed="yes">org.mvel.ParserContext</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.Soundex.soundex(java.lang.String)</outbound>
                <outbound type="class" confirmed="yes">org.mvel.ast.LineLabel</outbound>
                <outbound type="class" confirmed="yes">org.mvel.debug.DebuggerContext</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.debug.DebuggerContext.checkBreak(org.mvel.ast.LineLabel, org.mvel.integration.VariableResolverFactory, org.mvel.CompiledExpression)</outbound>
                <outbound type="class" confirmed="yes">org.mvel.integration.VariableResolverFactory</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.integration.impl.ClassImportResolverFactory.ClassImportResolverFactory(org.mvel.ParserContext, org.mvel.integration.VariableResolverFactory)</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.util.ExecutionStack.ExecutionStack()</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.util.ParseTools.containsCheck(java.lang.Object, java.lang.Object)</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.util.PropertyTools.isEmpty(java.lang.Object)</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.util.PropertyTools.similarity(java.lang.String, java.lang.String)</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.util.Stack.clear()</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.util.Stack.isEmpty()</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.util.Stack.peek()</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.util.Stack.pop()</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.util.Stack.push(java.lang.Object)</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.util.Stack.push(java.lang.Object, java.lang.Object)</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.util.Stack.size()</outbound>
                <outbound type="class" confirmed="yes">org.mvel.util.StringAppender</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.util.StringAppender.StringAppender(java.lang.String)</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.util.StringAppender.append(java.lang.String)</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.util.StringAppender.toString()</outbound>
                <inbound type="feature" confirmed="yes">org.mvel.CompiledExpression.getDirectValue(java.lang.Object, org.mvel.integration.VariableResolverFactory)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.CompiledExpression.getValue(java.lang.Object, org.mvel.integration.VariableResolverFactory)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.MVEL.executeDebugger(org.mvel.CompiledExpression, java.lang.Object, org.mvel.integration.VariableResolverFactory)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.MVELRuntime.hasBreakpoints()</name>
                <outbound type="class" confirmed="no">java.lang.Object</outbound>
                <outbound type="class" confirmed="no">java.lang.ThreadLocal</outbound>
                <outbound type="feature" confirmed="no">java.lang.ThreadLocal.get()</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.MVELRuntime.debuggerContext</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.MVELRuntime.hasDebuggerContext()</outbound>
                <outbound type="class" confirmed="yes">org.mvel.debug.DebuggerContext</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.debug.DebuggerContext.hasBreakpoints()</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.MVELRuntime.hasDebuggerContext()</name>
                <outbound type="class" confirmed="no">java.lang.Object</outbound>
                <outbound type="class" confirmed="no">java.lang.ThreadLocal</outbound>
                <outbound type="feature" confirmed="no">java.lang.ThreadLocal.get()</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.MVELRuntime.debuggerContext</outbound>
                <inbound type="feature" confirmed="yes">org.mvel.MVELRuntime.clearAllBreakpoints()</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.MVELRuntime.execute(boolean, org.mvel.CompiledExpression, java.lang.Object, org.mvel.integration.VariableResolverFactory)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.MVELRuntime.hasBreakpoints()</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.MVELRuntime.removeBreakpoint(java.lang.String, int)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.MVELRuntime.registerBreakpoint(java.lang.String, int)</name>
                <outbound type="class" confirmed="no">java.lang.Object</outbound>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="class" confirmed="no">java.lang.ThreadLocal</outbound>
                <outbound type="feature" confirmed="no">java.lang.ThreadLocal.get()</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.MVELRuntime.debuggerContext</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.MVELRuntime.ensureDebuggerContext()</outbound>
                <outbound type="class" confirmed="yes">org.mvel.debug.DebuggerContext</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.debug.DebuggerContext.registerBreakpoint(java.lang.String, int)</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.MVELRuntime.removeBreakpoint(java.lang.String, int)</name>
                <outbound type="class" confirmed="no">java.lang.Object</outbound>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="class" confirmed="no">java.lang.ThreadLocal</outbound>
                <outbound type="feature" confirmed="no">java.lang.ThreadLocal.get()</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.MVELRuntime.debuggerContext</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.MVELRuntime.hasDebuggerContext()</outbound>
                <outbound type="class" confirmed="yes">org.mvel.debug.DebuggerContext</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.debug.DebuggerContext.removeBreakpoint(java.lang.String, int)</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.MVELRuntime.resetDebugger()</name>
                <outbound type="class" confirmed="no">java.lang.ThreadLocal</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.MVELRuntime.debuggerContext</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.MVELRuntime.setThreadDebugger(org.mvel.debug.Debugger)</name>
                <outbound type="class" confirmed="no">java.lang.Object</outbound>
                <outbound type="class" confirmed="no">java.lang.ThreadLocal</outbound>
                <outbound type="feature" confirmed="no">java.lang.ThreadLocal.get()</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.MVELRuntime.debuggerContext</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.MVELRuntime.ensureDebuggerContext()</outbound>
                <outbound type="class" confirmed="yes">org.mvel.debug.Debugger</outbound>
                <outbound type="class" confirmed="yes">org.mvel.debug.DebuggerContext</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.debug.DebuggerContext.setDebugger(org.mvel.debug.Debugger)</outbound>
            </feature>
        </class>
        <class confirmed="yes">
            <name>org.mvel.MVELSH</name>
            <outbound type="class" confirmed="no">java.lang.Object</outbound>
            <feature confirmed="yes">
                <name>org.mvel.MVELSH.MVELSH()</name>
                <outbound type="feature" confirmed="no">java.lang.Object.Object()</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.MVELSH.main(java.lang.String[])</name>
                <outbound type="feature" confirmed="no">java.io.BufferedReader.BufferedReader(java.io.Reader)</outbound>
                <outbound type="feature" confirmed="no">java.io.BufferedReader.readLine()</outbound>
                <outbound type="class" confirmed="no">java.io.InputStream</outbound>
                <outbound type="feature" confirmed="no">java.io.InputStreamReader.InputStreamReader(java.io.InputStream)</outbound>
                <outbound type="class" confirmed="no">java.io.PrintStream</outbound>
                <outbound type="feature" confirmed="no">java.io.PrintStream.print(java.lang.String)</outbound>
                <outbound type="feature" confirmed="no">java.io.PrintStream.println(java.lang.String)</outbound>
                <outbound type="class" confirmed="no">java.io.Reader</outbound>
                <outbound type="class" confirmed="no">java.lang.Exception</outbound>
                <outbound type="feature" confirmed="no">java.lang.Exception.getMessage()</outbound>
                <outbound type="feature" confirmed="no">java.lang.Exception.printStackTrace()</outbound>
                <outbound type="class" confirmed="no">java.lang.Object</outbound>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="feature" confirmed="no">java.lang.String.equals(java.lang.Object)</outbound>
                <outbound type="feature" confirmed="no">java.lang.String.length()</outbound>
                <outbound type="feature" confirmed="no">java.lang.String.valueOf(java.lang.Object)</outbound>
                <outbound type="class" confirmed="no">java.lang.StringBuffer</outbound>
                <outbound type="feature" confirmed="no">java.lang.StringBuffer.StringBuffer(java.lang.String)</outbound>
                <outbound type="feature" confirmed="no">java.lang.StringBuffer.append(java.lang.Object)</outbound>
                <outbound type="feature" confirmed="no">java.lang.StringBuffer.append(java.lang.String)</outbound>
                <outbound type="feature" confirmed="no">java.lang.StringBuffer.append(long)</outbound>
                <outbound type="feature" confirmed="no">java.lang.StringBuffer.toString()</outbound>
                <outbound type="feature" confirmed="no">java.lang.System.currentTimeMillis()</outbound>
                <outbound type="feature" confirmed="no">java.lang.System.in</outbound>
                <outbound type="feature" confirmed="no">java.lang.System.out</outbound>
                <outbound type="feature" confirmed="no">java.util.HashMap.HashMap()</outbound>
                <outbound type="class" confirmed="no">java.util.Map</outbound>
                <outbound type="feature" confirmed="no">java.util.Map.clear()</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.MVEL.eval(java.lang.String, org.mvel.integration.VariableResolverFactory)</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.MVELSH.showHelp()</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.TemplateInterpreter.parse(java.lang.String, java.lang.Object, java.util.Map)</outbound>
                <outbound type="class" confirmed="yes">org.mvel.integration.VariableResolverFactory</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.integration.impl.DefaultLocalVariableResolverFactory.DefaultLocalVariableResolverFactory(java.util.Map)</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.MVELSH.showHelp()</name>
                <outbound type="class" confirmed="no">java.io.PrintStream</outbound>
                <outbound type="feature" confirmed="no">java.io.PrintStream.println(java.lang.String)</outbound>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="feature" confirmed="no">java.lang.System.out</outbound>
                <inbound type="feature" confirmed="yes">org.mvel.MVELSH.main(java.lang.String[])</inbound>
            </feature>
        </class>
        <class confirmed="yes">
            <name>org.mvel.MVELTemplateRegistry</name>
            <outbound type="class" confirmed="no">java.lang.Object</outbound>
            <outbound type="class" confirmed="yes">org.mvel.TemplateRegistry</outbound>
            <feature confirmed="yes">
                <name>org.mvel.MVELTemplateRegistry.MVELTemplateRegistry()</name>
                <outbound type="feature" confirmed="no">java.lang.Object.Object()</outbound>
                <outbound type="feature" confirmed="no">java.util.Collections.EMPTY_MAP</outbound>
                <outbound type="class" confirmed="no">java.util.Map</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.MVELTemplateRegistry.registry</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.MVELTemplateRegistry.getTemplate(java.lang.String)</name>
                <outbound type="class" confirmed="no">java.lang.Object</outbound>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="class" confirmed="no">java.util.Map</outbound>
                <outbound type="feature" confirmed="no">java.util.Map.get(java.lang.Object)</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.MVELTemplateRegistry.registry</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.MVELTemplateRegistry.isEmpty()</name>
                <outbound type="class" confirmed="no">java.util.Map</outbound>
                <outbound type="feature" confirmed="no">java.util.Map.isEmpty()</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.MVELTemplateRegistry.registry</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.MVELTemplateRegistry.iterateTemplates()</name>
                <outbound type="class" confirmed="no">java.util.Iterator</outbound>
                <outbound type="class" confirmed="no">java.util.Map</outbound>
                <outbound type="feature" confirmed="no">java.util.Map.keySet()</outbound>
                <outbound type="class" confirmed="no">java.util.Set</outbound>
                <outbound type="feature" confirmed="no">java.util.Set.iterator()</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.MVELTemplateRegistry.registry</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.MVELTemplateRegistry.registerTemplate(java.io.Reader)</name>
                <outbound type="class" confirmed="no">java.io.IOException</outbound>
                <outbound type="class" confirmed="no">java.io.Reader</outbound>
                <outbound type="feature" confirmed="no">java.io.Reader.read()</outbound>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="feature" confirmed="no">java.lang.String.String(char[])</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.CompileException.CompileException(java.lang.String)</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.MVELTemplateRegistry.registerTemplate(java.lang.String, java.lang.String)</outbound>
                <outbound type="class" confirmed="yes">org.mvel.util.StringAppender</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.util.StringAppender.StringAppender()</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.util.StringAppender.append(char)</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.util.StringAppender.charAt(int)</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.util.StringAppender.getChars(int, int)</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.util.StringAppender.length()</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.MVELTemplateRegistry.registerTemplate(java.lang.String, java.lang.String)</name>
                <outbound type="class" confirmed="no">java.lang.Object</outbound>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="feature" confirmed="no">java.util.Collections.EMPTY_MAP</outbound>
                <outbound type="feature" confirmed="no">java.util.Collections.synchronizedMap(java.util.Map)</outbound>
                <outbound type="feature" confirmed="no">java.util.HashMap.HashMap()</outbound>
                <outbound type="class" confirmed="no">java.util.Map</outbound>
                <outbound type="feature" confirmed="no">java.util.Map.put(java.lang.Object, java.lang.Object)</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.MVEL.THREAD_SAFE</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.MVELTemplateRegistry.registry</outbound>
                <inbound type="feature" confirmed="yes">org.mvel.MVELTemplateRegistry.registerTemplate(java.io.Reader)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.MVELTemplateRegistry.registry</name>
                <outbound type="class" confirmed="no">java.util.Map</outbound>
                <inbound type="feature" confirmed="yes">org.mvel.MVELTemplateRegistry.MVELTemplateRegistry()</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.MVELTemplateRegistry.getTemplate(java.lang.String)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.MVELTemplateRegistry.isEmpty()</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.MVELTemplateRegistry.iterateTemplates()</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.MVELTemplateRegistry.registerTemplate(java.lang.String, java.lang.String)</inbound>
            </feature>
        </class>
        <class confirmed="yes">
            <name>org.mvel.Macro</name>
            <outbound type="class" confirmed="no">java.lang.Object</outbound>
            <inbound type="feature" confirmed="yes">org.mvel.MacroProcessor.parse(char[])</inbound>
            <feature confirmed="yes">
                <name>org.mvel.Macro.doMacro()</name>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <inbound type="feature" confirmed="yes">org.mvel.MacroProcessor.parse(char[])</inbound>
            </feature>
        </class>
        <class confirmed="yes">
            <name>org.mvel.MacroProcessor</name>
            <outbound type="class" confirmed="yes">org.mvel.AbstractParser</outbound>
            <outbound type="class" confirmed="yes">org.mvel.PreProcessor</outbound>
            <feature confirmed="yes">
                <name>org.mvel.MacroProcessor.MacroProcessor()</name>
                <outbound type="feature" confirmed="yes">org.mvel.AbstractParser.AbstractParser()</outbound>
                <inbound type="feature" confirmed="yes">org.mvel.MVEL.parseMacros(java.lang.String, java.util.Map)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.MacroProcessor.captureToWhitespace()</name>
                <outbound type="feature" confirmed="no">java.lang.Character.isWhitespace(char)</outbound>
                <outbound type="feature" confirmed="no">org.mvel.MacroProcessor.cursor</outbound>
                <outbound type="feature" confirmed="no">org.mvel.MacroProcessor.expr</outbound>
                <outbound type="feature" confirmed="no">org.mvel.MacroProcessor.length</outbound>
            </feature>
            <feature confirmed="no">
                <name>org.mvel.MacroProcessor.cursor</name>
                <inbound type="feature" confirmed="yes">org.mvel.MacroProcessor.captureToWhitespace()</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.MacroProcessor.parse(char[])</inbound>
            </feature>
            <feature confirmed="no">
                <name>org.mvel.MacroProcessor.expr</name>
                <inbound type="feature" confirmed="yes">org.mvel.MacroProcessor.captureToWhitespace()</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.MacroProcessor.parse(char[])</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.MacroProcessor.getMacros()</name>
                <outbound type="class" confirmed="no">java.util.Map</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.MacroProcessor.macros</outbound>
            </feature>
            <feature confirmed="no">
                <name>org.mvel.MacroProcessor.length</name>
                <inbound type="feature" confirmed="yes">org.mvel.MacroProcessor.captureToWhitespace()</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.MacroProcessor.parse(char[])</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.MacroProcessor.macros</name>
                <outbound type="class" confirmed="no">java.util.Map</outbound>
                <inbound type="feature" confirmed="yes">org.mvel.MacroProcessor.getMacros()</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.MacroProcessor.parse(char[])</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.MacroProcessor.setMacros(java.util.Map)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.MacroProcessor.parse(char[])</name>
                <outbound type="feature" confirmed="no">java.lang.Character.isWhitespace(char)</outbound>
                <outbound type="class" confirmed="no">java.lang.Object</outbound>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="feature" confirmed="no">java.lang.String.String(char[], int, int)</outbound>
                <outbound type="class" confirmed="no">java.util.Map</outbound>
                <outbound type="feature" confirmed="no">java.util.Map.containsKey(java.lang.Object)</outbound>
                <outbound type="feature" confirmed="no">java.util.Map.get(java.lang.Object)</outbound>
                <outbound type="class" confirmed="yes">org.mvel.Macro</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.Macro.doMacro()</outbound>
                <outbound type="feature" confirmed="no">org.mvel.MacroProcessor.cursor</outbound>
                <outbound type="feature" confirmed="no">org.mvel.MacroProcessor.expr</outbound>
                <outbound type="feature" confirmed="no">org.mvel.MacroProcessor.length</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.MacroProcessor.macros</outbound>
                <outbound type="feature" confirmed="no">org.mvel.MacroProcessor.setExpression(char[])</outbound>
                <outbound type="class" confirmed="yes">org.mvel.util.StringAppender</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.util.StringAppender.StringAppender()</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.util.StringAppender.append(char)</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.util.StringAppender.append(java.lang.String)</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.util.StringAppender.toChars()</outbound>
                <inbound type="feature" confirmed="yes">org.mvel.MacroProcessor.parse(java.lang.String)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.MacroProcessor.parse(java.lang.String)</name>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="feature" confirmed="no">java.lang.String.String(char[])</outbound>
                <outbound type="feature" confirmed="no">java.lang.String.toCharArray()</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.MacroProcessor.parse(char[])</outbound>
                <inbound type="feature" confirmed="yes">org.mvel.MVEL.parseMacros(java.lang.String, java.util.Map)</inbound>
            </feature>
            <feature confirmed="no">
                <name>org.mvel.MacroProcessor.setExpression(char[])</name>
                <inbound type="feature" confirmed="yes">org.mvel.MacroProcessor.parse(char[])</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.MacroProcessor.setMacros(java.util.Map)</name>
                <outbound type="class" confirmed="no">java.util.Map</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.MacroProcessor.macros</outbound>
                <inbound type="feature" confirmed="yes">org.mvel.MVEL.parseMacros(java.lang.String, java.util.Map)</inbound>
            </feature>
        </class>
        <class confirmed="yes">
            <name>org.mvel.Node</name>
            <outbound type="class" confirmed="no">java.lang.Cloneable</outbound>
            <outbound type="class" confirmed="no">java.lang.Object</outbound>
            <inbound type="feature" confirmed="yes">org.mvel.TemplateCompiler.compileExpression()</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.TemplateInterpreter.TemplateInterpreter(java.lang.CharSequence)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.TemplateInterpreter.TemplateInterpreter(java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.TemplateInterpreter.cloneAll(org.mvel.Node[])</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.TemplateInterpreter.execute(java.lang.Object, java.util.Map, org.mvel.TemplateRegistry)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.TemplateInterpreter.exitContext()</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.TemplateInterpreter.getForEachSegment(org.mvel.Node)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.TemplateInterpreter.getInternalSegment(org.mvel.Node)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.TemplateInterpreter.getSegment(org.mvel.Node)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.TemplateInterpreter.nodes</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.TemplateInterpreter.pop()</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.TemplateInterpreter.push()</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.TemplateInterpreter.push(org.mvel.Node)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.TemplateInterpreter.pushNode(int)</inbound>
            <feature confirmed="yes">
                <name>org.mvel.Node.Node()</name>
                <outbound type="feature" confirmed="no">java.lang.Object.Object()</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.Node.nodeType</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.Node.Node(int)</name>
                <outbound type="feature" confirmed="no">java.lang.Object.Object()</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.Node.nodeType</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.Node.startPos</outbound>
                <inbound type="feature" confirmed="yes">org.mvel.TemplateCompiler.compileExpression()</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.Node.Node(int, int)</name>
                <outbound type="feature" confirmed="no">java.lang.Object.Object()</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.Node.node</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.Node.nodeType</outbound>
                <inbound type="feature" confirmed="yes">org.mvel.TemplateCompiler.compileExpression()</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.Node.Node(int, int, int)</name>
                <outbound type="feature" confirmed="no">java.lang.Object.Object()</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.Node.endNode</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.Node.node</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.Node.nodeType</outbound>
                <inbound type="feature" confirmed="yes">org.mvel.TemplateCompiler.compileExpression()</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.Node.Node(int, int, int, int, int)</name>
                <outbound type="feature" confirmed="no">java.lang.Object.Object()</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.Node.endNode</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.Node.length</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.Node.node</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.Node.nodeType</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.Node.startPos</outbound>
                <inbound type="feature" confirmed="yes">org.mvel.TemplateCompiler.compileExpression()</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.Node.alias</name>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <inbound type="feature" confirmed="yes">org.mvel.Node.getAlias()</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.Node.setAlias(java.lang.String)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.Node.clone()</name>
                <outbound type="class" confirmed="no">java.lang.CloneNotSupportedException</outbound>
                <outbound type="class" confirmed="no">java.lang.Object</outbound>
                <inbound type="feature" confirmed="yes">org.mvel.TemplateInterpreter.cloneAll(org.mvel.Node[])</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.Node.endNode</name>
                <inbound type="feature" confirmed="yes">org.mvel.Node.Node(int, int, int)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.Node.Node(int, int, int, int, int)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.Node.getEndNode()</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.Node.setEndNode(int)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.Node.setNode(int)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.Node.getAlias()</name>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.Node.alias</outbound>
                <inbound type="feature" confirmed="yes">org.mvel.TemplateInterpreter.getForEachSegment(org.mvel.Node)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.Node.getEndNode()</name>
                <outbound type="feature" confirmed="yes">org.mvel.Node.endNode</outbound>
                <inbound type="feature" confirmed="yes">org.mvel.TemplateCompiler.compileExpression()</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.TemplateInterpreter.execute(java.lang.Object, java.util.Map, org.mvel.TemplateRegistry)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.TemplateInterpreter.exitContext()</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.Node.getEndPos()</name>
                <outbound type="feature" confirmed="yes">org.mvel.Node.length</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.Node.startPos</outbound>
                <inbound type="feature" confirmed="yes">org.mvel.TemplateCompiler.compileExpression()</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.TemplateInterpreter.execute(java.lang.Object, java.util.Map, org.mvel.TemplateRegistry)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.Node.getLength()</name>
                <outbound type="feature" confirmed="yes">org.mvel.Node.length</outbound>
                <inbound type="feature" confirmed="yes">org.mvel.TemplateInterpreter.getSegment(org.mvel.Node)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.Node.getName()</name>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.Node.name</outbound>
                <inbound type="feature" confirmed="yes">org.mvel.TemplateInterpreter.getForEachSegment(org.mvel.Node)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.Node.getNode()</name>
                <outbound type="feature" confirmed="yes">org.mvel.Node.node</outbound>
                <inbound type="feature" confirmed="yes">org.mvel.TemplateCompiler.compileExpression()</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.TemplateInterpreter.execute(java.lang.Object, java.util.Map, org.mvel.TemplateRegistry)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.Node.getNodeType()</name>
                <outbound type="feature" confirmed="yes">org.mvel.Node.nodeType</outbound>
                <inbound type="feature" confirmed="yes">org.mvel.TemplateCompiler.compileExpression()</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.Node.getRegister()</name>
                <outbound type="class" confirmed="no">java.lang.Object</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.Node.register</outbound>
                <inbound type="feature" confirmed="yes">org.mvel.TemplateCompiler.compileExpression()</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.TemplateInterpreter.execute(java.lang.Object, java.util.Map, org.mvel.TemplateRegistry)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.Node.getStartPos()</name>
                <outbound type="feature" confirmed="yes">org.mvel.Node.startPos</outbound>
                <inbound type="feature" confirmed="yes">org.mvel.TemplateCompiler.compileExpression()</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.TemplateInterpreter.execute(java.lang.Object, java.util.Map, org.mvel.TemplateRegistry)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.TemplateInterpreter.getInternalSegment(org.mvel.Node)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.TemplateInterpreter.getSegment(org.mvel.Node)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.Node.getToken()</name>
                <outbound type="feature" confirmed="yes">org.mvel.Node.nodeType</outbound>
                <inbound type="feature" confirmed="yes">org.mvel.TemplateCompiler.compileExpression()</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.TemplateInterpreter.execute(java.lang.Object, java.util.Map, org.mvel.TemplateRegistry)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.Node.length</name>
                <inbound type="feature" confirmed="yes">org.mvel.Node.Node(int, int, int, int, int)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.Node.getEndPos()</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.Node.getLength()</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.Node.setEndPos(int)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.Node.setLength(int)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.Node.name</name>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <inbound type="feature" confirmed="yes">org.mvel.Node.getName()</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.Node.setName(java.lang.String)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.Node.node</name>
                <inbound type="feature" confirmed="yes">org.mvel.Node.Node(int, int)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.Node.Node(int, int, int)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.Node.Node(int, int, int, int, int)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.Node.getNode()</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.Node.setNode(int)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.Node.nodeType</name>
                <inbound type="feature" confirmed="yes">org.mvel.Node.Node()</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.Node.Node(int)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.Node.Node(int, int)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.Node.Node(int, int, int)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.Node.Node(int, int, int, int, int)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.Node.getNodeType()</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.Node.getToken()</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.Node.setNodeType(int)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.Node.setToken(int)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.Node.register</name>
                <outbound type="class" confirmed="no">java.lang.Object</outbound>
                <inbound type="feature" confirmed="yes">org.mvel.Node.getRegister()</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.Node.setRegister(java.lang.Object)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.Node.setAlias(java.lang.String)</name>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.Node.alias</outbound>
                <inbound type="feature" confirmed="yes">org.mvel.TemplateCompiler.compileExpression()</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.Node.setEndNode(int)</name>
                <outbound type="feature" confirmed="yes">org.mvel.Node.endNode</outbound>
                <inbound type="feature" confirmed="yes">org.mvel.TemplateCompiler.compileExpression()</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.Node.setEndPos(int)</name>
                <outbound type="feature" confirmed="yes">org.mvel.Node.length</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.Node.startPos</outbound>
                <inbound type="feature" confirmed="yes">org.mvel.TemplateCompiler.compileExpression()</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.Node.setLength(int)</name>
                <outbound type="feature" confirmed="yes">org.mvel.Node.length</outbound>
                <inbound type="feature" confirmed="yes">org.mvel.TemplateCompiler.compileExpression()</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.Node.setName(java.lang.String)</name>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.Node.name</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.Node.setNode(int)</name>
                <outbound type="feature" confirmed="yes">org.mvel.Node.endNode</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.Node.node</outbound>
                <inbound type="feature" confirmed="yes">org.mvel.TemplateCompiler.compileExpression()</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.Node.setNodeType(int)</name>
                <outbound type="feature" confirmed="yes">org.mvel.Node.nodeType</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.Node.setRegister(java.lang.Object)</name>
                <outbound type="class" confirmed="no">java.lang.Object</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.Node.register</outbound>
                <inbound type="feature" confirmed="yes">org.mvel.TemplateCompiler.compileExpression()</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.Node.setStartPos(int)</name>
                <outbound type="feature" confirmed="yes">org.mvel.Node.startPos</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.Node.setToken(int)</name>
                <outbound type="feature" confirmed="yes">org.mvel.Node.nodeType</outbound>
                <inbound type="feature" confirmed="yes">org.mvel.TemplateCompiler.compileExpression()</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.Node.startPos</name>
                <inbound type="feature" confirmed="yes">org.mvel.Node.Node(int)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.Node.Node(int, int, int, int, int)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.Node.getEndPos()</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.Node.getStartPos()</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.Node.setEndPos(int)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.Node.setStartPos(int)</inbound>
            </feature>
        </class>
        <class confirmed="yes">
            <name>org.mvel.NodeType</name>
            <outbound type="class" confirmed="no">java.lang.Object</outbound>
            <feature confirmed="yes">
                <name>org.mvel.NodeType.ELSE</name>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.NodeType.ELSEIF</name>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.NodeType.END</name>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.NodeType.FOREACH</name>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.NodeType.GOTO</name>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.NodeType.IF</name>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.NodeType.INCLUDE_BY_REF</name>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.NodeType.LITERAL</name>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.NodeType.OPERATOR</name>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.NodeType.PROPERTY_EX</name>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.NodeType.TERMINUS</name>
            </feature>
        </class>
        <class confirmed="no">
            <name>org.mvel.Node[]</name>
            <inbound type="feature" confirmed="yes">org.mvel.TemplateInterpreter.TemplateInterpreter(java.lang.CharSequence)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.TemplateInterpreter.TemplateInterpreter(java.lang.String)</inbound>
        </class>
        <class confirmed="yes">
            <name>org.mvel.Operator</name>
            <outbound type="class" confirmed="no">java.lang.Object</outbound>
            <feature confirmed="yes">
                <name>org.mvel.Operator.ADD</name>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.Operator.AND</name>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.Operator.ASSERT</name>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.Operator.ASSIGN</name>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.Operator.ASSIGN_ADD</name>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.Operator.ASSIGN_STR_APPEND</name>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.Operator.ASSIGN_SUB</name>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.Operator.BW_AND</name>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.Operator.BW_NOT</name>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.Operator.BW_OR</name>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.Operator.BW_SHIFT_LEFT</name>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.Operator.BW_SHIFT_RIGHT</name>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.Operator.BW_USHIFT_LEFT</name>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.Operator.BW_USHIFT_RIGHT</name>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.Operator.BW_XOR</name>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.Operator.CHOR</name>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.Operator.CONTAINS</name>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.Operator.CONVERTABLE_TO</name>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.Operator.DEC</name>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.Operator.DEC_ASSIGN</name>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.Operator.DIV</name>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.Operator.DO</name>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.Operator.ELSE</name>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.Operator.END_OF_STMT</name>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.Operator.EQUAL</name>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.Operator.FOR</name>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.Operator.FOREACH</name>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.Operator.FUNCTION</name>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.Operator.GETHAN</name>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.Operator.GTHAN</name>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.Operator.IF</name>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.Operator.IMPORT</name>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.Operator.IMPORT_STATIC</name>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.Operator.INC</name>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.Operator.INC_ASSIGN</name>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.Operator.INSTANCEOF</name>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.Operator.LETHAN</name>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.Operator.LTHAN</name>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.Operator.MOD</name>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.Operator.MULT</name>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.Operator.NEQUAL</name>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.Operator.NEW</name>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.Operator.OR</name>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.Operator.POWER</name>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.Operator.PROJECTION</name>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.Operator.PTABLE</name>
                <inbound type="feature" confirmed="yes">org.mvel.AbstractParser.arithmeticFunctionReduction(int)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.Operator.static {}</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.util.CompilerTools.optimizeAST(org.mvel.ASTLinkedList, boolean)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.Operator.REGEX</name>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.Operator.RETURN</name>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.Operator.SIMILARITY</name>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.Operator.SOUNDEX</name>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.Operator.STK_SWAP</name>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.Operator.STK_X2SWAP</name>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.Operator.STK_XSWAP</name>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.Operator.STR_APPEND</name>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.Operator.SUB</name>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.Operator.SWITCH</name>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.Operator.TERNARY</name>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.Operator.TERNARY_ELSE</name>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.Operator.TYPED_VAR</name>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.Operator.WHILE</name>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.Operator.WITH</name>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.Operator.static {}</name>
                <outbound type="feature" confirmed="yes">org.mvel.Operator.PTABLE</outbound>
            </feature>
        </class>
        <class confirmed="yes">
            <name>org.mvel.OptimizationFailure</name>
            <outbound type="class" confirmed="no">java.lang.RuntimeException</outbound>
            <feature confirmed="yes">
                <name>org.mvel.OptimizationFailure.OptimizationFailure()</name>
                <outbound type="feature" confirmed="no">java.lang.RuntimeException.RuntimeException()</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.OptimizationFailure.OptimizationFailure(java.lang.String)</name>
                <outbound type="feature" confirmed="no">java.lang.RuntimeException.RuntimeException(java.lang.String)</outbound>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <inbound type="feature" confirmed="yes">org.mvel.PropertyAccessor.getMethod(java.lang.Object, java.lang.String)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.asm.ASMAccessorOptimizer.getMethod(java.lang.Object, java.lang.String)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.refl.ReflectiveAccessorOptimizer.getMethod(java.lang.Object, java.lang.String)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.util.ParseTools.finalLocalVariableFactory(org.mvel.integration.VariableResolverFactory)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.util.ParseTools.findClassImportResolverFactory(org.mvel.integration.VariableResolverFactory)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.util.ParseTools.findStaticMethodImportResolverFactory(org.mvel.integration.VariableResolverFactory)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.OptimizationFailure.OptimizationFailure(java.lang.String, java.lang.Throwable)</name>
                <outbound type="feature" confirmed="no">java.lang.RuntimeException.RuntimeException(java.lang.String, java.lang.Throwable)</outbound>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="class" confirmed="no">java.lang.Throwable</outbound>
                <inbound type="feature" confirmed="yes">org.mvel.ASTNode.getReducedValueAccelerated(java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.asm.ASMAccessorOptimizer.getBeanProperty(java.lang.Object, java.lang.String)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.asm.ASMAccessorOptimizer.optimizeCollection(char[], java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.asm.ASMAccessorOptimizer.optimizeObjectCreation(char[], java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.refl.StaticVarAccessor.getValue(java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.OptimizationFailure.OptimizationFailure(java.lang.Throwable)</name>
                <outbound type="feature" confirmed="no">java.lang.RuntimeException.RuntimeException(java.lang.Throwable)</outbound>
                <outbound type="class" confirmed="no">java.lang.Throwable</outbound>
            </feature>
        </class>
        <class confirmed="yes">
            <name>org.mvel.ParseException</name>
            <outbound type="class" confirmed="no">java.lang.RuntimeException</outbound>
            <feature confirmed="yes">
                <name>org.mvel.ParseException.ParseException()</name>
                <outbound type="feature" confirmed="no">java.lang.RuntimeException.RuntimeException()</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.ParseException.ParseException(java.lang.String)</name>
                <outbound type="feature" confirmed="no">java.lang.RuntimeException.RuntimeException()</outbound>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.ParseException.message</outbound>
                <inbound type="feature" confirmed="yes">org.mvel.AbstractParser.nextToken()</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.util.ParseTools.handleEscapeSequence(char)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.ParseException.ParseException(java.lang.String, char[], int)</name>
                <outbound type="class" confirmed="no">java.lang.Object</outbound>
                <outbound type="feature" confirmed="no">java.lang.RuntimeException.RuntimeException()</outbound>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="feature" confirmed="no">java.lang.String.String(char[], int, int)</outbound>
                <outbound type="feature" confirmed="no">java.lang.String.valueOf(java.lang.Object)</outbound>
                <outbound type="class" confirmed="no">java.lang.StringBuffer</outbound>
                <outbound type="feature" confirmed="no">java.lang.StringBuffer.StringBuffer(java.lang.String)</outbound>
                <outbound type="feature" confirmed="no">java.lang.StringBuffer.append(int)</outbound>
                <outbound type="feature" confirmed="no">java.lang.StringBuffer.append(java.lang.String)</outbound>
                <outbound type="feature" confirmed="no">java.lang.StringBuffer.toString()</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.ParseException.cursorPosition</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.ParseException.message</outbound>
                <inbound type="feature" confirmed="yes">org.mvel.AbstractParser.nextToken()</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.MVELInterpretedRuntime.parse()</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.TemplateCompiler.buildIncludeRef(char[])</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.ParseException.ParseException(java.lang.String, java.lang.Throwable)</name>
                <outbound type="feature" confirmed="no">java.lang.RuntimeException.RuntimeException(java.lang.Throwable)</outbound>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="class" confirmed="no">java.lang.Throwable</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.ParseException.message</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.ParseException.ParseException(java.lang.Throwable)</name>
                <outbound type="feature" confirmed="no">java.lang.RuntimeException.RuntimeException(java.lang.Throwable)</outbound>
                <outbound type="class" confirmed="no">java.lang.Throwable</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.ParseException.cursorPosition</name>
                <inbound type="feature" confirmed="yes">org.mvel.ParseException.ParseException(java.lang.String, char[], int)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.ParseException.getCursorPosition()</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.ParseException.getCursorPosition()</name>
                <outbound type="feature" confirmed="yes">org.mvel.ParseException.cursorPosition</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.ParseException.getMessage()</name>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.ParseException.message</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.ParseException.message</name>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <inbound type="feature" confirmed="yes">org.mvel.ParseException.ParseException(java.lang.String)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.ParseException.ParseException(java.lang.String, char[], int)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.ParseException.ParseException(java.lang.String, java.lang.Throwable)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.ParseException.getMessage()</inbound>
            </feature>
        </class>
        <class confirmed="yes">
            <name>org.mvel.ParserContext</name>
            <outbound type="class" confirmed="no">java.io.Serializable</outbound>
            <outbound type="class" confirmed="no">java.lang.Object</outbound>
            <inbound type="feature" confirmed="yes">org.mvel.AbstractParser._captureBlock(org.mvel.ASTNode, char[], boolean, int)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.AbstractParser.addFatalError(java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.AbstractParser.addFatalError(java.lang.String, int, int)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.AbstractParser.addWarning(java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.AbstractParser.contextControl(int, org.mvel.ParserContext, org.mvel.AbstractParser)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.AbstractParser.createPropertyToken(int, int)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.AbstractParser.getCurrentSourceFileName()</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.AbstractParser.getCurrentThreadParserContext()</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.AbstractParser.getParserContext()</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.AbstractParser.newContext()</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.AbstractParser.newContext(org.mvel.ParserContext)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.AbstractParser.nextToken()</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.AbstractParser.pCtx</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.AbstractParser.removeContext()</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.AbstractParser.resetParserContext()</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.CompiledExpression.CompiledExpression(org.mvel.ASTIterator, java.lang.String, java.lang.Class, org.mvel.ParserContext, boolean)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.CompiledExpression.getParserContext()</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.CompiledExpression.parserContext</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.CompiledExpression.setParserContext(org.mvel.ParserContext)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.ExpressionCompiler.ExpressionCompiler(char[], org.mvel.ParserContext)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.ExpressionCompiler._compile()</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.ExpressionCompiler.compile()</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.ExpressionCompiler.compile(org.mvel.ParserContext)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.ExpressionCompiler.getParserContextState()</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.ExpressionCompiler.pCtx</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.ExpressionCompiler.verify(org.mvel.ParserContext, org.mvel.ASTNode)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.MVEL.compileExpression(char[], java.util.Map, java.util.Map, java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.MVEL.compileExpression(java.lang.String, java.util.Map, java.util.Map, java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.MVELInterpretedRuntime.getImport(java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.MVELInterpretedRuntime.hasImport(java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.MVELInterpretedRuntime.parse()</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.MVELRuntime.execute(boolean, org.mvel.CompiledExpression, java.lang.Object, org.mvel.integration.VariableResolverFactory)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.PropertyVerifier.PropertyVerifier(char[], org.mvel.ParserContext)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.PropertyVerifier.PropertyVerifier(java.lang.String, org.mvel.ParserContext)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.PropertyVerifier.getBeanProperty(java.lang.Class, java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.PropertyVerifier.getCollectionProperty(java.lang.Class, java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.PropertyVerifier.getMethod(java.lang.Class, java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.PropertyVerifier.parserContext</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.ast.NewObjectNode.NewObjectNode(char[], int)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.ast.WithNode.WithNode(char[], char[], int)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.debug.DebuggerContext.checkBreak(org.mvel.ast.LineLabel, org.mvel.integration.VariableResolverFactory, org.mvel.CompiledExpression)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.debug.Frame.Frame(java.lang.String, int, org.mvel.integration.VariableResolverFactory, org.mvel.ParserContext)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.debug.Frame.Frame(org.mvel.ast.LineLabel, org.mvel.integration.VariableResolverFactory, org.mvel.ParserContext)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.debug.Frame.getParserContext()</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.debug.Frame.parserContext</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.debug.Frame.setParserContext(org.mvel.ParserContext)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.integration.impl.ClassImportResolverFactory.ClassImportResolverFactory(org.mvel.ParserContext, org.mvel.integration.VariableResolverFactory)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.integration.impl.StaticMethodImportResolverFactory.StaticMethodImportResolverFactory(org.mvel.ParserContext)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.util.ParseTools.findClass(org.mvel.integration.VariableResolverFactory, java.lang.String)</inbound>
            <feature confirmed="yes">
                <name>org.mvel.ParserContext.ParserContext()</name>
                <outbound type="feature" confirmed="no">java.lang.Object.Object()</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.ParserContext.blockSymbols</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.ParserContext.compiled</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.ParserContext.debugSymbols</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.ParserContext.executableCodeReached</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.ParserContext.fatalError</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.ParserContext.lineCount</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.ParserContext.retainParserState</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.ParserContext.strictTypeEnforcement</outbound>
                <inbound type="feature" confirmed="yes">org.mvel.AbstractParser.newContext()</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.ExpressionCompiler.compile()</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.ParserContext.ParserContext(boolean)</name>
                <outbound type="feature" confirmed="no">java.lang.Object.Object()</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.ParserContext.blockSymbols</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.ParserContext.compiled</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.ParserContext.debugSymbols</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.ParserContext.executableCodeReached</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.ParserContext.fatalError</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.ParserContext.lineCount</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.ParserContext.retainParserState</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.ParserContext.strictTypeEnforcement</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.ParserContext.ParserContext(java.lang.Object)</name>
                <outbound type="class" confirmed="no">java.lang.Object</outbound>
                <outbound type="feature" confirmed="no">java.lang.Object.Object()</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.ParserContext.blockSymbols</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.ParserContext.compiled</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.ParserContext.debugSymbols</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.ParserContext.executableCodeReached</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.ParserContext.fatalError</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.ParserContext.lineCount</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.ParserContext.retainParserState</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.ParserContext.rootParser</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.ParserContext.strictTypeEnforcement</outbound>
                <inbound type="feature" confirmed="yes">org.mvel.AbstractParser.contextControl(int, org.mvel.ParserContext, org.mvel.AbstractParser)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.ParserContext.ParserContext(java.util.Map, java.util.Map, java.lang.String)</name>
                <outbound type="feature" confirmed="no">java.lang.Object.Object()</outbound>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="class" confirmed="no">java.util.Map</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.ParserContext.blockSymbols</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.ParserContext.compiled</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.ParserContext.debugSymbols</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.ParserContext.executableCodeReached</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.ParserContext.fatalError</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.ParserContext.interceptors</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.ParserContext.lineCount</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.ParserContext.retainParserState</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.ParserContext.setImports(java.util.Map)</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.ParserContext.sourceFile</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.ParserContext.strictTypeEnforcement</outbound>
                <inbound type="feature" confirmed="yes">org.mvel.MVEL.compileExpression(char[], java.util.Map, java.util.Map, java.lang.String)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.MVEL.compileExpression(java.lang.String, java.util.Map, java.util.Map, java.lang.String)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.ParserContext.addError(org.mvel.ErrorDetail)</name>
                <outbound type="class" confirmed="no">java.lang.Object</outbound>
                <outbound type="feature" confirmed="no">java.util.ArrayList.ArrayList()</outbound>
                <outbound type="class" confirmed="no">java.util.List</outbound>
                <outbound type="feature" confirmed="no">java.util.List.add(java.lang.Object)</outbound>
                <outbound type="class" confirmed="yes">org.mvel.ErrorDetail</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.ErrorDetail.isCritical()</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.ParserContext.errorList</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.ParserContext.fatalError</outbound>
                <inbound type="feature" confirmed="yes">org.mvel.AbstractParser.addFatalError(java.lang.String)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.AbstractParser.addFatalError(java.lang.String, int, int)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.AbstractParser.addWarning(java.lang.String)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.ParserContext.addImport(java.lang.Class)</name>
                <outbound type="class" confirmed="no">java.lang.Class</outbound>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.ParserContext.addImport(java.lang.String, java.lang.Class)</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.util.ParseTools.getSimpleClassName(java.lang.Class)</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.ParserContext.addImport(java.lang.String, java.lang.Class)</name>
                <outbound type="class" confirmed="no">java.lang.Class</outbound>
                <outbound type="class" confirmed="no">java.lang.Object</outbound>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="feature" confirmed="no">java.util.HashMap.HashMap()</outbound>
                <outbound type="class" confirmed="no">java.util.Map</outbound>
                <outbound type="feature" confirmed="no">java.util.Map.put(java.lang.Object, java.lang.Object)</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.ParserContext.imports</outbound>
                <inbound type="feature" confirmed="yes">org.mvel.AbstractParser.nextToken()</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.ParserContext.addImport(java.lang.Class)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.ParserContext.checkForDynamicImport(java.lang.String)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.ParserContext.setImports(java.util.Map)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.ParserContext.addImport(java.lang.String, java.lang.reflect.Method)</name>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="class" confirmed="no">java.lang.reflect.Method</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.ParserContext.addImport(java.lang.String, org.mvel.util.MethodStub)</outbound>
                <outbound type="class" confirmed="yes">org.mvel.util.MethodStub</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.util.MethodStub.MethodStub(java.lang.reflect.Method)</outbound>
                <inbound type="feature" confirmed="yes">org.mvel.ParserContext.setImports(java.util.Map)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.ParserContext.addImport(java.lang.String, org.mvel.util.MethodStub)</name>
                <outbound type="class" confirmed="no">java.lang.Object</outbound>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="feature" confirmed="no">java.util.HashMap.HashMap()</outbound>
                <outbound type="class" confirmed="no">java.util.Map</outbound>
                <outbound type="feature" confirmed="no">java.util.Map.put(java.lang.Object, java.lang.Object)</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.ParserContext.imports</outbound>
                <outbound type="class" confirmed="yes">org.mvel.util.MethodStub</outbound>
                <inbound type="feature" confirmed="yes">org.mvel.ParserContext.addImport(java.lang.String, java.lang.reflect.Method)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.ParserContext.setImports(java.util.Map)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.ParserContext.addInput(java.lang.String, java.lang.Class)</name>
                <outbound type="class" confirmed="no">java.lang.Class</outbound>
                <outbound type="feature" confirmed="no">java.lang.Class.forName(java.lang.String)</outbound>
                <outbound type="class" confirmed="no">java.lang.ClassNotFoundException</outbound>
                <outbound type="feature" confirmed="no">java.lang.NoClassDefFoundError.NoClassDefFoundError(java.lang.String)</outbound>
                <outbound type="class" confirmed="no">java.lang.Object</outbound>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="feature" confirmed="no">java.lang.Throwable.getMessage()</outbound>
                <outbound type="feature" confirmed="no">java.util.HashMap.HashMap()</outbound>
                <outbound type="class" confirmed="no">java.util.Map</outbound>
                <outbound type="feature" confirmed="no">java.util.Map.containsKey(java.lang.Object)</outbound>
                <outbound type="feature" confirmed="no">java.util.Map.put(java.lang.Object, java.lang.Object)</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.ParserContext.inputs</outbound>
                <inbound type="feature" confirmed="yes">org.mvel.ExpressionCompiler.verify(org.mvel.ParserContext, org.mvel.ASTNode)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.ParserContext.addKnownLine(int)</name>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.ParserContext.addKnownLine(java.lang.String, int)</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.ParserContext.sourceFile</outbound>
                <inbound type="feature" confirmed="yes">org.mvel.AbstractParser.nextToken()</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.ParserContext.setLineAndOffset(int, int)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.ParserContext.addKnownLine(java.lang.String, int)</name>
                <outbound type="feature" confirmed="no">java.lang.Integer.Integer(int)</outbound>
                <outbound type="class" confirmed="no">java.lang.Object</outbound>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="feature" confirmed="no">java.util.HashMap.HashMap()</outbound>
                <outbound type="feature" confirmed="no">java.util.HashSet.HashSet()</outbound>
                <outbound type="class" confirmed="no">java.util.Map</outbound>
                <outbound type="feature" confirmed="no">java.util.Map.containsKey(java.lang.Object)</outbound>
                <outbound type="feature" confirmed="no">java.util.Map.get(java.lang.Object)</outbound>
                <outbound type="feature" confirmed="no">java.util.Map.put(java.lang.Object, java.lang.Object)</outbound>
                <outbound type="class" confirmed="no">java.util.Set</outbound>
                <outbound type="feature" confirmed="no">java.util.Set.add(java.lang.Object)</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.ParserContext.sourceMap</outbound>
                <inbound type="feature" confirmed="yes">org.mvel.ParserContext.addKnownLine(int)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.ParserContext.addPackageImport(java.lang.String)</name>
                <outbound type="class" confirmed="no">java.lang.Object</outbound>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="feature" confirmed="no">java.util.HashSet.HashSet()</outbound>
                <outbound type="class" confirmed="no">java.util.Set</outbound>
                <outbound type="feature" confirmed="no">java.util.Set.add(java.lang.Object)</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.ParserContext.packageImports</outbound>
                <inbound type="feature" confirmed="yes">org.mvel.AbstractParser.nextToken()</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.ParserContext.addVariable(java.lang.String, java.lang.Class)</name>
                <outbound type="class" confirmed="no">java.lang.Class</outbound>
                <outbound type="feature" confirmed="no">java.lang.Class.forName(java.lang.String)</outbound>
                <outbound type="class" confirmed="no">java.lang.ClassNotFoundException</outbound>
                <outbound type="feature" confirmed="no">java.lang.NoClassDefFoundError.NoClassDefFoundError(java.lang.String)</outbound>
                <outbound type="class" confirmed="no">java.lang.Object</outbound>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="feature" confirmed="no">java.lang.Throwable.getMessage()</outbound>
                <outbound type="class" confirmed="no">java.util.Map</outbound>
                <outbound type="feature" confirmed="no">java.util.Map.containsKey(java.lang.Object)</outbound>
                <outbound type="feature" confirmed="no">java.util.Map.put(java.lang.Object, java.lang.Object)</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.ParserContext.variables</outbound>
                <inbound type="feature" confirmed="yes">org.mvel.ExpressionCompiler.verify(org.mvel.ParserContext, org.mvel.ASTNode)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.ParserContext.blockSymbols</name>
                <inbound type="feature" confirmed="yes">org.mvel.ParserContext.ParserContext()</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.ParserContext.ParserContext(boolean)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.ParserContext.ParserContext(java.lang.Object)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.ParserContext.ParserContext(java.util.Map, java.util.Map, java.lang.String)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.ParserContext.isBlockSymbols()</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.ParserContext.setBlockSymbols(boolean)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.ParserContext.checkForDynamicImport(java.lang.String)</name>
                <outbound type="class" confirmed="no">java.lang.Class</outbound>
                <outbound type="class" confirmed="no">java.lang.ClassLoader</outbound>
                <outbound type="feature" confirmed="no">java.lang.ClassLoader.loadClass(java.lang.String)</outbound>
                <outbound type="class" confirmed="no">java.lang.ClassNotFoundException</outbound>
                <outbound type="class" confirmed="no">java.lang.NoClassDefFoundError</outbound>
                <outbound type="feature" confirmed="no">java.lang.NoClassDefFoundError.getMessage()</outbound>
                <outbound type="class" confirmed="no">java.lang.Object</outbound>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="feature" confirmed="no">java.lang.String.valueOf(java.lang.Object)</outbound>
                <outbound type="class" confirmed="no">java.lang.StringBuffer</outbound>
                <outbound type="feature" confirmed="no">java.lang.StringBuffer.StringBuffer(java.lang.String)</outbound>
                <outbound type="feature" confirmed="no">java.lang.StringBuffer.append(java.lang.String)</outbound>
                <outbound type="feature" confirmed="no">java.lang.StringBuffer.toString()</outbound>
                <outbound type="class" confirmed="no">java.lang.Thread</outbound>
                <outbound type="feature" confirmed="no">java.lang.Thread.currentThread()</outbound>
                <outbound type="feature" confirmed="no">java.lang.Thread.getContextClassLoader()</outbound>
                <outbound type="class" confirmed="no">java.util.Iterator</outbound>
                <outbound type="feature" confirmed="no">java.util.Iterator.hasNext()</outbound>
                <outbound type="feature" confirmed="no">java.util.Iterator.next()</outbound>
                <outbound type="class" confirmed="no">java.util.Set</outbound>
                <outbound type="feature" confirmed="no">java.util.Set.iterator()</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.CompileException.CompileException(java.lang.String)</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.ParserContext.addImport(java.lang.String, java.lang.Class)</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.ParserContext.packageImports</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.util.PropertyTools.contains(java.lang.Object, java.lang.Object)</outbound>
                <inbound type="feature" confirmed="yes">org.mvel.ParserContext.hasImport(java.lang.String)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.ParserContext.compiled</name>
                <inbound type="feature" confirmed="yes">org.mvel.ParserContext.ParserContext()</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.ParserContext.ParserContext(boolean)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.ParserContext.ParserContext(java.lang.Object)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.ParserContext.ParserContext(java.util.Map, java.util.Map, java.lang.String)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.ParserContext.isCompiled()</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.ParserContext.setCompiled(boolean)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.ParserContext.debugSymbols</name>
                <inbound type="feature" confirmed="yes">org.mvel.ParserContext.ParserContext()</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.ParserContext.ParserContext(boolean)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.ParserContext.ParserContext(java.lang.Object)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.ParserContext.ParserContext(java.util.Map, java.util.Map, java.lang.String)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.ParserContext.isDebugSymbols()</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.ParserContext.setDebugSymbols(boolean)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.ParserContext.errorList</name>
                <outbound type="class" confirmed="no">java.util.List</outbound>
                <inbound type="feature" confirmed="yes">org.mvel.ParserContext.addError(org.mvel.ErrorDetail)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.ParserContext.getErrorList()</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.ParserContext.setErrorList(java.util.List)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.ParserContext.executableCodeReached</name>
                <inbound type="feature" confirmed="yes">org.mvel.ParserContext.ParserContext()</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.ParserContext.ParserContext(boolean)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.ParserContext.ParserContext(java.lang.Object)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.ParserContext.ParserContext(java.util.Map, java.util.Map, java.lang.String)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.ParserContext.isExecutableCodeReached()</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.ParserContext.setExecutableCodeReached(boolean)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.ParserContext.fatalError</name>
                <inbound type="feature" confirmed="yes">org.mvel.ParserContext.ParserContext()</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.ParserContext.ParserContext(boolean)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.ParserContext.ParserContext(java.lang.Object)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.ParserContext.ParserContext(java.util.Map, java.util.Map, java.lang.String)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.ParserContext.addError(org.mvel.ErrorDetail)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.ParserContext.isFatalError()</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.ParserContext.setFatalError(boolean)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.ParserContext.getErrorList()</name>
                <outbound type="class" confirmed="no">java.util.List</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.ParserContext.errorList</outbound>
                <inbound type="feature" confirmed="yes">org.mvel.ExpressionCompiler.compile(org.mvel.ParserContext)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.ParserContext.getImport(java.lang.String)</name>
                <outbound type="class" confirmed="no">java.lang.Class</outbound>
                <outbound type="class" confirmed="no">java.lang.Object</outbound>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="class" confirmed="no">java.util.Map</outbound>
                <outbound type="feature" confirmed="no">java.util.Map.containsKey(java.lang.Object)</outbound>
                <outbound type="feature" confirmed="no">java.util.Map.get(java.lang.Object)</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.AbstractParser.LITERALS</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.ParserContext.imports</outbound>
                <inbound type="feature" confirmed="yes">org.mvel.AbstractParser.createPropertyToken(int, int)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.AbstractParser.nextToken()</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.MVELInterpretedRuntime.getImport(java.lang.String)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.PropertyVerifier.getBeanProperty(java.lang.Class, java.lang.String)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.PropertyVerifier.getCollectionProperty(java.lang.Class, java.lang.String)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.ast.NewObjectNode.NewObjectNode(char[], int)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.util.ParseTools.findClass(org.mvel.integration.VariableResolverFactory, java.lang.String)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.ParserContext.getImports()</name>
                <outbound type="class" confirmed="no">java.util.Map</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.ParserContext.imports</outbound>
                <inbound type="feature" confirmed="yes">org.mvel.CompiledExpression.setParserContext(org.mvel.ParserContext)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.integration.impl.ClassImportResolverFactory.ClassImportResolverFactory(org.mvel.ParserContext, org.mvel.integration.VariableResolverFactory)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.integration.impl.StaticMethodImportResolverFactory.StaticMethodImportResolverFactory(org.mvel.ParserContext)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.ParserContext.getInputs()</name>
                <outbound type="class" confirmed="no">java.util.Map</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.ParserContext.inputs</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.ParserContext.getInterceptors()</name>
                <outbound type="class" confirmed="no">java.util.Map</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.ParserContext.interceptors</outbound>
                <inbound type="feature" confirmed="yes">org.mvel.AbstractParser.nextToken()</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.ParserContext.getLastLineLabel()</name>
                <outbound type="feature" confirmed="yes">org.mvel.ParserContext.lastLineLabel</outbound>
                <outbound type="class" confirmed="yes">org.mvel.ast.LineLabel</outbound>
                <inbound type="feature" confirmed="yes">org.mvel.AbstractParser.nextToken()</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.ParserContext.getLineCount()</name>
                <outbound type="feature" confirmed="yes">org.mvel.ParserContext.lineCount</outbound>
                <inbound type="feature" confirmed="yes">org.mvel.AbstractParser._captureBlock(org.mvel.ASTNode, char[], boolean, int)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.AbstractParser.addFatalError(java.lang.String)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.AbstractParser.nextToken()</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.ParserContext.getLineOffset()</name>
                <outbound type="feature" confirmed="yes">org.mvel.ParserContext.lineOffset</outbound>
                <inbound type="feature" confirmed="yes">org.mvel.AbstractParser.addFatalError(java.lang.String)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.ParserContext.getPackageImports()</name>
                <outbound type="class" confirmed="no">java.util.Set</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.ParserContext.packageImports</outbound>
                <inbound type="feature" confirmed="yes">org.mvel.integration.impl.ClassImportResolverFactory.ClassImportResolverFactory(org.mvel.ParserContext, org.mvel.integration.VariableResolverFactory)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.ParserContext.getRootParser()</name>
                <outbound type="class" confirmed="no">java.lang.Object</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.ParserContext.rootParser</outbound>
                <inbound type="feature" confirmed="yes">org.mvel.MVELInterpretedRuntime.parse()</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.ParserContext.getSourceFile()</name>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.ParserContext.sourceFile</outbound>
                <inbound type="feature" confirmed="yes">org.mvel.AbstractParser.getCurrentSourceFileName()</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.AbstractParser.nextToken()</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.ParserContext.getStaticImport(java.lang.String)</name>
                <outbound type="class" confirmed="no">java.lang.Object</outbound>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="class" confirmed="no">java.util.Map</outbound>
                <outbound type="feature" confirmed="no">java.util.Map.get(java.lang.Object)</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.ParserContext.imports</outbound>
                <outbound type="class" confirmed="yes">org.mvel.util.MethodStub</outbound>
                <inbound type="feature" confirmed="yes">org.mvel.PropertyVerifier.getMethod(java.lang.Class, java.lang.String)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.ParserContext.getVarOrInputType(java.lang.String)</name>
                <outbound type="class" confirmed="no">java.lang.Class</outbound>
                <outbound type="feature" confirmed="no">java.lang.Class.forName(java.lang.String)</outbound>
                <outbound type="class" confirmed="no">java.lang.ClassNotFoundException</outbound>
                <outbound type="feature" confirmed="no">java.lang.NoClassDefFoundError.NoClassDefFoundError(java.lang.String)</outbound>
                <outbound type="class" confirmed="no">java.lang.Object</outbound>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="feature" confirmed="no">java.lang.Throwable.getMessage()</outbound>
                <outbound type="class" confirmed="no">java.util.Map</outbound>
                <outbound type="feature" confirmed="no">java.util.Map.containsKey(java.lang.Object)</outbound>
                <outbound type="feature" confirmed="no">java.util.Map.get(java.lang.Object)</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.ParserContext.inputs</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.ParserContext.variables</outbound>
                <inbound type="feature" confirmed="yes">org.mvel.PropertyVerifier.getBeanProperty(java.lang.Class, java.lang.String)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.PropertyVerifier.getCollectionProperty(java.lang.Class, java.lang.String)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.ParserContext.getVariables()</name>
                <outbound type="class" confirmed="no">java.util.Map</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.ParserContext.variables</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.ParserContext.hasImport(java.lang.String)</name>
                <outbound type="class" confirmed="no">java.lang.Object</outbound>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="feature" confirmed="no">java.lang.String.equals(java.lang.Object)</outbound>
                <outbound type="class" confirmed="no">java.util.Map</outbound>
                <outbound type="feature" confirmed="no">java.util.Map.containsKey(java.lang.Object)</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.AbstractParser.LITERALS</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.ParserContext.checkForDynamicImport(java.lang.String)</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.ParserContext.imports</outbound>
                <inbound type="feature" confirmed="yes">org.mvel.AbstractParser.createPropertyToken(int, int)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.AbstractParser.nextToken()</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.MVELInterpretedRuntime.getImport(java.lang.String)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.MVELInterpretedRuntime.hasImport(java.lang.String)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.PropertyVerifier.getBeanProperty(java.lang.Class, java.lang.String)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.PropertyVerifier.getCollectionProperty(java.lang.Class, java.lang.String)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.PropertyVerifier.getMethod(java.lang.Class, java.lang.String)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.ast.NewObjectNode.NewObjectNode(char[], int)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.util.ParseTools.findClass(org.mvel.integration.VariableResolverFactory, java.lang.String)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.ParserContext.hasImports()</name>
                <outbound type="class" confirmed="no">java.util.Map</outbound>
                <outbound type="feature" confirmed="no">java.util.Map.size()</outbound>
                <outbound type="class" confirmed="no">java.util.Set</outbound>
                <outbound type="feature" confirmed="no">java.util.Set.size()</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.ParserContext.imports</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.ParserContext.packageImports</outbound>
                <inbound type="feature" confirmed="yes">org.mvel.AbstractParser.createPropertyToken(int, int)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.ParserContext.hasVarOrInput(java.lang.String)</name>
                <outbound type="class" confirmed="no">java.lang.Object</outbound>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="class" confirmed="no">java.util.Map</outbound>
                <outbound type="feature" confirmed="no">java.util.Map.containsKey(java.lang.Object)</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.ParserContext.inputs</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.ParserContext.variables</outbound>
                <inbound type="feature" confirmed="yes">org.mvel.ExpressionCompiler.verify(org.mvel.ParserContext, org.mvel.ASTNode)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.PropertyVerifier.getBeanProperty(java.lang.Class, java.lang.String)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.PropertyVerifier.getCollectionProperty(java.lang.Class, java.lang.String)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.ParserContext.hasVariable(java.lang.String)</name>
                <outbound type="class" confirmed="no">java.lang.Object</outbound>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="class" confirmed="no">java.util.Map</outbound>
                <outbound type="feature" confirmed="no">java.util.Map.containsKey(java.lang.Object)</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.ParserContext.variables</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.ParserContext.imports</name>
                <outbound type="class" confirmed="no">java.util.Map</outbound>
                <inbound type="feature" confirmed="yes">org.mvel.ParserContext.addImport(java.lang.String, java.lang.Class)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.ParserContext.addImport(java.lang.String, org.mvel.util.MethodStub)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.ParserContext.getImport(java.lang.String)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.ParserContext.getImports()</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.ParserContext.getStaticImport(java.lang.String)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.ParserContext.hasImport(java.lang.String)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.ParserContext.hasImports()</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.ParserContext.initializeTables()</name>
                <outbound type="feature" confirmed="no">java.util.HashMap.HashMap()</outbound>
                <outbound type="class" confirmed="no">java.util.Map</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.ParserContext.inputs</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.ParserContext.variables</outbound>
                <inbound type="feature" confirmed="yes">org.mvel.ExpressionCompiler._compile()</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.ParserContext.inputs</name>
                <outbound type="class" confirmed="no">java.util.Map</outbound>
                <inbound type="feature" confirmed="yes">org.mvel.ParserContext.addInput(java.lang.String, java.lang.Class)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.ParserContext.getInputs()</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.ParserContext.getVarOrInputType(java.lang.String)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.ParserContext.hasVarOrInput(java.lang.String)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.ParserContext.initializeTables()</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.ParserContext.processTables()</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.ParserContext.setInputs(java.util.Map)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.ParserContext.interceptors</name>
                <outbound type="class" confirmed="no">java.util.Map</outbound>
                <inbound type="feature" confirmed="yes">org.mvel.ParserContext.ParserContext(java.util.Map, java.util.Map, java.lang.String)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.ParserContext.getInterceptors()</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.ParserContext.setInterceptors(java.util.Map)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.ParserContext.isBlockSymbols()</name>
                <outbound type="feature" confirmed="yes">org.mvel.ParserContext.blockSymbols</outbound>
                <inbound type="feature" confirmed="yes">org.mvel.AbstractParser.nextToken()</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.ParserContext.isCompiled()</name>
                <outbound type="feature" confirmed="yes">org.mvel.ParserContext.compiled</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.ParserContext.isDebugSymbols()</name>
                <outbound type="feature" confirmed="yes">org.mvel.ParserContext.debugSymbols</outbound>
                <inbound type="feature" confirmed="yes">org.mvel.ExpressionCompiler._compile()</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.ExpressionCompiler.compile(org.mvel.ParserContext)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.ParserContext.isExecutableCodeReached()</name>
                <outbound type="feature" confirmed="yes">org.mvel.ParserContext.executableCodeReached</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.ParserContext.isFatalError()</name>
                <outbound type="feature" confirmed="yes">org.mvel.ParserContext.fatalError</outbound>
                <inbound type="feature" confirmed="yes">org.mvel.ExpressionCompiler.compile(org.mvel.ParserContext)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.ParserContext.isKnownLine(java.lang.String, int)</name>
                <outbound type="feature" confirmed="no">java.lang.Integer.Integer(int)</outbound>
                <outbound type="class" confirmed="no">java.lang.Object</outbound>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="class" confirmed="no">java.util.Map</outbound>
                <outbound type="feature" confirmed="no">java.util.Map.containsKey(java.lang.Object)</outbound>
                <outbound type="feature" confirmed="no">java.util.Map.get(java.lang.Object)</outbound>
                <outbound type="class" confirmed="no">java.util.Set</outbound>
                <outbound type="feature" confirmed="no">java.util.Set.contains(java.lang.Object)</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.ParserContext.sourceMap</outbound>
                <inbound type="feature" confirmed="yes">org.mvel.AbstractParser.nextToken()</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.ParserContext.isRetainParserState()</name>
                <outbound type="feature" confirmed="yes">org.mvel.ParserContext.retainParserState</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.ParserContext.isStrictTypeEnforcement()</name>
                <outbound type="feature" confirmed="yes">org.mvel.ParserContext.strictTypeEnforcement</outbound>
                <inbound type="feature" confirmed="yes">org.mvel.PropertyVerifier.getBeanProperty(java.lang.Class, java.lang.String)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.PropertyVerifier.getMethod(java.lang.Class, java.lang.String)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.ParserContext.lastLineLabel</name>
                <outbound type="class" confirmed="yes">org.mvel.ast.LineLabel</outbound>
                <inbound type="feature" confirmed="yes">org.mvel.ParserContext.getLastLineLabel()</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.ParserContext.setLastLineLabel(org.mvel.ast.LineLabel)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.ParserContext.lineCount</name>
                <inbound type="feature" confirmed="yes">org.mvel.ParserContext.ParserContext()</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.ParserContext.ParserContext(boolean)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.ParserContext.ParserContext(java.lang.Object)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.ParserContext.ParserContext(java.util.Map, java.util.Map, java.lang.String)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.ParserContext.getLineCount()</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.ParserContext.setLineAndOffset(int, int)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.ParserContext.setLineCount(int)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.ParserContext.lineOffset</name>
                <inbound type="feature" confirmed="yes">org.mvel.ParserContext.getLineOffset()</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.ParserContext.setLineAndOffset(int, int)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.ParserContext.setLineOffset(short)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.ParserContext.packageImports</name>
                <outbound type="class" confirmed="no">java.util.Set</outbound>
                <inbound type="feature" confirmed="yes">org.mvel.ParserContext.addPackageImport(java.lang.String)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.ParserContext.checkForDynamicImport(java.lang.String)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.ParserContext.getPackageImports()</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.ParserContext.hasImports()</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.ParserContext.processTables()</name>
                <outbound type="class" confirmed="no">java.lang.Object</outbound>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="class" confirmed="no">java.util.Iterator</outbound>
                <outbound type="feature" confirmed="no">java.util.Iterator.hasNext()</outbound>
                <outbound type="feature" confirmed="no">java.util.Iterator.next()</outbound>
                <outbound type="class" confirmed="no">java.util.Map</outbound>
                <outbound type="feature" confirmed="no">java.util.Map.keySet()</outbound>
                <outbound type="feature" confirmed="no">java.util.Map.remove(java.lang.Object)</outbound>
                <outbound type="class" confirmed="no">java.util.Set</outbound>
                <outbound type="feature" confirmed="no">java.util.Set.iterator()</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.ParserContext.inputs</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.ParserContext.variables</outbound>
                <inbound type="feature" confirmed="yes">org.mvel.ExpressionCompiler._compile()</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.ParserContext.retainParserState</name>
                <inbound type="feature" confirmed="yes">org.mvel.ParserContext.ParserContext()</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.ParserContext.ParserContext(boolean)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.ParserContext.ParserContext(java.lang.Object)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.ParserContext.ParserContext(java.util.Map, java.util.Map, java.lang.String)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.ParserContext.isRetainParserState()</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.ParserContext.setRetainParserState(boolean)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.ParserContext.rootParser</name>
                <outbound type="class" confirmed="no">java.lang.Object</outbound>
                <inbound type="feature" confirmed="yes">org.mvel.ParserContext.ParserContext(java.lang.Object)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.ParserContext.getRootParser()</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.ParserContext.setRootParser(java.lang.Object)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.ParserContext.setBlockSymbols(boolean)</name>
                <outbound type="feature" confirmed="yes">org.mvel.ParserContext.blockSymbols</outbound>
                <inbound type="feature" confirmed="yes">org.mvel.ast.WithNode.WithNode(char[], char[], int)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.ParserContext.setCompiled(boolean)</name>
                <outbound type="feature" confirmed="yes">org.mvel.ParserContext.compiled</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.ParserContext.setDebugSymbols(boolean)</name>
                <outbound type="feature" confirmed="yes">org.mvel.ParserContext.debugSymbols</outbound>
                <inbound type="feature" confirmed="yes">org.mvel.ExpressionCompiler.compile(org.mvel.ParserContext)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.ParserContext.setErrorList(java.util.List)</name>
                <outbound type="class" confirmed="no">java.util.List</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.ParserContext.errorList</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.ParserContext.setExecutableCodeReached(boolean)</name>
                <outbound type="feature" confirmed="yes">org.mvel.ParserContext.executableCodeReached</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.ParserContext.setFatalError(boolean)</name>
                <outbound type="feature" confirmed="yes">org.mvel.ParserContext.fatalError</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.ParserContext.setImports(java.util.Map)</name>
                <outbound type="class" confirmed="no">java.lang.Class</outbound>
                <outbound type="class" confirmed="no">java.lang.Object</outbound>
                <outbound type="feature" confirmed="no">java.lang.RuntimeException.RuntimeException(java.lang.String)</outbound>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="class" confirmed="no">java.lang.StringBuffer</outbound>
                <outbound type="feature" confirmed="no">java.lang.StringBuffer.StringBuffer(java.lang.String)</outbound>
                <outbound type="feature" confirmed="no">java.lang.StringBuffer.append(java.lang.Object)</outbound>
                <outbound type="feature" confirmed="no">java.lang.StringBuffer.append(java.lang.String)</outbound>
                <outbound type="feature" confirmed="no">java.lang.StringBuffer.toString()</outbound>
                <outbound type="class" confirmed="no">java.lang.reflect.Method</outbound>
                <outbound type="class" confirmed="no">java.util.Iterator</outbound>
                <outbound type="feature" confirmed="no">java.util.Iterator.hasNext()</outbound>
                <outbound type="feature" confirmed="no">java.util.Iterator.next()</outbound>
                <outbound type="class" confirmed="no">java.util.Map</outbound>
                <outbound type="feature" confirmed="no">java.util.Map.get(java.lang.Object)</outbound>
                <outbound type="feature" confirmed="no">java.util.Map.keySet()</outbound>
                <outbound type="class" confirmed="no">java.util.Set</outbound>
                <outbound type="feature" confirmed="no">java.util.Set.iterator()</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.ParserContext.addImport(java.lang.String, java.lang.Class)</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.ParserContext.addImport(java.lang.String, java.lang.reflect.Method)</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.ParserContext.addImport(java.lang.String, org.mvel.util.MethodStub)</outbound>
                <outbound type="class" confirmed="yes">org.mvel.util.MethodStub</outbound>
                <inbound type="feature" confirmed="yes">org.mvel.ParserContext.ParserContext(java.util.Map, java.util.Map, java.lang.String)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.ParserContext.setInputs(java.util.Map)</name>
                <outbound type="class" confirmed="no">java.util.Map</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.ParserContext.inputs</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.ParserContext.setInterceptors(java.util.Map)</name>
                <outbound type="class" confirmed="no">java.util.Map</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.ParserContext.interceptors</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.ParserContext.setLastLineLabel(org.mvel.ast.LineLabel)</name>
                <outbound type="feature" confirmed="yes">org.mvel.ParserContext.lastLineLabel</outbound>
                <outbound type="class" confirmed="yes">org.mvel.ast.LineLabel</outbound>
                <inbound type="feature" confirmed="yes">org.mvel.AbstractParser.nextToken()</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.ParserContext.setLineAndOffset(int, int)</name>
                <outbound type="feature" confirmed="yes">org.mvel.ParserContext.addKnownLine(int)</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.ParserContext.lineCount</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.ParserContext.lineOffset</outbound>
                <inbound type="feature" confirmed="yes">org.mvel.AbstractParser.nextToken()</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.ParserContext.setLineCount(int)</name>
                <outbound type="feature" confirmed="yes">org.mvel.ParserContext.lineCount</outbound>
                <inbound type="feature" confirmed="yes">org.mvel.AbstractParser._captureBlock(org.mvel.ASTNode, char[], boolean, int)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.AbstractParser.nextToken()</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.ParserContext.setLineOffset(short)</name>
                <outbound type="feature" confirmed="yes">org.mvel.ParserContext.lineOffset</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.ParserContext.setRetainParserState(boolean)</name>
                <outbound type="feature" confirmed="yes">org.mvel.ParserContext.retainParserState</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.ParserContext.setRootParser(java.lang.Object)</name>
                <outbound type="class" confirmed="no">java.lang.Object</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.ParserContext.rootParser</outbound>
                <inbound type="feature" confirmed="yes">org.mvel.AbstractParser.contextControl(int, org.mvel.ParserContext, org.mvel.AbstractParser)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.ParserContext.setSourceFile(java.lang.String)</name>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.ParserContext.sourceFile</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.ParserContext.setStrictTypeEnforcement(boolean)</name>
                <outbound type="feature" confirmed="yes">org.mvel.ParserContext.strictTypeEnforcement</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.ParserContext.setVariables(java.util.Map)</name>
                <outbound type="class" confirmed="no">java.util.Map</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.ParserContext.variables</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.ParserContext.sourceFile</name>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <inbound type="feature" confirmed="yes">org.mvel.ParserContext.ParserContext(java.util.Map, java.util.Map, java.lang.String)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.ParserContext.addKnownLine(int)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.ParserContext.getSourceFile()</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.ParserContext.setSourceFile(java.lang.String)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.ParserContext.sourceMap</name>
                <outbound type="class" confirmed="no">java.util.Map</outbound>
                <inbound type="feature" confirmed="yes">org.mvel.ParserContext.addKnownLine(java.lang.String, int)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.ParserContext.isKnownLine(java.lang.String, int)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.ParserContext.strictTypeEnforcement</name>
                <inbound type="feature" confirmed="yes">org.mvel.ParserContext.ParserContext()</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.ParserContext.ParserContext(boolean)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.ParserContext.ParserContext(java.lang.Object)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.ParserContext.ParserContext(java.util.Map, java.util.Map, java.lang.String)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.ParserContext.isStrictTypeEnforcement()</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.ParserContext.setStrictTypeEnforcement(boolean)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.ParserContext.variables</name>
                <outbound type="class" confirmed="no">java.util.Map</outbound>
                <inbound type="feature" confirmed="yes">org.mvel.ParserContext.addVariable(java.lang.String, java.lang.Class)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.ParserContext.getVarOrInputType(java.lang.String)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.ParserContext.getVariables()</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.ParserContext.hasVarOrInput(java.lang.String)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.ParserContext.hasVariable(java.lang.String)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.ParserContext.initializeTables()</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.ParserContext.processTables()</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.ParserContext.setVariables(java.util.Map)</inbound>
            </feature>
        </class>
        <class confirmed="yes">
            <name>org.mvel.PreProcessor</name>
            <outbound type="class" confirmed="no">java.lang.Object</outbound>
            <inbound type="feature" confirmed="yes">org.mvel.MVEL.preprocess(char[], org.mvel.PreProcessor[])</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.MVEL.preprocess(java.lang.String, org.mvel.PreProcessor[])</inbound>
            <inbound type="class" confirmed="yes">org.mvel.MacroProcessor</inbound>
            <feature confirmed="yes">
                <name>org.mvel.PreProcessor.parse(char[])</name>
                <inbound type="feature" confirmed="yes">org.mvel.MVEL.preprocess(char[], org.mvel.PreProcessor[])</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.PreProcessor.parse(java.lang.String)</name>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
            </feature>
        </class>
        <class confirmed="yes">
            <name>org.mvel.PropertyAccessException</name>
            <outbound type="class" confirmed="no">java.lang.RuntimeException</outbound>
            <inbound type="feature" confirmed="yes">org.mvel.ASTNode.getReducedValue(java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory)</inbound>
            <inbound type="class" confirmed="yes">org.mvel.ConversionException</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.PropertyAccessor.get()</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.asm.ASMAccessorOptimizer.compileAccessor()</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.refl.ReflectiveAccessorOptimizer.compileGetChain()</inbound>
            <feature confirmed="yes">
                <name>org.mvel.PropertyAccessException.PropertyAccessException()</name>
                <outbound type="feature" confirmed="no">java.lang.RuntimeException.RuntimeException()</outbound>
                <inbound type="feature" confirmed="yes">org.mvel.ConversionException.ConversionException()</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.PropertyAccessException.PropertyAccessException(java.lang.String)</name>
                <outbound type="feature" confirmed="no">java.lang.RuntimeException.RuntimeException(java.lang.String)</outbound>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="class" confirmed="no">java.lang.StringBuffer</outbound>
                <outbound type="feature" confirmed="no">java.lang.StringBuffer.StringBuffer(java.lang.String)</outbound>
                <outbound type="feature" confirmed="no">java.lang.StringBuffer.append(java.lang.String)</outbound>
                <outbound type="feature" confirmed="no">java.lang.StringBuffer.toString()</outbound>
                <inbound type="feature" confirmed="yes">org.mvel.ConversionException.ConversionException(java.lang.String)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.PropertyAccessor.getBeanProperty(java.lang.Object, java.lang.String)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.PropertyAccessor.getCollectionProperty(java.lang.Object, java.lang.String)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.PropertyAccessor.getMethod(java.lang.Object, java.lang.String)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.PropertyAccessor.set(java.lang.Object)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.PropertyVerifier.getCollectionProperty(java.lang.Class, java.lang.String)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.ast.PropertyASTNode.initializePropertyNode(java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.asm.ASMAccessorOptimizer.getBeanProperty(java.lang.Object, java.lang.String)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.refl.ReflectiveAccessorOptimizer.getBeanProperty(java.lang.Object, java.lang.String)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.refl.ReflectiveAccessorOptimizer.getMethod(java.lang.Object, java.lang.String)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.refl.ReflectiveAccessorOptimizer.optimizeSetAccessor(char[], java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory, boolean, java.lang.Object)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.PropertyAccessException.PropertyAccessException(java.lang.String, java.lang.Throwable)</name>
                <outbound type="feature" confirmed="no">java.lang.RuntimeException.RuntimeException(java.lang.String, java.lang.Throwable)</outbound>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="class" confirmed="no">java.lang.StringBuffer</outbound>
                <outbound type="feature" confirmed="no">java.lang.StringBuffer.StringBuffer(java.lang.String)</outbound>
                <outbound type="feature" confirmed="no">java.lang.StringBuffer.append(java.lang.String)</outbound>
                <outbound type="feature" confirmed="no">java.lang.StringBuffer.toString()</outbound>
                <outbound type="class" confirmed="no">java.lang.Throwable</outbound>
                <inbound type="feature" confirmed="yes">org.mvel.ConversionException.ConversionException(java.lang.String, java.lang.Throwable)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.PropertyAccessor.get()</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.PropertyAccessor.set(java.lang.Object)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.asm.ASMAccessorOptimizer.compileAccessor()</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.refl.ReflectiveAccessorOptimizer.compileGetChain()</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.refl.ReflectiveAccessorOptimizer.optimizeSetAccessor(char[], java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory, boolean, java.lang.Object)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.PropertyAccessException.PropertyAccessException(java.lang.Throwable)</name>
                <outbound type="feature" confirmed="no">java.lang.RuntimeException.RuntimeException(java.lang.Throwable)</outbound>
                <outbound type="class" confirmed="no">java.lang.Throwable</outbound>
                <inbound type="feature" confirmed="yes">org.mvel.ConversionException.ConversionException(java.lang.Throwable)</inbound>
            </feature>
            <feature confirmed="no">
                <name>org.mvel.PropertyAccessException.getMessage()</name>
                <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.asm.ASMAccessorOptimizer.compileAccessor()</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.refl.ReflectiveAccessorOptimizer.compileGetChain()</inbound>
            </feature>
        </class>
        <class confirmed="yes">
            <name>org.mvel.PropertyAccessor</name>
            <outbound type="class" confirmed="no">java.lang.Object</outbound>
            <feature confirmed="yes">
                <name>org.mvel.PropertyAccessor.COL</name>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.PropertyAccessor.DONE</name>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.PropertyAccessor.EMPTYARG</name>
                <outbound type="class" confirmed="no">java.lang.Object</outbound>
                <inbound type="feature" confirmed="yes">org.mvel.PropertyAccessor.getBeanProperty(java.lang.Object, java.lang.String)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.PropertyAccessor.static {}</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.PropertyAccessor.METH</name>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.PropertyAccessor.METHOD_RESOLVER_CACHE</name>
                <outbound type="class" confirmed="no">java.util.Map</outbound>
                <inbound type="feature" confirmed="yes">org.mvel.PropertyAccessor.addMethodCache(java.lang.Class, java.lang.Integer, java.lang.reflect.Method)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.PropertyAccessor.checkMethodCache(java.lang.Class, java.lang.Integer)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.PropertyAccessor.clearPropertyResolverCache()</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.PropertyAccessor.configureFactory()</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.PropertyAccessor.reportCacheSizes()</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.PropertyAccessor.NORM</name>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.PropertyAccessor.PropertyAccessor(char[], int, int, java.lang.Object, org.mvel.integration.VariableResolverFactory)</name>
                <outbound type="class" confirmed="no">java.lang.Object</outbound>
                <outbound type="feature" confirmed="no">java.lang.Object.Object()</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.PropertyAccessor.ctx</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.PropertyAccessor.cursor</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.PropertyAccessor.first</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.PropertyAccessor.length</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.PropertyAccessor.property</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.PropertyAccessor.start</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.PropertyAccessor.variableFactory</outbound>
                <outbound type="class" confirmed="yes">org.mvel.integration.VariableResolverFactory</outbound>
                <inbound type="feature" confirmed="yes">org.mvel.PropertyAccessor.get(char[], int, int, java.lang.Object, org.mvel.integration.VariableResolverFactory)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.PropertyAccessor.PropertyAccessor(char[], java.lang.Object)</name>
                <outbound type="class" confirmed="no">java.lang.Object</outbound>
                <outbound type="feature" confirmed="no">java.lang.Object.Object()</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.PropertyAccessor.ctx</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.PropertyAccessor.cursor</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.PropertyAccessor.first</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.PropertyAccessor.length</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.PropertyAccessor.property</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.PropertyAccessor.start</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.PropertyAccessor.PropertyAccessor(char[], java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory, java.lang.Object)</name>
                <outbound type="class" confirmed="no">java.lang.Object</outbound>
                <outbound type="feature" confirmed="no">java.lang.Object.Object()</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.PropertyAccessor.ctx</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.PropertyAccessor.cursor</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.PropertyAccessor.first</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.PropertyAccessor.length</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.PropertyAccessor.property</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.PropertyAccessor.start</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.PropertyAccessor.thisReference</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.PropertyAccessor.variableFactory</outbound>
                <outbound type="class" confirmed="yes">org.mvel.integration.VariableResolverFactory</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.PropertyAccessor.PropertyAccessor(char[], java.lang.Object, org.mvel.integration.VariableResolverFactory, java.lang.Object)</name>
                <outbound type="class" confirmed="no">java.lang.Object</outbound>
                <outbound type="feature" confirmed="no">java.lang.Object.Object()</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.PropertyAccessor.ctx</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.PropertyAccessor.cursor</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.PropertyAccessor.first</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.PropertyAccessor.length</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.PropertyAccessor.property</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.PropertyAccessor.start</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.PropertyAccessor.thisReference</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.PropertyAccessor.variableFactory</outbound>
                <outbound type="class" confirmed="yes">org.mvel.integration.VariableResolverFactory</outbound>
                <inbound type="feature" confirmed="yes">org.mvel.PropertyAccessor.get(char[], java.lang.Object, org.mvel.integration.VariableResolverFactory, java.lang.Object)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.PropertyAccessor.get(java.lang.String, java.lang.Object, org.mvel.integration.VariableResolverFactory, java.lang.Object)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.PropertyAccessor.set(java.lang.Object, org.mvel.integration.VariableResolverFactory, java.lang.String, java.lang.Object)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.PropertyAccessor.PropertyAccessor(java.lang.String, java.lang.Object)</name>
                <outbound type="class" confirmed="no">java.lang.Object</outbound>
                <outbound type="feature" confirmed="no">java.lang.Object.Object()</outbound>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="feature" confirmed="no">java.lang.String.toCharArray()</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.PropertyAccessor.ctx</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.PropertyAccessor.cursor</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.PropertyAccessor.first</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.PropertyAccessor.length</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.PropertyAccessor.property</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.PropertyAccessor.start</outbound>
                <inbound type="feature" confirmed="yes">org.mvel.PropertyAccessor.get(java.lang.String, java.lang.Object)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.PropertyAccessor.set(java.lang.Object, java.lang.String, java.lang.Object)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.PropertyAccessor.PropertyAccessor(org.mvel.integration.VariableResolverFactory, java.lang.Object)</name>
                <outbound type="class" confirmed="no">java.lang.Object</outbound>
                <outbound type="feature" confirmed="no">java.lang.Object.Object()</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.PropertyAccessor.cursor</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.PropertyAccessor.first</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.PropertyAccessor.start</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.PropertyAccessor.thisReference</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.PropertyAccessor.variableFactory</outbound>
                <outbound type="class" confirmed="yes">org.mvel.integration.VariableResolverFactory</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.PropertyAccessor.READ_PROPERTY_RESOLVER_CACHE</name>
                <outbound type="class" confirmed="no">java.util.Map</outbound>
                <inbound type="feature" confirmed="yes">org.mvel.PropertyAccessor.addReadCache(java.lang.Class, java.lang.Integer, java.lang.reflect.Member)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.PropertyAccessor.checkReadCache(java.lang.Class, java.lang.Integer)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.PropertyAccessor.clearPropertyResolverCache()</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.PropertyAccessor.configureFactory()</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.PropertyAccessor.reportCacheSizes()</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.PropertyAccessor.WRITE_PROPERTY_RESOLVER_CACHE</name>
                <outbound type="class" confirmed="no">java.util.Map</outbound>
                <inbound type="feature" confirmed="yes">org.mvel.PropertyAccessor.addWriteCache(java.lang.Class, java.lang.Integer, java.lang.reflect.Member)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.PropertyAccessor.checkWriteCache(java.lang.Class, java.lang.Integer)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.PropertyAccessor.clearPropertyResolverCache()</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.PropertyAccessor.configureFactory()</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.PropertyAccessor.reportCacheSizes()</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.PropertyAccessor.addMethodCache(java.lang.Class, java.lang.Integer, java.lang.reflect.Method)</name>
                <outbound type="class" confirmed="no">java.lang.Class</outbound>
                <outbound type="class" confirmed="no">java.lang.Integer</outbound>
                <outbound type="class" confirmed="no">java.lang.Object</outbound>
                <outbound type="class" confirmed="no">java.lang.reflect.Method</outbound>
                <outbound type="feature" confirmed="no">java.lang.reflect.Method.getParameterTypes()</outbound>
                <outbound type="class" confirmed="no">java.util.Map</outbound>
                <outbound type="feature" confirmed="no">java.util.Map.get(java.lang.Object)</outbound>
                <outbound type="feature" confirmed="no">java.util.Map.put(java.lang.Object, java.lang.Object)</outbound>
                <outbound type="feature" confirmed="no">java.util.WeakHashMap.WeakHashMap()</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.PropertyAccessor.METHOD_RESOLVER_CACHE</outbound>
                <inbound type="feature" confirmed="yes">org.mvel.PropertyAccessor.getMethod(java.lang.Object, java.lang.String)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.PropertyAccessor.addReadCache(java.lang.Class, java.lang.Integer, java.lang.reflect.Member)</name>
                <outbound type="class" confirmed="no">java.lang.Class</outbound>
                <outbound type="class" confirmed="no">java.lang.Integer</outbound>
                <outbound type="class" confirmed="no">java.lang.Object</outbound>
                <outbound type="class" confirmed="no">java.lang.reflect.Member</outbound>
                <outbound type="class" confirmed="no">java.util.Map</outbound>
                <outbound type="feature" confirmed="no">java.util.Map.get(java.lang.Object)</outbound>
                <outbound type="feature" confirmed="no">java.util.Map.put(java.lang.Object, java.lang.Object)</outbound>
                <outbound type="feature" confirmed="no">java.util.WeakHashMap.WeakHashMap()</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.PropertyAccessor.READ_PROPERTY_RESOLVER_CACHE</outbound>
                <inbound type="feature" confirmed="yes">org.mvel.PropertyAccessor.getBeanProperty(java.lang.Object, java.lang.String)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.PropertyAccessor.addWriteCache(java.lang.Class, java.lang.Integer, java.lang.reflect.Member)</name>
                <outbound type="class" confirmed="no">java.lang.Class</outbound>
                <outbound type="class" confirmed="no">java.lang.Integer</outbound>
                <outbound type="class" confirmed="no">java.lang.Object</outbound>
                <outbound type="class" confirmed="no">java.lang.reflect.Member</outbound>
                <outbound type="class" confirmed="no">java.util.Map</outbound>
                <outbound type="feature" confirmed="no">java.util.Map.get(java.lang.Object)</outbound>
                <outbound type="feature" confirmed="no">java.util.Map.put(java.lang.Object, java.lang.Object)</outbound>
                <outbound type="feature" confirmed="no">java.util.WeakHashMap.WeakHashMap()</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.PropertyAccessor.WRITE_PROPERTY_RESOLVER_CACHE</outbound>
                <inbound type="feature" confirmed="yes">org.mvel.PropertyAccessor.set(java.lang.Object)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.PropertyAccessor.capture()</name>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="feature" confirmed="no">java.lang.String.String(char[], int, int)</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.PropertyAccessor.cursor</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.PropertyAccessor.property</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.PropertyAccessor.start</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.PropertyAccessor.trimLeft(int)</outbound>
                <inbound type="feature" confirmed="yes">org.mvel.PropertyAccessor.get()</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.PropertyAccessor.set(java.lang.Object)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.PropertyAccessor.checkMethodCache(java.lang.Class, java.lang.Integer)</name>
                <outbound type="class" confirmed="no">java.lang.Class</outbound>
                <outbound type="class" confirmed="no">java.lang.Integer</outbound>
                <outbound type="class" confirmed="no">java.lang.Object</outbound>
                <outbound type="class" confirmed="no">java.lang.Object[]</outbound>
                <outbound type="class" confirmed="no">java.util.Map</outbound>
                <outbound type="feature" confirmed="no">java.util.Map.get(java.lang.Object)</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.PropertyAccessor.METHOD_RESOLVER_CACHE</outbound>
                <inbound type="feature" confirmed="yes">org.mvel.PropertyAccessor.getMethod(java.lang.Object, java.lang.String)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.PropertyAccessor.checkReadCache(java.lang.Class, java.lang.Integer)</name>
                <outbound type="class" confirmed="no">java.lang.Class</outbound>
                <outbound type="class" confirmed="no">java.lang.Integer</outbound>
                <outbound type="class" confirmed="no">java.lang.Object</outbound>
                <outbound type="class" confirmed="no">java.lang.reflect.Member</outbound>
                <outbound type="class" confirmed="no">java.util.Map</outbound>
                <outbound type="feature" confirmed="no">java.util.Map.get(java.lang.Object)</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.PropertyAccessor.READ_PROPERTY_RESOLVER_CACHE</outbound>
                <inbound type="feature" confirmed="yes">org.mvel.PropertyAccessor.getBeanProperty(java.lang.Object, java.lang.String)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.PropertyAccessor.checkWriteCache(java.lang.Class, java.lang.Integer)</name>
                <outbound type="class" confirmed="no">java.lang.Class</outbound>
                <outbound type="class" confirmed="no">java.lang.Integer</outbound>
                <outbound type="class" confirmed="no">java.lang.Object</outbound>
                <outbound type="class" confirmed="no">java.lang.reflect.Member</outbound>
                <outbound type="class" confirmed="no">java.util.Map</outbound>
                <outbound type="feature" confirmed="no">java.util.Map.get(java.lang.Object)</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.PropertyAccessor.WRITE_PROPERTY_RESOLVER_CACHE</outbound>
                <inbound type="feature" confirmed="yes">org.mvel.PropertyAccessor.set(java.lang.Object)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.PropertyAccessor.clearPropertyResolverCache()</name>
                <outbound type="class" confirmed="no">java.util.Map</outbound>
                <outbound type="feature" confirmed="no">java.util.Map.clear()</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.PropertyAccessor.METHOD_RESOLVER_CACHE</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.PropertyAccessor.READ_PROPERTY_RESOLVER_CACHE</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.PropertyAccessor.WRITE_PROPERTY_RESOLVER_CACHE</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.PropertyAccessor.configureFactory()</name>
                <outbound type="feature" confirmed="no">java.util.Collections.synchronizedMap(java.util.Map)</outbound>
                <outbound type="class" confirmed="no">java.util.Map</outbound>
                <outbound type="feature" confirmed="no">java.util.WeakHashMap.WeakHashMap(int)</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.MVEL.THREAD_SAFE</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.PropertyAccessor.METHOD_RESOLVER_CACHE</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.PropertyAccessor.READ_PROPERTY_RESOLVER_CACHE</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.PropertyAccessor.WRITE_PROPERTY_RESOLVER_CACHE</outbound>
                <inbound type="feature" confirmed="yes">org.mvel.MVEL.setThreadSafe(boolean)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.PropertyAccessor.static {}</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.PropertyAccessor.createSignature(java.lang.String, java.lang.String)</name>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="feature" confirmed="no">java.lang.String.hashCode()</outbound>
                <inbound type="feature" confirmed="yes">org.mvel.PropertyAccessor.getMethod(java.lang.Object, java.lang.String)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.PropertyAccessor.ctx</name>
                <outbound type="class" confirmed="no">java.lang.Object</outbound>
                <inbound type="feature" confirmed="yes">org.mvel.PropertyAccessor.PropertyAccessor(char[], int, int, java.lang.Object, org.mvel.integration.VariableResolverFactory)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.PropertyAccessor.PropertyAccessor(char[], java.lang.Object)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.PropertyAccessor.PropertyAccessor(char[], java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory, java.lang.Object)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.PropertyAccessor.PropertyAccessor(char[], java.lang.Object, org.mvel.integration.VariableResolverFactory, java.lang.Object)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.PropertyAccessor.PropertyAccessor(java.lang.String, java.lang.Object)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.PropertyAccessor.get()</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.PropertyAccessor.set(java.lang.Object)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.PropertyAccessor.curr</name>
                <outbound type="class" confirmed="no">java.lang.Object</outbound>
                <inbound type="feature" confirmed="yes">org.mvel.PropertyAccessor.get()</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.PropertyAccessor.set(java.lang.Object)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.PropertyAccessor.cursor</name>
                <inbound type="feature" confirmed="yes">org.mvel.PropertyAccessor.PropertyAccessor(char[], int, int, java.lang.Object, org.mvel.integration.VariableResolverFactory)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.PropertyAccessor.PropertyAccessor(char[], java.lang.Object)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.PropertyAccessor.PropertyAccessor(char[], java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory, java.lang.Object)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.PropertyAccessor.PropertyAccessor(char[], java.lang.Object, org.mvel.integration.VariableResolverFactory, java.lang.Object)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.PropertyAccessor.PropertyAccessor(java.lang.String, java.lang.Object)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.PropertyAccessor.PropertyAccessor(org.mvel.integration.VariableResolverFactory, java.lang.Object)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.PropertyAccessor.capture()</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.PropertyAccessor.get()</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.PropertyAccessor.getCollectionProperty(java.lang.Object, java.lang.String)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.PropertyAccessor.getMethod(java.lang.Object, java.lang.String)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.PropertyAccessor.nextToken()</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.PropertyAccessor.scanTo(char)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.PropertyAccessor.set(java.lang.Object)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.PropertyAccessor.whiteSpaceSkip()</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.PropertyAccessor.first</name>
                <inbound type="feature" confirmed="yes">org.mvel.PropertyAccessor.PropertyAccessor(char[], int, int, java.lang.Object, org.mvel.integration.VariableResolverFactory)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.PropertyAccessor.PropertyAccessor(char[], java.lang.Object)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.PropertyAccessor.PropertyAccessor(char[], java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory, java.lang.Object)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.PropertyAccessor.PropertyAccessor(char[], java.lang.Object, org.mvel.integration.VariableResolverFactory, java.lang.Object)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.PropertyAccessor.PropertyAccessor(java.lang.String, java.lang.Object)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.PropertyAccessor.PropertyAccessor(org.mvel.integration.VariableResolverFactory, java.lang.Object)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.PropertyAccessor.get()</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.PropertyAccessor.getBeanProperty(java.lang.Object, java.lang.String)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.PropertyAccessor.getMethod(java.lang.Object, java.lang.String)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.PropertyAccessor.get()</name>
                <outbound type="class" confirmed="no">java.lang.Class</outbound>
                <outbound type="class" confirmed="no">java.lang.Exception</outbound>
                <outbound type="class" confirmed="no">java.lang.IllegalAccessException</outbound>
                <outbound type="class" confirmed="no">java.lang.IndexOutOfBoundsException</outbound>
                <outbound type="class" confirmed="no">java.lang.NullPointerException</outbound>
                <outbound type="class" confirmed="no">java.lang.Object</outbound>
                <outbound type="feature" confirmed="no">java.lang.Object.getClass()</outbound>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="feature" confirmed="no">java.lang.String.String(char[])</outbound>
                <outbound type="class" confirmed="no">java.lang.StringBuffer</outbound>
                <outbound type="feature" confirmed="no">java.lang.StringBuffer.StringBuffer(java.lang.String)</outbound>
                <outbound type="feature" confirmed="no">java.lang.StringBuffer.append(java.lang.Object)</outbound>
                <outbound type="feature" confirmed="no">java.lang.StringBuffer.append(java.lang.String)</outbound>
                <outbound type="feature" confirmed="no">java.lang.StringBuffer.toString()</outbound>
                <outbound type="class" confirmed="no">java.lang.Throwable</outbound>
                <outbound type="class" confirmed="no">java.lang.reflect.InvocationTargetException</outbound>
                <outbound type="class" confirmed="yes">org.mvel.CompileException</outbound>
                <outbound type="class" confirmed="yes">org.mvel.PropertyAccessException</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.PropertyAccessException.PropertyAccessException(java.lang.String, java.lang.Throwable)</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.PropertyAccessor.capture()</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.PropertyAccessor.ctx</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.PropertyAccessor.curr</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.PropertyAccessor.cursor</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.PropertyAccessor.first</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.PropertyAccessor.getBeanProperty(java.lang.Object, java.lang.String)</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.PropertyAccessor.getCollectionProperty(java.lang.Object, java.lang.String)</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.PropertyAccessor.getMethod(java.lang.Object, java.lang.String)</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.PropertyAccessor.length</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.PropertyAccessor.nextToken()</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.PropertyAccessor.property</outbound>
                <inbound type="feature" confirmed="yes">org.mvel.PropertyAccessor.get(char[], int, int, java.lang.Object, org.mvel.integration.VariableResolverFactory)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.PropertyAccessor.get(char[], java.lang.Object, org.mvel.integration.VariableResolverFactory, java.lang.Object)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.PropertyAccessor.get(java.lang.String, java.lang.Object)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.PropertyAccessor.get(java.lang.String, java.lang.Object, org.mvel.integration.VariableResolverFactory, java.lang.Object)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.PropertyAccessor.set(java.lang.Object)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.PropertyAccessor.get(char[], int, int, java.lang.Object, org.mvel.integration.VariableResolverFactory)</name>
                <outbound type="class" confirmed="no">java.lang.Object</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.PropertyAccessor.PropertyAccessor(char[], int, int, java.lang.Object, org.mvel.integration.VariableResolverFactory)</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.PropertyAccessor.get()</outbound>
                <outbound type="class" confirmed="yes">org.mvel.integration.VariableResolverFactory</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.PropertyAccessor.get(char[], java.lang.Object, org.mvel.integration.VariableResolverFactory, java.lang.Object)</name>
                <outbound type="class" confirmed="no">java.lang.Object</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.PropertyAccessor.PropertyAccessor(char[], java.lang.Object, org.mvel.integration.VariableResolverFactory, java.lang.Object)</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.PropertyAccessor.get()</outbound>
                <outbound type="class" confirmed="yes">org.mvel.integration.VariableResolverFactory</outbound>
                <inbound type="feature" confirmed="yes">org.mvel.ASTNode.getReducedValue(java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.ast.LiteralDeepPropertyNode.getReducedValue(java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.ast.ThisValDeepPropertyNode.getReducedValue(java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.ast.Union.getReducedValue(java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.ast.VariableDeepPropertyNode.getReducedValue(java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.PropertyAccessor.get(java.lang.String, java.lang.Object)</name>
                <outbound type="class" confirmed="no">java.lang.Object</outbound>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.PropertyAccessor.PropertyAccessor(java.lang.String, java.lang.Object)</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.PropertyAccessor.get()</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.PropertyAccessor.get(java.lang.String, java.lang.Object, org.mvel.integration.VariableResolverFactory, java.lang.Object)</name>
                <outbound type="class" confirmed="no">java.lang.Object</outbound>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="feature" confirmed="no">java.lang.String.toCharArray()</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.PropertyAccessor.PropertyAccessor(char[], java.lang.Object, org.mvel.integration.VariableResolverFactory, java.lang.Object)</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.PropertyAccessor.get()</outbound>
                <outbound type="class" confirmed="yes">org.mvel.integration.VariableResolverFactory</outbound>
                <inbound type="feature" confirmed="yes">org.mvel.ASTNode.getReducedValue(java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.ASTNode.tryStaticAccess(java.lang.Object, org.mvel.integration.VariableResolverFactory)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.ast.NewObjectNode.getReducedValue(java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.PropertyAccessor.getBeanProperty(java.lang.Object, java.lang.String)</name>
                <outbound type="class" confirmed="no">java.lang.Class</outbound>
                <outbound type="feature" confirmed="no">java.lang.Class.getMethods()</outbound>
                <outbound type="feature" confirmed="no">java.lang.Class.isArray()</outbound>
                <outbound type="class" confirmed="no">java.lang.IllegalAccessException</outbound>
                <outbound type="class" confirmed="no">java.lang.Integer</outbound>
                <outbound type="feature" confirmed="no">java.lang.Integer.Integer(int)</outbound>
                <outbound type="class" confirmed="no">java.lang.Object</outbound>
                <outbound type="feature" confirmed="no">java.lang.Object.getClass()</outbound>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="feature" confirmed="no">java.lang.String.equals(java.lang.Object)</outbound>
                <outbound type="feature" confirmed="no">java.lang.String.hashCode()</outbound>
                <outbound type="class" confirmed="no">java.lang.StringBuffer</outbound>
                <outbound type="feature" confirmed="no">java.lang.StringBuffer.StringBuffer(java.lang.String)</outbound>
                <outbound type="feature" confirmed="no">java.lang.StringBuffer.append(java.lang.String)</outbound>
                <outbound type="feature" confirmed="no">java.lang.StringBuffer.toString()</outbound>
                <outbound type="feature" confirmed="no">java.lang.reflect.Array.getLength(java.lang.Object)</outbound>
                <outbound type="class" confirmed="no">java.lang.reflect.Field</outbound>
                <outbound type="feature" confirmed="no">java.lang.reflect.Field.get(java.lang.Object)</outbound>
                <outbound type="class" confirmed="no">java.lang.reflect.InvocationTargetException</outbound>
                <outbound type="class" confirmed="no">java.lang.reflect.Member</outbound>
                <outbound type="class" confirmed="no">java.lang.reflect.Method</outbound>
                <outbound type="feature" confirmed="no">java.lang.reflect.Method.getName()</outbound>
                <outbound type="feature" confirmed="no">java.lang.reflect.Method.invoke(java.lang.Object, java.lang.Object[])</outbound>
                <outbound type="feature" confirmed="no">java.lang.reflect.Method.setAccessible(boolean)</outbound>
                <outbound type="class" confirmed="no">java.util.Map</outbound>
                <outbound type="feature" confirmed="no">java.util.Map.containsKey(java.lang.Object)</outbound>
                <outbound type="feature" confirmed="no">java.util.Map.get(java.lang.Object)</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.PropertyAccessException.PropertyAccessException(java.lang.String)</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.PropertyAccessor.EMPTYARG</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.PropertyAccessor.addReadCache(java.lang.Class, java.lang.Integer, java.lang.reflect.Member)</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.PropertyAccessor.checkReadCache(java.lang.Class, java.lang.Integer)</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.PropertyAccessor.first</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.PropertyAccessor.thisReference</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.PropertyAccessor.variableFactory</outbound>
                <outbound type="class" confirmed="yes">org.mvel.integration.VariableResolver</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.integration.VariableResolver.getValue()</outbound>
                <outbound type="class" confirmed="yes">org.mvel.integration.VariableResolverFactory</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.integration.VariableResolverFactory.getVariableResolver(java.lang.String)</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.integration.VariableResolverFactory.isResolveable(java.lang.String)</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.util.PropertyTools.getFieldOrAccessor(java.lang.Class, java.lang.String)</outbound>
                <inbound type="feature" confirmed="yes">org.mvel.PropertyAccessor.get()</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.PropertyAccessor.getCollectionProperty(java.lang.Object, java.lang.String)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.PropertyAccessor.getCollectionProperty(java.lang.Object, java.lang.String)</name>
                <outbound type="class" confirmed="no">java.lang.CharSequence</outbound>
                <outbound type="feature" confirmed="no">java.lang.CharSequence.charAt(int)</outbound>
                <outbound type="feature" confirmed="no">java.lang.Character.Character(char)</outbound>
                <outbound type="class" confirmed="no">java.lang.Class</outbound>
                <outbound type="feature" confirmed="no">java.lang.Class.getName()</outbound>
                <outbound type="class" confirmed="no">java.lang.Exception</outbound>
                <outbound type="class" confirmed="no">java.lang.Integer</outbound>
                <outbound type="feature" confirmed="no">java.lang.Integer.intValue()</outbound>
                <outbound type="class" confirmed="no">java.lang.Object</outbound>
                <outbound type="feature" confirmed="no">java.lang.Object.getClass()</outbound>
                <outbound type="class" confirmed="no">java.lang.Object[]</outbound>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="feature" confirmed="no">java.lang.String.String(char[], int, int)</outbound>
                <outbound type="feature" confirmed="no">java.lang.String.length()</outbound>
                <outbound type="class" confirmed="no">java.lang.StringBuffer</outbound>
                <outbound type="feature" confirmed="no">java.lang.StringBuffer.StringBuffer(java.lang.String)</outbound>
                <outbound type="feature" confirmed="no">java.lang.StringBuffer.append(int)</outbound>
                <outbound type="feature" confirmed="no">java.lang.StringBuffer.append(java.lang.String)</outbound>
                <outbound type="feature" confirmed="no">java.lang.StringBuffer.toString()</outbound>
                <outbound type="class" confirmed="no">java.util.Collection</outbound>
                <outbound type="feature" confirmed="no">java.util.Collection.iterator()</outbound>
                <outbound type="feature" confirmed="no">java.util.Collection.size()</outbound>
                <outbound type="class" confirmed="no">java.util.Iterator</outbound>
                <outbound type="feature" confirmed="no">java.util.Iterator.next()</outbound>
                <outbound type="class" confirmed="no">java.util.List</outbound>
                <outbound type="feature" confirmed="no">java.util.List.get(int)</outbound>
                <outbound type="class" confirmed="no">java.util.Map</outbound>
                <outbound type="feature" confirmed="no">java.util.Map.get(java.lang.Object)</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.MVEL.eval(java.lang.String, java.lang.Object, org.mvel.integration.VariableResolverFactory)</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.PropertyAccessException.PropertyAccessException(java.lang.String)</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.PropertyAccessor.cursor</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.PropertyAccessor.getBeanProperty(java.lang.Object, java.lang.String)</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.PropertyAccessor.length</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.PropertyAccessor.property</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.PropertyAccessor.scanTo(char)</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.PropertyAccessor.variableFactory</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.PropertyAccessor.whiteSpaceSkip()</outbound>
                <outbound type="class" confirmed="yes">org.mvel.integration.VariableResolverFactory</outbound>
                <inbound type="feature" confirmed="yes">org.mvel.PropertyAccessor.get()</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.PropertyAccessor.getMethod(java.lang.Object, java.lang.String)</name>
                <outbound type="class" confirmed="no">java.lang.Class</outbound>
                <outbound type="feature" confirmed="no">java.lang.Class.getDeclaredMethods()</outbound>
                <outbound type="feature" confirmed="no">java.lang.Class.getMethods()</outbound>
                <outbound type="feature" confirmed="no">java.lang.Class.getName()</outbound>
                <outbound type="feature" confirmed="no">java.lang.Class.isArray()</outbound>
                <outbound type="class" confirmed="no">java.lang.Class[]</outbound>
                <outbound type="class" confirmed="no">java.lang.Exception</outbound>
                <outbound type="class" confirmed="no">java.lang.IllegalAccessException</outbound>
                <outbound type="class" confirmed="no">java.lang.Integer</outbound>
                <outbound type="feature" confirmed="no">java.lang.Integer.Integer(int)</outbound>
                <outbound type="class" confirmed="no">java.lang.Object</outbound>
                <outbound type="feature" confirmed="no">java.lang.Object.getClass()</outbound>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="feature" confirmed="no">java.lang.String.String(char[], int, int)</outbound>
                <outbound type="feature" confirmed="no">java.lang.String.equals(java.lang.Object)</outbound>
                <outbound type="feature" confirmed="no">java.lang.String.length()</outbound>
                <outbound type="feature" confirmed="no">java.lang.String.toCharArray()</outbound>
                <outbound type="class" confirmed="no">java.lang.StringBuffer</outbound>
                <outbound type="feature" confirmed="no">java.lang.StringBuffer.StringBuffer(java.lang.String)</outbound>
                <outbound type="feature" confirmed="no">java.lang.StringBuffer.append(int)</outbound>
                <outbound type="feature" confirmed="no">java.lang.StringBuffer.append(java.lang.String)</outbound>
                <outbound type="feature" confirmed="no">java.lang.StringBuffer.toString()</outbound>
                <outbound type="feature" confirmed="no">java.lang.reflect.Array.getLength(java.lang.Object)</outbound>
                <outbound type="class" confirmed="no">java.lang.reflect.Method</outbound>
                <outbound type="feature" confirmed="no">java.lang.reflect.Method.getDeclaringClass()</outbound>
                <outbound type="feature" confirmed="no">java.lang.reflect.Method.getName()</outbound>
                <outbound type="feature" confirmed="no">java.lang.reflect.Method.getParameterTypes()</outbound>
                <outbound type="feature" confirmed="no">java.lang.reflect.Method.invoke(java.lang.Object, java.lang.Object[])</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.DataConversion.convert(java.lang.Object, java.lang.Class)</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.MVEL.eval(java.lang.String, java.lang.Object, org.mvel.integration.VariableResolverFactory)</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.OptimizationFailure.OptimizationFailure(java.lang.String)</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.PropertyAccessException.PropertyAccessException(java.lang.String)</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.PropertyAccessor.addMethodCache(java.lang.Class, java.lang.Integer, java.lang.reflect.Method)</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.PropertyAccessor.checkMethodCache(java.lang.Class, java.lang.Integer)</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.PropertyAccessor.createSignature(java.lang.String, java.lang.String)</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.PropertyAccessor.cursor</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.PropertyAccessor.first</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.PropertyAccessor.property</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.PropertyAccessor.thisReference</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.PropertyAccessor.variableFactory</outbound>
                <outbound type="class" confirmed="yes">org.mvel.integration.VariableResolver</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.integration.VariableResolver.getValue()</outbound>
                <outbound type="class" confirmed="yes">org.mvel.integration.VariableResolverFactory</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.integration.VariableResolverFactory.getVariableResolver(java.lang.String)</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.integration.VariableResolverFactory.isResolveable(java.lang.String)</outbound>
                <outbound type="class" confirmed="yes">org.mvel.util.MethodStub</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.util.MethodStub.getClassReference()</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.util.MethodStub.getMethodName()</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.util.ParseTools.EMPTY_OBJ_ARR</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.util.ParseTools.balancedCapture(char[], int, char)</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.util.ParseTools.getBestCandidate(java.lang.Object[], java.lang.String, java.lang.Class, java.lang.reflect.Method[])</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.util.ParseTools.getWidenedTarget(java.lang.reflect.Method)</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.util.ParseTools.parseParameterList(char[], int, int)</outbound>
                <outbound type="class" confirmed="yes">org.mvel.util.StringAppender</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.util.StringAppender.StringAppender()</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.util.StringAppender.append(java.lang.String)</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.util.StringAppender.toString()</outbound>
                <inbound type="feature" confirmed="yes">org.mvel.PropertyAccessor.get()</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.PropertyAccessor.length</name>
                <inbound type="feature" confirmed="yes">org.mvel.PropertyAccessor.PropertyAccessor(char[], int, int, java.lang.Object, org.mvel.integration.VariableResolverFactory)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.PropertyAccessor.PropertyAccessor(char[], java.lang.Object)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.PropertyAccessor.PropertyAccessor(char[], java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory, java.lang.Object)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.PropertyAccessor.PropertyAccessor(char[], java.lang.Object, org.mvel.integration.VariableResolverFactory, java.lang.Object)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.PropertyAccessor.PropertyAccessor(java.lang.String, java.lang.Object)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.PropertyAccessor.get()</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.PropertyAccessor.getCollectionProperty(java.lang.Object, java.lang.String)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.PropertyAccessor.nextToken()</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.PropertyAccessor.scanTo(char)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.PropertyAccessor.set(java.lang.Object)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.PropertyAccessor.whiteSpaceSkip()</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.PropertyAccessor.nextToken()</name>
                <outbound type="feature" confirmed="no">java.lang.Character.isJavaIdentifierPart(char)</outbound>
                <outbound type="feature" confirmed="no">java.lang.Character.isWhitespace(char)</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.PropertyAccessor.cursor</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.PropertyAccessor.length</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.PropertyAccessor.property</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.PropertyAccessor.start</outbound>
                <inbound type="feature" confirmed="yes">org.mvel.PropertyAccessor.get()</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.PropertyAccessor.set(java.lang.Object)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.PropertyAccessor.property</name>
                <inbound type="feature" confirmed="yes">org.mvel.PropertyAccessor.PropertyAccessor(char[], int, int, java.lang.Object, org.mvel.integration.VariableResolverFactory)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.PropertyAccessor.PropertyAccessor(char[], java.lang.Object)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.PropertyAccessor.PropertyAccessor(char[], java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory, java.lang.Object)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.PropertyAccessor.PropertyAccessor(char[], java.lang.Object, org.mvel.integration.VariableResolverFactory, java.lang.Object)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.PropertyAccessor.PropertyAccessor(java.lang.String, java.lang.Object)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.PropertyAccessor.capture()</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.PropertyAccessor.get()</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.PropertyAccessor.getCollectionProperty(java.lang.Object, java.lang.String)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.PropertyAccessor.getMethod(java.lang.Object, java.lang.String)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.PropertyAccessor.nextToken()</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.PropertyAccessor.scanTo(char)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.PropertyAccessor.set(java.lang.Object)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.PropertyAccessor.trimLeft(int)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.PropertyAccessor.whiteSpaceSkip()</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.PropertyAccessor.reportCacheSizes()</name>
                <outbound type="class" confirmed="no">java.io.PrintStream</outbound>
                <outbound type="feature" confirmed="no">java.io.PrintStream.println(java.lang.String)</outbound>
                <outbound type="class" confirmed="no">java.lang.Class</outbound>
                <outbound type="feature" confirmed="no">java.lang.Class.getName()</outbound>
                <outbound type="class" confirmed="no">java.lang.Object</outbound>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="class" confirmed="no">java.lang.StringBuffer</outbound>
                <outbound type="feature" confirmed="no">java.lang.StringBuffer.StringBuffer(java.lang.String)</outbound>
                <outbound type="feature" confirmed="no">java.lang.StringBuffer.append(int)</outbound>
                <outbound type="feature" confirmed="no">java.lang.StringBuffer.append(java.lang.String)</outbound>
                <outbound type="feature" confirmed="no">java.lang.StringBuffer.toString()</outbound>
                <outbound type="feature" confirmed="no">java.lang.System.out</outbound>
                <outbound type="class" confirmed="no">java.util.Iterator</outbound>
                <outbound type="feature" confirmed="no">java.util.Iterator.hasNext()</outbound>
                <outbound type="feature" confirmed="no">java.util.Iterator.next()</outbound>
                <outbound type="class" confirmed="no">java.util.Map</outbound>
                <outbound type="feature" confirmed="no">java.util.Map.get(java.lang.Object)</outbound>
                <outbound type="feature" confirmed="no">java.util.Map.keySet()</outbound>
                <outbound type="feature" confirmed="no">java.util.Map.size()</outbound>
                <outbound type="class" confirmed="no">java.util.Set</outbound>
                <outbound type="feature" confirmed="no">java.util.Set.iterator()</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.PropertyAccessor.METHOD_RESOLVER_CACHE</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.PropertyAccessor.READ_PROPERTY_RESOLVER_CACHE</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.PropertyAccessor.WRITE_PROPERTY_RESOLVER_CACHE</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.PropertyAccessor.scanTo(char)</name>
                <outbound type="feature" confirmed="yes">org.mvel.PropertyAccessor.cursor</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.PropertyAccessor.length</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.PropertyAccessor.property</outbound>
                <inbound type="feature" confirmed="yes">org.mvel.PropertyAccessor.getCollectionProperty(java.lang.Object, java.lang.String)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.PropertyAccessor.set(java.lang.Object)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.PropertyAccessor.set(java.lang.Object)</name>
                <outbound type="class" confirmed="no">java.lang.Class</outbound>
                <outbound type="feature" confirmed="no">java.lang.Class.forName(java.lang.String)</outbound>
                <outbound type="feature" confirmed="no">java.lang.Class.getName()</outbound>
                <outbound type="feature" confirmed="no">java.lang.Class.isArray()</outbound>
                <outbound type="feature" confirmed="no">java.lang.Class.isAssignableFrom(java.lang.Class)</outbound>
                <outbound type="class" confirmed="no">java.lang.ClassNotFoundException</outbound>
                <outbound type="class" confirmed="no">java.lang.IllegalAccessException</outbound>
                <outbound type="class" confirmed="no">java.lang.Integer</outbound>
                <outbound type="feature" confirmed="no">java.lang.Integer.Integer(int)</outbound>
                <outbound type="feature" confirmed="no">java.lang.Integer.intValue()</outbound>
                <outbound type="feature" confirmed="no">java.lang.NoClassDefFoundError.NoClassDefFoundError(java.lang.String)</outbound>
                <outbound type="class" confirmed="no">java.lang.Object</outbound>
                <outbound type="feature" confirmed="no">java.lang.Object.getClass()</outbound>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="feature" confirmed="no">java.lang.String.String(char[])</outbound>
                <outbound type="feature" confirmed="no">java.lang.String.String(char[], int, int)</outbound>
                <outbound type="feature" confirmed="no">java.lang.String.hashCode()</outbound>
                <outbound type="class" confirmed="no">java.lang.StringBuffer</outbound>
                <outbound type="feature" confirmed="no">java.lang.StringBuffer.StringBuffer(java.lang.String)</outbound>
                <outbound type="feature" confirmed="no">java.lang.StringBuffer.append(java.lang.Object)</outbound>
                <outbound type="feature" confirmed="no">java.lang.StringBuffer.append(java.lang.String)</outbound>
                <outbound type="feature" confirmed="no">java.lang.StringBuffer.toString()</outbound>
                <outbound type="class" confirmed="no">java.lang.Throwable</outbound>
                <outbound type="feature" confirmed="no">java.lang.Throwable.getMessage()</outbound>
                <outbound type="feature" confirmed="no">java.lang.reflect.Array.set(java.lang.Object, int, java.lang.Object)</outbound>
                <outbound type="class" confirmed="no">java.lang.reflect.Field</outbound>
                <outbound type="feature" confirmed="no">java.lang.reflect.Field.getType()</outbound>
                <outbound type="feature" confirmed="no">java.lang.reflect.Field.set(java.lang.Object, java.lang.Object)</outbound>
                <outbound type="class" confirmed="no">java.lang.reflect.InvocationTargetException</outbound>
                <outbound type="class" confirmed="no">java.lang.reflect.Member</outbound>
                <outbound type="class" confirmed="no">java.lang.reflect.Method</outbound>
                <outbound type="feature" confirmed="no">java.lang.reflect.Method.getParameterTypes()</outbound>
                <outbound type="feature" confirmed="no">java.lang.reflect.Method.invoke(java.lang.Object, java.lang.Object[])</outbound>
                <outbound type="class" confirmed="no">java.util.List</outbound>
                <outbound type="feature" confirmed="no">java.util.List.set(int, java.lang.Object)</outbound>
                <outbound type="class" confirmed="no">java.util.Map</outbound>
                <outbound type="feature" confirmed="no">java.util.Map.put(java.lang.Object, java.lang.Object)</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.ConversionException.ConversionException(java.lang.String)</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.DataConversion.canConvert(java.lang.Class, java.lang.Class)</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.DataConversion.convert(java.lang.Object, java.lang.Class)</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.MVEL.eval(java.lang.String, java.lang.Object, org.mvel.integration.VariableResolverFactory)</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.MVEL.eval(java.lang.String, java.lang.Object, org.mvel.integration.VariableResolverFactory, java.lang.Class)</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.PropertyAccessException.PropertyAccessException(java.lang.String)</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.PropertyAccessException.PropertyAccessException(java.lang.String, java.lang.Throwable)</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.PropertyAccessor.addWriteCache(java.lang.Class, java.lang.Integer, java.lang.reflect.Member)</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.PropertyAccessor.capture()</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.PropertyAccessor.checkWriteCache(java.lang.Class, java.lang.Integer)</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.PropertyAccessor.ctx</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.PropertyAccessor.curr</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.PropertyAccessor.cursor</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.PropertyAccessor.get()</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.PropertyAccessor.length</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.PropertyAccessor.nextToken()</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.PropertyAccessor.property</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.PropertyAccessor.scanTo(char)</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.PropertyAccessor.variableFactory</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.PropertyAccessor.whiteSpaceSkip()</outbound>
                <outbound type="class" confirmed="yes">org.mvel.integration.VariableResolverFactory</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.util.PropertyTools.findAbsoluteLast(char[])</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.util.PropertyTools.getBaseComponentType(java.lang.Class)</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.util.PropertyTools.getFieldOrWriteAccessor(java.lang.Class, java.lang.String)</outbound>
                <inbound type="feature" confirmed="yes">org.mvel.PropertyAccessor.set(java.lang.Object, java.lang.String, java.lang.Object)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.PropertyAccessor.set(java.lang.Object, org.mvel.integration.VariableResolverFactory, java.lang.String, java.lang.Object)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.PropertyAccessor.set(java.lang.Object, java.lang.String, java.lang.Object)</name>
                <outbound type="class" confirmed="no">java.lang.Object</outbound>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.PropertyAccessor.PropertyAccessor(java.lang.String, java.lang.Object)</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.PropertyAccessor.set(java.lang.Object)</outbound>
                <inbound type="feature" confirmed="yes">org.mvel.MVEL.setProperty(java.lang.Object, java.lang.String, java.lang.Object)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.TemplateInterpreter.setValuePE(java.lang.String, java.lang.Object, java.lang.Object, java.lang.Object)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.PropertyAccessor.set(java.lang.Object, org.mvel.integration.VariableResolverFactory, java.lang.String, java.lang.Object)</name>
                <outbound type="class" confirmed="no">java.lang.Object</outbound>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="feature" confirmed="no">java.lang.String.toCharArray()</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.PropertyAccessor.PropertyAccessor(char[], java.lang.Object, org.mvel.integration.VariableResolverFactory, java.lang.Object)</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.PropertyAccessor.set(java.lang.Object)</outbound>
                <outbound type="class" confirmed="yes">org.mvel.integration.VariableResolverFactory</outbound>
                <inbound type="feature" confirmed="yes">org.mvel.ast.DeepAssignmentNode.getReducedValue(java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.PropertyAccessor.start</name>
                <inbound type="feature" confirmed="yes">org.mvel.PropertyAccessor.PropertyAccessor(char[], int, int, java.lang.Object, org.mvel.integration.VariableResolverFactory)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.PropertyAccessor.PropertyAccessor(char[], java.lang.Object)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.PropertyAccessor.PropertyAccessor(char[], java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory, java.lang.Object)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.PropertyAccessor.PropertyAccessor(char[], java.lang.Object, org.mvel.integration.VariableResolverFactory, java.lang.Object)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.PropertyAccessor.PropertyAccessor(java.lang.String, java.lang.Object)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.PropertyAccessor.PropertyAccessor(org.mvel.integration.VariableResolverFactory, java.lang.Object)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.PropertyAccessor.capture()</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.PropertyAccessor.nextToken()</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.PropertyAccessor.static {}</name>
                <outbound type="class" confirmed="no">java.lang.Object</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.PropertyAccessor.EMPTYARG</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.PropertyAccessor.configureFactory()</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.PropertyAccessor.thisReference</name>
                <outbound type="class" confirmed="no">java.lang.Object</outbound>
                <inbound type="feature" confirmed="yes">org.mvel.PropertyAccessor.PropertyAccessor(char[], java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory, java.lang.Object)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.PropertyAccessor.PropertyAccessor(char[], java.lang.Object, org.mvel.integration.VariableResolverFactory, java.lang.Object)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.PropertyAccessor.PropertyAccessor(org.mvel.integration.VariableResolverFactory, java.lang.Object)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.PropertyAccessor.getBeanProperty(java.lang.Object, java.lang.String)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.PropertyAccessor.getMethod(java.lang.Object, java.lang.String)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.PropertyAccessor.trimLeft(int)</name>
                <outbound type="feature" confirmed="no">java.lang.Character.isWhitespace(char)</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.PropertyAccessor.property</outbound>
                <inbound type="feature" confirmed="yes">org.mvel.PropertyAccessor.capture()</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.PropertyAccessor.variableFactory</name>
                <outbound type="class" confirmed="yes">org.mvel.integration.VariableResolverFactory</outbound>
                <inbound type="feature" confirmed="yes">org.mvel.PropertyAccessor.PropertyAccessor(char[], int, int, java.lang.Object, org.mvel.integration.VariableResolverFactory)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.PropertyAccessor.PropertyAccessor(char[], java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory, java.lang.Object)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.PropertyAccessor.PropertyAccessor(char[], java.lang.Object, org.mvel.integration.VariableResolverFactory, java.lang.Object)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.PropertyAccessor.PropertyAccessor(org.mvel.integration.VariableResolverFactory, java.lang.Object)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.PropertyAccessor.getBeanProperty(java.lang.Object, java.lang.String)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.PropertyAccessor.getCollectionProperty(java.lang.Object, java.lang.String)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.PropertyAccessor.getMethod(java.lang.Object, java.lang.String)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.PropertyAccessor.set(java.lang.Object)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.PropertyAccessor.whiteSpaceSkip()</name>
                <outbound type="feature" confirmed="no">java.lang.Character.isWhitespace(char)</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.PropertyAccessor.cursor</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.PropertyAccessor.length</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.PropertyAccessor.property</outbound>
                <inbound type="feature" confirmed="yes">org.mvel.PropertyAccessor.getCollectionProperty(java.lang.Object, java.lang.String)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.PropertyAccessor.set(java.lang.Object)</inbound>
            </feature>
        </class>
        <class confirmed="yes">
            <name>org.mvel.PropertyVerifier</name>
            <outbound type="class" confirmed="yes">org.mvel.optimizers.AbstractOptimizer</outbound>
            <feature confirmed="yes">
                <name>org.mvel.PropertyVerifier.COL</name>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.PropertyVerifier.DONE</name>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.PropertyVerifier.METH</name>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.PropertyVerifier.NORM</name>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.PropertyVerifier.PropertyVerifier(char[], org.mvel.ParserContext)</name>
                <outbound type="feature" confirmed="no">java.util.LinkedList.LinkedList()</outbound>
                <outbound type="class" confirmed="no">java.util.List</outbound>
                <outbound type="class" confirmed="yes">org.mvel.ParserContext</outbound>
                <outbound type="feature" confirmed="no">org.mvel.PropertyVerifier.expr</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.PropertyVerifier.first</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.PropertyVerifier.inputs</outbound>
                <outbound type="feature" confirmed="no">org.mvel.PropertyVerifier.length</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.PropertyVerifier.parserContext</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.optimizers.AbstractOptimizer.AbstractOptimizer()</outbound>
                <inbound type="feature" confirmed="yes">org.mvel.ExpressionCompiler.verify(org.mvel.ParserContext, org.mvel.ASTNode)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.PropertyVerifier.PropertyVerifier(java.lang.String, org.mvel.ParserContext)</name>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="feature" confirmed="no">java.lang.String.toCharArray()</outbound>
                <outbound type="feature" confirmed="no">java.util.LinkedList.LinkedList()</outbound>
                <outbound type="class" confirmed="no">java.util.List</outbound>
                <outbound type="class" confirmed="yes">org.mvel.ParserContext</outbound>
                <outbound type="feature" confirmed="no">org.mvel.PropertyVerifier.expr</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.PropertyVerifier.first</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.PropertyVerifier.inputs</outbound>
                <outbound type="feature" confirmed="no">org.mvel.PropertyVerifier.length</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.PropertyVerifier.parserContext</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.optimizers.AbstractOptimizer.AbstractOptimizer()</outbound>
            </feature>
            <feature confirmed="no">
                <name>org.mvel.PropertyVerifier.addFatalError(java.lang.String)</name>
                <inbound type="feature" confirmed="yes">org.mvel.PropertyVerifier.getBeanProperty(java.lang.Class, java.lang.String)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.PropertyVerifier.getCollectionProperty(java.lang.Class, java.lang.String)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.PropertyVerifier.getMethod(java.lang.Class, java.lang.String)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.PropertyVerifier.analyze()</name>
                <outbound type="class" confirmed="no">java.lang.Class</outbound>
                <outbound type="feature" confirmed="no">java.lang.Class.forName(java.lang.String)</outbound>
                <outbound type="class" confirmed="no">java.lang.ClassNotFoundException</outbound>
                <outbound type="feature" confirmed="no">java.lang.NoClassDefFoundError.NoClassDefFoundError(java.lang.String)</outbound>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="feature" confirmed="no">java.lang.Throwable.getMessage()</outbound>
                <outbound type="feature" confirmed="no">org.mvel.PropertyVerifier.capture()</outbound>
                <outbound type="feature" confirmed="no">org.mvel.PropertyVerifier.cursor</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.PropertyVerifier.first</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.PropertyVerifier.getBeanProperty(java.lang.Class, java.lang.String)</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.PropertyVerifier.getCollectionProperty(java.lang.Class, java.lang.String)</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.PropertyVerifier.getMethod(java.lang.Class, java.lang.String)</outbound>
                <outbound type="feature" confirmed="no">org.mvel.PropertyVerifier.length</outbound>
                <outbound type="feature" confirmed="no">org.mvel.PropertyVerifier.nextSubToken()</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.PropertyVerifier.resolvedExternally</outbound>
                <inbound type="feature" confirmed="yes">org.mvel.ExpressionCompiler.verify(org.mvel.ParserContext, org.mvel.ASTNode)</inbound>
            </feature>
            <feature confirmed="no">
                <name>org.mvel.PropertyVerifier.capture()</name>
                <inbound type="feature" confirmed="yes">org.mvel.PropertyVerifier.analyze()</inbound>
            </feature>
            <feature confirmed="no">
                <name>org.mvel.PropertyVerifier.cursor</name>
                <inbound type="feature" confirmed="yes">org.mvel.PropertyVerifier.analyze()</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.PropertyVerifier.getBeanProperty(java.lang.Class, java.lang.String)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.PropertyVerifier.getCollectionProperty(java.lang.Class, java.lang.String)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.PropertyVerifier.getMethod(java.lang.Class, java.lang.String)</inbound>
            </feature>
            <feature confirmed="no">
                <name>org.mvel.PropertyVerifier.expr</name>
                <inbound type="feature" confirmed="yes">org.mvel.PropertyVerifier.PropertyVerifier(char[], org.mvel.ParserContext)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.PropertyVerifier.PropertyVerifier(java.lang.String, org.mvel.ParserContext)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.PropertyVerifier.getMethod(java.lang.Class, java.lang.String)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.PropertyVerifier.first</name>
                <inbound type="feature" confirmed="yes">org.mvel.PropertyVerifier.PropertyVerifier(char[], org.mvel.ParserContext)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.PropertyVerifier.PropertyVerifier(java.lang.String, org.mvel.ParserContext)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.PropertyVerifier.analyze()</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.PropertyVerifier.getBeanProperty(java.lang.Class, java.lang.String)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.PropertyVerifier.getCollectionProperty(java.lang.Class, java.lang.String)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.PropertyVerifier.getMethod(java.lang.Class, java.lang.String)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.PropertyVerifier.getBeanProperty(java.lang.Class, java.lang.String)</name>
                <outbound type="class" confirmed="no">java.lang.Class</outbound>
                <outbound type="feature" confirmed="no">java.lang.Class.forName(java.lang.String)</outbound>
                <outbound type="feature" confirmed="no">java.lang.Class.getMethods()</outbound>
                <outbound type="class" confirmed="no">java.lang.ClassNotFoundException</outbound>
                <outbound type="class" confirmed="no">java.lang.Exception</outbound>
                <outbound type="feature" confirmed="no">java.lang.NoClassDefFoundError.NoClassDefFoundError(java.lang.String)</outbound>
                <outbound type="class" confirmed="no">java.lang.Object</outbound>
                <outbound type="feature" confirmed="no">java.lang.Object.getClass()</outbound>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="feature" confirmed="no">java.lang.String.equals(java.lang.Object)</outbound>
                <outbound type="class" confirmed="no">java.lang.StringBuffer</outbound>
                <outbound type="feature" confirmed="no">java.lang.StringBuffer.StringBuffer(java.lang.String)</outbound>
                <outbound type="feature" confirmed="no">java.lang.StringBuffer.append(java.lang.String)</outbound>
                <outbound type="feature" confirmed="no">java.lang.StringBuffer.toString()</outbound>
                <outbound type="class" confirmed="no">java.lang.Throwable</outbound>
                <outbound type="feature" confirmed="no">java.lang.Throwable.getMessage()</outbound>
                <outbound type="class" confirmed="no">java.lang.reflect.Field</outbound>
                <outbound type="feature" confirmed="no">java.lang.reflect.Field.get(java.lang.Object)</outbound>
                <outbound type="feature" confirmed="no">java.lang.reflect.Field.getType()</outbound>
                <outbound type="class" confirmed="no">java.lang.reflect.Member</outbound>
                <outbound type="class" confirmed="no">java.lang.reflect.Method</outbound>
                <outbound type="feature" confirmed="no">java.lang.reflect.Method.getName()</outbound>
                <outbound type="feature" confirmed="no">java.lang.reflect.Method.getReturnType()</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.CompileException.CompileException(java.lang.String, java.lang.Throwable)</outbound>
                <outbound type="class" confirmed="yes">org.mvel.ParserContext</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.ParserContext.getImport(java.lang.String)</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.ParserContext.getVarOrInputType(java.lang.String)</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.ParserContext.hasImport(java.lang.String)</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.ParserContext.hasVarOrInput(java.lang.String)</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.ParserContext.isStrictTypeEnforcement()</outbound>
                <outbound type="feature" confirmed="no">org.mvel.PropertyVerifier.addFatalError(java.lang.String)</outbound>
                <outbound type="feature" confirmed="no">org.mvel.PropertyVerifier.cursor</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.PropertyVerifier.first</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.PropertyVerifier.parserContext</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.PropertyVerifier.resolvedExternally</outbound>
                <outbound type="feature" confirmed="no">org.mvel.PropertyVerifier.start</outbound>
                <outbound type="feature" confirmed="no">org.mvel.PropertyVerifier.tryStaticAccess()</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.util.PropertyTools.getFieldOrAccessor(java.lang.Class, java.lang.String)</outbound>
                <inbound type="feature" confirmed="yes">org.mvel.PropertyVerifier.analyze()</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.PropertyVerifier.getCollectionProperty(java.lang.Class, java.lang.String)</name>
                <outbound type="class" confirmed="no">java.lang.Class</outbound>
                <outbound type="feature" confirmed="no">java.lang.Class.forName(java.lang.String)</outbound>
                <outbound type="class" confirmed="no">java.lang.ClassNotFoundException</outbound>
                <outbound type="feature" confirmed="no">java.lang.NoClassDefFoundError.NoClassDefFoundError(java.lang.String)</outbound>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="feature" confirmed="no">java.lang.Throwable.getMessage()</outbound>
                <outbound type="class" confirmed="yes">org.mvel.ParserContext</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.ParserContext.getImport(java.lang.String)</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.ParserContext.getVarOrInputType(java.lang.String)</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.ParserContext.hasImport(java.lang.String)</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.ParserContext.hasVarOrInput(java.lang.String)</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.PropertyAccessException.PropertyAccessException(java.lang.String)</outbound>
                <outbound type="feature" confirmed="no">org.mvel.PropertyVerifier.addFatalError(java.lang.String)</outbound>
                <outbound type="feature" confirmed="no">org.mvel.PropertyVerifier.cursor</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.PropertyVerifier.first</outbound>
                <outbound type="feature" confirmed="no">org.mvel.PropertyVerifier.length</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.PropertyVerifier.parserContext</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.PropertyVerifier.resolvedExternally</outbound>
                <outbound type="feature" confirmed="no">org.mvel.PropertyVerifier.scanTo(char)</outbound>
                <outbound type="feature" confirmed="no">org.mvel.PropertyVerifier.whiteSpaceSkip()</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.util.PropertyTools.getSubComponentType(java.lang.Class)</outbound>
                <inbound type="feature" confirmed="yes">org.mvel.PropertyVerifier.analyze()</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.PropertyVerifier.getInputs()</name>
                <outbound type="class" confirmed="no">java.util.List</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.PropertyVerifier.inputs</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.PropertyVerifier.getMethod(java.lang.Class, java.lang.String)</name>
                <outbound type="class" confirmed="no">java.lang.Class</outbound>
                <outbound type="feature" confirmed="no">java.lang.Class.forName(java.lang.String)</outbound>
                <outbound type="feature" confirmed="no">java.lang.Class.getDeclaredMethods()</outbound>
                <outbound type="feature" confirmed="no">java.lang.Class.getMethods()</outbound>
                <outbound type="feature" confirmed="no">java.lang.Class.getName()</outbound>
                <outbound type="feature" confirmed="no">java.lang.Class.isArray()</outbound>
                <outbound type="class" confirmed="no">java.lang.ClassNotFoundException</outbound>
                <outbound type="feature" confirmed="no">java.lang.NoClassDefFoundError.NoClassDefFoundError(java.lang.String)</outbound>
                <outbound type="class" confirmed="no">java.lang.Object</outbound>
                <outbound type="feature" confirmed="no">java.lang.Object.getClass()</outbound>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="feature" confirmed="no">java.lang.String.String(char[], int, int)</outbound>
                <outbound type="feature" confirmed="no">java.lang.String.equals(java.lang.Object)</outbound>
                <outbound type="feature" confirmed="no">java.lang.String.length()</outbound>
                <outbound type="feature" confirmed="no">java.lang.String.toCharArray()</outbound>
                <outbound type="class" confirmed="no">java.lang.StringBuffer</outbound>
                <outbound type="feature" confirmed="no">java.lang.StringBuffer.StringBuffer(java.lang.String)</outbound>
                <outbound type="feature" confirmed="no">java.lang.StringBuffer.append(java.lang.String)</outbound>
                <outbound type="feature" confirmed="no">java.lang.StringBuffer.toString()</outbound>
                <outbound type="feature" confirmed="no">java.lang.Throwable.getMessage()</outbound>
                <outbound type="class" confirmed="no">java.lang.reflect.Method</outbound>
                <outbound type="feature" confirmed="no">java.lang.reflect.Method.getDeclaringClass()</outbound>
                <outbound type="feature" confirmed="no">java.lang.reflect.Method.getName()</outbound>
                <outbound type="feature" confirmed="no">java.lang.reflect.Method.getReturnType()</outbound>
                <outbound type="class" confirmed="yes">org.mvel.CompiledExpression</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.ExpressionCompiler.ExpressionCompiler(java.lang.String)</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.ExpressionCompiler.ExpressionCompiler(java.lang.String, boolean)</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.ExpressionCompiler._compile()</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.ExpressionCompiler.getReturnType()</outbound>
                <outbound type="class" confirmed="yes">org.mvel.ParserContext</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.ParserContext.getStaticImport(java.lang.String)</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.ParserContext.hasImport(java.lang.String)</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.ParserContext.isStrictTypeEnforcement()</outbound>
                <outbound type="feature" confirmed="no">org.mvel.PropertyVerifier.addFatalError(java.lang.String)</outbound>
                <outbound type="feature" confirmed="no">org.mvel.PropertyVerifier.cursor</outbound>
                <outbound type="feature" confirmed="no">org.mvel.PropertyVerifier.expr</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.PropertyVerifier.first</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.PropertyVerifier.parserContext</outbound>
                <outbound type="class" confirmed="yes">org.mvel.util.MethodStub</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.util.MethodStub.getMethod()</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.util.ParseTools.balancedCapture(char[], int, char)</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.util.ParseTools.getBestCandidate(java.lang.Class[], java.lang.String, java.lang.Class, java.lang.reflect.Method[])</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.util.ParseTools.parseParameterList(char[], int, int)</outbound>
                <outbound type="class" confirmed="yes">org.mvel.util.StringAppender</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.util.StringAppender.StringAppender()</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.util.StringAppender.append(java.lang.String)</outbound>
                <inbound type="feature" confirmed="yes">org.mvel.PropertyVerifier.analyze()</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.PropertyVerifier.inputs</name>
                <outbound type="class" confirmed="no">java.util.List</outbound>
                <inbound type="feature" confirmed="yes">org.mvel.PropertyVerifier.PropertyVerifier(char[], org.mvel.ParserContext)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.PropertyVerifier.PropertyVerifier(java.lang.String, org.mvel.ParserContext)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.PropertyVerifier.getInputs()</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.PropertyVerifier.setInputs(java.util.List)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.PropertyVerifier.isResolvedExternally()</name>
                <outbound type="feature" confirmed="yes">org.mvel.PropertyVerifier.resolvedExternally</outbound>
                <inbound type="feature" confirmed="yes">org.mvel.ExpressionCompiler.verify(org.mvel.ParserContext, org.mvel.ASTNode)</inbound>
            </feature>
            <feature confirmed="no">
                <name>org.mvel.PropertyVerifier.length</name>
                <inbound type="feature" confirmed="yes">org.mvel.PropertyVerifier.PropertyVerifier(char[], org.mvel.ParserContext)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.PropertyVerifier.PropertyVerifier(java.lang.String, org.mvel.ParserContext)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.PropertyVerifier.analyze()</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.PropertyVerifier.getCollectionProperty(java.lang.Class, java.lang.String)</inbound>
            </feature>
            <feature confirmed="no">
                <name>org.mvel.PropertyVerifier.nextSubToken()</name>
                <inbound type="feature" confirmed="yes">org.mvel.PropertyVerifier.analyze()</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.PropertyVerifier.parserContext</name>
                <outbound type="class" confirmed="yes">org.mvel.ParserContext</outbound>
                <inbound type="feature" confirmed="yes">org.mvel.PropertyVerifier.PropertyVerifier(char[], org.mvel.ParserContext)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.PropertyVerifier.PropertyVerifier(java.lang.String, org.mvel.ParserContext)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.PropertyVerifier.getBeanProperty(java.lang.Class, java.lang.String)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.PropertyVerifier.getCollectionProperty(java.lang.Class, java.lang.String)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.PropertyVerifier.getMethod(java.lang.Class, java.lang.String)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.PropertyVerifier.resolvedExternally</name>
                <inbound type="feature" confirmed="yes">org.mvel.PropertyVerifier.analyze()</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.PropertyVerifier.getBeanProperty(java.lang.Class, java.lang.String)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.PropertyVerifier.getCollectionProperty(java.lang.Class, java.lang.String)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.PropertyVerifier.isResolvedExternally()</inbound>
            </feature>
            <feature confirmed="no">
                <name>org.mvel.PropertyVerifier.scanTo(char)</name>
                <inbound type="feature" confirmed="yes">org.mvel.PropertyVerifier.getCollectionProperty(java.lang.Class, java.lang.String)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.PropertyVerifier.setInputs(java.util.List)</name>
                <outbound type="class" confirmed="no">java.util.List</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.PropertyVerifier.inputs</outbound>
            </feature>
            <feature confirmed="no">
                <name>org.mvel.PropertyVerifier.start</name>
                <inbound type="feature" confirmed="yes">org.mvel.PropertyVerifier.getBeanProperty(java.lang.Class, java.lang.String)</inbound>
            </feature>
            <feature confirmed="no">
                <name>org.mvel.PropertyVerifier.tryStaticAccess()</name>
                <inbound type="feature" confirmed="yes">org.mvel.PropertyVerifier.getBeanProperty(java.lang.Class, java.lang.String)</inbound>
            </feature>
            <feature confirmed="no">
                <name>org.mvel.PropertyVerifier.whiteSpaceSkip()</name>
                <inbound type="feature" confirmed="yes">org.mvel.PropertyVerifier.getCollectionProperty(java.lang.Class, java.lang.String)</inbound>
            </feature>
        </class>
        <class confirmed="yes">
            <name>org.mvel.SetAccessor</name>
            <outbound type="class" confirmed="no">java.lang.Object</outbound>
            <inbound type="feature" confirmed="yes">org.mvel.CompiledSetExpression.accessor</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.CompiledSetExpression.setValue(java.lang.Object, org.mvel.integration.VariableResolverFactory, java.lang.Object)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.optimizers.AccessorOptimizer.optimizeSetAccessor(char[], java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory, boolean, java.lang.Object)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.asm.ASMAccessorOptimizer.optimizeSetAccessor(char[], java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory, boolean, java.lang.Object)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.refl.ReflectiveAccessorOptimizer.optimizeSetAccessor(char[], java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory, boolean, java.lang.Object)</inbound>
            <feature confirmed="yes">
                <name>org.mvel.SetAccessor.SetAccessor(org.mvel.Accessor, org.mvel.Accessor)</name>
                <outbound type="feature" confirmed="no">java.lang.Object.Object()</outbound>
                <outbound type="class" confirmed="yes">org.mvel.Accessor</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.SetAccessor.rootAccessor</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.SetAccessor.setAccessor</outbound>
                <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.refl.ReflectiveAccessorOptimizer.optimizeSetAccessor(char[], java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory, boolean, java.lang.Object)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.SetAccessor.rootAccessor</name>
                <outbound type="class" confirmed="yes">org.mvel.Accessor</outbound>
                <inbound type="feature" confirmed="yes">org.mvel.SetAccessor.SetAccessor(org.mvel.Accessor, org.mvel.Accessor)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.SetAccessor.setValue(java.lang.Object, org.mvel.integration.VariableResolverFactory, java.lang.Object)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.SetAccessor.setAccessor</name>
                <outbound type="class" confirmed="yes">org.mvel.Accessor</outbound>
                <inbound type="feature" confirmed="yes">org.mvel.SetAccessor.SetAccessor(org.mvel.Accessor, org.mvel.Accessor)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.SetAccessor.setValue(java.lang.Object, org.mvel.integration.VariableResolverFactory, java.lang.Object)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.SetAccessor.setValue(java.lang.Object, org.mvel.integration.VariableResolverFactory, java.lang.Object)</name>
                <outbound type="class" confirmed="no">java.lang.Object</outbound>
                <outbound type="class" confirmed="yes">org.mvel.Accessor</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.Accessor.getValue(java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory)</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.Accessor.setValue(java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory, java.lang.Object)</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.SetAccessor.rootAccessor</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.SetAccessor.setAccessor</outbound>
                <outbound type="class" confirmed="yes">org.mvel.integration.VariableResolverFactory</outbound>
                <inbound type="feature" confirmed="yes">org.mvel.CompiledSetExpression.setValue(java.lang.Object, org.mvel.integration.VariableResolverFactory, java.lang.Object)</inbound>
            </feature>
        </class>
        <class confirmed="yes">
            <name>org.mvel.Soundex</name>
            <outbound type="class" confirmed="no">java.lang.Object</outbound>
            <feature confirmed="yes">
                <name>org.mvel.Soundex.MAP</name>
                <inbound type="feature" confirmed="yes">org.mvel.Soundex.soundex(java.lang.String)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.Soundex.static {}</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.Soundex.Soundex()</name>
                <outbound type="feature" confirmed="no">java.lang.Object.Object()</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.Soundex.soundex(java.lang.String)</name>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="feature" confirmed="no">java.lang.String.toCharArray()</outbound>
                <outbound type="feature" confirmed="no">java.lang.String.toUpperCase()</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.Soundex.MAP</outbound>
                <outbound type="class" confirmed="yes">org.mvel.util.StringAppender</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.util.StringAppender.StringAppender()</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.util.StringAppender.append(char)</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.util.StringAppender.length()</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.util.StringAppender.toString()</outbound>
                <inbound type="feature" confirmed="yes">org.mvel.AbstractParser.reduce()</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.MVELRuntime.execute(boolean, org.mvel.CompiledExpression, java.lang.Object, org.mvel.integration.VariableResolverFactory)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.Soundex.static {}</name>
                <outbound type="feature" confirmed="yes">org.mvel.Soundex.MAP</outbound>
            </feature>
        </class>
        <class confirmed="yes">
            <name>org.mvel.TemplateCompiler</name>
            <outbound type="class" confirmed="no">java.lang.Object</outbound>
            <feature confirmed="yes">
                <name>org.mvel.TemplateCompiler.DEFAULT_DEBUG</name>
                <inbound type="feature" confirmed="yes">org.mvel.TemplateCompiler.TemplateCompiler(org.mvel.TemplateInterpreter)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.TemplateCompiler.static {}</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.TemplateCompiler.TemplateCompiler(org.mvel.TemplateInterpreter)</name>
                <outbound type="feature" confirmed="no">java.lang.Object.Object()</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.TemplateCompiler.DEFAULT_DEBUG</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.TemplateCompiler.cursor</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.TemplateCompiler.debug</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.TemplateCompiler.expressionArray</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.TemplateCompiler.length</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.TemplateCompiler.maxDepth</outbound>
                <outbound type="class" confirmed="yes">org.mvel.TemplateInterpreter</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.TemplateInterpreter.getExpression()</outbound>
                <inbound type="feature" confirmed="yes">org.mvel.TemplateInterpreter.TemplateInterpreter(java.lang.CharSequence)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.TemplateInterpreter.TemplateInterpreter(java.lang.String)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.TemplateCompiler.buildIncludeRef(char[])</name>
                <outbound type="feature" confirmed="no">java.lang.Character.isWhitespace(char)</outbound>
                <outbound type="class" confirmed="no">java.lang.Object</outbound>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="feature" confirmed="no">java.lang.String.String(char[], int, int)</outbound>
                <outbound type="feature" confirmed="no">java.util.ArrayList.ArrayList()</outbound>
                <outbound type="class" confirmed="no">java.util.Iterator</outbound>
                <outbound type="feature" confirmed="no">java.util.Iterator.hasNext()</outbound>
                <outbound type="feature" confirmed="no">java.util.Iterator.next()</outbound>
                <outbound type="feature" confirmed="no">java.util.List.add(java.lang.Object)</outbound>
                <outbound type="feature" confirmed="no">java.util.List.size()</outbound>
                <outbound type="feature" confirmed="no">java.util.List.toArray(java.lang.Object[])</outbound>
                <outbound type="class" confirmed="no">java.util.Map</outbound>
                <outbound type="feature" confirmed="no">java.util.Map.get(java.lang.Object)</outbound>
                <outbound type="feature" confirmed="no">java.util.Map.keySet()</outbound>
                <outbound type="class" confirmed="no">java.util.Set</outbound>
                <outbound type="feature" confirmed="no">java.util.Set.iterator()</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.ParseException.ParseException(java.lang.String, char[], int)</outbound>
                <outbound type="class" confirmed="yes">org.mvel.TemplateCompiler$IncludeRef</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.TemplateCompiler$IncludeRef.TemplateCompiler$IncludeRef(java.lang.String, org.mvel.TemplateCompiler$IncludeRefParam[])</outbound>
                <outbound type="class" confirmed="yes">org.mvel.TemplateCompiler$IncludeRefParam</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.TemplateCompiler$IncludeRefParam.TemplateCompiler$IncludeRefParam(java.lang.String, java.lang.String)</outbound>
                <outbound type="class" confirmed="no">org.mvel.TemplateCompiler$IncludeRefParam[]</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.TemplateCompiler.expressionArray</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.util.ParseTools.balancedCapture(char[], int, char)</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.util.ParseTools.parseParameters(char[])</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.util.ParseTools.subset(char[], int, int)</outbound>
                <inbound type="feature" confirmed="yes">org.mvel.TemplateCompiler.compileExpression()</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.TemplateCompiler.captureTo(char)</name>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="feature" confirmed="no">java.lang.String.String(char[], int, int)</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.TemplateCompiler.cursor</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.TemplateCompiler.expressionArray</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.TemplateCompiler.lookahead(char)</outbound>
                <inbound type="feature" confirmed="yes">org.mvel.TemplateCompiler.compileExpression()</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.TemplateCompiler.compileExpression()</name>
                <outbound type="class" confirmed="no">char[]</outbound>
                <outbound type="class" confirmed="no">java.io.PrintStream</outbound>
                <outbound type="feature" confirmed="no">java.io.PrintStream.println(java.lang.String)</outbound>
                <outbound type="feature" confirmed="no">java.lang.Character.isWhitespace(char)</outbound>
                <outbound type="class" confirmed="no">java.lang.Object</outbound>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="feature" confirmed="no">java.lang.String.String(char[], int, int)</outbound>
                <outbound type="feature" confirmed="no">java.lang.String.copyValueOf(char[])</outbound>
                <outbound type="feature" confirmed="no">java.lang.String.equals(java.lang.Object)</outbound>
                <outbound type="feature" confirmed="no">java.lang.String.length()</outbound>
                <outbound type="feature" confirmed="no">java.lang.String.valueOf(java.lang.Object)</outbound>
                <outbound type="class" confirmed="no">java.lang.StringBuffer</outbound>
                <outbound type="feature" confirmed="no">java.lang.StringBuffer.StringBuffer(java.lang.String)</outbound>
                <outbound type="feature" confirmed="no">java.lang.StringBuffer.append(int)</outbound>
                <outbound type="feature" confirmed="no">java.lang.StringBuffer.append(java.lang.Object)</outbound>
                <outbound type="feature" confirmed="no">java.lang.StringBuffer.append(java.lang.String)</outbound>
                <outbound type="feature" confirmed="no">java.lang.StringBuffer.toString()</outbound>
                <outbound type="class" confirmed="no">java.lang.String[]</outbound>
                <outbound type="feature" confirmed="no">java.lang.System.out</outbound>
                <outbound type="feature" confirmed="no">java.util.ArrayList.ArrayList(int)</outbound>
                <outbound type="feature" confirmed="no">java.util.ArrayList.add(java.lang.Object)</outbound>
                <outbound type="feature" confirmed="no">java.util.ArrayList.remove(int)</outbound>
                <outbound type="feature" confirmed="no">java.util.ArrayList.size()</outbound>
                <outbound type="class" confirmed="no">java.util.Iterator</outbound>
                <outbound type="feature" confirmed="no">java.util.Iterator.hasNext()</outbound>
                <outbound type="feature" confirmed="no">java.util.Iterator.next()</outbound>
                <outbound type="feature" confirmed="no">java.util.LinkedList.LinkedList()</outbound>
                <outbound type="feature" confirmed="no">java.util.List.add(java.lang.Object)</outbound>
                <outbound type="feature" confirmed="no">java.util.List.get(int)</outbound>
                <outbound type="feature" confirmed="no">java.util.List.iterator()</outbound>
                <outbound type="feature" confirmed="no">java.util.List.size()</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.CompileException.CompileException(java.lang.String)</outbound>
                <outbound type="class" confirmed="yes">org.mvel.ForeachContext</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.ForeachContext.ForeachContext()</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.ForeachContext.setAliases(java.lang.String[])</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.ForeachContext.setNames(java.lang.String[])</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.ForeachContext.setSeperator(java.lang.String)</outbound>
                <outbound type="class" confirmed="yes">org.mvel.Node</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.Node.Node(int)</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.Node.Node(int, int)</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.Node.Node(int, int, int)</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.Node.Node(int, int, int, int, int)</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.Node.getEndNode()</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.Node.getEndPos()</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.Node.getNode()</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.Node.getNodeType()</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.Node.getRegister()</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.Node.getStartPos()</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.Node.getToken()</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.Node.setAlias(java.lang.String)</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.Node.setEndNode(int)</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.Node.setEndPos(int)</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.Node.setLength(int)</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.Node.setNode(int)</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.Node.setRegister(java.lang.Object)</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.Node.setToken(int)</outbound>
                <outbound type="class" confirmed="yes">org.mvel.TemplateCompiler$IncludeRef</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.TemplateCompiler.buildIncludeRef(char[])</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.TemplateCompiler.captureTo(char)</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.TemplateCompiler.cursor</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.TemplateCompiler.debug</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.TemplateCompiler.expressionArray</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.TemplateCompiler.getNodeTypeName(int)</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.TemplateCompiler.indent(int)</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.TemplateCompiler.maxDepth</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.TemplateCompiler.parseAlias(char[], int, int, int)</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.TemplateCompiler.structuredCaptureArray(int)</outbound>
                <inbound type="feature" confirmed="yes">org.mvel.TemplateInterpreter.TemplateInterpreter(java.lang.CharSequence)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.TemplateInterpreter.TemplateInterpreter(java.lang.String)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.TemplateCompiler.cursor</name>
                <inbound type="feature" confirmed="yes">org.mvel.TemplateCompiler.TemplateCompiler(org.mvel.TemplateInterpreter)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.TemplateCompiler.captureTo(char)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.TemplateCompiler.compileExpression()</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.TemplateCompiler.lookahead(char)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.TemplateCompiler.showCodeNearError()</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.TemplateCompiler.structuredCaptureArray(int)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.TemplateCompiler.debug</name>
                <inbound type="feature" confirmed="yes">org.mvel.TemplateCompiler.TemplateCompiler(org.mvel.TemplateInterpreter)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.TemplateCompiler.compileExpression()</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.TemplateCompiler.isDebug()</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.TemplateCompiler.setDebug(boolean)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.TemplateCompiler.expressionArray</name>
                <inbound type="feature" confirmed="yes">org.mvel.TemplateCompiler.TemplateCompiler(org.mvel.TemplateInterpreter)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.TemplateCompiler.buildIncludeRef(char[])</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.TemplateCompiler.captureTo(char)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.TemplateCompiler.compileExpression()</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.TemplateCompiler.lookahead(char)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.TemplateCompiler.showCodeNearError()</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.TemplateCompiler.structuredCaptureArray(int)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.TemplateCompiler.getMaxDepth()</name>
                <outbound type="feature" confirmed="yes">org.mvel.TemplateCompiler.maxDepth</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.TemplateCompiler.getNodeTypeName(int)</name>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <inbound type="feature" confirmed="yes">org.mvel.TemplateCompiler.compileExpression()</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.TemplateCompiler.indent(int)</name>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="class" confirmed="yes">org.mvel.util.StringAppender</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.util.StringAppender.StringAppender()</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.util.StringAppender.append(java.lang.String)</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.util.StringAppender.toString()</outbound>
                <inbound type="feature" confirmed="yes">org.mvel.TemplateCompiler.compileExpression()</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.TemplateCompiler.isDebug()</name>
                <outbound type="feature" confirmed="yes">org.mvel.TemplateCompiler.debug</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.TemplateCompiler.length</name>
                <inbound type="feature" confirmed="yes">org.mvel.TemplateCompiler.TemplateCompiler(org.mvel.TemplateInterpreter)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.TemplateCompiler.lookahead(char)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.TemplateCompiler.showCodeNearError()</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.TemplateCompiler.structuredCaptureArray(int)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.TemplateCompiler.lookahead(char)</name>
                <outbound type="feature" confirmed="yes">org.mvel.TemplateCompiler.cursor</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.TemplateCompiler.expressionArray</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.TemplateCompiler.length</outbound>
                <inbound type="feature" confirmed="yes">org.mvel.TemplateCompiler.captureTo(char)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.TemplateCompiler.maxDepth</name>
                <inbound type="feature" confirmed="yes">org.mvel.TemplateCompiler.TemplateCompiler(org.mvel.TemplateInterpreter)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.TemplateCompiler.compileExpression()</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.TemplateCompiler.getMaxDepth()</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.TemplateCompiler.setMaxDepth(int)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.TemplateCompiler.parseAlias(char[], int, int, int)</name>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="feature" confirmed="no">java.lang.String.String(char[], int, int)</outbound>
                <outbound type="feature" confirmed="no">java.lang.String.trim()</outbound>
                <outbound type="class" confirmed="no">java.lang.StringBuffer</outbound>
                <outbound type="feature" confirmed="no">java.lang.StringBuffer.StringBuffer(java.lang.String)</outbound>
                <outbound type="feature" confirmed="no">java.lang.StringBuffer.append(int)</outbound>
                <outbound type="feature" confirmed="no">java.lang.StringBuffer.toString()</outbound>
                <inbound type="feature" confirmed="yes">org.mvel.TemplateCompiler.compileExpression()</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.TemplateCompiler.setDebug(boolean)</name>
                <outbound type="feature" confirmed="yes">org.mvel.TemplateCompiler.debug</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.TemplateCompiler.setMaxDepth(int)</name>
                <outbound type="feature" confirmed="yes">org.mvel.TemplateCompiler.maxDepth</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.TemplateCompiler.showCodeNearError()</name>
                <outbound type="class" confirmed="no">java.lang.CharSequence</outbound>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="feature" confirmed="no">java.lang.String.copyValueOf(char[], int, int)</outbound>
                <outbound type="class" confirmed="no">java.lang.StringBuffer</outbound>
                <outbound type="feature" confirmed="no">java.lang.StringBuffer.StringBuffer(java.lang.String)</outbound>
                <outbound type="feature" confirmed="no">java.lang.StringBuffer.append(java.lang.String)</outbound>
                <outbound type="feature" confirmed="no">java.lang.StringBuffer.toString()</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.TemplateCompiler.cursor</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.TemplateCompiler.expressionArray</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.TemplateCompiler.length</outbound>
                <inbound type="feature" confirmed="yes">org.mvel.TemplateCompiler.structuredCaptureArray(int)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.TemplateCompiler.static {}</name>
                <outbound type="feature" confirmed="no">java.lang.Boolean.getBoolean(java.lang.String)</outbound>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.TemplateCompiler.DEFAULT_DEBUG</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.TemplateCompiler.structuredCaptureArray(int)</name>
                <outbound type="class" confirmed="no">java.lang.CharSequence</outbound>
                <outbound type="class" confirmed="no">java.lang.Object</outbound>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="class" confirmed="no">java.lang.StringBuffer</outbound>
                <outbound type="feature" confirmed="no">java.lang.StringBuffer.StringBuffer(java.lang.String)</outbound>
                <outbound type="feature" confirmed="no">java.lang.StringBuffer.append(int)</outbound>
                <outbound type="feature" confirmed="no">java.lang.StringBuffer.append(java.lang.Object)</outbound>
                <outbound type="feature" confirmed="no">java.lang.StringBuffer.append(java.lang.String)</outbound>
                <outbound type="feature" confirmed="no">java.lang.StringBuffer.toString()</outbound>
                <outbound type="feature" confirmed="no">java.lang.System.arraycopy(java.lang.Object, int, java.lang.Object, int, int)</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.CompileException.CompileException(java.lang.String)</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.TemplateCompiler.cursor</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.TemplateCompiler.expressionArray</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.TemplateCompiler.length</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.TemplateCompiler.showCodeNearError()</outbound>
                <inbound type="feature" confirmed="yes">org.mvel.TemplateCompiler.compileExpression()</inbound>
            </feature>
        </class>
        <class confirmed="yes">
            <name>org.mvel.TemplateCompiler$IncludeRef</name>
            <outbound type="class" confirmed="no">java.lang.Object</outbound>
            <inbound type="feature" confirmed="yes">org.mvel.TemplateCompiler.buildIncludeRef(char[])</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.TemplateCompiler.compileExpression()</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.TemplateInterpreter.execute(java.lang.Object, java.util.Map, org.mvel.TemplateRegistry)</inbound>
            <feature confirmed="yes">
                <name>org.mvel.TemplateCompiler$IncludeRef.TemplateCompiler$IncludeRef(java.lang.String, org.mvel.TemplateCompiler$IncludeRefParam[])</name>
                <outbound type="feature" confirmed="no">java.lang.Object.Object()</outbound>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.TemplateCompiler$IncludeRef.name</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.TemplateCompiler$IncludeRef.params</outbound>
                <outbound type="class" confirmed="yes">org.mvel.TemplateCompiler$IncludeRefParam</outbound>
                <inbound type="feature" confirmed="yes">org.mvel.TemplateCompiler.buildIncludeRef(char[])</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.TemplateCompiler$IncludeRef.getName()</name>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.TemplateCompiler$IncludeRef.name</outbound>
                <inbound type="feature" confirmed="yes">org.mvel.TemplateInterpreter.execute(java.lang.Object, java.util.Map, org.mvel.TemplateRegistry)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.TemplateCompiler$IncludeRef.getParams()</name>
                <outbound type="feature" confirmed="yes">org.mvel.TemplateCompiler$IncludeRef.params</outbound>
                <outbound type="class" confirmed="yes">org.mvel.TemplateCompiler$IncludeRefParam</outbound>
                <inbound type="feature" confirmed="yes">org.mvel.TemplateInterpreter.execute(java.lang.Object, java.util.Map, org.mvel.TemplateRegistry)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.TemplateCompiler$IncludeRef.name</name>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <inbound type="feature" confirmed="yes">org.mvel.TemplateCompiler$IncludeRef.TemplateCompiler$IncludeRef(java.lang.String, org.mvel.TemplateCompiler$IncludeRefParam[])</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.TemplateCompiler$IncludeRef.getName()</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.TemplateCompiler$IncludeRef.params</name>
                <outbound type="class" confirmed="yes">org.mvel.TemplateCompiler$IncludeRefParam</outbound>
                <inbound type="feature" confirmed="yes">org.mvel.TemplateCompiler$IncludeRef.TemplateCompiler$IncludeRef(java.lang.String, org.mvel.TemplateCompiler$IncludeRefParam[])</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.TemplateCompiler$IncludeRef.getParams()</inbound>
            </feature>
        </class>
        <class confirmed="yes">
            <name>org.mvel.TemplateCompiler$IncludeRefParam</name>
            <outbound type="class" confirmed="no">java.lang.Object</outbound>
            <inbound type="feature" confirmed="yes">org.mvel.TemplateCompiler$IncludeRef.TemplateCompiler$IncludeRef(java.lang.String, org.mvel.TemplateCompiler$IncludeRefParam[])</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.TemplateCompiler$IncludeRef.getParams()</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.TemplateCompiler$IncludeRef.params</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.TemplateCompiler.buildIncludeRef(char[])</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.TemplateInterpreter.execute(java.lang.Object, java.util.Map, org.mvel.TemplateRegistry)</inbound>
            <feature confirmed="yes">
                <name>org.mvel.TemplateCompiler$IncludeRefParam.TemplateCompiler$IncludeRefParam(java.lang.String, java.lang.String)</name>
                <outbound type="feature" confirmed="no">java.lang.Object.Object()</outbound>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.TemplateCompiler$IncludeRefParam.identifier</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.TemplateCompiler$IncludeRefParam.value</outbound>
                <inbound type="feature" confirmed="yes">org.mvel.TemplateCompiler.buildIncludeRef(char[])</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.TemplateCompiler$IncludeRefParam.getIdentifier()</name>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.TemplateCompiler$IncludeRefParam.identifier</outbound>
                <inbound type="feature" confirmed="yes">org.mvel.TemplateInterpreter.execute(java.lang.Object, java.util.Map, org.mvel.TemplateRegistry)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.TemplateCompiler$IncludeRefParam.getValue()</name>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.TemplateCompiler$IncludeRefParam.value</outbound>
                <inbound type="feature" confirmed="yes">org.mvel.TemplateInterpreter.execute(java.lang.Object, java.util.Map, org.mvel.TemplateRegistry)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.TemplateCompiler$IncludeRefParam.identifier</name>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <inbound type="feature" confirmed="yes">org.mvel.TemplateCompiler$IncludeRefParam.TemplateCompiler$IncludeRefParam(java.lang.String, java.lang.String)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.TemplateCompiler$IncludeRefParam.getIdentifier()</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.TemplateCompiler$IncludeRefParam.value</name>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <inbound type="feature" confirmed="yes">org.mvel.TemplateCompiler$IncludeRefParam.TemplateCompiler$IncludeRefParam(java.lang.String, java.lang.String)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.TemplateCompiler$IncludeRefParam.getValue()</inbound>
            </feature>
        </class>
        <class confirmed="no">
            <name>org.mvel.TemplateCompiler$IncludeRefParam[]</name>
            <inbound type="feature" confirmed="yes">org.mvel.TemplateCompiler.buildIncludeRef(char[])</inbound>
        </class>
        <class confirmed="yes">
            <name>org.mvel.TemplateInterpreter</name>
            <outbound type="class" confirmed="no">java.lang.Object</outbound>
            <inbound type="feature" confirmed="yes">org.mvel.TemplateCompiler.TemplateCompiler(org.mvel.TemplateInterpreter)</inbound>
            <feature confirmed="yes">
                <name>org.mvel.TemplateInterpreter.CACHE_DISABLE</name>
                <inbound type="feature" confirmed="yes">org.mvel.TemplateInterpreter.TemplateInterpreter(java.lang.CharSequence)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.TemplateInterpreter.TemplateInterpreter(java.lang.String)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.TemplateInterpreter.execute(java.lang.Object, java.util.Map, org.mvel.TemplateRegistry)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.TemplateInterpreter.setDisableCache(boolean)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.TemplateInterpreter.static {}</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.TemplateInterpreter.EX_NODE_CACHE</name>
                <outbound type="class" confirmed="no">java.util.Map</outbound>
                <inbound type="feature" confirmed="yes">org.mvel.TemplateInterpreter.TemplateInterpreter(java.lang.CharSequence)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.TemplateInterpreter.TemplateInterpreter(java.lang.String)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.TemplateInterpreter.static {}</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.TemplateInterpreter.EX_PRECACHE</name>
                <outbound type="class" confirmed="no">java.util.Map</outbound>
                <inbound type="feature" confirmed="yes">org.mvel.TemplateInterpreter.TemplateInterpreter(java.lang.CharSequence)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.TemplateInterpreter.TemplateInterpreter(java.lang.String)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.TemplateInterpreter.static {}</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.TemplateInterpreter.EX_PRECOMP_CACHE</name>
                <outbound type="class" confirmed="no">java.util.Map</outbound>
                <inbound type="feature" confirmed="yes">org.mvel.TemplateInterpreter.execute(java.lang.Object, java.util.Map, org.mvel.TemplateRegistry)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.TemplateInterpreter.static {}</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.TemplateInterpreter.TemplateInterpreter(char[])</name>
                <outbound type="feature" confirmed="no">java.lang.Object.Object()</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.TemplateInterpreter.debug</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.TemplateInterpreter.expression</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.TemplateInterpreter.node</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.TemplateInterpreter.TemplateInterpreter(java.lang.CharSequence)</name>
                <outbound type="class" confirmed="no">char[]</outbound>
                <outbound type="class" confirmed="no">java.lang.CharSequence</outbound>
                <outbound type="feature" confirmed="no">java.lang.CharSequence.toString()</outbound>
                <outbound type="class" confirmed="no">java.lang.Object</outbound>
                <outbound type="feature" confirmed="no">java.lang.Object.Object()</outbound>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="feature" confirmed="no">java.lang.String.toCharArray()</outbound>
                <outbound type="class" confirmed="no">java.util.Map</outbound>
                <outbound type="feature" confirmed="no">java.util.Map.get(java.lang.Object)</outbound>
                <outbound type="feature" confirmed="no">java.util.Map.put(java.lang.Object, java.lang.Object)</outbound>
                <outbound type="class" confirmed="yes">org.mvel.Node</outbound>
                <outbound type="class" confirmed="no">org.mvel.Node[]</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.TemplateCompiler.TemplateCompiler(org.mvel.TemplateInterpreter)</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.TemplateCompiler.compileExpression()</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.TemplateInterpreter.CACHE_DISABLE</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.TemplateInterpreter.EX_NODE_CACHE</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.TemplateInterpreter.EX_PRECACHE</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.TemplateInterpreter.cloneAll(org.mvel.Node[])</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.TemplateInterpreter.debug</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.TemplateInterpreter.expression</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.TemplateInterpreter.node</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.TemplateInterpreter.nodes</outbound>
                <inbound type="feature" confirmed="yes">org.mvel.TemplateInterpreter.parse(java.lang.CharSequence, java.lang.Object, java.util.Map, org.mvel.TemplateRegistry)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.TemplateInterpreter.TemplateInterpreter(java.lang.String)</name>
                <outbound type="class" confirmed="no">char[]</outbound>
                <outbound type="class" confirmed="no">java.lang.Object</outbound>
                <outbound type="feature" confirmed="no">java.lang.Object.Object()</outbound>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="feature" confirmed="no">java.lang.String.toCharArray()</outbound>
                <outbound type="class" confirmed="no">java.util.Map</outbound>
                <outbound type="feature" confirmed="no">java.util.Map.get(java.lang.Object)</outbound>
                <outbound type="feature" confirmed="no">java.util.Map.put(java.lang.Object, java.lang.Object)</outbound>
                <outbound type="class" confirmed="yes">org.mvel.Node</outbound>
                <outbound type="class" confirmed="no">org.mvel.Node[]</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.TemplateCompiler.TemplateCompiler(org.mvel.TemplateInterpreter)</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.TemplateCompiler.compileExpression()</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.TemplateInterpreter.CACHE_DISABLE</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.TemplateInterpreter.EX_NODE_CACHE</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.TemplateInterpreter.EX_PRECACHE</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.TemplateInterpreter.cloneAll(org.mvel.Node[])</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.TemplateInterpreter.debug</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.TemplateInterpreter.expression</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.TemplateInterpreter.node</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.TemplateInterpreter.nodes</outbound>
                <inbound type="feature" confirmed="yes">org.mvel.TemplateInterpreter.eval(java.lang.String, java.lang.Object)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.TemplateInterpreter.eval(java.lang.String, java.lang.Object, java.util.Map)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.TemplateInterpreter.eval(java.lang.String, java.util.Map)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.TemplateInterpreter.getValuePE(java.lang.String, java.lang.Object, java.util.Map)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.TemplateInterpreter.parse(java.lang.String, java.lang.Object, java.util.Map, org.mvel.TemplateRegistry)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.TemplateInterpreter.cacheAggressively</name>
                <inbound type="feature" confirmed="yes">org.mvel.TemplateInterpreter.execute(java.lang.Object, java.util.Map, org.mvel.TemplateRegistry)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.TemplateInterpreter.isCacheAggressively()</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.TemplateInterpreter.setCacheAggressively(boolean)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.TemplateInterpreter.static {}</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.TemplateInterpreter.cloneAll(org.mvel.Node[])</name>
                <outbound type="class" confirmed="no">java.lang.CloneNotSupportedException</outbound>
                <outbound type="class" confirmed="yes">org.mvel.Node</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.Node.clone()</outbound>
                <inbound type="feature" confirmed="yes">org.mvel.TemplateInterpreter.TemplateInterpreter(java.lang.CharSequence)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.TemplateInterpreter.TemplateInterpreter(java.lang.String)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.TemplateInterpreter.configureFactory()</name>
                <inbound type="feature" confirmed="yes">org.mvel.MVEL.setThreadSafe(boolean)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.TemplateInterpreter.debug</name>
                <inbound type="feature" confirmed="yes">org.mvel.TemplateInterpreter.TemplateInterpreter(char[])</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.TemplateInterpreter.TemplateInterpreter(java.lang.CharSequence)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.TemplateInterpreter.TemplateInterpreter(java.lang.String)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.TemplateInterpreter.isDebug()</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.TemplateInterpreter.setDebug(boolean)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.TemplateInterpreter.eval(java.lang.String, java.lang.Object)</name>
                <outbound type="class" confirmed="no">java.lang.Object</outbound>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="class" confirmed="no">java.util.Map</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.TemplateInterpreter.TemplateInterpreter(java.lang.String)</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.TemplateInterpreter.execute(java.lang.Object, java.util.Map)</outbound>
                <inbound type="feature" confirmed="yes">org.mvel.TemplateInterpreter.evalToString(java.lang.String, java.lang.Object)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.TemplateInterpreter.setValuePE(java.lang.String, java.lang.Object, java.lang.Object, java.lang.Object)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.TemplateInterpreter.eval(java.lang.String, java.lang.Object, java.util.Map)</name>
                <outbound type="class" confirmed="no">java.lang.Object</outbound>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="class" confirmed="no">java.util.Map</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.TemplateInterpreter.TemplateInterpreter(java.lang.String)</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.TemplateInterpreter.execute(java.lang.Object, java.util.Map)</outbound>
                <inbound type="feature" confirmed="yes">org.mvel.TemplateInterpreter.evalToString(java.lang.String, java.lang.Object, java.util.Map)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.TemplateInterpreter.eval(java.lang.String, java.util.Map)</name>
                <outbound type="class" confirmed="no">java.lang.Object</outbound>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="class" confirmed="no">java.util.Map</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.TemplateInterpreter.TemplateInterpreter(java.lang.String)</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.TemplateInterpreter.execute(java.lang.Object, java.util.Map)</outbound>
                <inbound type="feature" confirmed="yes">org.mvel.TemplateInterpreter.evalToString(java.lang.String, java.util.Map)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.TemplateInterpreter.evalToString(java.lang.String, java.lang.Object)</name>
                <outbound type="class" confirmed="no">java.lang.Object</outbound>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="feature" confirmed="no">java.lang.String.valueOf(java.lang.Object)</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.TemplateInterpreter.eval(java.lang.String, java.lang.Object)</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.TemplateInterpreter.evalToString(java.lang.String, java.lang.Object, java.util.Map)</name>
                <outbound type="class" confirmed="no">java.lang.Object</outbound>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="feature" confirmed="no">java.lang.String.valueOf(java.lang.Object)</outbound>
                <outbound type="class" confirmed="no">java.util.Map</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.TemplateInterpreter.eval(java.lang.String, java.lang.Object, java.util.Map)</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.TemplateInterpreter.evalToString(java.lang.String, java.util.Map)</name>
                <outbound type="class" confirmed="no">java.lang.Object</outbound>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="feature" confirmed="no">java.lang.String.valueOf(java.lang.Object)</outbound>
                <outbound type="class" confirmed="no">java.util.Map</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.TemplateInterpreter.eval(java.lang.String, java.util.Map)</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.TemplateInterpreter.execute(java.lang.Object, java.util.Map)</name>
                <outbound type="class" confirmed="no">java.lang.Object</outbound>
                <outbound type="class" confirmed="no">java.util.Map</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.TemplateInterpreter.execute(java.lang.Object, java.util.Map, org.mvel.TemplateRegistry)</outbound>
                <outbound type="class" confirmed="yes">org.mvel.TemplateRegistry</outbound>
                <inbound type="feature" confirmed="yes">org.mvel.TemplateInterpreter.eval(java.lang.String, java.lang.Object)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.TemplateInterpreter.eval(java.lang.String, java.lang.Object, java.util.Map)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.TemplateInterpreter.eval(java.lang.String, java.util.Map)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.TemplateInterpreter.getValuePE(java.lang.String, java.lang.Object, java.util.Map)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.TemplateInterpreter.execute(java.lang.Object, java.util.Map, org.mvel.TemplateRegistry)</name>
                <outbound type="class" confirmed="no">java.io.Serializable</outbound>
                <outbound type="class" confirmed="no">java.lang.Boolean</outbound>
                <outbound type="feature" confirmed="no">java.lang.Boolean.booleanValue()</outbound>
                <outbound type="class" confirmed="no">java.lang.ClassCastException</outbound>
                <outbound type="class" confirmed="no">java.lang.Exception</outbound>
                <outbound type="feature" confirmed="no">java.lang.Exception.getMessage()</outbound>
                <outbound type="feature" confirmed="no">java.lang.Integer.Integer(int)</outbound>
                <outbound type="class" confirmed="no">java.lang.NullPointerException</outbound>
                <outbound type="class" confirmed="no">java.lang.Object</outbound>
                <outbound type="class" confirmed="no">java.lang.Object[]</outbound>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="feature" confirmed="no">java.lang.String.String(char[])</outbound>
                <outbound type="feature" confirmed="no">java.lang.String.String(char[], int, int)</outbound>
                <outbound type="feature" confirmed="no">java.lang.String.valueOf(java.lang.Object)</outbound>
                <outbound type="class" confirmed="no">java.lang.StringBuffer</outbound>
                <outbound type="feature" confirmed="no">java.lang.StringBuffer.StringBuffer(java.lang.String)</outbound>
                <outbound type="feature" confirmed="no">java.lang.StringBuffer.append(int)</outbound>
                <outbound type="feature" confirmed="no">java.lang.StringBuffer.append(java.lang.String)</outbound>
                <outbound type="feature" confirmed="no">java.lang.StringBuffer.toString()</outbound>
                <outbound type="class" confirmed="no">java.lang.Throwable</outbound>
                <outbound type="feature" confirmed="no">java.util.Arrays.asList(java.lang.Object[])</outbound>
                <outbound type="class" confirmed="no">java.util.Collection</outbound>
                <outbound type="feature" confirmed="no">java.util.Collection.iterator()</outbound>
                <outbound type="feature" confirmed="no">java.util.HashMap.HashMap()</outbound>
                <outbound type="feature" confirmed="no">java.util.HashMap.HashMap(int)</outbound>
                <outbound type="class" confirmed="no">java.util.Iterator</outbound>
                <outbound type="feature" confirmed="no">java.util.Iterator.hasNext()</outbound>
                <outbound type="feature" confirmed="no">java.util.Iterator.next()</outbound>
                <outbound type="class" confirmed="no">java.util.List</outbound>
                <outbound type="class" confirmed="no">java.util.Map</outbound>
                <outbound type="feature" confirmed="no">java.util.Map.containsKey(java.lang.Object)</outbound>
                <outbound type="feature" confirmed="no">java.util.Map.get(java.lang.Object)</outbound>
                <outbound type="feature" confirmed="no">java.util.Map.put(java.lang.Object, java.lang.Object)</outbound>
                <outbound type="feature" confirmed="no">java.util.Map.remove(java.lang.Object)</outbound>
                <outbound type="class" confirmed="yes">org.mvel.CompileException</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.CompileException.CompileException(java.lang.String)</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.CompileException.CompileException(java.lang.String, java.lang.Throwable)</outbound>
                <outbound type="class" confirmed="yes">org.mvel.ForeachContext</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.ForeachContext.clone()</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.ForeachContext.getAliases()</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.ForeachContext.getCount()</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.ForeachContext.getItererators()</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.ForeachContext.getNames()</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.ForeachContext.getSeperator()</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.ForeachContext.incrementCount()</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.ForeachContext.setIterators(java.util.Iterator[])</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.MVEL.compileExpression(java.lang.String)</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.MVEL.eval(char[], java.lang.Object, java.util.Map)</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.MVEL.eval(java.lang.String, java.lang.Object, java.util.Map)</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.MVEL.executeExpression(java.lang.Object, java.lang.Object, java.util.Map)</outbound>
                <outbound type="class" confirmed="yes">org.mvel.MVELInterpretedRuntime</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.MVELInterpretedRuntime.MVELInterpretedRuntime(java.lang.Object, java.util.Map)</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.MVELInterpretedRuntime.MVELInterpretedRuntime(java.lang.String, java.lang.Object, java.util.Map)</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.MVELInterpretedRuntime.parse()</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.MVELInterpretedRuntime.setExpressionArray(char[])</outbound>
                <outbound type="class" confirmed="yes">org.mvel.Node</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.Node.getEndNode()</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.Node.getEndPos()</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.Node.getNode()</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.Node.getRegister()</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.Node.getStartPos()</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.Node.getToken()</outbound>
                <outbound type="class" confirmed="yes">org.mvel.TemplateCompiler$IncludeRef</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.TemplateCompiler$IncludeRef.getName()</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.TemplateCompiler$IncludeRef.getParams()</outbound>
                <outbound type="class" confirmed="yes">org.mvel.TemplateCompiler$IncludeRefParam</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.TemplateCompiler$IncludeRefParam.getIdentifier()</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.TemplateCompiler$IncludeRefParam.getValue()</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.TemplateInterpreter.CACHE_DISABLE</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.TemplateInterpreter.EX_PRECOMP_CACHE</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.TemplateInterpreter.cacheAggressively</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.TemplateInterpreter.exitContext()</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.TemplateInterpreter.expression</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.TemplateInterpreter.forwardAndPush()</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.TemplateInterpreter.getForEachSegment(org.mvel.Node)</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.TemplateInterpreter.getInternalSegment(org.mvel.Node)</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.TemplateInterpreter.getSegment(org.mvel.Node)</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.TemplateInterpreter.initStack()</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.TemplateInterpreter.localStack</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.TemplateInterpreter.node</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.TemplateInterpreter.nodes</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.TemplateInterpreter.parse(java.lang.String, java.lang.Object, java.util.Map, org.mvel.TemplateRegistry)</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.TemplateInterpreter.pop()</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.TemplateInterpreter.push()</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.TemplateInterpreter.pushAndForward()</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.TemplateInterpreter.pushNode(int)</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.TemplateInterpreter.stack</outbound>
                <outbound type="class" confirmed="yes">org.mvel.TemplateRegistry</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.TemplateRegistry.getTemplate(java.lang.String)</outbound>
                <outbound type="class" confirmed="yes">org.mvel.util.ExecutionStack</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.util.ExecutionStack.isEmpty()</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.util.ExecutionStack.peek()</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.util.ExecutionStack.pop()</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.util.ExecutionStack.push(java.lang.Object)</outbound>
                <outbound type="class" confirmed="yes">org.mvel.util.StringAppender</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.util.StringAppender.StringAppender(int)</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.util.StringAppender.append(java.lang.Object)</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.util.StringAppender.append(java.lang.String)</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.util.StringAppender.toString()</outbound>
                <inbound type="feature" confirmed="yes">org.mvel.TemplateInterpreter.execute(java.lang.Object, java.util.Map)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.TemplateInterpreter.parse(java.lang.CharSequence, java.lang.Object, java.util.Map, org.mvel.TemplateRegistry)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.TemplateInterpreter.parse(java.lang.String, java.lang.Object, java.util.Map, org.mvel.TemplateRegistry)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.TemplateInterpreter.exitContext()</name>
                <outbound type="class" confirmed="yes">org.mvel.Node</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.Node.getEndNode()</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.TemplateInterpreter.node</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.TemplateInterpreter.nodes</outbound>
                <inbound type="feature" confirmed="yes">org.mvel.TemplateInterpreter.execute(java.lang.Object, java.util.Map, org.mvel.TemplateRegistry)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.TemplateInterpreter.expression</name>
                <inbound type="feature" confirmed="yes">org.mvel.TemplateInterpreter.TemplateInterpreter(char[])</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.TemplateInterpreter.TemplateInterpreter(java.lang.CharSequence)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.TemplateInterpreter.TemplateInterpreter(java.lang.String)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.TemplateInterpreter.execute(java.lang.Object, java.util.Map, org.mvel.TemplateRegistry)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.TemplateInterpreter.getExpression()</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.TemplateInterpreter.getInternalSegment(org.mvel.Node)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.TemplateInterpreter.getSegment(org.mvel.Node)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.TemplateInterpreter.setExpression(char[])</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.TemplateInterpreter.forwardAndPush()</name>
                <outbound type="feature" confirmed="yes">org.mvel.TemplateInterpreter.node</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.TemplateInterpreter.push()</outbound>
                <inbound type="feature" confirmed="yes">org.mvel.TemplateInterpreter.execute(java.lang.Object, java.util.Map, org.mvel.TemplateRegistry)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.TemplateInterpreter.getExpression()</name>
                <outbound type="feature" confirmed="yes">org.mvel.TemplateInterpreter.expression</outbound>
                <inbound type="feature" confirmed="yes">org.mvel.TemplateCompiler.TemplateCompiler(org.mvel.TemplateInterpreter)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.TemplateInterpreter.getForEachSegment(org.mvel.Node)</name>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="feature" confirmed="no">java.lang.String.String(char[])</outbound>
                <outbound type="class" confirmed="yes">org.mvel.Node</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.Node.getAlias()</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.Node.getName()</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.TemplateInterpreter.getInternalSegment(org.mvel.Node)</outbound>
                <inbound type="feature" confirmed="yes">org.mvel.TemplateInterpreter.execute(java.lang.Object, java.util.Map, org.mvel.TemplateRegistry)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.TemplateInterpreter.getInternalSegment(org.mvel.Node)</name>
                <outbound type="class" confirmed="yes">org.mvel.Node</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.Node.getStartPos()</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.TemplateInterpreter.expression</outbound>
                <inbound type="feature" confirmed="yes">org.mvel.TemplateInterpreter.execute(java.lang.Object, java.util.Map, org.mvel.TemplateRegistry)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.TemplateInterpreter.getForEachSegment(org.mvel.Node)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.TemplateInterpreter.getSegment(org.mvel.Node)</name>
                <outbound type="class" confirmed="yes">org.mvel.Node</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.Node.getLength()</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.Node.getStartPos()</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.TemplateInterpreter.expression</outbound>
                <inbound type="feature" confirmed="yes">org.mvel.TemplateInterpreter.execute(java.lang.Object, java.util.Map, org.mvel.TemplateRegistry)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.TemplateInterpreter.getValuePE(java.lang.String, java.lang.Object, java.util.Map)</name>
                <outbound type="class" confirmed="no">java.lang.Object</outbound>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="class" confirmed="no">java.util.Map</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.TemplateInterpreter.TemplateInterpreter(java.lang.String)</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.TemplateInterpreter.execute(java.lang.Object, java.util.Map)</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.TemplateInterpreter.initStack()</name>
                <outbound type="feature" confirmed="yes">org.mvel.TemplateInterpreter.localStack</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.TemplateInterpreter.stack</outbound>
                <outbound type="class" confirmed="yes">org.mvel.util.ExecutionStack</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.util.ExecutionStack.ExecutionStack()</outbound>
                <inbound type="feature" confirmed="yes">org.mvel.TemplateInterpreter.execute(java.lang.Object, java.util.Map, org.mvel.TemplateRegistry)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.TemplateInterpreter.isCacheAggressively()</name>
                <outbound type="feature" confirmed="yes">org.mvel.TemplateInterpreter.cacheAggressively</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.TemplateInterpreter.isDebug()</name>
                <outbound type="feature" confirmed="yes">org.mvel.TemplateInterpreter.debug</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.TemplateInterpreter.localStack</name>
                <outbound type="class" confirmed="yes">org.mvel.util.ExecutionStack</outbound>
                <inbound type="feature" confirmed="yes">org.mvel.TemplateInterpreter.execute(java.lang.Object, java.util.Map, org.mvel.TemplateRegistry)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.TemplateInterpreter.initStack()</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.TemplateInterpreter.node</name>
                <inbound type="feature" confirmed="yes">org.mvel.TemplateInterpreter.TemplateInterpreter(char[])</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.TemplateInterpreter.TemplateInterpreter(java.lang.CharSequence)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.TemplateInterpreter.TemplateInterpreter(java.lang.String)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.TemplateInterpreter.execute(java.lang.Object, java.util.Map, org.mvel.TemplateRegistry)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.TemplateInterpreter.exitContext()</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.TemplateInterpreter.forwardAndPush()</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.TemplateInterpreter.push()</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.TemplateInterpreter.pushAndForward()</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.TemplateInterpreter.nodes</name>
                <outbound type="class" confirmed="yes">org.mvel.Node</outbound>
                <inbound type="feature" confirmed="yes">org.mvel.TemplateInterpreter.TemplateInterpreter(java.lang.CharSequence)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.TemplateInterpreter.TemplateInterpreter(java.lang.String)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.TemplateInterpreter.execute(java.lang.Object, java.util.Map, org.mvel.TemplateRegistry)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.TemplateInterpreter.exitContext()</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.TemplateInterpreter.push()</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.TemplateInterpreter.pushNode(int)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.TemplateInterpreter.parse(java.io.File, java.lang.Object, java.util.Map)</name>
                <outbound type="class" confirmed="no">java.io.File</outbound>
                <outbound type="class" confirmed="no">java.io.IOException</outbound>
                <outbound type="class" confirmed="no">java.lang.Object</outbound>
                <outbound type="class" confirmed="no">java.util.Map</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.TemplateInterpreter.parse(java.io.File, java.lang.Object, java.util.Map, org.mvel.TemplateRegistry)</outbound>
                <outbound type="class" confirmed="yes">org.mvel.TemplateRegistry</outbound>
                <inbound type="feature" confirmed="yes">org.mvel.TemplateInterpreter.parseToStream(java.io.File, java.lang.Object, java.util.Map, java.io.OutputStream)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.TemplateInterpreter.parse(java.io.File, java.lang.Object, java.util.Map, org.mvel.TemplateRegistry)</name>
                <outbound type="class" confirmed="no">java.io.File</outbound>
                <outbound type="feature" confirmed="no">java.io.File.exists()</outbound>
                <outbound type="feature" confirmed="no">java.io.File.getName()</outbound>
                <outbound type="feature" confirmed="no">java.io.File.length()</outbound>
                <outbound type="feature" confirmed="no">java.io.FileInputStream.FileInputStream(java.io.File)</outbound>
                <outbound type="feature" confirmed="no">java.io.FileInputStream.close()</outbound>
                <outbound type="feature" confirmed="no">java.io.FileInputStream.getChannel()</outbound>
                <outbound type="class" confirmed="no">java.io.FileNotFoundException</outbound>
                <outbound type="class" confirmed="no">java.io.IOException</outbound>
                <outbound type="class" confirmed="no">java.lang.CharSequence</outbound>
                <outbound type="class" confirmed="no">java.lang.Object</outbound>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="class" confirmed="no">java.lang.StringBuffer</outbound>
                <outbound type="feature" confirmed="no">java.lang.StringBuffer.StringBuffer(java.lang.String)</outbound>
                <outbound type="feature" confirmed="no">java.lang.StringBuffer.append(java.lang.String)</outbound>
                <outbound type="feature" confirmed="no">java.lang.StringBuffer.toString()</outbound>
                <outbound type="class" confirmed="no">java.nio.Buffer</outbound>
                <outbound type="class" confirmed="no">java.nio.ByteBuffer</outbound>
                <outbound type="feature" confirmed="no">java.nio.ByteBuffer.allocateDirect(int)</outbound>
                <outbound type="feature" confirmed="no">java.nio.ByteBuffer.get()</outbound>
                <outbound type="feature" confirmed="no">java.nio.ByteBuffer.rewind()</outbound>
                <outbound type="class" confirmed="no">java.nio.channels.FileChannel</outbound>
                <outbound type="feature" confirmed="no">java.nio.channels.ReadableByteChannel.close()</outbound>
                <outbound type="feature" confirmed="no">java.nio.channels.ReadableByteChannel.read(java.nio.ByteBuffer)</outbound>
                <outbound type="class" confirmed="no">java.util.Map</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.CompileException.CompileException(java.lang.String)</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.TemplateInterpreter.parse(java.lang.CharSequence, java.lang.Object, java.util.Map, org.mvel.TemplateRegistry)</outbound>
                <outbound type="class" confirmed="yes">org.mvel.TemplateRegistry</outbound>
                <outbound type="class" confirmed="yes">org.mvel.util.StringAppender</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.util.StringAppender.StringAppender(int)</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.util.StringAppender.append(char)</outbound>
                <inbound type="feature" confirmed="yes">org.mvel.TemplateInterpreter.parse(java.io.File, java.lang.Object, java.util.Map)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.TemplateInterpreter.parse(java.lang.CharSequence, java.lang.Object, java.util.Map)</name>
                <outbound type="class" confirmed="no">java.lang.CharSequence</outbound>
                <outbound type="class" confirmed="no">java.lang.Object</outbound>
                <outbound type="class" confirmed="no">java.util.Map</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.TemplateInterpreter.parse(java.lang.CharSequence, java.lang.Object, java.util.Map, org.mvel.TemplateRegistry)</outbound>
                <outbound type="class" confirmed="yes">org.mvel.TemplateRegistry</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.TemplateInterpreter.parse(java.lang.CharSequence, java.lang.Object, java.util.Map, org.mvel.TemplateRegistry)</name>
                <outbound type="class" confirmed="no">java.lang.CharSequence</outbound>
                <outbound type="class" confirmed="no">java.lang.Object</outbound>
                <outbound type="class" confirmed="no">java.util.Map</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.TemplateInterpreter.TemplateInterpreter(java.lang.CharSequence)</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.TemplateInterpreter.execute(java.lang.Object, java.util.Map, org.mvel.TemplateRegistry)</outbound>
                <outbound type="class" confirmed="yes">org.mvel.TemplateRegistry</outbound>
                <inbound type="feature" confirmed="yes">org.mvel.TemplateInterpreter.parse(java.io.File, java.lang.Object, java.util.Map, org.mvel.TemplateRegistry)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.TemplateInterpreter.parse(java.lang.CharSequence, java.lang.Object, java.util.Map)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.TemplateInterpreter.parse(java.lang.String, java.lang.Object, java.util.Map)</name>
                <outbound type="class" confirmed="no">java.lang.Object</outbound>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="class" confirmed="no">java.util.Map</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.TemplateInterpreter.parse(java.lang.String, java.lang.Object, java.util.Map, org.mvel.TemplateRegistry)</outbound>
                <outbound type="class" confirmed="yes">org.mvel.TemplateRegistry</outbound>
                <inbound type="feature" confirmed="yes">org.mvel.MVELSH.main(java.lang.String[])</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.TemplateInterpreter.parse(java.lang.String, java.lang.Object, java.util.Map, org.mvel.TemplateRegistry)</name>
                <outbound type="class" confirmed="no">java.lang.Object</outbound>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="class" confirmed="no">java.util.Map</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.TemplateInterpreter.TemplateInterpreter(java.lang.String)</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.TemplateInterpreter.execute(java.lang.Object, java.util.Map, org.mvel.TemplateRegistry)</outbound>
                <outbound type="class" confirmed="yes">org.mvel.TemplateRegistry</outbound>
                <inbound type="feature" confirmed="yes">org.mvel.TemplateInterpreter.execute(java.lang.Object, java.util.Map, org.mvel.TemplateRegistry)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.TemplateInterpreter.parse(java.lang.String, java.lang.Object, java.util.Map)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.TemplateInterpreter.parseToStream(java.io.File, java.lang.Object, java.util.Map, java.io.OutputStream)</name>
                <outbound type="class" confirmed="no">java.io.File</outbound>
                <outbound type="class" confirmed="no">java.io.IOException</outbound>
                <outbound type="class" confirmed="no">java.io.OutputStream</outbound>
                <outbound type="feature" confirmed="no">java.io.OutputStreamWriter.OutputStreamWriter(java.io.OutputStream)</outbound>
                <outbound type="feature" confirmed="no">java.io.OutputStreamWriter.close()</outbound>
                <outbound type="feature" confirmed="no">java.io.OutputStreamWriter.flush()</outbound>
                <outbound type="feature" confirmed="no">java.io.OutputStreamWriter.write(int)</outbound>
                <outbound type="class" confirmed="no">java.lang.CharSequence</outbound>
                <outbound type="feature" confirmed="no">java.lang.CharSequence.charAt(int)</outbound>
                <outbound type="feature" confirmed="no">java.lang.CharSequence.length()</outbound>
                <outbound type="class" confirmed="no">java.lang.Object</outbound>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="feature" confirmed="no">java.lang.String.valueOf(java.lang.Object)</outbound>
                <outbound type="class" confirmed="no">java.util.Map</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.TemplateInterpreter.parse(java.io.File, java.lang.Object, java.util.Map)</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.TemplateInterpreter.pop()</name>
                <outbound type="class" confirmed="no">java.lang.Object</outbound>
                <outbound type="class" confirmed="yes">org.mvel.Node</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.TemplateInterpreter.stack</outbound>
                <outbound type="class" confirmed="yes">org.mvel.util.ExecutionStack</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.util.ExecutionStack.pop()</outbound>
                <inbound type="feature" confirmed="yes">org.mvel.TemplateInterpreter.execute(java.lang.Object, java.util.Map, org.mvel.TemplateRegistry)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.TemplateInterpreter.push()</name>
                <outbound type="class" confirmed="yes">org.mvel.Node</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.TemplateInterpreter.node</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.TemplateInterpreter.nodes</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.TemplateInterpreter.push(org.mvel.Node)</outbound>
                <inbound type="feature" confirmed="yes">org.mvel.TemplateInterpreter.execute(java.lang.Object, java.util.Map, org.mvel.TemplateRegistry)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.TemplateInterpreter.forwardAndPush()</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.TemplateInterpreter.pushAndForward()</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.TemplateInterpreter.push(org.mvel.Node)</name>
                <outbound type="class" confirmed="no">java.lang.Object</outbound>
                <outbound type="class" confirmed="yes">org.mvel.Node</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.TemplateInterpreter.stack</outbound>
                <outbound type="class" confirmed="yes">org.mvel.util.ExecutionStack</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.util.ExecutionStack.push(java.lang.Object)</outbound>
                <inbound type="feature" confirmed="yes">org.mvel.TemplateInterpreter.push()</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.TemplateInterpreter.pushAndForward()</name>
                <outbound type="feature" confirmed="yes">org.mvel.TemplateInterpreter.node</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.TemplateInterpreter.push()</outbound>
                <inbound type="feature" confirmed="yes">org.mvel.TemplateInterpreter.execute(java.lang.Object, java.util.Map, org.mvel.TemplateRegistry)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.TemplateInterpreter.pushNode(int)</name>
                <outbound type="class" confirmed="no">java.lang.Object</outbound>
                <outbound type="class" confirmed="yes">org.mvel.Node</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.TemplateInterpreter.nodes</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.TemplateInterpreter.stack</outbound>
                <outbound type="class" confirmed="yes">org.mvel.util.ExecutionStack</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.util.ExecutionStack.push(java.lang.Object)</outbound>
                <inbound type="feature" confirmed="yes">org.mvel.TemplateInterpreter.execute(java.lang.Object, java.util.Map, org.mvel.TemplateRegistry)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.TemplateInterpreter.setCacheAggressively(boolean)</name>
                <outbound type="feature" confirmed="yes">org.mvel.TemplateInterpreter.cacheAggressively</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.TemplateInterpreter.setDebug(boolean)</name>
                <outbound type="feature" confirmed="yes">org.mvel.TemplateInterpreter.debug</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.TemplateInterpreter.setDisableCache(boolean)</name>
                <outbound type="feature" confirmed="yes">org.mvel.TemplateInterpreter.CACHE_DISABLE</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.TemplateInterpreter.setExpression(char[])</name>
                <outbound type="feature" confirmed="yes">org.mvel.TemplateInterpreter.expression</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.TemplateInterpreter.setValuePE(java.lang.String, java.lang.Object, java.lang.Object, java.lang.Object)</name>
                <outbound type="class" confirmed="no">java.lang.Object</outbound>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="feature" confirmed="no">java.lang.String.valueOf(java.lang.Object)</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.PropertyAccessor.set(java.lang.Object, java.lang.String, java.lang.Object)</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.TemplateInterpreter.eval(java.lang.String, java.lang.Object)</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.TemplateInterpreter.stack</name>
                <outbound type="class" confirmed="yes">org.mvel.util.ExecutionStack</outbound>
                <inbound type="feature" confirmed="yes">org.mvel.TemplateInterpreter.execute(java.lang.Object, java.util.Map, org.mvel.TemplateRegistry)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.TemplateInterpreter.initStack()</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.TemplateInterpreter.pop()</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.TemplateInterpreter.push(org.mvel.Node)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.TemplateInterpreter.pushNode(int)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.TemplateInterpreter.static {}</name>
                <outbound type="feature" confirmed="no">java.util.Collections.synchronizedMap(java.util.Map)</outbound>
                <outbound type="feature" confirmed="no">java.util.HashMap.HashMap()</outbound>
                <outbound type="class" confirmed="no">java.util.Map</outbound>
                <outbound type="feature" confirmed="no">java.util.WeakHashMap.WeakHashMap()</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.MVEL.NO_JIT</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.MVEL.THREAD_SAFE</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.MVEL.WEAK_CACHE</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.TemplateInterpreter.CACHE_DISABLE</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.TemplateInterpreter.EX_NODE_CACHE</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.TemplateInterpreter.EX_PRECACHE</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.TemplateInterpreter.EX_PRECOMP_CACHE</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.TemplateInterpreter.cacheAggressively</outbound>
            </feature>
        </class>
        <class confirmed="yes">
            <name>org.mvel.TemplateRegistry</name>
            <outbound type="class" confirmed="no">java.lang.Object</outbound>
            <inbound type="class" confirmed="yes">org.mvel.MVELTemplateRegistry</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.TemplateInterpreter.execute(java.lang.Object, java.util.Map)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.TemplateInterpreter.execute(java.lang.Object, java.util.Map, org.mvel.TemplateRegistry)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.TemplateInterpreter.parse(java.io.File, java.lang.Object, java.util.Map)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.TemplateInterpreter.parse(java.io.File, java.lang.Object, java.util.Map, org.mvel.TemplateRegistry)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.TemplateInterpreter.parse(java.lang.CharSequence, java.lang.Object, java.util.Map)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.TemplateInterpreter.parse(java.lang.CharSequence, java.lang.Object, java.util.Map, org.mvel.TemplateRegistry)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.TemplateInterpreter.parse(java.lang.String, java.lang.Object, java.util.Map)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.TemplateInterpreter.parse(java.lang.String, java.lang.Object, java.util.Map, org.mvel.TemplateRegistry)</inbound>
            <feature confirmed="yes">
                <name>org.mvel.TemplateRegistry.getTemplate(java.lang.String)</name>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <inbound type="feature" confirmed="yes">org.mvel.TemplateInterpreter.execute(java.lang.Object, java.util.Map, org.mvel.TemplateRegistry)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.TemplateRegistry.isEmpty()</name>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.TemplateRegistry.iterateTemplates()</name>
                <outbound type="class" confirmed="no">java.util.Iterator</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.TemplateRegistry.registerTemplate(java.io.Reader)</name>
                <outbound type="class" confirmed="no">java.io.Reader</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.TemplateRegistry.registerTemplate(java.lang.String, java.lang.String)</name>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
            </feature>
        </class>
        <class confirmed="yes">
            <name>org.mvel.Unit</name>
            <outbound type="class" confirmed="no">java.lang.Object</outbound>
            <outbound type="class" confirmed="yes">org.mvel.ConversionHandler</outbound>
            <inbound type="feature" confirmed="yes">org.mvel.conversion.UnitConversion.canConvertFrom(java.lang.Class)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.conversion.UnitConversion.convertFrom(java.lang.Object)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.math.IEEEFloatingPointMath.doOperationsSameType(int, java.lang.Object, int, java.lang.Object)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.math.IEEEFloatingPointMath.getBigDecimalFromType(java.lang.Object, int)</inbound>
            <feature confirmed="no">
                <name>org.mvel.Unit.canConvertFrom(java.lang.Class)</name>
                <inbound type="feature" confirmed="yes">org.mvel.conversion.UnitConversion.canConvertFrom(java.lang.Class)</inbound>
            </feature>
            <feature confirmed="no">
                <name>org.mvel.Unit.convertFrom(java.lang.Object)</name>
                <inbound type="feature" confirmed="yes">org.mvel.conversion.UnitConversion.convertFrom(java.lang.Object)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.math.IEEEFloatingPointMath.doOperationsSameType(int, java.lang.Object, int, java.lang.Object)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.Unit.getValue()</name>
                <inbound type="feature" confirmed="yes">org.mvel.math.IEEEFloatingPointMath.doOperationsSameType(int, java.lang.Object, int, java.lang.Object)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.math.IEEEFloatingPointMath.getBigDecimalFromType(java.lang.Object, int)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.Unit.setValue(double)</name>
            </feature>
        </class>
        <class confirmed="yes">
            <name>org.mvel.UnresolveablePropertyException</name>
            <outbound type="class" confirmed="no">java.lang.RuntimeException</outbound>
            <feature confirmed="yes">
                <name>org.mvel.UnresolveablePropertyException.UnresolveablePropertyException(org.mvel.ASTNode)</name>
                <outbound type="feature" confirmed="no">java.lang.RuntimeException.RuntimeException(java.lang.String)</outbound>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="class" confirmed="no">java.lang.StringBuffer</outbound>
                <outbound type="feature" confirmed="no">java.lang.StringBuffer.StringBuffer(java.lang.String)</outbound>
                <outbound type="feature" confirmed="no">java.lang.StringBuffer.append(java.lang.String)</outbound>
                <outbound type="feature" confirmed="no">java.lang.StringBuffer.toString()</outbound>
                <outbound type="class" confirmed="yes">org.mvel.ASTNode</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.ASTNode.getName()</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.UnresolveablePropertyException.astNode</outbound>
                <inbound type="feature" confirmed="yes">org.mvel.ASTNode.getReducedValue(java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.ast.PropertyASTNode.initializePropertyNode(java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.UnresolveablePropertyException.UnresolveablePropertyException(org.mvel.ASTNode, java.lang.Throwable)</name>
                <outbound type="feature" confirmed="no">java.lang.RuntimeException.RuntimeException(java.lang.String, java.lang.Throwable)</outbound>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="class" confirmed="no">java.lang.StringBuffer</outbound>
                <outbound type="feature" confirmed="no">java.lang.StringBuffer.StringBuffer(java.lang.String)</outbound>
                <outbound type="feature" confirmed="no">java.lang.StringBuffer.append(java.lang.String)</outbound>
                <outbound type="feature" confirmed="no">java.lang.StringBuffer.toString()</outbound>
                <outbound type="class" confirmed="no">java.lang.Throwable</outbound>
                <outbound type="class" confirmed="yes">org.mvel.ASTNode</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.ASTNode.getName()</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.UnresolveablePropertyException.astNode</outbound>
                <inbound type="feature" confirmed="yes">org.mvel.ASTNode.getReducedValue(java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.ast.PropertyASTNode.initializePropertyNode(java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.UnresolveablePropertyException.astNode</name>
                <outbound type="class" confirmed="yes">org.mvel.ASTNode</outbound>
                <inbound type="feature" confirmed="yes">org.mvel.UnresolveablePropertyException.UnresolveablePropertyException(org.mvel.ASTNode)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.UnresolveablePropertyException.UnresolveablePropertyException(org.mvel.ASTNode, java.lang.Throwable)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.UnresolveablePropertyException.getToken()</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.UnresolveablePropertyException.getToken()</name>
                <outbound type="class" confirmed="yes">org.mvel.ASTNode</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.UnresolveablePropertyException.astNode</outbound>
            </feature>
        </class>
    </package>
    <package confirmed="yes">
        <name>org.mvel.asm</name>
        <class confirmed="yes">
            <name>org.mvel.asm.AnnotationVisitor</name>
            <outbound type="class" confirmed="no">java.lang.Object</outbound>
            <inbound type="class" confirmed="yes">org.mvel.asm.AnnotationWriter</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.asm.AnnotationWriter.visitAnnotation(java.lang.String, java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.asm.AnnotationWriter.visitArray(java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.asm.ClassAdapter.visitAnnotation(java.lang.String, boolean)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.asm.ClassReader.accept(org.mvel.asm.ClassVisitor, org.mvel.asm.Attribute[], int)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.asm.ClassReader.readAnnotationValue(int, char[], java.lang.String, org.mvel.asm.AnnotationVisitor)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.asm.ClassReader.readAnnotationValues(int, char[], boolean, org.mvel.asm.AnnotationVisitor)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.asm.ClassReader.readParameterAnnotations(int, char[], boolean, org.mvel.asm.MethodVisitor)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.asm.ClassVisitor.visitAnnotation(java.lang.String, boolean)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.asm.ClassWriter.visitAnnotation(java.lang.String, boolean)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.asm.FieldVisitor.visitAnnotation(java.lang.String, boolean)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.asm.FieldWriter.visitAnnotation(java.lang.String, boolean)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.asm.MethodAdapter.visitAnnotation(java.lang.String, boolean)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.asm.MethodAdapter.visitAnnotationDefault()</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.asm.MethodAdapter.visitParameterAnnotation(int, java.lang.String, boolean)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.asm.MethodVisitor.visitAnnotation(java.lang.String, boolean)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.asm.MethodVisitor.visitAnnotationDefault()</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.asm.MethodVisitor.visitParameterAnnotation(int, java.lang.String, boolean)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.asm.MethodWriter.visitAnnotation(java.lang.String, boolean)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.asm.MethodWriter.visitAnnotationDefault()</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.asm.MethodWriter.visitParameterAnnotation(int, java.lang.String, boolean)</inbound>
            <feature confirmed="yes">
                <name>org.mvel.asm.AnnotationVisitor.visit(java.lang.String, java.lang.Object)</name>
                <outbound type="class" confirmed="no">java.lang.Object</outbound>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <inbound type="feature" confirmed="yes">org.mvel.asm.ClassReader.readAnnotationValue(int, char[], java.lang.String, org.mvel.asm.AnnotationVisitor)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.asm.AnnotationVisitor.visitAnnotation(java.lang.String, java.lang.String)</name>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <inbound type="feature" confirmed="yes">org.mvel.asm.ClassReader.readAnnotationValue(int, char[], java.lang.String, org.mvel.asm.AnnotationVisitor)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.asm.AnnotationVisitor.visitArray(java.lang.String)</name>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <inbound type="feature" confirmed="yes">org.mvel.asm.ClassReader.readAnnotationValue(int, char[], java.lang.String, org.mvel.asm.AnnotationVisitor)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.asm.AnnotationVisitor.visitEnd()</name>
                <inbound type="feature" confirmed="yes">org.mvel.asm.ClassReader.accept(org.mvel.asm.ClassVisitor, org.mvel.asm.Attribute[], int)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.asm.ClassReader.readAnnotationValues(int, char[], boolean, org.mvel.asm.AnnotationVisitor)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.asm.AnnotationVisitor.visitEnum(java.lang.String, java.lang.String, java.lang.String)</name>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <inbound type="feature" confirmed="yes">org.mvel.asm.ClassReader.readAnnotationValue(int, char[], java.lang.String, org.mvel.asm.AnnotationVisitor)</inbound>
            </feature>
        </class>
        <class confirmed="yes">
            <name>org.mvel.asm.AnnotationWriter</name>
            <outbound type="class" confirmed="no">java.lang.Object</outbound>
            <outbound type="class" confirmed="yes">org.mvel.asm.AnnotationVisitor</outbound>
            <inbound type="feature" confirmed="yes">org.mvel.asm.ClassWriter.anns</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.asm.ClassWriter.ianns</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.asm.ClassWriter.toByteArray()</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.asm.ClassWriter.visitAnnotation(java.lang.String, boolean)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.asm.FieldWriter.anns</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.asm.FieldWriter.getSize()</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.asm.FieldWriter.ianns</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.asm.FieldWriter.put(org.mvel.asm.ByteVector)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.asm.FieldWriter.visitAnnotation(java.lang.String, boolean)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.asm.MethodWriter.anns</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.asm.MethodWriter.getSize()</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.asm.MethodWriter.ianns</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.asm.MethodWriter.ipanns</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.asm.MethodWriter.panns</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.asm.MethodWriter.put(org.mvel.asm.ByteVector)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.asm.MethodWriter.visitAnnotation(java.lang.String, boolean)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.asm.MethodWriter.visitParameterAnnotation(int, java.lang.String, boolean)</inbound>
            <feature confirmed="yes">
                <name>org.mvel.asm.AnnotationWriter.AnnotationWriter(org.mvel.asm.ClassWriter, boolean, org.mvel.asm.ByteVector, org.mvel.asm.ByteVector, int)</name>
                <outbound type="feature" confirmed="no">java.lang.Object.Object()</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.asm.AnnotationWriter.bv</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.asm.AnnotationWriter.cw</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.asm.AnnotationWriter.named</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.asm.AnnotationWriter.offset</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.asm.AnnotationWriter.parent</outbound>
                <outbound type="class" confirmed="yes">org.mvel.asm.ByteVector</outbound>
                <outbound type="class" confirmed="yes">org.mvel.asm.ClassWriter</outbound>
                <inbound type="feature" confirmed="yes">org.mvel.asm.AnnotationWriter.visitAnnotation(java.lang.String, java.lang.String)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.asm.AnnotationWriter.visitArray(java.lang.String)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.asm.ClassWriter.visitAnnotation(java.lang.String, boolean)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.asm.FieldWriter.visitAnnotation(java.lang.String, boolean)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.asm.MethodWriter.visitAnnotation(java.lang.String, boolean)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.asm.MethodWriter.visitAnnotationDefault()</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.asm.MethodWriter.visitParameterAnnotation(int, java.lang.String, boolean)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.asm.AnnotationWriter.bv</name>
                <outbound type="class" confirmed="yes">org.mvel.asm.ByteVector</outbound>
                <inbound type="feature" confirmed="yes">org.mvel.asm.AnnotationWriter.AnnotationWriter(org.mvel.asm.ClassWriter, boolean, org.mvel.asm.ByteVector, org.mvel.asm.ByteVector, int)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.asm.AnnotationWriter.getSize()</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.asm.AnnotationWriter.put(org.mvel.asm.AnnotationWriter[], org.mvel.asm.ByteVector)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.asm.AnnotationWriter.put(org.mvel.asm.ByteVector)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.asm.AnnotationWriter.visit(java.lang.String, java.lang.Object)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.asm.AnnotationWriter.visitAnnotation(java.lang.String, java.lang.String)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.asm.AnnotationWriter.visitArray(java.lang.String)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.asm.AnnotationWriter.visitEnum(java.lang.String, java.lang.String, java.lang.String)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.asm.AnnotationWriter.cw</name>
                <outbound type="class" confirmed="yes">org.mvel.asm.ClassWriter</outbound>
                <inbound type="feature" confirmed="yes">org.mvel.asm.AnnotationWriter.AnnotationWriter(org.mvel.asm.ClassWriter, boolean, org.mvel.asm.ByteVector, org.mvel.asm.ByteVector, int)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.asm.AnnotationWriter.visit(java.lang.String, java.lang.Object)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.asm.AnnotationWriter.visitAnnotation(java.lang.String, java.lang.String)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.asm.AnnotationWriter.visitArray(java.lang.String)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.asm.AnnotationWriter.visitEnum(java.lang.String, java.lang.String, java.lang.String)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.asm.AnnotationWriter.getSize()</name>
                <outbound type="feature" confirmed="yes">org.mvel.asm.AnnotationWriter.bv</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.asm.AnnotationWriter.next</outbound>
                <outbound type="class" confirmed="yes">org.mvel.asm.ByteVector</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.asm.ByteVector.length</outbound>
                <inbound type="feature" confirmed="yes">org.mvel.asm.AnnotationWriter.put(org.mvel.asm.AnnotationWriter[], org.mvel.asm.ByteVector)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.asm.ClassWriter.toByteArray()</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.asm.FieldWriter.getSize()</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.asm.MethodWriter.getSize()</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.asm.AnnotationWriter.named</name>
                <inbound type="feature" confirmed="yes">org.mvel.asm.AnnotationWriter.AnnotationWriter(org.mvel.asm.ClassWriter, boolean, org.mvel.asm.ByteVector, org.mvel.asm.ByteVector, int)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.asm.AnnotationWriter.visit(java.lang.String, java.lang.Object)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.asm.AnnotationWriter.visitAnnotation(java.lang.String, java.lang.String)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.asm.AnnotationWriter.visitArray(java.lang.String)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.asm.AnnotationWriter.visitEnum(java.lang.String, java.lang.String, java.lang.String)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.asm.AnnotationWriter.next</name>
                <inbound type="feature" confirmed="yes">org.mvel.asm.AnnotationWriter.getSize()</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.asm.AnnotationWriter.put(org.mvel.asm.AnnotationWriter[], org.mvel.asm.ByteVector)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.asm.AnnotationWriter.put(org.mvel.asm.ByteVector)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.asm.ClassWriter.visitAnnotation(java.lang.String, boolean)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.asm.FieldWriter.visitAnnotation(java.lang.String, boolean)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.asm.MethodWriter.visitAnnotation(java.lang.String, boolean)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.asm.MethodWriter.visitParameterAnnotation(int, java.lang.String, boolean)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.asm.AnnotationWriter.offset</name>
                <inbound type="feature" confirmed="yes">org.mvel.asm.AnnotationWriter.AnnotationWriter(org.mvel.asm.ClassWriter, boolean, org.mvel.asm.ByteVector, org.mvel.asm.ByteVector, int)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.asm.AnnotationWriter.visitEnd()</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.asm.AnnotationWriter.parent</name>
                <outbound type="class" confirmed="yes">org.mvel.asm.ByteVector</outbound>
                <inbound type="feature" confirmed="yes">org.mvel.asm.AnnotationWriter.AnnotationWriter(org.mvel.asm.ClassWriter, boolean, org.mvel.asm.ByteVector, org.mvel.asm.ByteVector, int)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.asm.AnnotationWriter.visitEnd()</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.asm.AnnotationWriter.prev</name>
                <inbound type="feature" confirmed="yes">org.mvel.asm.AnnotationWriter.put(org.mvel.asm.AnnotationWriter[], org.mvel.asm.ByteVector)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.asm.AnnotationWriter.put(org.mvel.asm.ByteVector)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.asm.AnnotationWriter.put(org.mvel.asm.AnnotationWriter[], org.mvel.asm.ByteVector)</name>
                <outbound type="feature" confirmed="yes">org.mvel.asm.AnnotationWriter.bv</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.asm.AnnotationWriter.getSize()</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.asm.AnnotationWriter.next</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.asm.AnnotationWriter.prev</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.asm.AnnotationWriter.visitEnd()</outbound>
                <outbound type="class" confirmed="yes">org.mvel.asm.ByteVector</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.asm.ByteVector.data</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.asm.ByteVector.length</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.asm.ByteVector.putByte(int)</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.asm.ByteVector.putByteArray(byte[], int, int)</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.asm.ByteVector.putInt(int)</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.asm.ByteVector.putShort(int)</outbound>
                <inbound type="feature" confirmed="yes">org.mvel.asm.MethodWriter.put(org.mvel.asm.ByteVector)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.asm.AnnotationWriter.put(org.mvel.asm.ByteVector)</name>
                <outbound type="feature" confirmed="yes">org.mvel.asm.AnnotationWriter.bv</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.asm.AnnotationWriter.next</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.asm.AnnotationWriter.prev</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.asm.AnnotationWriter.visitEnd()</outbound>
                <outbound type="class" confirmed="yes">org.mvel.asm.ByteVector</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.asm.ByteVector.data</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.asm.ByteVector.length</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.asm.ByteVector.putByteArray(byte[], int, int)</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.asm.ByteVector.putInt(int)</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.asm.ByteVector.putShort(int)</outbound>
                <inbound type="feature" confirmed="yes">org.mvel.asm.ClassWriter.toByteArray()</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.asm.FieldWriter.put(org.mvel.asm.ByteVector)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.asm.MethodWriter.put(org.mvel.asm.ByteVector)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.asm.AnnotationWriter.size</name>
                <inbound type="feature" confirmed="yes">org.mvel.asm.AnnotationWriter.visit(java.lang.String, java.lang.Object)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.asm.AnnotationWriter.visitAnnotation(java.lang.String, java.lang.String)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.asm.AnnotationWriter.visitArray(java.lang.String)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.asm.AnnotationWriter.visitEnd()</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.asm.AnnotationWriter.visitEnum(java.lang.String, java.lang.String, java.lang.String)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.asm.AnnotationWriter.visit(java.lang.String, java.lang.Object)</name>
                <outbound type="class" confirmed="no">boolean[]</outbound>
                <outbound type="class" confirmed="no">byte[]</outbound>
                <outbound type="class" confirmed="no">char[]</outbound>
                <outbound type="class" confirmed="no">double[]</outbound>
                <outbound type="class" confirmed="no">float[]</outbound>
                <outbound type="class" confirmed="no">int[]</outbound>
                <outbound type="class" confirmed="no">java.lang.Boolean</outbound>
                <outbound type="feature" confirmed="no">java.lang.Boolean.booleanValue()</outbound>
                <outbound type="class" confirmed="no">java.lang.Byte</outbound>
                <outbound type="feature" confirmed="no">java.lang.Byte.byteValue()</outbound>
                <outbound type="class" confirmed="no">java.lang.Character</outbound>
                <outbound type="feature" confirmed="no">java.lang.Character.charValue()</outbound>
                <outbound type="class" confirmed="no">java.lang.Object</outbound>
                <outbound type="class" confirmed="no">java.lang.Short</outbound>
                <outbound type="feature" confirmed="no">java.lang.Short.shortValue()</outbound>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="feature" confirmed="no">java.lang.String.charAt(int)</outbound>
                <outbound type="class" confirmed="no">long[]</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.asm.AnnotationWriter.bv</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.asm.AnnotationWriter.cw</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.asm.AnnotationWriter.named</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.asm.AnnotationWriter.size</outbound>
                <outbound type="class" confirmed="yes">org.mvel.asm.ByteVector</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.asm.ByteVector.put12(int, int)</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.asm.ByteVector.putShort(int)</outbound>
                <outbound type="class" confirmed="yes">org.mvel.asm.ClassWriter</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.asm.ClassWriter.newConstItem(java.lang.Object)</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.asm.ClassWriter.newDouble(double)</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.asm.ClassWriter.newFloat(float)</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.asm.ClassWriter.newInteger(int)</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.asm.ClassWriter.newLong(long)</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.asm.ClassWriter.newUTF8(java.lang.String)</outbound>
                <outbound type="class" confirmed="yes">org.mvel.asm.Item</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.asm.Item.index</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.asm.Item.type</outbound>
                <outbound type="class" confirmed="yes">org.mvel.asm.Type</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.asm.Type.getDescriptor()</outbound>
                <outbound type="class" confirmed="no">short[]</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.asm.AnnotationWriter.visitAnnotation(java.lang.String, java.lang.String)</name>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="class" confirmed="yes">org.mvel.asm.AnnotationVisitor</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.asm.AnnotationWriter.AnnotationWriter(org.mvel.asm.ClassWriter, boolean, org.mvel.asm.ByteVector, org.mvel.asm.ByteVector, int)</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.asm.AnnotationWriter.bv</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.asm.AnnotationWriter.cw</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.asm.AnnotationWriter.named</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.asm.AnnotationWriter.size</outbound>
                <outbound type="class" confirmed="yes">org.mvel.asm.ByteVector</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.asm.ByteVector.length</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.asm.ByteVector.put12(int, int)</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.asm.ByteVector.putShort(int)</outbound>
                <outbound type="class" confirmed="yes">org.mvel.asm.ClassWriter</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.asm.ClassWriter.newUTF8(java.lang.String)</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.asm.AnnotationWriter.visitArray(java.lang.String)</name>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="class" confirmed="yes">org.mvel.asm.AnnotationVisitor</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.asm.AnnotationWriter.AnnotationWriter(org.mvel.asm.ClassWriter, boolean, org.mvel.asm.ByteVector, org.mvel.asm.ByteVector, int)</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.asm.AnnotationWriter.bv</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.asm.AnnotationWriter.cw</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.asm.AnnotationWriter.named</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.asm.AnnotationWriter.size</outbound>
                <outbound type="class" confirmed="yes">org.mvel.asm.ByteVector</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.asm.ByteVector.length</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.asm.ByteVector.put12(int, int)</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.asm.ByteVector.putShort(int)</outbound>
                <outbound type="class" confirmed="yes">org.mvel.asm.ClassWriter</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.asm.ClassWriter.newUTF8(java.lang.String)</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.asm.AnnotationWriter.visitEnd()</name>
                <outbound type="feature" confirmed="yes">org.mvel.asm.AnnotationWriter.offset</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.asm.AnnotationWriter.parent</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.asm.AnnotationWriter.size</outbound>
                <outbound type="class" confirmed="yes">org.mvel.asm.ByteVector</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.asm.ByteVector.data</outbound>
                <inbound type="feature" confirmed="yes">org.mvel.asm.AnnotationWriter.put(org.mvel.asm.AnnotationWriter[], org.mvel.asm.ByteVector)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.asm.AnnotationWriter.put(org.mvel.asm.ByteVector)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.asm.AnnotationWriter.visitEnum(java.lang.String, java.lang.String, java.lang.String)</name>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.asm.AnnotationWriter.bv</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.asm.AnnotationWriter.cw</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.asm.AnnotationWriter.named</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.asm.AnnotationWriter.size</outbound>
                <outbound type="class" confirmed="yes">org.mvel.asm.ByteVector</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.asm.ByteVector.put12(int, int)</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.asm.ByteVector.putShort(int)</outbound>
                <outbound type="class" confirmed="yes">org.mvel.asm.ClassWriter</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.asm.ClassWriter.newUTF8(java.lang.String)</outbound>
            </feature>
        </class>
        <class confirmed="yes">
            <name>org.mvel.asm.Attribute</name>
            <outbound type="class" confirmed="no">java.lang.Object</outbound>
            <inbound type="feature" confirmed="yes">org.mvel.asm.ClassAdapter.visitAttribute(org.mvel.asm.Attribute)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.asm.ClassReader.accept(org.mvel.asm.ClassVisitor, int)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.asm.ClassReader.accept(org.mvel.asm.ClassVisitor, org.mvel.asm.Attribute[], int)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.asm.ClassReader.readAttribute(org.mvel.asm.Attribute[], java.lang.String, int, int, char[], int, org.mvel.asm.Label[])</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.asm.ClassVisitor.visitAttribute(org.mvel.asm.Attribute)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.asm.ClassWriter.attrs</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.asm.ClassWriter.toByteArray()</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.asm.ClassWriter.visitAttribute(org.mvel.asm.Attribute)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.asm.FieldVisitor.visitAttribute(org.mvel.asm.Attribute)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.asm.FieldWriter.attrs</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.asm.FieldWriter.getSize()</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.asm.FieldWriter.put(org.mvel.asm.ByteVector)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.asm.FieldWriter.visitAttribute(org.mvel.asm.Attribute)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.asm.MethodAdapter.visitAttribute(org.mvel.asm.Attribute)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.asm.MethodVisitor.visitAttribute(org.mvel.asm.Attribute)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.asm.MethodWriter.attrs</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.asm.MethodWriter.cattrs</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.asm.MethodWriter.getSize()</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.asm.MethodWriter.put(org.mvel.asm.ByteVector)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.asm.MethodWriter.resizeInstructions()</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.asm.MethodWriter.visitAttribute(org.mvel.asm.Attribute)</inbound>
            <feature confirmed="yes">
                <name>org.mvel.asm.Attribute.Attribute(java.lang.String)</name>
                <outbound type="feature" confirmed="no">java.lang.Object.Object()</outbound>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.asm.Attribute.type</outbound>
                <inbound type="feature" confirmed="yes">org.mvel.asm.Attribute.read(org.mvel.asm.ClassReader, int, int, char[], int, org.mvel.asm.Label[])</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.asm.ClassReader.readAttribute(org.mvel.asm.Attribute[], java.lang.String, int, int, char[], int, org.mvel.asm.Label[])</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.asm.Attribute.getCount()</name>
                <outbound type="feature" confirmed="yes">org.mvel.asm.Attribute.next</outbound>
                <inbound type="feature" confirmed="yes">org.mvel.asm.ClassWriter.toByteArray()</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.asm.FieldWriter.put(org.mvel.asm.ByteVector)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.asm.MethodWriter.put(org.mvel.asm.ByteVector)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.asm.Attribute.getLabels()</name>
                <outbound type="class" confirmed="yes">org.mvel.asm.Label</outbound>
                <inbound type="feature" confirmed="yes">org.mvel.asm.MethodWriter.resizeInstructions()</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.asm.Attribute.getSize(org.mvel.asm.ClassWriter, byte[], int, int, int)</name>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.asm.Attribute.next</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.asm.Attribute.type</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.asm.Attribute.write(org.mvel.asm.ClassWriter, byte[], int, int, int)</outbound>
                <outbound type="class" confirmed="yes">org.mvel.asm.ByteVector</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.asm.ByteVector.length</outbound>
                <outbound type="class" confirmed="yes">org.mvel.asm.ClassWriter</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.asm.ClassWriter.newUTF8(java.lang.String)</outbound>
                <inbound type="feature" confirmed="yes">org.mvel.asm.ClassWriter.toByteArray()</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.asm.FieldWriter.getSize()</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.asm.MethodWriter.getSize()</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.asm.MethodWriter.put(org.mvel.asm.ByteVector)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.asm.Attribute.isCodeAttribute()</name>
                <inbound type="feature" confirmed="yes">org.mvel.asm.MethodWriter.visitAttribute(org.mvel.asm.Attribute)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.asm.Attribute.isUnknown()</name>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.asm.Attribute.next</name>
                <inbound type="feature" confirmed="yes">org.mvel.asm.Attribute.getCount()</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.asm.Attribute.getSize(org.mvel.asm.ClassWriter, byte[], int, int, int)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.asm.Attribute.put(org.mvel.asm.ClassWriter, byte[], int, int, int, org.mvel.asm.ByteVector)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.asm.ClassReader.accept(org.mvel.asm.ClassVisitor, org.mvel.asm.Attribute[], int)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.asm.ClassWriter.visitAttribute(org.mvel.asm.Attribute)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.asm.FieldWriter.visitAttribute(org.mvel.asm.Attribute)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.asm.MethodWriter.resizeInstructions()</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.asm.MethodWriter.visitAttribute(org.mvel.asm.Attribute)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.asm.Attribute.put(org.mvel.asm.ClassWriter, byte[], int, int, int, org.mvel.asm.ByteVector)</name>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.asm.Attribute.next</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.asm.Attribute.type</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.asm.Attribute.write(org.mvel.asm.ClassWriter, byte[], int, int, int)</outbound>
                <outbound type="class" confirmed="yes">org.mvel.asm.ByteVector</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.asm.ByteVector.data</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.asm.ByteVector.length</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.asm.ByteVector.putByteArray(byte[], int, int)</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.asm.ByteVector.putInt(int)</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.asm.ByteVector.putShort(int)</outbound>
                <outbound type="class" confirmed="yes">org.mvel.asm.ClassWriter</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.asm.ClassWriter.newUTF8(java.lang.String)</outbound>
                <inbound type="feature" confirmed="yes">org.mvel.asm.ClassWriter.toByteArray()</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.asm.FieldWriter.put(org.mvel.asm.ByteVector)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.asm.MethodWriter.put(org.mvel.asm.ByteVector)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.asm.Attribute.read(org.mvel.asm.ClassReader, int, int, char[], int, org.mvel.asm.Label[])</name>
                <outbound type="class" confirmed="no">java.lang.Object</outbound>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="feature" confirmed="no">java.lang.System.arraycopy(java.lang.Object, int, java.lang.Object, int, int)</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.asm.Attribute.Attribute(java.lang.String)</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.asm.Attribute.type</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.asm.Attribute.value</outbound>
                <outbound type="class" confirmed="yes">org.mvel.asm.ClassReader</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.asm.ClassReader.b</outbound>
                <outbound type="class" confirmed="yes">org.mvel.asm.Label</outbound>
                <inbound type="feature" confirmed="yes">org.mvel.asm.ClassReader.accept(org.mvel.asm.ClassVisitor, org.mvel.asm.Attribute[], int)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.asm.ClassReader.readAttribute(org.mvel.asm.Attribute[], java.lang.String, int, int, char[], int, org.mvel.asm.Label[])</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.asm.Attribute.type</name>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <inbound type="feature" confirmed="yes">org.mvel.asm.Attribute.Attribute(java.lang.String)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.asm.Attribute.getSize(org.mvel.asm.ClassWriter, byte[], int, int, int)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.asm.Attribute.put(org.mvel.asm.ClassWriter, byte[], int, int, int, org.mvel.asm.ByteVector)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.asm.Attribute.read(org.mvel.asm.ClassReader, int, int, char[], int, org.mvel.asm.Label[])</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.asm.ClassReader.accept(org.mvel.asm.ClassVisitor, org.mvel.asm.Attribute[], int)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.asm.ClassReader.readAttribute(org.mvel.asm.Attribute[], java.lang.String, int, int, char[], int, org.mvel.asm.Label[])</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.asm.Attribute.value</name>
                <inbound type="feature" confirmed="yes">org.mvel.asm.Attribute.read(org.mvel.asm.ClassReader, int, int, char[], int, org.mvel.asm.Label[])</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.asm.Attribute.write(org.mvel.asm.ClassWriter, byte[], int, int, int)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.asm.Attribute.write(org.mvel.asm.ClassWriter, byte[], int, int, int)</name>
                <outbound type="feature" confirmed="yes">org.mvel.asm.Attribute.value</outbound>
                <outbound type="class" confirmed="yes">org.mvel.asm.ByteVector</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.asm.ByteVector.ByteVector()</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.asm.ByteVector.data</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.asm.ByteVector.length</outbound>
                <outbound type="class" confirmed="yes">org.mvel.asm.ClassWriter</outbound>
                <inbound type="feature" confirmed="yes">org.mvel.asm.Attribute.getSize(org.mvel.asm.ClassWriter, byte[], int, int, int)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.asm.Attribute.put(org.mvel.asm.ClassWriter, byte[], int, int, int, org.mvel.asm.ByteVector)</inbound>
            </feature>
        </class>
        <class confirmed="yes">
            <name>org.mvel.asm.ByteVector</name>
            <outbound type="class" confirmed="no">java.lang.Object</outbound>
            <inbound type="feature" confirmed="yes">org.mvel.asm.AnnotationWriter.AnnotationWriter(org.mvel.asm.ClassWriter, boolean, org.mvel.asm.ByteVector, org.mvel.asm.ByteVector, int)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.asm.AnnotationWriter.bv</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.asm.AnnotationWriter.getSize()</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.asm.AnnotationWriter.parent</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.asm.AnnotationWriter.put(org.mvel.asm.AnnotationWriter[], org.mvel.asm.ByteVector)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.asm.AnnotationWriter.put(org.mvel.asm.ByteVector)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.asm.AnnotationWriter.visit(java.lang.String, java.lang.Object)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.asm.AnnotationWriter.visitAnnotation(java.lang.String, java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.asm.AnnotationWriter.visitArray(java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.asm.AnnotationWriter.visitEnd()</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.asm.AnnotationWriter.visitEnum(java.lang.String, java.lang.String, java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.asm.Attribute.getSize(org.mvel.asm.ClassWriter, byte[], int, int, int)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.asm.Attribute.put(org.mvel.asm.ClassWriter, byte[], int, int, int, org.mvel.asm.ByteVector)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.asm.Attribute.write(org.mvel.asm.ClassWriter, byte[], int, int, int)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.asm.ClassReader.copyPool(org.mvel.asm.ClassWriter)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.asm.ClassWriter.ClassWriter(int)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.asm.ClassWriter.innerClasses</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.asm.ClassWriter.newClassItem(java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.asm.ClassWriter.newDouble(double)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.asm.ClassWriter.newFloat(float)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.asm.ClassWriter.newInteger(int)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.asm.ClassWriter.newLong(long)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.asm.ClassWriter.newString(java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.asm.ClassWriter.newUTF8(java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.asm.ClassWriter.pool</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.asm.ClassWriter.put122(int, int, int)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.asm.ClassWriter.sourceDebug</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.asm.ClassWriter.toByteArray()</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.asm.ClassWriter.visitAnnotation(java.lang.String, boolean)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.asm.ClassWriter.visitInnerClass(java.lang.String, java.lang.String, java.lang.String, int)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.asm.ClassWriter.visitSource(java.lang.String, java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.asm.FieldWriter.put(org.mvel.asm.ByteVector)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.asm.FieldWriter.visitAnnotation(java.lang.String, boolean)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.asm.Label.put(org.mvel.asm.MethodWriter, org.mvel.asm.ByteVector, int, boolean)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.asm.MethodWriter.MethodWriter(org.mvel.asm.ClassWriter, int, java.lang.String, java.lang.String, java.lang.String, java.lang.String[], boolean, boolean)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.asm.MethodWriter.annd</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.asm.MethodWriter.code</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.asm.MethodWriter.endFrame()</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.asm.MethodWriter.getSize()</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.asm.MethodWriter.lineNumber</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.asm.MethodWriter.localVar</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.asm.MethodWriter.localVarType</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.asm.MethodWriter.noSuccessor()</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.asm.MethodWriter.put(org.mvel.asm.ByteVector)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.asm.MethodWriter.resizeInstructions()</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.asm.MethodWriter.stackMap</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.asm.MethodWriter.visitAnnotation(java.lang.String, boolean)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.asm.MethodWriter.visitAnnotationDefault()</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.asm.MethodWriter.visitFieldInsn(int, java.lang.String, java.lang.String, java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.asm.MethodWriter.visitFrame(int, int, java.lang.Object[], int, java.lang.Object[])</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.asm.MethodWriter.visitIincInsn(int, int)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.asm.MethodWriter.visitInsn(int)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.asm.MethodWriter.visitIntInsn(int, int)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.asm.MethodWriter.visitJumpInsn(int, org.mvel.asm.Label)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.asm.MethodWriter.visitLabel(org.mvel.asm.Label)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.asm.MethodWriter.visitLdcInsn(java.lang.Object)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.asm.MethodWriter.visitLineNumber(int, org.mvel.asm.Label)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.asm.MethodWriter.visitLocalVariable(java.lang.String, java.lang.String, java.lang.String, org.mvel.asm.Label, org.mvel.asm.Label, int)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.asm.MethodWriter.visitLookupSwitchInsn(org.mvel.asm.Label, int[], org.mvel.asm.Label[])</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.asm.MethodWriter.visitMaxs(int, int)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.asm.MethodWriter.visitMethodInsn(int, java.lang.String, java.lang.String, java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.asm.MethodWriter.visitMultiANewArrayInsn(java.lang.String, int)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.asm.MethodWriter.visitParameterAnnotation(int, java.lang.String, boolean)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.asm.MethodWriter.visitTableSwitchInsn(int, int, org.mvel.asm.Label, org.mvel.asm.Label[])</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.asm.MethodWriter.visitTypeInsn(int, java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.asm.MethodWriter.visitVarInsn(int, int)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.asm.MethodWriter.writeFrame()</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.asm.MethodWriter.writeFrameType(java.lang.Object)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.asm.MethodWriter.writeFrameTypes(int, int)</inbound>
            <feature confirmed="yes">
                <name>org.mvel.asm.ByteVector.ByteVector()</name>
                <outbound type="feature" confirmed="no">java.lang.Object.Object()</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.asm.ByteVector.data</outbound>
                <inbound type="feature" confirmed="yes">org.mvel.asm.Attribute.write(org.mvel.asm.ClassWriter, byte[], int, int, int)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.asm.ClassWriter.ClassWriter(int)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.asm.ClassWriter.visitAnnotation(java.lang.String, boolean)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.asm.ClassWriter.visitInnerClass(java.lang.String, java.lang.String, java.lang.String, int)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.asm.ClassWriter.visitSource(java.lang.String, java.lang.String)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.asm.FieldWriter.visitAnnotation(java.lang.String, boolean)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.asm.MethodWriter.MethodWriter(org.mvel.asm.ClassWriter, int, java.lang.String, java.lang.String, java.lang.String, java.lang.String[], boolean, boolean)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.asm.MethodWriter.endFrame()</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.asm.MethodWriter.visitAnnotation(java.lang.String, boolean)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.asm.MethodWriter.visitAnnotationDefault()</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.asm.MethodWriter.visitFrame(int, int, java.lang.Object[], int, java.lang.Object[])</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.asm.MethodWriter.visitLineNumber(int, org.mvel.asm.Label)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.asm.MethodWriter.visitLocalVariable(java.lang.String, java.lang.String, java.lang.String, org.mvel.asm.Label, org.mvel.asm.Label, int)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.asm.MethodWriter.visitParameterAnnotation(int, java.lang.String, boolean)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.asm.ByteVector.ByteVector(int)</name>
                <outbound type="feature" confirmed="no">java.lang.Object.Object()</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.asm.ByteVector.data</outbound>
                <inbound type="feature" confirmed="yes">org.mvel.asm.ClassWriter.toByteArray()</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.asm.MethodWriter.resizeInstructions()</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.asm.ByteVector.data</name>
                <inbound type="feature" confirmed="yes">org.mvel.asm.AnnotationWriter.put(org.mvel.asm.AnnotationWriter[], org.mvel.asm.ByteVector)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.asm.AnnotationWriter.put(org.mvel.asm.ByteVector)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.asm.AnnotationWriter.visitEnd()</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.asm.Attribute.put(org.mvel.asm.ClassWriter, byte[], int, int, int, org.mvel.asm.ByteVector)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.asm.Attribute.write(org.mvel.asm.ClassWriter, byte[], int, int, int)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.asm.ByteVector.ByteVector()</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.asm.ByteVector.ByteVector(int)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.asm.ByteVector.enlarge(int)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.asm.ByteVector.put11(int, int)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.asm.ByteVector.put12(int, int)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.asm.ByteVector.putByte(int)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.asm.ByteVector.putByteArray(byte[], int, int)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.asm.ByteVector.putInt(int)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.asm.ByteVector.putLong(long)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.asm.ByteVector.putShort(int)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.asm.ByteVector.putUTF8(java.lang.String)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.asm.ClassWriter.toByteArray()</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.asm.MethodWriter.getSize()</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.asm.MethodWriter.noSuccessor()</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.asm.MethodWriter.put(org.mvel.asm.ByteVector)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.asm.MethodWriter.resizeInstructions()</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.asm.MethodWriter.visitLabel(org.mvel.asm.Label)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.asm.MethodWriter.visitMaxs(int, int)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.asm.ByteVector.enlarge(int)</name>
                <outbound type="class" confirmed="no">java.lang.Object</outbound>
                <outbound type="feature" confirmed="no">java.lang.System.arraycopy(java.lang.Object, int, java.lang.Object, int, int)</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.asm.ByteVector.data</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.asm.ByteVector.length</outbound>
                <inbound type="feature" confirmed="yes">org.mvel.asm.ByteVector.put11(int, int)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.asm.ByteVector.put12(int, int)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.asm.ByteVector.putByte(int)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.asm.ByteVector.putByteArray(byte[], int, int)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.asm.ByteVector.putInt(int)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.asm.ByteVector.putLong(long)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.asm.ByteVector.putShort(int)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.asm.ByteVector.putUTF8(java.lang.String)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.asm.ByteVector.length</name>
                <inbound type="feature" confirmed="yes">org.mvel.asm.AnnotationWriter.getSize()</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.asm.AnnotationWriter.put(org.mvel.asm.AnnotationWriter[], org.mvel.asm.ByteVector)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.asm.AnnotationWriter.put(org.mvel.asm.ByteVector)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.asm.AnnotationWriter.visitAnnotation(java.lang.String, java.lang.String)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.asm.AnnotationWriter.visitArray(java.lang.String)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.asm.Attribute.getSize(org.mvel.asm.ClassWriter, byte[], int, int, int)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.asm.Attribute.put(org.mvel.asm.ClassWriter, byte[], int, int, int, org.mvel.asm.ByteVector)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.asm.Attribute.write(org.mvel.asm.ClassWriter, byte[], int, int, int)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.asm.ByteVector.enlarge(int)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.asm.ByteVector.put11(int, int)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.asm.ByteVector.put12(int, int)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.asm.ByteVector.putByte(int)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.asm.ByteVector.putByteArray(byte[], int, int)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.asm.ByteVector.putInt(int)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.asm.ByteVector.putLong(long)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.asm.ByteVector.putShort(int)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.asm.ByteVector.putUTF8(java.lang.String)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.asm.ClassWriter.toByteArray()</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.asm.Label.put(org.mvel.asm.MethodWriter, org.mvel.asm.ByteVector, int, boolean)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.asm.MethodWriter.getSize()</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.asm.MethodWriter.noSuccessor()</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.asm.MethodWriter.put(org.mvel.asm.ByteVector)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.asm.MethodWriter.resizeInstructions()</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.asm.MethodWriter.visitFrame(int, int, java.lang.Object[], int, java.lang.Object[])</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.asm.MethodWriter.visitJumpInsn(int, org.mvel.asm.Label)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.asm.MethodWriter.visitLabel(org.mvel.asm.Label)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.asm.MethodWriter.visitLookupSwitchInsn(org.mvel.asm.Label, int[], org.mvel.asm.Label[])</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.asm.MethodWriter.visitMaxs(int, int)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.asm.MethodWriter.visitTableSwitchInsn(int, int, org.mvel.asm.Label, org.mvel.asm.Label[])</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.asm.MethodWriter.visitTypeInsn(int, java.lang.String)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.asm.ByteVector.put11(int, int)</name>
                <outbound type="feature" confirmed="yes">org.mvel.asm.ByteVector.data</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.asm.ByteVector.enlarge(int)</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.asm.ByteVector.length</outbound>
                <inbound type="feature" confirmed="yes">org.mvel.asm.MethodWriter.visitIincInsn(int, int)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.asm.MethodWriter.visitIntInsn(int, int)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.asm.MethodWriter.visitLdcInsn(java.lang.Object)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.asm.MethodWriter.visitMethodInsn(int, java.lang.String, java.lang.String, java.lang.String)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.asm.MethodWriter.visitVarInsn(int, int)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.asm.ByteVector.put12(int, int)</name>
                <outbound type="feature" confirmed="yes">org.mvel.asm.ByteVector.data</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.asm.ByteVector.enlarge(int)</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.asm.ByteVector.length</outbound>
                <inbound type="feature" confirmed="yes">org.mvel.asm.AnnotationWriter.visit(java.lang.String, java.lang.Object)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.asm.AnnotationWriter.visitAnnotation(java.lang.String, java.lang.String)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.asm.AnnotationWriter.visitArray(java.lang.String)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.asm.AnnotationWriter.visitEnum(java.lang.String, java.lang.String, java.lang.String)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.asm.ClassWriter.newClassItem(java.lang.String)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.asm.ClassWriter.newString(java.lang.String)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.asm.ClassWriter.put122(int, int, int)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.asm.MethodWriter.visitFieldInsn(int, java.lang.String, java.lang.String, java.lang.String)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.asm.MethodWriter.visitIincInsn(int, int)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.asm.MethodWriter.visitIntInsn(int, int)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.asm.MethodWriter.visitLdcInsn(java.lang.Object)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.asm.MethodWriter.visitMethodInsn(int, java.lang.String, java.lang.String, java.lang.String)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.asm.MethodWriter.visitMultiANewArrayInsn(java.lang.String, int)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.asm.MethodWriter.visitTypeInsn(int, java.lang.String)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.asm.MethodWriter.visitVarInsn(int, int)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.asm.ByteVector.putByte(int)</name>
                <outbound type="feature" confirmed="yes">org.mvel.asm.ByteVector.data</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.asm.ByteVector.enlarge(int)</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.asm.ByteVector.length</outbound>
                <inbound type="feature" confirmed="yes">org.mvel.asm.AnnotationWriter.put(org.mvel.asm.AnnotationWriter[], org.mvel.asm.ByteVector)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.asm.ClassWriter.newDouble(double)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.asm.ClassWriter.newFloat(float)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.asm.ClassWriter.newInteger(int)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.asm.ClassWriter.newLong(long)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.asm.ClassWriter.newUTF8(java.lang.String)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.asm.MethodWriter.resizeInstructions()</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.asm.MethodWriter.visitFrame(int, int, java.lang.Object[], int, java.lang.Object[])</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.asm.MethodWriter.visitIincInsn(int, int)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.asm.MethodWriter.visitInsn(int)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.asm.MethodWriter.visitJumpInsn(int, org.mvel.asm.Label)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.asm.MethodWriter.visitLookupSwitchInsn(org.mvel.asm.Label, int[], org.mvel.asm.Label[])</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.asm.MethodWriter.visitMultiANewArrayInsn(java.lang.String, int)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.asm.MethodWriter.visitTableSwitchInsn(int, int, org.mvel.asm.Label, org.mvel.asm.Label[])</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.asm.MethodWriter.visitVarInsn(int, int)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.asm.MethodWriter.writeFrame()</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.asm.MethodWriter.writeFrameType(java.lang.Object)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.asm.MethodWriter.writeFrameTypes(int, int)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.asm.ByteVector.putByteArray(byte[], int, int)</name>
                <outbound type="class" confirmed="no">java.lang.Object</outbound>
                <outbound type="feature" confirmed="no">java.lang.System.arraycopy(java.lang.Object, int, java.lang.Object, int, int)</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.asm.ByteVector.data</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.asm.ByteVector.enlarge(int)</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.asm.ByteVector.length</outbound>
                <inbound type="feature" confirmed="yes">org.mvel.asm.AnnotationWriter.put(org.mvel.asm.AnnotationWriter[], org.mvel.asm.ByteVector)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.asm.AnnotationWriter.put(org.mvel.asm.ByteVector)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.asm.Attribute.put(org.mvel.asm.ClassWriter, byte[], int, int, int, org.mvel.asm.ByteVector)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.asm.ClassReader.copyPool(org.mvel.asm.ClassWriter)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.asm.ClassWriter.toByteArray()</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.asm.MethodWriter.put(org.mvel.asm.ByteVector)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.asm.MethodWriter.resizeInstructions()</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.asm.ByteVector.putInt(int)</name>
                <outbound type="feature" confirmed="yes">org.mvel.asm.ByteVector.data</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.asm.ByteVector.enlarge(int)</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.asm.ByteVector.length</outbound>
                <inbound type="feature" confirmed="yes">org.mvel.asm.AnnotationWriter.put(org.mvel.asm.AnnotationWriter[], org.mvel.asm.ByteVector)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.asm.AnnotationWriter.put(org.mvel.asm.ByteVector)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.asm.Attribute.put(org.mvel.asm.ClassWriter, byte[], int, int, int, org.mvel.asm.ByteVector)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.asm.ClassWriter.newFloat(float)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.asm.ClassWriter.newInteger(int)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.asm.ClassWriter.toByteArray()</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.asm.FieldWriter.put(org.mvel.asm.ByteVector)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.asm.Label.put(org.mvel.asm.MethodWriter, org.mvel.asm.ByteVector, int, boolean)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.asm.MethodWriter.put(org.mvel.asm.ByteVector)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.asm.MethodWriter.resizeInstructions()</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.asm.MethodWriter.visitLookupSwitchInsn(org.mvel.asm.Label, int[], org.mvel.asm.Label[])</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.asm.MethodWriter.visitTableSwitchInsn(int, int, org.mvel.asm.Label, org.mvel.asm.Label[])</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.asm.ByteVector.putLong(long)</name>
                <outbound type="feature" confirmed="yes">org.mvel.asm.ByteVector.data</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.asm.ByteVector.enlarge(int)</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.asm.ByteVector.length</outbound>
                <inbound type="feature" confirmed="yes">org.mvel.asm.ClassWriter.newDouble(double)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.asm.ClassWriter.newLong(long)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.asm.ByteVector.putShort(int)</name>
                <outbound type="feature" confirmed="yes">org.mvel.asm.ByteVector.data</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.asm.ByteVector.enlarge(int)</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.asm.ByteVector.length</outbound>
                <inbound type="feature" confirmed="yes">org.mvel.asm.AnnotationWriter.put(org.mvel.asm.AnnotationWriter[], org.mvel.asm.ByteVector)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.asm.AnnotationWriter.put(org.mvel.asm.ByteVector)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.asm.AnnotationWriter.visit(java.lang.String, java.lang.Object)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.asm.AnnotationWriter.visitAnnotation(java.lang.String, java.lang.String)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.asm.AnnotationWriter.visitArray(java.lang.String)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.asm.AnnotationWriter.visitEnum(java.lang.String, java.lang.String, java.lang.String)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.asm.Attribute.put(org.mvel.asm.ClassWriter, byte[], int, int, int, org.mvel.asm.ByteVector)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.asm.ClassWriter.put122(int, int, int)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.asm.ClassWriter.toByteArray()</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.asm.ClassWriter.visitAnnotation(java.lang.String, boolean)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.asm.ClassWriter.visitInnerClass(java.lang.String, java.lang.String, java.lang.String, int)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.asm.FieldWriter.put(org.mvel.asm.ByteVector)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.asm.FieldWriter.visitAnnotation(java.lang.String, boolean)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.asm.Label.put(org.mvel.asm.MethodWriter, org.mvel.asm.ByteVector, int, boolean)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.asm.MethodWriter.put(org.mvel.asm.ByteVector)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.asm.MethodWriter.resizeInstructions()</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.asm.MethodWriter.visitAnnotation(java.lang.String, boolean)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.asm.MethodWriter.visitFrame(int, int, java.lang.Object[], int, java.lang.Object[])</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.asm.MethodWriter.visitIincInsn(int, int)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.asm.MethodWriter.visitJumpInsn(int, org.mvel.asm.Label)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.asm.MethodWriter.visitLineNumber(int, org.mvel.asm.Label)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.asm.MethodWriter.visitLocalVariable(java.lang.String, java.lang.String, java.lang.String, org.mvel.asm.Label, org.mvel.asm.Label, int)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.asm.MethodWriter.visitParameterAnnotation(int, java.lang.String, boolean)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.asm.MethodWriter.writeFrame()</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.asm.MethodWriter.writeFrameType(java.lang.Object)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.asm.MethodWriter.writeFrameTypes(int, int)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.asm.ByteVector.putUTF8(java.lang.String)</name>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="feature" confirmed="no">java.lang.String.charAt(int)</outbound>
                <outbound type="feature" confirmed="no">java.lang.String.length()</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.asm.ByteVector.data</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.asm.ByteVector.enlarge(int)</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.asm.ByteVector.length</outbound>
                <inbound type="feature" confirmed="yes">org.mvel.asm.ClassWriter.newUTF8(java.lang.String)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.asm.ClassWriter.visitSource(java.lang.String, java.lang.String)</inbound>
            </feature>
        </class>
        <class confirmed="yes">
            <name>org.mvel.asm.ClassAdapter</name>
            <outbound type="class" confirmed="no">java.lang.Object</outbound>
            <outbound type="class" confirmed="yes">org.mvel.asm.ClassVisitor</outbound>
            <feature confirmed="yes">
                <name>org.mvel.asm.ClassAdapter.ClassAdapter(org.mvel.asm.ClassVisitor)</name>
                <outbound type="feature" confirmed="no">java.lang.Object.Object()</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.asm.ClassAdapter.cv</outbound>
                <outbound type="class" confirmed="yes">org.mvel.asm.ClassVisitor</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.asm.ClassAdapter.cv</name>
                <outbound type="class" confirmed="yes">org.mvel.asm.ClassVisitor</outbound>
                <inbound type="feature" confirmed="yes">org.mvel.asm.ClassAdapter.ClassAdapter(org.mvel.asm.ClassVisitor)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.asm.ClassAdapter.visit(int, int, java.lang.String, java.lang.String, java.lang.String, java.lang.String[])</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.asm.ClassAdapter.visitAnnotation(java.lang.String, boolean)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.asm.ClassAdapter.visitAttribute(org.mvel.asm.Attribute)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.asm.ClassAdapter.visitEnd()</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.asm.ClassAdapter.visitField(int, java.lang.String, java.lang.String, java.lang.String, java.lang.Object)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.asm.ClassAdapter.visitInnerClass(java.lang.String, java.lang.String, java.lang.String, int)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.asm.ClassAdapter.visitMethod(int, java.lang.String, java.lang.String, java.lang.String, java.lang.String[])</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.asm.ClassAdapter.visitOuterClass(java.lang.String, java.lang.String, java.lang.String)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.asm.ClassAdapter.visitSource(java.lang.String, java.lang.String)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.asm.ClassAdapter.visit(int, int, java.lang.String, java.lang.String, java.lang.String, java.lang.String[])</name>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.asm.ClassAdapter.cv</outbound>
                <outbound type="class" confirmed="yes">org.mvel.asm.ClassVisitor</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.asm.ClassVisitor.visit(int, int, java.lang.String, java.lang.String, java.lang.String, java.lang.String[])</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.asm.ClassAdapter.visitAnnotation(java.lang.String, boolean)</name>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="class" confirmed="yes">org.mvel.asm.AnnotationVisitor</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.asm.ClassAdapter.cv</outbound>
                <outbound type="class" confirmed="yes">org.mvel.asm.ClassVisitor</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.asm.ClassVisitor.visitAnnotation(java.lang.String, boolean)</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.asm.ClassAdapter.visitAttribute(org.mvel.asm.Attribute)</name>
                <outbound type="class" confirmed="yes">org.mvel.asm.Attribute</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.asm.ClassAdapter.cv</outbound>
                <outbound type="class" confirmed="yes">org.mvel.asm.ClassVisitor</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.asm.ClassVisitor.visitAttribute(org.mvel.asm.Attribute)</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.asm.ClassAdapter.visitEnd()</name>
                <outbound type="feature" confirmed="yes">org.mvel.asm.ClassAdapter.cv</outbound>
                <outbound type="class" confirmed="yes">org.mvel.asm.ClassVisitor</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.asm.ClassVisitor.visitEnd()</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.asm.ClassAdapter.visitField(int, java.lang.String, java.lang.String, java.lang.String, java.lang.Object)</name>
                <outbound type="class" confirmed="no">java.lang.Object</outbound>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.asm.ClassAdapter.cv</outbound>
                <outbound type="class" confirmed="yes">org.mvel.asm.ClassVisitor</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.asm.ClassVisitor.visitField(int, java.lang.String, java.lang.String, java.lang.String, java.lang.Object)</outbound>
                <outbound type="class" confirmed="yes">org.mvel.asm.FieldVisitor</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.asm.ClassAdapter.visitInnerClass(java.lang.String, java.lang.String, java.lang.String, int)</name>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.asm.ClassAdapter.cv</outbound>
                <outbound type="class" confirmed="yes">org.mvel.asm.ClassVisitor</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.asm.ClassVisitor.visitInnerClass(java.lang.String, java.lang.String, java.lang.String, int)</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.asm.ClassAdapter.visitMethod(int, java.lang.String, java.lang.String, java.lang.String, java.lang.String[])</name>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.asm.ClassAdapter.cv</outbound>
                <outbound type="class" confirmed="yes">org.mvel.asm.ClassVisitor</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.asm.ClassVisitor.visitMethod(int, java.lang.String, java.lang.String, java.lang.String, java.lang.String[])</outbound>
                <outbound type="class" confirmed="yes">org.mvel.asm.MethodVisitor</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.asm.ClassAdapter.visitOuterClass(java.lang.String, java.lang.String, java.lang.String)</name>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.asm.ClassAdapter.cv</outbound>
                <outbound type="class" confirmed="yes">org.mvel.asm.ClassVisitor</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.asm.ClassVisitor.visitOuterClass(java.lang.String, java.lang.String, java.lang.String)</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.asm.ClassAdapter.visitSource(java.lang.String, java.lang.String)</name>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.asm.ClassAdapter.cv</outbound>
                <outbound type="class" confirmed="yes">org.mvel.asm.ClassVisitor</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.asm.ClassVisitor.visitSource(java.lang.String, java.lang.String)</outbound>
            </feature>
        </class>
        <class confirmed="yes">
            <name>org.mvel.asm.ClassReader</name>
            <outbound type="class" confirmed="no">java.lang.Object</outbound>
            <inbound type="feature" confirmed="yes">org.mvel.asm.Attribute.read(org.mvel.asm.ClassReader, int, int, char[], int, org.mvel.asm.Label[])</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.asm.ClassWriter.ClassWriter(org.mvel.asm.ClassReader, int)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.asm.ClassWriter.cr</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.asm.MethodWriter.put(org.mvel.asm.ByteVector)</inbound>
            <feature confirmed="yes">
                <name>org.mvel.asm.ClassReader.ClassReader(byte[])</name>
                <outbound type="feature" confirmed="yes">org.mvel.asm.ClassReader.ClassReader(byte[], int, int)</outbound>
                <inbound type="feature" confirmed="yes">org.mvel.asm.ClassReader.ClassReader(java.io.InputStream)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.asm.ClassWriter.toByteArray()</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.asm.ClassReader.ClassReader(byte[], int, int)</name>
                <outbound type="feature" confirmed="no">java.lang.Object.Object()</outbound>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.asm.ClassReader.b</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.asm.ClassReader.header</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.asm.ClassReader.items</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.asm.ClassReader.maxStringLength</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.asm.ClassReader.readUnsignedShort(int)</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.asm.ClassReader.strings</outbound>
                <inbound type="feature" confirmed="yes">org.mvel.asm.ClassReader.ClassReader(byte[])</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.asm.ClassReader.ClassReader(java.io.InputStream)</name>
                <outbound type="class" confirmed="no">java.io.IOException</outbound>
                <outbound type="class" confirmed="no">java.io.InputStream</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.asm.ClassReader.ClassReader(byte[])</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.asm.ClassReader.readClass(java.io.InputStream)</outbound>
                <inbound type="feature" confirmed="yes">org.mvel.asm.ClassReader.ClassReader(java.lang.String)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.asm.ClassReader.ClassReader(java.lang.String)</name>
                <outbound type="class" confirmed="no">java.io.IOException</outbound>
                <outbound type="class" confirmed="no">java.io.InputStream</outbound>
                <outbound type="feature" confirmed="no">java.lang.ClassLoader.getSystemResourceAsStream(java.lang.String)</outbound>
                <outbound type="class" confirmed="no">java.lang.Object</outbound>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="feature" confirmed="no">java.lang.String.replace(char, char)</outbound>
                <outbound type="feature" confirmed="no">java.lang.String.valueOf(java.lang.Object)</outbound>
                <outbound type="class" confirmed="no">java.lang.StringBuffer</outbound>
                <outbound type="feature" confirmed="no">java.lang.StringBuffer.StringBuffer(java.lang.String)</outbound>
                <outbound type="feature" confirmed="no">java.lang.StringBuffer.append(java.lang.String)</outbound>
                <outbound type="feature" confirmed="no">java.lang.StringBuffer.toString()</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.asm.ClassReader.ClassReader(java.io.InputStream)</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.asm.ClassReader.EXPAND_FRAMES</name>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.asm.ClassReader.SKIP_CODE</name>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.asm.ClassReader.SKIP_DEBUG</name>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.asm.ClassReader.SKIP_FRAMES</name>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.asm.ClassReader.accept(org.mvel.asm.ClassVisitor, int)</name>
                <outbound type="class" confirmed="yes">org.mvel.asm.Attribute</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.asm.ClassReader.accept(org.mvel.asm.ClassVisitor, org.mvel.asm.Attribute[], int)</outbound>
                <outbound type="class" confirmed="yes">org.mvel.asm.ClassVisitor</outbound>
                <inbound type="feature" confirmed="yes">org.mvel.asm.ClassWriter.toByteArray()</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.asm.ClassReader.accept(org.mvel.asm.ClassVisitor, org.mvel.asm.Attribute[], int)</name>
                <outbound type="class" confirmed="no">int[]</outbound>
                <outbound type="class" confirmed="no">java.lang.Integer</outbound>
                <outbound type="class" confirmed="no">java.lang.Object</outbound>
                <outbound type="class" confirmed="no">java.lang.Object[]</outbound>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="feature" confirmed="no">java.lang.String.charAt(int)</outbound>
                <outbound type="feature" confirmed="no">java.lang.String.equals(java.lang.Object)</outbound>
                <outbound type="feature" confirmed="no">java.lang.String.substring(int, int)</outbound>
                <outbound type="class" confirmed="no">java.lang.String[]</outbound>
                <outbound type="class" confirmed="yes">org.mvel.asm.AnnotationVisitor</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.asm.AnnotationVisitor.visitEnd()</outbound>
                <outbound type="class" confirmed="yes">org.mvel.asm.Attribute</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.asm.Attribute.next</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.asm.Attribute.read(org.mvel.asm.ClassReader, int, int, char[], int, org.mvel.asm.Label[])</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.asm.Attribute.type</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.asm.ClassReader.b</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.asm.ClassReader.header</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.asm.ClassReader.items</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.asm.ClassReader.maxStringLength</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.asm.ClassReader.readAnnotationValue(int, char[], java.lang.String, org.mvel.asm.AnnotationVisitor)</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.asm.ClassReader.readAnnotationValues(int, char[], boolean, org.mvel.asm.AnnotationVisitor)</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.asm.ClassReader.readAttribute(org.mvel.asm.Attribute[], java.lang.String, int, int, char[], int, org.mvel.asm.Label[])</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.asm.ClassReader.readClass(int, char[])</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.asm.ClassReader.readConst(int, char[])</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.asm.ClassReader.readFrameType(java.lang.Object[], int, int, char[], org.mvel.asm.Label[])</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.asm.ClassReader.readInt(int)</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.asm.ClassReader.readParameterAnnotations(int, char[], boolean, org.mvel.asm.MethodVisitor)</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.asm.ClassReader.readShort(int)</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.asm.ClassReader.readUTF(int, int, char[])</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.asm.ClassReader.readUTF8(int, char[])</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.asm.ClassReader.readUnsignedShort(int)</outbound>
                <outbound type="class" confirmed="yes">org.mvel.asm.ClassVisitor</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.asm.ClassVisitor.visit(int, int, java.lang.String, java.lang.String, java.lang.String, java.lang.String[])</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.asm.ClassVisitor.visitAnnotation(java.lang.String, boolean)</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.asm.ClassVisitor.visitAttribute(org.mvel.asm.Attribute)</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.asm.ClassVisitor.visitEnd()</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.asm.ClassVisitor.visitField(int, java.lang.String, java.lang.String, java.lang.String, java.lang.Object)</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.asm.ClassVisitor.visitInnerClass(java.lang.String, java.lang.String, java.lang.String, int)</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.asm.ClassVisitor.visitMethod(int, java.lang.String, java.lang.String, java.lang.String, java.lang.String[])</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.asm.ClassVisitor.visitOuterClass(java.lang.String, java.lang.String, java.lang.String)</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.asm.ClassVisitor.visitSource(java.lang.String, java.lang.String)</outbound>
                <outbound type="class" confirmed="yes">org.mvel.asm.ClassWriter</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.asm.ClassWriter.TYPE</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.asm.ClassWriter.cr</outbound>
                <outbound type="class" confirmed="yes">org.mvel.asm.FieldVisitor</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.asm.FieldVisitor.visitAnnotation(java.lang.String, boolean)</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.asm.FieldVisitor.visitAttribute(org.mvel.asm.Attribute)</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.asm.FieldVisitor.visitEnd()</outbound>
                <outbound type="class" confirmed="yes">org.mvel.asm.Label</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.asm.Label.Label()</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.asm.Label.Label(boolean)</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.asm.Label.line</outbound>
                <outbound type="class" confirmed="yes">org.mvel.asm.MethodVisitor</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.asm.MethodVisitor.visitAnnotation(java.lang.String, boolean)</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.asm.MethodVisitor.visitAnnotationDefault()</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.asm.MethodVisitor.visitAttribute(org.mvel.asm.Attribute)</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.asm.MethodVisitor.visitCode()</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.asm.MethodVisitor.visitEnd()</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.asm.MethodVisitor.visitFieldInsn(int, java.lang.String, java.lang.String, java.lang.String)</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.asm.MethodVisitor.visitFrame(int, int, java.lang.Object[], int, java.lang.Object[])</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.asm.MethodVisitor.visitIincInsn(int, int)</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.asm.MethodVisitor.visitInsn(int)</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.asm.MethodVisitor.visitIntInsn(int, int)</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.asm.MethodVisitor.visitJumpInsn(int, org.mvel.asm.Label)</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.asm.MethodVisitor.visitLabel(org.mvel.asm.Label)</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.asm.MethodVisitor.visitLdcInsn(java.lang.Object)</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.asm.MethodVisitor.visitLineNumber(int, org.mvel.asm.Label)</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.asm.MethodVisitor.visitLocalVariable(java.lang.String, java.lang.String, java.lang.String, org.mvel.asm.Label, org.mvel.asm.Label, int)</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.asm.MethodVisitor.visitLookupSwitchInsn(org.mvel.asm.Label, int[], org.mvel.asm.Label[])</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.asm.MethodVisitor.visitMaxs(int, int)</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.asm.MethodVisitor.visitMethodInsn(int, java.lang.String, java.lang.String, java.lang.String)</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.asm.MethodVisitor.visitMultiANewArrayInsn(java.lang.String, int)</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.asm.MethodVisitor.visitTableSwitchInsn(int, int, org.mvel.asm.Label, org.mvel.asm.Label[])</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.asm.MethodVisitor.visitTryCatchBlock(org.mvel.asm.Label, org.mvel.asm.Label, org.mvel.asm.Label, java.lang.String)</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.asm.MethodVisitor.visitTypeInsn(int, java.lang.String)</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.asm.MethodVisitor.visitVarInsn(int, int)</outbound>
                <outbound type="class" confirmed="yes">org.mvel.asm.MethodWriter</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.asm.MethodWriter.classReaderLength</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.asm.MethodWriter.classReaderOffset</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.asm.MethodWriter.cw</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.asm.MethodWriter.exceptionCount</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.asm.MethodWriter.exceptions</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.asm.MethodWriter.signature</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.asm.Opcodes.DOUBLE</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.asm.Opcodes.FLOAT</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.asm.Opcodes.INTEGER</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.asm.Opcodes.LONG</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.asm.Opcodes.UNINITIALIZED_THIS</outbound>
                <inbound type="feature" confirmed="yes">org.mvel.asm.ClassReader.accept(org.mvel.asm.ClassVisitor, int)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.asm.ClassReader.b</name>
                <inbound type="feature" confirmed="yes">org.mvel.asm.Attribute.read(org.mvel.asm.ClassReader, int, int, char[], int, org.mvel.asm.Label[])</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.asm.ClassReader.ClassReader(byte[], int, int)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.asm.ClassReader.accept(org.mvel.asm.ClassVisitor, org.mvel.asm.Attribute[], int)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.asm.ClassReader.copyPool(org.mvel.asm.ClassWriter)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.asm.ClassReader.readAnnotationValue(int, char[], java.lang.String, org.mvel.asm.AnnotationVisitor)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.asm.ClassReader.readByte(int)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.asm.ClassReader.readConst(int, char[])</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.asm.ClassReader.readFrameType(java.lang.Object[], int, int, char[], org.mvel.asm.Label[])</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.asm.ClassReader.readInt(int)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.asm.ClassReader.readParameterAnnotations(int, char[], boolean, org.mvel.asm.MethodVisitor)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.asm.ClassReader.readShort(int)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.asm.ClassReader.readUTF(int, int, char[])</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.asm.ClassReader.readUnsignedShort(int)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.asm.MethodWriter.put(org.mvel.asm.ByteVector)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.asm.ClassReader.copyPool(org.mvel.asm.ClassWriter)</name>
                <outbound type="feature" confirmed="no">java.lang.Double.longBitsToDouble(long)</outbound>
                <outbound type="feature" confirmed="no">java.lang.Float.intBitsToFloat(int)</outbound>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="class" confirmed="yes">org.mvel.asm.ByteVector</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.asm.ByteVector.putByteArray(byte[], int, int)</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.asm.ClassReader.b</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.asm.ClassReader.header</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.asm.ClassReader.items</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.asm.ClassReader.maxStringLength</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.asm.ClassReader.readClass(int, char[])</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.asm.ClassReader.readInt(int)</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.asm.ClassReader.readLong(int)</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.asm.ClassReader.readUTF(int, int, char[])</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.asm.ClassReader.readUTF8(int, char[])</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.asm.ClassReader.readUnsignedShort(int)</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.asm.ClassReader.strings</outbound>
                <outbound type="class" confirmed="yes">org.mvel.asm.ClassWriter</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.asm.ClassWriter.index</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.asm.ClassWriter.items</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.asm.ClassWriter.pool</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.asm.ClassWriter.threshold</outbound>
                <outbound type="class" confirmed="yes">org.mvel.asm.Item</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.asm.Item.Item(int)</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.asm.Item.hashCode</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.asm.Item.next</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.asm.Item.set(double)</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.asm.Item.set(float)</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.asm.Item.set(int)</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.asm.Item.set(int, java.lang.String, java.lang.String, java.lang.String)</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.asm.Item.set(long)</outbound>
                <inbound type="feature" confirmed="yes">org.mvel.asm.ClassWriter.ClassWriter(org.mvel.asm.ClassReader, int)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.asm.ClassReader.getAccess()</name>
                <outbound type="feature" confirmed="yes">org.mvel.asm.ClassReader.header</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.asm.ClassReader.readUnsignedShort(int)</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.asm.ClassReader.getClassName()</name>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.asm.ClassReader.header</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.asm.ClassReader.maxStringLength</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.asm.ClassReader.readClass(int, char[])</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.asm.ClassReader.getInterfaces()</name>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.asm.ClassReader.header</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.asm.ClassReader.maxStringLength</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.asm.ClassReader.readClass(int, char[])</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.asm.ClassReader.readUnsignedShort(int)</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.asm.ClassReader.getItem(int)</name>
                <outbound type="feature" confirmed="yes">org.mvel.asm.ClassReader.items</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.asm.ClassReader.getSuperName()</name>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.asm.ClassReader.header</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.asm.ClassReader.items</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.asm.ClassReader.maxStringLength</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.asm.ClassReader.readUTF8(int, char[])</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.asm.ClassReader.readUnsignedShort(int)</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.asm.ClassReader.header</name>
                <inbound type="feature" confirmed="yes">org.mvel.asm.ClassReader.ClassReader(byte[], int, int)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.asm.ClassReader.accept(org.mvel.asm.ClassVisitor, org.mvel.asm.Attribute[], int)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.asm.ClassReader.copyPool(org.mvel.asm.ClassWriter)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.asm.ClassReader.getAccess()</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.asm.ClassReader.getClassName()</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.asm.ClassReader.getInterfaces()</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.asm.ClassReader.getSuperName()</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.asm.ClassReader.items</name>
                <inbound type="feature" confirmed="yes">org.mvel.asm.ClassReader.ClassReader(byte[], int, int)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.asm.ClassReader.accept(org.mvel.asm.ClassVisitor, org.mvel.asm.Attribute[], int)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.asm.ClassReader.copyPool(org.mvel.asm.ClassWriter)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.asm.ClassReader.getItem(int)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.asm.ClassReader.getSuperName()</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.asm.ClassReader.readAnnotationValue(int, char[], java.lang.String, org.mvel.asm.AnnotationVisitor)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.asm.ClassReader.readClass(int, char[])</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.asm.ClassReader.readConst(int, char[])</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.asm.ClassReader.readUTF8(int, char[])</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.asm.ClassReader.maxStringLength</name>
                <inbound type="feature" confirmed="yes">org.mvel.asm.ClassReader.ClassReader(byte[], int, int)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.asm.ClassReader.accept(org.mvel.asm.ClassVisitor, org.mvel.asm.Attribute[], int)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.asm.ClassReader.copyPool(org.mvel.asm.ClassWriter)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.asm.ClassReader.getClassName()</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.asm.ClassReader.getInterfaces()</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.asm.ClassReader.getSuperName()</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.asm.ClassReader.readAnnotationValue(int, char[], java.lang.String, org.mvel.asm.AnnotationVisitor)</name>
                <outbound type="class" confirmed="no">java.lang.Boolean</outbound>
                <outbound type="feature" confirmed="no">java.lang.Boolean.FALSE</outbound>
                <outbound type="feature" confirmed="no">java.lang.Boolean.TRUE</outbound>
                <outbound type="feature" confirmed="no">java.lang.Byte.Byte(byte)</outbound>
                <outbound type="feature" confirmed="no">java.lang.Character.Character(char)</outbound>
                <outbound type="feature" confirmed="no">java.lang.Double.longBitsToDouble(long)</outbound>
                <outbound type="feature" confirmed="no">java.lang.Float.intBitsToFloat(int)</outbound>
                <outbound type="class" confirmed="no">java.lang.Object</outbound>
                <outbound type="feature" confirmed="no">java.lang.Short.Short(short)</outbound>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="class" confirmed="yes">org.mvel.asm.AnnotationVisitor</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.asm.AnnotationVisitor.visit(java.lang.String, java.lang.Object)</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.asm.AnnotationVisitor.visitAnnotation(java.lang.String, java.lang.String)</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.asm.AnnotationVisitor.visitArray(java.lang.String)</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.asm.AnnotationVisitor.visitEnum(java.lang.String, java.lang.String, java.lang.String)</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.asm.ClassReader.b</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.asm.ClassReader.items</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.asm.ClassReader.readAnnotationValues(int, char[], boolean, org.mvel.asm.AnnotationVisitor)</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.asm.ClassReader.readConst(int, char[])</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.asm.ClassReader.readInt(int)</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.asm.ClassReader.readLong(int)</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.asm.ClassReader.readUTF8(int, char[])</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.asm.ClassReader.readUnsignedShort(int)</outbound>
                <outbound type="class" confirmed="yes">org.mvel.asm.Type</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.asm.Type.getType(java.lang.String)</outbound>
                <inbound type="feature" confirmed="yes">org.mvel.asm.ClassReader.accept(org.mvel.asm.ClassVisitor, org.mvel.asm.Attribute[], int)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.asm.ClassReader.readAnnotationValues(int, char[], boolean, org.mvel.asm.AnnotationVisitor)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.asm.ClassReader.readAnnotationValues(int, char[], boolean, org.mvel.asm.AnnotationVisitor)</name>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="class" confirmed="yes">org.mvel.asm.AnnotationVisitor</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.asm.AnnotationVisitor.visitEnd()</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.asm.ClassReader.readAnnotationValue(int, char[], java.lang.String, org.mvel.asm.AnnotationVisitor)</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.asm.ClassReader.readUTF8(int, char[])</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.asm.ClassReader.readUnsignedShort(int)</outbound>
                <inbound type="feature" confirmed="yes">org.mvel.asm.ClassReader.accept(org.mvel.asm.ClassVisitor, org.mvel.asm.Attribute[], int)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.asm.ClassReader.readAnnotationValue(int, char[], java.lang.String, org.mvel.asm.AnnotationVisitor)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.asm.ClassReader.readParameterAnnotations(int, char[], boolean, org.mvel.asm.MethodVisitor)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.asm.ClassReader.readAttribute(org.mvel.asm.Attribute[], java.lang.String, int, int, char[], int, org.mvel.asm.Label[])</name>
                <outbound type="class" confirmed="no">java.lang.Object</outbound>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="feature" confirmed="no">java.lang.String.equals(java.lang.Object)</outbound>
                <outbound type="class" confirmed="yes">org.mvel.asm.Attribute</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.asm.Attribute.Attribute(java.lang.String)</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.asm.Attribute.read(org.mvel.asm.ClassReader, int, int, char[], int, org.mvel.asm.Label[])</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.asm.Attribute.type</outbound>
                <outbound type="class" confirmed="yes">org.mvel.asm.Label</outbound>
                <inbound type="feature" confirmed="yes">org.mvel.asm.ClassReader.accept(org.mvel.asm.ClassVisitor, org.mvel.asm.Attribute[], int)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.asm.ClassReader.readByte(int)</name>
                <outbound type="feature" confirmed="yes">org.mvel.asm.ClassReader.b</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.asm.ClassReader.readClass(int, char[])</name>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.asm.ClassReader.items</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.asm.ClassReader.readUTF8(int, char[])</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.asm.ClassReader.readUnsignedShort(int)</outbound>
                <inbound type="feature" confirmed="yes">org.mvel.asm.ClassReader.accept(org.mvel.asm.ClassVisitor, org.mvel.asm.Attribute[], int)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.asm.ClassReader.copyPool(org.mvel.asm.ClassWriter)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.asm.ClassReader.getClassName()</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.asm.ClassReader.getInterfaces()</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.asm.ClassReader.readFrameType(java.lang.Object[], int, int, char[], org.mvel.asm.Label[])</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.asm.ClassReader.readClass(java.io.InputStream)</name>
                <outbound type="class" confirmed="no">java.io.IOException</outbound>
                <outbound type="feature" confirmed="no">java.io.IOException.IOException(java.lang.String)</outbound>
                <outbound type="class" confirmed="no">java.io.InputStream</outbound>
                <outbound type="feature" confirmed="no">java.io.InputStream.available()</outbound>
                <outbound type="feature" confirmed="no">java.io.InputStream.read(byte[], int, int)</outbound>
                <outbound type="class" confirmed="no">java.lang.Object</outbound>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="feature" confirmed="no">java.lang.System.arraycopy(java.lang.Object, int, java.lang.Object, int, int)</outbound>
                <inbound type="feature" confirmed="yes">org.mvel.asm.ClassReader.ClassReader(java.io.InputStream)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.asm.ClassReader.readConst(int, char[])</name>
                <outbound type="feature" confirmed="no">java.lang.Double.Double(double)</outbound>
                <outbound type="feature" confirmed="no">java.lang.Double.longBitsToDouble(long)</outbound>
                <outbound type="feature" confirmed="no">java.lang.Float.Float(float)</outbound>
                <outbound type="feature" confirmed="no">java.lang.Float.intBitsToFloat(int)</outbound>
                <outbound type="feature" confirmed="no">java.lang.Integer.Integer(int)</outbound>
                <outbound type="feature" confirmed="no">java.lang.Long.Long(long)</outbound>
                <outbound type="class" confirmed="no">java.lang.Object</outbound>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="feature" confirmed="no">java.lang.String.charAt(int)</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.asm.ClassReader.b</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.asm.ClassReader.items</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.asm.ClassReader.readInt(int)</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.asm.ClassReader.readLong(int)</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.asm.ClassReader.readUTF8(int, char[])</outbound>
                <outbound type="class" confirmed="yes">org.mvel.asm.Type</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.asm.Type.getObjectType(java.lang.String)</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.asm.Type.getType(java.lang.String)</outbound>
                <inbound type="feature" confirmed="yes">org.mvel.asm.ClassReader.accept(org.mvel.asm.ClassVisitor, org.mvel.asm.Attribute[], int)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.asm.ClassReader.readAnnotationValue(int, char[], java.lang.String, org.mvel.asm.AnnotationVisitor)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.asm.ClassReader.readFrameType(java.lang.Object[], int, int, char[], org.mvel.asm.Label[])</name>
                <outbound type="class" confirmed="no">java.lang.Integer</outbound>
                <outbound type="class" confirmed="no">java.lang.Object</outbound>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.asm.ClassReader.b</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.asm.ClassReader.readClass(int, char[])</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.asm.ClassReader.readUnsignedShort(int)</outbound>
                <outbound type="class" confirmed="yes">org.mvel.asm.Label</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.asm.Label.Label()</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.asm.Opcodes.DOUBLE</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.asm.Opcodes.FLOAT</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.asm.Opcodes.INTEGER</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.asm.Opcodes.LONG</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.asm.Opcodes.NULL</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.asm.Opcodes.TOP</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.asm.Opcodes.UNINITIALIZED_THIS</outbound>
                <inbound type="feature" confirmed="yes">org.mvel.asm.ClassReader.accept(org.mvel.asm.ClassVisitor, org.mvel.asm.Attribute[], int)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.asm.ClassReader.readInt(int)</name>
                <outbound type="feature" confirmed="yes">org.mvel.asm.ClassReader.b</outbound>
                <inbound type="feature" confirmed="yes">org.mvel.asm.ClassReader.accept(org.mvel.asm.ClassVisitor, org.mvel.asm.Attribute[], int)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.asm.ClassReader.copyPool(org.mvel.asm.ClassWriter)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.asm.ClassReader.readAnnotationValue(int, char[], java.lang.String, org.mvel.asm.AnnotationVisitor)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.asm.ClassReader.readConst(int, char[])</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.asm.ClassReader.readLong(int)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.asm.ClassReader.readLong(int)</name>
                <outbound type="feature" confirmed="yes">org.mvel.asm.ClassReader.readInt(int)</outbound>
                <inbound type="feature" confirmed="yes">org.mvel.asm.ClassReader.copyPool(org.mvel.asm.ClassWriter)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.asm.ClassReader.readAnnotationValue(int, char[], java.lang.String, org.mvel.asm.AnnotationVisitor)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.asm.ClassReader.readConst(int, char[])</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.asm.ClassReader.readParameterAnnotations(int, char[], boolean, org.mvel.asm.MethodVisitor)</name>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="class" confirmed="yes">org.mvel.asm.AnnotationVisitor</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.asm.ClassReader.b</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.asm.ClassReader.readAnnotationValues(int, char[], boolean, org.mvel.asm.AnnotationVisitor)</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.asm.ClassReader.readUTF8(int, char[])</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.asm.ClassReader.readUnsignedShort(int)</outbound>
                <outbound type="class" confirmed="yes">org.mvel.asm.MethodVisitor</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.asm.MethodVisitor.visitParameterAnnotation(int, java.lang.String, boolean)</outbound>
                <inbound type="feature" confirmed="yes">org.mvel.asm.ClassReader.accept(org.mvel.asm.ClassVisitor, org.mvel.asm.Attribute[], int)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.asm.ClassReader.readShort(int)</name>
                <outbound type="feature" confirmed="yes">org.mvel.asm.ClassReader.b</outbound>
                <inbound type="feature" confirmed="yes">org.mvel.asm.ClassReader.accept(org.mvel.asm.ClassVisitor, org.mvel.asm.Attribute[], int)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.asm.ClassReader.readUTF(int, int, char[])</name>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="feature" confirmed="no">java.lang.String.String(char[], int, int)</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.asm.ClassReader.b</outbound>
                <inbound type="feature" confirmed="yes">org.mvel.asm.ClassReader.accept(org.mvel.asm.ClassVisitor, org.mvel.asm.Attribute[], int)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.asm.ClassReader.copyPool(org.mvel.asm.ClassWriter)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.asm.ClassReader.readUTF8(int, char[])</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.asm.ClassReader.readUTF8(int, char[])</name>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.asm.ClassReader.items</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.asm.ClassReader.readUTF(int, int, char[])</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.asm.ClassReader.readUnsignedShort(int)</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.asm.ClassReader.strings</outbound>
                <inbound type="feature" confirmed="yes">org.mvel.asm.ClassReader.accept(org.mvel.asm.ClassVisitor, org.mvel.asm.Attribute[], int)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.asm.ClassReader.copyPool(org.mvel.asm.ClassWriter)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.asm.ClassReader.getSuperName()</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.asm.ClassReader.readAnnotationValue(int, char[], java.lang.String, org.mvel.asm.AnnotationVisitor)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.asm.ClassReader.readAnnotationValues(int, char[], boolean, org.mvel.asm.AnnotationVisitor)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.asm.ClassReader.readClass(int, char[])</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.asm.ClassReader.readConst(int, char[])</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.asm.ClassReader.readParameterAnnotations(int, char[], boolean, org.mvel.asm.MethodVisitor)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.asm.ClassReader.readUnsignedShort(int)</name>
                <outbound type="feature" confirmed="yes">org.mvel.asm.ClassReader.b</outbound>
                <inbound type="feature" confirmed="yes">org.mvel.asm.ClassReader.ClassReader(byte[], int, int)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.asm.ClassReader.accept(org.mvel.asm.ClassVisitor, org.mvel.asm.Attribute[], int)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.asm.ClassReader.copyPool(org.mvel.asm.ClassWriter)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.asm.ClassReader.getAccess()</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.asm.ClassReader.getInterfaces()</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.asm.ClassReader.getSuperName()</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.asm.ClassReader.readAnnotationValue(int, char[], java.lang.String, org.mvel.asm.AnnotationVisitor)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.asm.ClassReader.readAnnotationValues(int, char[], boolean, org.mvel.asm.AnnotationVisitor)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.asm.ClassReader.readClass(int, char[])</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.asm.ClassReader.readFrameType(java.lang.Object[], int, int, char[], org.mvel.asm.Label[])</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.asm.ClassReader.readParameterAnnotations(int, char[], boolean, org.mvel.asm.MethodVisitor)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.asm.ClassReader.readUTF8(int, char[])</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.asm.ClassReader.strings</name>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <inbound type="feature" confirmed="yes">org.mvel.asm.ClassReader.ClassReader(byte[], int, int)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.asm.ClassReader.copyPool(org.mvel.asm.ClassWriter)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.asm.ClassReader.readUTF8(int, char[])</inbound>
            </feature>
        </class>
        <class confirmed="yes">
            <name>org.mvel.asm.ClassVisitor</name>
            <outbound type="class" confirmed="no">java.lang.Object</outbound>
            <inbound type="class" confirmed="yes">org.mvel.asm.ClassAdapter</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.asm.ClassAdapter.ClassAdapter(org.mvel.asm.ClassVisitor)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.asm.ClassAdapter.cv</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.asm.ClassAdapter.visit(int, int, java.lang.String, java.lang.String, java.lang.String, java.lang.String[])</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.asm.ClassAdapter.visitAnnotation(java.lang.String, boolean)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.asm.ClassAdapter.visitAttribute(org.mvel.asm.Attribute)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.asm.ClassAdapter.visitEnd()</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.asm.ClassAdapter.visitField(int, java.lang.String, java.lang.String, java.lang.String, java.lang.Object)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.asm.ClassAdapter.visitInnerClass(java.lang.String, java.lang.String, java.lang.String, int)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.asm.ClassAdapter.visitMethod(int, java.lang.String, java.lang.String, java.lang.String, java.lang.String[])</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.asm.ClassAdapter.visitOuterClass(java.lang.String, java.lang.String, java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.asm.ClassAdapter.visitSource(java.lang.String, java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.asm.ClassReader.accept(org.mvel.asm.ClassVisitor, int)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.asm.ClassReader.accept(org.mvel.asm.ClassVisitor, org.mvel.asm.Attribute[], int)</inbound>
            <inbound type="class" confirmed="yes">org.mvel.asm.ClassWriter</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.asm.ClassWriter.toByteArray()</inbound>
            <feature confirmed="yes">
                <name>org.mvel.asm.ClassVisitor.visit(int, int, java.lang.String, java.lang.String, java.lang.String, java.lang.String[])</name>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <inbound type="feature" confirmed="yes">org.mvel.asm.ClassAdapter.visit(int, int, java.lang.String, java.lang.String, java.lang.String, java.lang.String[])</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.asm.ClassReader.accept(org.mvel.asm.ClassVisitor, org.mvel.asm.Attribute[], int)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.asm.ClassVisitor.visitAnnotation(java.lang.String, boolean)</name>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="class" confirmed="yes">org.mvel.asm.AnnotationVisitor</outbound>
                <inbound type="feature" confirmed="yes">org.mvel.asm.ClassAdapter.visitAnnotation(java.lang.String, boolean)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.asm.ClassReader.accept(org.mvel.asm.ClassVisitor, org.mvel.asm.Attribute[], int)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.asm.ClassVisitor.visitAttribute(org.mvel.asm.Attribute)</name>
                <outbound type="class" confirmed="yes">org.mvel.asm.Attribute</outbound>
                <inbound type="feature" confirmed="yes">org.mvel.asm.ClassAdapter.visitAttribute(org.mvel.asm.Attribute)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.asm.ClassReader.accept(org.mvel.asm.ClassVisitor, org.mvel.asm.Attribute[], int)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.asm.ClassVisitor.visitEnd()</name>
                <inbound type="feature" confirmed="yes">org.mvel.asm.ClassAdapter.visitEnd()</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.asm.ClassReader.accept(org.mvel.asm.ClassVisitor, org.mvel.asm.Attribute[], int)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.asm.ClassVisitor.visitField(int, java.lang.String, java.lang.String, java.lang.String, java.lang.Object)</name>
                <outbound type="class" confirmed="no">java.lang.Object</outbound>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="class" confirmed="yes">org.mvel.asm.FieldVisitor</outbound>
                <inbound type="feature" confirmed="yes">org.mvel.asm.ClassAdapter.visitField(int, java.lang.String, java.lang.String, java.lang.String, java.lang.Object)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.asm.ClassReader.accept(org.mvel.asm.ClassVisitor, org.mvel.asm.Attribute[], int)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.asm.ClassVisitor.visitInnerClass(java.lang.String, java.lang.String, java.lang.String, int)</name>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <inbound type="feature" confirmed="yes">org.mvel.asm.ClassAdapter.visitInnerClass(java.lang.String, java.lang.String, java.lang.String, int)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.asm.ClassReader.accept(org.mvel.asm.ClassVisitor, org.mvel.asm.Attribute[], int)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.asm.ClassVisitor.visitMethod(int, java.lang.String, java.lang.String, java.lang.String, java.lang.String[])</name>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="class" confirmed="yes">org.mvel.asm.MethodVisitor</outbound>
                <inbound type="feature" confirmed="yes">org.mvel.asm.ClassAdapter.visitMethod(int, java.lang.String, java.lang.String, java.lang.String, java.lang.String[])</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.asm.ClassReader.accept(org.mvel.asm.ClassVisitor, org.mvel.asm.Attribute[], int)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.asm.ClassVisitor.visitOuterClass(java.lang.String, java.lang.String, java.lang.String)</name>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <inbound type="feature" confirmed="yes">org.mvel.asm.ClassAdapter.visitOuterClass(java.lang.String, java.lang.String, java.lang.String)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.asm.ClassReader.accept(org.mvel.asm.ClassVisitor, org.mvel.asm.Attribute[], int)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.asm.ClassVisitor.visitSource(java.lang.String, java.lang.String)</name>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <inbound type="feature" confirmed="yes">org.mvel.asm.ClassAdapter.visitSource(java.lang.String, java.lang.String)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.asm.ClassReader.accept(org.mvel.asm.ClassVisitor, org.mvel.asm.Attribute[], int)</inbound>
            </feature>
        </class>
        <class confirmed="yes">
            <name>org.mvel.asm.ClassWriter</name>
            <outbound type="class" confirmed="no">java.lang.Object</outbound>
            <outbound type="class" confirmed="yes">org.mvel.asm.ClassVisitor</outbound>
            <inbound type="feature" confirmed="yes">org.mvel.asm.AnnotationWriter.AnnotationWriter(org.mvel.asm.ClassWriter, boolean, org.mvel.asm.ByteVector, org.mvel.asm.ByteVector, int)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.asm.AnnotationWriter.cw</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.asm.AnnotationWriter.visit(java.lang.String, java.lang.Object)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.asm.AnnotationWriter.visitAnnotation(java.lang.String, java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.asm.AnnotationWriter.visitArray(java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.asm.AnnotationWriter.visitEnum(java.lang.String, java.lang.String, java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.asm.Attribute.getSize(org.mvel.asm.ClassWriter, byte[], int, int, int)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.asm.Attribute.put(org.mvel.asm.ClassWriter, byte[], int, int, int, org.mvel.asm.ByteVector)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.asm.Attribute.write(org.mvel.asm.ClassWriter, byte[], int, int, int)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.asm.ClassReader.accept(org.mvel.asm.ClassVisitor, org.mvel.asm.Attribute[], int)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.asm.ClassReader.copyPool(org.mvel.asm.ClassWriter)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.asm.FieldWriter.FieldWriter(org.mvel.asm.ClassWriter, int, java.lang.String, java.lang.String, java.lang.String, java.lang.Object)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.asm.FieldWriter.cw</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.asm.FieldWriter.getSize()</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.asm.FieldWriter.put(org.mvel.asm.ByteVector)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.asm.FieldWriter.visitAnnotation(java.lang.String, boolean)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.asm.Frame.execute(int, int, org.mvel.asm.ClassWriter, org.mvel.asm.Item)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.asm.Frame.init(org.mvel.asm.ClassWriter, int)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.asm.Frame.initInputFrame(org.mvel.asm.ClassWriter, int, org.mvel.asm.Type[], int)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.asm.Frame.merge(org.mvel.asm.ClassWriter, int, int[], int)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.asm.Frame.merge(org.mvel.asm.ClassWriter, org.mvel.asm.Frame, int)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.asm.Frame.push(org.mvel.asm.ClassWriter, java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.asm.Frame.type(org.mvel.asm.ClassWriter, java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.asm.MethodWriter.MethodWriter(org.mvel.asm.ClassWriter, int, java.lang.String, java.lang.String, java.lang.String, java.lang.String[], boolean, boolean)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.asm.MethodWriter.cw</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.asm.MethodWriter.getSize()</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.asm.MethodWriter.put(org.mvel.asm.ByteVector)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.asm.MethodWriter.resizeInstructions()</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.asm.MethodWriter.visitAnnotation(java.lang.String, boolean)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.asm.MethodWriter.visitAnnotationDefault()</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.asm.MethodWriter.visitFieldInsn(int, java.lang.String, java.lang.String, java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.asm.MethodWriter.visitFrame(int, int, java.lang.Object[], int, java.lang.Object[])</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.asm.MethodWriter.visitIincInsn(int, int)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.asm.MethodWriter.visitInsn(int)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.asm.MethodWriter.visitIntInsn(int, int)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.asm.MethodWriter.visitJumpInsn(int, org.mvel.asm.Label)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.asm.MethodWriter.visitLdcInsn(java.lang.Object)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.asm.MethodWriter.visitLocalVariable(java.lang.String, java.lang.String, java.lang.String, org.mvel.asm.Label, org.mvel.asm.Label, int)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.asm.MethodWriter.visitMaxs(int, int)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.asm.MethodWriter.visitMethodInsn(int, java.lang.String, java.lang.String, java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.asm.MethodWriter.visitMultiANewArrayInsn(java.lang.String, int)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.asm.MethodWriter.visitParameterAnnotation(int, java.lang.String, boolean)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.asm.MethodWriter.visitSwitchInsn(org.mvel.asm.Label, org.mvel.asm.Label[])</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.asm.MethodWriter.visitTryCatchBlock(org.mvel.asm.Label, org.mvel.asm.Label, org.mvel.asm.Label, java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.asm.MethodWriter.visitTypeInsn(int, java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.asm.MethodWriter.visitVarInsn(int, int)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.asm.MethodWriter.writeFrame()</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.asm.MethodWriter.writeFrameType(java.lang.Object)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.asm.MethodWriter.writeFrameTypes(int, int)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.asm.ASMAccessorOptimizer._finishJIT()</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.asm.ASMAccessorOptimizer._initJIT()</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.asm.ASMAccessorOptimizer._initializeAccessor()</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.asm.ASMAccessorOptimizer.buildInputs()</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.asm.ASMAccessorOptimizer.cw</inbound>
            <feature confirmed="yes">
                <name>org.mvel.asm.ClassWriter.CLASS</name>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.asm.ClassWriter.COMPUTE_FRAMES</name>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.asm.ClassWriter.COMPUTE_MAXS</name>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.asm.ClassWriter.ClassWriter(int)</name>
                <outbound type="feature" confirmed="no">java.lang.Object.Object()</outbound>
                <outbound type="class" confirmed="yes">org.mvel.asm.ByteVector</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.asm.ByteVector.ByteVector()</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.asm.ClassWriter.computeFrames</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.asm.ClassWriter.computeMaxs</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.asm.ClassWriter.index</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.asm.ClassWriter.items</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.asm.ClassWriter.key</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.asm.ClassWriter.key2</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.asm.ClassWriter.key3</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.asm.ClassWriter.pool</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.asm.ClassWriter.threshold</outbound>
                <outbound type="class" confirmed="yes">org.mvel.asm.Item</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.asm.Item.Item()</outbound>
                <inbound type="feature" confirmed="yes">org.mvel.asm.ClassWriter.ClassWriter(org.mvel.asm.ClassReader, int)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.asm.ClassWriter.toByteArray()</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.asm.ASMAccessorOptimizer.ASMAccessorOptimizer()</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.asm.ASMAccessorOptimizer._initJIT()</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.asm.ClassWriter.ClassWriter(org.mvel.asm.ClassReader, int)</name>
                <outbound type="class" confirmed="yes">org.mvel.asm.ClassReader</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.asm.ClassReader.copyPool(org.mvel.asm.ClassWriter)</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.asm.ClassWriter.ClassWriter(int)</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.asm.ClassWriter.cr</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.asm.ClassWriter.DOUBLE</name>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.asm.ClassWriter.FIELD</name>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.asm.ClassWriter.FIELDORMETH_INSN</name>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.asm.ClassWriter.FLOAT</name>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.asm.ClassWriter.IINC_INSN</name>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.asm.ClassWriter.IMETH</name>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.asm.ClassWriter.IMPLVAR_INSN</name>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.asm.ClassWriter.INT</name>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.asm.ClassWriter.ITFMETH_INSN</name>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.asm.ClassWriter.LABELW_INSN</name>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.asm.ClassWriter.LABEL_INSN</name>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.asm.ClassWriter.LDCW_INSN</name>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.asm.ClassWriter.LDC_INSN</name>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.asm.ClassWriter.LONG</name>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.asm.ClassWriter.LOOK_INSN</name>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.asm.ClassWriter.MANA_INSN</name>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.asm.ClassWriter.METH</name>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.asm.ClassWriter.NAME_TYPE</name>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.asm.ClassWriter.NOARG_INSN</name>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.asm.ClassWriter.SBYTE_INSN</name>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.asm.ClassWriter.SHORT_INSN</name>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.asm.ClassWriter.STR</name>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.asm.ClassWriter.TABL_INSN</name>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.asm.ClassWriter.TYPE</name>
                <inbound type="feature" confirmed="yes">org.mvel.asm.ClassReader.accept(org.mvel.asm.ClassVisitor, org.mvel.asm.Attribute[], int)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.asm.ClassWriter.static {}</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.asm.MethodWriter.resizeInstructions()</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.asm.ClassWriter.TYPE_INSN</name>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.asm.ClassWriter.TYPE_MERGED</name>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.asm.ClassWriter.TYPE_NORMAL</name>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.asm.ClassWriter.TYPE_UNINIT</name>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.asm.ClassWriter.UTF8</name>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.asm.ClassWriter.VAR_INSN</name>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.asm.ClassWriter.WIDE_INSN</name>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.asm.ClassWriter.access</name>
                <inbound type="feature" confirmed="yes">org.mvel.asm.ClassWriter.toByteArray()</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.asm.ClassWriter.visit(int, int, java.lang.String, java.lang.String, java.lang.String, java.lang.String[])</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.asm.ClassWriter.addType(java.lang.String)</name>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.asm.ClassWriter.addType(org.mvel.asm.Item)</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.asm.ClassWriter.get(org.mvel.asm.Item)</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.asm.ClassWriter.key</outbound>
                <outbound type="class" confirmed="yes">org.mvel.asm.Item</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.asm.Item.index</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.asm.Item.set(int, java.lang.String, java.lang.String, java.lang.String)</outbound>
                <inbound type="feature" confirmed="yes">org.mvel.asm.ClassWriter.getMergedType(int, int)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.asm.Frame.execute(int, int, org.mvel.asm.ClassWriter, org.mvel.asm.Item)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.asm.Frame.init(org.mvel.asm.ClassWriter, int)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.asm.Frame.initInputFrame(org.mvel.asm.ClassWriter, int, org.mvel.asm.Type[], int)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.asm.Frame.merge(org.mvel.asm.ClassWriter, int, int[], int)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.asm.Frame.type(org.mvel.asm.ClassWriter, java.lang.String)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.asm.MethodWriter.visitFrame(int, int, java.lang.Object[], int, java.lang.Object[])</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.asm.MethodWriter.visitMaxs(int, int)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.asm.ClassWriter.addType(org.mvel.asm.Item)</name>
                <outbound type="class" confirmed="no">java.lang.Object</outbound>
                <outbound type="feature" confirmed="no">java.lang.System.arraycopy(java.lang.Object, int, java.lang.Object, int, int)</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.asm.ClassWriter.key</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.asm.ClassWriter.put(org.mvel.asm.Item)</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.asm.ClassWriter.typeCount</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.asm.ClassWriter.typeTable</outbound>
                <outbound type="class" confirmed="yes">org.mvel.asm.Item</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.asm.Item.Item(int, org.mvel.asm.Item)</outbound>
                <inbound type="feature" confirmed="yes">org.mvel.asm.ClassWriter.addType(java.lang.String)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.asm.ClassWriter.addUninitializedType(java.lang.String, int)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.asm.ClassWriter.addUninitializedType(java.lang.String, int)</name>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="feature" confirmed="no">java.lang.String.hashCode()</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.asm.ClassWriter.addType(org.mvel.asm.Item)</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.asm.ClassWriter.get(org.mvel.asm.Item)</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.asm.ClassWriter.key</outbound>
                <outbound type="class" confirmed="yes">org.mvel.asm.Item</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.asm.Item.hashCode</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.asm.Item.index</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.asm.Item.intVal</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.asm.Item.strVal1</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.asm.Item.type</outbound>
                <inbound type="feature" confirmed="yes">org.mvel.asm.Frame.execute(int, int, org.mvel.asm.ClassWriter, org.mvel.asm.Item)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.asm.MethodWriter.visitFrame(int, int, java.lang.Object[], int, java.lang.Object[])</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.asm.ClassWriter.anns</name>
                <outbound type="class" confirmed="yes">org.mvel.asm.AnnotationWriter</outbound>
                <inbound type="feature" confirmed="yes">org.mvel.asm.ClassWriter.toByteArray()</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.asm.ClassWriter.visitAnnotation(java.lang.String, boolean)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.asm.ClassWriter.attrs</name>
                <outbound type="class" confirmed="yes">org.mvel.asm.Attribute</outbound>
                <inbound type="feature" confirmed="yes">org.mvel.asm.ClassWriter.toByteArray()</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.asm.ClassWriter.visitAttribute(org.mvel.asm.Attribute)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.asm.ClassWriter.computeFrames</name>
                <inbound type="feature" confirmed="yes">org.mvel.asm.ClassWriter.ClassWriter(int)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.asm.ClassWriter.visitMethod(int, java.lang.String, java.lang.String, java.lang.String, java.lang.String[])</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.asm.ClassWriter.computeMaxs</name>
                <inbound type="feature" confirmed="yes">org.mvel.asm.ClassWriter.ClassWriter(int)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.asm.ClassWriter.visitMethod(int, java.lang.String, java.lang.String, java.lang.String, java.lang.String[])</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.asm.ClassWriter.cr</name>
                <outbound type="class" confirmed="yes">org.mvel.asm.ClassReader</outbound>
                <inbound type="feature" confirmed="yes">org.mvel.asm.ClassReader.accept(org.mvel.asm.ClassVisitor, org.mvel.asm.Attribute[], int)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.asm.ClassWriter.ClassWriter(org.mvel.asm.ClassReader, int)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.asm.MethodWriter.put(org.mvel.asm.ByteVector)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.asm.ClassWriter.enclosingMethod</name>
                <inbound type="feature" confirmed="yes">org.mvel.asm.ClassWriter.toByteArray()</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.asm.ClassWriter.visitOuterClass(java.lang.String, java.lang.String, java.lang.String)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.asm.ClassWriter.enclosingMethodOwner</name>
                <inbound type="feature" confirmed="yes">org.mvel.asm.ClassWriter.toByteArray()</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.asm.ClassWriter.visitOuterClass(java.lang.String, java.lang.String, java.lang.String)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.asm.ClassWriter.firstField</name>
                <outbound type="class" confirmed="yes">org.mvel.asm.FieldWriter</outbound>
                <inbound type="feature" confirmed="yes">org.mvel.asm.ClassWriter.toByteArray()</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.asm.FieldWriter.FieldWriter(org.mvel.asm.ClassWriter, int, java.lang.String, java.lang.String, java.lang.String, java.lang.Object)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.asm.ClassWriter.firstMethod</name>
                <outbound type="class" confirmed="yes">org.mvel.asm.MethodWriter</outbound>
                <inbound type="feature" confirmed="yes">org.mvel.asm.ClassWriter.toByteArray()</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.asm.MethodWriter.MethodWriter(org.mvel.asm.ClassWriter, int, java.lang.String, java.lang.String, java.lang.String, java.lang.String[], boolean, boolean)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.asm.ClassWriter.get(org.mvel.asm.Item)</name>
                <outbound type="feature" confirmed="yes">org.mvel.asm.ClassWriter.items</outbound>
                <outbound type="class" confirmed="yes">org.mvel.asm.Item</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.asm.Item.hashCode</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.asm.Item.isEqualTo(org.mvel.asm.Item)</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.asm.Item.next</outbound>
                <inbound type="feature" confirmed="yes">org.mvel.asm.ClassWriter.addType(java.lang.String)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.asm.ClassWriter.addUninitializedType(java.lang.String, int)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.asm.ClassWriter.getMergedType(int, int)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.asm.ClassWriter.newClassItem(java.lang.String)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.asm.ClassWriter.newDouble(double)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.asm.ClassWriter.newFieldItem(java.lang.String, java.lang.String, java.lang.String)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.asm.ClassWriter.newFloat(float)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.asm.ClassWriter.newInteger(int)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.asm.ClassWriter.newLong(long)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.asm.ClassWriter.newMethodItem(java.lang.String, java.lang.String, java.lang.String, boolean)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.asm.ClassWriter.newNameType(java.lang.String, java.lang.String)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.asm.ClassWriter.newString(java.lang.String)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.asm.ClassWriter.newUTF8(java.lang.String)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.asm.ClassWriter.getCommonSuperClass(java.lang.String, java.lang.String)</name>
                <outbound type="class" confirmed="no">java.lang.Class</outbound>
                <outbound type="feature" confirmed="no">java.lang.Class.getName()</outbound>
                <outbound type="feature" confirmed="no">java.lang.Class.getSuperclass()</outbound>
                <outbound type="feature" confirmed="no">java.lang.Class.isAssignableFrom(java.lang.Class)</outbound>
                <outbound type="feature" confirmed="no">java.lang.Class.isInterface()</outbound>
                <outbound type="class" confirmed="no">java.lang.ClassLoader</outbound>
                <outbound type="feature" confirmed="no">java.lang.ClassLoader.loadClass(java.lang.String)</outbound>
                <outbound type="class" confirmed="no">java.lang.ClassNotFoundException</outbound>
                <outbound type="feature" confirmed="no">java.lang.RuntimeException.RuntimeException(java.lang.Throwable)</outbound>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="feature" confirmed="no">java.lang.String.replace(char, char)</outbound>
                <outbound type="class" confirmed="no">java.lang.Thread</outbound>
                <outbound type="feature" confirmed="no">java.lang.Thread.currentThread()</outbound>
                <outbound type="feature" confirmed="no">java.lang.Thread.getContextClassLoader()</outbound>
                <outbound type="class" confirmed="no">java.lang.Throwable</outbound>
                <inbound type="feature" confirmed="yes">org.mvel.asm.ClassWriter.getMergedType(int, int)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.asm.ClassWriter.getMergedType(int, int)</name>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.asm.ClassWriter.addType(java.lang.String)</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.asm.ClassWriter.get(org.mvel.asm.Item)</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.asm.ClassWriter.getCommonSuperClass(java.lang.String, java.lang.String)</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.asm.ClassWriter.key2</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.asm.ClassWriter.put(org.mvel.asm.Item)</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.asm.ClassWriter.typeTable</outbound>
                <outbound type="class" confirmed="yes">org.mvel.asm.Item</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.asm.Item.Item(int, org.mvel.asm.Item)</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.asm.Item.hashCode</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.asm.Item.intVal</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.asm.Item.longVal</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.asm.Item.strVal1</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.asm.Item.type</outbound>
                <inbound type="feature" confirmed="yes">org.mvel.asm.Frame.merge(org.mvel.asm.ClassWriter, int, int[], int)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.asm.ClassWriter.ianns</name>
                <outbound type="class" confirmed="yes">org.mvel.asm.AnnotationWriter</outbound>
                <inbound type="feature" confirmed="yes">org.mvel.asm.ClassWriter.toByteArray()</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.asm.ClassWriter.visitAnnotation(java.lang.String, boolean)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.asm.ClassWriter.index</name>
                <inbound type="feature" confirmed="yes">org.mvel.asm.ClassReader.copyPool(org.mvel.asm.ClassWriter)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.asm.ClassWriter.ClassWriter(int)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.asm.ClassWriter.newClassItem(java.lang.String)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.asm.ClassWriter.newDouble(double)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.asm.ClassWriter.newFieldItem(java.lang.String, java.lang.String, java.lang.String)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.asm.ClassWriter.newFloat(float)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.asm.ClassWriter.newInteger(int)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.asm.ClassWriter.newLong(long)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.asm.ClassWriter.newMethodItem(java.lang.String, java.lang.String, java.lang.String, boolean)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.asm.ClassWriter.newNameType(java.lang.String, java.lang.String)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.asm.ClassWriter.newString(java.lang.String)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.asm.ClassWriter.newUTF8(java.lang.String)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.asm.ClassWriter.put(org.mvel.asm.Item)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.asm.ClassWriter.toByteArray()</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.asm.ClassWriter.innerClasses</name>
                <outbound type="class" confirmed="yes">org.mvel.asm.ByteVector</outbound>
                <inbound type="feature" confirmed="yes">org.mvel.asm.ClassWriter.toByteArray()</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.asm.ClassWriter.visitInnerClass(java.lang.String, java.lang.String, java.lang.String, int)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.asm.ClassWriter.innerClassesCount</name>
                <inbound type="feature" confirmed="yes">org.mvel.asm.ClassWriter.toByteArray()</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.asm.ClassWriter.visitInnerClass(java.lang.String, java.lang.String, java.lang.String, int)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.asm.ClassWriter.interfaceCount</name>
                <inbound type="feature" confirmed="yes">org.mvel.asm.ClassWriter.toByteArray()</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.asm.ClassWriter.visit(int, int, java.lang.String, java.lang.String, java.lang.String, java.lang.String[])</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.asm.ClassWriter.interfaces</name>
                <inbound type="feature" confirmed="yes">org.mvel.asm.ClassWriter.toByteArray()</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.asm.ClassWriter.visit(int, int, java.lang.String, java.lang.String, java.lang.String, java.lang.String[])</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.asm.ClassWriter.invalidFrames</name>
                <inbound type="feature" confirmed="yes">org.mvel.asm.ClassWriter.toByteArray()</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.asm.MethodWriter.resizeInstructions()</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.asm.ClassWriter.items</name>
                <outbound type="class" confirmed="yes">org.mvel.asm.Item</outbound>
                <inbound type="feature" confirmed="yes">org.mvel.asm.ClassReader.copyPool(org.mvel.asm.ClassWriter)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.asm.ClassWriter.ClassWriter(int)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.asm.ClassWriter.get(org.mvel.asm.Item)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.asm.ClassWriter.put(org.mvel.asm.Item)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.asm.ClassWriter.key</name>
                <outbound type="class" confirmed="yes">org.mvel.asm.Item</outbound>
                <inbound type="feature" confirmed="yes">org.mvel.asm.ClassWriter.ClassWriter(int)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.asm.ClassWriter.addType(java.lang.String)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.asm.ClassWriter.addType(org.mvel.asm.Item)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.asm.ClassWriter.addUninitializedType(java.lang.String, int)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.asm.ClassWriter.newDouble(double)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.asm.ClassWriter.newFloat(float)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.asm.ClassWriter.newInteger(int)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.asm.ClassWriter.newLong(long)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.asm.ClassWriter.newUTF8(java.lang.String)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.asm.ClassWriter.key2</name>
                <outbound type="class" confirmed="yes">org.mvel.asm.Item</outbound>
                <inbound type="feature" confirmed="yes">org.mvel.asm.ClassWriter.ClassWriter(int)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.asm.ClassWriter.getMergedType(int, int)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.asm.ClassWriter.newClassItem(java.lang.String)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.asm.ClassWriter.newNameType(java.lang.String, java.lang.String)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.asm.ClassWriter.newString(java.lang.String)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.asm.ClassWriter.key3</name>
                <outbound type="class" confirmed="yes">org.mvel.asm.Item</outbound>
                <inbound type="feature" confirmed="yes">org.mvel.asm.ClassWriter.ClassWriter(int)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.asm.ClassWriter.newFieldItem(java.lang.String, java.lang.String, java.lang.String)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.asm.ClassWriter.newMethodItem(java.lang.String, java.lang.String, java.lang.String, boolean)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.asm.ClassWriter.lastField</name>
                <outbound type="class" confirmed="yes">org.mvel.asm.FieldWriter</outbound>
                <inbound type="feature" confirmed="yes">org.mvel.asm.FieldWriter.FieldWriter(org.mvel.asm.ClassWriter, int, java.lang.String, java.lang.String, java.lang.String, java.lang.Object)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.asm.ClassWriter.lastMethod</name>
                <outbound type="class" confirmed="yes">org.mvel.asm.MethodWriter</outbound>
                <inbound type="feature" confirmed="yes">org.mvel.asm.MethodWriter.MethodWriter(org.mvel.asm.ClassWriter, int, java.lang.String, java.lang.String, java.lang.String, java.lang.String[], boolean, boolean)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.asm.ClassWriter.name</name>
                <inbound type="feature" confirmed="yes">org.mvel.asm.ClassWriter.toByteArray()</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.asm.ClassWriter.visit(int, int, java.lang.String, java.lang.String, java.lang.String, java.lang.String[])</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.asm.ClassWriter.newClass(java.lang.String)</name>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.asm.ClassWriter.newClassItem(java.lang.String)</outbound>
                <outbound type="class" confirmed="yes">org.mvel.asm.Item</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.asm.Item.index</outbound>
                <inbound type="feature" confirmed="yes">org.mvel.asm.ClassWriter.newFieldItem(java.lang.String, java.lang.String, java.lang.String)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.asm.ClassWriter.newMethodItem(java.lang.String, java.lang.String, java.lang.String, boolean)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.asm.ClassWriter.visit(int, int, java.lang.String, java.lang.String, java.lang.String, java.lang.String[])</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.asm.ClassWriter.visitInnerClass(java.lang.String, java.lang.String, java.lang.String, int)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.asm.ClassWriter.visitOuterClass(java.lang.String, java.lang.String, java.lang.String)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.asm.MethodWriter.MethodWriter(org.mvel.asm.ClassWriter, int, java.lang.String, java.lang.String, java.lang.String, java.lang.String[], boolean, boolean)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.asm.MethodWriter.visitTryCatchBlock(org.mvel.asm.Label, org.mvel.asm.Label, org.mvel.asm.Label, java.lang.String)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.asm.MethodWriter.writeFrameType(java.lang.Object)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.asm.MethodWriter.writeFrameTypes(int, int)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.asm.ClassWriter.newClassItem(java.lang.String)</name>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="class" confirmed="yes">org.mvel.asm.ByteVector</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.asm.ByteVector.put12(int, int)</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.asm.ClassWriter.get(org.mvel.asm.Item)</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.asm.ClassWriter.index</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.asm.ClassWriter.key2</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.asm.ClassWriter.newUTF8(java.lang.String)</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.asm.ClassWriter.pool</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.asm.ClassWriter.put(org.mvel.asm.Item)</outbound>
                <outbound type="class" confirmed="yes">org.mvel.asm.Item</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.asm.Item.Item(int, org.mvel.asm.Item)</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.asm.Item.set(int, java.lang.String, java.lang.String, java.lang.String)</outbound>
                <inbound type="feature" confirmed="yes">org.mvel.asm.ClassWriter.newClass(java.lang.String)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.asm.ClassWriter.newConstItem(java.lang.Object)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.asm.MethodWriter.visitMultiANewArrayInsn(java.lang.String, int)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.asm.MethodWriter.visitTypeInsn(int, java.lang.String)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.asm.ClassWriter.newConst(java.lang.Object)</name>
                <outbound type="class" confirmed="no">java.lang.Object</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.asm.ClassWriter.newConstItem(java.lang.Object)</outbound>
                <outbound type="class" confirmed="yes">org.mvel.asm.Item</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.asm.Item.index</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.asm.ClassWriter.newConstItem(java.lang.Object)</name>
                <outbound type="class" confirmed="no">java.lang.Boolean</outbound>
                <outbound type="feature" confirmed="no">java.lang.Boolean.booleanValue()</outbound>
                <outbound type="class" confirmed="no">java.lang.Byte</outbound>
                <outbound type="feature" confirmed="no">java.lang.Byte.intValue()</outbound>
                <outbound type="class" confirmed="no">java.lang.Character</outbound>
                <outbound type="feature" confirmed="no">java.lang.Character.charValue()</outbound>
                <outbound type="class" confirmed="no">java.lang.Double</outbound>
                <outbound type="feature" confirmed="no">java.lang.Double.doubleValue()</outbound>
                <outbound type="class" confirmed="no">java.lang.Float</outbound>
                <outbound type="feature" confirmed="no">java.lang.Float.floatValue()</outbound>
                <outbound type="feature" confirmed="no">java.lang.IllegalArgumentException.IllegalArgumentException(java.lang.String)</outbound>
                <outbound type="class" confirmed="no">java.lang.Integer</outbound>
                <outbound type="feature" confirmed="no">java.lang.Integer.intValue()</outbound>
                <outbound type="class" confirmed="no">java.lang.Long</outbound>
                <outbound type="feature" confirmed="no">java.lang.Long.longValue()</outbound>
                <outbound type="class" confirmed="no">java.lang.Object</outbound>
                <outbound type="class" confirmed="no">java.lang.Short</outbound>
                <outbound type="feature" confirmed="no">java.lang.Short.intValue()</outbound>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="class" confirmed="no">java.lang.StringBuffer</outbound>
                <outbound type="feature" confirmed="no">java.lang.StringBuffer.StringBuffer(java.lang.String)</outbound>
                <outbound type="feature" confirmed="no">java.lang.StringBuffer.append(java.lang.Object)</outbound>
                <outbound type="feature" confirmed="no">java.lang.StringBuffer.toString()</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.asm.ClassWriter.newClassItem(java.lang.String)</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.asm.ClassWriter.newDouble(double)</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.asm.ClassWriter.newFloat(float)</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.asm.ClassWriter.newInteger(int)</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.asm.ClassWriter.newLong(long)</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.asm.ClassWriter.newString(java.lang.String)</outbound>
                <outbound type="class" confirmed="yes">org.mvel.asm.Item</outbound>
                <outbound type="class" confirmed="yes">org.mvel.asm.Type</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.asm.Type.getDescriptor()</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.asm.Type.getInternalName()</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.asm.Type.getSort()</outbound>
                <inbound type="feature" confirmed="yes">org.mvel.asm.AnnotationWriter.visit(java.lang.String, java.lang.Object)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.asm.ClassWriter.newConst(java.lang.Object)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.asm.FieldWriter.FieldWriter(org.mvel.asm.ClassWriter, int, java.lang.String, java.lang.String, java.lang.String, java.lang.Object)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.asm.MethodWriter.visitLdcInsn(java.lang.Object)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.asm.ClassWriter.newDouble(double)</name>
                <outbound type="class" confirmed="yes">org.mvel.asm.ByteVector</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.asm.ByteVector.putByte(int)</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.asm.ByteVector.putLong(long)</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.asm.ClassWriter.get(org.mvel.asm.Item)</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.asm.ClassWriter.index</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.asm.ClassWriter.key</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.asm.ClassWriter.pool</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.asm.ClassWriter.put(org.mvel.asm.Item)</outbound>
                <outbound type="class" confirmed="yes">org.mvel.asm.Item</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.asm.Item.Item(int, org.mvel.asm.Item)</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.asm.Item.longVal</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.asm.Item.set(double)</outbound>
                <inbound type="feature" confirmed="yes">org.mvel.asm.AnnotationWriter.visit(java.lang.String, java.lang.Object)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.asm.ClassWriter.newConstItem(java.lang.Object)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.asm.ClassWriter.newField(java.lang.String, java.lang.String, java.lang.String)</name>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.asm.ClassWriter.newFieldItem(java.lang.String, java.lang.String, java.lang.String)</outbound>
                <outbound type="class" confirmed="yes">org.mvel.asm.Item</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.asm.Item.index</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.asm.ClassWriter.newFieldItem(java.lang.String, java.lang.String, java.lang.String)</name>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.asm.ClassWriter.get(org.mvel.asm.Item)</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.asm.ClassWriter.index</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.asm.ClassWriter.key3</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.asm.ClassWriter.newClass(java.lang.String)</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.asm.ClassWriter.newNameType(java.lang.String, java.lang.String)</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.asm.ClassWriter.put(org.mvel.asm.Item)</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.asm.ClassWriter.put122(int, int, int)</outbound>
                <outbound type="class" confirmed="yes">org.mvel.asm.Item</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.asm.Item.Item(int, org.mvel.asm.Item)</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.asm.Item.set(int, java.lang.String, java.lang.String, java.lang.String)</outbound>
                <inbound type="feature" confirmed="yes">org.mvel.asm.ClassWriter.newField(java.lang.String, java.lang.String, java.lang.String)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.asm.MethodWriter.visitFieldInsn(int, java.lang.String, java.lang.String, java.lang.String)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.asm.ClassWriter.newFloat(float)</name>
                <outbound type="class" confirmed="yes">org.mvel.asm.ByteVector</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.asm.ByteVector.putByte(int)</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.asm.ByteVector.putInt(int)</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.asm.ClassWriter.get(org.mvel.asm.Item)</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.asm.ClassWriter.index</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.asm.ClassWriter.key</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.asm.ClassWriter.pool</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.asm.ClassWriter.put(org.mvel.asm.Item)</outbound>
                <outbound type="class" confirmed="yes">org.mvel.asm.Item</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.asm.Item.Item(int, org.mvel.asm.Item)</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.asm.Item.intVal</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.asm.Item.set(float)</outbound>
                <inbound type="feature" confirmed="yes">org.mvel.asm.AnnotationWriter.visit(java.lang.String, java.lang.Object)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.asm.ClassWriter.newConstItem(java.lang.Object)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.asm.ClassWriter.newInteger(int)</name>
                <outbound type="class" confirmed="yes">org.mvel.asm.ByteVector</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.asm.ByteVector.putByte(int)</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.asm.ByteVector.putInt(int)</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.asm.ClassWriter.get(org.mvel.asm.Item)</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.asm.ClassWriter.index</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.asm.ClassWriter.key</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.asm.ClassWriter.pool</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.asm.ClassWriter.put(org.mvel.asm.Item)</outbound>
                <outbound type="class" confirmed="yes">org.mvel.asm.Item</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.asm.Item.Item(int, org.mvel.asm.Item)</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.asm.Item.set(int)</outbound>
                <inbound type="feature" confirmed="yes">org.mvel.asm.AnnotationWriter.visit(java.lang.String, java.lang.Object)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.asm.ClassWriter.newConstItem(java.lang.Object)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.asm.ClassWriter.newLong(long)</name>
                <outbound type="class" confirmed="yes">org.mvel.asm.ByteVector</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.asm.ByteVector.putByte(int)</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.asm.ByteVector.putLong(long)</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.asm.ClassWriter.get(org.mvel.asm.Item)</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.asm.ClassWriter.index</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.asm.ClassWriter.key</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.asm.ClassWriter.pool</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.asm.ClassWriter.put(org.mvel.asm.Item)</outbound>
                <outbound type="class" confirmed="yes">org.mvel.asm.Item</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.asm.Item.Item(int, org.mvel.asm.Item)</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.asm.Item.set(long)</outbound>
                <inbound type="feature" confirmed="yes">org.mvel.asm.AnnotationWriter.visit(java.lang.String, java.lang.Object)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.asm.ClassWriter.newConstItem(java.lang.Object)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.asm.ClassWriter.newMethod(java.lang.String, java.lang.String, java.lang.String, boolean)</name>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.asm.ClassWriter.newMethodItem(java.lang.String, java.lang.String, java.lang.String, boolean)</outbound>
                <outbound type="class" confirmed="yes">org.mvel.asm.Item</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.asm.Item.index</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.asm.ClassWriter.newMethodItem(java.lang.String, java.lang.String, java.lang.String, boolean)</name>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.asm.ClassWriter.get(org.mvel.asm.Item)</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.asm.ClassWriter.index</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.asm.ClassWriter.key3</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.asm.ClassWriter.newClass(java.lang.String)</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.asm.ClassWriter.newNameType(java.lang.String, java.lang.String)</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.asm.ClassWriter.put(org.mvel.asm.Item)</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.asm.ClassWriter.put122(int, int, int)</outbound>
                <outbound type="class" confirmed="yes">org.mvel.asm.Item</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.asm.Item.Item(int, org.mvel.asm.Item)</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.asm.Item.set(int, java.lang.String, java.lang.String, java.lang.String)</outbound>
                <inbound type="feature" confirmed="yes">org.mvel.asm.ClassWriter.newMethod(java.lang.String, java.lang.String, java.lang.String, boolean)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.asm.MethodWriter.visitMethodInsn(int, java.lang.String, java.lang.String, java.lang.String)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.asm.ClassWriter.newNameType(java.lang.String, java.lang.String)</name>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.asm.ClassWriter.get(org.mvel.asm.Item)</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.asm.ClassWriter.index</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.asm.ClassWriter.key2</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.asm.ClassWriter.newUTF8(java.lang.String)</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.asm.ClassWriter.put(org.mvel.asm.Item)</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.asm.ClassWriter.put122(int, int, int)</outbound>
                <outbound type="class" confirmed="yes">org.mvel.asm.Item</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.asm.Item.Item(int, org.mvel.asm.Item)</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.asm.Item.index</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.asm.Item.set(int, java.lang.String, java.lang.String, java.lang.String)</outbound>
                <inbound type="feature" confirmed="yes">org.mvel.asm.ClassWriter.newFieldItem(java.lang.String, java.lang.String, java.lang.String)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.asm.ClassWriter.newMethodItem(java.lang.String, java.lang.String, java.lang.String, boolean)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.asm.ClassWriter.visitOuterClass(java.lang.String, java.lang.String, java.lang.String)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.asm.ClassWriter.newString(java.lang.String)</name>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="class" confirmed="yes">org.mvel.asm.ByteVector</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.asm.ByteVector.put12(int, int)</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.asm.ClassWriter.get(org.mvel.asm.Item)</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.asm.ClassWriter.index</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.asm.ClassWriter.key2</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.asm.ClassWriter.newUTF8(java.lang.String)</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.asm.ClassWriter.pool</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.asm.ClassWriter.put(org.mvel.asm.Item)</outbound>
                <outbound type="class" confirmed="yes">org.mvel.asm.Item</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.asm.Item.Item(int, org.mvel.asm.Item)</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.asm.Item.set(int, java.lang.String, java.lang.String, java.lang.String)</outbound>
                <inbound type="feature" confirmed="yes">org.mvel.asm.ClassWriter.newConstItem(java.lang.Object)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.asm.ClassWriter.newUTF8(java.lang.String)</name>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="class" confirmed="yes">org.mvel.asm.ByteVector</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.asm.ByteVector.putByte(int)</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.asm.ByteVector.putUTF8(java.lang.String)</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.asm.ClassWriter.get(org.mvel.asm.Item)</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.asm.ClassWriter.index</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.asm.ClassWriter.key</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.asm.ClassWriter.pool</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.asm.ClassWriter.put(org.mvel.asm.Item)</outbound>
                <outbound type="class" confirmed="yes">org.mvel.asm.Item</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.asm.Item.Item(int, org.mvel.asm.Item)</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.asm.Item.index</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.asm.Item.set(int, java.lang.String, java.lang.String, java.lang.String)</outbound>
                <inbound type="feature" confirmed="yes">org.mvel.asm.AnnotationWriter.visit(java.lang.String, java.lang.Object)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.asm.AnnotationWriter.visitAnnotation(java.lang.String, java.lang.String)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.asm.AnnotationWriter.visitArray(java.lang.String)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.asm.AnnotationWriter.visitEnum(java.lang.String, java.lang.String, java.lang.String)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.asm.Attribute.getSize(org.mvel.asm.ClassWriter, byte[], int, int, int)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.asm.Attribute.put(org.mvel.asm.ClassWriter, byte[], int, int, int, org.mvel.asm.ByteVector)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.asm.ClassWriter.newClassItem(java.lang.String)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.asm.ClassWriter.newNameType(java.lang.String, java.lang.String)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.asm.ClassWriter.newString(java.lang.String)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.asm.ClassWriter.toByteArray()</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.asm.ClassWriter.visit(int, int, java.lang.String, java.lang.String, java.lang.String, java.lang.String[])</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.asm.ClassWriter.visitAnnotation(java.lang.String, boolean)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.asm.ClassWriter.visitInnerClass(java.lang.String, java.lang.String, java.lang.String, int)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.asm.ClassWriter.visitSource(java.lang.String, java.lang.String)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.asm.FieldWriter.FieldWriter(org.mvel.asm.ClassWriter, int, java.lang.String, java.lang.String, java.lang.String, java.lang.Object)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.asm.FieldWriter.getSize()</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.asm.FieldWriter.put(org.mvel.asm.ByteVector)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.asm.FieldWriter.visitAnnotation(java.lang.String, boolean)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.asm.MethodWriter.MethodWriter(org.mvel.asm.ClassWriter, int, java.lang.String, java.lang.String, java.lang.String, java.lang.String[], boolean, boolean)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.asm.MethodWriter.getSize()</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.asm.MethodWriter.put(org.mvel.asm.ByteVector)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.asm.MethodWriter.visitAnnotation(java.lang.String, boolean)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.asm.MethodWriter.visitLocalVariable(java.lang.String, java.lang.String, java.lang.String, org.mvel.asm.Label, org.mvel.asm.Label, int)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.asm.MethodWriter.visitParameterAnnotation(int, java.lang.String, boolean)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.asm.ClassWriter.pool</name>
                <outbound type="class" confirmed="yes">org.mvel.asm.ByteVector</outbound>
                <inbound type="feature" confirmed="yes">org.mvel.asm.ClassReader.copyPool(org.mvel.asm.ClassWriter)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.asm.ClassWriter.ClassWriter(int)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.asm.ClassWriter.newClassItem(java.lang.String)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.asm.ClassWriter.newDouble(double)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.asm.ClassWriter.newFloat(float)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.asm.ClassWriter.newInteger(int)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.asm.ClassWriter.newLong(long)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.asm.ClassWriter.newString(java.lang.String)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.asm.ClassWriter.newUTF8(java.lang.String)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.asm.ClassWriter.put122(int, int, int)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.asm.ClassWriter.toByteArray()</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.asm.ClassWriter.put(org.mvel.asm.Item)</name>
                <outbound type="feature" confirmed="yes">org.mvel.asm.ClassWriter.index</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.asm.ClassWriter.items</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.asm.ClassWriter.threshold</outbound>
                <outbound type="class" confirmed="yes">org.mvel.asm.Item</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.asm.Item.hashCode</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.asm.Item.next</outbound>
                <inbound type="feature" confirmed="yes">org.mvel.asm.ClassWriter.addType(org.mvel.asm.Item)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.asm.ClassWriter.getMergedType(int, int)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.asm.ClassWriter.newClassItem(java.lang.String)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.asm.ClassWriter.newDouble(double)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.asm.ClassWriter.newFieldItem(java.lang.String, java.lang.String, java.lang.String)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.asm.ClassWriter.newFloat(float)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.asm.ClassWriter.newInteger(int)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.asm.ClassWriter.newLong(long)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.asm.ClassWriter.newMethodItem(java.lang.String, java.lang.String, java.lang.String, boolean)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.asm.ClassWriter.newNameType(java.lang.String, java.lang.String)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.asm.ClassWriter.newString(java.lang.String)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.asm.ClassWriter.newUTF8(java.lang.String)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.asm.ClassWriter.put122(int, int, int)</name>
                <outbound type="class" confirmed="yes">org.mvel.asm.ByteVector</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.asm.ByteVector.put12(int, int)</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.asm.ByteVector.putShort(int)</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.asm.ClassWriter.pool</outbound>
                <inbound type="feature" confirmed="yes">org.mvel.asm.ClassWriter.newFieldItem(java.lang.String, java.lang.String, java.lang.String)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.asm.ClassWriter.newMethodItem(java.lang.String, java.lang.String, java.lang.String, boolean)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.asm.ClassWriter.newNameType(java.lang.String, java.lang.String)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.asm.ClassWriter.signature</name>
                <inbound type="feature" confirmed="yes">org.mvel.asm.ClassWriter.toByteArray()</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.asm.ClassWriter.visit(int, int, java.lang.String, java.lang.String, java.lang.String, java.lang.String[])</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.asm.ClassWriter.sourceDebug</name>
                <outbound type="class" confirmed="yes">org.mvel.asm.ByteVector</outbound>
                <inbound type="feature" confirmed="yes">org.mvel.asm.ClassWriter.toByteArray()</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.asm.ClassWriter.visitSource(java.lang.String, java.lang.String)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.asm.ClassWriter.sourceFile</name>
                <inbound type="feature" confirmed="yes">org.mvel.asm.ClassWriter.toByteArray()</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.asm.ClassWriter.visitSource(java.lang.String, java.lang.String)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.asm.ClassWriter.static {}</name>
                <outbound type="feature" confirmed="no">java.lang.String.charAt(int)</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.asm.ClassWriter.TYPE</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.asm.ClassWriter.superName</name>
                <inbound type="feature" confirmed="yes">org.mvel.asm.ClassWriter.toByteArray()</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.asm.ClassWriter.visit(int, int, java.lang.String, java.lang.String, java.lang.String, java.lang.String[])</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.asm.ClassWriter.thisName</name>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <inbound type="feature" confirmed="yes">org.mvel.asm.ClassWriter.visit(int, int, java.lang.String, java.lang.String, java.lang.String, java.lang.String[])</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.asm.Frame.init(org.mvel.asm.ClassWriter, int)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.asm.Frame.initInputFrame(org.mvel.asm.ClassWriter, int, org.mvel.asm.Type[], int)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.asm.ClassWriter.threshold</name>
                <inbound type="feature" confirmed="yes">org.mvel.asm.ClassReader.copyPool(org.mvel.asm.ClassWriter)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.asm.ClassWriter.ClassWriter(int)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.asm.ClassWriter.put(org.mvel.asm.Item)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.asm.ClassWriter.toByteArray()</name>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="class" confirmed="yes">org.mvel.asm.AnnotationWriter</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.asm.AnnotationWriter.getSize()</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.asm.AnnotationWriter.put(org.mvel.asm.ByteVector)</outbound>
                <outbound type="class" confirmed="yes">org.mvel.asm.Attribute</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.asm.Attribute.getCount()</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.asm.Attribute.getSize(org.mvel.asm.ClassWriter, byte[], int, int, int)</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.asm.Attribute.put(org.mvel.asm.ClassWriter, byte[], int, int, int, org.mvel.asm.ByteVector)</outbound>
                <outbound type="class" confirmed="yes">org.mvel.asm.ByteVector</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.asm.ByteVector.ByteVector(int)</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.asm.ByteVector.data</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.asm.ByteVector.length</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.asm.ByteVector.putByteArray(byte[], int, int)</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.asm.ByteVector.putInt(int)</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.asm.ByteVector.putShort(int)</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.asm.ClassReader.ClassReader(byte[])</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.asm.ClassReader.accept(org.mvel.asm.ClassVisitor, int)</outbound>
                <outbound type="class" confirmed="yes">org.mvel.asm.ClassVisitor</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.asm.ClassWriter.ClassWriter(int)</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.asm.ClassWriter.access</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.asm.ClassWriter.anns</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.asm.ClassWriter.attrs</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.asm.ClassWriter.enclosingMethod</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.asm.ClassWriter.enclosingMethodOwner</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.asm.ClassWriter.firstField</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.asm.ClassWriter.firstMethod</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.asm.ClassWriter.ianns</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.asm.ClassWriter.index</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.asm.ClassWriter.innerClasses</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.asm.ClassWriter.innerClassesCount</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.asm.ClassWriter.interfaceCount</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.asm.ClassWriter.interfaces</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.asm.ClassWriter.invalidFrames</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.asm.ClassWriter.name</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.asm.ClassWriter.newUTF8(java.lang.String)</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.asm.ClassWriter.pool</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.asm.ClassWriter.signature</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.asm.ClassWriter.sourceDebug</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.asm.ClassWriter.sourceFile</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.asm.ClassWriter.superName</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.asm.ClassWriter.version</outbound>
                <outbound type="class" confirmed="yes">org.mvel.asm.FieldWriter</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.asm.FieldWriter.getSize()</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.asm.FieldWriter.next</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.asm.FieldWriter.put(org.mvel.asm.ByteVector)</outbound>
                <outbound type="class" confirmed="yes">org.mvel.asm.MethodWriter</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.asm.MethodWriter.getSize()</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.asm.MethodWriter.next</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.asm.MethodWriter.put(org.mvel.asm.ByteVector)</outbound>
                <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.asm.ASMAccessorOptimizer._initializeAccessor()</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.asm.ClassWriter.typeCount</name>
                <inbound type="feature" confirmed="yes">org.mvel.asm.ClassWriter.addType(org.mvel.asm.Item)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.asm.ClassWriter.typeTable</name>
                <outbound type="class" confirmed="yes">org.mvel.asm.Item</outbound>
                <inbound type="feature" confirmed="yes">org.mvel.asm.ClassWriter.addType(org.mvel.asm.Item)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.asm.ClassWriter.getMergedType(int, int)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.asm.Frame.init(org.mvel.asm.ClassWriter, int)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.asm.MethodWriter.writeFrameTypes(int, int)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.asm.ClassWriter.version</name>
                <inbound type="feature" confirmed="yes">org.mvel.asm.ClassWriter.toByteArray()</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.asm.ClassWriter.visit(int, int, java.lang.String, java.lang.String, java.lang.String, java.lang.String[])</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.asm.FieldWriter.getSize()</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.asm.FieldWriter.put(org.mvel.asm.ByteVector)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.asm.MethodWriter.getSize()</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.asm.MethodWriter.put(org.mvel.asm.ByteVector)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.asm.MethodWriter.writeFrame()</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.asm.ClassWriter.visit(int, int, java.lang.String, java.lang.String, java.lang.String, java.lang.String[])</name>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.asm.ClassWriter.access</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.asm.ClassWriter.interfaceCount</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.asm.ClassWriter.interfaces</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.asm.ClassWriter.name</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.asm.ClassWriter.newClass(java.lang.String)</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.asm.ClassWriter.newUTF8(java.lang.String)</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.asm.ClassWriter.signature</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.asm.ClassWriter.superName</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.asm.ClassWriter.thisName</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.asm.ClassWriter.version</outbound>
                <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.asm.ASMAccessorOptimizer._initJIT()</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.asm.ClassWriter.visitAnnotation(java.lang.String, boolean)</name>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="class" confirmed="yes">org.mvel.asm.AnnotationVisitor</outbound>
                <outbound type="class" confirmed="yes">org.mvel.asm.AnnotationWriter</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.asm.AnnotationWriter.AnnotationWriter(org.mvel.asm.ClassWriter, boolean, org.mvel.asm.ByteVector, org.mvel.asm.ByteVector, int)</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.asm.AnnotationWriter.next</outbound>
                <outbound type="class" confirmed="yes">org.mvel.asm.ByteVector</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.asm.ByteVector.ByteVector()</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.asm.ByteVector.putShort(int)</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.asm.ClassWriter.anns</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.asm.ClassWriter.ianns</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.asm.ClassWriter.newUTF8(java.lang.String)</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.asm.ClassWriter.visitAttribute(org.mvel.asm.Attribute)</name>
                <outbound type="class" confirmed="yes">org.mvel.asm.Attribute</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.asm.Attribute.next</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.asm.ClassWriter.attrs</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.asm.ClassWriter.visitEnd()</name>
                <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.asm.ASMAccessorOptimizer._finishJIT()</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.asm.ClassWriter.visitField(int, java.lang.String, java.lang.String, java.lang.String, java.lang.Object)</name>
                <outbound type="class" confirmed="no">java.lang.Object</outbound>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="class" confirmed="yes">org.mvel.asm.FieldVisitor</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.asm.FieldWriter.FieldWriter(org.mvel.asm.ClassWriter, int, java.lang.String, java.lang.String, java.lang.String, java.lang.Object)</outbound>
                <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.asm.ASMAccessorOptimizer.buildInputs()</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.asm.ClassWriter.visitInnerClass(java.lang.String, java.lang.String, java.lang.String, int)</name>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="class" confirmed="yes">org.mvel.asm.ByteVector</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.asm.ByteVector.ByteVector()</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.asm.ByteVector.putShort(int)</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.asm.ClassWriter.innerClasses</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.asm.ClassWriter.innerClassesCount</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.asm.ClassWriter.newClass(java.lang.String)</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.asm.ClassWriter.newUTF8(java.lang.String)</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.asm.ClassWriter.visitMethod(int, java.lang.String, java.lang.String, java.lang.String, java.lang.String[])</name>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.asm.ClassWriter.computeFrames</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.asm.ClassWriter.computeMaxs</outbound>
                <outbound type="class" confirmed="yes">org.mvel.asm.MethodVisitor</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.asm.MethodWriter.MethodWriter(org.mvel.asm.ClassWriter, int, java.lang.String, java.lang.String, java.lang.String, java.lang.String[], boolean, boolean)</outbound>
                <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.asm.ASMAccessorOptimizer._initJIT()</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.asm.ASMAccessorOptimizer.buildInputs()</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.asm.ClassWriter.visitOuterClass(java.lang.String, java.lang.String, java.lang.String)</name>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.asm.ClassWriter.enclosingMethod</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.asm.ClassWriter.enclosingMethodOwner</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.asm.ClassWriter.newClass(java.lang.String)</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.asm.ClassWriter.newNameType(java.lang.String, java.lang.String)</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.asm.ClassWriter.visitSource(java.lang.String, java.lang.String)</name>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="class" confirmed="yes">org.mvel.asm.ByteVector</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.asm.ByteVector.ByteVector()</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.asm.ByteVector.putUTF8(java.lang.String)</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.asm.ClassWriter.newUTF8(java.lang.String)</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.asm.ClassWriter.sourceDebug</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.asm.ClassWriter.sourceFile</outbound>
            </feature>
        </class>
        <class confirmed="yes">
            <name>org.mvel.asm.Edge</name>
            <outbound type="class" confirmed="no">java.lang.Object</outbound>
            <inbound type="feature" confirmed="yes">org.mvel.asm.Label.successors</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.asm.MethodWriter.addSuccessor(int, org.mvel.asm.Label)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.asm.MethodWriter.findSubroutine(org.mvel.asm.Label, int)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.asm.MethodWriter.findSubroutineSuccessors(int, org.mvel.asm.Label[], int)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.asm.MethodWriter.visitMaxs(int, int)</inbound>
            <feature confirmed="yes">
                <name>org.mvel.asm.Edge.EXCEPTION</name>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.asm.Edge.Edge()</name>
                <outbound type="feature" confirmed="no">java.lang.Object.Object()</outbound>
                <inbound type="feature" confirmed="yes">org.mvel.asm.MethodWriter.addSuccessor(int, org.mvel.asm.Label)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.asm.MethodWriter.findSubroutineSuccessors(int, org.mvel.asm.Label[], int)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.asm.MethodWriter.visitMaxs(int, int)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.asm.Edge.NORMAL</name>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.asm.Edge.info</name>
                <inbound type="feature" confirmed="yes">org.mvel.asm.MethodWriter.addSuccessor(int, org.mvel.asm.Label)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.asm.MethodWriter.findSubroutineSuccessors(int, org.mvel.asm.Label[], int)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.asm.MethodWriter.visitMaxs(int, int)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.asm.Edge.next</name>
                <inbound type="feature" confirmed="yes">org.mvel.asm.MethodWriter.addSuccessor(int, org.mvel.asm.Label)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.asm.MethodWriter.findSubroutine(org.mvel.asm.Label, int)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.asm.MethodWriter.findSubroutineSuccessors(int, org.mvel.asm.Label[], int)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.asm.MethodWriter.visitMaxs(int, int)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.asm.Edge.successor</name>
                <outbound type="class" confirmed="yes">org.mvel.asm.Label</outbound>
                <inbound type="feature" confirmed="yes">org.mvel.asm.MethodWriter.addSuccessor(int, org.mvel.asm.Label)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.asm.MethodWriter.findSubroutine(org.mvel.asm.Label, int)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.asm.MethodWriter.findSubroutineSuccessors(int, org.mvel.asm.Label[], int)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.asm.MethodWriter.visitMaxs(int, int)</inbound>
            </feature>
        </class>
        <class confirmed="yes">
            <name>org.mvel.asm.FieldVisitor</name>
            <outbound type="class" confirmed="no">java.lang.Object</outbound>
            <inbound type="feature" confirmed="yes">org.mvel.asm.ClassAdapter.visitField(int, java.lang.String, java.lang.String, java.lang.String, java.lang.Object)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.asm.ClassReader.accept(org.mvel.asm.ClassVisitor, org.mvel.asm.Attribute[], int)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.asm.ClassVisitor.visitField(int, java.lang.String, java.lang.String, java.lang.String, java.lang.Object)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.asm.ClassWriter.visitField(int, java.lang.String, java.lang.String, java.lang.String, java.lang.Object)</inbound>
            <inbound type="class" confirmed="yes">org.mvel.asm.FieldWriter</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.asm.ASMAccessorOptimizer.buildInputs()</inbound>
            <feature confirmed="yes">
                <name>org.mvel.asm.FieldVisitor.visitAnnotation(java.lang.String, boolean)</name>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="class" confirmed="yes">org.mvel.asm.AnnotationVisitor</outbound>
                <inbound type="feature" confirmed="yes">org.mvel.asm.ClassReader.accept(org.mvel.asm.ClassVisitor, org.mvel.asm.Attribute[], int)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.asm.FieldVisitor.visitAttribute(org.mvel.asm.Attribute)</name>
                <outbound type="class" confirmed="yes">org.mvel.asm.Attribute</outbound>
                <inbound type="feature" confirmed="yes">org.mvel.asm.ClassReader.accept(org.mvel.asm.ClassVisitor, org.mvel.asm.Attribute[], int)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.asm.FieldVisitor.visitEnd()</name>
                <inbound type="feature" confirmed="yes">org.mvel.asm.ClassReader.accept(org.mvel.asm.ClassVisitor, org.mvel.asm.Attribute[], int)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.asm.ASMAccessorOptimizer.buildInputs()</inbound>
            </feature>
        </class>
        <class confirmed="yes">
            <name>org.mvel.asm.FieldWriter</name>
            <outbound type="class" confirmed="no">java.lang.Object</outbound>
            <outbound type="class" confirmed="yes">org.mvel.asm.FieldVisitor</outbound>
            <inbound type="feature" confirmed="yes">org.mvel.asm.ClassWriter.firstField</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.asm.ClassWriter.lastField</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.asm.ClassWriter.toByteArray()</inbound>
            <feature confirmed="yes">
                <name>org.mvel.asm.FieldWriter.FieldWriter(org.mvel.asm.ClassWriter, int, java.lang.String, java.lang.String, java.lang.String, java.lang.Object)</name>
                <outbound type="class" confirmed="no">java.lang.Object</outbound>
                <outbound type="feature" confirmed="no">java.lang.Object.Object()</outbound>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="class" confirmed="yes">org.mvel.asm.ClassWriter</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.asm.ClassWriter.firstField</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.asm.ClassWriter.lastField</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.asm.ClassWriter.newConstItem(java.lang.Object)</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.asm.ClassWriter.newUTF8(java.lang.String)</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.asm.FieldWriter.access</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.asm.FieldWriter.cw</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.asm.FieldWriter.desc</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.asm.FieldWriter.name</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.asm.FieldWriter.next</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.asm.FieldWriter.signature</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.asm.FieldWriter.value</outbound>
                <outbound type="class" confirmed="yes">org.mvel.asm.Item</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.asm.Item.index</outbound>
                <inbound type="feature" confirmed="yes">org.mvel.asm.ClassWriter.visitField(int, java.lang.String, java.lang.String, java.lang.String, java.lang.Object)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.asm.FieldWriter.access</name>
                <inbound type="feature" confirmed="yes">org.mvel.asm.FieldWriter.FieldWriter(org.mvel.asm.ClassWriter, int, java.lang.String, java.lang.String, java.lang.String, java.lang.Object)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.asm.FieldWriter.getSize()</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.asm.FieldWriter.put(org.mvel.asm.ByteVector)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.asm.FieldWriter.anns</name>
                <outbound type="class" confirmed="yes">org.mvel.asm.AnnotationWriter</outbound>
                <inbound type="feature" confirmed="yes">org.mvel.asm.FieldWriter.getSize()</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.asm.FieldWriter.put(org.mvel.asm.ByteVector)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.asm.FieldWriter.visitAnnotation(java.lang.String, boolean)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.asm.FieldWriter.attrs</name>
                <outbound type="class" confirmed="yes">org.mvel.asm.Attribute</outbound>
                <inbound type="feature" confirmed="yes">org.mvel.asm.FieldWriter.getSize()</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.asm.FieldWriter.put(org.mvel.asm.ByteVector)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.asm.FieldWriter.visitAttribute(org.mvel.asm.Attribute)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.asm.FieldWriter.cw</name>
                <outbound type="class" confirmed="yes">org.mvel.asm.ClassWriter</outbound>
                <inbound type="feature" confirmed="yes">org.mvel.asm.FieldWriter.FieldWriter(org.mvel.asm.ClassWriter, int, java.lang.String, java.lang.String, java.lang.String, java.lang.Object)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.asm.FieldWriter.getSize()</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.asm.FieldWriter.put(org.mvel.asm.ByteVector)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.asm.FieldWriter.visitAnnotation(java.lang.String, boolean)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.asm.FieldWriter.desc</name>
                <inbound type="feature" confirmed="yes">org.mvel.asm.FieldWriter.FieldWriter(org.mvel.asm.ClassWriter, int, java.lang.String, java.lang.String, java.lang.String, java.lang.Object)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.asm.FieldWriter.put(org.mvel.asm.ByteVector)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.asm.FieldWriter.getSize()</name>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="class" confirmed="yes">org.mvel.asm.AnnotationWriter</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.asm.AnnotationWriter.getSize()</outbound>
                <outbound type="class" confirmed="yes">org.mvel.asm.Attribute</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.asm.Attribute.getSize(org.mvel.asm.ClassWriter, byte[], int, int, int)</outbound>
                <outbound type="class" confirmed="yes">org.mvel.asm.ClassWriter</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.asm.ClassWriter.newUTF8(java.lang.String)</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.asm.ClassWriter.version</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.asm.FieldWriter.access</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.asm.FieldWriter.anns</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.asm.FieldWriter.attrs</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.asm.FieldWriter.cw</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.asm.FieldWriter.ianns</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.asm.FieldWriter.signature</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.asm.FieldWriter.value</outbound>
                <inbound type="feature" confirmed="yes">org.mvel.asm.ClassWriter.toByteArray()</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.asm.FieldWriter.ianns</name>
                <outbound type="class" confirmed="yes">org.mvel.asm.AnnotationWriter</outbound>
                <inbound type="feature" confirmed="yes">org.mvel.asm.FieldWriter.getSize()</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.asm.FieldWriter.put(org.mvel.asm.ByteVector)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.asm.FieldWriter.visitAnnotation(java.lang.String, boolean)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.asm.FieldWriter.name</name>
                <inbound type="feature" confirmed="yes">org.mvel.asm.FieldWriter.FieldWriter(org.mvel.asm.ClassWriter, int, java.lang.String, java.lang.String, java.lang.String, java.lang.Object)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.asm.FieldWriter.put(org.mvel.asm.ByteVector)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.asm.FieldWriter.next</name>
                <inbound type="feature" confirmed="yes">org.mvel.asm.ClassWriter.toByteArray()</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.asm.FieldWriter.FieldWriter(org.mvel.asm.ClassWriter, int, java.lang.String, java.lang.String, java.lang.String, java.lang.Object)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.asm.FieldWriter.put(org.mvel.asm.ByteVector)</name>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="class" confirmed="yes">org.mvel.asm.AnnotationWriter</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.asm.AnnotationWriter.put(org.mvel.asm.ByteVector)</outbound>
                <outbound type="class" confirmed="yes">org.mvel.asm.Attribute</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.asm.Attribute.getCount()</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.asm.Attribute.put(org.mvel.asm.ClassWriter, byte[], int, int, int, org.mvel.asm.ByteVector)</outbound>
                <outbound type="class" confirmed="yes">org.mvel.asm.ByteVector</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.asm.ByteVector.putInt(int)</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.asm.ByteVector.putShort(int)</outbound>
                <outbound type="class" confirmed="yes">org.mvel.asm.ClassWriter</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.asm.ClassWriter.newUTF8(java.lang.String)</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.asm.ClassWriter.version</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.asm.FieldWriter.access</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.asm.FieldWriter.anns</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.asm.FieldWriter.attrs</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.asm.FieldWriter.cw</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.asm.FieldWriter.desc</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.asm.FieldWriter.ianns</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.asm.FieldWriter.name</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.asm.FieldWriter.signature</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.asm.FieldWriter.value</outbound>
                <inbound type="feature" confirmed="yes">org.mvel.asm.ClassWriter.toByteArray()</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.asm.FieldWriter.signature</name>
                <inbound type="feature" confirmed="yes">org.mvel.asm.FieldWriter.FieldWriter(org.mvel.asm.ClassWriter, int, java.lang.String, java.lang.String, java.lang.String, java.lang.Object)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.asm.FieldWriter.getSize()</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.asm.FieldWriter.put(org.mvel.asm.ByteVector)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.asm.FieldWriter.value</name>
                <inbound type="feature" confirmed="yes">org.mvel.asm.FieldWriter.FieldWriter(org.mvel.asm.ClassWriter, int, java.lang.String, java.lang.String, java.lang.String, java.lang.Object)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.asm.FieldWriter.getSize()</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.asm.FieldWriter.put(org.mvel.asm.ByteVector)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.asm.FieldWriter.visitAnnotation(java.lang.String, boolean)</name>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="class" confirmed="yes">org.mvel.asm.AnnotationVisitor</outbound>
                <outbound type="class" confirmed="yes">org.mvel.asm.AnnotationWriter</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.asm.AnnotationWriter.AnnotationWriter(org.mvel.asm.ClassWriter, boolean, org.mvel.asm.ByteVector, org.mvel.asm.ByteVector, int)</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.asm.AnnotationWriter.next</outbound>
                <outbound type="class" confirmed="yes">org.mvel.asm.ByteVector</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.asm.ByteVector.ByteVector()</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.asm.ByteVector.putShort(int)</outbound>
                <outbound type="class" confirmed="yes">org.mvel.asm.ClassWriter</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.asm.ClassWriter.newUTF8(java.lang.String)</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.asm.FieldWriter.anns</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.asm.FieldWriter.cw</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.asm.FieldWriter.ianns</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.asm.FieldWriter.visitAttribute(org.mvel.asm.Attribute)</name>
                <outbound type="class" confirmed="yes">org.mvel.asm.Attribute</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.asm.Attribute.next</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.asm.FieldWriter.attrs</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.asm.FieldWriter.visitEnd()</name>
            </feature>
        </class>
        <class confirmed="yes">
            <name>org.mvel.asm.Frame</name>
            <outbound type="class" confirmed="no">java.lang.Object</outbound>
            <inbound type="feature" confirmed="yes">org.mvel.asm.Label.frame</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.asm.Label.getFirst()</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.asm.MethodWriter.noSuccessor()</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.asm.MethodWriter.resizeInstructions()</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.asm.MethodWriter.visitFieldInsn(int, java.lang.String, java.lang.String, java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.asm.MethodWriter.visitFrame(org.mvel.asm.Frame)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.asm.MethodWriter.visitIincInsn(int, int)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.asm.MethodWriter.visitInsn(int)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.asm.MethodWriter.visitIntInsn(int, int)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.asm.MethodWriter.visitJumpInsn(int, org.mvel.asm.Label)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.asm.MethodWriter.visitLabel(org.mvel.asm.Label)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.asm.MethodWriter.visitLdcInsn(java.lang.Object)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.asm.MethodWriter.visitMaxs(int, int)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.asm.MethodWriter.visitMethodInsn(int, java.lang.String, java.lang.String, java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.asm.MethodWriter.visitMultiANewArrayInsn(java.lang.String, int)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.asm.MethodWriter.visitSwitchInsn(org.mvel.asm.Label, org.mvel.asm.Label[])</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.asm.MethodWriter.visitTypeInsn(int, java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.asm.MethodWriter.visitVarInsn(int, int)</inbound>
            <feature confirmed="yes">
                <name>org.mvel.asm.Frame.ARRAY_OF</name>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.asm.Frame.BASE</name>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.asm.Frame.BASE_KIND</name>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.asm.Frame.BASE_VALUE</name>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.asm.Frame.BOOLEAN</name>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.asm.Frame.BYTE</name>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.asm.Frame.CHAR</name>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.asm.Frame.DIM</name>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.asm.Frame.DOUBLE</name>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.asm.Frame.ELEMENT_OF</name>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.asm.Frame.FLOAT</name>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.asm.Frame.Frame()</name>
                <outbound type="feature" confirmed="no">java.lang.Object.Object()</outbound>
                <inbound type="feature" confirmed="yes">org.mvel.asm.MethodWriter.noSuccessor()</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.asm.MethodWriter.resizeInstructions()</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.asm.MethodWriter.visitLabel(org.mvel.asm.Label)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.asm.Frame.INTEGER</name>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.asm.Frame.KIND</name>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.asm.Frame.LOCAL</name>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.asm.Frame.LONG</name>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.asm.Frame.NULL</name>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.asm.Frame.OBJECT</name>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.asm.Frame.SHORT</name>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.asm.Frame.SIZE</name>
                <inbound type="feature" confirmed="yes">org.mvel.asm.Frame.static {}</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.asm.MethodWriter.visitInsn(int)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.asm.MethodWriter.visitJumpInsn(int, org.mvel.asm.Label)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.asm.MethodWriter.visitVarInsn(int, int)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.asm.Frame.STACK</name>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.asm.Frame.TOP</name>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.asm.Frame.UNINITIALIZED</name>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.asm.Frame.UNINITIALIZED_THIS</name>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.asm.Frame.VALUE</name>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.asm.Frame.execute(int, int, org.mvel.asm.ClassWriter, org.mvel.asm.Item)</name>
                <outbound type="feature" confirmed="no">java.lang.RuntimeException.RuntimeException(java.lang.String)</outbound>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="feature" confirmed="no">java.lang.String.charAt(int)</outbound>
                <outbound type="class" confirmed="no">java.lang.StringBuffer</outbound>
                <outbound type="feature" confirmed="no">java.lang.StringBuffer.StringBuffer(java.lang.String)</outbound>
                <outbound type="feature" confirmed="no">java.lang.StringBuffer.append(java.lang.String)</outbound>
                <outbound type="feature" confirmed="no">java.lang.StringBuffer.toString()</outbound>
                <outbound type="class" confirmed="yes">org.mvel.asm.ClassWriter</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.asm.ClassWriter.addType(java.lang.String)</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.asm.ClassWriter.addUninitializedType(java.lang.String, int)</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.asm.Frame.get(int)</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.asm.Frame.init(int)</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.asm.Frame.pop()</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.asm.Frame.pop(int)</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.asm.Frame.pop(java.lang.String)</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.asm.Frame.push(int)</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.asm.Frame.push(org.mvel.asm.ClassWriter, java.lang.String)</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.asm.Frame.set(int, int)</outbound>
                <outbound type="class" confirmed="yes">org.mvel.asm.Item</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.asm.Item.strVal1</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.asm.Item.strVal2</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.asm.Item.strVal3</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.asm.Item.type</outbound>
                <inbound type="feature" confirmed="yes">org.mvel.asm.MethodWriter.visitFieldInsn(int, java.lang.String, java.lang.String, java.lang.String)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.asm.MethodWriter.visitIincInsn(int, int)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.asm.MethodWriter.visitInsn(int)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.asm.MethodWriter.visitIntInsn(int, int)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.asm.MethodWriter.visitJumpInsn(int, org.mvel.asm.Label)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.asm.MethodWriter.visitLdcInsn(java.lang.Object)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.asm.MethodWriter.visitMethodInsn(int, java.lang.String, java.lang.String, java.lang.String)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.asm.MethodWriter.visitMultiANewArrayInsn(java.lang.String, int)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.asm.MethodWriter.visitSwitchInsn(org.mvel.asm.Label, org.mvel.asm.Label[])</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.asm.MethodWriter.visitTypeInsn(int, java.lang.String)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.asm.MethodWriter.visitVarInsn(int, int)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.asm.Frame.get(int)</name>
                <outbound type="feature" confirmed="yes">org.mvel.asm.Frame.outputLocals</outbound>
                <inbound type="feature" confirmed="yes">org.mvel.asm.Frame.execute(int, int, org.mvel.asm.ClassWriter, org.mvel.asm.Item)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.asm.Frame.init(int)</name>
                <outbound type="feature" confirmed="no">java.lang.Math.max(int, int)</outbound>
                <outbound type="class" confirmed="no">java.lang.Object</outbound>
                <outbound type="feature" confirmed="no">java.lang.System.arraycopy(java.lang.Object, int, java.lang.Object, int, int)</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.asm.Frame.initializationCount</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.asm.Frame.initializations</outbound>
                <inbound type="feature" confirmed="yes">org.mvel.asm.Frame.execute(int, int, org.mvel.asm.ClassWriter, org.mvel.asm.Item)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.asm.Frame.init(org.mvel.asm.ClassWriter, int)</name>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="class" confirmed="yes">org.mvel.asm.ClassWriter</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.asm.ClassWriter.addType(java.lang.String)</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.asm.ClassWriter.thisName</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.asm.ClassWriter.typeTable</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.asm.Frame.initializationCount</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.asm.Frame.initializations</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.asm.Frame.inputLocals</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.asm.Frame.inputStack</outbound>
                <outbound type="class" confirmed="yes">org.mvel.asm.Item</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.asm.Item.strVal1</outbound>
                <inbound type="feature" confirmed="yes">org.mvel.asm.Frame.merge(org.mvel.asm.ClassWriter, org.mvel.asm.Frame, int)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.asm.Frame.initInputFrame(org.mvel.asm.ClassWriter, int, org.mvel.asm.Type[], int)</name>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="class" confirmed="yes">org.mvel.asm.ClassWriter</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.asm.ClassWriter.addType(java.lang.String)</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.asm.ClassWriter.thisName</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.asm.Frame.inputLocals</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.asm.Frame.inputStack</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.asm.Frame.type(org.mvel.asm.ClassWriter, java.lang.String)</outbound>
                <outbound type="class" confirmed="yes">org.mvel.asm.Type</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.asm.Type.getDescriptor()</outbound>
                <inbound type="feature" confirmed="yes">org.mvel.asm.MethodWriter.resizeInstructions()</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.asm.MethodWriter.visitMaxs(int, int)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.asm.Frame.initializationCount</name>
                <inbound type="feature" confirmed="yes">org.mvel.asm.Frame.init(int)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.asm.Frame.init(org.mvel.asm.ClassWriter, int)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.asm.Frame.initializations</name>
                <inbound type="feature" confirmed="yes">org.mvel.asm.Frame.init(int)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.asm.Frame.init(org.mvel.asm.ClassWriter, int)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.asm.Frame.merge(org.mvel.asm.ClassWriter, org.mvel.asm.Frame, int)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.asm.Frame.inputLocals</name>
                <inbound type="feature" confirmed="yes">org.mvel.asm.Frame.init(org.mvel.asm.ClassWriter, int)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.asm.Frame.initInputFrame(org.mvel.asm.ClassWriter, int, org.mvel.asm.Type[], int)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.asm.Frame.merge(org.mvel.asm.ClassWriter, org.mvel.asm.Frame, int)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.asm.MethodWriter.visitFrame(org.mvel.asm.Frame)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.asm.Frame.inputStack</name>
                <inbound type="feature" confirmed="yes">org.mvel.asm.Frame.init(org.mvel.asm.ClassWriter, int)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.asm.Frame.initInputFrame(org.mvel.asm.ClassWriter, int, org.mvel.asm.Type[], int)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.asm.Frame.merge(org.mvel.asm.ClassWriter, org.mvel.asm.Frame, int)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.asm.MethodWriter.visitFrame(org.mvel.asm.Frame)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.asm.MethodWriter.visitMaxs(int, int)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.asm.Frame.merge(org.mvel.asm.ClassWriter, int, int[], int)</name>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="class" confirmed="yes">org.mvel.asm.ClassWriter</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.asm.ClassWriter.addType(java.lang.String)</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.asm.ClassWriter.getMergedType(int, int)</outbound>
                <inbound type="feature" confirmed="yes">org.mvel.asm.Frame.merge(org.mvel.asm.ClassWriter, org.mvel.asm.Frame, int)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.asm.Frame.merge(org.mvel.asm.ClassWriter, org.mvel.asm.Frame, int)</name>
                <outbound type="class" confirmed="yes">org.mvel.asm.ClassWriter</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.asm.Frame.init(org.mvel.asm.ClassWriter, int)</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.asm.Frame.initializations</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.asm.Frame.inputLocals</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.asm.Frame.inputStack</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.asm.Frame.merge(org.mvel.asm.ClassWriter, int, int[], int)</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.asm.Frame.outputLocals</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.asm.Frame.outputStack</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.asm.Frame.outputStackTop</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.asm.Frame.owner</outbound>
                <outbound type="class" confirmed="yes">org.mvel.asm.Label</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.asm.Label.inputStackTop</outbound>
                <inbound type="feature" confirmed="yes">org.mvel.asm.MethodWriter.visitMaxs(int, int)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.asm.Frame.outputLocals</name>
                <inbound type="feature" confirmed="yes">org.mvel.asm.Frame.get(int)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.asm.Frame.merge(org.mvel.asm.ClassWriter, org.mvel.asm.Frame, int)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.asm.Frame.set(int, int)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.asm.Frame.outputStack</name>
                <inbound type="feature" confirmed="yes">org.mvel.asm.Frame.merge(org.mvel.asm.ClassWriter, org.mvel.asm.Frame, int)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.asm.Frame.pop()</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.asm.Frame.push(int)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.asm.Frame.outputStackTop</name>
                <inbound type="feature" confirmed="yes">org.mvel.asm.Frame.merge(org.mvel.asm.ClassWriter, org.mvel.asm.Frame, int)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.asm.Frame.pop()</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.asm.Frame.pop(int)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.asm.Frame.push(int)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.asm.Frame.owner</name>
                <outbound type="class" confirmed="yes">org.mvel.asm.Label</outbound>
                <inbound type="feature" confirmed="yes">org.mvel.asm.Frame.merge(org.mvel.asm.ClassWriter, org.mvel.asm.Frame, int)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.asm.Frame.pop()</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.asm.Frame.pop(int)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.asm.Frame.push(int)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.asm.Label.getFirst()</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.asm.MethodWriter.noSuccessor()</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.asm.MethodWriter.resizeInstructions()</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.asm.MethodWriter.visitFrame(org.mvel.asm.Frame)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.asm.MethodWriter.visitLabel(org.mvel.asm.Label)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.asm.Frame.pop()</name>
                <outbound type="feature" confirmed="yes">org.mvel.asm.Frame.outputStack</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.asm.Frame.outputStackTop</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.asm.Frame.owner</outbound>
                <outbound type="class" confirmed="yes">org.mvel.asm.Label</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.asm.Label.inputStackTop</outbound>
                <inbound type="feature" confirmed="yes">org.mvel.asm.Frame.execute(int, int, org.mvel.asm.ClassWriter, org.mvel.asm.Item)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.asm.Frame.pop(int)</name>
                <outbound type="feature" confirmed="yes">org.mvel.asm.Frame.outputStackTop</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.asm.Frame.owner</outbound>
                <outbound type="class" confirmed="yes">org.mvel.asm.Label</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.asm.Label.inputStackTop</outbound>
                <inbound type="feature" confirmed="yes">org.mvel.asm.Frame.execute(int, int, org.mvel.asm.ClassWriter, org.mvel.asm.Item)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.asm.Frame.pop(java.lang.String)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.asm.Frame.pop(java.lang.String)</name>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="feature" confirmed="no">java.lang.String.charAt(int)</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.asm.Frame.pop(int)</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.asm.MethodWriter.getArgumentsAndReturnSizes(java.lang.String)</outbound>
                <inbound type="feature" confirmed="yes">org.mvel.asm.Frame.execute(int, int, org.mvel.asm.ClassWriter, org.mvel.asm.Item)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.asm.Frame.push(int)</name>
                <outbound type="feature" confirmed="no">java.lang.Math.max(int, int)</outbound>
                <outbound type="class" confirmed="no">java.lang.Object</outbound>
                <outbound type="feature" confirmed="no">java.lang.System.arraycopy(java.lang.Object, int, java.lang.Object, int, int)</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.asm.Frame.outputStack</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.asm.Frame.outputStackTop</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.asm.Frame.owner</outbound>
                <outbound type="class" confirmed="yes">org.mvel.asm.Label</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.asm.Label.inputStackTop</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.asm.Label.outputStackMax</outbound>
                <inbound type="feature" confirmed="yes">org.mvel.asm.Frame.execute(int, int, org.mvel.asm.ClassWriter, org.mvel.asm.Item)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.asm.Frame.push(org.mvel.asm.ClassWriter, java.lang.String)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.asm.Frame.push(org.mvel.asm.ClassWriter, java.lang.String)</name>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="class" confirmed="yes">org.mvel.asm.ClassWriter</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.asm.Frame.push(int)</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.asm.Frame.type(org.mvel.asm.ClassWriter, java.lang.String)</outbound>
                <inbound type="feature" confirmed="yes">org.mvel.asm.Frame.execute(int, int, org.mvel.asm.ClassWriter, org.mvel.asm.Item)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.asm.Frame.set(int, int)</name>
                <outbound type="feature" confirmed="no">java.lang.Math.max(int, int)</outbound>
                <outbound type="class" confirmed="no">java.lang.Object</outbound>
                <outbound type="feature" confirmed="no">java.lang.System.arraycopy(java.lang.Object, int, java.lang.Object, int, int)</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.asm.Frame.outputLocals</outbound>
                <inbound type="feature" confirmed="yes">org.mvel.asm.Frame.execute(int, int, org.mvel.asm.ClassWriter, org.mvel.asm.Item)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.asm.Frame.static {}</name>
                <outbound type="feature" confirmed="no">java.lang.String.charAt(int)</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.asm.Frame.SIZE</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.asm.Frame.type(org.mvel.asm.ClassWriter, java.lang.String)</name>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="feature" confirmed="no">java.lang.String.charAt(int)</outbound>
                <outbound type="feature" confirmed="no">java.lang.String.indexOf(int)</outbound>
                <outbound type="feature" confirmed="no">java.lang.String.length()</outbound>
                <outbound type="feature" confirmed="no">java.lang.String.substring(int, int)</outbound>
                <outbound type="class" confirmed="yes">org.mvel.asm.ClassWriter</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.asm.ClassWriter.addType(java.lang.String)</outbound>
                <inbound type="feature" confirmed="yes">org.mvel.asm.Frame.initInputFrame(org.mvel.asm.ClassWriter, int, org.mvel.asm.Type[], int)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.asm.Frame.push(org.mvel.asm.ClassWriter, java.lang.String)</inbound>
            </feature>
        </class>
        <class confirmed="yes">
            <name>org.mvel.asm.Handler</name>
            <outbound type="class" confirmed="no">java.lang.Object</outbound>
            <inbound type="feature" confirmed="yes">org.mvel.asm.MethodWriter.firstHandler</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.asm.MethodWriter.lastHandler</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.asm.MethodWriter.put(org.mvel.asm.ByteVector)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.asm.MethodWriter.resizeInstructions()</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.asm.MethodWriter.visitMaxs(int, int)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.asm.MethodWriter.visitTryCatchBlock(org.mvel.asm.Label, org.mvel.asm.Label, org.mvel.asm.Label, java.lang.String)</inbound>
            <feature confirmed="yes">
                <name>org.mvel.asm.Handler.Handler()</name>
                <outbound type="feature" confirmed="no">java.lang.Object.Object()</outbound>
                <inbound type="feature" confirmed="yes">org.mvel.asm.MethodWriter.visitTryCatchBlock(org.mvel.asm.Label, org.mvel.asm.Label, org.mvel.asm.Label, java.lang.String)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.asm.Handler.desc</name>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <inbound type="feature" confirmed="yes">org.mvel.asm.MethodWriter.visitMaxs(int, int)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.asm.MethodWriter.visitTryCatchBlock(org.mvel.asm.Label, org.mvel.asm.Label, org.mvel.asm.Label, java.lang.String)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.asm.Handler.end</name>
                <outbound type="class" confirmed="yes">org.mvel.asm.Label</outbound>
                <inbound type="feature" confirmed="yes">org.mvel.asm.MethodWriter.put(org.mvel.asm.ByteVector)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.asm.MethodWriter.resizeInstructions()</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.asm.MethodWriter.visitMaxs(int, int)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.asm.MethodWriter.visitTryCatchBlock(org.mvel.asm.Label, org.mvel.asm.Label, org.mvel.asm.Label, java.lang.String)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.asm.Handler.handler</name>
                <outbound type="class" confirmed="yes">org.mvel.asm.Label</outbound>
                <inbound type="feature" confirmed="yes">org.mvel.asm.MethodWriter.put(org.mvel.asm.ByteVector)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.asm.MethodWriter.resizeInstructions()</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.asm.MethodWriter.visitMaxs(int, int)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.asm.MethodWriter.visitTryCatchBlock(org.mvel.asm.Label, org.mvel.asm.Label, org.mvel.asm.Label, java.lang.String)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.asm.Handler.next</name>
                <inbound type="feature" confirmed="yes">org.mvel.asm.MethodWriter.put(org.mvel.asm.ByteVector)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.asm.MethodWriter.resizeInstructions()</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.asm.MethodWriter.visitMaxs(int, int)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.asm.MethodWriter.visitTryCatchBlock(org.mvel.asm.Label, org.mvel.asm.Label, org.mvel.asm.Label, java.lang.String)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.asm.Handler.start</name>
                <outbound type="class" confirmed="yes">org.mvel.asm.Label</outbound>
                <inbound type="feature" confirmed="yes">org.mvel.asm.MethodWriter.put(org.mvel.asm.ByteVector)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.asm.MethodWriter.resizeInstructions()</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.asm.MethodWriter.visitMaxs(int, int)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.asm.MethodWriter.visitTryCatchBlock(org.mvel.asm.Label, org.mvel.asm.Label, org.mvel.asm.Label, java.lang.String)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.asm.Handler.type</name>
                <inbound type="feature" confirmed="yes">org.mvel.asm.MethodWriter.put(org.mvel.asm.ByteVector)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.asm.MethodWriter.visitTryCatchBlock(org.mvel.asm.Label, org.mvel.asm.Label, org.mvel.asm.Label, java.lang.String)</inbound>
            </feature>
        </class>
        <class confirmed="yes">
            <name>org.mvel.asm.Item</name>
            <outbound type="class" confirmed="no">java.lang.Object</outbound>
            <inbound type="feature" confirmed="yes">org.mvel.asm.AnnotationWriter.visit(java.lang.String, java.lang.Object)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.asm.ClassReader.copyPool(org.mvel.asm.ClassWriter)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.asm.ClassWriter.ClassWriter(int)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.asm.ClassWriter.addType(java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.asm.ClassWriter.addType(org.mvel.asm.Item)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.asm.ClassWriter.addUninitializedType(java.lang.String, int)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.asm.ClassWriter.get(org.mvel.asm.Item)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.asm.ClassWriter.getMergedType(int, int)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.asm.ClassWriter.items</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.asm.ClassWriter.key</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.asm.ClassWriter.key2</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.asm.ClassWriter.key3</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.asm.ClassWriter.newClass(java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.asm.ClassWriter.newClassItem(java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.asm.ClassWriter.newConst(java.lang.Object)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.asm.ClassWriter.newConstItem(java.lang.Object)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.asm.ClassWriter.newDouble(double)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.asm.ClassWriter.newField(java.lang.String, java.lang.String, java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.asm.ClassWriter.newFieldItem(java.lang.String, java.lang.String, java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.asm.ClassWriter.newFloat(float)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.asm.ClassWriter.newInteger(int)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.asm.ClassWriter.newLong(long)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.asm.ClassWriter.newMethod(java.lang.String, java.lang.String, java.lang.String, boolean)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.asm.ClassWriter.newMethodItem(java.lang.String, java.lang.String, java.lang.String, boolean)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.asm.ClassWriter.newNameType(java.lang.String, java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.asm.ClassWriter.newString(java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.asm.ClassWriter.newUTF8(java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.asm.ClassWriter.put(org.mvel.asm.Item)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.asm.ClassWriter.typeTable</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.asm.FieldWriter.FieldWriter(org.mvel.asm.ClassWriter, int, java.lang.String, java.lang.String, java.lang.String, java.lang.Object)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.asm.Frame.execute(int, int, org.mvel.asm.ClassWriter, org.mvel.asm.Item)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.asm.Frame.init(org.mvel.asm.ClassWriter, int)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.asm.MethodWriter.visitFieldInsn(int, java.lang.String, java.lang.String, java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.asm.MethodWriter.visitIincInsn(int, int)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.asm.MethodWriter.visitInsn(int)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.asm.MethodWriter.visitIntInsn(int, int)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.asm.MethodWriter.visitJumpInsn(int, org.mvel.asm.Label)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.asm.MethodWriter.visitLdcInsn(java.lang.Object)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.asm.MethodWriter.visitMethodInsn(int, java.lang.String, java.lang.String, java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.asm.MethodWriter.visitMultiANewArrayInsn(java.lang.String, int)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.asm.MethodWriter.visitSwitchInsn(org.mvel.asm.Label, org.mvel.asm.Label[])</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.asm.MethodWriter.visitTypeInsn(int, java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.asm.MethodWriter.visitVarInsn(int, int)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.asm.MethodWriter.writeFrameTypes(int, int)</inbound>
            <feature confirmed="yes">
                <name>org.mvel.asm.Item.Item()</name>
                <outbound type="feature" confirmed="no">java.lang.Object.Object()</outbound>
                <inbound type="feature" confirmed="yes">org.mvel.asm.ClassWriter.ClassWriter(int)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.asm.Item.Item(int)</name>
                <outbound type="feature" confirmed="no">java.lang.Object.Object()</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.asm.Item.index</outbound>
                <inbound type="feature" confirmed="yes">org.mvel.asm.ClassReader.copyPool(org.mvel.asm.ClassWriter)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.asm.Item.Item(int, org.mvel.asm.Item)</name>
                <outbound type="feature" confirmed="no">java.lang.Object.Object()</outbound>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.asm.Item.hashCode</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.asm.Item.index</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.asm.Item.intVal</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.asm.Item.longVal</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.asm.Item.strVal1</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.asm.Item.strVal2</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.asm.Item.strVal3</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.asm.Item.type</outbound>
                <inbound type="feature" confirmed="yes">org.mvel.asm.ClassWriter.addType(org.mvel.asm.Item)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.asm.ClassWriter.getMergedType(int, int)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.asm.ClassWriter.newClassItem(java.lang.String)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.asm.ClassWriter.newDouble(double)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.asm.ClassWriter.newFieldItem(java.lang.String, java.lang.String, java.lang.String)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.asm.ClassWriter.newFloat(float)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.asm.ClassWriter.newInteger(int)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.asm.ClassWriter.newLong(long)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.asm.ClassWriter.newMethodItem(java.lang.String, java.lang.String, java.lang.String, boolean)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.asm.ClassWriter.newNameType(java.lang.String, java.lang.String)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.asm.ClassWriter.newString(java.lang.String)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.asm.ClassWriter.newUTF8(java.lang.String)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.asm.Item.hashCode</name>
                <inbound type="feature" confirmed="yes">org.mvel.asm.ClassReader.copyPool(org.mvel.asm.ClassWriter)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.asm.ClassWriter.addUninitializedType(java.lang.String, int)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.asm.ClassWriter.get(org.mvel.asm.Item)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.asm.ClassWriter.getMergedType(int, int)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.asm.ClassWriter.put(org.mvel.asm.Item)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.asm.Item.Item(int, org.mvel.asm.Item)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.asm.Item.set(double)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.asm.Item.set(float)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.asm.Item.set(int)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.asm.Item.set(int, java.lang.String, java.lang.String, java.lang.String)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.asm.Item.set(long)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.asm.Item.index</name>
                <inbound type="feature" confirmed="yes">org.mvel.asm.AnnotationWriter.visit(java.lang.String, java.lang.Object)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.asm.ClassWriter.addType(java.lang.String)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.asm.ClassWriter.addUninitializedType(java.lang.String, int)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.asm.ClassWriter.newClass(java.lang.String)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.asm.ClassWriter.newConst(java.lang.Object)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.asm.ClassWriter.newField(java.lang.String, java.lang.String, java.lang.String)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.asm.ClassWriter.newMethod(java.lang.String, java.lang.String, java.lang.String, boolean)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.asm.ClassWriter.newNameType(java.lang.String, java.lang.String)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.asm.ClassWriter.newUTF8(java.lang.String)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.asm.FieldWriter.FieldWriter(org.mvel.asm.ClassWriter, int, java.lang.String, java.lang.String, java.lang.String, java.lang.Object)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.asm.Item.Item(int)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.asm.Item.Item(int, org.mvel.asm.Item)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.asm.MethodWriter.visitFieldInsn(int, java.lang.String, java.lang.String, java.lang.String)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.asm.MethodWriter.visitLdcInsn(java.lang.Object)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.asm.MethodWriter.visitMethodInsn(int, java.lang.String, java.lang.String, java.lang.String)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.asm.MethodWriter.visitMultiANewArrayInsn(java.lang.String, int)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.asm.MethodWriter.visitTypeInsn(int, java.lang.String)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.asm.Item.intVal</name>
                <inbound type="feature" confirmed="yes">org.mvel.asm.ClassWriter.addUninitializedType(java.lang.String, int)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.asm.ClassWriter.getMergedType(int, int)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.asm.ClassWriter.newFloat(float)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.asm.Item.Item(int, org.mvel.asm.Item)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.asm.Item.isEqualTo(org.mvel.asm.Item)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.asm.Item.set(float)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.asm.Item.set(int)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.asm.MethodWriter.visitMethodInsn(int, java.lang.String, java.lang.String, java.lang.String)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.asm.MethodWriter.writeFrameTypes(int, int)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.asm.Item.isEqualTo(org.mvel.asm.Item)</name>
                <outbound type="class" confirmed="no">java.lang.Object</outbound>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="feature" confirmed="no">java.lang.String.equals(java.lang.Object)</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.asm.Item.intVal</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.asm.Item.longVal</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.asm.Item.strVal1</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.asm.Item.strVal2</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.asm.Item.strVal3</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.asm.Item.type</outbound>
                <inbound type="feature" confirmed="yes">org.mvel.asm.ClassWriter.get(org.mvel.asm.Item)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.asm.Item.longVal</name>
                <inbound type="feature" confirmed="yes">org.mvel.asm.ClassWriter.getMergedType(int, int)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.asm.ClassWriter.newDouble(double)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.asm.Item.Item(int, org.mvel.asm.Item)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.asm.Item.isEqualTo(org.mvel.asm.Item)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.asm.Item.set(double)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.asm.Item.set(long)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.asm.Item.next</name>
                <inbound type="feature" confirmed="yes">org.mvel.asm.ClassReader.copyPool(org.mvel.asm.ClassWriter)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.asm.ClassWriter.get(org.mvel.asm.Item)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.asm.ClassWriter.put(org.mvel.asm.Item)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.asm.Item.set(double)</name>
                <outbound type="feature" confirmed="no">java.lang.Double.doubleToRawLongBits(double)</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.asm.Item.hashCode</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.asm.Item.longVal</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.asm.Item.type</outbound>
                <inbound type="feature" confirmed="yes">org.mvel.asm.ClassReader.copyPool(org.mvel.asm.ClassWriter)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.asm.ClassWriter.newDouble(double)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.asm.Item.set(float)</name>
                <outbound type="feature" confirmed="no">java.lang.Float.floatToRawIntBits(float)</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.asm.Item.hashCode</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.asm.Item.intVal</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.asm.Item.type</outbound>
                <inbound type="feature" confirmed="yes">org.mvel.asm.ClassReader.copyPool(org.mvel.asm.ClassWriter)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.asm.ClassWriter.newFloat(float)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.asm.Item.set(int)</name>
                <outbound type="feature" confirmed="yes">org.mvel.asm.Item.hashCode</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.asm.Item.intVal</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.asm.Item.type</outbound>
                <inbound type="feature" confirmed="yes">org.mvel.asm.ClassReader.copyPool(org.mvel.asm.ClassWriter)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.asm.ClassWriter.newInteger(int)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.asm.Item.set(int, java.lang.String, java.lang.String, java.lang.String)</name>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="feature" confirmed="no">java.lang.String.hashCode()</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.asm.Item.hashCode</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.asm.Item.strVal1</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.asm.Item.strVal2</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.asm.Item.strVal3</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.asm.Item.type</outbound>
                <inbound type="feature" confirmed="yes">org.mvel.asm.ClassReader.copyPool(org.mvel.asm.ClassWriter)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.asm.ClassWriter.addType(java.lang.String)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.asm.ClassWriter.newClassItem(java.lang.String)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.asm.ClassWriter.newFieldItem(java.lang.String, java.lang.String, java.lang.String)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.asm.ClassWriter.newMethodItem(java.lang.String, java.lang.String, java.lang.String, boolean)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.asm.ClassWriter.newNameType(java.lang.String, java.lang.String)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.asm.ClassWriter.newString(java.lang.String)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.asm.ClassWriter.newUTF8(java.lang.String)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.asm.Item.set(long)</name>
                <outbound type="feature" confirmed="yes">org.mvel.asm.Item.hashCode</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.asm.Item.longVal</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.asm.Item.type</outbound>
                <inbound type="feature" confirmed="yes">org.mvel.asm.ClassReader.copyPool(org.mvel.asm.ClassWriter)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.asm.ClassWriter.newLong(long)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.asm.Item.strVal1</name>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <inbound type="feature" confirmed="yes">org.mvel.asm.ClassWriter.addUninitializedType(java.lang.String, int)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.asm.ClassWriter.getMergedType(int, int)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.asm.Frame.execute(int, int, org.mvel.asm.ClassWriter, org.mvel.asm.Item)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.asm.Frame.init(org.mvel.asm.ClassWriter, int)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.asm.Item.Item(int, org.mvel.asm.Item)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.asm.Item.isEqualTo(org.mvel.asm.Item)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.asm.Item.set(int, java.lang.String, java.lang.String, java.lang.String)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.asm.MethodWriter.writeFrameTypes(int, int)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.asm.Item.strVal2</name>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <inbound type="feature" confirmed="yes">org.mvel.asm.Frame.execute(int, int, org.mvel.asm.ClassWriter, org.mvel.asm.Item)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.asm.Item.Item(int, org.mvel.asm.Item)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.asm.Item.isEqualTo(org.mvel.asm.Item)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.asm.Item.set(int, java.lang.String, java.lang.String, java.lang.String)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.asm.Item.strVal3</name>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <inbound type="feature" confirmed="yes">org.mvel.asm.Frame.execute(int, int, org.mvel.asm.ClassWriter, org.mvel.asm.Item)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.asm.Item.Item(int, org.mvel.asm.Item)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.asm.Item.isEqualTo(org.mvel.asm.Item)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.asm.Item.set(int, java.lang.String, java.lang.String, java.lang.String)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.asm.Item.type</name>
                <inbound type="feature" confirmed="yes">org.mvel.asm.AnnotationWriter.visit(java.lang.String, java.lang.Object)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.asm.ClassWriter.addUninitializedType(java.lang.String, int)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.asm.ClassWriter.getMergedType(int, int)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.asm.Frame.execute(int, int, org.mvel.asm.ClassWriter, org.mvel.asm.Item)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.asm.Item.Item(int, org.mvel.asm.Item)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.asm.Item.isEqualTo(org.mvel.asm.Item)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.asm.Item.set(double)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.asm.Item.set(float)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.asm.Item.set(int)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.asm.Item.set(int, java.lang.String, java.lang.String, java.lang.String)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.asm.Item.set(long)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.asm.MethodWriter.visitLdcInsn(java.lang.Object)</inbound>
            </feature>
        </class>
        <class confirmed="yes">
            <name>org.mvel.asm.Label</name>
            <outbound type="class" confirmed="no">java.lang.Object</outbound>
            <inbound type="feature" confirmed="yes">org.mvel.asm.Attribute.getLabels()</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.asm.Attribute.read(org.mvel.asm.ClassReader, int, int, char[], int, org.mvel.asm.Label[])</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.asm.ClassReader.accept(org.mvel.asm.ClassVisitor, org.mvel.asm.Attribute[], int)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.asm.ClassReader.readAttribute(org.mvel.asm.Attribute[], java.lang.String, int, int, char[], int, org.mvel.asm.Label[])</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.asm.ClassReader.readFrameType(java.lang.Object[], int, int, char[], org.mvel.asm.Label[])</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.asm.Edge.successor</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.asm.Frame.merge(org.mvel.asm.ClassWriter, org.mvel.asm.Frame, int)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.asm.Frame.owner</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.asm.Frame.pop()</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.asm.Frame.pop(int)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.asm.Frame.push(int)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.asm.Handler.end</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.asm.Handler.handler</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.asm.Handler.start</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.asm.MethodAdapter.visitJumpInsn(int, org.mvel.asm.Label)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.asm.MethodAdapter.visitLabel(org.mvel.asm.Label)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.asm.MethodAdapter.visitLineNumber(int, org.mvel.asm.Label)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.asm.MethodAdapter.visitLocalVariable(java.lang.String, java.lang.String, java.lang.String, org.mvel.asm.Label, org.mvel.asm.Label, int)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.asm.MethodAdapter.visitLookupSwitchInsn(org.mvel.asm.Label, int[], org.mvel.asm.Label[])</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.asm.MethodAdapter.visitTableSwitchInsn(int, int, org.mvel.asm.Label, org.mvel.asm.Label[])</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.asm.MethodAdapter.visitTryCatchBlock(org.mvel.asm.Label, org.mvel.asm.Label, org.mvel.asm.Label, java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.asm.MethodVisitor.visitJumpInsn(int, org.mvel.asm.Label)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.asm.MethodVisitor.visitLabel(org.mvel.asm.Label)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.asm.MethodVisitor.visitLineNumber(int, org.mvel.asm.Label)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.asm.MethodVisitor.visitLocalVariable(java.lang.String, java.lang.String, java.lang.String, org.mvel.asm.Label, org.mvel.asm.Label, int)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.asm.MethodVisitor.visitLookupSwitchInsn(org.mvel.asm.Label, int[], org.mvel.asm.Label[])</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.asm.MethodVisitor.visitTableSwitchInsn(int, int, org.mvel.asm.Label, org.mvel.asm.Label[])</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.asm.MethodVisitor.visitTryCatchBlock(org.mvel.asm.Label, org.mvel.asm.Label, org.mvel.asm.Label, java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.asm.MethodWriter.MethodWriter(org.mvel.asm.ClassWriter, int, java.lang.String, java.lang.String, java.lang.String, java.lang.String[], boolean, boolean)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.asm.MethodWriter.addSuccessor(int, org.mvel.asm.Label)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.asm.MethodWriter.currentBlock</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.asm.MethodWriter.findSubroutine(org.mvel.asm.Label, int)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.asm.MethodWriter.findSubroutineSuccessors(int, org.mvel.asm.Label[], int)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.asm.MethodWriter.getNewOffset(int[], int[], org.mvel.asm.Label)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.asm.MethodWriter.labels</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.asm.MethodWriter.noSuccessor()</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.asm.MethodWriter.previousBlock</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.asm.MethodWriter.put(org.mvel.asm.ByteVector)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.asm.MethodWriter.resizeInstructions()</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.asm.MethodWriter.visitFieldInsn(int, java.lang.String, java.lang.String, java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.asm.MethodWriter.visitFrame(int, int, java.lang.Object[], int, java.lang.Object[])</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.asm.MethodWriter.visitFrame(org.mvel.asm.Frame)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.asm.MethodWriter.visitIincInsn(int, int)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.asm.MethodWriter.visitInsn(int)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.asm.MethodWriter.visitIntInsn(int, int)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.asm.MethodWriter.visitJumpInsn(int, org.mvel.asm.Label)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.asm.MethodWriter.visitLabel(org.mvel.asm.Label)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.asm.MethodWriter.visitLdcInsn(java.lang.Object)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.asm.MethodWriter.visitLineNumber(int, org.mvel.asm.Label)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.asm.MethodWriter.visitLocalVariable(java.lang.String, java.lang.String, java.lang.String, org.mvel.asm.Label, org.mvel.asm.Label, int)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.asm.MethodWriter.visitLookupSwitchInsn(org.mvel.asm.Label, int[], org.mvel.asm.Label[])</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.asm.MethodWriter.visitMaxs(int, int)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.asm.MethodWriter.visitMethodInsn(int, java.lang.String, java.lang.String, java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.asm.MethodWriter.visitMultiANewArrayInsn(java.lang.String, int)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.asm.MethodWriter.visitSwitchInsn(org.mvel.asm.Label, org.mvel.asm.Label[])</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.asm.MethodWriter.visitTableSwitchInsn(int, int, org.mvel.asm.Label, org.mvel.asm.Label[])</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.asm.MethodWriter.visitTryCatchBlock(org.mvel.asm.Label, org.mvel.asm.Label, org.mvel.asm.Label, java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.asm.MethodWriter.visitTypeInsn(int, java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.asm.MethodWriter.visitVarInsn(int, int)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.asm.MethodWriter.writeFrameType(java.lang.Object)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.asm.ASMAccessorOptimizer.getBeanProperty(java.lang.Object, java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.asm.ASMAccessorOptimizer.ldcClassConstant(java.lang.Class)</inbound>
            <feature confirmed="yes">
                <name>org.mvel.asm.Label.DEBUG</name>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.asm.Label.JSR</name>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.asm.Label.Label()</name>
                <outbound type="feature" confirmed="no">java.lang.Object.Object()</outbound>
                <inbound type="feature" confirmed="yes">org.mvel.asm.ClassReader.accept(org.mvel.asm.ClassVisitor, org.mvel.asm.Attribute[], int)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.asm.ClassReader.readFrameType(java.lang.Object[], int, int, char[], org.mvel.asm.Label[])</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.asm.MethodWriter.MethodWriter(org.mvel.asm.ClassWriter, int, java.lang.String, java.lang.String, java.lang.String, java.lang.String[], boolean, boolean)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.asm.MethodWriter.noSuccessor()</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.asm.MethodWriter.visitJumpInsn(int, org.mvel.asm.Label)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.asm.MethodWriter.visitVarInsn(int, int)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.asm.ASMAccessorOptimizer.getBeanProperty(java.lang.Object, java.lang.String)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.asm.ASMAccessorOptimizer.ldcClassConstant(java.lang.Class)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.asm.Label.Label(boolean)</name>
                <outbound type="feature" confirmed="no">java.lang.Object.Object()</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.asm.Label.status</outbound>
                <inbound type="feature" confirmed="yes">org.mvel.asm.ClassReader.accept(org.mvel.asm.ClassVisitor, org.mvel.asm.Attribute[], int)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.asm.Label.PUSHED</name>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.asm.Label.REACHABLE</name>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.asm.Label.RESIZED</name>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.asm.Label.RESOLVED</name>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.asm.Label.RET</name>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.asm.Label.STORE</name>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.asm.Label.TARGET</name>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.asm.Label.addReference(int, int)</name>
                <outbound type="class" confirmed="no">java.lang.Object</outbound>
                <outbound type="feature" confirmed="no">java.lang.System.arraycopy(java.lang.Object, int, java.lang.Object, int, int)</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.asm.Label.referenceCount</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.asm.Label.srcAndRefPositions</outbound>
                <inbound type="feature" confirmed="yes">org.mvel.asm.Label.put(org.mvel.asm.MethodWriter, org.mvel.asm.ByteVector, int, boolean)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.asm.Label.frame</name>
                <outbound type="class" confirmed="yes">org.mvel.asm.Frame</outbound>
                <inbound type="feature" confirmed="yes">org.mvel.asm.Label.getFirst()</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.asm.MethodWriter.noSuccessor()</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.asm.MethodWriter.resizeInstructions()</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.asm.MethodWriter.visitFieldInsn(int, java.lang.String, java.lang.String, java.lang.String)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.asm.MethodWriter.visitIincInsn(int, int)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.asm.MethodWriter.visitInsn(int)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.asm.MethodWriter.visitIntInsn(int, int)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.asm.MethodWriter.visitJumpInsn(int, org.mvel.asm.Label)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.asm.MethodWriter.visitLabel(org.mvel.asm.Label)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.asm.MethodWriter.visitLdcInsn(java.lang.Object)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.asm.MethodWriter.visitMaxs(int, int)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.asm.MethodWriter.visitMethodInsn(int, java.lang.String, java.lang.String, java.lang.String)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.asm.MethodWriter.visitMultiANewArrayInsn(java.lang.String, int)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.asm.MethodWriter.visitSwitchInsn(org.mvel.asm.Label, org.mvel.asm.Label[])</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.asm.MethodWriter.visitTypeInsn(int, java.lang.String)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.asm.MethodWriter.visitVarInsn(int, int)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.asm.Label.getFirst()</name>
                <outbound type="class" confirmed="yes">org.mvel.asm.Frame</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.asm.Frame.owner</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.asm.Label.frame</outbound>
                <inbound type="feature" confirmed="yes">org.mvel.asm.MethodWriter.visitJumpInsn(int, org.mvel.asm.Label)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.asm.MethodWriter.visitMaxs(int, int)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.asm.MethodWriter.visitSwitchInsn(org.mvel.asm.Label, org.mvel.asm.Label[])</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.asm.Label.getOffset()</name>
                <outbound type="feature" confirmed="no">java.lang.IllegalStateException.IllegalStateException(java.lang.String)</outbound>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.asm.Label.position</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.asm.Label.status</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.asm.Label.info</name>
                <outbound type="class" confirmed="no">java.lang.Object</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.asm.Label.inputStackTop</name>
                <inbound type="feature" confirmed="yes">org.mvel.asm.Frame.merge(org.mvel.asm.ClassWriter, org.mvel.asm.Frame, int)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.asm.Frame.pop()</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.asm.Frame.pop(int)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.asm.Frame.push(int)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.asm.MethodWriter.findSubroutineSuccessors(int, org.mvel.asm.Label[], int)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.asm.MethodWriter.visitMaxs(int, int)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.asm.MethodWriter.visitVarInsn(int, int)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.asm.Label.line</name>
                <inbound type="feature" confirmed="yes">org.mvel.asm.ClassReader.accept(org.mvel.asm.ClassVisitor, org.mvel.asm.Attribute[], int)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.asm.Label.next</name>
                <inbound type="feature" confirmed="yes">org.mvel.asm.MethodWriter.visitMaxs(int, int)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.asm.Label.outputStackMax</name>
                <inbound type="feature" confirmed="yes">org.mvel.asm.Frame.push(int)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.asm.MethodWriter.noSuccessor()</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.asm.MethodWriter.visitLabel(org.mvel.asm.Label)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.asm.MethodWriter.visitMaxs(int, int)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.asm.Label.position</name>
                <inbound type="feature" confirmed="yes">org.mvel.asm.Label.getOffset()</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.asm.Label.put(org.mvel.asm.MethodWriter, org.mvel.asm.ByteVector, int, boolean)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.asm.Label.resolve(org.mvel.asm.MethodWriter, int, byte[])</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.asm.MethodWriter.getNewOffset(int[], int[], org.mvel.asm.Label)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.asm.MethodWriter.put(org.mvel.asm.ByteVector)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.asm.MethodWriter.resizeInstructions()</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.asm.MethodWriter.visitFrame(int, int, java.lang.Object[], int, java.lang.Object[])</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.asm.MethodWriter.visitFrame(org.mvel.asm.Frame)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.asm.MethodWriter.visitJumpInsn(int, org.mvel.asm.Label)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.asm.MethodWriter.visitLabel(org.mvel.asm.Label)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.asm.MethodWriter.visitLineNumber(int, org.mvel.asm.Label)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.asm.MethodWriter.visitLocalVariable(java.lang.String, java.lang.String, java.lang.String, org.mvel.asm.Label, org.mvel.asm.Label, int)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.asm.MethodWriter.visitMaxs(int, int)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.asm.MethodWriter.writeFrameType(java.lang.Object)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.asm.Label.put(org.mvel.asm.MethodWriter, org.mvel.asm.ByteVector, int, boolean)</name>
                <outbound type="class" confirmed="yes">org.mvel.asm.ByteVector</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.asm.ByteVector.length</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.asm.ByteVector.putInt(int)</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.asm.ByteVector.putShort(int)</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.asm.Label.addReference(int, int)</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.asm.Label.position</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.asm.Label.status</outbound>
                <outbound type="class" confirmed="yes">org.mvel.asm.MethodWriter</outbound>
                <inbound type="feature" confirmed="yes">org.mvel.asm.MethodWriter.visitJumpInsn(int, org.mvel.asm.Label)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.asm.MethodWriter.visitLookupSwitchInsn(org.mvel.asm.Label, int[], org.mvel.asm.Label[])</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.asm.MethodWriter.visitTableSwitchInsn(int, int, org.mvel.asm.Label, org.mvel.asm.Label[])</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.asm.Label.referenceCount</name>
                <inbound type="feature" confirmed="yes">org.mvel.asm.Label.addReference(int, int)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.asm.Label.resolve(org.mvel.asm.MethodWriter, int, byte[])</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.asm.Label.resolve(org.mvel.asm.MethodWriter, int, byte[])</name>
                <outbound type="feature" confirmed="yes">org.mvel.asm.Label.position</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.asm.Label.referenceCount</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.asm.Label.srcAndRefPositions</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.asm.Label.status</outbound>
                <outbound type="class" confirmed="yes">org.mvel.asm.MethodWriter</outbound>
                <inbound type="feature" confirmed="yes">org.mvel.asm.MethodWriter.noSuccessor()</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.asm.MethodWriter.visitLabel(org.mvel.asm.Label)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.asm.Label.srcAndRefPositions</name>
                <inbound type="feature" confirmed="yes">org.mvel.asm.Label.addReference(int, int)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.asm.Label.resolve(org.mvel.asm.MethodWriter, int, byte[])</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.asm.Label.status</name>
                <inbound type="feature" confirmed="yes">org.mvel.asm.Label.Label(boolean)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.asm.Label.getOffset()</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.asm.Label.put(org.mvel.asm.MethodWriter, org.mvel.asm.ByteVector, int, boolean)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.asm.Label.resolve(org.mvel.asm.MethodWriter, int, byte[])</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.asm.MethodWriter.MethodWriter(org.mvel.asm.ClassWriter, int, java.lang.String, java.lang.String, java.lang.String, java.lang.String[], boolean, boolean)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.asm.MethodWriter.findSubroutine(org.mvel.asm.Label, int)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.asm.MethodWriter.findSubroutineSuccessors(int, org.mvel.asm.Label[], int)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.asm.MethodWriter.getNewOffset(int[], int[], org.mvel.asm.Label)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.asm.MethodWriter.resizeInstructions()</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.asm.MethodWriter.visitJumpInsn(int, org.mvel.asm.Label)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.asm.MethodWriter.visitLabel(org.mvel.asm.Label)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.asm.MethodWriter.visitMaxs(int, int)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.asm.MethodWriter.visitSwitchInsn(org.mvel.asm.Label, org.mvel.asm.Label[])</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.asm.MethodWriter.visitVarInsn(int, int)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.asm.Label.successor</name>
                <inbound type="feature" confirmed="yes">org.mvel.asm.MethodWriter.findSubroutineSuccessors(int, org.mvel.asm.Label[], int)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.asm.MethodWriter.noSuccessor()</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.asm.MethodWriter.resizeInstructions()</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.asm.MethodWriter.visitLabel(org.mvel.asm.Label)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.asm.MethodWriter.visitMaxs(int, int)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.asm.Label.successors</name>
                <outbound type="class" confirmed="yes">org.mvel.asm.Edge</outbound>
                <inbound type="feature" confirmed="yes">org.mvel.asm.MethodWriter.addSuccessor(int, org.mvel.asm.Label)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.asm.MethodWriter.findSubroutine(org.mvel.asm.Label, int)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.asm.MethodWriter.findSubroutineSuccessors(int, org.mvel.asm.Label[], int)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.asm.MethodWriter.visitMaxs(int, int)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.asm.Label.toString()</name>
                <outbound type="class" confirmed="no">java.lang.Object</outbound>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="class" confirmed="no">java.lang.StringBuffer</outbound>
                <outbound type="feature" confirmed="no">java.lang.StringBuffer.StringBuffer(java.lang.String)</outbound>
                <outbound type="feature" confirmed="no">java.lang.StringBuffer.append(int)</outbound>
                <outbound type="feature" confirmed="no">java.lang.StringBuffer.toString()</outbound>
                <outbound type="feature" confirmed="no">java.lang.System.identityHashCode(java.lang.Object)</outbound>
            </feature>
        </class>
        <class confirmed="yes">
            <name>org.mvel.asm.MethodAdapter</name>
            <outbound type="class" confirmed="no">java.lang.Object</outbound>
            <outbound type="class" confirmed="yes">org.mvel.asm.MethodVisitor</outbound>
            <feature confirmed="yes">
                <name>org.mvel.asm.MethodAdapter.MethodAdapter(org.mvel.asm.MethodVisitor)</name>
                <outbound type="feature" confirmed="no">java.lang.Object.Object()</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.asm.MethodAdapter.mv</outbound>
                <outbound type="class" confirmed="yes">org.mvel.asm.MethodVisitor</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.asm.MethodAdapter.mv</name>
                <outbound type="class" confirmed="yes">org.mvel.asm.MethodVisitor</outbound>
                <inbound type="feature" confirmed="yes">org.mvel.asm.MethodAdapter.MethodAdapter(org.mvel.asm.MethodVisitor)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.asm.MethodAdapter.visitAnnotation(java.lang.String, boolean)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.asm.MethodAdapter.visitAnnotationDefault()</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.asm.MethodAdapter.visitAttribute(org.mvel.asm.Attribute)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.asm.MethodAdapter.visitCode()</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.asm.MethodAdapter.visitEnd()</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.asm.MethodAdapter.visitFieldInsn(int, java.lang.String, java.lang.String, java.lang.String)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.asm.MethodAdapter.visitFrame(int, int, java.lang.Object[], int, java.lang.Object[])</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.asm.MethodAdapter.visitIincInsn(int, int)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.asm.MethodAdapter.visitInsn(int)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.asm.MethodAdapter.visitIntInsn(int, int)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.asm.MethodAdapter.visitJumpInsn(int, org.mvel.asm.Label)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.asm.MethodAdapter.visitLabel(org.mvel.asm.Label)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.asm.MethodAdapter.visitLdcInsn(java.lang.Object)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.asm.MethodAdapter.visitLineNumber(int, org.mvel.asm.Label)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.asm.MethodAdapter.visitLocalVariable(java.lang.String, java.lang.String, java.lang.String, org.mvel.asm.Label, org.mvel.asm.Label, int)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.asm.MethodAdapter.visitLookupSwitchInsn(org.mvel.asm.Label, int[], org.mvel.asm.Label[])</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.asm.MethodAdapter.visitMaxs(int, int)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.asm.MethodAdapter.visitMethodInsn(int, java.lang.String, java.lang.String, java.lang.String)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.asm.MethodAdapter.visitMultiANewArrayInsn(java.lang.String, int)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.asm.MethodAdapter.visitParameterAnnotation(int, java.lang.String, boolean)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.asm.MethodAdapter.visitTableSwitchInsn(int, int, org.mvel.asm.Label, org.mvel.asm.Label[])</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.asm.MethodAdapter.visitTryCatchBlock(org.mvel.asm.Label, org.mvel.asm.Label, org.mvel.asm.Label, java.lang.String)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.asm.MethodAdapter.visitTypeInsn(int, java.lang.String)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.asm.MethodAdapter.visitVarInsn(int, int)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.asm.MethodAdapter.visitAnnotation(java.lang.String, boolean)</name>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="class" confirmed="yes">org.mvel.asm.AnnotationVisitor</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.asm.MethodAdapter.mv</outbound>
                <outbound type="class" confirmed="yes">org.mvel.asm.MethodVisitor</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.asm.MethodVisitor.visitAnnotation(java.lang.String, boolean)</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.asm.MethodAdapter.visitAnnotationDefault()</name>
                <outbound type="class" confirmed="yes">org.mvel.asm.AnnotationVisitor</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.asm.MethodAdapter.mv</outbound>
                <outbound type="class" confirmed="yes">org.mvel.asm.MethodVisitor</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.asm.MethodVisitor.visitAnnotationDefault()</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.asm.MethodAdapter.visitAttribute(org.mvel.asm.Attribute)</name>
                <outbound type="class" confirmed="yes">org.mvel.asm.Attribute</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.asm.MethodAdapter.mv</outbound>
                <outbound type="class" confirmed="yes">org.mvel.asm.MethodVisitor</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.asm.MethodVisitor.visitAttribute(org.mvel.asm.Attribute)</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.asm.MethodAdapter.visitCode()</name>
                <outbound type="feature" confirmed="yes">org.mvel.asm.MethodAdapter.mv</outbound>
                <outbound type="class" confirmed="yes">org.mvel.asm.MethodVisitor</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.asm.MethodVisitor.visitCode()</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.asm.MethodAdapter.visitEnd()</name>
                <outbound type="feature" confirmed="yes">org.mvel.asm.MethodAdapter.mv</outbound>
                <outbound type="class" confirmed="yes">org.mvel.asm.MethodVisitor</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.asm.MethodVisitor.visitEnd()</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.asm.MethodAdapter.visitFieldInsn(int, java.lang.String, java.lang.String, java.lang.String)</name>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.asm.MethodAdapter.mv</outbound>
                <outbound type="class" confirmed="yes">org.mvel.asm.MethodVisitor</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.asm.MethodVisitor.visitFieldInsn(int, java.lang.String, java.lang.String, java.lang.String)</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.asm.MethodAdapter.visitFrame(int, int, java.lang.Object[], int, java.lang.Object[])</name>
                <outbound type="class" confirmed="no">java.lang.Object</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.asm.MethodAdapter.mv</outbound>
                <outbound type="class" confirmed="yes">org.mvel.asm.MethodVisitor</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.asm.MethodVisitor.visitFrame(int, int, java.lang.Object[], int, java.lang.Object[])</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.asm.MethodAdapter.visitIincInsn(int, int)</name>
                <outbound type="feature" confirmed="yes">org.mvel.asm.MethodAdapter.mv</outbound>
                <outbound type="class" confirmed="yes">org.mvel.asm.MethodVisitor</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.asm.MethodVisitor.visitIincInsn(int, int)</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.asm.MethodAdapter.visitInsn(int)</name>
                <outbound type="feature" confirmed="yes">org.mvel.asm.MethodAdapter.mv</outbound>
                <outbound type="class" confirmed="yes">org.mvel.asm.MethodVisitor</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.asm.MethodVisitor.visitInsn(int)</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.asm.MethodAdapter.visitIntInsn(int, int)</name>
                <outbound type="feature" confirmed="yes">org.mvel.asm.MethodAdapter.mv</outbound>
                <outbound type="class" confirmed="yes">org.mvel.asm.MethodVisitor</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.asm.MethodVisitor.visitIntInsn(int, int)</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.asm.MethodAdapter.visitJumpInsn(int, org.mvel.asm.Label)</name>
                <outbound type="class" confirmed="yes">org.mvel.asm.Label</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.asm.MethodAdapter.mv</outbound>
                <outbound type="class" confirmed="yes">org.mvel.asm.MethodVisitor</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.asm.MethodVisitor.visitJumpInsn(int, org.mvel.asm.Label)</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.asm.MethodAdapter.visitLabel(org.mvel.asm.Label)</name>
                <outbound type="class" confirmed="yes">org.mvel.asm.Label</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.asm.MethodAdapter.mv</outbound>
                <outbound type="class" confirmed="yes">org.mvel.asm.MethodVisitor</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.asm.MethodVisitor.visitLabel(org.mvel.asm.Label)</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.asm.MethodAdapter.visitLdcInsn(java.lang.Object)</name>
                <outbound type="class" confirmed="no">java.lang.Object</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.asm.MethodAdapter.mv</outbound>
                <outbound type="class" confirmed="yes">org.mvel.asm.MethodVisitor</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.asm.MethodVisitor.visitLdcInsn(java.lang.Object)</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.asm.MethodAdapter.visitLineNumber(int, org.mvel.asm.Label)</name>
                <outbound type="class" confirmed="yes">org.mvel.asm.Label</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.asm.MethodAdapter.mv</outbound>
                <outbound type="class" confirmed="yes">org.mvel.asm.MethodVisitor</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.asm.MethodVisitor.visitLineNumber(int, org.mvel.asm.Label)</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.asm.MethodAdapter.visitLocalVariable(java.lang.String, java.lang.String, java.lang.String, org.mvel.asm.Label, org.mvel.asm.Label, int)</name>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="class" confirmed="yes">org.mvel.asm.Label</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.asm.MethodAdapter.mv</outbound>
                <outbound type="class" confirmed="yes">org.mvel.asm.MethodVisitor</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.asm.MethodVisitor.visitLocalVariable(java.lang.String, java.lang.String, java.lang.String, org.mvel.asm.Label, org.mvel.asm.Label, int)</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.asm.MethodAdapter.visitLookupSwitchInsn(org.mvel.asm.Label, int[], org.mvel.asm.Label[])</name>
                <outbound type="class" confirmed="yes">org.mvel.asm.Label</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.asm.MethodAdapter.mv</outbound>
                <outbound type="class" confirmed="yes">org.mvel.asm.MethodVisitor</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.asm.MethodVisitor.visitLookupSwitchInsn(org.mvel.asm.Label, int[], org.mvel.asm.Label[])</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.asm.MethodAdapter.visitMaxs(int, int)</name>
                <outbound type="feature" confirmed="yes">org.mvel.asm.MethodAdapter.mv</outbound>
                <outbound type="class" confirmed="yes">org.mvel.asm.MethodVisitor</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.asm.MethodVisitor.visitMaxs(int, int)</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.asm.MethodAdapter.visitMethodInsn(int, java.lang.String, java.lang.String, java.lang.String)</name>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.asm.MethodAdapter.mv</outbound>
                <outbound type="class" confirmed="yes">org.mvel.asm.MethodVisitor</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.asm.MethodVisitor.visitMethodInsn(int, java.lang.String, java.lang.String, java.lang.String)</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.asm.MethodAdapter.visitMultiANewArrayInsn(java.lang.String, int)</name>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.asm.MethodAdapter.mv</outbound>
                <outbound type="class" confirmed="yes">org.mvel.asm.MethodVisitor</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.asm.MethodVisitor.visitMultiANewArrayInsn(java.lang.String, int)</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.asm.MethodAdapter.visitParameterAnnotation(int, java.lang.String, boolean)</name>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="class" confirmed="yes">org.mvel.asm.AnnotationVisitor</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.asm.MethodAdapter.mv</outbound>
                <outbound type="class" confirmed="yes">org.mvel.asm.MethodVisitor</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.asm.MethodVisitor.visitParameterAnnotation(int, java.lang.String, boolean)</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.asm.MethodAdapter.visitTableSwitchInsn(int, int, org.mvel.asm.Label, org.mvel.asm.Label[])</name>
                <outbound type="class" confirmed="yes">org.mvel.asm.Label</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.asm.MethodAdapter.mv</outbound>
                <outbound type="class" confirmed="yes">org.mvel.asm.MethodVisitor</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.asm.MethodVisitor.visitTableSwitchInsn(int, int, org.mvel.asm.Label, org.mvel.asm.Label[])</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.asm.MethodAdapter.visitTryCatchBlock(org.mvel.asm.Label, org.mvel.asm.Label, org.mvel.asm.Label, java.lang.String)</name>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="class" confirmed="yes">org.mvel.asm.Label</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.asm.MethodAdapter.mv</outbound>
                <outbound type="class" confirmed="yes">org.mvel.asm.MethodVisitor</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.asm.MethodVisitor.visitTryCatchBlock(org.mvel.asm.Label, org.mvel.asm.Label, org.mvel.asm.Label, java.lang.String)</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.asm.MethodAdapter.visitTypeInsn(int, java.lang.String)</name>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.asm.MethodAdapter.mv</outbound>
                <outbound type="class" confirmed="yes">org.mvel.asm.MethodVisitor</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.asm.MethodVisitor.visitTypeInsn(int, java.lang.String)</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.asm.MethodAdapter.visitVarInsn(int, int)</name>
                <outbound type="feature" confirmed="yes">org.mvel.asm.MethodAdapter.mv</outbound>
                <outbound type="class" confirmed="yes">org.mvel.asm.MethodVisitor</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.asm.MethodVisitor.visitVarInsn(int, int)</outbound>
            </feature>
        </class>
        <class confirmed="yes">
            <name>org.mvel.asm.MethodVisitor</name>
            <outbound type="class" confirmed="no">java.lang.Object</outbound>
            <inbound type="feature" confirmed="yes">org.mvel.asm.ClassAdapter.visitMethod(int, java.lang.String, java.lang.String, java.lang.String, java.lang.String[])</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.asm.ClassReader.accept(org.mvel.asm.ClassVisitor, org.mvel.asm.Attribute[], int)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.asm.ClassReader.readParameterAnnotations(int, char[], boolean, org.mvel.asm.MethodVisitor)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.asm.ClassVisitor.visitMethod(int, java.lang.String, java.lang.String, java.lang.String, java.lang.String[])</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.asm.ClassWriter.visitMethod(int, java.lang.String, java.lang.String, java.lang.String, java.lang.String[])</inbound>
            <inbound type="class" confirmed="yes">org.mvel.asm.MethodAdapter</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.asm.MethodAdapter.MethodAdapter(org.mvel.asm.MethodVisitor)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.asm.MethodAdapter.mv</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.asm.MethodAdapter.visitAnnotation(java.lang.String, boolean)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.asm.MethodAdapter.visitAnnotationDefault()</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.asm.MethodAdapter.visitAttribute(org.mvel.asm.Attribute)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.asm.MethodAdapter.visitCode()</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.asm.MethodAdapter.visitEnd()</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.asm.MethodAdapter.visitFieldInsn(int, java.lang.String, java.lang.String, java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.asm.MethodAdapter.visitFrame(int, int, java.lang.Object[], int, java.lang.Object[])</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.asm.MethodAdapter.visitIincInsn(int, int)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.asm.MethodAdapter.visitInsn(int)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.asm.MethodAdapter.visitIntInsn(int, int)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.asm.MethodAdapter.visitJumpInsn(int, org.mvel.asm.Label)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.asm.MethodAdapter.visitLabel(org.mvel.asm.Label)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.asm.MethodAdapter.visitLdcInsn(java.lang.Object)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.asm.MethodAdapter.visitLineNumber(int, org.mvel.asm.Label)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.asm.MethodAdapter.visitLocalVariable(java.lang.String, java.lang.String, java.lang.String, org.mvel.asm.Label, org.mvel.asm.Label, int)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.asm.MethodAdapter.visitLookupSwitchInsn(org.mvel.asm.Label, int[], org.mvel.asm.Label[])</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.asm.MethodAdapter.visitMaxs(int, int)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.asm.MethodAdapter.visitMethodInsn(int, java.lang.String, java.lang.String, java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.asm.MethodAdapter.visitMultiANewArrayInsn(java.lang.String, int)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.asm.MethodAdapter.visitParameterAnnotation(int, java.lang.String, boolean)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.asm.MethodAdapter.visitTableSwitchInsn(int, int, org.mvel.asm.Label, org.mvel.asm.Label[])</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.asm.MethodAdapter.visitTryCatchBlock(org.mvel.asm.Label, org.mvel.asm.Label, org.mvel.asm.Label, java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.asm.MethodAdapter.visitTypeInsn(int, java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.asm.MethodAdapter.visitVarInsn(int, int)</inbound>
            <inbound type="class" confirmed="yes">org.mvel.asm.MethodWriter</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.asm.ASMAccessorOptimizer._finishJIT()</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.asm.ASMAccessorOptimizer._getAccessor(java.lang.Object)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.asm.ASMAccessorOptimizer._initJIT()</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.asm.ASMAccessorOptimizer.addPrintOut(java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.asm.ASMAccessorOptimizer.anyArrayCheck(java.lang.Class)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.asm.ASMAccessorOptimizer.buildInputs()</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.asm.ASMAccessorOptimizer.checkcast(java.lang.Class)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.asm.ASMAccessorOptimizer.dataConversion(java.lang.Class)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.asm.ASMAccessorOptimizer.getBeanProperty(java.lang.Object, java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.asm.ASMAccessorOptimizer.getCollectionProperty(java.lang.Object, java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.asm.ASMAccessorOptimizer.getMethod(java.lang.Object, java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.asm.ASMAccessorOptimizer.intPush(int)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.asm.ASMAccessorOptimizer.ldcClassConstant(java.lang.Class)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.asm.ASMAccessorOptimizer.mv</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.asm.ASMAccessorOptimizer.optimizeObjectCreation(char[], java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.asm.ASMAccessorOptimizer.unwrapPrimitive(java.lang.Class)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.asm.ASMAccessorOptimizer.wrapPrimitive(java.lang.Class)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.asm.ASMAccessorOptimizer.writeLiteralOrSubexpression(java.lang.Object, java.lang.Class)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.asm.ASMAccessorOptimizer.writeOutLiteralWrapped(java.lang.Object)</inbound>
            <feature confirmed="yes">
                <name>org.mvel.asm.MethodVisitor.visitAnnotation(java.lang.String, boolean)</name>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="class" confirmed="yes">org.mvel.asm.AnnotationVisitor</outbound>
                <inbound type="feature" confirmed="yes">org.mvel.asm.ClassReader.accept(org.mvel.asm.ClassVisitor, org.mvel.asm.Attribute[], int)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.asm.MethodAdapter.visitAnnotation(java.lang.String, boolean)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.asm.MethodVisitor.visitAnnotationDefault()</name>
                <outbound type="class" confirmed="yes">org.mvel.asm.AnnotationVisitor</outbound>
                <inbound type="feature" confirmed="yes">org.mvel.asm.ClassReader.accept(org.mvel.asm.ClassVisitor, org.mvel.asm.Attribute[], int)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.asm.MethodAdapter.visitAnnotationDefault()</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.asm.MethodVisitor.visitAttribute(org.mvel.asm.Attribute)</name>
                <outbound type="class" confirmed="yes">org.mvel.asm.Attribute</outbound>
                <inbound type="feature" confirmed="yes">org.mvel.asm.ClassReader.accept(org.mvel.asm.ClassVisitor, org.mvel.asm.Attribute[], int)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.asm.MethodAdapter.visitAttribute(org.mvel.asm.Attribute)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.asm.MethodVisitor.visitCode()</name>
                <inbound type="feature" confirmed="yes">org.mvel.asm.ClassReader.accept(org.mvel.asm.ClassVisitor, org.mvel.asm.Attribute[], int)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.asm.MethodAdapter.visitCode()</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.asm.ASMAccessorOptimizer._initJIT()</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.asm.ASMAccessorOptimizer.buildInputs()</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.asm.MethodVisitor.visitEnd()</name>
                <inbound type="feature" confirmed="yes">org.mvel.asm.ClassReader.accept(org.mvel.asm.ClassVisitor, org.mvel.asm.Attribute[], int)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.asm.MethodAdapter.visitEnd()</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.asm.ASMAccessorOptimizer._finishJIT()</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.asm.ASMAccessorOptimizer._initJIT()</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.asm.ASMAccessorOptimizer.buildInputs()</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.asm.MethodVisitor.visitFieldInsn(int, java.lang.String, java.lang.String, java.lang.String)</name>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <inbound type="feature" confirmed="yes">org.mvel.asm.ClassReader.accept(org.mvel.asm.ClassVisitor, org.mvel.asm.Attribute[], int)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.asm.MethodAdapter.visitFieldInsn(int, java.lang.String, java.lang.String, java.lang.String)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.asm.ASMAccessorOptimizer.addPrintOut(java.lang.String)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.asm.ASMAccessorOptimizer.buildInputs()</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.asm.ASMAccessorOptimizer.getBeanProperty(java.lang.Object, java.lang.String)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.asm.ASMAccessorOptimizer.getMethod(java.lang.Object, java.lang.String)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.asm.ASMAccessorOptimizer.optimizeObjectCreation(char[], java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.asm.ASMAccessorOptimizer.writeLiteralOrSubexpression(java.lang.Object, java.lang.Class)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.asm.MethodVisitor.visitFrame(int, int, java.lang.Object[], int, java.lang.Object[])</name>
                <outbound type="class" confirmed="no">java.lang.Object</outbound>
                <inbound type="feature" confirmed="yes">org.mvel.asm.ClassReader.accept(org.mvel.asm.ClassVisitor, org.mvel.asm.Attribute[], int)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.asm.MethodAdapter.visitFrame(int, int, java.lang.Object[], int, java.lang.Object[])</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.asm.MethodVisitor.visitIincInsn(int, int)</name>
                <inbound type="feature" confirmed="yes">org.mvel.asm.ClassReader.accept(org.mvel.asm.ClassVisitor, org.mvel.asm.Attribute[], int)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.asm.MethodAdapter.visitIincInsn(int, int)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.asm.ASMAccessorOptimizer.getBeanProperty(java.lang.Object, java.lang.String)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.asm.MethodVisitor.visitInsn(int)</name>
                <inbound type="feature" confirmed="yes">org.mvel.asm.ClassReader.accept(org.mvel.asm.ClassVisitor, org.mvel.asm.Attribute[], int)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.asm.MethodAdapter.visitInsn(int)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.asm.ASMAccessorOptimizer._finishJIT()</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.asm.ASMAccessorOptimizer._getAccessor(java.lang.Object)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.asm.ASMAccessorOptimizer._initJIT()</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.asm.ASMAccessorOptimizer.buildInputs()</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.asm.ASMAccessorOptimizer.getBeanProperty(java.lang.Object, java.lang.String)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.asm.ASMAccessorOptimizer.getCollectionProperty(java.lang.Object, java.lang.String)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.asm.ASMAccessorOptimizer.getMethod(java.lang.Object, java.lang.String)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.asm.ASMAccessorOptimizer.intPush(int)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.asm.ASMAccessorOptimizer.ldcClassConstant(java.lang.Class)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.asm.ASMAccessorOptimizer.optimizeObjectCreation(char[], java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.asm.ASMAccessorOptimizer.wrapPrimitive(java.lang.Class)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.asm.MethodVisitor.visitIntInsn(int, int)</name>
                <inbound type="feature" confirmed="yes">org.mvel.asm.ClassReader.accept(org.mvel.asm.ClassVisitor, org.mvel.asm.Attribute[], int)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.asm.MethodAdapter.visitIntInsn(int, int)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.asm.ASMAccessorOptimizer.intPush(int)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.asm.MethodVisitor.visitJumpInsn(int, org.mvel.asm.Label)</name>
                <outbound type="class" confirmed="yes">org.mvel.asm.Label</outbound>
                <inbound type="feature" confirmed="yes">org.mvel.asm.ClassReader.accept(org.mvel.asm.ClassVisitor, org.mvel.asm.Attribute[], int)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.asm.MethodAdapter.visitJumpInsn(int, org.mvel.asm.Label)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.asm.ASMAccessorOptimizer.getBeanProperty(java.lang.Object, java.lang.String)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.asm.ASMAccessorOptimizer.ldcClassConstant(java.lang.Class)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.asm.MethodVisitor.visitLabel(org.mvel.asm.Label)</name>
                <outbound type="class" confirmed="yes">org.mvel.asm.Label</outbound>
                <inbound type="feature" confirmed="yes">org.mvel.asm.ClassReader.accept(org.mvel.asm.ClassVisitor, org.mvel.asm.Attribute[], int)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.asm.MethodAdapter.visitLabel(org.mvel.asm.Label)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.asm.ASMAccessorOptimizer.getBeanProperty(java.lang.Object, java.lang.String)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.asm.ASMAccessorOptimizer.ldcClassConstant(java.lang.Class)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.asm.MethodVisitor.visitLdcInsn(java.lang.Object)</name>
                <outbound type="class" confirmed="no">java.lang.Object</outbound>
                <inbound type="feature" confirmed="yes">org.mvel.asm.ClassReader.accept(org.mvel.asm.ClassVisitor, org.mvel.asm.Attribute[], int)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.asm.MethodAdapter.visitLdcInsn(java.lang.Object)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.asm.ASMAccessorOptimizer.addPrintOut(java.lang.String)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.asm.ASMAccessorOptimizer.getBeanProperty(java.lang.Object, java.lang.String)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.asm.ASMAccessorOptimizer.getMethod(java.lang.Object, java.lang.String)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.asm.ASMAccessorOptimizer.ldcClassConstant(java.lang.Class)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.asm.ASMAccessorOptimizer.writeOutLiteralWrapped(java.lang.Object)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.asm.MethodVisitor.visitLineNumber(int, org.mvel.asm.Label)</name>
                <outbound type="class" confirmed="yes">org.mvel.asm.Label</outbound>
                <inbound type="feature" confirmed="yes">org.mvel.asm.ClassReader.accept(org.mvel.asm.ClassVisitor, org.mvel.asm.Attribute[], int)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.asm.MethodAdapter.visitLineNumber(int, org.mvel.asm.Label)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.asm.MethodVisitor.visitLocalVariable(java.lang.String, java.lang.String, java.lang.String, org.mvel.asm.Label, org.mvel.asm.Label, int)</name>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="class" confirmed="yes">org.mvel.asm.Label</outbound>
                <inbound type="feature" confirmed="yes">org.mvel.asm.ClassReader.accept(org.mvel.asm.ClassVisitor, org.mvel.asm.Attribute[], int)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.asm.MethodAdapter.visitLocalVariable(java.lang.String, java.lang.String, java.lang.String, org.mvel.asm.Label, org.mvel.asm.Label, int)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.asm.MethodVisitor.visitLookupSwitchInsn(org.mvel.asm.Label, int[], org.mvel.asm.Label[])</name>
                <outbound type="class" confirmed="yes">org.mvel.asm.Label</outbound>
                <inbound type="feature" confirmed="yes">org.mvel.asm.ClassReader.accept(org.mvel.asm.ClassVisitor, org.mvel.asm.Attribute[], int)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.asm.MethodAdapter.visitLookupSwitchInsn(org.mvel.asm.Label, int[], org.mvel.asm.Label[])</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.asm.MethodVisitor.visitMaxs(int, int)</name>
                <inbound type="feature" confirmed="yes">org.mvel.asm.ClassReader.accept(org.mvel.asm.ClassVisitor, org.mvel.asm.Attribute[], int)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.asm.MethodAdapter.visitMaxs(int, int)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.asm.ASMAccessorOptimizer._finishJIT()</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.asm.ASMAccessorOptimizer._initJIT()</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.asm.ASMAccessorOptimizer.buildInputs()</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.asm.MethodVisitor.visitMethodInsn(int, java.lang.String, java.lang.String, java.lang.String)</name>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <inbound type="feature" confirmed="yes">org.mvel.asm.ClassReader.accept(org.mvel.asm.ClassVisitor, org.mvel.asm.Attribute[], int)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.asm.MethodAdapter.visitMethodInsn(int, java.lang.String, java.lang.String, java.lang.String)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.asm.ASMAccessorOptimizer._getAccessor(java.lang.Object)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.asm.ASMAccessorOptimizer._initJIT()</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.asm.ASMAccessorOptimizer.addPrintOut(java.lang.String)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.asm.ASMAccessorOptimizer.buildInputs()</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.asm.ASMAccessorOptimizer.dataConversion(java.lang.Class)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.asm.ASMAccessorOptimizer.getBeanProperty(java.lang.Object, java.lang.String)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.asm.ASMAccessorOptimizer.getCollectionProperty(java.lang.Object, java.lang.String)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.asm.ASMAccessorOptimizer.getMethod(java.lang.Object, java.lang.String)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.asm.ASMAccessorOptimizer.ldcClassConstant(java.lang.Class)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.asm.ASMAccessorOptimizer.optimizeObjectCreation(char[], java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.asm.ASMAccessorOptimizer.unwrapPrimitive(java.lang.Class)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.asm.ASMAccessorOptimizer.wrapPrimitive(java.lang.Class)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.asm.ASMAccessorOptimizer.writeLiteralOrSubexpression(java.lang.Object, java.lang.Class)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.asm.MethodVisitor.visitMultiANewArrayInsn(java.lang.String, int)</name>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <inbound type="feature" confirmed="yes">org.mvel.asm.ClassReader.accept(org.mvel.asm.ClassVisitor, org.mvel.asm.Attribute[], int)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.asm.MethodAdapter.visitMultiANewArrayInsn(java.lang.String, int)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.asm.MethodVisitor.visitParameterAnnotation(int, java.lang.String, boolean)</name>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="class" confirmed="yes">org.mvel.asm.AnnotationVisitor</outbound>
                <inbound type="feature" confirmed="yes">org.mvel.asm.ClassReader.readParameterAnnotations(int, char[], boolean, org.mvel.asm.MethodVisitor)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.asm.MethodAdapter.visitParameterAnnotation(int, java.lang.String, boolean)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.asm.MethodVisitor.visitTableSwitchInsn(int, int, org.mvel.asm.Label, org.mvel.asm.Label[])</name>
                <outbound type="class" confirmed="yes">org.mvel.asm.Label</outbound>
                <inbound type="feature" confirmed="yes">org.mvel.asm.ClassReader.accept(org.mvel.asm.ClassVisitor, org.mvel.asm.Attribute[], int)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.asm.MethodAdapter.visitTableSwitchInsn(int, int, org.mvel.asm.Label, org.mvel.asm.Label[])</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.asm.MethodVisitor.visitTryCatchBlock(org.mvel.asm.Label, org.mvel.asm.Label, org.mvel.asm.Label, java.lang.String)</name>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="class" confirmed="yes">org.mvel.asm.Label</outbound>
                <inbound type="feature" confirmed="yes">org.mvel.asm.ClassReader.accept(org.mvel.asm.ClassVisitor, org.mvel.asm.Attribute[], int)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.asm.MethodAdapter.visitTryCatchBlock(org.mvel.asm.Label, org.mvel.asm.Label, org.mvel.asm.Label, java.lang.String)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.asm.MethodVisitor.visitTypeInsn(int, java.lang.String)</name>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <inbound type="feature" confirmed="yes">org.mvel.asm.ClassReader.accept(org.mvel.asm.ClassVisitor, org.mvel.asm.Attribute[], int)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.asm.MethodAdapter.visitTypeInsn(int, java.lang.String)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.asm.ASMAccessorOptimizer._getAccessor(java.lang.Object)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.asm.ASMAccessorOptimizer.anyArrayCheck(java.lang.Class)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.asm.ASMAccessorOptimizer.checkcast(java.lang.Class)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.asm.ASMAccessorOptimizer.getBeanProperty(java.lang.Object, java.lang.String)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.asm.ASMAccessorOptimizer.getCollectionProperty(java.lang.Object, java.lang.String)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.asm.ASMAccessorOptimizer.getMethod(java.lang.Object, java.lang.String)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.asm.ASMAccessorOptimizer.ldcClassConstant(java.lang.Class)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.asm.ASMAccessorOptimizer.optimizeObjectCreation(char[], java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.asm.ASMAccessorOptimizer.unwrapPrimitive(java.lang.Class)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.asm.ASMAccessorOptimizer.wrapPrimitive(java.lang.Class)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.asm.MethodVisitor.visitVarInsn(int, int)</name>
                <inbound type="feature" confirmed="yes">org.mvel.asm.ClassReader.accept(org.mvel.asm.ClassVisitor, org.mvel.asm.Attribute[], int)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.asm.MethodAdapter.visitVarInsn(int, int)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.asm.ASMAccessorOptimizer._initJIT()</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.asm.ASMAccessorOptimizer.buildInputs()</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.asm.ASMAccessorOptimizer.getBeanProperty(java.lang.Object, java.lang.String)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.asm.ASMAccessorOptimizer.getMethod(java.lang.Object, java.lang.String)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.asm.ASMAccessorOptimizer.optimizeObjectCreation(char[], java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.asm.ASMAccessorOptimizer.writeLiteralOrSubexpression(java.lang.Object, java.lang.Class)</inbound>
            </feature>
        </class>
        <class confirmed="yes">
            <name>org.mvel.asm.MethodWriter</name>
            <outbound type="class" confirmed="no">java.lang.Object</outbound>
            <outbound type="class" confirmed="yes">org.mvel.asm.MethodVisitor</outbound>
            <inbound type="feature" confirmed="yes">org.mvel.asm.ClassReader.accept(org.mvel.asm.ClassVisitor, org.mvel.asm.Attribute[], int)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.asm.ClassWriter.firstMethod</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.asm.ClassWriter.lastMethod</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.asm.ClassWriter.toByteArray()</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.asm.Label.put(org.mvel.asm.MethodWriter, org.mvel.asm.ByteVector, int, boolean)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.asm.Label.resolve(org.mvel.asm.MethodWriter, int, byte[])</inbound>
            <feature confirmed="yes">
                <name>org.mvel.asm.MethodWriter.ACC_CONSTRUCTOR</name>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.asm.MethodWriter.APPEND_FRAME</name>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.asm.MethodWriter.CHOP_FRAME</name>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.asm.MethodWriter.FRAMES</name>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.asm.MethodWriter.FULL_FRAME</name>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.asm.MethodWriter.MAXS</name>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.asm.MethodWriter.MethodWriter(org.mvel.asm.ClassWriter, int, java.lang.String, java.lang.String, java.lang.String, java.lang.String[], boolean, boolean)</name>
                <outbound type="class" confirmed="no">java.lang.Object</outbound>
                <outbound type="feature" confirmed="no">java.lang.Object.Object()</outbound>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="feature" confirmed="no">java.lang.String.equals(java.lang.Object)</outbound>
                <outbound type="class" confirmed="yes">org.mvel.asm.ByteVector</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.asm.ByteVector.ByteVector()</outbound>
                <outbound type="class" confirmed="yes">org.mvel.asm.ClassWriter</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.asm.ClassWriter.firstMethod</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.asm.ClassWriter.lastMethod</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.asm.ClassWriter.newClass(java.lang.String)</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.asm.ClassWriter.newUTF8(java.lang.String)</outbound>
                <outbound type="class" confirmed="yes">org.mvel.asm.Label</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.asm.Label.Label()</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.asm.Label.status</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.asm.MethodWriter.access</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.asm.MethodWriter.code</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.asm.MethodWriter.compute</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.asm.MethodWriter.cw</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.asm.MethodWriter.desc</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.asm.MethodWriter.descriptor</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.asm.MethodWriter.exceptionCount</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.asm.MethodWriter.exceptions</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.asm.MethodWriter.getArgumentsAndReturnSizes(java.lang.String)</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.asm.MethodWriter.labels</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.asm.MethodWriter.maxLocals</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.asm.MethodWriter.name</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.asm.MethodWriter.next</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.asm.MethodWriter.signature</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.asm.MethodWriter.visitLabel(org.mvel.asm.Label)</outbound>
                <inbound type="feature" confirmed="yes">org.mvel.asm.ClassWriter.visitMethod(int, java.lang.String, java.lang.String, java.lang.String, java.lang.String[])</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.asm.MethodWriter.NOTHING</name>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.asm.MethodWriter.RESERVED</name>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.asm.MethodWriter.SAME_FRAME</name>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.asm.MethodWriter.SAME_FRAME_EXTENDED</name>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.asm.MethodWriter.SAME_LOCALS_1_STACK_ITEM_FRAME</name>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.asm.MethodWriter.SAME_LOCALS_1_STACK_ITEM_FRAME_EXTENDED</name>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.asm.MethodWriter.access</name>
                <inbound type="feature" confirmed="yes">org.mvel.asm.MethodWriter.MethodWriter(org.mvel.asm.ClassWriter, int, java.lang.String, java.lang.String, java.lang.String, java.lang.String[], boolean, boolean)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.asm.MethodWriter.getSize()</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.asm.MethodWriter.put(org.mvel.asm.ByteVector)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.asm.MethodWriter.resizeInstructions()</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.asm.MethodWriter.visitMaxs(int, int)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.asm.MethodWriter.addSuccessor(int, org.mvel.asm.Label)</name>
                <outbound type="class" confirmed="yes">org.mvel.asm.Edge</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.asm.Edge.Edge()</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.asm.Edge.info</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.asm.Edge.next</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.asm.Edge.successor</outbound>
                <outbound type="class" confirmed="yes">org.mvel.asm.Label</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.asm.Label.successors</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.asm.MethodWriter.currentBlock</outbound>
                <inbound type="feature" confirmed="yes">org.mvel.asm.MethodWriter.visitJumpInsn(int, org.mvel.asm.Label)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.asm.MethodWriter.visitLabel(org.mvel.asm.Label)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.asm.MethodWriter.visitSwitchInsn(org.mvel.asm.Label, org.mvel.asm.Label[])</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.asm.MethodWriter.annd</name>
                <outbound type="class" confirmed="yes">org.mvel.asm.ByteVector</outbound>
                <inbound type="feature" confirmed="yes">org.mvel.asm.MethodWriter.getSize()</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.asm.MethodWriter.put(org.mvel.asm.ByteVector)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.asm.MethodWriter.visitAnnotationDefault()</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.asm.MethodWriter.anns</name>
                <outbound type="class" confirmed="yes">org.mvel.asm.AnnotationWriter</outbound>
                <inbound type="feature" confirmed="yes">org.mvel.asm.MethodWriter.getSize()</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.asm.MethodWriter.put(org.mvel.asm.ByteVector)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.asm.MethodWriter.visitAnnotation(java.lang.String, boolean)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.asm.MethodWriter.attrs</name>
                <outbound type="class" confirmed="yes">org.mvel.asm.Attribute</outbound>
                <inbound type="feature" confirmed="yes">org.mvel.asm.MethodWriter.getSize()</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.asm.MethodWriter.put(org.mvel.asm.ByteVector)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.asm.MethodWriter.visitAttribute(org.mvel.asm.Attribute)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.asm.MethodWriter.cattrs</name>
                <outbound type="class" confirmed="yes">org.mvel.asm.Attribute</outbound>
                <inbound type="feature" confirmed="yes">org.mvel.asm.MethodWriter.getSize()</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.asm.MethodWriter.put(org.mvel.asm.ByteVector)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.asm.MethodWriter.resizeInstructions()</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.asm.MethodWriter.visitAttribute(org.mvel.asm.Attribute)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.asm.MethodWriter.classReaderLength</name>
                <inbound type="feature" confirmed="yes">org.mvel.asm.ClassReader.accept(org.mvel.asm.ClassVisitor, org.mvel.asm.Attribute[], int)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.asm.MethodWriter.getSize()</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.asm.MethodWriter.put(org.mvel.asm.ByteVector)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.asm.MethodWriter.classReaderOffset</name>
                <inbound type="feature" confirmed="yes">org.mvel.asm.ClassReader.accept(org.mvel.asm.ClassVisitor, org.mvel.asm.Attribute[], int)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.asm.MethodWriter.getSize()</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.asm.MethodWriter.put(org.mvel.asm.ByteVector)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.asm.MethodWriter.code</name>
                <outbound type="class" confirmed="yes">org.mvel.asm.ByteVector</outbound>
                <inbound type="feature" confirmed="yes">org.mvel.asm.MethodWriter.MethodWriter(org.mvel.asm.ClassWriter, int, java.lang.String, java.lang.String, java.lang.String, java.lang.String[], boolean, boolean)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.asm.MethodWriter.getSize()</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.asm.MethodWriter.noSuccessor()</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.asm.MethodWriter.put(org.mvel.asm.ByteVector)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.asm.MethodWriter.resizeInstructions()</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.asm.MethodWriter.visitFieldInsn(int, java.lang.String, java.lang.String, java.lang.String)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.asm.MethodWriter.visitFrame(int, int, java.lang.Object[], int, java.lang.Object[])</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.asm.MethodWriter.visitIincInsn(int, int)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.asm.MethodWriter.visitInsn(int)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.asm.MethodWriter.visitIntInsn(int, int)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.asm.MethodWriter.visitJumpInsn(int, org.mvel.asm.Label)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.asm.MethodWriter.visitLabel(org.mvel.asm.Label)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.asm.MethodWriter.visitLdcInsn(java.lang.Object)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.asm.MethodWriter.visitLookupSwitchInsn(org.mvel.asm.Label, int[], org.mvel.asm.Label[])</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.asm.MethodWriter.visitMaxs(int, int)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.asm.MethodWriter.visitMethodInsn(int, java.lang.String, java.lang.String, java.lang.String)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.asm.MethodWriter.visitMultiANewArrayInsn(java.lang.String, int)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.asm.MethodWriter.visitTableSwitchInsn(int, int, org.mvel.asm.Label, org.mvel.asm.Label[])</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.asm.MethodWriter.visitTypeInsn(int, java.lang.String)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.asm.MethodWriter.visitVarInsn(int, int)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.asm.MethodWriter.compute</name>
                <inbound type="feature" confirmed="yes">org.mvel.asm.MethodWriter.MethodWriter(org.mvel.asm.ClassWriter, int, java.lang.String, java.lang.String, java.lang.String, java.lang.String[], boolean, boolean)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.asm.MethodWriter.noSuccessor()</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.asm.MethodWriter.resizeInstructions()</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.asm.MethodWriter.visitFieldInsn(int, java.lang.String, java.lang.String, java.lang.String)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.asm.MethodWriter.visitFrame(int, int, java.lang.Object[], int, java.lang.Object[])</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.asm.MethodWriter.visitIincInsn(int, int)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.asm.MethodWriter.visitInsn(int)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.asm.MethodWriter.visitIntInsn(int, int)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.asm.MethodWriter.visitJumpInsn(int, org.mvel.asm.Label)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.asm.MethodWriter.visitLabel(org.mvel.asm.Label)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.asm.MethodWriter.visitLdcInsn(java.lang.Object)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.asm.MethodWriter.visitLocalVariable(java.lang.String, java.lang.String, java.lang.String, org.mvel.asm.Label, org.mvel.asm.Label, int)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.asm.MethodWriter.visitMaxs(int, int)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.asm.MethodWriter.visitMethodInsn(int, java.lang.String, java.lang.String, java.lang.String)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.asm.MethodWriter.visitMultiANewArrayInsn(java.lang.String, int)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.asm.MethodWriter.visitSwitchInsn(org.mvel.asm.Label, org.mvel.asm.Label[])</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.asm.MethodWriter.visitTypeInsn(int, java.lang.String)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.asm.MethodWriter.visitVarInsn(int, int)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.asm.MethodWriter.currentBlock</name>
                <outbound type="class" confirmed="yes">org.mvel.asm.Label</outbound>
                <inbound type="feature" confirmed="yes">org.mvel.asm.MethodWriter.addSuccessor(int, org.mvel.asm.Label)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.asm.MethodWriter.noSuccessor()</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.asm.MethodWriter.visitFieldInsn(int, java.lang.String, java.lang.String, java.lang.String)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.asm.MethodWriter.visitIincInsn(int, int)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.asm.MethodWriter.visitInsn(int)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.asm.MethodWriter.visitIntInsn(int, int)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.asm.MethodWriter.visitJumpInsn(int, org.mvel.asm.Label)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.asm.MethodWriter.visitLabel(org.mvel.asm.Label)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.asm.MethodWriter.visitLdcInsn(java.lang.Object)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.asm.MethodWriter.visitMethodInsn(int, java.lang.String, java.lang.String, java.lang.String)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.asm.MethodWriter.visitMultiANewArrayInsn(java.lang.String, int)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.asm.MethodWriter.visitSwitchInsn(org.mvel.asm.Label, org.mvel.asm.Label[])</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.asm.MethodWriter.visitTypeInsn(int, java.lang.String)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.asm.MethodWriter.visitVarInsn(int, int)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.asm.MethodWriter.cw</name>
                <outbound type="class" confirmed="yes">org.mvel.asm.ClassWriter</outbound>
                <inbound type="feature" confirmed="yes">org.mvel.asm.ClassReader.accept(org.mvel.asm.ClassVisitor, org.mvel.asm.Attribute[], int)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.asm.MethodWriter.MethodWriter(org.mvel.asm.ClassWriter, int, java.lang.String, java.lang.String, java.lang.String, java.lang.String[], boolean, boolean)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.asm.MethodWriter.getSize()</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.asm.MethodWriter.put(org.mvel.asm.ByteVector)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.asm.MethodWriter.resizeInstructions()</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.asm.MethodWriter.visitAnnotation(java.lang.String, boolean)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.asm.MethodWriter.visitAnnotationDefault()</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.asm.MethodWriter.visitFieldInsn(int, java.lang.String, java.lang.String, java.lang.String)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.asm.MethodWriter.visitFrame(int, int, java.lang.Object[], int, java.lang.Object[])</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.asm.MethodWriter.visitLdcInsn(java.lang.Object)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.asm.MethodWriter.visitLocalVariable(java.lang.String, java.lang.String, java.lang.String, org.mvel.asm.Label, org.mvel.asm.Label, int)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.asm.MethodWriter.visitMaxs(int, int)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.asm.MethodWriter.visitMethodInsn(int, java.lang.String, java.lang.String, java.lang.String)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.asm.MethodWriter.visitMultiANewArrayInsn(java.lang.String, int)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.asm.MethodWriter.visitParameterAnnotation(int, java.lang.String, boolean)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.asm.MethodWriter.visitTryCatchBlock(org.mvel.asm.Label, org.mvel.asm.Label, org.mvel.asm.Label, java.lang.String)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.asm.MethodWriter.visitTypeInsn(int, java.lang.String)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.asm.MethodWriter.writeFrame()</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.asm.MethodWriter.writeFrameType(java.lang.Object)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.asm.MethodWriter.writeFrameTypes(int, int)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.asm.MethodWriter.desc</name>
                <inbound type="feature" confirmed="yes">org.mvel.asm.MethodWriter.MethodWriter(org.mvel.asm.ClassWriter, int, java.lang.String, java.lang.String, java.lang.String, java.lang.String[], boolean, boolean)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.asm.MethodWriter.put(org.mvel.asm.ByteVector)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.asm.MethodWriter.descriptor</name>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <inbound type="feature" confirmed="yes">org.mvel.asm.MethodWriter.MethodWriter(org.mvel.asm.ClassWriter, int, java.lang.String, java.lang.String, java.lang.String, java.lang.String[], boolean, boolean)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.asm.MethodWriter.resizeInstructions()</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.asm.MethodWriter.visitMaxs(int, int)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.asm.MethodWriter.visitParameterAnnotation(int, java.lang.String, boolean)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.asm.MethodWriter.endFrame()</name>
                <outbound type="class" confirmed="yes">org.mvel.asm.ByteVector</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.asm.ByteVector.ByteVector()</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.asm.MethodWriter.frame</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.asm.MethodWriter.frameCount</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.asm.MethodWriter.previousFrame</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.asm.MethodWriter.stackMap</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.asm.MethodWriter.writeFrame()</outbound>
                <inbound type="feature" confirmed="yes">org.mvel.asm.MethodWriter.visitFrame(int, int, java.lang.Object[], int, java.lang.Object[])</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.asm.MethodWriter.visitFrame(org.mvel.asm.Frame)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.asm.MethodWriter.visitMaxs(int, int)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.asm.MethodWriter.exceptionCount</name>
                <inbound type="feature" confirmed="yes">org.mvel.asm.ClassReader.accept(org.mvel.asm.ClassVisitor, org.mvel.asm.Attribute[], int)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.asm.MethodWriter.MethodWriter(org.mvel.asm.ClassWriter, int, java.lang.String, java.lang.String, java.lang.String, java.lang.String[], boolean, boolean)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.asm.MethodWriter.getSize()</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.asm.MethodWriter.put(org.mvel.asm.ByteVector)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.asm.MethodWriter.exceptions</name>
                <inbound type="feature" confirmed="yes">org.mvel.asm.ClassReader.accept(org.mvel.asm.ClassVisitor, org.mvel.asm.Attribute[], int)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.asm.MethodWriter.MethodWriter(org.mvel.asm.ClassWriter, int, java.lang.String, java.lang.String, java.lang.String, java.lang.String[], boolean, boolean)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.asm.MethodWriter.put(org.mvel.asm.ByteVector)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.asm.MethodWriter.findSubroutine(org.mvel.asm.Label, int)</name>
                <outbound type="class" confirmed="yes">org.mvel.asm.Edge</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.asm.Edge.next</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.asm.Edge.successor</outbound>
                <outbound type="class" confirmed="yes">org.mvel.asm.Label</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.asm.Label.status</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.asm.Label.successors</outbound>
                <inbound type="feature" confirmed="yes">org.mvel.asm.MethodWriter.visitMaxs(int, int)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.asm.MethodWriter.findSubroutineSuccessors(int, org.mvel.asm.Label[], int)</name>
                <outbound type="class" confirmed="yes">org.mvel.asm.Edge</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.asm.Edge.Edge()</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.asm.Edge.info</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.asm.Edge.next</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.asm.Edge.successor</outbound>
                <outbound type="class" confirmed="yes">org.mvel.asm.Label</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.asm.Label.inputStackTop</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.asm.Label.status</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.asm.Label.successor</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.asm.Label.successors</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.asm.MethodWriter.labels</outbound>
                <inbound type="feature" confirmed="yes">org.mvel.asm.MethodWriter.visitMaxs(int, int)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.asm.MethodWriter.firstHandler</name>
                <outbound type="class" confirmed="yes">org.mvel.asm.Handler</outbound>
                <inbound type="feature" confirmed="yes">org.mvel.asm.MethodWriter.put(org.mvel.asm.ByteVector)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.asm.MethodWriter.resizeInstructions()</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.asm.MethodWriter.visitMaxs(int, int)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.asm.MethodWriter.visitTryCatchBlock(org.mvel.asm.Label, org.mvel.asm.Label, org.mvel.asm.Label, java.lang.String)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.asm.MethodWriter.frame</name>
                <inbound type="feature" confirmed="yes">org.mvel.asm.MethodWriter.endFrame()</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.asm.MethodWriter.resizeInstructions()</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.asm.MethodWriter.startFrame(int, int, int)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.asm.MethodWriter.visitFrame(int, int, java.lang.Object[], int, java.lang.Object[])</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.asm.MethodWriter.visitFrame(org.mvel.asm.Frame)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.asm.MethodWriter.visitMaxs(int, int)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.asm.MethodWriter.writeFrame()</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.asm.MethodWriter.writeFrameTypes(int, int)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.asm.MethodWriter.frameCount</name>
                <inbound type="feature" confirmed="yes">org.mvel.asm.MethodWriter.endFrame()</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.asm.MethodWriter.put(org.mvel.asm.ByteVector)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.asm.MethodWriter.resizeInstructions()</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.asm.MethodWriter.visitFrame(int, int, java.lang.Object[], int, java.lang.Object[])</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.asm.MethodWriter.writeFrame()</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.asm.MethodWriter.frameIndex</name>
                <inbound type="feature" confirmed="yes">org.mvel.asm.MethodWriter.startFrame(int, int, int)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.asm.MethodWriter.visitFrame(int, int, java.lang.Object[], int, java.lang.Object[])</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.asm.MethodWriter.visitFrame(org.mvel.asm.Frame)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.asm.MethodWriter.visitMaxs(int, int)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.asm.MethodWriter.getArgumentsAndReturnSizes(java.lang.String)</name>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="feature" confirmed="no">java.lang.String.charAt(int)</outbound>
                <inbound type="feature" confirmed="yes">org.mvel.asm.Frame.pop(java.lang.String)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.asm.MethodWriter.MethodWriter(org.mvel.asm.ClassWriter, int, java.lang.String, java.lang.String, java.lang.String, java.lang.String[], boolean, boolean)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.asm.MethodWriter.visitMethodInsn(int, java.lang.String, java.lang.String, java.lang.String)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.asm.MethodWriter.getNewOffset(int[], int[], int, int)</name>
                <inbound type="feature" confirmed="yes">org.mvel.asm.MethodWriter.getNewOffset(int[], int[], org.mvel.asm.Label)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.asm.MethodWriter.resizeInstructions()</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.asm.MethodWriter.getNewOffset(int[], int[], org.mvel.asm.Label)</name>
                <outbound type="class" confirmed="yes">org.mvel.asm.Label</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.asm.Label.position</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.asm.Label.status</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.asm.MethodWriter.getNewOffset(int[], int[], int, int)</outbound>
                <inbound type="feature" confirmed="yes">org.mvel.asm.MethodWriter.resizeInstructions()</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.asm.MethodWriter.getSize()</name>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="class" confirmed="yes">org.mvel.asm.AnnotationWriter</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.asm.AnnotationWriter.getSize()</outbound>
                <outbound type="class" confirmed="yes">org.mvel.asm.Attribute</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.asm.Attribute.getSize(org.mvel.asm.ClassWriter, byte[], int, int, int)</outbound>
                <outbound type="class" confirmed="yes">org.mvel.asm.ByteVector</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.asm.ByteVector.data</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.asm.ByteVector.length</outbound>
                <outbound type="class" confirmed="yes">org.mvel.asm.ClassWriter</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.asm.ClassWriter.newUTF8(java.lang.String)</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.asm.ClassWriter.version</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.asm.MethodWriter.access</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.asm.MethodWriter.annd</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.asm.MethodWriter.anns</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.asm.MethodWriter.attrs</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.asm.MethodWriter.cattrs</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.asm.MethodWriter.classReaderLength</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.asm.MethodWriter.classReaderOffset</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.asm.MethodWriter.code</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.asm.MethodWriter.cw</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.asm.MethodWriter.exceptionCount</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.asm.MethodWriter.handlerCount</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.asm.MethodWriter.ianns</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.asm.MethodWriter.ipanns</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.asm.MethodWriter.lineNumber</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.asm.MethodWriter.localVar</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.asm.MethodWriter.localVarType</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.asm.MethodWriter.maxLocals</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.asm.MethodWriter.maxStack</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.asm.MethodWriter.panns</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.asm.MethodWriter.resize</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.asm.MethodWriter.resizeInstructions()</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.asm.MethodWriter.signature</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.asm.MethodWriter.stackMap</outbound>
                <inbound type="feature" confirmed="yes">org.mvel.asm.ClassWriter.toByteArray()</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.asm.MethodWriter.handlerCount</name>
                <inbound type="feature" confirmed="yes">org.mvel.asm.MethodWriter.getSize()</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.asm.MethodWriter.put(org.mvel.asm.ByteVector)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.asm.MethodWriter.visitTryCatchBlock(org.mvel.asm.Label, org.mvel.asm.Label, org.mvel.asm.Label, java.lang.String)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.asm.MethodWriter.visitVarInsn(int, int)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.asm.MethodWriter.ianns</name>
                <outbound type="class" confirmed="yes">org.mvel.asm.AnnotationWriter</outbound>
                <inbound type="feature" confirmed="yes">org.mvel.asm.MethodWriter.getSize()</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.asm.MethodWriter.put(org.mvel.asm.ByteVector)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.asm.MethodWriter.visitAnnotation(java.lang.String, boolean)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.asm.MethodWriter.ipanns</name>
                <outbound type="class" confirmed="yes">org.mvel.asm.AnnotationWriter</outbound>
                <inbound type="feature" confirmed="yes">org.mvel.asm.MethodWriter.getSize()</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.asm.MethodWriter.put(org.mvel.asm.ByteVector)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.asm.MethodWriter.visitParameterAnnotation(int, java.lang.String, boolean)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.asm.MethodWriter.jsr</name>
                <inbound type="feature" confirmed="yes">org.mvel.asm.MethodWriter.visitJumpInsn(int, org.mvel.asm.Label)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.asm.MethodWriter.visitMaxs(int, int)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.asm.MethodWriter.labels</name>
                <outbound type="class" confirmed="yes">org.mvel.asm.Label</outbound>
                <inbound type="feature" confirmed="yes">org.mvel.asm.MethodWriter.MethodWriter(org.mvel.asm.ClassWriter, int, java.lang.String, java.lang.String, java.lang.String, java.lang.String[], boolean, boolean)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.asm.MethodWriter.findSubroutineSuccessors(int, org.mvel.asm.Label[], int)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.asm.MethodWriter.resizeInstructions()</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.asm.MethodWriter.visitMaxs(int, int)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.asm.MethodWriter.lastHandler</name>
                <outbound type="class" confirmed="yes">org.mvel.asm.Handler</outbound>
                <inbound type="feature" confirmed="yes">org.mvel.asm.MethodWriter.visitTryCatchBlock(org.mvel.asm.Label, org.mvel.asm.Label, org.mvel.asm.Label, java.lang.String)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.asm.MethodWriter.lineNumber</name>
                <outbound type="class" confirmed="yes">org.mvel.asm.ByteVector</outbound>
                <inbound type="feature" confirmed="yes">org.mvel.asm.MethodWriter.getSize()</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.asm.MethodWriter.put(org.mvel.asm.ByteVector)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.asm.MethodWriter.resizeInstructions()</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.asm.MethodWriter.visitLineNumber(int, org.mvel.asm.Label)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.asm.MethodWriter.lineNumberCount</name>
                <inbound type="feature" confirmed="yes">org.mvel.asm.MethodWriter.put(org.mvel.asm.ByteVector)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.asm.MethodWriter.visitLineNumber(int, org.mvel.asm.Label)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.asm.MethodWriter.localVar</name>
                <outbound type="class" confirmed="yes">org.mvel.asm.ByteVector</outbound>
                <inbound type="feature" confirmed="yes">org.mvel.asm.MethodWriter.getSize()</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.asm.MethodWriter.put(org.mvel.asm.ByteVector)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.asm.MethodWriter.resizeInstructions()</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.asm.MethodWriter.visitLocalVariable(java.lang.String, java.lang.String, java.lang.String, org.mvel.asm.Label, org.mvel.asm.Label, int)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.asm.MethodWriter.localVarCount</name>
                <inbound type="feature" confirmed="yes">org.mvel.asm.MethodWriter.put(org.mvel.asm.ByteVector)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.asm.MethodWriter.visitLocalVariable(java.lang.String, java.lang.String, java.lang.String, org.mvel.asm.Label, org.mvel.asm.Label, int)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.asm.MethodWriter.localVarType</name>
                <outbound type="class" confirmed="yes">org.mvel.asm.ByteVector</outbound>
                <inbound type="feature" confirmed="yes">org.mvel.asm.MethodWriter.getSize()</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.asm.MethodWriter.put(org.mvel.asm.ByteVector)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.asm.MethodWriter.resizeInstructions()</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.asm.MethodWriter.visitLocalVariable(java.lang.String, java.lang.String, java.lang.String, org.mvel.asm.Label, org.mvel.asm.Label, int)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.asm.MethodWriter.localVarTypeCount</name>
                <inbound type="feature" confirmed="yes">org.mvel.asm.MethodWriter.put(org.mvel.asm.ByteVector)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.asm.MethodWriter.visitLocalVariable(java.lang.String, java.lang.String, java.lang.String, org.mvel.asm.Label, org.mvel.asm.Label, int)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.asm.MethodWriter.maxLocals</name>
                <inbound type="feature" confirmed="yes">org.mvel.asm.MethodWriter.MethodWriter(org.mvel.asm.ClassWriter, int, java.lang.String, java.lang.String, java.lang.String, java.lang.String[], boolean, boolean)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.asm.MethodWriter.getSize()</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.asm.MethodWriter.put(org.mvel.asm.ByteVector)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.asm.MethodWriter.resizeInstructions()</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.asm.MethodWriter.visitIincInsn(int, int)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.asm.MethodWriter.visitLocalVariable(java.lang.String, java.lang.String, java.lang.String, org.mvel.asm.Label, org.mvel.asm.Label, int)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.asm.MethodWriter.visitMaxs(int, int)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.asm.MethodWriter.visitVarInsn(int, int)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.asm.MethodWriter.maxStack</name>
                <inbound type="feature" confirmed="yes">org.mvel.asm.MethodWriter.getSize()</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.asm.MethodWriter.put(org.mvel.asm.ByteVector)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.asm.MethodWriter.visitMaxs(int, int)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.asm.MethodWriter.maxStackSize</name>
                <inbound type="feature" confirmed="yes">org.mvel.asm.MethodWriter.noSuccessor()</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.asm.MethodWriter.visitFieldInsn(int, java.lang.String, java.lang.String, java.lang.String)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.asm.MethodWriter.visitInsn(int)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.asm.MethodWriter.visitIntInsn(int, int)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.asm.MethodWriter.visitLabel(org.mvel.asm.Label)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.asm.MethodWriter.visitLdcInsn(java.lang.Object)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.asm.MethodWriter.visitMethodInsn(int, java.lang.String, java.lang.String, java.lang.String)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.asm.MethodWriter.visitTypeInsn(int, java.lang.String)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.asm.MethodWriter.visitVarInsn(int, int)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.asm.MethodWriter.name</name>
                <inbound type="feature" confirmed="yes">org.mvel.asm.MethodWriter.MethodWriter(org.mvel.asm.ClassWriter, int, java.lang.String, java.lang.String, java.lang.String, java.lang.String[], boolean, boolean)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.asm.MethodWriter.put(org.mvel.asm.ByteVector)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.asm.MethodWriter.next</name>
                <inbound type="feature" confirmed="yes">org.mvel.asm.ClassWriter.toByteArray()</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.asm.MethodWriter.MethodWriter(org.mvel.asm.ClassWriter, int, java.lang.String, java.lang.String, java.lang.String, java.lang.String[], boolean, boolean)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.asm.MethodWriter.noSuccessor()</name>
                <outbound type="class" confirmed="yes">org.mvel.asm.ByteVector</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.asm.ByteVector.data</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.asm.ByteVector.length</outbound>
                <outbound type="class" confirmed="yes">org.mvel.asm.Frame</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.asm.Frame.Frame()</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.asm.Frame.owner</outbound>
                <outbound type="class" confirmed="yes">org.mvel.asm.Label</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.asm.Label.Label()</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.asm.Label.frame</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.asm.Label.outputStackMax</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.asm.Label.resolve(org.mvel.asm.MethodWriter, int, byte[])</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.asm.Label.successor</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.asm.MethodWriter.code</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.asm.MethodWriter.compute</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.asm.MethodWriter.currentBlock</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.asm.MethodWriter.maxStackSize</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.asm.MethodWriter.previousBlock</outbound>
                <inbound type="feature" confirmed="yes">org.mvel.asm.MethodWriter.visitInsn(int)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.asm.MethodWriter.visitJumpInsn(int, org.mvel.asm.Label)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.asm.MethodWriter.visitSwitchInsn(org.mvel.asm.Label, org.mvel.asm.Label[])</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.asm.MethodWriter.visitVarInsn(int, int)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.asm.MethodWriter.panns</name>
                <outbound type="class" confirmed="yes">org.mvel.asm.AnnotationWriter</outbound>
                <inbound type="feature" confirmed="yes">org.mvel.asm.MethodWriter.getSize()</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.asm.MethodWriter.put(org.mvel.asm.ByteVector)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.asm.MethodWriter.visitParameterAnnotation(int, java.lang.String, boolean)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.asm.MethodWriter.previousBlock</name>
                <outbound type="class" confirmed="yes">org.mvel.asm.Label</outbound>
                <inbound type="feature" confirmed="yes">org.mvel.asm.MethodWriter.noSuccessor()</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.asm.MethodWriter.visitLabel(org.mvel.asm.Label)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.asm.MethodWriter.previousFrame</name>
                <inbound type="feature" confirmed="yes">org.mvel.asm.MethodWriter.endFrame()</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.asm.MethodWriter.resizeInstructions()</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.asm.MethodWriter.writeFrame()</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.asm.MethodWriter.previousFrameOffset</name>
                <inbound type="feature" confirmed="yes">org.mvel.asm.MethodWriter.visitFrame(int, int, java.lang.Object[], int, java.lang.Object[])</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.asm.MethodWriter.put(org.mvel.asm.ByteVector)</name>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="class" confirmed="yes">org.mvel.asm.AnnotationWriter</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.asm.AnnotationWriter.put(org.mvel.asm.AnnotationWriter[], org.mvel.asm.ByteVector)</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.asm.AnnotationWriter.put(org.mvel.asm.ByteVector)</outbound>
                <outbound type="class" confirmed="yes">org.mvel.asm.Attribute</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.asm.Attribute.getCount()</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.asm.Attribute.getSize(org.mvel.asm.ClassWriter, byte[], int, int, int)</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.asm.Attribute.put(org.mvel.asm.ClassWriter, byte[], int, int, int, org.mvel.asm.ByteVector)</outbound>
                <outbound type="class" confirmed="yes">org.mvel.asm.ByteVector</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.asm.ByteVector.data</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.asm.ByteVector.length</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.asm.ByteVector.putByteArray(byte[], int, int)</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.asm.ByteVector.putInt(int)</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.asm.ByteVector.putShort(int)</outbound>
                <outbound type="class" confirmed="yes">org.mvel.asm.ClassReader</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.asm.ClassReader.b</outbound>
                <outbound type="class" confirmed="yes">org.mvel.asm.ClassWriter</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.asm.ClassWriter.cr</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.asm.ClassWriter.newUTF8(java.lang.String)</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.asm.ClassWriter.version</outbound>
                <outbound type="class" confirmed="yes">org.mvel.asm.Handler</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.asm.Handler.end</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.asm.Handler.handler</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.asm.Handler.next</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.asm.Handler.start</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.asm.Handler.type</outbound>
                <outbound type="class" confirmed="yes">org.mvel.asm.Label</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.asm.Label.position</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.asm.MethodWriter.access</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.asm.MethodWriter.annd</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.asm.MethodWriter.anns</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.asm.MethodWriter.attrs</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.asm.MethodWriter.cattrs</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.asm.MethodWriter.classReaderLength</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.asm.MethodWriter.classReaderOffset</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.asm.MethodWriter.code</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.asm.MethodWriter.cw</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.asm.MethodWriter.desc</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.asm.MethodWriter.exceptionCount</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.asm.MethodWriter.exceptions</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.asm.MethodWriter.firstHandler</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.asm.MethodWriter.frameCount</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.asm.MethodWriter.handlerCount</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.asm.MethodWriter.ianns</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.asm.MethodWriter.ipanns</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.asm.MethodWriter.lineNumber</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.asm.MethodWriter.lineNumberCount</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.asm.MethodWriter.localVar</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.asm.MethodWriter.localVarCount</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.asm.MethodWriter.localVarType</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.asm.MethodWriter.localVarTypeCount</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.asm.MethodWriter.maxLocals</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.asm.MethodWriter.maxStack</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.asm.MethodWriter.name</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.asm.MethodWriter.panns</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.asm.MethodWriter.signature</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.asm.MethodWriter.stackMap</outbound>
                <inbound type="feature" confirmed="yes">org.mvel.asm.ClassWriter.toByteArray()</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.asm.MethodWriter.readInt(byte[], int)</name>
                <inbound type="feature" confirmed="yes">org.mvel.asm.MethodWriter.resizeInstructions()</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.asm.MethodWriter.readShort(byte[], int)</name>
                <inbound type="feature" confirmed="yes">org.mvel.asm.MethodWriter.resizeInstructions()</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.asm.MethodWriter.readUnsignedShort(byte[], int)</name>
                <inbound type="feature" confirmed="yes">org.mvel.asm.MethodWriter.resizeInstructions()</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.asm.MethodWriter.resize</name>
                <inbound type="feature" confirmed="yes">org.mvel.asm.MethodWriter.getSize()</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.asm.MethodWriter.visitLabel(org.mvel.asm.Label)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.asm.MethodWriter.resizeInstructions()</name>
                <outbound type="class" confirmed="no">java.lang.Object</outbound>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="feature" confirmed="no">java.lang.System.arraycopy(java.lang.Object, int, java.lang.Object, int, int)</outbound>
                <outbound type="class" confirmed="yes">org.mvel.asm.Attribute</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.asm.Attribute.getLabels()</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.asm.Attribute.next</outbound>
                <outbound type="class" confirmed="yes">org.mvel.asm.ByteVector</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.asm.ByteVector.ByteVector(int)</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.asm.ByteVector.data</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.asm.ByteVector.length</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.asm.ByteVector.putByte(int)</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.asm.ByteVector.putByteArray(byte[], int, int)</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.asm.ByteVector.putInt(int)</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.asm.ByteVector.putShort(int)</outbound>
                <outbound type="class" confirmed="yes">org.mvel.asm.ClassWriter</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.asm.ClassWriter.TYPE</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.asm.ClassWriter.invalidFrames</outbound>
                <outbound type="class" confirmed="yes">org.mvel.asm.Frame</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.asm.Frame.Frame()</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.asm.Frame.initInputFrame(org.mvel.asm.ClassWriter, int, org.mvel.asm.Type[], int)</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.asm.Frame.owner</outbound>
                <outbound type="class" confirmed="yes">org.mvel.asm.Handler</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.asm.Handler.end</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.asm.Handler.handler</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.asm.Handler.next</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.asm.Handler.start</outbound>
                <outbound type="class" confirmed="yes">org.mvel.asm.Label</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.asm.Label.frame</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.asm.Label.position</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.asm.Label.status</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.asm.Label.successor</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.asm.MethodWriter.access</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.asm.MethodWriter.cattrs</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.asm.MethodWriter.code</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.asm.MethodWriter.compute</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.asm.MethodWriter.cw</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.asm.MethodWriter.descriptor</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.asm.MethodWriter.firstHandler</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.asm.MethodWriter.frame</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.asm.MethodWriter.frameCount</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.asm.MethodWriter.getNewOffset(int[], int[], int, int)</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.asm.MethodWriter.getNewOffset(int[], int[], org.mvel.asm.Label)</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.asm.MethodWriter.labels</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.asm.MethodWriter.lineNumber</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.asm.MethodWriter.localVar</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.asm.MethodWriter.localVarType</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.asm.MethodWriter.maxLocals</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.asm.MethodWriter.previousFrame</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.asm.MethodWriter.readInt(byte[], int)</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.asm.MethodWriter.readShort(byte[], int)</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.asm.MethodWriter.readUnsignedShort(byte[], int)</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.asm.MethodWriter.stackMap</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.asm.MethodWriter.visitFrame(org.mvel.asm.Frame)</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.asm.MethodWriter.writeShort(byte[], int, int)</outbound>
                <outbound type="class" confirmed="yes">org.mvel.asm.Type</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.asm.Type.getArgumentTypes(java.lang.String)</outbound>
                <inbound type="feature" confirmed="yes">org.mvel.asm.MethodWriter.getSize()</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.asm.MethodWriter.signature</name>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <inbound type="feature" confirmed="yes">org.mvel.asm.ClassReader.accept(org.mvel.asm.ClassVisitor, org.mvel.asm.Attribute[], int)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.asm.MethodWriter.MethodWriter(org.mvel.asm.ClassWriter, int, java.lang.String, java.lang.String, java.lang.String, java.lang.String[], boolean, boolean)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.asm.MethodWriter.getSize()</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.asm.MethodWriter.put(org.mvel.asm.ByteVector)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.asm.MethodWriter.stackMap</name>
                <outbound type="class" confirmed="yes">org.mvel.asm.ByteVector</outbound>
                <inbound type="feature" confirmed="yes">org.mvel.asm.MethodWriter.endFrame()</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.asm.MethodWriter.getSize()</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.asm.MethodWriter.put(org.mvel.asm.ByteVector)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.asm.MethodWriter.resizeInstructions()</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.asm.MethodWriter.visitFrame(int, int, java.lang.Object[], int, java.lang.Object[])</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.asm.MethodWriter.writeFrame()</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.asm.MethodWriter.writeFrameType(java.lang.Object)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.asm.MethodWriter.writeFrameTypes(int, int)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.asm.MethodWriter.stackSize</name>
                <inbound type="feature" confirmed="yes">org.mvel.asm.MethodWriter.visitFieldInsn(int, java.lang.String, java.lang.String, java.lang.String)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.asm.MethodWriter.visitInsn(int)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.asm.MethodWriter.visitIntInsn(int, int)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.asm.MethodWriter.visitJumpInsn(int, org.mvel.asm.Label)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.asm.MethodWriter.visitLabel(org.mvel.asm.Label)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.asm.MethodWriter.visitLdcInsn(java.lang.Object)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.asm.MethodWriter.visitMethodInsn(int, java.lang.String, java.lang.String, java.lang.String)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.asm.MethodWriter.visitMultiANewArrayInsn(java.lang.String, int)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.asm.MethodWriter.visitSwitchInsn(org.mvel.asm.Label, org.mvel.asm.Label[])</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.asm.MethodWriter.visitTypeInsn(int, java.lang.String)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.asm.MethodWriter.visitVarInsn(int, int)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.asm.MethodWriter.startFrame(int, int, int)</name>
                <outbound type="feature" confirmed="yes">org.mvel.asm.MethodWriter.frame</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.asm.MethodWriter.frameIndex</outbound>
                <inbound type="feature" confirmed="yes">org.mvel.asm.MethodWriter.visitFrame(int, int, java.lang.Object[], int, java.lang.Object[])</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.asm.MethodWriter.visitFrame(org.mvel.asm.Frame)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.asm.MethodWriter.visitMaxs(int, int)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.asm.MethodWriter.visitAnnotation(java.lang.String, boolean)</name>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="class" confirmed="yes">org.mvel.asm.AnnotationVisitor</outbound>
                <outbound type="class" confirmed="yes">org.mvel.asm.AnnotationWriter</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.asm.AnnotationWriter.AnnotationWriter(org.mvel.asm.ClassWriter, boolean, org.mvel.asm.ByteVector, org.mvel.asm.ByteVector, int)</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.asm.AnnotationWriter.next</outbound>
                <outbound type="class" confirmed="yes">org.mvel.asm.ByteVector</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.asm.ByteVector.ByteVector()</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.asm.ByteVector.putShort(int)</outbound>
                <outbound type="class" confirmed="yes">org.mvel.asm.ClassWriter</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.asm.ClassWriter.newUTF8(java.lang.String)</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.asm.MethodWriter.anns</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.asm.MethodWriter.cw</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.asm.MethodWriter.ianns</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.asm.MethodWriter.visitAnnotationDefault()</name>
                <outbound type="class" confirmed="yes">org.mvel.asm.AnnotationVisitor</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.asm.AnnotationWriter.AnnotationWriter(org.mvel.asm.ClassWriter, boolean, org.mvel.asm.ByteVector, org.mvel.asm.ByteVector, int)</outbound>
                <outbound type="class" confirmed="yes">org.mvel.asm.ByteVector</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.asm.ByteVector.ByteVector()</outbound>
                <outbound type="class" confirmed="yes">org.mvel.asm.ClassWriter</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.asm.MethodWriter.annd</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.asm.MethodWriter.cw</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.asm.MethodWriter.visitAttribute(org.mvel.asm.Attribute)</name>
                <outbound type="class" confirmed="yes">org.mvel.asm.Attribute</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.asm.Attribute.isCodeAttribute()</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.asm.Attribute.next</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.asm.MethodWriter.attrs</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.asm.MethodWriter.cattrs</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.asm.MethodWriter.visitCode()</name>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.asm.MethodWriter.visitEnd()</name>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.asm.MethodWriter.visitFieldInsn(int, java.lang.String, java.lang.String, java.lang.String)</name>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="feature" confirmed="no">java.lang.String.charAt(int)</outbound>
                <outbound type="class" confirmed="yes">org.mvel.asm.ByteVector</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.asm.ByteVector.put12(int, int)</outbound>
                <outbound type="class" confirmed="yes">org.mvel.asm.ClassWriter</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.asm.ClassWriter.newFieldItem(java.lang.String, java.lang.String, java.lang.String)</outbound>
                <outbound type="class" confirmed="yes">org.mvel.asm.Frame</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.asm.Frame.execute(int, int, org.mvel.asm.ClassWriter, org.mvel.asm.Item)</outbound>
                <outbound type="class" confirmed="yes">org.mvel.asm.Item</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.asm.Item.index</outbound>
                <outbound type="class" confirmed="yes">org.mvel.asm.Label</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.asm.Label.frame</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.asm.MethodWriter.code</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.asm.MethodWriter.compute</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.asm.MethodWriter.currentBlock</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.asm.MethodWriter.cw</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.asm.MethodWriter.maxStackSize</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.asm.MethodWriter.stackSize</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.asm.MethodWriter.visitFrame(int, int, java.lang.Object[], int, java.lang.Object[])</name>
                <outbound type="class" confirmed="no">java.lang.Integer</outbound>
                <outbound type="feature" confirmed="no">java.lang.Integer.intValue()</outbound>
                <outbound type="class" confirmed="no">java.lang.Object</outbound>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="class" confirmed="yes">org.mvel.asm.ByteVector</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.asm.ByteVector.ByteVector()</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.asm.ByteVector.length</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.asm.ByteVector.putByte(int)</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.asm.ByteVector.putShort(int)</outbound>
                <outbound type="class" confirmed="yes">org.mvel.asm.ClassWriter</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.asm.ClassWriter.addType(java.lang.String)</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.asm.ClassWriter.addUninitializedType(java.lang.String, int)</outbound>
                <outbound type="class" confirmed="yes">org.mvel.asm.Label</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.asm.Label.position</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.asm.MethodWriter.code</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.asm.MethodWriter.compute</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.asm.MethodWriter.cw</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.asm.MethodWriter.endFrame()</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.asm.MethodWriter.frame</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.asm.MethodWriter.frameCount</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.asm.MethodWriter.frameIndex</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.asm.MethodWriter.previousFrameOffset</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.asm.MethodWriter.stackMap</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.asm.MethodWriter.startFrame(int, int, int)</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.asm.MethodWriter.writeFrameType(java.lang.Object)</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.asm.MethodWriter.visitFrame(org.mvel.asm.Frame)</name>
                <outbound type="class" confirmed="yes">org.mvel.asm.Frame</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.asm.Frame.inputLocals</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.asm.Frame.inputStack</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.asm.Frame.owner</outbound>
                <outbound type="class" confirmed="yes">org.mvel.asm.Label</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.asm.Label.position</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.asm.MethodWriter.endFrame()</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.asm.MethodWriter.frame</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.asm.MethodWriter.frameIndex</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.asm.MethodWriter.startFrame(int, int, int)</outbound>
                <inbound type="feature" confirmed="yes">org.mvel.asm.MethodWriter.resizeInstructions()</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.asm.MethodWriter.visitMaxs(int, int)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.asm.MethodWriter.visitIincInsn(int, int)</name>
                <outbound type="class" confirmed="yes">org.mvel.asm.ByteVector</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.asm.ByteVector.put11(int, int)</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.asm.ByteVector.put12(int, int)</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.asm.ByteVector.putByte(int)</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.asm.ByteVector.putShort(int)</outbound>
                <outbound type="class" confirmed="yes">org.mvel.asm.ClassWriter</outbound>
                <outbound type="class" confirmed="yes">org.mvel.asm.Frame</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.asm.Frame.execute(int, int, org.mvel.asm.ClassWriter, org.mvel.asm.Item)</outbound>
                <outbound type="class" confirmed="yes">org.mvel.asm.Item</outbound>
                <outbound type="class" confirmed="yes">org.mvel.asm.Label</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.asm.Label.frame</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.asm.MethodWriter.code</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.asm.MethodWriter.compute</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.asm.MethodWriter.currentBlock</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.asm.MethodWriter.maxLocals</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.asm.MethodWriter.visitInsn(int)</name>
                <outbound type="class" confirmed="yes">org.mvel.asm.ByteVector</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.asm.ByteVector.putByte(int)</outbound>
                <outbound type="class" confirmed="yes">org.mvel.asm.ClassWriter</outbound>
                <outbound type="class" confirmed="yes">org.mvel.asm.Frame</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.asm.Frame.SIZE</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.asm.Frame.execute(int, int, org.mvel.asm.ClassWriter, org.mvel.asm.Item)</outbound>
                <outbound type="class" confirmed="yes">org.mvel.asm.Item</outbound>
                <outbound type="class" confirmed="yes">org.mvel.asm.Label</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.asm.Label.frame</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.asm.MethodWriter.code</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.asm.MethodWriter.compute</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.asm.MethodWriter.currentBlock</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.asm.MethodWriter.maxStackSize</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.asm.MethodWriter.noSuccessor()</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.asm.MethodWriter.stackSize</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.asm.MethodWriter.visitIntInsn(int, int)</name>
                <outbound type="class" confirmed="yes">org.mvel.asm.ByteVector</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.asm.ByteVector.put11(int, int)</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.asm.ByteVector.put12(int, int)</outbound>
                <outbound type="class" confirmed="yes">org.mvel.asm.ClassWriter</outbound>
                <outbound type="class" confirmed="yes">org.mvel.asm.Frame</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.asm.Frame.execute(int, int, org.mvel.asm.ClassWriter, org.mvel.asm.Item)</outbound>
                <outbound type="class" confirmed="yes">org.mvel.asm.Item</outbound>
                <outbound type="class" confirmed="yes">org.mvel.asm.Label</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.asm.Label.frame</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.asm.MethodWriter.code</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.asm.MethodWriter.compute</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.asm.MethodWriter.currentBlock</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.asm.MethodWriter.maxStackSize</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.asm.MethodWriter.stackSize</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.asm.MethodWriter.visitJumpInsn(int, org.mvel.asm.Label)</name>
                <outbound type="class" confirmed="yes">org.mvel.asm.ByteVector</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.asm.ByteVector.length</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.asm.ByteVector.putByte(int)</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.asm.ByteVector.putShort(int)</outbound>
                <outbound type="class" confirmed="yes">org.mvel.asm.ClassWriter</outbound>
                <outbound type="class" confirmed="yes">org.mvel.asm.Frame</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.asm.Frame.SIZE</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.asm.Frame.execute(int, int, org.mvel.asm.ClassWriter, org.mvel.asm.Item)</outbound>
                <outbound type="class" confirmed="yes">org.mvel.asm.Item</outbound>
                <outbound type="class" confirmed="yes">org.mvel.asm.Label</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.asm.Label.Label()</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.asm.Label.frame</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.asm.Label.getFirst()</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.asm.Label.position</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.asm.Label.put(org.mvel.asm.MethodWriter, org.mvel.asm.ByteVector, int, boolean)</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.asm.Label.status</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.asm.MethodWriter.addSuccessor(int, org.mvel.asm.Label)</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.asm.MethodWriter.code</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.asm.MethodWriter.compute</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.asm.MethodWriter.currentBlock</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.asm.MethodWriter.jsr</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.asm.MethodWriter.noSuccessor()</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.asm.MethodWriter.stackSize</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.asm.MethodWriter.visitLabel(org.mvel.asm.Label)</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.asm.MethodWriter.visitLabel(org.mvel.asm.Label)</name>
                <outbound type="class" confirmed="yes">org.mvel.asm.ByteVector</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.asm.ByteVector.data</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.asm.ByteVector.length</outbound>
                <outbound type="class" confirmed="yes">org.mvel.asm.Frame</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.asm.Frame.Frame()</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.asm.Frame.owner</outbound>
                <outbound type="class" confirmed="yes">org.mvel.asm.Label</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.asm.Label.frame</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.asm.Label.outputStackMax</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.asm.Label.position</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.asm.Label.resolve(org.mvel.asm.MethodWriter, int, byte[])</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.asm.Label.status</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.asm.Label.successor</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.asm.MethodWriter.addSuccessor(int, org.mvel.asm.Label)</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.asm.MethodWriter.code</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.asm.MethodWriter.compute</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.asm.MethodWriter.currentBlock</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.asm.MethodWriter.maxStackSize</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.asm.MethodWriter.previousBlock</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.asm.MethodWriter.resize</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.asm.MethodWriter.stackSize</outbound>
                <inbound type="feature" confirmed="yes">org.mvel.asm.MethodWriter.MethodWriter(org.mvel.asm.ClassWriter, int, java.lang.String, java.lang.String, java.lang.String, java.lang.String[], boolean, boolean)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.asm.MethodWriter.visitJumpInsn(int, org.mvel.asm.Label)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.asm.MethodWriter.visitVarInsn(int, int)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.asm.MethodWriter.visitLdcInsn(java.lang.Object)</name>
                <outbound type="class" confirmed="no">java.lang.Object</outbound>
                <outbound type="class" confirmed="yes">org.mvel.asm.ByteVector</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.asm.ByteVector.put11(int, int)</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.asm.ByteVector.put12(int, int)</outbound>
                <outbound type="class" confirmed="yes">org.mvel.asm.ClassWriter</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.asm.ClassWriter.newConstItem(java.lang.Object)</outbound>
                <outbound type="class" confirmed="yes">org.mvel.asm.Frame</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.asm.Frame.execute(int, int, org.mvel.asm.ClassWriter, org.mvel.asm.Item)</outbound>
                <outbound type="class" confirmed="yes">org.mvel.asm.Item</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.asm.Item.index</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.asm.Item.type</outbound>
                <outbound type="class" confirmed="yes">org.mvel.asm.Label</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.asm.Label.frame</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.asm.MethodWriter.code</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.asm.MethodWriter.compute</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.asm.MethodWriter.currentBlock</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.asm.MethodWriter.cw</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.asm.MethodWriter.maxStackSize</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.asm.MethodWriter.stackSize</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.asm.MethodWriter.visitLineNumber(int, org.mvel.asm.Label)</name>
                <outbound type="class" confirmed="yes">org.mvel.asm.ByteVector</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.asm.ByteVector.ByteVector()</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.asm.ByteVector.putShort(int)</outbound>
                <outbound type="class" confirmed="yes">org.mvel.asm.Label</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.asm.Label.position</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.asm.MethodWriter.lineNumber</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.asm.MethodWriter.lineNumberCount</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.asm.MethodWriter.visitLocalVariable(java.lang.String, java.lang.String, java.lang.String, org.mvel.asm.Label, org.mvel.asm.Label, int)</name>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="feature" confirmed="no">java.lang.String.charAt(int)</outbound>
                <outbound type="class" confirmed="yes">org.mvel.asm.ByteVector</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.asm.ByteVector.ByteVector()</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.asm.ByteVector.putShort(int)</outbound>
                <outbound type="class" confirmed="yes">org.mvel.asm.ClassWriter</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.asm.ClassWriter.newUTF8(java.lang.String)</outbound>
                <outbound type="class" confirmed="yes">org.mvel.asm.Label</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.asm.Label.position</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.asm.MethodWriter.compute</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.asm.MethodWriter.cw</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.asm.MethodWriter.localVar</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.asm.MethodWriter.localVarCount</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.asm.MethodWriter.localVarType</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.asm.MethodWriter.localVarTypeCount</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.asm.MethodWriter.maxLocals</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.asm.MethodWriter.visitLookupSwitchInsn(org.mvel.asm.Label, int[], org.mvel.asm.Label[])</name>
                <outbound type="class" confirmed="yes">org.mvel.asm.ByteVector</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.asm.ByteVector.length</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.asm.ByteVector.putByte(int)</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.asm.ByteVector.putInt(int)</outbound>
                <outbound type="class" confirmed="yes">org.mvel.asm.Label</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.asm.Label.put(org.mvel.asm.MethodWriter, org.mvel.asm.ByteVector, int, boolean)</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.asm.MethodWriter.code</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.asm.MethodWriter.visitSwitchInsn(org.mvel.asm.Label, org.mvel.asm.Label[])</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.asm.MethodWriter.visitMaxs(int, int)</name>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="class" confirmed="yes">org.mvel.asm.ByteVector</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.asm.ByteVector.data</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.asm.ByteVector.length</outbound>
                <outbound type="class" confirmed="yes">org.mvel.asm.ClassWriter</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.asm.ClassWriter.addType(java.lang.String)</outbound>
                <outbound type="class" confirmed="yes">org.mvel.asm.Edge</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.asm.Edge.Edge()</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.asm.Edge.info</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.asm.Edge.next</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.asm.Edge.successor</outbound>
                <outbound type="class" confirmed="yes">org.mvel.asm.Frame</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.asm.Frame.initInputFrame(org.mvel.asm.ClassWriter, int, org.mvel.asm.Type[], int)</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.asm.Frame.inputStack</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.asm.Frame.merge(org.mvel.asm.ClassWriter, org.mvel.asm.Frame, int)</outbound>
                <outbound type="class" confirmed="yes">org.mvel.asm.Handler</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.asm.Handler.desc</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.asm.Handler.end</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.asm.Handler.handler</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.asm.Handler.next</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.asm.Handler.start</outbound>
                <outbound type="class" confirmed="yes">org.mvel.asm.Label</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.asm.Label.frame</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.asm.Label.getFirst()</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.asm.Label.inputStackTop</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.asm.Label.next</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.asm.Label.outputStackMax</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.asm.Label.position</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.asm.Label.status</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.asm.Label.successor</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.asm.Label.successors</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.asm.MethodWriter.access</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.asm.MethodWriter.code</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.asm.MethodWriter.compute</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.asm.MethodWriter.cw</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.asm.MethodWriter.descriptor</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.asm.MethodWriter.endFrame()</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.asm.MethodWriter.findSubroutine(org.mvel.asm.Label, int)</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.asm.MethodWriter.findSubroutineSuccessors(int, org.mvel.asm.Label[], int)</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.asm.MethodWriter.firstHandler</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.asm.MethodWriter.frame</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.asm.MethodWriter.frameIndex</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.asm.MethodWriter.jsr</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.asm.MethodWriter.labels</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.asm.MethodWriter.maxLocals</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.asm.MethodWriter.maxStack</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.asm.MethodWriter.startFrame(int, int, int)</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.asm.MethodWriter.visitFrame(org.mvel.asm.Frame)</outbound>
                <outbound type="class" confirmed="yes">org.mvel.asm.Type</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.asm.Type.getArgumentTypes(java.lang.String)</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.asm.MethodWriter.visitMethodInsn(int, java.lang.String, java.lang.String, java.lang.String)</name>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="class" confirmed="yes">org.mvel.asm.ByteVector</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.asm.ByteVector.put11(int, int)</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.asm.ByteVector.put12(int, int)</outbound>
                <outbound type="class" confirmed="yes">org.mvel.asm.ClassWriter</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.asm.ClassWriter.newMethodItem(java.lang.String, java.lang.String, java.lang.String, boolean)</outbound>
                <outbound type="class" confirmed="yes">org.mvel.asm.Frame</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.asm.Frame.execute(int, int, org.mvel.asm.ClassWriter, org.mvel.asm.Item)</outbound>
                <outbound type="class" confirmed="yes">org.mvel.asm.Item</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.asm.Item.index</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.asm.Item.intVal</outbound>
                <outbound type="class" confirmed="yes">org.mvel.asm.Label</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.asm.Label.frame</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.asm.MethodWriter.code</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.asm.MethodWriter.compute</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.asm.MethodWriter.currentBlock</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.asm.MethodWriter.cw</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.asm.MethodWriter.getArgumentsAndReturnSizes(java.lang.String)</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.asm.MethodWriter.maxStackSize</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.asm.MethodWriter.stackSize</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.asm.MethodWriter.visitMultiANewArrayInsn(java.lang.String, int)</name>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="class" confirmed="yes">org.mvel.asm.ByteVector</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.asm.ByteVector.put12(int, int)</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.asm.ByteVector.putByte(int)</outbound>
                <outbound type="class" confirmed="yes">org.mvel.asm.ClassWriter</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.asm.ClassWriter.newClassItem(java.lang.String)</outbound>
                <outbound type="class" confirmed="yes">org.mvel.asm.Frame</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.asm.Frame.execute(int, int, org.mvel.asm.ClassWriter, org.mvel.asm.Item)</outbound>
                <outbound type="class" confirmed="yes">org.mvel.asm.Item</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.asm.Item.index</outbound>
                <outbound type="class" confirmed="yes">org.mvel.asm.Label</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.asm.Label.frame</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.asm.MethodWriter.code</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.asm.MethodWriter.compute</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.asm.MethodWriter.currentBlock</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.asm.MethodWriter.cw</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.asm.MethodWriter.stackSize</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.asm.MethodWriter.visitParameterAnnotation(int, java.lang.String, boolean)</name>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="class" confirmed="yes">org.mvel.asm.AnnotationVisitor</outbound>
                <outbound type="class" confirmed="yes">org.mvel.asm.AnnotationWriter</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.asm.AnnotationWriter.AnnotationWriter(org.mvel.asm.ClassWriter, boolean, org.mvel.asm.ByteVector, org.mvel.asm.ByteVector, int)</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.asm.AnnotationWriter.next</outbound>
                <outbound type="class" confirmed="yes">org.mvel.asm.ByteVector</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.asm.ByteVector.ByteVector()</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.asm.ByteVector.putShort(int)</outbound>
                <outbound type="class" confirmed="yes">org.mvel.asm.ClassWriter</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.asm.ClassWriter.newUTF8(java.lang.String)</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.asm.MethodWriter.cw</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.asm.MethodWriter.descriptor</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.asm.MethodWriter.ipanns</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.asm.MethodWriter.panns</outbound>
                <outbound type="class" confirmed="yes">org.mvel.asm.Type</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.asm.Type.getArgumentTypes(java.lang.String)</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.asm.MethodWriter.visitSwitchInsn(org.mvel.asm.Label, org.mvel.asm.Label[])</name>
                <outbound type="class" confirmed="yes">org.mvel.asm.ClassWriter</outbound>
                <outbound type="class" confirmed="yes">org.mvel.asm.Frame</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.asm.Frame.execute(int, int, org.mvel.asm.ClassWriter, org.mvel.asm.Item)</outbound>
                <outbound type="class" confirmed="yes">org.mvel.asm.Item</outbound>
                <outbound type="class" confirmed="yes">org.mvel.asm.Label</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.asm.Label.frame</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.asm.Label.getFirst()</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.asm.Label.status</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.asm.MethodWriter.addSuccessor(int, org.mvel.asm.Label)</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.asm.MethodWriter.compute</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.asm.MethodWriter.currentBlock</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.asm.MethodWriter.noSuccessor()</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.asm.MethodWriter.stackSize</outbound>
                <inbound type="feature" confirmed="yes">org.mvel.asm.MethodWriter.visitLookupSwitchInsn(org.mvel.asm.Label, int[], org.mvel.asm.Label[])</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.asm.MethodWriter.visitTableSwitchInsn(int, int, org.mvel.asm.Label, org.mvel.asm.Label[])</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.asm.MethodWriter.visitTableSwitchInsn(int, int, org.mvel.asm.Label, org.mvel.asm.Label[])</name>
                <outbound type="class" confirmed="yes">org.mvel.asm.ByteVector</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.asm.ByteVector.length</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.asm.ByteVector.putByte(int)</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.asm.ByteVector.putInt(int)</outbound>
                <outbound type="class" confirmed="yes">org.mvel.asm.Label</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.asm.Label.put(org.mvel.asm.MethodWriter, org.mvel.asm.ByteVector, int, boolean)</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.asm.MethodWriter.code</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.asm.MethodWriter.visitSwitchInsn(org.mvel.asm.Label, org.mvel.asm.Label[])</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.asm.MethodWriter.visitTryCatchBlock(org.mvel.asm.Label, org.mvel.asm.Label, org.mvel.asm.Label, java.lang.String)</name>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="class" confirmed="yes">org.mvel.asm.ClassWriter</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.asm.ClassWriter.newClass(java.lang.String)</outbound>
                <outbound type="class" confirmed="yes">org.mvel.asm.Handler</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.asm.Handler.Handler()</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.asm.Handler.desc</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.asm.Handler.end</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.asm.Handler.handler</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.asm.Handler.next</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.asm.Handler.start</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.asm.Handler.type</outbound>
                <outbound type="class" confirmed="yes">org.mvel.asm.Label</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.asm.MethodWriter.cw</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.asm.MethodWriter.firstHandler</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.asm.MethodWriter.handlerCount</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.asm.MethodWriter.lastHandler</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.asm.MethodWriter.visitTypeInsn(int, java.lang.String)</name>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="class" confirmed="yes">org.mvel.asm.ByteVector</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.asm.ByteVector.length</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.asm.ByteVector.put12(int, int)</outbound>
                <outbound type="class" confirmed="yes">org.mvel.asm.ClassWriter</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.asm.ClassWriter.newClassItem(java.lang.String)</outbound>
                <outbound type="class" confirmed="yes">org.mvel.asm.Frame</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.asm.Frame.execute(int, int, org.mvel.asm.ClassWriter, org.mvel.asm.Item)</outbound>
                <outbound type="class" confirmed="yes">org.mvel.asm.Item</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.asm.Item.index</outbound>
                <outbound type="class" confirmed="yes">org.mvel.asm.Label</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.asm.Label.frame</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.asm.MethodWriter.code</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.asm.MethodWriter.compute</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.asm.MethodWriter.currentBlock</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.asm.MethodWriter.cw</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.asm.MethodWriter.maxStackSize</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.asm.MethodWriter.stackSize</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.asm.MethodWriter.visitVarInsn(int, int)</name>
                <outbound type="class" confirmed="yes">org.mvel.asm.ByteVector</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.asm.ByteVector.put11(int, int)</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.asm.ByteVector.put12(int, int)</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.asm.ByteVector.putByte(int)</outbound>
                <outbound type="class" confirmed="yes">org.mvel.asm.ClassWriter</outbound>
                <outbound type="class" confirmed="yes">org.mvel.asm.Frame</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.asm.Frame.SIZE</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.asm.Frame.execute(int, int, org.mvel.asm.ClassWriter, org.mvel.asm.Item)</outbound>
                <outbound type="class" confirmed="yes">org.mvel.asm.Item</outbound>
                <outbound type="class" confirmed="yes">org.mvel.asm.Label</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.asm.Label.Label()</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.asm.Label.frame</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.asm.Label.inputStackTop</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.asm.Label.status</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.asm.MethodWriter.code</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.asm.MethodWriter.compute</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.asm.MethodWriter.currentBlock</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.asm.MethodWriter.handlerCount</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.asm.MethodWriter.maxLocals</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.asm.MethodWriter.maxStackSize</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.asm.MethodWriter.noSuccessor()</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.asm.MethodWriter.stackSize</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.asm.MethodWriter.visitLabel(org.mvel.asm.Label)</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.asm.MethodWriter.writeFrame()</name>
                <outbound type="class" confirmed="yes">org.mvel.asm.ByteVector</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.asm.ByteVector.putByte(int)</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.asm.ByteVector.putShort(int)</outbound>
                <outbound type="class" confirmed="yes">org.mvel.asm.ClassWriter</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.asm.ClassWriter.version</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.asm.MethodWriter.cw</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.asm.MethodWriter.frame</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.asm.MethodWriter.frameCount</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.asm.MethodWriter.previousFrame</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.asm.MethodWriter.stackMap</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.asm.MethodWriter.writeFrameTypes(int, int)</outbound>
                <inbound type="feature" confirmed="yes">org.mvel.asm.MethodWriter.endFrame()</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.asm.MethodWriter.writeFrameType(java.lang.Object)</name>
                <outbound type="class" confirmed="no">java.lang.Integer</outbound>
                <outbound type="feature" confirmed="no">java.lang.Integer.intValue()</outbound>
                <outbound type="class" confirmed="no">java.lang.Object</outbound>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="class" confirmed="yes">org.mvel.asm.ByteVector</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.asm.ByteVector.putByte(int)</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.asm.ByteVector.putShort(int)</outbound>
                <outbound type="class" confirmed="yes">org.mvel.asm.ClassWriter</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.asm.ClassWriter.newClass(java.lang.String)</outbound>
                <outbound type="class" confirmed="yes">org.mvel.asm.Label</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.asm.Label.position</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.asm.MethodWriter.cw</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.asm.MethodWriter.stackMap</outbound>
                <inbound type="feature" confirmed="yes">org.mvel.asm.MethodWriter.visitFrame(int, int, java.lang.Object[], int, java.lang.Object[])</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.asm.MethodWriter.writeFrameTypes(int, int)</name>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="class" confirmed="no">java.lang.StringBuffer</outbound>
                <outbound type="feature" confirmed="no">java.lang.StringBuffer.StringBuffer()</outbound>
                <outbound type="feature" confirmed="no">java.lang.StringBuffer.append(char)</outbound>
                <outbound type="feature" confirmed="no">java.lang.StringBuffer.append(java.lang.String)</outbound>
                <outbound type="feature" confirmed="no">java.lang.StringBuffer.toString()</outbound>
                <outbound type="class" confirmed="yes">org.mvel.asm.ByteVector</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.asm.ByteVector.putByte(int)</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.asm.ByteVector.putShort(int)</outbound>
                <outbound type="class" confirmed="yes">org.mvel.asm.ClassWriter</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.asm.ClassWriter.newClass(java.lang.String)</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.asm.ClassWriter.typeTable</outbound>
                <outbound type="class" confirmed="yes">org.mvel.asm.Item</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.asm.Item.intVal</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.asm.Item.strVal1</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.asm.MethodWriter.cw</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.asm.MethodWriter.frame</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.asm.MethodWriter.stackMap</outbound>
                <inbound type="feature" confirmed="yes">org.mvel.asm.MethodWriter.writeFrame()</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.asm.MethodWriter.writeShort(byte[], int, int)</name>
                <inbound type="feature" confirmed="yes">org.mvel.asm.MethodWriter.resizeInstructions()</inbound>
            </feature>
        </class>
        <class confirmed="yes">
            <name>org.mvel.asm.Opcodes</name>
            <outbound type="class" confirmed="no">java.lang.Object</outbound>
            <feature confirmed="yes">
                <name>org.mvel.asm.Opcodes.AALOAD</name>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.asm.Opcodes.AASTORE</name>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.asm.Opcodes.ACC_ABSTRACT</name>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.asm.Opcodes.ACC_ANNOTATION</name>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.asm.Opcodes.ACC_BRIDGE</name>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.asm.Opcodes.ACC_DEPRECATED</name>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.asm.Opcodes.ACC_ENUM</name>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.asm.Opcodes.ACC_FINAL</name>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.asm.Opcodes.ACC_INTERFACE</name>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.asm.Opcodes.ACC_NATIVE</name>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.asm.Opcodes.ACC_PRIVATE</name>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.asm.Opcodes.ACC_PROTECTED</name>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.asm.Opcodes.ACC_PUBLIC</name>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.asm.Opcodes.ACC_STATIC</name>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.asm.Opcodes.ACC_STRICT</name>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.asm.Opcodes.ACC_SUPER</name>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.asm.Opcodes.ACC_SYNCHRONIZED</name>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.asm.Opcodes.ACC_SYNTHETIC</name>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.asm.Opcodes.ACC_TRANSIENT</name>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.asm.Opcodes.ACC_VARARGS</name>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.asm.Opcodes.ACC_VOLATILE</name>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.asm.Opcodes.ACONST_NULL</name>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.asm.Opcodes.ALOAD</name>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.asm.Opcodes.ANEWARRAY</name>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.asm.Opcodes.ARETURN</name>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.asm.Opcodes.ARRAYLENGTH</name>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.asm.Opcodes.ASTORE</name>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.asm.Opcodes.ATHROW</name>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.asm.Opcodes.BALOAD</name>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.asm.Opcodes.BASTORE</name>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.asm.Opcodes.BIPUSH</name>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.asm.Opcodes.CALOAD</name>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.asm.Opcodes.CASTORE</name>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.asm.Opcodes.CHECKCAST</name>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.asm.Opcodes.D2F</name>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.asm.Opcodes.D2I</name>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.asm.Opcodes.D2L</name>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.asm.Opcodes.DADD</name>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.asm.Opcodes.DALOAD</name>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.asm.Opcodes.DASTORE</name>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.asm.Opcodes.DCMPG</name>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.asm.Opcodes.DCMPL</name>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.asm.Opcodes.DCONST_0</name>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.asm.Opcodes.DCONST_1</name>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.asm.Opcodes.DDIV</name>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.asm.Opcodes.DLOAD</name>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.asm.Opcodes.DMUL</name>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.asm.Opcodes.DNEG</name>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.asm.Opcodes.DOUBLE</name>
                <outbound type="class" confirmed="no">java.lang.Integer</outbound>
                <inbound type="feature" confirmed="yes">org.mvel.asm.ClassReader.accept(org.mvel.asm.ClassVisitor, org.mvel.asm.Attribute[], int)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.asm.ClassReader.readFrameType(java.lang.Object[], int, int, char[], org.mvel.asm.Label[])</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.asm.Opcodes.static {}</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.asm.Opcodes.DREM</name>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.asm.Opcodes.DRETURN</name>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.asm.Opcodes.DSTORE</name>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.asm.Opcodes.DSUB</name>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.asm.Opcodes.DUP</name>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.asm.Opcodes.DUP2</name>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.asm.Opcodes.DUP2_X1</name>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.asm.Opcodes.DUP2_X2</name>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.asm.Opcodes.DUP_X1</name>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.asm.Opcodes.DUP_X2</name>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.asm.Opcodes.F2D</name>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.asm.Opcodes.F2I</name>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.asm.Opcodes.F2L</name>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.asm.Opcodes.FADD</name>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.asm.Opcodes.FALOAD</name>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.asm.Opcodes.FASTORE</name>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.asm.Opcodes.FCMPG</name>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.asm.Opcodes.FCMPL</name>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.asm.Opcodes.FCONST_0</name>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.asm.Opcodes.FCONST_1</name>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.asm.Opcodes.FCONST_2</name>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.asm.Opcodes.FDIV</name>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.asm.Opcodes.FLOAD</name>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.asm.Opcodes.FLOAT</name>
                <outbound type="class" confirmed="no">java.lang.Integer</outbound>
                <inbound type="feature" confirmed="yes">org.mvel.asm.ClassReader.accept(org.mvel.asm.ClassVisitor, org.mvel.asm.Attribute[], int)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.asm.ClassReader.readFrameType(java.lang.Object[], int, int, char[], org.mvel.asm.Label[])</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.asm.Opcodes.static {}</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.asm.Opcodes.FMUL</name>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.asm.Opcodes.FNEG</name>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.asm.Opcodes.FREM</name>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.asm.Opcodes.FRETURN</name>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.asm.Opcodes.FSTORE</name>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.asm.Opcodes.FSUB</name>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.asm.Opcodes.F_APPEND</name>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.asm.Opcodes.F_CHOP</name>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.asm.Opcodes.F_FULL</name>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.asm.Opcodes.F_NEW</name>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.asm.Opcodes.F_SAME</name>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.asm.Opcodes.F_SAME1</name>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.asm.Opcodes.GETFIELD</name>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.asm.Opcodes.GETSTATIC</name>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.asm.Opcodes.GOTO</name>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.asm.Opcodes.I2B</name>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.asm.Opcodes.I2C</name>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.asm.Opcodes.I2D</name>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.asm.Opcodes.I2F</name>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.asm.Opcodes.I2L</name>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.asm.Opcodes.I2S</name>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.asm.Opcodes.IADD</name>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.asm.Opcodes.IALOAD</name>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.asm.Opcodes.IAND</name>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.asm.Opcodes.IASTORE</name>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.asm.Opcodes.ICONST_0</name>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.asm.Opcodes.ICONST_1</name>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.asm.Opcodes.ICONST_2</name>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.asm.Opcodes.ICONST_3</name>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.asm.Opcodes.ICONST_4</name>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.asm.Opcodes.ICONST_5</name>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.asm.Opcodes.ICONST_M1</name>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.asm.Opcodes.IDIV</name>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.asm.Opcodes.IFEQ</name>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.asm.Opcodes.IFGE</name>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.asm.Opcodes.IFGT</name>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.asm.Opcodes.IFLE</name>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.asm.Opcodes.IFLT</name>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.asm.Opcodes.IFNE</name>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.asm.Opcodes.IFNONNULL</name>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.asm.Opcodes.IFNULL</name>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.asm.Opcodes.IF_ACMPEQ</name>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.asm.Opcodes.IF_ACMPNE</name>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.asm.Opcodes.IF_ICMPEQ</name>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.asm.Opcodes.IF_ICMPGE</name>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.asm.Opcodes.IF_ICMPGT</name>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.asm.Opcodes.IF_ICMPLE</name>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.asm.Opcodes.IF_ICMPLT</name>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.asm.Opcodes.IF_ICMPNE</name>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.asm.Opcodes.IINC</name>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.asm.Opcodes.ILOAD</name>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.asm.Opcodes.IMUL</name>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.asm.Opcodes.INEG</name>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.asm.Opcodes.INSTANCEOF</name>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.asm.Opcodes.INTEGER</name>
                <outbound type="class" confirmed="no">java.lang.Integer</outbound>
                <inbound type="feature" confirmed="yes">org.mvel.asm.ClassReader.accept(org.mvel.asm.ClassVisitor, org.mvel.asm.Attribute[], int)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.asm.ClassReader.readFrameType(java.lang.Object[], int, int, char[], org.mvel.asm.Label[])</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.asm.Opcodes.static {}</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.asm.Opcodes.INVOKEINTERFACE</name>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.asm.Opcodes.INVOKESPECIAL</name>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.asm.Opcodes.INVOKESTATIC</name>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.asm.Opcodes.INVOKEVIRTUAL</name>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.asm.Opcodes.IOR</name>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.asm.Opcodes.IREM</name>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.asm.Opcodes.IRETURN</name>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.asm.Opcodes.ISHL</name>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.asm.Opcodes.ISHR</name>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.asm.Opcodes.ISTORE</name>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.asm.Opcodes.ISUB</name>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.asm.Opcodes.IUSHR</name>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.asm.Opcodes.IXOR</name>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.asm.Opcodes.JSR</name>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.asm.Opcodes.L2D</name>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.asm.Opcodes.L2F</name>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.asm.Opcodes.L2I</name>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.asm.Opcodes.LADD</name>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.asm.Opcodes.LALOAD</name>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.asm.Opcodes.LAND</name>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.asm.Opcodes.LASTORE</name>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.asm.Opcodes.LCMP</name>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.asm.Opcodes.LCONST_0</name>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.asm.Opcodes.LCONST_1</name>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.asm.Opcodes.LDC</name>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.asm.Opcodes.LDIV</name>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.asm.Opcodes.LLOAD</name>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.asm.Opcodes.LMUL</name>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.asm.Opcodes.LNEG</name>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.asm.Opcodes.LONG</name>
                <outbound type="class" confirmed="no">java.lang.Integer</outbound>
                <inbound type="feature" confirmed="yes">org.mvel.asm.ClassReader.accept(org.mvel.asm.ClassVisitor, org.mvel.asm.Attribute[], int)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.asm.ClassReader.readFrameType(java.lang.Object[], int, int, char[], org.mvel.asm.Label[])</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.asm.Opcodes.static {}</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.asm.Opcodes.LOOKUPSWITCH</name>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.asm.Opcodes.LOR</name>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.asm.Opcodes.LREM</name>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.asm.Opcodes.LRETURN</name>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.asm.Opcodes.LSHL</name>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.asm.Opcodes.LSHR</name>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.asm.Opcodes.LSTORE</name>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.asm.Opcodes.LSUB</name>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.asm.Opcodes.LUSHR</name>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.asm.Opcodes.LXOR</name>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.asm.Opcodes.MONITORENTER</name>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.asm.Opcodes.MONITOREXIT</name>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.asm.Opcodes.MULTIANEWARRAY</name>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.asm.Opcodes.NEW</name>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.asm.Opcodes.NEWARRAY</name>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.asm.Opcodes.NOP</name>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.asm.Opcodes.NULL</name>
                <outbound type="class" confirmed="no">java.lang.Integer</outbound>
                <inbound type="feature" confirmed="yes">org.mvel.asm.ClassReader.readFrameType(java.lang.Object[], int, int, char[], org.mvel.asm.Label[])</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.asm.Opcodes.static {}</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.asm.Opcodes.POP</name>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.asm.Opcodes.POP2</name>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.asm.Opcodes.PUTFIELD</name>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.asm.Opcodes.PUTSTATIC</name>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.asm.Opcodes.RET</name>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.asm.Opcodes.RETURN</name>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.asm.Opcodes.SALOAD</name>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.asm.Opcodes.SASTORE</name>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.asm.Opcodes.SIPUSH</name>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.asm.Opcodes.SWAP</name>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.asm.Opcodes.TABLESWITCH</name>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.asm.Opcodes.TOP</name>
                <outbound type="class" confirmed="no">java.lang.Integer</outbound>
                <inbound type="feature" confirmed="yes">org.mvel.asm.ClassReader.readFrameType(java.lang.Object[], int, int, char[], org.mvel.asm.Label[])</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.asm.Opcodes.static {}</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.asm.Opcodes.T_BOOLEAN</name>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.asm.Opcodes.T_BYTE</name>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.asm.Opcodes.T_CHAR</name>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.asm.Opcodes.T_DOUBLE</name>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.asm.Opcodes.T_FLOAT</name>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.asm.Opcodes.T_INT</name>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.asm.Opcodes.T_LONG</name>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.asm.Opcodes.T_SHORT</name>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.asm.Opcodes.UNINITIALIZED_THIS</name>
                <outbound type="class" confirmed="no">java.lang.Integer</outbound>
                <inbound type="feature" confirmed="yes">org.mvel.asm.ClassReader.accept(org.mvel.asm.ClassVisitor, org.mvel.asm.Attribute[], int)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.asm.ClassReader.readFrameType(java.lang.Object[], int, int, char[], org.mvel.asm.Label[])</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.asm.Opcodes.static {}</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.asm.Opcodes.V1_1</name>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.asm.Opcodes.V1_2</name>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.asm.Opcodes.V1_3</name>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.asm.Opcodes.V1_4</name>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.asm.Opcodes.V1_5</name>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.asm.Opcodes.V1_6</name>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.asm.Opcodes.static {}</name>
                <outbound type="class" confirmed="no">java.lang.Integer</outbound>
                <outbound type="feature" confirmed="no">java.lang.Integer.Integer(int)</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.asm.Opcodes.DOUBLE</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.asm.Opcodes.FLOAT</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.asm.Opcodes.INTEGER</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.asm.Opcodes.LONG</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.asm.Opcodes.NULL</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.asm.Opcodes.TOP</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.asm.Opcodes.UNINITIALIZED_THIS</outbound>
            </feature>
        </class>
        <class confirmed="yes">
            <name>org.mvel.asm.Type</name>
            <outbound type="class" confirmed="no">java.lang.Object</outbound>
            <inbound type="feature" confirmed="yes">org.mvel.asm.AnnotationWriter.visit(java.lang.String, java.lang.Object)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.asm.ClassReader.readAnnotationValue(int, char[], java.lang.String, org.mvel.asm.AnnotationVisitor)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.asm.ClassReader.readConst(int, char[])</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.asm.ClassWriter.newConstItem(java.lang.Object)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.asm.Frame.initInputFrame(org.mvel.asm.ClassWriter, int, org.mvel.asm.Type[], int)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.asm.MethodWriter.resizeInstructions()</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.asm.MethodWriter.visitMaxs(int, int)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.asm.MethodWriter.visitParameterAnnotation(int, java.lang.String, boolean)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.asm.ASMAccessorOptimizer.ldcClassConstant(java.lang.Class)</inbound>
            <feature confirmed="yes">
                <name>org.mvel.asm.Type.ARRAY</name>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.asm.Type.BOOLEAN</name>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.asm.Type.BOOLEAN_TYPE</name>
                <inbound type="feature" confirmed="yes">org.mvel.asm.Type.getType(char[], int)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.asm.Type.getType(java.lang.Class)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.asm.Type.static {}</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.asm.Type.BYTE</name>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.asm.Type.BYTE_TYPE</name>
                <inbound type="feature" confirmed="yes">org.mvel.asm.Type.getType(char[], int)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.asm.Type.getType(java.lang.Class)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.asm.Type.static {}</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.asm.Type.CHAR</name>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.asm.Type.CHAR_TYPE</name>
                <inbound type="feature" confirmed="yes">org.mvel.asm.Type.getType(char[], int)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.asm.Type.getType(java.lang.Class)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.asm.Type.static {}</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.asm.Type.DOUBLE</name>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.asm.Type.DOUBLE_TYPE</name>
                <inbound type="feature" confirmed="yes">org.mvel.asm.Type.getType(char[], int)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.asm.Type.getType(java.lang.Class)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.asm.Type.static {}</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.asm.Type.FLOAT</name>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.asm.Type.FLOAT_TYPE</name>
                <inbound type="feature" confirmed="yes">org.mvel.asm.Type.getType(char[], int)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.asm.Type.getType(java.lang.Class)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.asm.Type.static {}</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.asm.Type.INT</name>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.asm.Type.INT_TYPE</name>
                <inbound type="feature" confirmed="yes">org.mvel.asm.Type.getType(char[], int)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.asm.Type.getType(java.lang.Class)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.asm.Type.static {}</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.asm.Type.LONG</name>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.asm.Type.LONG_TYPE</name>
                <inbound type="feature" confirmed="yes">org.mvel.asm.Type.getType(char[], int)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.asm.Type.getType(java.lang.Class)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.asm.Type.static {}</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.asm.Type.OBJECT</name>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.asm.Type.SHORT</name>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.asm.Type.SHORT_TYPE</name>
                <inbound type="feature" confirmed="yes">org.mvel.asm.Type.getType(char[], int)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.asm.Type.getType(java.lang.Class)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.asm.Type.static {}</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.asm.Type.Type(int)</name>
                <outbound type="feature" confirmed="no">java.lang.Object.Object()</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.asm.Type.len</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.asm.Type.sort</outbound>
                <inbound type="feature" confirmed="yes">org.mvel.asm.Type.static {}</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.asm.Type.Type(int, char[], int, int)</name>
                <outbound type="feature" confirmed="no">java.lang.Object.Object()</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.asm.Type.buf</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.asm.Type.len</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.asm.Type.off</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.asm.Type.sort</outbound>
                <inbound type="feature" confirmed="yes">org.mvel.asm.Type.getObjectType(java.lang.String)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.asm.Type.getType(char[], int)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.asm.Type.VOID</name>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.asm.Type.VOID_TYPE</name>
                <inbound type="feature" confirmed="yes">org.mvel.asm.Type.getType(char[], int)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.asm.Type.getType(java.lang.Class)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.asm.Type.static {}</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.asm.Type.buf</name>
                <inbound type="feature" confirmed="yes">org.mvel.asm.Type.Type(int, char[], int, int)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.asm.Type.equals(java.lang.Object)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.asm.Type.getClassName()</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.asm.Type.getDescriptor(java.lang.StringBuffer)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.asm.Type.getDimensions()</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.asm.Type.getElementType()</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.asm.Type.getInternalName()</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.asm.Type.hashCode()</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.asm.Type.equals(java.lang.Object)</name>
                <outbound type="class" confirmed="no">java.lang.Object</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.asm.Type.buf</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.asm.Type.len</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.asm.Type.off</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.asm.Type.sort</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.asm.Type.getArgumentTypes(java.lang.String)</name>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="feature" confirmed="no">java.lang.String.toCharArray()</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.asm.Type.getType(char[], int)</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.asm.Type.len</outbound>
                <inbound type="feature" confirmed="yes">org.mvel.asm.MethodWriter.resizeInstructions()</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.asm.MethodWriter.visitMaxs(int, int)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.asm.MethodWriter.visitParameterAnnotation(int, java.lang.String, boolean)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.asm.Type.getArgumentTypes(java.lang.reflect.Method)</name>
                <outbound type="class" confirmed="no">java.lang.Class</outbound>
                <outbound type="class" confirmed="no">java.lang.reflect.Method</outbound>
                <outbound type="feature" confirmed="no">java.lang.reflect.Method.getParameterTypes()</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.asm.Type.getType(java.lang.Class)</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.asm.Type.getClassName()</name>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="feature" confirmed="no">java.lang.String.String(char[], int, int)</outbound>
                <outbound type="feature" confirmed="no">java.lang.String.replace(char, char)</outbound>
                <outbound type="class" confirmed="no">java.lang.StringBuffer</outbound>
                <outbound type="feature" confirmed="no">java.lang.StringBuffer.StringBuffer(java.lang.String)</outbound>
                <outbound type="feature" confirmed="no">java.lang.StringBuffer.append(java.lang.String)</outbound>
                <outbound type="feature" confirmed="no">java.lang.StringBuffer.toString()</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.asm.Type.buf</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.asm.Type.getDimensions()</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.asm.Type.getElementType()</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.asm.Type.len</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.asm.Type.off</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.asm.Type.sort</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.asm.Type.getConstructorDescriptor(java.lang.reflect.Constructor)</name>
                <outbound type="class" confirmed="no">java.lang.Class</outbound>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="class" confirmed="no">java.lang.StringBuffer</outbound>
                <outbound type="feature" confirmed="no">java.lang.StringBuffer.StringBuffer()</outbound>
                <outbound type="feature" confirmed="no">java.lang.StringBuffer.append(char)</outbound>
                <outbound type="feature" confirmed="no">java.lang.StringBuffer.append(java.lang.String)</outbound>
                <outbound type="feature" confirmed="no">java.lang.StringBuffer.toString()</outbound>
                <outbound type="class" confirmed="no">java.lang.reflect.Constructor</outbound>
                <outbound type="feature" confirmed="no">java.lang.reflect.Constructor.getParameterTypes()</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.asm.Type.getDescriptor(java.lang.StringBuffer, java.lang.Class)</outbound>
                <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.asm.ASMAccessorOptimizer.optimizeObjectCreation(char[], java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.asm.Type.getDescriptor()</name>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="class" confirmed="no">java.lang.StringBuffer</outbound>
                <outbound type="feature" confirmed="no">java.lang.StringBuffer.StringBuffer()</outbound>
                <outbound type="feature" confirmed="no">java.lang.StringBuffer.toString()</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.asm.Type.getDescriptor(java.lang.StringBuffer)</outbound>
                <inbound type="feature" confirmed="yes">org.mvel.asm.AnnotationWriter.visit(java.lang.String, java.lang.Object)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.asm.ClassWriter.newConstItem(java.lang.Object)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.asm.Frame.initInputFrame(org.mvel.asm.ClassWriter, int, org.mvel.asm.Type[], int)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.asm.Type.toString()</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.asm.Type.getDescriptor(java.lang.Class)</name>
                <outbound type="class" confirmed="no">java.lang.Class</outbound>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="class" confirmed="no">java.lang.StringBuffer</outbound>
                <outbound type="feature" confirmed="no">java.lang.StringBuffer.StringBuffer()</outbound>
                <outbound type="feature" confirmed="no">java.lang.StringBuffer.toString()</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.asm.Type.getDescriptor(java.lang.StringBuffer, java.lang.Class)</outbound>
                <inbound type="feature" confirmed="yes">org.mvel.asm.Type.getType(java.lang.Class)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.asm.ASMAccessorOptimizer.getBeanProperty(java.lang.Object, java.lang.String)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.asm.Type.getDescriptor(java.lang.StringBuffer)</name>
                <outbound type="class" confirmed="no">java.lang.StringBuffer</outbound>
                <outbound type="feature" confirmed="no">java.lang.StringBuffer.append(char)</outbound>
                <outbound type="feature" confirmed="no">java.lang.StringBuffer.append(char[], int, int)</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.asm.Type.buf</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.asm.Type.len</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.asm.Type.off</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.asm.Type.sort</outbound>
                <inbound type="feature" confirmed="yes">org.mvel.asm.Type.getDescriptor()</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.asm.Type.getMethodDescriptor(org.mvel.asm.Type, org.mvel.asm.Type[])</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.asm.Type.getDescriptor(java.lang.StringBuffer, java.lang.Class)</name>
                <outbound type="feature" confirmed="no">java.lang.Boolean.TYPE</outbound>
                <outbound type="feature" confirmed="no">java.lang.Byte.TYPE</outbound>
                <outbound type="feature" confirmed="no">java.lang.Character.TYPE</outbound>
                <outbound type="class" confirmed="no">java.lang.Class</outbound>
                <outbound type="feature" confirmed="no">java.lang.Class.getComponentType()</outbound>
                <outbound type="feature" confirmed="no">java.lang.Class.getName()</outbound>
                <outbound type="feature" confirmed="no">java.lang.Class.isArray()</outbound>
                <outbound type="feature" confirmed="no">java.lang.Class.isPrimitive()</outbound>
                <outbound type="feature" confirmed="no">java.lang.Double.TYPE</outbound>
                <outbound type="feature" confirmed="no">java.lang.Float.TYPE</outbound>
                <outbound type="feature" confirmed="no">java.lang.Integer.TYPE</outbound>
                <outbound type="feature" confirmed="no">java.lang.Short.TYPE</outbound>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="feature" confirmed="no">java.lang.String.charAt(int)</outbound>
                <outbound type="feature" confirmed="no">java.lang.String.length()</outbound>
                <outbound type="class" confirmed="no">java.lang.StringBuffer</outbound>
                <outbound type="feature" confirmed="no">java.lang.StringBuffer.append(char)</outbound>
                <outbound type="feature" confirmed="no">java.lang.Void.TYPE</outbound>
                <inbound type="feature" confirmed="yes">org.mvel.asm.Type.getConstructorDescriptor(java.lang.reflect.Constructor)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.asm.Type.getDescriptor(java.lang.Class)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.asm.Type.getMethodDescriptor(java.lang.reflect.Method)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.asm.Type.getDimensions()</name>
                <outbound type="feature" confirmed="yes">org.mvel.asm.Type.buf</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.asm.Type.off</outbound>
                <inbound type="feature" confirmed="yes">org.mvel.asm.Type.getClassName()</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.asm.Type.getElementType()</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.asm.Type.getElementType()</name>
                <outbound type="feature" confirmed="yes">org.mvel.asm.Type.buf</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.asm.Type.getDimensions()</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.asm.Type.getType(char[], int)</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.asm.Type.off</outbound>
                <inbound type="feature" confirmed="yes">org.mvel.asm.Type.getClassName()</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.asm.Type.getInternalName()</name>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="feature" confirmed="no">java.lang.String.String(char[], int, int)</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.asm.Type.buf</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.asm.Type.len</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.asm.Type.off</outbound>
                <inbound type="feature" confirmed="yes">org.mvel.asm.ClassWriter.newConstItem(java.lang.Object)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.asm.Type.getInternalName(java.lang.Class)</name>
                <outbound type="class" confirmed="no">java.lang.Class</outbound>
                <outbound type="feature" confirmed="no">java.lang.Class.getName()</outbound>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="feature" confirmed="no">java.lang.String.replace(char, char)</outbound>
                <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.asm.ASMAccessorOptimizer.checkcast(java.lang.Class)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.asm.ASMAccessorOptimizer.getBeanProperty(java.lang.Object, java.lang.String)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.asm.ASMAccessorOptimizer.getMethod(java.lang.Object, java.lang.String)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.asm.ASMAccessorOptimizer.optimizeObjectCreation(char[], java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.asm.ASMAccessorOptimizer.writeLiteralOrSubexpression(java.lang.Object, java.lang.Class)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.asm.Type.getMethodDescriptor(java.lang.reflect.Method)</name>
                <outbound type="class" confirmed="no">java.lang.Class</outbound>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="class" confirmed="no">java.lang.StringBuffer</outbound>
                <outbound type="feature" confirmed="no">java.lang.StringBuffer.StringBuffer()</outbound>
                <outbound type="feature" confirmed="no">java.lang.StringBuffer.append(char)</outbound>
                <outbound type="feature" confirmed="no">java.lang.StringBuffer.toString()</outbound>
                <outbound type="class" confirmed="no">java.lang.reflect.Method</outbound>
                <outbound type="feature" confirmed="no">java.lang.reflect.Method.getParameterTypes()</outbound>
                <outbound type="feature" confirmed="no">java.lang.reflect.Method.getReturnType()</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.asm.Type.getDescriptor(java.lang.StringBuffer, java.lang.Class)</outbound>
                <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.asm.ASMAccessorOptimizer.getBeanProperty(java.lang.Object, java.lang.String)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.asm.ASMAccessorOptimizer.getMethod(java.lang.Object, java.lang.String)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.asm.Type.getMethodDescriptor(org.mvel.asm.Type, org.mvel.asm.Type[])</name>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="class" confirmed="no">java.lang.StringBuffer</outbound>
                <outbound type="feature" confirmed="no">java.lang.StringBuffer.StringBuffer()</outbound>
                <outbound type="feature" confirmed="no">java.lang.StringBuffer.append(char)</outbound>
                <outbound type="feature" confirmed="no">java.lang.StringBuffer.toString()</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.asm.Type.getDescriptor(java.lang.StringBuffer)</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.asm.Type.getObjectType(java.lang.String)</name>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="feature" confirmed="no">java.lang.String.getChars(int, int, char[], int)</outbound>
                <outbound type="feature" confirmed="no">java.lang.String.length()</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.asm.Type.Type(int, char[], int, int)</outbound>
                <inbound type="feature" confirmed="yes">org.mvel.asm.ClassReader.readConst(int, char[])</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.asm.Type.getOpcode(int)</name>
                <outbound type="feature" confirmed="yes">org.mvel.asm.Type.sort</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.asm.Type.getReturnType(java.lang.String)</name>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="feature" confirmed="no">java.lang.String.indexOf(int)</outbound>
                <outbound type="feature" confirmed="no">java.lang.String.toCharArray()</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.asm.Type.getType(char[], int)</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.asm.Type.getReturnType(java.lang.reflect.Method)</name>
                <outbound type="class" confirmed="no">java.lang.Class</outbound>
                <outbound type="class" confirmed="no">java.lang.reflect.Method</outbound>
                <outbound type="feature" confirmed="no">java.lang.reflect.Method.getReturnType()</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.asm.Type.getType(java.lang.Class)</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.asm.Type.getSize()</name>
                <outbound type="feature" confirmed="yes">org.mvel.asm.Type.sort</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.asm.Type.getSort()</name>
                <outbound type="feature" confirmed="yes">org.mvel.asm.Type.sort</outbound>
                <inbound type="feature" confirmed="yes">org.mvel.asm.ClassWriter.newConstItem(java.lang.Object)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.asm.Type.getType(char[], int)</name>
                <outbound type="feature" confirmed="yes">org.mvel.asm.Type.BOOLEAN_TYPE</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.asm.Type.BYTE_TYPE</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.asm.Type.CHAR_TYPE</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.asm.Type.DOUBLE_TYPE</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.asm.Type.FLOAT_TYPE</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.asm.Type.INT_TYPE</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.asm.Type.LONG_TYPE</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.asm.Type.SHORT_TYPE</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.asm.Type.Type(int, char[], int, int)</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.asm.Type.VOID_TYPE</outbound>
                <inbound type="feature" confirmed="yes">org.mvel.asm.Type.getArgumentTypes(java.lang.String)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.asm.Type.getElementType()</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.asm.Type.getReturnType(java.lang.String)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.asm.Type.getType(java.lang.String)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.asm.Type.getType(java.lang.Class)</name>
                <outbound type="feature" confirmed="no">java.lang.Boolean.TYPE</outbound>
                <outbound type="feature" confirmed="no">java.lang.Byte.TYPE</outbound>
                <outbound type="feature" confirmed="no">java.lang.Character.TYPE</outbound>
                <outbound type="class" confirmed="no">java.lang.Class</outbound>
                <outbound type="feature" confirmed="no">java.lang.Class.isPrimitive()</outbound>
                <outbound type="feature" confirmed="no">java.lang.Double.TYPE</outbound>
                <outbound type="feature" confirmed="no">java.lang.Float.TYPE</outbound>
                <outbound type="feature" confirmed="no">java.lang.Integer.TYPE</outbound>
                <outbound type="feature" confirmed="no">java.lang.Short.TYPE</outbound>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="feature" confirmed="no">java.lang.Void.TYPE</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.asm.Type.BOOLEAN_TYPE</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.asm.Type.BYTE_TYPE</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.asm.Type.CHAR_TYPE</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.asm.Type.DOUBLE_TYPE</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.asm.Type.FLOAT_TYPE</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.asm.Type.INT_TYPE</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.asm.Type.LONG_TYPE</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.asm.Type.SHORT_TYPE</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.asm.Type.VOID_TYPE</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.asm.Type.getDescriptor(java.lang.Class)</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.asm.Type.getType(java.lang.String)</outbound>
                <inbound type="feature" confirmed="yes">org.mvel.asm.Type.getArgumentTypes(java.lang.reflect.Method)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.asm.Type.getReturnType(java.lang.reflect.Method)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.asm.ASMAccessorOptimizer.ldcClassConstant(java.lang.Class)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.asm.Type.getType(java.lang.String)</name>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="feature" confirmed="no">java.lang.String.toCharArray()</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.asm.Type.getType(char[], int)</outbound>
                <inbound type="feature" confirmed="yes">org.mvel.asm.ClassReader.readAnnotationValue(int, char[], java.lang.String, org.mvel.asm.AnnotationVisitor)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.asm.ClassReader.readConst(int, char[])</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.asm.Type.getType(java.lang.Class)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.asm.Type.hashCode()</name>
                <outbound type="feature" confirmed="yes">org.mvel.asm.Type.buf</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.asm.Type.len</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.asm.Type.off</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.asm.Type.sort</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.asm.Type.len</name>
                <inbound type="feature" confirmed="yes">org.mvel.asm.Type.Type(int)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.asm.Type.Type(int, char[], int, int)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.asm.Type.equals(java.lang.Object)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.asm.Type.getArgumentTypes(java.lang.String)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.asm.Type.getClassName()</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.asm.Type.getDescriptor(java.lang.StringBuffer)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.asm.Type.getInternalName()</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.asm.Type.hashCode()</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.asm.Type.off</name>
                <inbound type="feature" confirmed="yes">org.mvel.asm.Type.Type(int, char[], int, int)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.asm.Type.equals(java.lang.Object)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.asm.Type.getClassName()</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.asm.Type.getDescriptor(java.lang.StringBuffer)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.asm.Type.getDimensions()</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.asm.Type.getElementType()</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.asm.Type.getInternalName()</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.asm.Type.hashCode()</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.asm.Type.sort</name>
                <inbound type="feature" confirmed="yes">org.mvel.asm.Type.Type(int)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.asm.Type.Type(int, char[], int, int)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.asm.Type.equals(java.lang.Object)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.asm.Type.getClassName()</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.asm.Type.getDescriptor(java.lang.StringBuffer)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.asm.Type.getOpcode(int)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.asm.Type.getSize()</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.asm.Type.getSort()</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.asm.Type.hashCode()</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.asm.Type.static {}</name>
                <outbound type="feature" confirmed="yes">org.mvel.asm.Type.BOOLEAN_TYPE</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.asm.Type.BYTE_TYPE</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.asm.Type.CHAR_TYPE</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.asm.Type.DOUBLE_TYPE</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.asm.Type.FLOAT_TYPE</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.asm.Type.INT_TYPE</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.asm.Type.LONG_TYPE</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.asm.Type.SHORT_TYPE</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.asm.Type.Type(int)</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.asm.Type.VOID_TYPE</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.asm.Type.toString()</name>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.asm.Type.getDescriptor()</outbound>
            </feature>
        </class>
    </package>
    <package confirmed="yes">
        <name>org.mvel.ast</name>
        <class confirmed="yes">
            <name>org.mvel.ast.And</name>
            <outbound type="class" confirmed="yes">org.mvel.ASTNode</outbound>
            <feature confirmed="yes">
                <name>org.mvel.ast.And.And(org.mvel.ASTNode, org.mvel.ASTNode)</name>
                <outbound type="class" confirmed="yes">org.mvel.ASTNode</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.ASTNode.ASTNode()</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.ast.And.left</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.ast.And.right</outbound>
                <inbound type="feature" confirmed="yes">org.mvel.util.CompilerTools.optimizeAST(org.mvel.ASTLinkedList, boolean)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.ast.And.getLeft()</name>
                <outbound type="class" confirmed="yes">org.mvel.ASTNode</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.ast.And.left</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.ast.And.getReducedValue(java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory)</name>
                <outbound type="class" confirmed="no">java.lang.Object</outbound>
                <outbound type="feature" confirmed="no">java.lang.RuntimeException.RuntimeException(java.lang.String)</outbound>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="class" confirmed="yes">org.mvel.integration.VariableResolverFactory</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.ast.And.getReducedValueAccelerated(java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory)</name>
                <outbound type="class" confirmed="no">java.lang.Boolean</outbound>
                <outbound type="feature" confirmed="no">java.lang.Boolean.Boolean(boolean)</outbound>
                <outbound type="feature" confirmed="no">java.lang.Boolean.booleanValue()</outbound>
                <outbound type="class" confirmed="no">java.lang.Object</outbound>
                <outbound type="class" confirmed="yes">org.mvel.ASTNode</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.ASTNode.getReducedValueAccelerated(java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory)</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.ast.And.left</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.ast.And.right</outbound>
                <outbound type="class" confirmed="yes">org.mvel.integration.VariableResolverFactory</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.ast.And.getRight()</name>
                <outbound type="class" confirmed="yes">org.mvel.ASTNode</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.ast.And.right</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.ast.And.left</name>
                <outbound type="class" confirmed="yes">org.mvel.ASTNode</outbound>
                <inbound type="feature" confirmed="yes">org.mvel.ast.And.And(org.mvel.ASTNode, org.mvel.ASTNode)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.ast.And.getLeft()</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.ast.And.getReducedValueAccelerated(java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.ast.And.setLeft(org.mvel.ASTNode)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.ast.And.right</name>
                <outbound type="class" confirmed="yes">org.mvel.ASTNode</outbound>
                <inbound type="feature" confirmed="yes">org.mvel.ast.And.And(org.mvel.ASTNode, org.mvel.ASTNode)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.ast.And.getReducedValueAccelerated(java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.ast.And.getRight()</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.ast.And.setRight(org.mvel.ASTNode)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.ast.And.setLeft(org.mvel.ASTNode)</name>
                <outbound type="class" confirmed="yes">org.mvel.ASTNode</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.ast.And.left</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.ast.And.setRight(org.mvel.ASTNode)</name>
                <outbound type="class" confirmed="yes">org.mvel.ASTNode</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.ast.And.right</outbound>
            </feature>
        </class>
        <class confirmed="yes">
            <name>org.mvel.ast.AssertNode</name>
            <outbound type="class" confirmed="yes">org.mvel.ASTNode</outbound>
            <feature confirmed="yes">
                <name>org.mvel.ast.AssertNode.AssertNode(char[], int)</name>
                <outbound type="class" confirmed="no">java.io.Serializable</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.ASTNode.ASTNode(char[], int)</outbound>
                <outbound type="class" confirmed="yes">org.mvel.ExecutableStatement</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.ast.AssertNode.assertion</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.util.ParseTools.subCompileExpression(char[])</outbound>
                <inbound type="feature" confirmed="yes">org.mvel.AbstractParser.nextToken()</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.ast.AssertNode.assertion</name>
                <outbound type="class" confirmed="yes">org.mvel.ExecutableStatement</outbound>
                <inbound type="feature" confirmed="yes">org.mvel.ast.AssertNode.AssertNode(char[], int)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.ast.AssertNode.getReducedValueAccelerated(java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.ast.AssertNode.getReducedValue(java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory)</name>
                <outbound type="feature" confirmed="no">java.lang.AssertionError.AssertionError(java.lang.Object)</outbound>
                <outbound type="class" confirmed="no">java.lang.Boolean</outbound>
                <outbound type="feature" confirmed="no">java.lang.Boolean.booleanValue()</outbound>
                <outbound type="class" confirmed="no">java.lang.ClassCastException</outbound>
                <outbound type="class" confirmed="no">java.lang.Object</outbound>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="feature" confirmed="no">java.lang.String.String(char[])</outbound>
                <outbound type="class" confirmed="no">java.lang.StringBuffer</outbound>
                <outbound type="feature" confirmed="no">java.lang.StringBuffer.StringBuffer(java.lang.String)</outbound>
                <outbound type="feature" confirmed="no">java.lang.StringBuffer.append(java.lang.String)</outbound>
                <outbound type="feature" confirmed="no">java.lang.StringBuffer.toString()</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.CompileException.CompileException(java.lang.String)</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.MVEL.eval(char[], java.lang.Object, org.mvel.integration.VariableResolverFactory)</outbound>
                <outbound type="feature" confirmed="no">org.mvel.ast.AssertNode.name</outbound>
                <outbound type="class" confirmed="yes">org.mvel.integration.VariableResolverFactory</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.ast.AssertNode.getReducedValueAccelerated(java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory)</name>
                <outbound type="feature" confirmed="no">java.lang.AssertionError.AssertionError(java.lang.Object)</outbound>
                <outbound type="class" confirmed="no">java.lang.Boolean</outbound>
                <outbound type="feature" confirmed="no">java.lang.Boolean.booleanValue()</outbound>
                <outbound type="class" confirmed="no">java.lang.ClassCastException</outbound>
                <outbound type="class" confirmed="no">java.lang.Object</outbound>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="feature" confirmed="no">java.lang.String.String(char[])</outbound>
                <outbound type="class" confirmed="no">java.lang.StringBuffer</outbound>
                <outbound type="feature" confirmed="no">java.lang.StringBuffer.StringBuffer(java.lang.String)</outbound>
                <outbound type="feature" confirmed="no">java.lang.StringBuffer.append(java.lang.String)</outbound>
                <outbound type="feature" confirmed="no">java.lang.StringBuffer.toString()</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.CompileException.CompileException(java.lang.String)</outbound>
                <outbound type="class" confirmed="yes">org.mvel.ExecutableStatement</outbound>
                <outbound type="feature" confirmed="no">org.mvel.ExecutableStatement.getValue(java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory)</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.ast.AssertNode.assertion</outbound>
                <outbound type="feature" confirmed="no">org.mvel.ast.AssertNode.name</outbound>
                <outbound type="class" confirmed="yes">org.mvel.integration.VariableResolverFactory</outbound>
            </feature>
            <feature confirmed="no">
                <name>org.mvel.ast.AssertNode.name</name>
                <inbound type="feature" confirmed="yes">org.mvel.ast.AssertNode.getReducedValue(java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.ast.AssertNode.getReducedValueAccelerated(java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory)</inbound>
            </feature>
        </class>
        <class confirmed="yes">
            <name>org.mvel.ast.AssignAdd</name>
            <outbound type="class" confirmed="yes">org.mvel.ASTNode</outbound>
            <feature confirmed="yes">
                <name>org.mvel.ast.AssignAdd.AssignAdd(char[], int, java.lang.String)</name>
                <outbound type="class" confirmed="no">java.io.Serializable</outbound>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.ASTNode.ASTNode(char[], int)</outbound>
                <outbound type="class" confirmed="yes">org.mvel.ExecutableStatement</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.ast.AssignAdd.statement</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.ast.AssignAdd.varName</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.util.ParseTools.subCompileExpression(char[])</outbound>
                <inbound type="feature" confirmed="yes">org.mvel.AbstractParser.nextToken()</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.ast.AssignAdd.getReducedValue(java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory)</name>
                <outbound type="class" confirmed="no">java.lang.Object</outbound>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.MVEL.eval(char[], java.lang.Object, org.mvel.integration.VariableResolverFactory)</outbound>
                <outbound type="feature" confirmed="no">org.mvel.ast.AssignAdd.name</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.ast.AssignAdd.varName</outbound>
                <outbound type="class" confirmed="yes">org.mvel.integration.VariableResolver</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.integration.VariableResolver.getValue()</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.integration.VariableResolver.setValue(java.lang.Object)</outbound>
                <outbound type="class" confirmed="yes">org.mvel.integration.VariableResolverFactory</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.integration.VariableResolverFactory.getVariableResolver(java.lang.String)</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.util.ParseTools.doOperations(java.lang.Object, int, java.lang.Object)</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.ast.AssignAdd.getReducedValueAccelerated(java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory)</name>
                <outbound type="class" confirmed="no">java.lang.Object</outbound>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="class" confirmed="yes">org.mvel.ExecutableStatement</outbound>
                <outbound type="feature" confirmed="no">org.mvel.ExecutableStatement.getValue(java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory)</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.ast.AssignAdd.statement</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.ast.AssignAdd.varName</outbound>
                <outbound type="class" confirmed="yes">org.mvel.integration.VariableResolver</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.integration.VariableResolver.getValue()</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.integration.VariableResolver.setValue(java.lang.Object)</outbound>
                <outbound type="class" confirmed="yes">org.mvel.integration.VariableResolverFactory</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.integration.VariableResolverFactory.getVariableResolver(java.lang.String)</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.util.ParseTools.doOperations(java.lang.Object, int, java.lang.Object)</outbound>
            </feature>
            <feature confirmed="no">
                <name>org.mvel.ast.AssignAdd.name</name>
                <inbound type="feature" confirmed="yes">org.mvel.ast.AssignAdd.getReducedValue(java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.ast.AssignAdd.statement</name>
                <outbound type="class" confirmed="yes">org.mvel.ExecutableStatement</outbound>
                <inbound type="feature" confirmed="yes">org.mvel.ast.AssignAdd.AssignAdd(char[], int, java.lang.String)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.ast.AssignAdd.getReducedValueAccelerated(java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.ast.AssignAdd.varName</name>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <inbound type="feature" confirmed="yes">org.mvel.ast.AssignAdd.AssignAdd(char[], int, java.lang.String)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.ast.AssignAdd.getReducedValue(java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.ast.AssignAdd.getReducedValueAccelerated(java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory)</inbound>
            </feature>
        </class>
        <class confirmed="yes">
            <name>org.mvel.ast.AssignDiv</name>
            <outbound type="class" confirmed="yes">org.mvel.ASTNode</outbound>
            <feature confirmed="yes">
                <name>org.mvel.ast.AssignDiv.AssignDiv(char[], int, java.lang.String)</name>
                <outbound type="class" confirmed="no">java.io.Serializable</outbound>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.ASTNode.ASTNode(char[], int)</outbound>
                <outbound type="class" confirmed="yes">org.mvel.ExecutableStatement</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.ast.AssignDiv.statement</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.ast.AssignDiv.varName</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.util.ParseTools.subCompileExpression(char[])</outbound>
                <inbound type="feature" confirmed="yes">org.mvel.AbstractParser.nextToken()</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.ast.AssignDiv.getReducedValue(java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory)</name>
                <outbound type="class" confirmed="no">java.lang.Object</outbound>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.MVEL.eval(char[], java.lang.Object, org.mvel.integration.VariableResolverFactory)</outbound>
                <outbound type="feature" confirmed="no">org.mvel.ast.AssignDiv.name</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.ast.AssignDiv.varName</outbound>
                <outbound type="class" confirmed="yes">org.mvel.integration.VariableResolver</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.integration.VariableResolver.getValue()</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.integration.VariableResolver.setValue(java.lang.Object)</outbound>
                <outbound type="class" confirmed="yes">org.mvel.integration.VariableResolverFactory</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.integration.VariableResolverFactory.getVariableResolver(java.lang.String)</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.util.ParseTools.doOperations(java.lang.Object, int, java.lang.Object)</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.ast.AssignDiv.getReducedValueAccelerated(java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory)</name>
                <outbound type="class" confirmed="no">java.lang.Object</outbound>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="class" confirmed="yes">org.mvel.ExecutableStatement</outbound>
                <outbound type="feature" confirmed="no">org.mvel.ExecutableStatement.getValue(java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory)</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.ast.AssignDiv.statement</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.ast.AssignDiv.varName</outbound>
                <outbound type="class" confirmed="yes">org.mvel.integration.VariableResolver</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.integration.VariableResolver.getValue()</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.integration.VariableResolver.setValue(java.lang.Object)</outbound>
                <outbound type="class" confirmed="yes">org.mvel.integration.VariableResolverFactory</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.integration.VariableResolverFactory.getVariableResolver(java.lang.String)</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.util.ParseTools.doOperations(java.lang.Object, int, java.lang.Object)</outbound>
            </feature>
            <feature confirmed="no">
                <name>org.mvel.ast.AssignDiv.name</name>
                <inbound type="feature" confirmed="yes">org.mvel.ast.AssignDiv.getReducedValue(java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.ast.AssignDiv.statement</name>
                <outbound type="class" confirmed="yes">org.mvel.ExecutableStatement</outbound>
                <inbound type="feature" confirmed="yes">org.mvel.ast.AssignDiv.AssignDiv(char[], int, java.lang.String)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.ast.AssignDiv.getReducedValueAccelerated(java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.ast.AssignDiv.varName</name>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <inbound type="feature" confirmed="yes">org.mvel.ast.AssignDiv.AssignDiv(char[], int, java.lang.String)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.ast.AssignDiv.getReducedValue(java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.ast.AssignDiv.getReducedValueAccelerated(java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory)</inbound>
            </feature>
        </class>
        <class confirmed="yes">
            <name>org.mvel.ast.AssignMult</name>
            <outbound type="class" confirmed="yes">org.mvel.ASTNode</outbound>
            <feature confirmed="yes">
                <name>org.mvel.ast.AssignMult.AssignMult(char[], int, java.lang.String)</name>
                <outbound type="class" confirmed="no">java.io.Serializable</outbound>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.ASTNode.ASTNode(char[], int)</outbound>
                <outbound type="class" confirmed="yes">org.mvel.ExecutableStatement</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.ast.AssignMult.statement</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.ast.AssignMult.varName</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.util.ParseTools.subCompileExpression(char[])</outbound>
                <inbound type="feature" confirmed="yes">org.mvel.AbstractParser.nextToken()</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.ast.AssignMult.getReducedValue(java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory)</name>
                <outbound type="class" confirmed="no">java.lang.Object</outbound>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.MVEL.eval(char[], java.lang.Object, org.mvel.integration.VariableResolverFactory)</outbound>
                <outbound type="feature" confirmed="no">org.mvel.ast.AssignMult.name</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.ast.AssignMult.varName</outbound>
                <outbound type="class" confirmed="yes">org.mvel.integration.VariableResolver</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.integration.VariableResolver.getValue()</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.integration.VariableResolver.setValue(java.lang.Object)</outbound>
                <outbound type="class" confirmed="yes">org.mvel.integration.VariableResolverFactory</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.integration.VariableResolverFactory.getVariableResolver(java.lang.String)</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.util.ParseTools.doOperations(java.lang.Object, int, java.lang.Object)</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.ast.AssignMult.getReducedValueAccelerated(java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory)</name>
                <outbound type="class" confirmed="no">java.lang.Object</outbound>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="class" confirmed="yes">org.mvel.ExecutableStatement</outbound>
                <outbound type="feature" confirmed="no">org.mvel.ExecutableStatement.getValue(java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory)</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.ast.AssignMult.statement</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.ast.AssignMult.varName</outbound>
                <outbound type="class" confirmed="yes">org.mvel.integration.VariableResolver</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.integration.VariableResolver.getValue()</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.integration.VariableResolver.setValue(java.lang.Object)</outbound>
                <outbound type="class" confirmed="yes">org.mvel.integration.VariableResolverFactory</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.integration.VariableResolverFactory.getVariableResolver(java.lang.String)</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.util.ParseTools.doOperations(java.lang.Object, int, java.lang.Object)</outbound>
            </feature>
            <feature confirmed="no">
                <name>org.mvel.ast.AssignMult.name</name>
                <inbound type="feature" confirmed="yes">org.mvel.ast.AssignMult.getReducedValue(java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.ast.AssignMult.statement</name>
                <outbound type="class" confirmed="yes">org.mvel.ExecutableStatement</outbound>
                <inbound type="feature" confirmed="yes">org.mvel.ast.AssignMult.AssignMult(char[], int, java.lang.String)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.ast.AssignMult.getReducedValueAccelerated(java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.ast.AssignMult.varName</name>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <inbound type="feature" confirmed="yes">org.mvel.ast.AssignMult.AssignMult(char[], int, java.lang.String)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.ast.AssignMult.getReducedValue(java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.ast.AssignMult.getReducedValueAccelerated(java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory)</inbound>
            </feature>
        </class>
        <class confirmed="yes">
            <name>org.mvel.ast.AssignSub</name>
            <outbound type="class" confirmed="yes">org.mvel.ASTNode</outbound>
            <feature confirmed="yes">
                <name>org.mvel.ast.AssignSub.AssignSub(char[], int, java.lang.String)</name>
                <outbound type="class" confirmed="no">java.io.Serializable</outbound>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.ASTNode.ASTNode(char[], int)</outbound>
                <outbound type="class" confirmed="yes">org.mvel.ExecutableStatement</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.ast.AssignSub.statement</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.ast.AssignSub.varName</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.util.ParseTools.subCompileExpression(char[])</outbound>
                <inbound type="feature" confirmed="yes">org.mvel.AbstractParser.nextToken()</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.ast.AssignSub.getReducedValue(java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory)</name>
                <outbound type="class" confirmed="no">java.lang.Object</outbound>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.MVEL.eval(char[], java.lang.Object, org.mvel.integration.VariableResolverFactory)</outbound>
                <outbound type="feature" confirmed="no">org.mvel.ast.AssignSub.name</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.ast.AssignSub.varName</outbound>
                <outbound type="class" confirmed="yes">org.mvel.integration.VariableResolver</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.integration.VariableResolver.getValue()</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.integration.VariableResolver.setValue(java.lang.Object)</outbound>
                <outbound type="class" confirmed="yes">org.mvel.integration.VariableResolverFactory</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.integration.VariableResolverFactory.getVariableResolver(java.lang.String)</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.util.ParseTools.doOperations(java.lang.Object, int, java.lang.Object)</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.ast.AssignSub.getReducedValueAccelerated(java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory)</name>
                <outbound type="class" confirmed="no">java.lang.Object</outbound>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="class" confirmed="yes">org.mvel.ExecutableStatement</outbound>
                <outbound type="feature" confirmed="no">org.mvel.ExecutableStatement.getValue(java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory)</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.ast.AssignSub.statement</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.ast.AssignSub.varName</outbound>
                <outbound type="class" confirmed="yes">org.mvel.integration.VariableResolver</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.integration.VariableResolver.getValue()</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.integration.VariableResolver.setValue(java.lang.Object)</outbound>
                <outbound type="class" confirmed="yes">org.mvel.integration.VariableResolverFactory</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.integration.VariableResolverFactory.getVariableResolver(java.lang.String)</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.util.ParseTools.doOperations(java.lang.Object, int, java.lang.Object)</outbound>
            </feature>
            <feature confirmed="no">
                <name>org.mvel.ast.AssignSub.name</name>
                <inbound type="feature" confirmed="yes">org.mvel.ast.AssignSub.getReducedValue(java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.ast.AssignSub.statement</name>
                <outbound type="class" confirmed="yes">org.mvel.ExecutableStatement</outbound>
                <inbound type="feature" confirmed="yes">org.mvel.ast.AssignSub.AssignSub(char[], int, java.lang.String)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.ast.AssignSub.getReducedValueAccelerated(java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.ast.AssignSub.varName</name>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <inbound type="feature" confirmed="yes">org.mvel.ast.AssignSub.AssignSub(char[], int, java.lang.String)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.ast.AssignSub.getReducedValue(java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.ast.AssignSub.getReducedValueAccelerated(java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory)</inbound>
            </feature>
        </class>
        <class confirmed="yes">
            <name>org.mvel.ast.Assignment</name>
            <outbound type="class" confirmed="no">java.lang.Object</outbound>
            <inbound type="feature" confirmed="yes">org.mvel.ExpressionCompiler.verify(org.mvel.ParserContext, org.mvel.ASTNode)</inbound>
            <inbound type="class" confirmed="yes">org.mvel.ast.AssignmentNode</inbound>
            <inbound type="class" confirmed="yes">org.mvel.ast.DeepAssignmentNode</inbound>
            <inbound type="class" confirmed="yes">org.mvel.ast.TypedVarNode</inbound>
            <feature confirmed="yes">
                <name>org.mvel.ast.Assignment.getAssignmentVar()</name>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.ast.Assignment.isNewDeclaration()</name>
                <inbound type="feature" confirmed="yes">org.mvel.ExpressionCompiler.verify(org.mvel.ParserContext, org.mvel.ASTNode)</inbound>
            </feature>
        </class>
        <class confirmed="yes">
            <name>org.mvel.ast.AssignmentNode</name>
            <outbound type="class" confirmed="yes">org.mvel.ASTNode</outbound>
            <outbound type="class" confirmed="yes">org.mvel.ast.Assignment</outbound>
            <feature confirmed="yes">
                <name>org.mvel.ast.AssignmentNode.AssignmentNode(char[], int)</name>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.ast.AssignmentNode.AssignmentNode(char[], int, int, java.lang.String)</outbound>
                <inbound type="feature" confirmed="yes">org.mvel.AbstractParser.nextToken()</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.ast.AssignmentNode.AssignmentNode(char[], int, int, java.lang.String)</name>
                <outbound type="class" confirmed="no">java.io.Serializable</outbound>
                <outbound type="class" confirmed="no">java.lang.Class</outbound>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="feature" confirmed="no">java.lang.String.String(char[])</outbound>
                <outbound type="feature" confirmed="no">java.lang.String.String(char[], int, int)</outbound>
                <outbound type="feature" confirmed="no">java.lang.String.toCharArray()</outbound>
                <outbound type="feature" confirmed="no">java.lang.String.trim()</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.ASTNode.ASTNode(char[], int)</outbound>
                <outbound type="class" confirmed="yes">org.mvel.CompiledSetExpression</outbound>
                <outbound type="class" confirmed="yes">org.mvel.ExecutableStatement</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.ExecutableStatement.getKnownEgressType()</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.MVEL.compileSetExpression(char[])</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.ast.AssignmentNode.col</outbound>
                <outbound type="feature" confirmed="no">org.mvel.ast.AssignmentNode.egressType</outbound>
                <outbound type="feature" confirmed="no">org.mvel.ast.AssignmentNode.endOfName</outbound>
                <outbound type="feature" confirmed="no">org.mvel.ast.AssignmentNode.fields</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.ast.AssignmentNode.index</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.ast.AssignmentNode.indexTarget</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.ast.AssignmentNode.name</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.ast.AssignmentNode.setExpr</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.ast.AssignmentNode.statement</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.ast.AssignmentNode.stmt</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.util.ArrayTools.findFirst(char, char[])</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.util.ParseTools.checkNameSafety(java.lang.String)</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.util.ParseTools.createShortFormOperativeAssignment(java.lang.String, char[], int)</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.util.ParseTools.subCompileExpression(char[])</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.util.ParseTools.subset(char[], int)</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.util.ParseTools.subset(char[], int, int)</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.util.PropertyTools.find(char[], char)</outbound>
                <inbound type="feature" confirmed="yes">org.mvel.AbstractParser.nextToken()</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.ast.AssignmentNode.AssignmentNode(char[], int)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.ast.AssignmentNode.col</name>
                <inbound type="feature" confirmed="yes">org.mvel.ast.AssignmentNode.AssignmentNode(char[], int, int, java.lang.String)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.ast.AssignmentNode.getReducedValue(java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.ast.AssignmentNode.getReducedValueAccelerated(java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory)</inbound>
            </feature>
            <feature confirmed="no">
                <name>org.mvel.ast.AssignmentNode.egressType</name>
                <inbound type="feature" confirmed="yes">org.mvel.ast.AssignmentNode.AssignmentNode(char[], int, int, java.lang.String)</inbound>
            </feature>
            <feature confirmed="no">
                <name>org.mvel.ast.AssignmentNode.endOfName</name>
                <inbound type="feature" confirmed="yes">org.mvel.ast.AssignmentNode.AssignmentNode(char[], int, int, java.lang.String)</inbound>
            </feature>
            <feature confirmed="no">
                <name>org.mvel.ast.AssignmentNode.fields</name>
                <inbound type="feature" confirmed="yes">org.mvel.ast.AssignmentNode.AssignmentNode(char[], int, int, java.lang.String)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.ast.AssignmentNode.getAssignmentVar()</name>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.ast.AssignmentNode.name</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.ast.AssignmentNode.getReducedValue(java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory)</name>
                <outbound type="class" confirmed="no">java.lang.Object</outbound>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="feature" confirmed="no">java.lang.String.String(char[])</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.MVEL.eval(char[], java.lang.Object, org.mvel.integration.VariableResolverFactory)</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.MVEL.setProperty(java.lang.Object, java.lang.String, java.lang.Object)</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.ast.AssignmentNode.col</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.ast.AssignmentNode.index</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.ast.AssignmentNode.name</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.ast.AssignmentNode.stmt</outbound>
                <outbound type="class" confirmed="yes">org.mvel.integration.VariableResolver</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.integration.VariableResolver.getValue()</outbound>
                <outbound type="class" confirmed="yes">org.mvel.integration.VariableResolverFactory</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.integration.VariableResolverFactory.createVariable(java.lang.String, java.lang.Object)</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.integration.VariableResolverFactory.getVariableResolver(java.lang.String)</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.util.ParseTools.checkNameSafety(java.lang.String)</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.util.ParseTools.finalLocalVariableFactory(org.mvel.integration.VariableResolverFactory)</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.ast.AssignmentNode.getReducedValueAccelerated(java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory)</name>
                <outbound type="class" confirmed="no">java.io.Serializable</outbound>
                <outbound type="class" confirmed="no">java.lang.Class</outbound>
                <outbound type="feature" confirmed="no">java.lang.Class.forName(java.lang.String)</outbound>
                <outbound type="class" confirmed="no">java.lang.ClassNotFoundException</outbound>
                <outbound type="feature" confirmed="no">java.lang.NoClassDefFoundError.NoClassDefFoundError(java.lang.String)</outbound>
                <outbound type="class" confirmed="no">java.lang.Object</outbound>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="feature" confirmed="no">java.lang.Throwable.getMessage()</outbound>
                <outbound type="class" confirmed="yes">org.mvel.CompiledSetExpression</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.CompiledSetExpression.setValue(java.lang.Object, org.mvel.integration.VariableResolverFactory, java.lang.Object)</outbound>
                <outbound type="class" confirmed="yes">org.mvel.ExecutableStatement</outbound>
                <outbound type="feature" confirmed="no">org.mvel.ExecutableStatement.getValue(java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory)</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.MVEL.compileSetExpression(char[])</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.ast.AssignmentNode.col</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.ast.AssignmentNode.indexTarget</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.ast.AssignmentNode.name</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.ast.AssignmentNode.setExpr</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.ast.AssignmentNode.statement</outbound>
                <outbound type="class" confirmed="yes">org.mvel.integration.VariableResolver</outbound>
                <outbound type="class" confirmed="yes">org.mvel.integration.VariableResolverFactory</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.integration.VariableResolverFactory.createVariable(java.lang.String, java.lang.Object)</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.util.ParseTools.finalLocalVariableFactory(org.mvel.integration.VariableResolverFactory)</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.ast.AssignmentNode.index</name>
                <inbound type="feature" confirmed="yes">org.mvel.ast.AssignmentNode.AssignmentNode(char[], int, int, java.lang.String)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.ast.AssignmentNode.getReducedValue(java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.ast.AssignmentNode.indexTarget</name>
                <inbound type="feature" confirmed="yes">org.mvel.ast.AssignmentNode.AssignmentNode(char[], int, int, java.lang.String)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.ast.AssignmentNode.getReducedValueAccelerated(java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.ast.AssignmentNode.isNewDeclaration()</name>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.ast.AssignmentNode.name</name>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <inbound type="feature" confirmed="yes">org.mvel.ast.AssignmentNode.AssignmentNode(char[], int, int, java.lang.String)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.ast.AssignmentNode.getAssignmentVar()</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.ast.AssignmentNode.getReducedValue(java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.ast.AssignmentNode.getReducedValueAccelerated(java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.ast.AssignmentNode.setExpr</name>
                <outbound type="class" confirmed="yes">org.mvel.CompiledSetExpression</outbound>
                <inbound type="feature" confirmed="yes">org.mvel.ast.AssignmentNode.AssignmentNode(char[], int, int, java.lang.String)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.ast.AssignmentNode.getReducedValueAccelerated(java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.ast.AssignmentNode.statement</name>
                <outbound type="class" confirmed="yes">org.mvel.ExecutableStatement</outbound>
                <inbound type="feature" confirmed="yes">org.mvel.ast.AssignmentNode.AssignmentNode(char[], int, int, java.lang.String)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.ast.AssignmentNode.getReducedValueAccelerated(java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.ast.AssignmentNode.stmt</name>
                <inbound type="feature" confirmed="yes">org.mvel.ast.AssignmentNode.AssignmentNode(char[], int, int, java.lang.String)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.ast.AssignmentNode.getReducedValue(java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory)</inbound>
            </feature>
        </class>
        <class confirmed="yes">
            <name>org.mvel.ast.BinaryOperation</name>
            <outbound type="class" confirmed="yes">org.mvel.ASTNode</outbound>
            <inbound type="feature" confirmed="yes">org.mvel.debug.DebugTools.decompile(org.mvel.CompiledExpression, boolean, org.mvel.debug.DebugTools$DecompileContext)</inbound>
            <feature confirmed="yes">
                <name>org.mvel.ast.BinaryOperation.BinaryOperation(int, org.mvel.ASTNode, org.mvel.ASTNode)</name>
                <outbound type="class" confirmed="yes">org.mvel.ASTNode</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.ASTNode.ASTNode()</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.ast.BinaryOperation.left</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.ast.BinaryOperation.operation</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.ast.BinaryOperation.right</outbound>
                <inbound type="feature" confirmed="yes">org.mvel.util.CompilerTools.optimizeAST(org.mvel.ASTLinkedList, boolean)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.ast.BinaryOperation.getLeft()</name>
                <outbound type="class" confirmed="yes">org.mvel.ASTNode</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.ast.BinaryOperation.left</outbound>
                <inbound type="feature" confirmed="yes">org.mvel.debug.DebugTools.decompile(org.mvel.CompiledExpression, boolean, org.mvel.debug.DebugTools$DecompileContext)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.ast.BinaryOperation.getOperation()</name>
                <outbound type="feature" confirmed="yes">org.mvel.ast.BinaryOperation.operation</outbound>
                <inbound type="feature" confirmed="yes">org.mvel.debug.DebugTools.decompile(org.mvel.CompiledExpression, boolean, org.mvel.debug.DebugTools$DecompileContext)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.ast.BinaryOperation.getReducedValue(java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory)</name>
                <outbound type="class" confirmed="no">java.lang.Object</outbound>
                <outbound type="feature" confirmed="no">java.lang.RuntimeException.RuntimeException(java.lang.String)</outbound>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="class" confirmed="yes">org.mvel.integration.VariableResolverFactory</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.ast.BinaryOperation.getReducedValueAccelerated(java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory)</name>
                <outbound type="class" confirmed="no">java.lang.Object</outbound>
                <outbound type="class" confirmed="yes">org.mvel.ASTNode</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.ASTNode.getReducedValueAccelerated(java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory)</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.ast.BinaryOperation.left</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.ast.BinaryOperation.operation</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.ast.BinaryOperation.right</outbound>
                <outbound type="class" confirmed="yes">org.mvel.integration.VariableResolverFactory</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.util.ParseTools.doOperations(java.lang.Object, int, java.lang.Object)</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.ast.BinaryOperation.getRight()</name>
                <outbound type="class" confirmed="yes">org.mvel.ASTNode</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.ast.BinaryOperation.right</outbound>
                <inbound type="feature" confirmed="yes">org.mvel.debug.DebugTools.decompile(org.mvel.CompiledExpression, boolean, org.mvel.debug.DebugTools$DecompileContext)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.util.CompilerTools.optimizeAST(org.mvel.ASTLinkedList, boolean)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.ast.BinaryOperation.getRightMost()</name>
                <outbound type="class" confirmed="yes">org.mvel.ASTNode</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.ast.BinaryOperation.right</outbound>
                <inbound type="feature" confirmed="yes">org.mvel.util.CompilerTools.optimizeAST(org.mvel.ASTLinkedList, boolean)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.ast.BinaryOperation.left</name>
                <outbound type="class" confirmed="yes">org.mvel.ASTNode</outbound>
                <inbound type="feature" confirmed="yes">org.mvel.ast.BinaryOperation.BinaryOperation(int, org.mvel.ASTNode, org.mvel.ASTNode)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.ast.BinaryOperation.getLeft()</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.ast.BinaryOperation.getReducedValueAccelerated(java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.ast.BinaryOperation.setLeft(org.mvel.ASTNode)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.ast.BinaryOperation.toString()</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.ast.BinaryOperation.operation</name>
                <inbound type="feature" confirmed="yes">org.mvel.ast.BinaryOperation.BinaryOperation(int, org.mvel.ASTNode, org.mvel.ASTNode)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.ast.BinaryOperation.getOperation()</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.ast.BinaryOperation.getReducedValueAccelerated(java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.ast.BinaryOperation.setOperation(int)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.ast.BinaryOperation.toString()</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.ast.BinaryOperation.right</name>
                <outbound type="class" confirmed="yes">org.mvel.ASTNode</outbound>
                <inbound type="feature" confirmed="yes">org.mvel.ast.BinaryOperation.BinaryOperation(int, org.mvel.ASTNode, org.mvel.ASTNode)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.ast.BinaryOperation.getReducedValueAccelerated(java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.ast.BinaryOperation.getRight()</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.ast.BinaryOperation.getRightMost()</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.ast.BinaryOperation.setRight(org.mvel.ASTNode)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.ast.BinaryOperation.setRightMost(org.mvel.ASTNode)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.ast.BinaryOperation.toString()</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.ast.BinaryOperation.setLeft(org.mvel.ASTNode)</name>
                <outbound type="class" confirmed="yes">org.mvel.ASTNode</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.ast.BinaryOperation.left</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.ast.BinaryOperation.setOperation(int)</name>
                <outbound type="feature" confirmed="yes">org.mvel.ast.BinaryOperation.operation</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.ast.BinaryOperation.setRight(org.mvel.ASTNode)</name>
                <outbound type="class" confirmed="yes">org.mvel.ASTNode</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.ast.BinaryOperation.right</outbound>
                <inbound type="feature" confirmed="yes">org.mvel.util.CompilerTools.optimizeAST(org.mvel.ASTLinkedList, boolean)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.ast.BinaryOperation.setRightMost(org.mvel.ASTNode)</name>
                <outbound type="class" confirmed="yes">org.mvel.ASTNode</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.ast.BinaryOperation.right</outbound>
                <inbound type="feature" confirmed="yes">org.mvel.util.CompilerTools.optimizeAST(org.mvel.ASTLinkedList, boolean)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.ast.BinaryOperation.toString()</name>
                <outbound type="class" confirmed="no">java.lang.Object</outbound>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="feature" confirmed="no">java.lang.String.valueOf(java.lang.Object)</outbound>
                <outbound type="class" confirmed="no">java.lang.StringBuffer</outbound>
                <outbound type="feature" confirmed="no">java.lang.StringBuffer.StringBuffer(java.lang.String)</outbound>
                <outbound type="feature" confirmed="no">java.lang.StringBuffer.append(java.lang.String)</outbound>
                <outbound type="feature" confirmed="no">java.lang.StringBuffer.toString()</outbound>
                <outbound type="class" confirmed="yes">org.mvel.ASTNode</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.ASTNode.toString()</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.ast.BinaryOperation.left</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.ast.BinaryOperation.operation</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.ast.BinaryOperation.right</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.debug.DebugTools.getOperatorName(int)</outbound>
            </feature>
        </class>
        <class confirmed="yes">
            <name>org.mvel.ast.BlockNode</name>
            <outbound type="class" confirmed="yes">org.mvel.ASTNode</outbound>
            <inbound type="class" confirmed="yes">org.mvel.ast.ForEachNode</inbound>
            <inbound type="class" confirmed="yes">org.mvel.ast.WhileNode</inbound>
            <inbound type="class" confirmed="yes">org.mvel.ast.WithNode</inbound>
            <feature confirmed="yes">
                <name>org.mvel.ast.BlockNode.BlockNode(char[], int)</name>
                <outbound type="feature" confirmed="yes">org.mvel.ASTNode.ASTNode(char[], int)</outbound>
                <inbound type="feature" confirmed="yes">org.mvel.ast.ForEachNode.ForEachNode(char[], char[], int)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.ast.WhileNode.WhileNode(char[], char[], int)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.ast.BlockNode.BlockNode(char[], int, char[])</name>
                <outbound type="feature" confirmed="yes">org.mvel.ASTNode.ASTNode(char[], int)</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.ast.BlockNode.block</outbound>
                <inbound type="feature" confirmed="yes">org.mvel.ast.WithNode.WithNode(char[], char[], int)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.ast.BlockNode.block</name>
                <inbound type="feature" confirmed="yes">org.mvel.ast.BlockNode.BlockNode(char[], int, char[])</inbound>
            </feature>
        </class>
        <class confirmed="yes">
            <name>org.mvel.ast.ContextDeepPropertyNode</name>
            <outbound type="class" confirmed="yes">org.mvel.ASTNode</outbound>
            <feature confirmed="yes">
                <name>org.mvel.ast.ContextDeepPropertyNode.ContextDeepPropertyNode(char[], int)</name>
                <outbound type="feature" confirmed="yes">org.mvel.ASTNode.ASTNode(char[], int)</outbound>
                <inbound type="feature" confirmed="yes">org.mvel.ast.PropertyASTNode.initializePropertyNode(java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.ast.ContextDeepPropertyNode.accessor</name>
                <outbound type="class" confirmed="yes">org.mvel.Accessor</outbound>
                <inbound type="feature" confirmed="yes">org.mvel.ast.ContextDeepPropertyNode.getReducedValueAccelerated(java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.ast.ContextDeepPropertyNode.handleDynamicDeoptimization(java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.ast.ContextDeepPropertyNode.getReducedValue(java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory)</name>
                <outbound type="class" confirmed="no">java.lang.Object</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.ast.ContextDeepPropertyNode.getReducedValueAccelerated(java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory)</outbound>
                <outbound type="class" confirmed="yes">org.mvel.integration.VariableResolverFactory</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.ast.ContextDeepPropertyNode.getReducedValueAccelerated(java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory)</name>
                <outbound type="class" confirmed="no">java.lang.ClassCastException</outbound>
                <outbound type="class" confirmed="no">java.lang.Object</outbound>
                <outbound type="class" confirmed="yes">org.mvel.Accessor</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.Accessor.getValue(java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory)</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.ast.ContextDeepPropertyNode.accessor</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.ast.ContextDeepPropertyNode.handleDynamicDeoptimization(java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory)</outbound>
                <outbound type="feature" confirmed="no">org.mvel.ast.ContextDeepPropertyNode.name</outbound>
                <outbound type="feature" confirmed="no">org.mvel.ast.ContextDeepPropertyNode.valRet(java.lang.Object)</outbound>
                <outbound type="class" confirmed="yes">org.mvel.integration.VariableResolverFactory</outbound>
                <outbound type="class" confirmed="yes">org.mvel.optimizers.AccessorOptimizer</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.optimizers.AccessorOptimizer.getResultOptPass()</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.optimizers.AccessorOptimizer.optimizeAccessor(char[], java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory, boolean)</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.optimizers.OptimizerFactory.getThreadAccessorOptimizer()</outbound>
                <inbound type="feature" confirmed="yes">org.mvel.ast.ContextDeepPropertyNode.getReducedValue(java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.ast.ContextDeepPropertyNode.handleDynamicDeoptimization(java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.ast.ContextDeepPropertyNode.handleDynamicDeoptimization(java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory)</name>
                <outbound type="class" confirmed="no">java.lang.Object</outbound>
                <outbound type="class" confirmed="yes">org.mvel.Accessor</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.ast.ContextDeepPropertyNode.accessor</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.ast.ContextDeepPropertyNode.getReducedValueAccelerated(java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory)</outbound>
                <outbound type="class" confirmed="yes">org.mvel.integration.VariableResolverFactory</outbound>
                <inbound type="feature" confirmed="yes">org.mvel.ast.ContextDeepPropertyNode.getReducedValueAccelerated(java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory)</inbound>
            </feature>
            <feature confirmed="no">
                <name>org.mvel.ast.ContextDeepPropertyNode.name</name>
                <inbound type="feature" confirmed="yes">org.mvel.ast.ContextDeepPropertyNode.getReducedValueAccelerated(java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory)</inbound>
            </feature>
            <feature confirmed="no">
                <name>org.mvel.ast.ContextDeepPropertyNode.valRet(java.lang.Object)</name>
                <inbound type="feature" confirmed="yes">org.mvel.ast.ContextDeepPropertyNode.getReducedValueAccelerated(java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory)</inbound>
            </feature>
        </class>
        <class confirmed="yes">
            <name>org.mvel.ast.DeepAssignmentNode</name>
            <outbound type="class" confirmed="yes">org.mvel.ASTNode</outbound>
            <outbound type="class" confirmed="yes">org.mvel.ast.Assignment</outbound>
            <feature confirmed="yes">
                <name>org.mvel.ast.DeepAssignmentNode.DeepAssignmentNode(char[], int)</name>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.ast.DeepAssignmentNode.DeepAssignmentNode(char[], int, int, java.lang.String)</outbound>
                <inbound type="feature" confirmed="yes">org.mvel.AbstractParser.nextToken()</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.ast.DeepAssignmentNode.DeepAssignmentNode(char[], int, int, java.lang.String)</name>
                <outbound type="class" confirmed="no">java.io.Serializable</outbound>
                <outbound type="class" confirmed="no">java.lang.Class</outbound>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="feature" confirmed="no">java.lang.String.String(char[])</outbound>
                <outbound type="feature" confirmed="no">java.lang.String.String(char[], int, int)</outbound>
                <outbound type="feature" confirmed="no">java.lang.String.toCharArray()</outbound>
                <outbound type="feature" confirmed="no">java.lang.String.trim()</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.ASTNode.ASTNode(char[], int)</outbound>
                <outbound type="class" confirmed="yes">org.mvel.Accessor</outbound>
                <outbound type="class" confirmed="yes">org.mvel.CompiledSetExpression</outbound>
                <outbound type="class" confirmed="yes">org.mvel.ExecutableStatement</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.ExecutableStatement.getKnownEgressType()</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.MVEL.compileSetExpression(char[])</outbound>
                <outbound type="feature" confirmed="no">org.mvel.ast.DeepAssignmentNode.egressType</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.ast.DeepAssignmentNode.property</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.ast.DeepAssignmentNode.set</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.ast.DeepAssignmentNode.statement</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.ast.DeepAssignmentNode.stmt</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.util.ParseTools.createShortFormOperativeAssignment(java.lang.String, char[], int)</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.util.ParseTools.subCompileExpression(char[])</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.util.ParseTools.subset(char[], int)</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.util.PropertyTools.find(char[], char)</outbound>
                <inbound type="feature" confirmed="yes">org.mvel.AbstractParser.nextToken()</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.ast.DeepAssignmentNode.DeepAssignmentNode(char[], int)</inbound>
            </feature>
            <feature confirmed="no">
                <name>org.mvel.ast.DeepAssignmentNode.egressType</name>
                <inbound type="feature" confirmed="yes">org.mvel.ast.DeepAssignmentNode.DeepAssignmentNode(char[], int, int, java.lang.String)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.ast.DeepAssignmentNode.getAssignmentVar()</name>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.ast.DeepAssignmentNode.property</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.ast.DeepAssignmentNode.getReducedValue(java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory)</name>
                <outbound type="class" confirmed="no">java.lang.Object</outbound>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.MVEL.eval(char[], java.lang.Object, org.mvel.integration.VariableResolverFactory)</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.PropertyAccessor.set(java.lang.Object, org.mvel.integration.VariableResolverFactory, java.lang.String, java.lang.Object)</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.ast.DeepAssignmentNode.property</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.ast.DeepAssignmentNode.stmt</outbound>
                <outbound type="class" confirmed="yes">org.mvel.integration.VariableResolverFactory</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.ast.DeepAssignmentNode.getReducedValueAccelerated(java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory)</name>
                <outbound type="class" confirmed="no">java.io.Serializable</outbound>
                <outbound type="class" confirmed="no">java.lang.Object</outbound>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="feature" confirmed="no">java.lang.String.toCharArray()</outbound>
                <outbound type="class" confirmed="yes">org.mvel.Accessor</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.Accessor.getValue(java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory)</outbound>
                <outbound type="class" confirmed="yes">org.mvel.CompiledSetExpression</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.CompiledSetExpression.setValue(java.lang.Object, org.mvel.integration.VariableResolverFactory, java.lang.Object)</outbound>
                <outbound type="class" confirmed="yes">org.mvel.ExecutableStatement</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.MVEL.compileSetExpression(char[])</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.ast.DeepAssignmentNode.property</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.ast.DeepAssignmentNode.set</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.ast.DeepAssignmentNode.statement</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.ast.DeepAssignmentNode.stmt</outbound>
                <outbound type="class" confirmed="yes">org.mvel.integration.VariableResolverFactory</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.util.ParseTools.subCompileExpression(char[])</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.ast.DeepAssignmentNode.isNewDeclaration()</name>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.ast.DeepAssignmentNode.property</name>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <inbound type="feature" confirmed="yes">org.mvel.ast.DeepAssignmentNode.DeepAssignmentNode(char[], int, int, java.lang.String)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.ast.DeepAssignmentNode.getAssignmentVar()</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.ast.DeepAssignmentNode.getReducedValue(java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.ast.DeepAssignmentNode.getReducedValueAccelerated(java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.ast.DeepAssignmentNode.set</name>
                <outbound type="class" confirmed="yes">org.mvel.CompiledSetExpression</outbound>
                <inbound type="feature" confirmed="yes">org.mvel.ast.DeepAssignmentNode.DeepAssignmentNode(char[], int, int, java.lang.String)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.ast.DeepAssignmentNode.getReducedValueAccelerated(java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.ast.DeepAssignmentNode.statement</name>
                <outbound type="class" confirmed="yes">org.mvel.Accessor</outbound>
                <inbound type="feature" confirmed="yes">org.mvel.ast.DeepAssignmentNode.DeepAssignmentNode(char[], int, int, java.lang.String)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.ast.DeepAssignmentNode.getReducedValueAccelerated(java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.ast.DeepAssignmentNode.stmt</name>
                <inbound type="feature" confirmed="yes">org.mvel.ast.DeepAssignmentNode.DeepAssignmentNode(char[], int, int, java.lang.String)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.ast.DeepAssignmentNode.getReducedValue(java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.ast.DeepAssignmentNode.getReducedValueAccelerated(java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory)</inbound>
            </feature>
        </class>
        <class confirmed="yes">
            <name>org.mvel.ast.EndOfStatement</name>
            <outbound type="class" confirmed="yes">org.mvel.ASTNode</outbound>
            <inbound type="feature" confirmed="yes">org.mvel.util.CompilerTools.optimizeAST(org.mvel.ASTLinkedList, boolean)</inbound>
            <feature confirmed="yes">
                <name>org.mvel.ast.EndOfStatement.EndOfStatement()</name>
                <outbound type="class" confirmed="no">java.lang.Integer</outbound>
                <outbound type="class" confirmed="no">java.lang.Object</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.ASTNode.ASTNode(char[], int)</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.ast.EndOfStatement.LIT</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.ast.EndOfStatement.getOperator()</outbound>
                <outbound type="feature" confirmed="no">org.mvel.ast.EndOfStatement.literal</outbound>
                <inbound type="feature" confirmed="yes">org.mvel.AbstractParser.createBlockToken(int, int, int, int, int)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.AbstractParser.nextToken()</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.ast.EndOfStatement.LIT</name>
                <inbound type="feature" confirmed="yes">org.mvel.ast.EndOfStatement.EndOfStatement()</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.ast.EndOfStatement.static {}</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.ast.EndOfStatement.getOperator()</name>
                <outbound type="class" confirmed="no">java.lang.Integer</outbound>
                <outbound type="feature" confirmed="no">java.lang.Integer.Integer(int)</outbound>
                <inbound type="feature" confirmed="yes">org.mvel.ast.EndOfStatement.EndOfStatement()</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.ast.EndOfStatement.getReducedValue(java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory)</name>
                <outbound type="class" confirmed="no">java.lang.Object</outbound>
                <outbound type="class" confirmed="yes">org.mvel.integration.VariableResolverFactory</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.ast.EndOfStatement.getReducedValueAccelerated(java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory)</name>
                <outbound type="class" confirmed="no">java.lang.Object</outbound>
                <outbound type="class" confirmed="yes">org.mvel.integration.VariableResolverFactory</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.ast.EndOfStatement.isOperator()</name>
            </feature>
            <feature confirmed="no">
                <name>org.mvel.ast.EndOfStatement.literal</name>
                <inbound type="feature" confirmed="yes">org.mvel.ast.EndOfStatement.EndOfStatement()</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.ast.EndOfStatement.static {}</name>
                <outbound type="feature" confirmed="yes">org.mvel.ast.EndOfStatement.LIT</outbound>
            </feature>
        </class>
        <class confirmed="yes">
            <name>org.mvel.ast.ForEachNode</name>
            <outbound type="class" confirmed="yes">org.mvel.ast.BlockNode</outbound>
            <feature confirmed="yes">
                <name>org.mvel.ast.ForEachNode.ForEachNode(char[], char[], int)</name>
                <outbound type="class" confirmed="no">java.io.Serializable</outbound>
                <outbound type="class" confirmed="yes">org.mvel.ExecutableStatement</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.ast.BlockNode.BlockNode(char[], int)</outbound>
                <outbound type="feature" confirmed="no">org.mvel.ast.ForEachNode.block</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.ast.ForEachNode.compiledBlock</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.ast.ForEachNode.handleCond(char[])</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.util.ParseTools.subCompileExpression(char[])</outbound>
                <inbound type="feature" confirmed="yes">org.mvel.AbstractParser.createBlockToken(int, int, int, int, int)</inbound>
            </feature>
            <feature confirmed="no">
                <name>org.mvel.ast.ForEachNode.block</name>
                <inbound type="feature" confirmed="yes">org.mvel.ast.ForEachNode.ForEachNode(char[], char[], int)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.ast.ForEachNode.compiledBlock</name>
                <outbound type="class" confirmed="yes">org.mvel.ExecutableStatement</outbound>
                <inbound type="feature" confirmed="yes">org.mvel.ast.ForEachNode.ForEachNode(char[], char[], int)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.ast.ForEachNode.getReducedValue(java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.ast.ForEachNode.getReducedValueAccelerated(java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.ast.ForEachNode.cond</name>
                <inbound type="feature" confirmed="yes">org.mvel.ast.ForEachNode.getReducedValue(java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.ast.ForEachNode.handleCond(char[])</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.ast.ForEachNode.condition</name>
                <outbound type="class" confirmed="yes">org.mvel.ExecutableStatement</outbound>
                <inbound type="feature" confirmed="yes">org.mvel.ast.ForEachNode.getReducedValueAccelerated(java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.ast.ForEachNode.handleCond(char[])</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.ast.ForEachNode.getReducedValue(java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory)</name>
                <outbound type="class" confirmed="no">java.lang.CharSequence</outbound>
                <outbound type="feature" confirmed="no">java.lang.Character.Character(char)</outbound>
                <outbound type="class" confirmed="no">java.lang.Class</outbound>
                <outbound type="feature" confirmed="no">java.lang.Class.getName()</outbound>
                <outbound type="class" confirmed="no">java.lang.Integer</outbound>
                <outbound type="feature" confirmed="no">java.lang.Integer.Integer(int)</outbound>
                <outbound type="feature" confirmed="no">java.lang.Integer.intValue()</outbound>
                <outbound type="class" confirmed="no">java.lang.Iterable</outbound>
                <outbound type="feature" confirmed="no">java.lang.Iterable.iterator()</outbound>
                <outbound type="class" confirmed="no">java.lang.Object</outbound>
                <outbound type="feature" confirmed="no">java.lang.Object.getClass()</outbound>
                <outbound type="feature" confirmed="no">java.lang.Object.toString()</outbound>
                <outbound type="class" confirmed="no">java.lang.Object[]</outbound>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="feature" confirmed="no">java.lang.String.toCharArray()</outbound>
                <outbound type="class" confirmed="no">java.lang.StringBuffer</outbound>
                <outbound type="feature" confirmed="no">java.lang.StringBuffer.StringBuffer(java.lang.String)</outbound>
                <outbound type="feature" confirmed="no">java.lang.StringBuffer.append(java.lang.String)</outbound>
                <outbound type="feature" confirmed="no">java.lang.StringBuffer.toString()</outbound>
                <outbound type="class" confirmed="no">java.util.Iterator</outbound>
                <outbound type="feature" confirmed="no">java.util.Iterator.hasNext()</outbound>
                <outbound type="feature" confirmed="no">java.util.Iterator.next()</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.CompileException.CompileException(java.lang.String)</outbound>
                <outbound type="class" confirmed="yes">org.mvel.ExecutableStatement</outbound>
                <outbound type="feature" confirmed="no">org.mvel.ExecutableStatement.getValue(java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory)</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.MVEL.eval(char[], java.lang.Object, org.mvel.integration.VariableResolverFactory)</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.ast.ForEachNode.compiledBlock</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.ast.ForEachNode.cond</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.ast.ForEachNode.item</outbound>
                <outbound type="class" confirmed="yes">org.mvel.integration.VariableResolverFactory</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.integration.impl.DefaultLocalVariableResolverFactory.DefaultLocalVariableResolverFactory(org.mvel.integration.VariableResolverFactory)</outbound>
                <outbound type="class" confirmed="yes">org.mvel.integration.impl.ItemResolverFactory$ItemResolver</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.integration.impl.ItemResolverFactory$ItemResolver.ItemResolverFactory$ItemResolver(java.lang.String)</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.integration.impl.ItemResolverFactory$ItemResolver.setValue(java.lang.Object)</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.integration.impl.ItemResolverFactory.ItemResolverFactory(org.mvel.integration.impl.ItemResolverFactory$ItemResolver, org.mvel.integration.VariableResolverFactory)</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.ast.ForEachNode.getReducedValueAccelerated(java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory)</name>
                <outbound type="class" confirmed="no">java.lang.CharSequence</outbound>
                <outbound type="feature" confirmed="no">java.lang.Character.Character(char)</outbound>
                <outbound type="class" confirmed="no">java.lang.Class</outbound>
                <outbound type="feature" confirmed="no">java.lang.Class.getName()</outbound>
                <outbound type="class" confirmed="no">java.lang.Integer</outbound>
                <outbound type="feature" confirmed="no">java.lang.Integer.Integer(int)</outbound>
                <outbound type="feature" confirmed="no">java.lang.Integer.intValue()</outbound>
                <outbound type="class" confirmed="no">java.lang.Iterable</outbound>
                <outbound type="feature" confirmed="no">java.lang.Iterable.iterator()</outbound>
                <outbound type="class" confirmed="no">java.lang.Object</outbound>
                <outbound type="feature" confirmed="no">java.lang.Object.getClass()</outbound>
                <outbound type="feature" confirmed="no">java.lang.Object.toString()</outbound>
                <outbound type="class" confirmed="no">java.lang.Object[]</outbound>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="feature" confirmed="no">java.lang.String.toCharArray()</outbound>
                <outbound type="class" confirmed="no">java.lang.StringBuffer</outbound>
                <outbound type="feature" confirmed="no">java.lang.StringBuffer.StringBuffer(java.lang.String)</outbound>
                <outbound type="feature" confirmed="no">java.lang.StringBuffer.append(java.lang.String)</outbound>
                <outbound type="feature" confirmed="no">java.lang.StringBuffer.toString()</outbound>
                <outbound type="class" confirmed="no">java.util.Iterator</outbound>
                <outbound type="feature" confirmed="no">java.util.Iterator.hasNext()</outbound>
                <outbound type="feature" confirmed="no">java.util.Iterator.next()</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.CompileException.CompileException(java.lang.String)</outbound>
                <outbound type="class" confirmed="yes">org.mvel.ExecutableStatement</outbound>
                <outbound type="feature" confirmed="no">org.mvel.ExecutableStatement.getValue(java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory)</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.ast.ForEachNode.compiledBlock</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.ast.ForEachNode.condition</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.ast.ForEachNode.item</outbound>
                <outbound type="class" confirmed="yes">org.mvel.integration.VariableResolverFactory</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.integration.impl.DefaultLocalVariableResolverFactory.DefaultLocalVariableResolverFactory(org.mvel.integration.VariableResolverFactory)</outbound>
                <outbound type="class" confirmed="yes">org.mvel.integration.impl.ItemResolverFactory$ItemResolver</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.integration.impl.ItemResolverFactory$ItemResolver.ItemResolverFactory$ItemResolver(java.lang.String)</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.integration.impl.ItemResolverFactory$ItemResolver.setValue(java.lang.Object)</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.integration.impl.ItemResolverFactory.ItemResolverFactory(org.mvel.integration.impl.ItemResolverFactory$ItemResolver, org.mvel.integration.VariableResolverFactory)</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.ast.ForEachNode.handleCond(char[])</name>
                <outbound type="class" confirmed="no">java.io.Serializable</outbound>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="feature" confirmed="no">java.lang.String.String(char[], int, int)</outbound>
                <outbound type="feature" confirmed="no">java.lang.String.trim()</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.CompileException.CompileException(java.lang.String)</outbound>
                <outbound type="class" confirmed="yes">org.mvel.ExecutableStatement</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.ast.ForEachNode.cond</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.ast.ForEachNode.condition</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.ast.ForEachNode.item</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.util.ParseTools.subCompileExpression(char[])</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.util.ParseTools.subset(char[], int)</outbound>
                <inbound type="feature" confirmed="yes">org.mvel.ast.ForEachNode.ForEachNode(char[], char[], int)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.ast.ForEachNode.item</name>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <inbound type="feature" confirmed="yes">org.mvel.ast.ForEachNode.getReducedValue(java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.ast.ForEachNode.getReducedValueAccelerated(java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.ast.ForEachNode.handleCond(char[])</inbound>
            </feature>
        </class>
        <class confirmed="yes">
            <name>org.mvel.ast.IfNode</name>
            <outbound type="class" confirmed="yes">org.mvel.ASTNode</outbound>
            <outbound type="class" confirmed="yes">org.mvel.ast.NestedStatement</outbound>
            <inbound type="feature" confirmed="yes">org.mvel.AbstractParser._captureBlock(org.mvel.ASTNode, char[], boolean, int)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.AbstractParser.captureCodeBlock(int)</inbound>
            <feature confirmed="yes">
                <name>org.mvel.ast.IfNode.IfNode(char[], char[], int)</name>
                <outbound type="class" confirmed="no">java.io.Serializable</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.ASTNode.ASTNode(char[], int)</outbound>
                <outbound type="class" confirmed="yes">org.mvel.ExecutableStatement</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.ast.IfNode.block</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.ast.IfNode.condition</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.ast.IfNode.nestedStatement</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.util.ParseTools.subCompileExpression(char[])</outbound>
                <inbound type="feature" confirmed="yes">org.mvel.AbstractParser.createBlockToken(int, int, int, int, int)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.ast.IfNode.block</name>
                <inbound type="feature" confirmed="yes">org.mvel.ast.IfNode.IfNode(char[], char[], int)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.ast.IfNode.getReducedValue(java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.ast.IfNode.condition</name>
                <outbound type="class" confirmed="yes">org.mvel.ExecutableStatement</outbound>
                <inbound type="feature" confirmed="yes">org.mvel.ast.IfNode.IfNode(char[], char[], int)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.ast.IfNode.getReducedValueAccelerated(java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.ast.IfNode.elseBlock</name>
                <outbound type="class" confirmed="yes">org.mvel.ExecutableStatement</outbound>
                <inbound type="feature" confirmed="yes">org.mvel.ast.IfNode.getElseBlock()</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.ast.IfNode.getReducedValue(java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.ast.IfNode.getReducedValueAccelerated(java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.ast.IfNode.setElseBlock(char[])</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.ast.IfNode.elseIf</name>
                <inbound type="feature" confirmed="yes">org.mvel.ast.IfNode.getReducedValue(java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.ast.IfNode.getReducedValueAccelerated(java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.ast.IfNode.setElseIf(org.mvel.ast.IfNode)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.ast.IfNode.getElseBlock()</name>
                <outbound type="class" confirmed="yes">org.mvel.ExecutableStatement</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.ast.IfNode.elseBlock</outbound>
                <inbound type="feature" confirmed="yes">org.mvel.AbstractParser.captureCodeBlock(int)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.ast.IfNode.getNestedStatement()</name>
                <outbound type="class" confirmed="yes">org.mvel.ExecutableStatement</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.ast.IfNode.nestedStatement</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.ast.IfNode.getReducedValue(java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory)</name>
                <outbound type="class" confirmed="no">java.lang.Boolean</outbound>
                <outbound type="feature" confirmed="no">java.lang.Boolean.booleanValue()</outbound>
                <outbound type="class" confirmed="no">java.lang.Class</outbound>
                <outbound type="feature" confirmed="no">java.lang.Class.forName(java.lang.String)</outbound>
                <outbound type="class" confirmed="no">java.lang.ClassNotFoundException</outbound>
                <outbound type="feature" confirmed="no">java.lang.NoClassDefFoundError.NoClassDefFoundError(java.lang.String)</outbound>
                <outbound type="class" confirmed="no">java.lang.Object</outbound>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="feature" confirmed="no">java.lang.Throwable.getMessage()</outbound>
                <outbound type="class" confirmed="yes">org.mvel.ExecutableStatement</outbound>
                <outbound type="feature" confirmed="no">org.mvel.ExecutableStatement.getValue(java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory)</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.MVEL.eval(char[], java.lang.Object, org.mvel.integration.VariableResolverFactory)</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.ast.IfNode.block</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.ast.IfNode.elseBlock</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.ast.IfNode.elseIf</outbound>
                <outbound type="feature" confirmed="no">org.mvel.ast.IfNode.name</outbound>
                <outbound type="class" confirmed="yes">org.mvel.integration.VariableResolverFactory</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.ast.IfNode.getReducedValueAccelerated(java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory)</name>
                <outbound type="class" confirmed="no">java.lang.Boolean</outbound>
                <outbound type="feature" confirmed="no">java.lang.Boolean.booleanValue()</outbound>
                <outbound type="class" confirmed="no">java.lang.Class</outbound>
                <outbound type="feature" confirmed="no">java.lang.Class.forName(java.lang.String)</outbound>
                <outbound type="class" confirmed="no">java.lang.ClassNotFoundException</outbound>
                <outbound type="feature" confirmed="no">java.lang.NoClassDefFoundError.NoClassDefFoundError(java.lang.String)</outbound>
                <outbound type="class" confirmed="no">java.lang.Object</outbound>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="feature" confirmed="no">java.lang.Throwable.getMessage()</outbound>
                <outbound type="class" confirmed="yes">org.mvel.ExecutableStatement</outbound>
                <outbound type="feature" confirmed="no">org.mvel.ExecutableStatement.getValue(java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory)</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.ast.IfNode.condition</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.ast.IfNode.elseBlock</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.ast.IfNode.elseIf</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.ast.IfNode.nestedStatement</outbound>
                <outbound type="class" confirmed="yes">org.mvel.integration.VariableResolverFactory</outbound>
            </feature>
            <feature confirmed="no">
                <name>org.mvel.ast.IfNode.name</name>
                <inbound type="feature" confirmed="yes">org.mvel.ast.IfNode.getReducedValue(java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.ast.IfNode.nestedStatement</name>
                <outbound type="class" confirmed="yes">org.mvel.ExecutableStatement</outbound>
                <inbound type="feature" confirmed="yes">org.mvel.ast.IfNode.IfNode(char[], char[], int)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.ast.IfNode.getNestedStatement()</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.ast.IfNode.getReducedValueAccelerated(java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.ast.IfNode.setElseBlock(char[])</name>
                <outbound type="class" confirmed="no">java.io.Serializable</outbound>
                <outbound type="class" confirmed="yes">org.mvel.ExecutableStatement</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.ast.IfNode.elseBlock</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.util.ParseTools.subCompileExpression(char[])</outbound>
                <inbound type="feature" confirmed="yes">org.mvel.AbstractParser._captureBlock(org.mvel.ASTNode, char[], boolean, int)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.ast.IfNode.setElseIf(org.mvel.ast.IfNode)</name>
                <outbound type="feature" confirmed="yes">org.mvel.ast.IfNode.elseIf</outbound>
                <inbound type="feature" confirmed="yes">org.mvel.AbstractParser._captureBlock(org.mvel.ASTNode, char[], boolean, int)</inbound>
            </feature>
        </class>
        <class confirmed="yes">
            <name>org.mvel.ast.ImportNode</name>
            <outbound type="class" confirmed="yes">org.mvel.ASTNode</outbound>
            <feature confirmed="yes">
                <name>org.mvel.ast.ImportNode.ImportNode(char[])</name>
                <outbound type="class" confirmed="no">java.lang.Class</outbound>
                <outbound type="class" confirmed="no">java.lang.ClassLoader</outbound>
                <outbound type="feature" confirmed="no">java.lang.ClassLoader.loadClass(java.lang.String)</outbound>
                <outbound type="class" confirmed="no">java.lang.ClassNotFoundException</outbound>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="feature" confirmed="no">java.lang.String.String(char[])</outbound>
                <outbound type="feature" confirmed="no">java.lang.String.endsWith(java.lang.String)</outbound>
                <outbound type="feature" confirmed="no">java.lang.String.lastIndexOf(int)</outbound>
                <outbound type="class" confirmed="no">java.lang.StringBuffer</outbound>
                <outbound type="feature" confirmed="no">java.lang.StringBuffer.StringBuffer(java.lang.String)</outbound>
                <outbound type="feature" confirmed="no">java.lang.StringBuffer.append(java.lang.String)</outbound>
                <outbound type="feature" confirmed="no">java.lang.StringBuffer.toString()</outbound>
                <outbound type="class" confirmed="no">java.lang.Thread</outbound>
                <outbound type="feature" confirmed="no">java.lang.Thread.currentThread()</outbound>
                <outbound type="feature" confirmed="no">java.lang.Thread.getContextClassLoader()</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.ASTNode.ASTNode()</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.CompileException.CompileException(java.lang.String)</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.ast.ImportNode.importClass</outbound>
                <outbound type="feature" confirmed="no">org.mvel.ast.ImportNode.name</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.ast.ImportNode.offset</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.ast.ImportNode.packageImport</outbound>
                <inbound type="feature" confirmed="yes">org.mvel.AbstractParser.nextToken()</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.ast.ImportNode.getImportClass()</name>
                <outbound type="class" confirmed="no">java.lang.Class</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.ast.ImportNode.importClass</outbound>
                <inbound type="feature" confirmed="yes">org.mvel.AbstractParser.nextToken()</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.ast.ImportNode.getPackageImport()</name>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="feature" confirmed="no">java.lang.String.String(char[], int, int)</outbound>
                <outbound type="feature" confirmed="no">org.mvel.ast.ImportNode.name</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.ast.ImportNode.offset</outbound>
                <inbound type="feature" confirmed="yes">org.mvel.AbstractParser.nextToken()</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.ast.ImportNode.getReducedValue(java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory)</name>
                <outbound type="class" confirmed="no">java.lang.Object</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.ast.ImportNode.getReducedValueAccelerated(java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory)</outbound>
                <outbound type="class" confirmed="yes">org.mvel.integration.VariableResolverFactory</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.ast.ImportNode.getReducedValueAccelerated(java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory)</name>
                <outbound type="class" confirmed="no">java.lang.Class</outbound>
                <outbound type="class" confirmed="no">java.lang.Object</outbound>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="feature" confirmed="no">java.lang.String.String(char[], int, int)</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.ast.ImportNode.importClass</outbound>
                <outbound type="feature" confirmed="no">org.mvel.ast.ImportNode.name</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.ast.ImportNode.offset</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.ast.ImportNode.packageImport</outbound>
                <outbound type="class" confirmed="yes">org.mvel.integration.VariableResolverFactory</outbound>
                <outbound type="class" confirmed="yes">org.mvel.integration.impl.ClassImportResolverFactory</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.integration.impl.ClassImportResolverFactory.addClass(java.lang.Class)</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.integration.impl.ClassImportResolverFactory.addPackageImport(java.lang.String)</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.util.ParseTools.findClassImportResolverFactory(org.mvel.integration.VariableResolverFactory)</outbound>
                <inbound type="feature" confirmed="yes">org.mvel.ast.ImportNode.getReducedValue(java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.ast.ImportNode.importClass</name>
                <outbound type="class" confirmed="no">java.lang.Class</outbound>
                <inbound type="feature" confirmed="yes">org.mvel.ast.ImportNode.ImportNode(char[])</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.ast.ImportNode.getImportClass()</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.ast.ImportNode.getReducedValueAccelerated(java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.ast.ImportNode.isPackageImport()</name>
                <outbound type="feature" confirmed="yes">org.mvel.ast.ImportNode.packageImport</outbound>
                <inbound type="feature" confirmed="yes">org.mvel.AbstractParser.nextToken()</inbound>
            </feature>
            <feature confirmed="no">
                <name>org.mvel.ast.ImportNode.name</name>
                <inbound type="feature" confirmed="yes">org.mvel.ast.ImportNode.ImportNode(char[])</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.ast.ImportNode.getPackageImport()</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.ast.ImportNode.getReducedValueAccelerated(java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.ast.ImportNode.offset</name>
                <inbound type="feature" confirmed="yes">org.mvel.ast.ImportNode.ImportNode(char[])</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.ast.ImportNode.getPackageImport()</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.ast.ImportNode.getReducedValueAccelerated(java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.ast.ImportNode.packageImport</name>
                <inbound type="feature" confirmed="yes">org.mvel.ast.ImportNode.ImportNode(char[])</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.ast.ImportNode.getReducedValueAccelerated(java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.ast.ImportNode.isPackageImport()</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.ast.ImportNode.setPackageImport(boolean)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.ast.ImportNode.setPackageImport(boolean)</name>
                <outbound type="feature" confirmed="yes">org.mvel.ast.ImportNode.packageImport</outbound>
            </feature>
        </class>
        <class confirmed="yes">
            <name>org.mvel.ast.InlineCollectionNode</name>
            <outbound type="class" confirmed="yes">org.mvel.ASTNode</outbound>
            <feature confirmed="yes">
                <name>org.mvel.ast.InlineCollectionNode.InlineCollectionNode(char[], int)</name>
                <outbound type="feature" confirmed="yes">org.mvel.ASTNode.ASTNode(char[], int)</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.ast.InlineCollectionNode.InlineCollectionNode(char[], int, int, int)</name>
                <outbound type="feature" confirmed="yes">org.mvel.ASTNode.ASTNode(char[], int, int, int)</outbound>
                <inbound type="feature" confirmed="yes">org.mvel.AbstractParser.nextToken()</inbound>
            </feature>
            <feature confirmed="no">
                <name>org.mvel.ast.InlineCollectionNode.accessor</name>
                <inbound type="feature" confirmed="yes">org.mvel.ast.InlineCollectionNode.getReducedValueAccelerated(java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory)</inbound>
            </feature>
            <feature confirmed="no">
                <name>org.mvel.ast.InlineCollectionNode.egressType</name>
                <inbound type="feature" confirmed="yes">org.mvel.ast.InlineCollectionNode.getReducedValueAccelerated(java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.ast.InlineCollectionNode.getReducedValue(java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory)</name>
                <outbound type="class" confirmed="no">java.lang.Object</outbound>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="class" confirmed="yes">org.mvel.Accessor</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.Accessor.getValue(java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory)</outbound>
                <outbound type="feature" confirmed="no">org.mvel.ast.InlineCollectionNode.name</outbound>
                <outbound type="class" confirmed="yes">org.mvel.integration.VariableResolverFactory</outbound>
                <outbound type="class" confirmed="yes">org.mvel.optimizers.AccessorOptimizer</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.optimizers.AccessorOptimizer.optimizeCollection(char[], java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory)</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.optimizers.OptimizerFactory.SAFE_REFLECTIVE</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.optimizers.OptimizerFactory.getAccessorCompiler(java.lang.String)</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.ast.InlineCollectionNode.getReducedValueAccelerated(java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory)</name>
                <outbound type="class" confirmed="no">java.lang.Class</outbound>
                <outbound type="feature" confirmed="no">java.lang.Class.forName(java.lang.String)</outbound>
                <outbound type="class" confirmed="no">java.lang.ClassNotFoundException</outbound>
                <outbound type="feature" confirmed="no">java.lang.NoClassDefFoundError.NoClassDefFoundError(java.lang.String)</outbound>
                <outbound type="class" confirmed="no">java.lang.Object</outbound>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="feature" confirmed="no">java.lang.Throwable.getMessage()</outbound>
                <outbound type="class" confirmed="no">java.util.List</outbound>
                <outbound type="class" confirmed="yes">org.mvel.Accessor</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.Accessor.getValue(java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory)</outbound>
                <outbound type="feature" confirmed="no">org.mvel.ast.InlineCollectionNode.accessor</outbound>
                <outbound type="feature" confirmed="no">org.mvel.ast.InlineCollectionNode.egressType</outbound>
                <outbound type="feature" confirmed="no">org.mvel.ast.InlineCollectionNode.name</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.ast.cache.CachedListAccessor.CachedListAccessor(java.util.List)</outbound>
                <outbound type="class" confirmed="yes">org.mvel.integration.VariableResolverFactory</outbound>
                <outbound type="class" confirmed="yes">org.mvel.optimizers.AccessorOptimizer</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.optimizers.AccessorOptimizer.getEgressType()</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.optimizers.AccessorOptimizer.isLiteralOnly()</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.optimizers.AccessorOptimizer.optimizeCollection(char[], java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory)</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.optimizers.OptimizerFactory.getDefaultAccessorCompiler()</outbound>
            </feature>
            <feature confirmed="no">
                <name>org.mvel.ast.InlineCollectionNode.name</name>
                <inbound type="feature" confirmed="yes">org.mvel.ast.InlineCollectionNode.getReducedValue(java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.ast.InlineCollectionNode.getReducedValueAccelerated(java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory)</inbound>
            </feature>
        </class>
        <class confirmed="yes">
            <name>org.mvel.ast.InterceptorWrapper</name>
            <outbound type="class" confirmed="yes">org.mvel.ASTNode</outbound>
            <feature confirmed="yes">
                <name>org.mvel.ast.InterceptorWrapper.InterceptorWrapper(org.mvel.integration.Interceptor, org.mvel.ASTNode)</name>
                <outbound type="class" confirmed="yes">org.mvel.ASTNode</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.ASTNode.ASTNode()</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.ast.InterceptorWrapper.interceptor</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.ast.InterceptorWrapper.node</outbound>
                <outbound type="class" confirmed="yes">org.mvel.integration.Interceptor</outbound>
                <inbound type="feature" confirmed="yes">org.mvel.AbstractParser.nextToken()</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.ast.InterceptorWrapper.getReducedValue(java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory)</name>
                <outbound type="class" confirmed="no">java.lang.Object</outbound>
                <outbound type="class" confirmed="yes">org.mvel.ASTNode</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.ASTNode.getReducedValue(java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory)</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.ast.InterceptorWrapper.interceptor</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.ast.InterceptorWrapper.node</outbound>
                <outbound type="class" confirmed="yes">org.mvel.integration.Interceptor</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.integration.Interceptor.doAfter(java.lang.Object, org.mvel.ASTNode, org.mvel.integration.VariableResolverFactory)</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.integration.Interceptor.doBefore(org.mvel.ASTNode, org.mvel.integration.VariableResolverFactory)</outbound>
                <outbound type="class" confirmed="yes">org.mvel.integration.VariableResolverFactory</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.ast.InterceptorWrapper.getReducedValueAccelerated(java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory)</name>
                <outbound type="class" confirmed="no">java.lang.Object</outbound>
                <outbound type="class" confirmed="yes">org.mvel.ASTNode</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.ASTNode.getReducedValueAccelerated(java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory)</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.ast.InterceptorWrapper.interceptor</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.ast.InterceptorWrapper.node</outbound>
                <outbound type="class" confirmed="yes">org.mvel.integration.Interceptor</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.integration.Interceptor.doAfter(java.lang.Object, org.mvel.ASTNode, org.mvel.integration.VariableResolverFactory)</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.integration.Interceptor.doBefore(org.mvel.ASTNode, org.mvel.integration.VariableResolverFactory)</outbound>
                <outbound type="class" confirmed="yes">org.mvel.integration.VariableResolverFactory</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.ast.InterceptorWrapper.interceptor</name>
                <outbound type="class" confirmed="yes">org.mvel.integration.Interceptor</outbound>
                <inbound type="feature" confirmed="yes">org.mvel.ast.InterceptorWrapper.InterceptorWrapper(org.mvel.integration.Interceptor, org.mvel.ASTNode)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.ast.InterceptorWrapper.getReducedValue(java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.ast.InterceptorWrapper.getReducedValueAccelerated(java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.ast.InterceptorWrapper.node</name>
                <outbound type="class" confirmed="yes">org.mvel.ASTNode</outbound>
                <inbound type="feature" confirmed="yes">org.mvel.ast.InterceptorWrapper.InterceptorWrapper(org.mvel.integration.Interceptor, org.mvel.ASTNode)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.ast.InterceptorWrapper.getReducedValue(java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.ast.InterceptorWrapper.getReducedValueAccelerated(java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory)</inbound>
            </feature>
        </class>
        <class confirmed="yes">
            <name>org.mvel.ast.LineLabel</name>
            <outbound type="class" confirmed="yes">org.mvel.ASTNode</outbound>
            <inbound type="feature" confirmed="yes">org.mvel.AbstractParser.nextToken()</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.MVELRuntime.execute(boolean, org.mvel.CompiledExpression, java.lang.Object, org.mvel.integration.VariableResolverFactory)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.ParserContext.getLastLineLabel()</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.ParserContext.lastLineLabel</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.ParserContext.setLastLineLabel(org.mvel.ast.LineLabel)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.debug.DebuggerContext.checkBreak(org.mvel.ast.LineLabel, org.mvel.integration.VariableResolverFactory, org.mvel.CompiledExpression)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.debug.DebuggerContext.hasBreakpoint(org.mvel.ast.LineLabel)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.debug.Frame.Frame(org.mvel.ast.LineLabel, org.mvel.integration.VariableResolverFactory, org.mvel.ParserContext)</inbound>
            <feature confirmed="yes">
                <name>org.mvel.ast.LineLabel.LineLabel(int)</name>
                <outbound type="feature" confirmed="yes">org.mvel.ASTNode.ASTNode()</outbound>
                <outbound type="feature" confirmed="no">org.mvel.ast.LineLabel.fields</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.ast.LineLabel.lineNumber</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.ast.LineLabel.LineLabel(java.lang.String, int)</name>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.ASTNode.ASTNode()</outbound>
                <outbound type="feature" confirmed="no">org.mvel.ast.LineLabel.fields</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.ast.LineLabel.lineNumber</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.ast.LineLabel.sourceFile</outbound>
                <inbound type="feature" confirmed="yes">org.mvel.AbstractParser.nextToken()</inbound>
            </feature>
            <feature confirmed="no">
                <name>org.mvel.ast.LineLabel.fields</name>
                <inbound type="feature" confirmed="yes">org.mvel.ast.LineLabel.LineLabel(int)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.ast.LineLabel.LineLabel(java.lang.String, int)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.ast.LineLabel.getLineNumber()</name>
                <outbound type="feature" confirmed="yes">org.mvel.ast.LineLabel.lineNumber</outbound>
                <inbound type="feature" confirmed="yes">org.mvel.debug.DebuggerContext.hasBreakpoint(org.mvel.ast.LineLabel)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.debug.Frame.Frame(org.mvel.ast.LineLabel, org.mvel.integration.VariableResolverFactory, org.mvel.ParserContext)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.ast.LineLabel.getReducedValue(java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory)</name>
                <outbound type="class" confirmed="no">java.lang.Object</outbound>
                <outbound type="class" confirmed="yes">org.mvel.integration.VariableResolverFactory</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.ast.LineLabel.getReducedValueAccelerated(java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory)</name>
                <outbound type="class" confirmed="no">java.lang.Object</outbound>
                <outbound type="class" confirmed="yes">org.mvel.integration.VariableResolverFactory</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.ast.LineLabel.getSourceFile()</name>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.ast.LineLabel.sourceFile</outbound>
                <inbound type="feature" confirmed="yes">org.mvel.debug.DebuggerContext.hasBreakpoint(org.mvel.ast.LineLabel)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.debug.Frame.Frame(org.mvel.ast.LineLabel, org.mvel.integration.VariableResolverFactory, org.mvel.ParserContext)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.ast.LineLabel.lineNumber</name>
                <inbound type="feature" confirmed="yes">org.mvel.ast.LineLabel.LineLabel(int)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.ast.LineLabel.LineLabel(java.lang.String, int)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.ast.LineLabel.getLineNumber()</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.ast.LineLabel.setLineNumber(int)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.ast.LineLabel.toString()</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.ast.LineLabel.setLineNumber(int)</name>
                <outbound type="feature" confirmed="yes">org.mvel.ast.LineLabel.lineNumber</outbound>
                <inbound type="feature" confirmed="yes">org.mvel.AbstractParser.nextToken()</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.ast.LineLabel.setSourceFile(java.lang.String)</name>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.ast.LineLabel.sourceFile</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.ast.LineLabel.sourceFile</name>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <inbound type="feature" confirmed="yes">org.mvel.ast.LineLabel.LineLabel(java.lang.String, int)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.ast.LineLabel.getSourceFile()</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.ast.LineLabel.setSourceFile(java.lang.String)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.ast.LineLabel.toString()</name>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="class" confirmed="no">java.lang.StringBuffer</outbound>
                <outbound type="feature" confirmed="no">java.lang.StringBuffer.StringBuffer(java.lang.String)</outbound>
                <outbound type="feature" confirmed="no">java.lang.StringBuffer.append(int)</outbound>
                <outbound type="feature" confirmed="no">java.lang.StringBuffer.append(java.lang.String)</outbound>
                <outbound type="feature" confirmed="no">java.lang.StringBuffer.toString()</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.ast.LineLabel.lineNumber</outbound>
            </feature>
        </class>
        <class confirmed="yes">
            <name>org.mvel.ast.LiteralDeepPropertyNode</name>
            <outbound type="class" confirmed="yes">org.mvel.ASTNode</outbound>
            <feature confirmed="yes">
                <name>org.mvel.ast.LiteralDeepPropertyNode.LiteralDeepPropertyNode(char[], int, java.lang.Object)</name>
                <outbound type="class" confirmed="no">java.lang.Object</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.ASTNode.ASTNode(char[], int)</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.ast.LiteralDeepPropertyNode.literal</outbound>
                <inbound type="feature" confirmed="yes">org.mvel.AbstractParser.createPropertyToken(int, int)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.ast.PropertyASTNode.initializePropertyNode(java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory)</inbound>
            </feature>
            <feature confirmed="no">
                <name>org.mvel.ast.LiteralDeepPropertyNode.accessor</name>
                <inbound type="feature" confirmed="yes">org.mvel.ast.LiteralDeepPropertyNode.getReducedValueAccelerated(java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.ast.LiteralDeepPropertyNode.getReducedValue(java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory)</name>
                <outbound type="class" confirmed="no">java.lang.Object</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.PropertyAccessor.get(char[], java.lang.Object, org.mvel.integration.VariableResolverFactory, java.lang.Object)</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.ast.LiteralDeepPropertyNode.literal</outbound>
                <outbound type="feature" confirmed="no">org.mvel.ast.LiteralDeepPropertyNode.name</outbound>
                <outbound type="class" confirmed="yes">org.mvel.integration.VariableResolverFactory</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.ast.LiteralDeepPropertyNode.getReducedValueAccelerated(java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory)</name>
                <outbound type="class" confirmed="no">java.lang.Object</outbound>
                <outbound type="class" confirmed="yes">org.mvel.Accessor</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.Accessor.getValue(java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory)</outbound>
                <outbound type="feature" confirmed="no">org.mvel.ast.LiteralDeepPropertyNode.accessor</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.ast.LiteralDeepPropertyNode.literal</outbound>
                <outbound type="feature" confirmed="no">org.mvel.ast.LiteralDeepPropertyNode.name</outbound>
                <outbound type="feature" confirmed="no">org.mvel.ast.LiteralDeepPropertyNode.valRet(java.lang.Object)</outbound>
                <outbound type="class" confirmed="yes">org.mvel.integration.VariableResolverFactory</outbound>
                <outbound type="class" confirmed="yes">org.mvel.optimizers.AccessorOptimizer</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.optimizers.AccessorOptimizer.getResultOptPass()</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.optimizers.AccessorOptimizer.optimizeAccessor(char[], java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory, boolean)</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.optimizers.OptimizerFactory.getThreadAccessorOptimizer()</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.ast.LiteralDeepPropertyNode.literal</name>
                <outbound type="class" confirmed="no">java.lang.Object</outbound>
                <inbound type="feature" confirmed="yes">org.mvel.ast.LiteralDeepPropertyNode.LiteralDeepPropertyNode(char[], int, java.lang.Object)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.ast.LiteralDeepPropertyNode.getReducedValue(java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.ast.LiteralDeepPropertyNode.getReducedValueAccelerated(java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory)</inbound>
            </feature>
            <feature confirmed="no">
                <name>org.mvel.ast.LiteralDeepPropertyNode.name</name>
                <inbound type="feature" confirmed="yes">org.mvel.ast.LiteralDeepPropertyNode.getReducedValue(java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.ast.LiteralDeepPropertyNode.getReducedValueAccelerated(java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory)</inbound>
            </feature>
            <feature confirmed="no">
                <name>org.mvel.ast.LiteralDeepPropertyNode.valRet(java.lang.Object)</name>
                <inbound type="feature" confirmed="yes">org.mvel.ast.LiteralDeepPropertyNode.getReducedValueAccelerated(java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory)</inbound>
            </feature>
        </class>
        <class confirmed="yes">
            <name>org.mvel.ast.LiteralNode</name>
            <outbound type="class" confirmed="yes">org.mvel.ASTNode</outbound>
            <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.asm.ASMAccessorOptimizer.getMethod(java.lang.Object, java.lang.String)</inbound>
            <feature confirmed="yes">
                <name>org.mvel.ast.LiteralNode.LiteralNode(java.lang.Object)</name>
                <outbound type="class" confirmed="no">java.lang.Integer</outbound>
                <outbound type="feature" confirmed="no">java.lang.Integer.intValue()</outbound>
                <outbound type="class" confirmed="no">java.lang.Object</outbound>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="feature" confirmed="no">java.lang.String.intern()</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.ASTNode.ASTNode()</outbound>
                <outbound type="feature" confirmed="no">org.mvel.ast.LiteralNode.fields</outbound>
                <outbound type="feature" confirmed="no">org.mvel.ast.LiteralNode.intRegister</outbound>
                <outbound type="feature" confirmed="no">org.mvel.ast.LiteralNode.literal</outbound>
                <inbound type="feature" confirmed="yes">org.mvel.ExpressionCompiler._compile()</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.ExpressionCompiler.verify(org.mvel.ParserContext, org.mvel.ASTNode)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.ast.LiteralNode.LiteralNode(java.lang.Object, java.lang.Class)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.ast.PropertyASTNode.initializePropertyNode(java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.ast.LiteralNode.LiteralNode(java.lang.Object, int)</name>
                <outbound type="class" confirmed="no">java.lang.Object</outbound>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="feature" confirmed="no">java.lang.String.intern()</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.ASTNode.ASTNode()</outbound>
                <outbound type="feature" confirmed="no">org.mvel.ast.LiteralNode.fields</outbound>
                <outbound type="feature" confirmed="no">org.mvel.ast.LiteralNode.literal</outbound>
                <outbound type="feature" confirmed="no">org.mvel.ast.LiteralNode.valRet(java.lang.Object)</outbound>
                <inbound type="feature" confirmed="yes">org.mvel.AbstractParser.handleSubstatement(org.mvel.ast.Substatement)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.ast.LiteralNode.LiteralNode(java.lang.Object, java.lang.Class)</name>
                <outbound type="class" confirmed="no">java.lang.Class</outbound>
                <outbound type="class" confirmed="no">java.lang.Object</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.ast.LiteralNode.LiteralNode(java.lang.Object)</outbound>
                <outbound type="feature" confirmed="no">org.mvel.ast.LiteralNode.egressType</outbound>
                <inbound type="feature" confirmed="yes">org.mvel.AbstractParser.createPropertyToken(int, int)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.AbstractParser.nextToken()</inbound>
            </feature>
            <feature confirmed="no">
                <name>org.mvel.ast.LiteralNode.egressType</name>
                <inbound type="feature" confirmed="yes">org.mvel.ast.LiteralNode.LiteralNode(java.lang.Object, java.lang.Class)</inbound>
            </feature>
            <feature confirmed="no">
                <name>org.mvel.ast.LiteralNode.fields</name>
                <inbound type="feature" confirmed="yes">org.mvel.ast.LiteralNode.LiteralNode(java.lang.Object)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.ast.LiteralNode.LiteralNode(java.lang.Object, int)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.ast.LiteralNode.getLiteralValue()</name>
                <outbound type="class" confirmed="no">java.lang.Object</outbound>
                <outbound type="feature" confirmed="no">org.mvel.ast.LiteralNode.literal</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.ast.LiteralNode.getReducedValue(java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory)</name>
                <outbound type="class" confirmed="no">java.lang.Object</outbound>
                <outbound type="feature" confirmed="no">org.mvel.ast.LiteralNode.literal</outbound>
                <outbound type="class" confirmed="yes">org.mvel.integration.VariableResolverFactory</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.ast.LiteralNode.getReducedValueAccelerated(java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory)</name>
                <outbound type="class" confirmed="no">java.lang.Object</outbound>
                <outbound type="feature" confirmed="no">org.mvel.ast.LiteralNode.literal</outbound>
                <outbound type="class" confirmed="yes">org.mvel.integration.VariableResolverFactory</outbound>
            </feature>
            <feature confirmed="no">
                <name>org.mvel.ast.LiteralNode.intRegister</name>
                <inbound type="feature" confirmed="yes">org.mvel.ast.LiteralNode.LiteralNode(java.lang.Object)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.ast.LiteralNode.isLiteral()</name>
            </feature>
            <feature confirmed="no">
                <name>org.mvel.ast.LiteralNode.literal</name>
                <inbound type="feature" confirmed="yes">org.mvel.ast.LiteralNode.LiteralNode(java.lang.Object)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.ast.LiteralNode.LiteralNode(java.lang.Object, int)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.ast.LiteralNode.getLiteralValue()</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.ast.LiteralNode.getReducedValue(java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.ast.LiteralNode.getReducedValueAccelerated(java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.ast.LiteralNode.setLiteralValue(java.lang.Object)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.ast.LiteralNode.setLiteralValue(java.lang.Object)</name>
                <outbound type="class" confirmed="no">java.lang.Object</outbound>
                <outbound type="feature" confirmed="no">org.mvel.ast.LiteralNode.literal</outbound>
            </feature>
            <feature confirmed="no">
                <name>org.mvel.ast.LiteralNode.valRet(java.lang.Object)</name>
                <inbound type="feature" confirmed="yes">org.mvel.ast.LiteralNode.LiteralNode(java.lang.Object, int)</inbound>
            </feature>
        </class>
        <class confirmed="yes">
            <name>org.mvel.ast.NestedStatement</name>
            <outbound type="class" confirmed="no">java.lang.Object</outbound>
            <inbound type="class" confirmed="yes">org.mvel.ast.IfNode</inbound>
            <inbound type="class" confirmed="yes">org.mvel.ast.WithNode</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.debug.DebugTools.decompile(org.mvel.CompiledExpression, boolean, org.mvel.debug.DebugTools$DecompileContext)</inbound>
            <feature confirmed="yes">
                <name>org.mvel.ast.NestedStatement.getNestedStatement()</name>
                <outbound type="class" confirmed="yes">org.mvel.ExecutableStatement</outbound>
                <inbound type="feature" confirmed="yes">org.mvel.debug.DebugTools.decompile(org.mvel.CompiledExpression, boolean, org.mvel.debug.DebugTools$DecompileContext)</inbound>
            </feature>
        </class>
        <class confirmed="yes">
            <name>org.mvel.ast.NewObjectNode</name>
            <outbound type="class" confirmed="yes">org.mvel.ASTNode</outbound>
            <feature confirmed="yes">
                <name>org.mvel.ast.NewObjectNode.EMPTYCLS</name>
                <outbound type="class" confirmed="no">java.lang.Class</outbound>
                <inbound type="feature" confirmed="yes">org.mvel.ast.NewObjectNode.getReducedValue(java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.ast.NewObjectNode.static {}</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.ast.NewObjectNode.NewObjectNode(char[], int)</name>
                <outbound type="class" confirmed="no">java.lang.Class</outbound>
                <outbound type="feature" confirmed="no">java.lang.Class.getName()</outbound>
                <outbound type="class" confirmed="no">java.lang.ClassLoader</outbound>
                <outbound type="feature" confirmed="no">java.lang.ClassLoader.loadClass(java.lang.String)</outbound>
                <outbound type="class" confirmed="no">java.lang.ClassNotFoundException</outbound>
                <outbound type="class" confirmed="no">java.lang.Exception</outbound>
                <outbound type="feature" confirmed="no">java.lang.Exception.printStackTrace()</outbound>
                <outbound type="class" confirmed="no">java.lang.Object</outbound>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="feature" confirmed="no">java.lang.String.valueOf(java.lang.Object)</outbound>
                <outbound type="class" confirmed="no">java.lang.StringBuffer</outbound>
                <outbound type="feature" confirmed="no">java.lang.StringBuffer.StringBuffer(java.lang.String)</outbound>
                <outbound type="feature" confirmed="no">java.lang.StringBuffer.append(java.lang.String)</outbound>
                <outbound type="feature" confirmed="no">java.lang.StringBuffer.toString()</outbound>
                <outbound type="class" confirmed="no">java.lang.Thread</outbound>
                <outbound type="feature" confirmed="no">java.lang.Thread.currentThread()</outbound>
                <outbound type="feature" confirmed="no">java.lang.Thread.getContextClassLoader()</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.ASTNode.ASTNode(char[], int)</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.AbstractParser.getCurrentThreadParserContext()</outbound>
                <outbound type="class" confirmed="yes">org.mvel.ParserContext</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.ParserContext.getImport(java.lang.String)</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.ParserContext.hasImport(java.lang.String)</outbound>
                <outbound type="class" confirmed="yes">org.mvel.ast.NewObjectNode$ArraySize</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.ast.NewObjectNode.arraySize</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.ast.NewObjectNode.className</outbound>
                <outbound type="feature" confirmed="no">org.mvel.ast.NewObjectNode.egressType</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.ast.NewObjectNode.rewriteClassReferenceToFQCN(int)</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.ast.NewObjectNode.updateClassName(int)</outbound>
                <outbound type="class" confirmed="yes">org.mvel.integration.VariableResolverFactory</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.util.ParseTools.findClass(org.mvel.integration.VariableResolverFactory, java.lang.String)</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.util.ParseTools.repeatChar(char, int)</outbound>
                <inbound type="feature" confirmed="yes">org.mvel.AbstractParser.nextToken()</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.ast.NewObjectNode.arraySize</name>
                <outbound type="class" confirmed="yes">org.mvel.ast.NewObjectNode$ArraySize</outbound>
                <inbound type="feature" confirmed="yes">org.mvel.ast.NewObjectNode.NewObjectNode(char[], int)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.ast.NewObjectNode.getReducedValue(java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.ast.NewObjectNode.getReducedValueAccelerated(java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.ast.NewObjectNode.updateClassName(int)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.ast.NewObjectNode.className</name>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <inbound type="feature" confirmed="yes">org.mvel.ast.NewObjectNode.NewObjectNode(char[], int)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.ast.NewObjectNode.getReducedValue(java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.ast.NewObjectNode.getReducedValueAccelerated(java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.ast.NewObjectNode.rewriteClassReferenceToFQCN(int)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.ast.NewObjectNode.updateClassName(int)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.ast.NewObjectNode.compiledArraySize</name>
                <outbound type="class" confirmed="yes">org.mvel.ExecutableStatement</outbound>
                <inbound type="feature" confirmed="yes">org.mvel.ast.NewObjectNode.getReducedValueAccelerated(java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.ast.NewObjectNode.updateClassName(int)</inbound>
            </feature>
            <feature confirmed="no">
                <name>org.mvel.ast.NewObjectNode.egressType</name>
                <inbound type="feature" confirmed="yes">org.mvel.ast.NewObjectNode.NewObjectNode(char[], int)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.ast.NewObjectNode.getReducedValueAccelerated(java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.ast.NewObjectNode.rewriteClassReferenceToFQCN(int)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.ast.NewObjectNode.getNewObjectOptimizer()</name>
                <outbound type="class" confirmed="yes">org.mvel.Accessor</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.ast.NewObjectNode.newObjectOptimizer</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.ast.NewObjectNode.getReducedValue(java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory)</name>
                <outbound type="class" confirmed="no">java.lang.Class</outbound>
                <outbound type="feature" confirmed="no">java.lang.Class.forName(java.lang.String)</outbound>
                <outbound type="feature" confirmed="no">java.lang.Class.getConstructor(java.lang.Class[])</outbound>
                <outbound type="feature" confirmed="no">java.lang.Class.getName()</outbound>
                <outbound type="class" confirmed="no">java.lang.ClassLoader</outbound>
                <outbound type="feature" confirmed="no">java.lang.ClassLoader.loadClass(java.lang.String)</outbound>
                <outbound type="class" confirmed="no">java.lang.ClassNotFoundException</outbound>
                <outbound type="feature" confirmed="no">java.lang.ClassNotFoundException.getMessage()</outbound>
                <outbound type="class" confirmed="no">java.lang.Exception</outbound>
                <outbound type="feature" confirmed="no">java.lang.Exception.getMessage()</outbound>
                <outbound type="class" confirmed="no">java.lang.Integer</outbound>
                <outbound type="feature" confirmed="no">java.lang.Integer.intValue()</outbound>
                <outbound type="feature" confirmed="no">java.lang.NoClassDefFoundError.NoClassDefFoundError(java.lang.String)</outbound>
                <outbound type="class" confirmed="no">java.lang.NoSuchMethodException</outbound>
                <outbound type="feature" confirmed="no">java.lang.NoSuchMethodException.getMessage()</outbound>
                <outbound type="class" confirmed="no">java.lang.Object</outbound>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="feature" confirmed="no">java.lang.String.String(char[])</outbound>
                <outbound type="feature" confirmed="no">java.lang.String.toCharArray()</outbound>
                <outbound type="class" confirmed="no">java.lang.StringBuffer</outbound>
                <outbound type="feature" confirmed="no">java.lang.StringBuffer.StringBuffer(java.lang.String)</outbound>
                <outbound type="feature" confirmed="no">java.lang.StringBuffer.append(java.lang.String)</outbound>
                <outbound type="feature" confirmed="no">java.lang.StringBuffer.toString()</outbound>
                <outbound type="class" confirmed="no">java.lang.Thread</outbound>
                <outbound type="feature" confirmed="no">java.lang.Thread.currentThread()</outbound>
                <outbound type="feature" confirmed="no">java.lang.Thread.getContextClassLoader()</outbound>
                <outbound type="feature" confirmed="no">java.lang.Throwable.getMessage()</outbound>
                <outbound type="feature" confirmed="no">java.lang.reflect.Array.newInstance(java.lang.Class, int[])</outbound>
                <outbound type="class" confirmed="no">java.lang.reflect.Constructor</outbound>
                <outbound type="feature" confirmed="no">java.lang.reflect.Constructor.getParameterTypes()</outbound>
                <outbound type="feature" confirmed="no">java.lang.reflect.Constructor.newInstance(java.lang.Object[])</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.CompileException.CompileException(java.lang.String)</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.DataConversion.convert(java.lang.Object, java.lang.Class)</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.MVEL.eval(char[], java.lang.Object, org.mvel.integration.VariableResolverFactory)</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.MVEL.eval(java.lang.String, java.lang.Object, org.mvel.integration.VariableResolverFactory)</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.PropertyAccessor.get(java.lang.String, java.lang.Object, org.mvel.integration.VariableResolverFactory, java.lang.Object)</outbound>
                <outbound type="class" confirmed="yes">org.mvel.ast.NewObjectNode$ArraySize</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.ast.NewObjectNode$ArraySize.value</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.ast.NewObjectNode.EMPTYCLS</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.ast.NewObjectNode.arraySize</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.ast.NewObjectNode.className</outbound>
                <outbound type="feature" confirmed="no">org.mvel.ast.NewObjectNode.name</outbound>
                <outbound type="class" confirmed="yes">org.mvel.integration.VariableResolverFactory</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.util.ArrayTools.findFirst(char, char[])</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.util.ParseTools.captureContructorAndResidual(char[])</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.util.ParseTools.findClass(org.mvel.integration.VariableResolverFactory, java.lang.String)</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.util.ParseTools.getBestConstructorCanadidate(java.lang.Object[], java.lang.Class)</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.util.ParseTools.parseMethodOrConstructor(char[])</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.util.ParseTools.subset(char[], int, int)</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.ast.NewObjectNode.getReducedValueAccelerated(java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory)</name>
                <outbound type="class" confirmed="no">java.lang.Class</outbound>
                <outbound type="feature" confirmed="no">java.lang.Class.forName(java.lang.String)</outbound>
                <outbound type="feature" confirmed="no">java.lang.Class.getComponentType()</outbound>
                <outbound type="feature" confirmed="no">java.lang.Class.getName()</outbound>
                <outbound type="class" confirmed="no">java.lang.ClassCastException</outbound>
                <outbound type="class" confirmed="no">java.lang.ClassNotFoundException</outbound>
                <outbound type="class" confirmed="no">java.lang.Exception</outbound>
                <outbound type="feature" confirmed="no">java.lang.NoClassDefFoundError.NoClassDefFoundError(java.lang.String)</outbound>
                <outbound type="class" confirmed="no">java.lang.Object</outbound>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="feature" confirmed="no">java.lang.String.valueOf(java.lang.Object)</outbound>
                <outbound type="class" confirmed="no">java.lang.StringBuffer</outbound>
                <outbound type="feature" confirmed="no">java.lang.StringBuffer.StringBuffer(java.lang.String)</outbound>
                <outbound type="feature" confirmed="no">java.lang.StringBuffer.append(java.lang.String)</outbound>
                <outbound type="feature" confirmed="no">java.lang.StringBuffer.toString()</outbound>
                <outbound type="class" confirmed="no">java.lang.Throwable</outbound>
                <outbound type="feature" confirmed="no">java.lang.Throwable.getMessage()</outbound>
                <outbound type="class" confirmed="yes">org.mvel.Accessor</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.Accessor.getValue(java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory)</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.CompileException.CompileException(java.lang.String, java.lang.Throwable)</outbound>
                <outbound type="class" confirmed="yes">org.mvel.ExecutableStatement</outbound>
                <outbound type="class" confirmed="yes">org.mvel.ast.NewObjectNode$ArraySize</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.ast.NewObjectNode$NewObjectArray.NewObjectNode$NewObjectArray(java.lang.Class, org.mvel.ExecutableStatement[])</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.ast.NewObjectNode.arraySize</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.ast.NewObjectNode.className</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.ast.NewObjectNode.compiledArraySize</outbound>
                <outbound type="feature" confirmed="no">org.mvel.ast.NewObjectNode.egressType</outbound>
                <outbound type="feature" confirmed="no">org.mvel.ast.NewObjectNode.name</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.ast.NewObjectNode.newObjectOptimizer</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.ast.NewObjectNode.rewriteClassReferenceToFQCN(int)</outbound>
                <outbound type="class" confirmed="yes">org.mvel.integration.VariableResolver</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.integration.VariableResolver.getValue()</outbound>
                <outbound type="class" confirmed="yes">org.mvel.integration.VariableResolverFactory</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.integration.VariableResolverFactory.getVariableResolver(java.lang.String)</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.integration.VariableResolverFactory.isResolveable(java.lang.String)</outbound>
                <outbound type="class" confirmed="yes">org.mvel.optimizers.AccessorOptimizer</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.optimizers.AccessorOptimizer.getEgressType()</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.optimizers.AccessorOptimizer.getResultOptPass()</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.optimizers.AccessorOptimizer.optimizeObjectCreation(char[], java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory)</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.optimizers.OptimizerFactory.getThreadAccessorOptimizer()</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.util.ParseTools.findClass(org.mvel.integration.VariableResolverFactory, java.lang.String)</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.util.ParseTools.repeatChar(char, int)</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.util.PropertyTools.getBaseComponentType(java.lang.Class)</outbound>
            </feature>
            <feature confirmed="no">
                <name>org.mvel.ast.NewObjectNode.name</name>
                <inbound type="feature" confirmed="yes">org.mvel.ast.NewObjectNode.getReducedValue(java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.ast.NewObjectNode.getReducedValueAccelerated(java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.ast.NewObjectNode.rewriteClassReferenceToFQCN(int)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.ast.NewObjectNode.updateClassName(int)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.ast.NewObjectNode.newObjectOptimizer</name>
                <outbound type="class" confirmed="yes">org.mvel.Accessor</outbound>
                <inbound type="feature" confirmed="yes">org.mvel.ast.NewObjectNode.getNewObjectOptimizer()</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.ast.NewObjectNode.getReducedValueAccelerated(java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.ast.NewObjectNode.rewriteClassReferenceToFQCN(int)</name>
                <outbound type="class" confirmed="no">java.lang.Class</outbound>
                <outbound type="feature" confirmed="no">java.lang.Class.getName()</outbound>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="feature" confirmed="no">java.lang.String.indexOf(int)</outbound>
                <outbound type="feature" confirmed="no">java.lang.String.toCharArray()</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.ast.NewObjectNode.className</outbound>
                <outbound type="feature" confirmed="no">org.mvel.ast.NewObjectNode.egressType</outbound>
                <outbound type="feature" confirmed="no">org.mvel.ast.NewObjectNode.name</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.ast.NewObjectNode.updateClassName(int)</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.util.ArrayTools.findFirst(char, char[])</outbound>
                <inbound type="feature" confirmed="yes">org.mvel.ast.NewObjectNode.NewObjectNode(char[], int)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.ast.NewObjectNode.getReducedValueAccelerated(java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.ast.NewObjectNode.static {}</name>
                <outbound type="class" confirmed="no">java.lang.Class</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.ast.NewObjectNode.EMPTYCLS</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.ast.NewObjectNode.updateClassName(int)</name>
                <outbound type="class" confirmed="no">char[]</outbound>
                <outbound type="class" confirmed="no">java.io.Serializable</outbound>
                <outbound type="feature" confirmed="no">java.lang.Character.isWhitespace(char)</outbound>
                <outbound type="class" confirmed="no">java.lang.Object</outbound>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="feature" confirmed="no">java.lang.String.String(char[])</outbound>
                <outbound type="feature" confirmed="no">java.lang.String.String(char[], int, int)</outbound>
                <outbound type="class" confirmed="no">java.util.Iterator</outbound>
                <outbound type="feature" confirmed="no">java.util.Iterator.next()</outbound>
                <outbound type="feature" confirmed="no">java.util.LinkedList.LinkedList()</outbound>
                <outbound type="feature" confirmed="no">java.util.LinkedList.add(java.lang.Object)</outbound>
                <outbound type="feature" confirmed="no">java.util.LinkedList.iterator()</outbound>
                <outbound type="feature" confirmed="no">java.util.LinkedList.size()</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.CompileException.CompileException(java.lang.String, char[], int)</outbound>
                <outbound type="class" confirmed="yes">org.mvel.ExecutableStatement</outbound>
                <outbound type="class" confirmed="yes">org.mvel.ast.NewObjectNode$ArraySize</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.ast.NewObjectNode$ArraySize.NewObjectNode$ArraySize(char[])</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.ast.NewObjectNode$ArraySize.value</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.ast.NewObjectNode.arraySize</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.ast.NewObjectNode.className</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.ast.NewObjectNode.compiledArraySize</outbound>
                <outbound type="feature" confirmed="no">org.mvel.ast.NewObjectNode.name</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.util.ArrayTools.findFirst(char, char[])</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.util.ParseTools.balancedCapture(char[], int, char)</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.util.ParseTools.subCompileExpression(char[])</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.util.ParseTools.subset(char[], int, int)</outbound>
                <inbound type="feature" confirmed="yes">org.mvel.ast.NewObjectNode.NewObjectNode(char[], int)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.ast.NewObjectNode.rewriteClassReferenceToFQCN(int)</inbound>
            </feature>
        </class>
        <class confirmed="yes">
            <name>org.mvel.ast.NewObjectNode$ArraySize</name>
            <outbound type="class" confirmed="no">java.io.Serializable</outbound>
            <outbound type="class" confirmed="no">java.lang.Object</outbound>
            <inbound type="feature" confirmed="yes">org.mvel.ast.NewObjectNode.NewObjectNode(char[], int)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.ast.NewObjectNode.arraySize</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.ast.NewObjectNode.getReducedValue(java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.ast.NewObjectNode.getReducedValueAccelerated(java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.ast.NewObjectNode.updateClassName(int)</inbound>
            <feature confirmed="yes">
                <name>org.mvel.ast.NewObjectNode$ArraySize.NewObjectNode$ArraySize(char[])</name>
                <outbound type="feature" confirmed="no">java.lang.Object.Object()</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.ast.NewObjectNode$ArraySize.value</outbound>
                <inbound type="feature" confirmed="yes">org.mvel.ast.NewObjectNode.updateClassName(int)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.ast.NewObjectNode$ArraySize.value</name>
                <inbound type="feature" confirmed="yes">org.mvel.ast.NewObjectNode$ArraySize.NewObjectNode$ArraySize(char[])</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.ast.NewObjectNode.getReducedValue(java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.ast.NewObjectNode.updateClassName(int)</inbound>
            </feature>
        </class>
        <class confirmed="yes">
            <name>org.mvel.ast.NewObjectNode$NewObjectArray</name>
            <outbound type="class" confirmed="no">java.io.Serializable</outbound>
            <outbound type="class" confirmed="no">java.lang.Object</outbound>
            <outbound type="class" confirmed="yes">org.mvel.Accessor</outbound>
            <feature confirmed="yes">
                <name>org.mvel.ast.NewObjectNode$NewObjectArray.NewObjectNode$NewObjectArray(java.lang.Class, org.mvel.ExecutableStatement[])</name>
                <outbound type="class" confirmed="no">java.lang.Class</outbound>
                <outbound type="feature" confirmed="no">java.lang.Object.Object()</outbound>
                <outbound type="class" confirmed="yes">org.mvel.ExecutableStatement</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.ast.NewObjectNode$NewObjectArray.arrayType</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.ast.NewObjectNode$NewObjectArray.sizes</outbound>
                <inbound type="feature" confirmed="yes">org.mvel.ast.NewObjectNode.getReducedValueAccelerated(java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.ast.NewObjectNode$NewObjectArray.arrayType</name>
                <outbound type="class" confirmed="no">java.lang.Class</outbound>
                <inbound type="feature" confirmed="yes">org.mvel.ast.NewObjectNode$NewObjectArray.NewObjectNode$NewObjectArray(java.lang.Class, org.mvel.ExecutableStatement[])</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.ast.NewObjectNode$NewObjectArray.getValue(java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.ast.NewObjectNode$NewObjectArray.getValue(java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory)</name>
                <outbound type="class" confirmed="no">java.lang.Class</outbound>
                <outbound type="feature" confirmed="no">java.lang.Class.forName(java.lang.String)</outbound>
                <outbound type="class" confirmed="no">java.lang.ClassNotFoundException</outbound>
                <outbound type="class" confirmed="no">java.lang.Integer</outbound>
                <outbound type="feature" confirmed="no">java.lang.Integer.intValue()</outbound>
                <outbound type="feature" confirmed="no">java.lang.NoClassDefFoundError.NoClassDefFoundError(java.lang.String)</outbound>
                <outbound type="class" confirmed="no">java.lang.Object</outbound>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="feature" confirmed="no">java.lang.Throwable.getMessage()</outbound>
                <outbound type="feature" confirmed="no">java.lang.reflect.Array.newInstance(java.lang.Class, int[])</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.DataConversion.convert(java.lang.Object, java.lang.Class)</outbound>
                <outbound type="class" confirmed="yes">org.mvel.ExecutableStatement</outbound>
                <outbound type="feature" confirmed="no">org.mvel.ExecutableStatement.getValue(java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory)</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.ast.NewObjectNode$NewObjectArray.arrayType</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.ast.NewObjectNode$NewObjectArray.sizes</outbound>
                <outbound type="class" confirmed="yes">org.mvel.integration.VariableResolverFactory</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.ast.NewObjectNode$NewObjectArray.setValue(java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory, java.lang.Object)</name>
                <outbound type="class" confirmed="no">java.lang.Object</outbound>
                <outbound type="class" confirmed="yes">org.mvel.integration.VariableResolverFactory</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.ast.NewObjectNode$NewObjectArray.sizes</name>
                <outbound type="class" confirmed="yes">org.mvel.ExecutableStatement</outbound>
                <inbound type="feature" confirmed="yes">org.mvel.ast.NewObjectNode$NewObjectArray.NewObjectNode$NewObjectArray(java.lang.Class, org.mvel.ExecutableStatement[])</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.ast.NewObjectNode$NewObjectArray.getValue(java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory)</inbound>
            </feature>
        </class>
        <class confirmed="yes">
            <name>org.mvel.ast.OperatorNode</name>
            <outbound type="class" confirmed="yes">org.mvel.ASTNode</outbound>
            <feature confirmed="yes">
                <name>org.mvel.ast.OperatorNode.$assertionsDisabled</name>
                <inbound type="feature" confirmed="yes">org.mvel.ast.OperatorNode.OperatorNode(java.lang.Integer)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.ast.OperatorNode.static {}</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.ast.OperatorNode.OperatorNode(java.lang.Integer)</name>
                <outbound type="feature" confirmed="no">java.lang.AssertionError.AssertionError()</outbound>
                <outbound type="class" confirmed="no">java.lang.Integer</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.ASTNode.ASTNode()</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.ast.OperatorNode.$assertionsDisabled</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.ast.OperatorNode.operator</outbound>
                <inbound type="feature" confirmed="yes">org.mvel.AbstractParser.createOperator(char[], int, int, int)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.AbstractParser.nextToken()</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.ast.OperatorNode.getOperator()</name>
                <outbound type="class" confirmed="no">java.lang.Integer</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.ast.OperatorNode.operator</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.ast.OperatorNode.getReducedValue(java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory)</name>
                <outbound type="class" confirmed="no">java.lang.Integer</outbound>
                <outbound type="class" confirmed="no">java.lang.Object</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.ast.OperatorNode.operator</outbound>
                <outbound type="class" confirmed="yes">org.mvel.integration.VariableResolverFactory</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.ast.OperatorNode.getReducedValueAccelerated(java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory)</name>
                <outbound type="class" confirmed="no">java.lang.Integer</outbound>
                <outbound type="class" confirmed="no">java.lang.Object</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.ast.OperatorNode.operator</outbound>
                <outbound type="class" confirmed="yes">org.mvel.integration.VariableResolverFactory</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.ast.OperatorNode.isOperator()</name>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.ast.OperatorNode.isOperator(java.lang.Integer)</name>
                <outbound type="class" confirmed="no">java.lang.Integer</outbound>
                <outbound type="feature" confirmed="no">java.lang.Integer.equals(java.lang.Object)</outbound>
                <outbound type="class" confirmed="no">java.lang.Object</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.ast.OperatorNode.operator</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.ast.OperatorNode.operator</name>
                <outbound type="class" confirmed="no">java.lang.Integer</outbound>
                <inbound type="feature" confirmed="yes">org.mvel.ast.OperatorNode.OperatorNode(java.lang.Integer)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.ast.OperatorNode.getOperator()</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.ast.OperatorNode.getReducedValue(java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.ast.OperatorNode.getReducedValueAccelerated(java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.ast.OperatorNode.isOperator(java.lang.Integer)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.ast.OperatorNode.static {}</name>
                <outbound type="class" confirmed="no">java.lang.Class</outbound>
                <outbound type="feature" confirmed="no">java.lang.Class.desiredAssertionStatus()</outbound>
                <outbound type="feature" confirmed="no">java.lang.Class.forName(java.lang.String)</outbound>
                <outbound type="class" confirmed="no">java.lang.ClassNotFoundException</outbound>
                <outbound type="feature" confirmed="no">java.lang.NoClassDefFoundError.NoClassDefFoundError(java.lang.String)</outbound>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="feature" confirmed="no">java.lang.Throwable.getMessage()</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.ast.OperatorNode.$assertionsDisabled</outbound>
            </feature>
        </class>
        <class confirmed="yes">
            <name>org.mvel.ast.Or</name>
            <outbound type="class" confirmed="yes">org.mvel.ASTNode</outbound>
            <feature confirmed="yes">
                <name>org.mvel.ast.Or.Or(org.mvel.ASTNode, org.mvel.ASTNode)</name>
                <outbound type="class" confirmed="yes">org.mvel.ASTNode</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.ASTNode.ASTNode()</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.ast.Or.left</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.ast.Or.right</outbound>
                <inbound type="feature" confirmed="yes">org.mvel.util.CompilerTools.optimizeAST(org.mvel.ASTLinkedList, boolean)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.ast.Or.getLeft()</name>
                <outbound type="class" confirmed="yes">org.mvel.ASTNode</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.ast.Or.left</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.ast.Or.getReducedValue(java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory)</name>
                <outbound type="class" confirmed="no">java.lang.Object</outbound>
                <outbound type="feature" confirmed="no">java.lang.RuntimeException.RuntimeException(java.lang.String)</outbound>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="class" confirmed="yes">org.mvel.integration.VariableResolverFactory</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.ast.Or.getReducedValueAccelerated(java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory)</name>
                <outbound type="class" confirmed="no">java.lang.Boolean</outbound>
                <outbound type="feature" confirmed="no">java.lang.Boolean.Boolean(boolean)</outbound>
                <outbound type="feature" confirmed="no">java.lang.Boolean.booleanValue()</outbound>
                <outbound type="class" confirmed="no">java.lang.Object</outbound>
                <outbound type="class" confirmed="yes">org.mvel.ASTNode</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.ASTNode.getReducedValueAccelerated(java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory)</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.ast.Or.left</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.ast.Or.right</outbound>
                <outbound type="class" confirmed="yes">org.mvel.integration.VariableResolverFactory</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.ast.Or.getRight()</name>
                <outbound type="class" confirmed="yes">org.mvel.ASTNode</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.ast.Or.right</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.ast.Or.left</name>
                <outbound type="class" confirmed="yes">org.mvel.ASTNode</outbound>
                <inbound type="feature" confirmed="yes">org.mvel.ast.Or.Or(org.mvel.ASTNode, org.mvel.ASTNode)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.ast.Or.getLeft()</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.ast.Or.getReducedValueAccelerated(java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.ast.Or.setLeft(org.mvel.ASTNode)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.ast.Or.right</name>
                <outbound type="class" confirmed="yes">org.mvel.ASTNode</outbound>
                <inbound type="feature" confirmed="yes">org.mvel.ast.Or.Or(org.mvel.ASTNode, org.mvel.ASTNode)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.ast.Or.getReducedValueAccelerated(java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.ast.Or.getRight()</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.ast.Or.setRight(org.mvel.ASTNode)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.ast.Or.setLeft(org.mvel.ASTNode)</name>
                <outbound type="class" confirmed="yes">org.mvel.ASTNode</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.ast.Or.left</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.ast.Or.setRight(org.mvel.ASTNode)</name>
                <outbound type="class" confirmed="yes">org.mvel.ASTNode</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.ast.Or.right</outbound>
            </feature>
        </class>
        <class confirmed="yes">
            <name>org.mvel.ast.PostFixDecNode</name>
            <outbound type="class" confirmed="yes">org.mvel.ASTNode</outbound>
            <feature confirmed="yes">
                <name>org.mvel.ast.PostFixDecNode.PostFixDecNode(char[], int)</name>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="feature" confirmed="no">java.lang.String.String(char[])</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.ASTNode.ASTNode(char[], int)</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.ast.PostFixDecNode.name</outbound>
                <inbound type="feature" confirmed="yes">org.mvel.AbstractParser.nextToken()</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.ast.PostFixDecNode.getReducedValue(java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory)</name>
                <outbound type="class" confirmed="no">java.lang.Object</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.ast.PostFixDecNode.getReducedValueAccelerated(java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory)</outbound>
                <outbound type="class" confirmed="yes">org.mvel.integration.VariableResolverFactory</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.ast.PostFixDecNode.getReducedValueAccelerated(java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory)</name>
                <outbound type="feature" confirmed="no">java.lang.Integer.Integer(int)</outbound>
                <outbound type="class" confirmed="no">java.lang.Object</outbound>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.ast.PostFixDecNode.name</outbound>
                <outbound type="class" confirmed="yes">org.mvel.integration.VariableResolver</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.integration.VariableResolver.getValue()</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.integration.VariableResolver.setValue(java.lang.Object)</outbound>
                <outbound type="class" confirmed="yes">org.mvel.integration.VariableResolverFactory</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.integration.VariableResolverFactory.getVariableResolver(java.lang.String)</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.util.ParseTools.doOperations(java.lang.Object, int, java.lang.Object)</outbound>
                <inbound type="feature" confirmed="yes">org.mvel.ast.PostFixDecNode.getReducedValue(java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.ast.PostFixDecNode.name</name>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <inbound type="feature" confirmed="yes">org.mvel.ast.PostFixDecNode.PostFixDecNode(char[], int)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.ast.PostFixDecNode.getReducedValueAccelerated(java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory)</inbound>
            </feature>
        </class>
        <class confirmed="yes">
            <name>org.mvel.ast.PostFixIncNode</name>
            <outbound type="class" confirmed="yes">org.mvel.ASTNode</outbound>
            <feature confirmed="yes">
                <name>org.mvel.ast.PostFixIncNode.PostFixIncNode(char[], int)</name>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="feature" confirmed="no">java.lang.String.String(char[])</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.ASTNode.ASTNode(char[], int)</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.ast.PostFixIncNode.name</outbound>
                <inbound type="feature" confirmed="yes">org.mvel.AbstractParser.nextToken()</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.ast.PostFixIncNode.getReducedValue(java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory)</name>
                <outbound type="class" confirmed="no">java.lang.Object</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.ast.PostFixIncNode.getReducedValueAccelerated(java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory)</outbound>
                <outbound type="class" confirmed="yes">org.mvel.integration.VariableResolverFactory</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.ast.PostFixIncNode.getReducedValueAccelerated(java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory)</name>
                <outbound type="feature" confirmed="no">java.lang.Integer.Integer(int)</outbound>
                <outbound type="class" confirmed="no">java.lang.Object</outbound>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.ast.PostFixIncNode.name</outbound>
                <outbound type="class" confirmed="yes">org.mvel.integration.VariableResolver</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.integration.VariableResolver.getValue()</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.integration.VariableResolver.setValue(java.lang.Object)</outbound>
                <outbound type="class" confirmed="yes">org.mvel.integration.VariableResolverFactory</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.integration.VariableResolverFactory.getVariableResolver(java.lang.String)</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.util.ParseTools.doOperations(java.lang.Object, int, java.lang.Object)</outbound>
                <inbound type="feature" confirmed="yes">org.mvel.ast.PostFixIncNode.getReducedValue(java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.ast.PostFixIncNode.name</name>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <inbound type="feature" confirmed="yes">org.mvel.ast.PostFixIncNode.PostFixIncNode(char[], int)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.ast.PostFixIncNode.getReducedValueAccelerated(java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory)</inbound>
            </feature>
        </class>
        <class confirmed="yes">
            <name>org.mvel.ast.PreFixDecNode</name>
            <outbound type="class" confirmed="yes">org.mvel.ASTNode</outbound>
            <feature confirmed="yes">
                <name>org.mvel.ast.PreFixDecNode.PreFixDecNode(char[], int)</name>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="feature" confirmed="no">java.lang.String.String(char[])</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.ASTNode.ASTNode(char[], int)</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.ast.PreFixDecNode.name</outbound>
                <inbound type="feature" confirmed="yes">org.mvel.AbstractParser.nextToken()</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.ast.PreFixDecNode.getReducedValue(java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory)</name>
                <outbound type="class" confirmed="no">java.lang.Object</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.ast.PreFixDecNode.getReducedValueAccelerated(java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory)</outbound>
                <outbound type="class" confirmed="yes">org.mvel.integration.VariableResolverFactory</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.ast.PreFixDecNode.getReducedValueAccelerated(java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory)</name>
                <outbound type="feature" confirmed="no">java.lang.Integer.Integer(int)</outbound>
                <outbound type="class" confirmed="no">java.lang.Object</outbound>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.ast.PreFixDecNode.name</outbound>
                <outbound type="class" confirmed="yes">org.mvel.integration.VariableResolver</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.integration.VariableResolver.getValue()</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.integration.VariableResolver.setValue(java.lang.Object)</outbound>
                <outbound type="class" confirmed="yes">org.mvel.integration.VariableResolverFactory</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.integration.VariableResolverFactory.getVariableResolver(java.lang.String)</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.util.ParseTools.doOperations(java.lang.Object, int, java.lang.Object)</outbound>
                <inbound type="feature" confirmed="yes">org.mvel.ast.PreFixDecNode.getReducedValue(java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.ast.PreFixDecNode.name</name>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <inbound type="feature" confirmed="yes">org.mvel.ast.PreFixDecNode.PreFixDecNode(char[], int)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.ast.PreFixDecNode.getReducedValueAccelerated(java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory)</inbound>
            </feature>
        </class>
        <class confirmed="yes">
            <name>org.mvel.ast.PreFixIncNode</name>
            <outbound type="class" confirmed="yes">org.mvel.ASTNode</outbound>
            <feature confirmed="yes">
                <name>org.mvel.ast.PreFixIncNode.PreFixIncNode(char[], int)</name>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="feature" confirmed="no">java.lang.String.String(char[])</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.ASTNode.ASTNode(char[], int)</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.ast.PreFixIncNode.name</outbound>
                <inbound type="feature" confirmed="yes">org.mvel.AbstractParser.nextToken()</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.ast.PreFixIncNode.getReducedValue(java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory)</name>
                <outbound type="class" confirmed="no">java.lang.Object</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.ast.PreFixIncNode.getReducedValueAccelerated(java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory)</outbound>
                <outbound type="class" confirmed="yes">org.mvel.integration.VariableResolverFactory</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.ast.PreFixIncNode.getReducedValueAccelerated(java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory)</name>
                <outbound type="feature" confirmed="no">java.lang.Integer.Integer(int)</outbound>
                <outbound type="class" confirmed="no">java.lang.Object</outbound>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.ast.PreFixIncNode.name</outbound>
                <outbound type="class" confirmed="yes">org.mvel.integration.VariableResolver</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.integration.VariableResolver.getValue()</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.integration.VariableResolver.setValue(java.lang.Object)</outbound>
                <outbound type="class" confirmed="yes">org.mvel.integration.VariableResolverFactory</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.integration.VariableResolverFactory.getVariableResolver(java.lang.String)</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.util.ParseTools.doOperations(java.lang.Object, int, java.lang.Object)</outbound>
                <inbound type="feature" confirmed="yes">org.mvel.ast.PreFixIncNode.getReducedValue(java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.ast.PreFixIncNode.name</name>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <inbound type="feature" confirmed="yes">org.mvel.ast.PreFixIncNode.PreFixIncNode(char[], int)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.ast.PreFixIncNode.getReducedValueAccelerated(java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory)</inbound>
            </feature>
        </class>
        <class confirmed="yes">
            <name>org.mvel.ast.PropertyASTNode</name>
            <outbound type="class" confirmed="yes">org.mvel.ASTNode</outbound>
            <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.asm.ASMAccessorOptimizer.getMethod(java.lang.Object, java.lang.String)</inbound>
            <feature confirmed="yes">
                <name>org.mvel.ast.PropertyASTNode.PropertyASTNode(char[], int, int, int)</name>
                <outbound type="feature" confirmed="yes">org.mvel.ASTNode.ASTNode(char[], int, int, int)</outbound>
                <inbound type="feature" confirmed="yes">org.mvel.AbstractParser.createPropertyToken(int, int)</inbound>
            </feature>
            <feature confirmed="no">
                <name>org.mvel.ast.PropertyASTNode.fields</name>
                <inbound type="feature" confirmed="yes">org.mvel.ast.PropertyASTNode.initializePropertyNode(java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory)</inbound>
            </feature>
            <feature confirmed="no">
                <name>org.mvel.ast.PropertyASTNode.getAbsoluteName()</name>
                <inbound type="feature" confirmed="yes">org.mvel.ast.PropertyASTNode.initializePropertyNode(java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory)</inbound>
            </feature>
            <feature confirmed="no">
                <name>org.mvel.ast.PropertyASTNode.getAbsoluteRootElement()</name>
                <inbound type="feature" confirmed="yes">org.mvel.ast.PropertyASTNode.initializePropertyNode(java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.ast.PropertyASTNode.getReducedValue(java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory)</name>
                <outbound type="class" confirmed="no">java.lang.Object</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.ASTNode.getReducedValue(java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory)</outbound>
                <outbound type="class" confirmed="yes">org.mvel.integration.VariableResolverFactory</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.ast.PropertyASTNode.getReducedValueAccelerated(java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory)</name>
                <outbound type="class" confirmed="no">java.lang.Object</outbound>
                <outbound type="class" confirmed="yes">org.mvel.ASTNode</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.ASTNode.getReducedValueAccelerated(java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory)</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.ast.PropertyASTNode.initializePropertyNode(java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory)</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.ast.PropertyASTNode.wrappedNode</outbound>
                <outbound type="class" confirmed="yes">org.mvel.integration.VariableResolverFactory</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.ast.PropertyASTNode.getWrappedNode()</name>
                <outbound type="class" confirmed="yes">org.mvel.ASTNode</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.ast.PropertyASTNode.wrappedNode</outbound>
                <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.asm.ASMAccessorOptimizer.getMethod(java.lang.Object, java.lang.String)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.ast.PropertyASTNode.initializePropertyNode(java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory)</name>
                <outbound type="class" confirmed="no">java.lang.Class</outbound>
                <outbound type="feature" confirmed="no">java.lang.Class.forName(java.lang.String)</outbound>
                <outbound type="class" confirmed="no">java.lang.ClassNotFoundException</outbound>
                <outbound type="feature" confirmed="no">java.lang.NoClassDefFoundError.NoClassDefFoundError(java.lang.String)</outbound>
                <outbound type="class" confirmed="no">java.lang.Object</outbound>
                <outbound type="class" confirmed="no">java.lang.RuntimeException</outbound>
                <outbound type="feature" confirmed="no">java.lang.RuntimeException.printStackTrace()</outbound>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="feature" confirmed="no">java.lang.String.String(char[])</outbound>
                <outbound type="feature" confirmed="no">java.lang.String.length()</outbound>
                <outbound type="class" confirmed="no">java.lang.StringBuffer</outbound>
                <outbound type="feature" confirmed="no">java.lang.StringBuffer.StringBuffer(java.lang.String)</outbound>
                <outbound type="feature" confirmed="no">java.lang.StringBuffer.append(java.lang.String)</outbound>
                <outbound type="feature" confirmed="no">java.lang.StringBuffer.toString()</outbound>
                <outbound type="class" confirmed="no">java.lang.Throwable</outbound>
                <outbound type="feature" confirmed="no">java.lang.Throwable.getMessage()</outbound>
                <outbound type="class" confirmed="no">java.util.Map</outbound>
                <outbound type="feature" confirmed="no">java.util.Map.containsKey(java.lang.Object)</outbound>
                <outbound type="feature" confirmed="no">java.util.Map.get(java.lang.Object)</outbound>
                <outbound type="class" confirmed="yes">org.mvel.ASTNode</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.ASTNode.getReducedValueAccelerated(java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory)</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.AbstractParser.LITERALS</outbound>
                <outbound type="class" confirmed="yes">org.mvel.CompileException</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.CompileException.CompileException(java.lang.String)</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.PropertyAccessException.PropertyAccessException(java.lang.String)</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.UnresolveablePropertyException.UnresolveablePropertyException(org.mvel.ASTNode)</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.UnresolveablePropertyException.UnresolveablePropertyException(org.mvel.ASTNode, java.lang.Throwable)</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.ast.ContextDeepPropertyNode.ContextDeepPropertyNode(char[], int)</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.ast.LiteralDeepPropertyNode.LiteralDeepPropertyNode(char[], int, java.lang.Object)</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.ast.LiteralNode.LiteralNode(java.lang.Object)</outbound>
                <outbound type="feature" confirmed="no">org.mvel.ast.PropertyASTNode.fields</outbound>
                <outbound type="feature" confirmed="no">org.mvel.ast.PropertyASTNode.getAbsoluteName()</outbound>
                <outbound type="feature" confirmed="no">org.mvel.ast.PropertyASTNode.getAbsoluteRootElement()</outbound>
                <outbound type="feature" confirmed="no">org.mvel.ast.PropertyASTNode.isOperator()</outbound>
                <outbound type="feature" confirmed="no">org.mvel.ast.PropertyASTNode.literal</outbound>
                <outbound type="feature" confirmed="no">org.mvel.ast.PropertyASTNode.name</outbound>
                <outbound type="feature" confirmed="no">org.mvel.ast.PropertyASTNode.tryStaticAccess(java.lang.Object, org.mvel.integration.VariableResolverFactory)</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.ast.PropertyASTNode.wrappedNode</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.ast.ThisValDeepPropertyNode.ThisValDeepPropertyNode(char[], int)</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.ast.ThisValNode.ThisValNode(char[], int)</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.ast.VarPropertyNode.VarPropertyNode(char[], int, java.lang.String)</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.ast.VariableDeepPropertyNode.VariableDeepPropertyNode(char[], int)</outbound>
                <outbound type="class" confirmed="yes">org.mvel.integration.VariableResolverFactory</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.integration.VariableResolverFactory.isResolveable(java.lang.String)</outbound>
                <inbound type="feature" confirmed="yes">org.mvel.ast.PropertyASTNode.getReducedValueAccelerated(java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory)</inbound>
            </feature>
            <feature confirmed="no">
                <name>org.mvel.ast.PropertyASTNode.isOperator()</name>
                <inbound type="feature" confirmed="yes">org.mvel.ast.PropertyASTNode.initializePropertyNode(java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory)</inbound>
            </feature>
            <feature confirmed="no">
                <name>org.mvel.ast.PropertyASTNode.literal</name>
                <inbound type="feature" confirmed="yes">org.mvel.ast.PropertyASTNode.initializePropertyNode(java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory)</inbound>
            </feature>
            <feature confirmed="no">
                <name>org.mvel.ast.PropertyASTNode.name</name>
                <inbound type="feature" confirmed="yes">org.mvel.ast.PropertyASTNode.initializePropertyNode(java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory)</inbound>
            </feature>
            <feature confirmed="no">
                <name>org.mvel.ast.PropertyASTNode.tryStaticAccess(java.lang.Object, org.mvel.integration.VariableResolverFactory)</name>
                <inbound type="feature" confirmed="yes">org.mvel.ast.PropertyASTNode.initializePropertyNode(java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.ast.PropertyASTNode.wrappedNode</name>
                <outbound type="class" confirmed="yes">org.mvel.ASTNode</outbound>
                <inbound type="feature" confirmed="yes">org.mvel.ast.PropertyASTNode.getReducedValueAccelerated(java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.ast.PropertyASTNode.getWrappedNode()</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.ast.PropertyASTNode.initializePropertyNode(java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory)</inbound>
            </feature>
        </class>
        <class confirmed="yes">
            <name>org.mvel.ast.RegExMatch</name>
            <outbound type="class" confirmed="yes">org.mvel.ASTNode</outbound>
            <feature confirmed="yes">
                <name>org.mvel.ast.RegExMatch.RegExMatch(char[], int, char[])</name>
                <outbound type="class" confirmed="no">java.io.Serializable</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.ASTNode.ASTNode(char[], int)</outbound>
                <outbound type="class" confirmed="yes">org.mvel.ExecutableStatement</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.ast.RegExMatch.pattern</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.ast.RegExMatch.patternStmt</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.ast.RegExMatch.stmt</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.util.ParseTools.subCompileExpression(char[])</outbound>
                <inbound type="feature" confirmed="yes">org.mvel.AbstractParser.nextToken()</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.ast.RegExMatch.getReducedValue(java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory)</name>
                <outbound type="feature" confirmed="no">java.lang.Boolean.Boolean(boolean)</outbound>
                <outbound type="class" confirmed="no">java.lang.CharSequence</outbound>
                <outbound type="class" confirmed="no">java.lang.Object</outbound>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="feature" confirmed="no">java.lang.String.valueOf(java.lang.Object)</outbound>
                <outbound type="class" confirmed="no">java.util.regex.Matcher</outbound>
                <outbound type="feature" confirmed="no">java.util.regex.Matcher.matches()</outbound>
                <outbound type="class" confirmed="no">java.util.regex.Pattern</outbound>
                <outbound type="feature" confirmed="no">java.util.regex.Pattern.compile(java.lang.String)</outbound>
                <outbound type="feature" confirmed="no">java.util.regex.Pattern.matcher(java.lang.CharSequence)</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.MVEL.eval(char[], java.lang.Object, org.mvel.integration.VariableResolverFactory)</outbound>
                <outbound type="feature" confirmed="no">org.mvel.ast.RegExMatch.name</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.ast.RegExMatch.pattern</outbound>
                <outbound type="class" confirmed="yes">org.mvel.integration.VariableResolverFactory</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.ast.RegExMatch.getReducedValueAccelerated(java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory)</name>
                <outbound type="feature" confirmed="no">java.lang.Boolean.Boolean(boolean)</outbound>
                <outbound type="class" confirmed="no">java.lang.CharSequence</outbound>
                <outbound type="class" confirmed="no">java.lang.Object</outbound>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="feature" confirmed="no">java.lang.String.valueOf(java.lang.Object)</outbound>
                <outbound type="class" confirmed="no">java.util.regex.Matcher</outbound>
                <outbound type="feature" confirmed="no">java.util.regex.Matcher.matches()</outbound>
                <outbound type="class" confirmed="no">java.util.regex.Pattern</outbound>
                <outbound type="feature" confirmed="no">java.util.regex.Pattern.compile(java.lang.String)</outbound>
                <outbound type="feature" confirmed="no">java.util.regex.Pattern.matcher(java.lang.CharSequence)</outbound>
                <outbound type="class" confirmed="yes">org.mvel.ExecutableStatement</outbound>
                <outbound type="feature" confirmed="no">org.mvel.ExecutableStatement.getValue(java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory)</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.ast.RegExMatch.patternStmt</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.ast.RegExMatch.stmt</outbound>
                <outbound type="class" confirmed="yes">org.mvel.integration.VariableResolverFactory</outbound>
            </feature>
            <feature confirmed="no">
                <name>org.mvel.ast.RegExMatch.name</name>
                <inbound type="feature" confirmed="yes">org.mvel.ast.RegExMatch.getReducedValue(java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.ast.RegExMatch.pattern</name>
                <inbound type="feature" confirmed="yes">org.mvel.ast.RegExMatch.RegExMatch(char[], int, char[])</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.ast.RegExMatch.getReducedValue(java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.ast.RegExMatch.patternStmt</name>
                <outbound type="class" confirmed="yes">org.mvel.ExecutableStatement</outbound>
                <inbound type="feature" confirmed="yes">org.mvel.ast.RegExMatch.RegExMatch(char[], int, char[])</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.ast.RegExMatch.getReducedValueAccelerated(java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.ast.RegExMatch.stmt</name>
                <outbound type="class" confirmed="yes">org.mvel.ExecutableStatement</outbound>
                <inbound type="feature" confirmed="yes">org.mvel.ast.RegExMatch.RegExMatch(char[], int, char[])</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.ast.RegExMatch.getReducedValueAccelerated(java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory)</inbound>
            </feature>
        </class>
        <class confirmed="yes">
            <name>org.mvel.ast.ReturnNode</name>
            <outbound type="class" confirmed="yes">org.mvel.ASTNode</outbound>
            <feature confirmed="yes">
                <name>org.mvel.ast.ReturnNode.ReturnNode(char[], int)</name>
                <outbound type="class" confirmed="no">java.io.Serializable</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.ASTNode.ASTNode(char[], int)</outbound>
                <outbound type="class" confirmed="yes">org.mvel.Accessor</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.ast.ReturnNode.accessor</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.util.ParseTools.subCompileExpression(char[])</outbound>
                <inbound type="feature" confirmed="yes">org.mvel.AbstractParser.nextToken()</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.ast.ReturnNode.accessor</name>
                <outbound type="class" confirmed="yes">org.mvel.Accessor</outbound>
                <inbound type="feature" confirmed="yes">org.mvel.ast.ReturnNode.ReturnNode(char[], int)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.ast.ReturnNode.getReducedValueAccelerated(java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.ast.ReturnNode.getReducedValue(java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory)</name>
                <outbound type="class" confirmed="no">java.lang.Object</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.EndWithValue.EndWithValue(java.lang.Object)</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.MVEL.eval(char[], java.lang.Object, org.mvel.integration.VariableResolverFactory)</outbound>
                <outbound type="feature" confirmed="no">org.mvel.ast.ReturnNode.name</outbound>
                <outbound type="class" confirmed="yes">org.mvel.integration.VariableResolverFactory</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.ast.ReturnNode.getReducedValueAccelerated(java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory)</name>
                <outbound type="class" confirmed="no">java.io.Serializable</outbound>
                <outbound type="class" confirmed="no">java.lang.Object</outbound>
                <outbound type="class" confirmed="yes">org.mvel.Accessor</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.Accessor.getValue(java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory)</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.EndWithValue.EndWithValue(java.lang.Object)</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.ast.ReturnNode.accessor</outbound>
                <outbound type="feature" confirmed="no">org.mvel.ast.ReturnNode.name</outbound>
                <outbound type="class" confirmed="yes">org.mvel.integration.VariableResolverFactory</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.util.ParseTools.subCompileExpression(char[])</outbound>
            </feature>
            <feature confirmed="no">
                <name>org.mvel.ast.ReturnNode.name</name>
                <inbound type="feature" confirmed="yes">org.mvel.ast.ReturnNode.getReducedValue(java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.ast.ReturnNode.getReducedValueAccelerated(java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory)</inbound>
            </feature>
        </class>
        <class confirmed="yes">
            <name>org.mvel.ast.StaticImportNode</name>
            <outbound type="class" confirmed="yes">org.mvel.ASTNode</outbound>
            <feature confirmed="yes">
                <name>org.mvel.ast.StaticImportNode.StaticImportNode(char[], int)</name>
                <outbound type="class" confirmed="no">java.lang.Class</outbound>
                <outbound type="feature" confirmed="no">java.lang.Class.getName()</outbound>
                <outbound type="class" confirmed="no">java.lang.ClassLoader</outbound>
                <outbound type="feature" confirmed="no">java.lang.ClassLoader.loadClass(java.lang.String)</outbound>
                <outbound type="class" confirmed="no">java.lang.Exception</outbound>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="feature" confirmed="no">java.lang.String.String(char[])</outbound>
                <outbound type="class" confirmed="no">java.lang.StringBuffer</outbound>
                <outbound type="feature" confirmed="no">java.lang.StringBuffer.StringBuffer(java.lang.String)</outbound>
                <outbound type="feature" confirmed="no">java.lang.StringBuffer.append(java.lang.String)</outbound>
                <outbound type="feature" confirmed="no">java.lang.StringBuffer.toString()</outbound>
                <outbound type="class" confirmed="no">java.lang.Thread</outbound>
                <outbound type="feature" confirmed="no">java.lang.Thread.currentThread()</outbound>
                <outbound type="feature" confirmed="no">java.lang.Thread.getContextClassLoader()</outbound>
                <outbound type="class" confirmed="no">java.lang.Throwable</outbound>
                <outbound type="class" confirmed="no">java.lang.reflect.Method</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.ASTNode.ASTNode(char[], int)</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.CompileException.CompileException(java.lang.String)</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.CompileException.CompileException(java.lang.String, java.lang.Throwable)</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.ast.StaticImportNode.declaringClass</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.ast.StaticImportNode.methodName</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.ast.StaticImportNode.resolveMethod()</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.util.ArrayTools.findLast(char, char[])</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.util.ParseTools.subset(char[], int)</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.util.ParseTools.subset(char[], int, int)</outbound>
                <inbound type="feature" confirmed="yes">org.mvel.AbstractParser.nextToken()</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.ast.StaticImportNode.declaringClass</name>
                <outbound type="class" confirmed="no">java.lang.Class</outbound>
                <inbound type="feature" confirmed="yes">org.mvel.ast.StaticImportNode.StaticImportNode(char[], int)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.ast.StaticImportNode.resolveMethod()</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.ast.StaticImportNode.getReducedValue(java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory)</name>
                <outbound type="class" confirmed="no">java.lang.Object</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.ast.StaticImportNode.getReducedValueAccelerated(java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory)</outbound>
                <outbound type="class" confirmed="yes">org.mvel.integration.VariableResolverFactory</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.ast.StaticImportNode.getReducedValueAccelerated(java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory)</name>
                <outbound type="class" confirmed="no">java.lang.Object</outbound>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="class" confirmed="no">java.lang.reflect.Method</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.ast.StaticImportNode.method</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.ast.StaticImportNode.methodName</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.ast.StaticImportNode.resolveMethod()</outbound>
                <outbound type="class" confirmed="yes">org.mvel.integration.VariableResolver</outbound>
                <outbound type="class" confirmed="yes">org.mvel.integration.VariableResolverFactory</outbound>
                <outbound type="class" confirmed="yes">org.mvel.integration.impl.StaticMethodImportResolverFactory</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.integration.impl.StaticMethodImportResolverFactory.createVariable(java.lang.String, java.lang.Object)</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.util.ParseTools.findStaticMethodImportResolverFactory(org.mvel.integration.VariableResolverFactory)</outbound>
                <inbound type="feature" confirmed="yes">org.mvel.ast.StaticImportNode.getReducedValue(java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.ast.StaticImportNode.method</name>
                <outbound type="class" confirmed="no">java.lang.reflect.Method</outbound>
                <inbound type="feature" confirmed="yes">org.mvel.ast.StaticImportNode.getReducedValueAccelerated(java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.ast.StaticImportNode.resolveMethod()</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.ast.StaticImportNode.methodName</name>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <inbound type="feature" confirmed="yes">org.mvel.ast.StaticImportNode.StaticImportNode(char[], int)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.ast.StaticImportNode.getReducedValueAccelerated(java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.ast.StaticImportNode.resolveMethod()</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.ast.StaticImportNode.resolveMethod()</name>
                <outbound type="class" confirmed="no">java.lang.Class</outbound>
                <outbound type="feature" confirmed="no">java.lang.Class.getMethods()</outbound>
                <outbound type="class" confirmed="no">java.lang.Object</outbound>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="feature" confirmed="no">java.lang.String.equals(java.lang.Object)</outbound>
                <outbound type="class" confirmed="no">java.lang.reflect.Method</outbound>
                <outbound type="feature" confirmed="no">java.lang.reflect.Method.getModifiers()</outbound>
                <outbound type="feature" confirmed="no">java.lang.reflect.Method.getName()</outbound>
                <outbound type="feature" confirmed="no">java.lang.reflect.Modifier.isStatic(int)</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.ast.StaticImportNode.declaringClass</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.ast.StaticImportNode.method</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.ast.StaticImportNode.methodName</outbound>
                <inbound type="feature" confirmed="yes">org.mvel.ast.StaticImportNode.StaticImportNode(char[], int)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.ast.StaticImportNode.getReducedValueAccelerated(java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory)</inbound>
            </feature>
        </class>
        <class confirmed="yes">
            <name>org.mvel.ast.Substatement</name>
            <outbound type="class" confirmed="yes">org.mvel.ASTNode</outbound>
            <inbound type="feature" confirmed="yes">org.mvel.AbstractParser.handleSubstatement(org.mvel.ast.Substatement)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.AbstractParser.nextToken()</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.ExpressionCompiler._compile()</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.MVELInterpretedRuntime.parseAndExecuteInterpreted()</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.debug.DebugTools.decompile(org.mvel.CompiledExpression, boolean, org.mvel.debug.DebugTools$DecompileContext)</inbound>
            <feature confirmed="yes">
                <name>org.mvel.ast.Substatement.Substatement(char[], int)</name>
                <outbound type="class" confirmed="no">java.io.Serializable</outbound>
                <outbound type="class" confirmed="no">java.lang.Class</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.ASTNode.ASTNode()</outbound>
                <outbound type="class" confirmed="yes">org.mvel.ExecutableStatement</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.ExecutableStatement.getKnownEgressType()</outbound>
                <outbound type="feature" confirmed="no">org.mvel.ast.Substatement.egressType</outbound>
                <outbound type="feature" confirmed="no">org.mvel.ast.Substatement.fields</outbound>
                <outbound type="feature" confirmed="no">org.mvel.ast.Substatement.name</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.ast.Substatement.statement</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.util.ParseTools.subCompileExpression(char[])</outbound>
                <inbound type="feature" confirmed="yes">org.mvel.AbstractParser.nextToken()</inbound>
            </feature>
            <feature confirmed="no">
                <name>org.mvel.ast.Substatement.egressType</name>
                <inbound type="feature" confirmed="yes">org.mvel.ast.Substatement.Substatement(char[], int)</inbound>
            </feature>
            <feature confirmed="no">
                <name>org.mvel.ast.Substatement.fields</name>
                <inbound type="feature" confirmed="yes">org.mvel.ast.Substatement.Substatement(char[], int)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.ast.Substatement.getReducedValue(java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory)</name>
                <outbound type="class" confirmed="no">java.lang.Object</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.MVEL.eval(char[], java.lang.Object, org.mvel.integration.VariableResolverFactory)</outbound>
                <outbound type="feature" confirmed="no">org.mvel.ast.Substatement.name</outbound>
                <outbound type="feature" confirmed="no">org.mvel.ast.Substatement.valRet(java.lang.Object)</outbound>
                <outbound type="class" confirmed="yes">org.mvel.integration.VariableResolverFactory</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.ast.Substatement.getReducedValueAccelerated(java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory)</name>
                <outbound type="class" confirmed="no">java.lang.Object</outbound>
                <outbound type="class" confirmed="yes">org.mvel.ExecutableStatement</outbound>
                <outbound type="feature" confirmed="no">org.mvel.ExecutableStatement.getValue(java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory)</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.ast.Substatement.statement</outbound>
                <outbound type="feature" confirmed="no">org.mvel.ast.Substatement.valRet(java.lang.Object)</outbound>
                <outbound type="class" confirmed="yes">org.mvel.integration.VariableResolverFactory</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.ast.Substatement.getStatement()</name>
                <outbound type="class" confirmed="yes">org.mvel.ExecutableStatement</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.ast.Substatement.statement</outbound>
                <inbound type="feature" confirmed="yes">org.mvel.AbstractParser.handleSubstatement(org.mvel.ast.Substatement)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.debug.DebugTools.decompile(org.mvel.CompiledExpression, boolean, org.mvel.debug.DebugTools$DecompileContext)</inbound>
            </feature>
            <feature confirmed="no">
                <name>org.mvel.ast.Substatement.name</name>
                <inbound type="feature" confirmed="yes">org.mvel.ast.Substatement.Substatement(char[], int)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.ast.Substatement.getReducedValue(java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.ast.Substatement.statement</name>
                <outbound type="class" confirmed="yes">org.mvel.ExecutableStatement</outbound>
                <inbound type="feature" confirmed="yes">org.mvel.ast.Substatement.Substatement(char[], int)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.ast.Substatement.getReducedValueAccelerated(java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.ast.Substatement.getStatement()</inbound>
            </feature>
            <feature confirmed="no">
                <name>org.mvel.ast.Substatement.valRet(java.lang.Object)</name>
                <inbound type="feature" confirmed="yes">org.mvel.ast.Substatement.getReducedValue(java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.ast.Substatement.getReducedValueAccelerated(java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory)</inbound>
            </feature>
        </class>
        <class confirmed="yes">
            <name>org.mvel.ast.ThisValDeepPropertyNode</name>
            <outbound type="class" confirmed="yes">org.mvel.ASTNode</outbound>
            <feature confirmed="yes">
                <name>org.mvel.ast.ThisValDeepPropertyNode.ThisValDeepPropertyNode(char[], int)</name>
                <outbound type="feature" confirmed="yes">org.mvel.ASTNode.ASTNode(char[], int)</outbound>
                <inbound type="feature" confirmed="yes">org.mvel.AbstractParser.createPropertyToken(int, int)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.ast.PropertyASTNode.initializePropertyNode(java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.ast.ThisValDeepPropertyNode.accessor</name>
                <outbound type="class" confirmed="yes">org.mvel.Accessor</outbound>
                <inbound type="feature" confirmed="yes">org.mvel.ast.ThisValDeepPropertyNode.getReducedValueAccelerated(java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.ast.ThisValDeepPropertyNode.getReducedValue(java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory)</name>
                <outbound type="class" confirmed="no">java.lang.Object</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.PropertyAccessor.get(char[], java.lang.Object, org.mvel.integration.VariableResolverFactory, java.lang.Object)</outbound>
                <outbound type="feature" confirmed="no">org.mvel.ast.ThisValDeepPropertyNode.name</outbound>
                <outbound type="feature" confirmed="no">org.mvel.ast.ThisValDeepPropertyNode.valRet(java.lang.Object)</outbound>
                <outbound type="class" confirmed="yes">org.mvel.integration.VariableResolverFactory</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.ast.ThisValDeepPropertyNode.getReducedValueAccelerated(java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory)</name>
                <outbound type="class" confirmed="no">java.lang.Object</outbound>
                <outbound type="class" confirmed="yes">org.mvel.Accessor</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.Accessor.getValue(java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory)</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.ast.ThisValDeepPropertyNode.accessor</outbound>
                <outbound type="feature" confirmed="no">org.mvel.ast.ThisValDeepPropertyNode.name</outbound>
                <outbound type="feature" confirmed="no">org.mvel.ast.ThisValDeepPropertyNode.valRet(java.lang.Object)</outbound>
                <outbound type="class" confirmed="yes">org.mvel.integration.VariableResolverFactory</outbound>
                <outbound type="class" confirmed="yes">org.mvel.optimizers.AccessorOptimizer</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.optimizers.AccessorOptimizer.optimizeAccessor(char[], java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory, boolean)</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.optimizers.OptimizerFactory.getThreadAccessorOptimizer()</outbound>
            </feature>
            <feature confirmed="no">
                <name>org.mvel.ast.ThisValDeepPropertyNode.name</name>
                <inbound type="feature" confirmed="yes">org.mvel.ast.ThisValDeepPropertyNode.getReducedValue(java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.ast.ThisValDeepPropertyNode.getReducedValueAccelerated(java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory)</inbound>
            </feature>
            <feature confirmed="no">
                <name>org.mvel.ast.ThisValDeepPropertyNode.valRet(java.lang.Object)</name>
                <inbound type="feature" confirmed="yes">org.mvel.ast.ThisValDeepPropertyNode.getReducedValue(java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.ast.ThisValDeepPropertyNode.getReducedValueAccelerated(java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory)</inbound>
            </feature>
        </class>
        <class confirmed="yes">
            <name>org.mvel.ast.ThisValNode</name>
            <outbound type="class" confirmed="yes">org.mvel.ASTNode</outbound>
            <feature confirmed="yes">
                <name>org.mvel.ast.ThisValNode.ThisValNode(char[], int)</name>
                <outbound type="feature" confirmed="yes">org.mvel.ASTNode.ASTNode(char[], int)</outbound>
                <inbound type="feature" confirmed="yes">org.mvel.ast.PropertyASTNode.initializePropertyNode(java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.ast.ThisValNode.getReducedValue(java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory)</name>
                <outbound type="class" confirmed="no">java.lang.Object</outbound>
                <outbound type="feature" confirmed="no">org.mvel.ast.ThisValNode.valRet(java.lang.Object)</outbound>
                <outbound type="class" confirmed="yes">org.mvel.integration.VariableResolverFactory</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.ast.ThisValNode.getReducedValueAccelerated(java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory)</name>
                <outbound type="class" confirmed="no">java.lang.Object</outbound>
                <outbound type="feature" confirmed="no">org.mvel.ast.ThisValNode.valRet(java.lang.Object)</outbound>
                <outbound type="class" confirmed="yes">org.mvel.integration.VariableResolverFactory</outbound>
            </feature>
            <feature confirmed="no">
                <name>org.mvel.ast.ThisValNode.valRet(java.lang.Object)</name>
                <inbound type="feature" confirmed="yes">org.mvel.ast.ThisValNode.getReducedValue(java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.ast.ThisValNode.getReducedValueAccelerated(java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory)</inbound>
            </feature>
        </class>
        <class confirmed="yes">
            <name>org.mvel.ast.TypeCast</name>
            <outbound type="class" confirmed="yes">org.mvel.ASTNode</outbound>
            <feature confirmed="yes">
                <name>org.mvel.ast.TypeCast.TypeCast(char[], int, int, int, java.lang.Class)</name>
                <outbound type="class" confirmed="no">java.io.Serializable</outbound>
                <outbound type="class" confirmed="no">java.lang.Class</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.ASTNode.ASTNode(char[], int, int, int)</outbound>
                <outbound type="class" confirmed="yes">org.mvel.ExecutableStatement</outbound>
                <outbound type="feature" confirmed="no">org.mvel.ast.TypeCast.egressType</outbound>
                <outbound type="feature" confirmed="no">org.mvel.ast.TypeCast.name</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.ast.TypeCast.statement</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.util.ParseTools.subCompileExpression(char[])</outbound>
                <inbound type="feature" confirmed="yes">org.mvel.AbstractParser.nextToken()</inbound>
            </feature>
            <feature confirmed="no">
                <name>org.mvel.ast.TypeCast.egressType</name>
                <inbound type="feature" confirmed="yes">org.mvel.ast.TypeCast.TypeCast(char[], int, int, int, java.lang.Class)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.ast.TypeCast.getReducedValue(java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.ast.TypeCast.getReducedValueAccelerated(java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.ast.TypeCast.getReducedValue(java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory)</name>
                <outbound type="class" confirmed="no">java.lang.Class</outbound>
                <outbound type="class" confirmed="no">java.lang.Object</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.DataConversion.convert(java.lang.Object, java.lang.Class)</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.MVEL.eval(char[], java.lang.Object, org.mvel.integration.VariableResolverFactory)</outbound>
                <outbound type="feature" confirmed="no">org.mvel.ast.TypeCast.egressType</outbound>
                <outbound type="feature" confirmed="no">org.mvel.ast.TypeCast.name</outbound>
                <outbound type="class" confirmed="yes">org.mvel.integration.VariableResolverFactory</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.ast.TypeCast.getReducedValueAccelerated(java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory)</name>
                <outbound type="class" confirmed="no">java.lang.Class</outbound>
                <outbound type="class" confirmed="no">java.lang.Object</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.DataConversion.convert(java.lang.Object, java.lang.Class)</outbound>
                <outbound type="class" confirmed="yes">org.mvel.ExecutableStatement</outbound>
                <outbound type="feature" confirmed="no">org.mvel.ExecutableStatement.getValue(java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory)</outbound>
                <outbound type="feature" confirmed="no">org.mvel.ast.TypeCast.egressType</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.ast.TypeCast.statement</outbound>
                <outbound type="class" confirmed="yes">org.mvel.integration.VariableResolverFactory</outbound>
            </feature>
            <feature confirmed="no">
                <name>org.mvel.ast.TypeCast.name</name>
                <inbound type="feature" confirmed="yes">org.mvel.ast.TypeCast.TypeCast(char[], int, int, int, java.lang.Class)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.ast.TypeCast.getReducedValue(java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.ast.TypeCast.statement</name>
                <outbound type="class" confirmed="yes">org.mvel.ExecutableStatement</outbound>
                <inbound type="feature" confirmed="yes">org.mvel.ast.TypeCast.TypeCast(char[], int, int, int, java.lang.Class)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.ast.TypeCast.getReducedValueAccelerated(java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory)</inbound>
            </feature>
        </class>
        <class confirmed="yes">
            <name>org.mvel.ast.TypedVarNode</name>
            <outbound type="class" confirmed="yes">org.mvel.ASTNode</outbound>
            <outbound type="class" confirmed="yes">org.mvel.ast.Assignment</outbound>
            <feature confirmed="yes">
                <name>org.mvel.ast.TypedVarNode.TypedVarNode(char[], int, java.lang.Class)</name>
                <outbound type="class" confirmed="no">java.io.Serializable</outbound>
                <outbound type="class" confirmed="no">java.lang.Class</outbound>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="feature" confirmed="no">java.lang.String.String(char[])</outbound>
                <outbound type="feature" confirmed="no">java.lang.String.String(char[], int, int)</outbound>
                <outbound type="feature" confirmed="no">java.lang.String.trim()</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.ASTNode.ASTNode(char[], int)</outbound>
                <outbound type="class" confirmed="yes">org.mvel.ExecutableStatement</outbound>
                <outbound type="feature" confirmed="no">org.mvel.ast.TypedVarNode.egressType</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.ast.TypedVarNode.name</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.ast.TypedVarNode.statement</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.ast.TypedVarNode.stmt</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.util.ParseTools.checkNameSafety(java.lang.String)</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.util.ParseTools.subCompileExpression(char[])</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.util.ParseTools.subset(char[], int)</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.util.PropertyTools.find(char[], char)</outbound>
                <inbound type="feature" confirmed="yes">org.mvel.AbstractParser.nextToken()</inbound>
            </feature>
            <feature confirmed="no">
                <name>org.mvel.ast.TypedVarNode.egressType</name>
                <inbound type="feature" confirmed="yes">org.mvel.ast.TypedVarNode.TypedVarNode(char[], int, java.lang.Class)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.ast.TypedVarNode.getReducedValue(java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.ast.TypedVarNode.getReducedValueAccelerated(java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.ast.TypedVarNode.getAssignmentVar()</name>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.ast.TypedVarNode.name</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.ast.TypedVarNode.getName()</name>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.ast.TypedVarNode.name</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.ast.TypedVarNode.getReducedValue(java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory)</name>
                <outbound type="class" confirmed="no">java.lang.Class</outbound>
                <outbound type="class" confirmed="no">java.lang.Object</outbound>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.MVEL.eval(char[], java.lang.Object, org.mvel.integration.VariableResolverFactory)</outbound>
                <outbound type="feature" confirmed="no">org.mvel.ast.TypedVarNode.egressType</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.ast.TypedVarNode.name</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.ast.TypedVarNode.stmt</outbound>
                <outbound type="class" confirmed="yes">org.mvel.integration.VariableResolver</outbound>
                <outbound type="class" confirmed="yes">org.mvel.integration.VariableResolverFactory</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.integration.VariableResolverFactory.createVariable(java.lang.String, java.lang.Object, java.lang.Class)</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.util.ParseTools.finalLocalVariableFactory(org.mvel.integration.VariableResolverFactory)</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.ast.TypedVarNode.getReducedValueAccelerated(java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory)</name>
                <outbound type="class" confirmed="no">java.io.Serializable</outbound>
                <outbound type="class" confirmed="no">java.lang.Class</outbound>
                <outbound type="class" confirmed="no">java.lang.Object</outbound>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="class" confirmed="yes">org.mvel.ExecutableStatement</outbound>
                <outbound type="feature" confirmed="no">org.mvel.ExecutableStatement.getValue(java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory)</outbound>
                <outbound type="feature" confirmed="no">org.mvel.ast.TypedVarNode.egressType</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.ast.TypedVarNode.name</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.ast.TypedVarNode.statement</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.ast.TypedVarNode.stmt</outbound>
                <outbound type="class" confirmed="yes">org.mvel.integration.VariableResolver</outbound>
                <outbound type="class" confirmed="yes">org.mvel.integration.VariableResolverFactory</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.integration.VariableResolverFactory.createVariable(java.lang.String, java.lang.Object, java.lang.Class)</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.util.ParseTools.finalLocalVariableFactory(org.mvel.integration.VariableResolverFactory)</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.util.ParseTools.subCompileExpression(char[])</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.ast.TypedVarNode.isNewDeclaration()</name>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.ast.TypedVarNode.name</name>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <inbound type="feature" confirmed="yes">org.mvel.ast.TypedVarNode.TypedVarNode(char[], int, java.lang.Class)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.ast.TypedVarNode.getAssignmentVar()</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.ast.TypedVarNode.getName()</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.ast.TypedVarNode.getReducedValue(java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.ast.TypedVarNode.getReducedValueAccelerated(java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.ast.TypedVarNode.statement</name>
                <outbound type="class" confirmed="yes">org.mvel.ExecutableStatement</outbound>
                <inbound type="feature" confirmed="yes">org.mvel.ast.TypedVarNode.TypedVarNode(char[], int, java.lang.Class)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.ast.TypedVarNode.getReducedValueAccelerated(java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.ast.TypedVarNode.stmt</name>
                <inbound type="feature" confirmed="yes">org.mvel.ast.TypedVarNode.TypedVarNode(char[], int, java.lang.Class)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.ast.TypedVarNode.getReducedValue(java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.ast.TypedVarNode.getReducedValueAccelerated(java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory)</inbound>
            </feature>
        </class>
        <class confirmed="yes">
            <name>org.mvel.ast.Union</name>
            <outbound type="class" confirmed="yes">org.mvel.ASTNode</outbound>
            <feature confirmed="yes">
                <name>org.mvel.ast.Union.Union(char[], int, int, int, org.mvel.ASTNode)</name>
                <outbound type="class" confirmed="yes">org.mvel.ASTNode</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.ASTNode.ASTNode(char[], int, int, int)</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.ast.Union.main</outbound>
                <inbound type="feature" confirmed="yes">org.mvel.AbstractParser.handleUnion(org.mvel.ASTNode)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.AbstractParser.nextToken()</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.ast.Union.accessor</name>
                <outbound type="class" confirmed="yes">org.mvel.Accessor</outbound>
                <inbound type="feature" confirmed="yes">org.mvel.ast.Union.getReducedValueAccelerated(java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.ast.Union.getReducedValue(java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory)</name>
                <outbound type="class" confirmed="no">java.lang.Object</outbound>
                <outbound type="class" confirmed="yes">org.mvel.ASTNode</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.ASTNode.getReducedValue(java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory)</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.PropertyAccessor.get(char[], java.lang.Object, org.mvel.integration.VariableResolverFactory, java.lang.Object)</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.ast.Union.main</outbound>
                <outbound type="feature" confirmed="no">org.mvel.ast.Union.name</outbound>
                <outbound type="class" confirmed="yes">org.mvel.integration.VariableResolverFactory</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.ast.Union.getReducedValueAccelerated(java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory)</name>
                <outbound type="class" confirmed="no">java.lang.Object</outbound>
                <outbound type="class" confirmed="yes">org.mvel.ASTNode</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.ASTNode.getReducedValueAccelerated(java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory)</outbound>
                <outbound type="class" confirmed="yes">org.mvel.Accessor</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.Accessor.getValue(java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory)</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.ast.Union.accessor</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.ast.Union.main</outbound>
                <outbound type="feature" confirmed="no">org.mvel.ast.Union.name</outbound>
                <outbound type="class" confirmed="yes">org.mvel.integration.VariableResolverFactory</outbound>
                <outbound type="class" confirmed="yes">org.mvel.optimizers.AccessorOptimizer</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.optimizers.AccessorOptimizer.getResultOptPass()</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.optimizers.AccessorOptimizer.optimizeAccessor(char[], java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory, boolean)</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.optimizers.OptimizerFactory.getDefaultAccessorCompiler()</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.ast.Union.main</name>
                <outbound type="class" confirmed="yes">org.mvel.ASTNode</outbound>
                <inbound type="feature" confirmed="yes">org.mvel.ast.Union.Union(char[], int, int, int, org.mvel.ASTNode)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.ast.Union.getReducedValue(java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.ast.Union.getReducedValueAccelerated(java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory)</inbound>
            </feature>
            <feature confirmed="no">
                <name>org.mvel.ast.Union.name</name>
                <inbound type="feature" confirmed="yes">org.mvel.ast.Union.getReducedValue(java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.ast.Union.getReducedValueAccelerated(java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory)</inbound>
            </feature>
        </class>
        <class confirmed="yes">
            <name>org.mvel.ast.VarPropertyNode</name>
            <outbound type="class" confirmed="yes">org.mvel.ASTNode</outbound>
            <feature confirmed="yes">
                <name>org.mvel.ast.VarPropertyNode.VarPropertyNode(char[], int, java.lang.String)</name>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.ASTNode.ASTNode(char[], int)</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.ast.VarPropertyNode.name</outbound>
                <inbound type="feature" confirmed="yes">org.mvel.ast.PropertyASTNode.initializePropertyNode(java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.ast.VarPropertyNode.getReducedValue(java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory)</name>
                <outbound type="class" confirmed="no">java.lang.Object</outbound>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.ast.VarPropertyNode.name</outbound>
                <outbound type="class" confirmed="yes">org.mvel.integration.VariableResolver</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.integration.VariableResolver.getValue()</outbound>
                <outbound type="class" confirmed="yes">org.mvel.integration.VariableResolverFactory</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.integration.VariableResolverFactory.getVariableResolver(java.lang.String)</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.ast.VarPropertyNode.getReducedValueAccelerated(java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory)</name>
                <outbound type="class" confirmed="no">java.lang.Object</outbound>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.ast.VarPropertyNode.name</outbound>
                <outbound type="class" confirmed="yes">org.mvel.integration.VariableResolver</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.integration.VariableResolver.getValue()</outbound>
                <outbound type="class" confirmed="yes">org.mvel.integration.VariableResolverFactory</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.integration.VariableResolverFactory.getVariableResolver(java.lang.String)</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.ast.VarPropertyNode.name</name>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <inbound type="feature" confirmed="yes">org.mvel.ast.VarPropertyNode.VarPropertyNode(char[], int, java.lang.String)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.ast.VarPropertyNode.getReducedValue(java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.ast.VarPropertyNode.getReducedValueAccelerated(java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory)</inbound>
            </feature>
        </class>
        <class confirmed="yes">
            <name>org.mvel.ast.VariableDeepPropertyNode</name>
            <outbound type="class" confirmed="yes">org.mvel.ASTNode</outbound>
            <feature confirmed="yes">
                <name>org.mvel.ast.VariableDeepPropertyNode.VariableDeepPropertyNode(char[], int)</name>
                <outbound type="feature" confirmed="yes">org.mvel.ASTNode.ASTNode(char[], int)</outbound>
                <inbound type="feature" confirmed="yes">org.mvel.ast.PropertyASTNode.initializePropertyNode(java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.ast.VariableDeepPropertyNode.accessor</name>
                <outbound type="class" confirmed="yes">org.mvel.Accessor</outbound>
                <inbound type="feature" confirmed="yes">org.mvel.ast.VariableDeepPropertyNode.getReducedValueAccelerated(java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.ast.VariableDeepPropertyNode.getReducedValue(java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory)</name>
                <outbound type="class" confirmed="no">java.lang.Object</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.PropertyAccessor.get(char[], java.lang.Object, org.mvel.integration.VariableResolverFactory, java.lang.Object)</outbound>
                <outbound type="feature" confirmed="no">org.mvel.ast.VariableDeepPropertyNode.name</outbound>
                <outbound type="feature" confirmed="no">org.mvel.ast.VariableDeepPropertyNode.valRet(java.lang.Object)</outbound>
                <outbound type="class" confirmed="yes">org.mvel.integration.VariableResolverFactory</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.ast.VariableDeepPropertyNode.getReducedValueAccelerated(java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory)</name>
                <outbound type="class" confirmed="no">java.lang.Object</outbound>
                <outbound type="class" confirmed="yes">org.mvel.Accessor</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.Accessor.getValue(java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory)</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.ast.VariableDeepPropertyNode.accessor</outbound>
                <outbound type="feature" confirmed="no">org.mvel.ast.VariableDeepPropertyNode.name</outbound>
                <outbound type="feature" confirmed="no">org.mvel.ast.VariableDeepPropertyNode.valRet(java.lang.Object)</outbound>
                <outbound type="class" confirmed="yes">org.mvel.integration.VariableResolverFactory</outbound>
                <outbound type="class" confirmed="yes">org.mvel.optimizers.AccessorOptimizer</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.optimizers.AccessorOptimizer.getResultOptPass()</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.optimizers.AccessorOptimizer.optimizeAccessor(char[], java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory, boolean)</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.optimizers.OptimizerFactory.getThreadAccessorOptimizer()</outbound>
            </feature>
            <feature confirmed="no">
                <name>org.mvel.ast.VariableDeepPropertyNode.name</name>
                <inbound type="feature" confirmed="yes">org.mvel.ast.VariableDeepPropertyNode.getReducedValue(java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.ast.VariableDeepPropertyNode.getReducedValueAccelerated(java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory)</inbound>
            </feature>
            <feature confirmed="no">
                <name>org.mvel.ast.VariableDeepPropertyNode.valRet(java.lang.Object)</name>
                <inbound type="feature" confirmed="yes">org.mvel.ast.VariableDeepPropertyNode.getReducedValue(java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.ast.VariableDeepPropertyNode.getReducedValueAccelerated(java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory)</inbound>
            </feature>
        </class>
        <class confirmed="yes">
            <name>org.mvel.ast.WhileNode</name>
            <outbound type="class" confirmed="yes">org.mvel.ast.BlockNode</outbound>
            <feature confirmed="yes">
                <name>org.mvel.ast.WhileNode.WhileNode(char[], char[], int)</name>
                <outbound type="class" confirmed="no">java.io.Serializable</outbound>
                <outbound type="class" confirmed="yes">org.mvel.ExecutableStatement</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.ast.BlockNode.BlockNode(char[], int)</outbound>
                <outbound type="feature" confirmed="no">org.mvel.ast.WhileNode.block</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.ast.WhileNode.compiledBlock</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.ast.WhileNode.cond</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.ast.WhileNode.condition</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.util.ParseTools.subCompileExpression(char[])</outbound>
                <inbound type="feature" confirmed="yes">org.mvel.AbstractParser.createBlockToken(int, int, int, int, int)</inbound>
            </feature>
            <feature confirmed="no">
                <name>org.mvel.ast.WhileNode.block</name>
                <inbound type="feature" confirmed="yes">org.mvel.ast.WhileNode.WhileNode(char[], char[], int)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.ast.WhileNode.compiledBlock</name>
                <outbound type="class" confirmed="yes">org.mvel.ExecutableStatement</outbound>
                <inbound type="feature" confirmed="yes">org.mvel.ast.WhileNode.WhileNode(char[], char[], int)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.ast.WhileNode.getReducedValue(java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.ast.WhileNode.getReducedValueAccelerated(java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.ast.WhileNode.cond</name>
                <inbound type="feature" confirmed="yes">org.mvel.ast.WhileNode.WhileNode(char[], char[], int)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.ast.WhileNode.condition</name>
                <outbound type="class" confirmed="yes">org.mvel.ExecutableStatement</outbound>
                <inbound type="feature" confirmed="yes">org.mvel.ast.WhileNode.WhileNode(char[], char[], int)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.ast.WhileNode.getReducedValue(java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.ast.WhileNode.getReducedValueAccelerated(java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.ast.WhileNode.getReducedValue(java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory)</name>
                <outbound type="class" confirmed="no">java.lang.Boolean</outbound>
                <outbound type="feature" confirmed="no">java.lang.Boolean.booleanValue()</outbound>
                <outbound type="class" confirmed="no">java.lang.Object</outbound>
                <outbound type="class" confirmed="yes">org.mvel.ExecutableStatement</outbound>
                <outbound type="feature" confirmed="no">org.mvel.ExecutableStatement.getValue(java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory)</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.ast.WhileNode.compiledBlock</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.ast.WhileNode.condition</outbound>
                <outbound type="class" confirmed="yes">org.mvel.integration.VariableResolverFactory</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.ast.WhileNode.getReducedValueAccelerated(java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory)</name>
                <outbound type="class" confirmed="no">java.lang.Boolean</outbound>
                <outbound type="feature" confirmed="no">java.lang.Boolean.booleanValue()</outbound>
                <outbound type="class" confirmed="no">java.lang.Object</outbound>
                <outbound type="class" confirmed="yes">org.mvel.ExecutableStatement</outbound>
                <outbound type="feature" confirmed="no">org.mvel.ExecutableStatement.getValue(java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory)</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.ast.WhileNode.compiledBlock</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.ast.WhileNode.condition</outbound>
                <outbound type="class" confirmed="yes">org.mvel.integration.VariableResolverFactory</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.ast.WhileNode.item</name>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
            </feature>
        </class>
        <class confirmed="yes">
            <name>org.mvel.ast.WithNode</name>
            <outbound type="class" confirmed="yes">org.mvel.ast.BlockNode</outbound>
            <outbound type="class" confirmed="yes">org.mvel.ast.NestedStatement</outbound>
            <feature confirmed="yes">
                <name>org.mvel.ast.WithNode.WithNode(char[], char[], int)</name>
                <outbound type="class" confirmed="no">java.io.Serializable</outbound>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="feature" confirmed="no">java.lang.String.String(char[])</outbound>
                <outbound type="feature" confirmed="no">java.lang.String.trim()</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.AbstractParser.getCurrentThreadParserContext()</outbound>
                <outbound type="class" confirmed="yes">org.mvel.ExecutableStatement</outbound>
                <outbound type="class" confirmed="yes">org.mvel.ParserContext</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.ParserContext.setBlockSymbols(boolean)</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.ast.BlockNode.BlockNode(char[], int, char[])</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.ast.WithNode.compileWithExpressions()</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.ast.WithNode.nestParm</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.ast.WithNode.nestedStatement</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.util.ParseTools.subCompileExpression(java.lang.String)</outbound>
                <inbound type="feature" confirmed="yes">org.mvel.AbstractParser.createBlockToken(int, int, int, int, int)</inbound>
            </feature>
            <feature confirmed="no">
                <name>org.mvel.ast.WithNode.block</name>
                <inbound type="feature" confirmed="yes">org.mvel.ast.WithNode.compileWithExpressions()</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.ast.WithNode.compileWithExpressions()</name>
                <outbound type="class" confirmed="no">java.io.Serializable</outbound>
                <outbound type="class" confirmed="no">java.lang.Object</outbound>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="feature" confirmed="no">java.lang.String.String(char[], int, int)</outbound>
                <outbound type="feature" confirmed="no">java.lang.String.trim()</outbound>
                <outbound type="feature" confirmed="no">java.lang.String.valueOf(java.lang.Object)</outbound>
                <outbound type="class" confirmed="no">java.lang.StringBuffer</outbound>
                <outbound type="feature" confirmed="no">java.lang.StringBuffer.StringBuffer(java.lang.String)</outbound>
                <outbound type="feature" confirmed="no">java.lang.StringBuffer.append(java.lang.String)</outbound>
                <outbound type="feature" confirmed="no">java.lang.StringBuffer.toString()</outbound>
                <outbound type="feature" confirmed="no">java.util.ArrayList.ArrayList()</outbound>
                <outbound type="feature" confirmed="no">java.util.List.add(java.lang.Object)</outbound>
                <outbound type="feature" confirmed="no">java.util.List.size()</outbound>
                <outbound type="feature" confirmed="no">java.util.List.toArray(java.lang.Object[])</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.CompileException.CompileException(java.lang.String, char[], int)</outbound>
                <outbound type="class" confirmed="yes">org.mvel.ExecutableStatement</outbound>
                <outbound type="class" confirmed="yes">org.mvel.ast.WithNode$ParmValuePair</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.ast.WithNode$ParmValuePair.WithNode$ParmValuePair(java.lang.String, org.mvel.ExecutableStatement)</outbound>
                <outbound type="feature" confirmed="no">org.mvel.ast.WithNode.block</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.ast.WithNode.nestParm</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.ast.WithNode.withExpressions</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.util.ParseTools.balancedCapture(char[], int, char)</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.util.ParseTools.createShortFormOperativeAssignment(java.lang.String, char[], int)</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.util.ParseTools.subCompileExpression(char[])</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.util.ParseTools.subset(char[], int, int)</outbound>
                <inbound type="feature" confirmed="yes">org.mvel.ast.WithNode.WithNode(char[], char[], int)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.ast.WithNode.getNestedStatement()</name>
                <outbound type="class" confirmed="yes">org.mvel.ExecutableStatement</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.ast.WithNode.nestedStatement</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.ast.WithNode.getReducedValue(java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory)</name>
                <outbound type="class" confirmed="no">java.lang.Object</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.ast.WithNode.getReducedValueAccelerated(java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory)</outbound>
                <outbound type="class" confirmed="yes">org.mvel.integration.VariableResolverFactory</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.ast.WithNode.getReducedValueAccelerated(java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory)</name>
                <outbound type="class" confirmed="no">java.io.Serializable</outbound>
                <outbound type="class" confirmed="no">java.lang.Object</outbound>
                <outbound type="class" confirmed="yes">org.mvel.ExecutableStatement</outbound>
                <outbound type="feature" confirmed="no">org.mvel.ExecutableStatement.getValue(java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory)</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.MVEL.executeSetExpression(java.io.Serializable, java.lang.Object, org.mvel.integration.VariableResolverFactory, java.lang.Object)</outbound>
                <outbound type="class" confirmed="yes">org.mvel.ast.WithNode$ParmValuePair</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.ast.WithNode$ParmValuePair.getSetExpression()</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.ast.WithNode$ParmValuePair.getStatement()</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.ast.WithNode.nestedStatement</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.ast.WithNode.withExpressions</outbound>
                <outbound type="class" confirmed="yes">org.mvel.integration.VariableResolverFactory</outbound>
                <inbound type="feature" confirmed="yes">org.mvel.ast.WithNode.getReducedValue(java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.ast.WithNode.getWithExpressions()</name>
                <outbound type="class" confirmed="yes">org.mvel.ast.WithNode$ParmValuePair</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.ast.WithNode.withExpressions</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.ast.WithNode.nestParm</name>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <inbound type="feature" confirmed="yes">org.mvel.ast.WithNode.WithNode(char[], char[], int)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.ast.WithNode.compileWithExpressions()</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.ast.WithNode.nestedStatement</name>
                <outbound type="class" confirmed="yes">org.mvel.ExecutableStatement</outbound>
                <inbound type="feature" confirmed="yes">org.mvel.ast.WithNode.WithNode(char[], char[], int)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.ast.WithNode.getNestedStatement()</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.ast.WithNode.getReducedValueAccelerated(java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.ast.WithNode.withExpressions</name>
                <outbound type="class" confirmed="yes">org.mvel.ast.WithNode$ParmValuePair</outbound>
                <inbound type="feature" confirmed="yes">org.mvel.ast.WithNode.compileWithExpressions()</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.ast.WithNode.getReducedValueAccelerated(java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.ast.WithNode.getWithExpressions()</inbound>
            </feature>
        </class>
        <class confirmed="yes">
            <name>org.mvel.ast.WithNode$ParmValuePair</name>
            <outbound type="class" confirmed="no">java.io.Serializable</outbound>
            <outbound type="class" confirmed="no">java.lang.Object</outbound>
            <inbound type="feature" confirmed="yes">org.mvel.ast.WithNode.compileWithExpressions()</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.ast.WithNode.getReducedValueAccelerated(java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.ast.WithNode.getWithExpressions()</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.ast.WithNode.withExpressions</inbound>
            <feature confirmed="yes">
                <name>org.mvel.ast.WithNode$ParmValuePair.WithNode$ParmValuePair()</name>
                <outbound type="feature" confirmed="no">java.lang.Object.Object()</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.ast.WithNode$ParmValuePair.WithNode$ParmValuePair(java.lang.String, org.mvel.ExecutableStatement)</name>
                <outbound type="class" confirmed="no">java.io.Serializable</outbound>
                <outbound type="feature" confirmed="no">java.lang.Object.Object()</outbound>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="class" confirmed="yes">org.mvel.ExecutableStatement</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.MVEL.compileSetExpression(java.lang.String)</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.ast.WithNode$ParmValuePair.setExpression</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.ast.WithNode$ParmValuePair.statement</outbound>
                <inbound type="feature" confirmed="yes">org.mvel.ast.WithNode.compileWithExpressions()</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.ast.WithNode$ParmValuePair.getSetExpression()</name>
                <outbound type="class" confirmed="no">java.io.Serializable</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.ast.WithNode$ParmValuePair.setExpression</outbound>
                <inbound type="feature" confirmed="yes">org.mvel.ast.WithNode.getReducedValueAccelerated(java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.ast.WithNode$ParmValuePair.getStatement()</name>
                <outbound type="class" confirmed="yes">org.mvel.ExecutableStatement</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.ast.WithNode$ParmValuePair.statement</outbound>
                <inbound type="feature" confirmed="yes">org.mvel.ast.WithNode.getReducedValueAccelerated(java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.ast.WithNode$ParmValuePair.setExpression</name>
                <outbound type="class" confirmed="no">java.io.Serializable</outbound>
                <inbound type="feature" confirmed="yes">org.mvel.ast.WithNode$ParmValuePair.WithNode$ParmValuePair(java.lang.String, org.mvel.ExecutableStatement)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.ast.WithNode$ParmValuePair.getSetExpression()</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.ast.WithNode$ParmValuePair.setSetExpression(java.io.Serializable)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.ast.WithNode$ParmValuePair.setSetExpression(java.io.Serializable)</name>
                <outbound type="class" confirmed="no">java.io.Serializable</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.ast.WithNode$ParmValuePair.setExpression</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.ast.WithNode$ParmValuePair.setStatement(org.mvel.ExecutableStatement)</name>
                <outbound type="class" confirmed="yes">org.mvel.ExecutableStatement</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.ast.WithNode$ParmValuePair.statement</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.ast.WithNode$ParmValuePair.statement</name>
                <outbound type="class" confirmed="yes">org.mvel.ExecutableStatement</outbound>
                <inbound type="feature" confirmed="yes">org.mvel.ast.WithNode$ParmValuePair.WithNode$ParmValuePair(java.lang.String, org.mvel.ExecutableStatement)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.ast.WithNode$ParmValuePair.getStatement()</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.ast.WithNode$ParmValuePair.setStatement(org.mvel.ExecutableStatement)</inbound>
            </feature>
        </class>
    </package>
    <package confirmed="yes">
        <name>org.mvel.ast.cache</name>
        <class confirmed="yes">
            <name>org.mvel.ast.cache.CachedListAccessor</name>
            <outbound type="class" confirmed="no">java.lang.Object</outbound>
            <outbound type="class" confirmed="yes">org.mvel.Accessor</outbound>
            <feature confirmed="yes">
                <name>org.mvel.ast.cache.CachedListAccessor.CachedListAccessor(java.lang.Object[])</name>
                <outbound type="class" confirmed="no">java.lang.Object</outbound>
                <outbound type="feature" confirmed="no">java.lang.Object.Object()</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.ast.cache.CachedListAccessor.cached</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.ast.cache.CachedListAccessor.CachedListAccessor(java.util.List)</name>
                <outbound type="class" confirmed="no">java.lang.Object</outbound>
                <outbound type="feature" confirmed="no">java.lang.Object.Object()</outbound>
                <outbound type="class" confirmed="no">java.util.List</outbound>
                <outbound type="feature" confirmed="no">java.util.List.get(int)</outbound>
                <outbound type="feature" confirmed="no">java.util.List.size()</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.ast.cache.CachedListAccessor.cached</outbound>
                <inbound type="feature" confirmed="yes">org.mvel.ast.InlineCollectionNode.getReducedValueAccelerated(java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.ast.cache.CachedListAccessor.cached</name>
                <outbound type="class" confirmed="no">java.lang.Object</outbound>
                <inbound type="feature" confirmed="yes">org.mvel.ast.cache.CachedListAccessor.CachedListAccessor(java.lang.Object[])</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.ast.cache.CachedListAccessor.CachedListAccessor(java.util.List)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.ast.cache.CachedListAccessor.getValue(java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.ast.cache.CachedListAccessor.getValue(java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory)</name>
                <outbound type="class" confirmed="no">java.lang.Object</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.ast.cache.CachedListAccessor.cached</outbound>
                <outbound type="class" confirmed="yes">org.mvel.integration.VariableResolverFactory</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.util.FastList.FastList(java.lang.Object[])</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.ast.cache.CachedListAccessor.setValue(java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory, java.lang.Object)</name>
                <outbound type="class" confirmed="no">java.lang.Object</outbound>
                <outbound type="class" confirmed="yes">org.mvel.integration.VariableResolverFactory</outbound>
            </feature>
        </class>
    </package>
    <package confirmed="yes">
        <name>org.mvel.conversion</name>
        <class confirmed="yes">
            <name>org.mvel.conversion.ArrayCH</name>
            <outbound type="class" confirmed="no">java.lang.Object</outbound>
            <outbound type="class" confirmed="yes">org.mvel.ConversionHandler</outbound>
            <feature confirmed="yes">
                <name>org.mvel.conversion.ArrayCH.ArrayCH()</name>
                <outbound type="feature" confirmed="no">java.lang.Object.Object()</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.conversion.ArrayCH.CNV</name>
                <outbound type="class" confirmed="no">java.util.Map</outbound>
                <inbound type="feature" confirmed="yes">org.mvel.conversion.ArrayCH.canConvertFrom(java.lang.Class)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.conversion.ArrayCH.convertFrom(java.lang.Object)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.conversion.ArrayCH.static {}</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.conversion.ArrayCH.canConvertFrom(java.lang.Class)</name>
                <outbound type="class" confirmed="no">java.lang.Class</outbound>
                <outbound type="class" confirmed="no">java.lang.Object</outbound>
                <outbound type="class" confirmed="no">java.util.Map</outbound>
                <outbound type="feature" confirmed="no">java.util.Map.containsKey(java.lang.Object)</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.conversion.ArrayCH.CNV</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.conversion.ArrayCH.convertFrom(java.lang.Object)</name>
                <outbound type="class" confirmed="no">java.lang.Class</outbound>
                <outbound type="feature" confirmed="no">java.lang.Class.forName(java.lang.String)</outbound>
                <outbound type="feature" confirmed="no">java.lang.Class.getName()</outbound>
                <outbound type="class" confirmed="no">java.lang.ClassNotFoundException</outbound>
                <outbound type="feature" confirmed="no">java.lang.NoClassDefFoundError.NoClassDefFoundError(java.lang.String)</outbound>
                <outbound type="class" confirmed="no">java.lang.Object</outbound>
                <outbound type="feature" confirmed="no">java.lang.Object.getClass()</outbound>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="class" confirmed="no">java.lang.StringBuffer</outbound>
                <outbound type="feature" confirmed="no">java.lang.StringBuffer.StringBuffer(java.lang.String)</outbound>
                <outbound type="feature" confirmed="no">java.lang.StringBuffer.append(java.lang.String)</outbound>
                <outbound type="feature" confirmed="no">java.lang.StringBuffer.toString()</outbound>
                <outbound type="feature" confirmed="no">java.lang.Throwable.getMessage()</outbound>
                <outbound type="class" confirmed="no">java.util.Map</outbound>
                <outbound type="feature" confirmed="no">java.util.Map.containsKey(java.lang.Object)</outbound>
                <outbound type="feature" confirmed="no">java.util.Map.get(java.lang.Object)</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.ConversionException.ConversionException(java.lang.String)</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.conversion.ArrayCH.CNV</outbound>
                <outbound type="class" confirmed="yes">org.mvel.conversion.Converter</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.conversion.Converter.convert(java.lang.Object)</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.conversion.ArrayCH.static {}</name>
                <outbound type="class" confirmed="no">java.lang.Class</outbound>
                <outbound type="feature" confirmed="no">java.lang.Class.forName(java.lang.String)</outbound>
                <outbound type="class" confirmed="no">java.lang.ClassNotFoundException</outbound>
                <outbound type="feature" confirmed="no">java.lang.NoClassDefFoundError.NoClassDefFoundError(java.lang.String)</outbound>
                <outbound type="class" confirmed="no">java.lang.Object</outbound>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="feature" confirmed="no">java.lang.Throwable.getMessage()</outbound>
                <outbound type="feature" confirmed="no">java.util.HashMap.HashMap()</outbound>
                <outbound type="class" confirmed="no">java.util.Map</outbound>
                <outbound type="feature" confirmed="no">java.util.Map.put(java.lang.Object, java.lang.Object)</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.conversion.ArrayCH$1.ArrayCH$1()</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.conversion.ArrayCH$2.ArrayCH$2()</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.conversion.ArrayCH$3.ArrayCH$3()</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.conversion.ArrayCH.CNV</outbound>
            </feature>
        </class>
        <class confirmed="yes">
            <name>org.mvel.conversion.ArrayCH$1</name>
            <outbound type="class" confirmed="no">java.lang.Object</outbound>
            <outbound type="class" confirmed="yes">org.mvel.conversion.Converter</outbound>
            <feature confirmed="yes">
                <name>org.mvel.conversion.ArrayCH$1.ArrayCH$1()</name>
                <outbound type="feature" confirmed="no">java.lang.Object.Object()</outbound>
                <inbound type="feature" confirmed="yes">org.mvel.conversion.ArrayCH.static {}</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.conversion.ArrayCH$1.convert(java.lang.Object)</name>
                <outbound type="class" confirmed="no">java.lang.Object</outbound>
                <outbound type="class" confirmed="no">java.lang.Object[]</outbound>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="feature" confirmed="no">java.lang.String.valueOf(java.lang.Object)</outbound>
            </feature>
        </class>
        <class confirmed="yes">
            <name>org.mvel.conversion.ArrayCH$2</name>
            <outbound type="class" confirmed="no">java.lang.Object</outbound>
            <outbound type="class" confirmed="yes">org.mvel.conversion.Converter</outbound>
            <feature confirmed="yes">
                <name>org.mvel.conversion.ArrayCH$2.ArrayCH$2()</name>
                <outbound type="feature" confirmed="no">java.lang.Object.Object()</outbound>
                <inbound type="feature" confirmed="yes">org.mvel.conversion.ArrayCH.static {}</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.conversion.ArrayCH$2.convert(java.lang.Object)</name>
                <outbound type="class" confirmed="no">java.lang.Integer</outbound>
                <outbound type="feature" confirmed="no">java.lang.Integer.Integer(int)</outbound>
                <outbound type="feature" confirmed="no">java.lang.Integer.parseInt(java.lang.String)</outbound>
                <outbound type="class" confirmed="no">java.lang.Object</outbound>
                <outbound type="class" confirmed="no">java.lang.Object[]</outbound>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="feature" confirmed="no">java.lang.String.valueOf(java.lang.Object)</outbound>
            </feature>
        </class>
        <class confirmed="yes">
            <name>org.mvel.conversion.ArrayCH$3</name>
            <outbound type="class" confirmed="no">java.lang.Object</outbound>
            <outbound type="class" confirmed="yes">org.mvel.conversion.Converter</outbound>
            <feature confirmed="yes">
                <name>org.mvel.conversion.ArrayCH$3.ArrayCH$3()</name>
                <outbound type="feature" confirmed="no">java.lang.Object.Object()</outbound>
                <inbound type="feature" confirmed="yes">org.mvel.conversion.ArrayCH.static {}</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.conversion.ArrayCH$3.convert(java.lang.Object)</name>
                <outbound type="feature" confirmed="no">java.lang.Integer.parseInt(java.lang.String)</outbound>
                <outbound type="class" confirmed="no">java.lang.Object</outbound>
                <outbound type="class" confirmed="no">java.lang.Object[]</outbound>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="feature" confirmed="no">java.lang.String.valueOf(java.lang.Object)</outbound>
            </feature>
        </class>
        <class confirmed="yes">
            <name>org.mvel.conversion.BigDecimalCH</name>
            <outbound type="class" confirmed="no">java.lang.Object</outbound>
            <outbound type="class" confirmed="yes">org.mvel.ConversionHandler</outbound>
            <feature confirmed="yes">
                <name>org.mvel.conversion.BigDecimalCH.BigDecimalCH()</name>
                <outbound type="feature" confirmed="no">java.lang.Object.Object()</outbound>
                <inbound type="feature" confirmed="yes">org.mvel.DataConversion.static {}</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.conversion.BigDecimalCH.CNV</name>
                <outbound type="class" confirmed="no">java.util.Map</outbound>
                <inbound type="feature" confirmed="yes">org.mvel.conversion.BigDecimalCH.canConvertFrom(java.lang.Class)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.conversion.BigDecimalCH.convertFrom(java.lang.Object)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.conversion.BigDecimalCH.static {}</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.conversion.BigDecimalCH.canConvertFrom(java.lang.Class)</name>
                <outbound type="class" confirmed="no">java.lang.Class</outbound>
                <outbound type="class" confirmed="no">java.lang.Object</outbound>
                <outbound type="class" confirmed="no">java.util.Map</outbound>
                <outbound type="feature" confirmed="no">java.util.Map.containsKey(java.lang.Object)</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.conversion.BigDecimalCH.CNV</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.conversion.BigDecimalCH.convertFrom(java.lang.Object)</name>
                <outbound type="class" confirmed="no">java.lang.Class</outbound>
                <outbound type="feature" confirmed="no">java.lang.Class.forName(java.lang.String)</outbound>
                <outbound type="feature" confirmed="no">java.lang.Class.getName()</outbound>
                <outbound type="class" confirmed="no">java.lang.ClassNotFoundException</outbound>
                <outbound type="feature" confirmed="no">java.lang.NoClassDefFoundError.NoClassDefFoundError(java.lang.String)</outbound>
                <outbound type="class" confirmed="no">java.lang.Object</outbound>
                <outbound type="feature" confirmed="no">java.lang.Object.getClass()</outbound>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="class" confirmed="no">java.lang.StringBuffer</outbound>
                <outbound type="feature" confirmed="no">java.lang.StringBuffer.StringBuffer(java.lang.String)</outbound>
                <outbound type="feature" confirmed="no">java.lang.StringBuffer.append(java.lang.String)</outbound>
                <outbound type="feature" confirmed="no">java.lang.StringBuffer.toString()</outbound>
                <outbound type="feature" confirmed="no">java.lang.Throwable.getMessage()</outbound>
                <outbound type="class" confirmed="no">java.util.Map</outbound>
                <outbound type="feature" confirmed="no">java.util.Map.containsKey(java.lang.Object)</outbound>
                <outbound type="feature" confirmed="no">java.util.Map.get(java.lang.Object)</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.ConversionException.ConversionException(java.lang.String)</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.conversion.BigDecimalCH.CNV</outbound>
                <outbound type="class" confirmed="yes">org.mvel.conversion.Converter</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.conversion.Converter.convert(java.lang.Object)</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.conversion.BigDecimalCH.static {}</name>
                <outbound type="class" confirmed="no">java.lang.Class</outbound>
                <outbound type="feature" confirmed="no">java.lang.Class.forName(java.lang.String)</outbound>
                <outbound type="class" confirmed="no">java.lang.ClassNotFoundException</outbound>
                <outbound type="feature" confirmed="no">java.lang.NoClassDefFoundError.NoClassDefFoundError(java.lang.String)</outbound>
                <outbound type="class" confirmed="no">java.lang.Object</outbound>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="feature" confirmed="no">java.lang.Throwable.getMessage()</outbound>
                <outbound type="feature" confirmed="no">java.util.HashMap.HashMap()</outbound>
                <outbound type="class" confirmed="no">java.util.Map</outbound>
                <outbound type="feature" confirmed="no">java.util.Map.put(java.lang.Object, java.lang.Object)</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.conversion.BigDecimalCH$1.BigDecimalCH$1()</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.conversion.BigDecimalCH$10.BigDecimalCH$10()</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.conversion.BigDecimalCH$11.BigDecimalCH$11()</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.conversion.BigDecimalCH$2.BigDecimalCH$2()</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.conversion.BigDecimalCH$3.BigDecimalCH$3()</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.conversion.BigDecimalCH$4.BigDecimalCH$4()</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.conversion.BigDecimalCH$5.BigDecimalCH$5()</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.conversion.BigDecimalCH$6.BigDecimalCH$6()</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.conversion.BigDecimalCH$7.BigDecimalCH$7()</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.conversion.BigDecimalCH$8.BigDecimalCH$8()</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.conversion.BigDecimalCH$9.BigDecimalCH$9()</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.conversion.BigDecimalCH.CNV</outbound>
            </feature>
        </class>
        <class confirmed="yes">
            <name>org.mvel.conversion.BigDecimalCH$1</name>
            <outbound type="class" confirmed="no">java.lang.Object</outbound>
            <outbound type="class" confirmed="yes">org.mvel.conversion.Converter</outbound>
            <feature confirmed="yes">
                <name>org.mvel.conversion.BigDecimalCH$1.BigDecimalCH$1()</name>
                <outbound type="feature" confirmed="no">java.lang.Object.Object()</outbound>
                <inbound type="feature" confirmed="yes">org.mvel.conversion.BigDecimalCH.static {}</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.conversion.BigDecimalCH$1.convert(java.lang.Object)</name>
                <outbound type="class" confirmed="no">java.lang.Object</outbound>
                <outbound type="class" confirmed="no">java.math.BigDecimal</outbound>
            </feature>
        </class>
        <class confirmed="yes">
            <name>org.mvel.conversion.BigDecimalCH$10</name>
            <outbound type="class" confirmed="no">java.lang.Object</outbound>
            <outbound type="class" confirmed="yes">org.mvel.conversion.Converter</outbound>
            <feature confirmed="yes">
                <name>org.mvel.conversion.BigDecimalCH$10.BigDecimalCH$10()</name>
                <outbound type="feature" confirmed="no">java.lang.Object.Object()</outbound>
                <inbound type="feature" confirmed="yes">org.mvel.conversion.BigDecimalCH.static {}</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.conversion.BigDecimalCH$10.convert(java.lang.Object)</name>
                <outbound type="class" confirmed="no">java.lang.Object</outbound>
                <outbound type="class" confirmed="no">java.math.BigDecimal</outbound>
            </feature>
        </class>
        <class confirmed="yes">
            <name>org.mvel.conversion.BigDecimalCH$11</name>
            <outbound type="class" confirmed="no">java.lang.Object</outbound>
            <outbound type="class" confirmed="yes">org.mvel.conversion.Converter</outbound>
            <feature confirmed="yes">
                <name>org.mvel.conversion.BigDecimalCH$11.BigDecimalCH$11()</name>
                <outbound type="feature" confirmed="no">java.lang.Object.Object()</outbound>
                <inbound type="feature" confirmed="yes">org.mvel.conversion.BigDecimalCH.static {}</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.conversion.BigDecimalCH$11.convert(java.lang.Object)</name>
                <outbound type="class" confirmed="no">java.lang.Object</outbound>
                <outbound type="class" confirmed="no">java.math.BigDecimal</outbound>
            </feature>
        </class>
        <class confirmed="yes">
            <name>org.mvel.conversion.BigDecimalCH$2</name>
            <outbound type="class" confirmed="no">java.lang.Object</outbound>
            <outbound type="class" confirmed="yes">org.mvel.conversion.Converter</outbound>
            <feature confirmed="yes">
                <name>org.mvel.conversion.BigDecimalCH$2.BigDecimalCH$2()</name>
                <outbound type="feature" confirmed="no">java.lang.Object.Object()</outbound>
                <inbound type="feature" confirmed="yes">org.mvel.conversion.BigDecimalCH.static {}</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.conversion.BigDecimalCH$2.convert(java.lang.Object)</name>
                <outbound type="class" confirmed="no">java.lang.Object</outbound>
                <outbound type="class" confirmed="no">java.math.BigDecimal</outbound>
            </feature>
        </class>
        <class confirmed="yes">
            <name>org.mvel.conversion.BigDecimalCH$3</name>
            <outbound type="class" confirmed="no">java.lang.Object</outbound>
            <outbound type="class" confirmed="yes">org.mvel.conversion.Converter</outbound>
            <feature confirmed="yes">
                <name>org.mvel.conversion.BigDecimalCH$3.BigDecimalCH$3()</name>
                <outbound type="feature" confirmed="no">java.lang.Object.Object()</outbound>
                <inbound type="feature" confirmed="yes">org.mvel.conversion.BigDecimalCH.static {}</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.conversion.BigDecimalCH$3.convert(java.lang.Object)</name>
                <outbound type="class" confirmed="no">java.lang.Object</outbound>
                <outbound type="class" confirmed="no">java.math.BigDecimal</outbound>
            </feature>
        </class>
        <class confirmed="yes">
            <name>org.mvel.conversion.BigDecimalCH$4</name>
            <outbound type="class" confirmed="no">java.lang.Object</outbound>
            <outbound type="class" confirmed="yes">org.mvel.conversion.Converter</outbound>
            <feature confirmed="yes">
                <name>org.mvel.conversion.BigDecimalCH$4.BigDecimalCH$4()</name>
                <outbound type="feature" confirmed="no">java.lang.Object.Object()</outbound>
                <inbound type="feature" confirmed="yes">org.mvel.conversion.BigDecimalCH.static {}</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.conversion.BigDecimalCH$4.convert(java.lang.Object)</name>
                <outbound type="class" confirmed="no">java.lang.Object</outbound>
                <outbound type="class" confirmed="no">java.math.BigDecimal</outbound>
            </feature>
        </class>
        <class confirmed="yes">
            <name>org.mvel.conversion.BigDecimalCH$5</name>
            <outbound type="class" confirmed="no">java.lang.Object</outbound>
            <outbound type="class" confirmed="yes">org.mvel.conversion.Converter</outbound>
            <feature confirmed="yes">
                <name>org.mvel.conversion.BigDecimalCH$5.BigDecimalCH$5()</name>
                <outbound type="feature" confirmed="no">java.lang.Object.Object()</outbound>
                <inbound type="feature" confirmed="yes">org.mvel.conversion.BigDecimalCH.static {}</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.conversion.BigDecimalCH$5.convert(java.lang.Object)</name>
                <outbound type="class" confirmed="no">java.lang.Object</outbound>
                <outbound type="class" confirmed="no">java.math.BigDecimal</outbound>
            </feature>
        </class>
        <class confirmed="yes">
            <name>org.mvel.conversion.BigDecimalCH$6</name>
            <outbound type="class" confirmed="no">java.lang.Object</outbound>
            <outbound type="class" confirmed="yes">org.mvel.conversion.Converter</outbound>
            <feature confirmed="yes">
                <name>org.mvel.conversion.BigDecimalCH$6.BigDecimalCH$6()</name>
                <outbound type="feature" confirmed="no">java.lang.Object.Object()</outbound>
                <inbound type="feature" confirmed="yes">org.mvel.conversion.BigDecimalCH.static {}</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.conversion.BigDecimalCH$6.convert(java.lang.Object)</name>
                <outbound type="class" confirmed="no">java.lang.Object</outbound>
                <outbound type="class" confirmed="no">java.math.BigDecimal</outbound>
            </feature>
        </class>
        <class confirmed="yes">
            <name>org.mvel.conversion.BigDecimalCH$7</name>
            <outbound type="class" confirmed="no">java.lang.Object</outbound>
            <outbound type="class" confirmed="yes">org.mvel.conversion.Converter</outbound>
            <feature confirmed="yes">
                <name>org.mvel.conversion.BigDecimalCH$7.BigDecimalCH$7()</name>
                <outbound type="feature" confirmed="no">java.lang.Object.Object()</outbound>
                <inbound type="feature" confirmed="yes">org.mvel.conversion.BigDecimalCH.static {}</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.conversion.BigDecimalCH$7.convert(java.lang.Object)</name>
                <outbound type="class" confirmed="no">java.lang.Object</outbound>
                <outbound type="class" confirmed="no">java.math.BigDecimal</outbound>
            </feature>
        </class>
        <class confirmed="yes">
            <name>org.mvel.conversion.BigDecimalCH$8</name>
            <outbound type="class" confirmed="no">java.lang.Object</outbound>
            <outbound type="class" confirmed="yes">org.mvel.conversion.Converter</outbound>
            <feature confirmed="yes">
                <name>org.mvel.conversion.BigDecimalCH$8.BigDecimalCH$8()</name>
                <outbound type="feature" confirmed="no">java.lang.Object.Object()</outbound>
                <inbound type="feature" confirmed="yes">org.mvel.conversion.BigDecimalCH.static {}</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.conversion.BigDecimalCH$8.convert(java.lang.Object)</name>
                <outbound type="class" confirmed="no">java.lang.Object</outbound>
                <outbound type="class" confirmed="no">java.math.BigDecimal</outbound>
            </feature>
        </class>
        <class confirmed="yes">
            <name>org.mvel.conversion.BigDecimalCH$9</name>
            <outbound type="class" confirmed="no">java.lang.Object</outbound>
            <outbound type="class" confirmed="yes">org.mvel.conversion.Converter</outbound>
            <feature confirmed="yes">
                <name>org.mvel.conversion.BigDecimalCH$9.BigDecimalCH$9()</name>
                <outbound type="feature" confirmed="no">java.lang.Object.Object()</outbound>
                <inbound type="feature" confirmed="yes">org.mvel.conversion.BigDecimalCH.static {}</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.conversion.BigDecimalCH$9.convert(java.lang.Object)</name>
                <outbound type="class" confirmed="no">java.lang.Object</outbound>
                <outbound type="class" confirmed="no">java.math.BigDecimal</outbound>
            </feature>
        </class>
        <class confirmed="yes">
            <name>org.mvel.conversion.BigIntegerCH</name>
            <outbound type="class" confirmed="no">java.lang.Object</outbound>
            <outbound type="class" confirmed="yes">org.mvel.ConversionHandler</outbound>
            <feature confirmed="yes">
                <name>org.mvel.conversion.BigIntegerCH.BigIntegerCH()</name>
                <outbound type="feature" confirmed="no">java.lang.Object.Object()</outbound>
                <inbound type="feature" confirmed="yes">org.mvel.DataConversion.static {}</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.conversion.BigIntegerCH.CNV</name>
                <outbound type="class" confirmed="no">java.util.Map</outbound>
                <inbound type="feature" confirmed="yes">org.mvel.conversion.BigIntegerCH.canConvertFrom(java.lang.Class)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.conversion.BigIntegerCH.convertFrom(java.lang.Object)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.conversion.BigIntegerCH.static {}</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.conversion.BigIntegerCH.canConvertFrom(java.lang.Class)</name>
                <outbound type="class" confirmed="no">java.lang.Class</outbound>
                <outbound type="class" confirmed="no">java.lang.Object</outbound>
                <outbound type="class" confirmed="no">java.util.Map</outbound>
                <outbound type="feature" confirmed="no">java.util.Map.containsKey(java.lang.Object)</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.conversion.BigIntegerCH.CNV</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.conversion.BigIntegerCH.convertFrom(java.lang.Object)</name>
                <outbound type="class" confirmed="no">java.lang.Class</outbound>
                <outbound type="feature" confirmed="no">java.lang.Class.forName(java.lang.String)</outbound>
                <outbound type="feature" confirmed="no">java.lang.Class.getName()</outbound>
                <outbound type="class" confirmed="no">java.lang.ClassNotFoundException</outbound>
                <outbound type="feature" confirmed="no">java.lang.NoClassDefFoundError.NoClassDefFoundError(java.lang.String)</outbound>
                <outbound type="class" confirmed="no">java.lang.Object</outbound>
                <outbound type="feature" confirmed="no">java.lang.Object.getClass()</outbound>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="class" confirmed="no">java.lang.StringBuffer</outbound>
                <outbound type="feature" confirmed="no">java.lang.StringBuffer.StringBuffer(java.lang.String)</outbound>
                <outbound type="feature" confirmed="no">java.lang.StringBuffer.append(java.lang.String)</outbound>
                <outbound type="feature" confirmed="no">java.lang.StringBuffer.toString()</outbound>
                <outbound type="feature" confirmed="no">java.lang.Throwable.getMessage()</outbound>
                <outbound type="class" confirmed="no">java.util.Map</outbound>
                <outbound type="feature" confirmed="no">java.util.Map.containsKey(java.lang.Object)</outbound>
                <outbound type="feature" confirmed="no">java.util.Map.get(java.lang.Object)</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.ConversionException.ConversionException(java.lang.String)</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.conversion.BigIntegerCH.CNV</outbound>
                <outbound type="class" confirmed="yes">org.mvel.conversion.Converter</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.conversion.Converter.convert(java.lang.Object)</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.conversion.BigIntegerCH.static {}</name>
                <outbound type="class" confirmed="no">java.lang.Class</outbound>
                <outbound type="feature" confirmed="no">java.lang.Class.forName(java.lang.String)</outbound>
                <outbound type="class" confirmed="no">java.lang.ClassNotFoundException</outbound>
                <outbound type="feature" confirmed="no">java.lang.NoClassDefFoundError.NoClassDefFoundError(java.lang.String)</outbound>
                <outbound type="class" confirmed="no">java.lang.Object</outbound>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="feature" confirmed="no">java.lang.Throwable.getMessage()</outbound>
                <outbound type="feature" confirmed="no">java.util.HashMap.HashMap()</outbound>
                <outbound type="class" confirmed="no">java.util.Map</outbound>
                <outbound type="feature" confirmed="no">java.util.Map.put(java.lang.Object, java.lang.Object)</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.conversion.BigIntegerCH$1.BigIntegerCH$1()</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.conversion.BigIntegerCH$2.BigIntegerCH$2()</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.conversion.BigIntegerCH$3.BigIntegerCH$3()</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.conversion.BigIntegerCH$4.BigIntegerCH$4()</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.conversion.BigIntegerCH$5.BigIntegerCH$5()</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.conversion.BigIntegerCH$6.BigIntegerCH$6()</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.conversion.BigIntegerCH$7.BigIntegerCH$7()</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.conversion.BigIntegerCH$8.BigIntegerCH$8()</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.conversion.BigIntegerCH$9.BigIntegerCH$9()</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.conversion.BigIntegerCH.CNV</outbound>
            </feature>
        </class>
        <class confirmed="yes">
            <name>org.mvel.conversion.BigIntegerCH$1</name>
            <outbound type="class" confirmed="no">java.lang.Object</outbound>
            <outbound type="class" confirmed="yes">org.mvel.conversion.Converter</outbound>
            <feature confirmed="yes">
                <name>org.mvel.conversion.BigIntegerCH$1.BigIntegerCH$1()</name>
                <outbound type="feature" confirmed="no">java.lang.Object.Object()</outbound>
                <inbound type="feature" confirmed="yes">org.mvel.conversion.BigIntegerCH.static {}</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.conversion.BigIntegerCH$1.convert(java.lang.Object)</name>
                <outbound type="class" confirmed="no">java.lang.Object</outbound>
                <outbound type="class" confirmed="no">java.math.BigInteger</outbound>
            </feature>
        </class>
        <class confirmed="yes">
            <name>org.mvel.conversion.BigIntegerCH$2</name>
            <outbound type="class" confirmed="no">java.lang.Object</outbound>
            <outbound type="class" confirmed="yes">org.mvel.conversion.Converter</outbound>
            <feature confirmed="yes">
                <name>org.mvel.conversion.BigIntegerCH$2.BigIntegerCH$2()</name>
                <outbound type="feature" confirmed="no">java.lang.Object.Object()</outbound>
                <inbound type="feature" confirmed="yes">org.mvel.conversion.BigIntegerCH.static {}</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.conversion.BigIntegerCH$2.convert(java.lang.Object)</name>
                <outbound type="class" confirmed="no">java.lang.Object</outbound>
                <outbound type="class" confirmed="no">java.math.BigInteger</outbound>
            </feature>
        </class>
        <class confirmed="yes">
            <name>org.mvel.conversion.BigIntegerCH$3</name>
            <outbound type="class" confirmed="no">java.lang.Object</outbound>
            <outbound type="class" confirmed="yes">org.mvel.conversion.Converter</outbound>
            <feature confirmed="yes">
                <name>org.mvel.conversion.BigIntegerCH$3.BigIntegerCH$3()</name>
                <outbound type="feature" confirmed="no">java.lang.Object.Object()</outbound>
                <inbound type="feature" confirmed="yes">org.mvel.conversion.BigIntegerCH.static {}</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.conversion.BigIntegerCH$3.convert(java.lang.Object)</name>
                <outbound type="class" confirmed="no">java.lang.Object</outbound>
                <outbound type="class" confirmed="no">java.math.BigInteger</outbound>
            </feature>
        </class>
        <class confirmed="yes">
            <name>org.mvel.conversion.BigIntegerCH$4</name>
            <outbound type="class" confirmed="no">java.lang.Object</outbound>
            <outbound type="class" confirmed="yes">org.mvel.conversion.Converter</outbound>
            <feature confirmed="yes">
                <name>org.mvel.conversion.BigIntegerCH$4.BigIntegerCH$4()</name>
                <outbound type="feature" confirmed="no">java.lang.Object.Object()</outbound>
                <inbound type="feature" confirmed="yes">org.mvel.conversion.BigIntegerCH.static {}</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.conversion.BigIntegerCH$4.convert(java.lang.Object)</name>
                <outbound type="class" confirmed="no">java.lang.Object</outbound>
                <outbound type="class" confirmed="no">java.math.BigInteger</outbound>
            </feature>
        </class>
        <class confirmed="yes">
            <name>org.mvel.conversion.BigIntegerCH$5</name>
            <outbound type="class" confirmed="no">java.lang.Object</outbound>
            <outbound type="class" confirmed="yes">org.mvel.conversion.Converter</outbound>
            <feature confirmed="yes">
                <name>org.mvel.conversion.BigIntegerCH$5.BigIntegerCH$5()</name>
                <outbound type="feature" confirmed="no">java.lang.Object.Object()</outbound>
                <inbound type="feature" confirmed="yes">org.mvel.conversion.BigIntegerCH.static {}</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.conversion.BigIntegerCH$5.convert(java.lang.Object)</name>
                <outbound type="class" confirmed="no">java.lang.Object</outbound>
                <outbound type="class" confirmed="no">java.math.BigInteger</outbound>
            </feature>
        </class>
        <class confirmed="yes">
            <name>org.mvel.conversion.BigIntegerCH$6</name>
            <outbound type="class" confirmed="no">java.lang.Object</outbound>
            <outbound type="class" confirmed="yes">org.mvel.conversion.Converter</outbound>
            <feature confirmed="yes">
                <name>org.mvel.conversion.BigIntegerCH$6.BigIntegerCH$6()</name>
                <outbound type="feature" confirmed="no">java.lang.Object.Object()</outbound>
                <inbound type="feature" confirmed="yes">org.mvel.conversion.BigIntegerCH.static {}</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.conversion.BigIntegerCH$6.convert(java.lang.Object)</name>
                <outbound type="class" confirmed="no">java.lang.Object</outbound>
                <outbound type="class" confirmed="no">java.math.BigInteger</outbound>
            </feature>
        </class>
        <class confirmed="yes">
            <name>org.mvel.conversion.BigIntegerCH$7</name>
            <outbound type="class" confirmed="no">java.lang.Object</outbound>
            <outbound type="class" confirmed="yes">org.mvel.conversion.Converter</outbound>
            <feature confirmed="yes">
                <name>org.mvel.conversion.BigIntegerCH$7.BigIntegerCH$7()</name>
                <outbound type="feature" confirmed="no">java.lang.Object.Object()</outbound>
                <inbound type="feature" confirmed="yes">org.mvel.conversion.BigIntegerCH.static {}</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.conversion.BigIntegerCH$7.convert(java.lang.Object)</name>
                <outbound type="class" confirmed="no">java.lang.Object</outbound>
                <outbound type="class" confirmed="no">java.math.BigInteger</outbound>
            </feature>
        </class>
        <class confirmed="yes">
            <name>org.mvel.conversion.BigIntegerCH$8</name>
            <outbound type="class" confirmed="no">java.lang.Object</outbound>
            <outbound type="class" confirmed="yes">org.mvel.conversion.Converter</outbound>
            <feature confirmed="yes">
                <name>org.mvel.conversion.BigIntegerCH$8.BigIntegerCH$8()</name>
                <outbound type="feature" confirmed="no">java.lang.Object.Object()</outbound>
                <inbound type="feature" confirmed="yes">org.mvel.conversion.BigIntegerCH.static {}</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.conversion.BigIntegerCH$8.convert(java.lang.Object)</name>
                <outbound type="class" confirmed="no">java.lang.Object</outbound>
                <outbound type="class" confirmed="no">java.math.BigInteger</outbound>
            </feature>
        </class>
        <class confirmed="yes">
            <name>org.mvel.conversion.BigIntegerCH$9</name>
            <outbound type="class" confirmed="no">java.lang.Object</outbound>
            <outbound type="class" confirmed="yes">org.mvel.conversion.Converter</outbound>
            <feature confirmed="yes">
                <name>org.mvel.conversion.BigIntegerCH$9.BigIntegerCH$9()</name>
                <outbound type="feature" confirmed="no">java.lang.Object.Object()</outbound>
                <inbound type="feature" confirmed="yes">org.mvel.conversion.BigIntegerCH.static {}</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.conversion.BigIntegerCH$9.convert(java.lang.Object)</name>
                <outbound type="class" confirmed="no">java.lang.Object</outbound>
                <outbound type="class" confirmed="no">java.math.BigInteger</outbound>
            </feature>
        </class>
        <class confirmed="yes">
            <name>org.mvel.conversion.BooleanCH</name>
            <outbound type="class" confirmed="no">java.lang.Object</outbound>
            <outbound type="class" confirmed="yes">org.mvel.ConversionHandler</outbound>
            <feature confirmed="yes">
                <name>org.mvel.conversion.BooleanCH.BooleanCH()</name>
                <outbound type="feature" confirmed="no">java.lang.Object.Object()</outbound>
                <inbound type="feature" confirmed="yes">org.mvel.DataConversion.static {}</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.conversion.BooleanCH.CNV</name>
                <outbound type="class" confirmed="no">java.util.Map</outbound>
                <inbound type="feature" confirmed="yes">org.mvel.conversion.BooleanCH.access$0()</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.conversion.BooleanCH.canConvertFrom(java.lang.Class)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.conversion.BooleanCH.convertFrom(java.lang.Object)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.conversion.BooleanCH.static {}</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.conversion.BooleanCH.access$0()</name>
                <outbound type="class" confirmed="no">java.util.Map</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.conversion.BooleanCH.CNV</outbound>
                <inbound type="feature" confirmed="yes">org.mvel.conversion.BooleanCH$2.convert(java.lang.Object)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.conversion.BooleanCH.canConvertFrom(java.lang.Class)</name>
                <outbound type="class" confirmed="no">java.lang.Class</outbound>
                <outbound type="class" confirmed="no">java.lang.Object</outbound>
                <outbound type="class" confirmed="no">java.util.Map</outbound>
                <outbound type="feature" confirmed="no">java.util.Map.containsKey(java.lang.Object)</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.conversion.BooleanCH.CNV</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.conversion.BooleanCH.convertFrom(java.lang.Object)</name>
                <outbound type="class" confirmed="no">java.lang.Class</outbound>
                <outbound type="feature" confirmed="no">java.lang.Class.forName(java.lang.String)</outbound>
                <outbound type="feature" confirmed="no">java.lang.Class.getName()</outbound>
                <outbound type="class" confirmed="no">java.lang.ClassNotFoundException</outbound>
                <outbound type="feature" confirmed="no">java.lang.NoClassDefFoundError.NoClassDefFoundError(java.lang.String)</outbound>
                <outbound type="class" confirmed="no">java.lang.Object</outbound>
                <outbound type="feature" confirmed="no">java.lang.Object.getClass()</outbound>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="class" confirmed="no">java.lang.StringBuffer</outbound>
                <outbound type="feature" confirmed="no">java.lang.StringBuffer.StringBuffer(java.lang.String)</outbound>
                <outbound type="feature" confirmed="no">java.lang.StringBuffer.append(java.lang.String)</outbound>
                <outbound type="feature" confirmed="no">java.lang.StringBuffer.toString()</outbound>
                <outbound type="feature" confirmed="no">java.lang.Throwable.getMessage()</outbound>
                <outbound type="class" confirmed="no">java.util.Map</outbound>
                <outbound type="feature" confirmed="no">java.util.Map.containsKey(java.lang.Object)</outbound>
                <outbound type="feature" confirmed="no">java.util.Map.get(java.lang.Object)</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.ConversionException.ConversionException(java.lang.String)</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.conversion.BooleanCH.CNV</outbound>
                <outbound type="class" confirmed="yes">org.mvel.conversion.Converter</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.conversion.Converter.convert(java.lang.Object)</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.conversion.BooleanCH.static {}</name>
                <outbound type="feature" confirmed="no">java.lang.Boolean.TYPE</outbound>
                <outbound type="class" confirmed="no">java.lang.Class</outbound>
                <outbound type="feature" confirmed="no">java.lang.Class.forName(java.lang.String)</outbound>
                <outbound type="class" confirmed="no">java.lang.ClassNotFoundException</outbound>
                <outbound type="feature" confirmed="no">java.lang.NoClassDefFoundError.NoClassDefFoundError(java.lang.String)</outbound>
                <outbound type="class" confirmed="no">java.lang.Object</outbound>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="feature" confirmed="no">java.lang.Throwable.getMessage()</outbound>
                <outbound type="feature" confirmed="no">java.util.HashMap.HashMap()</outbound>
                <outbound type="class" confirmed="no">java.util.Map</outbound>
                <outbound type="feature" confirmed="no">java.util.Map.put(java.lang.Object, java.lang.Object)</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.conversion.BooleanCH$1.BooleanCH$1()</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.conversion.BooleanCH$10.BooleanCH$10()</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.conversion.BooleanCH$2.BooleanCH$2()</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.conversion.BooleanCH$3.BooleanCH$3()</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.conversion.BooleanCH$4.BooleanCH$4()</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.conversion.BooleanCH$5.BooleanCH$5()</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.conversion.BooleanCH$6.BooleanCH$6()</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.conversion.BooleanCH$7.BooleanCH$7()</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.conversion.BooleanCH$8.BooleanCH$8()</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.conversion.BooleanCH$9.BooleanCH$9()</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.conversion.BooleanCH.CNV</outbound>
            </feature>
        </class>
        <class confirmed="yes">
            <name>org.mvel.conversion.BooleanCH$1</name>
            <outbound type="class" confirmed="no">java.lang.Object</outbound>
            <outbound type="class" confirmed="yes">org.mvel.conversion.Converter</outbound>
            <feature confirmed="yes">
                <name>org.mvel.conversion.BooleanCH$1.BooleanCH$1()</name>
                <outbound type="feature" confirmed="no">java.lang.Object.Object()</outbound>
                <inbound type="feature" confirmed="yes">org.mvel.conversion.BooleanCH.static {}</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.conversion.BooleanCH$1.convert(java.lang.Object)</name>
                <outbound type="feature" confirmed="no">java.lang.Boolean.Boolean(boolean)</outbound>
                <outbound type="class" confirmed="no">java.lang.Object</outbound>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="feature" confirmed="no">java.lang.String.equals(java.lang.Object)</outbound>
                <outbound type="feature" confirmed="no">java.lang.String.equalsIgnoreCase(java.lang.String)</outbound>
            </feature>
        </class>
        <class confirmed="yes">
            <name>org.mvel.conversion.BooleanCH$10</name>
            <outbound type="class" confirmed="no">java.lang.Object</outbound>
            <outbound type="class" confirmed="yes">org.mvel.conversion.Converter</outbound>
            <feature confirmed="yes">
                <name>org.mvel.conversion.BooleanCH$10.BooleanCH$10()</name>
                <outbound type="feature" confirmed="no">java.lang.Object.Object()</outbound>
                <inbound type="feature" confirmed="yes">org.mvel.conversion.BooleanCH.static {}</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.conversion.BooleanCH$10.convert(java.lang.Object)</name>
                <outbound type="class" confirmed="no">java.lang.Boolean</outbound>
                <outbound type="class" confirmed="no">java.lang.Object</outbound>
            </feature>
        </class>
        <class confirmed="yes">
            <name>org.mvel.conversion.BooleanCH$2</name>
            <outbound type="class" confirmed="no">java.lang.Object</outbound>
            <outbound type="class" confirmed="yes">org.mvel.conversion.Converter</outbound>
            <feature confirmed="yes">
                <name>org.mvel.conversion.BooleanCH$2.BooleanCH$2()</name>
                <outbound type="feature" confirmed="no">java.lang.Object.Object()</outbound>
                <inbound type="feature" confirmed="yes">org.mvel.conversion.BooleanCH.static {}</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.conversion.BooleanCH$2.convert(java.lang.Object)</name>
                <outbound type="class" confirmed="no">java.lang.Class</outbound>
                <outbound type="feature" confirmed="no">java.lang.Class.forName(java.lang.String)</outbound>
                <outbound type="class" confirmed="no">java.lang.ClassNotFoundException</outbound>
                <outbound type="feature" confirmed="no">java.lang.NoClassDefFoundError.NoClassDefFoundError(java.lang.String)</outbound>
                <outbound type="class" confirmed="no">java.lang.Object</outbound>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="feature" confirmed="no">java.lang.String.valueOf(java.lang.Object)</outbound>
                <outbound type="feature" confirmed="no">java.lang.Throwable.getMessage()</outbound>
                <outbound type="class" confirmed="no">java.util.Map</outbound>
                <outbound type="feature" confirmed="no">java.util.Map.get(java.lang.Object)</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.conversion.BooleanCH.access$0()</outbound>
                <outbound type="class" confirmed="yes">org.mvel.conversion.Converter</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.conversion.Converter.convert(java.lang.Object)</outbound>
            </feature>
        </class>
        <class confirmed="yes">
            <name>org.mvel.conversion.BooleanCH$3</name>
            <outbound type="class" confirmed="no">java.lang.Object</outbound>
            <outbound type="class" confirmed="yes">org.mvel.conversion.Converter</outbound>
            <feature confirmed="yes">
                <name>org.mvel.conversion.BooleanCH$3.BooleanCH$3()</name>
                <outbound type="feature" confirmed="no">java.lang.Object.Object()</outbound>
                <inbound type="feature" confirmed="yes">org.mvel.conversion.BooleanCH.static {}</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.conversion.BooleanCH$3.convert(java.lang.Object)</name>
                <outbound type="class" confirmed="no">java.lang.Object</outbound>
            </feature>
        </class>
        <class confirmed="yes">
            <name>org.mvel.conversion.BooleanCH$4</name>
            <outbound type="class" confirmed="no">java.lang.Object</outbound>
            <outbound type="class" confirmed="yes">org.mvel.conversion.Converter</outbound>
            <feature confirmed="yes">
                <name>org.mvel.conversion.BooleanCH$4.BooleanCH$4()</name>
                <outbound type="feature" confirmed="no">java.lang.Object.Object()</outbound>
                <inbound type="feature" confirmed="yes">org.mvel.conversion.BooleanCH.static {}</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.conversion.BooleanCH$4.convert(java.lang.Object)</name>
                <outbound type="class" confirmed="no">java.lang.Boolean</outbound>
                <outbound type="class" confirmed="no">java.lang.Object</outbound>
            </feature>
        </class>
        <class confirmed="yes">
            <name>org.mvel.conversion.BooleanCH$5</name>
            <outbound type="class" confirmed="no">java.lang.Object</outbound>
            <outbound type="class" confirmed="yes">org.mvel.conversion.Converter</outbound>
            <feature confirmed="yes">
                <name>org.mvel.conversion.BooleanCH$5.BooleanCH$5()</name>
                <outbound type="feature" confirmed="no">java.lang.Object.Object()</outbound>
                <inbound type="feature" confirmed="yes">org.mvel.conversion.BooleanCH.static {}</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.conversion.BooleanCH$5.convert(java.lang.Object)</name>
                <outbound type="class" confirmed="no">java.lang.Boolean</outbound>
                <outbound type="class" confirmed="no">java.lang.Object</outbound>
            </feature>
        </class>
        <class confirmed="yes">
            <name>org.mvel.conversion.BooleanCH$6</name>
            <outbound type="class" confirmed="no">java.lang.Object</outbound>
            <outbound type="class" confirmed="yes">org.mvel.conversion.Converter</outbound>
            <feature confirmed="yes">
                <name>org.mvel.conversion.BooleanCH$6.BooleanCH$6()</name>
                <outbound type="feature" confirmed="no">java.lang.Object.Object()</outbound>
                <inbound type="feature" confirmed="yes">org.mvel.conversion.BooleanCH.static {}</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.conversion.BooleanCH$6.convert(java.lang.Object)</name>
                <outbound type="class" confirmed="no">java.lang.Boolean</outbound>
                <outbound type="class" confirmed="no">java.lang.Object</outbound>
            </feature>
        </class>
        <class confirmed="yes">
            <name>org.mvel.conversion.BooleanCH$7</name>
            <outbound type="class" confirmed="no">java.lang.Object</outbound>
            <outbound type="class" confirmed="yes">org.mvel.conversion.Converter</outbound>
            <feature confirmed="yes">
                <name>org.mvel.conversion.BooleanCH$7.BooleanCH$7()</name>
                <outbound type="feature" confirmed="no">java.lang.Object.Object()</outbound>
                <inbound type="feature" confirmed="yes">org.mvel.conversion.BooleanCH.static {}</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.conversion.BooleanCH$7.convert(java.lang.Object)</name>
                <outbound type="class" confirmed="no">java.lang.Boolean</outbound>
                <outbound type="class" confirmed="no">java.lang.Object</outbound>
            </feature>
        </class>
        <class confirmed="yes">
            <name>org.mvel.conversion.BooleanCH$8</name>
            <outbound type="class" confirmed="no">java.lang.Object</outbound>
            <outbound type="class" confirmed="yes">org.mvel.conversion.Converter</outbound>
            <feature confirmed="yes">
                <name>org.mvel.conversion.BooleanCH$8.BooleanCH$8()</name>
                <outbound type="feature" confirmed="no">java.lang.Object.Object()</outbound>
                <inbound type="feature" confirmed="yes">org.mvel.conversion.BooleanCH.static {}</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.conversion.BooleanCH$8.convert(java.lang.Object)</name>
                <outbound type="class" confirmed="no">java.lang.Boolean</outbound>
                <outbound type="class" confirmed="no">java.lang.Object</outbound>
            </feature>
        </class>
        <class confirmed="yes">
            <name>org.mvel.conversion.BooleanCH$9</name>
            <outbound type="class" confirmed="no">java.lang.Object</outbound>
            <outbound type="class" confirmed="yes">org.mvel.conversion.Converter</outbound>
            <feature confirmed="yes">
                <name>org.mvel.conversion.BooleanCH$9.BooleanCH$9()</name>
                <outbound type="feature" confirmed="no">java.lang.Object.Object()</outbound>
                <inbound type="feature" confirmed="yes">org.mvel.conversion.BooleanCH.static {}</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.conversion.BooleanCH$9.convert(java.lang.Object)</name>
                <outbound type="class" confirmed="no">java.lang.Boolean</outbound>
                <outbound type="class" confirmed="no">java.lang.Object</outbound>
            </feature>
        </class>
        <class confirmed="yes">
            <name>org.mvel.conversion.ByteCH</name>
            <outbound type="class" confirmed="no">java.lang.Object</outbound>
            <outbound type="class" confirmed="yes">org.mvel.ConversionHandler</outbound>
            <feature confirmed="yes">
                <name>org.mvel.conversion.ByteCH.ByteCH()</name>
                <outbound type="feature" confirmed="no">java.lang.Object.Object()</outbound>
                <inbound type="feature" confirmed="yes">org.mvel.DataConversion.static {}</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.conversion.ByteCH.CNV</name>
                <outbound type="class" confirmed="no">java.util.Map</outbound>
                <inbound type="feature" confirmed="yes">org.mvel.conversion.ByteCH.access$0()</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.conversion.ByteCH.canConvertFrom(java.lang.Class)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.conversion.ByteCH.convertFrom(java.lang.Object)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.conversion.ByteCH.static {}</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.conversion.ByteCH.access$0()</name>
                <outbound type="class" confirmed="no">java.util.Map</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.conversion.ByteCH.CNV</outbound>
                <inbound type="feature" confirmed="yes">org.mvel.conversion.ByteCH$2.convert(java.lang.Object)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.conversion.ByteCH.canConvertFrom(java.lang.Class)</name>
                <outbound type="class" confirmed="no">java.lang.Class</outbound>
                <outbound type="class" confirmed="no">java.lang.Object</outbound>
                <outbound type="class" confirmed="no">java.util.Map</outbound>
                <outbound type="feature" confirmed="no">java.util.Map.containsKey(java.lang.Object)</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.conversion.ByteCH.CNV</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.conversion.ByteCH.convertFrom(java.lang.Object)</name>
                <outbound type="class" confirmed="no">java.lang.Class</outbound>
                <outbound type="feature" confirmed="no">java.lang.Class.forName(java.lang.String)</outbound>
                <outbound type="feature" confirmed="no">java.lang.Class.getName()</outbound>
                <outbound type="class" confirmed="no">java.lang.ClassNotFoundException</outbound>
                <outbound type="feature" confirmed="no">java.lang.NoClassDefFoundError.NoClassDefFoundError(java.lang.String)</outbound>
                <outbound type="class" confirmed="no">java.lang.Object</outbound>
                <outbound type="feature" confirmed="no">java.lang.Object.getClass()</outbound>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="class" confirmed="no">java.lang.StringBuffer</outbound>
                <outbound type="feature" confirmed="no">java.lang.StringBuffer.StringBuffer(java.lang.String)</outbound>
                <outbound type="feature" confirmed="no">java.lang.StringBuffer.append(java.lang.String)</outbound>
                <outbound type="feature" confirmed="no">java.lang.StringBuffer.toString()</outbound>
                <outbound type="feature" confirmed="no">java.lang.Throwable.getMessage()</outbound>
                <outbound type="class" confirmed="no">java.util.Map</outbound>
                <outbound type="feature" confirmed="no">java.util.Map.containsKey(java.lang.Object)</outbound>
                <outbound type="feature" confirmed="no">java.util.Map.get(java.lang.Object)</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.ConversionException.ConversionException(java.lang.String)</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.conversion.ByteCH.CNV</outbound>
                <outbound type="class" confirmed="yes">org.mvel.conversion.Converter</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.conversion.Converter.convert(java.lang.Object)</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.conversion.ByteCH.static {}</name>
                <outbound type="class" confirmed="no">java.lang.Class</outbound>
                <outbound type="feature" confirmed="no">java.lang.Class.forName(java.lang.String)</outbound>
                <outbound type="class" confirmed="no">java.lang.ClassNotFoundException</outbound>
                <outbound type="feature" confirmed="no">java.lang.NoClassDefFoundError.NoClassDefFoundError(java.lang.String)</outbound>
                <outbound type="class" confirmed="no">java.lang.Object</outbound>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="feature" confirmed="no">java.lang.Throwable.getMessage()</outbound>
                <outbound type="feature" confirmed="no">java.util.HashMap.HashMap()</outbound>
                <outbound type="class" confirmed="no">java.util.Map</outbound>
                <outbound type="feature" confirmed="no">java.util.Map.put(java.lang.Object, java.lang.Object)</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.conversion.ByteCH$1.ByteCH$1()</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.conversion.ByteCH$2.ByteCH$2()</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.conversion.ByteCH$3.ByteCH$3()</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.conversion.ByteCH.CNV</outbound>
            </feature>
        </class>
        <class confirmed="yes">
            <name>org.mvel.conversion.ByteCH$1</name>
            <outbound type="class" confirmed="no">java.lang.Object</outbound>
            <outbound type="class" confirmed="yes">org.mvel.conversion.Converter</outbound>
            <feature confirmed="yes">
                <name>org.mvel.conversion.ByteCH$1.ByteCH$1()</name>
                <outbound type="feature" confirmed="no">java.lang.Object.Object()</outbound>
                <inbound type="feature" confirmed="yes">org.mvel.conversion.ByteCH.static {}</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.conversion.ByteCH$1.convert(java.lang.Object)</name>
                <outbound type="feature" confirmed="no">java.lang.Byte.Byte(byte)</outbound>
                <outbound type="feature" confirmed="no">java.lang.Byte.parseByte(java.lang.String)</outbound>
                <outbound type="class" confirmed="no">java.lang.Object</outbound>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
            </feature>
        </class>
        <class confirmed="yes">
            <name>org.mvel.conversion.ByteCH$2</name>
            <outbound type="class" confirmed="no">java.lang.Object</outbound>
            <outbound type="class" confirmed="yes">org.mvel.conversion.Converter</outbound>
            <feature confirmed="yes">
                <name>org.mvel.conversion.ByteCH$2.ByteCH$2()</name>
                <outbound type="feature" confirmed="no">java.lang.Object.Object()</outbound>
                <inbound type="feature" confirmed="yes">org.mvel.conversion.ByteCH.static {}</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.conversion.ByteCH$2.convert(java.lang.Object)</name>
                <outbound type="class" confirmed="no">java.lang.Class</outbound>
                <outbound type="feature" confirmed="no">java.lang.Class.forName(java.lang.String)</outbound>
                <outbound type="class" confirmed="no">java.lang.ClassNotFoundException</outbound>
                <outbound type="feature" confirmed="no">java.lang.NoClassDefFoundError.NoClassDefFoundError(java.lang.String)</outbound>
                <outbound type="class" confirmed="no">java.lang.Object</outbound>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="feature" confirmed="no">java.lang.String.valueOf(java.lang.Object)</outbound>
                <outbound type="feature" confirmed="no">java.lang.Throwable.getMessage()</outbound>
                <outbound type="class" confirmed="no">java.util.Map</outbound>
                <outbound type="feature" confirmed="no">java.util.Map.get(java.lang.Object)</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.conversion.ByteCH.access$0()</outbound>
                <outbound type="class" confirmed="yes">org.mvel.conversion.Converter</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.conversion.Converter.convert(java.lang.Object)</outbound>
            </feature>
        </class>
        <class confirmed="yes">
            <name>org.mvel.conversion.ByteCH$3</name>
            <outbound type="class" confirmed="no">java.lang.Object</outbound>
            <outbound type="class" confirmed="yes">org.mvel.conversion.Converter</outbound>
            <feature confirmed="yes">
                <name>org.mvel.conversion.ByteCH$3.ByteCH$3()</name>
                <outbound type="feature" confirmed="no">java.lang.Object.Object()</outbound>
                <inbound type="feature" confirmed="yes">org.mvel.conversion.ByteCH.static {}</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.conversion.ByteCH$3.convert(java.lang.Object)</name>
                <outbound type="class" confirmed="no">java.lang.Byte</outbound>
                <outbound type="feature" confirmed="no">java.lang.Byte.Byte(byte)</outbound>
                <outbound type="feature" confirmed="no">java.lang.Byte.byteValue()</outbound>
                <outbound type="class" confirmed="no">java.lang.Object</outbound>
            </feature>
        </class>
        <class confirmed="yes">
            <name>org.mvel.conversion.CharArrayCH</name>
            <outbound type="class" confirmed="no">java.lang.Object</outbound>
            <outbound type="class" confirmed="yes">org.mvel.ConversionHandler</outbound>
            <feature confirmed="yes">
                <name>org.mvel.conversion.CharArrayCH.CNV</name>
                <outbound type="class" confirmed="no">java.util.Map</outbound>
                <inbound type="feature" confirmed="yes">org.mvel.conversion.CharArrayCH.canConvertFrom(java.lang.Class)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.conversion.CharArrayCH.convertFrom(java.lang.Object)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.conversion.CharArrayCH.static {}</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.conversion.CharArrayCH.CharArrayCH()</name>
                <outbound type="feature" confirmed="no">java.lang.Object.Object()</outbound>
                <inbound type="feature" confirmed="yes">org.mvel.DataConversion.static {}</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.conversion.CharArrayCH.canConvertFrom(java.lang.Class)</name>
                <outbound type="class" confirmed="no">java.lang.Class</outbound>
                <outbound type="class" confirmed="no">java.lang.Object</outbound>
                <outbound type="class" confirmed="no">java.util.Map</outbound>
                <outbound type="feature" confirmed="no">java.util.Map.containsKey(java.lang.Object)</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.conversion.CharArrayCH.CNV</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.conversion.CharArrayCH.convertFrom(java.lang.Object)</name>
                <outbound type="class" confirmed="no">java.lang.Class</outbound>
                <outbound type="feature" confirmed="no">java.lang.Class.forName(java.lang.String)</outbound>
                <outbound type="feature" confirmed="no">java.lang.Class.getName()</outbound>
                <outbound type="class" confirmed="no">java.lang.ClassNotFoundException</outbound>
                <outbound type="feature" confirmed="no">java.lang.NoClassDefFoundError.NoClassDefFoundError(java.lang.String)</outbound>
                <outbound type="class" confirmed="no">java.lang.Object</outbound>
                <outbound type="feature" confirmed="no">java.lang.Object.getClass()</outbound>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="class" confirmed="no">java.lang.StringBuffer</outbound>
                <outbound type="feature" confirmed="no">java.lang.StringBuffer.StringBuffer(java.lang.String)</outbound>
                <outbound type="feature" confirmed="no">java.lang.StringBuffer.append(java.lang.String)</outbound>
                <outbound type="feature" confirmed="no">java.lang.StringBuffer.toString()</outbound>
                <outbound type="feature" confirmed="no">java.lang.Throwable.getMessage()</outbound>
                <outbound type="class" confirmed="no">java.util.Map</outbound>
                <outbound type="feature" confirmed="no">java.util.Map.containsKey(java.lang.Object)</outbound>
                <outbound type="feature" confirmed="no">java.util.Map.get(java.lang.Object)</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.ConversionException.ConversionException(java.lang.String)</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.conversion.CharArrayCH.CNV</outbound>
                <outbound type="class" confirmed="yes">org.mvel.conversion.Converter</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.conversion.Converter.convert(java.lang.Object)</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.conversion.CharArrayCH.static {}</name>
                <outbound type="class" confirmed="no">java.lang.Class</outbound>
                <outbound type="feature" confirmed="no">java.lang.Class.forName(java.lang.String)</outbound>
                <outbound type="class" confirmed="no">java.lang.ClassNotFoundException</outbound>
                <outbound type="feature" confirmed="no">java.lang.NoClassDefFoundError.NoClassDefFoundError(java.lang.String)</outbound>
                <outbound type="class" confirmed="no">java.lang.Object</outbound>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="feature" confirmed="no">java.lang.Throwable.getMessage()</outbound>
                <outbound type="feature" confirmed="no">java.util.HashMap.HashMap()</outbound>
                <outbound type="class" confirmed="no">java.util.Map</outbound>
                <outbound type="feature" confirmed="no">java.util.Map.put(java.lang.Object, java.lang.Object)</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.conversion.CharArrayCH$1.CharArrayCH$1()</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.conversion.CharArrayCH.CNV</outbound>
            </feature>
        </class>
        <class confirmed="yes">
            <name>org.mvel.conversion.CharArrayCH$1</name>
            <outbound type="class" confirmed="no">java.lang.Object</outbound>
            <outbound type="class" confirmed="yes">org.mvel.conversion.Converter</outbound>
            <feature confirmed="yes">
                <name>org.mvel.conversion.CharArrayCH$1.CharArrayCH$1()</name>
                <outbound type="feature" confirmed="no">java.lang.Object.Object()</outbound>
                <inbound type="feature" confirmed="yes">org.mvel.conversion.CharArrayCH.static {}</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.conversion.CharArrayCH$1.convert(java.lang.Object)</name>
                <outbound type="class" confirmed="no">java.lang.Object</outbound>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="feature" confirmed="no">java.lang.String.valueOf(java.lang.Object)</outbound>
            </feature>
        </class>
        <class confirmed="yes">
            <name>org.mvel.conversion.CharCH</name>
            <outbound type="class" confirmed="no">java.lang.Object</outbound>
            <outbound type="class" confirmed="yes">org.mvel.ConversionHandler</outbound>
            <feature confirmed="yes">
                <name>org.mvel.conversion.CharCH.CNV</name>
                <outbound type="class" confirmed="no">java.util.Map</outbound>
                <inbound type="feature" confirmed="yes">org.mvel.conversion.CharCH.access$0()</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.conversion.CharCH.canConvertFrom(java.lang.Class)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.conversion.CharCH.convertFrom(java.lang.Object)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.conversion.CharCH.static {}</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.conversion.CharCH.CharCH()</name>
                <outbound type="feature" confirmed="no">java.lang.Object.Object()</outbound>
                <inbound type="feature" confirmed="yes">org.mvel.DataConversion.static {}</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.conversion.CharCH.access$0()</name>
                <outbound type="class" confirmed="no">java.util.Map</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.conversion.CharCH.CNV</outbound>
                <inbound type="feature" confirmed="yes">org.mvel.conversion.CharCH$2.convert(java.lang.Object)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.conversion.CharCH.canConvertFrom(java.lang.Class)</name>
                <outbound type="class" confirmed="no">java.lang.Class</outbound>
                <outbound type="class" confirmed="no">java.lang.Object</outbound>
                <outbound type="class" confirmed="no">java.util.Map</outbound>
                <outbound type="feature" confirmed="no">java.util.Map.containsKey(java.lang.Object)</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.conversion.CharCH.CNV</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.conversion.CharCH.convertFrom(java.lang.Object)</name>
                <outbound type="class" confirmed="no">java.lang.Class</outbound>
                <outbound type="feature" confirmed="no">java.lang.Class.forName(java.lang.String)</outbound>
                <outbound type="feature" confirmed="no">java.lang.Class.getName()</outbound>
                <outbound type="class" confirmed="no">java.lang.ClassNotFoundException</outbound>
                <outbound type="feature" confirmed="no">java.lang.NoClassDefFoundError.NoClassDefFoundError(java.lang.String)</outbound>
                <outbound type="class" confirmed="no">java.lang.Object</outbound>
                <outbound type="feature" confirmed="no">java.lang.Object.getClass()</outbound>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="class" confirmed="no">java.lang.StringBuffer</outbound>
                <outbound type="feature" confirmed="no">java.lang.StringBuffer.StringBuffer(java.lang.String)</outbound>
                <outbound type="feature" confirmed="no">java.lang.StringBuffer.append(java.lang.String)</outbound>
                <outbound type="feature" confirmed="no">java.lang.StringBuffer.toString()</outbound>
                <outbound type="feature" confirmed="no">java.lang.Throwable.getMessage()</outbound>
                <outbound type="class" confirmed="no">java.util.Map</outbound>
                <outbound type="feature" confirmed="no">java.util.Map.containsKey(java.lang.Object)</outbound>
                <outbound type="feature" confirmed="no">java.util.Map.get(java.lang.Object)</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.ConversionException.ConversionException(java.lang.String)</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.conversion.CharCH.CNV</outbound>
                <outbound type="class" confirmed="yes">org.mvel.conversion.Converter</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.conversion.Converter.convert(java.lang.Object)</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.conversion.CharCH.static {}</name>
                <outbound type="class" confirmed="no">java.lang.Class</outbound>
                <outbound type="feature" confirmed="no">java.lang.Class.forName(java.lang.String)</outbound>
                <outbound type="class" confirmed="no">java.lang.ClassNotFoundException</outbound>
                <outbound type="feature" confirmed="no">java.lang.NoClassDefFoundError.NoClassDefFoundError(java.lang.String)</outbound>
                <outbound type="class" confirmed="no">java.lang.Object</outbound>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="feature" confirmed="no">java.lang.Throwable.getMessage()</outbound>
                <outbound type="feature" confirmed="no">java.util.HashMap.HashMap()</outbound>
                <outbound type="class" confirmed="no">java.util.Map</outbound>
                <outbound type="feature" confirmed="no">java.util.Map.put(java.lang.Object, java.lang.Object)</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.conversion.CharCH$1.CharCH$1()</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.conversion.CharCH$2.CharCH$2()</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.conversion.CharCH$3.CharCH$3()</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.conversion.CharCH$4.CharCH$4()</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.conversion.CharCH$5.CharCH$5()</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.conversion.CharCH.CNV</outbound>
            </feature>
        </class>
        <class confirmed="yes">
            <name>org.mvel.conversion.CharCH$1</name>
            <outbound type="class" confirmed="no">java.lang.Object</outbound>
            <outbound type="class" confirmed="yes">org.mvel.conversion.Converter</outbound>
            <feature confirmed="yes">
                <name>org.mvel.conversion.CharCH$1.CharCH$1()</name>
                <outbound type="feature" confirmed="no">java.lang.Object.Object()</outbound>
                <inbound type="feature" confirmed="yes">org.mvel.conversion.CharCH.static {}</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.conversion.CharCH$1.convert(java.lang.Object)</name>
                <outbound type="feature" confirmed="no">java.lang.Character.Character(char)</outbound>
                <outbound type="class" confirmed="no">java.lang.Object</outbound>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="feature" confirmed="no">java.lang.String.charAt(int)</outbound>
                <outbound type="feature" confirmed="no">java.lang.String.length()</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.ConversionException.ConversionException(java.lang.String)</outbound>
            </feature>
        </class>
        <class confirmed="yes">
            <name>org.mvel.conversion.CharCH$2</name>
            <outbound type="class" confirmed="no">java.lang.Object</outbound>
            <outbound type="class" confirmed="yes">org.mvel.conversion.Converter</outbound>
            <feature confirmed="yes">
                <name>org.mvel.conversion.CharCH$2.CharCH$2()</name>
                <outbound type="feature" confirmed="no">java.lang.Object.Object()</outbound>
                <inbound type="feature" confirmed="yes">org.mvel.conversion.CharCH.static {}</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.conversion.CharCH$2.convert(java.lang.Object)</name>
                <outbound type="class" confirmed="no">java.lang.Class</outbound>
                <outbound type="feature" confirmed="no">java.lang.Class.forName(java.lang.String)</outbound>
                <outbound type="class" confirmed="no">java.lang.ClassNotFoundException</outbound>
                <outbound type="feature" confirmed="no">java.lang.NoClassDefFoundError.NoClassDefFoundError(java.lang.String)</outbound>
                <outbound type="class" confirmed="no">java.lang.Object</outbound>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="feature" confirmed="no">java.lang.String.valueOf(java.lang.Object)</outbound>
                <outbound type="feature" confirmed="no">java.lang.Throwable.getMessage()</outbound>
                <outbound type="class" confirmed="no">java.util.Map</outbound>
                <outbound type="feature" confirmed="no">java.util.Map.get(java.lang.Object)</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.conversion.CharCH.access$0()</outbound>
                <outbound type="class" confirmed="yes">org.mvel.conversion.Converter</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.conversion.Converter.convert(java.lang.Object)</outbound>
            </feature>
        </class>
        <class confirmed="yes">
            <name>org.mvel.conversion.CharCH$3</name>
            <outbound type="class" confirmed="no">java.lang.Object</outbound>
            <outbound type="class" confirmed="yes">org.mvel.conversion.Converter</outbound>
            <feature confirmed="yes">
                <name>org.mvel.conversion.CharCH$3.CharCH$3()</name>
                <outbound type="feature" confirmed="no">java.lang.Object.Object()</outbound>
                <inbound type="feature" confirmed="yes">org.mvel.conversion.CharCH.static {}</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.conversion.CharCH$3.convert(java.lang.Object)</name>
                <outbound type="class" confirmed="no">java.lang.Character</outbound>
                <outbound type="feature" confirmed="no">java.lang.Character.Character(char)</outbound>
                <outbound type="feature" confirmed="no">java.lang.Character.charValue()</outbound>
                <outbound type="class" confirmed="no">java.lang.Object</outbound>
            </feature>
        </class>
        <class confirmed="yes">
            <name>org.mvel.conversion.CharCH$4</name>
            <outbound type="class" confirmed="no">java.lang.Object</outbound>
            <outbound type="class" confirmed="yes">org.mvel.conversion.Converter</outbound>
            <feature confirmed="yes">
                <name>org.mvel.conversion.CharCH$4.CharCH$4()</name>
                <outbound type="feature" confirmed="no">java.lang.Object.Object()</outbound>
                <inbound type="feature" confirmed="yes">org.mvel.conversion.CharCH.static {}</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.conversion.CharCH$4.convert(java.lang.Object)</name>
                <outbound type="feature" confirmed="no">java.lang.Character.Character(char)</outbound>
                <outbound type="class" confirmed="no">java.lang.Object</outbound>
                <outbound type="class" confirmed="no">java.math.BigDecimal</outbound>
                <outbound type="feature" confirmed="no">java.math.BigDecimal.intValue()</outbound>
            </feature>
        </class>
        <class confirmed="yes">
            <name>org.mvel.conversion.CharCH$5</name>
            <outbound type="class" confirmed="no">java.lang.Object</outbound>
            <outbound type="class" confirmed="yes">org.mvel.conversion.Converter</outbound>
            <feature confirmed="yes">
                <name>org.mvel.conversion.CharCH$5.CharCH$5()</name>
                <outbound type="feature" confirmed="no">java.lang.Object.Object()</outbound>
                <inbound type="feature" confirmed="yes">org.mvel.conversion.CharCH.static {}</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.conversion.CharCH$5.convert(java.lang.Object)</name>
                <outbound type="feature" confirmed="no">java.lang.Character.Character(char)</outbound>
                <outbound type="class" confirmed="no">java.lang.Integer</outbound>
                <outbound type="feature" confirmed="no">java.lang.Integer.intValue()</outbound>
                <outbound type="class" confirmed="no">java.lang.Object</outbound>
            </feature>
        </class>
        <class confirmed="yes">
            <name>org.mvel.conversion.Converter</name>
            <outbound type="class" confirmed="no">java.lang.Object</outbound>
            <inbound type="class" confirmed="yes">org.mvel.conversion.ArrayCH$1</inbound>
            <inbound type="class" confirmed="yes">org.mvel.conversion.ArrayCH$2</inbound>
            <inbound type="class" confirmed="yes">org.mvel.conversion.ArrayCH$3</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.conversion.ArrayCH.convertFrom(java.lang.Object)</inbound>
            <inbound type="class" confirmed="yes">org.mvel.conversion.BigDecimalCH$1</inbound>
            <inbound type="class" confirmed="yes">org.mvel.conversion.BigDecimalCH$10</inbound>
            <inbound type="class" confirmed="yes">org.mvel.conversion.BigDecimalCH$11</inbound>
            <inbound type="class" confirmed="yes">org.mvel.conversion.BigDecimalCH$2</inbound>
            <inbound type="class" confirmed="yes">org.mvel.conversion.BigDecimalCH$3</inbound>
            <inbound type="class" confirmed="yes">org.mvel.conversion.BigDecimalCH$4</inbound>
            <inbound type="class" confirmed="yes">org.mvel.conversion.BigDecimalCH$5</inbound>
            <inbound type="class" confirmed="yes">org.mvel.conversion.BigDecimalCH$6</inbound>
            <inbound type="class" confirmed="yes">org.mvel.conversion.BigDecimalCH$7</inbound>
            <inbound type="class" confirmed="yes">org.mvel.conversion.BigDecimalCH$8</inbound>
            <inbound type="class" confirmed="yes">org.mvel.conversion.BigDecimalCH$9</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.conversion.BigDecimalCH.convertFrom(java.lang.Object)</inbound>
            <inbound type="class" confirmed="yes">org.mvel.conversion.BigIntegerCH$1</inbound>
            <inbound type="class" confirmed="yes">org.mvel.conversion.BigIntegerCH$2</inbound>
            <inbound type="class" confirmed="yes">org.mvel.conversion.BigIntegerCH$3</inbound>
            <inbound type="class" confirmed="yes">org.mvel.conversion.BigIntegerCH$4</inbound>
            <inbound type="class" confirmed="yes">org.mvel.conversion.BigIntegerCH$5</inbound>
            <inbound type="class" confirmed="yes">org.mvel.conversion.BigIntegerCH$6</inbound>
            <inbound type="class" confirmed="yes">org.mvel.conversion.BigIntegerCH$7</inbound>
            <inbound type="class" confirmed="yes">org.mvel.conversion.BigIntegerCH$8</inbound>
            <inbound type="class" confirmed="yes">org.mvel.conversion.BigIntegerCH$9</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.conversion.BigIntegerCH.convertFrom(java.lang.Object)</inbound>
            <inbound type="class" confirmed="yes">org.mvel.conversion.BooleanCH$1</inbound>
            <inbound type="class" confirmed="yes">org.mvel.conversion.BooleanCH$10</inbound>
            <inbound type="class" confirmed="yes">org.mvel.conversion.BooleanCH$2</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.conversion.BooleanCH$2.convert(java.lang.Object)</inbound>
            <inbound type="class" confirmed="yes">org.mvel.conversion.BooleanCH$3</inbound>
            <inbound type="class" confirmed="yes">org.mvel.conversion.BooleanCH$4</inbound>
            <inbound type="class" confirmed="yes">org.mvel.conversion.BooleanCH$5</inbound>
            <inbound type="class" confirmed="yes">org.mvel.conversion.BooleanCH$6</inbound>
            <inbound type="class" confirmed="yes">org.mvel.conversion.BooleanCH$7</inbound>
            <inbound type="class" confirmed="yes">org.mvel.conversion.BooleanCH$8</inbound>
            <inbound type="class" confirmed="yes">org.mvel.conversion.BooleanCH$9</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.conversion.BooleanCH.convertFrom(java.lang.Object)</inbound>
            <inbound type="class" confirmed="yes">org.mvel.conversion.ByteCH$1</inbound>
            <inbound type="class" confirmed="yes">org.mvel.conversion.ByteCH$2</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.conversion.ByteCH$2.convert(java.lang.Object)</inbound>
            <inbound type="class" confirmed="yes">org.mvel.conversion.ByteCH$3</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.conversion.ByteCH.convertFrom(java.lang.Object)</inbound>
            <inbound type="class" confirmed="yes">org.mvel.conversion.CharArrayCH$1</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.conversion.CharArrayCH.convertFrom(java.lang.Object)</inbound>
            <inbound type="class" confirmed="yes">org.mvel.conversion.CharCH$1</inbound>
            <inbound type="class" confirmed="yes">org.mvel.conversion.CharCH$2</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.conversion.CharCH$2.convert(java.lang.Object)</inbound>
            <inbound type="class" confirmed="yes">org.mvel.conversion.CharCH$3</inbound>
            <inbound type="class" confirmed="yes">org.mvel.conversion.CharCH$4</inbound>
            <inbound type="class" confirmed="yes">org.mvel.conversion.CharCH$5</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.conversion.CharCH.convertFrom(java.lang.Object)</inbound>
            <inbound type="class" confirmed="yes">org.mvel.conversion.DoubleCH$1</inbound>
            <inbound type="class" confirmed="yes">org.mvel.conversion.DoubleCH$10</inbound>
            <inbound type="class" confirmed="yes">org.mvel.conversion.DoubleCH$2</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.conversion.DoubleCH$2.convert(java.lang.Object)</inbound>
            <inbound type="class" confirmed="yes">org.mvel.conversion.DoubleCH$3</inbound>
            <inbound type="class" confirmed="yes">org.mvel.conversion.DoubleCH$4</inbound>
            <inbound type="class" confirmed="yes">org.mvel.conversion.DoubleCH$5</inbound>
            <inbound type="class" confirmed="yes">org.mvel.conversion.DoubleCH$6</inbound>
            <inbound type="class" confirmed="yes">org.mvel.conversion.DoubleCH$7</inbound>
            <inbound type="class" confirmed="yes">org.mvel.conversion.DoubleCH$8</inbound>
            <inbound type="class" confirmed="yes">org.mvel.conversion.DoubleCH$9</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.conversion.DoubleCH.convertFrom(java.lang.Object)</inbound>
            <inbound type="class" confirmed="yes">org.mvel.conversion.FloatCH$1</inbound>
            <inbound type="class" confirmed="yes">org.mvel.conversion.FloatCH$10</inbound>
            <inbound type="class" confirmed="yes">org.mvel.conversion.FloatCH$2</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.conversion.FloatCH$2.convert(java.lang.Object)</inbound>
            <inbound type="class" confirmed="yes">org.mvel.conversion.FloatCH$3</inbound>
            <inbound type="class" confirmed="yes">org.mvel.conversion.FloatCH$4</inbound>
            <inbound type="class" confirmed="yes">org.mvel.conversion.FloatCH$5</inbound>
            <inbound type="class" confirmed="yes">org.mvel.conversion.FloatCH$6</inbound>
            <inbound type="class" confirmed="yes">org.mvel.conversion.FloatCH$7</inbound>
            <inbound type="class" confirmed="yes">org.mvel.conversion.FloatCH$8</inbound>
            <inbound type="class" confirmed="yes">org.mvel.conversion.FloatCH$9</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.conversion.FloatCH.convertFrom(java.lang.Object)</inbound>
            <inbound type="class" confirmed="yes">org.mvel.conversion.IntArrayCH$1</inbound>
            <inbound type="class" confirmed="yes">org.mvel.conversion.IntArrayCH$2</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.conversion.IntArrayCH.convertFrom(java.lang.Object)</inbound>
            <inbound type="class" confirmed="yes">org.mvel.conversion.IntegerCH$1</inbound>
            <inbound type="class" confirmed="yes">org.mvel.conversion.IntegerCH$10</inbound>
            <inbound type="class" confirmed="yes">org.mvel.conversion.IntegerCH$11</inbound>
            <inbound type="class" confirmed="yes">org.mvel.conversion.IntegerCH$2</inbound>
            <inbound type="class" confirmed="yes">org.mvel.conversion.IntegerCH$3</inbound>
            <inbound type="class" confirmed="yes">org.mvel.conversion.IntegerCH$4</inbound>
            <inbound type="class" confirmed="yes">org.mvel.conversion.IntegerCH$5</inbound>
            <inbound type="class" confirmed="yes">org.mvel.conversion.IntegerCH$6</inbound>
            <inbound type="class" confirmed="yes">org.mvel.conversion.IntegerCH$7</inbound>
            <inbound type="class" confirmed="yes">org.mvel.conversion.IntegerCH$8</inbound>
            <inbound type="class" confirmed="yes">org.mvel.conversion.IntegerCH$9</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.conversion.IntegerCH.convertFrom(java.lang.Object)</inbound>
            <inbound type="class" confirmed="yes">org.mvel.conversion.LongCH$1</inbound>
            <inbound type="class" confirmed="yes">org.mvel.conversion.LongCH$2</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.conversion.LongCH$2.convert(java.lang.Object)</inbound>
            <inbound type="class" confirmed="yes">org.mvel.conversion.LongCH$3</inbound>
            <inbound type="class" confirmed="yes">org.mvel.conversion.LongCH$4</inbound>
            <inbound type="class" confirmed="yes">org.mvel.conversion.LongCH$5</inbound>
            <inbound type="class" confirmed="yes">org.mvel.conversion.LongCH$6</inbound>
            <inbound type="class" confirmed="yes">org.mvel.conversion.LongCH$7</inbound>
            <inbound type="class" confirmed="yes">org.mvel.conversion.LongCH$8</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.conversion.LongCH.convertFrom(java.lang.Object)</inbound>
            <inbound type="class" confirmed="yes">org.mvel.conversion.PrimArrayHandler$1</inbound>
            <inbound type="class" confirmed="yes">org.mvel.conversion.PrimArrayHandler$2</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.conversion.PrimArrayHandler.convertFrom(java.lang.Object)</inbound>
            <inbound type="class" confirmed="yes">org.mvel.conversion.PrimIntArrayCH$1</inbound>
            <inbound type="class" confirmed="yes">org.mvel.conversion.PrimIntArrayCH$2</inbound>
            <inbound type="class" confirmed="yes">org.mvel.conversion.PrimIntArrayCH$3</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.conversion.PrimIntArrayCH.convertFrom(java.lang.Object)</inbound>
            <inbound type="class" confirmed="yes">org.mvel.conversion.ShortCH$1</inbound>
            <inbound type="class" confirmed="yes">org.mvel.conversion.ShortCH$10</inbound>
            <inbound type="class" confirmed="yes">org.mvel.conversion.ShortCH$2</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.conversion.ShortCH$2.convert(java.lang.Object)</inbound>
            <inbound type="class" confirmed="yes">org.mvel.conversion.ShortCH$3</inbound>
            <inbound type="class" confirmed="yes">org.mvel.conversion.ShortCH$4</inbound>
            <inbound type="class" confirmed="yes">org.mvel.conversion.ShortCH$5</inbound>
            <inbound type="class" confirmed="yes">org.mvel.conversion.ShortCH$6</inbound>
            <inbound type="class" confirmed="yes">org.mvel.conversion.ShortCH$7</inbound>
            <inbound type="class" confirmed="yes">org.mvel.conversion.ShortCH$8</inbound>
            <inbound type="class" confirmed="yes">org.mvel.conversion.ShortCH$9</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.conversion.ShortCH.convertFrom(java.lang.Object)</inbound>
            <inbound type="class" confirmed="yes">org.mvel.conversion.StringArrayCH$1</inbound>
            <feature confirmed="yes">
                <name>org.mvel.conversion.Converter.convert(java.lang.Object)</name>
                <outbound type="class" confirmed="no">java.lang.Object</outbound>
                <inbound type="feature" confirmed="yes">org.mvel.conversion.ArrayCH.convertFrom(java.lang.Object)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.conversion.BigDecimalCH.convertFrom(java.lang.Object)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.conversion.BigIntegerCH.convertFrom(java.lang.Object)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.conversion.BooleanCH$2.convert(java.lang.Object)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.conversion.BooleanCH.convertFrom(java.lang.Object)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.conversion.ByteCH$2.convert(java.lang.Object)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.conversion.ByteCH.convertFrom(java.lang.Object)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.conversion.CharArrayCH.convertFrom(java.lang.Object)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.conversion.CharCH$2.convert(java.lang.Object)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.conversion.CharCH.convertFrom(java.lang.Object)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.conversion.DoubleCH$2.convert(java.lang.Object)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.conversion.DoubleCH.convertFrom(java.lang.Object)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.conversion.FloatCH$2.convert(java.lang.Object)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.conversion.FloatCH.convertFrom(java.lang.Object)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.conversion.IntArrayCH.convertFrom(java.lang.Object)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.conversion.IntegerCH.convertFrom(java.lang.Object)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.conversion.LongCH$2.convert(java.lang.Object)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.conversion.LongCH.convertFrom(java.lang.Object)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.conversion.PrimArrayHandler.convertFrom(java.lang.Object)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.conversion.PrimIntArrayCH.convertFrom(java.lang.Object)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.conversion.ShortCH$2.convert(java.lang.Object)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.conversion.ShortCH.convertFrom(java.lang.Object)</inbound>
            </feature>
        </class>
        <class confirmed="yes">
            <name>org.mvel.conversion.DoubleCH</name>
            <outbound type="class" confirmed="no">java.lang.Object</outbound>
            <outbound type="class" confirmed="yes">org.mvel.ConversionHandler</outbound>
            <feature confirmed="yes">
                <name>org.mvel.conversion.DoubleCH.CNV</name>
                <outbound type="class" confirmed="no">java.util.Map</outbound>
                <inbound type="feature" confirmed="yes">org.mvel.conversion.DoubleCH.access$0()</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.conversion.DoubleCH.canConvertFrom(java.lang.Class)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.conversion.DoubleCH.convertFrom(java.lang.Object)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.conversion.DoubleCH.static {}</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.conversion.DoubleCH.DoubleCH()</name>
                <outbound type="feature" confirmed="no">java.lang.Object.Object()</outbound>
                <inbound type="feature" confirmed="yes">org.mvel.DataConversion.static {}</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.conversion.DoubleCH.access$0()</name>
                <outbound type="class" confirmed="no">java.util.Map</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.conversion.DoubleCH.CNV</outbound>
                <inbound type="feature" confirmed="yes">org.mvel.conversion.DoubleCH$2.convert(java.lang.Object)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.conversion.DoubleCH.canConvertFrom(java.lang.Class)</name>
                <outbound type="class" confirmed="no">java.lang.Class</outbound>
                <outbound type="class" confirmed="no">java.lang.Object</outbound>
                <outbound type="class" confirmed="no">java.util.Map</outbound>
                <outbound type="feature" confirmed="no">java.util.Map.containsKey(java.lang.Object)</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.conversion.DoubleCH.CNV</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.conversion.DoubleCH.convertFrom(java.lang.Object)</name>
                <outbound type="class" confirmed="no">java.lang.Class</outbound>
                <outbound type="feature" confirmed="no">java.lang.Class.forName(java.lang.String)</outbound>
                <outbound type="feature" confirmed="no">java.lang.Class.getName()</outbound>
                <outbound type="class" confirmed="no">java.lang.ClassNotFoundException</outbound>
                <outbound type="feature" confirmed="no">java.lang.NoClassDefFoundError.NoClassDefFoundError(java.lang.String)</outbound>
                <outbound type="class" confirmed="no">java.lang.Object</outbound>
                <outbound type="feature" confirmed="no">java.lang.Object.getClass()</outbound>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="class" confirmed="no">java.lang.StringBuffer</outbound>
                <outbound type="feature" confirmed="no">java.lang.StringBuffer.StringBuffer(java.lang.String)</outbound>
                <outbound type="feature" confirmed="no">java.lang.StringBuffer.append(java.lang.String)</outbound>
                <outbound type="feature" confirmed="no">java.lang.StringBuffer.toString()</outbound>
                <outbound type="feature" confirmed="no">java.lang.Throwable.getMessage()</outbound>
                <outbound type="class" confirmed="no">java.util.Map</outbound>
                <outbound type="feature" confirmed="no">java.util.Map.containsKey(java.lang.Object)</outbound>
                <outbound type="feature" confirmed="no">java.util.Map.get(java.lang.Object)</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.ConversionException.ConversionException(java.lang.String)</outbound>
                <outbound type="class" confirmed="yes">org.mvel.conversion.Converter</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.conversion.Converter.convert(java.lang.Object)</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.conversion.DoubleCH.CNV</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.conversion.DoubleCH.static {}</name>
                <outbound type="class" confirmed="no">java.lang.Class</outbound>
                <outbound type="feature" confirmed="no">java.lang.Class.forName(java.lang.String)</outbound>
                <outbound type="class" confirmed="no">java.lang.ClassNotFoundException</outbound>
                <outbound type="feature" confirmed="no">java.lang.NoClassDefFoundError.NoClassDefFoundError(java.lang.String)</outbound>
                <outbound type="class" confirmed="no">java.lang.Object</outbound>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="feature" confirmed="no">java.lang.Throwable.getMessage()</outbound>
                <outbound type="feature" confirmed="no">java.util.HashMap.HashMap()</outbound>
                <outbound type="class" confirmed="no">java.util.Map</outbound>
                <outbound type="feature" confirmed="no">java.util.Map.put(java.lang.Object, java.lang.Object)</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.conversion.DoubleCH$1.DoubleCH$1()</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.conversion.DoubleCH$10.DoubleCH$10()</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.conversion.DoubleCH$2.DoubleCH$2()</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.conversion.DoubleCH$3.DoubleCH$3()</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.conversion.DoubleCH$4.DoubleCH$4()</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.conversion.DoubleCH$5.DoubleCH$5()</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.conversion.DoubleCH$6.DoubleCH$6()</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.conversion.DoubleCH$7.DoubleCH$7()</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.conversion.DoubleCH$8.DoubleCH$8()</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.conversion.DoubleCH$9.DoubleCH$9()</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.conversion.DoubleCH.CNV</outbound>
            </feature>
        </class>
        <class confirmed="yes">
            <name>org.mvel.conversion.DoubleCH$1</name>
            <outbound type="class" confirmed="no">java.lang.Object</outbound>
            <outbound type="class" confirmed="yes">org.mvel.conversion.Converter</outbound>
            <feature confirmed="yes">
                <name>org.mvel.conversion.DoubleCH$1.DoubleCH$1()</name>
                <outbound type="feature" confirmed="no">java.lang.Object.Object()</outbound>
                <inbound type="feature" confirmed="yes">org.mvel.conversion.DoubleCH.static {}</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.conversion.DoubleCH$1.convert(java.lang.Object)</name>
                <outbound type="feature" confirmed="no">java.lang.Double.Double(double)</outbound>
                <outbound type="feature" confirmed="no">java.lang.Double.parseDouble(java.lang.String)</outbound>
                <outbound type="class" confirmed="no">java.lang.Object</outbound>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="feature" confirmed="no">java.lang.String.length()</outbound>
            </feature>
        </class>
        <class confirmed="yes">
            <name>org.mvel.conversion.DoubleCH$10</name>
            <outbound type="class" confirmed="no">java.lang.Object</outbound>
            <outbound type="class" confirmed="yes">org.mvel.conversion.Converter</outbound>
            <feature confirmed="yes">
                <name>org.mvel.conversion.DoubleCH$10.DoubleCH$10()</name>
                <outbound type="feature" confirmed="no">java.lang.Object.Object()</outbound>
                <inbound type="feature" confirmed="yes">org.mvel.conversion.DoubleCH.static {}</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.conversion.DoubleCH$10.convert(java.lang.Object)</name>
                <outbound type="class" confirmed="no">java.lang.Double</outbound>
                <outbound type="class" confirmed="no">java.lang.Object</outbound>
            </feature>
        </class>
        <class confirmed="yes">
            <name>org.mvel.conversion.DoubleCH$2</name>
            <outbound type="class" confirmed="no">java.lang.Object</outbound>
            <outbound type="class" confirmed="yes">org.mvel.conversion.Converter</outbound>
            <feature confirmed="yes">
                <name>org.mvel.conversion.DoubleCH$2.DoubleCH$2()</name>
                <outbound type="feature" confirmed="no">java.lang.Object.Object()</outbound>
                <inbound type="feature" confirmed="yes">org.mvel.conversion.DoubleCH.static {}</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.conversion.DoubleCH$2.convert(java.lang.Object)</name>
                <outbound type="class" confirmed="no">java.lang.Class</outbound>
                <outbound type="feature" confirmed="no">java.lang.Class.forName(java.lang.String)</outbound>
                <outbound type="class" confirmed="no">java.lang.ClassNotFoundException</outbound>
                <outbound type="feature" confirmed="no">java.lang.NoClassDefFoundError.NoClassDefFoundError(java.lang.String)</outbound>
                <outbound type="class" confirmed="no">java.lang.Object</outbound>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="feature" confirmed="no">java.lang.String.valueOf(java.lang.Object)</outbound>
                <outbound type="feature" confirmed="no">java.lang.Throwable.getMessage()</outbound>
                <outbound type="class" confirmed="no">java.util.Map</outbound>
                <outbound type="feature" confirmed="no">java.util.Map.get(java.lang.Object)</outbound>
                <outbound type="class" confirmed="yes">org.mvel.conversion.Converter</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.conversion.Converter.convert(java.lang.Object)</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.conversion.DoubleCH.access$0()</outbound>
            </feature>
        </class>
        <class confirmed="yes">
            <name>org.mvel.conversion.DoubleCH$3</name>
            <outbound type="class" confirmed="no">java.lang.Object</outbound>
            <outbound type="class" confirmed="yes">org.mvel.conversion.Converter</outbound>
            <feature confirmed="yes">
                <name>org.mvel.conversion.DoubleCH$3.DoubleCH$3()</name>
                <outbound type="feature" confirmed="no">java.lang.Object.Object()</outbound>
                <inbound type="feature" confirmed="yes">org.mvel.conversion.DoubleCH.static {}</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.conversion.DoubleCH$3.convert(java.lang.Object)</name>
                <outbound type="class" confirmed="no">java.lang.Double</outbound>
                <outbound type="class" confirmed="no">java.lang.Object</outbound>
            </feature>
        </class>
        <class confirmed="yes">
            <name>org.mvel.conversion.DoubleCH$4</name>
            <outbound type="class" confirmed="no">java.lang.Object</outbound>
            <outbound type="class" confirmed="yes">org.mvel.conversion.Converter</outbound>
            <feature confirmed="yes">
                <name>org.mvel.conversion.DoubleCH$4.DoubleCH$4()</name>
                <outbound type="feature" confirmed="no">java.lang.Object.Object()</outbound>
                <inbound type="feature" confirmed="yes">org.mvel.conversion.DoubleCH.static {}</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.conversion.DoubleCH$4.convert(java.lang.Object)</name>
                <outbound type="class" confirmed="no">java.lang.Double</outbound>
                <outbound type="class" confirmed="no">java.lang.Object</outbound>
            </feature>
        </class>
        <class confirmed="yes">
            <name>org.mvel.conversion.DoubleCH$5</name>
            <outbound type="class" confirmed="no">java.lang.Object</outbound>
            <outbound type="class" confirmed="yes">org.mvel.conversion.Converter</outbound>
            <feature confirmed="yes">
                <name>org.mvel.conversion.DoubleCH$5.DoubleCH$5()</name>
                <outbound type="feature" confirmed="no">java.lang.Object.Object()</outbound>
                <inbound type="feature" confirmed="yes">org.mvel.conversion.DoubleCH.static {}</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.conversion.DoubleCH$5.convert(java.lang.Object)</name>
                <outbound type="class" confirmed="no">java.lang.Object</outbound>
            </feature>
        </class>
        <class confirmed="yes">
            <name>org.mvel.conversion.DoubleCH$6</name>
            <outbound type="class" confirmed="no">java.lang.Object</outbound>
            <outbound type="class" confirmed="yes">org.mvel.conversion.Converter</outbound>
            <feature confirmed="yes">
                <name>org.mvel.conversion.DoubleCH$6.DoubleCH$6()</name>
                <outbound type="feature" confirmed="no">java.lang.Object.Object()</outbound>
                <inbound type="feature" confirmed="yes">org.mvel.conversion.DoubleCH.static {}</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.conversion.DoubleCH$6.convert(java.lang.Object)</name>
                <outbound type="class" confirmed="no">java.lang.Double</outbound>
                <outbound type="class" confirmed="no">java.lang.Object</outbound>
            </feature>
        </class>
        <class confirmed="yes">
            <name>org.mvel.conversion.DoubleCH$7</name>
            <outbound type="class" confirmed="no">java.lang.Object</outbound>
            <outbound type="class" confirmed="yes">org.mvel.conversion.Converter</outbound>
            <feature confirmed="yes">
                <name>org.mvel.conversion.DoubleCH$7.DoubleCH$7()</name>
                <outbound type="feature" confirmed="no">java.lang.Object.Object()</outbound>
                <inbound type="feature" confirmed="yes">org.mvel.conversion.DoubleCH.static {}</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.conversion.DoubleCH$7.convert(java.lang.Object)</name>
                <outbound type="class" confirmed="no">java.lang.Double</outbound>
                <outbound type="class" confirmed="no">java.lang.Object</outbound>
            </feature>
        </class>
        <class confirmed="yes">
            <name>org.mvel.conversion.DoubleCH$8</name>
            <outbound type="class" confirmed="no">java.lang.Object</outbound>
            <outbound type="class" confirmed="yes">org.mvel.conversion.Converter</outbound>
            <feature confirmed="yes">
                <name>org.mvel.conversion.DoubleCH$8.DoubleCH$8()</name>
                <outbound type="feature" confirmed="no">java.lang.Object.Object()</outbound>
                <inbound type="feature" confirmed="yes">org.mvel.conversion.DoubleCH.static {}</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.conversion.DoubleCH$8.convert(java.lang.Object)</name>
                <outbound type="class" confirmed="no">java.lang.Double</outbound>
                <outbound type="class" confirmed="no">java.lang.Object</outbound>
            </feature>
        </class>
        <class confirmed="yes">
            <name>org.mvel.conversion.DoubleCH$9</name>
            <outbound type="class" confirmed="no">java.lang.Object</outbound>
            <outbound type="class" confirmed="yes">org.mvel.conversion.Converter</outbound>
            <feature confirmed="yes">
                <name>org.mvel.conversion.DoubleCH$9.DoubleCH$9()</name>
                <outbound type="feature" confirmed="no">java.lang.Object.Object()</outbound>
                <inbound type="feature" confirmed="yes">org.mvel.conversion.DoubleCH.static {}</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.conversion.DoubleCH$9.convert(java.lang.Object)</name>
                <outbound type="class" confirmed="no">java.lang.Double</outbound>
                <outbound type="class" confirmed="no">java.lang.Object</outbound>
            </feature>
        </class>
        <class confirmed="yes">
            <name>org.mvel.conversion.FloatCH</name>
            <outbound type="class" confirmed="no">java.lang.Object</outbound>
            <outbound type="class" confirmed="yes">org.mvel.ConversionHandler</outbound>
            <feature confirmed="yes">
                <name>org.mvel.conversion.FloatCH.CNV</name>
                <outbound type="class" confirmed="no">java.util.Map</outbound>
                <inbound type="feature" confirmed="yes">org.mvel.conversion.FloatCH.access$0()</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.conversion.FloatCH.canConvertFrom(java.lang.Class)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.conversion.FloatCH.convertFrom(java.lang.Object)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.conversion.FloatCH.static {}</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.conversion.FloatCH.FloatCH()</name>
                <outbound type="feature" confirmed="no">java.lang.Object.Object()</outbound>
                <inbound type="feature" confirmed="yes">org.mvel.DataConversion.static {}</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.conversion.FloatCH.access$0()</name>
                <outbound type="class" confirmed="no">java.util.Map</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.conversion.FloatCH.CNV</outbound>
                <inbound type="feature" confirmed="yes">org.mvel.conversion.FloatCH$2.convert(java.lang.Object)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.conversion.FloatCH.canConvertFrom(java.lang.Class)</name>
                <outbound type="class" confirmed="no">java.lang.Class</outbound>
                <outbound type="class" confirmed="no">java.lang.Object</outbound>
                <outbound type="class" confirmed="no">java.util.Map</outbound>
                <outbound type="feature" confirmed="no">java.util.Map.containsKey(java.lang.Object)</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.conversion.FloatCH.CNV</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.conversion.FloatCH.convertFrom(java.lang.Object)</name>
                <outbound type="class" confirmed="no">java.lang.Class</outbound>
                <outbound type="feature" confirmed="no">java.lang.Class.forName(java.lang.String)</outbound>
                <outbound type="feature" confirmed="no">java.lang.Class.getName()</outbound>
                <outbound type="class" confirmed="no">java.lang.ClassNotFoundException</outbound>
                <outbound type="feature" confirmed="no">java.lang.NoClassDefFoundError.NoClassDefFoundError(java.lang.String)</outbound>
                <outbound type="class" confirmed="no">java.lang.Object</outbound>
                <outbound type="feature" confirmed="no">java.lang.Object.getClass()</outbound>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="class" confirmed="no">java.lang.StringBuffer</outbound>
                <outbound type="feature" confirmed="no">java.lang.StringBuffer.StringBuffer(java.lang.String)</outbound>
                <outbound type="feature" confirmed="no">java.lang.StringBuffer.append(java.lang.String)</outbound>
                <outbound type="feature" confirmed="no">java.lang.StringBuffer.toString()</outbound>
                <outbound type="feature" confirmed="no">java.lang.Throwable.getMessage()</outbound>
                <outbound type="class" confirmed="no">java.util.Map</outbound>
                <outbound type="feature" confirmed="no">java.util.Map.containsKey(java.lang.Object)</outbound>
                <outbound type="feature" confirmed="no">java.util.Map.get(java.lang.Object)</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.ConversionException.ConversionException(java.lang.String)</outbound>
                <outbound type="class" confirmed="yes">org.mvel.conversion.Converter</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.conversion.Converter.convert(java.lang.Object)</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.conversion.FloatCH.CNV</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.conversion.FloatCH.static {}</name>
                <outbound type="class" confirmed="no">java.lang.Class</outbound>
                <outbound type="feature" confirmed="no">java.lang.Class.forName(java.lang.String)</outbound>
                <outbound type="class" confirmed="no">java.lang.ClassNotFoundException</outbound>
                <outbound type="feature" confirmed="no">java.lang.NoClassDefFoundError.NoClassDefFoundError(java.lang.String)</outbound>
                <outbound type="class" confirmed="no">java.lang.Object</outbound>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="feature" confirmed="no">java.lang.Throwable.getMessage()</outbound>
                <outbound type="feature" confirmed="no">java.util.HashMap.HashMap()</outbound>
                <outbound type="class" confirmed="no">java.util.Map</outbound>
                <outbound type="feature" confirmed="no">java.util.Map.put(java.lang.Object, java.lang.Object)</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.conversion.FloatCH$1.FloatCH$1()</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.conversion.FloatCH$10.FloatCH$10()</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.conversion.FloatCH$2.FloatCH$2()</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.conversion.FloatCH$3.FloatCH$3()</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.conversion.FloatCH$4.FloatCH$4()</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.conversion.FloatCH$5.FloatCH$5()</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.conversion.FloatCH$6.FloatCH$6()</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.conversion.FloatCH$7.FloatCH$7()</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.conversion.FloatCH$8.FloatCH$8()</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.conversion.FloatCH$9.FloatCH$9()</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.conversion.FloatCH.CNV</outbound>
            </feature>
        </class>
        <class confirmed="yes">
            <name>org.mvel.conversion.FloatCH$1</name>
            <outbound type="class" confirmed="no">java.lang.Object</outbound>
            <outbound type="class" confirmed="yes">org.mvel.conversion.Converter</outbound>
            <feature confirmed="yes">
                <name>org.mvel.conversion.FloatCH$1.FloatCH$1()</name>
                <outbound type="feature" confirmed="no">java.lang.Object.Object()</outbound>
                <inbound type="feature" confirmed="yes">org.mvel.conversion.FloatCH.static {}</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.conversion.FloatCH$1.convert(java.lang.Object)</name>
                <outbound type="feature" confirmed="no">java.lang.Float.Float(float)</outbound>
                <outbound type="feature" confirmed="no">java.lang.Float.parseFloat(java.lang.String)</outbound>
                <outbound type="class" confirmed="no">java.lang.Object</outbound>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="feature" confirmed="no">java.lang.String.length()</outbound>
            </feature>
        </class>
        <class confirmed="yes">
            <name>org.mvel.conversion.FloatCH$10</name>
            <outbound type="class" confirmed="no">java.lang.Object</outbound>
            <outbound type="class" confirmed="yes">org.mvel.conversion.Converter</outbound>
            <feature confirmed="yes">
                <name>org.mvel.conversion.FloatCH$10.FloatCH$10()</name>
                <outbound type="feature" confirmed="no">java.lang.Object.Object()</outbound>
                <inbound type="feature" confirmed="yes">org.mvel.conversion.FloatCH.static {}</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.conversion.FloatCH$10.convert(java.lang.Object)</name>
                <outbound type="class" confirmed="no">java.lang.Float</outbound>
                <outbound type="class" confirmed="no">java.lang.Object</outbound>
            </feature>
        </class>
        <class confirmed="yes">
            <name>org.mvel.conversion.FloatCH$2</name>
            <outbound type="class" confirmed="no">java.lang.Object</outbound>
            <outbound type="class" confirmed="yes">org.mvel.conversion.Converter</outbound>
            <feature confirmed="yes">
                <name>org.mvel.conversion.FloatCH$2.FloatCH$2()</name>
                <outbound type="feature" confirmed="no">java.lang.Object.Object()</outbound>
                <inbound type="feature" confirmed="yes">org.mvel.conversion.FloatCH.static {}</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.conversion.FloatCH$2.convert(java.lang.Object)</name>
                <outbound type="class" confirmed="no">java.lang.Class</outbound>
                <outbound type="feature" confirmed="no">java.lang.Class.forName(java.lang.String)</outbound>
                <outbound type="class" confirmed="no">java.lang.ClassNotFoundException</outbound>
                <outbound type="feature" confirmed="no">java.lang.NoClassDefFoundError.NoClassDefFoundError(java.lang.String)</outbound>
                <outbound type="class" confirmed="no">java.lang.Object</outbound>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="feature" confirmed="no">java.lang.String.valueOf(java.lang.Object)</outbound>
                <outbound type="feature" confirmed="no">java.lang.Throwable.getMessage()</outbound>
                <outbound type="class" confirmed="no">java.util.Map</outbound>
                <outbound type="feature" confirmed="no">java.util.Map.get(java.lang.Object)</outbound>
                <outbound type="class" confirmed="yes">org.mvel.conversion.Converter</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.conversion.Converter.convert(java.lang.Object)</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.conversion.FloatCH.access$0()</outbound>
            </feature>
        </class>
        <class confirmed="yes">
            <name>org.mvel.conversion.FloatCH$3</name>
            <outbound type="class" confirmed="no">java.lang.Object</outbound>
            <outbound type="class" confirmed="yes">org.mvel.conversion.Converter</outbound>
            <feature confirmed="yes">
                <name>org.mvel.conversion.FloatCH$3.FloatCH$3()</name>
                <outbound type="feature" confirmed="no">java.lang.Object.Object()</outbound>
                <inbound type="feature" confirmed="yes">org.mvel.conversion.FloatCH.static {}</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.conversion.FloatCH$3.convert(java.lang.Object)</name>
                <outbound type="class" confirmed="no">java.lang.Float</outbound>
                <outbound type="class" confirmed="no">java.lang.Object</outbound>
            </feature>
        </class>
        <class confirmed="yes">
            <name>org.mvel.conversion.FloatCH$4</name>
            <outbound type="class" confirmed="no">java.lang.Object</outbound>
            <outbound type="class" confirmed="yes">org.mvel.conversion.Converter</outbound>
            <feature confirmed="yes">
                <name>org.mvel.conversion.FloatCH$4.FloatCH$4()</name>
                <outbound type="feature" confirmed="no">java.lang.Object.Object()</outbound>
                <inbound type="feature" confirmed="yes">org.mvel.conversion.FloatCH.static {}</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.conversion.FloatCH$4.convert(java.lang.Object)</name>
                <outbound type="class" confirmed="no">java.lang.Float</outbound>
                <outbound type="class" confirmed="no">java.lang.Object</outbound>
            </feature>
        </class>
        <class confirmed="yes">
            <name>org.mvel.conversion.FloatCH$5</name>
            <outbound type="class" confirmed="no">java.lang.Object</outbound>
            <outbound type="class" confirmed="yes">org.mvel.conversion.Converter</outbound>
            <feature confirmed="yes">
                <name>org.mvel.conversion.FloatCH$5.FloatCH$5()</name>
                <outbound type="feature" confirmed="no">java.lang.Object.Object()</outbound>
                <inbound type="feature" confirmed="yes">org.mvel.conversion.FloatCH.static {}</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.conversion.FloatCH$5.convert(java.lang.Object)</name>
                <outbound type="class" confirmed="no">java.lang.Object</outbound>
            </feature>
        </class>
        <class confirmed="yes">
            <name>org.mvel.conversion.FloatCH$6</name>
            <outbound type="class" confirmed="no">java.lang.Object</outbound>
            <outbound type="class" confirmed="yes">org.mvel.conversion.Converter</outbound>
            <feature confirmed="yes">
                <name>org.mvel.conversion.FloatCH$6.FloatCH$6()</name>
                <outbound type="feature" confirmed="no">java.lang.Object.Object()</outbound>
                <inbound type="feature" confirmed="yes">org.mvel.conversion.FloatCH.static {}</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.conversion.FloatCH$6.convert(java.lang.Object)</name>
                <outbound type="class" confirmed="no">java.lang.Float</outbound>
                <outbound type="class" confirmed="no">java.lang.Object</outbound>
            </feature>
        </class>
        <class confirmed="yes">
            <name>org.mvel.conversion.FloatCH$7</name>
            <outbound type="class" confirmed="no">java.lang.Object</outbound>
            <outbound type="class" confirmed="yes">org.mvel.conversion.Converter</outbound>
            <feature confirmed="yes">
                <name>org.mvel.conversion.FloatCH$7.FloatCH$7()</name>
                <outbound type="feature" confirmed="no">java.lang.Object.Object()</outbound>
                <inbound type="feature" confirmed="yes">org.mvel.conversion.FloatCH.static {}</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.conversion.FloatCH$7.convert(java.lang.Object)</name>
                <outbound type="class" confirmed="no">java.lang.Float</outbound>
                <outbound type="class" confirmed="no">java.lang.Object</outbound>
            </feature>
        </class>
        <class confirmed="yes">
            <name>org.mvel.conversion.FloatCH$8</name>
            <outbound type="class" confirmed="no">java.lang.Object</outbound>
            <outbound type="class" confirmed="yes">org.mvel.conversion.Converter</outbound>
            <feature confirmed="yes">
                <name>org.mvel.conversion.FloatCH$8.FloatCH$8()</name>
                <outbound type="feature" confirmed="no">java.lang.Object.Object()</outbound>
                <inbound type="feature" confirmed="yes">org.mvel.conversion.FloatCH.static {}</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.conversion.FloatCH$8.convert(java.lang.Object)</name>
                <outbound type="class" confirmed="no">java.lang.Float</outbound>
                <outbound type="class" confirmed="no">java.lang.Object</outbound>
            </feature>
        </class>
        <class confirmed="yes">
            <name>org.mvel.conversion.FloatCH$9</name>
            <outbound type="class" confirmed="no">java.lang.Object</outbound>
            <outbound type="class" confirmed="yes">org.mvel.conversion.Converter</outbound>
            <feature confirmed="yes">
                <name>org.mvel.conversion.FloatCH$9.FloatCH$9()</name>
                <outbound type="feature" confirmed="no">java.lang.Object.Object()</outbound>
                <inbound type="feature" confirmed="yes">org.mvel.conversion.FloatCH.static {}</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.conversion.FloatCH$9.convert(java.lang.Object)</name>
                <outbound type="class" confirmed="no">java.lang.Float</outbound>
                <outbound type="class" confirmed="no">java.lang.Object</outbound>
            </feature>
        </class>
        <class confirmed="yes">
            <name>org.mvel.conversion.IntArrayCH</name>
            <outbound type="class" confirmed="no">java.lang.Object</outbound>
            <outbound type="class" confirmed="yes">org.mvel.ConversionHandler</outbound>
            <feature confirmed="yes">
                <name>org.mvel.conversion.IntArrayCH.CNV</name>
                <outbound type="class" confirmed="no">java.util.Map</outbound>
                <inbound type="feature" confirmed="yes">org.mvel.conversion.IntArrayCH.canConvertFrom(java.lang.Class)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.conversion.IntArrayCH.convertFrom(java.lang.Object)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.conversion.IntArrayCH.static {}</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.conversion.IntArrayCH.IntArrayCH()</name>
                <outbound type="feature" confirmed="no">java.lang.Object.Object()</outbound>
                <inbound type="feature" confirmed="yes">org.mvel.DataConversion.static {}</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.conversion.IntArrayCH.canConvertFrom(java.lang.Class)</name>
                <outbound type="class" confirmed="no">java.lang.Class</outbound>
                <outbound type="class" confirmed="no">java.lang.Object</outbound>
                <outbound type="class" confirmed="no">java.util.Map</outbound>
                <outbound type="feature" confirmed="no">java.util.Map.containsKey(java.lang.Object)</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.conversion.IntArrayCH.CNV</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.conversion.IntArrayCH.convertFrom(java.lang.Object)</name>
                <outbound type="class" confirmed="no">java.lang.Class</outbound>
                <outbound type="feature" confirmed="no">java.lang.Class.forName(java.lang.String)</outbound>
                <outbound type="feature" confirmed="no">java.lang.Class.getName()</outbound>
                <outbound type="class" confirmed="no">java.lang.ClassNotFoundException</outbound>
                <outbound type="feature" confirmed="no">java.lang.NoClassDefFoundError.NoClassDefFoundError(java.lang.String)</outbound>
                <outbound type="class" confirmed="no">java.lang.Object</outbound>
                <outbound type="feature" confirmed="no">java.lang.Object.getClass()</outbound>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="class" confirmed="no">java.lang.StringBuffer</outbound>
                <outbound type="feature" confirmed="no">java.lang.StringBuffer.StringBuffer(java.lang.String)</outbound>
                <outbound type="feature" confirmed="no">java.lang.StringBuffer.append(java.lang.String)</outbound>
                <outbound type="feature" confirmed="no">java.lang.StringBuffer.toString()</outbound>
                <outbound type="feature" confirmed="no">java.lang.Throwable.getMessage()</outbound>
                <outbound type="class" confirmed="no">java.util.Map</outbound>
                <outbound type="feature" confirmed="no">java.util.Map.containsKey(java.lang.Object)</outbound>
                <outbound type="feature" confirmed="no">java.util.Map.get(java.lang.Object)</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.ConversionException.ConversionException(java.lang.String)</outbound>
                <outbound type="class" confirmed="yes">org.mvel.conversion.Converter</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.conversion.Converter.convert(java.lang.Object)</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.conversion.IntArrayCH.CNV</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.conversion.IntArrayCH.static {}</name>
                <outbound type="class" confirmed="no">java.lang.Class</outbound>
                <outbound type="feature" confirmed="no">java.lang.Class.forName(java.lang.String)</outbound>
                <outbound type="class" confirmed="no">java.lang.ClassNotFoundException</outbound>
                <outbound type="feature" confirmed="no">java.lang.NoClassDefFoundError.NoClassDefFoundError(java.lang.String)</outbound>
                <outbound type="class" confirmed="no">java.lang.Object</outbound>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="feature" confirmed="no">java.lang.Throwable.getMessage()</outbound>
                <outbound type="feature" confirmed="no">java.util.HashMap.HashMap()</outbound>
                <outbound type="class" confirmed="no">java.util.Map</outbound>
                <outbound type="feature" confirmed="no">java.util.Map.put(java.lang.Object, java.lang.Object)</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.conversion.IntArrayCH$1.IntArrayCH$1()</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.conversion.IntArrayCH$2.IntArrayCH$2()</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.conversion.IntArrayCH.CNV</outbound>
            </feature>
        </class>
        <class confirmed="yes">
            <name>org.mvel.conversion.IntArrayCH$1</name>
            <outbound type="class" confirmed="no">java.lang.Object</outbound>
            <outbound type="class" confirmed="yes">org.mvel.conversion.Converter</outbound>
            <feature confirmed="yes">
                <name>org.mvel.conversion.IntArrayCH$1.IntArrayCH$1()</name>
                <outbound type="feature" confirmed="no">java.lang.Object.Object()</outbound>
                <inbound type="feature" confirmed="yes">org.mvel.conversion.IntArrayCH.static {}</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.conversion.IntArrayCH$1.convert(java.lang.Object)</name>
                <outbound type="class" confirmed="no">java.lang.Integer</outbound>
                <outbound type="feature" confirmed="no">java.lang.Integer.Integer(int)</outbound>
                <outbound type="feature" confirmed="no">java.lang.Integer.parseInt(java.lang.String)</outbound>
                <outbound type="class" confirmed="no">java.lang.Object</outbound>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="class" confirmed="no">java.lang.String[]</outbound>
            </feature>
        </class>
        <class confirmed="yes">
            <name>org.mvel.conversion.IntArrayCH$2</name>
            <outbound type="class" confirmed="no">java.lang.Object</outbound>
            <outbound type="class" confirmed="yes">org.mvel.conversion.Converter</outbound>
            <feature confirmed="yes">
                <name>org.mvel.conversion.IntArrayCH$2.IntArrayCH$2()</name>
                <outbound type="feature" confirmed="no">java.lang.Object.Object()</outbound>
                <inbound type="feature" confirmed="yes">org.mvel.conversion.IntArrayCH.static {}</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.conversion.IntArrayCH$2.convert(java.lang.Object)</name>
                <outbound type="class" confirmed="no">java.lang.Integer</outbound>
                <outbound type="feature" confirmed="no">java.lang.Integer.Integer(int)</outbound>
                <outbound type="feature" confirmed="no">java.lang.Integer.parseInt(java.lang.String)</outbound>
                <outbound type="class" confirmed="no">java.lang.Object</outbound>
                <outbound type="class" confirmed="no">java.lang.Object[]</outbound>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="feature" confirmed="no">java.lang.String.valueOf(java.lang.Object)</outbound>
            </feature>
        </class>
        <class confirmed="yes">
            <name>org.mvel.conversion.IntegerCH</name>
            <outbound type="class" confirmed="no">java.lang.Object</outbound>
            <outbound type="class" confirmed="yes">org.mvel.ConversionHandler</outbound>
            <feature confirmed="yes">
                <name>org.mvel.conversion.IntegerCH.CNV</name>
                <outbound type="class" confirmed="no">java.util.Map</outbound>
                <inbound type="feature" confirmed="yes">org.mvel.conversion.IntegerCH.canConvertFrom(java.lang.Class)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.conversion.IntegerCH.convertFrom(java.lang.Object)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.conversion.IntegerCH.static {}</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.conversion.IntegerCH.IntegerCH()</name>
                <outbound type="feature" confirmed="no">java.lang.Object.Object()</outbound>
                <inbound type="feature" confirmed="yes">org.mvel.DataConversion.static {}</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.conversion.IntegerCH.canConvertFrom(java.lang.Class)</name>
                <outbound type="class" confirmed="no">java.lang.Class</outbound>
                <outbound type="class" confirmed="no">java.lang.Object</outbound>
                <outbound type="class" confirmed="no">java.util.Map</outbound>
                <outbound type="feature" confirmed="no">java.util.Map.containsKey(java.lang.Object)</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.conversion.IntegerCH.CNV</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.conversion.IntegerCH.convertFrom(java.lang.Object)</name>
                <outbound type="class" confirmed="no">java.lang.Class</outbound>
                <outbound type="feature" confirmed="no">java.lang.Class.forName(java.lang.String)</outbound>
                <outbound type="feature" confirmed="no">java.lang.Class.getName()</outbound>
                <outbound type="class" confirmed="no">java.lang.ClassNotFoundException</outbound>
                <outbound type="feature" confirmed="no">java.lang.NoClassDefFoundError.NoClassDefFoundError(java.lang.String)</outbound>
                <outbound type="class" confirmed="no">java.lang.Object</outbound>
                <outbound type="feature" confirmed="no">java.lang.Object.getClass()</outbound>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="class" confirmed="no">java.lang.StringBuffer</outbound>
                <outbound type="feature" confirmed="no">java.lang.StringBuffer.StringBuffer(java.lang.String)</outbound>
                <outbound type="feature" confirmed="no">java.lang.StringBuffer.append(java.lang.String)</outbound>
                <outbound type="feature" confirmed="no">java.lang.StringBuffer.toString()</outbound>
                <outbound type="feature" confirmed="no">java.lang.Throwable.getMessage()</outbound>
                <outbound type="class" confirmed="no">java.util.Map</outbound>
                <outbound type="feature" confirmed="no">java.util.Map.containsKey(java.lang.Object)</outbound>
                <outbound type="feature" confirmed="no">java.util.Map.get(java.lang.Object)</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.ConversionException.ConversionException(java.lang.String)</outbound>
                <outbound type="class" confirmed="yes">org.mvel.conversion.Converter</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.conversion.Converter.convert(java.lang.Object)</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.conversion.IntegerCH.CNV</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.conversion.IntegerCH.static {}</name>
                <outbound type="class" confirmed="no">java.lang.Class</outbound>
                <outbound type="feature" confirmed="no">java.lang.Class.forName(java.lang.String)</outbound>
                <outbound type="class" confirmed="no">java.lang.ClassNotFoundException</outbound>
                <outbound type="feature" confirmed="no">java.lang.NoClassDefFoundError.NoClassDefFoundError(java.lang.String)</outbound>
                <outbound type="class" confirmed="no">java.lang.Object</outbound>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="feature" confirmed="no">java.lang.Throwable.getMessage()</outbound>
                <outbound type="feature" confirmed="no">java.util.HashMap.HashMap(int)</outbound>
                <outbound type="class" confirmed="no">java.util.Map</outbound>
                <outbound type="feature" confirmed="no">java.util.Map.put(java.lang.Object, java.lang.Object)</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.conversion.IntegerCH$1.IntegerCH$1()</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.conversion.IntegerCH$10.IntegerCH$10()</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.conversion.IntegerCH$11.IntegerCH$11()</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.conversion.IntegerCH$2.IntegerCH$2()</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.conversion.IntegerCH$3.IntegerCH$3()</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.conversion.IntegerCH$4.IntegerCH$4()</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.conversion.IntegerCH$5.IntegerCH$5()</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.conversion.IntegerCH$6.IntegerCH$6()</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.conversion.IntegerCH$7.IntegerCH$7()</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.conversion.IntegerCH$8.IntegerCH$8()</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.conversion.IntegerCH$9.IntegerCH$9()</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.conversion.IntegerCH.CNV</outbound>
            </feature>
        </class>
        <class confirmed="yes">
            <name>org.mvel.conversion.IntegerCH$1</name>
            <outbound type="class" confirmed="no">java.lang.Object</outbound>
            <outbound type="class" confirmed="yes">org.mvel.conversion.Converter</outbound>
            <feature confirmed="yes">
                <name>org.mvel.conversion.IntegerCH$1.IntegerCH$1()</name>
                <outbound type="feature" confirmed="no">java.lang.Object.Object()</outbound>
                <inbound type="feature" confirmed="yes">org.mvel.conversion.IntegerCH.static {}</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.conversion.IntegerCH$1.convert(java.lang.Object)</name>
                <outbound type="feature" confirmed="no">java.lang.Integer.Integer(int)</outbound>
                <outbound type="feature" confirmed="no">java.lang.Integer.parseInt(java.lang.String)</outbound>
                <outbound type="class" confirmed="no">java.lang.Object</outbound>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="feature" confirmed="no">java.lang.String.length()</outbound>
                <outbound type="feature" confirmed="no">java.lang.String.valueOf(java.lang.Object)</outbound>
            </feature>
        </class>
        <class confirmed="yes">
            <name>org.mvel.conversion.IntegerCH$10</name>
            <outbound type="class" confirmed="no">java.lang.Object</outbound>
            <outbound type="class" confirmed="yes">org.mvel.conversion.Converter</outbound>
            <feature confirmed="yes">
                <name>org.mvel.conversion.IntegerCH$10.IntegerCH$10()</name>
                <outbound type="feature" confirmed="no">java.lang.Object.Object()</outbound>
                <inbound type="feature" confirmed="yes">org.mvel.conversion.IntegerCH.static {}</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.conversion.IntegerCH$10.convert(java.lang.Object)</name>
                <outbound type="class" confirmed="no">java.lang.Integer</outbound>
                <outbound type="class" confirmed="no">java.lang.Object</outbound>
            </feature>
        </class>
        <class confirmed="yes">
            <name>org.mvel.conversion.IntegerCH$11</name>
            <outbound type="class" confirmed="no">java.lang.Object</outbound>
            <outbound type="class" confirmed="yes">org.mvel.conversion.Converter</outbound>
            <feature confirmed="yes">
                <name>org.mvel.conversion.IntegerCH$11.IntegerCH$11()</name>
                <outbound type="feature" confirmed="no">java.lang.Object.Object()</outbound>
                <inbound type="feature" confirmed="yes">org.mvel.conversion.IntegerCH.static {}</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.conversion.IntegerCH$11.convert(java.lang.Object)</name>
                <outbound type="class" confirmed="no">java.lang.Integer</outbound>
                <outbound type="class" confirmed="no">java.lang.Object</outbound>
            </feature>
        </class>
        <class confirmed="yes">
            <name>org.mvel.conversion.IntegerCH$2</name>
            <outbound type="class" confirmed="no">java.lang.Object</outbound>
            <outbound type="class" confirmed="yes">org.mvel.conversion.Converter</outbound>
            <feature confirmed="yes">
                <name>org.mvel.conversion.IntegerCH$2.IntegerCH$2()</name>
                <outbound type="feature" confirmed="no">java.lang.Object.Object()</outbound>
                <inbound type="feature" confirmed="yes">org.mvel.conversion.IntegerCH.static {}</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.conversion.IntegerCH$2.convert(java.lang.Object)</name>
                <outbound type="class" confirmed="no">java.lang.Integer</outbound>
                <outbound type="class" confirmed="no">java.lang.Object</outbound>
            </feature>
        </class>
        <class confirmed="yes">
            <name>org.mvel.conversion.IntegerCH$3</name>
            <outbound type="class" confirmed="no">java.lang.Object</outbound>
            <outbound type="class" confirmed="yes">org.mvel.conversion.Converter</outbound>
            <feature confirmed="yes">
                <name>org.mvel.conversion.IntegerCH$3.IntegerCH$3()</name>
                <outbound type="feature" confirmed="no">java.lang.Object.Object()</outbound>
                <inbound type="feature" confirmed="yes">org.mvel.conversion.IntegerCH.static {}</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.conversion.IntegerCH$3.convert(java.lang.Object)</name>
                <outbound type="class" confirmed="no">java.lang.Integer</outbound>
                <outbound type="class" confirmed="no">java.lang.Object</outbound>
            </feature>
        </class>
        <class confirmed="yes">
            <name>org.mvel.conversion.IntegerCH$4</name>
            <outbound type="class" confirmed="no">java.lang.Object</outbound>
            <outbound type="class" confirmed="yes">org.mvel.conversion.Converter</outbound>
            <feature confirmed="yes">
                <name>org.mvel.conversion.IntegerCH$4.IntegerCH$4()</name>
                <outbound type="feature" confirmed="no">java.lang.Object.Object()</outbound>
                <inbound type="feature" confirmed="yes">org.mvel.conversion.IntegerCH.static {}</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.conversion.IntegerCH$4.convert(java.lang.Object)</name>
                <outbound type="feature" confirmed="no">java.lang.Integer.Integer(int)</outbound>
                <outbound type="feature" confirmed="no">java.lang.Integer.parseInt(java.lang.String)</outbound>
                <outbound type="class" confirmed="no">java.lang.Object</outbound>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
            </feature>
        </class>
        <class confirmed="yes">
            <name>org.mvel.conversion.IntegerCH$5</name>
            <outbound type="class" confirmed="no">java.lang.Object</outbound>
            <outbound type="class" confirmed="yes">org.mvel.conversion.Converter</outbound>
            <feature confirmed="yes">
                <name>org.mvel.conversion.IntegerCH$5.IntegerCH$5()</name>
                <outbound type="feature" confirmed="no">java.lang.Object.Object()</outbound>
                <inbound type="feature" confirmed="yes">org.mvel.conversion.IntegerCH.static {}</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.conversion.IntegerCH$5.convert(java.lang.Object)</name>
                <outbound type="feature" confirmed="no">java.lang.Float.Float(float)</outbound>
                <outbound type="class" confirmed="no">java.lang.Object</outbound>
                <outbound type="class" confirmed="no">java.lang.Short</outbound>
                <outbound type="feature" confirmed="no">java.lang.Short.floatValue()</outbound>
            </feature>
        </class>
        <class confirmed="yes">
            <name>org.mvel.conversion.IntegerCH$6</name>
            <outbound type="class" confirmed="no">java.lang.Object</outbound>
            <outbound type="class" confirmed="yes">org.mvel.conversion.Converter</outbound>
            <feature confirmed="yes">
                <name>org.mvel.conversion.IntegerCH$6.IntegerCH$6()</name>
                <outbound type="feature" confirmed="no">java.lang.Object.Object()</outbound>
                <inbound type="feature" confirmed="yes">org.mvel.conversion.IntegerCH.static {}</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.conversion.IntegerCH$6.convert(java.lang.Object)</name>
                <outbound type="feature" confirmed="no">java.lang.Integer.Integer(int)</outbound>
                <outbound type="class" confirmed="no">java.lang.Long</outbound>
                <outbound type="feature" confirmed="no">java.lang.Long.intValue()</outbound>
                <outbound type="feature" confirmed="no">java.lang.Long.longValue()</outbound>
                <outbound type="class" confirmed="no">java.lang.Object</outbound>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="feature" confirmed="no">java.lang.String.valueOf(java.lang.Object)</outbound>
                <outbound type="class" confirmed="no">java.lang.StringBuffer</outbound>
                <outbound type="feature" confirmed="no">java.lang.StringBuffer.StringBuffer(java.lang.String)</outbound>
                <outbound type="feature" confirmed="no">java.lang.StringBuffer.append(java.lang.String)</outbound>
                <outbound type="feature" confirmed="no">java.lang.StringBuffer.toString()</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.ConversionException.ConversionException(java.lang.String)</outbound>
            </feature>
        </class>
        <class confirmed="yes">
            <name>org.mvel.conversion.IntegerCH$7</name>
            <outbound type="class" confirmed="no">java.lang.Object</outbound>
            <outbound type="class" confirmed="yes">org.mvel.conversion.Converter</outbound>
            <feature confirmed="yes">
                <name>org.mvel.conversion.IntegerCH$7.IntegerCH$7()</name>
                <outbound type="feature" confirmed="no">java.lang.Object.Object()</outbound>
                <inbound type="feature" confirmed="yes">org.mvel.conversion.IntegerCH.static {}</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.conversion.IntegerCH$7.convert(java.lang.Object)</name>
                <outbound type="class" confirmed="no">java.lang.Float</outbound>
                <outbound type="feature" confirmed="no">java.lang.Float.floatValue()</outbound>
                <outbound type="feature" confirmed="no">java.lang.Float.intValue()</outbound>
                <outbound type="feature" confirmed="no">java.lang.Integer.Integer(int)</outbound>
                <outbound type="class" confirmed="no">java.lang.Object</outbound>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="feature" confirmed="no">java.lang.String.valueOf(java.lang.Object)</outbound>
                <outbound type="class" confirmed="no">java.lang.StringBuffer</outbound>
                <outbound type="feature" confirmed="no">java.lang.StringBuffer.StringBuffer(java.lang.String)</outbound>
                <outbound type="feature" confirmed="no">java.lang.StringBuffer.append(java.lang.String)</outbound>
                <outbound type="feature" confirmed="no">java.lang.StringBuffer.toString()</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.ConversionException.ConversionException(java.lang.String)</outbound>
            </feature>
        </class>
        <class confirmed="yes">
            <name>org.mvel.conversion.IntegerCH$8</name>
            <outbound type="class" confirmed="no">java.lang.Object</outbound>
            <outbound type="class" confirmed="yes">org.mvel.conversion.Converter</outbound>
            <feature confirmed="yes">
                <name>org.mvel.conversion.IntegerCH$8.IntegerCH$8()</name>
                <outbound type="feature" confirmed="no">java.lang.Object.Object()</outbound>
                <inbound type="feature" confirmed="yes">org.mvel.conversion.IntegerCH.static {}</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.conversion.IntegerCH$8.convert(java.lang.Object)</name>
                <outbound type="class" confirmed="no">java.lang.Double</outbound>
                <outbound type="feature" confirmed="no">java.lang.Double.doubleValue()</outbound>
                <outbound type="feature" confirmed="no">java.lang.Double.intValue()</outbound>
                <outbound type="feature" confirmed="no">java.lang.Integer.Integer(int)</outbound>
                <outbound type="class" confirmed="no">java.lang.Object</outbound>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="feature" confirmed="no">java.lang.String.valueOf(java.lang.Object)</outbound>
                <outbound type="class" confirmed="no">java.lang.StringBuffer</outbound>
                <outbound type="feature" confirmed="no">java.lang.StringBuffer.StringBuffer(java.lang.String)</outbound>
                <outbound type="feature" confirmed="no">java.lang.StringBuffer.append(java.lang.String)</outbound>
                <outbound type="feature" confirmed="no">java.lang.StringBuffer.toString()</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.ConversionException.ConversionException(java.lang.String)</outbound>
            </feature>
        </class>
        <class confirmed="yes">
            <name>org.mvel.conversion.IntegerCH$9</name>
            <outbound type="class" confirmed="no">java.lang.Object</outbound>
            <outbound type="class" confirmed="yes">org.mvel.conversion.Converter</outbound>
            <feature confirmed="yes">
                <name>org.mvel.conversion.IntegerCH$9.IntegerCH$9()</name>
                <outbound type="feature" confirmed="no">java.lang.Object.Object()</outbound>
                <inbound type="feature" confirmed="yes">org.mvel.conversion.IntegerCH.static {}</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.conversion.IntegerCH$9.convert(java.lang.Object)</name>
                <outbound type="class" confirmed="no">java.lang.Object</outbound>
            </feature>
        </class>
        <class confirmed="yes">
            <name>org.mvel.conversion.LongCH</name>
            <outbound type="class" confirmed="no">java.lang.Object</outbound>
            <outbound type="class" confirmed="yes">org.mvel.ConversionHandler</outbound>
            <feature confirmed="yes">
                <name>org.mvel.conversion.LongCH.CNV</name>
                <outbound type="class" confirmed="no">java.util.Map</outbound>
                <inbound type="feature" confirmed="yes">org.mvel.conversion.LongCH.access$0()</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.conversion.LongCH.canConvertFrom(java.lang.Class)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.conversion.LongCH.convertFrom(java.lang.Object)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.conversion.LongCH.static {}</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.conversion.LongCH.LongCH()</name>
                <outbound type="feature" confirmed="no">java.lang.Object.Object()</outbound>
                <inbound type="feature" confirmed="yes">org.mvel.DataConversion.static {}</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.conversion.LongCH.access$0()</name>
                <outbound type="class" confirmed="no">java.util.Map</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.conversion.LongCH.CNV</outbound>
                <inbound type="feature" confirmed="yes">org.mvel.conversion.LongCH$2.convert(java.lang.Object)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.conversion.LongCH.canConvertFrom(java.lang.Class)</name>
                <outbound type="class" confirmed="no">java.lang.Class</outbound>
                <outbound type="class" confirmed="no">java.lang.Object</outbound>
                <outbound type="class" confirmed="no">java.util.Map</outbound>
                <outbound type="feature" confirmed="no">java.util.Map.containsKey(java.lang.Object)</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.conversion.LongCH.CNV</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.conversion.LongCH.convertFrom(java.lang.Object)</name>
                <outbound type="class" confirmed="no">java.lang.Class</outbound>
                <outbound type="feature" confirmed="no">java.lang.Class.forName(java.lang.String)</outbound>
                <outbound type="feature" confirmed="no">java.lang.Class.getName()</outbound>
                <outbound type="class" confirmed="no">java.lang.ClassNotFoundException</outbound>
                <outbound type="feature" confirmed="no">java.lang.NoClassDefFoundError.NoClassDefFoundError(java.lang.String)</outbound>
                <outbound type="class" confirmed="no">java.lang.Object</outbound>
                <outbound type="feature" confirmed="no">java.lang.Object.getClass()</outbound>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="class" confirmed="no">java.lang.StringBuffer</outbound>
                <outbound type="feature" confirmed="no">java.lang.StringBuffer.StringBuffer(java.lang.String)</outbound>
                <outbound type="feature" confirmed="no">java.lang.StringBuffer.append(java.lang.String)</outbound>
                <outbound type="feature" confirmed="no">java.lang.StringBuffer.toString()</outbound>
                <outbound type="feature" confirmed="no">java.lang.Throwable.getMessage()</outbound>
                <outbound type="class" confirmed="no">java.util.Map</outbound>
                <outbound type="feature" confirmed="no">java.util.Map.containsKey(java.lang.Object)</outbound>
                <outbound type="feature" confirmed="no">java.util.Map.get(java.lang.Object)</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.ConversionException.ConversionException(java.lang.String)</outbound>
                <outbound type="class" confirmed="yes">org.mvel.conversion.Converter</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.conversion.Converter.convert(java.lang.Object)</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.conversion.LongCH.CNV</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.conversion.LongCH.static {}</name>
                <outbound type="class" confirmed="no">java.lang.Class</outbound>
                <outbound type="feature" confirmed="no">java.lang.Class.forName(java.lang.String)</outbound>
                <outbound type="class" confirmed="no">java.lang.ClassNotFoundException</outbound>
                <outbound type="feature" confirmed="no">java.lang.NoClassDefFoundError.NoClassDefFoundError(java.lang.String)</outbound>
                <outbound type="class" confirmed="no">java.lang.Object</outbound>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="feature" confirmed="no">java.lang.Throwable.getMessage()</outbound>
                <outbound type="feature" confirmed="no">java.util.HashMap.HashMap()</outbound>
                <outbound type="class" confirmed="no">java.util.Map</outbound>
                <outbound type="feature" confirmed="no">java.util.Map.put(java.lang.Object, java.lang.Object)</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.conversion.LongCH$1.LongCH$1()</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.conversion.LongCH$2.LongCH$2()</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.conversion.LongCH$3.LongCH$3()</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.conversion.LongCH$4.LongCH$4()</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.conversion.LongCH$5.LongCH$5()</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.conversion.LongCH$6.LongCH$6()</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.conversion.LongCH$7.LongCH$7()</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.conversion.LongCH$8.LongCH$8()</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.conversion.LongCH.CNV</outbound>
            </feature>
        </class>
        <class confirmed="yes">
            <name>org.mvel.conversion.LongCH$1</name>
            <outbound type="class" confirmed="no">java.lang.Object</outbound>
            <outbound type="class" confirmed="yes">org.mvel.conversion.Converter</outbound>
            <feature confirmed="yes">
                <name>org.mvel.conversion.LongCH$1.LongCH$1()</name>
                <outbound type="feature" confirmed="no">java.lang.Object.Object()</outbound>
                <inbound type="feature" confirmed="yes">org.mvel.conversion.LongCH.static {}</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.conversion.LongCH$1.convert(java.lang.Object)</name>
                <outbound type="feature" confirmed="no">java.lang.Long.Long(long)</outbound>
                <outbound type="feature" confirmed="no">java.lang.Long.parseLong(java.lang.String)</outbound>
                <outbound type="class" confirmed="no">java.lang.Object</outbound>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="feature" confirmed="no">java.lang.String.length()</outbound>
            </feature>
        </class>
        <class confirmed="yes">
            <name>org.mvel.conversion.LongCH$2</name>
            <outbound type="class" confirmed="no">java.lang.Object</outbound>
            <outbound type="class" confirmed="yes">org.mvel.conversion.Converter</outbound>
            <feature confirmed="yes">
                <name>org.mvel.conversion.LongCH$2.LongCH$2()</name>
                <outbound type="feature" confirmed="no">java.lang.Object.Object()</outbound>
                <inbound type="feature" confirmed="yes">org.mvel.conversion.LongCH.static {}</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.conversion.LongCH$2.convert(java.lang.Object)</name>
                <outbound type="class" confirmed="no">java.lang.Class</outbound>
                <outbound type="feature" confirmed="no">java.lang.Class.forName(java.lang.String)</outbound>
                <outbound type="class" confirmed="no">java.lang.ClassNotFoundException</outbound>
                <outbound type="feature" confirmed="no">java.lang.NoClassDefFoundError.NoClassDefFoundError(java.lang.String)</outbound>
                <outbound type="class" confirmed="no">java.lang.Object</outbound>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="feature" confirmed="no">java.lang.String.valueOf(java.lang.Object)</outbound>
                <outbound type="feature" confirmed="no">java.lang.Throwable.getMessage()</outbound>
                <outbound type="class" confirmed="no">java.util.Map</outbound>
                <outbound type="feature" confirmed="no">java.util.Map.get(java.lang.Object)</outbound>
                <outbound type="class" confirmed="yes">org.mvel.conversion.Converter</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.conversion.Converter.convert(java.lang.Object)</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.conversion.LongCH.access$0()</outbound>
            </feature>
        </class>
        <class confirmed="yes">
            <name>org.mvel.conversion.LongCH$3</name>
            <outbound type="class" confirmed="no">java.lang.Object</outbound>
            <outbound type="class" confirmed="yes">org.mvel.conversion.Converter</outbound>
            <feature confirmed="yes">
                <name>org.mvel.conversion.LongCH$3.LongCH$3()</name>
                <outbound type="feature" confirmed="no">java.lang.Object.Object()</outbound>
                <inbound type="feature" confirmed="yes">org.mvel.conversion.LongCH.static {}</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.conversion.LongCH$3.convert(java.lang.Object)</name>
                <outbound type="class" confirmed="no">java.lang.Long</outbound>
                <outbound type="class" confirmed="no">java.lang.Object</outbound>
            </feature>
        </class>
        <class confirmed="yes">
            <name>org.mvel.conversion.LongCH$4</name>
            <outbound type="class" confirmed="no">java.lang.Object</outbound>
            <outbound type="class" confirmed="yes">org.mvel.conversion.Converter</outbound>
            <feature confirmed="yes">
                <name>org.mvel.conversion.LongCH$4.LongCH$4()</name>
                <outbound type="feature" confirmed="no">java.lang.Object.Object()</outbound>
                <inbound type="feature" confirmed="yes">org.mvel.conversion.LongCH.static {}</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.conversion.LongCH$4.convert(java.lang.Object)</name>
                <outbound type="class" confirmed="no">java.lang.Long</outbound>
                <outbound type="class" confirmed="no">java.lang.Object</outbound>
            </feature>
        </class>
        <class confirmed="yes">
            <name>org.mvel.conversion.LongCH$5</name>
            <outbound type="class" confirmed="no">java.lang.Object</outbound>
            <outbound type="class" confirmed="yes">org.mvel.conversion.Converter</outbound>
            <feature confirmed="yes">
                <name>org.mvel.conversion.LongCH$5.LongCH$5()</name>
                <outbound type="feature" confirmed="no">java.lang.Object.Object()</outbound>
                <inbound type="feature" confirmed="yes">org.mvel.conversion.LongCH.static {}</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.conversion.LongCH$5.convert(java.lang.Object)</name>
                <outbound type="feature" confirmed="no">java.lang.Long.Long(long)</outbound>
                <outbound type="class" confirmed="no">java.lang.Object</outbound>
                <outbound type="class" confirmed="no">java.lang.Short</outbound>
                <outbound type="feature" confirmed="no">java.lang.Short.longValue()</outbound>
            </feature>
        </class>
        <class confirmed="yes">
            <name>org.mvel.conversion.LongCH$6</name>
            <outbound type="class" confirmed="no">java.lang.Object</outbound>
            <outbound type="class" confirmed="yes">org.mvel.conversion.Converter</outbound>
            <feature confirmed="yes">
                <name>org.mvel.conversion.LongCH$6.LongCH$6()</name>
                <outbound type="feature" confirmed="no">java.lang.Object.Object()</outbound>
                <inbound type="feature" confirmed="yes">org.mvel.conversion.LongCH.static {}</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.conversion.LongCH$6.convert(java.lang.Object)</name>
                <outbound type="class" confirmed="no">java.lang.Long</outbound>
                <outbound type="feature" confirmed="no">java.lang.Long.Long(long)</outbound>
                <outbound type="feature" confirmed="no">java.lang.Long.longValue()</outbound>
                <outbound type="class" confirmed="no">java.lang.Object</outbound>
            </feature>
        </class>
        <class confirmed="yes">
            <name>org.mvel.conversion.LongCH$7</name>
            <outbound type="class" confirmed="no">java.lang.Object</outbound>
            <outbound type="class" confirmed="yes">org.mvel.conversion.Converter</outbound>
            <feature confirmed="yes">
                <name>org.mvel.conversion.LongCH$7.LongCH$7()</name>
                <outbound type="feature" confirmed="no">java.lang.Object.Object()</outbound>
                <inbound type="feature" confirmed="yes">org.mvel.conversion.LongCH.static {}</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.conversion.LongCH$7.convert(java.lang.Object)</name>
                <outbound type="class" confirmed="no">java.lang.Integer</outbound>
                <outbound type="feature" confirmed="no">java.lang.Integer.longValue()</outbound>
                <outbound type="feature" confirmed="no">java.lang.Long.Long(long)</outbound>
                <outbound type="class" confirmed="no">java.lang.Object</outbound>
            </feature>
        </class>
        <class confirmed="yes">
            <name>org.mvel.conversion.LongCH$8</name>
            <outbound type="class" confirmed="no">java.lang.Object</outbound>
            <outbound type="class" confirmed="yes">org.mvel.conversion.Converter</outbound>
            <feature confirmed="yes">
                <name>org.mvel.conversion.LongCH$8.LongCH$8()</name>
                <outbound type="feature" confirmed="no">java.lang.Object.Object()</outbound>
                <inbound type="feature" confirmed="yes">org.mvel.conversion.LongCH.static {}</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.conversion.LongCH$8.convert(java.lang.Object)</name>
                <outbound type="class" confirmed="no">java.lang.Long</outbound>
                <outbound type="class" confirmed="no">java.lang.Object</outbound>
            </feature>
        </class>
        <class confirmed="yes">
            <name>org.mvel.conversion.ObjectCH</name>
            <outbound type="class" confirmed="no">java.lang.Object</outbound>
            <outbound type="class" confirmed="yes">org.mvel.ConversionHandler</outbound>
            <feature confirmed="yes">
                <name>org.mvel.conversion.ObjectCH.ObjectCH()</name>
                <outbound type="feature" confirmed="no">java.lang.Object.Object()</outbound>
                <inbound type="feature" confirmed="yes">org.mvel.DataConversion.static {}</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.conversion.ObjectCH.canConvertFrom(java.lang.Class)</name>
                <outbound type="class" confirmed="no">java.lang.Class</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.conversion.ObjectCH.convertFrom(java.lang.Object)</name>
                <outbound type="class" confirmed="no">java.lang.Object</outbound>
            </feature>
        </class>
        <class confirmed="yes">
            <name>org.mvel.conversion.PrimArrayHandler</name>
            <outbound type="class" confirmed="no">java.lang.Object</outbound>
            <outbound type="class" confirmed="yes">org.mvel.ConversionHandler</outbound>
            <inbound type="feature" confirmed="yes">org.mvel.conversion.PrimArrayHandler$1.PrimArrayHandler$1(org.mvel.conversion.PrimArrayHandler)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.conversion.PrimArrayHandler$1.convert(java.lang.Object)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.conversion.PrimArrayHandler$1.this$0</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.conversion.PrimArrayHandler$2.PrimArrayHandler$2(org.mvel.conversion.PrimArrayHandler)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.conversion.PrimArrayHandler$2.convert(java.lang.Object)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.conversion.PrimArrayHandler$2.this$0</inbound>
            <feature confirmed="yes">
                <name>org.mvel.conversion.PrimArrayHandler.CNV</name>
                <outbound type="class" confirmed="no">java.util.Map</outbound>
                <inbound type="feature" confirmed="yes">org.mvel.conversion.PrimArrayHandler.PrimArrayHandler(java.lang.Class)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.conversion.PrimArrayHandler.canConvertFrom(java.lang.Class)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.conversion.PrimArrayHandler.convertFrom(java.lang.Object)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.conversion.PrimArrayHandler.PrimArrayHandler(java.lang.Class)</name>
                <outbound type="class" confirmed="no">java.lang.Class</outbound>
                <outbound type="feature" confirmed="no">java.lang.Class.forName(java.lang.String)</outbound>
                <outbound type="class" confirmed="no">java.lang.ClassNotFoundException</outbound>
                <outbound type="feature" confirmed="no">java.lang.NoClassDefFoundError.NoClassDefFoundError(java.lang.String)</outbound>
                <outbound type="class" confirmed="no">java.lang.Object</outbound>
                <outbound type="feature" confirmed="no">java.lang.Object.Object()</outbound>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="feature" confirmed="no">java.lang.Throwable.getMessage()</outbound>
                <outbound type="feature" confirmed="no">java.util.HashMap.HashMap()</outbound>
                <outbound type="class" confirmed="no">java.util.Map</outbound>
                <outbound type="feature" confirmed="no">java.util.Map.put(java.lang.Object, java.lang.Object)</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.conversion.PrimArrayHandler$1.PrimArrayHandler$1(org.mvel.conversion.PrimArrayHandler)</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.conversion.PrimArrayHandler$2.PrimArrayHandler$2(org.mvel.conversion.PrimArrayHandler)</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.conversion.PrimArrayHandler.CNV</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.conversion.PrimArrayHandler.primitiveType</outbound>
                <inbound type="feature" confirmed="yes">org.mvel.DataConversion.static {}</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.conversion.PrimArrayHandler.access$0(org.mvel.conversion.PrimArrayHandler)</name>
                <outbound type="class" confirmed="no">java.lang.Class</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.conversion.PrimArrayHandler.primitiveType</outbound>
                <inbound type="feature" confirmed="yes">org.mvel.conversion.PrimArrayHandler$1.convert(java.lang.Object)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.conversion.PrimArrayHandler$2.convert(java.lang.Object)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.conversion.PrimArrayHandler.access$1(java.lang.Class, java.lang.Object[], java.lang.Class)</name>
                <outbound type="class" confirmed="no">java.lang.Class</outbound>
                <outbound type="class" confirmed="no">java.lang.Object</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.conversion.PrimArrayHandler.handleLooseTypeConversion(java.lang.Class, java.lang.Object[], java.lang.Class)</outbound>
                <inbound type="feature" confirmed="yes">org.mvel.conversion.PrimArrayHandler$1.convert(java.lang.Object)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.conversion.PrimArrayHandler$2.convert(java.lang.Object)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.conversion.PrimArrayHandler.canConvertFrom(java.lang.Class)</name>
                <outbound type="class" confirmed="no">java.lang.Class</outbound>
                <outbound type="class" confirmed="no">java.lang.Object</outbound>
                <outbound type="class" confirmed="no">java.util.Map</outbound>
                <outbound type="feature" confirmed="no">java.util.Map.containsKey(java.lang.Object)</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.conversion.PrimArrayHandler.CNV</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.conversion.PrimArrayHandler.convertFrom(java.lang.Object)</name>
                <outbound type="class" confirmed="no">java.lang.Class</outbound>
                <outbound type="feature" confirmed="no">java.lang.Class.getName()</outbound>
                <outbound type="class" confirmed="no">java.lang.Object</outbound>
                <outbound type="feature" confirmed="no">java.lang.Object.getClass()</outbound>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="class" confirmed="no">java.lang.StringBuffer</outbound>
                <outbound type="feature" confirmed="no">java.lang.StringBuffer.StringBuffer(java.lang.String)</outbound>
                <outbound type="feature" confirmed="no">java.lang.StringBuffer.append(java.lang.String)</outbound>
                <outbound type="feature" confirmed="no">java.lang.StringBuffer.toString()</outbound>
                <outbound type="class" confirmed="no">java.util.Map</outbound>
                <outbound type="feature" confirmed="no">java.util.Map.containsKey(java.lang.Object)</outbound>
                <outbound type="feature" confirmed="no">java.util.Map.get(java.lang.Object)</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.ConversionException.ConversionException(java.lang.String)</outbound>
                <outbound type="class" confirmed="yes">org.mvel.conversion.Converter</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.conversion.Converter.convert(java.lang.Object)</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.conversion.PrimArrayHandler.CNV</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.conversion.PrimArrayHandler.primitiveType</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.conversion.PrimArrayHandler.handleLooseTypeConversion(java.lang.Class, java.lang.Object[], java.lang.Class)</name>
                <outbound type="class" confirmed="no">java.lang.Class</outbound>
                <outbound type="feature" confirmed="no">java.lang.Class.getComponentType()</outbound>
                <outbound type="feature" confirmed="no">java.lang.Class.getName()</outbound>
                <outbound type="class" confirmed="no">java.lang.Object</outbound>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="class" confirmed="no">java.lang.StringBuffer</outbound>
                <outbound type="feature" confirmed="no">java.lang.StringBuffer.StringBuffer(java.lang.String)</outbound>
                <outbound type="feature" confirmed="no">java.lang.StringBuffer.append(java.lang.String)</outbound>
                <outbound type="feature" confirmed="no">java.lang.StringBuffer.toString()</outbound>
                <outbound type="feature" confirmed="no">java.lang.reflect.Array.newInstance(java.lang.Class, int)</outbound>
                <outbound type="feature" confirmed="no">java.lang.reflect.Array.set(java.lang.Object, int, java.lang.Object)</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.ConversionException.ConversionException(java.lang.String)</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.DataConversion.canConvert(java.lang.Class, java.lang.Class)</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.DataConversion.convert(java.lang.Object, java.lang.Class)</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.util.PropertyTools.getBaseComponentType(java.lang.Class)</outbound>
                <inbound type="feature" confirmed="yes">org.mvel.conversion.PrimArrayHandler.access$1(java.lang.Class, java.lang.Object[], java.lang.Class)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.conversion.PrimArrayHandler.primitiveType</name>
                <outbound type="class" confirmed="no">java.lang.Class</outbound>
                <inbound type="feature" confirmed="yes">org.mvel.conversion.PrimArrayHandler.PrimArrayHandler(java.lang.Class)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.conversion.PrimArrayHandler.access$0(org.mvel.conversion.PrimArrayHandler)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.conversion.PrimArrayHandler.convertFrom(java.lang.Object)</inbound>
            </feature>
        </class>
        <class confirmed="yes">
            <name>org.mvel.conversion.PrimArrayHandler$1</name>
            <outbound type="class" confirmed="no">java.lang.Object</outbound>
            <outbound type="class" confirmed="yes">org.mvel.conversion.Converter</outbound>
            <feature confirmed="yes">
                <name>org.mvel.conversion.PrimArrayHandler$1.PrimArrayHandler$1(org.mvel.conversion.PrimArrayHandler)</name>
                <outbound type="feature" confirmed="no">java.lang.Object.Object()</outbound>
                <outbound type="class" confirmed="yes">org.mvel.conversion.PrimArrayHandler</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.conversion.PrimArrayHandler$1.this$0</outbound>
                <inbound type="feature" confirmed="yes">org.mvel.conversion.PrimArrayHandler.PrimArrayHandler(java.lang.Class)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.conversion.PrimArrayHandler$1.convert(java.lang.Object)</name>
                <outbound type="class" confirmed="no">java.lang.Class</outbound>
                <outbound type="class" confirmed="no">java.lang.Object</outbound>
                <outbound type="feature" confirmed="no">java.lang.Object.getClass()</outbound>
                <outbound type="class" confirmed="no">java.lang.Object[]</outbound>
                <outbound type="class" confirmed="yes">org.mvel.conversion.PrimArrayHandler</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.conversion.PrimArrayHandler$1.this$0</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.conversion.PrimArrayHandler.access$0(org.mvel.conversion.PrimArrayHandler)</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.conversion.PrimArrayHandler.access$1(java.lang.Class, java.lang.Object[], java.lang.Class)</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.conversion.PrimArrayHandler$1.this$0</name>
                <outbound type="class" confirmed="yes">org.mvel.conversion.PrimArrayHandler</outbound>
                <inbound type="feature" confirmed="yes">org.mvel.conversion.PrimArrayHandler$1.PrimArrayHandler$1(org.mvel.conversion.PrimArrayHandler)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.conversion.PrimArrayHandler$1.convert(java.lang.Object)</inbound>
            </feature>
        </class>
        <class confirmed="yes">
            <name>org.mvel.conversion.PrimArrayHandler$2</name>
            <outbound type="class" confirmed="no">java.lang.Object</outbound>
            <outbound type="class" confirmed="yes">org.mvel.conversion.Converter</outbound>
            <feature confirmed="yes">
                <name>org.mvel.conversion.PrimArrayHandler$2.PrimArrayHandler$2(org.mvel.conversion.PrimArrayHandler)</name>
                <outbound type="feature" confirmed="no">java.lang.Object.Object()</outbound>
                <outbound type="class" confirmed="yes">org.mvel.conversion.PrimArrayHandler</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.conversion.PrimArrayHandler$2.this$0</outbound>
                <inbound type="feature" confirmed="yes">org.mvel.conversion.PrimArrayHandler.PrimArrayHandler(java.lang.Class)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.conversion.PrimArrayHandler$2.convert(java.lang.Object)</name>
                <outbound type="class" confirmed="no">java.lang.Class</outbound>
                <outbound type="class" confirmed="no">java.lang.Object</outbound>
                <outbound type="feature" confirmed="no">java.lang.Object.getClass()</outbound>
                <outbound type="class" confirmed="no">java.lang.String[]</outbound>
                <outbound type="class" confirmed="yes">org.mvel.conversion.PrimArrayHandler</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.conversion.PrimArrayHandler$2.this$0</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.conversion.PrimArrayHandler.access$0(org.mvel.conversion.PrimArrayHandler)</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.conversion.PrimArrayHandler.access$1(java.lang.Class, java.lang.Object[], java.lang.Class)</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.conversion.PrimArrayHandler$2.this$0</name>
                <outbound type="class" confirmed="yes">org.mvel.conversion.PrimArrayHandler</outbound>
                <inbound type="feature" confirmed="yes">org.mvel.conversion.PrimArrayHandler$2.PrimArrayHandler$2(org.mvel.conversion.PrimArrayHandler)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.conversion.PrimArrayHandler$2.convert(java.lang.Object)</inbound>
            </feature>
        </class>
        <class confirmed="yes">
            <name>org.mvel.conversion.PrimIntArrayCH</name>
            <outbound type="class" confirmed="no">java.lang.Object</outbound>
            <outbound type="class" confirmed="yes">org.mvel.ConversionHandler</outbound>
            <feature confirmed="yes">
                <name>org.mvel.conversion.PrimIntArrayCH.CNV</name>
                <outbound type="class" confirmed="no">java.util.Map</outbound>
                <inbound type="feature" confirmed="yes">org.mvel.conversion.PrimIntArrayCH.canConvertFrom(java.lang.Class)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.conversion.PrimIntArrayCH.convertFrom(java.lang.Object)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.conversion.PrimIntArrayCH.static {}</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.conversion.PrimIntArrayCH.PrimIntArrayCH()</name>
                <outbound type="feature" confirmed="no">java.lang.Object.Object()</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.conversion.PrimIntArrayCH.canConvertFrom(java.lang.Class)</name>
                <outbound type="class" confirmed="no">java.lang.Class</outbound>
                <outbound type="class" confirmed="no">java.lang.Object</outbound>
                <outbound type="class" confirmed="no">java.util.Map</outbound>
                <outbound type="feature" confirmed="no">java.util.Map.containsKey(java.lang.Object)</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.conversion.PrimIntArrayCH.CNV</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.conversion.PrimIntArrayCH.convertFrom(java.lang.Object)</name>
                <outbound type="class" confirmed="no">java.lang.Class</outbound>
                <outbound type="feature" confirmed="no">java.lang.Class.forName(java.lang.String)</outbound>
                <outbound type="feature" confirmed="no">java.lang.Class.getName()</outbound>
                <outbound type="class" confirmed="no">java.lang.ClassNotFoundException</outbound>
                <outbound type="feature" confirmed="no">java.lang.NoClassDefFoundError.NoClassDefFoundError(java.lang.String)</outbound>
                <outbound type="class" confirmed="no">java.lang.Object</outbound>
                <outbound type="feature" confirmed="no">java.lang.Object.getClass()</outbound>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="class" confirmed="no">java.lang.StringBuffer</outbound>
                <outbound type="feature" confirmed="no">java.lang.StringBuffer.StringBuffer(java.lang.String)</outbound>
                <outbound type="feature" confirmed="no">java.lang.StringBuffer.append(java.lang.String)</outbound>
                <outbound type="feature" confirmed="no">java.lang.StringBuffer.toString()</outbound>
                <outbound type="feature" confirmed="no">java.lang.Throwable.getMessage()</outbound>
                <outbound type="class" confirmed="no">java.util.Map</outbound>
                <outbound type="feature" confirmed="no">java.util.Map.containsKey(java.lang.Object)</outbound>
                <outbound type="feature" confirmed="no">java.util.Map.get(java.lang.Object)</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.ConversionException.ConversionException(java.lang.String)</outbound>
                <outbound type="class" confirmed="yes">org.mvel.conversion.Converter</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.conversion.Converter.convert(java.lang.Object)</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.conversion.PrimIntArrayCH.CNV</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.conversion.PrimIntArrayCH.static {}</name>
                <outbound type="class" confirmed="no">java.lang.Class</outbound>
                <outbound type="feature" confirmed="no">java.lang.Class.forName(java.lang.String)</outbound>
                <outbound type="class" confirmed="no">java.lang.ClassNotFoundException</outbound>
                <outbound type="feature" confirmed="no">java.lang.NoClassDefFoundError.NoClassDefFoundError(java.lang.String)</outbound>
                <outbound type="class" confirmed="no">java.lang.Object</outbound>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="feature" confirmed="no">java.lang.Throwable.getMessage()</outbound>
                <outbound type="feature" confirmed="no">java.util.HashMap.HashMap()</outbound>
                <outbound type="class" confirmed="no">java.util.Map</outbound>
                <outbound type="feature" confirmed="no">java.util.Map.put(java.lang.Object, java.lang.Object)</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.conversion.PrimIntArrayCH$1.PrimIntArrayCH$1()</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.conversion.PrimIntArrayCH$2.PrimIntArrayCH$2()</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.conversion.PrimIntArrayCH$3.PrimIntArrayCH$3()</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.conversion.PrimIntArrayCH.CNV</outbound>
            </feature>
        </class>
        <class confirmed="yes">
            <name>org.mvel.conversion.PrimIntArrayCH$1</name>
            <outbound type="class" confirmed="no">java.lang.Object</outbound>
            <outbound type="class" confirmed="yes">org.mvel.conversion.Converter</outbound>
            <feature confirmed="yes">
                <name>org.mvel.conversion.PrimIntArrayCH$1.PrimIntArrayCH$1()</name>
                <outbound type="feature" confirmed="no">java.lang.Object.Object()</outbound>
                <inbound type="feature" confirmed="yes">org.mvel.conversion.PrimIntArrayCH.static {}</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.conversion.PrimIntArrayCH$1.convert(java.lang.Object)</name>
                <outbound type="feature" confirmed="no">java.lang.Integer.parseInt(java.lang.String)</outbound>
                <outbound type="class" confirmed="no">java.lang.Object</outbound>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="class" confirmed="no">java.lang.String[]</outbound>
            </feature>
        </class>
        <class confirmed="yes">
            <name>org.mvel.conversion.PrimIntArrayCH$2</name>
            <outbound type="class" confirmed="no">java.lang.Object</outbound>
            <outbound type="class" confirmed="yes">org.mvel.conversion.Converter</outbound>
            <feature confirmed="yes">
                <name>org.mvel.conversion.PrimIntArrayCH$2.PrimIntArrayCH$2()</name>
                <outbound type="feature" confirmed="no">java.lang.Object.Object()</outbound>
                <inbound type="feature" confirmed="yes">org.mvel.conversion.PrimIntArrayCH.static {}</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.conversion.PrimIntArrayCH$2.convert(java.lang.Object)</name>
                <outbound type="feature" confirmed="no">java.lang.Integer.parseInt(java.lang.String)</outbound>
                <outbound type="class" confirmed="no">java.lang.Object</outbound>
                <outbound type="class" confirmed="no">java.lang.Object[]</outbound>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="feature" confirmed="no">java.lang.String.valueOf(java.lang.Object)</outbound>
            </feature>
        </class>
        <class confirmed="yes">
            <name>org.mvel.conversion.PrimIntArrayCH$3</name>
            <outbound type="class" confirmed="no">java.lang.Object</outbound>
            <outbound type="class" confirmed="yes">org.mvel.conversion.Converter</outbound>
            <feature confirmed="yes">
                <name>org.mvel.conversion.PrimIntArrayCH$3.PrimIntArrayCH$3()</name>
                <outbound type="feature" confirmed="no">java.lang.Object.Object()</outbound>
                <inbound type="feature" confirmed="yes">org.mvel.conversion.PrimIntArrayCH.static {}</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.conversion.PrimIntArrayCH$3.convert(java.lang.Object)</name>
                <outbound type="feature" confirmed="no">java.lang.Integer.intValue()</outbound>
                <outbound type="class" confirmed="no">java.lang.Integer[]</outbound>
                <outbound type="class" confirmed="no">java.lang.Object</outbound>
            </feature>
        </class>
        <class confirmed="yes">
            <name>org.mvel.conversion.ShortCH</name>
            <outbound type="class" confirmed="no">java.lang.Object</outbound>
            <outbound type="class" confirmed="yes">org.mvel.ConversionHandler</outbound>
            <feature confirmed="yes">
                <name>org.mvel.conversion.ShortCH.CNV</name>
                <outbound type="class" confirmed="no">java.util.Map</outbound>
                <inbound type="feature" confirmed="yes">org.mvel.conversion.ShortCH.access$0()</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.conversion.ShortCH.canConvertFrom(java.lang.Class)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.conversion.ShortCH.convertFrom(java.lang.Object)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.conversion.ShortCH.static {}</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.conversion.ShortCH.FALSE</name>
                <outbound type="class" confirmed="no">java.lang.Short</outbound>
                <inbound type="feature" confirmed="yes">org.mvel.conversion.ShortCH.access$2()</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.conversion.ShortCH.static {}</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.conversion.ShortCH.ShortCH()</name>
                <outbound type="feature" confirmed="no">java.lang.Object.Object()</outbound>
                <inbound type="feature" confirmed="yes">org.mvel.DataConversion.static {}</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.conversion.ShortCH.TRUE</name>
                <outbound type="class" confirmed="no">java.lang.Short</outbound>
                <inbound type="feature" confirmed="yes">org.mvel.conversion.ShortCH.access$1()</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.conversion.ShortCH.static {}</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.conversion.ShortCH.access$0()</name>
                <outbound type="class" confirmed="no">java.util.Map</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.conversion.ShortCH.CNV</outbound>
                <inbound type="feature" confirmed="yes">org.mvel.conversion.ShortCH$2.convert(java.lang.Object)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.conversion.ShortCH.access$1()</name>
                <outbound type="class" confirmed="no">java.lang.Short</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.conversion.ShortCH.TRUE</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.conversion.ShortCH.access$2()</name>
                <outbound type="class" confirmed="no">java.lang.Short</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.conversion.ShortCH.FALSE</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.conversion.ShortCH.canConvertFrom(java.lang.Class)</name>
                <outbound type="class" confirmed="no">java.lang.Class</outbound>
                <outbound type="class" confirmed="no">java.lang.Object</outbound>
                <outbound type="class" confirmed="no">java.util.Map</outbound>
                <outbound type="feature" confirmed="no">java.util.Map.containsKey(java.lang.Object)</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.conversion.ShortCH.CNV</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.conversion.ShortCH.convertFrom(java.lang.Object)</name>
                <outbound type="class" confirmed="no">java.lang.Class</outbound>
                <outbound type="feature" confirmed="no">java.lang.Class.forName(java.lang.String)</outbound>
                <outbound type="feature" confirmed="no">java.lang.Class.getName()</outbound>
                <outbound type="class" confirmed="no">java.lang.ClassNotFoundException</outbound>
                <outbound type="feature" confirmed="no">java.lang.NoClassDefFoundError.NoClassDefFoundError(java.lang.String)</outbound>
                <outbound type="class" confirmed="no">java.lang.Object</outbound>
                <outbound type="feature" confirmed="no">java.lang.Object.getClass()</outbound>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="class" confirmed="no">java.lang.StringBuffer</outbound>
                <outbound type="feature" confirmed="no">java.lang.StringBuffer.StringBuffer(java.lang.String)</outbound>
                <outbound type="feature" confirmed="no">java.lang.StringBuffer.append(java.lang.String)</outbound>
                <outbound type="feature" confirmed="no">java.lang.StringBuffer.toString()</outbound>
                <outbound type="feature" confirmed="no">java.lang.Throwable.getMessage()</outbound>
                <outbound type="class" confirmed="no">java.util.Map</outbound>
                <outbound type="feature" confirmed="no">java.util.Map.containsKey(java.lang.Object)</outbound>
                <outbound type="feature" confirmed="no">java.util.Map.get(java.lang.Object)</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.ConversionException.ConversionException(java.lang.String)</outbound>
                <outbound type="class" confirmed="yes">org.mvel.conversion.Converter</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.conversion.Converter.convert(java.lang.Object)</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.conversion.ShortCH.CNV</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.conversion.ShortCH.static {}</name>
                <outbound type="class" confirmed="no">java.lang.Class</outbound>
                <outbound type="feature" confirmed="no">java.lang.Class.forName(java.lang.String)</outbound>
                <outbound type="class" confirmed="no">java.lang.ClassNotFoundException</outbound>
                <outbound type="feature" confirmed="no">java.lang.NoClassDefFoundError.NoClassDefFoundError(java.lang.String)</outbound>
                <outbound type="class" confirmed="no">java.lang.Object</outbound>
                <outbound type="class" confirmed="no">java.lang.Short</outbound>
                <outbound type="feature" confirmed="no">java.lang.Short.Short(short)</outbound>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="feature" confirmed="no">java.lang.Throwable.getMessage()</outbound>
                <outbound type="feature" confirmed="no">java.util.HashMap.HashMap()</outbound>
                <outbound type="class" confirmed="no">java.util.Map</outbound>
                <outbound type="feature" confirmed="no">java.util.Map.put(java.lang.Object, java.lang.Object)</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.conversion.ShortCH$1.ShortCH$1()</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.conversion.ShortCH$10.ShortCH$10()</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.conversion.ShortCH$2.ShortCH$2()</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.conversion.ShortCH$3.ShortCH$3()</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.conversion.ShortCH$4.ShortCH$4()</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.conversion.ShortCH$5.ShortCH$5()</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.conversion.ShortCH$6.ShortCH$6()</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.conversion.ShortCH$7.ShortCH$7()</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.conversion.ShortCH$8.ShortCH$8()</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.conversion.ShortCH$9.ShortCH$9()</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.conversion.ShortCH.CNV</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.conversion.ShortCH.FALSE</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.conversion.ShortCH.TRUE</outbound>
            </feature>
        </class>
        <class confirmed="yes">
            <name>org.mvel.conversion.ShortCH$1</name>
            <outbound type="class" confirmed="no">java.lang.Object</outbound>
            <outbound type="class" confirmed="yes">org.mvel.conversion.Converter</outbound>
            <feature confirmed="yes">
                <name>org.mvel.conversion.ShortCH$1.ShortCH$1()</name>
                <outbound type="feature" confirmed="no">java.lang.Object.Object()</outbound>
                <inbound type="feature" confirmed="yes">org.mvel.conversion.ShortCH.static {}</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.conversion.ShortCH$1.convert(java.lang.Object)</name>
                <outbound type="class" confirmed="no">java.lang.Object</outbound>
                <outbound type="class" confirmed="no">java.lang.Short</outbound>
            </feature>
        </class>
        <class confirmed="yes">
            <name>org.mvel.conversion.ShortCH$10</name>
            <outbound type="class" confirmed="no">java.lang.Object</outbound>
            <outbound type="class" confirmed="yes">org.mvel.conversion.Converter</outbound>
            <feature confirmed="yes">
                <name>org.mvel.conversion.ShortCH$10.ShortCH$10()</name>
                <outbound type="feature" confirmed="no">java.lang.Object.Object()</outbound>
                <inbound type="feature" confirmed="yes">org.mvel.conversion.ShortCH.static {}</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.conversion.ShortCH$10.convert(java.lang.Object)</name>
                <outbound type="class" confirmed="no">java.lang.Object</outbound>
                <outbound type="class" confirmed="no">java.lang.Short</outbound>
            </feature>
        </class>
        <class confirmed="yes">
            <name>org.mvel.conversion.ShortCH$2</name>
            <outbound type="class" confirmed="no">java.lang.Object</outbound>
            <outbound type="class" confirmed="yes">org.mvel.conversion.Converter</outbound>
            <feature confirmed="yes">
                <name>org.mvel.conversion.ShortCH$2.ShortCH$2()</name>
                <outbound type="feature" confirmed="no">java.lang.Object.Object()</outbound>
                <inbound type="feature" confirmed="yes">org.mvel.conversion.ShortCH.static {}</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.conversion.ShortCH$2.convert(java.lang.Object)</name>
                <outbound type="class" confirmed="no">java.lang.Class</outbound>
                <outbound type="feature" confirmed="no">java.lang.Class.forName(java.lang.String)</outbound>
                <outbound type="class" confirmed="no">java.lang.ClassNotFoundException</outbound>
                <outbound type="feature" confirmed="no">java.lang.NoClassDefFoundError.NoClassDefFoundError(java.lang.String)</outbound>
                <outbound type="class" confirmed="no">java.lang.Object</outbound>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="feature" confirmed="no">java.lang.String.valueOf(java.lang.Object)</outbound>
                <outbound type="feature" confirmed="no">java.lang.Throwable.getMessage()</outbound>
                <outbound type="class" confirmed="no">java.util.Map</outbound>
                <outbound type="feature" confirmed="no">java.util.Map.get(java.lang.Object)</outbound>
                <outbound type="class" confirmed="yes">org.mvel.conversion.Converter</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.conversion.Converter.convert(java.lang.Object)</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.conversion.ShortCH.access$0()</outbound>
            </feature>
        </class>
        <class confirmed="yes">
            <name>org.mvel.conversion.ShortCH$3</name>
            <outbound type="class" confirmed="no">java.lang.Object</outbound>
            <outbound type="class" confirmed="yes">org.mvel.conversion.Converter</outbound>
            <feature confirmed="yes">
                <name>org.mvel.conversion.ShortCH$3.ShortCH$3()</name>
                <outbound type="feature" confirmed="no">java.lang.Object.Object()</outbound>
                <inbound type="feature" confirmed="yes">org.mvel.conversion.ShortCH.static {}</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.conversion.ShortCH$3.convert(java.lang.Object)</name>
                <outbound type="class" confirmed="no">java.lang.Object</outbound>
                <outbound type="class" confirmed="no">java.lang.Short</outbound>
            </feature>
        </class>
        <class confirmed="yes">
            <name>org.mvel.conversion.ShortCH$4</name>
            <outbound type="class" confirmed="no">java.lang.Object</outbound>
            <outbound type="class" confirmed="yes">org.mvel.conversion.Converter</outbound>
            <feature confirmed="yes">
                <name>org.mvel.conversion.ShortCH$4.ShortCH$4()</name>
                <outbound type="feature" confirmed="no">java.lang.Object.Object()</outbound>
                <inbound type="feature" confirmed="yes">org.mvel.conversion.ShortCH.static {}</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.conversion.ShortCH$4.convert(java.lang.Object)</name>
                <outbound type="class" confirmed="no">java.lang.Object</outbound>
                <outbound type="class" confirmed="no">java.lang.Short</outbound>
            </feature>
        </class>
        <class confirmed="yes">
            <name>org.mvel.conversion.ShortCH$5</name>
            <outbound type="class" confirmed="no">java.lang.Object</outbound>
            <outbound type="class" confirmed="yes">org.mvel.conversion.Converter</outbound>
            <feature confirmed="yes">
                <name>org.mvel.conversion.ShortCH$5.ShortCH$5()</name>
                <outbound type="feature" confirmed="no">java.lang.Object.Object()</outbound>
                <inbound type="feature" confirmed="yes">org.mvel.conversion.ShortCH.static {}</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.conversion.ShortCH$5.convert(java.lang.Object)</name>
                <outbound type="class" confirmed="no">java.lang.Object</outbound>
            </feature>
        </class>
        <class confirmed="yes">
            <name>org.mvel.conversion.ShortCH$6</name>
            <outbound type="class" confirmed="no">java.lang.Object</outbound>
            <outbound type="class" confirmed="yes">org.mvel.conversion.Converter</outbound>
            <feature confirmed="yes">
                <name>org.mvel.conversion.ShortCH$6.ShortCH$6()</name>
                <outbound type="feature" confirmed="no">java.lang.Object.Object()</outbound>
                <inbound type="feature" confirmed="yes">org.mvel.conversion.ShortCH.static {}</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.conversion.ShortCH$6.convert(java.lang.Object)</name>
                <outbound type="class" confirmed="no">java.lang.Object</outbound>
                <outbound type="class" confirmed="no">java.lang.Short</outbound>
            </feature>
        </class>
        <class confirmed="yes">
            <name>org.mvel.conversion.ShortCH$7</name>
            <outbound type="class" confirmed="no">java.lang.Object</outbound>
            <outbound type="class" confirmed="yes">org.mvel.conversion.Converter</outbound>
            <feature confirmed="yes">
                <name>org.mvel.conversion.ShortCH$7.ShortCH$7()</name>
                <outbound type="feature" confirmed="no">java.lang.Object.Object()</outbound>
                <inbound type="feature" confirmed="yes">org.mvel.conversion.ShortCH.static {}</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.conversion.ShortCH$7.convert(java.lang.Object)</name>
                <outbound type="class" confirmed="no">java.lang.Object</outbound>
                <outbound type="class" confirmed="no">java.lang.Short</outbound>
            </feature>
        </class>
        <class confirmed="yes">
            <name>org.mvel.conversion.ShortCH$8</name>
            <outbound type="class" confirmed="no">java.lang.Object</outbound>
            <outbound type="class" confirmed="yes">org.mvel.conversion.Converter</outbound>
            <feature confirmed="yes">
                <name>org.mvel.conversion.ShortCH$8.ShortCH$8()</name>
                <outbound type="feature" confirmed="no">java.lang.Object.Object()</outbound>
                <inbound type="feature" confirmed="yes">org.mvel.conversion.ShortCH.static {}</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.conversion.ShortCH$8.convert(java.lang.Object)</name>
                <outbound type="class" confirmed="no">java.lang.Object</outbound>
                <outbound type="class" confirmed="no">java.lang.Short</outbound>
            </feature>
        </class>
        <class confirmed="yes">
            <name>org.mvel.conversion.ShortCH$9</name>
            <outbound type="class" confirmed="no">java.lang.Object</outbound>
            <outbound type="class" confirmed="yes">org.mvel.conversion.Converter</outbound>
            <feature confirmed="yes">
                <name>org.mvel.conversion.ShortCH$9.ShortCH$9()</name>
                <outbound type="feature" confirmed="no">java.lang.Object.Object()</outbound>
                <inbound type="feature" confirmed="yes">org.mvel.conversion.ShortCH.static {}</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.conversion.ShortCH$9.convert(java.lang.Object)</name>
                <outbound type="class" confirmed="no">java.lang.Object</outbound>
                <outbound type="class" confirmed="no">java.lang.Short</outbound>
            </feature>
        </class>
        <class confirmed="yes">
            <name>org.mvel.conversion.StringArrayCH</name>
            <outbound type="class" confirmed="no">java.lang.Object</outbound>
            <outbound type="class" confirmed="yes">org.mvel.ConversionHandler</outbound>
            <feature confirmed="yes">
                <name>org.mvel.conversion.StringArrayCH.CNV</name>
                <outbound type="class" confirmed="no">java.util.Map</outbound>
                <inbound type="feature" confirmed="yes">org.mvel.conversion.StringArrayCH.canConvertFrom(java.lang.Class)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.conversion.StringArrayCH.static {}</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.conversion.StringArrayCH.StringArrayCH()</name>
                <outbound type="feature" confirmed="no">java.lang.Object.Object()</outbound>
                <inbound type="feature" confirmed="yes">org.mvel.DataConversion.static {}</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.conversion.StringArrayCH.canConvertFrom(java.lang.Class)</name>
                <outbound type="class" confirmed="no">java.lang.Class</outbound>
                <outbound type="class" confirmed="no">java.lang.Object</outbound>
                <outbound type="class" confirmed="no">java.util.Map</outbound>
                <outbound type="feature" confirmed="no">java.util.Map.containsKey(java.lang.Object)</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.conversion.StringArrayCH.CNV</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.conversion.StringArrayCH.convertFrom(java.lang.Object)</name>
                <outbound type="class" confirmed="no">java.lang.Class</outbound>
                <outbound type="feature" confirmed="no">java.lang.Class.isArray()</outbound>
                <outbound type="class" confirmed="no">java.lang.Object</outbound>
                <outbound type="feature" confirmed="no">java.lang.Object.getClass()</outbound>
                <outbound type="class" confirmed="no">java.lang.Object[]</outbound>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="feature" confirmed="no">java.lang.String.valueOf(java.lang.Object)</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.conversion.StringArrayCH.static {}</name>
                <outbound type="class" confirmed="no">java.lang.Class</outbound>
                <outbound type="feature" confirmed="no">java.lang.Class.forName(java.lang.String)</outbound>
                <outbound type="class" confirmed="no">java.lang.ClassNotFoundException</outbound>
                <outbound type="feature" confirmed="no">java.lang.NoClassDefFoundError.NoClassDefFoundError(java.lang.String)</outbound>
                <outbound type="class" confirmed="no">java.lang.Object</outbound>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="feature" confirmed="no">java.lang.Throwable.getMessage()</outbound>
                <outbound type="feature" confirmed="no">java.util.HashMap.HashMap()</outbound>
                <outbound type="class" confirmed="no">java.util.Map</outbound>
                <outbound type="feature" confirmed="no">java.util.Map.put(java.lang.Object, java.lang.Object)</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.conversion.StringArrayCH$1.StringArrayCH$1()</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.conversion.StringArrayCH.CNV</outbound>
            </feature>
        </class>
        <class confirmed="yes">
            <name>org.mvel.conversion.StringArrayCH$1</name>
            <outbound type="class" confirmed="no">java.lang.Object</outbound>
            <outbound type="class" confirmed="yes">org.mvel.conversion.Converter</outbound>
            <feature confirmed="yes">
                <name>org.mvel.conversion.StringArrayCH$1.StringArrayCH$1()</name>
                <outbound type="feature" confirmed="no">java.lang.Object.Object()</outbound>
                <inbound type="feature" confirmed="yes">org.mvel.conversion.StringArrayCH.static {}</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.conversion.StringArrayCH$1.convert(java.lang.Object)</name>
                <outbound type="class" confirmed="no">java.lang.Object</outbound>
                <outbound type="class" confirmed="no">java.lang.Object[]</outbound>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="feature" confirmed="no">java.lang.String.valueOf(java.lang.Object)</outbound>
            </feature>
        </class>
        <class confirmed="yes">
            <name>org.mvel.conversion.StringCH</name>
            <outbound type="class" confirmed="no">java.lang.Object</outbound>
            <outbound type="class" confirmed="yes">org.mvel.ConversionHandler</outbound>
            <feature confirmed="yes">
                <name>org.mvel.conversion.StringCH.StringCH()</name>
                <outbound type="feature" confirmed="no">java.lang.Object.Object()</outbound>
                <inbound type="feature" confirmed="yes">org.mvel.DataConversion.static {}</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.conversion.StringCH.canConvertFrom(java.lang.Class)</name>
                <outbound type="class" confirmed="no">java.lang.Class</outbound>
                <outbound type="feature" confirmed="no">java.lang.Class.forName(java.lang.String)</outbound>
                <outbound type="class" confirmed="no">java.lang.ClassNotFoundException</outbound>
                <outbound type="feature" confirmed="no">java.lang.NoClassDefFoundError.NoClassDefFoundError(java.lang.String)</outbound>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="feature" confirmed="no">java.lang.Throwable.getMessage()</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.conversion.StringCH.convertFrom(java.lang.Object)</name>
                <outbound type="class" confirmed="no">java.lang.Object</outbound>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="feature" confirmed="no">java.lang.String.valueOf(java.lang.Object)</outbound>
            </feature>
        </class>
        <class confirmed="yes">
            <name>org.mvel.conversion.UnitConversion</name>
            <outbound type="class" confirmed="no">java.lang.Object</outbound>
            <outbound type="class" confirmed="yes">org.mvel.ConversionHandler</outbound>
            <feature confirmed="yes">
                <name>org.mvel.conversion.UnitConversion.UnitConversion()</name>
                <outbound type="feature" confirmed="no">java.lang.Object.Object()</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.conversion.UnitConversion.canConvertFrom(java.lang.Class)</name>
                <outbound type="class" confirmed="no">java.lang.Class</outbound>
                <outbound type="feature" confirmed="no">java.lang.Class.forName(java.lang.String)</outbound>
                <outbound type="feature" confirmed="no">java.lang.Class.isAssignableFrom(java.lang.Class)</outbound>
                <outbound type="feature" confirmed="no">java.lang.Class.newInstance()</outbound>
                <outbound type="class" confirmed="no">java.lang.ClassNotFoundException</outbound>
                <outbound type="class" confirmed="no">java.lang.IllegalAccessException</outbound>
                <outbound type="feature" confirmed="no">java.lang.IllegalAccessException.printStackTrace()</outbound>
                <outbound type="class" confirmed="no">java.lang.InstantiationException</outbound>
                <outbound type="feature" confirmed="no">java.lang.InstantiationException.printStackTrace()</outbound>
                <outbound type="feature" confirmed="no">java.lang.NoClassDefFoundError.NoClassDefFoundError(java.lang.String)</outbound>
                <outbound type="class" confirmed="no">java.lang.Object</outbound>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="feature" confirmed="no">java.lang.Throwable.getMessage()</outbound>
                <outbound type="class" confirmed="yes">org.mvel.Unit</outbound>
                <outbound type="feature" confirmed="no">org.mvel.Unit.canConvertFrom(java.lang.Class)</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.conversion.UnitConversion.convertFrom(java.lang.Object)</name>
                <outbound type="class" confirmed="no">java.lang.Class</outbound>
                <outbound type="feature" confirmed="no">java.lang.Class.forName(java.lang.String)</outbound>
                <outbound type="feature" confirmed="no">java.lang.Class.newInstance()</outbound>
                <outbound type="class" confirmed="no">java.lang.ClassNotFoundException</outbound>
                <outbound type="class" confirmed="no">java.lang.IllegalAccessException</outbound>
                <outbound type="feature" confirmed="no">java.lang.IllegalAccessException.printStackTrace()</outbound>
                <outbound type="class" confirmed="no">java.lang.InstantiationException</outbound>
                <outbound type="feature" confirmed="no">java.lang.InstantiationException.printStackTrace()</outbound>
                <outbound type="feature" confirmed="no">java.lang.NoClassDefFoundError.NoClassDefFoundError(java.lang.String)</outbound>
                <outbound type="class" confirmed="no">java.lang.Object</outbound>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="feature" confirmed="no">java.lang.Throwable.getMessage()</outbound>
                <outbound type="class" confirmed="yes">org.mvel.Unit</outbound>
                <outbound type="feature" confirmed="no">org.mvel.Unit.convertFrom(java.lang.Object)</outbound>
            </feature>
        </class>
    </package>
    <package confirmed="yes">
        <name>org.mvel.debug</name>
        <class confirmed="yes">
            <name>org.mvel.debug.DebugTools</name>
            <outbound type="class" confirmed="no">java.lang.Object</outbound>
            <feature confirmed="yes">
                <name>org.mvel.debug.DebugTools.DebugTools()</name>
                <outbound type="feature" confirmed="no">java.lang.Object.Object()</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.debug.DebugTools.decompile(java.io.Serializable)</name>
                <outbound type="class" confirmed="no">java.io.Serializable</outbound>
                <outbound type="class" confirmed="no">java.lang.Class</outbound>
                <outbound type="feature" confirmed="no">java.lang.Class.getName()</outbound>
                <outbound type="class" confirmed="no">java.lang.Object</outbound>
                <outbound type="feature" confirmed="no">java.lang.Object.getClass()</outbound>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="class" confirmed="no">java.lang.StringBuffer</outbound>
                <outbound type="feature" confirmed="no">java.lang.StringBuffer.StringBuffer(java.lang.String)</outbound>
                <outbound type="feature" confirmed="no">java.lang.StringBuffer.append(java.lang.Object)</outbound>
                <outbound type="feature" confirmed="no">java.lang.StringBuffer.append(java.lang.String)</outbound>
                <outbound type="feature" confirmed="no">java.lang.StringBuffer.toString()</outbound>
                <outbound type="class" confirmed="yes">org.mvel.CompiledExpression</outbound>
                <outbound type="class" confirmed="yes">org.mvel.ExecutableAccessor</outbound>
                <outbound type="class" confirmed="yes">org.mvel.ExecutableLiteral</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.ExecutableLiteral.getValue(java.lang.Object, org.mvel.integration.VariableResolverFactory)</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.debug.DebugTools.decompile(org.mvel.CompiledExpression)</outbound>
                <outbound type="class" confirmed="yes">org.mvel.integration.VariableResolverFactory</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.debug.DebugTools.decompile(org.mvel.CompiledExpression)</name>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="class" confirmed="yes">org.mvel.CompiledExpression</outbound>
                <outbound type="class" confirmed="yes">org.mvel.debug.DebugTools$DecompileContext</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.debug.DebugTools$DecompileContext.DebugTools$DecompileContext(org.mvel.debug.DebugTools$DecompileContext)</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.debug.DebugTools.decompile(org.mvel.CompiledExpression, boolean, org.mvel.debug.DebugTools$DecompileContext)</outbound>
                <inbound type="feature" confirmed="yes">org.mvel.debug.DebugTools.decompile(java.io.Serializable)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.debug.DebugTools.decompile(org.mvel.CompiledExpression, boolean, org.mvel.debug.DebugTools$DecompileContext)</name>
                <outbound type="class" confirmed="no">java.lang.Class</outbound>
                <outbound type="class" confirmed="no">java.lang.Integer</outbound>
                <outbound type="feature" confirmed="no">java.lang.Integer.Integer(int)</outbound>
                <outbound type="feature" confirmed="no">java.lang.Integer.intValue()</outbound>
                <outbound type="class" confirmed="no">java.lang.Object</outbound>
                <outbound type="feature" confirmed="no">java.lang.Object.getClass()</outbound>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="class" confirmed="no">java.lang.StringBuffer</outbound>
                <outbound type="feature" confirmed="no">java.lang.StringBuffer.StringBuffer()</outbound>
                <outbound type="feature" confirmed="no">java.lang.StringBuffer.StringBuffer(java.lang.String)</outbound>
                <outbound type="feature" confirmed="no">java.lang.StringBuffer.append(int)</outbound>
                <outbound type="feature" confirmed="no">java.lang.StringBuffer.append(java.lang.Object)</outbound>
                <outbound type="feature" confirmed="no">java.lang.StringBuffer.append(java.lang.String)</outbound>
                <outbound type="feature" confirmed="no">java.lang.StringBuffer.toString()</outbound>
                <outbound type="class" confirmed="yes">org.mvel.ASTIterator</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.ASTIterator.hasMoreNodes()</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.ASTIterator.nextNode()</outbound>
                <outbound type="class" confirmed="yes">org.mvel.ASTNode</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.ASTNode.getLiteralValue()</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.ASTNode.getName()</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.ASTNode.getOperator()</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.ASTNode.isDebuggingSymbol()</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.ASTNode.isIdentifier()</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.ASTNode.isLiteral()</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.ASTNode.isOperator()</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.ASTNode.isOperator(java.lang.Integer)</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.ASTNode.toString()</outbound>
                <outbound type="class" confirmed="yes">org.mvel.CompiledExpression</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.CompiledExpression.getTokens()</outbound>
                <outbound type="class" confirmed="yes">org.mvel.ExecutableStatement</outbound>
                <outbound type="class" confirmed="yes">org.mvel.ast.BinaryOperation</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.ast.BinaryOperation.getLeft()</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.ast.BinaryOperation.getOperation()</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.ast.BinaryOperation.getRight()</outbound>
                <outbound type="class" confirmed="yes">org.mvel.ast.NestedStatement</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.ast.NestedStatement.getNestedStatement()</outbound>
                <outbound type="class" confirmed="yes">org.mvel.ast.Substatement</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.ast.Substatement.getStatement()</outbound>
                <outbound type="class" confirmed="yes">org.mvel.debug.DebugTools$DecompileContext</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.debug.DebugTools$DecompileContext.node</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.debug.DebugTools.getOperatorName(int)</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.util.ParseTools.getSimpleClassName(java.lang.Class)</outbound>
                <inbound type="feature" confirmed="yes">org.mvel.debug.DebugTools.decompile(org.mvel.CompiledExpression)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.debug.DebugTools.determineType(java.lang.String, org.mvel.CompiledExpression)</name>
                <outbound type="class" confirmed="no">java.lang.Class</outbound>
                <outbound type="class" confirmed="no">java.lang.Object</outbound>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="feature" confirmed="no">java.lang.String.equals(java.lang.Object)</outbound>
                <outbound type="class" confirmed="yes">org.mvel.ASTIterator</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.ASTIterator.hasMoreNodes()</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.ASTIterator.nextNode()</outbound>
                <outbound type="class" confirmed="yes">org.mvel.ASTNode</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.ASTNode.getEgressType()</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.ASTNode.getName()</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.ASTNode.isAssignment()</outbound>
                <outbound type="class" confirmed="yes">org.mvel.CompiledExpression</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.CompiledExpression.getTokenIterator()</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.debug.DebugTools.getAllVariableResolvers(org.mvel.integration.VariableResolverFactory)</name>
                <outbound type="class" confirmed="no">java.lang.Object</outbound>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="feature" confirmed="no">java.util.HashMap.HashMap()</outbound>
                <outbound type="class" confirmed="no">java.util.Iterator</outbound>
                <outbound type="feature" confirmed="no">java.util.Iterator.hasNext()</outbound>
                <outbound type="feature" confirmed="no">java.util.Iterator.next()</outbound>
                <outbound type="class" confirmed="no">java.util.Map</outbound>
                <outbound type="feature" confirmed="no">java.util.Map.put(java.lang.Object, java.lang.Object)</outbound>
                <outbound type="class" confirmed="no">java.util.Set</outbound>
                <outbound type="feature" confirmed="no">java.util.Set.iterator()</outbound>
                <outbound type="class" confirmed="yes">org.mvel.integration.VariableResolver</outbound>
                <outbound type="class" confirmed="yes">org.mvel.integration.VariableResolverFactory</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.integration.VariableResolverFactory.getKnownVariables()</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.integration.VariableResolverFactory.getNextFactory()</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.integration.VariableResolverFactory.getVariableResolver(java.lang.String)</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.debug.DebugTools.getOperatorName(int)</name>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <inbound type="feature" confirmed="yes">org.mvel.ast.BinaryOperation.toString()</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.debug.DebugTools.decompile(org.mvel.CompiledExpression, boolean, org.mvel.debug.DebugTools$DecompileContext)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.util.CompilerTools.optimizeAST(org.mvel.ASTLinkedList, boolean)</inbound>
            </feature>
        </class>
        <class confirmed="yes">
            <name>org.mvel.debug.DebugTools$DecompileContext</name>
            <outbound type="class" confirmed="no">java.lang.Object</outbound>
            <inbound type="feature" confirmed="yes">org.mvel.debug.DebugTools.decompile(org.mvel.CompiledExpression)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.debug.DebugTools.decompile(org.mvel.CompiledExpression, boolean, org.mvel.debug.DebugTools$DecompileContext)</inbound>
            <feature confirmed="yes">
                <name>org.mvel.debug.DebugTools$DecompileContext.DebugTools$DecompileContext()</name>
                <outbound type="feature" confirmed="no">java.lang.Object.Object()</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.debug.DebugTools$DecompileContext.node</outbound>
                <inbound type="feature" confirmed="yes">org.mvel.debug.DebugTools$DecompileContext.DebugTools$DecompileContext(org.mvel.debug.DebugTools$DecompileContext)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.debug.DebugTools$DecompileContext.DebugTools$DecompileContext(org.mvel.debug.DebugTools$DecompileContext)</name>
                <outbound type="feature" confirmed="yes">org.mvel.debug.DebugTools$DecompileContext.DebugTools$DecompileContext()</outbound>
                <inbound type="feature" confirmed="yes">org.mvel.debug.DebugTools.decompile(org.mvel.CompiledExpression)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.debug.DebugTools$DecompileContext.node</name>
                <inbound type="feature" confirmed="yes">org.mvel.debug.DebugTools$DecompileContext.DebugTools$DecompileContext()</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.debug.DebugTools.decompile(org.mvel.CompiledExpression, boolean, org.mvel.debug.DebugTools$DecompileContext)</inbound>
            </feature>
        </class>
        <class confirmed="yes">
            <name>org.mvel.debug.Debugger</name>
            <outbound type="class" confirmed="no">java.lang.Object</outbound>
            <inbound type="feature" confirmed="yes">org.mvel.MVELRuntime.setThreadDebugger(org.mvel.debug.Debugger)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.debug.DebuggerContext.checkBreak(org.mvel.ast.LineLabel, org.mvel.integration.VariableResolverFactory, org.mvel.CompiledExpression)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.debug.DebuggerContext.debugger</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.debug.DebuggerContext.getDebugger()</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.debug.DebuggerContext.hasDebugger()</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.debug.DebuggerContext.setDebugger(org.mvel.debug.Debugger)</inbound>
            <feature confirmed="yes">
                <name>org.mvel.debug.Debugger.CONTINUE</name>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.debug.Debugger.STEP</name>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.debug.Debugger.STEP_OVER</name>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.debug.Debugger.onBreak(org.mvel.debug.Frame)</name>
                <outbound type="class" confirmed="yes">org.mvel.debug.Frame</outbound>
                <inbound type="feature" confirmed="yes">org.mvel.debug.DebuggerContext.checkBreak(org.mvel.ast.LineLabel, org.mvel.integration.VariableResolverFactory, org.mvel.CompiledExpression)</inbound>
            </feature>
        </class>
        <class confirmed="yes">
            <name>org.mvel.debug.DebuggerContext</name>
            <outbound type="class" confirmed="no">java.lang.Object</outbound>
            <inbound type="feature" confirmed="yes">org.mvel.MVELRuntime.clearAllBreakpoints()</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.MVELRuntime.execute(boolean, org.mvel.CompiledExpression, java.lang.Object, org.mvel.integration.VariableResolverFactory)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.MVELRuntime.hasBreakpoints()</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.MVELRuntime.registerBreakpoint(java.lang.String, int)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.MVELRuntime.removeBreakpoint(java.lang.String, int)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.MVELRuntime.setThreadDebugger(org.mvel.debug.Debugger)</inbound>
            <feature confirmed="yes">
                <name>org.mvel.debug.DebuggerContext.DebuggerContext()</name>
                <outbound type="feature" confirmed="no">java.lang.Object.Object()</outbound>
                <outbound type="feature" confirmed="no">java.util.HashMap.HashMap()</outbound>
                <outbound type="class" confirmed="no">java.util.Map</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.debug.DebuggerContext.breakpoints</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.debug.DebuggerContext.debuggerState</outbound>
                <inbound type="feature" confirmed="yes">org.mvel.MVELRuntime.ensureDebuggerContext()</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.debug.DebuggerContext.breakpoints</name>
                <outbound type="class" confirmed="no">java.util.Map</outbound>
                <inbound type="feature" confirmed="yes">org.mvel.debug.DebuggerContext.DebuggerContext()</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.debug.DebuggerContext.clearAllBreakpoints()</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.debug.DebuggerContext.getBreakpoints()</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.debug.DebuggerContext.hasBreakpoint(java.lang.String, int)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.debug.DebuggerContext.hasBreakpoint(org.mvel.ast.LineLabel)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.debug.DebuggerContext.hasBreakpoints()</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.debug.DebuggerContext.registerBreakpoint(java.lang.String, int)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.debug.DebuggerContext.removeBreakpoint(java.lang.String, int)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.debug.DebuggerContext.setBreakpoints(java.util.Map)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.debug.DebuggerContext.checkBreak(org.mvel.ast.LineLabel, org.mvel.integration.VariableResolverFactory, org.mvel.CompiledExpression)</name>
                <outbound type="feature" confirmed="no">java.lang.RuntimeException.RuntimeException(java.lang.String)</outbound>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="class" confirmed="yes">org.mvel.CompiledExpression</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.CompiledExpression.getParserContext()</outbound>
                <outbound type="class" confirmed="yes">org.mvel.ParserContext</outbound>
                <outbound type="class" confirmed="yes">org.mvel.ast.LineLabel</outbound>
                <outbound type="class" confirmed="yes">org.mvel.debug.Debugger</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.debug.Debugger.onBreak(org.mvel.debug.Frame)</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.debug.DebuggerContext.debugger</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.debug.DebuggerContext.debuggerState</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.debug.DebuggerContext.hasBreakpoint(org.mvel.ast.LineLabel)</outbound>
                <outbound type="class" confirmed="yes">org.mvel.debug.Frame</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.debug.Frame.Frame(org.mvel.ast.LineLabel, org.mvel.integration.VariableResolverFactory, org.mvel.ParserContext)</outbound>
                <outbound type="class" confirmed="yes">org.mvel.integration.VariableResolverFactory</outbound>
                <inbound type="feature" confirmed="yes">org.mvel.MVELRuntime.execute(boolean, org.mvel.CompiledExpression, java.lang.Object, org.mvel.integration.VariableResolverFactory)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.debug.DebuggerContext.clearAllBreakpoints()</name>
                <outbound type="class" confirmed="no">java.util.Map</outbound>
                <outbound type="feature" confirmed="no">java.util.Map.clear()</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.debug.DebuggerContext.breakpoints</outbound>
                <inbound type="feature" confirmed="yes">org.mvel.MVELRuntime.clearAllBreakpoints()</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.debug.DebuggerContext.debugger</name>
                <outbound type="class" confirmed="yes">org.mvel.debug.Debugger</outbound>
                <inbound type="feature" confirmed="yes">org.mvel.debug.DebuggerContext.checkBreak(org.mvel.ast.LineLabel, org.mvel.integration.VariableResolverFactory, org.mvel.CompiledExpression)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.debug.DebuggerContext.getDebugger()</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.debug.DebuggerContext.hasDebugger()</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.debug.DebuggerContext.setDebugger(org.mvel.debug.Debugger)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.debug.DebuggerContext.debuggerState</name>
                <inbound type="feature" confirmed="yes">org.mvel.debug.DebuggerContext.DebuggerContext()</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.debug.DebuggerContext.checkBreak(org.mvel.ast.LineLabel, org.mvel.integration.VariableResolverFactory, org.mvel.CompiledExpression)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.debug.DebuggerContext.getDebuggerState()</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.debug.DebuggerContext.setDebuggerState(int)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.debug.DebuggerContext.getBreakpoints()</name>
                <outbound type="class" confirmed="no">java.util.Map</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.debug.DebuggerContext.breakpoints</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.debug.DebuggerContext.getDebugger()</name>
                <outbound type="class" confirmed="yes">org.mvel.debug.Debugger</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.debug.DebuggerContext.debugger</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.debug.DebuggerContext.getDebuggerState()</name>
                <outbound type="feature" confirmed="yes">org.mvel.debug.DebuggerContext.debuggerState</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.debug.DebuggerContext.hasBreakpoint(java.lang.String, int)</name>
                <outbound type="feature" confirmed="no">java.lang.Integer.Integer(int)</outbound>
                <outbound type="class" confirmed="no">java.lang.Object</outbound>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="class" confirmed="no">java.util.Map</outbound>
                <outbound type="feature" confirmed="no">java.util.Map.containsKey(java.lang.Object)</outbound>
                <outbound type="feature" confirmed="no">java.util.Map.get(java.lang.Object)</outbound>
                <outbound type="class" confirmed="no">java.util.Set</outbound>
                <outbound type="feature" confirmed="no">java.util.Set.contains(java.lang.Object)</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.debug.DebuggerContext.breakpoints</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.debug.DebuggerContext.hasBreakpoint(org.mvel.ast.LineLabel)</name>
                <outbound type="feature" confirmed="no">java.lang.Integer.Integer(int)</outbound>
                <outbound type="class" confirmed="no">java.lang.Object</outbound>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="class" confirmed="no">java.util.Map</outbound>
                <outbound type="feature" confirmed="no">java.util.Map.containsKey(java.lang.Object)</outbound>
                <outbound type="feature" confirmed="no">java.util.Map.get(java.lang.Object)</outbound>
                <outbound type="class" confirmed="no">java.util.Set</outbound>
                <outbound type="feature" confirmed="no">java.util.Set.contains(java.lang.Object)</outbound>
                <outbound type="class" confirmed="yes">org.mvel.ast.LineLabel</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.ast.LineLabel.getLineNumber()</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.ast.LineLabel.getSourceFile()</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.debug.DebuggerContext.breakpoints</outbound>
                <inbound type="feature" confirmed="yes">org.mvel.debug.DebuggerContext.checkBreak(org.mvel.ast.LineLabel, org.mvel.integration.VariableResolverFactory, org.mvel.CompiledExpression)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.debug.DebuggerContext.hasBreakpoints()</name>
                <outbound type="class" confirmed="no">java.util.Map</outbound>
                <outbound type="feature" confirmed="no">java.util.Map.size()</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.debug.DebuggerContext.breakpoints</outbound>
                <inbound type="feature" confirmed="yes">org.mvel.MVELRuntime.hasBreakpoints()</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.debug.DebuggerContext.hasDebugger()</name>
                <outbound type="class" confirmed="yes">org.mvel.debug.Debugger</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.debug.DebuggerContext.debugger</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.debug.DebuggerContext.registerBreakpoint(java.lang.String, int)</name>
                <outbound type="feature" confirmed="no">java.lang.Integer.Integer(int)</outbound>
                <outbound type="class" confirmed="no">java.lang.Object</outbound>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="feature" confirmed="no">java.util.HashSet.HashSet()</outbound>
                <outbound type="class" confirmed="no">java.util.Map</outbound>
                <outbound type="feature" confirmed="no">java.util.Map.containsKey(java.lang.Object)</outbound>
                <outbound type="feature" confirmed="no">java.util.Map.get(java.lang.Object)</outbound>
                <outbound type="feature" confirmed="no">java.util.Map.put(java.lang.Object, java.lang.Object)</outbound>
                <outbound type="class" confirmed="no">java.util.Set</outbound>
                <outbound type="feature" confirmed="no">java.util.Set.add(java.lang.Object)</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.debug.DebuggerContext.breakpoints</outbound>
                <inbound type="feature" confirmed="yes">org.mvel.MVELRuntime.registerBreakpoint(java.lang.String, int)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.debug.DebuggerContext.removeBreakpoint(java.lang.String, int)</name>
                <outbound type="feature" confirmed="no">java.lang.Integer.Integer(int)</outbound>
                <outbound type="class" confirmed="no">java.lang.Object</outbound>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="class" confirmed="no">java.util.Map</outbound>
                <outbound type="feature" confirmed="no">java.util.Map.containsKey(java.lang.Object)</outbound>
                <outbound type="feature" confirmed="no">java.util.Map.get(java.lang.Object)</outbound>
                <outbound type="class" confirmed="no">java.util.Set</outbound>
                <outbound type="feature" confirmed="no">java.util.Set.remove(java.lang.Object)</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.debug.DebuggerContext.breakpoints</outbound>
                <inbound type="feature" confirmed="yes">org.mvel.MVELRuntime.removeBreakpoint(java.lang.String, int)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.debug.DebuggerContext.setBreakpoints(java.util.Map)</name>
                <outbound type="class" confirmed="no">java.util.Map</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.debug.DebuggerContext.breakpoints</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.debug.DebuggerContext.setDebugger(org.mvel.debug.Debugger)</name>
                <outbound type="class" confirmed="yes">org.mvel.debug.Debugger</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.debug.DebuggerContext.debugger</outbound>
                <inbound type="feature" confirmed="yes">org.mvel.MVELRuntime.setThreadDebugger(org.mvel.debug.Debugger)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.debug.DebuggerContext.setDebuggerState(int)</name>
                <outbound type="feature" confirmed="yes">org.mvel.debug.DebuggerContext.debuggerState</outbound>
            </feature>
        </class>
        <class confirmed="yes">
            <name>org.mvel.debug.Frame</name>
            <outbound type="class" confirmed="no">java.lang.Object</outbound>
            <inbound type="feature" confirmed="yes">org.mvel.debug.Debugger.onBreak(org.mvel.debug.Frame)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.debug.DebuggerContext.checkBreak(org.mvel.ast.LineLabel, org.mvel.integration.VariableResolverFactory, org.mvel.CompiledExpression)</inbound>
            <feature confirmed="yes">
                <name>org.mvel.debug.Frame.Frame(java.lang.String, int, org.mvel.integration.VariableResolverFactory, org.mvel.ParserContext)</name>
                <outbound type="feature" confirmed="no">java.lang.Object.Object()</outbound>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="class" confirmed="yes">org.mvel.ParserContext</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.debug.Frame.factory</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.debug.Frame.lineNumber</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.debug.Frame.parserContext</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.debug.Frame.sourceName</outbound>
                <outbound type="class" confirmed="yes">org.mvel.integration.VariableResolverFactory</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.debug.Frame.Frame(org.mvel.ast.LineLabel, org.mvel.integration.VariableResolverFactory, org.mvel.ParserContext)</name>
                <outbound type="feature" confirmed="no">java.lang.Object.Object()</outbound>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="class" confirmed="yes">org.mvel.ParserContext</outbound>
                <outbound type="class" confirmed="yes">org.mvel.ast.LineLabel</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.ast.LineLabel.getLineNumber()</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.ast.LineLabel.getSourceFile()</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.debug.Frame.factory</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.debug.Frame.lineNumber</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.debug.Frame.parserContext</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.debug.Frame.sourceName</outbound>
                <outbound type="class" confirmed="yes">org.mvel.integration.VariableResolverFactory</outbound>
                <inbound type="feature" confirmed="yes">org.mvel.debug.DebuggerContext.checkBreak(org.mvel.ast.LineLabel, org.mvel.integration.VariableResolverFactory, org.mvel.CompiledExpression)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.debug.Frame.factory</name>
                <outbound type="class" confirmed="yes">org.mvel.integration.VariableResolverFactory</outbound>
                <inbound type="feature" confirmed="yes">org.mvel.debug.Frame.Frame(java.lang.String, int, org.mvel.integration.VariableResolverFactory, org.mvel.ParserContext)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.debug.Frame.Frame(org.mvel.ast.LineLabel, org.mvel.integration.VariableResolverFactory, org.mvel.ParserContext)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.debug.Frame.getFactory()</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.debug.Frame.setFactory(org.mvel.integration.VariableResolverFactory)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.debug.Frame.getFactory()</name>
                <outbound type="feature" confirmed="yes">org.mvel.debug.Frame.factory</outbound>
                <outbound type="class" confirmed="yes">org.mvel.integration.VariableResolverFactory</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.debug.Frame.getLineNumber()</name>
                <outbound type="feature" confirmed="yes">org.mvel.debug.Frame.lineNumber</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.debug.Frame.getParserContext()</name>
                <outbound type="class" confirmed="yes">org.mvel.ParserContext</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.debug.Frame.parserContext</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.debug.Frame.getSourceName()</name>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.debug.Frame.sourceName</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.debug.Frame.lineNumber</name>
                <inbound type="feature" confirmed="yes">org.mvel.debug.Frame.Frame(java.lang.String, int, org.mvel.integration.VariableResolverFactory, org.mvel.ParserContext)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.debug.Frame.Frame(org.mvel.ast.LineLabel, org.mvel.integration.VariableResolverFactory, org.mvel.ParserContext)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.debug.Frame.getLineNumber()</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.debug.Frame.setLineNumber(int)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.debug.Frame.parserContext</name>
                <outbound type="class" confirmed="yes">org.mvel.ParserContext</outbound>
                <inbound type="feature" confirmed="yes">org.mvel.debug.Frame.Frame(java.lang.String, int, org.mvel.integration.VariableResolverFactory, org.mvel.ParserContext)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.debug.Frame.Frame(org.mvel.ast.LineLabel, org.mvel.integration.VariableResolverFactory, org.mvel.ParserContext)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.debug.Frame.getParserContext()</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.debug.Frame.setParserContext(org.mvel.ParserContext)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.debug.Frame.setFactory(org.mvel.integration.VariableResolverFactory)</name>
                <outbound type="feature" confirmed="yes">org.mvel.debug.Frame.factory</outbound>
                <outbound type="class" confirmed="yes">org.mvel.integration.VariableResolverFactory</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.debug.Frame.setLineNumber(int)</name>
                <outbound type="feature" confirmed="yes">org.mvel.debug.Frame.lineNumber</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.debug.Frame.setParserContext(org.mvel.ParserContext)</name>
                <outbound type="class" confirmed="yes">org.mvel.ParserContext</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.debug.Frame.parserContext</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.debug.Frame.setSourceName(java.lang.String)</name>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.debug.Frame.sourceName</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.debug.Frame.sourceName</name>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <inbound type="feature" confirmed="yes">org.mvel.debug.Frame.Frame(java.lang.String, int, org.mvel.integration.VariableResolverFactory, org.mvel.ParserContext)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.debug.Frame.Frame(org.mvel.ast.LineLabel, org.mvel.integration.VariableResolverFactory, org.mvel.ParserContext)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.debug.Frame.getSourceName()</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.debug.Frame.setSourceName(java.lang.String)</inbound>
            </feature>
        </class>
    </package>
    <package confirmed="yes">
        <name>org.mvel.integration</name>
        <class confirmed="yes">
            <name>org.mvel.integration.Interceptor</name>
            <outbound type="class" confirmed="no">java.lang.Object</outbound>
            <inbound type="feature" confirmed="yes">org.mvel.AbstractParser.nextToken()</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.ast.InterceptorWrapper.InterceptorWrapper(org.mvel.integration.Interceptor, org.mvel.ASTNode)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.ast.InterceptorWrapper.getReducedValue(java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.ast.InterceptorWrapper.getReducedValueAccelerated(java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.ast.InterceptorWrapper.interceptor</inbound>
            <feature confirmed="yes">
                <name>org.mvel.integration.Interceptor.END</name>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.integration.Interceptor.NORMAL_FLOW</name>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.integration.Interceptor.SKIP</name>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.integration.Interceptor.doAfter(java.lang.Object, org.mvel.ASTNode, org.mvel.integration.VariableResolverFactory)</name>
                <outbound type="class" confirmed="no">java.lang.Object</outbound>
                <outbound type="class" confirmed="yes">org.mvel.ASTNode</outbound>
                <outbound type="class" confirmed="yes">org.mvel.integration.VariableResolverFactory</outbound>
                <inbound type="feature" confirmed="yes">org.mvel.ast.InterceptorWrapper.getReducedValue(java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.ast.InterceptorWrapper.getReducedValueAccelerated(java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.integration.Interceptor.doBefore(org.mvel.ASTNode, org.mvel.integration.VariableResolverFactory)</name>
                <outbound type="class" confirmed="yes">org.mvel.ASTNode</outbound>
                <outbound type="class" confirmed="yes">org.mvel.integration.VariableResolverFactory</outbound>
                <inbound type="feature" confirmed="yes">org.mvel.ast.InterceptorWrapper.getReducedValue(java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.ast.InterceptorWrapper.getReducedValueAccelerated(java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory)</inbound>
            </feature>
        </class>
        <class confirmed="yes">
            <name>org.mvel.integration.ResolverTools</name>
            <outbound type="class" confirmed="no">java.lang.Object</outbound>
            <feature confirmed="yes">
                <name>org.mvel.integration.ResolverTools.ResolverTools()</name>
                <outbound type="feature" confirmed="no">java.lang.Object.Object()</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.integration.ResolverTools.appendFactory(org.mvel.integration.VariableResolverFactory, org.mvel.integration.VariableResolverFactory)</name>
                <outbound type="class" confirmed="yes">org.mvel.integration.VariableResolverFactory</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.integration.VariableResolverFactory.getNextFactory()</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.integration.VariableResolverFactory.setNextFactory(org.mvel.integration.VariableResolverFactory)</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.integration.ResolverTools.insertFactory(org.mvel.integration.VariableResolverFactory, org.mvel.integration.VariableResolverFactory)</name>
                <outbound type="class" confirmed="yes">org.mvel.integration.VariableResolverFactory</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.integration.VariableResolverFactory.getNextFactory()</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.integration.VariableResolverFactory.setNextFactory(org.mvel.integration.VariableResolverFactory)</outbound>
                <inbound type="feature" confirmed="yes">org.mvel.util.ParseTools.findClassImportResolverFactory(org.mvel.integration.VariableResolverFactory)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.util.ParseTools.findStaticMethodImportResolverFactory(org.mvel.integration.VariableResolverFactory)</inbound>
            </feature>
        </class>
        <class confirmed="yes">
            <name>org.mvel.integration.VariableResolver</name>
            <outbound type="class" confirmed="no">java.io.Serializable</outbound>
            <outbound type="class" confirmed="no">java.lang.Object</outbound>
            <inbound type="feature" confirmed="yes">org.mvel.ASTNode.getReducedValue(java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.MVELInterpretedRuntime.getImport(java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.PropertyAccessor.getBeanProperty(java.lang.Object, java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.PropertyAccessor.getMethod(java.lang.Object, java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.ast.AssignAdd.getReducedValue(java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.ast.AssignAdd.getReducedValueAccelerated(java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.ast.AssignDiv.getReducedValue(java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.ast.AssignDiv.getReducedValueAccelerated(java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.ast.AssignMult.getReducedValue(java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.ast.AssignMult.getReducedValueAccelerated(java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.ast.AssignSub.getReducedValue(java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.ast.AssignSub.getReducedValueAccelerated(java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.ast.AssignmentNode.getReducedValue(java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.ast.AssignmentNode.getReducedValueAccelerated(java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.ast.NewObjectNode.getReducedValueAccelerated(java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.ast.PostFixDecNode.getReducedValueAccelerated(java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.ast.PostFixIncNode.getReducedValueAccelerated(java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.ast.PreFixDecNode.getReducedValueAccelerated(java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.ast.PreFixIncNode.getReducedValueAccelerated(java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.ast.StaticImportNode.getReducedValueAccelerated(java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.ast.TypedVarNode.getReducedValue(java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.ast.TypedVarNode.getReducedValueAccelerated(java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.ast.VarPropertyNode.getReducedValue(java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.ast.VarPropertyNode.getReducedValueAccelerated(java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.debug.DebugTools.getAllVariableResolvers(org.mvel.integration.VariableResolverFactory)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.integration.VariableResolverFactory.createVariable(java.lang.String, java.lang.Object)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.integration.VariableResolverFactory.createVariable(java.lang.String, java.lang.Object, java.lang.Class)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.integration.VariableResolverFactory.getVariableResolver(java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.integration.impl.BaseVariableResolverFactory.getVariableResolver(java.lang.String)</inbound>
            <inbound type="class" confirmed="yes">org.mvel.integration.impl.ClassImportResolver</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.integration.impl.ClassImportResolverFactory.createVariable(java.lang.String, java.lang.Object)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.integration.impl.ClassImportResolverFactory.createVariable(java.lang.String, java.lang.Object, java.lang.Class)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.integration.impl.ClassImportResolverFactory.getImportedClasses()</inbound>
            <inbound type="class" confirmed="yes">org.mvel.integration.impl.ItemResolverFactory$ItemResolver</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.integration.impl.ItemResolverFactory.createVariable(java.lang.String, java.lang.Object)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.integration.impl.ItemResolverFactory.createVariable(java.lang.String, java.lang.Object, java.lang.Class)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.integration.impl.ItemResolverFactory.getVariableResolver(java.lang.String)</inbound>
            <inbound type="class" confirmed="yes">org.mvel.integration.impl.MapVariableResolver</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.integration.impl.MapVariableResolverFactory.addResolver(java.lang.String, org.mvel.integration.VariableResolver)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.integration.impl.MapVariableResolverFactory.createVariable(java.lang.String, java.lang.Object)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.integration.impl.MapVariableResolverFactory.createVariable(java.lang.String, java.lang.Object, java.lang.Class)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.integration.impl.MapVariableResolverFactory.getVariableResolver(java.lang.String)</inbound>
            <inbound type="class" confirmed="yes">org.mvel.integration.impl.SimpleValueResolver</inbound>
            <inbound type="class" confirmed="yes">org.mvel.integration.impl.StaticMethodImportResolver</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.integration.impl.StaticMethodImportResolverFactory.StaticMethodImportResolverFactory(org.mvel.ParserContext)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.integration.impl.StaticMethodImportResolverFactory.createVariable(java.lang.String, java.lang.Object)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.integration.impl.StaticMethodImportResolverFactory.createVariable(java.lang.String, java.lang.Object, java.lang.Class)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.integration.impl.StaticMethodImportResolverFactory.getImportedMethods()</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.asm.ASMAccessorOptimizer.getBeanProperty(java.lang.Object, java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.asm.ASMAccessorOptimizer.getMethod(java.lang.Object, java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.refl.ReflectiveAccessorOptimizer.getBeanProperty(java.lang.Object, java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.refl.ReflectiveAccessorOptimizer.getMethod(java.lang.Object, java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.refl.VariableAccessor.getValue(java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.refl.VariableAccessor.setValue(java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory, java.lang.Object)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.util.ParseTools.findClass(org.mvel.integration.VariableResolverFactory, java.lang.String)</inbound>
            <feature confirmed="yes">
                <name>org.mvel.integration.VariableResolver.getFlags()</name>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.integration.VariableResolver.getName()</name>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.integration.VariableResolver.getType()</name>
                <outbound type="class" confirmed="no">java.lang.Class</outbound>
                <inbound type="feature" confirmed="yes">org.mvel.integration.impl.MapVariableResolverFactory.createVariable(java.lang.String, java.lang.Object, java.lang.Class)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.integration.VariableResolver.getValue()</name>
                <outbound type="class" confirmed="no">java.lang.Object</outbound>
                <inbound type="feature" confirmed="yes">org.mvel.ASTNode.getReducedValue(java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.MVELInterpretedRuntime.getImport(java.lang.String)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.PropertyAccessor.getBeanProperty(java.lang.Object, java.lang.String)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.PropertyAccessor.getMethod(java.lang.Object, java.lang.String)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.ast.AssignAdd.getReducedValue(java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.ast.AssignAdd.getReducedValueAccelerated(java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.ast.AssignDiv.getReducedValue(java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.ast.AssignDiv.getReducedValueAccelerated(java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.ast.AssignMult.getReducedValue(java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.ast.AssignMult.getReducedValueAccelerated(java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.ast.AssignSub.getReducedValue(java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.ast.AssignSub.getReducedValueAccelerated(java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.ast.AssignmentNode.getReducedValue(java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.ast.NewObjectNode.getReducedValueAccelerated(java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.ast.PostFixDecNode.getReducedValueAccelerated(java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.ast.PostFixIncNode.getReducedValueAccelerated(java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.ast.PreFixDecNode.getReducedValueAccelerated(java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.ast.PreFixIncNode.getReducedValueAccelerated(java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.ast.VarPropertyNode.getReducedValue(java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.ast.VarPropertyNode.getReducedValueAccelerated(java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.integration.impl.ClassImportResolverFactory.getImportedClasses()</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.integration.impl.StaticMethodImportResolverFactory.getImportedMethods()</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.asm.ASMAccessorOptimizer.getBeanProperty(java.lang.Object, java.lang.String)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.asm.ASMAccessorOptimizer.getMethod(java.lang.Object, java.lang.String)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.refl.ReflectiveAccessorOptimizer.getBeanProperty(java.lang.Object, java.lang.String)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.refl.ReflectiveAccessorOptimizer.getMethod(java.lang.Object, java.lang.String)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.refl.VariableAccessor.getValue(java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.util.ParseTools.findClass(org.mvel.integration.VariableResolverFactory, java.lang.String)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.integration.VariableResolver.setStaticType(java.lang.Class)</name>
                <outbound type="class" confirmed="no">java.lang.Class</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.integration.VariableResolver.setValue(java.lang.Object)</name>
                <outbound type="class" confirmed="no">java.lang.Object</outbound>
                <inbound type="feature" confirmed="yes">org.mvel.ast.AssignAdd.getReducedValue(java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.ast.AssignAdd.getReducedValueAccelerated(java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.ast.AssignDiv.getReducedValue(java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.ast.AssignDiv.getReducedValueAccelerated(java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.ast.AssignMult.getReducedValue(java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.ast.AssignMult.getReducedValueAccelerated(java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.ast.AssignSub.getReducedValue(java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.ast.AssignSub.getReducedValueAccelerated(java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.ast.PostFixDecNode.getReducedValueAccelerated(java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.ast.PostFixIncNode.getReducedValueAccelerated(java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.ast.PreFixDecNode.getReducedValueAccelerated(java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.ast.PreFixIncNode.getReducedValueAccelerated(java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.integration.impl.MapVariableResolverFactory.createVariable(java.lang.String, java.lang.Object)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.integration.impl.MapVariableResolverFactory.createVariable(java.lang.String, java.lang.Object, java.lang.Class)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.refl.VariableAccessor.setValue(java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory, java.lang.Object)</inbound>
            </feature>
        </class>
        <class confirmed="yes">
            <name>org.mvel.integration.VariableResolverFactory</name>
            <outbound type="class" confirmed="no">java.io.Serializable</outbound>
            <outbound type="class" confirmed="no">java.lang.Object</outbound>
            <inbound type="feature" confirmed="yes">org.mvel.ASTNode.getReducedValue(java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.ASTNode.getReducedValueAccelerated(java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.ASTNode.tryStaticAccess(java.lang.Object, org.mvel.integration.VariableResolverFactory)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.AbstractParser.arithmeticFunctionReduction(int)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.AbstractParser.handleSubstatement(org.mvel.ast.Substatement)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.AbstractParser.variableFactory</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.Accessor.getValue(java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.Accessor.setValue(java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory, java.lang.Object)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.CompiledExpression.getDirectValue(java.lang.Object, org.mvel.integration.VariableResolverFactory)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.CompiledExpression.getValue(java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.CompiledExpression.getValue(java.lang.Object, org.mvel.integration.VariableResolverFactory)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.CompiledExpression.setValue(java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory, java.lang.Object)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.CompiledSetExpression.setValue(java.lang.Object, org.mvel.integration.VariableResolverFactory, java.lang.Object)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.ExecutableAccessor.getValue(java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.ExecutableAccessor.getValue(java.lang.Object, org.mvel.integration.VariableResolverFactory)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.ExecutableAccessor.setValue(java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory, java.lang.Object)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.ExecutableLiteral.getValue(java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.ExecutableLiteral.getValue(java.lang.Object, org.mvel.integration.VariableResolverFactory)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.ExecutableLiteral.setValue(java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory, java.lang.Object)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.ExecutableStatement.getValue(java.lang.Object, org.mvel.integration.VariableResolverFactory)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.ExpressionCompiler._compile()</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.MVEL.eval(char[], java.lang.Object, org.mvel.integration.VariableResolverFactory)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.MVEL.eval(char[], java.lang.Object, org.mvel.integration.VariableResolverFactory, boolean)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.MVEL.eval(char[], java.lang.Object, org.mvel.integration.VariableResolverFactory, java.lang.Class)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.MVEL.eval(java.lang.String, java.lang.Object, org.mvel.integration.VariableResolverFactory)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.MVEL.eval(java.lang.String, java.lang.Object, org.mvel.integration.VariableResolverFactory, boolean)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.MVEL.eval(java.lang.String, java.lang.Object, org.mvel.integration.VariableResolverFactory, java.lang.Class)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.MVEL.eval(java.lang.String, org.mvel.integration.VariableResolverFactory)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.MVEL.eval(java.lang.String, org.mvel.integration.VariableResolverFactory, java.lang.Class)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.MVEL.evalToBoolean(java.lang.String, java.lang.Object, org.mvel.integration.VariableResolverFactory)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.MVEL.evalToBoolean(java.lang.String, org.mvel.integration.VariableResolverFactory)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.MVEL.executeAllExpression(java.io.Serializable[], java.lang.Object, org.mvel.integration.VariableResolverFactory)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.MVEL.executeDebugger(org.mvel.CompiledExpression, java.lang.Object, org.mvel.integration.VariableResolverFactory)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.MVEL.executeExpression(java.lang.Object)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.MVEL.executeExpression(java.lang.Object, java.lang.Object)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.MVEL.executeExpression(java.lang.Object, java.lang.Object, java.util.Map)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.MVEL.executeExpression(java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.MVEL.executeExpression(java.lang.Object, java.util.Map)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.MVEL.executeExpression(java.lang.Object, org.mvel.integration.VariableResolverFactory)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.MVEL.executeSetExpression(java.io.Serializable, java.lang.Object, java.lang.Object)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.MVEL.executeSetExpression(java.io.Serializable, java.lang.Object, org.mvel.integration.VariableResolverFactory, java.lang.Object)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.MVELInterpretedRuntime.MVELInterpretedRuntime(char[], java.lang.Object, java.util.Map)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.MVELInterpretedRuntime.MVELInterpretedRuntime(char[], java.lang.Object, org.mvel.integration.VariableResolverFactory)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.MVELInterpretedRuntime.MVELInterpretedRuntime(char[], java.lang.Object, org.mvel.integration.VariableResolverFactory, boolean)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.MVELInterpretedRuntime.MVELInterpretedRuntime(java.lang.Object, java.util.Map)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.MVELInterpretedRuntime.MVELInterpretedRuntime(java.lang.String, java.lang.Object, java.util.Map)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.MVELInterpretedRuntime.MVELInterpretedRuntime(java.lang.String, java.lang.Object, org.mvel.integration.VariableResolverFactory)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.MVELInterpretedRuntime.MVELInterpretedRuntime(java.lang.String, java.lang.Object, org.mvel.integration.VariableResolverFactory, boolean)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.MVELInterpretedRuntime.MVELInterpretedRuntime(java.lang.String, org.mvel.integration.VariableResolverFactory)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.MVELInterpretedRuntime.getImport(java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.MVELInterpretedRuntime.hasImport(java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.MVELInterpretedRuntime.parseAndExecuteInterpreted()</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.MVELRuntime.execute(boolean, org.mvel.CompiledExpression, java.lang.Object, org.mvel.integration.VariableResolverFactory)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.MVELSH.main(java.lang.String[])</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.PropertyAccessor.PropertyAccessor(char[], int, int, java.lang.Object, org.mvel.integration.VariableResolverFactory)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.PropertyAccessor.PropertyAccessor(char[], java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory, java.lang.Object)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.PropertyAccessor.PropertyAccessor(char[], java.lang.Object, org.mvel.integration.VariableResolverFactory, java.lang.Object)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.PropertyAccessor.PropertyAccessor(org.mvel.integration.VariableResolverFactory, java.lang.Object)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.PropertyAccessor.get(char[], int, int, java.lang.Object, org.mvel.integration.VariableResolverFactory)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.PropertyAccessor.get(char[], java.lang.Object, org.mvel.integration.VariableResolverFactory, java.lang.Object)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.PropertyAccessor.get(java.lang.String, java.lang.Object, org.mvel.integration.VariableResolverFactory, java.lang.Object)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.PropertyAccessor.getBeanProperty(java.lang.Object, java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.PropertyAccessor.getCollectionProperty(java.lang.Object, java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.PropertyAccessor.getMethod(java.lang.Object, java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.PropertyAccessor.set(java.lang.Object)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.PropertyAccessor.set(java.lang.Object, org.mvel.integration.VariableResolverFactory, java.lang.String, java.lang.Object)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.PropertyAccessor.variableFactory</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.SetAccessor.setValue(java.lang.Object, org.mvel.integration.VariableResolverFactory, java.lang.Object)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.ast.And.getReducedValue(java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.ast.And.getReducedValueAccelerated(java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.ast.AssertNode.getReducedValue(java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.ast.AssertNode.getReducedValueAccelerated(java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.ast.AssignAdd.getReducedValue(java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.ast.AssignAdd.getReducedValueAccelerated(java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.ast.AssignDiv.getReducedValue(java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.ast.AssignDiv.getReducedValueAccelerated(java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.ast.AssignMult.getReducedValue(java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.ast.AssignMult.getReducedValueAccelerated(java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.ast.AssignSub.getReducedValue(java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.ast.AssignSub.getReducedValueAccelerated(java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.ast.AssignmentNode.getReducedValue(java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.ast.AssignmentNode.getReducedValueAccelerated(java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.ast.BinaryOperation.getReducedValue(java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.ast.BinaryOperation.getReducedValueAccelerated(java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.ast.ContextDeepPropertyNode.getReducedValue(java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.ast.ContextDeepPropertyNode.getReducedValueAccelerated(java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.ast.ContextDeepPropertyNode.handleDynamicDeoptimization(java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.ast.DeepAssignmentNode.getReducedValue(java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.ast.DeepAssignmentNode.getReducedValueAccelerated(java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.ast.EndOfStatement.getReducedValue(java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.ast.EndOfStatement.getReducedValueAccelerated(java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.ast.ForEachNode.getReducedValue(java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.ast.ForEachNode.getReducedValueAccelerated(java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.ast.IfNode.getReducedValue(java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.ast.IfNode.getReducedValueAccelerated(java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.ast.ImportNode.getReducedValue(java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.ast.ImportNode.getReducedValueAccelerated(java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.ast.InlineCollectionNode.getReducedValue(java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.ast.InlineCollectionNode.getReducedValueAccelerated(java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.ast.InterceptorWrapper.getReducedValue(java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.ast.InterceptorWrapper.getReducedValueAccelerated(java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.ast.LineLabel.getReducedValue(java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.ast.LineLabel.getReducedValueAccelerated(java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.ast.LiteralDeepPropertyNode.getReducedValue(java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.ast.LiteralDeepPropertyNode.getReducedValueAccelerated(java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.ast.LiteralNode.getReducedValue(java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.ast.LiteralNode.getReducedValueAccelerated(java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.ast.NewObjectNode$NewObjectArray.getValue(java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.ast.NewObjectNode$NewObjectArray.setValue(java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory, java.lang.Object)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.ast.NewObjectNode.NewObjectNode(char[], int)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.ast.NewObjectNode.getReducedValue(java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.ast.NewObjectNode.getReducedValueAccelerated(java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.ast.OperatorNode.getReducedValue(java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.ast.OperatorNode.getReducedValueAccelerated(java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.ast.Or.getReducedValue(java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.ast.Or.getReducedValueAccelerated(java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.ast.PostFixDecNode.getReducedValue(java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.ast.PostFixDecNode.getReducedValueAccelerated(java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.ast.PostFixIncNode.getReducedValue(java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.ast.PostFixIncNode.getReducedValueAccelerated(java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.ast.PreFixDecNode.getReducedValue(java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.ast.PreFixDecNode.getReducedValueAccelerated(java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.ast.PreFixIncNode.getReducedValue(java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.ast.PreFixIncNode.getReducedValueAccelerated(java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.ast.PropertyASTNode.getReducedValue(java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.ast.PropertyASTNode.getReducedValueAccelerated(java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.ast.PropertyASTNode.initializePropertyNode(java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.ast.RegExMatch.getReducedValue(java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.ast.RegExMatch.getReducedValueAccelerated(java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.ast.ReturnNode.getReducedValue(java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.ast.ReturnNode.getReducedValueAccelerated(java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.ast.StaticImportNode.getReducedValue(java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.ast.StaticImportNode.getReducedValueAccelerated(java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.ast.Substatement.getReducedValue(java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.ast.Substatement.getReducedValueAccelerated(java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.ast.ThisValDeepPropertyNode.getReducedValue(java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.ast.ThisValDeepPropertyNode.getReducedValueAccelerated(java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.ast.ThisValNode.getReducedValue(java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.ast.ThisValNode.getReducedValueAccelerated(java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.ast.TypeCast.getReducedValue(java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.ast.TypeCast.getReducedValueAccelerated(java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.ast.TypedVarNode.getReducedValue(java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.ast.TypedVarNode.getReducedValueAccelerated(java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.ast.Union.getReducedValue(java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.ast.Union.getReducedValueAccelerated(java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.ast.VarPropertyNode.getReducedValue(java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.ast.VarPropertyNode.getReducedValueAccelerated(java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.ast.VariableDeepPropertyNode.getReducedValue(java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.ast.VariableDeepPropertyNode.getReducedValueAccelerated(java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.ast.WhileNode.getReducedValue(java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.ast.WhileNode.getReducedValueAccelerated(java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.ast.WithNode.getReducedValue(java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.ast.WithNode.getReducedValueAccelerated(java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.ast.cache.CachedListAccessor.getValue(java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.ast.cache.CachedListAccessor.setValue(java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory, java.lang.Object)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.debug.DebugTools.decompile(java.io.Serializable)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.debug.DebugTools.getAllVariableResolvers(org.mvel.integration.VariableResolverFactory)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.debug.DebuggerContext.checkBreak(org.mvel.ast.LineLabel, org.mvel.integration.VariableResolverFactory, org.mvel.CompiledExpression)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.debug.Frame.Frame(java.lang.String, int, org.mvel.integration.VariableResolverFactory, org.mvel.ParserContext)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.debug.Frame.Frame(org.mvel.ast.LineLabel, org.mvel.integration.VariableResolverFactory, org.mvel.ParserContext)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.debug.Frame.factory</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.debug.Frame.getFactory()</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.debug.Frame.setFactory(org.mvel.integration.VariableResolverFactory)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.integration.Interceptor.doAfter(java.lang.Object, org.mvel.ASTNode, org.mvel.integration.VariableResolverFactory)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.integration.Interceptor.doBefore(org.mvel.ASTNode, org.mvel.integration.VariableResolverFactory)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.integration.ResolverTools.appendFactory(org.mvel.integration.VariableResolverFactory, org.mvel.integration.VariableResolverFactory)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.integration.ResolverTools.insertFactory(org.mvel.integration.VariableResolverFactory, org.mvel.integration.VariableResolverFactory)</inbound>
            <inbound type="class" confirmed="yes">org.mvel.integration.impl.BaseVariableResolverFactory</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.integration.impl.BaseVariableResolverFactory.appendFactory(org.mvel.integration.VariableResolverFactory)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.integration.impl.BaseVariableResolverFactory.getKnownVariables()</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.integration.impl.BaseVariableResolverFactory.getNextFactory()</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.integration.impl.BaseVariableResolverFactory.getVariableResolver(java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.integration.impl.BaseVariableResolverFactory.insertFactory(org.mvel.integration.VariableResolverFactory)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.integration.impl.BaseVariableResolverFactory.isNextResolveable(java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.integration.impl.BaseVariableResolverFactory.nextFactory</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.integration.impl.BaseVariableResolverFactory.setNextFactory(org.mvel.integration.VariableResolverFactory)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.integration.impl.ClassImportResolverFactory.ClassImportResolverFactory(org.mvel.ParserContext, org.mvel.integration.VariableResolverFactory)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.integration.impl.ClassImportResolverFactory.createVariable(java.lang.String, java.lang.Object)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.integration.impl.ClassImportResolverFactory.createVariable(java.lang.String, java.lang.Object, java.lang.Class)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.integration.impl.DefaultLocalVariableResolverFactory.DefaultLocalVariableResolverFactory(java.util.Map, org.mvel.integration.VariableResolverFactory)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.integration.impl.DefaultLocalVariableResolverFactory.DefaultLocalVariableResolverFactory(org.mvel.integration.VariableResolverFactory)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.integration.impl.ItemResolverFactory.ItemResolverFactory(org.mvel.integration.impl.ItemResolverFactory$ItemResolver, org.mvel.integration.VariableResolverFactory)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.integration.impl.ItemResolverFactory.createVariable(java.lang.String, java.lang.Object)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.integration.impl.ItemResolverFactory.createVariable(java.lang.String, java.lang.Object, java.lang.Class)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.integration.impl.ItemResolverFactory.getVariableResolver(java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.integration.impl.ItemResolverFactory.isResolveable(java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.integration.impl.MapVariableResolverFactory.MapVariableResolverFactory(java.util.Map, org.mvel.integration.VariableResolverFactory)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.integration.impl.MapVariableResolverFactory.getKnownVariables()</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.integration.impl.MapVariableResolverFactory.getVariableResolver(java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.integration.impl.MapVariableResolverFactory.isResolveable(java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.integration.impl.TypeInjectionResolverFactoryImpl.TypeInjectionResolverFactoryImpl(java.util.Map, org.mvel.integration.VariableResolverFactory)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.integration.impl.TypeInjectionResolverFactoryImpl.getKnownVariables()</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.optimizers.AccessorOptimizer.optimizeAccessor(char[], java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory, boolean)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.optimizers.AccessorOptimizer.optimizeCollection(char[], java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.optimizers.AccessorOptimizer.optimizeFold(char[], java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.optimizers.AccessorOptimizer.optimizeObjectCreation(char[], java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.optimizers.AccessorOptimizer.optimizeSetAccessor(char[], java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory, boolean, java.lang.Object)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.asm.ASMAccessorOptimizer.getBeanProperty(java.lang.Object, java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.asm.ASMAccessorOptimizer.getCollectionProperty(java.lang.Object, java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.asm.ASMAccessorOptimizer.getMethod(java.lang.Object, java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.asm.ASMAccessorOptimizer.optimizeAccessor(char[], java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory, boolean)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.asm.ASMAccessorOptimizer.optimizeCollection(char[], java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.asm.ASMAccessorOptimizer.optimizeFold(char[], java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.asm.ASMAccessorOptimizer.optimizeObjectCreation(char[], java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.asm.ASMAccessorOptimizer.optimizeSetAccessor(char[], java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory, boolean, java.lang.Object)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.asm.ASMAccessorOptimizer.variableFactory</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.refl.ArrayAccessor.getValue(java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.refl.ArrayAccessor.setValue(java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory, java.lang.Object)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.refl.ArrayAccessorNest.getValue(java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.refl.ArrayAccessorNest.setValue(java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory, java.lang.Object)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.refl.ArrayLength.getValue(java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.refl.ArrayLength.setValue(java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory, java.lang.Object)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.refl.ConstructorAccessor.executeAll(java.lang.Object, org.mvel.integration.VariableResolverFactory)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.refl.ConstructorAccessor.executeAndCoerce(java.lang.Class[], java.lang.Object, org.mvel.integration.VariableResolverFactory)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.refl.ConstructorAccessor.getValue(java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.refl.ConstructorAccessor.setValue(java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory, java.lang.Object)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.refl.DynamicFieldAccessor.getValue(java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.refl.DynamicFieldAccessor.setValue(java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory, java.lang.Object)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.refl.DynamicSetterAccessor.getValue(java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.refl.DynamicSetterAccessor.setValue(java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory, java.lang.Object)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.refl.FieldAccessor.getValue(java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.refl.FieldAccessor.setValue(java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory, java.lang.Object)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.refl.Fold.getValue(java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.refl.Fold.setValue(java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory, java.lang.Object)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.refl.GetterAccessor.getValue(java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.refl.GetterAccessor.setValue(java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory, java.lang.Object)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.refl.IndexedCharSeqAccessor.getValue(java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.refl.IndexedCharSeqAccessor.setValue(java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory, java.lang.Object)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.refl.IndexedCharSeqAccessorNest.getValue(java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.refl.IndexedCharSeqAccessorNest.setValue(java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory, java.lang.Object)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.refl.ListAccessor.getValue(java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.refl.ListAccessor.setValue(java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory, java.lang.Object)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.refl.ListAccessorNest.getValue(java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.refl.ListAccessorNest.setValue(java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory, java.lang.Object)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.refl.MapAccessor.getValue(java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.refl.MapAccessor.setValue(java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory, java.lang.Object)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.refl.MapAccessorNest.getValue(java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.refl.MapAccessorNest.setValue(java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory, java.lang.Object)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.refl.MethodAccessor.executeAll(java.lang.Object, org.mvel.integration.VariableResolverFactory)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.refl.MethodAccessor.executeAndCoerce(java.lang.Class[], java.lang.Object, org.mvel.integration.VariableResolverFactory)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.refl.MethodAccessor.getValue(java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.refl.MethodAccessor.setValue(java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory, java.lang.Object)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.refl.ReflectiveAccessorOptimizer.ReflectiveAccessorOptimizer(char[], java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.refl.ReflectiveAccessorOptimizer.compileConstructor(char[], java.lang.Object, org.mvel.integration.VariableResolverFactory)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.refl.ReflectiveAccessorOptimizer.get(java.lang.String, java.lang.Object)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.refl.ReflectiveAccessorOptimizer.getBeanProperty(java.lang.Object, java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.refl.ReflectiveAccessorOptimizer.getCollectionProperty(java.lang.Object, java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.refl.ReflectiveAccessorOptimizer.getMethod(java.lang.Object, java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.refl.ReflectiveAccessorOptimizer.getValue(java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.refl.ReflectiveAccessorOptimizer.main(java.lang.String[])</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.refl.ReflectiveAccessorOptimizer.optimizeAccessor(char[], java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory, boolean)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.refl.ReflectiveAccessorOptimizer.optimizeCollection(char[], java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.refl.ReflectiveAccessorOptimizer.optimizeFold(char[], java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.refl.ReflectiveAccessorOptimizer.optimizeObjectCreation(char[], java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.refl.ReflectiveAccessorOptimizer.optimizeSetAccessor(char[], java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory, boolean, java.lang.Object)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.refl.ReflectiveAccessorOptimizer.variableFactory</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.refl.SetterAccessor.getValue(java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.refl.SetterAccessor.setValue(java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory, java.lang.Object)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.refl.StaticReferenceAccessor.getValue(java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.refl.StaticReferenceAccessor.setValue(java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory, java.lang.Object)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.refl.StaticVarAccessor.getValue(java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.refl.StaticVarAccessor.setValue(java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory, java.lang.Object)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.refl.ThisValueAccessor.getValue(java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.refl.ThisValueAccessor.setValue(java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory, java.lang.Object)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.refl.Union.getValue(java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.refl.Union.setValue(java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory, java.lang.Object)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.refl.VariableAccessor.VariableAccessor(java.lang.String, org.mvel.integration.VariableResolverFactory)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.refl.VariableAccessor.getValue(java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.refl.VariableAccessor.setValue(java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory, java.lang.Object)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.refl.collection.ArrayCreator.getValue(java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.refl.collection.ArrayCreator.setValue(java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory, java.lang.Object)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.refl.collection.ExprValueAccessor.getValue(java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.refl.collection.ExprValueAccessor.setValue(java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory, java.lang.Object)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.refl.collection.ListCreator.getValue(java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.refl.collection.ListCreator.setValue(java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory, java.lang.Object)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.refl.collection.MapCreator.getValue(java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.refl.collection.MapCreator.setValue(java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory, java.lang.Object)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.util.ParseTools.finalLocalVariableFactory(org.mvel.integration.VariableResolverFactory)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.util.ParseTools.findClass(org.mvel.integration.VariableResolverFactory, java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.util.ParseTools.findClassImportResolverFactory(org.mvel.integration.VariableResolverFactory)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.util.ParseTools.findStaticMethodImportResolverFactory(org.mvel.integration.VariableResolverFactory)</inbound>
            <feature confirmed="yes">
                <name>org.mvel.integration.VariableResolverFactory.createVariable(java.lang.String, java.lang.Object)</name>
                <outbound type="class" confirmed="no">java.lang.Object</outbound>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="class" confirmed="yes">org.mvel.integration.VariableResolver</outbound>
                <inbound type="feature" confirmed="yes">org.mvel.ast.AssignmentNode.getReducedValue(java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.ast.AssignmentNode.getReducedValueAccelerated(java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.integration.impl.ClassImportResolverFactory.createVariable(java.lang.String, java.lang.Object)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.integration.impl.ClassImportResolverFactory.createVariable(java.lang.String, java.lang.Object, java.lang.Class)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.integration.impl.ItemResolverFactory.createVariable(java.lang.String, java.lang.Object)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.integration.impl.ItemResolverFactory.createVariable(java.lang.String, java.lang.Object, java.lang.Class)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.integration.VariableResolverFactory.createVariable(java.lang.String, java.lang.Object, java.lang.Class)</name>
                <outbound type="class" confirmed="no">java.lang.Class</outbound>
                <outbound type="class" confirmed="no">java.lang.Object</outbound>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="class" confirmed="yes">org.mvel.integration.VariableResolver</outbound>
                <inbound type="feature" confirmed="yes">org.mvel.ast.TypedVarNode.getReducedValue(java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.ast.TypedVarNode.getReducedValueAccelerated(java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.integration.VariableResolverFactory.getKnownVariables()</name>
                <outbound type="class" confirmed="no">java.util.Set</outbound>
                <inbound type="feature" confirmed="yes">org.mvel.debug.DebugTools.getAllVariableResolvers(org.mvel.integration.VariableResolverFactory)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.integration.impl.BaseVariableResolverFactory.getKnownVariables()</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.integration.impl.MapVariableResolverFactory.getKnownVariables()</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.integration.impl.TypeInjectionResolverFactoryImpl.getKnownVariables()</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.integration.VariableResolverFactory.getNextFactory()</name>
                <inbound type="feature" confirmed="yes">org.mvel.debug.DebugTools.getAllVariableResolvers(org.mvel.integration.VariableResolverFactory)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.integration.ResolverTools.appendFactory(org.mvel.integration.VariableResolverFactory, org.mvel.integration.VariableResolverFactory)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.integration.ResolverTools.insertFactory(org.mvel.integration.VariableResolverFactory, org.mvel.integration.VariableResolverFactory)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.integration.impl.BaseVariableResolverFactory.appendFactory(org.mvel.integration.VariableResolverFactory)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.util.ParseTools.finalLocalVariableFactory(org.mvel.integration.VariableResolverFactory)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.util.ParseTools.findClassImportResolverFactory(org.mvel.integration.VariableResolverFactory)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.util.ParseTools.findStaticMethodImportResolverFactory(org.mvel.integration.VariableResolverFactory)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.integration.VariableResolverFactory.getVariableResolver(java.lang.String)</name>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="class" confirmed="yes">org.mvel.integration.VariableResolver</outbound>
                <inbound type="feature" confirmed="yes">org.mvel.ASTNode.getReducedValue(java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.MVELInterpretedRuntime.getImport(java.lang.String)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.PropertyAccessor.getBeanProperty(java.lang.Object, java.lang.String)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.PropertyAccessor.getMethod(java.lang.Object, java.lang.String)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.ast.AssignAdd.getReducedValue(java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.ast.AssignAdd.getReducedValueAccelerated(java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.ast.AssignDiv.getReducedValue(java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.ast.AssignDiv.getReducedValueAccelerated(java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.ast.AssignMult.getReducedValue(java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.ast.AssignMult.getReducedValueAccelerated(java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.ast.AssignSub.getReducedValue(java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.ast.AssignSub.getReducedValueAccelerated(java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.ast.AssignmentNode.getReducedValue(java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.ast.NewObjectNode.getReducedValueAccelerated(java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.ast.PostFixDecNode.getReducedValueAccelerated(java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.ast.PostFixIncNode.getReducedValueAccelerated(java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.ast.PreFixDecNode.getReducedValueAccelerated(java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.ast.PreFixIncNode.getReducedValueAccelerated(java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.ast.VarPropertyNode.getReducedValue(java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.ast.VarPropertyNode.getReducedValueAccelerated(java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.debug.DebugTools.getAllVariableResolvers(org.mvel.integration.VariableResolverFactory)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.integration.impl.BaseVariableResolverFactory.getVariableResolver(java.lang.String)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.integration.impl.ItemResolverFactory.getVariableResolver(java.lang.String)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.integration.impl.MapVariableResolverFactory.getVariableResolver(java.lang.String)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.asm.ASMAccessorOptimizer.getBeanProperty(java.lang.Object, java.lang.String)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.asm.ASMAccessorOptimizer.getMethod(java.lang.Object, java.lang.String)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.refl.ReflectiveAccessorOptimizer.getBeanProperty(java.lang.Object, java.lang.String)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.refl.ReflectiveAccessorOptimizer.getMethod(java.lang.Object, java.lang.String)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.refl.VariableAccessor.getValue(java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.refl.VariableAccessor.setValue(java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory, java.lang.Object)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.util.ParseTools.findClass(org.mvel.integration.VariableResolverFactory, java.lang.String)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.integration.VariableResolverFactory.isResolveable(java.lang.String)</name>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <inbound type="feature" confirmed="yes">org.mvel.ASTNode.getReducedValue(java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.MVELInterpretedRuntime.hasImport(java.lang.String)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.PropertyAccessor.getBeanProperty(java.lang.Object, java.lang.String)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.PropertyAccessor.getMethod(java.lang.Object, java.lang.String)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.ast.NewObjectNode.getReducedValueAccelerated(java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.ast.PropertyASTNode.initializePropertyNode(java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.integration.impl.BaseVariableResolverFactory.isNextResolveable(java.lang.String)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.integration.impl.ItemResolverFactory.isResolveable(java.lang.String)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.integration.impl.MapVariableResolverFactory.isResolveable(java.lang.String)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.asm.ASMAccessorOptimizer.getBeanProperty(java.lang.Object, java.lang.String)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.asm.ASMAccessorOptimizer.getMethod(java.lang.Object, java.lang.String)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.refl.ReflectiveAccessorOptimizer.getBeanProperty(java.lang.Object, java.lang.String)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.refl.ReflectiveAccessorOptimizer.getMethod(java.lang.Object, java.lang.String)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.util.ParseTools.findClass(org.mvel.integration.VariableResolverFactory, java.lang.String)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.integration.VariableResolverFactory.isTarget(java.lang.String)</name>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.integration.VariableResolverFactory.setNextFactory(org.mvel.integration.VariableResolverFactory)</name>
                <inbound type="feature" confirmed="yes">org.mvel.integration.ResolverTools.appendFactory(org.mvel.integration.VariableResolverFactory, org.mvel.integration.VariableResolverFactory)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.integration.ResolverTools.insertFactory(org.mvel.integration.VariableResolverFactory, org.mvel.integration.VariableResolverFactory)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.integration.impl.BaseVariableResolverFactory.appendFactory(org.mvel.integration.VariableResolverFactory)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.integration.impl.BaseVariableResolverFactory.insertFactory(org.mvel.integration.VariableResolverFactory)</inbound>
            </feature>
        </class>
    </package>
    <package confirmed="yes">
        <name>org.mvel.integration.impl</name>
        <class confirmed="yes">
            <name>org.mvel.integration.impl.BaseVariableResolverFactory</name>
            <outbound type="class" confirmed="no">java.lang.Object</outbound>
            <outbound type="class" confirmed="yes">org.mvel.integration.VariableResolverFactory</outbound>
            <inbound type="class" confirmed="yes">org.mvel.integration.impl.ClassImportResolverFactory</inbound>
            <inbound type="class" confirmed="yes">org.mvel.integration.impl.ItemResolverFactory</inbound>
            <inbound type="class" confirmed="yes">org.mvel.integration.impl.MapVariableResolverFactory</inbound>
            <inbound type="class" confirmed="yes">org.mvel.integration.impl.StaticMethodImportResolverFactory</inbound>
            <feature confirmed="yes">
                <name>org.mvel.integration.impl.BaseVariableResolverFactory.BaseVariableResolverFactory()</name>
                <outbound type="feature" confirmed="no">java.lang.Object.Object()</outbound>
                <inbound type="feature" confirmed="yes">org.mvel.integration.impl.ClassImportResolverFactory.ClassImportResolverFactory()</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.integration.impl.ClassImportResolverFactory.ClassImportResolverFactory(org.mvel.ParserContext, org.mvel.integration.VariableResolverFactory)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.integration.impl.ItemResolverFactory.ItemResolverFactory(org.mvel.integration.impl.ItemResolverFactory$ItemResolver, org.mvel.integration.VariableResolverFactory)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.integration.impl.MapVariableResolverFactory.MapVariableResolverFactory(java.util.Map)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.integration.impl.MapVariableResolverFactory.MapVariableResolverFactory(java.util.Map, boolean)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.integration.impl.MapVariableResolverFactory.MapVariableResolverFactory(java.util.Map, org.mvel.integration.VariableResolverFactory)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.integration.impl.StaticMethodImportResolverFactory.StaticMethodImportResolverFactory()</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.integration.impl.BaseVariableResolverFactory.appendFactory(org.mvel.integration.VariableResolverFactory)</name>
                <outbound type="class" confirmed="yes">org.mvel.integration.VariableResolverFactory</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.integration.VariableResolverFactory.getNextFactory()</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.integration.VariableResolverFactory.setNextFactory(org.mvel.integration.VariableResolverFactory)</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.integration.impl.BaseVariableResolverFactory.nextFactory</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.integration.impl.BaseVariableResolverFactory.getKnownVariables()</name>
                <outbound type="class" confirmed="no">java.util.Collection</outbound>
                <outbound type="feature" confirmed="no">java.util.HashSet.HashSet()</outbound>
                <outbound type="class" confirmed="no">java.util.Map</outbound>
                <outbound type="feature" confirmed="no">java.util.Map.keySet()</outbound>
                <outbound type="class" confirmed="no">java.util.Set</outbound>
                <outbound type="feature" confirmed="no">java.util.Set.addAll(java.util.Collection)</outbound>
                <outbound type="class" confirmed="yes">org.mvel.integration.VariableResolverFactory</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.integration.VariableResolverFactory.getKnownVariables()</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.integration.impl.BaseVariableResolverFactory.nextFactory</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.integration.impl.BaseVariableResolverFactory.variableResolvers</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.integration.impl.BaseVariableResolverFactory.getNextFactory()</name>
                <outbound type="class" confirmed="yes">org.mvel.integration.VariableResolverFactory</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.integration.impl.BaseVariableResolverFactory.nextFactory</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.integration.impl.BaseVariableResolverFactory.getVariableResolver(java.lang.String)</name>
                <outbound type="class" confirmed="no">java.lang.Object</outbound>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="class" confirmed="no">java.util.Map</outbound>
                <outbound type="feature" confirmed="no">java.util.Map.containsKey(java.lang.Object)</outbound>
                <outbound type="feature" confirmed="no">java.util.Map.get(java.lang.Object)</outbound>
                <outbound type="class" confirmed="yes">org.mvel.integration.VariableResolver</outbound>
                <outbound type="class" confirmed="yes">org.mvel.integration.VariableResolverFactory</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.integration.VariableResolverFactory.getVariableResolver(java.lang.String)</outbound>
                <outbound type="feature" confirmed="no">org.mvel.integration.impl.BaseVariableResolverFactory.isResolveable(java.lang.String)</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.integration.impl.BaseVariableResolverFactory.nextFactory</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.integration.impl.BaseVariableResolverFactory.variableResolvers</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.integration.impl.BaseVariableResolverFactory.insertFactory(org.mvel.integration.VariableResolverFactory)</name>
                <outbound type="class" confirmed="yes">org.mvel.integration.VariableResolverFactory</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.integration.VariableResolverFactory.setNextFactory(org.mvel.integration.VariableResolverFactory)</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.integration.impl.BaseVariableResolverFactory.nextFactory</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.integration.impl.BaseVariableResolverFactory.isNextResolveable(java.lang.String)</name>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="class" confirmed="yes">org.mvel.integration.VariableResolverFactory</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.integration.VariableResolverFactory.isResolveable(java.lang.String)</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.integration.impl.BaseVariableResolverFactory.nextFactory</outbound>
            </feature>
            <feature confirmed="no">
                <name>org.mvel.integration.impl.BaseVariableResolverFactory.isResolveable(java.lang.String)</name>
                <inbound type="feature" confirmed="yes">org.mvel.integration.impl.BaseVariableResolverFactory.getVariableResolver(java.lang.String)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.integration.impl.BaseVariableResolverFactory.nextFactory</name>
                <outbound type="class" confirmed="yes">org.mvel.integration.VariableResolverFactory</outbound>
                <inbound type="feature" confirmed="yes">org.mvel.integration.impl.BaseVariableResolverFactory.appendFactory(org.mvel.integration.VariableResolverFactory)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.integration.impl.BaseVariableResolverFactory.getKnownVariables()</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.integration.impl.BaseVariableResolverFactory.getNextFactory()</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.integration.impl.BaseVariableResolverFactory.getVariableResolver(java.lang.String)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.integration.impl.BaseVariableResolverFactory.insertFactory(org.mvel.integration.VariableResolverFactory)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.integration.impl.BaseVariableResolverFactory.isNextResolveable(java.lang.String)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.integration.impl.BaseVariableResolverFactory.setNextFactory(org.mvel.integration.VariableResolverFactory)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.integration.impl.BaseVariableResolverFactory.setNextFactory(org.mvel.integration.VariableResolverFactory)</name>
                <outbound type="class" confirmed="yes">org.mvel.integration.VariableResolverFactory</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.integration.impl.BaseVariableResolverFactory.nextFactory</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.integration.impl.BaseVariableResolverFactory.variableResolvers</name>
                <outbound type="class" confirmed="no">java.util.Map</outbound>
                <inbound type="feature" confirmed="yes">org.mvel.integration.impl.BaseVariableResolverFactory.getKnownVariables()</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.integration.impl.BaseVariableResolverFactory.getVariableResolver(java.lang.String)</inbound>
            </feature>
        </class>
        <class confirmed="yes">
            <name>org.mvel.integration.impl.ClassImportResolver</name>
            <outbound type="class" confirmed="no">java.lang.Object</outbound>
            <outbound type="class" confirmed="yes">org.mvel.integration.VariableResolver</outbound>
            <feature confirmed="yes">
                <name>org.mvel.integration.impl.ClassImportResolver.ClassImportResolver(java.lang.String, java.lang.Class)</name>
                <outbound type="class" confirmed="no">java.lang.Class</outbound>
                <outbound type="feature" confirmed="no">java.lang.Object.Object()</outbound>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.integration.impl.ClassImportResolver.name</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.integration.impl.ClassImportResolver.type</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.integration.impl.ClassImportResolver.getFlags()</name>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.integration.impl.ClassImportResolver.getName()</name>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.integration.impl.ClassImportResolver.name</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.integration.impl.ClassImportResolver.getType()</name>
                <outbound type="class" confirmed="no">java.lang.Class</outbound>
                <outbound type="feature" confirmed="no">java.lang.Class.forName(java.lang.String)</outbound>
                <outbound type="class" confirmed="no">java.lang.ClassNotFoundException</outbound>
                <outbound type="feature" confirmed="no">java.lang.NoClassDefFoundError.NoClassDefFoundError(java.lang.String)</outbound>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="feature" confirmed="no">java.lang.Throwable.getMessage()</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.integration.impl.ClassImportResolver.getValue()</name>
                <outbound type="class" confirmed="no">java.lang.Class</outbound>
                <outbound type="class" confirmed="no">java.lang.Object</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.integration.impl.ClassImportResolver.type</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.integration.impl.ClassImportResolver.name</name>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <inbound type="feature" confirmed="yes">org.mvel.integration.impl.ClassImportResolver.ClassImportResolver(java.lang.String, java.lang.Class)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.integration.impl.ClassImportResolver.getName()</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.integration.impl.ClassImportResolver.setName(java.lang.String)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.integration.impl.ClassImportResolver.setName(java.lang.String)</name>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.integration.impl.ClassImportResolver.name</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.integration.impl.ClassImportResolver.setStaticType(java.lang.Class)</name>
                <outbound type="class" confirmed="no">java.lang.Class</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.integration.impl.ClassImportResolver.type</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.integration.impl.ClassImportResolver.setValue(java.lang.Object)</name>
                <outbound type="class" confirmed="no">java.lang.Object</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.integration.impl.ClassImportResolver.type</name>
                <outbound type="class" confirmed="no">java.lang.Class</outbound>
                <inbound type="feature" confirmed="yes">org.mvel.integration.impl.ClassImportResolver.ClassImportResolver(java.lang.String, java.lang.Class)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.integration.impl.ClassImportResolver.getValue()</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.integration.impl.ClassImportResolver.setStaticType(java.lang.Class)</inbound>
            </feature>
        </class>
        <class confirmed="yes">
            <name>org.mvel.integration.impl.ClassImportResolverFactory</name>
            <outbound type="class" confirmed="yes">org.mvel.integration.impl.BaseVariableResolverFactory</outbound>
            <inbound type="feature" confirmed="yes">org.mvel.MVELInterpretedRuntime.getImport(java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.MVELInterpretedRuntime.hasImport(java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.ast.ImportNode.getReducedValueAccelerated(java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.util.ParseTools.findClassImportResolverFactory(org.mvel.integration.VariableResolverFactory)</inbound>
            <feature confirmed="yes">
                <name>org.mvel.integration.impl.ClassImportResolverFactory.ClassImportResolverFactory()</name>
                <outbound type="feature" confirmed="no">java.util.HashMap.HashMap()</outbound>
                <outbound type="class" confirmed="no">java.util.Map</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.integration.impl.BaseVariableResolverFactory.BaseVariableResolverFactory()</outbound>
                <outbound type="feature" confirmed="no">org.mvel.integration.impl.ClassImportResolverFactory.variableResolvers</outbound>
                <inbound type="feature" confirmed="yes">org.mvel.util.ParseTools.findClassImportResolverFactory(org.mvel.integration.VariableResolverFactory)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.integration.impl.ClassImportResolverFactory.ClassImportResolverFactory(org.mvel.ParserContext, org.mvel.integration.VariableResolverFactory)</name>
                <outbound type="class" confirmed="no">java.lang.Object</outbound>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="feature" confirmed="no">java.util.HashMap.HashMap()</outbound>
                <outbound type="class" confirmed="no">java.util.Iterator</outbound>
                <outbound type="feature" confirmed="no">java.util.Iterator.hasNext()</outbound>
                <outbound type="feature" confirmed="no">java.util.Iterator.next()</outbound>
                <outbound type="class" confirmed="no">java.util.Map</outbound>
                <outbound type="feature" confirmed="no">java.util.Map.get(java.lang.Object)</outbound>
                <outbound type="feature" confirmed="no">java.util.Map.keySet()</outbound>
                <outbound type="feature" confirmed="no">java.util.Map.put(java.lang.Object, java.lang.Object)</outbound>
                <outbound type="class" confirmed="no">java.util.Set</outbound>
                <outbound type="feature" confirmed="no">java.util.Set.iterator()</outbound>
                <outbound type="class" confirmed="yes">org.mvel.ParserContext</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.ParserContext.getImports()</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.ParserContext.getPackageImports()</outbound>
                <outbound type="class" confirmed="yes">org.mvel.integration.VariableResolverFactory</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.integration.impl.BaseVariableResolverFactory.BaseVariableResolverFactory()</outbound>
                <outbound type="feature" confirmed="no">org.mvel.integration.impl.ClassImportResolverFactory.nextFactory</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.integration.impl.ClassImportResolverFactory.packageImports</outbound>
                <outbound type="feature" confirmed="no">org.mvel.integration.impl.ClassImportResolverFactory.variableResolvers</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.integration.impl.SimpleValueResolver.SimpleValueResolver(java.lang.Object)</outbound>
                <inbound type="feature" confirmed="yes">org.mvel.MVELRuntime.execute(boolean, org.mvel.CompiledExpression, java.lang.Object, org.mvel.integration.VariableResolverFactory)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.integration.impl.ClassImportResolverFactory.addClass(java.lang.Class)</name>
                <outbound type="class" confirmed="no">java.lang.Class</outbound>
                <outbound type="class" confirmed="no">java.lang.Object</outbound>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="class" confirmed="no">java.util.Map</outbound>
                <outbound type="feature" confirmed="no">java.util.Map.put(java.lang.Object, java.lang.Object)</outbound>
                <outbound type="feature" confirmed="no">org.mvel.integration.impl.ClassImportResolverFactory.variableResolvers</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.integration.impl.SimpleValueResolver.SimpleValueResolver(java.lang.Object)</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.util.ParseTools.getSimpleClassName(java.lang.Class)</outbound>
                <inbound type="feature" confirmed="yes">org.mvel.ast.ImportNode.getReducedValueAccelerated(java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.integration.impl.ClassImportResolverFactory.isResolveable(java.lang.String)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.integration.impl.ClassImportResolverFactory.addPackageImport(java.lang.String)</name>
                <outbound type="class" confirmed="no">java.lang.Object</outbound>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="feature" confirmed="no">java.util.HashSet.HashSet()</outbound>
                <outbound type="class" confirmed="no">java.util.Set</outbound>
                <outbound type="feature" confirmed="no">java.util.Set.add(java.lang.Object)</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.integration.impl.ClassImportResolverFactory.packageImports</outbound>
                <inbound type="feature" confirmed="yes">org.mvel.ast.ImportNode.getReducedValueAccelerated(java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.integration.impl.ClassImportResolverFactory.clear()</name>
                <outbound type="class" confirmed="no">java.util.Map</outbound>
                <outbound type="feature" confirmed="no">java.util.Map.clear()</outbound>
                <outbound type="feature" confirmed="no">org.mvel.integration.impl.ClassImportResolverFactory.variableResolvers</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.integration.impl.ClassImportResolverFactory.createVariable(java.lang.String, java.lang.Object)</name>
                <outbound type="class" confirmed="no">java.lang.Object</outbound>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="feature" confirmed="no">java.util.HashMap.HashMap()</outbound>
                <outbound type="class" confirmed="no">java.util.Map</outbound>
                <outbound type="class" confirmed="yes">org.mvel.integration.VariableResolver</outbound>
                <outbound type="class" confirmed="yes">org.mvel.integration.VariableResolverFactory</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.integration.VariableResolverFactory.createVariable(java.lang.String, java.lang.Object)</outbound>
                <outbound type="feature" confirmed="no">org.mvel.integration.impl.ClassImportResolverFactory.nextFactory</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.integration.impl.MapVariableResolverFactory.MapVariableResolverFactory(java.util.Map)</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.integration.impl.ClassImportResolverFactory.createVariable(java.lang.String, java.lang.Object, java.lang.Class)</name>
                <outbound type="class" confirmed="no">java.lang.Class</outbound>
                <outbound type="class" confirmed="no">java.lang.Object</outbound>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="feature" confirmed="no">java.util.HashMap.HashMap()</outbound>
                <outbound type="class" confirmed="no">java.util.Map</outbound>
                <outbound type="class" confirmed="yes">org.mvel.integration.VariableResolver</outbound>
                <outbound type="class" confirmed="yes">org.mvel.integration.VariableResolverFactory</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.integration.VariableResolverFactory.createVariable(java.lang.String, java.lang.Object)</outbound>
                <outbound type="feature" confirmed="no">org.mvel.integration.impl.ClassImportResolverFactory.nextFactory</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.integration.impl.MapVariableResolverFactory.MapVariableResolverFactory(java.util.Map)</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.integration.impl.ClassImportResolverFactory.getImportedClasses()</name>
                <outbound type="class" confirmed="no">java.lang.Object</outbound>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="feature" confirmed="no">java.util.HashMap.HashMap()</outbound>
                <outbound type="class" confirmed="no">java.util.Iterator</outbound>
                <outbound type="feature" confirmed="no">java.util.Iterator.hasNext()</outbound>
                <outbound type="feature" confirmed="no">java.util.Iterator.next()</outbound>
                <outbound type="class" confirmed="no">java.util.Map</outbound>
                <outbound type="feature" confirmed="no">java.util.Map.get(java.lang.Object)</outbound>
                <outbound type="feature" confirmed="no">java.util.Map.keySet()</outbound>
                <outbound type="feature" confirmed="no">java.util.Map.put(java.lang.Object, java.lang.Object)</outbound>
                <outbound type="class" confirmed="no">java.util.Set</outbound>
                <outbound type="feature" confirmed="no">java.util.Set.iterator()</outbound>
                <outbound type="class" confirmed="yes">org.mvel.integration.VariableResolver</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.integration.VariableResolver.getValue()</outbound>
                <outbound type="feature" confirmed="no">org.mvel.integration.impl.ClassImportResolverFactory.variableResolvers</outbound>
            </feature>
            <feature confirmed="no">
                <name>org.mvel.integration.impl.ClassImportResolverFactory.isNextResolveable(java.lang.String)</name>
                <inbound type="feature" confirmed="yes">org.mvel.integration.impl.ClassImportResolverFactory.isResolveable(java.lang.String)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.integration.impl.ClassImportResolverFactory.isResolveable(java.lang.String)</name>
                <outbound type="class" confirmed="no">java.lang.Class</outbound>
                <outbound type="class" confirmed="no">java.lang.ClassNotFoundException</outbound>
                <outbound type="class" confirmed="no">java.lang.Object</outbound>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="feature" confirmed="no">java.lang.String.valueOf(java.lang.Object)</outbound>
                <outbound type="class" confirmed="no">java.lang.StringBuffer</outbound>
                <outbound type="feature" confirmed="no">java.lang.StringBuffer.StringBuffer(java.lang.String)</outbound>
                <outbound type="feature" confirmed="no">java.lang.StringBuffer.append(java.lang.String)</outbound>
                <outbound type="feature" confirmed="no">java.lang.StringBuffer.toString()</outbound>
                <outbound type="class" confirmed="no">java.util.Iterator</outbound>
                <outbound type="feature" confirmed="no">java.util.Iterator.hasNext()</outbound>
                <outbound type="feature" confirmed="no">java.util.Iterator.next()</outbound>
                <outbound type="class" confirmed="no">java.util.Map</outbound>
                <outbound type="feature" confirmed="no">java.util.Map.containsKey(java.lang.Object)</outbound>
                <outbound type="class" confirmed="no">java.util.Set</outbound>
                <outbound type="feature" confirmed="no">java.util.Set.iterator()</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.integration.impl.ClassImportResolverFactory.addClass(java.lang.Class)</outbound>
                <outbound type="feature" confirmed="no">org.mvel.integration.impl.ClassImportResolverFactory.isNextResolveable(java.lang.String)</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.integration.impl.ClassImportResolverFactory.packageImports</outbound>
                <outbound type="feature" confirmed="no">org.mvel.integration.impl.ClassImportResolverFactory.variableResolvers</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.util.ParseTools.createClass(java.lang.String)</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.integration.impl.ClassImportResolverFactory.isTarget(java.lang.String)</name>
                <outbound type="class" confirmed="no">java.lang.Object</outbound>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="class" confirmed="no">java.util.Map</outbound>
                <outbound type="feature" confirmed="no">java.util.Map.containsKey(java.lang.Object)</outbound>
                <outbound type="feature" confirmed="no">org.mvel.integration.impl.ClassImportResolverFactory.variableResolvers</outbound>
            </feature>
            <feature confirmed="no">
                <name>org.mvel.integration.impl.ClassImportResolverFactory.nextFactory</name>
                <inbound type="feature" confirmed="yes">org.mvel.integration.impl.ClassImportResolverFactory.ClassImportResolverFactory(org.mvel.ParserContext, org.mvel.integration.VariableResolverFactory)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.integration.impl.ClassImportResolverFactory.createVariable(java.lang.String, java.lang.Object)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.integration.impl.ClassImportResolverFactory.createVariable(java.lang.String, java.lang.Object, java.lang.Class)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.integration.impl.ClassImportResolverFactory.packageImports</name>
                <outbound type="class" confirmed="no">java.util.Set</outbound>
                <inbound type="feature" confirmed="yes">org.mvel.integration.impl.ClassImportResolverFactory.ClassImportResolverFactory(org.mvel.ParserContext, org.mvel.integration.VariableResolverFactory)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.integration.impl.ClassImportResolverFactory.addPackageImport(java.lang.String)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.integration.impl.ClassImportResolverFactory.isResolveable(java.lang.String)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.integration.impl.ClassImportResolverFactory.setImportedClasses(java.util.Map)</name>
                <outbound type="class" confirmed="no">java.lang.Object</outbound>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="class" confirmed="no">java.util.Iterator</outbound>
                <outbound type="feature" confirmed="no">java.util.Iterator.hasNext()</outbound>
                <outbound type="feature" confirmed="no">java.util.Iterator.next()</outbound>
                <outbound type="class" confirmed="no">java.util.Map</outbound>
                <outbound type="feature" confirmed="no">java.util.Map.get(java.lang.Object)</outbound>
                <outbound type="feature" confirmed="no">java.util.Map.keySet()</outbound>
                <outbound type="feature" confirmed="no">java.util.Map.put(java.lang.Object, java.lang.Object)</outbound>
                <outbound type="class" confirmed="no">java.util.Set</outbound>
                <outbound type="feature" confirmed="no">java.util.Set.iterator()</outbound>
                <outbound type="feature" confirmed="no">org.mvel.integration.impl.ClassImportResolverFactory.variableResolvers</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.integration.impl.SimpleValueResolver.SimpleValueResolver(java.lang.Object)</outbound>
            </feature>
            <feature confirmed="no">
                <name>org.mvel.integration.impl.ClassImportResolverFactory.variableResolvers</name>
                <inbound type="feature" confirmed="yes">org.mvel.integration.impl.ClassImportResolverFactory.ClassImportResolverFactory()</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.integration.impl.ClassImportResolverFactory.ClassImportResolverFactory(org.mvel.ParserContext, org.mvel.integration.VariableResolverFactory)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.integration.impl.ClassImportResolverFactory.addClass(java.lang.Class)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.integration.impl.ClassImportResolverFactory.clear()</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.integration.impl.ClassImportResolverFactory.getImportedClasses()</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.integration.impl.ClassImportResolverFactory.isResolveable(java.lang.String)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.integration.impl.ClassImportResolverFactory.isTarget(java.lang.String)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.integration.impl.ClassImportResolverFactory.setImportedClasses(java.util.Map)</inbound>
            </feature>
        </class>
        <class confirmed="yes">
            <name>org.mvel.integration.impl.DefaultLocalVariableResolverFactory</name>
            <outbound type="class" confirmed="yes">org.mvel.integration.impl.LocalVariableResolverFactory</outbound>
            <outbound type="class" confirmed="yes">org.mvel.integration.impl.MapVariableResolverFactory</outbound>
            <feature confirmed="yes">
                <name>org.mvel.integration.impl.DefaultLocalVariableResolverFactory.DefaultLocalVariableResolverFactory()</name>
                <outbound type="feature" confirmed="no">java.util.HashMap.HashMap()</outbound>
                <outbound type="class" confirmed="no">java.util.Map</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.integration.impl.MapVariableResolverFactory.MapVariableResolverFactory(java.util.Map)</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.integration.impl.DefaultLocalVariableResolverFactory.DefaultLocalVariableResolverFactory(java.util.Map)</name>
                <outbound type="class" confirmed="no">java.util.Map</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.integration.impl.MapVariableResolverFactory.MapVariableResolverFactory(java.util.Map)</outbound>
                <inbound type="feature" confirmed="yes">org.mvel.MVELSH.main(java.lang.String[])</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.util.ParseTools.finalLocalVariableFactory(org.mvel.integration.VariableResolverFactory)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.integration.impl.DefaultLocalVariableResolverFactory.DefaultLocalVariableResolverFactory(java.util.Map, boolean)</name>
                <outbound type="class" confirmed="no">java.util.Map</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.integration.impl.MapVariableResolverFactory.MapVariableResolverFactory(java.util.Map, boolean)</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.integration.impl.DefaultLocalVariableResolverFactory.DefaultLocalVariableResolverFactory(java.util.Map, org.mvel.integration.VariableResolverFactory)</name>
                <outbound type="class" confirmed="no">java.util.Map</outbound>
                <outbound type="class" confirmed="yes">org.mvel.integration.VariableResolverFactory</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.integration.impl.MapVariableResolverFactory.MapVariableResolverFactory(java.util.Map, org.mvel.integration.VariableResolverFactory)</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.integration.impl.DefaultLocalVariableResolverFactory.DefaultLocalVariableResolverFactory(org.mvel.integration.VariableResolverFactory)</name>
                <outbound type="feature" confirmed="no">java.util.HashMap.HashMap()</outbound>
                <outbound type="class" confirmed="no">java.util.Map</outbound>
                <outbound type="class" confirmed="yes">org.mvel.integration.VariableResolverFactory</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.integration.impl.MapVariableResolverFactory.MapVariableResolverFactory(java.util.Map, org.mvel.integration.VariableResolverFactory)</outbound>
                <inbound type="feature" confirmed="yes">org.mvel.ast.ForEachNode.getReducedValue(java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.ast.ForEachNode.getReducedValueAccelerated(java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory)</inbound>
            </feature>
            <feature confirmed="no">
                <name>org.mvel.integration.impl.DefaultLocalVariableResolverFactory.setNextFactory(org.mvel.integration.VariableResolverFactory)</name>
                <inbound type="feature" confirmed="yes">org.mvel.util.ParseTools.finalLocalVariableFactory(org.mvel.integration.VariableResolverFactory)</inbound>
            </feature>
        </class>
        <class confirmed="yes">
            <name>org.mvel.integration.impl.ItemResolverFactory</name>
            <outbound type="class" confirmed="yes">org.mvel.integration.impl.BaseVariableResolverFactory</outbound>
            <feature confirmed="yes">
                <name>org.mvel.integration.impl.ItemResolverFactory.ItemResolverFactory(org.mvel.integration.impl.ItemResolverFactory$ItemResolver, org.mvel.integration.VariableResolverFactory)</name>
                <outbound type="class" confirmed="yes">org.mvel.integration.VariableResolverFactory</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.integration.impl.BaseVariableResolverFactory.BaseVariableResolverFactory()</outbound>
                <outbound type="class" confirmed="yes">org.mvel.integration.impl.ItemResolverFactory$ItemResolver</outbound>
                <outbound type="feature" confirmed="no">org.mvel.integration.impl.ItemResolverFactory.nextFactory</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.integration.impl.ItemResolverFactory.resolver</outbound>
                <inbound type="feature" confirmed="yes">org.mvel.ast.ForEachNode.getReducedValue(java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.ast.ForEachNode.getReducedValueAccelerated(java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.integration.impl.ItemResolverFactory.createVariable(java.lang.String, java.lang.Object)</name>
                <outbound type="class" confirmed="no">java.lang.Object</outbound>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="class" confirmed="yes">org.mvel.integration.VariableResolver</outbound>
                <outbound type="class" confirmed="yes">org.mvel.integration.VariableResolverFactory</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.integration.VariableResolverFactory.createVariable(java.lang.String, java.lang.Object)</outbound>
                <outbound type="class" confirmed="yes">org.mvel.integration.impl.ItemResolverFactory$ItemResolver</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.integration.impl.ItemResolverFactory$ItemResolver.setValue(java.lang.Object)</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.integration.impl.ItemResolverFactory.isTarget(java.lang.String)</outbound>
                <outbound type="feature" confirmed="no">org.mvel.integration.impl.ItemResolverFactory.nextFactory</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.integration.impl.ItemResolverFactory.resolver</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.integration.impl.ItemResolverFactory.createVariable(java.lang.String, java.lang.Object, java.lang.Class)</name>
                <outbound type="class" confirmed="no">java.lang.Class</outbound>
                <outbound type="class" confirmed="no">java.lang.Object</outbound>
                <outbound type="feature" confirmed="no">java.lang.RuntimeException.RuntimeException(java.lang.String)</outbound>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="class" confirmed="no">java.lang.StringBuffer</outbound>
                <outbound type="feature" confirmed="no">java.lang.StringBuffer.StringBuffer(java.lang.String)</outbound>
                <outbound type="feature" confirmed="no">java.lang.StringBuffer.append(java.lang.String)</outbound>
                <outbound type="feature" confirmed="no">java.lang.StringBuffer.toString()</outbound>
                <outbound type="class" confirmed="yes">org.mvel.integration.VariableResolver</outbound>
                <outbound type="class" confirmed="yes">org.mvel.integration.VariableResolverFactory</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.integration.VariableResolverFactory.createVariable(java.lang.String, java.lang.Object)</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.integration.impl.ItemResolverFactory.isTarget(java.lang.String)</outbound>
                <outbound type="feature" confirmed="no">org.mvel.integration.impl.ItemResolverFactory.nextFactory</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.integration.impl.ItemResolverFactory.getVariableResolver(java.lang.String)</name>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="class" confirmed="yes">org.mvel.integration.VariableResolver</outbound>
                <outbound type="class" confirmed="yes">org.mvel.integration.VariableResolverFactory</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.integration.VariableResolverFactory.getVariableResolver(java.lang.String)</outbound>
                <outbound type="class" confirmed="yes">org.mvel.integration.impl.ItemResolverFactory$ItemResolver</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.integration.impl.ItemResolverFactory.isTarget(java.lang.String)</outbound>
                <outbound type="feature" confirmed="no">org.mvel.integration.impl.ItemResolverFactory.nextFactory</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.integration.impl.ItemResolverFactory.resolver</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.integration.impl.ItemResolverFactory.isResolveable(java.lang.String)</name>
                <outbound type="class" confirmed="no">java.lang.Object</outbound>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="feature" confirmed="no">java.lang.String.equals(java.lang.Object)</outbound>
                <outbound type="class" confirmed="yes">org.mvel.integration.VariableResolverFactory</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.integration.VariableResolverFactory.isResolveable(java.lang.String)</outbound>
                <outbound type="class" confirmed="yes">org.mvel.integration.impl.ItemResolverFactory$ItemResolver</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.integration.impl.ItemResolverFactory$ItemResolver.getName()</outbound>
                <outbound type="feature" confirmed="no">org.mvel.integration.impl.ItemResolverFactory.nextFactory</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.integration.impl.ItemResolverFactory.resolver</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.integration.impl.ItemResolverFactory.isTarget(java.lang.String)</name>
                <outbound type="class" confirmed="no">java.lang.Object</outbound>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="feature" confirmed="no">java.lang.String.equals(java.lang.Object)</outbound>
                <outbound type="class" confirmed="yes">org.mvel.integration.impl.ItemResolverFactory$ItemResolver</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.integration.impl.ItemResolverFactory$ItemResolver.getName()</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.integration.impl.ItemResolverFactory.resolver</outbound>
                <inbound type="feature" confirmed="yes">org.mvel.integration.impl.ItemResolverFactory.createVariable(java.lang.String, java.lang.Object)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.integration.impl.ItemResolverFactory.createVariable(java.lang.String, java.lang.Object, java.lang.Class)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.integration.impl.ItemResolverFactory.getVariableResolver(java.lang.String)</inbound>
            </feature>
            <feature confirmed="no">
                <name>org.mvel.integration.impl.ItemResolverFactory.nextFactory</name>
                <inbound type="feature" confirmed="yes">org.mvel.integration.impl.ItemResolverFactory.ItemResolverFactory(org.mvel.integration.impl.ItemResolverFactory$ItemResolver, org.mvel.integration.VariableResolverFactory)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.integration.impl.ItemResolverFactory.createVariable(java.lang.String, java.lang.Object)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.integration.impl.ItemResolverFactory.createVariable(java.lang.String, java.lang.Object, java.lang.Class)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.integration.impl.ItemResolverFactory.getVariableResolver(java.lang.String)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.integration.impl.ItemResolverFactory.isResolveable(java.lang.String)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.integration.impl.ItemResolverFactory.resolver</name>
                <outbound type="class" confirmed="yes">org.mvel.integration.impl.ItemResolverFactory$ItemResolver</outbound>
                <inbound type="feature" confirmed="yes">org.mvel.integration.impl.ItemResolverFactory.ItemResolverFactory(org.mvel.integration.impl.ItemResolverFactory$ItemResolver, org.mvel.integration.VariableResolverFactory)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.integration.impl.ItemResolverFactory.createVariable(java.lang.String, java.lang.Object)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.integration.impl.ItemResolverFactory.getVariableResolver(java.lang.String)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.integration.impl.ItemResolverFactory.isResolveable(java.lang.String)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.integration.impl.ItemResolverFactory.isTarget(java.lang.String)</inbound>
            </feature>
        </class>
        <class confirmed="yes">
            <name>org.mvel.integration.impl.ItemResolverFactory$ItemResolver</name>
            <outbound type="class" confirmed="no">java.lang.Object</outbound>
            <outbound type="class" confirmed="yes">org.mvel.integration.VariableResolver</outbound>
            <inbound type="feature" confirmed="yes">org.mvel.ast.ForEachNode.getReducedValue(java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.ast.ForEachNode.getReducedValueAccelerated(java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.integration.impl.ItemResolverFactory.ItemResolverFactory(org.mvel.integration.impl.ItemResolverFactory$ItemResolver, org.mvel.integration.VariableResolverFactory)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.integration.impl.ItemResolverFactory.createVariable(java.lang.String, java.lang.Object)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.integration.impl.ItemResolverFactory.getVariableResolver(java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.integration.impl.ItemResolverFactory.isResolveable(java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.integration.impl.ItemResolverFactory.isTarget(java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.integration.impl.ItemResolverFactory.resolver</inbound>
            <feature confirmed="yes">
                <name>org.mvel.integration.impl.ItemResolverFactory$ItemResolver.ItemResolverFactory$ItemResolver(java.lang.String)</name>
                <outbound type="class" confirmed="no">java.lang.Class</outbound>
                <outbound type="feature" confirmed="no">java.lang.Class.forName(java.lang.String)</outbound>
                <outbound type="class" confirmed="no">java.lang.ClassNotFoundException</outbound>
                <outbound type="feature" confirmed="no">java.lang.NoClassDefFoundError.NoClassDefFoundError(java.lang.String)</outbound>
                <outbound type="feature" confirmed="no">java.lang.Object.Object()</outbound>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="feature" confirmed="no">java.lang.Throwable.getMessage()</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.integration.impl.ItemResolverFactory$ItemResolver.name</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.integration.impl.ItemResolverFactory$ItemResolver.type</outbound>
                <inbound type="feature" confirmed="yes">org.mvel.ast.ForEachNode.getReducedValue(java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.ast.ForEachNode.getReducedValueAccelerated(java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.integration.impl.ItemResolverFactory$ItemResolver.getFlags()</name>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.integration.impl.ItemResolverFactory$ItemResolver.getName()</name>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.integration.impl.ItemResolverFactory$ItemResolver.name</outbound>
                <inbound type="feature" confirmed="yes">org.mvel.integration.impl.ItemResolverFactory.isResolveable(java.lang.String)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.integration.impl.ItemResolverFactory.isTarget(java.lang.String)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.integration.impl.ItemResolverFactory$ItemResolver.getType()</name>
                <outbound type="class" confirmed="no">java.lang.Class</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.integration.impl.ItemResolverFactory$ItemResolver.type</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.integration.impl.ItemResolverFactory$ItemResolver.getValue()</name>
                <outbound type="class" confirmed="no">java.lang.Object</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.integration.impl.ItemResolverFactory$ItemResolver.value</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.integration.impl.ItemResolverFactory$ItemResolver.name</name>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <inbound type="feature" confirmed="yes">org.mvel.integration.impl.ItemResolverFactory$ItemResolver.ItemResolverFactory$ItemResolver(java.lang.String)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.integration.impl.ItemResolverFactory$ItemResolver.getName()</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.integration.impl.ItemResolverFactory$ItemResolver.setStaticType(java.lang.Class)</name>
                <outbound type="class" confirmed="no">java.lang.Class</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.integration.impl.ItemResolverFactory$ItemResolver.type</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.integration.impl.ItemResolverFactory$ItemResolver.setValue(java.lang.Object)</name>
                <outbound type="class" confirmed="no">java.lang.Object</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.integration.impl.ItemResolverFactory$ItemResolver.value</outbound>
                <inbound type="feature" confirmed="yes">org.mvel.ast.ForEachNode.getReducedValue(java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.ast.ForEachNode.getReducedValueAccelerated(java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.integration.impl.ItemResolverFactory.createVariable(java.lang.String, java.lang.Object)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.integration.impl.ItemResolverFactory$ItemResolver.type</name>
                <outbound type="class" confirmed="no">java.lang.Class</outbound>
                <inbound type="feature" confirmed="yes">org.mvel.integration.impl.ItemResolverFactory$ItemResolver.ItemResolverFactory$ItemResolver(java.lang.String)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.integration.impl.ItemResolverFactory$ItemResolver.getType()</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.integration.impl.ItemResolverFactory$ItemResolver.setStaticType(java.lang.Class)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.integration.impl.ItemResolverFactory$ItemResolver.value</name>
                <outbound type="class" confirmed="no">java.lang.Object</outbound>
                <inbound type="feature" confirmed="yes">org.mvel.integration.impl.ItemResolverFactory$ItemResolver.getValue()</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.integration.impl.ItemResolverFactory$ItemResolver.setValue(java.lang.Object)</inbound>
            </feature>
        </class>
        <class confirmed="yes">
            <name>org.mvel.integration.impl.LocalVariableResolverFactory</name>
            <outbound type="class" confirmed="no">java.lang.Object</outbound>
            <inbound type="class" confirmed="yes">org.mvel.integration.impl.DefaultLocalVariableResolverFactory</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.util.ParseTools.finalLocalVariableFactory(org.mvel.integration.VariableResolverFactory)</inbound>
        </class>
        <class confirmed="yes">
            <name>org.mvel.integration.impl.MapVariableResolver</name>
            <outbound type="class" confirmed="no">java.lang.Object</outbound>
            <outbound type="class" confirmed="yes">org.mvel.integration.VariableResolver</outbound>
            <feature confirmed="yes">
                <name>org.mvel.integration.impl.MapVariableResolver.MapVariableResolver(java.util.Map, java.lang.String)</name>
                <outbound type="feature" confirmed="no">java.lang.Object.Object()</outbound>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="class" confirmed="no">java.util.Map</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.integration.impl.MapVariableResolver.cache</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.integration.impl.MapVariableResolver.name</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.integration.impl.MapVariableResolver.variableMap</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.integration.impl.MapVariableResolver.MapVariableResolver(java.util.Map, java.lang.String, boolean)</name>
                <outbound type="feature" confirmed="no">java.lang.Object.Object()</outbound>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="class" confirmed="no">java.util.Map</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.integration.impl.MapVariableResolver.cache</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.integration.impl.MapVariableResolver.name</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.integration.impl.MapVariableResolver.variableMap</outbound>
                <inbound type="feature" confirmed="yes">org.mvel.integration.impl.MapVariableResolverFactory.createVariable(java.lang.String, java.lang.Object)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.integration.impl.MapVariableResolverFactory.getVariableResolver(java.lang.String)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.integration.impl.MapVariableResolver.MapVariableResolver(java.util.Map, java.lang.String, java.lang.Class)</name>
                <outbound type="class" confirmed="no">java.lang.Class</outbound>
                <outbound type="feature" confirmed="no">java.lang.Object.Object()</outbound>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="class" confirmed="no">java.util.Map</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.integration.impl.MapVariableResolver.cache</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.integration.impl.MapVariableResolver.knownType</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.integration.impl.MapVariableResolver.name</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.integration.impl.MapVariableResolver.variableMap</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.integration.impl.MapVariableResolver.MapVariableResolver(java.util.Map, java.lang.String, java.lang.Class, boolean)</name>
                <outbound type="class" confirmed="no">java.lang.Class</outbound>
                <outbound type="feature" confirmed="no">java.lang.Object.Object()</outbound>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="class" confirmed="no">java.util.Map</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.integration.impl.MapVariableResolver.cache</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.integration.impl.MapVariableResolver.knownType</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.integration.impl.MapVariableResolver.name</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.integration.impl.MapVariableResolver.variableMap</outbound>
                <inbound type="feature" confirmed="yes">org.mvel.integration.impl.MapVariableResolverFactory.createVariable(java.lang.String, java.lang.Object, java.lang.Class)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.integration.impl.MapVariableResolver.cache</name>
                <inbound type="feature" confirmed="yes">org.mvel.integration.impl.MapVariableResolver.MapVariableResolver(java.util.Map, java.lang.String)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.integration.impl.MapVariableResolver.MapVariableResolver(java.util.Map, java.lang.String, boolean)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.integration.impl.MapVariableResolver.MapVariableResolver(java.util.Map, java.lang.String, java.lang.Class)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.integration.impl.MapVariableResolver.MapVariableResolver(java.util.Map, java.lang.String, java.lang.Class, boolean)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.integration.impl.MapVariableResolver.isCache()</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.integration.impl.MapVariableResolver.setCache(boolean)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.integration.impl.MapVariableResolver.getFlags()</name>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.integration.impl.MapVariableResolver.getName()</name>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.integration.impl.MapVariableResolver.name</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.integration.impl.MapVariableResolver.getType()</name>
                <outbound type="class" confirmed="no">java.lang.Class</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.integration.impl.MapVariableResolver.knownType</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.integration.impl.MapVariableResolver.getValue()</name>
                <outbound type="class" confirmed="no">java.lang.Object</outbound>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="class" confirmed="no">java.util.Map</outbound>
                <outbound type="feature" confirmed="no">java.util.Map.get(java.lang.Object)</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.integration.impl.MapVariableResolver.name</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.integration.impl.MapVariableResolver.variableMap</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.integration.impl.MapVariableResolver.isCache()</name>
                <outbound type="feature" confirmed="yes">org.mvel.integration.impl.MapVariableResolver.cache</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.integration.impl.MapVariableResolver.knownType</name>
                <outbound type="class" confirmed="no">java.lang.Class</outbound>
                <inbound type="feature" confirmed="yes">org.mvel.integration.impl.MapVariableResolver.MapVariableResolver(java.util.Map, java.lang.String, java.lang.Class)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.integration.impl.MapVariableResolver.MapVariableResolver(java.util.Map, java.lang.String, java.lang.Class, boolean)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.integration.impl.MapVariableResolver.getType()</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.integration.impl.MapVariableResolver.setStaticType(java.lang.Class)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.integration.impl.MapVariableResolver.setValue(java.lang.Object)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.integration.impl.MapVariableResolver.name</name>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <inbound type="feature" confirmed="yes">org.mvel.integration.impl.MapVariableResolver.MapVariableResolver(java.util.Map, java.lang.String)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.integration.impl.MapVariableResolver.MapVariableResolver(java.util.Map, java.lang.String, boolean)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.integration.impl.MapVariableResolver.MapVariableResolver(java.util.Map, java.lang.String, java.lang.Class)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.integration.impl.MapVariableResolver.MapVariableResolver(java.util.Map, java.lang.String, java.lang.Class, boolean)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.integration.impl.MapVariableResolver.getName()</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.integration.impl.MapVariableResolver.getValue()</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.integration.impl.MapVariableResolver.setName(java.lang.String)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.integration.impl.MapVariableResolver.setValue(java.lang.Object)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.integration.impl.MapVariableResolver.setCache(boolean)</name>
                <outbound type="feature" confirmed="yes">org.mvel.integration.impl.MapVariableResolver.cache</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.integration.impl.MapVariableResolver.setName(java.lang.String)</name>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.integration.impl.MapVariableResolver.name</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.integration.impl.MapVariableResolver.setStaticType(java.lang.Class)</name>
                <outbound type="class" confirmed="no">java.lang.Class</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.integration.impl.MapVariableResolver.knownType</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.integration.impl.MapVariableResolver.setValue(java.lang.Object)</name>
                <outbound type="class" confirmed="no">java.lang.Class</outbound>
                <outbound type="feature" confirmed="no">java.lang.Class.getName()</outbound>
                <outbound type="class" confirmed="no">java.lang.Exception</outbound>
                <outbound type="class" confirmed="no">java.lang.Object</outbound>
                <outbound type="feature" confirmed="no">java.lang.Object.getClass()</outbound>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="class" confirmed="no">java.lang.StringBuffer</outbound>
                <outbound type="feature" confirmed="no">java.lang.StringBuffer.StringBuffer(java.lang.String)</outbound>
                <outbound type="feature" confirmed="no">java.lang.StringBuffer.append(java.lang.String)</outbound>
                <outbound type="feature" confirmed="no">java.lang.StringBuffer.toString()</outbound>
                <outbound type="class" confirmed="no">java.util.Map</outbound>
                <outbound type="feature" confirmed="no">java.util.Map.put(java.lang.Object, java.lang.Object)</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.CompileException.CompileException(java.lang.String)</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.DataConversion.canConvert(java.lang.Class, java.lang.Class)</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.DataConversion.convert(java.lang.Object, java.lang.Class)</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.integration.impl.MapVariableResolver.knownType</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.integration.impl.MapVariableResolver.name</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.integration.impl.MapVariableResolver.variableMap</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.integration.impl.MapVariableResolver.setVariableMap(java.util.Map)</name>
                <outbound type="class" confirmed="no">java.util.Map</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.integration.impl.MapVariableResolver.variableMap</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.integration.impl.MapVariableResolver.variableMap</name>
                <outbound type="class" confirmed="no">java.util.Map</outbound>
                <inbound type="feature" confirmed="yes">org.mvel.integration.impl.MapVariableResolver.MapVariableResolver(java.util.Map, java.lang.String)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.integration.impl.MapVariableResolver.MapVariableResolver(java.util.Map, java.lang.String, boolean)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.integration.impl.MapVariableResolver.MapVariableResolver(java.util.Map, java.lang.String, java.lang.Class)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.integration.impl.MapVariableResolver.MapVariableResolver(java.util.Map, java.lang.String, java.lang.Class, boolean)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.integration.impl.MapVariableResolver.getValue()</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.integration.impl.MapVariableResolver.setValue(java.lang.Object)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.integration.impl.MapVariableResolver.setVariableMap(java.util.Map)</inbound>
            </feature>
        </class>
        <class confirmed="yes">
            <name>org.mvel.integration.impl.MapVariableResolverFactory</name>
            <outbound type="class" confirmed="yes">org.mvel.integration.impl.BaseVariableResolverFactory</outbound>
            <inbound type="class" confirmed="yes">org.mvel.integration.impl.DefaultLocalVariableResolverFactory</inbound>
            <inbound type="class" confirmed="yes">org.mvel.integration.impl.TypeInjectionResolverFactoryImpl</inbound>
            <feature confirmed="yes">
                <name>org.mvel.integration.impl.MapVariableResolverFactory.MapVariableResolverFactory(java.util.Map)</name>
                <outbound type="class" confirmed="no">java.util.Map</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.integration.impl.BaseVariableResolverFactory.BaseVariableResolverFactory()</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.integration.impl.MapVariableResolverFactory.cachingSafe</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.integration.impl.MapVariableResolverFactory.variables</outbound>
                <inbound type="feature" confirmed="yes">org.mvel.MVEL.executeExpression(java.lang.Object, java.lang.Object, java.util.Map)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.MVEL.executeExpression(java.lang.Object, java.util.Map)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.MVELInterpretedRuntime.MVELInterpretedRuntime(char[], java.lang.Object, java.util.Map)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.MVELInterpretedRuntime.MVELInterpretedRuntime(java.lang.Object, java.util.Map)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.MVELInterpretedRuntime.MVELInterpretedRuntime(java.lang.String, java.lang.Object, java.util.Map)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.integration.impl.ClassImportResolverFactory.createVariable(java.lang.String, java.lang.Object)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.integration.impl.ClassImportResolverFactory.createVariable(java.lang.String, java.lang.Object, java.lang.Class)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.integration.impl.DefaultLocalVariableResolverFactory.DefaultLocalVariableResolverFactory()</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.integration.impl.DefaultLocalVariableResolverFactory.DefaultLocalVariableResolverFactory(java.util.Map)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.integration.impl.TypeInjectionResolverFactoryImpl.TypeInjectionResolverFactoryImpl(java.util.Map)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.integration.impl.MapVariableResolverFactory.MapVariableResolverFactory(java.util.Map, boolean)</name>
                <outbound type="class" confirmed="no">java.util.Map</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.integration.impl.BaseVariableResolverFactory.BaseVariableResolverFactory()</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.integration.impl.MapVariableResolverFactory.cachingSafe</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.integration.impl.MapVariableResolverFactory.variables</outbound>
                <inbound type="feature" confirmed="yes">org.mvel.integration.impl.DefaultLocalVariableResolverFactory.DefaultLocalVariableResolverFactory(java.util.Map, boolean)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.integration.impl.TypeInjectionResolverFactoryImpl.TypeInjectionResolverFactoryImpl(java.util.Map, boolean)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.integration.impl.MapVariableResolverFactory.MapVariableResolverFactory(java.util.Map, org.mvel.integration.VariableResolverFactory)</name>
                <outbound type="class" confirmed="no">java.util.Map</outbound>
                <outbound type="class" confirmed="yes">org.mvel.integration.VariableResolverFactory</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.integration.impl.BaseVariableResolverFactory.BaseVariableResolverFactory()</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.integration.impl.MapVariableResolverFactory.cachingSafe</outbound>
                <outbound type="feature" confirmed="no">org.mvel.integration.impl.MapVariableResolverFactory.nextFactory</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.integration.impl.MapVariableResolverFactory.variables</outbound>
                <inbound type="feature" confirmed="yes">org.mvel.integration.impl.DefaultLocalVariableResolverFactory.DefaultLocalVariableResolverFactory(java.util.Map, org.mvel.integration.VariableResolverFactory)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.integration.impl.DefaultLocalVariableResolverFactory.DefaultLocalVariableResolverFactory(org.mvel.integration.VariableResolverFactory)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.integration.impl.TypeInjectionResolverFactoryImpl.TypeInjectionResolverFactoryImpl(java.util.Map, org.mvel.integration.VariableResolverFactory)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.integration.impl.MapVariableResolverFactory.addResolver(java.lang.String, org.mvel.integration.VariableResolver)</name>
                <outbound type="class" confirmed="no">java.lang.Object</outbound>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="feature" confirmed="no">java.util.HashMap.HashMap()</outbound>
                <outbound type="class" confirmed="no">java.util.Map</outbound>
                <outbound type="feature" confirmed="no">java.util.Map.put(java.lang.Object, java.lang.Object)</outbound>
                <outbound type="class" confirmed="yes">org.mvel.integration.VariableResolver</outbound>
                <outbound type="feature" confirmed="no">org.mvel.integration.impl.MapVariableResolverFactory.variableResolvers</outbound>
                <inbound type="feature" confirmed="yes">org.mvel.integration.impl.MapVariableResolverFactory.createVariable(java.lang.String, java.lang.Object, java.lang.Class)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.integration.impl.MapVariableResolverFactory.cachingSafe</name>
                <inbound type="feature" confirmed="yes">org.mvel.integration.impl.MapVariableResolverFactory.MapVariableResolverFactory(java.util.Map)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.integration.impl.MapVariableResolverFactory.MapVariableResolverFactory(java.util.Map, boolean)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.integration.impl.MapVariableResolverFactory.MapVariableResolverFactory(java.util.Map, org.mvel.integration.VariableResolverFactory)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.integration.impl.MapVariableResolverFactory.createVariable(java.lang.String, java.lang.Object)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.integration.impl.MapVariableResolverFactory.createVariable(java.lang.String, java.lang.Object, java.lang.Class)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.integration.impl.MapVariableResolverFactory.getVariableResolver(java.lang.String)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.integration.impl.MapVariableResolverFactory.createVariable(java.lang.String, java.lang.Object)</name>
                <outbound type="class" confirmed="no">java.lang.Object</outbound>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="class" confirmed="no">java.util.Map</outbound>
                <outbound type="class" confirmed="yes">org.mvel.integration.VariableResolver</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.integration.VariableResolver.setValue(java.lang.Object)</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.integration.impl.MapVariableResolver.MapVariableResolver(java.util.Map, java.lang.String, boolean)</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.integration.impl.MapVariableResolverFactory.cachingSafe</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.integration.impl.MapVariableResolverFactory.getVariableResolver(java.lang.String)</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.integration.impl.MapVariableResolverFactory.variables</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.integration.impl.MapVariableResolverFactory.createVariable(java.lang.String, java.lang.Object, java.lang.Class)</name>
                <outbound type="class" confirmed="no">java.lang.Class</outbound>
                <outbound type="class" confirmed="no">java.lang.Object</outbound>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="class" confirmed="no">java.lang.StringBuffer</outbound>
                <outbound type="feature" confirmed="no">java.lang.StringBuffer.StringBuffer(java.lang.String)</outbound>
                <outbound type="feature" confirmed="no">java.lang.StringBuffer.append(java.lang.Object)</outbound>
                <outbound type="feature" confirmed="no">java.lang.StringBuffer.append(java.lang.String)</outbound>
                <outbound type="feature" confirmed="no">java.lang.StringBuffer.toString()</outbound>
                <outbound type="class" confirmed="no">java.util.Map</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.CompileException.CompileException(java.lang.String)</outbound>
                <outbound type="class" confirmed="yes">org.mvel.integration.VariableResolver</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.integration.VariableResolver.getType()</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.integration.VariableResolver.setValue(java.lang.Object)</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.integration.impl.MapVariableResolver.MapVariableResolver(java.util.Map, java.lang.String, java.lang.Class, boolean)</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.integration.impl.MapVariableResolverFactory.addResolver(java.lang.String, org.mvel.integration.VariableResolver)</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.integration.impl.MapVariableResolverFactory.cachingSafe</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.integration.impl.MapVariableResolverFactory.getVariableResolver(java.lang.String)</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.integration.impl.MapVariableResolverFactory.variables</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.integration.impl.MapVariableResolverFactory.getKnownVariables()</name>
                <outbound type="class" confirmed="no">java.util.Collection</outbound>
                <outbound type="feature" confirmed="no">java.util.HashSet.HashSet()</outbound>
                <outbound type="class" confirmed="no">java.util.Map</outbound>
                <outbound type="feature" confirmed="no">java.util.Map.keySet()</outbound>
                <outbound type="class" confirmed="no">java.util.Set</outbound>
                <outbound type="feature" confirmed="no">java.util.Set.addAll(java.util.Collection)</outbound>
                <outbound type="class" confirmed="yes">org.mvel.integration.VariableResolverFactory</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.integration.VariableResolverFactory.getKnownVariables()</outbound>
                <outbound type="feature" confirmed="no">org.mvel.integration.impl.MapVariableResolverFactory.nextFactory</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.integration.impl.MapVariableResolverFactory.variables</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.integration.impl.MapVariableResolverFactory.getVariableResolver(java.lang.String)</name>
                <outbound type="class" confirmed="no">java.lang.Object</outbound>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="class" confirmed="no">java.util.Map</outbound>
                <outbound type="feature" confirmed="no">java.util.Map.containsKey(java.lang.Object)</outbound>
                <outbound type="feature" confirmed="no">java.util.Map.get(java.lang.Object)</outbound>
                <outbound type="class" confirmed="yes">org.mvel.integration.VariableResolver</outbound>
                <outbound type="class" confirmed="yes">org.mvel.integration.VariableResolverFactory</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.integration.VariableResolverFactory.getVariableResolver(java.lang.String)</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.integration.impl.MapVariableResolver.MapVariableResolver(java.util.Map, java.lang.String, boolean)</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.integration.impl.MapVariableResolverFactory.cachingSafe</outbound>
                <outbound type="feature" confirmed="no">org.mvel.integration.impl.MapVariableResolverFactory.nextFactory</outbound>
                <outbound type="feature" confirmed="no">org.mvel.integration.impl.MapVariableResolverFactory.variableResolvers</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.integration.impl.MapVariableResolverFactory.variables</outbound>
                <inbound type="feature" confirmed="yes">org.mvel.integration.impl.MapVariableResolverFactory.createVariable(java.lang.String, java.lang.Object)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.integration.impl.MapVariableResolverFactory.createVariable(java.lang.String, java.lang.Object, java.lang.Class)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.integration.impl.MapVariableResolverFactory.isResolveable(java.lang.String)</name>
                <outbound type="class" confirmed="no">java.lang.Object</outbound>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="class" confirmed="no">java.util.Map</outbound>
                <outbound type="feature" confirmed="no">java.util.Map.containsKey(java.lang.Object)</outbound>
                <outbound type="class" confirmed="yes">org.mvel.integration.VariableResolverFactory</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.integration.VariableResolverFactory.isResolveable(java.lang.String)</outbound>
                <outbound type="feature" confirmed="no">org.mvel.integration.impl.MapVariableResolverFactory.nextFactory</outbound>
                <outbound type="feature" confirmed="no">org.mvel.integration.impl.MapVariableResolverFactory.variableResolvers</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.integration.impl.MapVariableResolverFactory.variables</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.integration.impl.MapVariableResolverFactory.isTarget(java.lang.String)</name>
                <outbound type="class" confirmed="no">java.lang.Object</outbound>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="class" confirmed="no">java.util.Map</outbound>
                <outbound type="feature" confirmed="no">java.util.Map.containsKey(java.lang.Object)</outbound>
                <outbound type="feature" confirmed="no">org.mvel.integration.impl.MapVariableResolverFactory.variableResolvers</outbound>
            </feature>
            <feature confirmed="no">
                <name>org.mvel.integration.impl.MapVariableResolverFactory.nextFactory</name>
                <inbound type="feature" confirmed="yes">org.mvel.integration.impl.MapVariableResolverFactory.MapVariableResolverFactory(java.util.Map, org.mvel.integration.VariableResolverFactory)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.integration.impl.MapVariableResolverFactory.getKnownVariables()</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.integration.impl.MapVariableResolverFactory.getVariableResolver(java.lang.String)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.integration.impl.MapVariableResolverFactory.isResolveable(java.lang.String)</inbound>
            </feature>
            <feature confirmed="no">
                <name>org.mvel.integration.impl.MapVariableResolverFactory.variableResolvers</name>
                <inbound type="feature" confirmed="yes">org.mvel.integration.impl.MapVariableResolverFactory.addResolver(java.lang.String, org.mvel.integration.VariableResolver)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.integration.impl.MapVariableResolverFactory.getVariableResolver(java.lang.String)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.integration.impl.MapVariableResolverFactory.isResolveable(java.lang.String)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.integration.impl.MapVariableResolverFactory.isTarget(java.lang.String)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.integration.impl.MapVariableResolverFactory.variables</name>
                <outbound type="class" confirmed="no">java.util.Map</outbound>
                <inbound type="feature" confirmed="yes">org.mvel.integration.impl.MapVariableResolverFactory.MapVariableResolverFactory(java.util.Map)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.integration.impl.MapVariableResolverFactory.MapVariableResolverFactory(java.util.Map, boolean)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.integration.impl.MapVariableResolverFactory.MapVariableResolverFactory(java.util.Map, org.mvel.integration.VariableResolverFactory)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.integration.impl.MapVariableResolverFactory.createVariable(java.lang.String, java.lang.Object)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.integration.impl.MapVariableResolverFactory.createVariable(java.lang.String, java.lang.Object, java.lang.Class)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.integration.impl.MapVariableResolverFactory.getKnownVariables()</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.integration.impl.MapVariableResolverFactory.getVariableResolver(java.lang.String)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.integration.impl.MapVariableResolverFactory.isResolveable(java.lang.String)</inbound>
            </feature>
        </class>
        <class confirmed="yes">
            <name>org.mvel.integration.impl.SimpleValueResolver</name>
            <outbound type="class" confirmed="no">java.lang.Object</outbound>
            <outbound type="class" confirmed="yes">org.mvel.integration.VariableResolver</outbound>
            <feature confirmed="yes">
                <name>org.mvel.integration.impl.SimpleValueResolver.SimpleValueResolver(java.lang.Object)</name>
                <outbound type="class" confirmed="no">java.lang.Object</outbound>
                <outbound type="feature" confirmed="no">java.lang.Object.Object()</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.integration.impl.SimpleValueResolver.value</outbound>
                <inbound type="feature" confirmed="yes">org.mvel.integration.impl.ClassImportResolverFactory.ClassImportResolverFactory(org.mvel.ParserContext, org.mvel.integration.VariableResolverFactory)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.integration.impl.ClassImportResolverFactory.addClass(java.lang.Class)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.integration.impl.ClassImportResolverFactory.setImportedClasses(java.util.Map)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.integration.impl.SimpleValueResolver.getFlags()</name>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.integration.impl.SimpleValueResolver.getName()</name>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.integration.impl.SimpleValueResolver.getType()</name>
                <outbound type="class" confirmed="no">java.lang.Class</outbound>
                <outbound type="feature" confirmed="no">java.lang.Class.forName(java.lang.String)</outbound>
                <outbound type="class" confirmed="no">java.lang.ClassNotFoundException</outbound>
                <outbound type="feature" confirmed="no">java.lang.NoClassDefFoundError.NoClassDefFoundError(java.lang.String)</outbound>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="feature" confirmed="no">java.lang.Throwable.getMessage()</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.integration.impl.SimpleValueResolver.getValue()</name>
                <outbound type="class" confirmed="no">java.lang.Object</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.integration.impl.SimpleValueResolver.value</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.integration.impl.SimpleValueResolver.setStaticType(java.lang.Class)</name>
                <outbound type="class" confirmed="no">java.lang.Class</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.integration.impl.SimpleValueResolver.setValue(java.lang.Object)</name>
                <outbound type="class" confirmed="no">java.lang.Object</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.integration.impl.SimpleValueResolver.value</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.integration.impl.SimpleValueResolver.value</name>
                <outbound type="class" confirmed="no">java.lang.Object</outbound>
                <inbound type="feature" confirmed="yes">org.mvel.integration.impl.SimpleValueResolver.SimpleValueResolver(java.lang.Object)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.integration.impl.SimpleValueResolver.getValue()</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.integration.impl.SimpleValueResolver.setValue(java.lang.Object)</inbound>
            </feature>
        </class>
        <class confirmed="yes">
            <name>org.mvel.integration.impl.StaticMethodImportResolver</name>
            <outbound type="class" confirmed="no">java.lang.Object</outbound>
            <outbound type="class" confirmed="yes">org.mvel.integration.VariableResolver</outbound>
            <feature confirmed="yes">
                <name>org.mvel.integration.impl.StaticMethodImportResolver.StaticMethodImportResolver(java.lang.String, org.mvel.util.MethodStub)</name>
                <outbound type="feature" confirmed="no">java.lang.Object.Object()</outbound>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.integration.impl.StaticMethodImportResolver.method</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.integration.impl.StaticMethodImportResolver.name</outbound>
                <outbound type="class" confirmed="yes">org.mvel.util.MethodStub</outbound>
                <inbound type="feature" confirmed="yes">org.mvel.integration.impl.StaticMethodImportResolverFactory.createVariable(java.lang.String, java.lang.Object)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.integration.impl.StaticMethodImportResolver.getFlags()</name>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.integration.impl.StaticMethodImportResolver.getName()</name>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.integration.impl.StaticMethodImportResolver.name</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.integration.impl.StaticMethodImportResolver.getType()</name>
                <outbound type="class" confirmed="no">java.lang.Class</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.integration.impl.StaticMethodImportResolver.getValue()</name>
                <outbound type="class" confirmed="no">java.lang.Object</outbound>
                <outbound type="class" confirmed="yes">org.mvel.util.MethodStub</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.integration.impl.StaticMethodImportResolver.method</name>
                <outbound type="class" confirmed="yes">org.mvel.util.MethodStub</outbound>
                <inbound type="feature" confirmed="yes">org.mvel.integration.impl.StaticMethodImportResolver.StaticMethodImportResolver(java.lang.String, org.mvel.util.MethodStub)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.integration.impl.StaticMethodImportResolver.setValue(java.lang.Object)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.integration.impl.StaticMethodImportResolver.name</name>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <inbound type="feature" confirmed="yes">org.mvel.integration.impl.StaticMethodImportResolver.StaticMethodImportResolver(java.lang.String, org.mvel.util.MethodStub)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.integration.impl.StaticMethodImportResolver.getName()</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.integration.impl.StaticMethodImportResolver.setStaticType(java.lang.Class)</name>
                <outbound type="class" confirmed="no">java.lang.Class</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.integration.impl.StaticMethodImportResolver.setValue(java.lang.Object)</name>
                <outbound type="class" confirmed="no">java.lang.Object</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.integration.impl.StaticMethodImportResolver.method</outbound>
                <outbound type="class" confirmed="yes">org.mvel.util.MethodStub</outbound>
            </feature>
        </class>
        <class confirmed="yes">
            <name>org.mvel.integration.impl.StaticMethodImportResolverFactory</name>
            <outbound type="class" confirmed="yes">org.mvel.integration.impl.BaseVariableResolverFactory</outbound>
            <inbound type="feature" confirmed="yes">org.mvel.ast.StaticImportNode.getReducedValueAccelerated(java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.util.ParseTools.findStaticMethodImportResolverFactory(org.mvel.integration.VariableResolverFactory)</inbound>
            <feature confirmed="yes">
                <name>org.mvel.integration.impl.StaticMethodImportResolverFactory.StaticMethodImportResolverFactory()</name>
                <outbound type="feature" confirmed="no">java.util.HashMap.HashMap()</outbound>
                <outbound type="class" confirmed="no">java.util.Map</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.integration.impl.BaseVariableResolverFactory.BaseVariableResolverFactory()</outbound>
                <outbound type="feature" confirmed="no">org.mvel.integration.impl.StaticMethodImportResolverFactory.variableResolvers</outbound>
                <inbound type="feature" confirmed="yes">org.mvel.integration.impl.StaticMethodImportResolverFactory.StaticMethodImportResolverFactory(org.mvel.ParserContext)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.util.ParseTools.findStaticMethodImportResolverFactory(org.mvel.integration.VariableResolverFactory)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.integration.impl.StaticMethodImportResolverFactory.StaticMethodImportResolverFactory(org.mvel.ParserContext)</name>
                <outbound type="class" confirmed="no">java.lang.Object</outbound>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="class" confirmed="no">java.lang.reflect.Method</outbound>
                <outbound type="class" confirmed="no">java.util.Iterator</outbound>
                <outbound type="feature" confirmed="no">java.util.Iterator.hasNext()</outbound>
                <outbound type="feature" confirmed="no">java.util.Iterator.next()</outbound>
                <outbound type="class" confirmed="no">java.util.Map</outbound>
                <outbound type="feature" confirmed="no">java.util.Map.get(java.lang.Object)</outbound>
                <outbound type="feature" confirmed="no">java.util.Map.keySet()</outbound>
                <outbound type="class" confirmed="no">java.util.Set</outbound>
                <outbound type="feature" confirmed="no">java.util.Set.iterator()</outbound>
                <outbound type="class" confirmed="yes">org.mvel.ParserContext</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.ParserContext.getImports()</outbound>
                <outbound type="class" confirmed="yes">org.mvel.integration.VariableResolver</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.integration.impl.StaticMethodImportResolverFactory.StaticMethodImportResolverFactory()</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.integration.impl.StaticMethodImportResolverFactory.createVariable(java.lang.String, java.lang.Object)</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.integration.impl.StaticMethodImportResolverFactory.createVariable(java.lang.String, java.lang.Object)</name>
                <outbound type="class" confirmed="no">java.lang.Object</outbound>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="class" confirmed="no">java.lang.reflect.Method</outbound>
                <outbound type="class" confirmed="no">java.util.Map</outbound>
                <outbound type="feature" confirmed="no">java.util.Map.put(java.lang.Object, java.lang.Object)</outbound>
                <outbound type="class" confirmed="yes">org.mvel.integration.VariableResolver</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.integration.impl.StaticMethodImportResolver.StaticMethodImportResolver(java.lang.String, org.mvel.util.MethodStub)</outbound>
                <outbound type="feature" confirmed="no">org.mvel.integration.impl.StaticMethodImportResolverFactory.variableResolvers</outbound>
                <outbound type="class" confirmed="yes">org.mvel.util.MethodStub</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.util.MethodStub.MethodStub(java.lang.reflect.Method)</outbound>
                <inbound type="feature" confirmed="yes">org.mvel.ast.StaticImportNode.getReducedValueAccelerated(java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.integration.impl.StaticMethodImportResolverFactory.StaticMethodImportResolverFactory(org.mvel.ParserContext)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.integration.impl.StaticMethodImportResolverFactory.createVariable(java.lang.String, java.lang.Object, java.lang.Class)</name>
                <outbound type="class" confirmed="no">java.lang.Class</outbound>
                <outbound type="class" confirmed="no">java.lang.Object</outbound>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="class" confirmed="yes">org.mvel.integration.VariableResolver</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.integration.impl.StaticMethodImportResolverFactory.getImportedMethods()</name>
                <outbound type="class" confirmed="no">java.lang.Object</outbound>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="class" confirmed="no">java.lang.reflect.Method</outbound>
                <outbound type="feature" confirmed="no">java.util.HashMap.HashMap()</outbound>
                <outbound type="class" confirmed="no">java.util.Iterator</outbound>
                <outbound type="feature" confirmed="no">java.util.Iterator.hasNext()</outbound>
                <outbound type="feature" confirmed="no">java.util.Iterator.next()</outbound>
                <outbound type="class" confirmed="no">java.util.Map</outbound>
                <outbound type="feature" confirmed="no">java.util.Map.get(java.lang.Object)</outbound>
                <outbound type="feature" confirmed="no">java.util.Map.keySet()</outbound>
                <outbound type="feature" confirmed="no">java.util.Map.put(java.lang.Object, java.lang.Object)</outbound>
                <outbound type="class" confirmed="no">java.util.Set</outbound>
                <outbound type="feature" confirmed="no">java.util.Set.iterator()</outbound>
                <outbound type="class" confirmed="yes">org.mvel.integration.VariableResolver</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.integration.VariableResolver.getValue()</outbound>
                <outbound type="feature" confirmed="no">org.mvel.integration.impl.StaticMethodImportResolverFactory.variableResolvers</outbound>
            </feature>
            <feature confirmed="no">
                <name>org.mvel.integration.impl.StaticMethodImportResolverFactory.isNextResolveable(java.lang.String)</name>
                <inbound type="feature" confirmed="yes">org.mvel.integration.impl.StaticMethodImportResolverFactory.isResolveable(java.lang.String)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.integration.impl.StaticMethodImportResolverFactory.isResolveable(java.lang.String)</name>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="feature" confirmed="no">org.mvel.integration.impl.StaticMethodImportResolverFactory.isNextResolveable(java.lang.String)</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.integration.impl.StaticMethodImportResolverFactory.isTarget(java.lang.String)</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.integration.impl.StaticMethodImportResolverFactory.isTarget(java.lang.String)</name>
                <outbound type="class" confirmed="no">java.lang.Object</outbound>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="class" confirmed="no">java.util.Map</outbound>
                <outbound type="feature" confirmed="no">java.util.Map.containsKey(java.lang.Object)</outbound>
                <outbound type="feature" confirmed="no">org.mvel.integration.impl.StaticMethodImportResolverFactory.variableResolvers</outbound>
                <inbound type="feature" confirmed="yes">org.mvel.integration.impl.StaticMethodImportResolverFactory.isResolveable(java.lang.String)</inbound>
            </feature>
            <feature confirmed="no">
                <name>org.mvel.integration.impl.StaticMethodImportResolverFactory.variableResolvers</name>
                <inbound type="feature" confirmed="yes">org.mvel.integration.impl.StaticMethodImportResolverFactory.StaticMethodImportResolverFactory()</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.integration.impl.StaticMethodImportResolverFactory.createVariable(java.lang.String, java.lang.Object)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.integration.impl.StaticMethodImportResolverFactory.getImportedMethods()</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.integration.impl.StaticMethodImportResolverFactory.isTarget(java.lang.String)</inbound>
            </feature>
        </class>
        <class confirmed="yes">
            <name>org.mvel.integration.impl.TypeInjectionResolverFactory</name>
            <outbound type="class" confirmed="no">java.lang.Object</outbound>
            <inbound type="class" confirmed="yes">org.mvel.integration.impl.TypeInjectionResolverFactoryImpl</inbound>
        </class>
        <class confirmed="yes">
            <name>org.mvel.integration.impl.TypeInjectionResolverFactoryImpl</name>
            <outbound type="class" confirmed="yes">org.mvel.integration.impl.MapVariableResolverFactory</outbound>
            <outbound type="class" confirmed="yes">org.mvel.integration.impl.TypeInjectionResolverFactory</outbound>
            <feature confirmed="yes">
                <name>org.mvel.integration.impl.TypeInjectionResolverFactoryImpl.TypeInjectionResolverFactoryImpl(java.util.Map)</name>
                <outbound type="class" confirmed="no">java.util.Map</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.integration.impl.MapVariableResolverFactory.MapVariableResolverFactory(java.util.Map)</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.integration.impl.TypeInjectionResolverFactoryImpl.TypeInjectionResolverFactoryImpl(java.util.Map, boolean)</name>
                <outbound type="class" confirmed="no">java.util.Map</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.integration.impl.MapVariableResolverFactory.MapVariableResolverFactory(java.util.Map, boolean)</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.integration.impl.TypeInjectionResolverFactoryImpl.TypeInjectionResolverFactoryImpl(java.util.Map, org.mvel.integration.VariableResolverFactory)</name>
                <outbound type="class" confirmed="no">java.util.Map</outbound>
                <outbound type="class" confirmed="yes">org.mvel.integration.VariableResolverFactory</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.integration.impl.MapVariableResolverFactory.MapVariableResolverFactory(java.util.Map, org.mvel.integration.VariableResolverFactory)</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.integration.impl.TypeInjectionResolverFactoryImpl.getKnownVariables()</name>
                <outbound type="class" confirmed="no">java.util.Collection</outbound>
                <outbound type="feature" confirmed="no">java.util.HashSet.HashSet()</outbound>
                <outbound type="class" confirmed="no">java.util.Set</outbound>
                <outbound type="feature" confirmed="no">java.util.Set.addAll(java.util.Collection)</outbound>
                <outbound type="class" confirmed="yes">org.mvel.integration.VariableResolverFactory</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.integration.VariableResolverFactory.getKnownVariables()</outbound>
                <outbound type="feature" confirmed="no">org.mvel.integration.impl.TypeInjectionResolverFactoryImpl.nextFactory</outbound>
            </feature>
            <feature confirmed="no">
                <name>org.mvel.integration.impl.TypeInjectionResolverFactoryImpl.nextFactory</name>
                <inbound type="feature" confirmed="yes">org.mvel.integration.impl.TypeInjectionResolverFactoryImpl.getKnownVariables()</inbound>
            </feature>
        </class>
    </package>
    <package confirmed="yes">
        <name>org.mvel.math</name>
        <class confirmed="yes">
            <name>org.mvel.math.IEEEFloatingPointMath</name>
            <outbound type="class" confirmed="no">java.lang.Object</outbound>
            <outbound type="class" confirmed="yes">org.mvel.math.MathProcessor</outbound>
            <feature confirmed="yes">
                <name>org.mvel.math.IEEEFloatingPointMath.IEEEFloatingPointMath()</name>
                <outbound type="feature" confirmed="no">java.lang.Object.Object()</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.math.IEEEFloatingPointMath.MATH_CONTEXT</name>
                <outbound type="class" confirmed="no">java.math.MathContext</outbound>
                <inbound type="feature" confirmed="yes">org.mvel.math.IEEEFloatingPointMath.doBigDecimalArithmetic(java.math.BigDecimal, int, java.math.BigDecimal)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.math.IEEEFloatingPointMath.doOperationsSameType(int, java.lang.Object, int, java.lang.Object)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.math.IEEEFloatingPointMath.static {}</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.math.IEEEFloatingPointMath._doOperations(int, java.lang.Object, int, int, java.lang.Object)</name>
                <outbound type="class" confirmed="no">java.lang.Class</outbound>
                <outbound type="feature" confirmed="no">java.lang.Class.forName(java.lang.String)</outbound>
                <outbound type="class" confirmed="no">java.lang.ClassNotFoundException</outbound>
                <outbound type="feature" confirmed="no">java.lang.NoClassDefFoundError.NoClassDefFoundError(java.lang.String)</outbound>
                <outbound type="class" confirmed="no">java.lang.Object</outbound>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="feature" confirmed="no">java.lang.String.valueOf(java.lang.Object)</outbound>
                <outbound type="feature" confirmed="no">java.lang.Throwable.getMessage()</outbound>
                <outbound type="class" confirmed="no">java.math.BigDecimal</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.DataConversion.convert(java.lang.Object, java.lang.Class)</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.math.IEEEFloatingPointMath.doBigDecimalArithmetic(java.math.BigDecimal, int, java.math.BigDecimal)</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.math.IEEEFloatingPointMath.doOperationNonNumeric(java.lang.Object, int, java.lang.Object)</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.math.IEEEFloatingPointMath.doOperationsSameType(int, java.lang.Object, int, java.lang.Object)</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.math.IEEEFloatingPointMath.getBigDecimalFromType(java.lang.Object, int)</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.util.PropertyTools.isNumber(java.lang.Object)</outbound>
                <inbound type="feature" confirmed="yes">org.mvel.math.IEEEFloatingPointMath.doOperation(java.lang.Object, int, java.lang.Object)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.math.IEEEFloatingPointMath.doBigDecimalArithmetic(java.math.BigDecimal, int, java.math.BigDecimal)</name>
                <outbound type="class" confirmed="no">java.lang.Boolean</outbound>
                <outbound type="feature" confirmed="no">java.lang.Boolean.FALSE</outbound>
                <outbound type="feature" confirmed="no">java.lang.Boolean.TRUE</outbound>
                <outbound type="feature" confirmed="no">java.lang.Double.Double(double)</outbound>
                <outbound type="feature" confirmed="no">java.lang.Math.pow(double, double)</outbound>
                <outbound type="class" confirmed="no">java.lang.Object</outbound>
                <outbound type="class" confirmed="no">java.math.BigDecimal</outbound>
                <outbound type="feature" confirmed="no">java.math.BigDecimal.add(java.math.BigDecimal)</outbound>
                <outbound type="feature" confirmed="no">java.math.BigDecimal.compareTo(java.math.BigDecimal)</outbound>
                <outbound type="feature" confirmed="no">java.math.BigDecimal.divide(java.math.BigDecimal, java.math.MathContext)</outbound>
                <outbound type="feature" confirmed="no">java.math.BigDecimal.doubleValue()</outbound>
                <outbound type="feature" confirmed="no">java.math.BigDecimal.multiply(java.math.BigDecimal)</outbound>
                <outbound type="feature" confirmed="no">java.math.BigDecimal.remainder(java.math.BigDecimal)</outbound>
                <outbound type="feature" confirmed="no">java.math.BigDecimal.subtract(java.math.BigDecimal)</outbound>
                <outbound type="class" confirmed="no">java.math.MathContext</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.math.IEEEFloatingPointMath.MATH_CONTEXT</outbound>
                <inbound type="feature" confirmed="yes">org.mvel.math.IEEEFloatingPointMath._doOperations(int, java.lang.Object, int, int, java.lang.Object)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.math.IEEEFloatingPointMath.doOperation(java.lang.Object, int, java.lang.Object)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.math.IEEEFloatingPointMath.doOperation(java.lang.Object, int, java.lang.Object)</name>
                <outbound type="class" confirmed="no">java.lang.Class</outbound>
                <outbound type="class" confirmed="no">java.lang.Object</outbound>
                <outbound type="feature" confirmed="no">java.lang.Object.getClass()</outbound>
                <outbound type="class" confirmed="no">java.math.BigDecimal</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.math.IEEEFloatingPointMath._doOperations(int, java.lang.Object, int, int, java.lang.Object)</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.math.IEEEFloatingPointMath.doBigDecimalArithmetic(java.math.BigDecimal, int, java.math.BigDecimal)</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.math.IEEEFloatingPointMath.getBigDecimalFromType(java.lang.Object, int)</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.util.ParseTools.resolveType(java.lang.Class)</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.util.PropertyTools.isNumber(java.lang.Object)</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.math.IEEEFloatingPointMath.doOperationNonNumeric(java.lang.Object, int, java.lang.Object)</name>
                <outbound type="class" confirmed="no">java.lang.Boolean</outbound>
                <outbound type="feature" confirmed="no">java.lang.Boolean.FALSE</outbound>
                <outbound type="feature" confirmed="no">java.lang.Boolean.TRUE</outbound>
                <outbound type="feature" confirmed="no">java.lang.Boolean.booleanValue()</outbound>
                <outbound type="class" confirmed="no">java.lang.Class</outbound>
                <outbound type="feature" confirmed="no">java.lang.Class.getName()</outbound>
                <outbound type="class" confirmed="no">java.lang.Comparable</outbound>
                <outbound type="feature" confirmed="no">java.lang.Comparable.compareTo(java.lang.Object)</outbound>
                <outbound type="class" confirmed="no">java.lang.Object</outbound>
                <outbound type="feature" confirmed="no">java.lang.Object.getClass()</outbound>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="feature" confirmed="no">java.lang.String.valueOf(java.lang.Object)</outbound>
                <outbound type="class" confirmed="no">java.lang.StringBuffer</outbound>
                <outbound type="feature" confirmed="no">java.lang.StringBuffer.StringBuffer(java.lang.String)</outbound>
                <outbound type="feature" confirmed="no">java.lang.StringBuffer.append(java.lang.String)</outbound>
                <outbound type="feature" confirmed="no">java.lang.StringBuffer.toString()</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.CompileException.CompileException(java.lang.String)</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.math.IEEEFloatingPointMath.safeEquals(java.lang.Object, java.lang.Object)</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.math.IEEEFloatingPointMath.safeNotEquals(java.lang.Object, java.lang.Object)</outbound>
                <inbound type="feature" confirmed="yes">org.mvel.math.IEEEFloatingPointMath._doOperations(int, java.lang.Object, int, int, java.lang.Object)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.math.IEEEFloatingPointMath.doOperationsSameType(int, java.lang.Object, int, java.lang.Object)</name>
                <outbound type="class" confirmed="no">java.lang.Boolean</outbound>
                <outbound type="feature" confirmed="no">java.lang.Boolean.FALSE</outbound>
                <outbound type="feature" confirmed="no">java.lang.Boolean.TRUE</outbound>
                <outbound type="class" confirmed="no">java.lang.Double</outbound>
                <outbound type="feature" confirmed="no">java.lang.Double.Double(double)</outbound>
                <outbound type="feature" confirmed="no">java.lang.Double.doubleValue()</outbound>
                <outbound type="class" confirmed="no">java.lang.Float</outbound>
                <outbound type="feature" confirmed="no">java.lang.Float.Float(float)</outbound>
                <outbound type="feature" confirmed="no">java.lang.Float.floatValue()</outbound>
                <outbound type="class" confirmed="no">java.lang.Integer</outbound>
                <outbound type="feature" confirmed="no">java.lang.Integer.Integer(int)</outbound>
                <outbound type="feature" confirmed="no">java.lang.Integer.intValue()</outbound>
                <outbound type="class" confirmed="no">java.lang.Long</outbound>
                <outbound type="feature" confirmed="no">java.lang.Long.Long(long)</outbound>
                <outbound type="feature" confirmed="no">java.lang.Long.longValue()</outbound>
                <outbound type="feature" confirmed="no">java.lang.Math.pow(double, double)</outbound>
                <outbound type="class" confirmed="no">java.lang.Object</outbound>
                <outbound type="class" confirmed="no">java.lang.Short</outbound>
                <outbound type="feature" confirmed="no">java.lang.Short.Short(short)</outbound>
                <outbound type="feature" confirmed="no">java.lang.Short.shortValue()</outbound>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="feature" confirmed="no">java.lang.String.valueOf(java.lang.Object)</outbound>
                <outbound type="class" confirmed="no">java.lang.StringBuffer</outbound>
                <outbound type="feature" confirmed="no">java.lang.StringBuffer.StringBuffer(java.lang.String)</outbound>
                <outbound type="feature" confirmed="no">java.lang.StringBuffer.append(java.lang.String)</outbound>
                <outbound type="feature" confirmed="no">java.lang.StringBuffer.toString()</outbound>
                <outbound type="class" confirmed="no">java.math.BigDecimal</outbound>
                <outbound type="feature" confirmed="no">java.math.BigDecimal.BigDecimal(double)</outbound>
                <outbound type="feature" confirmed="no">java.math.BigDecimal.BigDecimal(int)</outbound>
                <outbound type="feature" confirmed="no">java.math.BigDecimal.BigDecimal(long)</outbound>
                <outbound type="feature" confirmed="no">java.math.BigDecimal.divide(java.math.BigDecimal, java.math.MathContext)</outbound>
                <outbound type="feature" confirmed="no">java.math.BigDecimal.intValue()</outbound>
                <outbound type="feature" confirmed="no">java.math.BigDecimal.pow(int)</outbound>
                <outbound type="class" confirmed="no">java.math.BigInteger</outbound>
                <outbound type="feature" confirmed="no">java.math.BigInteger.add(java.math.BigInteger)</outbound>
                <outbound type="feature" confirmed="no">java.math.BigInteger.compareTo(java.math.BigInteger)</outbound>
                <outbound type="feature" confirmed="no">java.math.BigInteger.divide(java.math.BigInteger)</outbound>
                <outbound type="feature" confirmed="no">java.math.BigInteger.intValue()</outbound>
                <outbound type="feature" confirmed="no">java.math.BigInteger.multiply(java.math.BigInteger)</outbound>
                <outbound type="feature" confirmed="no">java.math.BigInteger.pow(int)</outbound>
                <outbound type="feature" confirmed="no">java.math.BigInteger.remainder(java.math.BigInteger)</outbound>
                <outbound type="feature" confirmed="no">java.math.BigInteger.subtract(java.math.BigInteger)</outbound>
                <outbound type="class" confirmed="no">java.math.MathContext</outbound>
                <outbound type="class" confirmed="yes">org.mvel.Unit</outbound>
                <outbound type="feature" confirmed="no">org.mvel.Unit.convertFrom(java.lang.Object)</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.Unit.getValue()</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.math.IEEEFloatingPointMath.MATH_CONTEXT</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.math.IEEEFloatingPointMath.safeEquals(java.lang.Object, java.lang.Object)</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.math.IEEEFloatingPointMath.safeNotEquals(java.lang.Object, java.lang.Object)</outbound>
                <inbound type="feature" confirmed="yes">org.mvel.math.IEEEFloatingPointMath._doOperations(int, java.lang.Object, int, int, java.lang.Object)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.math.IEEEFloatingPointMath.getBigDecimalFromType(java.lang.Object, int)</name>
                <outbound type="class" confirmed="no">java.lang.Boolean</outbound>
                <outbound type="feature" confirmed="no">java.lang.Boolean.booleanValue()</outbound>
                <outbound type="class" confirmed="no">java.lang.Character</outbound>
                <outbound type="feature" confirmed="no">java.lang.Character.charValue()</outbound>
                <outbound type="class" confirmed="no">java.lang.Double</outbound>
                <outbound type="feature" confirmed="no">java.lang.Double.doubleValue()</outbound>
                <outbound type="class" confirmed="no">java.lang.Float</outbound>
                <outbound type="feature" confirmed="no">java.lang.Float.floatValue()</outbound>
                <outbound type="class" confirmed="no">java.lang.Integer</outbound>
                <outbound type="feature" confirmed="no">java.lang.Integer.intValue()</outbound>
                <outbound type="class" confirmed="no">java.lang.Long</outbound>
                <outbound type="feature" confirmed="no">java.lang.Long.longValue()</outbound>
                <outbound type="class" confirmed="no">java.lang.Object</outbound>
                <outbound type="class" confirmed="no">java.lang.Short</outbound>
                <outbound type="feature" confirmed="no">java.lang.Short.shortValue()</outbound>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="class" confirmed="no">java.lang.StringBuffer</outbound>
                <outbound type="feature" confirmed="no">java.lang.StringBuffer.StringBuffer(java.lang.String)</outbound>
                <outbound type="feature" confirmed="no">java.lang.StringBuffer.append(java.lang.Object)</outbound>
                <outbound type="feature" confirmed="no">java.lang.StringBuffer.append(java.lang.String)</outbound>
                <outbound type="feature" confirmed="no">java.lang.StringBuffer.toString()</outbound>
                <outbound type="class" confirmed="no">java.math.BigDecimal</outbound>
                <outbound type="feature" confirmed="no">java.math.BigDecimal.BigDecimal(double)</outbound>
                <outbound type="feature" confirmed="no">java.math.BigDecimal.BigDecimal(int)</outbound>
                <outbound type="feature" confirmed="no">java.math.BigDecimal.BigDecimal(java.lang.String)</outbound>
                <outbound type="feature" confirmed="no">java.math.BigDecimal.BigDecimal(java.math.BigInteger)</outbound>
                <outbound type="feature" confirmed="no">java.math.BigDecimal.BigDecimal(long)</outbound>
                <outbound type="feature" confirmed="no">java.math.BigDecimal.valueOf(long)</outbound>
                <outbound type="class" confirmed="no">java.math.BigInteger</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.ConversionException.ConversionException(java.lang.String)</outbound>
                <outbound type="class" confirmed="yes">org.mvel.Unit</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.Unit.getValue()</outbound>
                <inbound type="feature" confirmed="yes">org.mvel.math.IEEEFloatingPointMath._doOperations(int, java.lang.Object, int, int, java.lang.Object)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.math.IEEEFloatingPointMath.doOperation(java.lang.Object, int, java.lang.Object)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.math.IEEEFloatingPointMath.safeEquals(java.lang.Object, java.lang.Object)</name>
                <outbound type="class" confirmed="no">java.lang.Boolean</outbound>
                <outbound type="feature" confirmed="no">java.lang.Boolean.Boolean(boolean)</outbound>
                <outbound type="feature" confirmed="no">java.lang.Boolean.FALSE</outbound>
                <outbound type="feature" confirmed="no">java.lang.Boolean.TRUE</outbound>
                <outbound type="class" confirmed="no">java.lang.Object</outbound>
                <outbound type="feature" confirmed="no">java.lang.Object.equals(java.lang.Object)</outbound>
                <inbound type="feature" confirmed="yes">org.mvel.math.IEEEFloatingPointMath.doOperationNonNumeric(java.lang.Object, int, java.lang.Object)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.math.IEEEFloatingPointMath.doOperationsSameType(int, java.lang.Object, int, java.lang.Object)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.math.IEEEFloatingPointMath.safeNotEquals(java.lang.Object, java.lang.Object)</name>
                <outbound type="class" confirmed="no">java.lang.Boolean</outbound>
                <outbound type="feature" confirmed="no">java.lang.Boolean.FALSE</outbound>
                <outbound type="feature" confirmed="no">java.lang.Boolean.TRUE</outbound>
                <outbound type="class" confirmed="no">java.lang.Object</outbound>
                <outbound type="feature" confirmed="no">java.lang.Object.equals(java.lang.Object)</outbound>
                <inbound type="feature" confirmed="yes">org.mvel.math.IEEEFloatingPointMath.doOperationNonNumeric(java.lang.Object, int, java.lang.Object)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.math.IEEEFloatingPointMath.doOperationsSameType(int, java.lang.Object, int, java.lang.Object)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.math.IEEEFloatingPointMath.static {}</name>
                <outbound type="class" confirmed="no">java.math.MathContext</outbound>
                <outbound type="feature" confirmed="no">java.math.MathContext.DECIMAL128</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.math.IEEEFloatingPointMath.MATH_CONTEXT</outbound>
            </feature>
        </class>
        <class confirmed="yes">
            <name>org.mvel.math.JDK14CompatabilityMath</name>
            <outbound type="class" confirmed="no">java.lang.Object</outbound>
            <outbound type="class" confirmed="yes">org.mvel.math.MathProcessor</outbound>
            <feature confirmed="yes">
                <name>org.mvel.math.JDK14CompatabilityMath.JDK14CompatabilityMath()</name>
                <outbound type="feature" confirmed="no">java.lang.Object.Object()</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.math.JDK14CompatabilityMath.ROUND_MODE</name>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.math.JDK14CompatabilityMath.SCALE</name>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.math.JDK14CompatabilityMath._doOperations(int, java.lang.Object, int, int, java.lang.Object)</name>
                <outbound type="class" confirmed="no">java.lang.Class</outbound>
                <outbound type="feature" confirmed="no">java.lang.Class.forName(java.lang.String)</outbound>
                <outbound type="class" confirmed="no">java.lang.ClassNotFoundException</outbound>
                <outbound type="feature" confirmed="no">java.lang.NoClassDefFoundError.NoClassDefFoundError(java.lang.String)</outbound>
                <outbound type="class" confirmed="no">java.lang.Object</outbound>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="feature" confirmed="no">java.lang.String.valueOf(java.lang.Object)</outbound>
                <outbound type="feature" confirmed="no">java.lang.Throwable.getMessage()</outbound>
                <outbound type="class" confirmed="no">java.math.BigDecimal</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.DataConversion.convert(java.lang.Object, java.lang.Class)</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.math.JDK14CompatabilityMath.doBigDecimalArithmetic(java.math.BigDecimal, int, java.math.BigDecimal)</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.math.JDK14CompatabilityMath.doOperationNonNumeric(java.lang.Object, int, java.lang.Object)</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.math.JDK14CompatabilityMath.doOperationsSameType(int, java.lang.Object, int, java.lang.Object)</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.math.JDK14CompatabilityMath.getBigDecimalFromType(java.lang.Object, int)</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.util.PropertyTools.isNumber(java.lang.Object)</outbound>
                <inbound type="feature" confirmed="yes">org.mvel.math.JDK14CompatabilityMath.doOperation(java.lang.Object, int, java.lang.Object)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.math.JDK14CompatabilityMath.doBigDecimalArithmetic(java.math.BigDecimal, int, java.math.BigDecimal)</name>
                <outbound type="class" confirmed="no">java.lang.Boolean</outbound>
                <outbound type="feature" confirmed="no">java.lang.Boolean.FALSE</outbound>
                <outbound type="feature" confirmed="no">java.lang.Boolean.TRUE</outbound>
                <outbound type="feature" confirmed="no">java.lang.Double.Double(double)</outbound>
                <outbound type="feature" confirmed="no">java.lang.Math.pow(double, double)</outbound>
                <outbound type="class" confirmed="no">java.lang.Object</outbound>
                <outbound type="class" confirmed="no">java.math.BigDecimal</outbound>
                <outbound type="feature" confirmed="no">java.math.BigDecimal.add(java.math.BigDecimal)</outbound>
                <outbound type="feature" confirmed="no">java.math.BigDecimal.compareTo(java.math.BigDecimal)</outbound>
                <outbound type="feature" confirmed="no">java.math.BigDecimal.divide(java.math.BigDecimal, int, int)</outbound>
                <outbound type="feature" confirmed="no">java.math.BigDecimal.doubleValue()</outbound>
                <outbound type="feature" confirmed="no">java.math.BigDecimal.multiply(java.math.BigDecimal)</outbound>
                <outbound type="feature" confirmed="no">java.math.BigDecimal.subtract(java.math.BigDecimal)</outbound>
                <inbound type="feature" confirmed="yes">org.mvel.math.JDK14CompatabilityMath._doOperations(int, java.lang.Object, int, int, java.lang.Object)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.math.JDK14CompatabilityMath.doOperation(java.lang.Object, int, java.lang.Object)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.math.JDK14CompatabilityMath.doOperation(java.lang.Object, int, java.lang.Object)</name>
                <outbound type="class" confirmed="no">java.lang.Class</outbound>
                <outbound type="class" confirmed="no">java.lang.Object</outbound>
                <outbound type="feature" confirmed="no">java.lang.Object.getClass()</outbound>
                <outbound type="class" confirmed="no">java.math.BigDecimal</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.math.JDK14CompatabilityMath._doOperations(int, java.lang.Object, int, int, java.lang.Object)</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.math.JDK14CompatabilityMath.doBigDecimalArithmetic(java.math.BigDecimal, int, java.math.BigDecimal)</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.math.JDK14CompatabilityMath.getBigDecimalFromType(java.lang.Object, int)</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.util.ParseTools.resolveType(java.lang.Class)</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.util.PropertyTools.isNumber(java.lang.Object)</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.math.JDK14CompatabilityMath.doOperationNonNumeric(java.lang.Object, int, java.lang.Object)</name>
                <outbound type="class" confirmed="no">java.lang.Boolean</outbound>
                <outbound type="feature" confirmed="no">java.lang.Boolean.FALSE</outbound>
                <outbound type="feature" confirmed="no">java.lang.Boolean.TRUE</outbound>
                <outbound type="class" confirmed="no">java.lang.Class</outbound>
                <outbound type="feature" confirmed="no">java.lang.Class.getName()</outbound>
                <outbound type="class" confirmed="no">java.lang.Comparable</outbound>
                <outbound type="feature" confirmed="no">java.lang.Comparable.compareTo(java.lang.Object)</outbound>
                <outbound type="class" confirmed="no">java.lang.Object</outbound>
                <outbound type="feature" confirmed="no">java.lang.Object.getClass()</outbound>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="feature" confirmed="no">java.lang.String.valueOf(java.lang.Object)</outbound>
                <outbound type="class" confirmed="no">java.lang.StringBuffer</outbound>
                <outbound type="feature" confirmed="no">java.lang.StringBuffer.StringBuffer(java.lang.String)</outbound>
                <outbound type="feature" confirmed="no">java.lang.StringBuffer.append(java.lang.String)</outbound>
                <outbound type="feature" confirmed="no">java.lang.StringBuffer.toString()</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.CompileException.CompileException(java.lang.String)</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.math.JDK14CompatabilityMath.safeEquals(java.lang.Object, java.lang.Object)</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.math.JDK14CompatabilityMath.safeNotEquals(java.lang.Object, java.lang.Object)</outbound>
                <inbound type="feature" confirmed="yes">org.mvel.math.JDK14CompatabilityMath._doOperations(int, java.lang.Object, int, int, java.lang.Object)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.math.JDK14CompatabilityMath.doOperationsSameType(int, java.lang.Object, int, java.lang.Object)</name>
                <outbound type="class" confirmed="no">java.lang.Boolean</outbound>
                <outbound type="feature" confirmed="no">java.lang.Boolean.FALSE</outbound>
                <outbound type="feature" confirmed="no">java.lang.Boolean.TRUE</outbound>
                <outbound type="feature" confirmed="no">java.lang.Boolean.booleanValue()</outbound>
                <outbound type="class" confirmed="no">java.lang.Double</outbound>
                <outbound type="feature" confirmed="no">java.lang.Double.Double(double)</outbound>
                <outbound type="feature" confirmed="no">java.lang.Double.doubleValue()</outbound>
                <outbound type="class" confirmed="no">java.lang.Float</outbound>
                <outbound type="feature" confirmed="no">java.lang.Float.Float(float)</outbound>
                <outbound type="feature" confirmed="no">java.lang.Float.floatValue()</outbound>
                <outbound type="class" confirmed="no">java.lang.Integer</outbound>
                <outbound type="feature" confirmed="no">java.lang.Integer.Integer(int)</outbound>
                <outbound type="feature" confirmed="no">java.lang.Integer.intValue()</outbound>
                <outbound type="class" confirmed="no">java.lang.Long</outbound>
                <outbound type="feature" confirmed="no">java.lang.Long.Long(long)</outbound>
                <outbound type="feature" confirmed="no">java.lang.Long.longValue()</outbound>
                <outbound type="feature" confirmed="no">java.lang.Math.pow(double, double)</outbound>
                <outbound type="class" confirmed="no">java.lang.Object</outbound>
                <outbound type="class" confirmed="no">java.lang.Short</outbound>
                <outbound type="feature" confirmed="no">java.lang.Short.Short(short)</outbound>
                <outbound type="feature" confirmed="no">java.lang.Short.shortValue()</outbound>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="feature" confirmed="no">java.lang.String.valueOf(java.lang.Object)</outbound>
                <outbound type="class" confirmed="no">java.lang.StringBuffer</outbound>
                <outbound type="feature" confirmed="no">java.lang.StringBuffer.StringBuffer(java.lang.String)</outbound>
                <outbound type="feature" confirmed="no">java.lang.StringBuffer.append(java.lang.String)</outbound>
                <outbound type="feature" confirmed="no">java.lang.StringBuffer.toString()</outbound>
                <outbound type="class" confirmed="no">java.math.BigDecimal</outbound>
                <outbound type="feature" confirmed="no">java.math.BigDecimal.BigDecimal(double)</outbound>
                <outbound type="feature" confirmed="no">java.math.BigDecimal.BigDecimal(int)</outbound>
                <outbound type="feature" confirmed="no">java.math.BigDecimal.BigDecimal(long)</outbound>
                <outbound type="feature" confirmed="no">java.math.BigDecimal.divide(java.math.BigDecimal, int, int)</outbound>
                <outbound type="class" confirmed="no">java.math.BigInteger</outbound>
                <outbound type="feature" confirmed="no">java.math.BigInteger.add(java.math.BigInteger)</outbound>
                <outbound type="feature" confirmed="no">java.math.BigInteger.compareTo(java.math.BigInteger)</outbound>
                <outbound type="feature" confirmed="no">java.math.BigInteger.divide(java.math.BigInteger)</outbound>
                <outbound type="feature" confirmed="no">java.math.BigInteger.intValue()</outbound>
                <outbound type="feature" confirmed="no">java.math.BigInteger.multiply(java.math.BigInteger)</outbound>
                <outbound type="feature" confirmed="no">java.math.BigInteger.pow(int)</outbound>
                <outbound type="feature" confirmed="no">java.math.BigInteger.remainder(java.math.BigInteger)</outbound>
                <outbound type="feature" confirmed="no">java.math.BigInteger.subtract(java.math.BigInteger)</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.math.JDK14CompatabilityMath.safeEquals(java.lang.Object, java.lang.Object)</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.math.JDK14CompatabilityMath.safeNotEquals(java.lang.Object, java.lang.Object)</outbound>
                <inbound type="feature" confirmed="yes">org.mvel.math.JDK14CompatabilityMath._doOperations(int, java.lang.Object, int, int, java.lang.Object)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.math.JDK14CompatabilityMath.getBigDecimalFromType(java.lang.Object, int)</name>
                <outbound type="class" confirmed="no">java.lang.Boolean</outbound>
                <outbound type="feature" confirmed="no">java.lang.Boolean.booleanValue()</outbound>
                <outbound type="class" confirmed="no">java.lang.Double</outbound>
                <outbound type="feature" confirmed="no">java.lang.Double.doubleValue()</outbound>
                <outbound type="class" confirmed="no">java.lang.Float</outbound>
                <outbound type="feature" confirmed="no">java.lang.Float.floatValue()</outbound>
                <outbound type="class" confirmed="no">java.lang.Integer</outbound>
                <outbound type="feature" confirmed="no">java.lang.Integer.intValue()</outbound>
                <outbound type="class" confirmed="no">java.lang.Long</outbound>
                <outbound type="feature" confirmed="no">java.lang.Long.longValue()</outbound>
                <outbound type="class" confirmed="no">java.lang.Object</outbound>
                <outbound type="class" confirmed="no">java.lang.Short</outbound>
                <outbound type="feature" confirmed="no">java.lang.Short.shortValue()</outbound>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="class" confirmed="no">java.lang.StringBuffer</outbound>
                <outbound type="feature" confirmed="no">java.lang.StringBuffer.StringBuffer(java.lang.String)</outbound>
                <outbound type="feature" confirmed="no">java.lang.StringBuffer.append(java.lang.Object)</outbound>
                <outbound type="feature" confirmed="no">java.lang.StringBuffer.append(java.lang.String)</outbound>
                <outbound type="feature" confirmed="no">java.lang.StringBuffer.toString()</outbound>
                <outbound type="class" confirmed="no">java.math.BigDecimal</outbound>
                <outbound type="feature" confirmed="no">java.math.BigDecimal.BigDecimal(double)</outbound>
                <outbound type="feature" confirmed="no">java.math.BigDecimal.BigDecimal(int)</outbound>
                <outbound type="feature" confirmed="no">java.math.BigDecimal.BigDecimal(java.lang.String)</outbound>
                <outbound type="feature" confirmed="no">java.math.BigDecimal.BigDecimal(java.math.BigInteger)</outbound>
                <outbound type="feature" confirmed="no">java.math.BigDecimal.valueOf(long)</outbound>
                <outbound type="class" confirmed="no">java.math.BigInteger</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.ConversionException.ConversionException(java.lang.String)</outbound>
                <inbound type="feature" confirmed="yes">org.mvel.math.JDK14CompatabilityMath._doOperations(int, java.lang.Object, int, int, java.lang.Object)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.math.JDK14CompatabilityMath.doOperation(java.lang.Object, int, java.lang.Object)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.math.JDK14CompatabilityMath.safeEquals(java.lang.Object, java.lang.Object)</name>
                <outbound type="class" confirmed="no">java.lang.Boolean</outbound>
                <outbound type="feature" confirmed="no">java.lang.Boolean.Boolean(boolean)</outbound>
                <outbound type="class" confirmed="no">java.lang.Object</outbound>
                <outbound type="feature" confirmed="no">java.lang.Object.equals(java.lang.Object)</outbound>
                <inbound type="feature" confirmed="yes">org.mvel.math.JDK14CompatabilityMath.doOperationNonNumeric(java.lang.Object, int, java.lang.Object)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.math.JDK14CompatabilityMath.doOperationsSameType(int, java.lang.Object, int, java.lang.Object)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.math.JDK14CompatabilityMath.safeNotEquals(java.lang.Object, java.lang.Object)</name>
                <outbound type="class" confirmed="no">java.lang.Boolean</outbound>
                <outbound type="feature" confirmed="no">java.lang.Boolean.Boolean(boolean)</outbound>
                <outbound type="class" confirmed="no">java.lang.Object</outbound>
                <outbound type="feature" confirmed="no">java.lang.Object.equals(java.lang.Object)</outbound>
                <inbound type="feature" confirmed="yes">org.mvel.math.JDK14CompatabilityMath.doOperationNonNumeric(java.lang.Object, int, java.lang.Object)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.math.JDK14CompatabilityMath.doOperationsSameType(int, java.lang.Object, int, java.lang.Object)</inbound>
            </feature>
        </class>
        <class confirmed="yes">
            <name>org.mvel.math.MathProcessor</name>
            <outbound type="class" confirmed="no">java.lang.Object</outbound>
            <inbound type="class" confirmed="yes">org.mvel.math.IEEEFloatingPointMath</inbound>
            <inbound type="class" confirmed="yes">org.mvel.math.JDK14CompatabilityMath</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.util.ParseTools.MATH_PROCESSOR</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.util.ParseTools.doOperations(java.lang.Object, int, java.lang.Object)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.util.ParseTools.static {}</inbound>
            <feature confirmed="yes">
                <name>org.mvel.math.MathProcessor.doOperation(java.lang.Object, int, java.lang.Object)</name>
                <outbound type="class" confirmed="no">java.lang.Object</outbound>
                <inbound type="feature" confirmed="yes">org.mvel.util.ParseTools.doOperations(java.lang.Object, int, java.lang.Object)</inbound>
            </feature>
        </class>
    </package>
    <package confirmed="yes">
        <name>org.mvel.optimizers</name>
        <class confirmed="yes">
            <name>org.mvel.optimizers.AbstractOptimizer</name>
            <outbound type="class" confirmed="yes">org.mvel.AbstractParser</outbound>
            <inbound type="class" confirmed="yes">org.mvel.PropertyVerifier</inbound>
            <inbound type="class" confirmed="yes">org.mvel.optimizers.impl.asm.ASMAccessorOptimizer</inbound>
            <inbound type="class" confirmed="yes">org.mvel.optimizers.impl.refl.ReflectiveAccessorOptimizer</inbound>
            <feature confirmed="yes">
                <name>org.mvel.optimizers.AbstractOptimizer.AbstractOptimizer()</name>
                <outbound type="feature" confirmed="yes">org.mvel.AbstractParser.AbstractParser()</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.optimizers.AbstractOptimizer.start</outbound>
                <inbound type="feature" confirmed="yes">org.mvel.PropertyVerifier.PropertyVerifier(char[], org.mvel.ParserContext)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.PropertyVerifier.PropertyVerifier(java.lang.String, org.mvel.ParserContext)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.asm.ASMAccessorOptimizer.ASMAccessorOptimizer()</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.refl.ReflectiveAccessorOptimizer.ReflectiveAccessorOptimizer()</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.refl.ReflectiveAccessorOptimizer.ReflectiveAccessorOptimizer(char[], java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.optimizers.AbstractOptimizer.BEAN</name>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.optimizers.AbstractOptimizer.COL</name>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.optimizers.AbstractOptimizer.METH</name>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.optimizers.AbstractOptimizer.capture()</name>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="feature" confirmed="no">java.lang.String.String(char[], int, int)</outbound>
                <outbound type="feature" confirmed="no">org.mvel.optimizers.AbstractOptimizer.cursor</outbound>
                <outbound type="feature" confirmed="no">org.mvel.optimizers.AbstractOptimizer.expr</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.optimizers.AbstractOptimizer.start</outbound>
                <outbound type="feature" confirmed="no">org.mvel.optimizers.AbstractOptimizer.trimLeft(int)</outbound>
                <outbound type="feature" confirmed="no">org.mvel.optimizers.AbstractOptimizer.trimRight(int)</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.optimizers.AbstractOptimizer.containsStringLiteralTermination()</name>
                <outbound type="feature" confirmed="no">java.lang.Character.isWhitespace(char)</outbound>
                <outbound type="feature" confirmed="no">org.mvel.optimizers.AbstractOptimizer.cursor</outbound>
                <outbound type="feature" confirmed="no">org.mvel.optimizers.AbstractOptimizer.expr</outbound>
            </feature>
            <feature confirmed="no">
                <name>org.mvel.optimizers.AbstractOptimizer.cursor</name>
                <inbound type="feature" confirmed="yes">org.mvel.optimizers.AbstractOptimizer.capture()</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.optimizers.AbstractOptimizer.containsStringLiteralTermination()</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.optimizers.AbstractOptimizer.nextSubToken()</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.optimizers.AbstractOptimizer.scanTo(char)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.optimizers.AbstractOptimizer.tryStaticAccess()</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.optimizers.AbstractOptimizer.whiteSpaceSkip()</inbound>
            </feature>
            <feature confirmed="no">
                <name>org.mvel.optimizers.AbstractOptimizer.expr</name>
                <inbound type="feature" confirmed="yes">org.mvel.optimizers.AbstractOptimizer.capture()</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.optimizers.AbstractOptimizer.containsStringLiteralTermination()</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.optimizers.AbstractOptimizer.nextSubToken()</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.optimizers.AbstractOptimizer.scanTo(char)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.optimizers.AbstractOptimizer.tryStaticAccess()</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.optimizers.AbstractOptimizer.whiteSpaceSkip()</inbound>
            </feature>
            <feature confirmed="no">
                <name>org.mvel.optimizers.AbstractOptimizer.length</name>
                <inbound type="feature" confirmed="yes">org.mvel.optimizers.AbstractOptimizer.nextSubToken()</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.optimizers.AbstractOptimizer.scanTo(char)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.optimizers.AbstractOptimizer.tryStaticAccess()</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.optimizers.AbstractOptimizer.whiteSpaceSkip()</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.optimizers.AbstractOptimizer.nextSubToken()</name>
                <outbound type="feature" confirmed="no">org.mvel.optimizers.AbstractOptimizer.cursor</outbound>
                <outbound type="feature" confirmed="no">org.mvel.optimizers.AbstractOptimizer.expr</outbound>
                <outbound type="feature" confirmed="no">org.mvel.optimizers.AbstractOptimizer.length</outbound>
                <outbound type="feature" confirmed="no">org.mvel.optimizers.AbstractOptimizer.skipWhitespace()</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.optimizers.AbstractOptimizer.start</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.util.PropertyTools.isIdentifierPart(int)</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.optimizers.AbstractOptimizer.scanTo(char)</name>
                <outbound type="feature" confirmed="no">org.mvel.optimizers.AbstractOptimizer.cursor</outbound>
                <outbound type="feature" confirmed="no">org.mvel.optimizers.AbstractOptimizer.expr</outbound>
                <outbound type="feature" confirmed="no">org.mvel.optimizers.AbstractOptimizer.length</outbound>
            </feature>
            <feature confirmed="no">
                <name>org.mvel.optimizers.AbstractOptimizer.skipWhitespace()</name>
                <inbound type="feature" confirmed="yes">org.mvel.optimizers.AbstractOptimizer.nextSubToken()</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.optimizers.AbstractOptimizer.start</name>
                <inbound type="feature" confirmed="yes">org.mvel.optimizers.AbstractOptimizer.AbstractOptimizer()</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.optimizers.AbstractOptimizer.capture()</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.optimizers.AbstractOptimizer.nextSubToken()</inbound>
            </feature>
            <feature confirmed="no">
                <name>org.mvel.optimizers.AbstractOptimizer.trimLeft(int)</name>
                <inbound type="feature" confirmed="yes">org.mvel.optimizers.AbstractOptimizer.capture()</inbound>
            </feature>
            <feature confirmed="no">
                <name>org.mvel.optimizers.AbstractOptimizer.trimRight(int)</name>
                <inbound type="feature" confirmed="yes">org.mvel.optimizers.AbstractOptimizer.capture()</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.optimizers.AbstractOptimizer.tryStaticAccess()</name>
                <outbound type="class" confirmed="no">java.lang.Class</outbound>
                <outbound type="feature" confirmed="no">java.lang.Class.getField(java.lang.String)</outbound>
                <outbound type="class" confirmed="no">java.lang.ClassLoader</outbound>
                <outbound type="feature" confirmed="no">java.lang.ClassLoader.loadClass(java.lang.String)</outbound>
                <outbound type="class" confirmed="no">java.lang.ClassNotFoundException</outbound>
                <outbound type="class" confirmed="no">java.lang.Exception</outbound>
                <outbound type="class" confirmed="no">java.lang.Object</outbound>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="feature" confirmed="no">java.lang.String.String(char[], int, int)</outbound>
                <outbound type="class" confirmed="no">java.lang.Thread</outbound>
                <outbound type="feature" confirmed="no">java.lang.Thread.currentThread()</outbound>
                <outbound type="feature" confirmed="no">java.lang.Thread.getContextClassLoader()</outbound>
                <outbound type="class" confirmed="no">java.lang.reflect.Field</outbound>
                <outbound type="feature" confirmed="no">org.mvel.optimizers.AbstractOptimizer.cursor</outbound>
                <outbound type="feature" confirmed="no">org.mvel.optimizers.AbstractOptimizer.expr</outbound>
                <outbound type="feature" confirmed="no">org.mvel.optimizers.AbstractOptimizer.length</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.optimizers.AbstractOptimizer.whiteSpaceSkip()</name>
                <outbound type="feature" confirmed="no">java.lang.Character.isWhitespace(char)</outbound>
                <outbound type="feature" confirmed="no">org.mvel.optimizers.AbstractOptimizer.cursor</outbound>
                <outbound type="feature" confirmed="no">org.mvel.optimizers.AbstractOptimizer.expr</outbound>
                <outbound type="feature" confirmed="no">org.mvel.optimizers.AbstractOptimizer.length</outbound>
            </feature>
        </class>
        <class confirmed="yes">
            <name>org.mvel.optimizers.AccessorOptimizer</name>
            <outbound type="class" confirmed="no">java.lang.Object</outbound>
            <inbound type="feature" confirmed="yes">org.mvel.ASTNode.getReducedValue(java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.ASTNode.getReducedValueAccelerated(java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.CompiledSetExpression.setValue(java.lang.Object, org.mvel.integration.VariableResolverFactory, java.lang.Object)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.ast.ContextDeepPropertyNode.getReducedValueAccelerated(java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.ast.InlineCollectionNode.getReducedValue(java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.ast.InlineCollectionNode.getReducedValueAccelerated(java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.ast.LiteralDeepPropertyNode.getReducedValueAccelerated(java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.ast.NewObjectNode.getReducedValueAccelerated(java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.ast.ThisValDeepPropertyNode.getReducedValueAccelerated(java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.ast.Union.getReducedValueAccelerated(java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.ast.VariableDeepPropertyNode.getReducedValueAccelerated(java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.optimizers.OptimizerFactory.getAccessorCompiler(java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.optimizers.OptimizerFactory.getDefaultAccessorCompiler()</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.optimizers.OptimizerFactory.getThreadAccessorOptimizer()</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.optimizers.OptimizerFactory.setDefaultOptimizer(java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.optimizers.OptimizerHook.generateAccessor(org.mvel.optimizers.AccessorOptimizer)</inbound>
            <inbound type="class" confirmed="yes">org.mvel.optimizers.impl.asm.ASMAccessorOptimizer</inbound>
            <inbound type="class" confirmed="yes">org.mvel.optimizers.impl.refl.ReflectiveAccessorOptimizer</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.refl.Union.getValue(java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory)</inbound>
            <feature confirmed="yes">
                <name>org.mvel.optimizers.AccessorOptimizer.getEgressType()</name>
                <outbound type="class" confirmed="no">java.lang.Class</outbound>
                <inbound type="feature" confirmed="yes">org.mvel.ASTNode.getReducedValueAccelerated(java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.ast.InlineCollectionNode.getReducedValueAccelerated(java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.ast.NewObjectNode.getReducedValueAccelerated(java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.optimizers.AccessorOptimizer.getResultOptPass()</name>
                <outbound type="class" confirmed="no">java.lang.Object</outbound>
                <inbound type="feature" confirmed="yes">org.mvel.ASTNode.getReducedValue(java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.ASTNode.getReducedValueAccelerated(java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.ast.ContextDeepPropertyNode.getReducedValueAccelerated(java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.ast.LiteralDeepPropertyNode.getReducedValueAccelerated(java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.ast.NewObjectNode.getReducedValueAccelerated(java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.ast.Union.getReducedValueAccelerated(java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.ast.VariableDeepPropertyNode.getReducedValueAccelerated(java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.refl.Union.getValue(java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.optimizers.AccessorOptimizer.isLiteralOnly()</name>
                <inbound type="feature" confirmed="yes">org.mvel.ast.InlineCollectionNode.getReducedValueAccelerated(java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.optimizers.AccessorOptimizer.optimizeAccessor(char[], java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory, boolean)</name>
                <outbound type="class" confirmed="no">java.lang.Object</outbound>
                <outbound type="class" confirmed="yes">org.mvel.Accessor</outbound>
                <outbound type="class" confirmed="yes">org.mvel.integration.VariableResolverFactory</outbound>
                <inbound type="feature" confirmed="yes">org.mvel.ASTNode.getReducedValueAccelerated(java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.ast.ContextDeepPropertyNode.getReducedValueAccelerated(java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.ast.LiteralDeepPropertyNode.getReducedValueAccelerated(java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.ast.ThisValDeepPropertyNode.getReducedValueAccelerated(java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.ast.Union.getReducedValueAccelerated(java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.ast.VariableDeepPropertyNode.getReducedValueAccelerated(java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.refl.Union.getValue(java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.optimizers.AccessorOptimizer.optimizeCollection(char[], java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory)</name>
                <outbound type="class" confirmed="no">java.lang.Object</outbound>
                <outbound type="class" confirmed="yes">org.mvel.Accessor</outbound>
                <outbound type="class" confirmed="yes">org.mvel.integration.VariableResolverFactory</outbound>
                <inbound type="feature" confirmed="yes">org.mvel.ast.InlineCollectionNode.getReducedValue(java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.ast.InlineCollectionNode.getReducedValueAccelerated(java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.optimizers.AccessorOptimizer.optimizeFold(char[], java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory)</name>
                <outbound type="class" confirmed="no">java.lang.Object</outbound>
                <outbound type="class" confirmed="yes">org.mvel.Accessor</outbound>
                <outbound type="class" confirmed="yes">org.mvel.integration.VariableResolverFactory</outbound>
                <inbound type="feature" confirmed="yes">org.mvel.ASTNode.getReducedValue(java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.ASTNode.getReducedValueAccelerated(java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.optimizers.AccessorOptimizer.optimizeObjectCreation(char[], java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory)</name>
                <outbound type="class" confirmed="no">java.lang.Object</outbound>
                <outbound type="class" confirmed="yes">org.mvel.Accessor</outbound>
                <outbound type="class" confirmed="yes">org.mvel.integration.VariableResolverFactory</outbound>
                <inbound type="feature" confirmed="yes">org.mvel.ast.NewObjectNode.getReducedValueAccelerated(java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.optimizers.AccessorOptimizer.optimizeSetAccessor(char[], java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory, boolean, java.lang.Object)</name>
                <outbound type="class" confirmed="no">java.lang.Object</outbound>
                <outbound type="class" confirmed="yes">org.mvel.SetAccessor</outbound>
                <outbound type="class" confirmed="yes">org.mvel.integration.VariableResolverFactory</outbound>
                <inbound type="feature" confirmed="yes">org.mvel.CompiledSetExpression.setValue(java.lang.Object, org.mvel.integration.VariableResolverFactory, java.lang.Object)</inbound>
            </feature>
        </class>
        <class confirmed="yes">
            <name>org.mvel.optimizers.OptimizationNotSupported</name>
            <outbound type="class" confirmed="no">java.lang.RuntimeException</outbound>
            <inbound type="feature" confirmed="yes">org.mvel.ASTNode.getReducedValueAccelerated(java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.asm.ASMAccessorOptimizer.compileAccessor()</inbound>
            <feature confirmed="yes">
                <name>org.mvel.optimizers.OptimizationNotSupported.OptimizationNotSupported()</name>
                <outbound type="feature" confirmed="no">java.lang.RuntimeException.RuntimeException()</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.optimizers.OptimizationNotSupported.OptimizationNotSupported(java.lang.String)</name>
                <outbound type="feature" confirmed="no">java.lang.RuntimeException.RuntimeException(java.lang.String)</outbound>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.asm.ASMAccessorOptimizer.optimizeFold(char[], java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.optimizers.OptimizationNotSupported.OptimizationNotSupported(java.lang.String, java.lang.Throwable)</name>
                <outbound type="feature" confirmed="no">java.lang.RuntimeException.RuntimeException(java.lang.String, java.lang.Throwable)</outbound>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="class" confirmed="no">java.lang.Throwable</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.optimizers.OptimizationNotSupported.OptimizationNotSupported(java.lang.Throwable)</name>
                <outbound type="feature" confirmed="no">java.lang.RuntimeException.RuntimeException(java.lang.Throwable)</outbound>
                <outbound type="class" confirmed="no">java.lang.Throwable</outbound>
            </feature>
        </class>
        <class confirmed="yes">
            <name>org.mvel.optimizers.OptimizerFactory</name>
            <outbound type="class" confirmed="no">java.lang.Object</outbound>
            <feature confirmed="yes">
                <name>org.mvel.optimizers.OptimizerFactory.OptimizerFactory()</name>
                <outbound type="feature" confirmed="no">java.lang.Object.Object()</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.optimizers.OptimizerFactory.SAFE_REFLECTIVE</name>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <inbound type="feature" confirmed="yes">org.mvel.ASTNode.getReducedValue(java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.ASTNode.getReducedValueAccelerated(java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.ast.InlineCollectionNode.getReducedValue(java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.optimizers.OptimizerFactory.static {}</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.optimizers.OptimizerFactory.accessorCompilers</name>
                <outbound type="class" confirmed="no">java.util.Map</outbound>
                <inbound type="feature" confirmed="yes">org.mvel.optimizers.OptimizerFactory.getAccessorCompiler(java.lang.String)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.optimizers.OptimizerFactory.getDefaultAccessorCompiler()</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.optimizers.OptimizerFactory.setDefaultOptimizer(java.lang.String)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.optimizers.OptimizerFactory.static {}</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.optimizers.OptimizerFactory.defaultOptimizer</name>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <inbound type="feature" confirmed="yes">org.mvel.optimizers.OptimizerFactory.getDefaultAccessorCompiler()</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.optimizers.OptimizerFactory.setDefaultOptimizer(java.lang.String)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.optimizers.OptimizerFactory.static {}</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.optimizers.OptimizerFactory.getAccessorCompiler(java.lang.String)</name>
                <outbound type="class" confirmed="no">java.lang.Class</outbound>
                <outbound type="feature" confirmed="no">java.lang.Class.newInstance()</outbound>
                <outbound type="class" confirmed="no">java.lang.Exception</outbound>
                <outbound type="class" confirmed="no">java.lang.Object</outbound>
                <outbound type="feature" confirmed="no">java.lang.Object.getClass()</outbound>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="class" confirmed="no">java.lang.Throwable</outbound>
                <outbound type="class" confirmed="no">java.util.Map</outbound>
                <outbound type="feature" confirmed="no">java.util.Map.get(java.lang.Object)</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.CompileException.CompileException(java.lang.String, java.lang.Throwable)</outbound>
                <outbound type="class" confirmed="yes">org.mvel.optimizers.AccessorOptimizer</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.optimizers.OptimizerFactory.accessorCompilers</outbound>
                <inbound type="feature" confirmed="yes">org.mvel.ASTNode.getReducedValue(java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.ASTNode.getReducedValueAccelerated(java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.CompiledSetExpression.setValue(java.lang.Object, org.mvel.integration.VariableResolverFactory, java.lang.Object)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.ast.InlineCollectionNode.getReducedValue(java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.optimizers.OptimizerFactory.getDefaultAccessorCompiler()</name>
                <outbound type="class" confirmed="no">java.lang.Class</outbound>
                <outbound type="feature" confirmed="no">java.lang.Class.newInstance()</outbound>
                <outbound type="class" confirmed="no">java.lang.Exception</outbound>
                <outbound type="class" confirmed="no">java.lang.Object</outbound>
                <outbound type="feature" confirmed="no">java.lang.Object.getClass()</outbound>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="class" confirmed="no">java.lang.Throwable</outbound>
                <outbound type="class" confirmed="no">java.util.Map</outbound>
                <outbound type="feature" confirmed="no">java.util.Map.get(java.lang.Object)</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.CompileException.CompileException(java.lang.String, java.lang.Throwable)</outbound>
                <outbound type="class" confirmed="yes">org.mvel.optimizers.AccessorOptimizer</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.optimizers.OptimizerFactory.accessorCompilers</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.optimizers.OptimizerFactory.defaultOptimizer</outbound>
                <inbound type="feature" confirmed="yes">org.mvel.ast.InlineCollectionNode.getReducedValueAccelerated(java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.ast.Union.getReducedValueAccelerated(java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.optimizers.OptimizerFactory.getThreadAccessorOptimizer()</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.refl.Union.getValue(java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.optimizers.OptimizerFactory.getThreadAccessorOptimizer()</name>
                <outbound type="class" confirmed="no">java.lang.Class</outbound>
                <outbound type="feature" confirmed="no">java.lang.Class.newInstance()</outbound>
                <outbound type="class" confirmed="no">java.lang.Exception</outbound>
                <outbound type="class" confirmed="no">java.lang.Object</outbound>
                <outbound type="feature" confirmed="no">java.lang.Object.getClass()</outbound>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="class" confirmed="no">java.lang.ThreadLocal</outbound>
                <outbound type="feature" confirmed="no">java.lang.ThreadLocal.ThreadLocal()</outbound>
                <outbound type="feature" confirmed="no">java.lang.ThreadLocal.get()</outbound>
                <outbound type="feature" confirmed="no">java.lang.ThreadLocal.set(java.lang.Object)</outbound>
                <outbound type="class" confirmed="no">java.lang.Throwable</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.CompileException.CompileException(java.lang.String, java.lang.Throwable)</outbound>
                <outbound type="class" confirmed="yes">org.mvel.optimizers.AccessorOptimizer</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.optimizers.OptimizerFactory.getDefaultAccessorCompiler()</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.optimizers.OptimizerFactory.threadOptimizer</outbound>
                <inbound type="feature" confirmed="yes">org.mvel.ASTNode.getReducedValueAccelerated(java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.ast.ContextDeepPropertyNode.getReducedValueAccelerated(java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.ast.LiteralDeepPropertyNode.getReducedValueAccelerated(java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.ast.NewObjectNode.getReducedValueAccelerated(java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.ast.ThisValDeepPropertyNode.getReducedValueAccelerated(java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.ast.VariableDeepPropertyNode.getReducedValueAccelerated(java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.optimizers.OptimizerFactory.setDefaultOptimizer(java.lang.String)</name>
                <outbound type="class" confirmed="no">java.lang.Class</outbound>
                <outbound type="class" confirmed="no">java.lang.Exception</outbound>
                <outbound type="class" confirmed="no">java.lang.Object</outbound>
                <outbound type="feature" confirmed="no">java.lang.Object.getClass()</outbound>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="class" confirmed="no">java.lang.Throwable</outbound>
                <outbound type="class" confirmed="no">java.util.Map</outbound>
                <outbound type="feature" confirmed="no">java.util.Map.get(java.lang.Object)</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.CompileException.CompileException(java.lang.String, java.lang.Throwable)</outbound>
                <outbound type="class" confirmed="yes">org.mvel.optimizers.AccessorOptimizer</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.optimizers.OptimizerFactory.accessorCompilers</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.optimizers.OptimizerFactory.defaultOptimizer</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.optimizers.OptimizerFactory.setThreadAccessorOptimizer(java.lang.Class)</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.optimizers.OptimizerFactory.setThreadAccessorOptimizer(java.lang.Class)</name>
                <outbound type="class" confirmed="no">java.lang.Class</outbound>
                <outbound type="class" confirmed="no">java.lang.Object</outbound>
                <outbound type="class" confirmed="no">java.lang.ThreadLocal</outbound>
                <outbound type="feature" confirmed="no">java.lang.ThreadLocal.ThreadLocal()</outbound>
                <outbound type="feature" confirmed="no">java.lang.ThreadLocal.set(java.lang.Object)</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.optimizers.OptimizerFactory.threadOptimizer</outbound>
                <inbound type="feature" confirmed="yes">org.mvel.CompiledExpression.setupOptimizers()</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.MVELInterpretedRuntime.parse()</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.optimizers.OptimizerFactory.setDefaultOptimizer(java.lang.String)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.optimizers.OptimizerFactory.static {}</name>
                <outbound type="class" confirmed="no">java.io.PrintStream</outbound>
                <outbound type="feature" confirmed="no">java.io.PrintStream.println(java.lang.String)</outbound>
                <outbound type="feature" confirmed="no">java.lang.Boolean.getBoolean(java.lang.String)</outbound>
                <outbound type="class" confirmed="no">java.lang.Class</outbound>
                <outbound type="class" confirmed="no">java.lang.ClassLoader</outbound>
                <outbound type="feature" confirmed="no">java.lang.ClassLoader.loadClass(java.lang.String)</outbound>
                <outbound type="class" confirmed="no">java.lang.ClassNotFoundException</outbound>
                <outbound type="class" confirmed="no">java.lang.Object</outbound>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="feature" confirmed="no">java.lang.System.err</outbound>
                <outbound type="class" confirmed="no">java.lang.Thread</outbound>
                <outbound type="feature" confirmed="no">java.lang.Thread.currentThread()</outbound>
                <outbound type="feature" confirmed="no">java.lang.Thread.getContextClassLoader()</outbound>
                <outbound type="class" confirmed="no">java.lang.Throwable</outbound>
                <outbound type="feature" confirmed="no">java.lang.Throwable.printStackTrace()</outbound>
                <outbound type="feature" confirmed="no">java.util.HashMap.HashMap()</outbound>
                <outbound type="class" confirmed="no">java.util.Map</outbound>
                <outbound type="feature" confirmed="no">java.util.Map.put(java.lang.Object, java.lang.Object)</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.optimizers.OptimizerFactory.SAFE_REFLECTIVE</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.optimizers.OptimizerFactory.accessorCompilers</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.optimizers.OptimizerFactory.defaultOptimizer</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.optimizers.impl.asm.ASMAccessorOptimizer.ASMAccessorOptimizer()</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.optimizers.impl.refl.ReflectiveAccessorOptimizer.ReflectiveAccessorOptimizer()</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.optimizers.OptimizerFactory.threadOptimizer</name>
                <outbound type="class" confirmed="no">java.lang.ThreadLocal</outbound>
                <inbound type="feature" confirmed="yes">org.mvel.optimizers.OptimizerFactory.getThreadAccessorOptimizer()</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.optimizers.OptimizerFactory.setThreadAccessorOptimizer(java.lang.Class)</inbound>
            </feature>
        </class>
        <class confirmed="yes">
            <name>org.mvel.optimizers.OptimizerHook</name>
            <outbound type="class" confirmed="no">java.lang.Object</outbound>
            <feature confirmed="yes">
                <name>org.mvel.optimizers.OptimizerHook.generateAccessor(org.mvel.optimizers.AccessorOptimizer)</name>
                <outbound type="class" confirmed="yes">org.mvel.Accessor</outbound>
                <outbound type="class" confirmed="yes">org.mvel.optimizers.AccessorOptimizer</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.optimizers.OptimizerHook.isOptimizerSupported(java.lang.Class)</name>
                <outbound type="class" confirmed="no">java.lang.Class</outbound>
            </feature>
        </class>
    </package>
    <package confirmed="yes">
        <name>org.mvel.optimizers.impl.asm</name>
        <class confirmed="yes">
            <name>org.mvel.optimizers.impl.asm.ASMAccessorOptimizer</name>
            <outbound type="class" confirmed="yes">org.mvel.optimizers.AbstractOptimizer</outbound>
            <outbound type="class" confirmed="yes">org.mvel.optimizers.AccessorOptimizer</outbound>
            <feature confirmed="yes">
                <name>org.mvel.optimizers.impl.asm.ASMAccessorOptimizer.ARRAY</name>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.optimizers.impl.asm.ASMAccessorOptimizer.ASMAccessorOptimizer()</name>
                <outbound type="feature" confirmed="yes">org.mvel.asm.ClassWriter.ClassWriter(int)</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.optimizers.AbstractOptimizer.AbstractOptimizer()</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.optimizers.impl.asm.ASMAccessorOptimizer.deferFinish</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.optimizers.impl.asm.ASMAccessorOptimizer.first</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.optimizers.impl.asm.ASMAccessorOptimizer.literal</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.optimizers.impl.asm.ASMAccessorOptimizer.maxlocals</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.optimizers.impl.asm.ASMAccessorOptimizer.stacksize</outbound>
                <inbound type="feature" confirmed="yes">org.mvel.optimizers.OptimizerFactory.static {}</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.optimizers.impl.asm.ASMAccessorOptimizer.EMPTYARG</name>
                <outbound type="class" confirmed="no">java.lang.Object</outbound>
                <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.asm.ASMAccessorOptimizer.getBeanProperty(java.lang.Object, java.lang.String)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.asm.ASMAccessorOptimizer.static {}</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.optimizers.impl.asm.ASMAccessorOptimizer.EMPTYCLS</name>
                <outbound type="class" confirmed="no">java.lang.Class</outbound>
                <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.asm.ASMAccessorOptimizer.optimizeObjectCreation(char[], java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.asm.ASMAccessorOptimizer.static {}</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.optimizers.impl.asm.ASMAccessorOptimizer.LIST</name>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.optimizers.impl.asm.ASMAccessorOptimizer.LIST_IMPL</name>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
            </feature>
            <feature confirmed="no">
                <name>org.mvel.optimizers.impl.asm.ASMAccessorOptimizer.LITERALS</name>
                <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.asm.ASMAccessorOptimizer.getBeanProperty(java.lang.Object, java.lang.String)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.optimizers.impl.asm.ASMAccessorOptimizer.MAP</name>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.optimizers.impl.asm.ASMAccessorOptimizer.MAP_IMPL</name>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.optimizers.impl.asm.ASMAccessorOptimizer.OPCODES_VERSION</name>
                <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.asm.ASMAccessorOptimizer._initJIT()</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.asm.ASMAccessorOptimizer.ldcClassConstant(java.lang.Class)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.asm.ASMAccessorOptimizer.static {}</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.asm.ASMAccessorOptimizer.wrapPrimitive(java.lang.Class)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.optimizers.impl.asm.ASMAccessorOptimizer.VAL</name>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.optimizers.impl.asm.ASMAccessorOptimizer._finishJIT()</name>
                <outbound type="class" confirmed="no">java.lang.Class</outbound>
                <outbound type="feature" confirmed="no">java.lang.Class.isPrimitive()</outbound>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="class" confirmed="no">java.lang.StringBuffer</outbound>
                <outbound type="feature" confirmed="no">java.lang.StringBuffer.StringBuffer(java.lang.String)</outbound>
                <outbound type="feature" confirmed="no">java.lang.StringBuffer.append(int)</outbound>
                <outbound type="feature" confirmed="no">java.lang.StringBuffer.append(java.lang.String)</outbound>
                <outbound type="feature" confirmed="no">java.lang.StringBuffer.toString()</outbound>
                <outbound type="feature" confirmed="no">java.lang.Void.TYPE</outbound>
                <outbound type="class" confirmed="yes">org.mvel.asm.ClassWriter</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.asm.ClassWriter.visitEnd()</outbound>
                <outbound type="class" confirmed="yes">org.mvel.asm.MethodVisitor</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.asm.MethodVisitor.visitEnd()</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.asm.MethodVisitor.visitInsn(int)</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.asm.MethodVisitor.visitMaxs(int, int)</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.optimizers.impl.asm.ASMAccessorOptimizer.buildInputs()</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.optimizers.impl.asm.ASMAccessorOptimizer.cw</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.optimizers.impl.asm.ASMAccessorOptimizer.debug(java.lang.String)</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.optimizers.impl.asm.ASMAccessorOptimizer.deferFinish</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.optimizers.impl.asm.ASMAccessorOptimizer.dumpAdvancedDebugging()</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.optimizers.impl.asm.ASMAccessorOptimizer.maxlocals</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.optimizers.impl.asm.ASMAccessorOptimizer.mv</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.optimizers.impl.asm.ASMAccessorOptimizer.returnType</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.optimizers.impl.asm.ASMAccessorOptimizer.stacksize</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.optimizers.impl.asm.ASMAccessorOptimizer.wrapPrimitive(java.lang.Class)</outbound>
                <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.asm.ASMAccessorOptimizer.compileAccessor()</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.asm.ASMAccessorOptimizer.optimizeCollection(char[], java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.asm.ASMAccessorOptimizer.optimizeObjectCreation(char[], java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.optimizers.impl.asm.ASMAccessorOptimizer._getAccessor(java.lang.Object)</name>
                <outbound type="class" confirmed="no">java.io.Serializable</outbound>
                <outbound type="class" confirmed="no">java.lang.Class</outbound>
                <outbound type="class" confirmed="no">java.lang.Object</outbound>
                <outbound type="feature" confirmed="no">java.lang.Object.hashCode()</outbound>
                <outbound type="class" confirmed="no">java.lang.Object[]</outbound>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="class" confirmed="no">java.lang.StringBuffer</outbound>
                <outbound type="feature" confirmed="no">java.lang.StringBuffer.StringBuffer(java.lang.String)</outbound>
                <outbound type="feature" confirmed="no">java.lang.StringBuffer.append(int)</outbound>
                <outbound type="feature" confirmed="no">java.lang.StringBuffer.append(java.lang.String)</outbound>
                <outbound type="feature" confirmed="no">java.lang.StringBuffer.toString()</outbound>
                <outbound type="class" confirmed="no">java.util.Iterator</outbound>
                <outbound type="feature" confirmed="no">java.util.Iterator.hasNext()</outbound>
                <outbound type="feature" confirmed="no">java.util.Iterator.next()</outbound>
                <outbound type="class" confirmed="no">java.util.List</outbound>
                <outbound type="feature" confirmed="no">java.util.List.iterator()</outbound>
                <outbound type="feature" confirmed="no">java.util.List.size()</outbound>
                <outbound type="class" confirmed="no">java.util.Map</outbound>
                <outbound type="feature" confirmed="no">java.util.Map.get(java.lang.Object)</outbound>
                <outbound type="feature" confirmed="no">java.util.Map.keySet()</outbound>
                <outbound type="feature" confirmed="no">java.util.Map.size()</outbound>
                <outbound type="class" confirmed="no">java.util.Set</outbound>
                <outbound type="feature" confirmed="no">java.util.Set.iterator()</outbound>
                <outbound type="class" confirmed="yes">org.mvel.asm.MethodVisitor</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.asm.MethodVisitor.visitInsn(int)</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.asm.MethodVisitor.visitMethodInsn(int, java.lang.String, java.lang.String, java.lang.String)</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.asm.MethodVisitor.visitTypeInsn(int, java.lang.String)</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.optimizers.impl.asm.ASMAccessorOptimizer.debug(java.lang.String)</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.optimizers.impl.asm.ASMAccessorOptimizer.intPush(int)</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.optimizers.impl.asm.ASMAccessorOptimizer.mv</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.optimizers.impl.asm.ASMAccessorOptimizer.writeLiteralOrSubexpression(java.lang.Object)</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.util.ParseTools.subCompileExpression(java.lang.String)</outbound>
                <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.asm.ASMAccessorOptimizer.optimizeCollection(char[], java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.optimizers.impl.asm.ASMAccessorOptimizer._initJIT()</name>
                <outbound type="feature" confirmed="no">java.lang.Math.random()</outbound>
                <outbound type="feature" confirmed="no">java.lang.Object.hashCode()</outbound>
                <outbound type="class" confirmed="no">java.lang.Runtime</outbound>
                <outbound type="feature" confirmed="no">java.lang.Runtime.getRuntime()</outbound>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="feature" confirmed="no">java.lang.String.replaceAll(java.lang.String, java.lang.String)</outbound>
                <outbound type="feature" confirmed="no">java.lang.String.valueOf(int)</outbound>
                <outbound type="class" confirmed="no">java.lang.StringBuffer</outbound>
                <outbound type="feature" confirmed="no">java.lang.StringBuffer.StringBuffer(java.lang.String)</outbound>
                <outbound type="feature" confirmed="no">java.lang.StringBuffer.append(int)</outbound>
                <outbound type="feature" confirmed="no">java.lang.StringBuffer.append(java.lang.String)</outbound>
                <outbound type="feature" confirmed="no">java.lang.StringBuffer.append(long)</outbound>
                <outbound type="feature" confirmed="no">java.lang.StringBuffer.toString()</outbound>
                <outbound type="feature" confirmed="no">java.lang.System.currentTimeMillis()</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.MVEL.isAdvancedDebugging()</outbound>
                <outbound type="class" confirmed="yes">org.mvel.asm.ClassWriter</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.asm.ClassWriter.ClassWriter(int)</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.asm.ClassWriter.visit(int, int, java.lang.String, java.lang.String, java.lang.String, java.lang.String[])</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.asm.ClassWriter.visitMethod(int, java.lang.String, java.lang.String, java.lang.String, java.lang.String[])</outbound>
                <outbound type="class" confirmed="yes">org.mvel.asm.MethodVisitor</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.asm.MethodVisitor.visitCode()</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.asm.MethodVisitor.visitEnd()</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.asm.MethodVisitor.visitInsn(int)</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.asm.MethodVisitor.visitMaxs(int, int)</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.asm.MethodVisitor.visitMethodInsn(int, java.lang.String, java.lang.String, java.lang.String)</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.asm.MethodVisitor.visitVarInsn(int, int)</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.optimizers.impl.asm.ASMAccessorOptimizer.OPCODES_VERSION</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.optimizers.impl.asm.ASMAccessorOptimizer.buildLog</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.optimizers.impl.asm.ASMAccessorOptimizer.className</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.optimizers.impl.asm.ASMAccessorOptimizer.cw</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.optimizers.impl.asm.ASMAccessorOptimizer.mv</outbound>
                <outbound type="class" confirmed="yes">org.mvel.util.StringAppender</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.util.StringAppender.StringAppender()</outbound>
                <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.asm.ASMAccessorOptimizer.optimizeAccessor(char[], java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory, boolean)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.asm.ASMAccessorOptimizer.optimizeCollection(char[], java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.asm.ASMAccessorOptimizer.optimizeObjectCreation(char[], java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.optimizers.impl.asm.ASMAccessorOptimizer._initializeAccessor()</name>
                <outbound type="class" confirmed="no">java.io.PrintStream</outbound>
                <outbound type="feature" confirmed="no">java.io.PrintStream.println(java.lang.String)</outbound>
                <outbound type="class" confirmed="no">java.lang.Class</outbound>
                <outbound type="feature" confirmed="no">java.lang.Class.forName(java.lang.String)</outbound>
                <outbound type="feature" confirmed="no">java.lang.Class.getConstructor(java.lang.Class[])</outbound>
                <outbound type="feature" confirmed="no">java.lang.Class.newInstance()</outbound>
                <outbound type="class" confirmed="no">java.lang.ClassNotFoundException</outbound>
                <outbound type="class" confirmed="no">java.lang.Exception</outbound>
                <outbound type="feature" confirmed="no">java.lang.NoClassDefFoundError.NoClassDefFoundError(java.lang.String)</outbound>
                <outbound type="class" confirmed="no">java.lang.Object</outbound>
                <outbound type="feature" confirmed="no">java.lang.RuntimeException.RuntimeException(java.lang.String)</outbound>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="feature" confirmed="no">java.lang.String.String(char[])</outbound>
                <outbound type="class" confirmed="no">java.lang.StringBuffer</outbound>
                <outbound type="feature" confirmed="no">java.lang.StringBuffer.StringBuffer(java.lang.String)</outbound>
                <outbound type="feature" confirmed="no">java.lang.StringBuffer.append(java.lang.Object)</outbound>
                <outbound type="feature" confirmed="no">java.lang.StringBuffer.append(java.lang.String)</outbound>
                <outbound type="feature" confirmed="no">java.lang.StringBuffer.append(long)</outbound>
                <outbound type="feature" confirmed="no">java.lang.StringBuffer.toString()</outbound>
                <outbound type="feature" confirmed="no">java.lang.System.currentTimeMillis()</outbound>
                <outbound type="feature" confirmed="no">java.lang.System.out</outbound>
                <outbound type="feature" confirmed="no">java.lang.Throwable.getMessage()</outbound>
                <outbound type="class" confirmed="no">java.lang.VerifyError</outbound>
                <outbound type="class" confirmed="no">java.lang.reflect.Constructor</outbound>
                <outbound type="feature" confirmed="no">java.lang.reflect.Constructor.newInstance(java.lang.Object[])</outbound>
                <outbound type="class" confirmed="no">java.util.ArrayList</outbound>
                <outbound type="feature" confirmed="no">java.util.ArrayList.size()</outbound>
                <outbound type="feature" confirmed="no">java.util.ArrayList.toArray(java.lang.Object[])</outbound>
                <outbound type="class" confirmed="yes">org.mvel.Accessor</outbound>
                <outbound type="class" confirmed="yes">org.mvel.ExecutableStatement</outbound>
                <outbound type="class" confirmed="yes">org.mvel.asm.ClassWriter</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.asm.ClassWriter.toByteArray()</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.optimizers.impl.asm.ASMAccessorOptimizer.className</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.optimizers.impl.asm.ASMAccessorOptimizer.compiledInputs</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.optimizers.impl.asm.ASMAccessorOptimizer.cw</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.optimizers.impl.asm.ASMAccessorOptimizer.debug(java.lang.String)</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.optimizers.impl.asm.ASMAccessorOptimizer.dumpAdvancedDebugging()</outbound>
                <outbound type="feature" confirmed="no">org.mvel.optimizers.impl.asm.ASMAccessorOptimizer.expr</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.optimizers.impl.asm.ASMAccessorOptimizer.loadClass(java.lang.String, byte[])</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.optimizers.impl.asm.ASMAccessorOptimizer.time</outbound>
                <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.asm.ASMAccessorOptimizer.compileAccessor()</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.asm.ASMAccessorOptimizer.optimizeCollection(char[], java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.asm.ASMAccessorOptimizer.optimizeObjectCreation(char[], java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.optimizers.impl.asm.ASMAccessorOptimizer.addPrintOut(java.lang.String)</name>
                <outbound type="class" confirmed="no">java.lang.Object</outbound>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="class" confirmed="yes">org.mvel.asm.MethodVisitor</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.asm.MethodVisitor.visitFieldInsn(int, java.lang.String, java.lang.String, java.lang.String)</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.asm.MethodVisitor.visitLdcInsn(java.lang.Object)</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.asm.MethodVisitor.visitMethodInsn(int, java.lang.String, java.lang.String, java.lang.String)</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.optimizers.impl.asm.ASMAccessorOptimizer.mv</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.optimizers.impl.asm.ASMAccessorOptimizer.anyArrayCheck(java.lang.Class)</name>
                <outbound type="class" confirmed="no">java.lang.Class</outbound>
                <outbound type="feature" confirmed="no">java.lang.Class.forName(java.lang.String)</outbound>
                <outbound type="class" confirmed="no">java.lang.ClassNotFoundException</outbound>
                <outbound type="feature" confirmed="no">java.lang.NoClassDefFoundError.NoClassDefFoundError(java.lang.String)</outbound>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="feature" confirmed="no">java.lang.Throwable.getMessage()</outbound>
                <outbound type="class" confirmed="yes">org.mvel.asm.MethodVisitor</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.asm.MethodVisitor.visitTypeInsn(int, java.lang.String)</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.optimizers.impl.asm.ASMAccessorOptimizer.debug(java.lang.String)</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.optimizers.impl.asm.ASMAccessorOptimizer.mv</outbound>
                <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.asm.ASMAccessorOptimizer.getBeanProperty(java.lang.Object, java.lang.String)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.asm.ASMAccessorOptimizer.getMethod(java.lang.Object, java.lang.String)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.optimizers.impl.asm.ASMAccessorOptimizer.buildInputs()</name>
                <outbound type="class" confirmed="no">java.lang.Object</outbound>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="class" confirmed="no">java.lang.StringBuffer</outbound>
                <outbound type="feature" confirmed="no">java.lang.StringBuffer.StringBuffer(java.lang.String)</outbound>
                <outbound type="feature" confirmed="no">java.lang.StringBuffer.append(int)</outbound>
                <outbound type="feature" confirmed="no">java.lang.StringBuffer.toString()</outbound>
                <outbound type="class" confirmed="no">java.util.ArrayList</outbound>
                <outbound type="feature" confirmed="no">java.util.ArrayList.size()</outbound>
                <outbound type="class" confirmed="yes">org.mvel.asm.ClassWriter</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.asm.ClassWriter.visitField(int, java.lang.String, java.lang.String, java.lang.String, java.lang.Object)</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.asm.ClassWriter.visitMethod(int, java.lang.String, java.lang.String, java.lang.String, java.lang.String[])</outbound>
                <outbound type="class" confirmed="yes">org.mvel.asm.FieldVisitor</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.asm.FieldVisitor.visitEnd()</outbound>
                <outbound type="class" confirmed="yes">org.mvel.asm.MethodVisitor</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.asm.MethodVisitor.visitCode()</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.asm.MethodVisitor.visitEnd()</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.asm.MethodVisitor.visitFieldInsn(int, java.lang.String, java.lang.String, java.lang.String)</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.asm.MethodVisitor.visitInsn(int)</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.asm.MethodVisitor.visitMaxs(int, int)</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.asm.MethodVisitor.visitMethodInsn(int, java.lang.String, java.lang.String, java.lang.String)</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.asm.MethodVisitor.visitVarInsn(int, int)</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.optimizers.impl.asm.ASMAccessorOptimizer.className</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.optimizers.impl.asm.ASMAccessorOptimizer.compiledInputs</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.optimizers.impl.asm.ASMAccessorOptimizer.cw</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.optimizers.impl.asm.ASMAccessorOptimizer.debug(java.lang.String)</outbound>
                <outbound type="class" confirmed="yes">org.mvel.util.StringAppender</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.util.StringAppender.StringAppender(java.lang.String)</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.util.StringAppender.append(java.lang.String)</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.util.StringAppender.toString()</outbound>
                <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.asm.ASMAccessorOptimizer._finishJIT()</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.optimizers.impl.asm.ASMAccessorOptimizer.buildLog</name>
                <outbound type="class" confirmed="yes">org.mvel.util.StringAppender</outbound>
                <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.asm.ASMAccessorOptimizer._initJIT()</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.asm.ASMAccessorOptimizer.debug(java.lang.String)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.asm.ASMAccessorOptimizer.dumpAdvancedDebugging()</inbound>
            </feature>
            <feature confirmed="no">
                <name>org.mvel.optimizers.impl.asm.ASMAccessorOptimizer.capture()</name>
                <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.asm.ASMAccessorOptimizer.compileAccessor()</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.optimizers.impl.asm.ASMAccessorOptimizer.checkcast(java.lang.Class)</name>
                <outbound type="class" confirmed="no">java.lang.Class</outbound>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="class" confirmed="yes">org.mvel.asm.MethodVisitor</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.asm.MethodVisitor.visitTypeInsn(int, java.lang.String)</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.asm.Type.getInternalName(java.lang.Class)</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.optimizers.impl.asm.ASMAccessorOptimizer.mv</outbound>
                <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.asm.ASMAccessorOptimizer.getMethod(java.lang.Object, java.lang.String)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.optimizers.impl.asm.ASMAccessorOptimizer.classLoader</name>
                <outbound type="class" confirmed="no">java.lang.ClassLoader</outbound>
                <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.asm.ASMAccessorOptimizer.loadClass(java.lang.String, byte[])</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.asm.ASMAccessorOptimizer.static {}</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.optimizers.impl.asm.ASMAccessorOptimizer.className</name>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.asm.ASMAccessorOptimizer._initJIT()</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.asm.ASMAccessorOptimizer._initializeAccessor()</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.asm.ASMAccessorOptimizer.buildInputs()</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.asm.ASMAccessorOptimizer.getMethod(java.lang.Object, java.lang.String)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.asm.ASMAccessorOptimizer.optimizeObjectCreation(char[], java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.asm.ASMAccessorOptimizer.writeLiteralOrSubexpression(java.lang.Object, java.lang.Class)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.optimizers.impl.asm.ASMAccessorOptimizer.compileAccessor()</name>
                <outbound type="class" confirmed="no">java.lang.Exception</outbound>
                <outbound type="feature" confirmed="no">java.lang.Exception.getMessage()</outbound>
                <outbound type="class" confirmed="no">java.lang.IllegalAccessException</outbound>
                <outbound type="class" confirmed="no">java.lang.IndexOutOfBoundsException</outbound>
                <outbound type="class" confirmed="no">java.lang.NullPointerException</outbound>
                <outbound type="class" confirmed="no">java.lang.Object</outbound>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="feature" confirmed="no">java.lang.String.String(char[])</outbound>
                <outbound type="class" confirmed="no">java.lang.Throwable</outbound>
                <outbound type="class" confirmed="no">java.lang.reflect.InvocationTargetException</outbound>
                <outbound type="class" confirmed="yes">org.mvel.Accessor</outbound>
                <outbound type="class" confirmed="yes">org.mvel.CompileException</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.CompileException.CompileException(java.lang.String, java.lang.Throwable)</outbound>
                <outbound type="class" confirmed="yes">org.mvel.PropertyAccessException</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.PropertyAccessException.PropertyAccessException(java.lang.String, java.lang.Throwable)</outbound>
                <outbound type="feature" confirmed="no">org.mvel.PropertyAccessException.getMessage()</outbound>
                <outbound type="class" confirmed="yes">org.mvel.optimizers.OptimizationNotSupported</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.optimizers.impl.asm.ASMAccessorOptimizer._finishJIT()</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.optimizers.impl.asm.ASMAccessorOptimizer._initializeAccessor()</outbound>
                <outbound type="feature" confirmed="no">org.mvel.optimizers.impl.asm.ASMAccessorOptimizer.capture()</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.optimizers.impl.asm.ASMAccessorOptimizer.ctx</outbound>
                <outbound type="feature" confirmed="no">org.mvel.optimizers.impl.asm.ASMAccessorOptimizer.cursor</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.optimizers.impl.asm.ASMAccessorOptimizer.debug(java.lang.String)</outbound>
                <outbound type="feature" confirmed="no">org.mvel.optimizers.impl.asm.ASMAccessorOptimizer.expr</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.optimizers.impl.asm.ASMAccessorOptimizer.first</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.optimizers.impl.asm.ASMAccessorOptimizer.getBeanProperty(java.lang.Object, java.lang.String)</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.optimizers.impl.asm.ASMAccessorOptimizer.getCollectionProperty(java.lang.Object, java.lang.String)</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.optimizers.impl.asm.ASMAccessorOptimizer.getMethod(java.lang.Object, java.lang.String)</outbound>
                <outbound type="feature" confirmed="no">org.mvel.optimizers.impl.asm.ASMAccessorOptimizer.length</outbound>
                <outbound type="feature" confirmed="no">org.mvel.optimizers.impl.asm.ASMAccessorOptimizer.nextSubToken()</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.optimizers.impl.asm.ASMAccessorOptimizer.val</outbound>
                <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.asm.ASMAccessorOptimizer.optimizeAccessor(char[], java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory, boolean)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.optimizers.impl.asm.ASMAccessorOptimizer.compiledInputs</name>
                <outbound type="class" confirmed="no">java.util.ArrayList</outbound>
                <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.asm.ASMAccessorOptimizer._initializeAccessor()</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.asm.ASMAccessorOptimizer.buildInputs()</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.asm.ASMAccessorOptimizer.getMethod(java.lang.Object, java.lang.String)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.asm.ASMAccessorOptimizer.optimizeAccessor(char[], java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory, boolean)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.asm.ASMAccessorOptimizer.optimizeCollection(char[], java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.asm.ASMAccessorOptimizer.optimizeObjectCreation(char[], java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.asm.ASMAccessorOptimizer.writeLiteralOrSubexpression(java.lang.Object, java.lang.Class)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.optimizers.impl.asm.ASMAccessorOptimizer.ctx</name>
                <outbound type="class" confirmed="no">java.lang.Object</outbound>
                <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.asm.ASMAccessorOptimizer.compileAccessor()</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.asm.ASMAccessorOptimizer.getMethod(java.lang.Object, java.lang.String)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.asm.ASMAccessorOptimizer.optimizeAccessor(char[], java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory, boolean)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.asm.ASMAccessorOptimizer.optimizeCollection(char[], java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.asm.ASMAccessorOptimizer.optimizeObjectCreation(char[], java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory)</inbound>
            </feature>
            <feature confirmed="no">
                <name>org.mvel.optimizers.impl.asm.ASMAccessorOptimizer.cursor</name>
                <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.asm.ASMAccessorOptimizer.compileAccessor()</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.asm.ASMAccessorOptimizer.getCollectionProperty(java.lang.Object, java.lang.String)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.asm.ASMAccessorOptimizer.getMethod(java.lang.Object, java.lang.String)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.asm.ASMAccessorOptimizer.optimizeAccessor(char[], java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory, boolean)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.asm.ASMAccessorOptimizer.optimizeCollection(char[], java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.optimizers.impl.asm.ASMAccessorOptimizer.cw</name>
                <outbound type="class" confirmed="yes">org.mvel.asm.ClassWriter</outbound>
                <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.asm.ASMAccessorOptimizer._finishJIT()</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.asm.ASMAccessorOptimizer._initJIT()</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.asm.ASMAccessorOptimizer._initializeAccessor()</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.asm.ASMAccessorOptimizer.buildInputs()</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.optimizers.impl.asm.ASMAccessorOptimizer.dataConversion(java.lang.Class)</name>
                <outbound type="class" confirmed="no">java.lang.Class</outbound>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="class" confirmed="yes">org.mvel.asm.MethodVisitor</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.asm.MethodVisitor.visitMethodInsn(int, java.lang.String, java.lang.String, java.lang.String)</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.optimizers.impl.asm.ASMAccessorOptimizer.debug(java.lang.String)</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.optimizers.impl.asm.ASMAccessorOptimizer.ldcClassConstant(java.lang.Class)</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.optimizers.impl.asm.ASMAccessorOptimizer.mv</outbound>
                <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.asm.ASMAccessorOptimizer.getCollectionProperty(java.lang.Object, java.lang.String)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.asm.ASMAccessorOptimizer.writeLiteralOrSubexpression(java.lang.Object, java.lang.Class)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.optimizers.impl.asm.ASMAccessorOptimizer.debug(java.lang.String)</name>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.optimizers.impl.asm.ASMAccessorOptimizer.buildLog</outbound>
                <outbound type="class" confirmed="yes">org.mvel.util.StringAppender</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.util.StringAppender.append(java.lang.String)</outbound>
                <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.asm.ASMAccessorOptimizer._finishJIT()</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.asm.ASMAccessorOptimizer._getAccessor(java.lang.Object)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.asm.ASMAccessorOptimizer._initializeAccessor()</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.asm.ASMAccessorOptimizer.anyArrayCheck(java.lang.Class)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.asm.ASMAccessorOptimizer.buildInputs()</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.asm.ASMAccessorOptimizer.compileAccessor()</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.asm.ASMAccessorOptimizer.dataConversion(java.lang.Class)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.asm.ASMAccessorOptimizer.getBeanProperty(java.lang.Object, java.lang.String)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.asm.ASMAccessorOptimizer.getCollectionProperty(java.lang.Object, java.lang.String)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.asm.ASMAccessorOptimizer.getMethod(java.lang.Object, java.lang.String)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.asm.ASMAccessorOptimizer.intPush(int)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.asm.ASMAccessorOptimizer.ldcClassConstant(java.lang.Class)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.asm.ASMAccessorOptimizer.optimizeObjectCreation(char[], java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.asm.ASMAccessorOptimizer.unwrapPrimitive(java.lang.Class)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.asm.ASMAccessorOptimizer.wrapPrimitive(java.lang.Class)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.asm.ASMAccessorOptimizer.writeLiteralOrSubexpression(java.lang.Object, java.lang.Class)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.asm.ASMAccessorOptimizer.writeOutLiteralWrapped(java.lang.Object)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.optimizers.impl.asm.ASMAccessorOptimizer.deferFinish</name>
                <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.asm.ASMAccessorOptimizer.ASMAccessorOptimizer()</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.asm.ASMAccessorOptimizer._finishJIT()</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.asm.ASMAccessorOptimizer.getBeanProperty(java.lang.Object, java.lang.String)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.optimizers.impl.asm.ASMAccessorOptimizer.defineClass</name>
                <outbound type="class" confirmed="no">java.lang.reflect.Method</outbound>
                <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.asm.ASMAccessorOptimizer.loadClass(java.lang.String, byte[])</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.asm.ASMAccessorOptimizer.static {}</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.optimizers.impl.asm.ASMAccessorOptimizer.dumpAdvancedDebugging()</name>
                <outbound type="class" confirmed="no">java.io.FileWriter</outbound>
                <outbound type="feature" confirmed="no">java.io.FileWriter.close()</outbound>
                <outbound type="feature" confirmed="no">java.io.FileWriter.flush()</outbound>
                <outbound type="feature" confirmed="no">java.io.FileWriter.write(java.lang.String)</outbound>
                <outbound type="class" confirmed="no">java.io.IOException</outbound>
                <outbound type="class" confirmed="no">java.io.PrintStream</outbound>
                <outbound type="feature" confirmed="no">java.io.PrintStream.println(java.lang.String)</outbound>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="feature" confirmed="no">java.lang.String.String(char[])</outbound>
                <outbound type="class" confirmed="no">java.lang.StringBuffer</outbound>
                <outbound type="feature" confirmed="no">java.lang.StringBuffer.StringBuffer(java.lang.String)</outbound>
                <outbound type="feature" confirmed="no">java.lang.StringBuffer.append(java.lang.String)</outbound>
                <outbound type="feature" confirmed="no">java.lang.StringBuffer.toString()</outbound>
                <outbound type="feature" confirmed="no">java.lang.System.out</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.MVEL.isFileDebugging()</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.optimizers.impl.asm.ASMAccessorOptimizer.buildLog</outbound>
                <outbound type="feature" confirmed="no">org.mvel.optimizers.impl.asm.ASMAccessorOptimizer.expr</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.util.ParseTools.getDebugFileWriter()</outbound>
                <outbound type="class" confirmed="yes">org.mvel.util.StringAppender</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.util.StringAppender.toString()</outbound>
                <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.asm.ASMAccessorOptimizer._finishJIT()</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.asm.ASMAccessorOptimizer._initializeAccessor()</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.asm.ASMAccessorOptimizer.loadClass(java.lang.String, byte[])</inbound>
            </feature>
            <feature confirmed="no">
                <name>org.mvel.optimizers.impl.asm.ASMAccessorOptimizer.expr</name>
                <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.asm.ASMAccessorOptimizer._initializeAccessor()</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.asm.ASMAccessorOptimizer.compileAccessor()</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.asm.ASMAccessorOptimizer.dumpAdvancedDebugging()</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.asm.ASMAccessorOptimizer.getCollectionProperty(java.lang.Object, java.lang.String)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.asm.ASMAccessorOptimizer.getMethod(java.lang.Object, java.lang.String)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.asm.ASMAccessorOptimizer.optimizeAccessor(char[], java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory, boolean)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.asm.ASMAccessorOptimizer.optimizeCollection(char[], java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.asm.ASMAccessorOptimizer.optimizeObjectCreation(char[], java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.optimizers.impl.asm.ASMAccessorOptimizer.first</name>
                <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.asm.ASMAccessorOptimizer.ASMAccessorOptimizer()</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.asm.ASMAccessorOptimizer.compileAccessor()</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.asm.ASMAccessorOptimizer.getBeanProperty(java.lang.Object, java.lang.String)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.asm.ASMAccessorOptimizer.getMethod(java.lang.Object, java.lang.String)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.asm.ASMAccessorOptimizer.optimizeAccessor(char[], java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory, boolean)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.optimizers.impl.asm.ASMAccessorOptimizer.getBeanProperty(java.lang.Object, java.lang.String)</name>
                <outbound type="class" confirmed="no">java.lang.Class</outbound>
                <outbound type="feature" confirmed="no">java.lang.Class.forName(java.lang.String)</outbound>
                <outbound type="feature" confirmed="no">java.lang.Class.getMethods()</outbound>
                <outbound type="feature" confirmed="no">java.lang.Class.isArray()</outbound>
                <outbound type="feature" confirmed="no">java.lang.Class.isPrimitive()</outbound>
                <outbound type="class" confirmed="no">java.lang.ClassNotFoundException</outbound>
                <outbound type="class" confirmed="no">java.lang.Exception</outbound>
                <outbound type="class" confirmed="no">java.lang.IllegalAccessException</outbound>
                <outbound type="feature" confirmed="no">java.lang.Integer.Integer(int)</outbound>
                <outbound type="feature" confirmed="no">java.lang.Integer.TYPE</outbound>
                <outbound type="feature" confirmed="no">java.lang.NoClassDefFoundError.NoClassDefFoundError(java.lang.String)</outbound>
                <outbound type="class" confirmed="no">java.lang.Object</outbound>
                <outbound type="feature" confirmed="no">java.lang.Object.getClass()</outbound>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="feature" confirmed="no">java.lang.String.equals(java.lang.Object)</outbound>
                <outbound type="class" confirmed="no">java.lang.StringBuffer</outbound>
                <outbound type="feature" confirmed="no">java.lang.StringBuffer.StringBuffer(java.lang.String)</outbound>
                <outbound type="feature" confirmed="no">java.lang.StringBuffer.append(java.lang.Object)</outbound>
                <outbound type="feature" confirmed="no">java.lang.StringBuffer.append(java.lang.String)</outbound>
                <outbound type="feature" confirmed="no">java.lang.StringBuffer.toString()</outbound>
                <outbound type="class" confirmed="no">java.lang.Throwable</outbound>
                <outbound type="feature" confirmed="no">java.lang.Throwable.getMessage()</outbound>
                <outbound type="feature" confirmed="no">java.lang.reflect.Array.getLength(java.lang.Object)</outbound>
                <outbound type="class" confirmed="no">java.lang.reflect.Field</outbound>
                <outbound type="feature" confirmed="no">java.lang.reflect.Field.get(java.lang.Object)</outbound>
                <outbound type="feature" confirmed="no">java.lang.reflect.Field.getDeclaringClass()</outbound>
                <outbound type="feature" confirmed="no">java.lang.reflect.Field.getName()</outbound>
                <outbound type="feature" confirmed="no">java.lang.reflect.Field.getType()</outbound>
                <outbound type="class" confirmed="no">java.lang.reflect.InvocationTargetException</outbound>
                <outbound type="class" confirmed="no">java.lang.reflect.Member</outbound>
                <outbound type="feature" confirmed="no">java.lang.reflect.Member.getDeclaringClass()</outbound>
                <outbound type="feature" confirmed="no">java.lang.reflect.Member.getModifiers()</outbound>
                <outbound type="feature" confirmed="no">java.lang.reflect.Member.getName()</outbound>
                <outbound type="class" confirmed="no">java.lang.reflect.Method</outbound>
                <outbound type="feature" confirmed="no">java.lang.reflect.Method.getDeclaringClass()</outbound>
                <outbound type="feature" confirmed="no">java.lang.reflect.Method.getName()</outbound>
                <outbound type="feature" confirmed="no">java.lang.reflect.Method.getReturnType()</outbound>
                <outbound type="feature" confirmed="no">java.lang.reflect.Method.invoke(java.lang.Object, java.lang.Object[])</outbound>
                <outbound type="class" confirmed="no">java.util.Map</outbound>
                <outbound type="feature" confirmed="no">java.util.Map.containsKey(java.lang.Object)</outbound>
                <outbound type="feature" confirmed="no">java.util.Map.get(java.lang.Object)</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.OptimizationFailure.OptimizationFailure(java.lang.String, java.lang.Throwable)</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.PropertyAccessException.PropertyAccessException(java.lang.String)</outbound>
                <outbound type="class" confirmed="yes">org.mvel.asm.Label</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.asm.Label.Label()</outbound>
                <outbound type="class" confirmed="yes">org.mvel.asm.MethodVisitor</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.asm.MethodVisitor.visitFieldInsn(int, java.lang.String, java.lang.String, java.lang.String)</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.asm.MethodVisitor.visitIincInsn(int, int)</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.asm.MethodVisitor.visitInsn(int)</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.asm.MethodVisitor.visitJumpInsn(int, org.mvel.asm.Label)</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.asm.MethodVisitor.visitLabel(org.mvel.asm.Label)</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.asm.MethodVisitor.visitLdcInsn(java.lang.Object)</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.asm.MethodVisitor.visitMethodInsn(int, java.lang.String, java.lang.String, java.lang.String)</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.asm.MethodVisitor.visitTypeInsn(int, java.lang.String)</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.asm.MethodVisitor.visitVarInsn(int, int)</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.asm.Type.getDescriptor(java.lang.Class)</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.asm.Type.getInternalName(java.lang.Class)</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.asm.Type.getMethodDescriptor(java.lang.reflect.Method)</outbound>
                <outbound type="class" confirmed="yes">org.mvel.integration.VariableResolver</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.integration.VariableResolver.getValue()</outbound>
                <outbound type="class" confirmed="yes">org.mvel.integration.VariableResolverFactory</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.integration.VariableResolverFactory.getVariableResolver(java.lang.String)</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.integration.VariableResolverFactory.isResolveable(java.lang.String)</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.optimizers.impl.asm.ASMAccessorOptimizer.EMPTYARG</outbound>
                <outbound type="feature" confirmed="no">org.mvel.optimizers.impl.asm.ASMAccessorOptimizer.LITERALS</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.optimizers.impl.asm.ASMAccessorOptimizer.anyArrayCheck(java.lang.Class)</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.optimizers.impl.asm.ASMAccessorOptimizer.debug(java.lang.String)</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.optimizers.impl.asm.ASMAccessorOptimizer.deferFinish</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.optimizers.impl.asm.ASMAccessorOptimizer.first</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.optimizers.impl.asm.ASMAccessorOptimizer.ldcClassConstant(java.lang.Class)</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.optimizers.impl.asm.ASMAccessorOptimizer.mv</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.optimizers.impl.asm.ASMAccessorOptimizer.returnType</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.optimizers.impl.asm.ASMAccessorOptimizer.thisRef</outbound>
                <outbound type="feature" confirmed="no">org.mvel.optimizers.impl.asm.ASMAccessorOptimizer.tryStaticAccess()</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.optimizers.impl.asm.ASMAccessorOptimizer.variableFactory</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.optimizers.impl.asm.ASMAccessorOptimizer.wrapPrimitive(java.lang.Class)</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.util.ParseTools.determineActualTargetMethod(java.lang.reflect.Method)</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.util.PropertyTools.getFieldOrAccessor(java.lang.Class, java.lang.String)</outbound>
                <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.asm.ASMAccessorOptimizer.compileAccessor()</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.asm.ASMAccessorOptimizer.getCollectionProperty(java.lang.Object, java.lang.String)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.optimizers.impl.asm.ASMAccessorOptimizer.getCollectionProperty(java.lang.Object, java.lang.String)</name>
                <outbound type="class" confirmed="no">java.io.Serializable</outbound>
                <outbound type="class" confirmed="no">java.lang.CharSequence</outbound>
                <outbound type="feature" confirmed="no">java.lang.CharSequence.charAt(int)</outbound>
                <outbound type="feature" confirmed="no">java.lang.Character.Character(char)</outbound>
                <outbound type="feature" confirmed="no">java.lang.Character.TYPE</outbound>
                <outbound type="class" confirmed="no">java.lang.Class</outbound>
                <outbound type="feature" confirmed="no">java.lang.Class.forName(java.lang.String)</outbound>
                <outbound type="feature" confirmed="no">java.lang.Class.getName()</outbound>
                <outbound type="class" confirmed="no">java.lang.ClassNotFoundException</outbound>
                <outbound type="class" confirmed="no">java.lang.IllegalAccessException</outbound>
                <outbound type="class" confirmed="no">java.lang.Integer</outbound>
                <outbound type="feature" confirmed="no">java.lang.Integer.TYPE</outbound>
                <outbound type="feature" confirmed="no">java.lang.Integer.intValue()</outbound>
                <outbound type="feature" confirmed="no">java.lang.NoClassDefFoundError.NoClassDefFoundError(java.lang.String)</outbound>
                <outbound type="class" confirmed="no">java.lang.Object</outbound>
                <outbound type="feature" confirmed="no">java.lang.Object.getClass()</outbound>
                <outbound type="class" confirmed="no">java.lang.Object[]</outbound>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="feature" confirmed="no">java.lang.String.String(char[], int, int)</outbound>
                <outbound type="feature" confirmed="no">java.lang.String.length()</outbound>
                <outbound type="class" confirmed="no">java.lang.StringBuffer</outbound>
                <outbound type="feature" confirmed="no">java.lang.StringBuffer.StringBuffer(java.lang.String)</outbound>
                <outbound type="feature" confirmed="no">java.lang.StringBuffer.append(java.lang.Object)</outbound>
                <outbound type="feature" confirmed="no">java.lang.StringBuffer.append(java.lang.String)</outbound>
                <outbound type="feature" confirmed="no">java.lang.StringBuffer.toString()</outbound>
                <outbound type="feature" confirmed="no">java.lang.Throwable.getMessage()</outbound>
                <outbound type="class" confirmed="no">java.lang.reflect.InvocationTargetException</outbound>
                <outbound type="class" confirmed="no">java.util.List</outbound>
                <outbound type="feature" confirmed="no">java.util.List.get(int)</outbound>
                <outbound type="class" confirmed="no">java.util.Map</outbound>
                <outbound type="feature" confirmed="no">java.util.Map.get(java.lang.Object)</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.CompileException.CompileException(java.lang.String)</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.DataConversion.convert(java.lang.Object, java.lang.Class)</outbound>
                <outbound type="class" confirmed="yes">org.mvel.ExecutableStatement</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.ExecutableStatement.getValue(java.lang.Object, org.mvel.integration.VariableResolverFactory)</outbound>
                <outbound type="class" confirmed="yes">org.mvel.asm.MethodVisitor</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.asm.MethodVisitor.visitInsn(int)</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.asm.MethodVisitor.visitMethodInsn(int, java.lang.String, java.lang.String, java.lang.String)</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.asm.MethodVisitor.visitTypeInsn(int, java.lang.String)</outbound>
                <outbound type="class" confirmed="yes">org.mvel.integration.VariableResolverFactory</outbound>
                <outbound type="feature" confirmed="no">org.mvel.optimizers.impl.asm.ASMAccessorOptimizer.cursor</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.optimizers.impl.asm.ASMAccessorOptimizer.dataConversion(java.lang.Class)</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.optimizers.impl.asm.ASMAccessorOptimizer.debug(java.lang.String)</outbound>
                <outbound type="feature" confirmed="no">org.mvel.optimizers.impl.asm.ASMAccessorOptimizer.expr</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.optimizers.impl.asm.ASMAccessorOptimizer.getBeanProperty(java.lang.Object, java.lang.String)</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.optimizers.impl.asm.ASMAccessorOptimizer.intPush(int)</outbound>
                <outbound type="feature" confirmed="no">org.mvel.optimizers.impl.asm.ASMAccessorOptimizer.length</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.optimizers.impl.asm.ASMAccessorOptimizer.mv</outbound>
                <outbound type="feature" confirmed="no">org.mvel.optimizers.impl.asm.ASMAccessorOptimizer.scanTo(char)</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.optimizers.impl.asm.ASMAccessorOptimizer.unwrapPrimitive(java.lang.Class)</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.optimizers.impl.asm.ASMAccessorOptimizer.variableFactory</outbound>
                <outbound type="feature" confirmed="no">org.mvel.optimizers.impl.asm.ASMAccessorOptimizer.whiteSpaceSkip()</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.optimizers.impl.asm.ASMAccessorOptimizer.wrapPrimitive(java.lang.Class)</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.optimizers.impl.asm.ASMAccessorOptimizer.writeLiteralOrSubexpression(java.lang.Object)</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.optimizers.impl.asm.ASMAccessorOptimizer.writeLiteralOrSubexpression(java.lang.Object, java.lang.Class)</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.util.ParseTools.subCompileExpression(java.lang.String)</outbound>
                <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.asm.ASMAccessorOptimizer.compileAccessor()</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.optimizers.impl.asm.ASMAccessorOptimizer.getEgressType()</name>
                <outbound type="class" confirmed="no">java.lang.Class</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.optimizers.impl.asm.ASMAccessorOptimizer.returnType</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.optimizers.impl.asm.ASMAccessorOptimizer.getMethod(java.lang.Object, java.lang.String)</name>
                <outbound type="class" confirmed="no">java.io.Serializable</outbound>
                <outbound type="class" confirmed="no">java.lang.Boolean</outbound>
                <outbound type="feature" confirmed="no">java.lang.Boolean.TYPE</outbound>
                <outbound type="feature" confirmed="no">java.lang.Boolean.booleanValue()</outbound>
                <outbound type="class" confirmed="no">java.lang.Class</outbound>
                <outbound type="feature" confirmed="no">java.lang.Class.forName(java.lang.String)</outbound>
                <outbound type="feature" confirmed="no">java.lang.Class.getDeclaredMethods()</outbound>
                <outbound type="feature" confirmed="no">java.lang.Class.getMethods()</outbound>
                <outbound type="feature" confirmed="no">java.lang.Class.getName()</outbound>
                <outbound type="feature" confirmed="no">java.lang.Class.isArray()</outbound>
                <outbound type="feature" confirmed="no">java.lang.Class.isAssignableFrom(java.lang.Class)</outbound>
                <outbound type="feature" confirmed="no">java.lang.Class.isInterface()</outbound>
                <outbound type="feature" confirmed="no">java.lang.Class.isPrimitive()</outbound>
                <outbound type="class" confirmed="no">java.lang.ClassNotFoundException</outbound>
                <outbound type="class" confirmed="no">java.lang.Class[]</outbound>
                <outbound type="class" confirmed="no">java.lang.IllegalAccessException</outbound>
                <outbound type="class" confirmed="no">java.lang.Integer</outbound>
                <outbound type="feature" confirmed="no">java.lang.Integer.Integer(int)</outbound>
                <outbound type="feature" confirmed="no">java.lang.Integer.TYPE</outbound>
                <outbound type="feature" confirmed="no">java.lang.Integer.intValue()</outbound>
                <outbound type="feature" confirmed="no">java.lang.NoClassDefFoundError.NoClassDefFoundError(java.lang.String)</outbound>
                <outbound type="class" confirmed="no">java.lang.Object</outbound>
                <outbound type="feature" confirmed="no">java.lang.Object.getClass()</outbound>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="feature" confirmed="no">java.lang.String.String(char[], int, int)</outbound>
                <outbound type="feature" confirmed="no">java.lang.String.equals(java.lang.Object)</outbound>
                <outbound type="feature" confirmed="no">java.lang.String.length()</outbound>
                <outbound type="feature" confirmed="no">java.lang.String.toCharArray()</outbound>
                <outbound type="class" confirmed="no">java.lang.StringBuffer</outbound>
                <outbound type="feature" confirmed="no">java.lang.StringBuffer.StringBuffer(java.lang.String)</outbound>
                <outbound type="feature" confirmed="no">java.lang.StringBuffer.append(int)</outbound>
                <outbound type="feature" confirmed="no">java.lang.StringBuffer.append(java.lang.Object)</outbound>
                <outbound type="feature" confirmed="no">java.lang.StringBuffer.append(java.lang.String)</outbound>
                <outbound type="feature" confirmed="no">java.lang.StringBuffer.toString()</outbound>
                <outbound type="feature" confirmed="no">java.lang.Throwable.getMessage()</outbound>
                <outbound type="feature" confirmed="no">java.lang.reflect.Array.getLength(java.lang.Object)</outbound>
                <outbound type="class" confirmed="no">java.lang.reflect.InvocationTargetException</outbound>
                <outbound type="class" confirmed="no">java.lang.reflect.Method</outbound>
                <outbound type="feature" confirmed="no">java.lang.reflect.Method.getDeclaringClass()</outbound>
                <outbound type="feature" confirmed="no">java.lang.reflect.Method.getModifiers()</outbound>
                <outbound type="feature" confirmed="no">java.lang.reflect.Method.getName()</outbound>
                <outbound type="feature" confirmed="no">java.lang.reflect.Method.getParameterTypes()</outbound>
                <outbound type="feature" confirmed="no">java.lang.reflect.Method.getReturnType()</outbound>
                <outbound type="feature" confirmed="no">java.lang.reflect.Method.invoke(java.lang.Object, java.lang.Object[])</outbound>
                <outbound type="class" confirmed="no">java.util.ArrayList</outbound>
                <outbound type="feature" confirmed="no">java.util.ArrayList.add(java.lang.Object)</outbound>
                <outbound type="feature" confirmed="no">java.util.ArrayList.size()</outbound>
                <outbound type="class" confirmed="yes">org.mvel.ASTNode</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.ASTNode.getLiteralValue()</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.Accessor.getValue(java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory)</outbound>
                <outbound type="class" confirmed="no">org.mvel.Accessor[]</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.CompileException.CompileException(java.lang.String)</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.DataConversion.canConvert(java.lang.Class, java.lang.Class)</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.DataConversion.convert(java.lang.Object, java.lang.Class)</outbound>
                <outbound type="class" confirmed="yes">org.mvel.ExecutableAccessor</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.ExecutableAccessor.getNode()</outbound>
                <outbound type="class" confirmed="yes">org.mvel.ExecutableLiteral</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.ExecutableLiteral.ExecutableLiteral(java.lang.Object)</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.ExecutableLiteral.getInteger32()</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.ExecutableLiteral.getLiteral()</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.ExecutableLiteral.intOptimized()</outbound>
                <outbound type="class" confirmed="yes">org.mvel.ExecutableStatement</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.ExecutableStatement.computeTypeConversionRule()</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.ExecutableStatement.getKnownIngressType()</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.ExecutableStatement.isConvertableIngressEgress()</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.ExecutableStatement.setKnownIngressType(java.lang.Class)</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.OptimizationFailure.OptimizationFailure(java.lang.String)</outbound>
                <outbound type="class" confirmed="yes">org.mvel.asm.MethodVisitor</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.asm.MethodVisitor.visitFieldInsn(int, java.lang.String, java.lang.String, java.lang.String)</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.asm.MethodVisitor.visitInsn(int)</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.asm.MethodVisitor.visitLdcInsn(java.lang.Object)</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.asm.MethodVisitor.visitMethodInsn(int, java.lang.String, java.lang.String, java.lang.String)</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.asm.MethodVisitor.visitTypeInsn(int, java.lang.String)</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.asm.MethodVisitor.visitVarInsn(int, int)</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.asm.Type.getInternalName(java.lang.Class)</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.asm.Type.getMethodDescriptor(java.lang.reflect.Method)</outbound>
                <outbound type="class" confirmed="yes">org.mvel.ast.LiteralNode</outbound>
                <outbound type="class" confirmed="yes">org.mvel.ast.PropertyASTNode</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.ast.PropertyASTNode.getWrappedNode()</outbound>
                <outbound type="class" confirmed="yes">org.mvel.integration.VariableResolver</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.integration.VariableResolver.getValue()</outbound>
                <outbound type="class" confirmed="yes">org.mvel.integration.VariableResolverFactory</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.integration.VariableResolverFactory.getVariableResolver(java.lang.String)</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.integration.VariableResolverFactory.isResolveable(java.lang.String)</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.optimizers.impl.asm.ASMAccessorOptimizer.anyArrayCheck(java.lang.Class)</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.optimizers.impl.asm.ASMAccessorOptimizer.checkcast(java.lang.Class)</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.optimizers.impl.asm.ASMAccessorOptimizer.className</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.optimizers.impl.asm.ASMAccessorOptimizer.compiledInputs</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.optimizers.impl.asm.ASMAccessorOptimizer.ctx</outbound>
                <outbound type="feature" confirmed="no">org.mvel.optimizers.impl.asm.ASMAccessorOptimizer.cursor</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.optimizers.impl.asm.ASMAccessorOptimizer.debug(java.lang.String)</outbound>
                <outbound type="feature" confirmed="no">org.mvel.optimizers.impl.asm.ASMAccessorOptimizer.expr</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.optimizers.impl.asm.ASMAccessorOptimizer.first</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.optimizers.impl.asm.ASMAccessorOptimizer.getWrapperClass(java.lang.Class)</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.optimizers.impl.asm.ASMAccessorOptimizer.intPush(int)</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.optimizers.impl.asm.ASMAccessorOptimizer.ldcClassConstant(java.lang.Class)</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.optimizers.impl.asm.ASMAccessorOptimizer.mv</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.optimizers.impl.asm.ASMAccessorOptimizer.returnType</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.optimizers.impl.asm.ASMAccessorOptimizer.stacksize</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.optimizers.impl.asm.ASMAccessorOptimizer.thisRef</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.optimizers.impl.asm.ASMAccessorOptimizer.unwrapPrimitive(java.lang.Class)</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.optimizers.impl.asm.ASMAccessorOptimizer.variableFactory</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.optimizers.impl.asm.ASMAccessorOptimizer.wrapPrimitive(java.lang.Class)</outbound>
                <outbound type="class" confirmed="yes">org.mvel.util.MethodStub</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.util.MethodStub.getClassReference()</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.util.MethodStub.getMethodName()</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.util.ParseTools.balancedCapture(char[], int, char)</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.util.ParseTools.getBestCandidate(java.lang.Object[], java.lang.String, java.lang.Class, java.lang.reflect.Method[])</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.util.ParseTools.getWidenedTarget(java.lang.reflect.Method)</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.util.ParseTools.isPrimitiveWrapper(java.lang.Class)</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.util.ParseTools.parseParameterList(char[], int, int)</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.util.ParseTools.subCompileExpression(java.lang.String)</outbound>
                <outbound type="class" confirmed="yes">org.mvel.util.StringAppender</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.util.StringAppender.StringAppender()</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.util.StringAppender.append(java.lang.String)</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.util.StringAppender.toString()</outbound>
                <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.asm.ASMAccessorOptimizer.compileAccessor()</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.optimizers.impl.asm.ASMAccessorOptimizer.getName()</name>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.optimizers.impl.asm.ASMAccessorOptimizer.getResultOptPass()</name>
                <outbound type="class" confirmed="no">java.lang.Object</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.optimizers.impl.asm.ASMAccessorOptimizer.val</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.optimizers.impl.asm.ASMAccessorOptimizer.getWrapperClass(java.lang.Class)</name>
                <outbound type="feature" confirmed="no">java.lang.Boolean.TYPE</outbound>
                <outbound type="feature" confirmed="no">java.lang.Byte.TYPE</outbound>
                <outbound type="feature" confirmed="no">java.lang.Character.TYPE</outbound>
                <outbound type="class" confirmed="no">java.lang.Class</outbound>
                <outbound type="feature" confirmed="no">java.lang.Class.forName(java.lang.String)</outbound>
                <outbound type="class" confirmed="no">java.lang.ClassNotFoundException</outbound>
                <outbound type="feature" confirmed="no">java.lang.Double.TYPE</outbound>
                <outbound type="feature" confirmed="no">java.lang.Float.TYPE</outbound>
                <outbound type="feature" confirmed="no">java.lang.Integer.TYPE</outbound>
                <outbound type="feature" confirmed="no">java.lang.Long.TYPE</outbound>
                <outbound type="feature" confirmed="no">java.lang.NoClassDefFoundError.NoClassDefFoundError(java.lang.String)</outbound>
                <outbound type="feature" confirmed="no">java.lang.Short.TYPE</outbound>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="feature" confirmed="no">java.lang.Throwable.getMessage()</outbound>
                <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.asm.ASMAccessorOptimizer.getMethod(java.lang.Object, java.lang.String)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.asm.ASMAccessorOptimizer.optimizeObjectCreation(char[], java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.optimizers.impl.asm.ASMAccessorOptimizer.intPush(int)</name>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="class" confirmed="no">java.lang.StringBuffer</outbound>
                <outbound type="feature" confirmed="no">java.lang.StringBuffer.StringBuffer(java.lang.String)</outbound>
                <outbound type="feature" confirmed="no">java.lang.StringBuffer.append(int)</outbound>
                <outbound type="feature" confirmed="no">java.lang.StringBuffer.toString()</outbound>
                <outbound type="class" confirmed="yes">org.mvel.asm.MethodVisitor</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.asm.MethodVisitor.visitInsn(int)</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.asm.MethodVisitor.visitIntInsn(int, int)</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.optimizers.impl.asm.ASMAccessorOptimizer.debug(java.lang.String)</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.optimizers.impl.asm.ASMAccessorOptimizer.mv</outbound>
                <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.asm.ASMAccessorOptimizer._getAccessor(java.lang.Object)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.asm.ASMAccessorOptimizer.getCollectionProperty(java.lang.Object, java.lang.String)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.asm.ASMAccessorOptimizer.getMethod(java.lang.Object, java.lang.String)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.asm.ASMAccessorOptimizer.writeOutLiteralWrapped(java.lang.Object)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.optimizers.impl.asm.ASMAccessorOptimizer.isLiteralOnly()</name>
                <outbound type="feature" confirmed="yes">org.mvel.optimizers.impl.asm.ASMAccessorOptimizer.literal</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.optimizers.impl.asm.ASMAccessorOptimizer.ldcClassConstant(java.lang.Class)</name>
                <outbound type="class" confirmed="no">java.lang.Class</outbound>
                <outbound type="feature" confirmed="no">java.lang.Class.getName()</outbound>
                <outbound type="class" confirmed="no">java.lang.Object</outbound>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="class" confirmed="no">java.lang.StringBuffer</outbound>
                <outbound type="feature" confirmed="no">java.lang.StringBuffer.StringBuffer(java.lang.String)</outbound>
                <outbound type="feature" confirmed="no">java.lang.StringBuffer.append(java.lang.Object)</outbound>
                <outbound type="feature" confirmed="no">java.lang.StringBuffer.append(java.lang.String)</outbound>
                <outbound type="feature" confirmed="no">java.lang.StringBuffer.toString()</outbound>
                <outbound type="class" confirmed="yes">org.mvel.asm.Label</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.asm.Label.Label()</outbound>
                <outbound type="class" confirmed="yes">org.mvel.asm.MethodVisitor</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.asm.MethodVisitor.visitInsn(int)</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.asm.MethodVisitor.visitJumpInsn(int, org.mvel.asm.Label)</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.asm.MethodVisitor.visitLabel(org.mvel.asm.Label)</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.asm.MethodVisitor.visitLdcInsn(java.lang.Object)</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.asm.MethodVisitor.visitMethodInsn(int, java.lang.String, java.lang.String, java.lang.String)</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.asm.MethodVisitor.visitTypeInsn(int, java.lang.String)</outbound>
                <outbound type="class" confirmed="yes">org.mvel.asm.Type</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.asm.Type.getType(java.lang.Class)</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.optimizers.impl.asm.ASMAccessorOptimizer.OPCODES_VERSION</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.optimizers.impl.asm.ASMAccessorOptimizer.debug(java.lang.String)</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.optimizers.impl.asm.ASMAccessorOptimizer.mv</outbound>
                <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.asm.ASMAccessorOptimizer.dataConversion(java.lang.Class)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.asm.ASMAccessorOptimizer.getBeanProperty(java.lang.Object, java.lang.String)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.asm.ASMAccessorOptimizer.getMethod(java.lang.Object, java.lang.String)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.asm.ASMAccessorOptimizer.optimizeObjectCreation(char[], java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory)</inbound>
            </feature>
            <feature confirmed="no">
                <name>org.mvel.optimizers.impl.asm.ASMAccessorOptimizer.length</name>
                <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.asm.ASMAccessorOptimizer.compileAccessor()</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.asm.ASMAccessorOptimizer.getCollectionProperty(java.lang.Object, java.lang.String)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.asm.ASMAccessorOptimizer.optimizeAccessor(char[], java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory, boolean)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.asm.ASMAccessorOptimizer.optimizeCollection(char[], java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.asm.ASMAccessorOptimizer.optimizeObjectCreation(char[], java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.optimizers.impl.asm.ASMAccessorOptimizer.literal</name>
                <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.asm.ASMAccessorOptimizer.ASMAccessorOptimizer()</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.asm.ASMAccessorOptimizer.isLiteralOnly()</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.asm.ASMAccessorOptimizer.optimizeCollection(char[], java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.asm.ASMAccessorOptimizer.writeLiteralOrSubexpression(java.lang.Object, java.lang.Class)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.optimizers.impl.asm.ASMAccessorOptimizer.loadClass(java.lang.String, byte[])</name>
                <outbound type="class" confirmed="no">java.lang.Class</outbound>
                <outbound type="class" confirmed="no">java.lang.ClassLoader</outbound>
                <outbound type="class" confirmed="no">java.lang.Exception</outbound>
                <outbound type="feature" confirmed="no">java.lang.Integer.Integer(int)</outbound>
                <outbound type="class" confirmed="no">java.lang.Object</outbound>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="class" confirmed="no">java.lang.reflect.Method</outbound>
                <outbound type="feature" confirmed="no">java.lang.reflect.Method.invoke(java.lang.Object, java.lang.Object[])</outbound>
                <outbound type="feature" confirmed="no">java.lang.reflect.Method.setAccessible(boolean)</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.optimizers.impl.asm.ASMAccessorOptimizer.classLoader</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.optimizers.impl.asm.ASMAccessorOptimizer.defineClass</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.optimizers.impl.asm.ASMAccessorOptimizer.dumpAdvancedDebugging()</outbound>
                <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.asm.ASMAccessorOptimizer._initializeAccessor()</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.optimizers.impl.asm.ASMAccessorOptimizer.maxlocals</name>
                <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.asm.ASMAccessorOptimizer.ASMAccessorOptimizer()</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.asm.ASMAccessorOptimizer._finishJIT()</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.optimizers.impl.asm.ASMAccessorOptimizer.mv</name>
                <outbound type="class" confirmed="yes">org.mvel.asm.MethodVisitor</outbound>
                <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.asm.ASMAccessorOptimizer._finishJIT()</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.asm.ASMAccessorOptimizer._getAccessor(java.lang.Object)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.asm.ASMAccessorOptimizer._initJIT()</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.asm.ASMAccessorOptimizer.addPrintOut(java.lang.String)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.asm.ASMAccessorOptimizer.anyArrayCheck(java.lang.Class)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.asm.ASMAccessorOptimizer.checkcast(java.lang.Class)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.asm.ASMAccessorOptimizer.dataConversion(java.lang.Class)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.asm.ASMAccessorOptimizer.getBeanProperty(java.lang.Object, java.lang.String)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.asm.ASMAccessorOptimizer.getCollectionProperty(java.lang.Object, java.lang.String)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.asm.ASMAccessorOptimizer.getMethod(java.lang.Object, java.lang.String)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.asm.ASMAccessorOptimizer.intPush(int)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.asm.ASMAccessorOptimizer.ldcClassConstant(java.lang.Class)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.asm.ASMAccessorOptimizer.optimizeObjectCreation(char[], java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.asm.ASMAccessorOptimizer.unwrapPrimitive(java.lang.Class)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.asm.ASMAccessorOptimizer.wrapPrimitive(java.lang.Class)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.asm.ASMAccessorOptimizer.writeLiteralOrSubexpression(java.lang.Object, java.lang.Class)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.asm.ASMAccessorOptimizer.writeOutLiteralWrapped(java.lang.Object)</inbound>
            </feature>
            <feature confirmed="no">
                <name>org.mvel.optimizers.impl.asm.ASMAccessorOptimizer.nextSubToken()</name>
                <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.asm.ASMAccessorOptimizer.compileAccessor()</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.optimizers.impl.asm.ASMAccessorOptimizer.optimizeAccessor(char[], java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory, boolean)</name>
                <outbound type="class" confirmed="no">java.lang.Object</outbound>
                <outbound type="feature" confirmed="no">java.lang.System.currentTimeMillis()</outbound>
                <outbound type="class" confirmed="no">java.util.ArrayList</outbound>
                <outbound type="feature" confirmed="no">java.util.ArrayList.ArrayList()</outbound>
                <outbound type="class" confirmed="yes">org.mvel.Accessor</outbound>
                <outbound type="class" confirmed="yes">org.mvel.integration.VariableResolverFactory</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.optimizers.impl.asm.ASMAccessorOptimizer._initJIT()</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.optimizers.impl.asm.ASMAccessorOptimizer.compileAccessor()</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.optimizers.impl.asm.ASMAccessorOptimizer.compiledInputs</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.optimizers.impl.asm.ASMAccessorOptimizer.ctx</outbound>
                <outbound type="feature" confirmed="no">org.mvel.optimizers.impl.asm.ASMAccessorOptimizer.cursor</outbound>
                <outbound type="feature" confirmed="no">org.mvel.optimizers.impl.asm.ASMAccessorOptimizer.expr</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.optimizers.impl.asm.ASMAccessorOptimizer.first</outbound>
                <outbound type="feature" confirmed="no">org.mvel.optimizers.impl.asm.ASMAccessorOptimizer.length</outbound>
                <outbound type="feature" confirmed="no">org.mvel.optimizers.impl.asm.ASMAccessorOptimizer.start</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.optimizers.impl.asm.ASMAccessorOptimizer.thisRef</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.optimizers.impl.asm.ASMAccessorOptimizer.time</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.optimizers.impl.asm.ASMAccessorOptimizer.val</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.optimizers.impl.asm.ASMAccessorOptimizer.variableFactory</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.optimizers.impl.asm.ASMAccessorOptimizer.optimizeCollection(char[], java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory)</name>
                <outbound type="class" confirmed="no">java.lang.Class</outbound>
                <outbound type="feature" confirmed="no">java.lang.Class.forName(java.lang.String)</outbound>
                <outbound type="class" confirmed="no">java.lang.ClassNotFoundException</outbound>
                <outbound type="class" confirmed="no">java.lang.Exception</outbound>
                <outbound type="feature" confirmed="no">java.lang.NoClassDefFoundError.NoClassDefFoundError(java.lang.String)</outbound>
                <outbound type="class" confirmed="no">java.lang.Object</outbound>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="class" confirmed="no">java.lang.Throwable</outbound>
                <outbound type="feature" confirmed="no">java.lang.Throwable.getMessage()</outbound>
                <outbound type="class" confirmed="no">java.util.ArrayList</outbound>
                <outbound type="feature" confirmed="no">java.util.ArrayList.ArrayList()</outbound>
                <outbound type="class" confirmed="no">java.util.List</outbound>
                <outbound type="feature" confirmed="no">java.util.List.get(int)</outbound>
                <outbound type="class" confirmed="yes">org.mvel.Accessor</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.OptimizationFailure.OptimizationFailure(java.lang.String, java.lang.Throwable)</outbound>
                <outbound type="class" confirmed="yes">org.mvel.integration.VariableResolverFactory</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.optimizers.impl.asm.ASMAccessorOptimizer._finishJIT()</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.optimizers.impl.asm.ASMAccessorOptimizer._getAccessor(java.lang.Object)</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.optimizers.impl.asm.ASMAccessorOptimizer._initJIT()</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.optimizers.impl.asm.ASMAccessorOptimizer._initializeAccessor()</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.optimizers.impl.asm.ASMAccessorOptimizer.compiledInputs</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.optimizers.impl.asm.ASMAccessorOptimizer.ctx</outbound>
                <outbound type="feature" confirmed="no">org.mvel.optimizers.impl.asm.ASMAccessorOptimizer.cursor</outbound>
                <outbound type="feature" confirmed="no">org.mvel.optimizers.impl.asm.ASMAccessorOptimizer.expr</outbound>
                <outbound type="feature" confirmed="no">org.mvel.optimizers.impl.asm.ASMAccessorOptimizer.length</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.optimizers.impl.asm.ASMAccessorOptimizer.literal</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.optimizers.impl.asm.ASMAccessorOptimizer.returnType</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.optimizers.impl.asm.ASMAccessorOptimizer.thisRef</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.optimizers.impl.asm.ASMAccessorOptimizer.variableFactory</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.optimizers.impl.refl.Union.Union(org.mvel.Accessor, char[])</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.util.CollectionParser.CollectionParser()</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.util.CollectionParser.getCursor()</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.util.CollectionParser.parseCollection(char[])</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.util.ParseTools.subset(char[], int)</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.optimizers.impl.asm.ASMAccessorOptimizer.optimizeFold(char[], java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory)</name>
                <outbound type="class" confirmed="no">java.lang.Object</outbound>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="class" confirmed="yes">org.mvel.Accessor</outbound>
                <outbound type="class" confirmed="yes">org.mvel.integration.VariableResolverFactory</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.optimizers.OptimizationNotSupported.OptimizationNotSupported(java.lang.String)</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.optimizers.impl.asm.ASMAccessorOptimizer.optimizeObjectCreation(char[], java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory)</name>
                <outbound type="class" confirmed="no">java.io.Serializable</outbound>
                <outbound type="class" confirmed="no">java.lang.Class</outbound>
                <outbound type="feature" confirmed="no">java.lang.Class.getConstructor(java.lang.Class[])</outbound>
                <outbound type="feature" confirmed="no">java.lang.Class.getName()</outbound>
                <outbound type="feature" confirmed="no">java.lang.Class.isAssignableFrom(java.lang.Class)</outbound>
                <outbound type="feature" confirmed="no">java.lang.Class.isPrimitive()</outbound>
                <outbound type="class" confirmed="no">java.lang.ClassNotFoundException</outbound>
                <outbound type="class" confirmed="no">java.lang.Exception</outbound>
                <outbound type="class" confirmed="no">java.lang.Object</outbound>
                <outbound type="feature" confirmed="no">java.lang.Object.getClass()</outbound>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="feature" confirmed="no">java.lang.String.String(char[])</outbound>
                <outbound type="feature" confirmed="no">java.lang.String.equals(java.lang.Object)</outbound>
                <outbound type="feature" confirmed="no">java.lang.String.toCharArray()</outbound>
                <outbound type="feature" confirmed="no">java.lang.String.trim()</outbound>
                <outbound type="class" confirmed="no">java.lang.StringBuffer</outbound>
                <outbound type="feature" confirmed="no">java.lang.StringBuffer.StringBuffer(java.lang.String)</outbound>
                <outbound type="feature" confirmed="no">java.lang.StringBuffer.append(int)</outbound>
                <outbound type="feature" confirmed="no">java.lang.StringBuffer.append(java.lang.String)</outbound>
                <outbound type="feature" confirmed="no">java.lang.StringBuffer.toString()</outbound>
                <outbound type="class" confirmed="no">java.lang.Throwable</outbound>
                <outbound type="class" confirmed="no">java.lang.reflect.Constructor</outbound>
                <outbound type="feature" confirmed="no">java.lang.reflect.Constructor.getParameterTypes()</outbound>
                <outbound type="class" confirmed="no">java.util.ArrayList</outbound>
                <outbound type="feature" confirmed="no">java.util.ArrayList.ArrayList()</outbound>
                <outbound type="feature" confirmed="no">java.util.ArrayList.add(java.lang.Object)</outbound>
                <outbound type="feature" confirmed="no">java.util.ArrayList.iterator()</outbound>
                <outbound type="class" confirmed="no">java.util.Iterator</outbound>
                <outbound type="feature" confirmed="no">java.util.Iterator.hasNext()</outbound>
                <outbound type="feature" confirmed="no">java.util.Iterator.next()</outbound>
                <outbound type="class" confirmed="yes">org.mvel.Accessor</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.CompileException.CompileException(java.lang.String)</outbound>
                <outbound type="class" confirmed="yes">org.mvel.ExecutableStatement</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.ExecutableStatement.getValue(java.lang.Object, org.mvel.integration.VariableResolverFactory)</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.OptimizationFailure.OptimizationFailure(java.lang.String, java.lang.Throwable)</outbound>
                <outbound type="class" confirmed="yes">org.mvel.asm.MethodVisitor</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.asm.MethodVisitor.visitFieldInsn(int, java.lang.String, java.lang.String, java.lang.String)</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.asm.MethodVisitor.visitInsn(int)</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.asm.MethodVisitor.visitMethodInsn(int, java.lang.String, java.lang.String, java.lang.String)</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.asm.MethodVisitor.visitTypeInsn(int, java.lang.String)</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.asm.MethodVisitor.visitVarInsn(int, int)</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.asm.Type.getConstructorDescriptor(java.lang.reflect.Constructor)</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.asm.Type.getInternalName(java.lang.Class)</outbound>
                <outbound type="class" confirmed="yes">org.mvel.integration.VariableResolverFactory</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.optimizers.impl.asm.ASMAccessorOptimizer.EMPTYCLS</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.optimizers.impl.asm.ASMAccessorOptimizer._finishJIT()</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.optimizers.impl.asm.ASMAccessorOptimizer._initJIT()</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.optimizers.impl.asm.ASMAccessorOptimizer._initializeAccessor()</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.optimizers.impl.asm.ASMAccessorOptimizer.className</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.optimizers.impl.asm.ASMAccessorOptimizer.compiledInputs</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.optimizers.impl.asm.ASMAccessorOptimizer.ctx</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.optimizers.impl.asm.ASMAccessorOptimizer.debug(java.lang.String)</outbound>
                <outbound type="feature" confirmed="no">org.mvel.optimizers.impl.asm.ASMAccessorOptimizer.expr</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.optimizers.impl.asm.ASMAccessorOptimizer.getWrapperClass(java.lang.Class)</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.optimizers.impl.asm.ASMAccessorOptimizer.ldcClassConstant(java.lang.Class)</outbound>
                <outbound type="feature" confirmed="no">org.mvel.optimizers.impl.asm.ASMAccessorOptimizer.length</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.optimizers.impl.asm.ASMAccessorOptimizer.mv</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.optimizers.impl.asm.ASMAccessorOptimizer.thisRef</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.optimizers.impl.asm.ASMAccessorOptimizer.unwrapPrimitive(java.lang.Class)</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.optimizers.impl.asm.ASMAccessorOptimizer.variableFactory</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.optimizers.impl.refl.Union.Union(org.mvel.Accessor, char[])</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.util.ArrayTools.findFirst(char, char[])</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.util.ParseTools.captureContructorAndResidual(char[])</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.util.ParseTools.findClass(org.mvel.integration.VariableResolverFactory, java.lang.String)</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.util.ParseTools.getBestConstructorCanadidate(java.lang.Object[], java.lang.Class)</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.util.ParseTools.parseMethodOrConstructor(char[])</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.util.ParseTools.subCompileExpression(java.lang.String)</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.util.ParseTools.subset(char[], int, int)</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.optimizers.impl.asm.ASMAccessorOptimizer.optimizeSetAccessor(char[], java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory, boolean, java.lang.Object)</name>
                <outbound type="class" confirmed="no">java.lang.Object</outbound>
                <outbound type="feature" confirmed="no">java.lang.RuntimeException.RuntimeException(java.lang.String)</outbound>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="class" confirmed="yes">org.mvel.SetAccessor</outbound>
                <outbound type="class" confirmed="yes">org.mvel.integration.VariableResolverFactory</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.optimizers.impl.asm.ASMAccessorOptimizer.returnType</name>
                <outbound type="class" confirmed="no">java.lang.Class</outbound>
                <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.asm.ASMAccessorOptimizer._finishJIT()</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.asm.ASMAccessorOptimizer.getBeanProperty(java.lang.Object, java.lang.String)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.asm.ASMAccessorOptimizer.getEgressType()</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.asm.ASMAccessorOptimizer.getMethod(java.lang.Object, java.lang.String)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.asm.ASMAccessorOptimizer.optimizeCollection(char[], java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.asm.ASMAccessorOptimizer.wrapPrimitive(java.lang.Class)</inbound>
            </feature>
            <feature confirmed="no">
                <name>org.mvel.optimizers.impl.asm.ASMAccessorOptimizer.scanTo(char)</name>
                <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.asm.ASMAccessorOptimizer.getCollectionProperty(java.lang.Object, java.lang.String)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.optimizers.impl.asm.ASMAccessorOptimizer.stacksize</name>
                <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.asm.ASMAccessorOptimizer.ASMAccessorOptimizer()</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.asm.ASMAccessorOptimizer._finishJIT()</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.asm.ASMAccessorOptimizer.getMethod(java.lang.Object, java.lang.String)</inbound>
            </feature>
            <feature confirmed="no">
                <name>org.mvel.optimizers.impl.asm.ASMAccessorOptimizer.start</name>
                <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.asm.ASMAccessorOptimizer.optimizeAccessor(char[], java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory, boolean)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.optimizers.impl.asm.ASMAccessorOptimizer.static {}</name>
                <outbound type="class" confirmed="no">java.lang.Class</outbound>
                <outbound type="feature" confirmed="no">java.lang.Class.forName(java.lang.String)</outbound>
                <outbound type="feature" confirmed="no">java.lang.Class.getDeclaredMethod(java.lang.String, java.lang.Class[])</outbound>
                <outbound type="class" confirmed="no">java.lang.ClassLoader</outbound>
                <outbound type="class" confirmed="no">java.lang.ClassNotFoundException</outbound>
                <outbound type="class" confirmed="no">java.lang.Exception</outbound>
                <outbound type="feature" confirmed="no">java.lang.Integer.TYPE</outbound>
                <outbound type="feature" confirmed="no">java.lang.NoClassDefFoundError.NoClassDefFoundError(java.lang.String)</outbound>
                <outbound type="class" confirmed="no">java.lang.Object</outbound>
                <outbound type="feature" confirmed="no">java.lang.RuntimeException.RuntimeException(java.lang.Throwable)</outbound>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="feature" confirmed="no">java.lang.String.startsWith(java.lang.String)</outbound>
                <outbound type="feature" confirmed="no">java.lang.System.getProperty(java.lang.String)</outbound>
                <outbound type="class" confirmed="no">java.lang.Thread</outbound>
                <outbound type="feature" confirmed="no">java.lang.Thread.currentThread()</outbound>
                <outbound type="feature" confirmed="no">java.lang.Thread.getContextClassLoader()</outbound>
                <outbound type="class" confirmed="no">java.lang.Throwable</outbound>
                <outbound type="feature" confirmed="no">java.lang.Throwable.getMessage()</outbound>
                <outbound type="class" confirmed="no">java.lang.reflect.Method</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.optimizers.impl.asm.ASMAccessorOptimizer.EMPTYARG</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.optimizers.impl.asm.ASMAccessorOptimizer.EMPTYCLS</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.optimizers.impl.asm.ASMAccessorOptimizer.OPCODES_VERSION</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.optimizers.impl.asm.ASMAccessorOptimizer.classLoader</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.optimizers.impl.asm.ASMAccessorOptimizer.defineClass</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.optimizers.impl.asm.ASMAccessorOptimizer.thisRef</name>
                <outbound type="class" confirmed="no">java.lang.Object</outbound>
                <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.asm.ASMAccessorOptimizer.getBeanProperty(java.lang.Object, java.lang.String)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.asm.ASMAccessorOptimizer.getMethod(java.lang.Object, java.lang.String)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.asm.ASMAccessorOptimizer.optimizeAccessor(char[], java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory, boolean)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.asm.ASMAccessorOptimizer.optimizeCollection(char[], java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.asm.ASMAccessorOptimizer.optimizeObjectCreation(char[], java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.optimizers.impl.asm.ASMAccessorOptimizer.time</name>
                <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.asm.ASMAccessorOptimizer._initializeAccessor()</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.asm.ASMAccessorOptimizer.optimizeAccessor(char[], java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory, boolean)</inbound>
            </feature>
            <feature confirmed="no">
                <name>org.mvel.optimizers.impl.asm.ASMAccessorOptimizer.tryStaticAccess()</name>
                <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.asm.ASMAccessorOptimizer.getBeanProperty(java.lang.Object, java.lang.String)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.optimizers.impl.asm.ASMAccessorOptimizer.unwrapPrimitive(java.lang.Class)</name>
                <outbound type="feature" confirmed="no">java.lang.Boolean.TYPE</outbound>
                <outbound type="feature" confirmed="no">java.lang.Byte.TYPE</outbound>
                <outbound type="feature" confirmed="no">java.lang.Character.TYPE</outbound>
                <outbound type="class" confirmed="no">java.lang.Class</outbound>
                <outbound type="feature" confirmed="no">java.lang.Double.TYPE</outbound>
                <outbound type="feature" confirmed="no">java.lang.Float.TYPE</outbound>
                <outbound type="feature" confirmed="no">java.lang.Integer.TYPE</outbound>
                <outbound type="feature" confirmed="no">java.lang.Long.TYPE</outbound>
                <outbound type="feature" confirmed="no">java.lang.Short.TYPE</outbound>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="class" confirmed="yes">org.mvel.asm.MethodVisitor</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.asm.MethodVisitor.visitMethodInsn(int, java.lang.String, java.lang.String, java.lang.String)</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.asm.MethodVisitor.visitTypeInsn(int, java.lang.String)</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.optimizers.impl.asm.ASMAccessorOptimizer.debug(java.lang.String)</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.optimizers.impl.asm.ASMAccessorOptimizer.mv</outbound>
                <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.asm.ASMAccessorOptimizer.getCollectionProperty(java.lang.Object, java.lang.String)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.asm.ASMAccessorOptimizer.getMethod(java.lang.Object, java.lang.String)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.asm.ASMAccessorOptimizer.optimizeObjectCreation(char[], java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.optimizers.impl.asm.ASMAccessorOptimizer.val</name>
                <outbound type="class" confirmed="no">java.lang.Object</outbound>
                <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.asm.ASMAccessorOptimizer.compileAccessor()</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.asm.ASMAccessorOptimizer.getResultOptPass()</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.asm.ASMAccessorOptimizer.optimizeAccessor(char[], java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory, boolean)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.optimizers.impl.asm.ASMAccessorOptimizer.variableFactory</name>
                <outbound type="class" confirmed="yes">org.mvel.integration.VariableResolverFactory</outbound>
                <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.asm.ASMAccessorOptimizer.getBeanProperty(java.lang.Object, java.lang.String)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.asm.ASMAccessorOptimizer.getCollectionProperty(java.lang.Object, java.lang.String)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.asm.ASMAccessorOptimizer.getMethod(java.lang.Object, java.lang.String)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.asm.ASMAccessorOptimizer.optimizeAccessor(char[], java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory, boolean)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.asm.ASMAccessorOptimizer.optimizeCollection(char[], java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.asm.ASMAccessorOptimizer.optimizeObjectCreation(char[], java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory)</inbound>
            </feature>
            <feature confirmed="no">
                <name>org.mvel.optimizers.impl.asm.ASMAccessorOptimizer.whiteSpaceSkip()</name>
                <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.asm.ASMAccessorOptimizer.getCollectionProperty(java.lang.Object, java.lang.String)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.optimizers.impl.asm.ASMAccessorOptimizer.wrapPrimitive(java.lang.Class)</name>
                <outbound type="feature" confirmed="no">java.lang.Boolean.TYPE</outbound>
                <outbound type="feature" confirmed="no">java.lang.Byte.TYPE</outbound>
                <outbound type="feature" confirmed="no">java.lang.Character.TYPE</outbound>
                <outbound type="class" confirmed="no">java.lang.Class</outbound>
                <outbound type="feature" confirmed="no">java.lang.Class.forName(java.lang.String)</outbound>
                <outbound type="class" confirmed="no">java.lang.ClassNotFoundException</outbound>
                <outbound type="feature" confirmed="no">java.lang.Double.TYPE</outbound>
                <outbound type="feature" confirmed="no">java.lang.Float.TYPE</outbound>
                <outbound type="feature" confirmed="no">java.lang.Integer.TYPE</outbound>
                <outbound type="feature" confirmed="no">java.lang.Long.TYPE</outbound>
                <outbound type="feature" confirmed="no">java.lang.NoClassDefFoundError.NoClassDefFoundError(java.lang.String)</outbound>
                <outbound type="feature" confirmed="no">java.lang.Short.TYPE</outbound>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="feature" confirmed="no">java.lang.Throwable.getMessage()</outbound>
                <outbound type="class" confirmed="yes">org.mvel.asm.MethodVisitor</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.asm.MethodVisitor.visitInsn(int)</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.asm.MethodVisitor.visitMethodInsn(int, java.lang.String, java.lang.String, java.lang.String)</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.asm.MethodVisitor.visitTypeInsn(int, java.lang.String)</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.optimizers.impl.asm.ASMAccessorOptimizer.OPCODES_VERSION</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.optimizers.impl.asm.ASMAccessorOptimizer.debug(java.lang.String)</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.optimizers.impl.asm.ASMAccessorOptimizer.mv</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.optimizers.impl.asm.ASMAccessorOptimizer.returnType</outbound>
                <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.asm.ASMAccessorOptimizer._finishJIT()</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.asm.ASMAccessorOptimizer.getBeanProperty(java.lang.Object, java.lang.String)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.asm.ASMAccessorOptimizer.getCollectionProperty(java.lang.Object, java.lang.String)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.asm.ASMAccessorOptimizer.getMethod(java.lang.Object, java.lang.String)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.asm.ASMAccessorOptimizer.writeOutLiteralWrapped(java.lang.Object)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.optimizers.impl.asm.ASMAccessorOptimizer.writeLiteralOrSubexpression(java.lang.Object)</name>
                <outbound type="class" confirmed="no">java.lang.Class</outbound>
                <outbound type="class" confirmed="no">java.lang.Object</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.optimizers.impl.asm.ASMAccessorOptimizer.writeLiteralOrSubexpression(java.lang.Object, java.lang.Class)</outbound>
                <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.asm.ASMAccessorOptimizer._getAccessor(java.lang.Object)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.asm.ASMAccessorOptimizer.getCollectionProperty(java.lang.Object, java.lang.String)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.optimizers.impl.asm.ASMAccessorOptimizer.writeLiteralOrSubexpression(java.lang.Object, java.lang.Class)</name>
                <outbound type="class" confirmed="no">java.lang.Class</outbound>
                <outbound type="feature" confirmed="no">java.lang.Class.forName(java.lang.String)</outbound>
                <outbound type="class" confirmed="no">java.lang.ClassNotFoundException</outbound>
                <outbound type="feature" confirmed="no">java.lang.NoClassDefFoundError.NoClassDefFoundError(java.lang.String)</outbound>
                <outbound type="class" confirmed="no">java.lang.Object</outbound>
                <outbound type="feature" confirmed="no">java.lang.Object.getClass()</outbound>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="class" confirmed="no">java.lang.StringBuffer</outbound>
                <outbound type="feature" confirmed="no">java.lang.StringBuffer.StringBuffer(java.lang.String)</outbound>
                <outbound type="feature" confirmed="no">java.lang.StringBuffer.append(int)</outbound>
                <outbound type="feature" confirmed="no">java.lang.StringBuffer.toString()</outbound>
                <outbound type="feature" confirmed="no">java.lang.Throwable.getMessage()</outbound>
                <outbound type="class" confirmed="no">java.util.ArrayList</outbound>
                <outbound type="feature" confirmed="no">java.util.ArrayList.add(java.lang.Object)</outbound>
                <outbound type="feature" confirmed="no">java.util.ArrayList.size()</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.DataConversion.convert(java.lang.Object, java.lang.Class)</outbound>
                <outbound type="class" confirmed="yes">org.mvel.ExecutableLiteral</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.ExecutableLiteral.getLiteral()</outbound>
                <outbound type="class" confirmed="yes">org.mvel.ExecutableStatement</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.ExecutableStatement.getKnownEgressType()</outbound>
                <outbound type="class" confirmed="yes">org.mvel.asm.MethodVisitor</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.asm.MethodVisitor.visitFieldInsn(int, java.lang.String, java.lang.String, java.lang.String)</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.asm.MethodVisitor.visitMethodInsn(int, java.lang.String, java.lang.String, java.lang.String)</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.asm.MethodVisitor.visitVarInsn(int, int)</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.asm.Type.getInternalName(java.lang.Class)</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.optimizers.impl.asm.ASMAccessorOptimizer.className</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.optimizers.impl.asm.ASMAccessorOptimizer.compiledInputs</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.optimizers.impl.asm.ASMAccessorOptimizer.dataConversion(java.lang.Class)</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.optimizers.impl.asm.ASMAccessorOptimizer.debug(java.lang.String)</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.optimizers.impl.asm.ASMAccessorOptimizer.literal</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.optimizers.impl.asm.ASMAccessorOptimizer.mv</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.optimizers.impl.asm.ASMAccessorOptimizer.writeOutLiteralWrapped(java.lang.Object)</outbound>
                <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.asm.ASMAccessorOptimizer.getCollectionProperty(java.lang.Object, java.lang.String)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.asm.ASMAccessorOptimizer.writeLiteralOrSubexpression(java.lang.Object)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.optimizers.impl.asm.ASMAccessorOptimizer.writeOutLiteralWrapped(java.lang.Object)</name>
                <outbound type="class" confirmed="no">java.lang.Boolean</outbound>
                <outbound type="feature" confirmed="no">java.lang.Boolean.TYPE</outbound>
                <outbound type="class" confirmed="no">java.lang.Byte</outbound>
                <outbound type="feature" confirmed="no">java.lang.Byte.TYPE</outbound>
                <outbound type="class" confirmed="no">java.lang.Character</outbound>
                <outbound type="feature" confirmed="no">java.lang.Character.TYPE</outbound>
                <outbound type="class" confirmed="no">java.lang.Class</outbound>
                <outbound type="class" confirmed="no">java.lang.Double</outbound>
                <outbound type="feature" confirmed="no">java.lang.Double.TYPE</outbound>
                <outbound type="class" confirmed="no">java.lang.Float</outbound>
                <outbound type="feature" confirmed="no">java.lang.Float.TYPE</outbound>
                <outbound type="class" confirmed="no">java.lang.Integer</outbound>
                <outbound type="feature" confirmed="no">java.lang.Integer.TYPE</outbound>
                <outbound type="feature" confirmed="no">java.lang.Integer.intValue()</outbound>
                <outbound type="class" confirmed="no">java.lang.Long</outbound>
                <outbound type="feature" confirmed="no">java.lang.Long.TYPE</outbound>
                <outbound type="class" confirmed="no">java.lang.Object</outbound>
                <outbound type="class" confirmed="no">java.lang.Short</outbound>
                <outbound type="feature" confirmed="no">java.lang.Short.TYPE</outbound>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="class" confirmed="no">java.lang.StringBuffer</outbound>
                <outbound type="feature" confirmed="no">java.lang.StringBuffer.StringBuffer(java.lang.String)</outbound>
                <outbound type="feature" confirmed="no">java.lang.StringBuffer.append(java.lang.Object)</outbound>
                <outbound type="feature" confirmed="no">java.lang.StringBuffer.toString()</outbound>
                <outbound type="class" confirmed="yes">org.mvel.asm.MethodVisitor</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.asm.MethodVisitor.visitLdcInsn(java.lang.Object)</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.optimizers.impl.asm.ASMAccessorOptimizer.debug(java.lang.String)</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.optimizers.impl.asm.ASMAccessorOptimizer.intPush(int)</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.optimizers.impl.asm.ASMAccessorOptimizer.mv</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.optimizers.impl.asm.ASMAccessorOptimizer.wrapPrimitive(java.lang.Class)</outbound>
                <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.asm.ASMAccessorOptimizer.writeLiteralOrSubexpression(java.lang.Object, java.lang.Class)</inbound>
            </feature>
        </class>
    </package>
    <package confirmed="yes">
        <name>org.mvel.optimizers.impl.refl</name>
        <class confirmed="yes">
            <name>org.mvel.optimizers.impl.refl.ArrayAccessor</name>
            <outbound type="class" confirmed="no">java.lang.Object</outbound>
            <outbound type="class" confirmed="yes">org.mvel.AccessorNode</outbound>
            <feature confirmed="yes">
                <name>org.mvel.optimizers.impl.refl.ArrayAccessor.ArrayAccessor()</name>
                <outbound type="feature" confirmed="no">java.lang.Object.Object()</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.optimizers.impl.refl.ArrayAccessor.ArrayAccessor(int)</name>
                <outbound type="feature" confirmed="no">java.lang.Object.Object()</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.optimizers.impl.refl.ArrayAccessor.index</outbound>
                <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.refl.ReflectiveAccessorOptimizer.getCollectionProperty(java.lang.Object, java.lang.String)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.optimizers.impl.refl.ArrayAccessor.getIndex()</name>
                <outbound type="feature" confirmed="yes">org.mvel.optimizers.impl.refl.ArrayAccessor.index</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.optimizers.impl.refl.ArrayAccessor.getNextNode()</name>
                <outbound type="class" confirmed="yes">org.mvel.AccessorNode</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.optimizers.impl.refl.ArrayAccessor.nextNode</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.optimizers.impl.refl.ArrayAccessor.getValue(java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory)</name>
                <outbound type="class" confirmed="no">java.lang.Object</outbound>
                <outbound type="class" confirmed="no">java.lang.Object[]</outbound>
                <outbound type="class" confirmed="yes">org.mvel.AccessorNode</outbound>
                <outbound type="feature" confirmed="no">org.mvel.AccessorNode.getValue(java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory)</outbound>
                <outbound type="class" confirmed="yes">org.mvel.integration.VariableResolverFactory</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.optimizers.impl.refl.ArrayAccessor.index</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.optimizers.impl.refl.ArrayAccessor.nextNode</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.optimizers.impl.refl.ArrayAccessor.index</name>
                <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.refl.ArrayAccessor.ArrayAccessor(int)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.refl.ArrayAccessor.getIndex()</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.refl.ArrayAccessor.getValue(java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.refl.ArrayAccessor.setIndex(int)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.refl.ArrayAccessor.setValue(java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory, java.lang.Object)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.refl.ArrayAccessor.toString()</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.optimizers.impl.refl.ArrayAccessor.nextNode</name>
                <outbound type="class" confirmed="yes">org.mvel.AccessorNode</outbound>
                <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.refl.ArrayAccessor.getNextNode()</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.refl.ArrayAccessor.getValue(java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.refl.ArrayAccessor.setNextNode(org.mvel.AccessorNode)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.optimizers.impl.refl.ArrayAccessor.setIndex(int)</name>
                <outbound type="feature" confirmed="yes">org.mvel.optimizers.impl.refl.ArrayAccessor.index</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.optimizers.impl.refl.ArrayAccessor.setNextNode(org.mvel.AccessorNode)</name>
                <outbound type="class" confirmed="yes">org.mvel.AccessorNode</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.optimizers.impl.refl.ArrayAccessor.nextNode</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.optimizers.impl.refl.ArrayAccessor.setValue(java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory, java.lang.Object)</name>
                <outbound type="class" confirmed="no">java.lang.Object</outbound>
                <outbound type="class" confirmed="no">java.lang.Object[]</outbound>
                <outbound type="class" confirmed="yes">org.mvel.integration.VariableResolverFactory</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.optimizers.impl.refl.ArrayAccessor.index</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.optimizers.impl.refl.ArrayAccessor.toString()</name>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="class" confirmed="no">java.lang.StringBuffer</outbound>
                <outbound type="feature" confirmed="no">java.lang.StringBuffer.StringBuffer(java.lang.String)</outbound>
                <outbound type="feature" confirmed="no">java.lang.StringBuffer.append(int)</outbound>
                <outbound type="feature" confirmed="no">java.lang.StringBuffer.append(java.lang.String)</outbound>
                <outbound type="feature" confirmed="no">java.lang.StringBuffer.toString()</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.optimizers.impl.refl.ArrayAccessor.index</outbound>
            </feature>
        </class>
        <class confirmed="yes">
            <name>org.mvel.optimizers.impl.refl.ArrayAccessorNest</name>
            <outbound type="class" confirmed="no">java.lang.Object</outbound>
            <outbound type="class" confirmed="yes">org.mvel.AccessorNode</outbound>
            <feature confirmed="yes">
                <name>org.mvel.optimizers.impl.refl.ArrayAccessorNest.ArrayAccessorNest()</name>
                <outbound type="feature" confirmed="no">java.lang.Object.Object()</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.optimizers.impl.refl.ArrayAccessorNest.ArrayAccessorNest(java.lang.String)</name>
                <outbound type="class" confirmed="no">java.io.Serializable</outbound>
                <outbound type="feature" confirmed="no">java.lang.Object.Object()</outbound>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="class" confirmed="yes">org.mvel.ExecutableStatement</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.optimizers.impl.refl.ArrayAccessorNest.index</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.util.ParseTools.subCompileExpression(java.lang.String)</outbound>
                <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.refl.ReflectiveAccessorOptimizer.optimizeSetAccessor(char[], java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory, boolean, java.lang.Object)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.optimizers.impl.refl.ArrayAccessorNest.ArrayAccessorNest(org.mvel.ExecutableStatement)</name>
                <outbound type="feature" confirmed="no">java.lang.Object.Object()</outbound>
                <outbound type="class" confirmed="yes">org.mvel.ExecutableStatement</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.optimizers.impl.refl.ArrayAccessorNest.index</outbound>
                <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.refl.ReflectiveAccessorOptimizer.getCollectionProperty(java.lang.Object, java.lang.String)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.optimizers.impl.refl.ArrayAccessorNest.getIndex()</name>
                <outbound type="class" confirmed="yes">org.mvel.ExecutableStatement</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.optimizers.impl.refl.ArrayAccessorNest.index</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.optimizers.impl.refl.ArrayAccessorNest.getNextNode()</name>
                <outbound type="class" confirmed="yes">org.mvel.AccessorNode</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.optimizers.impl.refl.ArrayAccessorNest.nextNode</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.optimizers.impl.refl.ArrayAccessorNest.getValue(java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory)</name>
                <outbound type="class" confirmed="no">java.lang.Integer</outbound>
                <outbound type="feature" confirmed="no">java.lang.Integer.intValue()</outbound>
                <outbound type="class" confirmed="no">java.lang.Object</outbound>
                <outbound type="class" confirmed="no">java.lang.Object[]</outbound>
                <outbound type="class" confirmed="yes">org.mvel.AccessorNode</outbound>
                <outbound type="feature" confirmed="no">org.mvel.AccessorNode.getValue(java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory)</outbound>
                <outbound type="class" confirmed="yes">org.mvel.ExecutableStatement</outbound>
                <outbound type="feature" confirmed="no">org.mvel.ExecutableStatement.getValue(java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory)</outbound>
                <outbound type="class" confirmed="yes">org.mvel.integration.VariableResolverFactory</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.optimizers.impl.refl.ArrayAccessorNest.index</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.optimizers.impl.refl.ArrayAccessorNest.nextNode</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.optimizers.impl.refl.ArrayAccessorNest.index</name>
                <outbound type="class" confirmed="yes">org.mvel.ExecutableStatement</outbound>
                <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.refl.ArrayAccessorNest.ArrayAccessorNest(java.lang.String)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.refl.ArrayAccessorNest.ArrayAccessorNest(org.mvel.ExecutableStatement)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.refl.ArrayAccessorNest.getIndex()</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.refl.ArrayAccessorNest.getValue(java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.refl.ArrayAccessorNest.setIndex(org.mvel.ExecutableStatement)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.refl.ArrayAccessorNest.setValue(java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory, java.lang.Object)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.refl.ArrayAccessorNest.toString()</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.optimizers.impl.refl.ArrayAccessorNest.nextNode</name>
                <outbound type="class" confirmed="yes">org.mvel.AccessorNode</outbound>
                <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.refl.ArrayAccessorNest.getNextNode()</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.refl.ArrayAccessorNest.getValue(java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.refl.ArrayAccessorNest.setNextNode(org.mvel.AccessorNode)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.optimizers.impl.refl.ArrayAccessorNest.setIndex(org.mvel.ExecutableStatement)</name>
                <outbound type="class" confirmed="yes">org.mvel.ExecutableStatement</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.optimizers.impl.refl.ArrayAccessorNest.index</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.optimizers.impl.refl.ArrayAccessorNest.setNextNode(org.mvel.AccessorNode)</name>
                <outbound type="class" confirmed="yes">org.mvel.AccessorNode</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.optimizers.impl.refl.ArrayAccessorNest.nextNode</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.optimizers.impl.refl.ArrayAccessorNest.setValue(java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory, java.lang.Object)</name>
                <outbound type="class" confirmed="no">java.lang.Class</outbound>
                <outbound type="class" confirmed="no">java.lang.Integer</outbound>
                <outbound type="feature" confirmed="no">java.lang.Integer.intValue()</outbound>
                <outbound type="class" confirmed="no">java.lang.Object</outbound>
                <outbound type="feature" confirmed="no">java.lang.Object.getClass()</outbound>
                <outbound type="feature" confirmed="no">java.lang.reflect.Array.set(java.lang.Object, int, java.lang.Object)</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.DataConversion.convert(java.lang.Object, java.lang.Class)</outbound>
                <outbound type="class" confirmed="yes">org.mvel.ExecutableStatement</outbound>
                <outbound type="feature" confirmed="no">org.mvel.ExecutableStatement.getValue(java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory)</outbound>
                <outbound type="class" confirmed="yes">org.mvel.integration.VariableResolverFactory</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.optimizers.impl.refl.ArrayAccessorNest.index</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.util.PropertyTools.getBaseComponentType(java.lang.Class)</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.optimizers.impl.refl.ArrayAccessorNest.toString()</name>
                <outbound type="class" confirmed="no">java.lang.Object</outbound>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="class" confirmed="no">java.lang.StringBuffer</outbound>
                <outbound type="feature" confirmed="no">java.lang.StringBuffer.StringBuffer(java.lang.String)</outbound>
                <outbound type="feature" confirmed="no">java.lang.StringBuffer.append(java.lang.Object)</outbound>
                <outbound type="feature" confirmed="no">java.lang.StringBuffer.append(java.lang.String)</outbound>
                <outbound type="feature" confirmed="no">java.lang.StringBuffer.toString()</outbound>
                <outbound type="class" confirmed="yes">org.mvel.ExecutableStatement</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.optimizers.impl.refl.ArrayAccessorNest.index</outbound>
            </feature>
        </class>
        <class confirmed="yes">
            <name>org.mvel.optimizers.impl.refl.ArrayLength</name>
            <outbound type="class" confirmed="yes">org.mvel.optimizers.impl.refl.BaseAccessor</outbound>
            <feature confirmed="yes">
                <name>org.mvel.optimizers.impl.refl.ArrayLength.ArrayLength()</name>
                <outbound type="feature" confirmed="yes">org.mvel.optimizers.impl.refl.BaseAccessor.BaseAccessor()</outbound>
                <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.refl.ReflectiveAccessorOptimizer.getBeanProperty(java.lang.Object, java.lang.String)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.refl.ReflectiveAccessorOptimizer.getMethod(java.lang.Object, java.lang.String)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.optimizers.impl.refl.ArrayLength.getValue(java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory)</name>
                <outbound type="feature" confirmed="no">java.lang.Integer.Integer(int)</outbound>
                <outbound type="class" confirmed="no">java.lang.Object</outbound>
                <outbound type="feature" confirmed="no">java.lang.reflect.Array.getLength(java.lang.Object)</outbound>
                <outbound type="class" confirmed="yes">org.mvel.AccessorNode</outbound>
                <outbound type="feature" confirmed="no">org.mvel.AccessorNode.getValue(java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory)</outbound>
                <outbound type="class" confirmed="yes">org.mvel.integration.VariableResolverFactory</outbound>
                <outbound type="feature" confirmed="no">org.mvel.optimizers.impl.refl.ArrayLength.nextNode</outbound>
            </feature>
            <feature confirmed="no">
                <name>org.mvel.optimizers.impl.refl.ArrayLength.nextNode</name>
                <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.refl.ArrayLength.getValue(java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.optimizers.impl.refl.ArrayLength.setValue(java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory, java.lang.Object)</name>
                <outbound type="class" confirmed="no">java.lang.Object</outbound>
                <outbound type="class" confirmed="yes">org.mvel.integration.VariableResolverFactory</outbound>
            </feature>
        </class>
        <class confirmed="yes">
            <name>org.mvel.optimizers.impl.refl.BaseAccessor</name>
            <outbound type="class" confirmed="no">java.lang.Object</outbound>
            <outbound type="class" confirmed="yes">org.mvel.AccessorNode</outbound>
            <inbound type="class" confirmed="yes">org.mvel.optimizers.impl.refl.ArrayLength</inbound>
            <inbound type="class" confirmed="yes">org.mvel.optimizers.impl.refl.ConstructorAccessor</inbound>
            <feature confirmed="yes">
                <name>org.mvel.optimizers.impl.refl.BaseAccessor.BaseAccessor()</name>
                <outbound type="feature" confirmed="no">java.lang.Object.Object()</outbound>
                <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.refl.ArrayLength.ArrayLength()</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.refl.ConstructorAccessor.ConstructorAccessor(java.lang.reflect.Constructor, org.mvel.ExecutableStatement[])</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.optimizers.impl.refl.BaseAccessor.getNextNode()</name>
                <outbound type="class" confirmed="yes">org.mvel.AccessorNode</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.optimizers.impl.refl.BaseAccessor.nextNode</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.optimizers.impl.refl.BaseAccessor.nextNode</name>
                <outbound type="class" confirmed="yes">org.mvel.AccessorNode</outbound>
                <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.refl.BaseAccessor.getNextNode()</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.refl.BaseAccessor.setNextNode(org.mvel.AccessorNode)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.optimizers.impl.refl.BaseAccessor.setNextNode(org.mvel.AccessorNode)</name>
                <outbound type="class" confirmed="yes">org.mvel.AccessorNode</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.optimizers.impl.refl.BaseAccessor.nextNode</outbound>
            </feature>
        </class>
        <class confirmed="yes">
            <name>org.mvel.optimizers.impl.refl.ConstructorAccessor</name>
            <outbound type="class" confirmed="yes">org.mvel.optimizers.impl.refl.BaseAccessor</outbound>
            <feature confirmed="yes">
                <name>org.mvel.optimizers.impl.refl.ConstructorAccessor.ConstructorAccessor(java.lang.reflect.Constructor, org.mvel.ExecutableStatement[])</name>
                <outbound type="class" confirmed="no">java.lang.Class</outbound>
                <outbound type="class" confirmed="no">java.lang.reflect.Constructor</outbound>
                <outbound type="feature" confirmed="no">java.lang.reflect.Constructor.getParameterTypes()</outbound>
                <outbound type="class" confirmed="yes">org.mvel.ExecutableStatement</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.optimizers.impl.refl.BaseAccessor.BaseAccessor()</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.optimizers.impl.refl.ConstructorAccessor.coercionNeeded</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.optimizers.impl.refl.ConstructorAccessor.constructor</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.optimizers.impl.refl.ConstructorAccessor.length</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.optimizers.impl.refl.ConstructorAccessor.parmTypes</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.optimizers.impl.refl.ConstructorAccessor.parms</outbound>
                <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.refl.ReflectiveAccessorOptimizer.compileConstructor(char[], java.lang.Object, org.mvel.integration.VariableResolverFactory)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.optimizers.impl.refl.ConstructorAccessor.coercionNeeded</name>
                <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.refl.ConstructorAccessor.ConstructorAccessor(java.lang.reflect.Constructor, org.mvel.ExecutableStatement[])</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.refl.ConstructorAccessor.getValue(java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.optimizers.impl.refl.ConstructorAccessor.constructor</name>
                <outbound type="class" confirmed="no">java.lang.reflect.Constructor</outbound>
                <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.refl.ConstructorAccessor.ConstructorAccessor(java.lang.reflect.Constructor, org.mvel.ExecutableStatement[])</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.refl.ConstructorAccessor.getValue(java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.optimizers.impl.refl.ConstructorAccessor.executeAll(java.lang.Object, org.mvel.integration.VariableResolverFactory)</name>
                <outbound type="class" confirmed="no">java.lang.Object</outbound>
                <outbound type="class" confirmed="yes">org.mvel.ExecutableStatement</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.ExecutableStatement.getValue(java.lang.Object, org.mvel.integration.VariableResolverFactory)</outbound>
                <outbound type="class" confirmed="yes">org.mvel.integration.VariableResolverFactory</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.optimizers.impl.refl.ConstructorAccessor.length</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.optimizers.impl.refl.ConstructorAccessor.parms</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.optimizers.impl.refl.GetterAccessor.EMPTY</outbound>
                <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.refl.ConstructorAccessor.getValue(java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.optimizers.impl.refl.ConstructorAccessor.executeAndCoerce(java.lang.Class[], java.lang.Object, org.mvel.integration.VariableResolverFactory)</name>
                <outbound type="class" confirmed="no">java.lang.Class</outbound>
                <outbound type="class" confirmed="no">java.lang.Object</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.DataConversion.convert(java.lang.Object, java.lang.Class)</outbound>
                <outbound type="class" confirmed="yes">org.mvel.ExecutableStatement</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.ExecutableStatement.getValue(java.lang.Object, org.mvel.integration.VariableResolverFactory)</outbound>
                <outbound type="class" confirmed="yes">org.mvel.integration.VariableResolverFactory</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.optimizers.impl.refl.ConstructorAccessor.length</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.optimizers.impl.refl.ConstructorAccessor.parms</outbound>
                <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.refl.ConstructorAccessor.getValue(java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.optimizers.impl.refl.ConstructorAccessor.getValue(java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory)</name>
                <outbound type="class" confirmed="no">java.lang.Class</outbound>
                <outbound type="class" confirmed="no">java.lang.Exception</outbound>
                <outbound type="class" confirmed="no">java.lang.IllegalArgumentException</outbound>
                <outbound type="class" confirmed="no">java.lang.Object</outbound>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="class" confirmed="no">java.lang.Throwable</outbound>
                <outbound type="class" confirmed="no">java.lang.reflect.Constructor</outbound>
                <outbound type="feature" confirmed="no">java.lang.reflect.Constructor.newInstance(java.lang.Object[])</outbound>
                <outbound type="class" confirmed="yes">org.mvel.AccessorNode</outbound>
                <outbound type="feature" confirmed="no">org.mvel.AccessorNode.getValue(java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory)</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.CompileException.CompileException(java.lang.String, java.lang.Throwable)</outbound>
                <outbound type="class" confirmed="yes">org.mvel.integration.VariableResolverFactory</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.optimizers.impl.refl.ConstructorAccessor.coercionNeeded</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.optimizers.impl.refl.ConstructorAccessor.constructor</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.optimizers.impl.refl.ConstructorAccessor.executeAll(java.lang.Object, org.mvel.integration.VariableResolverFactory)</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.optimizers.impl.refl.ConstructorAccessor.executeAndCoerce(java.lang.Class[], java.lang.Object, org.mvel.integration.VariableResolverFactory)</outbound>
                <outbound type="feature" confirmed="no">org.mvel.optimizers.impl.refl.ConstructorAccessor.nextNode</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.optimizers.impl.refl.ConstructorAccessor.parmTypes</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.optimizers.impl.refl.ConstructorAccessor.length</name>
                <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.refl.ConstructorAccessor.ConstructorAccessor(java.lang.reflect.Constructor, org.mvel.ExecutableStatement[])</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.refl.ConstructorAccessor.executeAll(java.lang.Object, org.mvel.integration.VariableResolverFactory)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.refl.ConstructorAccessor.executeAndCoerce(java.lang.Class[], java.lang.Object, org.mvel.integration.VariableResolverFactory)</inbound>
            </feature>
            <feature confirmed="no">
                <name>org.mvel.optimizers.impl.refl.ConstructorAccessor.nextNode</name>
                <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.refl.ConstructorAccessor.getValue(java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.optimizers.impl.refl.ConstructorAccessor.parmTypes</name>
                <outbound type="class" confirmed="no">java.lang.Class</outbound>
                <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.refl.ConstructorAccessor.ConstructorAccessor(java.lang.reflect.Constructor, org.mvel.ExecutableStatement[])</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.refl.ConstructorAccessor.getValue(java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.optimizers.impl.refl.ConstructorAccessor.parms</name>
                <outbound type="class" confirmed="yes">org.mvel.ExecutableStatement</outbound>
                <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.refl.ConstructorAccessor.ConstructorAccessor(java.lang.reflect.Constructor, org.mvel.ExecutableStatement[])</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.refl.ConstructorAccessor.executeAll(java.lang.Object, org.mvel.integration.VariableResolverFactory)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.refl.ConstructorAccessor.executeAndCoerce(java.lang.Class[], java.lang.Object, org.mvel.integration.VariableResolverFactory)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.optimizers.impl.refl.ConstructorAccessor.setValue(java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory, java.lang.Object)</name>
                <outbound type="class" confirmed="no">java.lang.Object</outbound>
                <outbound type="class" confirmed="yes">org.mvel.integration.VariableResolverFactory</outbound>
            </feature>
        </class>
        <class confirmed="yes">
            <name>org.mvel.optimizers.impl.refl.DynamicFieldAccessor</name>
            <outbound type="class" confirmed="no">java.lang.Object</outbound>
            <outbound type="class" confirmed="yes">org.mvel.AccessorNode</outbound>
            <feature confirmed="yes">
                <name>org.mvel.optimizers.impl.refl.DynamicFieldAccessor.DynamicFieldAccessor()</name>
                <outbound type="feature" confirmed="no">java.lang.Object.Object()</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.optimizers.impl.refl.DynamicFieldAccessor.DynamicFieldAccessor(java.lang.reflect.Field)</name>
                <outbound type="feature" confirmed="no">java.lang.Object.Object()</outbound>
                <outbound type="class" confirmed="no">java.lang.reflect.Field</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.optimizers.impl.refl.DynamicFieldAccessor.field</outbound>
                <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.refl.ReflectiveAccessorOptimizer.optimizeSetAccessor(char[], java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory, boolean, java.lang.Object)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.optimizers.impl.refl.DynamicFieldAccessor.field</name>
                <outbound type="class" confirmed="no">java.lang.reflect.Field</outbound>
                <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.refl.DynamicFieldAccessor.DynamicFieldAccessor(java.lang.reflect.Field)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.refl.DynamicFieldAccessor.getField()</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.refl.DynamicFieldAccessor.getValue(java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.refl.DynamicFieldAccessor.setField(java.lang.reflect.Field)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.refl.DynamicFieldAccessor.setValue(java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory, java.lang.Object)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.optimizers.impl.refl.DynamicFieldAccessor.getField()</name>
                <outbound type="class" confirmed="no">java.lang.reflect.Field</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.optimizers.impl.refl.DynamicFieldAccessor.field</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.optimizers.impl.refl.DynamicFieldAccessor.getNextNode()</name>
                <outbound type="class" confirmed="yes">org.mvel.AccessorNode</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.optimizers.impl.refl.DynamicFieldAccessor.nextNode</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.optimizers.impl.refl.DynamicFieldAccessor.getValue(java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory)</name>
                <outbound type="class" confirmed="no">java.lang.Exception</outbound>
                <outbound type="class" confirmed="no">java.lang.Object</outbound>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="class" confirmed="no">java.lang.Throwable</outbound>
                <outbound type="class" confirmed="no">java.lang.reflect.Field</outbound>
                <outbound type="feature" confirmed="no">java.lang.reflect.Field.get(java.lang.Object)</outbound>
                <outbound type="class" confirmed="yes">org.mvel.AccessorNode</outbound>
                <outbound type="feature" confirmed="no">org.mvel.AccessorNode.getValue(java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory)</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.CompileException.CompileException(java.lang.String, java.lang.Throwable)</outbound>
                <outbound type="class" confirmed="yes">org.mvel.integration.VariableResolverFactory</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.optimizers.impl.refl.DynamicFieldAccessor.field</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.optimizers.impl.refl.DynamicFieldAccessor.nextNode</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.optimizers.impl.refl.DynamicFieldAccessor.nextNode</name>
                <outbound type="class" confirmed="yes">org.mvel.AccessorNode</outbound>
                <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.refl.DynamicFieldAccessor.getNextNode()</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.refl.DynamicFieldAccessor.getValue(java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.refl.DynamicFieldAccessor.setNextNode(org.mvel.AccessorNode)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.optimizers.impl.refl.DynamicFieldAccessor.setField(java.lang.reflect.Field)</name>
                <outbound type="class" confirmed="no">java.lang.reflect.Field</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.optimizers.impl.refl.DynamicFieldAccessor.field</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.optimizers.impl.refl.DynamicFieldAccessor.setNextNode(org.mvel.AccessorNode)</name>
                <outbound type="class" confirmed="yes">org.mvel.AccessorNode</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.optimizers.impl.refl.DynamicFieldAccessor.nextNode</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.optimizers.impl.refl.DynamicFieldAccessor.setValue(java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory, java.lang.Object)</name>
                <outbound type="class" confirmed="no">java.lang.Class</outbound>
                <outbound type="class" confirmed="no">java.lang.Exception</outbound>
                <outbound type="class" confirmed="no">java.lang.Object</outbound>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="class" confirmed="no">java.lang.Throwable</outbound>
                <outbound type="class" confirmed="no">java.lang.reflect.Field</outbound>
                <outbound type="feature" confirmed="no">java.lang.reflect.Field.getType()</outbound>
                <outbound type="feature" confirmed="no">java.lang.reflect.Field.set(java.lang.Object, java.lang.Object)</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.CompileException.CompileException(java.lang.String, java.lang.Throwable)</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.DataConversion.convert(java.lang.Object, java.lang.Class)</outbound>
                <outbound type="class" confirmed="yes">org.mvel.integration.VariableResolverFactory</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.optimizers.impl.refl.DynamicFieldAccessor.field</outbound>
            </feature>
        </class>
        <class confirmed="yes">
            <name>org.mvel.optimizers.impl.refl.DynamicSetterAccessor</name>
            <outbound type="class" confirmed="no">java.lang.Object</outbound>
            <outbound type="class" confirmed="yes">org.mvel.AccessorNode</outbound>
            <feature confirmed="yes">
                <name>org.mvel.optimizers.impl.refl.DynamicSetterAccessor.DynamicSetterAccessor(java.lang.reflect.Method)</name>
                <outbound type="class" confirmed="no">java.lang.Class</outbound>
                <outbound type="feature" confirmed="no">java.lang.Object.Object()</outbound>
                <outbound type="class" confirmed="no">java.lang.reflect.Method</outbound>
                <outbound type="feature" confirmed="no">java.lang.reflect.Method.getParameterTypes()</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.optimizers.impl.refl.DynamicSetterAccessor.method</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.optimizers.impl.refl.DynamicSetterAccessor.targetType</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.optimizers.impl.refl.DynamicSetterAccessor.EMPTY</name>
                <outbound type="class" confirmed="no">java.lang.Object</outbound>
                <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.refl.DynamicSetterAccessor.static {}</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.optimizers.impl.refl.DynamicSetterAccessor.getMethod()</name>
                <outbound type="class" confirmed="no">java.lang.reflect.Method</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.optimizers.impl.refl.DynamicSetterAccessor.method</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.optimizers.impl.refl.DynamicSetterAccessor.getNextNode()</name>
                <outbound type="class" confirmed="yes">org.mvel.AccessorNode</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.optimizers.impl.refl.DynamicSetterAccessor.nextNode</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.optimizers.impl.refl.DynamicSetterAccessor.getValue(java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory)</name>
                <outbound type="class" confirmed="no">java.lang.Object</outbound>
                <outbound type="class" confirmed="yes">org.mvel.integration.VariableResolverFactory</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.optimizers.impl.refl.DynamicSetterAccessor.method</name>
                <outbound type="class" confirmed="no">java.lang.reflect.Method</outbound>
                <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.refl.DynamicSetterAccessor.DynamicSetterAccessor(java.lang.reflect.Method)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.refl.DynamicSetterAccessor.getMethod()</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.refl.DynamicSetterAccessor.setValue(java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory, java.lang.Object)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.refl.DynamicSetterAccessor.toString()</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.optimizers.impl.refl.DynamicSetterAccessor.nextNode</name>
                <outbound type="class" confirmed="yes">org.mvel.AccessorNode</outbound>
                <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.refl.DynamicSetterAccessor.getNextNode()</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.refl.DynamicSetterAccessor.setNextNode(org.mvel.AccessorNode)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.optimizers.impl.refl.DynamicSetterAccessor.setNextNode(org.mvel.AccessorNode)</name>
                <outbound type="class" confirmed="yes">org.mvel.AccessorNode</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.optimizers.impl.refl.DynamicSetterAccessor.nextNode</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.optimizers.impl.refl.DynamicSetterAccessor.setValue(java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory, java.lang.Object)</name>
                <outbound type="class" confirmed="no">java.lang.Class</outbound>
                <outbound type="class" confirmed="no">java.lang.Exception</outbound>
                <outbound type="class" confirmed="no">java.lang.Object</outbound>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="class" confirmed="no">java.lang.Throwable</outbound>
                <outbound type="class" confirmed="no">java.lang.reflect.Method</outbound>
                <outbound type="feature" confirmed="no">java.lang.reflect.Method.invoke(java.lang.Object, java.lang.Object[])</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.CompileException.CompileException(java.lang.String, java.lang.Throwable)</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.DataConversion.convert(java.lang.Object, java.lang.Class)</outbound>
                <outbound type="class" confirmed="yes">org.mvel.integration.VariableResolverFactory</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.optimizers.impl.refl.DynamicSetterAccessor.method</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.optimizers.impl.refl.DynamicSetterAccessor.targetType</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.optimizers.impl.refl.DynamicSetterAccessor.static {}</name>
                <outbound type="class" confirmed="no">java.lang.Object</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.optimizers.impl.refl.DynamicSetterAccessor.EMPTY</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.optimizers.impl.refl.DynamicSetterAccessor.targetType</name>
                <outbound type="class" confirmed="no">java.lang.Class</outbound>
                <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.refl.DynamicSetterAccessor.DynamicSetterAccessor(java.lang.reflect.Method)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.refl.DynamicSetterAccessor.setValue(java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory, java.lang.Object)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.optimizers.impl.refl.DynamicSetterAccessor.toString()</name>
                <outbound type="class" confirmed="no">java.lang.Class</outbound>
                <outbound type="feature" confirmed="no">java.lang.Class.getName()</outbound>
                <outbound type="class" confirmed="no">java.lang.Object</outbound>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="feature" confirmed="no">java.lang.String.valueOf(java.lang.Object)</outbound>
                <outbound type="class" confirmed="no">java.lang.StringBuffer</outbound>
                <outbound type="feature" confirmed="no">java.lang.StringBuffer.StringBuffer(java.lang.String)</outbound>
                <outbound type="feature" confirmed="no">java.lang.StringBuffer.append(java.lang.String)</outbound>
                <outbound type="feature" confirmed="no">java.lang.StringBuffer.toString()</outbound>
                <outbound type="class" confirmed="no">java.lang.reflect.Method</outbound>
                <outbound type="feature" confirmed="no">java.lang.reflect.Method.getDeclaringClass()</outbound>
                <outbound type="feature" confirmed="no">java.lang.reflect.Method.getName()</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.optimizers.impl.refl.DynamicSetterAccessor.method</outbound>
            </feature>
        </class>
        <class confirmed="yes">
            <name>org.mvel.optimizers.impl.refl.FieldAccessor</name>
            <outbound type="class" confirmed="no">java.lang.Object</outbound>
            <outbound type="class" confirmed="yes">org.mvel.AccessorNode</outbound>
            <feature confirmed="yes">
                <name>org.mvel.optimizers.impl.refl.FieldAccessor.FieldAccessor()</name>
                <outbound type="feature" confirmed="no">java.lang.Object.Object()</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.optimizers.impl.refl.FieldAccessor.FieldAccessor(java.lang.reflect.Field)</name>
                <outbound type="feature" confirmed="no">java.lang.Object.Object()</outbound>
                <outbound type="class" confirmed="no">java.lang.reflect.Field</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.optimizers.impl.refl.FieldAccessor.field</outbound>
                <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.refl.ReflectiveAccessorOptimizer.getBeanProperty(java.lang.Object, java.lang.String)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.refl.ReflectiveAccessorOptimizer.optimizeSetAccessor(char[], java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory, boolean, java.lang.Object)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.optimizers.impl.refl.FieldAccessor.field</name>
                <outbound type="class" confirmed="no">java.lang.reflect.Field</outbound>
                <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.refl.FieldAccessor.FieldAccessor(java.lang.reflect.Field)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.refl.FieldAccessor.getField()</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.refl.FieldAccessor.getValue(java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.refl.FieldAccessor.setField(java.lang.reflect.Field)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.refl.FieldAccessor.setValue(java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory, java.lang.Object)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.optimizers.impl.refl.FieldAccessor.getField()</name>
                <outbound type="class" confirmed="no">java.lang.reflect.Field</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.optimizers.impl.refl.FieldAccessor.field</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.optimizers.impl.refl.FieldAccessor.getNextNode()</name>
                <outbound type="class" confirmed="yes">org.mvel.AccessorNode</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.optimizers.impl.refl.FieldAccessor.nextNode</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.optimizers.impl.refl.FieldAccessor.getValue(java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory)</name>
                <outbound type="class" confirmed="no">java.lang.Exception</outbound>
                <outbound type="class" confirmed="no">java.lang.Object</outbound>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="class" confirmed="no">java.lang.Throwable</outbound>
                <outbound type="class" confirmed="no">java.lang.reflect.Field</outbound>
                <outbound type="feature" confirmed="no">java.lang.reflect.Field.get(java.lang.Object)</outbound>
                <outbound type="class" confirmed="yes">org.mvel.AccessorNode</outbound>
                <outbound type="feature" confirmed="no">org.mvel.AccessorNode.getValue(java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory)</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.CompileException.CompileException(java.lang.String, java.lang.Throwable)</outbound>
                <outbound type="class" confirmed="yes">org.mvel.integration.VariableResolverFactory</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.optimizers.impl.refl.FieldAccessor.field</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.optimizers.impl.refl.FieldAccessor.nextNode</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.optimizers.impl.refl.FieldAccessor.nextNode</name>
                <outbound type="class" confirmed="yes">org.mvel.AccessorNode</outbound>
                <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.refl.FieldAccessor.getNextNode()</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.refl.FieldAccessor.getValue(java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.refl.FieldAccessor.setNextNode(org.mvel.AccessorNode)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.optimizers.impl.refl.FieldAccessor.setField(java.lang.reflect.Field)</name>
                <outbound type="class" confirmed="no">java.lang.reflect.Field</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.optimizers.impl.refl.FieldAccessor.field</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.optimizers.impl.refl.FieldAccessor.setNextNode(org.mvel.AccessorNode)</name>
                <outbound type="class" confirmed="yes">org.mvel.AccessorNode</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.optimizers.impl.refl.FieldAccessor.nextNode</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.optimizers.impl.refl.FieldAccessor.setValue(java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory, java.lang.Object)</name>
                <outbound type="class" confirmed="no">java.lang.Exception</outbound>
                <outbound type="class" confirmed="no">java.lang.Object</outbound>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="class" confirmed="no">java.lang.Throwable</outbound>
                <outbound type="class" confirmed="no">java.lang.reflect.Field</outbound>
                <outbound type="feature" confirmed="no">java.lang.reflect.Field.set(java.lang.Object, java.lang.Object)</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.CompileException.CompileException(java.lang.String, java.lang.Throwable)</outbound>
                <outbound type="class" confirmed="yes">org.mvel.integration.VariableResolverFactory</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.optimizers.impl.refl.FieldAccessor.field</outbound>
            </feature>
        </class>
        <class confirmed="yes">
            <name>org.mvel.optimizers.impl.refl.Fold</name>
            <outbound type="class" confirmed="no">java.lang.Object</outbound>
            <outbound type="class" confirmed="yes">org.mvel.Accessor</outbound>
            <feature confirmed="yes">
                <name>org.mvel.optimizers.impl.refl.Fold.Fold(char[], org.mvel.Accessor)</name>
                <outbound type="feature" confirmed="no">java.lang.Object.Object()</outbound>
                <outbound type="class" confirmed="yes">org.mvel.Accessor</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.optimizers.impl.refl.Fold.collection</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.optimizers.impl.refl.Fold.expr</outbound>
                <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.refl.ReflectiveAccessorOptimizer.optimizeFold(char[], java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.optimizers.impl.refl.Fold.collection</name>
                <outbound type="class" confirmed="yes">org.mvel.Accessor</outbound>
                <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.refl.Fold.Fold(char[], org.mvel.Accessor)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.refl.Fold.getValue(java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.optimizers.impl.refl.Fold.expr</name>
                <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.refl.Fold.Fold(char[], org.mvel.Accessor)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.refl.Fold.getValue(java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.optimizers.impl.refl.Fold.getValue(java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory)</name>
                <outbound type="class" confirmed="no">java.lang.Object</outbound>
                <outbound type="feature" confirmed="no">java.util.ArrayList.ArrayList()</outbound>
                <outbound type="class" confirmed="no">java.util.Collection</outbound>
                <outbound type="feature" confirmed="no">java.util.Collection.add(java.lang.Object)</outbound>
                <outbound type="feature" confirmed="no">java.util.Collection.iterator()</outbound>
                <outbound type="class" confirmed="no">java.util.Iterator</outbound>
                <outbound type="feature" confirmed="no">java.util.Iterator.hasNext()</outbound>
                <outbound type="feature" confirmed="no">java.util.Iterator.next()</outbound>
                <outbound type="class" confirmed="yes">org.mvel.Accessor</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.Accessor.getValue(java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory)</outbound>
                <outbound type="class" confirmed="yes">org.mvel.integration.VariableResolverFactory</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.optimizers.impl.refl.Fold.collection</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.optimizers.impl.refl.Fold.expr</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.optimizers.impl.refl.Fold.propAccessor</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.optimizers.impl.refl.ReflectiveAccessorOptimizer.ReflectiveAccessorOptimizer()</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.optimizers.impl.refl.ReflectiveAccessorOptimizer.getResultOptPass()</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.optimizers.impl.refl.ReflectiveAccessorOptimizer.optimizeAccessor(char[], java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory, boolean)</outbound>
                <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.refl.ReflectiveAccessorOptimizer.optimizeFold(char[], java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.optimizers.impl.refl.Fold.propAccessor</name>
                <outbound type="class" confirmed="yes">org.mvel.Accessor</outbound>
                <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.refl.Fold.getValue(java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.optimizers.impl.refl.Fold.setValue(java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory, java.lang.Object)</name>
                <outbound type="class" confirmed="no">java.lang.Object</outbound>
                <outbound type="class" confirmed="yes">org.mvel.integration.VariableResolverFactory</outbound>
            </feature>
        </class>
        <class confirmed="yes">
            <name>org.mvel.optimizers.impl.refl.GetterAccessor</name>
            <outbound type="class" confirmed="no">java.lang.Object</outbound>
            <outbound type="class" confirmed="yes">org.mvel.AccessorNode</outbound>
            <feature confirmed="yes">
                <name>org.mvel.optimizers.impl.refl.GetterAccessor.EMPTY</name>
                <outbound type="class" confirmed="no">java.lang.Object</outbound>
                <inbound type="feature" confirmed="yes">org.mvel.MVEL.executeAllExpression(java.io.Serializable[], java.lang.Object, org.mvel.integration.VariableResolverFactory)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.refl.ConstructorAccessor.executeAll(java.lang.Object, org.mvel.integration.VariableResolverFactory)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.refl.GetterAccessor.getValue(java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.refl.GetterAccessor.static {}</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.refl.MethodAccessor.executeAll(java.lang.Object, org.mvel.integration.VariableResolverFactory)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.optimizers.impl.refl.GetterAccessor.GetterAccessor(java.lang.reflect.Method)</name>
                <outbound type="feature" confirmed="no">java.lang.Object.Object()</outbound>
                <outbound type="class" confirmed="no">java.lang.reflect.Method</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.optimizers.impl.refl.GetterAccessor.method</outbound>
                <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.refl.ReflectiveAccessorOptimizer.getBeanProperty(java.lang.Object, java.lang.String)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.optimizers.impl.refl.GetterAccessor.getMethod()</name>
                <outbound type="class" confirmed="no">java.lang.reflect.Method</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.optimizers.impl.refl.GetterAccessor.method</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.optimizers.impl.refl.GetterAccessor.getNextNode()</name>
                <outbound type="class" confirmed="yes">org.mvel.AccessorNode</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.optimizers.impl.refl.GetterAccessor.nextNode</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.optimizers.impl.refl.GetterAccessor.getValue(java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory)</name>
                <outbound type="class" confirmed="no">java.lang.Class</outbound>
                <outbound type="feature" confirmed="no">java.lang.Class.getName()</outbound>
                <outbound type="class" confirmed="no">java.lang.Exception</outbound>
                <outbound type="class" confirmed="no">java.lang.IllegalArgumentException</outbound>
                <outbound type="class" confirmed="no">java.lang.Object</outbound>
                <outbound type="feature" confirmed="no">java.lang.Object.getClass()</outbound>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="feature" confirmed="no">java.lang.String.valueOf(java.lang.Object)</outbound>
                <outbound type="class" confirmed="no">java.lang.StringBuffer</outbound>
                <outbound type="feature" confirmed="no">java.lang.StringBuffer.StringBuffer(java.lang.String)</outbound>
                <outbound type="feature" confirmed="no">java.lang.StringBuffer.append(java.lang.String)</outbound>
                <outbound type="feature" confirmed="no">java.lang.StringBuffer.toString()</outbound>
                <outbound type="class" confirmed="no">java.lang.Throwable</outbound>
                <outbound type="class" confirmed="no">java.lang.reflect.Method</outbound>
                <outbound type="feature" confirmed="no">java.lang.reflect.Method.getDeclaringClass()</outbound>
                <outbound type="feature" confirmed="no">java.lang.reflect.Method.getName()</outbound>
                <outbound type="feature" confirmed="no">java.lang.reflect.Method.invoke(java.lang.Object, java.lang.Object[])</outbound>
                <outbound type="class" confirmed="yes">org.mvel.AccessorNode</outbound>
                <outbound type="feature" confirmed="no">org.mvel.AccessorNode.getValue(java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory)</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.CompileException.CompileException(java.lang.String, java.lang.Throwable)</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.MVEL.getProperty(java.lang.String, java.lang.Object)</outbound>
                <outbound type="class" confirmed="yes">org.mvel.integration.VariableResolverFactory</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.optimizers.impl.refl.GetterAccessor.EMPTY</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.optimizers.impl.refl.GetterAccessor.method</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.optimizers.impl.refl.GetterAccessor.nextNode</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.optimizers.impl.refl.GetterAccessor.method</name>
                <outbound type="class" confirmed="no">java.lang.reflect.Method</outbound>
                <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.refl.GetterAccessor.GetterAccessor(java.lang.reflect.Method)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.refl.GetterAccessor.getMethod()</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.refl.GetterAccessor.getValue(java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.refl.GetterAccessor.toString()</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.optimizers.impl.refl.GetterAccessor.nextNode</name>
                <outbound type="class" confirmed="yes">org.mvel.AccessorNode</outbound>
                <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.refl.GetterAccessor.getNextNode()</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.refl.GetterAccessor.getValue(java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.refl.GetterAccessor.setNextNode(org.mvel.AccessorNode)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.optimizers.impl.refl.GetterAccessor.setNextNode(org.mvel.AccessorNode)</name>
                <outbound type="class" confirmed="yes">org.mvel.AccessorNode</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.optimizers.impl.refl.GetterAccessor.nextNode</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.optimizers.impl.refl.GetterAccessor.setValue(java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory, java.lang.Object)</name>
                <outbound type="class" confirmed="no">java.lang.Object</outbound>
                <outbound type="class" confirmed="yes">org.mvel.integration.VariableResolverFactory</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.optimizers.impl.refl.GetterAccessor.static {}</name>
                <outbound type="class" confirmed="no">java.lang.Object</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.optimizers.impl.refl.GetterAccessor.EMPTY</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.optimizers.impl.refl.GetterAccessor.toString()</name>
                <outbound type="class" confirmed="no">java.lang.Class</outbound>
                <outbound type="feature" confirmed="no">java.lang.Class.getName()</outbound>
                <outbound type="class" confirmed="no">java.lang.Object</outbound>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="feature" confirmed="no">java.lang.String.valueOf(java.lang.Object)</outbound>
                <outbound type="class" confirmed="no">java.lang.StringBuffer</outbound>
                <outbound type="feature" confirmed="no">java.lang.StringBuffer.StringBuffer(java.lang.String)</outbound>
                <outbound type="feature" confirmed="no">java.lang.StringBuffer.append(java.lang.String)</outbound>
                <outbound type="feature" confirmed="no">java.lang.StringBuffer.toString()</outbound>
                <outbound type="class" confirmed="no">java.lang.reflect.Method</outbound>
                <outbound type="feature" confirmed="no">java.lang.reflect.Method.getDeclaringClass()</outbound>
                <outbound type="feature" confirmed="no">java.lang.reflect.Method.getName()</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.optimizers.impl.refl.GetterAccessor.method</outbound>
            </feature>
        </class>
        <class confirmed="yes">
            <name>org.mvel.optimizers.impl.refl.IndexedCharSeqAccessor</name>
            <outbound type="class" confirmed="no">java.lang.Object</outbound>
            <outbound type="class" confirmed="yes">org.mvel.AccessorNode</outbound>
            <feature confirmed="yes">
                <name>org.mvel.optimizers.impl.refl.IndexedCharSeqAccessor.IndexedCharSeqAccessor()</name>
                <outbound type="feature" confirmed="no">java.lang.Object.Object()</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.optimizers.impl.refl.IndexedCharSeqAccessor.IndexedCharSeqAccessor(int)</name>
                <outbound type="feature" confirmed="no">java.lang.Object.Object()</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.optimizers.impl.refl.IndexedCharSeqAccessor.index</outbound>
                <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.refl.ReflectiveAccessorOptimizer.getCollectionProperty(java.lang.Object, java.lang.String)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.optimizers.impl.refl.IndexedCharSeqAccessor.getIndex()</name>
                <outbound type="feature" confirmed="yes">org.mvel.optimizers.impl.refl.IndexedCharSeqAccessor.index</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.optimizers.impl.refl.IndexedCharSeqAccessor.getNextNode()</name>
                <outbound type="class" confirmed="yes">org.mvel.AccessorNode</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.optimizers.impl.refl.IndexedCharSeqAccessor.nextNode</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.optimizers.impl.refl.IndexedCharSeqAccessor.getValue(java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory)</name>
                <outbound type="feature" confirmed="no">java.lang.Character.Character(char)</outbound>
                <outbound type="class" confirmed="no">java.lang.Object</outbound>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="feature" confirmed="no">java.lang.String.charAt(int)</outbound>
                <outbound type="class" confirmed="yes">org.mvel.AccessorNode</outbound>
                <outbound type="feature" confirmed="no">org.mvel.AccessorNode.getValue(java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory)</outbound>
                <outbound type="class" confirmed="yes">org.mvel.integration.VariableResolverFactory</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.optimizers.impl.refl.IndexedCharSeqAccessor.index</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.optimizers.impl.refl.IndexedCharSeqAccessor.nextNode</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.optimizers.impl.refl.IndexedCharSeqAccessor.index</name>
                <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.refl.IndexedCharSeqAccessor.IndexedCharSeqAccessor(int)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.refl.IndexedCharSeqAccessor.getIndex()</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.refl.IndexedCharSeqAccessor.getValue(java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.refl.IndexedCharSeqAccessor.setIndex(int)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.refl.IndexedCharSeqAccessor.toString()</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.optimizers.impl.refl.IndexedCharSeqAccessor.nextNode</name>
                <outbound type="class" confirmed="yes">org.mvel.AccessorNode</outbound>
                <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.refl.IndexedCharSeqAccessor.getNextNode()</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.refl.IndexedCharSeqAccessor.getValue(java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.refl.IndexedCharSeqAccessor.setNextNode(org.mvel.AccessorNode)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.optimizers.impl.refl.IndexedCharSeqAccessor.setIndex(int)</name>
                <outbound type="feature" confirmed="yes">org.mvel.optimizers.impl.refl.IndexedCharSeqAccessor.index</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.optimizers.impl.refl.IndexedCharSeqAccessor.setNextNode(org.mvel.AccessorNode)</name>
                <outbound type="class" confirmed="yes">org.mvel.AccessorNode</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.optimizers.impl.refl.IndexedCharSeqAccessor.nextNode</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.optimizers.impl.refl.IndexedCharSeqAccessor.setValue(java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory, java.lang.Object)</name>
                <outbound type="class" confirmed="no">java.lang.Object</outbound>
                <outbound type="class" confirmed="yes">org.mvel.integration.VariableResolverFactory</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.optimizers.impl.refl.IndexedCharSeqAccessor.toString()</name>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="class" confirmed="no">java.lang.StringBuffer</outbound>
                <outbound type="feature" confirmed="no">java.lang.StringBuffer.StringBuffer(java.lang.String)</outbound>
                <outbound type="feature" confirmed="no">java.lang.StringBuffer.append(int)</outbound>
                <outbound type="feature" confirmed="no">java.lang.StringBuffer.append(java.lang.String)</outbound>
                <outbound type="feature" confirmed="no">java.lang.StringBuffer.toString()</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.optimizers.impl.refl.IndexedCharSeqAccessor.index</outbound>
            </feature>
        </class>
        <class confirmed="yes">
            <name>org.mvel.optimizers.impl.refl.IndexedCharSeqAccessorNest</name>
            <outbound type="class" confirmed="no">java.lang.Object</outbound>
            <outbound type="class" confirmed="yes">org.mvel.AccessorNode</outbound>
            <feature confirmed="yes">
                <name>org.mvel.optimizers.impl.refl.IndexedCharSeqAccessorNest.IndexedCharSeqAccessorNest()</name>
                <outbound type="feature" confirmed="no">java.lang.Object.Object()</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.optimizers.impl.refl.IndexedCharSeqAccessorNest.IndexedCharSeqAccessorNest(org.mvel.ExecutableStatement)</name>
                <outbound type="feature" confirmed="no">java.lang.Object.Object()</outbound>
                <outbound type="class" confirmed="yes">org.mvel.ExecutableStatement</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.optimizers.impl.refl.IndexedCharSeqAccessorNest.index</outbound>
                <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.refl.ReflectiveAccessorOptimizer.getCollectionProperty(java.lang.Object, java.lang.String)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.optimizers.impl.refl.IndexedCharSeqAccessorNest.getIndex()</name>
                <outbound type="class" confirmed="yes">org.mvel.ExecutableStatement</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.optimizers.impl.refl.IndexedCharSeqAccessorNest.index</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.optimizers.impl.refl.IndexedCharSeqAccessorNest.getNextNode()</name>
                <outbound type="class" confirmed="yes">org.mvel.AccessorNode</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.optimizers.impl.refl.IndexedCharSeqAccessorNest.nextNode</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.optimizers.impl.refl.IndexedCharSeqAccessorNest.getValue(java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory)</name>
                <outbound type="feature" confirmed="no">java.lang.Character.Character(char)</outbound>
                <outbound type="class" confirmed="no">java.lang.Integer</outbound>
                <outbound type="feature" confirmed="no">java.lang.Integer.intValue()</outbound>
                <outbound type="class" confirmed="no">java.lang.Object</outbound>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="feature" confirmed="no">java.lang.String.charAt(int)</outbound>
                <outbound type="class" confirmed="yes">org.mvel.AccessorNode</outbound>
                <outbound type="feature" confirmed="no">org.mvel.AccessorNode.getValue(java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory)</outbound>
                <outbound type="class" confirmed="yes">org.mvel.ExecutableStatement</outbound>
                <outbound type="feature" confirmed="no">org.mvel.ExecutableStatement.getValue(java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory)</outbound>
                <outbound type="class" confirmed="yes">org.mvel.integration.VariableResolverFactory</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.optimizers.impl.refl.IndexedCharSeqAccessorNest.index</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.optimizers.impl.refl.IndexedCharSeqAccessorNest.nextNode</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.optimizers.impl.refl.IndexedCharSeqAccessorNest.index</name>
                <outbound type="class" confirmed="yes">org.mvel.ExecutableStatement</outbound>
                <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.refl.IndexedCharSeqAccessorNest.IndexedCharSeqAccessorNest(org.mvel.ExecutableStatement)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.refl.IndexedCharSeqAccessorNest.getIndex()</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.refl.IndexedCharSeqAccessorNest.getValue(java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.refl.IndexedCharSeqAccessorNest.setIndex(org.mvel.ExecutableStatement)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.refl.IndexedCharSeqAccessorNest.toString()</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.optimizers.impl.refl.IndexedCharSeqAccessorNest.nextNode</name>
                <outbound type="class" confirmed="yes">org.mvel.AccessorNode</outbound>
                <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.refl.IndexedCharSeqAccessorNest.getNextNode()</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.refl.IndexedCharSeqAccessorNest.getValue(java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.refl.IndexedCharSeqAccessorNest.setNextNode(org.mvel.AccessorNode)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.optimizers.impl.refl.IndexedCharSeqAccessorNest.setIndex(org.mvel.ExecutableStatement)</name>
                <outbound type="class" confirmed="yes">org.mvel.ExecutableStatement</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.optimizers.impl.refl.IndexedCharSeqAccessorNest.index</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.optimizers.impl.refl.IndexedCharSeqAccessorNest.setNextNode(org.mvel.AccessorNode)</name>
                <outbound type="class" confirmed="yes">org.mvel.AccessorNode</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.optimizers.impl.refl.IndexedCharSeqAccessorNest.nextNode</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.optimizers.impl.refl.IndexedCharSeqAccessorNest.setValue(java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory, java.lang.Object)</name>
                <outbound type="class" confirmed="no">java.lang.Object</outbound>
                <outbound type="class" confirmed="yes">org.mvel.integration.VariableResolverFactory</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.optimizers.impl.refl.IndexedCharSeqAccessorNest.toString()</name>
                <outbound type="class" confirmed="no">java.lang.Object</outbound>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="class" confirmed="no">java.lang.StringBuffer</outbound>
                <outbound type="feature" confirmed="no">java.lang.StringBuffer.StringBuffer(java.lang.String)</outbound>
                <outbound type="feature" confirmed="no">java.lang.StringBuffer.append(java.lang.Object)</outbound>
                <outbound type="feature" confirmed="no">java.lang.StringBuffer.append(java.lang.String)</outbound>
                <outbound type="feature" confirmed="no">java.lang.StringBuffer.toString()</outbound>
                <outbound type="class" confirmed="yes">org.mvel.ExecutableStatement</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.optimizers.impl.refl.IndexedCharSeqAccessorNest.index</outbound>
            </feature>
        </class>
        <class confirmed="yes">
            <name>org.mvel.optimizers.impl.refl.ListAccessor</name>
            <outbound type="class" confirmed="no">java.lang.Object</outbound>
            <outbound type="class" confirmed="yes">org.mvel.AccessorNode</outbound>
            <feature confirmed="yes">
                <name>org.mvel.optimizers.impl.refl.ListAccessor.ListAccessor()</name>
                <outbound type="feature" confirmed="no">java.lang.Object.Object()</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.optimizers.impl.refl.ListAccessor.ListAccessor(int)</name>
                <outbound type="feature" confirmed="no">java.lang.Object.Object()</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.optimizers.impl.refl.ListAccessor.index</outbound>
                <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.refl.ReflectiveAccessorOptimizer.getCollectionProperty(java.lang.Object, java.lang.String)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.optimizers.impl.refl.ListAccessor.getIndex()</name>
                <outbound type="feature" confirmed="yes">org.mvel.optimizers.impl.refl.ListAccessor.index</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.optimizers.impl.refl.ListAccessor.getNextNode()</name>
                <outbound type="class" confirmed="yes">org.mvel.AccessorNode</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.optimizers.impl.refl.ListAccessor.nextNode</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.optimizers.impl.refl.ListAccessor.getValue(java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory)</name>
                <outbound type="class" confirmed="no">java.lang.Object</outbound>
                <outbound type="class" confirmed="no">java.util.List</outbound>
                <outbound type="feature" confirmed="no">java.util.List.get(int)</outbound>
                <outbound type="class" confirmed="yes">org.mvel.AccessorNode</outbound>
                <outbound type="feature" confirmed="no">org.mvel.AccessorNode.getValue(java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory)</outbound>
                <outbound type="class" confirmed="yes">org.mvel.integration.VariableResolverFactory</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.optimizers.impl.refl.ListAccessor.index</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.optimizers.impl.refl.ListAccessor.nextNode</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.optimizers.impl.refl.ListAccessor.index</name>
                <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.refl.ListAccessor.ListAccessor(int)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.refl.ListAccessor.getIndex()</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.refl.ListAccessor.getValue(java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.refl.ListAccessor.setIndex(int)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.refl.ListAccessor.setValue(java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory, java.lang.Object)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.refl.ListAccessor.toString()</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.optimizers.impl.refl.ListAccessor.nextNode</name>
                <outbound type="class" confirmed="yes">org.mvel.AccessorNode</outbound>
                <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.refl.ListAccessor.getNextNode()</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.refl.ListAccessor.getValue(java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.refl.ListAccessor.setNextNode(org.mvel.AccessorNode)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.optimizers.impl.refl.ListAccessor.setIndex(int)</name>
                <outbound type="feature" confirmed="yes">org.mvel.optimizers.impl.refl.ListAccessor.index</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.optimizers.impl.refl.ListAccessor.setNextNode(org.mvel.AccessorNode)</name>
                <outbound type="class" confirmed="yes">org.mvel.AccessorNode</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.optimizers.impl.refl.ListAccessor.nextNode</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.optimizers.impl.refl.ListAccessor.setValue(java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory, java.lang.Object)</name>
                <outbound type="class" confirmed="no">java.lang.Object</outbound>
                <outbound type="class" confirmed="no">java.util.List</outbound>
                <outbound type="feature" confirmed="no">java.util.List.set(int, java.lang.Object)</outbound>
                <outbound type="class" confirmed="yes">org.mvel.integration.VariableResolverFactory</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.optimizers.impl.refl.ListAccessor.index</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.optimizers.impl.refl.ListAccessor.toString()</name>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="class" confirmed="no">java.lang.StringBuffer</outbound>
                <outbound type="feature" confirmed="no">java.lang.StringBuffer.StringBuffer(java.lang.String)</outbound>
                <outbound type="feature" confirmed="no">java.lang.StringBuffer.append(int)</outbound>
                <outbound type="feature" confirmed="no">java.lang.StringBuffer.append(java.lang.String)</outbound>
                <outbound type="feature" confirmed="no">java.lang.StringBuffer.toString()</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.optimizers.impl.refl.ListAccessor.index</outbound>
            </feature>
        </class>
        <class confirmed="yes">
            <name>org.mvel.optimizers.impl.refl.ListAccessorNest</name>
            <outbound type="class" confirmed="no">java.lang.Object</outbound>
            <outbound type="class" confirmed="yes">org.mvel.AccessorNode</outbound>
            <feature confirmed="yes">
                <name>org.mvel.optimizers.impl.refl.ListAccessorNest.ListAccessorNest()</name>
                <outbound type="feature" confirmed="no">java.lang.Object.Object()</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.optimizers.impl.refl.ListAccessorNest.ListAccessorNest(java.lang.String)</name>
                <outbound type="class" confirmed="no">java.io.Serializable</outbound>
                <outbound type="feature" confirmed="no">java.lang.Object.Object()</outbound>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="class" confirmed="yes">org.mvel.ExecutableStatement</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.optimizers.impl.refl.ListAccessorNest.index</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.util.ParseTools.subCompileExpression(java.lang.String)</outbound>
                <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.refl.ReflectiveAccessorOptimizer.optimizeSetAccessor(char[], java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory, boolean, java.lang.Object)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.optimizers.impl.refl.ListAccessorNest.ListAccessorNest(org.mvel.ExecutableStatement)</name>
                <outbound type="feature" confirmed="no">java.lang.Object.Object()</outbound>
                <outbound type="class" confirmed="yes">org.mvel.ExecutableStatement</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.optimizers.impl.refl.ListAccessorNest.index</outbound>
                <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.refl.ReflectiveAccessorOptimizer.getCollectionProperty(java.lang.Object, java.lang.String)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.optimizers.impl.refl.ListAccessorNest.getIndex()</name>
                <outbound type="class" confirmed="yes">org.mvel.ExecutableStatement</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.optimizers.impl.refl.ListAccessorNest.index</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.optimizers.impl.refl.ListAccessorNest.getNextNode()</name>
                <outbound type="class" confirmed="yes">org.mvel.AccessorNode</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.optimizers.impl.refl.ListAccessorNest.nextNode</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.optimizers.impl.refl.ListAccessorNest.getValue(java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory)</name>
                <outbound type="class" confirmed="no">java.lang.Integer</outbound>
                <outbound type="feature" confirmed="no">java.lang.Integer.intValue()</outbound>
                <outbound type="class" confirmed="no">java.lang.Object</outbound>
                <outbound type="class" confirmed="no">java.util.List</outbound>
                <outbound type="feature" confirmed="no">java.util.List.get(int)</outbound>
                <outbound type="class" confirmed="yes">org.mvel.AccessorNode</outbound>
                <outbound type="feature" confirmed="no">org.mvel.AccessorNode.getValue(java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory)</outbound>
                <outbound type="class" confirmed="yes">org.mvel.ExecutableStatement</outbound>
                <outbound type="feature" confirmed="no">org.mvel.ExecutableStatement.getValue(java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory)</outbound>
                <outbound type="class" confirmed="yes">org.mvel.integration.VariableResolverFactory</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.optimizers.impl.refl.ListAccessorNest.index</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.optimizers.impl.refl.ListAccessorNest.nextNode</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.optimizers.impl.refl.ListAccessorNest.index</name>
                <outbound type="class" confirmed="yes">org.mvel.ExecutableStatement</outbound>
                <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.refl.ListAccessorNest.ListAccessorNest(java.lang.String)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.refl.ListAccessorNest.ListAccessorNest(org.mvel.ExecutableStatement)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.refl.ListAccessorNest.getIndex()</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.refl.ListAccessorNest.getValue(java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.refl.ListAccessorNest.setIndex(org.mvel.ExecutableStatement)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.refl.ListAccessorNest.setValue(java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory, java.lang.Object)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.refl.ListAccessorNest.toString()</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.optimizers.impl.refl.ListAccessorNest.nextNode</name>
                <outbound type="class" confirmed="yes">org.mvel.AccessorNode</outbound>
                <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.refl.ListAccessorNest.getNextNode()</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.refl.ListAccessorNest.getValue(java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.refl.ListAccessorNest.setNextNode(org.mvel.AccessorNode)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.optimizers.impl.refl.ListAccessorNest.setIndex(org.mvel.ExecutableStatement)</name>
                <outbound type="class" confirmed="yes">org.mvel.ExecutableStatement</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.optimizers.impl.refl.ListAccessorNest.index</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.optimizers.impl.refl.ListAccessorNest.setNextNode(org.mvel.AccessorNode)</name>
                <outbound type="class" confirmed="yes">org.mvel.AccessorNode</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.optimizers.impl.refl.ListAccessorNest.nextNode</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.optimizers.impl.refl.ListAccessorNest.setValue(java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory, java.lang.Object)</name>
                <outbound type="class" confirmed="no">java.lang.Integer</outbound>
                <outbound type="feature" confirmed="no">java.lang.Integer.intValue()</outbound>
                <outbound type="class" confirmed="no">java.lang.Object</outbound>
                <outbound type="class" confirmed="no">java.util.List</outbound>
                <outbound type="feature" confirmed="no">java.util.List.set(int, java.lang.Object)</outbound>
                <outbound type="class" confirmed="yes">org.mvel.ExecutableStatement</outbound>
                <outbound type="feature" confirmed="no">org.mvel.ExecutableStatement.getValue(java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory)</outbound>
                <outbound type="class" confirmed="yes">org.mvel.integration.VariableResolverFactory</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.optimizers.impl.refl.ListAccessorNest.index</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.optimizers.impl.refl.ListAccessorNest.toString()</name>
                <outbound type="class" confirmed="no">java.lang.Object</outbound>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="class" confirmed="no">java.lang.StringBuffer</outbound>
                <outbound type="feature" confirmed="no">java.lang.StringBuffer.StringBuffer(java.lang.String)</outbound>
                <outbound type="feature" confirmed="no">java.lang.StringBuffer.append(java.lang.Object)</outbound>
                <outbound type="feature" confirmed="no">java.lang.StringBuffer.append(java.lang.String)</outbound>
                <outbound type="feature" confirmed="no">java.lang.StringBuffer.toString()</outbound>
                <outbound type="class" confirmed="yes">org.mvel.ExecutableStatement</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.optimizers.impl.refl.ListAccessorNest.index</outbound>
            </feature>
        </class>
        <class confirmed="yes">
            <name>org.mvel.optimizers.impl.refl.MapAccessor</name>
            <outbound type="class" confirmed="no">java.lang.Object</outbound>
            <outbound type="class" confirmed="yes">org.mvel.AccessorNode</outbound>
            <feature confirmed="yes">
                <name>org.mvel.optimizers.impl.refl.MapAccessor.MapAccessor()</name>
                <outbound type="feature" confirmed="no">java.lang.Object.Object()</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.optimizers.impl.refl.MapAccessor.MapAccessor(java.lang.Object)</name>
                <outbound type="class" confirmed="no">java.lang.Object</outbound>
                <outbound type="feature" confirmed="no">java.lang.Object.Object()</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.optimizers.impl.refl.MapAccessor.property</outbound>
                <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.refl.ReflectiveAccessorOptimizer.getBeanProperty(java.lang.Object, java.lang.String)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.refl.ReflectiveAccessorOptimizer.getCollectionProperty(java.lang.Object, java.lang.String)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.refl.ReflectiveAccessorOptimizer.optimizeSetAccessor(char[], java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory, boolean, java.lang.Object)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.optimizers.impl.refl.MapAccessor.getNextNode()</name>
                <outbound type="class" confirmed="yes">org.mvel.AccessorNode</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.optimizers.impl.refl.MapAccessor.nextNode</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.optimizers.impl.refl.MapAccessor.getProperty()</name>
                <outbound type="class" confirmed="no">java.lang.Object</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.optimizers.impl.refl.MapAccessor.property</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.optimizers.impl.refl.MapAccessor.getValue(java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory)</name>
                <outbound type="class" confirmed="no">java.lang.Object</outbound>
                <outbound type="class" confirmed="no">java.util.Map</outbound>
                <outbound type="feature" confirmed="no">java.util.Map.get(java.lang.Object)</outbound>
                <outbound type="class" confirmed="yes">org.mvel.AccessorNode</outbound>
                <outbound type="feature" confirmed="no">org.mvel.AccessorNode.getValue(java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory)</outbound>
                <outbound type="class" confirmed="yes">org.mvel.integration.VariableResolverFactory</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.optimizers.impl.refl.MapAccessor.nextNode</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.optimizers.impl.refl.MapAccessor.property</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.optimizers.impl.refl.MapAccessor.nextNode</name>
                <outbound type="class" confirmed="yes">org.mvel.AccessorNode</outbound>
                <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.refl.MapAccessor.getNextNode()</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.refl.MapAccessor.getValue(java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.refl.MapAccessor.setNextNode(org.mvel.AccessorNode)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.optimizers.impl.refl.MapAccessor.property</name>
                <outbound type="class" confirmed="no">java.lang.Object</outbound>
                <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.refl.MapAccessor.MapAccessor(java.lang.Object)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.refl.MapAccessor.getProperty()</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.refl.MapAccessor.getValue(java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.refl.MapAccessor.setProperty(java.lang.Object)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.refl.MapAccessor.setValue(java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory, java.lang.Object)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.refl.MapAccessor.toString()</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.optimizers.impl.refl.MapAccessor.setNextNode(org.mvel.AccessorNode)</name>
                <outbound type="class" confirmed="yes">org.mvel.AccessorNode</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.optimizers.impl.refl.MapAccessor.nextNode</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.optimizers.impl.refl.MapAccessor.setProperty(java.lang.Object)</name>
                <outbound type="class" confirmed="no">java.lang.Object</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.optimizers.impl.refl.MapAccessor.property</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.optimizers.impl.refl.MapAccessor.setValue(java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory, java.lang.Object)</name>
                <outbound type="class" confirmed="no">java.lang.Object</outbound>
                <outbound type="class" confirmed="no">java.util.Map</outbound>
                <outbound type="feature" confirmed="no">java.util.Map.put(java.lang.Object, java.lang.Object)</outbound>
                <outbound type="class" confirmed="yes">org.mvel.integration.VariableResolverFactory</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.optimizers.impl.refl.MapAccessor.property</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.optimizers.impl.refl.MapAccessor.toString()</name>
                <outbound type="class" confirmed="no">java.lang.Object</outbound>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="class" confirmed="no">java.lang.StringBuffer</outbound>
                <outbound type="feature" confirmed="no">java.lang.StringBuffer.StringBuffer(java.lang.String)</outbound>
                <outbound type="feature" confirmed="no">java.lang.StringBuffer.append(java.lang.Object)</outbound>
                <outbound type="feature" confirmed="no">java.lang.StringBuffer.append(java.lang.String)</outbound>
                <outbound type="feature" confirmed="no">java.lang.StringBuffer.toString()</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.optimizers.impl.refl.MapAccessor.property</outbound>
            </feature>
        </class>
        <class confirmed="yes">
            <name>org.mvel.optimizers.impl.refl.MapAccessorNest</name>
            <outbound type="class" confirmed="no">java.lang.Object</outbound>
            <outbound type="class" confirmed="yes">org.mvel.AccessorNode</outbound>
            <feature confirmed="yes">
                <name>org.mvel.optimizers.impl.refl.MapAccessorNest.MapAccessorNest()</name>
                <outbound type="feature" confirmed="no">java.lang.Object.Object()</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.optimizers.impl.refl.MapAccessorNest.MapAccessorNest(java.lang.String)</name>
                <outbound type="class" confirmed="no">java.io.Serializable</outbound>
                <outbound type="feature" confirmed="no">java.lang.Object.Object()</outbound>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="class" confirmed="yes">org.mvel.ExecutableStatement</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.optimizers.impl.refl.MapAccessorNest.property</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.util.ParseTools.subCompileExpression(java.lang.String)</outbound>
                <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.refl.ReflectiveAccessorOptimizer.optimizeSetAccessor(char[], java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory, boolean, java.lang.Object)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.optimizers.impl.refl.MapAccessorNest.MapAccessorNest(org.mvel.ExecutableStatement)</name>
                <outbound type="feature" confirmed="no">java.lang.Object.Object()</outbound>
                <outbound type="class" confirmed="yes">org.mvel.ExecutableStatement</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.optimizers.impl.refl.MapAccessorNest.property</outbound>
                <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.refl.ReflectiveAccessorOptimizer.getCollectionProperty(java.lang.Object, java.lang.String)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.optimizers.impl.refl.MapAccessorNest.getNextNode()</name>
                <outbound type="class" confirmed="yes">org.mvel.AccessorNode</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.optimizers.impl.refl.MapAccessorNest.nextNode</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.optimizers.impl.refl.MapAccessorNest.getProperty()</name>
                <outbound type="class" confirmed="yes">org.mvel.ExecutableStatement</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.optimizers.impl.refl.MapAccessorNest.property</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.optimizers.impl.refl.MapAccessorNest.getValue(java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory)</name>
                <outbound type="class" confirmed="no">java.lang.Object</outbound>
                <outbound type="class" confirmed="no">java.util.Map</outbound>
                <outbound type="feature" confirmed="no">java.util.Map.get(java.lang.Object)</outbound>
                <outbound type="class" confirmed="yes">org.mvel.AccessorNode</outbound>
                <outbound type="feature" confirmed="no">org.mvel.AccessorNode.getValue(java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory)</outbound>
                <outbound type="class" confirmed="yes">org.mvel.ExecutableStatement</outbound>
                <outbound type="feature" confirmed="no">org.mvel.ExecutableStatement.getValue(java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory)</outbound>
                <outbound type="class" confirmed="yes">org.mvel.integration.VariableResolverFactory</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.optimizers.impl.refl.MapAccessorNest.nextNode</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.optimizers.impl.refl.MapAccessorNest.property</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.optimizers.impl.refl.MapAccessorNest.nextNode</name>
                <outbound type="class" confirmed="yes">org.mvel.AccessorNode</outbound>
                <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.refl.MapAccessorNest.getNextNode()</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.refl.MapAccessorNest.getValue(java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.refl.MapAccessorNest.setNextNode(org.mvel.AccessorNode)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.optimizers.impl.refl.MapAccessorNest.property</name>
                <outbound type="class" confirmed="yes">org.mvel.ExecutableStatement</outbound>
                <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.refl.MapAccessorNest.MapAccessorNest(java.lang.String)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.refl.MapAccessorNest.MapAccessorNest(org.mvel.ExecutableStatement)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.refl.MapAccessorNest.getProperty()</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.refl.MapAccessorNest.getValue(java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.refl.MapAccessorNest.setProperty(org.mvel.ExecutableStatement)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.refl.MapAccessorNest.setValue(java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory, java.lang.Object)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.refl.MapAccessorNest.toString()</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.optimizers.impl.refl.MapAccessorNest.setNextNode(org.mvel.AccessorNode)</name>
                <outbound type="class" confirmed="yes">org.mvel.AccessorNode</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.optimizers.impl.refl.MapAccessorNest.nextNode</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.optimizers.impl.refl.MapAccessorNest.setProperty(org.mvel.ExecutableStatement)</name>
                <outbound type="class" confirmed="yes">org.mvel.ExecutableStatement</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.optimizers.impl.refl.MapAccessorNest.property</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.optimizers.impl.refl.MapAccessorNest.setValue(java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory, java.lang.Object)</name>
                <outbound type="class" confirmed="no">java.lang.Object</outbound>
                <outbound type="class" confirmed="no">java.util.Map</outbound>
                <outbound type="feature" confirmed="no">java.util.Map.put(java.lang.Object, java.lang.Object)</outbound>
                <outbound type="class" confirmed="yes">org.mvel.ExecutableStatement</outbound>
                <outbound type="feature" confirmed="no">org.mvel.ExecutableStatement.getValue(java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory)</outbound>
                <outbound type="class" confirmed="yes">org.mvel.integration.VariableResolverFactory</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.optimizers.impl.refl.MapAccessorNest.property</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.optimizers.impl.refl.MapAccessorNest.toString()</name>
                <outbound type="class" confirmed="no">java.lang.Object</outbound>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="class" confirmed="no">java.lang.StringBuffer</outbound>
                <outbound type="feature" confirmed="no">java.lang.StringBuffer.StringBuffer(java.lang.String)</outbound>
                <outbound type="feature" confirmed="no">java.lang.StringBuffer.append(java.lang.Object)</outbound>
                <outbound type="feature" confirmed="no">java.lang.StringBuffer.append(java.lang.String)</outbound>
                <outbound type="feature" confirmed="no">java.lang.StringBuffer.toString()</outbound>
                <outbound type="class" confirmed="yes">org.mvel.ExecutableStatement</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.optimizers.impl.refl.MapAccessorNest.property</outbound>
            </feature>
        </class>
        <class confirmed="yes">
            <name>org.mvel.optimizers.impl.refl.MethodAccessor</name>
            <outbound type="class" confirmed="no">java.lang.Object</outbound>
            <outbound type="class" confirmed="yes">org.mvel.AccessorNode</outbound>
            <feature confirmed="yes">
                <name>org.mvel.optimizers.impl.refl.MethodAccessor.MethodAccessor()</name>
                <outbound type="feature" confirmed="no">java.lang.Object.Object()</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.optimizers.impl.refl.MethodAccessor.coercionNeeded</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.optimizers.impl.refl.MethodAccessor.MethodAccessor(java.lang.reflect.Method, org.mvel.ExecutableStatement[])</name>
                <outbound type="class" confirmed="no">java.lang.Class</outbound>
                <outbound type="feature" confirmed="no">java.lang.Object.Object()</outbound>
                <outbound type="class" confirmed="no">java.lang.reflect.Method</outbound>
                <outbound type="feature" confirmed="no">java.lang.reflect.Method.getParameterTypes()</outbound>
                <outbound type="class" confirmed="yes">org.mvel.ExecutableStatement</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.optimizers.impl.refl.MethodAccessor.coercionNeeded</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.optimizers.impl.refl.MethodAccessor.length</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.optimizers.impl.refl.MethodAccessor.method</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.optimizers.impl.refl.MethodAccessor.parameterTypes</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.optimizers.impl.refl.MethodAccessor.parms</outbound>
                <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.refl.ReflectiveAccessorOptimizer.getMethod(java.lang.Object, java.lang.String)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.optimizers.impl.refl.MethodAccessor.coercionNeeded</name>
                <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.refl.MethodAccessor.MethodAccessor()</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.refl.MethodAccessor.MethodAccessor(java.lang.reflect.Method, org.mvel.ExecutableStatement[])</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.refl.MethodAccessor.getValue(java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.optimizers.impl.refl.MethodAccessor.executeAll(java.lang.Object, org.mvel.integration.VariableResolverFactory)</name>
                <outbound type="class" confirmed="no">java.lang.Object</outbound>
                <outbound type="class" confirmed="yes">org.mvel.ExecutableStatement</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.ExecutableStatement.getValue(java.lang.Object, org.mvel.integration.VariableResolverFactory)</outbound>
                <outbound type="class" confirmed="yes">org.mvel.integration.VariableResolverFactory</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.optimizers.impl.refl.GetterAccessor.EMPTY</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.optimizers.impl.refl.MethodAccessor.length</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.optimizers.impl.refl.MethodAccessor.parms</outbound>
                <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.refl.MethodAccessor.getValue(java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.optimizers.impl.refl.MethodAccessor.executeAndCoerce(java.lang.Class[], java.lang.Object, org.mvel.integration.VariableResolverFactory)</name>
                <outbound type="class" confirmed="no">java.lang.Class</outbound>
                <outbound type="class" confirmed="no">java.lang.Object</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.DataConversion.convert(java.lang.Object, java.lang.Class)</outbound>
                <outbound type="class" confirmed="yes">org.mvel.ExecutableStatement</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.ExecutableStatement.getValue(java.lang.Object, org.mvel.integration.VariableResolverFactory)</outbound>
                <outbound type="class" confirmed="yes">org.mvel.integration.VariableResolverFactory</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.optimizers.impl.refl.MethodAccessor.length</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.optimizers.impl.refl.MethodAccessor.parms</outbound>
                <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.refl.MethodAccessor.getValue(java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.optimizers.impl.refl.MethodAccessor.getMethod()</name>
                <outbound type="class" confirmed="no">java.lang.reflect.Method</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.optimizers.impl.refl.MethodAccessor.method</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.optimizers.impl.refl.MethodAccessor.getNextNode()</name>
                <outbound type="class" confirmed="yes">org.mvel.AccessorNode</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.optimizers.impl.refl.MethodAccessor.nextNode</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.optimizers.impl.refl.MethodAccessor.getParms()</name>
                <outbound type="class" confirmed="yes">org.mvel.ExecutableStatement</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.optimizers.impl.refl.MethodAccessor.parms</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.optimizers.impl.refl.MethodAccessor.getValue(java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory)</name>
                <outbound type="class" confirmed="no">java.lang.Class</outbound>
                <outbound type="class" confirmed="no">java.lang.Exception</outbound>
                <outbound type="class" confirmed="no">java.lang.IllegalArgumentException</outbound>
                <outbound type="class" confirmed="no">java.lang.Object</outbound>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="class" confirmed="no">java.lang.Throwable</outbound>
                <outbound type="class" confirmed="no">java.lang.reflect.Method</outbound>
                <outbound type="feature" confirmed="no">java.lang.reflect.Method.invoke(java.lang.Object, java.lang.Object[])</outbound>
                <outbound type="class" confirmed="yes">org.mvel.AccessorNode</outbound>
                <outbound type="feature" confirmed="no">org.mvel.AccessorNode.getValue(java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory)</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.CompileException.CompileException(java.lang.String, java.lang.Throwable)</outbound>
                <outbound type="class" confirmed="yes">org.mvel.integration.VariableResolverFactory</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.optimizers.impl.refl.MethodAccessor.coercionNeeded</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.optimizers.impl.refl.MethodAccessor.executeAll(java.lang.Object, org.mvel.integration.VariableResolverFactory)</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.optimizers.impl.refl.MethodAccessor.executeAndCoerce(java.lang.Class[], java.lang.Object, org.mvel.integration.VariableResolverFactory)</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.optimizers.impl.refl.MethodAccessor.method</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.optimizers.impl.refl.MethodAccessor.nextNode</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.optimizers.impl.refl.MethodAccessor.parameterTypes</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.optimizers.impl.refl.MethodAccessor.length</name>
                <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.refl.MethodAccessor.MethodAccessor(java.lang.reflect.Method, org.mvel.ExecutableStatement[])</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.refl.MethodAccessor.executeAll(java.lang.Object, org.mvel.integration.VariableResolverFactory)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.refl.MethodAccessor.executeAndCoerce(java.lang.Class[], java.lang.Object, org.mvel.integration.VariableResolverFactory)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.refl.MethodAccessor.setMethod(java.lang.reflect.Method)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.optimizers.impl.refl.MethodAccessor.method</name>
                <outbound type="class" confirmed="no">java.lang.reflect.Method</outbound>
                <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.refl.MethodAccessor.MethodAccessor(java.lang.reflect.Method, org.mvel.ExecutableStatement[])</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.refl.MethodAccessor.getMethod()</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.refl.MethodAccessor.getValue(java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.refl.MethodAccessor.setMethod(java.lang.reflect.Method)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.optimizers.impl.refl.MethodAccessor.nextNode</name>
                <outbound type="class" confirmed="yes">org.mvel.AccessorNode</outbound>
                <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.refl.MethodAccessor.getNextNode()</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.refl.MethodAccessor.getValue(java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.refl.MethodAccessor.setNextNode(org.mvel.AccessorNode)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.optimizers.impl.refl.MethodAccessor.parameterTypes</name>
                <outbound type="class" confirmed="no">java.lang.Class</outbound>
                <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.refl.MethodAccessor.MethodAccessor(java.lang.reflect.Method, org.mvel.ExecutableStatement[])</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.refl.MethodAccessor.getValue(java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.refl.MethodAccessor.setMethod(java.lang.reflect.Method)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.optimizers.impl.refl.MethodAccessor.parms</name>
                <outbound type="class" confirmed="yes">org.mvel.ExecutableStatement</outbound>
                <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.refl.MethodAccessor.MethodAccessor(java.lang.reflect.Method, org.mvel.ExecutableStatement[])</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.refl.MethodAccessor.executeAll(java.lang.Object, org.mvel.integration.VariableResolverFactory)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.refl.MethodAccessor.executeAndCoerce(java.lang.Class[], java.lang.Object, org.mvel.integration.VariableResolverFactory)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.refl.MethodAccessor.getParms()</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.refl.MethodAccessor.setParms(org.mvel.ExecutableStatement[])</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.optimizers.impl.refl.MethodAccessor.setMethod(java.lang.reflect.Method)</name>
                <outbound type="class" confirmed="no">java.lang.Class</outbound>
                <outbound type="class" confirmed="no">java.lang.reflect.Method</outbound>
                <outbound type="feature" confirmed="no">java.lang.reflect.Method.getParameterTypes()</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.optimizers.impl.refl.MethodAccessor.length</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.optimizers.impl.refl.MethodAccessor.method</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.optimizers.impl.refl.MethodAccessor.parameterTypes</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.optimizers.impl.refl.MethodAccessor.setNextNode(org.mvel.AccessorNode)</name>
                <outbound type="class" confirmed="yes">org.mvel.AccessorNode</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.optimizers.impl.refl.MethodAccessor.nextNode</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.optimizers.impl.refl.MethodAccessor.setParms(org.mvel.ExecutableStatement[])</name>
                <outbound type="class" confirmed="yes">org.mvel.ExecutableStatement</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.optimizers.impl.refl.MethodAccessor.parms</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.optimizers.impl.refl.MethodAccessor.setValue(java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory, java.lang.Object)</name>
                <outbound type="class" confirmed="no">java.lang.Object</outbound>
                <outbound type="class" confirmed="yes">org.mvel.integration.VariableResolverFactory</outbound>
            </feature>
        </class>
        <class confirmed="yes">
            <name>org.mvel.optimizers.impl.refl.ReflectiveAccessorOptimizer</name>
            <outbound type="class" confirmed="yes">org.mvel.optimizers.AbstractOptimizer</outbound>
            <outbound type="class" confirmed="yes">org.mvel.optimizers.AccessorOptimizer</outbound>
            <feature confirmed="yes">
                <name>org.mvel.optimizers.impl.refl.ReflectiveAccessorOptimizer.DONE</name>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.optimizers.impl.refl.ReflectiveAccessorOptimizer.EMPTYARG</name>
                <outbound type="class" confirmed="no">java.lang.Object</outbound>
                <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.refl.ReflectiveAccessorOptimizer.getBeanProperty(java.lang.Object, java.lang.String)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.refl.ReflectiveAccessorOptimizer.static {}</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.optimizers.impl.refl.ReflectiveAccessorOptimizer.EMPTYCLS</name>
                <outbound type="class" confirmed="no">java.lang.Class</outbound>
                <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.refl.ReflectiveAccessorOptimizer.compileConstructor(char[], java.lang.Object, org.mvel.integration.VariableResolverFactory)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.refl.ReflectiveAccessorOptimizer.static {}</inbound>
            </feature>
            <feature confirmed="no">
                <name>org.mvel.optimizers.impl.refl.ReflectiveAccessorOptimizer.LITERALS</name>
                <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.refl.ReflectiveAccessorOptimizer.getBeanProperty(java.lang.Object, java.lang.String)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.optimizers.impl.refl.ReflectiveAccessorOptimizer.REFLECTIVE_ACCESSOR_CACHE</name>
                <outbound type="class" confirmed="no">java.util.Map</outbound>
                <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.refl.ReflectiveAccessorOptimizer.get(java.lang.String, java.lang.Object)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.refl.ReflectiveAccessorOptimizer.static {}</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.optimizers.impl.refl.ReflectiveAccessorOptimizer.ReflectiveAccessorOptimizer()</name>
                <outbound type="feature" confirmed="yes">org.mvel.optimizers.AbstractOptimizer.AbstractOptimizer()</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.optimizers.impl.refl.ReflectiveAccessorOptimizer.first</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.optimizers.impl.refl.ReflectiveAccessorOptimizer.literal</outbound>
                <inbound type="feature" confirmed="yes">org.mvel.optimizers.OptimizerFactory.static {}</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.refl.Fold.getValue(java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.refl.ReflectiveAccessorOptimizer.get(java.lang.String, java.lang.Object)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.refl.ReflectiveAccessorOptimizer.main(java.lang.String[])</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.optimizers.impl.refl.ReflectiveAccessorOptimizer.ReflectiveAccessorOptimizer(char[], java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory)</name>
                <outbound type="class" confirmed="no">java.lang.Object</outbound>
                <outbound type="class" confirmed="yes">org.mvel.integration.VariableResolverFactory</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.optimizers.AbstractOptimizer.AbstractOptimizer()</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.optimizers.impl.refl.ReflectiveAccessorOptimizer.ctx</outbound>
                <outbound type="feature" confirmed="no">org.mvel.optimizers.impl.refl.ReflectiveAccessorOptimizer.expr</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.optimizers.impl.refl.ReflectiveAccessorOptimizer.first</outbound>
                <outbound type="feature" confirmed="no">org.mvel.optimizers.impl.refl.ReflectiveAccessorOptimizer.length</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.optimizers.impl.refl.ReflectiveAccessorOptimizer.literal</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.optimizers.impl.refl.ReflectiveAccessorOptimizer.thisRef</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.optimizers.impl.refl.ReflectiveAccessorOptimizer.variableFactory</outbound>
                <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.refl.ReflectiveAccessorOptimizer.compileConstructor(char[], java.lang.Object, org.mvel.integration.VariableResolverFactory)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.optimizers.impl.refl.ReflectiveAccessorOptimizer._getAccessor(java.lang.Object)</name>
                <outbound type="class" confirmed="no">java.lang.Class</outbound>
                <outbound type="feature" confirmed="no">java.lang.Class.forName(java.lang.String)</outbound>
                <outbound type="class" confirmed="no">java.lang.ClassNotFoundException</outbound>
                <outbound type="feature" confirmed="no">java.lang.NoClassDefFoundError.NoClassDefFoundError(java.lang.String)</outbound>
                <outbound type="class" confirmed="no">java.lang.Object</outbound>
                <outbound type="class" confirmed="no">java.lang.Object[]</outbound>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="feature" confirmed="no">java.lang.Throwable.getMessage()</outbound>
                <outbound type="class" confirmed="no">java.util.Iterator</outbound>
                <outbound type="feature" confirmed="no">java.util.Iterator.hasNext()</outbound>
                <outbound type="feature" confirmed="no">java.util.Iterator.next()</outbound>
                <outbound type="class" confirmed="no">java.util.List</outbound>
                <outbound type="feature" confirmed="no">java.util.List.iterator()</outbound>
                <outbound type="feature" confirmed="no">java.util.List.size()</outbound>
                <outbound type="class" confirmed="no">java.util.Map</outbound>
                <outbound type="feature" confirmed="no">java.util.Map.get(java.lang.Object)</outbound>
                <outbound type="feature" confirmed="no">java.util.Map.keySet()</outbound>
                <outbound type="feature" confirmed="no">java.util.Map.size()</outbound>
                <outbound type="class" confirmed="no">java.util.Set</outbound>
                <outbound type="feature" confirmed="no">java.util.Set.iterator()</outbound>
                <outbound type="class" confirmed="yes">org.mvel.Accessor</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.optimizers.impl.refl.ReflectiveAccessorOptimizer.returnType</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.optimizers.impl.refl.collection.ArrayCreator.ArrayCreator(org.mvel.Accessor[])</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.optimizers.impl.refl.collection.ExprValueAccessor.ExprValueAccessor(java.lang.String)</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.optimizers.impl.refl.collection.ListCreator.ListCreator(org.mvel.Accessor[])</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.optimizers.impl.refl.collection.MapCreator.MapCreator(org.mvel.Accessor[], org.mvel.Accessor[])</outbound>
                <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.refl.ReflectiveAccessorOptimizer.optimizeCollection(char[], java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.optimizers.impl.refl.ReflectiveAccessorOptimizer.addAccessorNode(org.mvel.AccessorNode)</name>
                <outbound type="class" confirmed="yes">org.mvel.AccessorNode</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.AccessorNode.setNextNode(org.mvel.AccessorNode)</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.optimizers.impl.refl.ReflectiveAccessorOptimizer.currNode</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.optimizers.impl.refl.ReflectiveAccessorOptimizer.rootNode</outbound>
                <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.refl.ReflectiveAccessorOptimizer.getBeanProperty(java.lang.Object, java.lang.String)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.refl.ReflectiveAccessorOptimizer.getCollectionProperty(java.lang.Object, java.lang.String)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.refl.ReflectiveAccessorOptimizer.getMethod(java.lang.Object, java.lang.String)</inbound>
            </feature>
            <feature confirmed="no">
                <name>org.mvel.optimizers.impl.refl.ReflectiveAccessorOptimizer.capture()</name>
                <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.refl.ReflectiveAccessorOptimizer.compileGetChain()</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.optimizers.impl.refl.ReflectiveAccessorOptimizer.compileConstructor(char[], java.lang.Object, org.mvel.integration.VariableResolverFactory)</name>
                <outbound type="class" confirmed="no">java.io.Serializable</outbound>
                <outbound type="class" confirmed="no">java.lang.Class</outbound>
                <outbound type="feature" confirmed="no">java.lang.Class.getConstructor(java.lang.Class[])</outbound>
                <outbound type="feature" confirmed="no">java.lang.Class.getName()</outbound>
                <outbound type="class" confirmed="no">java.lang.ClassLoader</outbound>
                <outbound type="feature" confirmed="no">java.lang.ClassLoader.loadClass(java.lang.String)</outbound>
                <outbound type="class" confirmed="no">java.lang.ClassNotFoundException</outbound>
                <outbound type="class" confirmed="no">java.lang.IllegalAccessException</outbound>
                <outbound type="class" confirmed="no">java.lang.InstantiationException</outbound>
                <outbound type="class" confirmed="no">java.lang.NoSuchMethodException</outbound>
                <outbound type="class" confirmed="no">java.lang.Object</outbound>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="feature" confirmed="no">java.lang.String.String(char[])</outbound>
                <outbound type="feature" confirmed="no">java.lang.String.toCharArray()</outbound>
                <outbound type="class" confirmed="no">java.lang.StringBuffer</outbound>
                <outbound type="feature" confirmed="no">java.lang.StringBuffer.StringBuffer(java.lang.String)</outbound>
                <outbound type="feature" confirmed="no">java.lang.StringBuffer.append(java.lang.String)</outbound>
                <outbound type="feature" confirmed="no">java.lang.StringBuffer.toString()</outbound>
                <outbound type="class" confirmed="no">java.lang.Thread</outbound>
                <outbound type="feature" confirmed="no">java.lang.Thread.currentThread()</outbound>
                <outbound type="feature" confirmed="no">java.lang.Thread.getContextClassLoader()</outbound>
                <outbound type="class" confirmed="no">java.lang.reflect.Constructor</outbound>
                <outbound type="feature" confirmed="no">java.lang.reflect.Constructor.getParameterTypes()</outbound>
                <outbound type="feature" confirmed="no">java.lang.reflect.Constructor.newInstance(java.lang.Object[])</outbound>
                <outbound type="class" confirmed="no">java.lang.reflect.InvocationTargetException</outbound>
                <outbound type="class" confirmed="yes">org.mvel.Accessor</outbound>
                <outbound type="class" confirmed="yes">org.mvel.AccessorNode</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.CompileException.CompileException(java.lang.String)</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.DataConversion.convert(java.lang.Object, java.lang.Class)</outbound>
                <outbound type="class" confirmed="yes">org.mvel.ExecutableStatement</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.ExecutableStatement.getValue(java.lang.Object, org.mvel.integration.VariableResolverFactory)</outbound>
                <outbound type="class" confirmed="yes">org.mvel.integration.VariableResolverFactory</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.optimizers.impl.refl.ConstructorAccessor.ConstructorAccessor(java.lang.reflect.Constructor, org.mvel.ExecutableStatement[])</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.optimizers.impl.refl.ReflectiveAccessorOptimizer.EMPTYCLS</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.optimizers.impl.refl.ReflectiveAccessorOptimizer.ReflectiveAccessorOptimizer(char[], java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory)</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.optimizers.impl.refl.ReflectiveAccessorOptimizer.compileGetChain()</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.optimizers.impl.refl.ReflectiveAccessorOptimizer.getResultOptPass()</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.optimizers.impl.refl.ReflectiveAccessorOptimizer.getRootNode()</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.optimizers.impl.refl.ReflectiveAccessorOptimizer.setRootNode(org.mvel.AccessorNode)</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.optimizers.impl.refl.ReflectiveAccessorOptimizer.val</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.util.ArrayTools.findFirst(char, char[])</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.util.ParseTools.captureContructorAndResidual(char[])</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.util.ParseTools.findClass(org.mvel.integration.VariableResolverFactory, java.lang.String)</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.util.ParseTools.getBestConstructorCanadidate(java.lang.Object[], java.lang.Class)</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.util.ParseTools.parseMethodOrConstructor(char[])</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.util.ParseTools.subCompileExpression(java.lang.String)</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.util.ParseTools.subset(char[], int, int)</outbound>
                <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.refl.ReflectiveAccessorOptimizer.optimizeObjectCreation(char[], java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.optimizers.impl.refl.ReflectiveAccessorOptimizer.compileGetChain()</name>
                <outbound type="class" confirmed="no">java.lang.Class</outbound>
                <outbound type="class" confirmed="no">java.lang.Exception</outbound>
                <outbound type="feature" confirmed="no">java.lang.Exception.getMessage()</outbound>
                <outbound type="class" confirmed="no">java.lang.IllegalAccessException</outbound>
                <outbound type="class" confirmed="no">java.lang.IndexOutOfBoundsException</outbound>
                <outbound type="class" confirmed="no">java.lang.NullPointerException</outbound>
                <outbound type="class" confirmed="no">java.lang.Object</outbound>
                <outbound type="feature" confirmed="no">java.lang.Object.getClass()</outbound>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="feature" confirmed="no">java.lang.String.String(char[])</outbound>
                <outbound type="class" confirmed="no">java.lang.Throwable</outbound>
                <outbound type="class" confirmed="no">java.lang.reflect.InvocationTargetException</outbound>
                <outbound type="class" confirmed="yes">org.mvel.Accessor</outbound>
                <outbound type="class" confirmed="yes">org.mvel.AccessorNode</outbound>
                <outbound type="class" confirmed="yes">org.mvel.CompileException</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.CompileException.CompileException(java.lang.String, java.lang.Throwable)</outbound>
                <outbound type="class" confirmed="yes">org.mvel.PropertyAccessException</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.PropertyAccessException.PropertyAccessException(java.lang.String, java.lang.Throwable)</outbound>
                <outbound type="feature" confirmed="no">org.mvel.PropertyAccessException.getMessage()</outbound>
                <outbound type="feature" confirmed="no">org.mvel.optimizers.impl.refl.ReflectiveAccessorOptimizer.capture()</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.optimizers.impl.refl.ReflectiveAccessorOptimizer.ctx</outbound>
                <outbound type="feature" confirmed="no">org.mvel.optimizers.impl.refl.ReflectiveAccessorOptimizer.cursor</outbound>
                <outbound type="feature" confirmed="no">org.mvel.optimizers.impl.refl.ReflectiveAccessorOptimizer.expr</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.optimizers.impl.refl.ReflectiveAccessorOptimizer.first</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.optimizers.impl.refl.ReflectiveAccessorOptimizer.getBeanProperty(java.lang.Object, java.lang.String)</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.optimizers.impl.refl.ReflectiveAccessorOptimizer.getCollectionProperty(java.lang.Object, java.lang.String)</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.optimizers.impl.refl.ReflectiveAccessorOptimizer.getMethod(java.lang.Object, java.lang.String)</outbound>
                <outbound type="feature" confirmed="no">org.mvel.optimizers.impl.refl.ReflectiveAccessorOptimizer.length</outbound>
                <outbound type="feature" confirmed="no">org.mvel.optimizers.impl.refl.ReflectiveAccessorOptimizer.nextSubToken()</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.optimizers.impl.refl.ReflectiveAccessorOptimizer.returnType</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.optimizers.impl.refl.ReflectiveAccessorOptimizer.rootNode</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.optimizers.impl.refl.ReflectiveAccessorOptimizer.val</outbound>
                <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.refl.ReflectiveAccessorOptimizer.compileConstructor(char[], java.lang.Object, org.mvel.integration.VariableResolverFactory)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.refl.ReflectiveAccessorOptimizer.optimizeAccessor(char[], java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory, boolean)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.refl.ReflectiveAccessorOptimizer.optimizeSetAccessor(char[], java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory, boolean, java.lang.Object)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.optimizers.impl.refl.ReflectiveAccessorOptimizer.createSignatureHash(java.lang.String, java.lang.Object)</name>
                <outbound type="class" confirmed="no">java.lang.Class</outbound>
                <outbound type="class" confirmed="no">java.lang.Object</outbound>
                <outbound type="feature" confirmed="no">java.lang.Object.getClass()</outbound>
                <outbound type="feature" confirmed="no">java.lang.Object.hashCode()</outbound>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="feature" confirmed="no">java.lang.String.hashCode()</outbound>
                <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.refl.ReflectiveAccessorOptimizer.get(java.lang.String, java.lang.Object)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.optimizers.impl.refl.ReflectiveAccessorOptimizer.ctx</name>
                <outbound type="class" confirmed="no">java.lang.Object</outbound>
                <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.refl.ReflectiveAccessorOptimizer.ReflectiveAccessorOptimizer(char[], java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.refl.ReflectiveAccessorOptimizer.compileGetChain()</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.refl.ReflectiveAccessorOptimizer.getMethod(java.lang.Object, java.lang.String)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.refl.ReflectiveAccessorOptimizer.optimizeAccessor(char[], java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory, boolean)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.refl.ReflectiveAccessorOptimizer.optimizeSetAccessor(char[], java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory, boolean, java.lang.Object)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.optimizers.impl.refl.ReflectiveAccessorOptimizer.currNode</name>
                <outbound type="class" confirmed="yes">org.mvel.AccessorNode</outbound>
                <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.refl.ReflectiveAccessorOptimizer.addAccessorNode(org.mvel.AccessorNode)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.refl.ReflectiveAccessorOptimizer.optimizeAccessor(char[], java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory, boolean)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.refl.ReflectiveAccessorOptimizer.optimizeSetAccessor(char[], java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory, boolean, java.lang.Object)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.refl.ReflectiveAccessorOptimizer.setRootNode(org.mvel.AccessorNode)</inbound>
            </feature>
            <feature confirmed="no">
                <name>org.mvel.optimizers.impl.refl.ReflectiveAccessorOptimizer.cursor</name>
                <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.refl.ReflectiveAccessorOptimizer.compileGetChain()</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.refl.ReflectiveAccessorOptimizer.getCollectionProperty(java.lang.Object, java.lang.String)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.refl.ReflectiveAccessorOptimizer.getMethod(java.lang.Object, java.lang.String)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.refl.ReflectiveAccessorOptimizer.optimizeAccessor(char[], java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory, boolean)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.refl.ReflectiveAccessorOptimizer.optimizeFold(char[], java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.refl.ReflectiveAccessorOptimizer.optimizeObjectCreation(char[], java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.refl.ReflectiveAccessorOptimizer.optimizeSetAccessor(char[], java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory, boolean, java.lang.Object)</inbound>
            </feature>
            <feature confirmed="no">
                <name>org.mvel.optimizers.impl.refl.ReflectiveAccessorOptimizer.expr</name>
                <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.refl.ReflectiveAccessorOptimizer.ReflectiveAccessorOptimizer(char[], java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.refl.ReflectiveAccessorOptimizer.compileGetChain()</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.refl.ReflectiveAccessorOptimizer.getCollectionProperty(java.lang.Object, java.lang.String)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.refl.ReflectiveAccessorOptimizer.getMethod(java.lang.Object, java.lang.String)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.refl.ReflectiveAccessorOptimizer.optimizeAccessor(char[], java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory, boolean)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.refl.ReflectiveAccessorOptimizer.optimizeFold(char[], java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.refl.ReflectiveAccessorOptimizer.optimizeObjectCreation(char[], java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.refl.ReflectiveAccessorOptimizer.optimizeSetAccessor(char[], java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory, boolean, java.lang.Object)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.optimizers.impl.refl.ReflectiveAccessorOptimizer.first</name>
                <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.refl.ReflectiveAccessorOptimizer.ReflectiveAccessorOptimizer()</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.refl.ReflectiveAccessorOptimizer.ReflectiveAccessorOptimizer(char[], java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.refl.ReflectiveAccessorOptimizer.compileGetChain()</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.refl.ReflectiveAccessorOptimizer.getBeanProperty(java.lang.Object, java.lang.String)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.refl.ReflectiveAccessorOptimizer.getMethod(java.lang.Object, java.lang.String)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.refl.ReflectiveAccessorOptimizer.optimizeAccessor(char[], java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory, boolean)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.refl.ReflectiveAccessorOptimizer.optimizeSetAccessor(char[], java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory, boolean, java.lang.Object)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.optimizers.impl.refl.ReflectiveAccessorOptimizer.get(java.lang.String, java.lang.Object)</name>
                <outbound type="feature" confirmed="no">java.lang.Integer.Integer(int)</outbound>
                <outbound type="class" confirmed="no">java.lang.Object</outbound>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="feature" confirmed="no">java.lang.String.toCharArray()</outbound>
                <outbound type="class" confirmed="no">java.util.Map</outbound>
                <outbound type="feature" confirmed="no">java.util.Map.get(java.lang.Object)</outbound>
                <outbound type="feature" confirmed="no">java.util.Map.put(java.lang.Object, java.lang.Object)</outbound>
                <outbound type="class" confirmed="yes">org.mvel.Accessor</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.Accessor.getValue(java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory)</outbound>
                <outbound type="class" confirmed="yes">org.mvel.integration.VariableResolverFactory</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.optimizers.impl.refl.ReflectiveAccessorOptimizer.REFLECTIVE_ACCESSOR_CACHE</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.optimizers.impl.refl.ReflectiveAccessorOptimizer.ReflectiveAccessorOptimizer()</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.optimizers.impl.refl.ReflectiveAccessorOptimizer.createSignatureHash(java.lang.String, java.lang.Object)</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.optimizers.impl.refl.ReflectiveAccessorOptimizer.optimizeAccessor(char[], java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory, boolean)</outbound>
                <inbound type="feature" confirmed="yes">org.mvel.MVEL.getProperty(java.lang.String, java.lang.Object)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.optimizers.impl.refl.ReflectiveAccessorOptimizer.getBeanProperty(java.lang.Object, java.lang.String)</name>
                <outbound type="class" confirmed="no">java.lang.Class</outbound>
                <outbound type="feature" confirmed="no">java.lang.Class.getMethods()</outbound>
                <outbound type="feature" confirmed="no">java.lang.Class.isArray()</outbound>
                <outbound type="class" confirmed="no">java.lang.IllegalAccessException</outbound>
                <outbound type="feature" confirmed="no">java.lang.Integer.Integer(int)</outbound>
                <outbound type="class" confirmed="no">java.lang.Object</outbound>
                <outbound type="feature" confirmed="no">java.lang.Object.getClass()</outbound>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="feature" confirmed="no">java.lang.String.equals(java.lang.Object)</outbound>
                <outbound type="feature" confirmed="no">java.lang.reflect.Array.getLength(java.lang.Object)</outbound>
                <outbound type="class" confirmed="no">java.lang.reflect.Field</outbound>
                <outbound type="feature" confirmed="no">java.lang.reflect.Field.get(java.lang.Object)</outbound>
                <outbound type="class" confirmed="no">java.lang.reflect.InvocationTargetException</outbound>
                <outbound type="class" confirmed="no">java.lang.reflect.Member</outbound>
                <outbound type="class" confirmed="no">java.lang.reflect.Method</outbound>
                <outbound type="feature" confirmed="no">java.lang.reflect.Method.getName()</outbound>
                <outbound type="feature" confirmed="no">java.lang.reflect.Method.invoke(java.lang.Object, java.lang.Object[])</outbound>
                <outbound type="class" confirmed="no">java.util.Map</outbound>
                <outbound type="feature" confirmed="no">java.util.Map.containsKey(java.lang.Object)</outbound>
                <outbound type="feature" confirmed="no">java.util.Map.get(java.lang.Object)</outbound>
                <outbound type="class" confirmed="yes">org.mvel.AccessorNode</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.PropertyAccessException.PropertyAccessException(java.lang.String)</outbound>
                <outbound type="class" confirmed="yes">org.mvel.integration.VariableResolver</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.integration.VariableResolver.getValue()</outbound>
                <outbound type="class" confirmed="yes">org.mvel.integration.VariableResolverFactory</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.integration.VariableResolverFactory.getVariableResolver(java.lang.String)</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.integration.VariableResolverFactory.isResolveable(java.lang.String)</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.optimizers.impl.refl.ArrayLength.ArrayLength()</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.optimizers.impl.refl.FieldAccessor.FieldAccessor(java.lang.reflect.Field)</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.optimizers.impl.refl.GetterAccessor.GetterAccessor(java.lang.reflect.Method)</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.optimizers.impl.refl.MapAccessor.MapAccessor(java.lang.Object)</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.optimizers.impl.refl.ReflectiveAccessorOptimizer.EMPTYARG</outbound>
                <outbound type="feature" confirmed="no">org.mvel.optimizers.impl.refl.ReflectiveAccessorOptimizer.LITERALS</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.optimizers.impl.refl.ReflectiveAccessorOptimizer.addAccessorNode(org.mvel.AccessorNode)</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.optimizers.impl.refl.ReflectiveAccessorOptimizer.first</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.optimizers.impl.refl.ReflectiveAccessorOptimizer.thisRef</outbound>
                <outbound type="feature" confirmed="no">org.mvel.optimizers.impl.refl.ReflectiveAccessorOptimizer.tryStaticAccess()</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.optimizers.impl.refl.ReflectiveAccessorOptimizer.variableFactory</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.optimizers.impl.refl.StaticReferenceAccessor.StaticReferenceAccessor(java.lang.Object)</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.optimizers.impl.refl.StaticVarAccessor.StaticVarAccessor(java.lang.reflect.Field)</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.optimizers.impl.refl.ThisValueAccessor.ThisValueAccessor()</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.optimizers.impl.refl.VariableAccessor.VariableAccessor(java.lang.String, org.mvel.integration.VariableResolverFactory)</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.util.ParseTools.determineActualTargetMethod(java.lang.reflect.Method)</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.util.PropertyTools.getFieldOrAccessor(java.lang.Class, java.lang.String)</outbound>
                <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.refl.ReflectiveAccessorOptimizer.compileGetChain()</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.refl.ReflectiveAccessorOptimizer.getCollectionProperty(java.lang.Object, java.lang.String)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.optimizers.impl.refl.ReflectiveAccessorOptimizer.getCollectionProperty(java.lang.Object, java.lang.String)</name>
                <outbound type="class" confirmed="no">java.io.Serializable</outbound>
                <outbound type="class" confirmed="no">java.lang.CharSequence</outbound>
                <outbound type="feature" confirmed="no">java.lang.CharSequence.charAt(int)</outbound>
                <outbound type="feature" confirmed="no">java.lang.Character.Character(char)</outbound>
                <outbound type="class" confirmed="no">java.lang.Class</outbound>
                <outbound type="feature" confirmed="no">java.lang.Class.getName()</outbound>
                <outbound type="class" confirmed="no">java.lang.Exception</outbound>
                <outbound type="class" confirmed="no">java.lang.Integer</outbound>
                <outbound type="feature" confirmed="no">java.lang.Integer.Integer(int)</outbound>
                <outbound type="feature" confirmed="no">java.lang.Integer.intValue()</outbound>
                <outbound type="feature" confirmed="no">java.lang.Integer.parseInt(java.lang.String)</outbound>
                <outbound type="class" confirmed="no">java.lang.Object</outbound>
                <outbound type="feature" confirmed="no">java.lang.Object.getClass()</outbound>
                <outbound type="class" confirmed="no">java.lang.Object[]</outbound>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="feature" confirmed="no">java.lang.String.String(char[], int, int)</outbound>
                <outbound type="feature" confirmed="no">java.lang.String.length()</outbound>
                <outbound type="class" confirmed="no">java.lang.StringBuffer</outbound>
                <outbound type="feature" confirmed="no">java.lang.StringBuffer.StringBuffer(java.lang.String)</outbound>
                <outbound type="feature" confirmed="no">java.lang.StringBuffer.append(java.lang.String)</outbound>
                <outbound type="feature" confirmed="no">java.lang.StringBuffer.toString()</outbound>
                <outbound type="class" confirmed="no">java.util.List</outbound>
                <outbound type="feature" confirmed="no">java.util.List.get(int)</outbound>
                <outbound type="class" confirmed="no">java.util.Map</outbound>
                <outbound type="feature" confirmed="no">java.util.Map.get(java.lang.Object)</outbound>
                <outbound type="class" confirmed="yes">org.mvel.AccessorNode</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.CompileException.CompileException(java.lang.String)</outbound>
                <outbound type="class" confirmed="yes">org.mvel.ExecutableStatement</outbound>
                <outbound type="feature" confirmed="no">org.mvel.ExecutableStatement.getValue(java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory)</outbound>
                <outbound type="class" confirmed="yes">org.mvel.integration.VariableResolverFactory</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.optimizers.impl.refl.ArrayAccessor.ArrayAccessor(int)</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.optimizers.impl.refl.ArrayAccessorNest.ArrayAccessorNest(org.mvel.ExecutableStatement)</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.optimizers.impl.refl.IndexedCharSeqAccessor.IndexedCharSeqAccessor(int)</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.optimizers.impl.refl.IndexedCharSeqAccessorNest.IndexedCharSeqAccessorNest(org.mvel.ExecutableStatement)</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.optimizers.impl.refl.ListAccessor.ListAccessor(int)</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.optimizers.impl.refl.ListAccessorNest.ListAccessorNest(org.mvel.ExecutableStatement)</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.optimizers.impl.refl.MapAccessor.MapAccessor(java.lang.Object)</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.optimizers.impl.refl.MapAccessorNest.MapAccessorNest(org.mvel.ExecutableStatement)</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.optimizers.impl.refl.ReflectiveAccessorOptimizer.addAccessorNode(org.mvel.AccessorNode)</outbound>
                <outbound type="feature" confirmed="no">org.mvel.optimizers.impl.refl.ReflectiveAccessorOptimizer.cursor</outbound>
                <outbound type="feature" confirmed="no">org.mvel.optimizers.impl.refl.ReflectiveAccessorOptimizer.expr</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.optimizers.impl.refl.ReflectiveAccessorOptimizer.getBeanProperty(java.lang.Object, java.lang.String)</outbound>
                <outbound type="feature" confirmed="no">org.mvel.optimizers.impl.refl.ReflectiveAccessorOptimizer.length</outbound>
                <outbound type="feature" confirmed="no">org.mvel.optimizers.impl.refl.ReflectiveAccessorOptimizer.scanTo(char)</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.optimizers.impl.refl.ReflectiveAccessorOptimizer.thisRef</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.optimizers.impl.refl.ReflectiveAccessorOptimizer.variableFactory</outbound>
                <outbound type="feature" confirmed="no">org.mvel.optimizers.impl.refl.ReflectiveAccessorOptimizer.whiteSpaceSkip()</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.util.ParseTools.subCompileExpression(java.lang.String)</outbound>
                <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.refl.ReflectiveAccessorOptimizer.compileGetChain()</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.optimizers.impl.refl.ReflectiveAccessorOptimizer.getEgressType()</name>
                <outbound type="class" confirmed="no">java.lang.Class</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.optimizers.impl.refl.ReflectiveAccessorOptimizer.returnType</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.optimizers.impl.refl.ReflectiveAccessorOptimizer.getMethod(java.lang.Object, java.lang.String)</name>
                <outbound type="class" confirmed="no">java.io.Serializable</outbound>
                <outbound type="class" confirmed="no">java.lang.Class</outbound>
                <outbound type="feature" confirmed="no">java.lang.Class.getDeclaredMethods()</outbound>
                <outbound type="feature" confirmed="no">java.lang.Class.getMethods()</outbound>
                <outbound type="feature" confirmed="no">java.lang.Class.getName()</outbound>
                <outbound type="feature" confirmed="no">java.lang.Class.isArray()</outbound>
                <outbound type="class" confirmed="no">java.lang.Class[]</outbound>
                <outbound type="class" confirmed="no">java.lang.Exception</outbound>
                <outbound type="feature" confirmed="no">java.lang.Integer.Integer(int)</outbound>
                <outbound type="class" confirmed="no">java.lang.Object</outbound>
                <outbound type="feature" confirmed="no">java.lang.Object.getClass()</outbound>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="feature" confirmed="no">java.lang.String.String(char[], int, int)</outbound>
                <outbound type="feature" confirmed="no">java.lang.String.equals(java.lang.Object)</outbound>
                <outbound type="feature" confirmed="no">java.lang.String.length()</outbound>
                <outbound type="feature" confirmed="no">java.lang.String.toCharArray()</outbound>
                <outbound type="class" confirmed="no">java.lang.StringBuffer</outbound>
                <outbound type="feature" confirmed="no">java.lang.StringBuffer.StringBuffer(java.lang.String)</outbound>
                <outbound type="feature" confirmed="no">java.lang.StringBuffer.append(int)</outbound>
                <outbound type="feature" confirmed="no">java.lang.StringBuffer.append(java.lang.String)</outbound>
                <outbound type="feature" confirmed="no">java.lang.StringBuffer.toString()</outbound>
                <outbound type="feature" confirmed="no">java.lang.reflect.Array.getLength(java.lang.Object)</outbound>
                <outbound type="class" confirmed="no">java.lang.reflect.Method</outbound>
                <outbound type="feature" confirmed="no">java.lang.reflect.Method.getDeclaringClass()</outbound>
                <outbound type="feature" confirmed="no">java.lang.reflect.Method.getName()</outbound>
                <outbound type="feature" confirmed="no">java.lang.reflect.Method.getParameterTypes()</outbound>
                <outbound type="feature" confirmed="no">java.lang.reflect.Method.invoke(java.lang.Object, java.lang.Object[])</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.Accessor.getValue(java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory)</outbound>
                <outbound type="class" confirmed="yes">org.mvel.AccessorNode</outbound>
                <outbound type="class" confirmed="no">org.mvel.Accessor[]</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.DataConversion.convert(java.lang.Object, java.lang.Class)</outbound>
                <outbound type="class" confirmed="yes">org.mvel.ExecutableStatement</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.ExecutableStatement.computeTypeConversionRule()</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.ExecutableStatement.getKnownIngressType()</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.ExecutableStatement.isConvertableIngressEgress()</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.ExecutableStatement.setKnownIngressType(java.lang.Class)</outbound>
                <outbound type="class" confirmed="no">org.mvel.ExecutableStatement[]</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.OptimizationFailure.OptimizationFailure(java.lang.String)</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.PropertyAccessException.PropertyAccessException(java.lang.String)</outbound>
                <outbound type="class" confirmed="yes">org.mvel.integration.VariableResolver</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.integration.VariableResolver.getValue()</outbound>
                <outbound type="class" confirmed="yes">org.mvel.integration.VariableResolverFactory</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.integration.VariableResolverFactory.getVariableResolver(java.lang.String)</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.integration.VariableResolverFactory.isResolveable(java.lang.String)</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.optimizers.impl.refl.ArrayLength.ArrayLength()</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.optimizers.impl.refl.MethodAccessor.MethodAccessor(java.lang.reflect.Method, org.mvel.ExecutableStatement[])</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.optimizers.impl.refl.ReflectiveAccessorOptimizer.addAccessorNode(org.mvel.AccessorNode)</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.optimizers.impl.refl.ReflectiveAccessorOptimizer.ctx</outbound>
                <outbound type="feature" confirmed="no">org.mvel.optimizers.impl.refl.ReflectiveAccessorOptimizer.cursor</outbound>
                <outbound type="feature" confirmed="no">org.mvel.optimizers.impl.refl.ReflectiveAccessorOptimizer.expr</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.optimizers.impl.refl.ReflectiveAccessorOptimizer.first</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.optimizers.impl.refl.ReflectiveAccessorOptimizer.thisRef</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.optimizers.impl.refl.ReflectiveAccessorOptimizer.variableFactory</outbound>
                <outbound type="class" confirmed="yes">org.mvel.util.MethodStub</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.util.MethodStub.getClassReference()</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.util.MethodStub.getMethodName()</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.util.ParseTools.EMPTY_OBJ_ARR</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.util.ParseTools.balancedCapture(char[], int, char)</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.util.ParseTools.getBestCandidate(java.lang.Object[], java.lang.String, java.lang.Class, java.lang.reflect.Method[])</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.util.ParseTools.getWidenedTarget(java.lang.reflect.Method)</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.util.ParseTools.parseParameterList(char[], int, int)</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.util.ParseTools.subCompileExpression(java.lang.String)</outbound>
                <outbound type="class" confirmed="yes">org.mvel.util.StringAppender</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.util.StringAppender.StringAppender()</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.util.StringAppender.append(java.lang.String)</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.util.StringAppender.toString()</outbound>
                <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.refl.ReflectiveAccessorOptimizer.compileGetChain()</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.optimizers.impl.refl.ReflectiveAccessorOptimizer.getResultOptPass()</name>
                <outbound type="class" confirmed="no">java.lang.Object</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.optimizers.impl.refl.ReflectiveAccessorOptimizer.val</outbound>
                <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.refl.Fold.getValue(java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.refl.ReflectiveAccessorOptimizer.compileConstructor(char[], java.lang.Object, org.mvel.integration.VariableResolverFactory)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.optimizers.impl.refl.ReflectiveAccessorOptimizer.getRootNode()</name>
                <outbound type="class" confirmed="yes">org.mvel.AccessorNode</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.optimizers.impl.refl.ReflectiveAccessorOptimizer.rootNode</outbound>
                <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.refl.ReflectiveAccessorOptimizer.compileConstructor(char[], java.lang.Object, org.mvel.integration.VariableResolverFactory)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.optimizers.impl.refl.ReflectiveAccessorOptimizer.getValue(java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory)</name>
                <outbound type="class" confirmed="no">java.lang.Exception</outbound>
                <outbound type="class" confirmed="no">java.lang.Object</outbound>
                <outbound type="class" confirmed="yes">org.mvel.AccessorNode</outbound>
                <outbound type="feature" confirmed="no">org.mvel.AccessorNode.getValue(java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory)</outbound>
                <outbound type="class" confirmed="yes">org.mvel.integration.VariableResolverFactory</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.optimizers.impl.refl.ReflectiveAccessorOptimizer.rootNode</outbound>
            </feature>
            <feature confirmed="no">
                <name>org.mvel.optimizers.impl.refl.ReflectiveAccessorOptimizer.greedy</name>
                <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.refl.ReflectiveAccessorOptimizer.optimizeFold(char[], java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.optimizers.impl.refl.ReflectiveAccessorOptimizer.isLiteralOnly()</name>
                <outbound type="feature" confirmed="yes">org.mvel.optimizers.impl.refl.ReflectiveAccessorOptimizer.literal</outbound>
            </feature>
            <feature confirmed="no">
                <name>org.mvel.optimizers.impl.refl.ReflectiveAccessorOptimizer.length</name>
                <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.refl.ReflectiveAccessorOptimizer.ReflectiveAccessorOptimizer(char[], java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.refl.ReflectiveAccessorOptimizer.compileGetChain()</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.refl.ReflectiveAccessorOptimizer.getCollectionProperty(java.lang.Object, java.lang.String)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.refl.ReflectiveAccessorOptimizer.optimizeAccessor(char[], java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory, boolean)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.refl.ReflectiveAccessorOptimizer.optimizeFold(char[], java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.refl.ReflectiveAccessorOptimizer.optimizeObjectCreation(char[], java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.refl.ReflectiveAccessorOptimizer.optimizeSetAccessor(char[], java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory, boolean, java.lang.Object)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.optimizers.impl.refl.ReflectiveAccessorOptimizer.literal</name>
                <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.refl.ReflectiveAccessorOptimizer.ReflectiveAccessorOptimizer()</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.refl.ReflectiveAccessorOptimizer.ReflectiveAccessorOptimizer(char[], java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.refl.ReflectiveAccessorOptimizer.isLiteralOnly()</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.optimizers.impl.refl.ReflectiveAccessorOptimizer.main(java.lang.String[])</name>
                <outbound type="class" confirmed="no">java.lang.Object</outbound>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="feature" confirmed="no">java.lang.String.toCharArray()</outbound>
                <outbound type="class" confirmed="yes">org.mvel.Accessor</outbound>
                <outbound type="class" confirmed="yes">org.mvel.integration.VariableResolverFactory</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.optimizers.impl.refl.ReflectiveAccessorOptimizer.ReflectiveAccessorOptimizer()</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.optimizers.impl.refl.ReflectiveAccessorOptimizer.optimizeCollection(char[], java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory)</outbound>
            </feature>
            <feature confirmed="no">
                <name>org.mvel.optimizers.impl.refl.ReflectiveAccessorOptimizer.nextSubToken()</name>
                <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.refl.ReflectiveAccessorOptimizer.compileGetChain()</inbound>
            </feature>
            <feature confirmed="no">
                <name>org.mvel.optimizers.impl.refl.ReflectiveAccessorOptimizer.nextToken()</name>
                <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.refl.ReflectiveAccessorOptimizer.optimizeFold(char[], java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.optimizers.impl.refl.ReflectiveAccessorOptimizer.optimizeAccessor(char[], java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory, boolean)</name>
                <outbound type="class" confirmed="no">java.lang.Object</outbound>
                <outbound type="class" confirmed="yes">org.mvel.Accessor</outbound>
                <outbound type="class" confirmed="yes">org.mvel.AccessorNode</outbound>
                <outbound type="class" confirmed="yes">org.mvel.integration.VariableResolverFactory</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.optimizers.impl.refl.ReflectiveAccessorOptimizer.compileGetChain()</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.optimizers.impl.refl.ReflectiveAccessorOptimizer.ctx</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.optimizers.impl.refl.ReflectiveAccessorOptimizer.currNode</outbound>
                <outbound type="feature" confirmed="no">org.mvel.optimizers.impl.refl.ReflectiveAccessorOptimizer.cursor</outbound>
                <outbound type="feature" confirmed="no">org.mvel.optimizers.impl.refl.ReflectiveAccessorOptimizer.expr</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.optimizers.impl.refl.ReflectiveAccessorOptimizer.first</outbound>
                <outbound type="feature" confirmed="no">org.mvel.optimizers.impl.refl.ReflectiveAccessorOptimizer.length</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.optimizers.impl.refl.ReflectiveAccessorOptimizer.rootNode</outbound>
                <outbound type="feature" confirmed="no">org.mvel.optimizers.impl.refl.ReflectiveAccessorOptimizer.start</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.optimizers.impl.refl.ReflectiveAccessorOptimizer.thisRef</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.optimizers.impl.refl.ReflectiveAccessorOptimizer.variableFactory</outbound>
                <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.refl.Fold.getValue(java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.refl.ReflectiveAccessorOptimizer.get(java.lang.String, java.lang.Object)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.optimizers.impl.refl.ReflectiveAccessorOptimizer.optimizeCollection(char[], java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory)</name>
                <outbound type="class" confirmed="no">java.lang.Object</outbound>
                <outbound type="class" confirmed="no">java.util.List</outbound>
                <outbound type="feature" confirmed="no">java.util.List.get(int)</outbound>
                <outbound type="class" confirmed="yes">org.mvel.Accessor</outbound>
                <outbound type="class" confirmed="yes">org.mvel.integration.VariableResolverFactory</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.optimizers.impl.refl.ReflectiveAccessorOptimizer._getAccessor(java.lang.Object)</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.optimizers.impl.refl.Union.Union(org.mvel.Accessor, char[])</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.util.CollectionParser.CollectionParser()</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.util.CollectionParser.getCursor()</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.util.CollectionParser.parseCollection(char[])</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.util.ParseTools.subset(char[], int)</outbound>
                <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.refl.ReflectiveAccessorOptimizer.main(java.lang.String[])</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.optimizers.impl.refl.ReflectiveAccessorOptimizer.optimizeFold(char[], java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory)</name>
                <outbound type="class" confirmed="no">java.lang.Integer</outbound>
                <outbound type="feature" confirmed="no">java.lang.Integer.Integer(int)</outbound>
                <outbound type="class" confirmed="no">java.lang.Object</outbound>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="class" confirmed="yes">org.mvel.ASTNode</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.ASTNode.getName()</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.ASTNode.getNameAsArray()</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.ASTNode.isOperator(java.lang.Integer)</outbound>
                <outbound type="class" confirmed="yes">org.mvel.Accessor</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.Accessor.getValue(java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory)</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.CompileException.CompileException(java.lang.String)</outbound>
                <outbound type="class" confirmed="yes">org.mvel.integration.VariableResolverFactory</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.optimizers.impl.refl.Fold.Fold(char[], org.mvel.Accessor)</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.optimizers.impl.refl.Fold.getValue(java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory)</outbound>
                <outbound type="feature" confirmed="no">org.mvel.optimizers.impl.refl.ReflectiveAccessorOptimizer.cursor</outbound>
                <outbound type="feature" confirmed="no">org.mvel.optimizers.impl.refl.ReflectiveAccessorOptimizer.expr</outbound>
                <outbound type="feature" confirmed="no">org.mvel.optimizers.impl.refl.ReflectiveAccessorOptimizer.greedy</outbound>
                <outbound type="feature" confirmed="no">org.mvel.optimizers.impl.refl.ReflectiveAccessorOptimizer.length</outbound>
                <outbound type="feature" confirmed="no">org.mvel.optimizers.impl.refl.ReflectiveAccessorOptimizer.nextToken()</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.optimizers.impl.refl.ReflectiveAccessorOptimizer.val</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.optimizers.impl.refl.Union.Union(org.mvel.Accessor, char[])</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.optimizers.impl.refl.collection.ExprValueAccessor.ExprValueAccessor(java.lang.String)</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.util.ParseTools.balancedCapture(char[], int, char)</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.util.ParseTools.subset(char[], int)</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.optimizers.impl.refl.ReflectiveAccessorOptimizer.optimizeObjectCreation(char[], java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory)</name>
                <outbound type="class" confirmed="no">java.lang.Exception</outbound>
                <outbound type="feature" confirmed="no">java.lang.Exception.getMessage()</outbound>
                <outbound type="class" confirmed="no">java.lang.Object</outbound>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="class" confirmed="no">java.lang.StringBuffer</outbound>
                <outbound type="feature" confirmed="no">java.lang.StringBuffer.StringBuffer(java.lang.String)</outbound>
                <outbound type="feature" confirmed="no">java.lang.StringBuffer.append(java.lang.String)</outbound>
                <outbound type="feature" confirmed="no">java.lang.StringBuffer.toString()</outbound>
                <outbound type="class" confirmed="no">java.lang.Throwable</outbound>
                <outbound type="class" confirmed="yes">org.mvel.Accessor</outbound>
                <outbound type="class" confirmed="yes">org.mvel.AccessorNode</outbound>
                <outbound type="class" confirmed="yes">org.mvel.CompileException</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.CompileException.CompileException(java.lang.String, java.lang.Throwable)</outbound>
                <outbound type="class" confirmed="yes">org.mvel.integration.VariableResolverFactory</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.optimizers.impl.refl.ReflectiveAccessorOptimizer.compileConstructor(char[], java.lang.Object, org.mvel.integration.VariableResolverFactory)</outbound>
                <outbound type="feature" confirmed="no">org.mvel.optimizers.impl.refl.ReflectiveAccessorOptimizer.cursor</outbound>
                <outbound type="feature" confirmed="no">org.mvel.optimizers.impl.refl.ReflectiveAccessorOptimizer.expr</outbound>
                <outbound type="feature" confirmed="no">org.mvel.optimizers.impl.refl.ReflectiveAccessorOptimizer.length</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.optimizers.impl.refl.ReflectiveAccessorOptimizer.optimizeSetAccessor(char[], java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory, boolean, java.lang.Object)</name>
                <outbound type="class" confirmed="no">char[]</outbound>
                <outbound type="class" confirmed="no">java.lang.Class</outbound>
                <outbound type="feature" confirmed="no">java.lang.Class.forName(java.lang.String)</outbound>
                <outbound type="feature" confirmed="no">java.lang.Class.getName()</outbound>
                <outbound type="feature" confirmed="no">java.lang.Class.isArray()</outbound>
                <outbound type="feature" confirmed="no">java.lang.Class.isAssignableFrom(java.lang.Class)</outbound>
                <outbound type="class" confirmed="no">java.lang.ClassNotFoundException</outbound>
                <outbound type="class" confirmed="no">java.lang.IllegalAccessException</outbound>
                <outbound type="class" confirmed="no">java.lang.Integer</outbound>
                <outbound type="feature" confirmed="no">java.lang.Integer.intValue()</outbound>
                <outbound type="feature" confirmed="no">java.lang.NoClassDefFoundError.NoClassDefFoundError(java.lang.String)</outbound>
                <outbound type="class" confirmed="no">java.lang.Object</outbound>
                <outbound type="feature" confirmed="no">java.lang.Object.getClass()</outbound>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="feature" confirmed="no">java.lang.String.String(char[])</outbound>
                <outbound type="feature" confirmed="no">java.lang.String.String(char[], int, int)</outbound>
                <outbound type="class" confirmed="no">java.lang.StringBuffer</outbound>
                <outbound type="feature" confirmed="no">java.lang.StringBuffer.StringBuffer(java.lang.String)</outbound>
                <outbound type="feature" confirmed="no">java.lang.StringBuffer.append(java.lang.Object)</outbound>
                <outbound type="feature" confirmed="no">java.lang.StringBuffer.append(java.lang.String)</outbound>
                <outbound type="feature" confirmed="no">java.lang.StringBuffer.toString()</outbound>
                <outbound type="class" confirmed="no">java.lang.Throwable</outbound>
                <outbound type="feature" confirmed="no">java.lang.Throwable.getMessage()</outbound>
                <outbound type="feature" confirmed="no">java.lang.reflect.Array.set(java.lang.Object, int, java.lang.Object)</outbound>
                <outbound type="class" confirmed="no">java.lang.reflect.Field</outbound>
                <outbound type="feature" confirmed="no">java.lang.reflect.Field.getType()</outbound>
                <outbound type="feature" confirmed="no">java.lang.reflect.Field.set(java.lang.Object, java.lang.Object)</outbound>
                <outbound type="class" confirmed="no">java.lang.reflect.InvocationTargetException</outbound>
                <outbound type="class" confirmed="no">java.lang.reflect.Member</outbound>
                <outbound type="class" confirmed="no">java.lang.reflect.Method</outbound>
                <outbound type="feature" confirmed="no">java.lang.reflect.Method.getParameterTypes()</outbound>
                <outbound type="feature" confirmed="no">java.lang.reflect.Method.invoke(java.lang.Object, java.lang.Object[])</outbound>
                <outbound type="class" confirmed="no">java.util.List</outbound>
                <outbound type="feature" confirmed="no">java.util.List.set(int, java.lang.Object)</outbound>
                <outbound type="class" confirmed="no">java.util.Map</outbound>
                <outbound type="feature" confirmed="no">java.util.Map.put(java.lang.Object, java.lang.Object)</outbound>
                <outbound type="class" confirmed="yes">org.mvel.Accessor</outbound>
                <outbound type="class" confirmed="yes">org.mvel.AccessorNode</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.ConversionException.ConversionException(java.lang.String)</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.DataConversion.canConvert(java.lang.Class, java.lang.Class)</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.DataConversion.convert(java.lang.Object, java.lang.Class)</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.MVEL.eval(java.lang.String, java.lang.Object, org.mvel.integration.VariableResolverFactory)</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.MVEL.eval(java.lang.String, java.lang.Object, org.mvel.integration.VariableResolverFactory, java.lang.Class)</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.PropertyAccessException.PropertyAccessException(java.lang.String)</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.PropertyAccessException.PropertyAccessException(java.lang.String, java.lang.Throwable)</outbound>
                <outbound type="class" confirmed="yes">org.mvel.SetAccessor</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.SetAccessor.SetAccessor(org.mvel.Accessor, org.mvel.Accessor)</outbound>
                <outbound type="class" confirmed="yes">org.mvel.integration.VariableResolverFactory</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.optimizers.impl.refl.ArrayAccessorNest.ArrayAccessorNest(java.lang.String)</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.optimizers.impl.refl.DynamicFieldAccessor.DynamicFieldAccessor(java.lang.reflect.Field)</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.optimizers.impl.refl.FieldAccessor.FieldAccessor(java.lang.reflect.Field)</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.optimizers.impl.refl.ListAccessorNest.ListAccessorNest(java.lang.String)</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.optimizers.impl.refl.MapAccessor.MapAccessor(java.lang.Object)</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.optimizers.impl.refl.MapAccessorNest.MapAccessorNest(java.lang.String)</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.optimizers.impl.refl.ReflectiveAccessorOptimizer.compileGetChain()</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.optimizers.impl.refl.ReflectiveAccessorOptimizer.ctx</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.optimizers.impl.refl.ReflectiveAccessorOptimizer.currNode</outbound>
                <outbound type="feature" confirmed="no">org.mvel.optimizers.impl.refl.ReflectiveAccessorOptimizer.cursor</outbound>
                <outbound type="feature" confirmed="no">org.mvel.optimizers.impl.refl.ReflectiveAccessorOptimizer.expr</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.optimizers.impl.refl.ReflectiveAccessorOptimizer.first</outbound>
                <outbound type="feature" confirmed="no">org.mvel.optimizers.impl.refl.ReflectiveAccessorOptimizer.length</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.optimizers.impl.refl.ReflectiveAccessorOptimizer.rootNode</outbound>
                <outbound type="feature" confirmed="no">org.mvel.optimizers.impl.refl.ReflectiveAccessorOptimizer.scanTo(char)</outbound>
                <outbound type="feature" confirmed="no">org.mvel.optimizers.impl.refl.ReflectiveAccessorOptimizer.start</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.optimizers.impl.refl.ReflectiveAccessorOptimizer.thisRef</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.optimizers.impl.refl.ReflectiveAccessorOptimizer.val</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.optimizers.impl.refl.ReflectiveAccessorOptimizer.variableFactory</outbound>
                <outbound type="feature" confirmed="no">org.mvel.optimizers.impl.refl.ReflectiveAccessorOptimizer.whiteSpaceSkip()</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.optimizers.impl.refl.SetterAccessor.SetterAccessor(java.lang.reflect.Method)</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.util.ParseTools.subset(char[], int, int)</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.util.PropertyTools.getBaseComponentType(java.lang.Class)</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.util.PropertyTools.getFieldOrWriteAccessor(java.lang.Class, java.lang.String)</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.optimizers.impl.refl.ReflectiveAccessorOptimizer.returnType</name>
                <outbound type="class" confirmed="no">java.lang.Class</outbound>
                <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.refl.ReflectiveAccessorOptimizer._getAccessor(java.lang.Object)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.refl.ReflectiveAccessorOptimizer.compileGetChain()</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.refl.ReflectiveAccessorOptimizer.getEgressType()</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.optimizers.impl.refl.ReflectiveAccessorOptimizer.rootNode</name>
                <outbound type="class" confirmed="yes">org.mvel.AccessorNode</outbound>
                <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.refl.ReflectiveAccessorOptimizer.addAccessorNode(org.mvel.AccessorNode)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.refl.ReflectiveAccessorOptimizer.compileGetChain()</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.refl.ReflectiveAccessorOptimizer.getRootNode()</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.refl.ReflectiveAccessorOptimizer.getValue(java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.refl.ReflectiveAccessorOptimizer.optimizeAccessor(char[], java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory, boolean)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.refl.ReflectiveAccessorOptimizer.optimizeSetAccessor(char[], java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory, boolean, java.lang.Object)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.refl.ReflectiveAccessorOptimizer.setRootNode(org.mvel.AccessorNode)</inbound>
            </feature>
            <feature confirmed="no">
                <name>org.mvel.optimizers.impl.refl.ReflectiveAccessorOptimizer.scanTo(char)</name>
                <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.refl.ReflectiveAccessorOptimizer.getCollectionProperty(java.lang.Object, java.lang.String)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.refl.ReflectiveAccessorOptimizer.optimizeSetAccessor(char[], java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory, boolean, java.lang.Object)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.optimizers.impl.refl.ReflectiveAccessorOptimizer.setRootNode(org.mvel.AccessorNode)</name>
                <outbound type="class" confirmed="yes">org.mvel.AccessorNode</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.optimizers.impl.refl.ReflectiveAccessorOptimizer.currNode</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.optimizers.impl.refl.ReflectiveAccessorOptimizer.rootNode</outbound>
                <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.refl.ReflectiveAccessorOptimizer.compileConstructor(char[], java.lang.Object, org.mvel.integration.VariableResolverFactory)</inbound>
            </feature>
            <feature confirmed="no">
                <name>org.mvel.optimizers.impl.refl.ReflectiveAccessorOptimizer.start</name>
                <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.refl.ReflectiveAccessorOptimizer.optimizeAccessor(char[], java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory, boolean)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.refl.ReflectiveAccessorOptimizer.optimizeSetAccessor(char[], java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory, boolean, java.lang.Object)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.optimizers.impl.refl.ReflectiveAccessorOptimizer.static {}</name>
                <outbound type="class" confirmed="no">java.lang.Class</outbound>
                <outbound type="class" confirmed="no">java.lang.Object</outbound>
                <outbound type="class" confirmed="no">java.util.Map</outbound>
                <outbound type="feature" confirmed="no">java.util.WeakHashMap.WeakHashMap()</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.optimizers.impl.refl.ReflectiveAccessorOptimizer.EMPTYARG</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.optimizers.impl.refl.ReflectiveAccessorOptimizer.EMPTYCLS</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.optimizers.impl.refl.ReflectiveAccessorOptimizer.REFLECTIVE_ACCESSOR_CACHE</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.optimizers.impl.refl.ReflectiveAccessorOptimizer.thisRef</name>
                <outbound type="class" confirmed="no">java.lang.Object</outbound>
                <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.refl.ReflectiveAccessorOptimizer.ReflectiveAccessorOptimizer(char[], java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.refl.ReflectiveAccessorOptimizer.getBeanProperty(java.lang.Object, java.lang.String)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.refl.ReflectiveAccessorOptimizer.getCollectionProperty(java.lang.Object, java.lang.String)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.refl.ReflectiveAccessorOptimizer.getMethod(java.lang.Object, java.lang.String)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.refl.ReflectiveAccessorOptimizer.optimizeAccessor(char[], java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory, boolean)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.refl.ReflectiveAccessorOptimizer.optimizeSetAccessor(char[], java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory, boolean, java.lang.Object)</inbound>
            </feature>
            <feature confirmed="no">
                <name>org.mvel.optimizers.impl.refl.ReflectiveAccessorOptimizer.tryStaticAccess()</name>
                <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.refl.ReflectiveAccessorOptimizer.getBeanProperty(java.lang.Object, java.lang.String)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.optimizers.impl.refl.ReflectiveAccessorOptimizer.val</name>
                <outbound type="class" confirmed="no">java.lang.Object</outbound>
                <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.refl.ReflectiveAccessorOptimizer.compileConstructor(char[], java.lang.Object, org.mvel.integration.VariableResolverFactory)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.refl.ReflectiveAccessorOptimizer.compileGetChain()</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.refl.ReflectiveAccessorOptimizer.getResultOptPass()</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.refl.ReflectiveAccessorOptimizer.optimizeFold(char[], java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.refl.ReflectiveAccessorOptimizer.optimizeSetAccessor(char[], java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory, boolean, java.lang.Object)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.optimizers.impl.refl.ReflectiveAccessorOptimizer.variableFactory</name>
                <outbound type="class" confirmed="yes">org.mvel.integration.VariableResolverFactory</outbound>
                <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.refl.ReflectiveAccessorOptimizer.ReflectiveAccessorOptimizer(char[], java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.refl.ReflectiveAccessorOptimizer.getBeanProperty(java.lang.Object, java.lang.String)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.refl.ReflectiveAccessorOptimizer.getCollectionProperty(java.lang.Object, java.lang.String)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.refl.ReflectiveAccessorOptimizer.getMethod(java.lang.Object, java.lang.String)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.refl.ReflectiveAccessorOptimizer.optimizeAccessor(char[], java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory, boolean)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.refl.ReflectiveAccessorOptimizer.optimizeSetAccessor(char[], java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory, boolean, java.lang.Object)</inbound>
            </feature>
            <feature confirmed="no">
                <name>org.mvel.optimizers.impl.refl.ReflectiveAccessorOptimizer.whiteSpaceSkip()</name>
                <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.refl.ReflectiveAccessorOptimizer.getCollectionProperty(java.lang.Object, java.lang.String)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.refl.ReflectiveAccessorOptimizer.optimizeSetAccessor(char[], java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory, boolean, java.lang.Object)</inbound>
            </feature>
        </class>
        <class confirmed="yes">
            <name>org.mvel.optimizers.impl.refl.SetterAccessor</name>
            <outbound type="class" confirmed="no">java.lang.Object</outbound>
            <outbound type="class" confirmed="yes">org.mvel.AccessorNode</outbound>
            <feature confirmed="yes">
                <name>org.mvel.optimizers.impl.refl.SetterAccessor.EMPTY</name>
                <outbound type="class" confirmed="no">java.lang.Object</outbound>
                <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.refl.SetterAccessor.static {}</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.optimizers.impl.refl.SetterAccessor.SetterAccessor(java.lang.reflect.Method)</name>
                <outbound type="class" confirmed="no">java.lang.Class</outbound>
                <outbound type="feature" confirmed="no">java.lang.Object.Object()</outbound>
                <outbound type="class" confirmed="no">java.lang.reflect.Method</outbound>
                <outbound type="feature" confirmed="no">java.lang.reflect.Method.getParameterTypes()</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.optimizers.impl.refl.SetterAccessor.coercionRequired</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.optimizers.impl.refl.SetterAccessor.method</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.optimizers.impl.refl.SetterAccessor.targetType</outbound>
                <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.refl.ReflectiveAccessorOptimizer.optimizeSetAccessor(char[], java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory, boolean, java.lang.Object)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.optimizers.impl.refl.SetterAccessor.coercionRequired</name>
                <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.refl.SetterAccessor.SetterAccessor(java.lang.reflect.Method)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.refl.SetterAccessor.setValue(java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory, java.lang.Object)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.optimizers.impl.refl.SetterAccessor.getMethod()</name>
                <outbound type="class" confirmed="no">java.lang.reflect.Method</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.optimizers.impl.refl.SetterAccessor.method</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.optimizers.impl.refl.SetterAccessor.getNextNode()</name>
                <outbound type="class" confirmed="yes">org.mvel.AccessorNode</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.optimizers.impl.refl.SetterAccessor.nextNode</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.optimizers.impl.refl.SetterAccessor.getValue(java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory)</name>
                <outbound type="class" confirmed="no">java.lang.Object</outbound>
                <outbound type="class" confirmed="yes">org.mvel.integration.VariableResolverFactory</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.optimizers.impl.refl.SetterAccessor.method</name>
                <outbound type="class" confirmed="no">java.lang.reflect.Method</outbound>
                <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.refl.SetterAccessor.SetterAccessor(java.lang.reflect.Method)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.refl.SetterAccessor.getMethod()</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.refl.SetterAccessor.setValue(java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory, java.lang.Object)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.refl.SetterAccessor.toString()</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.optimizers.impl.refl.SetterAccessor.nextNode</name>
                <outbound type="class" confirmed="yes">org.mvel.AccessorNode</outbound>
                <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.refl.SetterAccessor.getNextNode()</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.refl.SetterAccessor.setNextNode(org.mvel.AccessorNode)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.optimizers.impl.refl.SetterAccessor.setNextNode(org.mvel.AccessorNode)</name>
                <outbound type="class" confirmed="yes">org.mvel.AccessorNode</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.optimizers.impl.refl.SetterAccessor.nextNode</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.optimizers.impl.refl.SetterAccessor.setValue(java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory, java.lang.Object)</name>
                <outbound type="class" confirmed="no">java.lang.Class</outbound>
                <outbound type="class" confirmed="no">java.lang.Exception</outbound>
                <outbound type="class" confirmed="no">java.lang.IllegalArgumentException</outbound>
                <outbound type="class" confirmed="no">java.lang.Object</outbound>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="class" confirmed="no">java.lang.Throwable</outbound>
                <outbound type="class" confirmed="no">java.lang.reflect.Method</outbound>
                <outbound type="feature" confirmed="no">java.lang.reflect.Method.invoke(java.lang.Object, java.lang.Object[])</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.CompileException.CompileException(java.lang.String, java.lang.Throwable)</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.DataConversion.convert(java.lang.Object, java.lang.Class)</outbound>
                <outbound type="class" confirmed="yes">org.mvel.integration.VariableResolverFactory</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.optimizers.impl.refl.SetterAccessor.coercionRequired</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.optimizers.impl.refl.SetterAccessor.method</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.optimizers.impl.refl.SetterAccessor.targetType</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.optimizers.impl.refl.SetterAccessor.static {}</name>
                <outbound type="class" confirmed="no">java.lang.Object</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.optimizers.impl.refl.SetterAccessor.EMPTY</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.optimizers.impl.refl.SetterAccessor.targetType</name>
                <outbound type="class" confirmed="no">java.lang.Class</outbound>
                <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.refl.SetterAccessor.SetterAccessor(java.lang.reflect.Method)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.refl.SetterAccessor.setValue(java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory, java.lang.Object)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.optimizers.impl.refl.SetterAccessor.toString()</name>
                <outbound type="class" confirmed="no">java.lang.Class</outbound>
                <outbound type="feature" confirmed="no">java.lang.Class.getName()</outbound>
                <outbound type="class" confirmed="no">java.lang.Object</outbound>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="feature" confirmed="no">java.lang.String.valueOf(java.lang.Object)</outbound>
                <outbound type="class" confirmed="no">java.lang.StringBuffer</outbound>
                <outbound type="feature" confirmed="no">java.lang.StringBuffer.StringBuffer(java.lang.String)</outbound>
                <outbound type="feature" confirmed="no">java.lang.StringBuffer.append(java.lang.String)</outbound>
                <outbound type="feature" confirmed="no">java.lang.StringBuffer.toString()</outbound>
                <outbound type="class" confirmed="no">java.lang.reflect.Method</outbound>
                <outbound type="feature" confirmed="no">java.lang.reflect.Method.getDeclaringClass()</outbound>
                <outbound type="feature" confirmed="no">java.lang.reflect.Method.getName()</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.optimizers.impl.refl.SetterAccessor.method</outbound>
            </feature>
        </class>
        <class confirmed="yes">
            <name>org.mvel.optimizers.impl.refl.StaticReferenceAccessor</name>
            <outbound type="class" confirmed="no">java.lang.Object</outbound>
            <outbound type="class" confirmed="yes">org.mvel.AccessorNode</outbound>
            <feature confirmed="yes">
                <name>org.mvel.optimizers.impl.refl.StaticReferenceAccessor.StaticReferenceAccessor()</name>
                <outbound type="feature" confirmed="no">java.lang.Object.Object()</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.optimizers.impl.refl.StaticReferenceAccessor.StaticReferenceAccessor(java.lang.Object)</name>
                <outbound type="class" confirmed="no">java.lang.Object</outbound>
                <outbound type="feature" confirmed="no">java.lang.Object.Object()</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.optimizers.impl.refl.StaticReferenceAccessor.literal</outbound>
                <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.refl.ReflectiveAccessorOptimizer.getBeanProperty(java.lang.Object, java.lang.String)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.optimizers.impl.refl.StaticReferenceAccessor.getLiteral()</name>
                <outbound type="class" confirmed="no">java.lang.Object</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.optimizers.impl.refl.StaticReferenceAccessor.literal</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.optimizers.impl.refl.StaticReferenceAccessor.getNextNode()</name>
                <outbound type="class" confirmed="yes">org.mvel.AccessorNode</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.optimizers.impl.refl.StaticReferenceAccessor.nextNode</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.optimizers.impl.refl.StaticReferenceAccessor.getValue(java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory)</name>
                <outbound type="class" confirmed="no">java.lang.Object</outbound>
                <outbound type="class" confirmed="yes">org.mvel.AccessorNode</outbound>
                <outbound type="feature" confirmed="no">org.mvel.AccessorNode.getValue(java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory)</outbound>
                <outbound type="class" confirmed="yes">org.mvel.integration.VariableResolverFactory</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.optimizers.impl.refl.StaticReferenceAccessor.literal</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.optimizers.impl.refl.StaticReferenceAccessor.nextNode</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.optimizers.impl.refl.StaticReferenceAccessor.literal</name>
                <outbound type="class" confirmed="no">java.lang.Object</outbound>
                <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.refl.StaticReferenceAccessor.StaticReferenceAccessor(java.lang.Object)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.refl.StaticReferenceAccessor.getLiteral()</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.refl.StaticReferenceAccessor.getValue(java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.refl.StaticReferenceAccessor.setLiteral(java.lang.Object)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.optimizers.impl.refl.StaticReferenceAccessor.nextNode</name>
                <outbound type="class" confirmed="yes">org.mvel.AccessorNode</outbound>
                <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.refl.StaticReferenceAccessor.getNextNode()</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.refl.StaticReferenceAccessor.getValue(java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.refl.StaticReferenceAccessor.setNextNode(org.mvel.AccessorNode)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.optimizers.impl.refl.StaticReferenceAccessor.setLiteral(java.lang.Object)</name>
                <outbound type="class" confirmed="no">java.lang.Object</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.optimizers.impl.refl.StaticReferenceAccessor.literal</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.optimizers.impl.refl.StaticReferenceAccessor.setNextNode(org.mvel.AccessorNode)</name>
                <outbound type="class" confirmed="yes">org.mvel.AccessorNode</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.optimizers.impl.refl.StaticReferenceAccessor.nextNode</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.optimizers.impl.refl.StaticReferenceAccessor.setValue(java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory, java.lang.Object)</name>
                <outbound type="class" confirmed="no">java.lang.Object</outbound>
                <outbound type="class" confirmed="yes">org.mvel.integration.VariableResolverFactory</outbound>
            </feature>
        </class>
        <class confirmed="yes">
            <name>org.mvel.optimizers.impl.refl.StaticVarAccessor</name>
            <outbound type="class" confirmed="no">java.lang.Object</outbound>
            <outbound type="class" confirmed="yes">org.mvel.AccessorNode</outbound>
            <feature confirmed="yes">
                <name>org.mvel.optimizers.impl.refl.StaticVarAccessor.StaticVarAccessor(java.lang.reflect.Field)</name>
                <outbound type="feature" confirmed="no">java.lang.Object.Object()</outbound>
                <outbound type="class" confirmed="no">java.lang.reflect.Field</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.optimizers.impl.refl.StaticVarAccessor.field</outbound>
                <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.refl.ReflectiveAccessorOptimizer.getBeanProperty(java.lang.Object, java.lang.String)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.optimizers.impl.refl.StaticVarAccessor.field</name>
                <outbound type="class" confirmed="no">java.lang.reflect.Field</outbound>
                <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.refl.StaticVarAccessor.StaticVarAccessor(java.lang.reflect.Field)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.refl.StaticVarAccessor.getValue(java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.refl.StaticVarAccessor.setValue(java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory, java.lang.Object)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.optimizers.impl.refl.StaticVarAccessor.getNextNode()</name>
                <outbound type="class" confirmed="yes">org.mvel.AccessorNode</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.optimizers.impl.refl.StaticVarAccessor.nextNode</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.optimizers.impl.refl.StaticVarAccessor.getValue(java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory)</name>
                <outbound type="class" confirmed="no">java.lang.Exception</outbound>
                <outbound type="class" confirmed="no">java.lang.Object</outbound>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="class" confirmed="no">java.lang.Throwable</outbound>
                <outbound type="class" confirmed="no">java.lang.reflect.Field</outbound>
                <outbound type="feature" confirmed="no">java.lang.reflect.Field.get(java.lang.Object)</outbound>
                <outbound type="class" confirmed="yes">org.mvel.AccessorNode</outbound>
                <outbound type="feature" confirmed="no">org.mvel.AccessorNode.getValue(java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory)</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.OptimizationFailure.OptimizationFailure(java.lang.String, java.lang.Throwable)</outbound>
                <outbound type="class" confirmed="yes">org.mvel.integration.VariableResolverFactory</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.optimizers.impl.refl.StaticVarAccessor.field</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.optimizers.impl.refl.StaticVarAccessor.nextNode</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.optimizers.impl.refl.StaticVarAccessor.nextNode</name>
                <outbound type="class" confirmed="yes">org.mvel.AccessorNode</outbound>
                <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.refl.StaticVarAccessor.getNextNode()</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.refl.StaticVarAccessor.getValue(java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.refl.StaticVarAccessor.setNextNode(org.mvel.AccessorNode)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.optimizers.impl.refl.StaticVarAccessor.setNextNode(org.mvel.AccessorNode)</name>
                <outbound type="class" confirmed="yes">org.mvel.AccessorNode</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.optimizers.impl.refl.StaticVarAccessor.nextNode</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.optimizers.impl.refl.StaticVarAccessor.setValue(java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory, java.lang.Object)</name>
                <outbound type="class" confirmed="no">java.lang.Exception</outbound>
                <outbound type="class" confirmed="no">java.lang.Object</outbound>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="class" confirmed="no">java.lang.Throwable</outbound>
                <outbound type="class" confirmed="no">java.lang.reflect.Field</outbound>
                <outbound type="feature" confirmed="no">java.lang.reflect.Field.set(java.lang.Object, java.lang.Object)</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.CompileException.CompileException(java.lang.String, java.lang.Throwable)</outbound>
                <outbound type="class" confirmed="yes">org.mvel.integration.VariableResolverFactory</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.optimizers.impl.refl.StaticVarAccessor.field</outbound>
            </feature>
        </class>
        <class confirmed="yes">
            <name>org.mvel.optimizers.impl.refl.ThisValueAccessor</name>
            <outbound type="class" confirmed="no">java.lang.Object</outbound>
            <outbound type="class" confirmed="yes">org.mvel.AccessorNode</outbound>
            <feature confirmed="yes">
                <name>org.mvel.optimizers.impl.refl.ThisValueAccessor.ThisValueAccessor()</name>
                <outbound type="feature" confirmed="no">java.lang.Object.Object()</outbound>
                <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.refl.ReflectiveAccessorOptimizer.getBeanProperty(java.lang.Object, java.lang.String)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.optimizers.impl.refl.ThisValueAccessor.getNextNode()</name>
                <outbound type="class" confirmed="yes">org.mvel.AccessorNode</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.optimizers.impl.refl.ThisValueAccessor.nextNode</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.optimizers.impl.refl.ThisValueAccessor.getValue(java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory)</name>
                <outbound type="class" confirmed="no">java.lang.Object</outbound>
                <outbound type="class" confirmed="yes">org.mvel.AccessorNode</outbound>
                <outbound type="feature" confirmed="no">org.mvel.AccessorNode.getValue(java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory)</outbound>
                <outbound type="class" confirmed="yes">org.mvel.integration.VariableResolverFactory</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.optimizers.impl.refl.ThisValueAccessor.nextNode</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.optimizers.impl.refl.ThisValueAccessor.nextNode</name>
                <outbound type="class" confirmed="yes">org.mvel.AccessorNode</outbound>
                <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.refl.ThisValueAccessor.getNextNode()</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.refl.ThisValueAccessor.getValue(java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.refl.ThisValueAccessor.setNextNode(org.mvel.AccessorNode)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.optimizers.impl.refl.ThisValueAccessor.setNextNode(org.mvel.AccessorNode)</name>
                <outbound type="class" confirmed="yes">org.mvel.AccessorNode</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.optimizers.impl.refl.ThisValueAccessor.nextNode</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.optimizers.impl.refl.ThisValueAccessor.setValue(java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory, java.lang.Object)</name>
                <outbound type="class" confirmed="no">java.lang.Object</outbound>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.CompileException.CompileException(java.lang.String)</outbound>
                <outbound type="class" confirmed="yes">org.mvel.integration.VariableResolverFactory</outbound>
            </feature>
        </class>
        <class confirmed="yes">
            <name>org.mvel.optimizers.impl.refl.Union</name>
            <outbound type="class" confirmed="no">java.lang.Object</outbound>
            <outbound type="class" confirmed="yes">org.mvel.Accessor</outbound>
            <feature confirmed="yes">
                <name>org.mvel.optimizers.impl.refl.Union.Union(org.mvel.Accessor, char[])</name>
                <outbound type="feature" confirmed="no">java.lang.Object.Object()</outbound>
                <outbound type="class" confirmed="yes">org.mvel.Accessor</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.optimizers.impl.refl.Union.accessor</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.optimizers.impl.refl.Union.nextExpr</outbound>
                <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.asm.ASMAccessorOptimizer.optimizeCollection(char[], java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.asm.ASMAccessorOptimizer.optimizeObjectCreation(char[], java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.refl.ReflectiveAccessorOptimizer.optimizeCollection(char[], java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.refl.ReflectiveAccessorOptimizer.optimizeFold(char[], java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.optimizers.impl.refl.Union.accessor</name>
                <outbound type="class" confirmed="yes">org.mvel.Accessor</outbound>
                <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.refl.Union.Union(org.mvel.Accessor, char[])</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.refl.Union.getValue(java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.optimizers.impl.refl.Union.getValue(java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory)</name>
                <outbound type="class" confirmed="no">java.lang.Object</outbound>
                <outbound type="class" confirmed="yes">org.mvel.Accessor</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.Accessor.getValue(java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory)</outbound>
                <outbound type="class" confirmed="yes">org.mvel.integration.VariableResolverFactory</outbound>
                <outbound type="class" confirmed="yes">org.mvel.optimizers.AccessorOptimizer</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.optimizers.AccessorOptimizer.getResultOptPass()</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.optimizers.AccessorOptimizer.optimizeAccessor(char[], java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory, boolean)</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.optimizers.OptimizerFactory.getDefaultAccessorCompiler()</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.optimizers.impl.refl.Union.accessor</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.optimizers.impl.refl.Union.nextAccessor</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.optimizers.impl.refl.Union.nextExpr</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.optimizers.impl.refl.Union.nextAccessor</name>
                <outbound type="class" confirmed="yes">org.mvel.Accessor</outbound>
                <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.refl.Union.getValue(java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.optimizers.impl.refl.Union.nextExpr</name>
                <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.refl.Union.Union(org.mvel.Accessor, char[])</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.refl.Union.getValue(java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.optimizers.impl.refl.Union.setValue(java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory, java.lang.Object)</name>
                <outbound type="class" confirmed="no">java.lang.Object</outbound>
                <outbound type="class" confirmed="yes">org.mvel.integration.VariableResolverFactory</outbound>
            </feature>
        </class>
        <class confirmed="yes">
            <name>org.mvel.optimizers.impl.refl.VariableAccessor</name>
            <outbound type="class" confirmed="no">java.lang.Object</outbound>
            <outbound type="class" confirmed="yes">org.mvel.AccessorNode</outbound>
            <feature confirmed="yes">
                <name>org.mvel.optimizers.impl.refl.VariableAccessor.VariableAccessor(java.lang.String, org.mvel.integration.VariableResolverFactory)</name>
                <outbound type="feature" confirmed="no">java.lang.Object.Object()</outbound>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="class" confirmed="yes">org.mvel.integration.VariableResolverFactory</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.optimizers.impl.refl.VariableAccessor.property</outbound>
                <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.refl.ReflectiveAccessorOptimizer.getBeanProperty(java.lang.Object, java.lang.String)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.optimizers.impl.refl.VariableAccessor.getNextNode()</name>
                <outbound type="class" confirmed="yes">org.mvel.AccessorNode</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.optimizers.impl.refl.VariableAccessor.nextNode</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.optimizers.impl.refl.VariableAccessor.getProperty()</name>
                <outbound type="class" confirmed="no">java.lang.Object</outbound>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.optimizers.impl.refl.VariableAccessor.property</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.optimizers.impl.refl.VariableAccessor.getValue(java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory)</name>
                <outbound type="class" confirmed="no">java.lang.Object</outbound>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="class" confirmed="no">java.lang.StringBuffer</outbound>
                <outbound type="feature" confirmed="no">java.lang.StringBuffer.StringBuffer(java.lang.String)</outbound>
                <outbound type="feature" confirmed="no">java.lang.StringBuffer.append(java.lang.String)</outbound>
                <outbound type="feature" confirmed="no">java.lang.StringBuffer.toString()</outbound>
                <outbound type="class" confirmed="yes">org.mvel.AccessorNode</outbound>
                <outbound type="feature" confirmed="no">org.mvel.AccessorNode.getValue(java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory)</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.CompileException.CompileException(java.lang.String)</outbound>
                <outbound type="class" confirmed="yes">org.mvel.integration.VariableResolver</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.integration.VariableResolver.getValue()</outbound>
                <outbound type="class" confirmed="yes">org.mvel.integration.VariableResolverFactory</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.integration.VariableResolverFactory.getVariableResolver(java.lang.String)</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.optimizers.impl.refl.VariableAccessor.nextNode</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.optimizers.impl.refl.VariableAccessor.property</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.optimizers.impl.refl.VariableAccessor.nextNode</name>
                <outbound type="class" confirmed="yes">org.mvel.AccessorNode</outbound>
                <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.refl.VariableAccessor.getNextNode()</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.refl.VariableAccessor.getValue(java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.refl.VariableAccessor.setNextNode(org.mvel.AccessorNode)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.optimizers.impl.refl.VariableAccessor.property</name>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.refl.VariableAccessor.VariableAccessor(java.lang.String, org.mvel.integration.VariableResolverFactory)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.refl.VariableAccessor.getProperty()</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.refl.VariableAccessor.getValue(java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.refl.VariableAccessor.setProperty(java.lang.String)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.refl.VariableAccessor.setValue(java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory, java.lang.Object)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.optimizers.impl.refl.VariableAccessor.setNextNode(org.mvel.AccessorNode)</name>
                <outbound type="class" confirmed="yes">org.mvel.AccessorNode</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.optimizers.impl.refl.VariableAccessor.nextNode</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.optimizers.impl.refl.VariableAccessor.setProperty(java.lang.String)</name>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.optimizers.impl.refl.VariableAccessor.property</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.optimizers.impl.refl.VariableAccessor.setValue(java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory, java.lang.Object)</name>
                <outbound type="class" confirmed="no">java.lang.Object</outbound>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="class" confirmed="yes">org.mvel.integration.VariableResolver</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.integration.VariableResolver.setValue(java.lang.Object)</outbound>
                <outbound type="class" confirmed="yes">org.mvel.integration.VariableResolverFactory</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.integration.VariableResolverFactory.getVariableResolver(java.lang.String)</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.optimizers.impl.refl.VariableAccessor.property</outbound>
            </feature>
        </class>
    </package>
    <package confirmed="yes">
        <name>org.mvel.optimizers.impl.refl.collection</name>
        <class confirmed="yes">
            <name>org.mvel.optimizers.impl.refl.collection.ArrayCreator</name>
            <outbound type="class" confirmed="no">java.lang.Object</outbound>
            <outbound type="class" confirmed="yes">org.mvel.Accessor</outbound>
            <feature confirmed="yes">
                <name>org.mvel.optimizers.impl.refl.collection.ArrayCreator.ArrayCreator(org.mvel.Accessor[])</name>
                <outbound type="feature" confirmed="no">java.lang.Object.Object()</outbound>
                <outbound type="class" confirmed="yes">org.mvel.Accessor</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.optimizers.impl.refl.collection.ArrayCreator.template</outbound>
                <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.refl.ReflectiveAccessorOptimizer._getAccessor(java.lang.Object)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.optimizers.impl.refl.collection.ArrayCreator.getValue(java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory)</name>
                <outbound type="class" confirmed="no">java.lang.Object</outbound>
                <outbound type="class" confirmed="yes">org.mvel.Accessor</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.Accessor.getValue(java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory)</outbound>
                <outbound type="class" confirmed="yes">org.mvel.integration.VariableResolverFactory</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.optimizers.impl.refl.collection.ArrayCreator.template</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.optimizers.impl.refl.collection.ArrayCreator.setValue(java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory, java.lang.Object)</name>
                <outbound type="class" confirmed="no">java.lang.Object</outbound>
                <outbound type="class" confirmed="yes">org.mvel.integration.VariableResolverFactory</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.optimizers.impl.refl.collection.ArrayCreator.template</name>
                <outbound type="class" confirmed="yes">org.mvel.Accessor</outbound>
                <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.refl.collection.ArrayCreator.ArrayCreator(org.mvel.Accessor[])</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.refl.collection.ArrayCreator.getValue(java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory)</inbound>
            </feature>
        </class>
        <class confirmed="yes">
            <name>org.mvel.optimizers.impl.refl.collection.ExprValueAccessor</name>
            <outbound type="class" confirmed="no">java.lang.Object</outbound>
            <outbound type="class" confirmed="yes">org.mvel.Accessor</outbound>
            <feature confirmed="yes">
                <name>org.mvel.optimizers.impl.refl.collection.ExprValueAccessor.ExprValueAccessor(java.lang.String)</name>
                <outbound type="class" confirmed="no">java.io.Serializable</outbound>
                <outbound type="feature" confirmed="no">java.lang.Object.Object()</outbound>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="class" confirmed="yes">org.mvel.ExecutableStatement</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.optimizers.impl.refl.collection.ExprValueAccessor.stmt</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.util.ParseTools.subCompileExpression(java.lang.String)</outbound>
                <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.refl.ReflectiveAccessorOptimizer._getAccessor(java.lang.Object)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.refl.ReflectiveAccessorOptimizer.optimizeFold(char[], java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.optimizers.impl.refl.collection.ExprValueAccessor.getValue(java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory)</name>
                <outbound type="class" confirmed="no">java.lang.Object</outbound>
                <outbound type="class" confirmed="yes">org.mvel.ExecutableStatement</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.ExecutableStatement.getValue(java.lang.Object, org.mvel.integration.VariableResolverFactory)</outbound>
                <outbound type="class" confirmed="yes">org.mvel.integration.VariableResolverFactory</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.optimizers.impl.refl.collection.ExprValueAccessor.stmt</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.optimizers.impl.refl.collection.ExprValueAccessor.setValue(java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory, java.lang.Object)</name>
                <outbound type="class" confirmed="no">java.lang.Object</outbound>
                <outbound type="class" confirmed="yes">org.mvel.integration.VariableResolverFactory</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.optimizers.impl.refl.collection.ExprValueAccessor.stmt</name>
                <outbound type="class" confirmed="yes">org.mvel.ExecutableStatement</outbound>
                <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.refl.collection.ExprValueAccessor.ExprValueAccessor(java.lang.String)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.refl.collection.ExprValueAccessor.getValue(java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory)</inbound>
            </feature>
        </class>
        <class confirmed="yes">
            <name>org.mvel.optimizers.impl.refl.collection.ListCreator</name>
            <outbound type="class" confirmed="no">java.lang.Object</outbound>
            <outbound type="class" confirmed="yes">org.mvel.Accessor</outbound>
            <feature confirmed="yes">
                <name>org.mvel.optimizers.impl.refl.collection.ListCreator.ListCreator(org.mvel.Accessor[])</name>
                <outbound type="feature" confirmed="no">java.lang.Object.Object()</outbound>
                <outbound type="class" confirmed="yes">org.mvel.Accessor</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.optimizers.impl.refl.collection.ListCreator.values</outbound>
                <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.refl.ReflectiveAccessorOptimizer._getAccessor(java.lang.Object)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.optimizers.impl.refl.collection.ListCreator.getValue(java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory)</name>
                <outbound type="class" confirmed="no">java.lang.Object</outbound>
                <outbound type="class" confirmed="yes">org.mvel.Accessor</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.Accessor.getValue(java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory)</outbound>
                <outbound type="class" confirmed="yes">org.mvel.integration.VariableResolverFactory</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.optimizers.impl.refl.collection.ListCreator.values</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.util.FastList.FastList(java.lang.Object[])</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.optimizers.impl.refl.collection.ListCreator.setValue(java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory, java.lang.Object)</name>
                <outbound type="class" confirmed="no">java.lang.Object</outbound>
                <outbound type="class" confirmed="yes">org.mvel.integration.VariableResolverFactory</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.optimizers.impl.refl.collection.ListCreator.values</name>
                <outbound type="class" confirmed="yes">org.mvel.Accessor</outbound>
                <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.refl.collection.ListCreator.ListCreator(org.mvel.Accessor[])</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.refl.collection.ListCreator.getValue(java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory)</inbound>
            </feature>
        </class>
        <class confirmed="yes">
            <name>org.mvel.optimizers.impl.refl.collection.MapCreator</name>
            <outbound type="class" confirmed="no">java.lang.Object</outbound>
            <outbound type="class" confirmed="yes">org.mvel.Accessor</outbound>
            <feature confirmed="yes">
                <name>org.mvel.optimizers.impl.refl.collection.MapCreator.MapCreator(org.mvel.Accessor[], org.mvel.Accessor[])</name>
                <outbound type="feature" confirmed="no">java.lang.Object.Object()</outbound>
                <outbound type="class" confirmed="yes">org.mvel.Accessor</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.optimizers.impl.refl.collection.MapCreator.keys</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.optimizers.impl.refl.collection.MapCreator.size</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.optimizers.impl.refl.collection.MapCreator.vals</outbound>
                <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.refl.ReflectiveAccessorOptimizer._getAccessor(java.lang.Object)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.optimizers.impl.refl.collection.MapCreator.getValue(java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory)</name>
                <outbound type="class" confirmed="no">java.lang.Object</outbound>
                <outbound type="feature" confirmed="no">java.util.HashMap.HashMap(int)</outbound>
                <outbound type="feature" confirmed="no">java.util.Map.put(java.lang.Object, java.lang.Object)</outbound>
                <outbound type="class" confirmed="yes">org.mvel.Accessor</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.Accessor.getValue(java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory)</outbound>
                <outbound type="class" confirmed="yes">org.mvel.integration.VariableResolverFactory</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.optimizers.impl.refl.collection.MapCreator.keys</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.optimizers.impl.refl.collection.MapCreator.size</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.optimizers.impl.refl.collection.MapCreator.vals</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.optimizers.impl.refl.collection.MapCreator.keys</name>
                <outbound type="class" confirmed="yes">org.mvel.Accessor</outbound>
                <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.refl.collection.MapCreator.MapCreator(org.mvel.Accessor[], org.mvel.Accessor[])</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.refl.collection.MapCreator.getValue(java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.optimizers.impl.refl.collection.MapCreator.setValue(java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory, java.lang.Object)</name>
                <outbound type="class" confirmed="no">java.lang.Object</outbound>
                <outbound type="class" confirmed="yes">org.mvel.integration.VariableResolverFactory</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.optimizers.impl.refl.collection.MapCreator.size</name>
                <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.refl.collection.MapCreator.MapCreator(org.mvel.Accessor[], org.mvel.Accessor[])</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.refl.collection.MapCreator.getValue(java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.optimizers.impl.refl.collection.MapCreator.vals</name>
                <outbound type="class" confirmed="yes">org.mvel.Accessor</outbound>
                <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.refl.collection.MapCreator.MapCreator(org.mvel.Accessor[], org.mvel.Accessor[])</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.refl.collection.MapCreator.getValue(java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory)</inbound>
            </feature>
        </class>
    </package>
    <package confirmed="yes">
        <name>org.mvel.util</name>
        <class confirmed="yes">
            <name>org.mvel.util.ArrayTools</name>
            <outbound type="class" confirmed="no">java.lang.Object</outbound>
            <feature confirmed="yes">
                <name>org.mvel.util.ArrayTools.ArrayTools()</name>
                <outbound type="feature" confirmed="no">java.lang.Object.Object()</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.util.ArrayTools.charTranspose(java.lang.Object[])</name>
                <outbound type="class" confirmed="no">java.lang.Object</outbound>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="feature" confirmed="no">java.lang.String.charAt(int)</outbound>
                <outbound type="feature" confirmed="no">java.lang.String.valueOf(java.lang.Object)</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.util.ArrayTools.collectionTranspose(java.util.Collection, java.lang.Class)</name>
                <outbound type="class" confirmed="no">java.lang.Class</outbound>
                <outbound type="class" confirmed="no">java.lang.Object</outbound>
                <outbound type="class" confirmed="no">java.lang.Object[]</outbound>
                <outbound type="feature" confirmed="no">java.lang.reflect.Array.newInstance(java.lang.Class, int)</outbound>
                <outbound type="class" confirmed="no">java.util.Collection</outbound>
                <outbound type="feature" confirmed="no">java.util.Collection.iterator()</outbound>
                <outbound type="feature" confirmed="no">java.util.Collection.size()</outbound>
                <outbound type="class" confirmed="no">java.util.Iterator</outbound>
                <outbound type="feature" confirmed="no">java.util.Iterator.hasNext()</outbound>
                <outbound type="feature" confirmed="no">java.util.Iterator.next()</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.util.ArrayTools.findFirst(char, char[])</name>
                <inbound type="feature" confirmed="yes">org.mvel.ASTNode.getReducedValue(java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.ASTNode.setName(char[])</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.AbstractParser.createPropertyToken(int, int)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.ast.AssignmentNode.AssignmentNode(char[], int, int, java.lang.String)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.ast.NewObjectNode.getReducedValue(java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.ast.NewObjectNode.rewriteClassReferenceToFQCN(int)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.ast.NewObjectNode.updateClassName(int)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.asm.ASMAccessorOptimizer.optimizeObjectCreation(char[], java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.refl.ReflectiveAccessorOptimizer.compileConstructor(char[], java.lang.Object, org.mvel.integration.VariableResolverFactory)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.util.ArrayTools.findLast(char, char[])</name>
                <inbound type="feature" confirmed="yes">org.mvel.ast.StaticImportNode.StaticImportNode(char[], int)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.util.ArrayTools.floatTranspose(java.lang.Object[])</name>
                <outbound type="feature" confirmed="no">java.lang.Float.parseFloat(java.lang.String)</outbound>
                <outbound type="class" confirmed="no">java.lang.Object</outbound>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="feature" confirmed="no">java.lang.String.valueOf(java.lang.Object)</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.util.ArrayTools.intTranspose(java.lang.Object[])</name>
                <outbound type="feature" confirmed="no">java.lang.Integer.parseInt(java.lang.String)</outbound>
                <outbound type="class" confirmed="no">java.lang.Object</outbound>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="feature" confirmed="no">java.lang.String.valueOf(java.lang.Object)</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.util.ArrayTools.listTranspose(boolean[])</name>
                <outbound type="feature" confirmed="no">java.lang.Boolean.Boolean(boolean)</outbound>
                <outbound type="class" confirmed="no">java.lang.Object</outbound>
                <outbound type="feature" confirmed="no">java.util.ArrayList.ArrayList(int)</outbound>
                <outbound type="class" confirmed="no">java.util.List</outbound>
                <outbound type="feature" confirmed="no">java.util.List.add(int, java.lang.Object)</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.util.ArrayTools.listTranspose(char[])</name>
                <outbound type="feature" confirmed="no">java.lang.Character.Character(char)</outbound>
                <outbound type="class" confirmed="no">java.lang.Object</outbound>
                <outbound type="feature" confirmed="no">java.util.ArrayList.ArrayList(int)</outbound>
                <outbound type="class" confirmed="no">java.util.List</outbound>
                <outbound type="feature" confirmed="no">java.util.List.add(int, java.lang.Object)</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.util.ArrayTools.listTranspose(double[])</name>
                <outbound type="feature" confirmed="no">java.lang.Double.Double(double)</outbound>
                <outbound type="class" confirmed="no">java.lang.Object</outbound>
                <outbound type="feature" confirmed="no">java.util.ArrayList.ArrayList(int)</outbound>
                <outbound type="class" confirmed="no">java.util.List</outbound>
                <outbound type="feature" confirmed="no">java.util.List.add(int, java.lang.Object)</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.util.ArrayTools.listTranspose(int[])</name>
                <outbound type="feature" confirmed="no">java.lang.Integer.Integer(int)</outbound>
                <outbound type="class" confirmed="no">java.lang.Object</outbound>
                <outbound type="feature" confirmed="no">java.util.ArrayList.ArrayList(int)</outbound>
                <outbound type="class" confirmed="no">java.util.List</outbound>
                <outbound type="feature" confirmed="no">java.util.List.add(int, java.lang.Object)</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.util.ArrayTools.listTranspose(java.lang.String[])</name>
                <outbound type="class" confirmed="no">java.lang.Object</outbound>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="feature" confirmed="no">java.util.ArrayList.ArrayList(int)</outbound>
                <outbound type="class" confirmed="no">java.util.List</outbound>
                <outbound type="feature" confirmed="no">java.util.List.add(int, java.lang.Object)</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.util.ArrayTools.listTranspose(long[])</name>
                <outbound type="feature" confirmed="no">java.lang.Long.Long(long)</outbound>
                <outbound type="class" confirmed="no">java.lang.Object</outbound>
                <outbound type="feature" confirmed="no">java.util.ArrayList.ArrayList(int)</outbound>
                <outbound type="class" confirmed="no">java.util.List</outbound>
                <outbound type="feature" confirmed="no">java.util.List.add(int, java.lang.Object)</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.util.ArrayTools.listTranspose(short[])</name>
                <outbound type="class" confirmed="no">java.lang.Object</outbound>
                <outbound type="feature" confirmed="no">java.lang.Short.Short(short)</outbound>
                <outbound type="feature" confirmed="no">java.util.ArrayList.ArrayList(int)</outbound>
                <outbound type="class" confirmed="no">java.util.List</outbound>
                <outbound type="feature" confirmed="no">java.util.List.add(int, java.lang.Object)</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.util.ArrayTools.longTranspose(java.lang.Object[])</name>
                <outbound type="feature" confirmed="no">java.lang.Long.parseLong(java.lang.String)</outbound>
                <outbound type="class" confirmed="no">java.lang.Object</outbound>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="feature" confirmed="no">java.lang.String.valueOf(java.lang.Object)</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.util.ArrayTools.setTranspose(java.lang.String[])</name>
                <outbound type="class" confirmed="no">java.lang.Object</outbound>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="feature" confirmed="no">java.util.HashSet.HashSet(int)</outbound>
                <outbound type="class" confirmed="no">java.util.Set</outbound>
                <outbound type="feature" confirmed="no">java.util.Set.add(java.lang.Object)</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.util.ArrayTools.shortTranspose(java.lang.Object[])</name>
                <outbound type="class" confirmed="no">java.lang.Object</outbound>
                <outbound type="feature" confirmed="no">java.lang.Short.parseShort(java.lang.String)</outbound>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="feature" confirmed="no">java.lang.String.valueOf(java.lang.Object)</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.util.ArrayTools.stringTranspose(boolean[])</name>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="feature" confirmed="no">java.lang.String.valueOf(boolean)</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.util.ArrayTools.stringTranspose(char[])</name>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="feature" confirmed="no">java.lang.String.valueOf(char)</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.util.ArrayTools.stringTranspose(double[])</name>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="feature" confirmed="no">java.lang.String.valueOf(double)</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.util.ArrayTools.stringTranspose(int[])</name>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="feature" confirmed="no">java.lang.String.valueOf(int)</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.util.ArrayTools.stringTranspose(java.lang.Object[])</name>
                <outbound type="class" confirmed="no">java.lang.Object</outbound>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="feature" confirmed="no">java.lang.String.valueOf(java.lang.Object)</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.util.ArrayTools.stringTranspose(java.util.Collection)</name>
                <outbound type="class" confirmed="no">java.lang.Object</outbound>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="feature" confirmed="no">java.lang.String.valueOf(java.lang.Object)</outbound>
                <outbound type="class" confirmed="no">java.util.Collection</outbound>
                <outbound type="feature" confirmed="no">java.util.Collection.iterator()</outbound>
                <outbound type="feature" confirmed="no">java.util.Collection.size()</outbound>
                <outbound type="class" confirmed="no">java.util.Iterator</outbound>
                <outbound type="feature" confirmed="no">java.util.Iterator.hasNext()</outbound>
                <outbound type="feature" confirmed="no">java.util.Iterator.next()</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.util.ArrayTools.stringTranspose(long[])</name>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="feature" confirmed="no">java.lang.String.valueOf(long)</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.util.ArrayTools.stringTranspose(short[])</name>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="feature" confirmed="no">java.lang.String.valueOf(int)</outbound>
            </feature>
        </class>
        <class confirmed="yes">
            <name>org.mvel.util.CollectionParser</name>
            <outbound type="class" confirmed="no">java.lang.Object</outbound>
            <feature confirmed="yes">
                <name>org.mvel.util.CollectionParser.ARRAY</name>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.util.CollectionParser.CollectionParser()</name>
                <outbound type="feature" confirmed="no">java.lang.Object.Object()</outbound>
                <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.asm.ASMAccessorOptimizer.optimizeCollection(char[], java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.refl.ReflectiveAccessorOptimizer.optimizeCollection(char[], java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.util.CollectionParser.CollectionParser(int)</name>
                <outbound type="feature" confirmed="no">java.lang.Object.Object()</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.util.CollectionParser.type</outbound>
                <inbound type="feature" confirmed="yes">org.mvel.util.CollectionParser.parseCollection()</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.util.CollectionParser.EMPTY_ARRAY</name>
                <outbound type="class" confirmed="no">java.lang.Object</outbound>
                <inbound type="feature" confirmed="yes">org.mvel.util.CollectionParser.parseCollection()</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.util.CollectionParser.static {}</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.util.CollectionParser.LIST</name>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.util.CollectionParser.MAP</name>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.util.CollectionParser.cursor</name>
                <inbound type="feature" confirmed="yes">org.mvel.util.CollectionParser.getCursor()</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.util.CollectionParser.parseCollection()</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.util.CollectionParser.parseCollection(char[])</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.util.CollectionParser.getCursor()</name>
                <outbound type="feature" confirmed="yes">org.mvel.util.CollectionParser.cursor</outbound>
                <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.asm.ASMAccessorOptimizer.optimizeCollection(char[], java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.refl.ReflectiveAccessorOptimizer.optimizeCollection(char[], java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.util.CollectionParser.length</name>
                <inbound type="feature" confirmed="yes">org.mvel.util.CollectionParser.parseCollection()</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.util.CollectionParser.parseCollection(char[])</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.util.CollectionParser.parseCollection()</name>
                <outbound type="class" confirmed="no">java.lang.Object</outbound>
                <outbound type="feature" confirmed="no">java.lang.RuntimeException.RuntimeException(java.lang.String)</outbound>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="feature" confirmed="no">java.lang.String.String(char[])</outbound>
                <outbound type="feature" confirmed="no">java.lang.String.String(char[], int, int)</outbound>
                <outbound type="feature" confirmed="no">java.lang.String.trim()</outbound>
                <outbound type="class" confirmed="no">java.lang.StringBuffer</outbound>
                <outbound type="feature" confirmed="no">java.lang.StringBuffer.StringBuffer(java.lang.String)</outbound>
                <outbound type="feature" confirmed="no">java.lang.StringBuffer.append(char)</outbound>
                <outbound type="feature" confirmed="no">java.lang.StringBuffer.append(int)</outbound>
                <outbound type="feature" confirmed="no">java.lang.StringBuffer.append(java.lang.String)</outbound>
                <outbound type="feature" confirmed="no">java.lang.StringBuffer.toString()</outbound>
                <outbound type="feature" confirmed="no">java.util.ArrayList.ArrayList()</outbound>
                <outbound type="feature" confirmed="no">java.util.HashMap.HashMap()</outbound>
                <outbound type="feature" confirmed="no">java.util.List.add(java.lang.Object)</outbound>
                <outbound type="feature" confirmed="no">java.util.List.toArray()</outbound>
                <outbound type="feature" confirmed="no">java.util.Map.put(java.lang.Object, java.lang.Object)</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.util.CollectionParser.CollectionParser(int)</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.util.CollectionParser.EMPTY_ARRAY</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.util.CollectionParser.cursor</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.util.CollectionParser.length</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.util.CollectionParser.parseCollection(char[])</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.util.CollectionParser.property</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.util.CollectionParser.start</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.util.CollectionParser.subset(char[], int, int)</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.util.CollectionParser.type</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.util.ParseTools.balancedCapture(char[], int, char)</outbound>
                <inbound type="feature" confirmed="yes">org.mvel.util.CollectionParser.parseCollection(char[])</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.util.CollectionParser.parseCollection(char[])</name>
                <outbound type="feature" confirmed="no">java.lang.Character.isWhitespace(char)</outbound>
                <outbound type="class" confirmed="no">java.lang.Object</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.util.CollectionParser.cursor</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.util.CollectionParser.length</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.util.CollectionParser.parseCollection()</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.util.CollectionParser.property</outbound>
                <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.asm.ASMAccessorOptimizer.optimizeCollection(char[], java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.refl.ReflectiveAccessorOptimizer.optimizeCollection(char[], java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.util.CollectionParser.parseCollection()</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.util.CollectionParser.property</name>
                <inbound type="feature" confirmed="yes">org.mvel.util.CollectionParser.parseCollection()</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.util.CollectionParser.parseCollection(char[])</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.util.CollectionParser.start</name>
                <inbound type="feature" confirmed="yes">org.mvel.util.CollectionParser.parseCollection()</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.util.CollectionParser.static {}</name>
                <outbound type="class" confirmed="no">java.lang.Object</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.util.CollectionParser.EMPTY_ARRAY</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.util.CollectionParser.subset(char[], int, int)</name>
                <outbound type="feature" confirmed="no">java.lang.Character.isWhitespace(char)</outbound>
                <outbound type="class" confirmed="no">java.lang.Object</outbound>
                <outbound type="feature" confirmed="no">java.lang.System.arraycopy(java.lang.Object, int, java.lang.Object, int, int)</outbound>
                <inbound type="feature" confirmed="yes">org.mvel.util.CollectionParser.parseCollection()</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.util.CollectionParser.type</name>
                <inbound type="feature" confirmed="yes">org.mvel.util.CollectionParser.CollectionParser(int)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.util.CollectionParser.parseCollection()</inbound>
            </feature>
        </class>
        <class confirmed="yes">
            <name>org.mvel.util.CompilerTools</name>
            <outbound type="class" confirmed="no">java.lang.Object</outbound>
            <feature confirmed="yes">
                <name>org.mvel.util.CompilerTools.CompilerTools()</name>
                <outbound type="feature" confirmed="no">java.lang.Object.Object()</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.util.CompilerTools.isOperator(char)</name>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.util.CompilerTools.optimizeAST(org.mvel.ASTLinkedList, boolean)</name>
                <outbound type="class" confirmed="no">java.io.PrintStream</outbound>
                <outbound type="feature" confirmed="no">java.io.PrintStream.println(java.lang.String)</outbound>
                <outbound type="class" confirmed="no">java.lang.Integer</outbound>
                <outbound type="feature" confirmed="no">java.lang.Integer.Integer(int)</outbound>
                <outbound type="feature" confirmed="no">java.lang.Integer.intValue()</outbound>
                <outbound type="class" confirmed="no">java.lang.Object</outbound>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="feature" confirmed="no">java.lang.String.valueOf(java.lang.Object)</outbound>
                <outbound type="class" confirmed="no">java.lang.StringBuffer</outbound>
                <outbound type="feature" confirmed="no">java.lang.StringBuffer.StringBuffer(java.lang.String)</outbound>
                <outbound type="feature" confirmed="no">java.lang.StringBuffer.append(java.lang.String)</outbound>
                <outbound type="feature" confirmed="no">java.lang.StringBuffer.toString()</outbound>
                <outbound type="feature" confirmed="no">java.lang.System.out</outbound>
                <outbound type="class" confirmed="yes">org.mvel.ASTLinkedList</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.ASTLinkedList.ASTLinkedList()</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.ASTLinkedList.addTokenNode(org.mvel.ASTNode)</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.ASTLinkedList.hasMoreNodes()</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.ASTLinkedList.nextNode()</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.ASTLinkedList.reset()</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.ASTLinkedList.setCurrentNode(org.mvel.ASTNode)</outbound>
                <outbound type="class" confirmed="yes">org.mvel.ASTNode</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.ASTNode.getFields()</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.ASTNode.getOperator()</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.ASTNode.isOperator()</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.ASTNode.isOperator(java.lang.Integer)</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.Operator.PTABLE</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.ast.And.And(org.mvel.ASTNode, org.mvel.ASTNode)</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.ast.BinaryOperation.BinaryOperation(int, org.mvel.ASTNode, org.mvel.ASTNode)</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.ast.BinaryOperation.getRight()</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.ast.BinaryOperation.getRightMost()</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.ast.BinaryOperation.setRight(org.mvel.ASTNode)</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.ast.BinaryOperation.setRightMost(org.mvel.ASTNode)</outbound>
                <outbound type="class" confirmed="yes">org.mvel.ast.EndOfStatement</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.ast.Or.Or(org.mvel.ASTNode, org.mvel.ASTNode)</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.debug.DebugTools.getOperatorName(int)</outbound>
                <inbound type="feature" confirmed="yes">org.mvel.ExpressionCompiler._compile()</inbound>
            </feature>
        </class>
        <class confirmed="yes">
            <name>org.mvel.util.ExecutionStack</name>
            <outbound type="class" confirmed="no">java.lang.Object</outbound>
            <outbound type="class" confirmed="yes">org.mvel.util.Stack</outbound>
            <inbound type="feature" confirmed="yes">org.mvel.AbstractParser.AbstractParser()</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.AbstractParser.arithmeticFunctionReduction(int)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.AbstractParser.createBlockToken(int, int, int, int, int)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.AbstractParser.dStack</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.AbstractParser.dreduce()</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.AbstractParser.dreduce2()</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.AbstractParser.nextToken()</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.AbstractParser.splitAccumulator</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.ExpressionCompiler._compile()</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.MVELInterpretedRuntime.parse()</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.MVELInterpretedRuntime.parseAndExecuteInterpreted()</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.MVELInterpretedRuntime.reduceRight()</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.TemplateInterpreter.execute(java.lang.Object, java.util.Map, org.mvel.TemplateRegistry)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.TemplateInterpreter.initStack()</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.TemplateInterpreter.localStack</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.TemplateInterpreter.pop()</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.TemplateInterpreter.push(org.mvel.Node)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.TemplateInterpreter.pushNode(int)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.TemplateInterpreter.stack</inbound>
            <feature confirmed="yes">
                <name>org.mvel.util.ExecutionStack.ExecutionStack()</name>
                <outbound type="feature" confirmed="no">java.lang.Object.Object()</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.util.ExecutionStack.size</outbound>
                <inbound type="feature" confirmed="yes">org.mvel.AbstractParser.AbstractParser()</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.ExpressionCompiler._compile()</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.MVELInterpretedRuntime.parse()</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.MVELRuntime.execute(boolean, org.mvel.CompiledExpression, java.lang.Object, org.mvel.integration.VariableResolverFactory)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.TemplateInterpreter.initStack()</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.util.ExecutionStack.add(java.lang.Object)</name>
                <outbound type="class" confirmed="no">java.lang.Object</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.util.ExecutionStack.element</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.util.ExecutionStack.size</outbound>
                <outbound type="class" confirmed="yes">org.mvel.util.StackElement</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.util.StackElement.StackElement(org.mvel.util.StackElement, java.lang.Object)</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.util.StackElement.next</outbound>
                <inbound type="feature" confirmed="yes">org.mvel.AbstractParser.arithmeticFunctionReduction(int)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.AbstractParser.createBlockToken(int, int, int, int, int)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.util.ExecutionStack.clear()</name>
                <outbound type="feature" confirmed="yes">org.mvel.util.ExecutionStack.element</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.util.ExecutionStack.size</outbound>
                <outbound type="class" confirmed="yes">org.mvel.util.StackElement</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.util.ExecutionStack.discard()</name>
                <outbound type="feature" confirmed="yes">org.mvel.util.ExecutionStack.element</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.util.ExecutionStack.size</outbound>
                <outbound type="class" confirmed="yes">org.mvel.util.StackElement</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.util.StackElement.next</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.util.ExecutionStack.element</name>
                <outbound type="class" confirmed="yes">org.mvel.util.StackElement</outbound>
                <inbound type="feature" confirmed="yes">org.mvel.util.ExecutionStack.add(java.lang.Object)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.util.ExecutionStack.clear()</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.util.ExecutionStack.discard()</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.util.ExecutionStack.peek()</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.util.ExecutionStack.peek2()</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.util.ExecutionStack.pop()</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.util.ExecutionStack.push(java.lang.Object)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.util.ExecutionStack.push(java.lang.Object, java.lang.Object)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.util.ExecutionStack.push(java.lang.Object, java.lang.Object, java.lang.Object)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.util.ExecutionStack.pushAndPeek(java.lang.Object)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.util.ExecutionStack.showStack()</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.util.ExecutionStack.toString()</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.util.ExecutionStack.isEmpty()</name>
                <outbound type="feature" confirmed="yes">org.mvel.util.ExecutionStack.size</outbound>
                <inbound type="feature" confirmed="yes">org.mvel.AbstractParser.arithmeticFunctionReduction(int)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.AbstractParser.dreduce2()</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.AbstractParser.nextToken()</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.MVELInterpretedRuntime.parseAndExecuteInterpreted()</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.MVELInterpretedRuntime.reduceRight()</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.TemplateInterpreter.execute(java.lang.Object, java.util.Map, org.mvel.TemplateRegistry)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.util.ExecutionStack.peek()</name>
                <outbound type="class" confirmed="no">java.lang.Object</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.util.ExecutionStack.element</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.util.ExecutionStack.size</outbound>
                <outbound type="class" confirmed="yes">org.mvel.util.StackElement</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.util.StackElement.value</outbound>
                <inbound type="feature" confirmed="yes">org.mvel.TemplateInterpreter.execute(java.lang.Object, java.util.Map, org.mvel.TemplateRegistry)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.util.ExecutionStack.peek2()</name>
                <outbound type="class" confirmed="no">java.lang.Object</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.util.ExecutionStack.element</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.util.ExecutionStack.size</outbound>
                <outbound type="class" confirmed="yes">org.mvel.util.StackElement</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.util.StackElement.next</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.util.StackElement.value</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.util.ExecutionStack.pop()</name>
                <outbound type="class" confirmed="no">java.lang.Object</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.util.ExecutionStack.element</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.util.ExecutionStack.size</outbound>
                <outbound type="class" confirmed="yes">org.mvel.util.StackElement</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.util.StackElement.next</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.util.StackElement.value</outbound>
                <inbound type="feature" confirmed="yes">org.mvel.AbstractParser.arithmeticFunctionReduction(int)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.AbstractParser.dreduce()</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.AbstractParser.dreduce2()</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.AbstractParser.nextToken()</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.MVELInterpretedRuntime.reduceRight()</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.TemplateInterpreter.execute(java.lang.Object, java.util.Map, org.mvel.TemplateRegistry)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.TemplateInterpreter.pop()</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.util.ExecutionStack.push(java.lang.Object)</name>
                <outbound type="class" confirmed="no">java.lang.Object</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.util.ExecutionStack.element</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.util.ExecutionStack.size</outbound>
                <outbound type="class" confirmed="yes">org.mvel.util.StackElement</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.util.StackElement.StackElement(org.mvel.util.StackElement, java.lang.Object)</outbound>
                <inbound type="feature" confirmed="yes">org.mvel.AbstractParser.arithmeticFunctionReduction(int)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.TemplateInterpreter.execute(java.lang.Object, java.util.Map, org.mvel.TemplateRegistry)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.TemplateInterpreter.push(org.mvel.Node)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.TemplateInterpreter.pushNode(int)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.util.ExecutionStack.push(java.lang.Object, java.lang.Object)</name>
                <outbound type="class" confirmed="no">java.lang.Object</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.util.ExecutionStack.element</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.util.ExecutionStack.size</outbound>
                <outbound type="class" confirmed="yes">org.mvel.util.StackElement</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.util.StackElement.StackElement(org.mvel.util.StackElement, java.lang.Object)</outbound>
                <inbound type="feature" confirmed="yes">org.mvel.AbstractParser.arithmeticFunctionReduction(int)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.util.ExecutionStack.push(java.lang.Object, java.lang.Object, java.lang.Object)</name>
                <outbound type="class" confirmed="no">java.lang.Object</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.util.ExecutionStack.element</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.util.ExecutionStack.size</outbound>
                <outbound type="class" confirmed="yes">org.mvel.util.StackElement</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.util.StackElement.StackElement(org.mvel.util.StackElement, java.lang.Object)</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.util.ExecutionStack.pushAndPeek(java.lang.Object)</name>
                <outbound type="class" confirmed="no">java.lang.Object</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.util.ExecutionStack.element</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.util.ExecutionStack.size</outbound>
                <outbound type="class" confirmed="yes">org.mvel.util.StackElement</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.util.StackElement.StackElement(org.mvel.util.StackElement, java.lang.Object)</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.util.ExecutionStack.showStack()</name>
                <outbound type="class" confirmed="no">java.io.PrintStream</outbound>
                <outbound type="feature" confirmed="no">java.io.PrintStream.println(java.lang.String)</outbound>
                <outbound type="class" confirmed="no">java.lang.Object</outbound>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="class" confirmed="no">java.lang.StringBuffer</outbound>
                <outbound type="feature" confirmed="no">java.lang.StringBuffer.StringBuffer(java.lang.String)</outbound>
                <outbound type="feature" confirmed="no">java.lang.StringBuffer.append(java.lang.Object)</outbound>
                <outbound type="feature" confirmed="no">java.lang.StringBuffer.toString()</outbound>
                <outbound type="feature" confirmed="no">java.lang.System.out</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.util.ExecutionStack.element</outbound>
                <outbound type="class" confirmed="yes">org.mvel.util.StackElement</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.util.StackElement.next</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.util.StackElement.value</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.util.ExecutionStack.size</name>
                <inbound type="feature" confirmed="yes">org.mvel.util.ExecutionStack.ExecutionStack()</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.util.ExecutionStack.add(java.lang.Object)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.util.ExecutionStack.clear()</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.util.ExecutionStack.discard()</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.util.ExecutionStack.isEmpty()</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.util.ExecutionStack.peek()</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.util.ExecutionStack.peek2()</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.util.ExecutionStack.pop()</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.util.ExecutionStack.push(java.lang.Object)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.util.ExecutionStack.push(java.lang.Object, java.lang.Object)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.util.ExecutionStack.push(java.lang.Object, java.lang.Object, java.lang.Object)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.util.ExecutionStack.pushAndPeek(java.lang.Object)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.util.ExecutionStack.size()</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.util.ExecutionStack.size()</name>
                <outbound type="feature" confirmed="yes">org.mvel.util.ExecutionStack.size</outbound>
                <inbound type="feature" confirmed="yes">org.mvel.AbstractParser.arithmeticFunctionReduction(int)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.AbstractParser.dreduce2()</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.util.ExecutionStack.toString()</name>
                <outbound type="class" confirmed="no">java.lang.Object</outbound>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="feature" confirmed="no">java.lang.String.valueOf(java.lang.Object)</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.util.ExecutionStack.element</outbound>
                <outbound type="class" confirmed="yes">org.mvel.util.StackElement</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.util.StackElement.next</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.util.StackElement.value</outbound>
                <outbound type="class" confirmed="yes">org.mvel.util.StringAppender</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.util.StringAppender.StringAppender()</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.util.StringAppender.append(java.lang.String)</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.util.StringAppender.toString()</outbound>
            </feature>
        </class>
        <class confirmed="yes">
            <name>org.mvel.util.FastList</name>
            <outbound type="class" confirmed="no">java.util.AbstractList</outbound>
            <inbound type="feature" confirmed="yes">org.mvel.util.FastList$1.FastList$1(org.mvel.util.FastList, int)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.util.FastList$1.next()</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.util.FastList$1.this$0</inbound>
            <feature confirmed="yes">
                <name>org.mvel.util.FastList.FastList(int)</name>
                <outbound type="class" confirmed="no">java.lang.Object</outbound>
                <outbound type="feature" confirmed="no">java.util.AbstractList.AbstractList()</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.util.FastList.elements</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.util.FastList.size</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.util.FastList.updated</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.util.FastList.FastList(java.lang.Object[])</name>
                <outbound type="class" confirmed="no">java.lang.Object</outbound>
                <outbound type="feature" confirmed="no">java.util.AbstractList.AbstractList()</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.util.FastList.elements</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.util.FastList.size</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.util.FastList.updated</outbound>
                <inbound type="feature" confirmed="yes">org.mvel.ast.cache.CachedListAccessor.getValue(java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.refl.collection.ListCreator.getValue(java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.util.FastList.access$0(org.mvel.util.FastList)</name>
                <outbound type="class" confirmed="no">java.lang.Object</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.util.FastList.elements</outbound>
                <inbound type="feature" confirmed="yes">org.mvel.util.FastList$1.next()</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.util.FastList.add(int, java.lang.Object)</name>
                <outbound type="class" confirmed="no">java.lang.Object</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.util.FastList.elements</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.util.FastList.increaseSize(int)</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.util.FastList.size</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.util.FastList.add(java.lang.Object)</name>
                <outbound type="class" confirmed="no">java.lang.Object</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.util.FastList.elements</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.util.FastList.increaseSize(int)</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.util.FastList.size</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.util.FastList.addAll(int, java.util.Collection)</name>
                <outbound type="class" confirmed="no">java.lang.Object</outbound>
                <outbound type="class" confirmed="no">java.util.Collection</outbound>
                <outbound type="feature" confirmed="no">java.util.Collection.iterator()</outbound>
                <outbound type="feature" confirmed="no">java.util.Collection.size()</outbound>
                <outbound type="class" confirmed="no">java.util.Iterator</outbound>
                <outbound type="feature" confirmed="no">java.util.Iterator.hasNext()</outbound>
                <outbound type="feature" confirmed="no">java.util.Iterator.next()</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.util.FastList.elements</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.util.FastList.ensureCapacity(int)</outbound>
                <inbound type="feature" confirmed="yes">org.mvel.util.FastList.addAll(java.util.Collection)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.util.FastList.addAll(java.util.Collection)</name>
                <outbound type="class" confirmed="no">java.util.Collection</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.util.FastList.addAll(int, java.util.Collection)</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.util.FastList.size</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.util.FastList.clear()</name>
                <outbound type="class" confirmed="no">java.lang.Object</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.util.FastList.elements</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.util.FastList.contains(java.lang.Object)</name>
                <outbound type="class" confirmed="no">java.lang.Object</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.util.FastList.indexOf(java.lang.Object)</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.util.FastList.containsAll(java.util.Collection)</name>
                <outbound type="feature" confirmed="no">java.lang.RuntimeException.RuntimeException(java.lang.String)</outbound>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="class" confirmed="no">java.util.Collection</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.util.FastList.copyArray()</name>
                <outbound type="class" confirmed="no">java.lang.Object</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.util.FastList.elements</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.util.FastList.increaseSize(int)</outbound>
                <inbound type="feature" confirmed="yes">org.mvel.util.FastList.set(int, java.lang.Object)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.util.FastList.toArray()</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.util.FastList.elements</name>
                <outbound type="class" confirmed="no">java.lang.Object</outbound>
                <inbound type="feature" confirmed="yes">org.mvel.util.FastList.FastList(int)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.util.FastList.FastList(java.lang.Object[])</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.util.FastList.access$0(org.mvel.util.FastList)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.util.FastList.add(int, java.lang.Object)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.util.FastList.add(java.lang.Object)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.util.FastList.addAll(int, java.util.Collection)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.util.FastList.clear()</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.util.FastList.copyArray()</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.util.FastList.ensureCapacity(int)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.util.FastList.get(int)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.util.FastList.increaseSize(int)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.util.FastList.indexOf(java.lang.Object)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.util.FastList.lastIndexOf(java.lang.Object)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.util.FastList.remove(int)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.util.FastList.set(int, java.lang.Object)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.util.FastList.toArray()</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.util.FastList.ensureCapacity(int)</name>
                <outbound type="class" confirmed="no">java.lang.Object</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.util.FastList.elements</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.util.FastList.increaseSize(int)</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.util.FastList.size</outbound>
                <inbound type="feature" confirmed="yes">org.mvel.util.FastList.addAll(int, java.util.Collection)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.util.FastList.equals(java.lang.Object)</name>
                <outbound type="class" confirmed="no">java.lang.Object</outbound>
                <outbound type="feature" confirmed="no">java.util.AbstractList.equals(java.lang.Object)</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.util.FastList.get(int)</name>
                <outbound type="class" confirmed="no">java.lang.Object</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.util.FastList.elements</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.util.FastList.hashCode()</name>
                <outbound type="feature" confirmed="no">java.util.AbstractList.hashCode()</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.util.FastList.increaseSize(int)</name>
                <outbound type="class" confirmed="no">java.lang.Object</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.util.FastList.elements</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.util.FastList.updated</outbound>
                <inbound type="feature" confirmed="yes">org.mvel.util.FastList.add(int, java.lang.Object)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.util.FastList.add(java.lang.Object)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.util.FastList.copyArray()</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.util.FastList.ensureCapacity(int)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.util.FastList.indexOf(java.lang.Object)</name>
                <outbound type="class" confirmed="no">java.lang.Object</outbound>
                <outbound type="feature" confirmed="no">java.lang.Object.equals(java.lang.Object)</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.util.FastList.elements</outbound>
                <inbound type="feature" confirmed="yes">org.mvel.util.FastList.contains(java.lang.Object)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.util.FastList.isEmpty()</name>
                <outbound type="feature" confirmed="yes">org.mvel.util.FastList.size</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.util.FastList.iterator()</name>
                <outbound type="class" confirmed="no">java.util.Iterator</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.util.FastList$1.FastList$1(org.mvel.util.FastList, int)</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.util.FastList.size</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.util.FastList.lastIndexOf(java.lang.Object)</name>
                <outbound type="class" confirmed="no">java.lang.Object</outbound>
                <outbound type="feature" confirmed="no">java.lang.Object.equals(java.lang.Object)</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.util.FastList.elements</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.util.FastList.listIterator()</name>
                <outbound type="feature" confirmed="no">java.util.AbstractList.listIterator()</outbound>
                <outbound type="class" confirmed="no">java.util.ListIterator</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.util.FastList.listIterator(int)</name>
                <outbound type="feature" confirmed="no">java.util.AbstractList.listIterator(int)</outbound>
                <outbound type="class" confirmed="no">java.util.ListIterator</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.util.FastList.remove(int)</name>
                <outbound type="class" confirmed="no">java.lang.Object</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.util.FastList.elements</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.util.FastList.size</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.util.FastList.remove(java.lang.Object)</name>
                <outbound type="class" confirmed="no">java.lang.Object</outbound>
                <outbound type="feature" confirmed="no">java.lang.RuntimeException.RuntimeException(java.lang.String)</outbound>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.util.FastList.removeAll(java.util.Collection)</name>
                <outbound type="feature" confirmed="no">java.lang.RuntimeException.RuntimeException(java.lang.String)</outbound>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="class" confirmed="no">java.util.Collection</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.util.FastList.removeRange(int, int)</name>
                <outbound type="feature" confirmed="no">java.lang.RuntimeException.RuntimeException(java.lang.String)</outbound>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.util.FastList.retainAll(java.util.Collection)</name>
                <outbound type="feature" confirmed="no">java.lang.RuntimeException.RuntimeException(java.lang.String)</outbound>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="class" confirmed="no">java.util.Collection</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.util.FastList.set(int, java.lang.Object)</name>
                <outbound type="class" confirmed="no">java.lang.Object</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.util.FastList.copyArray()</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.util.FastList.elements</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.util.FastList.updated</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.util.FastList.size</name>
                <inbound type="feature" confirmed="yes">org.mvel.util.FastList.FastList(int)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.util.FastList.FastList(java.lang.Object[])</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.util.FastList.add(int, java.lang.Object)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.util.FastList.add(java.lang.Object)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.util.FastList.addAll(java.util.Collection)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.util.FastList.ensureCapacity(int)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.util.FastList.isEmpty()</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.util.FastList.iterator()</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.util.FastList.remove(int)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.util.FastList.size()</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.util.FastList.size()</name>
                <outbound type="feature" confirmed="yes">org.mvel.util.FastList.size</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.util.FastList.subList(int, int)</name>
                <outbound type="feature" confirmed="no">java.util.AbstractList.subList(int, int)</outbound>
                <outbound type="class" confirmed="no">java.util.List</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.util.FastList.toArray()</name>
                <outbound type="class" confirmed="no">java.lang.Object</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.util.FastList.copyArray()</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.util.FastList.elements</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.util.FastList.updated</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.util.FastList.toArray(java.lang.Object[])</name>
                <outbound type="class" confirmed="no">java.lang.Object</outbound>
                <outbound type="feature" confirmed="no">java.lang.RuntimeException.RuntimeException(java.lang.String)</outbound>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.util.FastList.toString()</name>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="feature" confirmed="no">java.util.AbstractList.toString()</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.util.FastList.updated</name>
                <inbound type="feature" confirmed="yes">org.mvel.util.FastList.FastList(int)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.util.FastList.FastList(java.lang.Object[])</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.util.FastList.increaseSize(int)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.util.FastList.set(int, java.lang.Object)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.util.FastList.toArray()</inbound>
            </feature>
        </class>
        <class confirmed="yes">
            <name>org.mvel.util.FastList$1</name>
            <outbound type="class" confirmed="no">java.lang.Object</outbound>
            <outbound type="class" confirmed="no">java.util.Iterator</outbound>
            <feature confirmed="yes">
                <name>org.mvel.util.FastList$1.FastList$1(org.mvel.util.FastList, int)</name>
                <outbound type="feature" confirmed="no">java.lang.Object.Object()</outbound>
                <outbound type="class" confirmed="yes">org.mvel.util.FastList</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.util.FastList$1.cursor</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.util.FastList$1.this$0</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.util.FastList$1.val$size</outbound>
                <inbound type="feature" confirmed="yes">org.mvel.util.FastList.iterator()</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.util.FastList$1.cursor</name>
                <inbound type="feature" confirmed="yes">org.mvel.util.FastList$1.FastList$1(org.mvel.util.FastList, int)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.util.FastList$1.hasNext()</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.util.FastList$1.next()</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.util.FastList$1.hasNext()</name>
                <outbound type="feature" confirmed="yes">org.mvel.util.FastList$1.cursor</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.util.FastList$1.val$size</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.util.FastList$1.next()</name>
                <outbound type="class" confirmed="no">java.lang.Object</outbound>
                <outbound type="class" confirmed="yes">org.mvel.util.FastList</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.util.FastList$1.cursor</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.util.FastList$1.this$0</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.util.FastList.access$0(org.mvel.util.FastList)</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.util.FastList$1.remove()</name>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.ImmutableElementException.ImmutableElementException(java.lang.String)</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.util.FastList$1.this$0</name>
                <outbound type="class" confirmed="yes">org.mvel.util.FastList</outbound>
                <inbound type="feature" confirmed="yes">org.mvel.util.FastList$1.FastList$1(org.mvel.util.FastList, int)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.util.FastList$1.next()</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.util.FastList$1.val$size</name>
                <inbound type="feature" confirmed="yes">org.mvel.util.FastList$1.FastList$1(org.mvel.util.FastList, int)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.util.FastList$1.hasNext()</inbound>
            </feature>
        </class>
        <class confirmed="yes">
            <name>org.mvel.util.MethodStub</name>
            <outbound type="class" confirmed="no">java.io.Serializable</outbound>
            <outbound type="class" confirmed="no">java.lang.Object</outbound>
            <inbound type="feature" confirmed="yes">org.mvel.ParserContext.addImport(java.lang.String, java.lang.reflect.Method)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.ParserContext.addImport(java.lang.String, org.mvel.util.MethodStub)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.ParserContext.getStaticImport(java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.ParserContext.setImports(java.util.Map)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.PropertyAccessor.getMethod(java.lang.Object, java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.PropertyVerifier.getMethod(java.lang.Class, java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.integration.impl.StaticMethodImportResolver.StaticMethodImportResolver(java.lang.String, org.mvel.util.MethodStub)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.integration.impl.StaticMethodImportResolver.getValue()</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.integration.impl.StaticMethodImportResolver.method</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.integration.impl.StaticMethodImportResolver.setValue(java.lang.Object)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.integration.impl.StaticMethodImportResolverFactory.createVariable(java.lang.String, java.lang.Object)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.asm.ASMAccessorOptimizer.getMethod(java.lang.Object, java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.refl.ReflectiveAccessorOptimizer.getMethod(java.lang.Object, java.lang.String)</inbound>
            <feature confirmed="yes">
                <name>org.mvel.util.MethodStub.MethodStub()</name>
                <outbound type="feature" confirmed="no">java.lang.Object.Object()</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.util.MethodStub.MethodStub(java.lang.Class, java.lang.String)</name>
                <outbound type="class" confirmed="no">java.lang.Class</outbound>
                <outbound type="feature" confirmed="no">java.lang.Object.Object()</outbound>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.util.MethodStub.classReference</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.util.MethodStub.methodName</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.util.MethodStub.MethodStub(java.lang.reflect.Method)</name>
                <outbound type="class" confirmed="no">java.lang.Class</outbound>
                <outbound type="feature" confirmed="no">java.lang.Object.Object()</outbound>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="class" confirmed="no">java.lang.reflect.Method</outbound>
                <outbound type="feature" confirmed="no">java.lang.reflect.Method.getDeclaringClass()</outbound>
                <outbound type="feature" confirmed="no">java.lang.reflect.Method.getName()</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.util.MethodStub.classReference</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.util.MethodStub.methodName</outbound>
                <inbound type="feature" confirmed="yes">org.mvel.ParserContext.addImport(java.lang.String, java.lang.reflect.Method)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.integration.impl.StaticMethodImportResolverFactory.createVariable(java.lang.String, java.lang.Object)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.util.MethodStub.classReference</name>
                <outbound type="class" confirmed="no">java.lang.Class</outbound>
                <inbound type="feature" confirmed="yes">org.mvel.util.MethodStub.MethodStub(java.lang.Class, java.lang.String)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.util.MethodStub.MethodStub(java.lang.reflect.Method)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.util.MethodStub.getClassReference()</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.util.MethodStub.getMethod()</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.util.MethodStub.setClassReference(java.lang.Class)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.util.MethodStub.getClassReference()</name>
                <outbound type="class" confirmed="no">java.lang.Class</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.util.MethodStub.classReference</outbound>
                <inbound type="feature" confirmed="yes">org.mvel.PropertyAccessor.getMethod(java.lang.Object, java.lang.String)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.asm.ASMAccessorOptimizer.getMethod(java.lang.Object, java.lang.String)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.refl.ReflectiveAccessorOptimizer.getMethod(java.lang.Object, java.lang.String)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.util.MethodStub.getMethod()</name>
                <outbound type="class" confirmed="no">java.lang.Class</outbound>
                <outbound type="feature" confirmed="no">java.lang.Class.getMethods()</outbound>
                <outbound type="class" confirmed="no">java.lang.Object</outbound>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="feature" confirmed="no">java.lang.String.equals(java.lang.Object)</outbound>
                <outbound type="class" confirmed="no">java.lang.reflect.Method</outbound>
                <outbound type="feature" confirmed="no">java.lang.reflect.Method.getName()</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.util.MethodStub.classReference</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.util.MethodStub.method</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.util.MethodStub.methodName</outbound>
                <inbound type="feature" confirmed="yes">org.mvel.PropertyVerifier.getMethod(java.lang.Class, java.lang.String)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.util.MethodStub.getMethodName()</name>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.util.MethodStub.methodName</outbound>
                <inbound type="feature" confirmed="yes">org.mvel.PropertyAccessor.getMethod(java.lang.Object, java.lang.String)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.asm.ASMAccessorOptimizer.getMethod(java.lang.Object, java.lang.String)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.refl.ReflectiveAccessorOptimizer.getMethod(java.lang.Object, java.lang.String)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.util.MethodStub.method</name>
                <outbound type="class" confirmed="no">java.lang.reflect.Method</outbound>
                <inbound type="feature" confirmed="yes">org.mvel.util.MethodStub.getMethod()</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.util.MethodStub.methodName</name>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <inbound type="feature" confirmed="yes">org.mvel.util.MethodStub.MethodStub(java.lang.Class, java.lang.String)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.util.MethodStub.MethodStub(java.lang.reflect.Method)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.util.MethodStub.getMethod()</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.util.MethodStub.getMethodName()</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.util.MethodStub.setMethodName(java.lang.String)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.util.MethodStub.setClassReference(java.lang.Class)</name>
                <outbound type="class" confirmed="no">java.lang.Class</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.util.MethodStub.classReference</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.util.MethodStub.setMethodName(java.lang.String)</name>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.util.MethodStub.methodName</outbound>
            </feature>
        </class>
        <class confirmed="yes">
            <name>org.mvel.util.ParseTools</name>
            <outbound type="class" confirmed="no">java.lang.Object</outbound>
            <feature confirmed="yes">
                <name>org.mvel.util.ParseTools.CLASS_CONSTRUCTOR_CACHE</name>
                <outbound type="class" confirmed="no">java.util.Map</outbound>
                <inbound type="feature" confirmed="yes">org.mvel.util.ParseTools.getConstructors(java.lang.Class)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.util.ParseTools.static {}</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.util.ParseTools.CLASS_RESOLVER_CACHE</name>
                <outbound type="class" confirmed="no">java.util.Map</outbound>
                <inbound type="feature" confirmed="yes">org.mvel.util.ParseTools.createClass(java.lang.String)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.util.ParseTools.static {}</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.util.ParseTools.CONSTRUCTOR_PARMS_CACHE</name>
                <outbound type="class" confirmed="no">java.util.Map</outbound>
                <inbound type="feature" confirmed="yes">org.mvel.util.ParseTools.getConstructors(java.lang.reflect.Constructor)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.util.ParseTools.static {}</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.util.ParseTools.EMPTY_OBJ_ARR</name>
                <outbound type="class" confirmed="no">java.lang.Object</outbound>
                <inbound type="feature" confirmed="yes">org.mvel.PropertyAccessor.getMethod(java.lang.Object, java.lang.String)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.refl.ReflectiveAccessorOptimizer.getMethod(java.lang.Object, java.lang.String)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.util.ParseTools.static {}</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.util.ParseTools.JDK_14_COMPATIBILITY</name>
                <inbound type="feature" confirmed="yes">org.mvel.util.ParseTools.getSimpleClassName(java.lang.Class)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.util.ParseTools.static {}</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.util.ParseTools.MATH_PROCESSOR</name>
                <outbound type="class" confirmed="yes">org.mvel.math.MathProcessor</outbound>
                <inbound type="feature" confirmed="yes">org.mvel.util.ParseTools.doOperations(java.lang.Object, int, java.lang.Object)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.util.ParseTools.static {}</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.util.ParseTools.ParseTools()</name>
                <outbound type="feature" confirmed="no">java.lang.Object.Object()</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.util.ParseTools.RESOLVED_CONST_CACHE</name>
                <outbound type="class" confirmed="no">java.util.Map</outbound>
                <inbound type="feature" confirmed="yes">org.mvel.util.ParseTools.getBestConstructorCanadidate(java.lang.Object[], java.lang.Class)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.util.ParseTools.static {}</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.util.ParseTools.RESOLVED_METH_CACHE</name>
                <outbound type="class" confirmed="no">java.util.Map</outbound>
                <inbound type="feature" confirmed="yes">org.mvel.util.ParseTools.getBestCandidate(java.lang.Class[], java.lang.String, java.lang.Class, java.lang.reflect.Method[])</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.util.ParseTools.static {}</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.util.ParseTools.balancedCapture(char[], int, char)</name>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.CompileException.CompileException(java.lang.String, char[], int)</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.util.ParseTools.captureStringLiteral(char, char[], int, int)</outbound>
                <inbound type="feature" confirmed="yes">org.mvel.AbstractParser._captureBlock(org.mvel.ASTNode, char[], boolean, int)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.AbstractParser.captureToEOT()</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.AbstractParser.nextToken()</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.PropertyAccessor.getMethod(java.lang.Object, java.lang.String)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.PropertyVerifier.getMethod(java.lang.Class, java.lang.String)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.TemplateCompiler.buildIncludeRef(char[])</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.ast.NewObjectNode.updateClassName(int)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.ast.WithNode.compileWithExpressions()</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.asm.ASMAccessorOptimizer.getMethod(java.lang.Object, java.lang.String)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.refl.ReflectiveAccessorOptimizer.getMethod(java.lang.Object, java.lang.String)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.refl.ReflectiveAccessorOptimizer.optimizeFold(char[], java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.util.CollectionParser.parseCollection()</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.util.ParseTools.parseMethodOrConstructor(char[])</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.util.ParseTools.parseParameterList(char[], int, int)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.util.ParseTools.balancedCaptureWithLineAccounting(char[], int, char)</name>
                <outbound type="feature" confirmed="no">java.lang.Character.isWhitespace(char)</outbound>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.CompileException.CompileException(java.lang.String, char[], int)</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.util.ParseTools.captureStringLiteral(char, char[], int, int)</outbound>
                <inbound type="feature" confirmed="yes">org.mvel.AbstractParser._captureBlock(org.mvel.ASTNode, char[], boolean, int)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.util.ParseTools.boxPrimitive(java.lang.Class)</name>
                <outbound type="feature" confirmed="no">java.lang.Boolean.TYPE</outbound>
                <outbound type="feature" confirmed="no">java.lang.Byte.TYPE</outbound>
                <outbound type="class" confirmed="no">java.lang.Class</outbound>
                <outbound type="feature" confirmed="no">java.lang.Class.forName(java.lang.String)</outbound>
                <outbound type="class" confirmed="no">java.lang.ClassNotFoundException</outbound>
                <outbound type="feature" confirmed="no">java.lang.Double.TYPE</outbound>
                <outbound type="feature" confirmed="no">java.lang.Float.TYPE</outbound>
                <outbound type="feature" confirmed="no">java.lang.Integer.TYPE</outbound>
                <outbound type="feature" confirmed="no">java.lang.Long.TYPE</outbound>
                <outbound type="feature" confirmed="no">java.lang.NoClassDefFoundError.NoClassDefFoundError(java.lang.String)</outbound>
                <outbound type="feature" confirmed="no">java.lang.Short.TYPE</outbound>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="feature" confirmed="no">java.lang.Throwable.getMessage()</outbound>
                <inbound type="feature" confirmed="yes">org.mvel.util.ParseTools.getBestCandidate(java.lang.Class[], java.lang.String, java.lang.Class, java.lang.reflect.Method[])</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.util.ParseTools.getBestConstructorCanadidate(java.lang.Object[], java.lang.Class)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.util.ParseTools.isNumericallyCoercible(java.lang.Class, java.lang.Class)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.util.ParseTools.captureContructorAndResidual(char[])</name>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="feature" confirmed="no">java.lang.String.String(char[])</outbound>
                <outbound type="feature" confirmed="no">java.lang.String.String(char[], int, int)</outbound>
                <outbound type="feature" confirmed="no">java.lang.String.trim()</outbound>
                <inbound type="feature" confirmed="yes">org.mvel.ast.NewObjectNode.getReducedValue(java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.asm.ASMAccessorOptimizer.optimizeObjectCreation(char[], java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.refl.ReflectiveAccessorOptimizer.compileConstructor(char[], java.lang.Object, org.mvel.integration.VariableResolverFactory)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.util.ParseTools.captureContructorAndResidual(java.lang.String)</name>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="feature" confirmed="no">java.lang.String.String(char[], int, int)</outbound>
                <outbound type="feature" confirmed="no">java.lang.String.toCharArray()</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.util.ParseTools.captureStringLiteral(char, char[], int, int)</name>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.CompileException.CompileException(java.lang.String, char[], int)</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.util.ParseTools.handleEscapeSequence(char)</outbound>
                <inbound type="feature" confirmed="yes">org.mvel.AbstractParser.captureToEOT()</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.AbstractParser.nextToken()</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.util.ParseTools.balancedCapture(char[], int, char)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.util.ParseTools.balancedCaptureWithLineAccounting(char[], int, char)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.util.ParseTools.parseParameterList(char[], int, int)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.util.ParseTools.checkNameSafety(java.lang.String)</name>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="class" confirmed="no">java.lang.StringBuffer</outbound>
                <outbound type="feature" confirmed="no">java.lang.StringBuffer.StringBuffer(java.lang.String)</outbound>
                <outbound type="feature" confirmed="no">java.lang.StringBuffer.append(java.lang.String)</outbound>
                <outbound type="feature" confirmed="no">java.lang.StringBuffer.toString()</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.AbstractParser.isReservedWord(java.lang.String)</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.CompileException.CompileException(java.lang.String)</outbound>
                <inbound type="feature" confirmed="yes">org.mvel.ast.AssignmentNode.AssignmentNode(char[], int, int, java.lang.String)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.ast.AssignmentNode.getReducedValue(java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.ast.TypedVarNode.TypedVarNode(char[], int, java.lang.Class)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.util.ParseTools.containsCheck(java.lang.Object, java.lang.Object)</name>
                <outbound type="class" confirmed="no">java.lang.Boolean</outbound>
                <outbound type="feature" confirmed="no">java.lang.Boolean.booleanValue()</outbound>
                <outbound type="class" confirmed="no">java.lang.Class</outbound>
                <outbound type="feature" confirmed="no">java.lang.Class.isArray()</outbound>
                <outbound type="class" confirmed="no">java.lang.Object</outbound>
                <outbound type="feature" confirmed="no">java.lang.Object.getClass()</outbound>
                <outbound type="class" confirmed="no">java.lang.Object[]</outbound>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="feature" confirmed="no">java.lang.String.indexOf(java.lang.String)</outbound>
                <outbound type="feature" confirmed="no">java.lang.String.valueOf(java.lang.Object)</outbound>
                <outbound type="class" confirmed="no">java.util.Collection</outbound>
                <outbound type="feature" confirmed="no">java.util.Collection.contains(java.lang.Object)</outbound>
                <outbound type="class" confirmed="no">java.util.Map</outbound>
                <outbound type="feature" confirmed="no">java.util.Map.containsKey(java.lang.Object)</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.util.ParseTools.doOperations(java.lang.Object, int, java.lang.Object)</outbound>
                <inbound type="feature" confirmed="yes">org.mvel.AbstractParser.reduce()</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.MVELRuntime.execute(boolean, org.mvel.CompiledExpression, java.lang.Object, org.mvel.integration.VariableResolverFactory)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.util.ParseTools.createClass(java.lang.String)</name>
                <outbound type="class" confirmed="no">java.lang.Class</outbound>
                <outbound type="feature" confirmed="no">java.lang.Class.forName(java.lang.String)</outbound>
                <outbound type="class" confirmed="no">java.lang.ClassLoader</outbound>
                <outbound type="feature" confirmed="no">java.lang.ClassLoader.loadClass(java.lang.String)</outbound>
                <outbound type="class" confirmed="no">java.lang.ClassNotFoundException</outbound>
                <outbound type="class" confirmed="no">java.lang.Object</outbound>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="class" confirmed="no">java.lang.Thread</outbound>
                <outbound type="feature" confirmed="no">java.lang.Thread.currentThread()</outbound>
                <outbound type="feature" confirmed="no">java.lang.Thread.getContextClassLoader()</outbound>
                <outbound type="class" confirmed="no">java.util.Map</outbound>
                <outbound type="feature" confirmed="no">java.util.Map.get(java.lang.Object)</outbound>
                <outbound type="feature" confirmed="no">java.util.Map.put(java.lang.Object, java.lang.Object)</outbound>
                <outbound type="feature" confirmed="no">java.util.WeakHashMap.WeakHashMap(int)</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.util.ParseTools.CLASS_RESOLVER_CACHE</outbound>
                <inbound type="feature" confirmed="yes">org.mvel.AbstractParser.nextToken()</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.integration.impl.ClassImportResolverFactory.isResolveable(java.lang.String)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.util.ParseTools.createClassSafe(java.lang.String)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.util.ParseTools.findClass(org.mvel.integration.VariableResolverFactory, java.lang.String)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.util.ParseTools.createClassSafe(java.lang.String)</name>
                <outbound type="class" confirmed="no">java.lang.Class</outbound>
                <outbound type="class" confirmed="no">java.lang.ClassNotFoundException</outbound>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.util.ParseTools.createClass(java.lang.String)</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.util.ParseTools.createClassSignatureHash(java.lang.Class, java.lang.Class[])</name>
                <outbound type="class" confirmed="no">java.lang.Class</outbound>
                <outbound type="feature" confirmed="no">java.lang.Object.hashCode()</outbound>
                <inbound type="feature" confirmed="yes">org.mvel.util.ParseTools.getBestCandidate(java.lang.Class[], java.lang.String, java.lang.Class, java.lang.reflect.Method[])</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.util.ParseTools.getBestConstructorCanadidate(java.lang.Object[], java.lang.Class)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.util.ParseTools.createShortFormOperativeAssignment(java.lang.String, char[], int)</name>
                <outbound type="class" confirmed="no">java.lang.Object</outbound>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="feature" confirmed="no">java.lang.String.length()</outbound>
                <outbound type="feature" confirmed="no">java.lang.String.toCharArray()</outbound>
                <outbound type="feature" confirmed="no">java.lang.System.arraycopy(java.lang.Object, int, java.lang.Object, int, int)</outbound>
                <inbound type="feature" confirmed="yes">org.mvel.ast.AssignmentNode.AssignmentNode(char[], int, int, java.lang.String)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.ast.DeepAssignmentNode.DeepAssignmentNode(char[], int, int, java.lang.String)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.ast.WithNode.compileWithExpressions()</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.util.ParseTools.debug(java.lang.String)</name>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.util.ParseTools.debug(java.lang.Throwable)</name>
                <outbound type="class" confirmed="no">java.lang.Throwable</outbound>
                <outbound type="feature" confirmed="no">java.lang.Throwable.printStackTrace()</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.util.ParseTools.determineActualTargetMethod(java.lang.reflect.Method)</name>
                <outbound type="class" confirmed="no">java.lang.Class</outbound>
                <outbound type="feature" confirmed="no">java.lang.Class.getInterfaces()</outbound>
                <outbound type="feature" confirmed="no">java.lang.Class.getMethods()</outbound>
                <outbound type="class" confirmed="no">java.lang.Object</outbound>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="feature" confirmed="no">java.lang.String.equals(java.lang.Object)</outbound>
                <outbound type="class" confirmed="no">java.lang.reflect.Method</outbound>
                <outbound type="feature" confirmed="no">java.lang.reflect.Method.getDeclaringClass()</outbound>
                <outbound type="feature" confirmed="no">java.lang.reflect.Method.getName()</outbound>
                <outbound type="feature" confirmed="no">java.lang.reflect.Method.getParameterTypes()</outbound>
                <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.asm.ASMAccessorOptimizer.getBeanProperty(java.lang.Object, java.lang.String)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.refl.ReflectiveAccessorOptimizer.getBeanProperty(java.lang.Object, java.lang.String)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.util.ParseTools.doOperations(java.lang.Object, int, java.lang.Object)</name>
                <outbound type="class" confirmed="no">java.lang.Object</outbound>
                <outbound type="class" confirmed="yes">org.mvel.math.MathProcessor</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.math.MathProcessor.doOperation(java.lang.Object, int, java.lang.Object)</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.util.ParseTools.MATH_PROCESSOR</outbound>
                <inbound type="feature" confirmed="yes">org.mvel.AbstractParser.reduce()</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.ast.AssignAdd.getReducedValue(java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.ast.AssignAdd.getReducedValueAccelerated(java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.ast.AssignDiv.getReducedValue(java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.ast.AssignDiv.getReducedValueAccelerated(java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.ast.AssignMult.getReducedValue(java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.ast.AssignMult.getReducedValueAccelerated(java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.ast.AssignSub.getReducedValue(java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.ast.AssignSub.getReducedValueAccelerated(java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.ast.BinaryOperation.getReducedValueAccelerated(java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.ast.PostFixDecNode.getReducedValueAccelerated(java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.ast.PostFixIncNode.getReducedValueAccelerated(java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.ast.PreFixDecNode.getReducedValueAccelerated(java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.ast.PreFixIncNode.getReducedValueAccelerated(java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.util.ParseTools.containsCheck(java.lang.Object, java.lang.Object)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.util.ParseTools.finalLocalVariableFactory(org.mvel.integration.VariableResolverFactory)</name>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="feature" confirmed="no">java.util.HashMap.HashMap()</outbound>
                <outbound type="class" confirmed="no">java.util.Map</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.OptimizationFailure.OptimizationFailure(java.lang.String)</outbound>
                <outbound type="class" confirmed="yes">org.mvel.integration.VariableResolverFactory</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.integration.VariableResolverFactory.getNextFactory()</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.integration.impl.DefaultLocalVariableResolverFactory.DefaultLocalVariableResolverFactory(java.util.Map)</outbound>
                <outbound type="feature" confirmed="no">org.mvel.integration.impl.DefaultLocalVariableResolverFactory.setNextFactory(org.mvel.integration.VariableResolverFactory)</outbound>
                <outbound type="class" confirmed="yes">org.mvel.integration.impl.LocalVariableResolverFactory</outbound>
                <inbound type="feature" confirmed="yes">org.mvel.ast.AssignmentNode.getReducedValue(java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.ast.AssignmentNode.getReducedValueAccelerated(java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.ast.TypedVarNode.getReducedValue(java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.ast.TypedVarNode.getReducedValueAccelerated(java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.util.ParseTools.findClass(org.mvel.integration.VariableResolverFactory, java.lang.String)</name>
                <outbound type="class" confirmed="no">java.lang.Class</outbound>
                <outbound type="class" confirmed="no">java.lang.ClassNotFoundException</outbound>
                <outbound type="class" confirmed="no">java.lang.Exception</outbound>
                <outbound type="class" confirmed="no">java.lang.Object</outbound>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="class" confirmed="no">java.lang.StringBuffer</outbound>
                <outbound type="feature" confirmed="no">java.lang.StringBuffer.StringBuffer(java.lang.String)</outbound>
                <outbound type="feature" confirmed="no">java.lang.StringBuffer.append(java.lang.String)</outbound>
                <outbound type="feature" confirmed="no">java.lang.StringBuffer.toString()</outbound>
                <outbound type="class" confirmed="no">java.lang.Throwable</outbound>
                <outbound type="class" confirmed="no">java.util.Map</outbound>
                <outbound type="feature" confirmed="no">java.util.Map.containsKey(java.lang.Object)</outbound>
                <outbound type="feature" confirmed="no">java.util.Map.get(java.lang.Object)</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.AbstractParser.LITERALS</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.AbstractParser.getCurrentThreadParserContext()</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.CompileException.CompileException(java.lang.String, java.lang.Throwable)</outbound>
                <outbound type="class" confirmed="yes">org.mvel.ParserContext</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.ParserContext.getImport(java.lang.String)</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.ParserContext.hasImport(java.lang.String)</outbound>
                <outbound type="class" confirmed="yes">org.mvel.integration.VariableResolver</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.integration.VariableResolver.getValue()</outbound>
                <outbound type="class" confirmed="yes">org.mvel.integration.VariableResolverFactory</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.integration.VariableResolverFactory.getVariableResolver(java.lang.String)</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.integration.VariableResolverFactory.isResolveable(java.lang.String)</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.util.ParseTools.createClass(java.lang.String)</outbound>
                <inbound type="feature" confirmed="yes">org.mvel.ast.NewObjectNode.NewObjectNode(char[], int)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.ast.NewObjectNode.getReducedValue(java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.ast.NewObjectNode.getReducedValueAccelerated(java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.asm.ASMAccessorOptimizer.optimizeObjectCreation(char[], java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.refl.ReflectiveAccessorOptimizer.compileConstructor(char[], java.lang.Object, org.mvel.integration.VariableResolverFactory)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.util.ParseTools.findClassImportResolverFactory(org.mvel.integration.VariableResolverFactory)</name>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.OptimizationFailure.OptimizationFailure(java.lang.String)</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.integration.ResolverTools.insertFactory(org.mvel.integration.VariableResolverFactory, org.mvel.integration.VariableResolverFactory)</outbound>
                <outbound type="class" confirmed="yes">org.mvel.integration.VariableResolverFactory</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.integration.VariableResolverFactory.getNextFactory()</outbound>
                <outbound type="class" confirmed="yes">org.mvel.integration.impl.ClassImportResolverFactory</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.integration.impl.ClassImportResolverFactory.ClassImportResolverFactory()</outbound>
                <inbound type="feature" confirmed="yes">org.mvel.MVELInterpretedRuntime.getImport(java.lang.String)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.MVELInterpretedRuntime.hasImport(java.lang.String)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.ast.ImportNode.getReducedValueAccelerated(java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.util.ParseTools.findStaticMethodImportResolverFactory(org.mvel.integration.VariableResolverFactory)</name>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.OptimizationFailure.OptimizationFailure(java.lang.String)</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.integration.ResolverTools.insertFactory(org.mvel.integration.VariableResolverFactory, org.mvel.integration.VariableResolverFactory)</outbound>
                <outbound type="class" confirmed="yes">org.mvel.integration.VariableResolverFactory</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.integration.VariableResolverFactory.getNextFactory()</outbound>
                <outbound type="class" confirmed="yes">org.mvel.integration.impl.StaticMethodImportResolverFactory</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.integration.impl.StaticMethodImportResolverFactory.StaticMethodImportResolverFactory()</outbound>
                <inbound type="feature" confirmed="yes">org.mvel.ast.StaticImportNode.getReducedValueAccelerated(java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.util.ParseTools.getBestCandidate(java.lang.Class[], java.lang.String, java.lang.Class, java.lang.reflect.Method[])</name>
                <outbound type="class" confirmed="no">java.lang.Class</outbound>
                <outbound type="feature" confirmed="no">java.lang.Class.forName(java.lang.String)</outbound>
                <outbound type="feature" confirmed="no">java.lang.Class.isAssignableFrom(java.lang.Class)</outbound>
                <outbound type="feature" confirmed="no">java.lang.Class.isPrimitive()</outbound>
                <outbound type="class" confirmed="no">java.lang.ClassNotFoundException</outbound>
                <outbound type="feature" confirmed="no">java.lang.Integer.Integer(int)</outbound>
                <outbound type="feature" confirmed="no">java.lang.NoClassDefFoundError.NoClassDefFoundError(java.lang.String)</outbound>
                <outbound type="class" confirmed="no">java.lang.Object</outbound>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="feature" confirmed="no">java.lang.String.equals(java.lang.Object)</outbound>
                <outbound type="feature" confirmed="no">java.lang.Throwable.getMessage()</outbound>
                <outbound type="class" confirmed="no">java.lang.reflect.Method</outbound>
                <outbound type="feature" confirmed="no">java.lang.reflect.Method.getName()</outbound>
                <outbound type="feature" confirmed="no">java.lang.reflect.Method.getParameterTypes()</outbound>
                <outbound type="class" confirmed="no">java.util.Map</outbound>
                <outbound type="feature" confirmed="no">java.util.Map.get(java.lang.Object)</outbound>
                <outbound type="feature" confirmed="no">java.util.Map.put(java.lang.Object, java.lang.Object)</outbound>
                <outbound type="feature" confirmed="no">java.util.WeakHashMap.WeakHashMap()</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.DataConversion.canConvert(java.lang.Class, java.lang.Class)</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.util.ParseTools.RESOLVED_METH_CACHE</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.util.ParseTools.boxPrimitive(java.lang.Class)</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.util.ParseTools.createClassSignatureHash(java.lang.Class, java.lang.Class[])</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.util.ParseTools.isNumericallyCoercible(java.lang.Class, java.lang.Class)</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.util.ParseTools.unboxPrimitive(java.lang.Class)</outbound>
                <inbound type="feature" confirmed="yes">org.mvel.PropertyVerifier.getMethod(java.lang.Class, java.lang.String)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.util.ParseTools.getBestCandidate(java.lang.Object[], java.lang.String, java.lang.Class, java.lang.reflect.Method[])</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.util.ParseTools.getBestCandidate(java.lang.Object[], java.lang.String, java.lang.Class, java.lang.reflect.Method[])</name>
                <outbound type="class" confirmed="no">java.lang.Class</outbound>
                <outbound type="class" confirmed="no">java.lang.Object</outbound>
                <outbound type="feature" confirmed="no">java.lang.Object.getClass()</outbound>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="class" confirmed="no">java.lang.reflect.Method</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.util.ParseTools.getBestCandidate(java.lang.Class[], java.lang.String, java.lang.Class, java.lang.reflect.Method[])</outbound>
                <inbound type="feature" confirmed="yes">org.mvel.PropertyAccessor.getMethod(java.lang.Object, java.lang.String)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.asm.ASMAccessorOptimizer.getMethod(java.lang.Object, java.lang.String)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.refl.ReflectiveAccessorOptimizer.getMethod(java.lang.Object, java.lang.String)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.util.ParseTools.getBestConstructorCanadidate(java.lang.Object[], java.lang.Class)</name>
                <outbound type="class" confirmed="no">java.lang.Class</outbound>
                <outbound type="feature" confirmed="no">java.lang.Class.isAssignableFrom(java.lang.Class)</outbound>
                <outbound type="feature" confirmed="no">java.lang.Class.isPrimitive()</outbound>
                <outbound type="feature" confirmed="no">java.lang.Integer.Integer(int)</outbound>
                <outbound type="class" confirmed="no">java.lang.Object</outbound>
                <outbound type="feature" confirmed="no">java.lang.Object.getClass()</outbound>
                <outbound type="class" confirmed="no">java.lang.reflect.Constructor</outbound>
                <outbound type="class" confirmed="no">java.util.Map</outbound>
                <outbound type="feature" confirmed="no">java.util.Map.get(java.lang.Object)</outbound>
                <outbound type="feature" confirmed="no">java.util.Map.put(java.lang.Object, java.lang.Object)</outbound>
                <outbound type="feature" confirmed="no">java.util.WeakHashMap.WeakHashMap()</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.DataConversion.canConvert(java.lang.Class, java.lang.Class)</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.util.ParseTools.RESOLVED_CONST_CACHE</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.util.ParseTools.boxPrimitive(java.lang.Class)</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.util.ParseTools.createClassSignatureHash(java.lang.Class, java.lang.Class[])</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.util.ParseTools.getConstructors(java.lang.Class)</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.util.ParseTools.getConstructors(java.lang.reflect.Constructor)</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.util.ParseTools.isNumericallyCoercible(java.lang.Class, java.lang.Class)</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.util.ParseTools.unboxPrimitive(java.lang.Class)</outbound>
                <inbound type="feature" confirmed="yes">org.mvel.ast.NewObjectNode.getReducedValue(java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.asm.ASMAccessorOptimizer.optimizeObjectCreation(char[], java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.refl.ReflectiveAccessorOptimizer.compileConstructor(char[], java.lang.Object, org.mvel.integration.VariableResolverFactory)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.util.ParseTools.getConstructors(java.lang.Class)</name>
                <outbound type="class" confirmed="no">java.lang.Class</outbound>
                <outbound type="feature" confirmed="no">java.lang.Class.getConstructors()</outbound>
                <outbound type="class" confirmed="no">java.lang.Object</outbound>
                <outbound type="class" confirmed="no">java.lang.reflect.Constructor</outbound>
                <outbound type="class" confirmed="no">java.lang.reflect.Constructor[]</outbound>
                <outbound type="class" confirmed="no">java.util.Map</outbound>
                <outbound type="feature" confirmed="no">java.util.Map.get(java.lang.Object)</outbound>
                <outbound type="feature" confirmed="no">java.util.Map.put(java.lang.Object, java.lang.Object)</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.util.ParseTools.CLASS_CONSTRUCTOR_CACHE</outbound>
                <inbound type="feature" confirmed="yes">org.mvel.util.ParseTools.getBestConstructorCanadidate(java.lang.Object[], java.lang.Class)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.util.ParseTools.getConstructors(java.lang.reflect.Constructor)</name>
                <outbound type="class" confirmed="no">java.lang.Class</outbound>
                <outbound type="class" confirmed="no">java.lang.Class[]</outbound>
                <outbound type="class" confirmed="no">java.lang.Object</outbound>
                <outbound type="class" confirmed="no">java.lang.reflect.Constructor</outbound>
                <outbound type="feature" confirmed="no">java.lang.reflect.Constructor.getParameterTypes()</outbound>
                <outbound type="class" confirmed="no">java.util.Map</outbound>
                <outbound type="feature" confirmed="no">java.util.Map.get(java.lang.Object)</outbound>
                <outbound type="feature" confirmed="no">java.util.Map.put(java.lang.Object, java.lang.Object)</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.util.ParseTools.CONSTRUCTOR_PARMS_CACHE</outbound>
                <inbound type="feature" confirmed="yes">org.mvel.util.ParseTools.getBestConstructorCanadidate(java.lang.Object[], java.lang.Class)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.util.ParseTools.getDebugFileWriter()</name>
                <outbound type="class" confirmed="no">java.io.File</outbound>
                <outbound type="feature" confirmed="no">java.io.File.File(java.lang.String)</outbound>
                <outbound type="class" confirmed="no">java.io.FileWriter</outbound>
                <outbound type="feature" confirmed="no">java.io.FileWriter.FileWriter(java.io.File, boolean)</outbound>
                <outbound type="class" confirmed="no">java.io.IOException</outbound>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.MVEL.getDebuggingOutputFileName()</outbound>
                <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.asm.ASMAccessorOptimizer.dumpAdvancedDebugging()</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.util.ParseTools.getExactMatch(java.lang.String, java.lang.Class[], java.lang.Class, java.lang.Class)</name>
                <outbound type="class" confirmed="no">java.lang.Class</outbound>
                <outbound type="feature" confirmed="no">java.lang.Class.getMethods()</outbound>
                <outbound type="class" confirmed="no">java.lang.Object</outbound>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="feature" confirmed="no">java.lang.String.equals(java.lang.Object)</outbound>
                <outbound type="class" confirmed="no">java.lang.reflect.Method</outbound>
                <outbound type="feature" confirmed="no">java.lang.reflect.Method.getName()</outbound>
                <outbound type="feature" confirmed="no">java.lang.reflect.Method.getParameterTypes()</outbound>
                <outbound type="feature" confirmed="no">java.lang.reflect.Method.getReturnType()</outbound>
                <inbound type="feature" confirmed="yes">org.mvel.util.ParseTools.getWidenedTarget(java.lang.reflect.Method)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.util.ParseTools.getSimpleClassName(java.lang.Class)</name>
                <outbound type="class" confirmed="no">java.lang.Class</outbound>
                <outbound type="feature" confirmed="no">java.lang.Class.getName()</outbound>
                <outbound type="feature" confirmed="no">java.lang.Class.getSimpleName()</outbound>
                <outbound type="feature" confirmed="no">java.lang.Class.isArray()</outbound>
                <outbound type="class" confirmed="no">java.lang.Object</outbound>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="feature" confirmed="no">java.lang.String.lastIndexOf(int)</outbound>
                <outbound type="feature" confirmed="no">java.lang.String.substring(int)</outbound>
                <outbound type="feature" confirmed="no">java.lang.String.valueOf(java.lang.Object)</outbound>
                <outbound type="class" confirmed="no">java.lang.StringBuffer</outbound>
                <outbound type="feature" confirmed="no">java.lang.StringBuffer.StringBuffer(java.lang.String)</outbound>
                <outbound type="feature" confirmed="no">java.lang.StringBuffer.append(java.lang.String)</outbound>
                <outbound type="feature" confirmed="no">java.lang.StringBuffer.toString()</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.util.ParseTools.JDK_14_COMPATIBILITY</outbound>
                <inbound type="feature" confirmed="yes">org.mvel.AbstractParser.nextToken()</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.ParserContext.addImport(java.lang.Class)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.debug.DebugTools.decompile(org.mvel.CompiledExpression, boolean, org.mvel.debug.DebugTools$DecompileContext)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.integration.impl.ClassImportResolverFactory.addClass(java.lang.Class)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.util.ParseTools.getWidenedTarget(java.lang.reflect.Method)</name>
                <outbound type="class" confirmed="no">java.lang.Class</outbound>
                <outbound type="feature" confirmed="no">java.lang.Class.getInterfaces()</outbound>
                <outbound type="feature" confirmed="no">java.lang.Class.getSuperclass()</outbound>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="class" confirmed="no">java.lang.reflect.Method</outbound>
                <outbound type="feature" confirmed="no">java.lang.reflect.Method.getDeclaringClass()</outbound>
                <outbound type="feature" confirmed="no">java.lang.reflect.Method.getName()</outbound>
                <outbound type="feature" confirmed="no">java.lang.reflect.Method.getParameterTypes()</outbound>
                <outbound type="feature" confirmed="no">java.lang.reflect.Method.getReturnType()</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.util.ParseTools.getExactMatch(java.lang.String, java.lang.Class[], java.lang.Class, java.lang.Class)</outbound>
                <inbound type="feature" confirmed="yes">org.mvel.PropertyAccessor.getMethod(java.lang.Object, java.lang.String)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.asm.ASMAccessorOptimizer.getMethod(java.lang.Object, java.lang.String)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.refl.ReflectiveAccessorOptimizer.getMethod(java.lang.Object, java.lang.String)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.util.ParseTools.handleEscapeSequence(char)</name>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="class" confirmed="no">java.lang.StringBuffer</outbound>
                <outbound type="feature" confirmed="no">java.lang.StringBuffer.StringBuffer(java.lang.String)</outbound>
                <outbound type="feature" confirmed="no">java.lang.StringBuffer.append(char)</outbound>
                <outbound type="feature" confirmed="no">java.lang.StringBuffer.toString()</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.ParseException.ParseException(java.lang.String)</outbound>
                <inbound type="feature" confirmed="yes">org.mvel.util.ParseTools.captureStringLiteral(char, char[], int, int)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.util.ParseTools.handleStringEscapes(char[])</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.util.ParseTools.handleParserEgress(java.lang.Object, boolean)</name>
                <outbound type="feature" confirmed="no">java.lang.Double.Double(double)</outbound>
                <outbound type="feature" confirmed="no">java.lang.Float.Float(float)</outbound>
                <outbound type="feature" confirmed="no">java.lang.Integer.Integer(int)</outbound>
                <outbound type="feature" confirmed="no">java.lang.Long.Long(long)</outbound>
                <outbound type="class" confirmed="no">java.lang.Object</outbound>
                <outbound type="class" confirmed="no">java.math.BigDecimal</outbound>
                <outbound type="feature" confirmed="no">java.math.BigDecimal.doubleValue()</outbound>
                <outbound type="feature" confirmed="no">java.math.BigDecimal.floatValue()</outbound>
                <outbound type="feature" confirmed="no">java.math.BigDecimal.intValue()</outbound>
                <outbound type="feature" confirmed="no">java.math.BigDecimal.longValue()</outbound>
                <outbound type="feature" confirmed="no">java.math.BigDecimal.scale()</outbound>
                <inbound type="feature" confirmed="yes">org.mvel.CompiledExpression.getValue(java.lang.Object, org.mvel.integration.VariableResolverFactory)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.ExecutableAccessor.getValue(java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.ExecutableAccessor.getValue(java.lang.Object, org.mvel.integration.VariableResolverFactory)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.ExecutableLiteral.ExecutableLiteral(java.lang.Object)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.MVEL.eval(char[], java.lang.Object, java.lang.Class)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.MVEL.eval(char[], java.lang.Object, java.util.Map)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.MVEL.eval(char[], java.lang.Object, java.util.Map, java.lang.Class)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.MVEL.eval(char[], java.lang.Object, org.mvel.integration.VariableResolverFactory, java.lang.Class)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.MVEL.eval(char[], java.util.Map, java.lang.Class)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.MVEL.eval(java.lang.String, java.lang.Object, java.lang.Class)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.MVEL.eval(java.lang.String, java.lang.Object, java.util.Map, java.lang.Class)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.MVEL.eval(java.lang.String, java.lang.Object, org.mvel.integration.VariableResolverFactory, java.lang.Class)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.MVEL.eval(java.lang.String, java.util.Map, java.lang.Class)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.MVEL.eval(java.lang.String, org.mvel.integration.VariableResolverFactory, java.lang.Class)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.MVEL.evalToString(java.lang.String, java.lang.Object)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.MVEL.evalToString(java.lang.String, java.lang.Object, java.util.Map)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.MVEL.executeDebugger(org.mvel.CompiledExpression, java.lang.Object, org.mvel.integration.VariableResolverFactory)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.MVEL.executeExpression(java.lang.Object)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.MVEL.executeExpression(java.lang.Object, java.lang.Object)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.MVEL.executeExpression(java.lang.Object, java.lang.Object, java.lang.Class)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.MVEL.executeExpression(java.lang.Object, java.lang.Object, java.util.Map)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.MVEL.executeExpression(java.lang.Object, java.lang.Object, java.util.Map, java.lang.Class)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.MVEL.executeExpression(java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.MVEL.executeExpression(java.lang.Object, java.util.Map)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.MVEL.executeExpression(java.lang.Object, java.util.Map, java.lang.Class)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.MVEL.executeExpression(java.lang.Object, org.mvel.integration.VariableResolverFactory)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.MVELInterpretedRuntime.parse()</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.util.ParseTools.handleStringEscapes(char[])</name>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="feature" confirmed="no">java.lang.String.String(char[])</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.util.ParseTools.handleEscapeSequence(char)</outbound>
                <inbound type="feature" confirmed="yes">org.mvel.AbstractParser.nextToken()</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.util.ParseTools.increment(java.lang.Object)</name>
                <outbound type="class" confirmed="no">java.lang.Character</outbound>
                <outbound type="feature" confirmed="no">java.lang.Character.charValue()</outbound>
                <outbound type="class" confirmed="no">java.lang.Class</outbound>
                <outbound type="feature" confirmed="no">java.lang.Class.getName()</outbound>
                <outbound type="class" confirmed="no">java.lang.Double</outbound>
                <outbound type="feature" confirmed="no">java.lang.Double.Double(double)</outbound>
                <outbound type="feature" confirmed="no">java.lang.Double.doubleValue()</outbound>
                <outbound type="class" confirmed="no">java.lang.Float</outbound>
                <outbound type="feature" confirmed="no">java.lang.Float.Float(float)</outbound>
                <outbound type="feature" confirmed="no">java.lang.Float.floatValue()</outbound>
                <outbound type="class" confirmed="no">java.lang.Integer</outbound>
                <outbound type="feature" confirmed="no">java.lang.Integer.Integer(int)</outbound>
                <outbound type="feature" confirmed="no">java.lang.Integer.intValue()</outbound>
                <outbound type="class" confirmed="no">java.lang.Object</outbound>
                <outbound type="feature" confirmed="no">java.lang.Object.getClass()</outbound>
                <outbound type="class" confirmed="no">java.lang.Short</outbound>
                <outbound type="feature" confirmed="no">java.lang.Short.shortValue()</outbound>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="class" confirmed="no">java.lang.StringBuffer</outbound>
                <outbound type="feature" confirmed="no">java.lang.StringBuffer.StringBuffer(java.lang.String)</outbound>
                <outbound type="feature" confirmed="no">java.lang.StringBuffer.append(java.lang.String)</outbound>
                <outbound type="feature" confirmed="no">java.lang.StringBuffer.toString()</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.CompileException.CompileException(java.lang.String)</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.util.ParseTools.isNumericallyCoercible(java.lang.Class, java.lang.Class)</name>
                <outbound type="class" confirmed="no">java.lang.Class</outbound>
                <outbound type="feature" confirmed="no">java.lang.Class.forName(java.lang.String)</outbound>
                <outbound type="feature" confirmed="no">java.lang.Class.isAssignableFrom(java.lang.Class)</outbound>
                <outbound type="feature" confirmed="no">java.lang.Class.isPrimitive()</outbound>
                <outbound type="class" confirmed="no">java.lang.ClassNotFoundException</outbound>
                <outbound type="feature" confirmed="no">java.lang.NoClassDefFoundError.NoClassDefFoundError(java.lang.String)</outbound>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="feature" confirmed="no">java.lang.Throwable.getMessage()</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.util.ParseTools.boxPrimitive(java.lang.Class)</outbound>
                <inbound type="feature" confirmed="yes">org.mvel.util.ParseTools.getBestCandidate(java.lang.Class[], java.lang.String, java.lang.Class, java.lang.reflect.Method[])</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.util.ParseTools.getBestConstructorCanadidate(java.lang.Object[], java.lang.Class)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.util.ParseTools.isPrimitiveWrapper(java.lang.Class)</name>
                <outbound type="class" confirmed="no">java.lang.Class</outbound>
                <outbound type="feature" confirmed="no">java.lang.Class.forName(java.lang.String)</outbound>
                <outbound type="class" confirmed="no">java.lang.ClassNotFoundException</outbound>
                <outbound type="feature" confirmed="no">java.lang.NoClassDefFoundError.NoClassDefFoundError(java.lang.String)</outbound>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="feature" confirmed="no">java.lang.Throwable.getMessage()</outbound>
                <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.asm.ASMAccessorOptimizer.getMethod(java.lang.Object, java.lang.String)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.util.ParseTools.optimizeTree(org.mvel.CompiledExpression)</name>
                <outbound type="class" confirmed="no">java.io.Serializable</outbound>
                <outbound type="class" confirmed="no">java.lang.Class</outbound>
                <outbound type="class" confirmed="no">java.lang.Object</outbound>
                <outbound type="class" confirmed="yes">org.mvel.ASTIterator</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.ASTIterator.firstNode()</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.ASTIterator.size()</outbound>
                <outbound type="class" confirmed="yes">org.mvel.ASTNode</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.ASTNode.getFields()</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.ASTNode.getIntRegister()</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.ASTNode.getLiteralValue()</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.ASTNode.isLiteral()</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.ASTNode.isThisVal()</outbound>
                <outbound type="class" confirmed="yes">org.mvel.CompiledExpression</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.CompiledExpression.getKnownEgressType()</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.CompiledExpression.getTokens()</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.ExecutableAccessor.ExecutableAccessor(org.mvel.ASTNode, boolean, java.lang.Class)</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.ExecutableLiteral.ExecutableLiteral(int)</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.ExecutableLiteral.ExecutableLiteral(java.lang.Object)</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.MVEL.isOptimizationEnabled()</outbound>
                <inbound type="feature" confirmed="yes">org.mvel.MVEL.compileExpression(char[], java.util.Map, java.util.Map, java.lang.String)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.MVEL.compileExpression(java.lang.String, java.util.Map, java.util.Map, java.lang.String)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.util.ParseTools.subCompileExpression(char[])</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.util.ParseTools.subCompileExpression(java.lang.String)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.util.ParseTools.parseMethodOrConstructor(char[])</name>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.util.ParseTools.balancedCapture(char[], int, char)</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.util.ParseTools.parseParameterList(char[], int, int)</outbound>
                <inbound type="feature" confirmed="yes">org.mvel.ast.NewObjectNode.getReducedValue(java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.asm.ASMAccessorOptimizer.optimizeObjectCreation(char[], java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.refl.ReflectiveAccessorOptimizer.compileConstructor(char[], java.lang.Object, org.mvel.integration.VariableResolverFactory)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.util.ParseTools.parseParameterList(char[], int, int)</name>
                <outbound type="feature" confirmed="no">java.lang.Character.isWhitespace(char)</outbound>
                <outbound type="class" confirmed="no">java.lang.Object</outbound>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="feature" confirmed="no">java.lang.String.String(char[], int, int)</outbound>
                <outbound type="feature" confirmed="no">java.lang.String.length()</outbound>
                <outbound type="feature" confirmed="no">java.lang.String.trim()</outbound>
                <outbound type="class" confirmed="no">java.lang.String[]</outbound>
                <outbound type="feature" confirmed="no">java.util.LinkedList.LinkedList()</outbound>
                <outbound type="feature" confirmed="no">java.util.List.add(java.lang.Object)</outbound>
                <outbound type="feature" confirmed="no">java.util.List.size()</outbound>
                <outbound type="feature" confirmed="no">java.util.List.toArray(java.lang.Object[])</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.util.ParseTools.balancedCapture(char[], int, char)</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.util.ParseTools.captureStringLiteral(char, char[], int, int)</outbound>
                <inbound type="feature" confirmed="yes">org.mvel.PropertyAccessor.getMethod(java.lang.Object, java.lang.String)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.PropertyVerifier.getMethod(java.lang.Class, java.lang.String)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.asm.ASMAccessorOptimizer.getMethod(java.lang.Object, java.lang.String)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.refl.ReflectiveAccessorOptimizer.getMethod(java.lang.Object, java.lang.String)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.util.ParseTools.parseMethodOrConstructor(char[])</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.util.ParseTools.parseParameters(char[])</name>
                <outbound type="class" confirmed="no">java.lang.Object</outbound>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="feature" confirmed="no">java.lang.String.String(char[], int, int)</outbound>
                <outbound type="feature" confirmed="no">java.lang.String.trim()</outbound>
                <outbound type="feature" confirmed="no">java.util.HashMap.HashMap()</outbound>
                <outbound type="class" confirmed="no">java.util.Map</outbound>
                <outbound type="feature" confirmed="no">java.util.Map.put(java.lang.Object, java.lang.Object)</outbound>
                <inbound type="feature" confirmed="yes">org.mvel.TemplateCompiler.buildIncludeRef(char[])</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.util.ParseTools.repeatChar(char, int)</name>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="feature" confirmed="no">java.lang.String.String(char[])</outbound>
                <inbound type="feature" confirmed="yes">org.mvel.ast.NewObjectNode.NewObjectNode(char[], int)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.ast.NewObjectNode.getReducedValueAccelerated(java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.util.ParseTools.resolveType(java.lang.Class)</name>
                <outbound type="feature" confirmed="no">java.lang.Boolean.TYPE</outbound>
                <outbound type="feature" confirmed="no">java.lang.Byte.TYPE</outbound>
                <outbound type="feature" confirmed="no">java.lang.Character.TYPE</outbound>
                <outbound type="class" confirmed="no">java.lang.Class</outbound>
                <outbound type="feature" confirmed="no">java.lang.Class.forName(java.lang.String)</outbound>
                <outbound type="feature" confirmed="no">java.lang.Class.isAssignableFrom(java.lang.Class)</outbound>
                <outbound type="class" confirmed="no">java.lang.ClassNotFoundException</outbound>
                <outbound type="feature" confirmed="no">java.lang.Double.TYPE</outbound>
                <outbound type="feature" confirmed="no">java.lang.Float.TYPE</outbound>
                <outbound type="feature" confirmed="no">java.lang.Integer.TYPE</outbound>
                <outbound type="feature" confirmed="no">java.lang.Long.TYPE</outbound>
                <outbound type="feature" confirmed="no">java.lang.NoClassDefFoundError.NoClassDefFoundError(java.lang.String)</outbound>
                <outbound type="feature" confirmed="no">java.lang.Short.TYPE</outbound>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="feature" confirmed="no">java.lang.Throwable.getMessage()</outbound>
                <inbound type="feature" confirmed="yes">org.mvel.math.IEEEFloatingPointMath.doOperation(java.lang.Object, int, java.lang.Object)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.math.JDK14CompatabilityMath.doOperation(java.lang.Object, int, java.lang.Object)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.util.ParseTools.static {}</name>
                <outbound type="class" confirmed="no">java.lang.Class</outbound>
                <outbound type="feature" confirmed="no">java.lang.Class.forName(java.lang.String)</outbound>
                <outbound type="feature" confirmed="no">java.lang.Class.newInstance()</outbound>
                <outbound type="feature" confirmed="no">java.lang.Double.parseDouble(java.lang.String)</outbound>
                <outbound type="class" confirmed="no">java.lang.Exception</outbound>
                <outbound type="class" confirmed="no">java.lang.Object</outbound>
                <outbound type="class" confirmed="no">java.lang.RuntimeException</outbound>
                <outbound type="feature" confirmed="no">java.lang.RuntimeException.RuntimeException(java.lang.String)</outbound>
                <outbound type="feature" confirmed="no">java.lang.RuntimeException.RuntimeException(java.lang.String, java.lang.Throwable)</outbound>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="feature" confirmed="no">java.lang.String.substring(int, int)</outbound>
                <outbound type="class" confirmed="no">java.lang.StringBuffer</outbound>
                <outbound type="feature" confirmed="no">java.lang.StringBuffer.StringBuffer(java.lang.String)</outbound>
                <outbound type="feature" confirmed="no">java.lang.StringBuffer.append(double)</outbound>
                <outbound type="feature" confirmed="no">java.lang.StringBuffer.toString()</outbound>
                <outbound type="feature" confirmed="no">java.lang.System.getProperty(java.lang.String)</outbound>
                <outbound type="class" confirmed="no">java.lang.Throwable</outbound>
                <outbound type="class" confirmed="no">java.util.Map</outbound>
                <outbound type="feature" confirmed="no">java.util.WeakHashMap.WeakHashMap(int)</outbound>
                <outbound type="feature" confirmed="no">java.util.WeakHashMap.WeakHashMap(int, float)</outbound>
                <outbound type="class" confirmed="yes">org.mvel.math.MathProcessor</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.util.ParseTools.CLASS_CONSTRUCTOR_CACHE</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.util.ParseTools.CLASS_RESOLVER_CACHE</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.util.ParseTools.CONSTRUCTOR_PARMS_CACHE</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.util.ParseTools.EMPTY_OBJ_ARR</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.util.ParseTools.JDK_14_COMPATIBILITY</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.util.ParseTools.MATH_PROCESSOR</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.util.ParseTools.RESOLVED_CONST_CACHE</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.util.ParseTools.RESOLVED_METH_CACHE</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.util.ParseTools.subCompileExpression(char[])</name>
                <outbound type="class" confirmed="no">java.io.Serializable</outbound>
                <outbound type="class" confirmed="yes">org.mvel.CompiledExpression</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.ExpressionCompiler.ExpressionCompiler(char[])</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.ExpressionCompiler._compile()</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.util.ParseTools.optimizeTree(org.mvel.CompiledExpression)</outbound>
                <inbound type="feature" confirmed="yes">org.mvel.ast.AssertNode.AssertNode(char[], int)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.ast.AssignAdd.AssignAdd(char[], int, java.lang.String)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.ast.AssignDiv.AssignDiv(char[], int, java.lang.String)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.ast.AssignMult.AssignMult(char[], int, java.lang.String)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.ast.AssignSub.AssignSub(char[], int, java.lang.String)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.ast.AssignmentNode.AssignmentNode(char[], int, int, java.lang.String)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.ast.DeepAssignmentNode.DeepAssignmentNode(char[], int, int, java.lang.String)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.ast.DeepAssignmentNode.getReducedValueAccelerated(java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.ast.ForEachNode.ForEachNode(char[], char[], int)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.ast.ForEachNode.handleCond(char[])</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.ast.IfNode.IfNode(char[], char[], int)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.ast.IfNode.setElseBlock(char[])</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.ast.NewObjectNode.updateClassName(int)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.ast.RegExMatch.RegExMatch(char[], int, char[])</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.ast.ReturnNode.ReturnNode(char[], int)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.ast.ReturnNode.getReducedValueAccelerated(java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.ast.Substatement.Substatement(char[], int)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.ast.TypeCast.TypeCast(char[], int, int, int, java.lang.Class)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.ast.TypedVarNode.TypedVarNode(char[], int, java.lang.Class)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.ast.TypedVarNode.getReducedValueAccelerated(java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.ast.WhileNode.WhileNode(char[], char[], int)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.ast.WithNode.compileWithExpressions()</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.util.ParseTools.subCompileExpression(java.lang.String)</name>
                <outbound type="class" confirmed="no">java.io.Serializable</outbound>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="class" confirmed="yes">org.mvel.CompiledExpression</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.ExpressionCompiler.ExpressionCompiler(java.lang.String)</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.ExpressionCompiler._compile()</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.util.ParseTools.optimizeTree(org.mvel.CompiledExpression)</outbound>
                <inbound type="feature" confirmed="yes">org.mvel.ast.WithNode.WithNode(char[], char[], int)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.asm.ASMAccessorOptimizer._getAccessor(java.lang.Object)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.asm.ASMAccessorOptimizer.getCollectionProperty(java.lang.Object, java.lang.String)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.asm.ASMAccessorOptimizer.getMethod(java.lang.Object, java.lang.String)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.asm.ASMAccessorOptimizer.optimizeObjectCreation(char[], java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.refl.ArrayAccessorNest.ArrayAccessorNest(java.lang.String)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.refl.ListAccessorNest.ListAccessorNest(java.lang.String)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.refl.MapAccessorNest.MapAccessorNest(java.lang.String)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.refl.ReflectiveAccessorOptimizer.compileConstructor(char[], java.lang.Object, org.mvel.integration.VariableResolverFactory)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.refl.ReflectiveAccessorOptimizer.getCollectionProperty(java.lang.Object, java.lang.String)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.refl.ReflectiveAccessorOptimizer.getMethod(java.lang.Object, java.lang.String)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.refl.collection.ExprValueAccessor.ExprValueAccessor(java.lang.String)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.util.ParseTools.subset(char[], int)</name>
                <inbound type="feature" confirmed="yes">org.mvel.ast.AssignmentNode.AssignmentNode(char[], int, int, java.lang.String)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.ast.DeepAssignmentNode.DeepAssignmentNode(char[], int, int, java.lang.String)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.ast.ForEachNode.handleCond(char[])</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.ast.StaticImportNode.StaticImportNode(char[], int)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.ast.TypedVarNode.TypedVarNode(char[], int, java.lang.Class)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.asm.ASMAccessorOptimizer.optimizeCollection(char[], java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.refl.ReflectiveAccessorOptimizer.optimizeCollection(char[], java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.refl.ReflectiveAccessorOptimizer.optimizeFold(char[], java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.util.ParseTools.subset(char[], int, int)</name>
                <inbound type="feature" confirmed="yes">org.mvel.AbstractParser.createOperator(char[], int, int, int)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.AbstractParser.createPropertyToken(int, int)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.AbstractParser.nextToken()</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.TemplateCompiler.buildIncludeRef(char[])</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.ast.AssignmentNode.AssignmentNode(char[], int, int, java.lang.String)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.ast.NewObjectNode.getReducedValue(java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.ast.NewObjectNode.updateClassName(int)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.ast.StaticImportNode.StaticImportNode(char[], int)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.ast.WithNode.compileWithExpressions()</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.asm.ASMAccessorOptimizer.optimizeObjectCreation(char[], java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.refl.ReflectiveAccessorOptimizer.compileConstructor(char[], java.lang.Object, org.mvel.integration.VariableResolverFactory)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.refl.ReflectiveAccessorOptimizer.optimizeSetAccessor(char[], java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory, boolean, java.lang.Object)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.util.ParseTools.unboxPrimitive(java.lang.Class)</name>
                <outbound type="feature" confirmed="no">java.lang.Boolean.TYPE</outbound>
                <outbound type="feature" confirmed="no">java.lang.Byte.TYPE</outbound>
                <outbound type="class" confirmed="no">java.lang.Class</outbound>
                <outbound type="feature" confirmed="no">java.lang.Class.forName(java.lang.String)</outbound>
                <outbound type="class" confirmed="no">java.lang.ClassNotFoundException</outbound>
                <outbound type="feature" confirmed="no">java.lang.Double.TYPE</outbound>
                <outbound type="feature" confirmed="no">java.lang.Float.TYPE</outbound>
                <outbound type="feature" confirmed="no">java.lang.Integer.TYPE</outbound>
                <outbound type="feature" confirmed="no">java.lang.Long.TYPE</outbound>
                <outbound type="feature" confirmed="no">java.lang.NoClassDefFoundError.NoClassDefFoundError(java.lang.String)</outbound>
                <outbound type="feature" confirmed="no">java.lang.Short.TYPE</outbound>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="feature" confirmed="no">java.lang.Throwable.getMessage()</outbound>
                <inbound type="feature" confirmed="yes">org.mvel.util.ParseTools.getBestCandidate(java.lang.Class[], java.lang.String, java.lang.Class, java.lang.reflect.Method[])</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.util.ParseTools.getBestConstructorCanadidate(java.lang.Object[], java.lang.Class)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.util.ParseTools.valueOnly(java.lang.Object)</name>
                <outbound type="class" confirmed="no">java.lang.Object</outbound>
                <outbound type="class" confirmed="yes">org.mvel.ASTNode</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.ASTNode.getLiteralValue()</outbound>
            </feature>
        </class>
        <class confirmed="yes">
            <name>org.mvel.util.PropertyTools</name>
            <outbound type="class" confirmed="no">java.lang.Object</outbound>
            <feature confirmed="yes">
                <name>org.mvel.util.PropertyTools.PropertyTools()</name>
                <outbound type="feature" confirmed="no">java.lang.Object.Object()</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.util.PropertyTools.contains(java.lang.Object, java.lang.Object)</name>
                <outbound type="class" confirmed="no">java.lang.Class</outbound>
                <outbound type="feature" confirmed="no">java.lang.Class.isArray()</outbound>
                <outbound type="class" confirmed="no">java.lang.Object</outbound>
                <outbound type="feature" confirmed="no">java.lang.Object.equals(java.lang.Object)</outbound>
                <outbound type="feature" confirmed="no">java.lang.Object.getClass()</outbound>
                <outbound type="class" confirmed="no">java.lang.Object[]</outbound>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="feature" confirmed="no">java.lang.String.indexOf(java.lang.String)</outbound>
                <outbound type="feature" confirmed="no">java.lang.String.toString()</outbound>
                <outbound type="feature" confirmed="no">java.lang.String.valueOf(java.lang.Object)</outbound>
                <outbound type="class" confirmed="no">java.util.Collection</outbound>
                <outbound type="feature" confirmed="no">java.util.Collection.contains(java.lang.Object)</outbound>
                <outbound type="class" confirmed="no">java.util.Map</outbound>
                <outbound type="feature" confirmed="no">java.util.Map.containsKey(java.lang.Object)</outbound>
                <inbound type="feature" confirmed="yes">org.mvel.ParserContext.checkForDynamicImport(java.lang.String)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.util.PropertyTools.equals(char[], java.lang.String)</name>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="feature" confirmed="no">java.lang.String.charAt(int)</outbound>
                <outbound type="feature" confirmed="no">java.lang.String.length()</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.util.PropertyTools.find(char[], char)</name>
                <inbound type="feature" confirmed="yes">org.mvel.ast.AssignmentNode.AssignmentNode(char[], int, int, java.lang.String)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.ast.DeepAssignmentNode.DeepAssignmentNode(char[], int, int, java.lang.String)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.ast.TypedVarNode.TypedVarNode(char[], int, java.lang.Class)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.util.PropertyTools.findAbsoluteLast(char[])</name>
                <inbound type="feature" confirmed="yes">org.mvel.PropertyAccessor.set(java.lang.Object)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.util.PropertyTools.getBaseComponentType(java.lang.Class)</name>
                <outbound type="class" confirmed="no">java.lang.Class</outbound>
                <outbound type="feature" confirmed="no">java.lang.Class.getComponentType()</outbound>
                <outbound type="feature" confirmed="no">java.lang.Class.isArray()</outbound>
                <inbound type="feature" confirmed="yes">org.mvel.PropertyAccessor.set(java.lang.Object)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.ast.NewObjectNode.getReducedValueAccelerated(java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.conversion.PrimArrayHandler.handleLooseTypeConversion(java.lang.Class, java.lang.Object[], java.lang.Class)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.refl.ArrayAccessorNest.setValue(java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory, java.lang.Object)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.refl.ReflectiveAccessorOptimizer.optimizeSetAccessor(char[], java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory, boolean, java.lang.Object)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.util.PropertyTools.getFieldOrAccessor(java.lang.Class, java.lang.String)</name>
                <outbound type="class" confirmed="no">java.lang.Class</outbound>
                <outbound type="feature" confirmed="no">java.lang.Class.getField(java.lang.String)</outbound>
                <outbound type="class" confirmed="no">java.lang.Exception</outbound>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="feature" confirmed="no">java.lang.String.charAt(int)</outbound>
                <outbound type="feature" confirmed="no">java.lang.String.length()</outbound>
                <outbound type="class" confirmed="no">java.lang.reflect.Field</outbound>
                <outbound type="feature" confirmed="no">java.lang.reflect.Field.getModifiers()</outbound>
                <outbound type="class" confirmed="no">java.lang.reflect.Member</outbound>
                <outbound type="class" confirmed="no">java.lang.reflect.Method</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.util.PropertyTools.getGetter(java.lang.Class, java.lang.String)</outbound>
                <inbound type="feature" confirmed="yes">org.mvel.PropertyAccessor.getBeanProperty(java.lang.Object, java.lang.String)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.PropertyVerifier.getBeanProperty(java.lang.Class, java.lang.String)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.asm.ASMAccessorOptimizer.getBeanProperty(java.lang.Object, java.lang.String)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.refl.ReflectiveAccessorOptimizer.getBeanProperty(java.lang.Object, java.lang.String)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.util.PropertyTools.isPropertyReadAndWrite(java.lang.Class, java.lang.String)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.util.PropertyTools.getFieldOrWriteAccessor(java.lang.Class, java.lang.String)</name>
                <outbound type="class" confirmed="no">java.lang.Class</outbound>
                <outbound type="feature" confirmed="no">java.lang.Class.getField(java.lang.String)</outbound>
                <outbound type="class" confirmed="no">java.lang.NoSuchFieldException</outbound>
                <outbound type="class" confirmed="no">java.lang.NullPointerException</outbound>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="class" confirmed="no">java.lang.reflect.Field</outbound>
                <outbound type="feature" confirmed="no">java.lang.reflect.Field.getModifiers()</outbound>
                <outbound type="class" confirmed="no">java.lang.reflect.Member</outbound>
                <outbound type="class" confirmed="no">java.lang.reflect.Method</outbound>
                <outbound type="feature" confirmed="no">java.lang.reflect.Modifier.isPublic(int)</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.util.PropertyTools.getSetter(java.lang.Class, java.lang.String)</outbound>
                <inbound type="feature" confirmed="yes">org.mvel.PropertyAccessor.set(java.lang.Object)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.refl.ReflectiveAccessorOptimizer.optimizeSetAccessor(char[], java.lang.Object, java.lang.Object, org.mvel.integration.VariableResolverFactory, boolean, java.lang.Object)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.util.PropertyTools.getGetter(java.lang.Class, java.lang.String)</name>
                <outbound type="class" confirmed="no">java.lang.Class</outbound>
                <outbound type="feature" confirmed="no">java.lang.Class.getMethods()</outbound>
                <outbound type="class" confirmed="no">java.lang.Object</outbound>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="feature" confirmed="no">java.lang.String.equals(java.lang.Object)</outbound>
                <outbound type="class" confirmed="no">java.lang.reflect.Method</outbound>
                <outbound type="feature" confirmed="no">java.lang.reflect.Method.getModifiers()</outbound>
                <outbound type="feature" confirmed="no">java.lang.reflect.Method.getName()</outbound>
                <outbound type="feature" confirmed="no">java.lang.reflect.Method.getParameterTypes()</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.util.ReflectionUtil.getGetter(java.lang.String)</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.util.ReflectionUtil.getIsGetter(java.lang.String)</outbound>
                <inbound type="feature" confirmed="yes">org.mvel.util.PropertyTools.getFieldOrAccessor(java.lang.Class, java.lang.String)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.util.PropertyTools.hasGetter(java.lang.reflect.Field)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.util.PropertyTools.getSetter(java.lang.Class, java.lang.String)</name>
                <outbound type="class" confirmed="no">java.lang.Class</outbound>
                <outbound type="feature" confirmed="no">java.lang.Class.getMethods()</outbound>
                <outbound type="class" confirmed="no">java.lang.Object</outbound>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="feature" confirmed="no">java.lang.String.equals(java.lang.Object)</outbound>
                <outbound type="class" confirmed="no">java.lang.reflect.Method</outbound>
                <outbound type="feature" confirmed="no">java.lang.reflect.Method.getModifiers()</outbound>
                <outbound type="feature" confirmed="no">java.lang.reflect.Method.getName()</outbound>
                <outbound type="feature" confirmed="no">java.lang.reflect.Method.getParameterTypes()</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.util.ReflectionUtil.getSetter(java.lang.String)</outbound>
                <inbound type="feature" confirmed="yes">org.mvel.util.PropertyTools.getFieldOrWriteAccessor(java.lang.Class, java.lang.String)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.util.PropertyTools.getWritableFieldOrAccessor(java.lang.Class, java.lang.String)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.util.PropertyTools.hasSetter(java.lang.reflect.Field)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.util.PropertyTools.getSubComponentType(java.lang.Class)</name>
                <outbound type="class" confirmed="no">java.lang.Class</outbound>
                <outbound type="feature" confirmed="no">java.lang.Class.getComponentType()</outbound>
                <outbound type="feature" confirmed="no">java.lang.Class.isArray()</outbound>
                <inbound type="feature" confirmed="yes">org.mvel.PropertyVerifier.getCollectionProperty(java.lang.Class, java.lang.String)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.util.PropertyTools.getWritableFieldOrAccessor(java.lang.Class, java.lang.String)</name>
                <outbound type="class" confirmed="no">java.lang.Class</outbound>
                <outbound type="feature" confirmed="no">java.lang.Class.getField(java.lang.String)</outbound>
                <outbound type="class" confirmed="no">java.lang.NoSuchFieldException</outbound>
                <outbound type="class" confirmed="no">java.lang.NullPointerException</outbound>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="class" confirmed="no">java.lang.reflect.Field</outbound>
                <outbound type="feature" confirmed="no">java.lang.reflect.Field.getModifiers()</outbound>
                <outbound type="class" confirmed="no">java.lang.reflect.Member</outbound>
                <outbound type="class" confirmed="no">java.lang.reflect.Method</outbound>
                <outbound type="feature" confirmed="no">java.lang.reflect.Modifier.isPublic(int)</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.util.PropertyTools.getSetter(java.lang.Class, java.lang.String)</outbound>
                <inbound type="feature" confirmed="yes">org.mvel.util.PropertyTools.isPropertyReadAndWrite(java.lang.Class, java.lang.String)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.util.PropertyTools.handleNumericConversion(char[])</name>
                <outbound type="feature" confirmed="no">java.lang.Double.Double(double)</outbound>
                <outbound type="feature" confirmed="no">java.lang.Double.parseDouble(java.lang.String)</outbound>
                <outbound type="feature" confirmed="no">java.lang.Float.Float(float)</outbound>
                <outbound type="feature" confirmed="no">java.lang.Float.parseFloat(java.lang.String)</outbound>
                <outbound type="feature" confirmed="no">java.lang.Integer.Integer(int)</outbound>
                <outbound type="feature" confirmed="no">java.lang.Integer.parseInt(java.lang.String)</outbound>
                <outbound type="feature" confirmed="no">java.lang.Long.Long(long)</outbound>
                <outbound type="feature" confirmed="no">java.lang.Long.parseLong(java.lang.String)</outbound>
                <outbound type="class" confirmed="no">java.lang.Object</outbound>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="feature" confirmed="no">java.lang.String.String(char[])</outbound>
                <outbound type="feature" confirmed="no">java.math.BigDecimal.BigDecimal(java.lang.String)</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.util.PropertyTools.numericTest(char[])</outbound>
                <inbound type="feature" confirmed="yes">org.mvel.ASTNode.setName(char[])</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.util.PropertyTools.hasGetter(java.lang.reflect.Field)</name>
                <outbound type="class" confirmed="no">java.lang.Class</outbound>
                <outbound type="feature" confirmed="no">java.lang.Class.isAssignableFrom(java.lang.Class)</outbound>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="class" confirmed="no">java.lang.reflect.Field</outbound>
                <outbound type="feature" confirmed="no">java.lang.reflect.Field.getDeclaringClass()</outbound>
                <outbound type="feature" confirmed="no">java.lang.reflect.Field.getName()</outbound>
                <outbound type="feature" confirmed="no">java.lang.reflect.Field.getType()</outbound>
                <outbound type="class" confirmed="no">java.lang.reflect.Method</outbound>
                <outbound type="feature" confirmed="no">java.lang.reflect.Method.getReturnType()</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.util.PropertyTools.getGetter(java.lang.Class, java.lang.String)</outbound>
                <inbound type="feature" confirmed="yes">org.mvel.util.PropertyTools.isPropertyReadAndWrite(java.lang.reflect.Field)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.util.PropertyTools.hasSetter(java.lang.reflect.Field)</name>
                <outbound type="class" confirmed="no">java.lang.Class</outbound>
                <outbound type="feature" confirmed="no">java.lang.Class.isAssignableFrom(java.lang.Class)</outbound>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="class" confirmed="no">java.lang.reflect.Field</outbound>
                <outbound type="feature" confirmed="no">java.lang.reflect.Field.getDeclaringClass()</outbound>
                <outbound type="feature" confirmed="no">java.lang.reflect.Field.getName()</outbound>
                <outbound type="feature" confirmed="no">java.lang.reflect.Field.getType()</outbound>
                <outbound type="class" confirmed="no">java.lang.reflect.Method</outbound>
                <outbound type="feature" confirmed="no">java.lang.reflect.Method.getParameterTypes()</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.util.PropertyTools.getSetter(java.lang.Class, java.lang.String)</outbound>
                <inbound type="feature" confirmed="yes">org.mvel.util.PropertyTools.isPropertyReadAndWrite(java.lang.reflect.Field)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.util.PropertyTools.isDigit(int)</name>
                <inbound type="feature" confirmed="yes">org.mvel.AbstractParser.nextToken()</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.util.PropertyTools.isNumber(char[])</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.util.PropertyTools.isNumber(java.lang.String)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.util.PropertyTools.numericTest(char[])</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.util.PropertyTools.isEmpty(java.lang.Object)</name>
                <outbound type="class" confirmed="no">java.lang.Object</outbound>
                <outbound type="class" confirmed="no">java.lang.Object[]</outbound>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="feature" confirmed="no">java.lang.String.equals(java.lang.Object)</outbound>
                <outbound type="feature" confirmed="no">java.lang.String.valueOf(java.lang.Object)</outbound>
                <outbound type="class" confirmed="no">java.util.Collection</outbound>
                <outbound type="feature" confirmed="no">java.util.Collection.size()</outbound>
                <outbound type="class" confirmed="no">java.util.Map</outbound>
                <outbound type="feature" confirmed="no">java.util.Map.size()</outbound>
                <inbound type="feature" confirmed="yes">org.mvel.AbstractParser.reduce()</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.MVELRuntime.execute(boolean, org.mvel.CompiledExpression, java.lang.Object, org.mvel.integration.VariableResolverFactory)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.util.PropertyTools.isIdentifierPart(int)</name>
                <inbound type="feature" confirmed="yes">org.mvel.AbstractParser.nextToken()</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.optimizers.AbstractOptimizer.nextSubToken()</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.util.PropertyTools.isNumber(char[])</name>
                <outbound type="feature" confirmed="yes">org.mvel.util.PropertyTools.isDigit(int)</outbound>
                <inbound type="feature" confirmed="yes">org.mvel.ASTNode.setName(char[])</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.util.PropertyTools.isNumber(java.lang.Object)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.util.PropertyTools.isNumber(java.lang.Object)</name>
                <outbound type="class" confirmed="no">char[]</outbound>
                <outbound type="class" confirmed="no">java.lang.Character</outbound>
                <outbound type="class" confirmed="no">java.lang.Double</outbound>
                <outbound type="class" confirmed="no">java.lang.Float</outbound>
                <outbound type="class" confirmed="no">java.lang.Integer</outbound>
                <outbound type="class" confirmed="no">java.lang.Long</outbound>
                <outbound type="class" confirmed="no">java.lang.Object</outbound>
                <outbound type="class" confirmed="no">java.lang.Short</outbound>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="class" confirmed="no">java.math.BigDecimal</outbound>
                <outbound type="class" confirmed="no">java.math.BigInteger</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.util.PropertyTools.isNumber(char[])</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.util.PropertyTools.isNumber(java.lang.String)</outbound>
                <inbound type="feature" confirmed="yes">org.mvel.math.IEEEFloatingPointMath._doOperations(int, java.lang.Object, int, int, java.lang.Object)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.math.IEEEFloatingPointMath.doOperation(java.lang.Object, int, java.lang.Object)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.math.JDK14CompatabilityMath._doOperations(int, java.lang.Object, int, int, java.lang.Object)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.math.JDK14CompatabilityMath.doOperation(java.lang.Object, int, java.lang.Object)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.util.PropertyTools.isNumber(java.lang.String)</name>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="feature" confirmed="no">java.lang.String.charAt(int)</outbound>
                <outbound type="feature" confirmed="no">java.lang.String.length()</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.util.PropertyTools.isDigit(int)</outbound>
                <inbound type="feature" confirmed="yes">org.mvel.util.PropertyTools.isNumber(java.lang.Object)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.util.PropertyTools.isNumeric(java.lang.Object)</name>
                <outbound type="class" confirmed="no">java.lang.Class</outbound>
                <outbound type="feature" confirmed="no">java.lang.Class.forName(java.lang.String)</outbound>
                <outbound type="feature" confirmed="no">java.lang.Class.isAssignableFrom(java.lang.Class)</outbound>
                <outbound type="class" confirmed="no">java.lang.ClassNotFoundException</outbound>
                <outbound type="feature" confirmed="no">java.lang.Double.TYPE</outbound>
                <outbound type="feature" confirmed="no">java.lang.Float.TYPE</outbound>
                <outbound type="feature" confirmed="no">java.lang.Integer.TYPE</outbound>
                <outbound type="feature" confirmed="no">java.lang.Long.TYPE</outbound>
                <outbound type="feature" confirmed="no">java.lang.NoClassDefFoundError.NoClassDefFoundError(java.lang.String)</outbound>
                <outbound type="class" confirmed="no">java.lang.Object</outbound>
                <outbound type="feature" confirmed="no">java.lang.Object.getClass()</outbound>
                <outbound type="feature" confirmed="no">java.lang.Short.TYPE</outbound>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="feature" confirmed="no">java.lang.Throwable.getMessage()</outbound>
                <inbound type="feature" confirmed="yes">org.mvel.BlankLiteral.equals(java.lang.Object)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.util.PropertyTools.isPropertyReadAndWrite(java.lang.Class, java.lang.String)</name>
                <outbound type="class" confirmed="no">java.lang.Class</outbound>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="class" confirmed="no">java.lang.reflect.Member</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.util.PropertyTools.getFieldOrAccessor(java.lang.Class, java.lang.String)</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.util.PropertyTools.getWritableFieldOrAccessor(java.lang.Class, java.lang.String)</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.util.PropertyTools.isPropertyReadAndWrite(java.lang.reflect.Field)</name>
                <outbound type="class" confirmed="no">java.lang.reflect.Field</outbound>
                <outbound type="feature" confirmed="no">java.lang.reflect.Field.getModifiers()</outbound>
                <outbound type="feature" confirmed="no">java.lang.reflect.Modifier.isPublic(int)</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.util.PropertyTools.hasGetter(java.lang.reflect.Field)</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.util.PropertyTools.hasSetter(java.lang.reflect.Field)</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.util.PropertyTools.numericTest(char[])</name>
                <outbound type="feature" confirmed="yes">org.mvel.util.PropertyTools.isDigit(int)</outbound>
                <inbound type="feature" confirmed="yes">org.mvel.util.PropertyTools.handleNumericConversion(char[])</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.util.PropertyTools.similarity(java.lang.String, java.lang.String)</name>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="feature" confirmed="no">java.lang.String.toCharArray()</outbound>
                <inbound type="feature" confirmed="yes">org.mvel.AbstractParser.reduce()</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.MVELRuntime.execute(boolean, org.mvel.CompiledExpression, java.lang.Object, org.mvel.integration.VariableResolverFactory)</inbound>
            </feature>
        </class>
        <class confirmed="yes">
            <name>org.mvel.util.ReflectionUtil</name>
            <outbound type="class" confirmed="no">java.lang.Object</outbound>
            <feature confirmed="yes">
                <name>org.mvel.util.ReflectionUtil.ReflectionUtil()</name>
                <outbound type="feature" confirmed="no">java.lang.Object.Object()</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.util.ReflectionUtil.getAllFields(java.lang.Class)</name>
                <outbound type="class" confirmed="no">java.lang.Class</outbound>
                <outbound type="feature" confirmed="no">java.lang.Class.getFields()</outbound>
                <outbound type="class" confirmed="no">java.lang.Object</outbound>
                <outbound type="class" confirmed="no">java.lang.reflect.Field</outbound>
                <outbound type="feature" confirmed="no">java.util.HashSet.HashSet(int, float)</outbound>
                <outbound type="class" confirmed="no">java.util.Set</outbound>
                <outbound type="feature" confirmed="no">java.util.Set.add(java.lang.Object)</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.util.ReflectionUtil.getGetter(java.lang.String)</name>
                <outbound type="class" confirmed="no">java.lang.Object</outbound>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="feature" confirmed="no">java.lang.String.String(char[])</outbound>
                <outbound type="feature" confirmed="no">java.lang.String.toCharArray()</outbound>
                <outbound type="feature" confirmed="no">java.lang.System.arraycopy(java.lang.Object, int, java.lang.Object, int, int)</outbound>
                <inbound type="feature" confirmed="yes">org.mvel.util.PropertyTools.getGetter(java.lang.Class, java.lang.String)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.util.ReflectionUtil.getIsGetter(java.lang.String)</name>
                <outbound type="class" confirmed="no">java.lang.Object</outbound>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="feature" confirmed="no">java.lang.String.String(char[])</outbound>
                <outbound type="feature" confirmed="no">java.lang.String.charAt(int)</outbound>
                <outbound type="feature" confirmed="no">java.lang.String.toCharArray()</outbound>
                <outbound type="feature" confirmed="no">java.lang.System.arraycopy(java.lang.Object, int, java.lang.Object, int, int)</outbound>
                <inbound type="feature" confirmed="yes">org.mvel.util.PropertyTools.getGetter(java.lang.Class, java.lang.String)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.util.ReflectionUtil.getParameterFromAccessor(java.lang.String)</name>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="feature" confirmed="no">java.lang.String.String(char[])</outbound>
                <outbound type="feature" confirmed="no">java.lang.String.charAt(int)</outbound>
                <outbound type="feature" confirmed="no">java.lang.String.length()</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.util.ReflectionUtil.getSetter(java.lang.String)</name>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="feature" confirmed="no">java.lang.String.String(char[])</outbound>
                <outbound type="feature" confirmed="no">java.lang.String.charAt(int)</outbound>
                <outbound type="feature" confirmed="no">java.lang.String.length()</outbound>
                <inbound type="feature" confirmed="yes">org.mvel.util.PropertyTools.getSetter(java.lang.Class, java.lang.String)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.util.ReflectionUtil.isAssignable(java.lang.Object, java.lang.Class)</name>
                <outbound type="class" confirmed="no">java.lang.Class</outbound>
                <outbound type="feature" confirmed="no">java.lang.Class.forName(java.lang.String)</outbound>
                <outbound type="feature" confirmed="no">java.lang.Class.getSuperclass()</outbound>
                <outbound type="feature" confirmed="no">java.lang.Class.isAssignableFrom(java.lang.Class)</outbound>
                <outbound type="class" confirmed="no">java.lang.ClassNotFoundException</outbound>
                <outbound type="feature" confirmed="no">java.lang.NoClassDefFoundError.NoClassDefFoundError(java.lang.String)</outbound>
                <outbound type="class" confirmed="no">java.lang.Object</outbound>
                <outbound type="feature" confirmed="no">java.lang.Object.getClass()</outbound>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="feature" confirmed="no">java.lang.Throwable.getMessage()</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.util.ReflectionUtil.parameterizeClassName(java.lang.Class)</name>
                <outbound type="class" confirmed="no">java.lang.Class</outbound>
                <outbound type="feature" confirmed="no">java.lang.Class.getName()</outbound>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="feature" confirmed="no">java.lang.String.lastIndexOf(int)</outbound>
                <outbound type="feature" confirmed="no">java.lang.String.substring(int)</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.util.ReflectionUtil.parameterizeClassName(java.lang.String)</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.util.ReflectionUtil.parameterizeClassName(java.lang.String)</name>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="feature" confirmed="no">java.lang.String.String(char[])</outbound>
                <outbound type="feature" confirmed="no">java.lang.String.charAt(int)</outbound>
                <outbound type="feature" confirmed="no">java.lang.String.toCharArray()</outbound>
                <inbound type="feature" confirmed="yes">org.mvel.util.ReflectionUtil.parameterizeClassName(java.lang.Class)</inbound>
            </feature>
        </class>
        <class confirmed="yes">
            <name>org.mvel.util.Stack</name>
            <outbound type="class" confirmed="no">java.io.Serializable</outbound>
            <outbound type="class" confirmed="no">java.lang.Object</outbound>
            <inbound type="feature" confirmed="yes">org.mvel.AbstractParser.arithmeticFunctionReduction(int)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.AbstractParser.dreduce()</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.AbstractParser.dreduce2()</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.AbstractParser.nextToken()</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.AbstractParser.reduce()</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.AbstractParser.stk</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.AbstractParser.xswap()</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.ExpressionCompiler._compile()</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.MVELInterpretedRuntime.parse()</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.MVELInterpretedRuntime.parseAndExecuteInterpreted()</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.MVELInterpretedRuntime.procBooleanOperator(int)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.MVELInterpretedRuntime.reduceRight()</inbound>
            <inbound type="class" confirmed="yes">org.mvel.util.ExecutionStack</inbound>
            <feature confirmed="yes">
                <name>org.mvel.util.Stack.add(java.lang.Object)</name>
                <outbound type="class" confirmed="no">java.lang.Object</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.util.Stack.clear()</name>
                <inbound type="feature" confirmed="yes">org.mvel.AbstractParser.reduce()</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.MVELInterpretedRuntime.procBooleanOperator(int)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.MVELRuntime.execute(boolean, org.mvel.CompiledExpression, java.lang.Object, org.mvel.integration.VariableResolverFactory)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.util.Stack.discard()</name>
                <inbound type="feature" confirmed="yes">org.mvel.MVELInterpretedRuntime.parseAndExecuteInterpreted()</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.MVELInterpretedRuntime.procBooleanOperator(int)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.util.Stack.isEmpty()</name>
                <inbound type="feature" confirmed="yes">org.mvel.ExpressionCompiler._compile()</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.MVELInterpretedRuntime.parseAndExecuteInterpreted()</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.MVELRuntime.execute(boolean, org.mvel.CompiledExpression, java.lang.Object, org.mvel.integration.VariableResolverFactory)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.util.Stack.peek()</name>
                <outbound type="class" confirmed="no">java.lang.Object</outbound>
                <inbound type="feature" confirmed="yes">org.mvel.AbstractParser.arithmeticFunctionReduction(int)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.AbstractParser.nextToken()</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.MVELInterpretedRuntime.procBooleanOperator(int)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.MVELRuntime.execute(boolean, org.mvel.CompiledExpression, java.lang.Object, org.mvel.integration.VariableResolverFactory)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.util.Stack.peek2()</name>
                <outbound type="class" confirmed="no">java.lang.Object</outbound>
                <inbound type="feature" confirmed="yes">org.mvel.AbstractParser.arithmeticFunctionReduction(int)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.util.Stack.pop()</name>
                <outbound type="class" confirmed="no">java.lang.Object</outbound>
                <inbound type="feature" confirmed="yes">org.mvel.AbstractParser.nextToken()</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.AbstractParser.reduce()</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.AbstractParser.xswap()</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.ExpressionCompiler._compile()</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.MVELInterpretedRuntime.parse()</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.MVELInterpretedRuntime.procBooleanOperator(int)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.MVELInterpretedRuntime.reduceRight()</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.MVELRuntime.execute(boolean, org.mvel.CompiledExpression, java.lang.Object, org.mvel.integration.VariableResolverFactory)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.util.Stack.push(java.lang.Object)</name>
                <outbound type="class" confirmed="no">java.lang.Object</outbound>
                <inbound type="feature" confirmed="yes">org.mvel.AbstractParser.arithmeticFunctionReduction(int)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.AbstractParser.dreduce2()</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.AbstractParser.reduce()</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.MVELInterpretedRuntime.parseAndExecuteInterpreted()</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.MVELInterpretedRuntime.reduceRight()</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.MVELRuntime.execute(boolean, org.mvel.CompiledExpression, java.lang.Object, org.mvel.integration.VariableResolverFactory)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.util.Stack.push(java.lang.Object, java.lang.Object)</name>
                <outbound type="class" confirmed="no">java.lang.Object</outbound>
                <inbound type="feature" confirmed="yes">org.mvel.AbstractParser.arithmeticFunctionReduction(int)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.AbstractParser.dreduce()</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.AbstractParser.xswap()</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.ExpressionCompiler._compile()</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.MVELInterpretedRuntime.parseAndExecuteInterpreted()</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.MVELRuntime.execute(boolean, org.mvel.CompiledExpression, java.lang.Object, org.mvel.integration.VariableResolverFactory)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.util.Stack.push(java.lang.Object, java.lang.Object, java.lang.Object)</name>
                <outbound type="class" confirmed="no">java.lang.Object</outbound>
                <inbound type="feature" confirmed="yes">org.mvel.AbstractParser.reduce()</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.ExpressionCompiler._compile()</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.util.Stack.pushAndPeek(java.lang.Object)</name>
                <outbound type="class" confirmed="no">java.lang.Object</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.util.Stack.showStack()</name>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.util.Stack.size()</name>
                <inbound type="feature" confirmed="yes">org.mvel.AbstractParser.arithmeticFunctionReduction(int)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.MVELRuntime.execute(boolean, org.mvel.CompiledExpression, java.lang.Object, org.mvel.integration.VariableResolverFactory)</inbound>
            </feature>
        </class>
        <class confirmed="yes">
            <name>org.mvel.util.StackElement</name>
            <outbound type="class" confirmed="no">java.io.Serializable</outbound>
            <outbound type="class" confirmed="no">java.lang.Object</outbound>
            <inbound type="feature" confirmed="yes">org.mvel.util.ExecutionStack.add(java.lang.Object)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.util.ExecutionStack.clear()</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.util.ExecutionStack.discard()</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.util.ExecutionStack.element</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.util.ExecutionStack.peek()</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.util.ExecutionStack.peek2()</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.util.ExecutionStack.pop()</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.util.ExecutionStack.push(java.lang.Object)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.util.ExecutionStack.push(java.lang.Object, java.lang.Object)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.util.ExecutionStack.push(java.lang.Object, java.lang.Object, java.lang.Object)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.util.ExecutionStack.pushAndPeek(java.lang.Object)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.util.ExecutionStack.showStack()</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.util.ExecutionStack.toString()</inbound>
            <feature confirmed="yes">
                <name>org.mvel.util.StackElement.StackElement(org.mvel.util.StackElement, java.lang.Object)</name>
                <outbound type="class" confirmed="no">java.lang.Object</outbound>
                <outbound type="feature" confirmed="no">java.lang.Object.Object()</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.util.StackElement.next</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.util.StackElement.value</outbound>
                <inbound type="feature" confirmed="yes">org.mvel.util.ExecutionStack.add(java.lang.Object)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.util.ExecutionStack.push(java.lang.Object)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.util.ExecutionStack.push(java.lang.Object, java.lang.Object)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.util.ExecutionStack.push(java.lang.Object, java.lang.Object, java.lang.Object)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.util.ExecutionStack.pushAndPeek(java.lang.Object)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.util.StackElement.next</name>
                <inbound type="feature" confirmed="yes">org.mvel.util.ExecutionStack.add(java.lang.Object)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.util.ExecutionStack.discard()</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.util.ExecutionStack.peek2()</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.util.ExecutionStack.pop()</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.util.ExecutionStack.showStack()</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.util.ExecutionStack.toString()</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.util.StackElement.StackElement(org.mvel.util.StackElement, java.lang.Object)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.util.StackElement.value</name>
                <outbound type="class" confirmed="no">java.lang.Object</outbound>
                <inbound type="feature" confirmed="yes">org.mvel.util.ExecutionStack.peek()</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.util.ExecutionStack.peek2()</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.util.ExecutionStack.pop()</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.util.ExecutionStack.showStack()</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.util.ExecutionStack.toString()</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.util.StackElement.StackElement(org.mvel.util.StackElement, java.lang.Object)</inbound>
            </feature>
        </class>
        <class confirmed="yes">
            <name>org.mvel.util.StringAppender</name>
            <outbound type="class" confirmed="no">java.lang.CharSequence</outbound>
            <outbound type="class" confirmed="no">java.lang.Object</outbound>
            <inbound type="feature" confirmed="yes">org.mvel.ASTArrayList.showNodeChain()</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.AbstractParser.reduce()</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.MVELRuntime.execute(boolean, org.mvel.CompiledExpression, java.lang.Object, org.mvel.integration.VariableResolverFactory)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.MVELTemplateRegistry.registerTemplate(java.io.Reader)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.MacroProcessor.parse(char[])</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.PropertyAccessor.getMethod(java.lang.Object, java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.PropertyVerifier.getMethod(java.lang.Class, java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.Soundex.soundex(java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.TemplateCompiler.indent(int)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.TemplateInterpreter.execute(java.lang.Object, java.util.Map, org.mvel.TemplateRegistry)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.TemplateInterpreter.parse(java.io.File, java.lang.Object, java.util.Map, org.mvel.TemplateRegistry)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.asm.ASMAccessorOptimizer._initJIT()</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.asm.ASMAccessorOptimizer.buildInputs()</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.asm.ASMAccessorOptimizer.buildLog</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.asm.ASMAccessorOptimizer.debug(java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.asm.ASMAccessorOptimizer.dumpAdvancedDebugging()</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.asm.ASMAccessorOptimizer.getMethod(java.lang.Object, java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.refl.ReflectiveAccessorOptimizer.getMethod(java.lang.Object, java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">org.mvel.util.ExecutionStack.toString()</inbound>
            <feature confirmed="yes">
                <name>org.mvel.util.StringAppender.DEFAULT_SIZE</name>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.util.StringAppender.StringAppender()</name>
                <outbound type="feature" confirmed="no">java.lang.Object.Object()</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.util.StringAppender.capacity</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.util.StringAppender.size</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.util.StringAppender.str</outbound>
                <inbound type="feature" confirmed="yes">org.mvel.ASTArrayList.showNodeChain()</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.MVELTemplateRegistry.registerTemplate(java.io.Reader)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.MacroProcessor.parse(char[])</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.PropertyAccessor.getMethod(java.lang.Object, java.lang.String)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.PropertyVerifier.getMethod(java.lang.Class, java.lang.String)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.Soundex.soundex(java.lang.String)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.TemplateCompiler.indent(int)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.asm.ASMAccessorOptimizer._initJIT()</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.asm.ASMAccessorOptimizer.getMethod(java.lang.Object, java.lang.String)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.refl.ReflectiveAccessorOptimizer.getMethod(java.lang.Object, java.lang.String)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.util.ExecutionStack.toString()</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.util.StringAppender.StringAppender(char)</name>
                <outbound type="feature" confirmed="no">java.lang.Object.Object()</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.util.StringAppender.capacity</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.util.StringAppender.size</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.util.StringAppender.str</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.util.StringAppender.StringAppender(char[])</name>
                <outbound type="feature" confirmed="no">java.lang.Object.Object()</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.util.StringAppender.capacity</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.util.StringAppender.size</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.util.StringAppender.str</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.util.StringAppender.StringAppender(int)</name>
                <outbound type="feature" confirmed="no">java.lang.Object.Object()</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.util.StringAppender.capacity</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.util.StringAppender.size</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.util.StringAppender.str</outbound>
                <inbound type="feature" confirmed="yes">org.mvel.TemplateInterpreter.execute(java.lang.Object, java.util.Map, org.mvel.TemplateRegistry)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.TemplateInterpreter.parse(java.io.File, java.lang.Object, java.util.Map, org.mvel.TemplateRegistry)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.util.StringAppender.StringAppender(java.lang.CharSequence)</name>
                <outbound type="class" confirmed="no">java.lang.CharSequence</outbound>
                <outbound type="feature" confirmed="no">java.lang.CharSequence.charAt(int)</outbound>
                <outbound type="feature" confirmed="no">java.lang.CharSequence.length()</outbound>
                <outbound type="feature" confirmed="no">java.lang.Object.Object()</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.util.StringAppender.capacity</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.util.StringAppender.size</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.util.StringAppender.str</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.util.StringAppender.StringAppender(java.lang.String)</name>
                <outbound type="feature" confirmed="no">java.lang.Object.Object()</outbound>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="feature" confirmed="no">java.lang.String.toCharArray()</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.util.StringAppender.capacity</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.util.StringAppender.size</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.util.StringAppender.str</outbound>
                <inbound type="feature" confirmed="yes">org.mvel.AbstractParser.reduce()</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.MVELRuntime.execute(boolean, org.mvel.CompiledExpression, java.lang.Object, org.mvel.integration.VariableResolverFactory)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.asm.ASMAccessorOptimizer.buildInputs()</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.util.StringAppender.append(char)</name>
                <outbound type="feature" confirmed="yes">org.mvel.util.StringAppender.capacity</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.util.StringAppender.grow(int)</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.util.StringAppender.size</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.util.StringAppender.str</outbound>
                <inbound type="feature" confirmed="yes">org.mvel.MVELTemplateRegistry.registerTemplate(java.io.Reader)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.MacroProcessor.parse(char[])</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.Soundex.soundex(java.lang.String)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.TemplateInterpreter.parse(java.io.File, java.lang.Object, java.util.Map, org.mvel.TemplateRegistry)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.util.StringAppender.append(char[])</name>
                <outbound type="feature" confirmed="yes">org.mvel.util.StringAppender.capacity</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.util.StringAppender.grow(int)</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.util.StringAppender.size</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.util.StringAppender.str</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.util.StringAppender.append(java.lang.CharSequence)</name>
                <outbound type="class" confirmed="no">java.lang.CharSequence</outbound>
                <outbound type="feature" confirmed="no">java.lang.CharSequence.charAt(int)</outbound>
                <outbound type="feature" confirmed="no">java.lang.CharSequence.length()</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.util.StringAppender.capacity</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.util.StringAppender.grow(int)</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.util.StringAppender.size</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.util.StringAppender.str</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.util.StringAppender.append(java.lang.Object)</name>
                <outbound type="class" confirmed="no">java.lang.Object</outbound>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="feature" confirmed="no">java.lang.String.valueOf(java.lang.Object)</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.util.StringAppender.append(java.lang.String)</outbound>
                <inbound type="feature" confirmed="yes">org.mvel.TemplateInterpreter.execute(java.lang.Object, java.util.Map, org.mvel.TemplateRegistry)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.util.StringAppender.append(java.lang.String)</name>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="feature" confirmed="no">java.lang.String.getChars(int, int, char[], int)</outbound>
                <outbound type="feature" confirmed="no">java.lang.String.length()</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.util.StringAppender.capacity</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.util.StringAppender.grow(int)</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.util.StringAppender.size</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.util.StringAppender.str</outbound>
                <inbound type="feature" confirmed="yes">org.mvel.ASTArrayList.showNodeChain()</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.AbstractParser.reduce()</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.MVELRuntime.execute(boolean, org.mvel.CompiledExpression, java.lang.Object, org.mvel.integration.VariableResolverFactory)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.MacroProcessor.parse(char[])</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.PropertyAccessor.getMethod(java.lang.Object, java.lang.String)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.PropertyVerifier.getMethod(java.lang.Class, java.lang.String)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.TemplateCompiler.indent(int)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.TemplateInterpreter.execute(java.lang.Object, java.util.Map, org.mvel.TemplateRegistry)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.asm.ASMAccessorOptimizer.buildInputs()</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.asm.ASMAccessorOptimizer.debug(java.lang.String)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.asm.ASMAccessorOptimizer.getMethod(java.lang.Object, java.lang.String)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.refl.ReflectiveAccessorOptimizer.getMethod(java.lang.Object, java.lang.String)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.util.ExecutionStack.toString()</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.util.StringAppender.append(java.lang.Object)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.util.StringAppender.capacity</name>
                <inbound type="feature" confirmed="yes">org.mvel.util.StringAppender.StringAppender()</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.util.StringAppender.StringAppender(char)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.util.StringAppender.StringAppender(char[])</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.util.StringAppender.StringAppender(int)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.util.StringAppender.StringAppender(java.lang.CharSequence)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.util.StringAppender.StringAppender(java.lang.String)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.util.StringAppender.append(char)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.util.StringAppender.append(char[])</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.util.StringAppender.append(java.lang.CharSequence)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.util.StringAppender.append(java.lang.String)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.util.StringAppender.grow(int)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.util.StringAppender.toString()</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.util.StringAppender.charAt(int)</name>
                <outbound type="feature" confirmed="yes">org.mvel.util.StringAppender.str</outbound>
                <inbound type="feature" confirmed="yes">org.mvel.MVELTemplateRegistry.registerTemplate(java.io.Reader)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.util.StringAppender.getChars(int, int)</name>
                <outbound type="class" confirmed="no">java.lang.Object</outbound>
                <outbound type="feature" confirmed="no">java.lang.System.arraycopy(java.lang.Object, int, java.lang.Object, int, int)</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.util.StringAppender.str</outbound>
                <inbound type="feature" confirmed="yes">org.mvel.MVELTemplateRegistry.registerTemplate(java.io.Reader)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.util.StringAppender.getChars(int, int, char[], int)</name>
                <outbound type="feature" confirmed="yes">org.mvel.util.StringAppender.str</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.util.StringAppender.grow(int)</name>
                <outbound type="class" confirmed="no">java.lang.Object</outbound>
                <outbound type="feature" confirmed="no">java.lang.System.arraycopy(java.lang.Object, int, java.lang.Object, int, int)</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.util.StringAppender.capacity</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.util.StringAppender.size</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.util.StringAppender.str</outbound>
                <inbound type="feature" confirmed="yes">org.mvel.util.StringAppender.append(char)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.util.StringAppender.append(char[])</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.util.StringAppender.append(java.lang.CharSequence)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.util.StringAppender.append(java.lang.String)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.util.StringAppender.length()</name>
                <outbound type="feature" confirmed="yes">org.mvel.util.StringAppender.size</outbound>
                <inbound type="feature" confirmed="yes">org.mvel.MVELTemplateRegistry.registerTemplate(java.io.Reader)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.Soundex.soundex(java.lang.String)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.util.StringAppender.reset()</name>
                <outbound type="feature" confirmed="yes">org.mvel.util.StringAppender.size</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.util.StringAppender.size</name>
                <inbound type="feature" confirmed="yes">org.mvel.util.StringAppender.StringAppender()</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.util.StringAppender.StringAppender(char)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.util.StringAppender.StringAppender(char[])</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.util.StringAppender.StringAppender(int)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.util.StringAppender.StringAppender(java.lang.CharSequence)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.util.StringAppender.StringAppender(java.lang.String)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.util.StringAppender.append(char)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.util.StringAppender.append(char[])</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.util.StringAppender.append(java.lang.CharSequence)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.util.StringAppender.append(java.lang.String)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.util.StringAppender.grow(int)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.util.StringAppender.length()</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.util.StringAppender.reset()</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.util.StringAppender.toChars()</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.util.StringAppender.toString()</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.util.StringAppender.str</name>
                <inbound type="feature" confirmed="yes">org.mvel.util.StringAppender.StringAppender()</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.util.StringAppender.StringAppender(char)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.util.StringAppender.StringAppender(char[])</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.util.StringAppender.StringAppender(int)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.util.StringAppender.StringAppender(java.lang.CharSequence)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.util.StringAppender.StringAppender(java.lang.String)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.util.StringAppender.append(char)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.util.StringAppender.append(char[])</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.util.StringAppender.append(java.lang.CharSequence)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.util.StringAppender.append(java.lang.String)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.util.StringAppender.charAt(int)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.util.StringAppender.getChars(int, int)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.util.StringAppender.getChars(int, int, char[], int)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.util.StringAppender.grow(int)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.util.StringAppender.subSequence(int, int)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.util.StringAppender.toChars()</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.util.StringAppender.toString()</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.util.StringAppender.subSequence(int, int)</name>
                <outbound type="class" confirmed="no">java.lang.CharSequence</outbound>
                <outbound type="feature" confirmed="no">java.lang.String.String(char[], int, int)</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.util.StringAppender.str</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.util.StringAppender.toChars()</name>
                <outbound type="class" confirmed="no">java.lang.Object</outbound>
                <outbound type="feature" confirmed="no">java.lang.System.arraycopy(java.lang.Object, int, java.lang.Object, int, int)</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.util.StringAppender.size</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.util.StringAppender.str</outbound>
                <inbound type="feature" confirmed="yes">org.mvel.MacroProcessor.parse(char[])</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.mvel.util.StringAppender.toString()</name>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="feature" confirmed="no">java.lang.String.String(char[])</outbound>
                <outbound type="feature" confirmed="no">java.lang.String.String(char[], int, int)</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.util.StringAppender.capacity</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.util.StringAppender.size</outbound>
                <outbound type="feature" confirmed="yes">org.mvel.util.StringAppender.str</outbound>
                <inbound type="feature" confirmed="yes">org.mvel.ASTArrayList.showNodeChain()</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.AbstractParser.reduce()</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.MVELRuntime.execute(boolean, org.mvel.CompiledExpression, java.lang.Object, org.mvel.integration.VariableResolverFactory)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.PropertyAccessor.getMethod(java.lang.Object, java.lang.String)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.Soundex.soundex(java.lang.String)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.TemplateCompiler.indent(int)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.TemplateInterpreter.execute(java.lang.Object, java.util.Map, org.mvel.TemplateRegistry)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.asm.ASMAccessorOptimizer.buildInputs()</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.asm.ASMAccessorOptimizer.dumpAdvancedDebugging()</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.asm.ASMAccessorOptimizer.getMethod(java.lang.Object, java.lang.String)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.optimizers.impl.refl.ReflectiveAccessorOptimizer.getMethod(java.lang.Object, java.lang.String)</inbound>
                <inbound type="feature" confirmed="yes">org.mvel.util.ExecutionStack.toString()</inbound>
            </feature>
        </class>
        <class confirmed="yes">
            <name>org.mvel.util.ThisLiteral</name>
            <outbound type="class" confirmed="no">java.lang.Object</outbound>
            <feature confirmed="yes">
                <name>org.mvel.util.ThisLiteral.ThisLiteral()</name>
                <outbound type="feature" confirmed="no">java.lang.Object.Object()</outbound>
            </feature>
        </class>
    </package>
</dependencies>
