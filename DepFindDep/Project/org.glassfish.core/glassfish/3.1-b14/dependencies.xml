<?xml version="1.0" encoding="utf-8" ?>

<!DOCTYPE dependencies SYSTEM "http://depfind.sourceforge.net/dtd/dependencies.dtd">

<dependencies>
    <package confirmed="yes">
        <name>com.sun.enterprise.glassfish.bootstrap</name>
        <class confirmed="yes">
            <name>com.sun.enterprise.glassfish.bootstrap.ASEmbedded</name>
            <outbound type="class" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainNonOSGi</outbound>
            <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASEmbedded$EmbeddedMain.ASEmbedded$EmbeddedMain(com.sun.enterprise.glassfish.bootstrap.ASEmbedded)</inbound>
            <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASEmbedded$EmbeddedMain.createHabitat(com.sun.enterprise.module.ModulesRegistry, com.sun.enterprise.module.bootstrap.StartupContext)</inbound>
            <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASEmbedded$EmbeddedMain.createInhabitantsParser(org.jvnet.hk2.component.Habitat)</inbound>
            <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASEmbedded$EmbeddedMain.this$0</inbound>
            <feature confirmed="yes">
                <name>com.sun.enterprise.glassfish.bootstrap.ASEmbedded.ASEmbedded()</name>
                <outbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASEmbedded.habitat</outbound>
                <outbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainNonOSGi.ASMainNonOSGi()</outbound>
                <outbound type="class" confirmed="no">org.jvnet.hk2.component.Habitat</outbound>
            </feature>
            <feature confirmed="yes">
                <name>com.sun.enterprise.glassfish.bootstrap.ASEmbedded.access$000(com.sun.enterprise.glassfish.bootstrap.ASEmbedded)</name>
                <outbound type="feature" confirmed="no">com.sun.enterprise.glassfish.bootstrap.ASEmbedded.logger</outbound>
                <outbound type="class" confirmed="no">java.util.logging.Logger</outbound>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASEmbedded$EmbeddedMain.createHabitat(com.sun.enterprise.module.ModulesRegistry, com.sun.enterprise.module.bootstrap.StartupContext)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>com.sun.enterprise.glassfish.bootstrap.ASEmbedded.createCache(java.io.File)</name>
                <outbound type="class" confirmed="no">java.io.File</outbound>
                <outbound type="class" confirmed="no">java.io.IOException</outbound>
            </feature>
            <feature confirmed="no">
                <name>com.sun.enterprise.glassfish.bootstrap.ASEmbedded.getContext(java.lang.Class)</name>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASEmbedded.start(java.util.Properties)</inbound>
            </feature>
            <feature confirmed="no">
                <name>com.sun.enterprise.glassfish.bootstrap.ASEmbedded.getContexts()</name>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASEmbedded$EmbeddedMain.createHabitat(com.sun.enterprise.module.ModulesRegistry, com.sun.enterprise.module.bootstrap.StartupContext)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>com.sun.enterprise.glassfish.bootstrap.ASEmbedded.getName()</name>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASEmbedded$EmbeddedMain.createInhabitantsParser(org.jvnet.hk2.component.Habitat)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>com.sun.enterprise.glassfish.bootstrap.ASEmbedded.getStartedService(java.lang.Class)</name>
                <outbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASEmbedded.habitat</outbound>
                <outbound type="class" confirmed="no">java.lang.Class</outbound>
                <outbound type="class" confirmed="no">java.lang.Object</outbound>
                <outbound type="class" confirmed="no">org.jvnet.hk2.component.Habitat</outbound>
                <outbound type="feature" confirmed="no">org.jvnet.hk2.component.Habitat.getComponent(java.lang.Class)</outbound>
            </feature>
            <feature confirmed="yes">
                <name>com.sun.enterprise.glassfish.bootstrap.ASEmbedded.habitat</name>
                <outbound type="class" confirmed="no">org.jvnet.hk2.component.Habitat</outbound>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASEmbedded$EmbeddedMain.createHabitat(com.sun.enterprise.module.ModulesRegistry, com.sun.enterprise.module.bootstrap.StartupContext)</inbound>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASEmbedded.ASEmbedded()</inbound>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASEmbedded.getStartedService(java.lang.Class)</inbound>
            </feature>
            <feature confirmed="no">
                <name>com.sun.enterprise.glassfish.bootstrap.ASEmbedded.logger</name>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASEmbedded.access$000(com.sun.enterprise.glassfish.bootstrap.ASEmbedded)</inbound>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASEmbedded.start(java.util.Properties)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>com.sun.enterprise.glassfish.bootstrap.ASEmbedded.start(java.util.Properties)</name>
                <outbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASEmbedded$EmbeddedMain.ASEmbedded$EmbeddedMain(com.sun.enterprise.glassfish.bootstrap.ASEmbedded)</outbound>
                <outbound type="feature" confirmed="no">com.sun.enterprise.glassfish.bootstrap.ASEmbedded.getContext(java.lang.Class)</outbound>
                <outbound type="feature" confirmed="no">com.sun.enterprise.glassfish.bootstrap.ASEmbedded.logger</outbound>
                <outbound type="class" confirmed="no">com.sun.enterprise.module.ModulesRegistry</outbound>
                <outbound type="feature" confirmed="no">com.sun.enterprise.module.ModulesRegistry.setParentClassLoader(java.lang.ClassLoader)</outbound>
                <outbound type="class" confirmed="no">com.sun.enterprise.module.bootstrap.BootException</outbound>
                <outbound type="feature" confirmed="no">com.sun.enterprise.module.bootstrap.BootException.getMessage()</outbound>
                <outbound type="feature" confirmed="no">com.sun.enterprise.module.bootstrap.Main.launch(com.sun.enterprise.module.ModulesRegistry, com.sun.enterprise.module.bootstrap.StartupContext)</outbound>
                <outbound type="class" confirmed="no">com.sun.enterprise.module.bootstrap.StartupContext</outbound>
                <outbound type="feature" confirmed="no">com.sun.enterprise.module.single.SingleModulesRegistry.SingleModulesRegistry(java.lang.ClassLoader)</outbound>
                <outbound type="class" confirmed="no">java.lang.Class</outbound>
                <outbound type="feature" confirmed="no">java.lang.Class.getClassLoader()</outbound>
                <outbound type="class" confirmed="no">java.lang.ClassLoader</outbound>
                <outbound type="class" confirmed="no">java.lang.Exception</outbound>
                <outbound type="class" confirmed="no">java.lang.Object</outbound>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="class" confirmed="no">java.lang.Throwable</outbound>
                <outbound type="class" confirmed="no">java.util.Properties</outbound>
                <outbound type="class" confirmed="no">java.util.logging.Level</outbound>
                <outbound type="feature" confirmed="no">java.util.logging.Level.SEVERE</outbound>
                <outbound type="class" confirmed="no">java.util.logging.Logger</outbound>
                <outbound type="feature" confirmed="no">java.util.logging.Logger.getAnonymousLogger()</outbound>
                <outbound type="feature" confirmed="no">java.util.logging.Logger.log(java.util.logging.Level, java.lang.String, java.lang.Throwable)</outbound>
                <outbound type="class" confirmed="no">org.jvnet.hk2.component.Habitat</outbound>
            </feature>
        </class>
        <class confirmed="yes">
            <name>com.sun.enterprise.glassfish.bootstrap.ASEmbedded$EmbeddedMain</name>
            <outbound type="class" confirmed="no">com.sun.enterprise.module.bootstrap.Main</outbound>
            <feature confirmed="yes">
                <name>com.sun.enterprise.glassfish.bootstrap.ASEmbedded$EmbeddedMain.ASEmbedded$EmbeddedMain(com.sun.enterprise.glassfish.bootstrap.ASEmbedded)</name>
                <outbound type="class" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASEmbedded</outbound>
                <outbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASEmbedded$EmbeddedMain.this$0</outbound>
                <outbound type="feature" confirmed="no">com.sun.enterprise.module.bootstrap.Main.Main()</outbound>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASEmbedded.start(java.util.Properties)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>com.sun.enterprise.glassfish.bootstrap.ASEmbedded$EmbeddedMain.createHabitat(com.sun.enterprise.module.ModulesRegistry, com.sun.enterprise.module.bootstrap.StartupContext)</name>
                <outbound type="class" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASEmbedded</outbound>
                <outbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASEmbedded$EmbeddedMain.createInhabitantsParser(org.jvnet.hk2.component.Habitat)</outbound>
                <outbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASEmbedded$EmbeddedMain.this$0</outbound>
                <outbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASEmbedded.access$000(com.sun.enterprise.glassfish.bootstrap.ASEmbedded)</outbound>
                <outbound type="feature" confirmed="no">com.sun.enterprise.glassfish.bootstrap.ASEmbedded.getContexts()</outbound>
                <outbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASEmbedded.habitat</outbound>
                <outbound type="class" confirmed="no">com.sun.enterprise.module.ModulesRegistry</outbound>
                <outbound type="feature" confirmed="no">com.sun.enterprise.module.ModulesRegistry.createHabitat(java.lang.String, com.sun.hk2.component.InhabitantsParser)</outbound>
                <outbound type="feature" confirmed="no">com.sun.enterprise.module.ModulesRegistry.newHabitat()</outbound>
                <outbound type="class" confirmed="no">com.sun.enterprise.module.bootstrap.BootException</outbound>
                <outbound type="class" confirmed="no">com.sun.enterprise.module.bootstrap.StartupContext</outbound>
                <outbound type="feature" confirmed="no">com.sun.hk2.component.ExistingSingletonInhabitant.ExistingSingletonInhabitant(java.lang.Class, java.lang.Object)</outbound>
                <outbound type="class" confirmed="no">com.sun.hk2.component.InhabitantsParser</outbound>
                <outbound type="class" confirmed="no">java.lang.Class</outbound>
                <outbound type="class" confirmed="no">java.lang.Object</outbound>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="class" confirmed="no">java.util.Iterator</outbound>
                <outbound type="feature" confirmed="no">java.util.Iterator.hasNext()</outbound>
                <outbound type="feature" confirmed="no">java.util.Iterator.next()</outbound>
                <outbound type="class" confirmed="no">java.util.List</outbound>
                <outbound type="feature" confirmed="no">java.util.List.iterator()</outbound>
                <outbound type="class" confirmed="no">java.util.logging.Logger</outbound>
                <outbound type="class" confirmed="no">org.jvnet.hk2.component.Habitat</outbound>
                <outbound type="feature" confirmed="no">org.jvnet.hk2.component.Habitat.add(org.jvnet.hk2.component.Inhabitant)</outbound>
                <outbound type="class" confirmed="no">org.jvnet.hk2.component.Inhabitant</outbound>
                <outbound type="feature" confirmed="no">org.jvnet.hk2.component.Inhabitants.create(java.lang.Object)</outbound>
            </feature>
            <feature confirmed="yes">
                <name>com.sun.enterprise.glassfish.bootstrap.ASEmbedded$EmbeddedMain.createInhabitantsParser(org.jvnet.hk2.component.Habitat)</name>
                <outbound type="class" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASEmbedded</outbound>
                <outbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASEmbedded$EmbeddedMain.this$0</outbound>
                <outbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASEmbedded.getName()</outbound>
                <outbound type="class" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMain</outbound>
                <outbound type="feature" confirmed="no">com.sun.enterprise.module.bootstrap.Main.createInhabitantsParser(org.jvnet.hk2.component.Habitat)</outbound>
                <outbound type="class" confirmed="no">com.sun.hk2.component.InhabitantsParser</outbound>
                <outbound type="class" confirmed="no">com.sun.hk2.component.InhabitantsParserDecorator</outbound>
                <outbound type="feature" confirmed="no">com.sun.hk2.component.InhabitantsParserDecorator.decorate(com.sun.hk2.component.InhabitantsParser)</outbound>
                <outbound type="feature" confirmed="no">com.sun.hk2.component.InhabitantsParserDecorator.getName()</outbound>
                <outbound type="class" confirmed="no">java.lang.Class</outbound>
                <outbound type="feature" confirmed="no">java.lang.Class.getClassLoader()</outbound>
                <outbound type="class" confirmed="no">java.lang.ClassLoader</outbound>
                <outbound type="class" confirmed="no">java.lang.Object</outbound>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="feature" confirmed="no">java.lang.String.equalsIgnoreCase(java.lang.String)</outbound>
                <outbound type="class" confirmed="no">java.util.Iterator</outbound>
                <outbound type="feature" confirmed="no">java.util.Iterator.hasNext()</outbound>
                <outbound type="feature" confirmed="no">java.util.Iterator.next()</outbound>
                <outbound type="class" confirmed="no">java.util.ServiceLoader</outbound>
                <outbound type="feature" confirmed="no">java.util.ServiceLoader.iterator()</outbound>
                <outbound type="feature" confirmed="no">java.util.ServiceLoader.load(java.lang.Class, java.lang.ClassLoader)</outbound>
                <outbound type="class" confirmed="no">org.jvnet.hk2.component.Habitat</outbound>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASEmbedded$EmbeddedMain.createHabitat(com.sun.enterprise.module.ModulesRegistry, com.sun.enterprise.module.bootstrap.StartupContext)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>com.sun.enterprise.glassfish.bootstrap.ASEmbedded$EmbeddedMain.this$0</name>
                <outbound type="class" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASEmbedded</outbound>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASEmbedded$EmbeddedMain.ASEmbedded$EmbeddedMain(com.sun.enterprise.glassfish.bootstrap.ASEmbedded)</inbound>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASEmbedded$EmbeddedMain.createHabitat(com.sun.enterprise.module.ModulesRegistry, com.sun.enterprise.module.bootstrap.StartupContext)</inbound>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASEmbedded$EmbeddedMain.createInhabitantsParser(org.jvnet.hk2.component.Habitat)</inbound>
            </feature>
        </class>
        <class confirmed="yes">
            <name>com.sun.enterprise.glassfish.bootstrap.ASMain</name>
            <outbound type="class" confirmed="no">java.lang.Object</outbound>
            <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASEmbedded$EmbeddedMain.createInhabitantsParser(org.jvnet.hk2.component.Habitat)</inbound>
            <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainHelper.addRawStartupInfo(java.lang.String[], java.util.Properties)</inbound>
            <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainHelper.findBootstrapFile()</inbound>
            <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainHelper.getMain(java.lang.String)</inbound>
            <feature confirmed="yes">
                <name>com.sun.enterprise.glassfish.bootstrap.ASMain.ASMain()</name>
                <outbound type="feature" confirmed="no">java.lang.Object.Object()</outbound>
            </feature>
            <feature confirmed="yes">
                <name>com.sun.enterprise.glassfish.bootstrap.ASMain.logger</name>
                <outbound type="class" confirmed="no">java.util.logging.Logger</outbound>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMain.main(java.lang.String[])</inbound>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMain.static {}</inbound>
            </feature>
            <feature confirmed="yes">
                <name>com.sun.enterprise.glassfish.bootstrap.ASMain.main(java.lang.String[])</name>
                <outbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMain.logger</outbound>
                <outbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainHelper.buildStartupContext(java.lang.String, java.io.File, java.io.File, java.lang.String[])</outbound>
                <outbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainHelper.checkJdkVersion()</outbound>
                <outbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainHelper.findInstallRoot()</outbound>
                <outbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainHelper.findInstanceRoot(java.io.File, java.lang.String[])</outbound>
                <outbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainHelper.getMain(java.lang.String)</outbound>
                <outbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainHelper.isOSGiPlatform(java.lang.String)</outbound>
                <outbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainHelper.setSystemProperties(java.util.Properties)</outbound>
                <outbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainHelper.whichPlatform()</outbound>
                <outbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.GlassFishMain.main(java.lang.String[])</outbound>
                <outbound type="class" confirmed="no">com.sun.enterprise.module.bootstrap.PlatformMain</outbound>
                <outbound type="feature" confirmed="no">com.sun.enterprise.module.bootstrap.PlatformMain.setLogger(java.util.logging.Logger)</outbound>
                <outbound type="feature" confirmed="no">com.sun.enterprise.module.bootstrap.PlatformMain.start(java.util.Properties)</outbound>
                <outbound type="class" confirmed="no">java.io.File</outbound>
                <outbound type="class" confirmed="no">java.lang.Exception</outbound>
                <outbound type="feature" confirmed="no">java.lang.Exception.getMessage()</outbound>
                <outbound type="class" confirmed="no">java.lang.Object</outbound>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="class" confirmed="no">java.lang.StringBuilder</outbound>
                <outbound type="feature" confirmed="no">java.lang.StringBuilder.StringBuilder()</outbound>
                <outbound type="feature" confirmed="no">java.lang.StringBuilder.append(java.lang.Object)</outbound>
                <outbound type="feature" confirmed="no">java.lang.StringBuilder.append(java.lang.String)</outbound>
                <outbound type="feature" confirmed="no">java.lang.StringBuilder.toString()</outbound>
                <outbound type="class" confirmed="no">java.lang.Throwable</outbound>
                <outbound type="class" confirmed="no">java.util.Properties</outbound>
                <outbound type="class" confirmed="no">java.util.logging.Level</outbound>
                <outbound type="feature" confirmed="no">java.util.logging.Level.SEVERE</outbound>
                <outbound type="class" confirmed="no">java.util.logging.Logger</outbound>
                <outbound type="feature" confirmed="no">java.util.logging.Logger.fine(java.lang.String)</outbound>
                <outbound type="feature" confirmed="no">java.util.logging.Logger.info(java.lang.String)</outbound>
                <outbound type="feature" confirmed="no">java.util.logging.Logger.log(java.util.logging.Level, java.lang.String, java.lang.Throwable)</outbound>
                <outbound type="feature" confirmed="no">java.util.logging.Logger.severe(java.lang.String)</outbound>
            </feature>
            <feature confirmed="yes">
                <name>com.sun.enterprise.glassfish.bootstrap.ASMain.static {}</name>
                <outbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMain.logger</outbound>
                <outbound type="class" confirmed="no">java.util.logging.Logger</outbound>
                <outbound type="feature" confirmed="no">java.util.logging.Logger.getAnonymousLogger()</outbound>
            </feature>
        </class>
        <class confirmed="yes">
            <name>com.sun.enterprise.glassfish.bootstrap.ASMainEquinox</name>
            <outbound type="class" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainOSGi</outbound>
            <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainEquinox$1.ASMainEquinox$1(com.sun.enterprise.glassfish.bootstrap.ASMainEquinox, java.lang.reflect.Method, java.lang.String[])</inbound>
            <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainEquinox$1.this$0</inbound>
            <feature confirmed="yes">
                <name>com.sun.enterprise.glassfish.bootstrap.ASMainEquinox.ASMainEquinox()</name>
                <outbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainOSGi.ASMainOSGi()</outbound>
            </feature>
            <feature confirmed="yes">
                <name>com.sun.enterprise.glassfish.bootstrap.ASMainEquinox.addFrameworkJars(com.sun.enterprise.glassfish.bootstrap.ClassPathBuilder)</name>
                <outbound type="feature" confirmed="no">com.sun.enterprise.glassfish.bootstrap.ASMainEquinox.fwDir</outbound>
                <outbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainEquinox.pluginsDir</outbound>
                <outbound type="class" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ClassPathBuilder</outbound>
                <outbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ClassPathBuilder.addGlob(java.io.File, java.lang.String[])</outbound>
                <outbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ClassPathBuilder.addJarFolder(java.io.File, java.lang.String[])</outbound>
                <outbound type="class" confirmed="no">java.io.File</outbound>
                <outbound type="class" confirmed="no">java.io.IOException</outbound>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
            </feature>
            <feature confirmed="no">
                <name>com.sun.enterprise.glassfish.bootstrap.ASMainEquinox.fwDir</name>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainEquinox.addFrameworkJars(com.sun.enterprise.glassfish.bootstrap.ClassPathBuilder)</inbound>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainEquinox.getSettingsFile()</inbound>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainEquinox.setFwDir()</inbound>
            </feature>
            <feature confirmed="no">
                <name>com.sun.enterprise.glassfish.bootstrap.ASMainEquinox.getCacheDir()</name>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainEquinox.setUpCache()</inbound>
            </feature>
            <feature confirmed="yes">
                <name>com.sun.enterprise.glassfish.bootstrap.ASMainEquinox.getFWMainClassName()</name>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainEquinox.launchOSGiFW()</inbound>
            </feature>
            <feature confirmed="yes">
                <name>com.sun.enterprise.glassfish.bootstrap.ASMainEquinox.getName()</name>
                <outbound type="class" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.Constants$Platform</outbound>
                <outbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.Constants$Platform.Equinox</outbound>
                <outbound type="feature" confirmed="no">com.sun.enterprise.glassfish.bootstrap.Constants$Platform.toString()</outbound>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
            </feature>
            <feature confirmed="yes">
                <name>com.sun.enterprise.glassfish.bootstrap.ASMainEquinox.getPreferedCacheDir()</name>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
            </feature>
            <feature confirmed="yes">
                <name>com.sun.enterprise.glassfish.bootstrap.ASMainEquinox.getSettingsFile()</name>
                <outbound type="feature" confirmed="no">com.sun.enterprise.glassfish.bootstrap.ASMainEquinox.fwDir</outbound>
                <outbound type="class" confirmed="no">java.io.File</outbound>
                <outbound type="feature" confirmed="no">java.io.File.File(java.io.File, java.lang.String)</outbound>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainEquinox.setUpCache()</inbound>
            </feature>
            <feature confirmed="no">
                <name>com.sun.enterprise.glassfish.bootstrap.ASMainEquinox.glassfishDir</name>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainEquinox.setFwDir()</inbound>
            </feature>
            <feature confirmed="yes">
                <name>com.sun.enterprise.glassfish.bootstrap.ASMainEquinox.launchOSGiFW()</name>
                <outbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainEquinox$1.ASMainEquinox$1(com.sun.enterprise.glassfish.bootstrap.ASMainEquinox, java.lang.reflect.Method, java.lang.String[])</outbound>
                <outbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainEquinox.getFWMainClassName()</outbound>
                <outbound type="feature" confirmed="no">com.sun.enterprise.glassfish.bootstrap.ASMainEquinox.launcherCL</outbound>
                <outbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainEquinox.setUpCache()</outbound>
                <outbound type="class" confirmed="no">java.lang.Class</outbound>
                <outbound type="feature" confirmed="no">java.lang.Class.getMethod(java.lang.String, java.lang.Class[])</outbound>
                <outbound type="class" confirmed="no">java.lang.ClassLoader</outbound>
                <outbound type="feature" confirmed="no">java.lang.ClassLoader.loadClass(java.lang.String)</outbound>
                <outbound type="class" confirmed="no">java.lang.Exception</outbound>
                <outbound type="feature" confirmed="no">java.lang.Object.getClass()</outbound>
                <outbound type="class" confirmed="no">java.lang.Runnable</outbound>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="feature" confirmed="no">java.lang.Thread.Thread(java.lang.Runnable, java.lang.String)</outbound>
                <outbound type="feature" confirmed="no">java.lang.Thread.setDaemon(boolean)</outbound>
                <outbound type="feature" confirmed="no">java.lang.Thread.start()</outbound>
                <outbound type="class" confirmed="no">java.lang.reflect.Method</outbound>
            </feature>
            <feature confirmed="no">
                <name>com.sun.enterprise.glassfish.bootstrap.ASMainEquinox.launcherCL</name>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainEquinox.launchOSGiFW()</inbound>
            </feature>
            <feature confirmed="yes">
                <name>com.sun.enterprise.glassfish.bootstrap.ASMainEquinox.pluginsDir</name>
                <outbound type="class" confirmed="no">java.io.File</outbound>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainEquinox.addFrameworkJars(com.sun.enterprise.glassfish.bootstrap.ClassPathBuilder)</inbound>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainEquinox.setFwDir()</inbound>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainEquinox.static {}</inbound>
            </feature>
            <feature confirmed="yes">
                <name>com.sun.enterprise.glassfish.bootstrap.ASMainEquinox.setFwDir()</name>
                <outbound type="feature" confirmed="no">com.sun.enterprise.glassfish.bootstrap.ASMainEquinox.fwDir</outbound>
                <outbound type="feature" confirmed="no">com.sun.enterprise.glassfish.bootstrap.ASMainEquinox.glassfishDir</outbound>
                <outbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainEquinox.pluginsDir</outbound>
                <outbound type="class" confirmed="no">java.io.File</outbound>
                <outbound type="feature" confirmed="no">java.io.File.File(java.io.File, java.lang.String)</outbound>
                <outbound type="feature" confirmed="no">java.io.File.File(java.lang.String)</outbound>
                <outbound type="feature" confirmed="no">java.io.File.exists()</outbound>
                <outbound type="feature" confirmed="no">java.io.File.getAbsolutePath()</outbound>
                <outbound type="feature" confirmed="no">java.lang.RuntimeException.RuntimeException(java.lang.String)</outbound>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="class" confirmed="no">java.lang.StringBuilder</outbound>
                <outbound type="feature" confirmed="no">java.lang.StringBuilder.StringBuilder()</outbound>
                <outbound type="feature" confirmed="no">java.lang.StringBuilder.append(java.lang.String)</outbound>
                <outbound type="feature" confirmed="no">java.lang.StringBuilder.toString()</outbound>
                <outbound type="feature" confirmed="no">java.lang.System.getenv(java.lang.String)</outbound>
            </feature>
            <feature confirmed="yes">
                <name>com.sun.enterprise.glassfish.bootstrap.ASMainEquinox.setUpCache()</name>
                <outbound type="feature" confirmed="no">com.sun.enterprise.glassfish.bootstrap.ASMainEquinox.getCacheDir()</outbound>
                <outbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainEquinox.getSettingsFile()</outbound>
                <outbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.Util.copyFile(java.io.File, java.io.File)</outbound>
                <outbound type="class" confirmed="no">java.io.File</outbound>
                <outbound type="feature" confirmed="no">java.io.File.File(java.io.File, java.lang.String)</outbound>
                <outbound type="feature" confirmed="no">java.io.File.exists()</outbound>
                <outbound type="feature" confirmed="no">java.io.File.getAbsolutePath()</outbound>
                <outbound type="feature" confirmed="no">java.io.File.getCanonicalPath()</outbound>
                <outbound type="feature" confirmed="no">java.io.File.mkdirs()</outbound>
                <outbound type="class" confirmed="no">java.io.IOException</outbound>
                <outbound type="feature" confirmed="no">java.lang.RuntimeException.RuntimeException(java.lang.String)</outbound>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="class" confirmed="no">java.lang.StringBuilder</outbound>
                <outbound type="feature" confirmed="no">java.lang.StringBuilder.StringBuilder()</outbound>
                <outbound type="feature" confirmed="no">java.lang.StringBuilder.append(java.lang.String)</outbound>
                <outbound type="feature" confirmed="no">java.lang.StringBuilder.toString()</outbound>
                <outbound type="feature" confirmed="no">java.lang.System.setProperty(java.lang.String, java.lang.String)</outbound>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainEquinox.launchOSGiFW()</inbound>
            </feature>
            <feature confirmed="yes">
                <name>com.sun.enterprise.glassfish.bootstrap.ASMainEquinox.static {}</name>
                <outbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainEquinox.pluginsDir</outbound>
                <outbound type="class" confirmed="no">java.io.File</outbound>
            </feature>
        </class>
        <class confirmed="yes">
            <name>com.sun.enterprise.glassfish.bootstrap.ASMainEquinox$1</name>
            <outbound type="class" confirmed="no">java.lang.Object</outbound>
            <outbound type="class" confirmed="no">java.lang.Runnable</outbound>
            <feature confirmed="yes">
                <name>com.sun.enterprise.glassfish.bootstrap.ASMainEquinox$1.ASMainEquinox$1(com.sun.enterprise.glassfish.bootstrap.ASMainEquinox, java.lang.reflect.Method, java.lang.String[])</name>
                <outbound type="class" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainEquinox</outbound>
                <outbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainEquinox$1.this$0</outbound>
                <outbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainEquinox$1.val$args</outbound>
                <outbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainEquinox$1.val$m</outbound>
                <outbound type="feature" confirmed="no">java.lang.Object.Object()</outbound>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="class" confirmed="no">java.lang.reflect.Method</outbound>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainEquinox.launchOSGiFW()</inbound>
            </feature>
            <feature confirmed="yes">
                <name>com.sun.enterprise.glassfish.bootstrap.ASMainEquinox$1.run()</name>
                <outbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainEquinox$1.val$args</outbound>
                <outbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainEquinox$1.val$m</outbound>
                <outbound type="class" confirmed="no">java.lang.IllegalAccessException</outbound>
                <outbound type="class" confirmed="no">java.lang.Object</outbound>
                <outbound type="feature" confirmed="no">java.lang.RuntimeException.RuntimeException(java.lang.Throwable)</outbound>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="class" confirmed="no">java.lang.Throwable</outbound>
                <outbound type="class" confirmed="no">java.lang.reflect.InvocationTargetException</outbound>
                <outbound type="class" confirmed="no">java.lang.reflect.Method</outbound>
                <outbound type="feature" confirmed="no">java.lang.reflect.Method.invoke(java.lang.Object, java.lang.Object[])</outbound>
            </feature>
            <feature confirmed="yes">
                <name>com.sun.enterprise.glassfish.bootstrap.ASMainEquinox$1.this$0</name>
                <outbound type="class" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainEquinox</outbound>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainEquinox$1.ASMainEquinox$1(com.sun.enterprise.glassfish.bootstrap.ASMainEquinox, java.lang.reflect.Method, java.lang.String[])</inbound>
            </feature>
            <feature confirmed="yes">
                <name>com.sun.enterprise.glassfish.bootstrap.ASMainEquinox$1.val$args</name>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainEquinox$1.ASMainEquinox$1(com.sun.enterprise.glassfish.bootstrap.ASMainEquinox, java.lang.reflect.Method, java.lang.String[])</inbound>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainEquinox$1.run()</inbound>
            </feature>
            <feature confirmed="yes">
                <name>com.sun.enterprise.glassfish.bootstrap.ASMainEquinox$1.val$m</name>
                <outbound type="class" confirmed="no">java.lang.reflect.Method</outbound>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainEquinox$1.ASMainEquinox$1(com.sun.enterprise.glassfish.bootstrap.ASMainEquinox, java.lang.reflect.Method, java.lang.String[])</inbound>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainEquinox$1.run()</inbound>
            </feature>
        </class>
        <class confirmed="yes">
            <name>com.sun.enterprise.glassfish.bootstrap.ASMainFelix</name>
            <outbound type="class" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainOSGi</outbound>
            <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainFelix$1.ASMainFelix$1(com.sun.enterprise.glassfish.bootstrap.ASMainFelix, java.lang.reflect.Method, java.lang.String[])</inbound>
            <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainFelix$1.this$0</inbound>
            <feature confirmed="yes">
                <name>com.sun.enterprise.glassfish.bootstrap.ASMainFelix.ASMainFelix()</name>
                <outbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainOSGi.ASMainOSGi()</outbound>
            </feature>
            <feature confirmed="yes">
                <name>com.sun.enterprise.glassfish.bootstrap.ASMainFelix.CACHE_DIR</name>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
            </feature>
            <feature confirmed="yes">
                <name>com.sun.enterprise.glassfish.bootstrap.ASMainFelix.CONFIG_PROPERTIES</name>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
            </feature>
            <feature confirmed="yes">
                <name>com.sun.enterprise.glassfish.bootstrap.ASMainFelix.FELIX_HOME</name>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
            </feature>
            <feature confirmed="yes">
                <name>com.sun.enterprise.glassfish.bootstrap.ASMainFelix.GF_FELIX_HOME</name>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
            </feature>
            <feature confirmed="yes">
                <name>com.sun.enterprise.glassfish.bootstrap.ASMainFelix.SYSTEM_PROPERTIES</name>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
            </feature>
            <feature confirmed="yes">
                <name>com.sun.enterprise.glassfish.bootstrap.ASMainFelix.addFrameworkJars(com.sun.enterprise.glassfish.bootstrap.ClassPathBuilder)</name>
                <outbound type="feature" confirmed="no">com.sun.enterprise.glassfish.bootstrap.ASMainFelix.fwDir</outbound>
                <outbound type="class" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ClassPathBuilder</outbound>
                <outbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ClassPathBuilder.addJar(java.io.File)</outbound>
                <outbound type="class" confirmed="no">java.io.File</outbound>
                <outbound type="feature" confirmed="no">java.io.File.File(java.io.File, java.lang.String)</outbound>
                <outbound type="class" confirmed="no">java.io.IOException</outbound>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
            </feature>
            <feature confirmed="no">
                <name>com.sun.enterprise.glassfish.bootstrap.ASMainFelix.fwDir</name>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainFelix.addFrameworkJars(com.sun.enterprise.glassfish.bootstrap.ClassPathBuilder)</inbound>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainFelix.launchOSGiFW()</inbound>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainFelix.setFwDir()</inbound>
            </feature>
            <feature confirmed="yes">
                <name>com.sun.enterprise.glassfish.bootstrap.ASMainFelix.getConfigFileName()</name>
                <outbound type="feature" confirmed="no">com.sun.enterprise.glassfish.bootstrap.ASMainFelix.glassfishDir</outbound>
                <outbound type="class" confirmed="no">java.io.File</outbound>
                <outbound type="feature" confirmed="no">java.io.File.File(java.io.File, java.lang.String)</outbound>
                <outbound type="feature" confirmed="no">java.io.File.exists()</outbound>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainFelix.launchOSGiFW()</inbound>
            </feature>
            <feature confirmed="yes">
                <name>com.sun.enterprise.glassfish.bootstrap.ASMainFelix.getFWMainClassName()</name>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainFelix.launchOSGiFW()</inbound>
            </feature>
            <feature confirmed="yes">
                <name>com.sun.enterprise.glassfish.bootstrap.ASMainFelix.getName()</name>
                <outbound type="class" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.Constants$Platform</outbound>
                <outbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.Constants$Platform.Felix</outbound>
                <outbound type="feature" confirmed="no">com.sun.enterprise.glassfish.bootstrap.Constants$Platform.toString()</outbound>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
            </feature>
            <feature confirmed="yes">
                <name>com.sun.enterprise.glassfish.bootstrap.ASMainFelix.getPreferedCacheDir()</name>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
            </feature>
            <feature confirmed="no">
                <name>com.sun.enterprise.glassfish.bootstrap.ASMainFelix.glassfishDir</name>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainFelix.getConfigFileName()</inbound>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainFelix.setFwDir()</inbound>
            </feature>
            <feature confirmed="yes">
                <name>com.sun.enterprise.glassfish.bootstrap.ASMainFelix.launchOSGiFW()</name>
                <outbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainFelix$1.ASMainFelix$1(com.sun.enterprise.glassfish.bootstrap.ASMainFelix, java.lang.reflect.Method, java.lang.String[])</outbound>
                <outbound type="feature" confirmed="no">com.sun.enterprise.glassfish.bootstrap.ASMainFelix.fwDir</outbound>
                <outbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainFelix.getConfigFileName()</outbound>
                <outbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainFelix.getFWMainClassName()</outbound>
                <outbound type="feature" confirmed="no">com.sun.enterprise.glassfish.bootstrap.ASMainFelix.launcherCL</outbound>
                <outbound type="class" confirmed="no">java.io.File</outbound>
                <outbound type="feature" confirmed="no">java.io.File.File(java.io.File, java.lang.String)</outbound>
                <outbound type="feature" confirmed="no">java.io.File.toURI()</outbound>
                <outbound type="class" confirmed="no">java.lang.Class</outbound>
                <outbound type="feature" confirmed="no">java.lang.Class.getMethod(java.lang.String, java.lang.Class[])</outbound>
                <outbound type="class" confirmed="no">java.lang.ClassLoader</outbound>
                <outbound type="feature" confirmed="no">java.lang.ClassLoader.loadClass(java.lang.String)</outbound>
                <outbound type="class" confirmed="no">java.lang.Exception</outbound>
                <outbound type="feature" confirmed="no">java.lang.Object.getClass()</outbound>
                <outbound type="class" confirmed="no">java.lang.Runnable</outbound>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="feature" confirmed="no">java.lang.System.setProperty(java.lang.String, java.lang.String)</outbound>
                <outbound type="feature" confirmed="no">java.lang.Thread.Thread(java.lang.Runnable, java.lang.String)</outbound>
                <outbound type="feature" confirmed="no">java.lang.Thread.setDaemon(boolean)</outbound>
                <outbound type="feature" confirmed="no">java.lang.Thread.start()</outbound>
                <outbound type="class" confirmed="no">java.lang.reflect.Method</outbound>
                <outbound type="class" confirmed="no">java.net.URI</outbound>
                <outbound type="feature" confirmed="no">java.net.URI.toURL()</outbound>
                <outbound type="class" confirmed="no">java.net.URL</outbound>
                <outbound type="feature" confirmed="no">java.net.URL.toString()</outbound>
            </feature>
            <feature confirmed="no">
                <name>com.sun.enterprise.glassfish.bootstrap.ASMainFelix.launcherCL</name>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainFelix.launchOSGiFW()</inbound>
            </feature>
            <feature confirmed="yes">
                <name>com.sun.enterprise.glassfish.bootstrap.ASMainFelix.setFwDir()</name>
                <outbound type="feature" confirmed="no">com.sun.enterprise.glassfish.bootstrap.ASMainFelix.fwDir</outbound>
                <outbound type="feature" confirmed="no">com.sun.enterprise.glassfish.bootstrap.ASMainFelix.glassfishDir</outbound>
                <outbound type="class" confirmed="no">java.io.File</outbound>
                <outbound type="feature" confirmed="no">java.io.File.File(java.io.File, java.lang.String)</outbound>
                <outbound type="feature" confirmed="no">java.io.File.File(java.lang.String)</outbound>
                <outbound type="feature" confirmed="no">java.io.File.exists()</outbound>
                <outbound type="feature" confirmed="no">java.io.File.getAbsolutePath()</outbound>
                <outbound type="feature" confirmed="no">java.lang.RuntimeException.RuntimeException(java.lang.String)</outbound>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="class" confirmed="no">java.lang.StringBuilder</outbound>
                <outbound type="feature" confirmed="no">java.lang.StringBuilder.StringBuilder()</outbound>
                <outbound type="feature" confirmed="no">java.lang.StringBuilder.append(java.lang.String)</outbound>
                <outbound type="feature" confirmed="no">java.lang.StringBuilder.toString()</outbound>
                <outbound type="feature" confirmed="no">java.lang.System.getProperty(java.lang.String, java.lang.String)</outbound>
                <outbound type="feature" confirmed="no">java.lang.System.getenv(java.lang.String)</outbound>
            </feature>
        </class>
        <class confirmed="yes">
            <name>com.sun.enterprise.glassfish.bootstrap.ASMainFelix$1</name>
            <outbound type="class" confirmed="no">java.lang.Object</outbound>
            <outbound type="class" confirmed="no">java.lang.Runnable</outbound>
            <feature confirmed="yes">
                <name>com.sun.enterprise.glassfish.bootstrap.ASMainFelix$1.ASMainFelix$1(com.sun.enterprise.glassfish.bootstrap.ASMainFelix, java.lang.reflect.Method, java.lang.String[])</name>
                <outbound type="class" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainFelix</outbound>
                <outbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainFelix$1.this$0</outbound>
                <outbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainFelix$1.val$args</outbound>
                <outbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainFelix$1.val$m</outbound>
                <outbound type="feature" confirmed="no">java.lang.Object.Object()</outbound>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="class" confirmed="no">java.lang.reflect.Method</outbound>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainFelix.launchOSGiFW()</inbound>
            </feature>
            <feature confirmed="yes">
                <name>com.sun.enterprise.glassfish.bootstrap.ASMainFelix$1.run()</name>
                <outbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainFelix$1.val$args</outbound>
                <outbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainFelix$1.val$m</outbound>
                <outbound type="class" confirmed="no">java.lang.IllegalAccessException</outbound>
                <outbound type="class" confirmed="no">java.lang.Object</outbound>
                <outbound type="feature" confirmed="no">java.lang.RuntimeException.RuntimeException(java.lang.Throwable)</outbound>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="class" confirmed="no">java.lang.Throwable</outbound>
                <outbound type="class" confirmed="no">java.lang.reflect.InvocationTargetException</outbound>
                <outbound type="class" confirmed="no">java.lang.reflect.Method</outbound>
                <outbound type="feature" confirmed="no">java.lang.reflect.Method.invoke(java.lang.Object, java.lang.Object[])</outbound>
            </feature>
            <feature confirmed="yes">
                <name>com.sun.enterprise.glassfish.bootstrap.ASMainFelix$1.this$0</name>
                <outbound type="class" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainFelix</outbound>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainFelix$1.ASMainFelix$1(com.sun.enterprise.glassfish.bootstrap.ASMainFelix, java.lang.reflect.Method, java.lang.String[])</inbound>
            </feature>
            <feature confirmed="yes">
                <name>com.sun.enterprise.glassfish.bootstrap.ASMainFelix$1.val$args</name>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainFelix$1.ASMainFelix$1(com.sun.enterprise.glassfish.bootstrap.ASMainFelix, java.lang.reflect.Method, java.lang.String[])</inbound>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainFelix$1.run()</inbound>
            </feature>
            <feature confirmed="yes">
                <name>com.sun.enterprise.glassfish.bootstrap.ASMainFelix$1.val$m</name>
                <outbound type="class" confirmed="no">java.lang.reflect.Method</outbound>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainFelix$1.ASMainFelix$1(com.sun.enterprise.glassfish.bootstrap.ASMainFelix, java.lang.reflect.Method, java.lang.String[])</inbound>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainFelix$1.run()</inbound>
            </feature>
        </class>
        <class confirmed="yes">
            <name>com.sun.enterprise.glassfish.bootstrap.ASMainHelper</name>
            <outbound type="class" confirmed="no">java.lang.Object</outbound>
            <feature confirmed="yes">
                <name>com.sun.enterprise.glassfish.bootstrap.ASMainHelper.ASMainHelper()</name>
                <outbound type="feature" confirmed="no">java.lang.Object.Object()</outbound>
            </feature>
            <feature confirmed="yes">
                <name>com.sun.enterprise.glassfish.bootstrap.ASMainHelper.absolutize(java.io.File)</name>
                <outbound type="class" confirmed="no">java.io.File</outbound>
                <outbound type="feature" confirmed="no">java.io.File.getAbsoluteFile()</outbound>
                <outbound type="feature" confirmed="no">java.io.File.getCanonicalFile()</outbound>
                <outbound type="class" confirmed="no">java.lang.Exception</outbound>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainHelper.getDefaultDomainsDir(java.util.Properties)</inbound>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainHelper.verifyAndSetDomainRoot(java.io.File)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>com.sun.enterprise.glassfish.bootstrap.ASMainHelper.access$000()</name>
                <outbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainHelper.logger</outbound>
                <outbound type="class" confirmed="no">java.util.logging.Logger</outbound>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainHelper$ClassLoaderBuilder.addJDKToolsJar()</inbound>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainHelper$ClassLoaderBuilder.findDerbyClient()</inbound>
            </feature>
            <feature confirmed="yes">
                <name>com.sun.enterprise.glassfish.bootstrap.ASMainHelper.addPaths(java.io.File, java.lang.String[], java.util.List)</name>
                <outbound type="class" confirmed="no">java.io.File</outbound>
                <outbound type="feature" confirmed="no">java.io.File.getName()</outbound>
                <outbound type="feature" confirmed="no">java.io.File.listFiles()</outbound>
                <outbound type="feature" confirmed="no">java.io.File.toURI()</outbound>
                <outbound type="class" confirmed="no">java.lang.Object</outbound>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="feature" confirmed="no">java.lang.String.endsWith(java.lang.String)</outbound>
                <outbound type="feature" confirmed="no">java.lang.String.startsWith(java.lang.String)</outbound>
                <outbound type="class" confirmed="no">java.net.MalformedURLException</outbound>
                <outbound type="class" confirmed="no">java.net.URI</outbound>
                <outbound type="feature" confirmed="no">java.net.URI.toURL()</outbound>
                <outbound type="class" confirmed="no">java.net.URL</outbound>
                <outbound type="class" confirmed="no">java.util.List</outbound>
                <outbound type="feature" confirmed="no">java.util.List.add(java.lang.Object)</outbound>
            </feature>
            <feature confirmed="yes">
                <name>com.sun.enterprise.glassfish.bootstrap.ASMainHelper.addRawStartupInfo(java.lang.String[], java.util.Properties)</name>
                <outbound type="class" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMain</outbound>
                <outbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainHelper.wasStartedByCLI(java.util.Properties)</outbound>
                <outbound type="feature" confirmed="no">java.lang.Class.getName()</outbound>
                <outbound type="class" confirmed="no">java.lang.Object</outbound>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="class" confirmed="no">java.lang.StringBuilder</outbound>
                <outbound type="feature" confirmed="no">java.lang.StringBuilder.StringBuilder()</outbound>
                <outbound type="feature" confirmed="no">java.lang.StringBuilder.append(java.lang.String)</outbound>
                <outbound type="feature" confirmed="no">java.lang.StringBuilder.toString()</outbound>
                <outbound type="feature" confirmed="no">java.lang.System.getProperty(java.lang.String)</outbound>
                <outbound type="class" confirmed="no">java.util.Properties</outbound>
                <outbound type="feature" confirmed="no">java.util.Properties.put(java.lang.Object, java.lang.Object)</outbound>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainHelper.buildStartupContext(java.lang.String, java.io.File, java.io.File, java.lang.String[])</inbound>
            </feature>
            <feature confirmed="yes">
                <name>com.sun.enterprise.glassfish.bootstrap.ASMainHelper.buildStartupContext(java.lang.String, java.io.File, java.io.File, java.lang.String[])</name>
                <outbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainHelper.addRawStartupInfo(java.lang.String[], java.util.Properties)</outbound>
                <outbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainHelper.mergePlatformConfiguration(java.util.Properties)</outbound>
                <outbound type="feature" confirmed="no">com.sun.enterprise.module.bootstrap.ArgumentManager.argsToMap(java.lang.String[])</outbound>
                <outbound type="class" confirmed="no">java.io.File</outbound>
                <outbound type="feature" confirmed="no">java.io.File.getAbsolutePath()</outbound>
                <outbound type="feature" confirmed="no">java.io.File.toURI()</outbound>
                <outbound type="feature" confirmed="no">java.lang.Long.Long(long)</outbound>
                <outbound type="feature" confirmed="no">java.lang.Long.toString()</outbound>
                <outbound type="class" confirmed="no">java.lang.Object</outbound>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="feature" confirmed="no">java.lang.String.equals(java.lang.Object)</outbound>
                <outbound type="feature" confirmed="no">java.lang.System.currentTimeMillis()</outbound>
                <outbound type="class" confirmed="no">java.net.URI</outbound>
                <outbound type="feature" confirmed="no">java.net.URI.toString()</outbound>
                <outbound type="class" confirmed="no">java.util.Properties</outbound>
                <outbound type="feature" confirmed="no">java.util.Properties.getProperty(java.lang.String)</outbound>
                <outbound type="feature" confirmed="no">java.util.Properties.setProperty(java.lang.String, java.lang.String)</outbound>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMain.main(java.lang.String[])</inbound>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.GlassFishMain.main(java.lang.String[])</inbound>
            </feature>
            <feature confirmed="yes">
                <name>com.sun.enterprise.glassfish.bootstrap.ASMainHelper.checkJdkVersion()</name>
                <outbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainHelper.getMinorJdkVersion()</outbound>
                <outbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainHelper.logger</outbound>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="class" confirmed="no">java.lang.StringBuilder</outbound>
                <outbound type="feature" confirmed="no">java.lang.StringBuilder.StringBuilder()</outbound>
                <outbound type="feature" confirmed="no">java.lang.StringBuilder.append(int)</outbound>
                <outbound type="feature" confirmed="no">java.lang.StringBuilder.append(java.lang.String)</outbound>
                <outbound type="feature" confirmed="no">java.lang.StringBuilder.toString()</outbound>
                <outbound type="feature" confirmed="no">java.lang.System.exit(int)</outbound>
                <outbound type="class" confirmed="no">java.util.logging.Logger</outbound>
                <outbound type="feature" confirmed="no">java.util.logging.Logger.severe(java.lang.String)</outbound>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMain.main(java.lang.String[])</inbound>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.GlassFishMain.main(java.lang.String[])</inbound>
            </feature>
            <feature confirmed="yes">
                <name>com.sun.enterprise.glassfish.bootstrap.ASMainHelper.createLauncherCL(java.util.Properties, java.lang.ClassLoader)</name>
                <outbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainHelper$ClassLoaderBuilder.ASMainHelper$ClassLoaderBuilder(java.util.Properties, java.lang.ClassLoader)</outbound>
                <outbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainHelper$ClassLoaderBuilder.addFrameworkJars()</outbound>
                <outbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainHelper$ClassLoaderBuilder.addJDKToolsJar()</outbound>
                <outbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainHelper$ClassLoaderBuilder.addLauncherJar()</outbound>
                <outbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainHelper$ClassLoaderBuilder.build()</outbound>
                <outbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainHelper$ClassLoaderBuilder.findDerbyClient()</outbound>
                <outbound type="class" confirmed="no">java.io.IOException</outbound>
                <outbound type="class" confirmed="no">java.lang.ClassLoader</outbound>
                <outbound type="feature" confirmed="no">java.lang.Error.Error(java.lang.Throwable)</outbound>
                <outbound type="class" confirmed="no">java.lang.Throwable</outbound>
                <outbound type="class" confirmed="no">java.util.Properties</outbound>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.GlassFishMain.main(java.lang.String[])</inbound>
            </feature>
            <feature confirmed="yes">
                <name>com.sun.enterprise.glassfish.bootstrap.ASMainHelper.findBootstrapFile()</name>
                <outbound type="class" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMain</outbound>
                <outbound type="feature" confirmed="no">com.sun.enterprise.module.bootstrap.Which.jarFile(java.lang.Class)</outbound>
                <outbound type="class" confirmed="no">java.io.File</outbound>
                <outbound type="class" confirmed="no">java.io.IOException</outbound>
                <outbound type="class" confirmed="no">java.lang.Class</outbound>
                <outbound type="class" confirmed="no">java.lang.Object</outbound>
                <outbound type="feature" confirmed="no">java.lang.RuntimeException.RuntimeException(java.lang.String)</outbound>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="class" confirmed="no">java.lang.StringBuilder</outbound>
                <outbound type="feature" confirmed="no">java.lang.StringBuilder.StringBuilder()</outbound>
                <outbound type="feature" confirmed="no">java.lang.StringBuilder.append(java.lang.Object)</outbound>
                <outbound type="feature" confirmed="no">java.lang.StringBuilder.append(java.lang.String)</outbound>
                <outbound type="feature" confirmed="no">java.lang.StringBuilder.toString()</outbound>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainHelper.findInstallRoot()</inbound>
            </feature>
            <feature confirmed="yes">
                <name>com.sun.enterprise.glassfish.bootstrap.ASMainHelper.findInstallRoot()</name>
                <outbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainHelper.findBootstrapFile()</outbound>
                <outbound type="class" confirmed="no">java.io.File</outbound>
                <outbound type="feature" confirmed="no">java.io.File.getParentFile()</outbound>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMain.main(java.lang.String[])</inbound>
            </feature>
            <feature confirmed="yes">
                <name>com.sun.enterprise.glassfish.bootstrap.ASMainHelper.findInstallRootURI(java.util.Properties)</name>
                <outbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.Util.getPropertyOrSystemProperty(java.util.Properties, java.lang.String)</outbound>
                <outbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.Util.whichJar(java.lang.Class)</outbound>
                <outbound type="class" confirmed="no">java.io.File</outbound>
                <outbound type="feature" confirmed="no">java.io.File.File(java.net.URI)</outbound>
                <outbound type="feature" confirmed="no">java.io.File.getName()</outbound>
                <outbound type="feature" confirmed="no">java.io.File.getParentFile()</outbound>
                <outbound type="feature" confirmed="no">java.io.File.toURI()</outbound>
                <outbound type="class" confirmed="no">java.lang.Class</outbound>
                <outbound type="feature" confirmed="no">java.lang.IllegalStateException.IllegalStateException(java.lang.String)</outbound>
                <outbound type="class" confirmed="no">java.lang.Object</outbound>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="feature" confirmed="no">java.lang.String.equals(java.lang.Object)</outbound>
                <outbound type="feature" confirmed="no">java.lang.String.equalsIgnoreCase(java.lang.String)</outbound>
                <outbound type="class" confirmed="no">java.lang.StringBuilder</outbound>
                <outbound type="feature" confirmed="no">java.lang.StringBuilder.StringBuilder()</outbound>
                <outbound type="feature" confirmed="no">java.lang.StringBuilder.append(java.lang.Object)</outbound>
                <outbound type="feature" confirmed="no">java.lang.StringBuilder.append(java.lang.String)</outbound>
                <outbound type="feature" confirmed="no">java.lang.StringBuilder.toString()</outbound>
                <outbound type="class" confirmed="no">java.net.URI</outbound>
                <outbound type="feature" confirmed="no">java.net.URI.URI(java.lang.String)</outbound>
                <outbound type="feature" confirmed="no">java.net.URI.create(java.lang.String)</outbound>
                <outbound type="feature" confirmed="no">java.net.URI.getScheme()</outbound>
                <outbound type="class" confirmed="no">java.net.URISyntaxException</outbound>
                <outbound type="class" confirmed="no">java.util.Properties</outbound>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.GlassFishMain.main(java.lang.String[])</inbound>
            </feature>
            <feature confirmed="yes">
                <name>com.sun.enterprise.glassfish.bootstrap.ASMainHelper.findInstanceRoot(java.io.File, java.lang.String[])</name>
                <outbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainHelper.findInstanceRoot(java.io.File, java.util.Properties)</outbound>
                <outbound type="feature" confirmed="no">com.sun.enterprise.module.bootstrap.ArgumentManager.argsToMap(java.lang.String[])</outbound>
                <outbound type="class" confirmed="no">java.io.File</outbound>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="class" confirmed="no">java.util.Properties</outbound>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMain.main(java.lang.String[])</inbound>
            </feature>
            <feature confirmed="yes">
                <name>com.sun.enterprise.glassfish.bootstrap.ASMainHelper.findInstanceRoot(java.io.File, java.util.Properties)</name>
                <outbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainHelper.getDomainRoot(java.util.Properties, java.util.Properties)</outbound>
                <outbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainHelper.getInstanceRoot(java.util.Properties, java.util.Properties)</outbound>
                <outbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainHelper.parseAsEnv(java.io.File)</outbound>
                <outbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainHelper.verifyDomainRoot(java.io.File)</outbound>
                <outbound type="class" confirmed="no">java.io.File</outbound>
                <outbound type="class" confirmed="no">java.util.Properties</outbound>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainHelper.findInstanceRoot(java.io.File, java.lang.String[])</inbound>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.GlassFishMain.main(java.lang.String[])</inbound>
            </feature>
            <feature confirmed="yes">
                <name>com.sun.enterprise.glassfish.bootstrap.ASMainHelper.getAsEnvConf(java.io.File)</name>
                <outbound type="class" confirmed="no">java.io.File</outbound>
                <outbound type="feature" confirmed="no">java.io.File.File(java.io.File, java.lang.String)</outbound>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="feature" confirmed="no">java.lang.String.indexOf(java.lang.String)</outbound>
                <outbound type="feature" confirmed="no">java.lang.System.getProperty(java.lang.String)</outbound>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainHelper.parseAsEnv(java.io.File)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>com.sun.enterprise.glassfish.bootstrap.ASMainHelper.getDefaultDomain(java.io.File)</name>
                <outbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainHelper$1.ASMainHelper$1()</outbound>
                <outbound type="class" confirmed="no">java.io.File</outbound>
                <outbound type="feature" confirmed="no">java.io.File.listFiles(java.io.FileFilter)</outbound>
                <outbound type="class" confirmed="no">java.io.FileFilter</outbound>
                <outbound type="class" confirmed="no">java.lang.Object</outbound>
                <outbound type="feature" confirmed="no">java.lang.RuntimeException.RuntimeException(java.lang.String)</outbound>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="class" confirmed="no">java.lang.StringBuilder</outbound>
                <outbound type="feature" confirmed="no">java.lang.StringBuilder.StringBuilder()</outbound>
                <outbound type="feature" confirmed="no">java.lang.StringBuilder.append(int)</outbound>
                <outbound type="feature" confirmed="no">java.lang.StringBuilder.append(java.lang.Object)</outbound>
                <outbound type="feature" confirmed="no">java.lang.StringBuilder.append(java.lang.String)</outbound>
                <outbound type="feature" confirmed="no">java.lang.StringBuilder.toString()</outbound>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainHelper.getDomainRoot(java.util.Properties, java.util.Properties)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>com.sun.enterprise.glassfish.bootstrap.ASMainHelper.getDefaultDomainsDir(java.util.Properties)</name>
                <outbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainHelper.absolutize(java.io.File)</outbound>
                <outbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainHelper.ok(java.lang.String)</outbound>
                <outbound type="class" confirmed="no">java.io.File</outbound>
                <outbound type="feature" confirmed="no">java.io.File.File(java.lang.String)</outbound>
                <outbound type="feature" confirmed="no">java.io.File.isDirectory()</outbound>
                <outbound type="feature" confirmed="no">java.lang.RuntimeException.RuntimeException(java.lang.String)</outbound>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="class" confirmed="no">java.lang.StringBuilder</outbound>
                <outbound type="feature" confirmed="no">java.lang.StringBuilder.StringBuilder()</outbound>
                <outbound type="feature" confirmed="no">java.lang.StringBuilder.append(java.lang.String)</outbound>
                <outbound type="feature" confirmed="no">java.lang.StringBuilder.toString()</outbound>
                <outbound type="class" confirmed="no">java.util.Properties</outbound>
                <outbound type="feature" confirmed="no">java.util.Properties.getProperty(java.lang.String)</outbound>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainHelper.getDomainRoot(java.util.Properties, java.util.Properties)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>com.sun.enterprise.glassfish.bootstrap.ASMainHelper.getDomainRoot(java.util.Properties, java.util.Properties)</name>
                <outbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainHelper.getDefaultDomain(java.io.File)</outbound>
                <outbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainHelper.getDefaultDomainsDir(java.util.Properties)</outbound>
                <outbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainHelper.getParam(java.util.Properties, java.lang.String)</outbound>
                <outbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainHelper.ok(java.lang.String)</outbound>
                <outbound type="class" confirmed="no">java.io.File</outbound>
                <outbound type="feature" confirmed="no">java.io.File.File(java.io.File, java.lang.String)</outbound>
                <outbound type="feature" confirmed="no">java.io.File.File(java.lang.String)</outbound>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="class" confirmed="no">java.util.Properties</outbound>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainHelper.findInstanceRoot(java.io.File, java.util.Properties)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>com.sun.enterprise.glassfish.bootstrap.ASMainHelper.getInstanceRoot(java.util.Properties, java.util.Properties)</name>
                <outbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainHelper.getParam(java.util.Properties, java.lang.String)</outbound>
                <outbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainHelper.ok(java.lang.String)</outbound>
                <outbound type="class" confirmed="no">java.io.File</outbound>
                <outbound type="feature" confirmed="no">java.io.File.File(java.lang.String)</outbound>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="class" confirmed="no">java.util.Properties</outbound>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainHelper.findInstanceRoot(java.io.File, java.util.Properties)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>com.sun.enterprise.glassfish.bootstrap.ASMainHelper.getMain(java.lang.String)</name>
                <outbound type="class" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMain</outbound>
                <outbound type="class" confirmed="no">com.sun.enterprise.module.bootstrap.PlatformMain</outbound>
                <outbound type="feature" confirmed="no">com.sun.enterprise.module.bootstrap.PlatformMain.getName()</outbound>
                <outbound type="class" confirmed="no">java.lang.Class</outbound>
                <outbound type="feature" confirmed="no">java.lang.Class.getClassLoader()</outbound>
                <outbound type="class" confirmed="no">java.lang.ClassLoader</outbound>
                <outbound type="class" confirmed="no">java.lang.Object</outbound>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="feature" confirmed="no">java.lang.String.equalsIgnoreCase(java.lang.String)</outbound>
                <outbound type="class" confirmed="no">java.util.Iterator</outbound>
                <outbound type="feature" confirmed="no">java.util.Iterator.hasNext()</outbound>
                <outbound type="feature" confirmed="no">java.util.Iterator.next()</outbound>
                <outbound type="class" confirmed="no">java.util.ServiceLoader</outbound>
                <outbound type="feature" confirmed="no">java.util.ServiceLoader.iterator()</outbound>
                <outbound type="feature" confirmed="no">java.util.ServiceLoader.load(java.lang.Class, java.lang.ClassLoader)</outbound>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMain.main(java.lang.String[])</inbound>
            </feature>
            <feature confirmed="yes">
                <name>com.sun.enterprise.glassfish.bootstrap.ASMainHelper.getMinorJdkVersion()</name>
                <outbound type="class" confirmed="no">java.lang.Exception</outbound>
                <outbound type="feature" confirmed="no">java.lang.Integer.parseInt(java.lang.String)</outbound>
                <outbound type="class" confirmed="no">java.lang.Object</outbound>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="feature" confirmed="no">java.lang.String.equals(java.lang.Object)</outbound>
                <outbound type="feature" confirmed="no">java.lang.String.split(java.lang.String)</outbound>
                <outbound type="feature" confirmed="no">java.lang.System.getProperty(java.lang.String)</outbound>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainHelper.checkJdkVersion()</inbound>
            </feature>
            <feature confirmed="yes">
                <name>com.sun.enterprise.glassfish.bootstrap.ASMainHelper.getParam(java.util.Properties, java.lang.String)</name>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="class" confirmed="no">java.lang.StringBuilder</outbound>
                <outbound type="feature" confirmed="no">java.lang.StringBuilder.StringBuilder()</outbound>
                <outbound type="feature" confirmed="no">java.lang.StringBuilder.append(java.lang.String)</outbound>
                <outbound type="feature" confirmed="no">java.lang.StringBuilder.toString()</outbound>
                <outbound type="class" confirmed="no">java.util.Properties</outbound>
                <outbound type="feature" confirmed="no">java.util.Properties.getProperty(java.lang.String)</outbound>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainHelper.getDomainRoot(java.util.Properties, java.util.Properties)</inbound>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainHelper.getInstanceRoot(java.util.Properties, java.util.Properties)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>com.sun.enterprise.glassfish.bootstrap.ASMainHelper.isOSGiPlatform(java.lang.String)</name>
                <outbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainHelper$2.$SwitchMap$com$sun$enterprise$glassfish$bootstrap$Constants$Platform</outbound>
                <outbound type="class" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.Constants$Platform</outbound>
                <outbound type="feature" confirmed="no">com.sun.enterprise.glassfish.bootstrap.Constants$Platform.ordinal()</outbound>
                <outbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.Constants$Platform.valueOf(java.lang.String)</outbound>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMain.main(java.lang.String[])</inbound>
            </feature>
            <feature confirmed="yes">
                <name>com.sun.enterprise.glassfish.bootstrap.ASMainHelper.logger</name>
                <outbound type="class" confirmed="no">java.util.logging.Logger</outbound>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainHelper.access$000()</inbound>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainHelper.checkJdkVersion()</inbound>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainHelper.parseAsEnv(java.io.File)</inbound>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainHelper.static {}</inbound>
            </feature>
            <feature confirmed="yes">
                <name>com.sun.enterprise.glassfish.bootstrap.ASMainHelper.mergePlatformConfiguration(java.util.Properties)</name>
                <outbound type="class" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainHelper$PlatformHelper</outbound>
                <outbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainHelper$PlatformHelper.getPlatformHelper(java.util.Properties)</outbound>
                <outbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainHelper$PlatformHelper.readPlatformConfiguration()</outbound>
                <outbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.Util.substVars(java.util.Properties)</outbound>
                <outbound type="class" confirmed="no">java.io.IOException</outbound>
                <outbound type="feature" confirmed="no">java.lang.RuntimeException.RuntimeException(java.lang.Throwable)</outbound>
                <outbound type="class" confirmed="no">java.lang.Throwable</outbound>
                <outbound type="class" confirmed="no">java.util.Map</outbound>
                <outbound type="class" confirmed="no">java.util.Properties</outbound>
                <outbound type="feature" confirmed="no">java.util.Properties.clear()</outbound>
                <outbound type="feature" confirmed="no">java.util.Properties.putAll(java.util.Map)</outbound>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainHelper.buildStartupContext(java.lang.String, java.io.File, java.io.File, java.lang.String[])</inbound>
            </feature>
            <feature confirmed="yes">
                <name>com.sun.enterprise.glassfish.bootstrap.ASMainHelper.ok(java.lang.String)</name>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="feature" confirmed="no">java.lang.String.length()</outbound>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainHelper.getDefaultDomainsDir(java.util.Properties)</inbound>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainHelper.getDomainRoot(java.util.Properties, java.util.Properties)</inbound>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainHelper.getInstanceRoot(java.util.Properties, java.util.Properties)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>com.sun.enterprise.glassfish.bootstrap.ASMainHelper.parseAsEnv(java.io.File)</name>
                <outbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainHelper.getAsEnvConf(java.io.File)</outbound>
                <outbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainHelper.logger</outbound>
                <outbound type="class" confirmed="no">java.io.File</outbound>
                <outbound type="feature" confirmed="no">java.io.File.File(java.io.File, java.lang.String)</outbound>
                <outbound type="feature" confirmed="no">java.io.File.File(java.lang.String)</outbound>
                <outbound type="feature" confirmed="no">java.io.File.exists()</outbound>
                <outbound type="feature" confirmed="no">java.io.File.getAbsolutePath()</outbound>
                <outbound type="feature" confirmed="no">java.io.File.isAbsolute()</outbound>
                <outbound type="feature" confirmed="no">java.io.FileReader.FileReader(java.io.File)</outbound>
                <outbound type="class" confirmed="no">java.io.IOException</outbound>
                <outbound type="feature" confirmed="no">java.io.LineNumberReader.LineNumberReader(java.io.Reader)</outbound>
                <outbound type="feature" confirmed="no">java.io.LineNumberReader.close()</outbound>
                <outbound type="feature" confirmed="no">java.io.LineNumberReader.readLine()</outbound>
                <outbound type="class" confirmed="no">java.io.Reader</outbound>
                <outbound type="class" confirmed="no">java.lang.CharSequence</outbound>
                <outbound type="class" confirmed="no">java.lang.Object</outbound>
                <outbound type="feature" confirmed="no">java.lang.RuntimeException.RuntimeException(java.lang.String, java.lang.Throwable)</outbound>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="class" confirmed="no">java.lang.StringBuilder</outbound>
                <outbound type="feature" confirmed="no">java.lang.StringBuilder.StringBuilder()</outbound>
                <outbound type="feature" confirmed="no">java.lang.StringBuilder.append(java.lang.String)</outbound>
                <outbound type="feature" confirmed="no">java.lang.StringBuilder.toString()</outbound>
                <outbound type="class" confirmed="no">java.lang.Throwable</outbound>
                <outbound type="class" confirmed="no">java.util.Properties</outbound>
                <outbound type="feature" confirmed="no">java.util.Properties.Properties()</outbound>
                <outbound type="feature" confirmed="no">java.util.Properties.put(java.lang.Object, java.lang.Object)</outbound>
                <outbound type="class" confirmed="no">java.util.logging.Logger</outbound>
                <outbound type="feature" confirmed="no">java.util.logging.Logger.fine(java.lang.String)</outbound>
                <outbound type="class" confirmed="no">java.util.regex.Matcher</outbound>
                <outbound type="feature" confirmed="no">java.util.regex.Matcher.group(int)</outbound>
                <outbound type="feature" confirmed="no">java.util.regex.Matcher.matches()</outbound>
                <outbound type="class" confirmed="no">java.util.regex.Pattern</outbound>
                <outbound type="feature" confirmed="no">java.util.regex.Pattern.compile(java.lang.String)</outbound>
                <outbound type="feature" confirmed="no">java.util.regex.Pattern.matcher(java.lang.CharSequence)</outbound>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainHelper$ClassLoaderBuilder.findDerbyClient()</inbound>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainHelper.findInstanceRoot(java.io.File, java.util.Properties)</inbound>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainOSGi.findDerbyClient(com.sun.enterprise.glassfish.bootstrap.ClassPathBuilder)</inbound>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.GlassFishActivator.setEnv(java.util.Properties)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>com.sun.enterprise.glassfish.bootstrap.ASMainHelper.setSystemProperties(java.util.Properties)</name>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="feature" confirmed="no">java.lang.System.setProperty(java.lang.String, java.lang.String)</outbound>
                <outbound type="class" confirmed="no">java.util.Properties</outbound>
                <outbound type="feature" confirmed="no">java.util.Properties.getProperty(java.lang.String)</outbound>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMain.main(java.lang.String[])</inbound>
            </feature>
            <feature confirmed="yes">
                <name>com.sun.enterprise.glassfish.bootstrap.ASMainHelper.static {}</name>
                <outbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainHelper.logger</outbound>
                <outbound type="feature" confirmed="no">java.lang.Class.getPackage()</outbound>
                <outbound type="class" confirmed="no">java.lang.Package</outbound>
                <outbound type="feature" confirmed="no">java.lang.Package.getName()</outbound>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="class" confirmed="no">java.util.logging.Logger</outbound>
                <outbound type="feature" confirmed="no">java.util.logging.Logger.getLogger(java.lang.String)</outbound>
            </feature>
            <feature confirmed="yes">
                <name>com.sun.enterprise.glassfish.bootstrap.ASMainHelper.verifyAndSetDomainRoot(java.io.File)</name>
                <outbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainHelper.absolutize(java.io.File)</outbound>
                <outbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainHelper.verifyDomainRoot(java.io.File)</outbound>
                <outbound type="class" confirmed="no">java.io.File</outbound>
                <outbound type="feature" confirmed="no">java.io.File.getPath()</outbound>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="feature" confirmed="no">java.lang.System.setProperty(java.lang.String, java.lang.String)</outbound>
            </feature>
            <feature confirmed="yes">
                <name>com.sun.enterprise.glassfish.bootstrap.ASMainHelper.verifyDomainRoot(java.io.File)</name>
                <outbound type="class" confirmed="no">java.io.File</outbound>
                <outbound type="feature" confirmed="no">java.io.File.File(java.io.File, java.lang.String)</outbound>
                <outbound type="feature" confirmed="no">java.io.File.canWrite()</outbound>
                <outbound type="feature" confirmed="no">java.io.File.exists()</outbound>
                <outbound type="feature" confirmed="no">java.io.File.isDirectory()</outbound>
                <outbound type="feature" confirmed="no">java.lang.RuntimeException.RuntimeException(java.lang.String)</outbound>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainHelper.findInstanceRoot(java.io.File, java.util.Properties)</inbound>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainHelper.verifyAndSetDomainRoot(java.io.File)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>com.sun.enterprise.glassfish.bootstrap.ASMainHelper.wasStartedByCLI(java.util.Properties)</name>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="class" confirmed="no">java.util.Properties</outbound>
                <outbound type="feature" confirmed="no">java.util.Properties.getProperty(java.lang.String)</outbound>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainHelper.addRawStartupInfo(java.lang.String[], java.util.Properties)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>com.sun.enterprise.glassfish.bootstrap.ASMainHelper.whichPlatform()</name>
                <outbound type="class" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.Constants$Platform</outbound>
                <outbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.Constants$Platform.Felix</outbound>
                <outbound type="feature" confirmed="no">com.sun.enterprise.glassfish.bootstrap.Constants$Platform.toString()</outbound>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="feature" confirmed="no">java.lang.String.length()</outbound>
                <outbound type="feature" confirmed="no">java.lang.String.trim()</outbound>
                <outbound type="feature" confirmed="no">java.lang.System.getProperty(java.lang.String)</outbound>
                <outbound type="feature" confirmed="no">java.lang.System.getenv(java.lang.String)</outbound>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMain.main(java.lang.String[])</inbound>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.GlassFishMain.main(java.lang.String[])</inbound>
            </feature>
        </class>
        <class confirmed="yes">
            <name>com.sun.enterprise.glassfish.bootstrap.ASMainHelper$1</name>
            <outbound type="class" confirmed="no">java.io.FileFilter</outbound>
            <outbound type="class" confirmed="no">java.lang.Object</outbound>
            <feature confirmed="yes">
                <name>com.sun.enterprise.glassfish.bootstrap.ASMainHelper$1.ASMainHelper$1()</name>
                <outbound type="feature" confirmed="no">java.lang.Object.Object()</outbound>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainHelper.getDefaultDomain(java.io.File)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>com.sun.enterprise.glassfish.bootstrap.ASMainHelper$1.accept(java.io.File)</name>
                <outbound type="class" confirmed="no">java.io.File</outbound>
                <outbound type="feature" confirmed="no">java.io.File.isDirectory()</outbound>
            </feature>
        </class>
        <class confirmed="yes">
            <name>com.sun.enterprise.glassfish.bootstrap.ASMainHelper$2</name>
            <outbound type="class" confirmed="no">java.lang.Object</outbound>
            <feature confirmed="yes">
                <name>com.sun.enterprise.glassfish.bootstrap.ASMainHelper$2.$SwitchMap$com$sun$enterprise$glassfish$bootstrap$Constants$Platform</name>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainHelper$2.static {}</inbound>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainHelper$PlatformHelper.getPlatformHelper(java.util.Properties)</inbound>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainHelper.isOSGiPlatform(java.lang.String)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>com.sun.enterprise.glassfish.bootstrap.ASMainHelper$2.static {}</name>
                <outbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainHelper$2.$SwitchMap$com$sun$enterprise$glassfish$bootstrap$Constants$Platform</outbound>
                <outbound type="class" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.Constants$Platform</outbound>
                <outbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.Constants$Platform.Equinox</outbound>
                <outbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.Constants$Platform.Felix</outbound>
                <outbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.Constants$Platform.Knopflerfish</outbound>
                <outbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.Constants$Platform.Static</outbound>
                <outbound type="feature" confirmed="no">com.sun.enterprise.glassfish.bootstrap.Constants$Platform.ordinal()</outbound>
                <outbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.Constants$Platform.values()</outbound>
                <outbound type="class" confirmed="no">java.lang.NoSuchFieldError</outbound>
            </feature>
        </class>
        <class confirmed="yes">
            <name>com.sun.enterprise.glassfish.bootstrap.ASMainHelper$ClassLoaderBuilder</name>
            <outbound type="class" confirmed="no">java.lang.Object</outbound>
            <feature confirmed="yes">
                <name>com.sun.enterprise.glassfish.bootstrap.ASMainHelper$ClassLoaderBuilder.ASMainHelper$ClassLoaderBuilder(java.util.Properties, java.lang.ClassLoader)</name>
                <outbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainHelper$ClassLoaderBuilder.cpb</outbound>
                <outbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainHelper$ClassLoaderBuilder.ctx</outbound>
                <outbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainHelper$ClassLoaderBuilder.glassfishDir</outbound>
                <outbound type="class" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ClassPathBuilder</outbound>
                <outbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ClassPathBuilder.ClassPathBuilder(java.lang.ClassLoader)</outbound>
                <outbound type="class" confirmed="no">java.io.File</outbound>
                <outbound type="feature" confirmed="no">java.io.File.File(java.lang.String)</outbound>
                <outbound type="class" confirmed="no">java.lang.ClassLoader</outbound>
                <outbound type="feature" confirmed="no">java.lang.Object.Object()</outbound>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="class" confirmed="no">java.util.Properties</outbound>
                <outbound type="feature" confirmed="no">java.util.Properties.getProperty(java.lang.String)</outbound>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainHelper.createLauncherCL(java.util.Properties, java.lang.ClassLoader)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>com.sun.enterprise.glassfish.bootstrap.ASMainHelper$ClassLoaderBuilder.addFrameworkJars()</name>
                <outbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainHelper$ClassLoaderBuilder.cpb</outbound>
                <outbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainHelper$ClassLoaderBuilder.ctx</outbound>
                <outbound type="class" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainHelper$PlatformHelper</outbound>
                <outbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainHelper$PlatformHelper.addFrameworkJars(com.sun.enterprise.glassfish.bootstrap.ClassPathBuilder)</outbound>
                <outbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainHelper$PlatformHelper.getPlatformHelper(java.util.Properties)</outbound>
                <outbound type="class" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ClassPathBuilder</outbound>
                <outbound type="class" confirmed="no">java.io.IOException</outbound>
                <outbound type="class" confirmed="no">java.util.Properties</outbound>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainHelper.createLauncherCL(java.util.Properties, java.lang.ClassLoader)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>com.sun.enterprise.glassfish.bootstrap.ASMainHelper$ClassLoaderBuilder.addJDKToolsJar()</name>
                <outbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainHelper$ClassLoaderBuilder.cpb</outbound>
                <outbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainHelper.access$000()</outbound>
                <outbound type="class" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ClassPathBuilder</outbound>
                <outbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ClassPathBuilder.addJar(java.io.File)</outbound>
                <outbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.Util.getJDKToolsJar()</outbound>
                <outbound type="class" confirmed="no">java.io.File</outbound>
                <outbound type="feature" confirmed="no">java.io.File.exists()</outbound>
                <outbound type="class" confirmed="no">java.io.IOException</outbound>
                <outbound type="feature" confirmed="no">java.lang.Error.Error(java.lang.Throwable)</outbound>
                <outbound type="class" confirmed="no">java.lang.Object</outbound>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="class" confirmed="no">java.lang.StringBuilder</outbound>
                <outbound type="feature" confirmed="no">java.lang.StringBuilder.StringBuilder()</outbound>
                <outbound type="feature" confirmed="no">java.lang.StringBuilder.append(java.lang.Object)</outbound>
                <outbound type="feature" confirmed="no">java.lang.StringBuilder.append(java.lang.String)</outbound>
                <outbound type="feature" confirmed="no">java.lang.StringBuilder.toString()</outbound>
                <outbound type="class" confirmed="no">java.lang.Throwable</outbound>
                <outbound type="class" confirmed="no">java.util.logging.Logger</outbound>
                <outbound type="feature" confirmed="no">java.util.logging.Logger.fine(java.lang.String)</outbound>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainHelper.createLauncherCL(java.util.Properties, java.lang.ClassLoader)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>com.sun.enterprise.glassfish.bootstrap.ASMainHelper$ClassLoaderBuilder.addLauncherJar()</name>
                <outbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainHelper$ClassLoaderBuilder.cpb</outbound>
                <outbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainHelper$ClassLoaderBuilder.glassfishDir</outbound>
                <outbound type="class" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ClassPathBuilder</outbound>
                <outbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ClassPathBuilder.addJar(java.io.File)</outbound>
                <outbound type="class" confirmed="no">java.io.File</outbound>
                <outbound type="feature" confirmed="no">java.io.File.File(java.io.File, java.lang.String)</outbound>
                <outbound type="class" confirmed="no">java.io.IOException</outbound>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainHelper.createLauncherCL(java.util.Properties, java.lang.ClassLoader)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>com.sun.enterprise.glassfish.bootstrap.ASMainHelper$ClassLoaderBuilder.build()</name>
                <outbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainHelper$ClassLoaderBuilder.cpb</outbound>
                <outbound type="class" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ClassPathBuilder</outbound>
                <outbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ClassPathBuilder.create()</outbound>
                <outbound type="class" confirmed="no">java.lang.ClassLoader</outbound>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainHelper.createLauncherCL(java.util.Properties, java.lang.ClassLoader)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>com.sun.enterprise.glassfish.bootstrap.ASMainHelper$ClassLoaderBuilder.cpb</name>
                <outbound type="class" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ClassPathBuilder</outbound>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainHelper$ClassLoaderBuilder.ASMainHelper$ClassLoaderBuilder(java.util.Properties, java.lang.ClassLoader)</inbound>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainHelper$ClassLoaderBuilder.addFrameworkJars()</inbound>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainHelper$ClassLoaderBuilder.addJDKToolsJar()</inbound>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainHelper$ClassLoaderBuilder.addLauncherJar()</inbound>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainHelper$ClassLoaderBuilder.build()</inbound>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainHelper$ClassLoaderBuilder.findDerbyClient()</inbound>
            </feature>
            <feature confirmed="yes">
                <name>com.sun.enterprise.glassfish.bootstrap.ASMainHelper$ClassLoaderBuilder.ctx</name>
                <outbound type="class" confirmed="no">java.util.Properties</outbound>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainHelper$ClassLoaderBuilder.ASMainHelper$ClassLoaderBuilder(java.util.Properties, java.lang.ClassLoader)</inbound>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainHelper$ClassLoaderBuilder.addFrameworkJars()</inbound>
            </feature>
            <feature confirmed="yes">
                <name>com.sun.enterprise.glassfish.bootstrap.ASMainHelper$ClassLoaderBuilder.findDerbyClient()</name>
                <outbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainHelper$ClassLoaderBuilder.cpb</outbound>
                <outbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainHelper$ClassLoaderBuilder.glassfishDir</outbound>
                <outbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainHelper.access$000()</outbound>
                <outbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainHelper.parseAsEnv(java.io.File)</outbound>
                <outbound type="class" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ClassPathBuilder</outbound>
                <outbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ClassPathBuilder.addGlob(java.io.File, java.lang.String[])</outbound>
                <outbound type="class" confirmed="no">java.io.File</outbound>
                <outbound type="feature" confirmed="no">java.io.File.File(java.io.File, java.lang.String)</outbound>
                <outbound type="feature" confirmed="no">java.io.File.File(java.lang.String)</outbound>
                <outbound type="feature" confirmed="no">java.io.File.File(java.lang.String, java.lang.String)</outbound>
                <outbound type="feature" confirmed="no">java.io.File.exists()</outbound>
                <outbound type="class" confirmed="no">java.io.IOException</outbound>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="feature" confirmed="no">java.lang.String.compareTo(java.lang.String)</outbound>
                <outbound type="feature" confirmed="no">java.lang.System.getProperty(java.lang.String)</outbound>
                <outbound type="class" confirmed="no">java.util.Properties</outbound>
                <outbound type="feature" confirmed="no">java.util.Properties.getProperty(java.lang.String)</outbound>
                <outbound type="class" confirmed="no">java.util.logging.Logger</outbound>
                <outbound type="feature" confirmed="no">java.util.logging.Logger.info(java.lang.String)</outbound>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainHelper.createLauncherCL(java.util.Properties, java.lang.ClassLoader)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>com.sun.enterprise.glassfish.bootstrap.ASMainHelper$ClassLoaderBuilder.glassfishDir</name>
                <outbound type="class" confirmed="no">java.io.File</outbound>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainHelper$ClassLoaderBuilder.ASMainHelper$ClassLoaderBuilder(java.util.Properties, java.lang.ClassLoader)</inbound>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainHelper$ClassLoaderBuilder.addLauncherJar()</inbound>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainHelper$ClassLoaderBuilder.findDerbyClient()</inbound>
            </feature>
        </class>
        <class confirmed="yes">
            <name>com.sun.enterprise.glassfish.bootstrap.ASMainHelper$EquinoxHelper</name>
            <outbound type="class" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainHelper$PlatformHelper</outbound>
            <feature confirmed="yes">
                <name>com.sun.enterprise.glassfish.bootstrap.ASMainHelper$EquinoxHelper.ASMainHelper$EquinoxHelper()</name>
                <outbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainHelper$PlatformHelper.ASMainHelper$PlatformHelper()</outbound>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainHelper$PlatformHelper.getPlatformHelper(java.util.Properties)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>com.sun.enterprise.glassfish.bootstrap.ASMainHelper$EquinoxHelper.addFrameworkJars(com.sun.enterprise.glassfish.bootstrap.ClassPathBuilder)</name>
                <outbound type="feature" confirmed="no">com.sun.enterprise.glassfish.bootstrap.ASMainHelper$EquinoxHelper.fwDir</outbound>
                <outbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainHelper$EquinoxHelper.pluginsDir</outbound>
                <outbound type="class" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ClassPathBuilder</outbound>
                <outbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ClassPathBuilder.addGlob(java.io.File, java.lang.String[])</outbound>
                <outbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ClassPathBuilder.addJarFolder(java.io.File, java.lang.String[])</outbound>
                <outbound type="class" confirmed="no">java.io.File</outbound>
                <outbound type="class" confirmed="no">java.io.IOException</outbound>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
            </feature>
            <feature confirmed="no">
                <name>com.sun.enterprise.glassfish.bootstrap.ASMainHelper$EquinoxHelper.fwDir</name>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainHelper$EquinoxHelper.addFrameworkJars(com.sun.enterprise.glassfish.bootstrap.ClassPathBuilder)</inbound>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainHelper$EquinoxHelper.getFrameworkConfigFile()</inbound>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainHelper$EquinoxHelper.setFwDir()</inbound>
            </feature>
            <feature confirmed="yes">
                <name>com.sun.enterprise.glassfish.bootstrap.ASMainHelper$EquinoxHelper.getFrameworkConfigFile()</name>
                <outbound type="feature" confirmed="no">com.sun.enterprise.glassfish.bootstrap.ASMainHelper$EquinoxHelper.fwDir</outbound>
                <outbound type="class" confirmed="no">java.io.File</outbound>
                <outbound type="feature" confirmed="no">java.io.File.File(java.io.File, java.lang.String)</outbound>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
            </feature>
            <feature confirmed="no">
                <name>com.sun.enterprise.glassfish.bootstrap.ASMainHelper$EquinoxHelper.glassfishDir</name>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainHelper$EquinoxHelper.setFwDir()</inbound>
            </feature>
            <feature confirmed="yes">
                <name>com.sun.enterprise.glassfish.bootstrap.ASMainHelper$EquinoxHelper.pluginsDir</name>
                <outbound type="class" confirmed="no">java.io.File</outbound>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainHelper$EquinoxHelper.addFrameworkJars(com.sun.enterprise.glassfish.bootstrap.ClassPathBuilder)</inbound>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainHelper$EquinoxHelper.setFwDir()</inbound>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainHelper$EquinoxHelper.static {}</inbound>
            </feature>
            <feature confirmed="yes">
                <name>com.sun.enterprise.glassfish.bootstrap.ASMainHelper$EquinoxHelper.setFwDir()</name>
                <outbound type="feature" confirmed="no">com.sun.enterprise.glassfish.bootstrap.ASMainHelper$EquinoxHelper.fwDir</outbound>
                <outbound type="feature" confirmed="no">com.sun.enterprise.glassfish.bootstrap.ASMainHelper$EquinoxHelper.glassfishDir</outbound>
                <outbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainHelper$EquinoxHelper.pluginsDir</outbound>
                <outbound type="class" confirmed="no">java.io.File</outbound>
                <outbound type="feature" confirmed="no">java.io.File.File(java.io.File, java.lang.String)</outbound>
                <outbound type="feature" confirmed="no">java.io.File.File(java.lang.String)</outbound>
                <outbound type="feature" confirmed="no">java.io.File.exists()</outbound>
                <outbound type="feature" confirmed="no">java.io.File.getAbsolutePath()</outbound>
                <outbound type="feature" confirmed="no">java.lang.RuntimeException.RuntimeException(java.lang.String)</outbound>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="class" confirmed="no">java.lang.StringBuilder</outbound>
                <outbound type="feature" confirmed="no">java.lang.StringBuilder.StringBuilder()</outbound>
                <outbound type="feature" confirmed="no">java.lang.StringBuilder.append(java.lang.String)</outbound>
                <outbound type="feature" confirmed="no">java.lang.StringBuilder.toString()</outbound>
                <outbound type="feature" confirmed="no">java.lang.System.getenv(java.lang.String)</outbound>
            </feature>
            <feature confirmed="yes">
                <name>com.sun.enterprise.glassfish.bootstrap.ASMainHelper$EquinoxHelper.static {}</name>
                <outbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainHelper$EquinoxHelper.pluginsDir</outbound>
                <outbound type="class" confirmed="no">java.io.File</outbound>
            </feature>
        </class>
        <class confirmed="yes">
            <name>com.sun.enterprise.glassfish.bootstrap.ASMainHelper$FelixHelper</name>
            <outbound type="class" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainHelper$PlatformHelper</outbound>
            <feature confirmed="yes">
                <name>com.sun.enterprise.glassfish.bootstrap.ASMainHelper$FelixHelper.ASMainHelper$FelixHelper()</name>
                <outbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainHelper$PlatformHelper.ASMainHelper$PlatformHelper()</outbound>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainHelper$PlatformHelper.getPlatformHelper(java.util.Properties)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>com.sun.enterprise.glassfish.bootstrap.ASMainHelper$FelixHelper.CONFIG_PROPERTIES</name>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
            </feature>
            <feature confirmed="yes">
                <name>com.sun.enterprise.glassfish.bootstrap.ASMainHelper$FelixHelper.FELIX_HOME</name>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
            </feature>
            <feature confirmed="yes">
                <name>com.sun.enterprise.glassfish.bootstrap.ASMainHelper$FelixHelper.GF_FELIX_HOME</name>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
            </feature>
            <feature confirmed="yes">
                <name>com.sun.enterprise.glassfish.bootstrap.ASMainHelper$FelixHelper.addFrameworkJars(com.sun.enterprise.glassfish.bootstrap.ClassPathBuilder)</name>
                <outbound type="feature" confirmed="no">com.sun.enterprise.glassfish.bootstrap.ASMainHelper$FelixHelper.fwDir</outbound>
                <outbound type="class" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ClassPathBuilder</outbound>
                <outbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ClassPathBuilder.addJar(java.io.File)</outbound>
                <outbound type="class" confirmed="no">java.io.File</outbound>
                <outbound type="feature" confirmed="no">java.io.File.File(java.io.File, java.lang.String)</outbound>
                <outbound type="class" confirmed="no">java.io.IOException</outbound>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
            </feature>
            <feature confirmed="no">
                <name>com.sun.enterprise.glassfish.bootstrap.ASMainHelper$FelixHelper.fwDir</name>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainHelper$FelixHelper.addFrameworkJars(com.sun.enterprise.glassfish.bootstrap.ClassPathBuilder)</inbound>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainHelper$FelixHelper.getFrameworkConfigFile()</inbound>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainHelper$FelixHelper.setFwDir()</inbound>
            </feature>
            <feature confirmed="yes">
                <name>com.sun.enterprise.glassfish.bootstrap.ASMainHelper$FelixHelper.getFrameworkConfigFile()</name>
                <outbound type="feature" confirmed="no">com.sun.enterprise.glassfish.bootstrap.ASMainHelper$FelixHelper.fwDir</outbound>
                <outbound type="feature" confirmed="no">com.sun.enterprise.glassfish.bootstrap.ASMainHelper$FelixHelper.glassfishDir</outbound>
                <outbound type="class" confirmed="no">java.io.File</outbound>
                <outbound type="feature" confirmed="no">java.io.File.File(java.io.File, java.lang.String)</outbound>
                <outbound type="feature" confirmed="no">java.io.File.exists()</outbound>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
            </feature>
            <feature confirmed="no">
                <name>com.sun.enterprise.glassfish.bootstrap.ASMainHelper$FelixHelper.glassfishDir</name>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainHelper$FelixHelper.getFrameworkConfigFile()</inbound>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainHelper$FelixHelper.setFwDir()</inbound>
            </feature>
            <feature confirmed="yes">
                <name>com.sun.enterprise.glassfish.bootstrap.ASMainHelper$FelixHelper.setFwDir()</name>
                <outbound type="feature" confirmed="no">com.sun.enterprise.glassfish.bootstrap.ASMainHelper$FelixHelper.fwDir</outbound>
                <outbound type="feature" confirmed="no">com.sun.enterprise.glassfish.bootstrap.ASMainHelper$FelixHelper.glassfishDir</outbound>
                <outbound type="class" confirmed="no">java.io.File</outbound>
                <outbound type="feature" confirmed="no">java.io.File.File(java.io.File, java.lang.String)</outbound>
                <outbound type="feature" confirmed="no">java.io.File.File(java.lang.String)</outbound>
                <outbound type="feature" confirmed="no">java.io.File.exists()</outbound>
                <outbound type="feature" confirmed="no">java.io.File.getAbsolutePath()</outbound>
                <outbound type="feature" confirmed="no">java.lang.RuntimeException.RuntimeException(java.lang.String)</outbound>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="class" confirmed="no">java.lang.StringBuilder</outbound>
                <outbound type="feature" confirmed="no">java.lang.StringBuilder.StringBuilder()</outbound>
                <outbound type="feature" confirmed="no">java.lang.StringBuilder.append(java.lang.String)</outbound>
                <outbound type="feature" confirmed="no">java.lang.StringBuilder.toString()</outbound>
                <outbound type="feature" confirmed="no">java.lang.System.getProperty(java.lang.String, java.lang.String)</outbound>
                <outbound type="feature" confirmed="no">java.lang.System.getenv(java.lang.String)</outbound>
            </feature>
        </class>
        <class confirmed="yes">
            <name>com.sun.enterprise.glassfish.bootstrap.ASMainHelper$KnopflerfishHelper</name>
            <outbound type="class" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainHelper$PlatformHelper</outbound>
            <feature confirmed="yes">
                <name>com.sun.enterprise.glassfish.bootstrap.ASMainHelper$KnopflerfishHelper.ASMainHelper$KnopflerfishHelper()</name>
                <outbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainHelper$PlatformHelper.ASMainHelper$PlatformHelper()</outbound>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainHelper$PlatformHelper.getPlatformHelper(java.util.Properties)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>com.sun.enterprise.glassfish.bootstrap.ASMainHelper$KnopflerfishHelper.CONFIG_PROPERTIES</name>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
            </feature>
            <feature confirmed="yes">
                <name>com.sun.enterprise.glassfish.bootstrap.ASMainHelper$KnopflerfishHelper.GF_KF_HOME</name>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
            </feature>
            <feature confirmed="yes">
                <name>com.sun.enterprise.glassfish.bootstrap.ASMainHelper$KnopflerfishHelper.KF_HOME</name>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
            </feature>
            <feature confirmed="yes">
                <name>com.sun.enterprise.glassfish.bootstrap.ASMainHelper$KnopflerfishHelper.addFrameworkJars(com.sun.enterprise.glassfish.bootstrap.ClassPathBuilder)</name>
                <outbound type="feature" confirmed="no">com.sun.enterprise.glassfish.bootstrap.ASMainHelper$KnopflerfishHelper.fwDir</outbound>
                <outbound type="class" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ClassPathBuilder</outbound>
                <outbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ClassPathBuilder.addJar(java.io.File)</outbound>
                <outbound type="class" confirmed="no">java.io.File</outbound>
                <outbound type="feature" confirmed="no">java.io.File.File(java.io.File, java.lang.String)</outbound>
                <outbound type="class" confirmed="no">java.io.IOException</outbound>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
            </feature>
            <feature confirmed="no">
                <name>com.sun.enterprise.glassfish.bootstrap.ASMainHelper$KnopflerfishHelper.fwDir</name>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainHelper$KnopflerfishHelper.addFrameworkJars(com.sun.enterprise.glassfish.bootstrap.ClassPathBuilder)</inbound>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainHelper$KnopflerfishHelper.getFrameworkConfigFile()</inbound>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainHelper$KnopflerfishHelper.setFwDir()</inbound>
            </feature>
            <feature confirmed="yes">
                <name>com.sun.enterprise.glassfish.bootstrap.ASMainHelper$KnopflerfishHelper.getFrameworkConfigFile()</name>
                <outbound type="feature" confirmed="no">com.sun.enterprise.glassfish.bootstrap.ASMainHelper$KnopflerfishHelper.fwDir</outbound>
                <outbound type="class" confirmed="no">java.io.File</outbound>
                <outbound type="feature" confirmed="no">java.io.File.File(java.io.File, java.lang.String)</outbound>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
            </feature>
            <feature confirmed="no">
                <name>com.sun.enterprise.glassfish.bootstrap.ASMainHelper$KnopflerfishHelper.glassfishDir</name>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainHelper$KnopflerfishHelper.setFwDir()</inbound>
            </feature>
            <feature confirmed="yes">
                <name>com.sun.enterprise.glassfish.bootstrap.ASMainHelper$KnopflerfishHelper.setFwDir()</name>
                <outbound type="feature" confirmed="no">com.sun.enterprise.glassfish.bootstrap.ASMainHelper$KnopflerfishHelper.fwDir</outbound>
                <outbound type="feature" confirmed="no">com.sun.enterprise.glassfish.bootstrap.ASMainHelper$KnopflerfishHelper.glassfishDir</outbound>
                <outbound type="class" confirmed="no">java.io.File</outbound>
                <outbound type="feature" confirmed="no">java.io.File.File(java.io.File, java.lang.String)</outbound>
                <outbound type="feature" confirmed="no">java.io.File.File(java.lang.String)</outbound>
                <outbound type="feature" confirmed="no">java.io.File.exists()</outbound>
                <outbound type="feature" confirmed="no">java.io.File.getAbsolutePath()</outbound>
                <outbound type="feature" confirmed="no">java.lang.RuntimeException.RuntimeException(java.lang.String)</outbound>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="class" confirmed="no">java.lang.StringBuilder</outbound>
                <outbound type="feature" confirmed="no">java.lang.StringBuilder.StringBuilder()</outbound>
                <outbound type="feature" confirmed="no">java.lang.StringBuilder.append(java.lang.String)</outbound>
                <outbound type="feature" confirmed="no">java.lang.StringBuilder.toString()</outbound>
                <outbound type="feature" confirmed="no">java.lang.System.getenv(java.lang.String)</outbound>
            </feature>
        </class>
        <class confirmed="yes">
            <name>com.sun.enterprise.glassfish.bootstrap.ASMainHelper$PlatformHelper</name>
            <outbound type="class" confirmed="no">java.lang.Object</outbound>
            <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainHelper$ClassLoaderBuilder.addFrameworkJars()</inbound>
            <inbound type="class" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainHelper$EquinoxHelper</inbound>
            <inbound type="class" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainHelper$FelixHelper</inbound>
            <inbound type="class" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainHelper$KnopflerfishHelper</inbound>
            <inbound type="class" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainHelper$StaticHelper</inbound>
            <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainHelper.mergePlatformConfiguration(java.util.Properties)</inbound>
            <feature confirmed="yes">
                <name>com.sun.enterprise.glassfish.bootstrap.ASMainHelper$PlatformHelper.ASMainHelper$PlatformHelper()</name>
                <outbound type="feature" confirmed="no">java.lang.Object.Object()</outbound>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainHelper$EquinoxHelper.ASMainHelper$EquinoxHelper()</inbound>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainHelper$FelixHelper.ASMainHelper$FelixHelper()</inbound>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainHelper$KnopflerfishHelper.ASMainHelper$KnopflerfishHelper()</inbound>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainHelper$StaticHelper.ASMainHelper$StaticHelper()</inbound>
            </feature>
            <feature confirmed="yes">
                <name>com.sun.enterprise.glassfish.bootstrap.ASMainHelper$PlatformHelper.addFrameworkJars(com.sun.enterprise.glassfish.bootstrap.ClassPathBuilder)</name>
                <outbound type="class" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ClassPathBuilder</outbound>
                <outbound type="class" confirmed="no">java.io.IOException</outbound>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainHelper$ClassLoaderBuilder.addFrameworkJars()</inbound>
            </feature>
            <feature confirmed="yes">
                <name>com.sun.enterprise.glassfish.bootstrap.ASMainHelper$PlatformHelper.fwDir</name>
                <outbound type="class" confirmed="no">java.io.File</outbound>
            </feature>
            <feature confirmed="yes">
                <name>com.sun.enterprise.glassfish.bootstrap.ASMainHelper$PlatformHelper.getFrameworkConfigFile()</name>
                <outbound type="class" confirmed="no">java.io.File</outbound>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainHelper$PlatformHelper.readPlatformConfiguration()</inbound>
            </feature>
            <feature confirmed="yes">
                <name>com.sun.enterprise.glassfish.bootstrap.ASMainHelper$PlatformHelper.getPlatformHelper(java.util.Properties)</name>
                <outbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainHelper$2.$SwitchMap$com$sun$enterprise$glassfish$bootstrap$Constants$Platform</outbound>
                <outbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainHelper$EquinoxHelper.ASMainHelper$EquinoxHelper()</outbound>
                <outbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainHelper$FelixHelper.ASMainHelper$FelixHelper()</outbound>
                <outbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainHelper$KnopflerfishHelper.ASMainHelper$KnopflerfishHelper()</outbound>
                <outbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainHelper$PlatformHelper.init(java.util.Properties)</outbound>
                <outbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainHelper$StaticHelper.ASMainHelper$StaticHelper()</outbound>
                <outbound type="class" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.Constants$Platform</outbound>
                <outbound type="feature" confirmed="no">com.sun.enterprise.glassfish.bootstrap.Constants$Platform.ordinal()</outbound>
                <outbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.Constants$Platform.valueOf(java.lang.String)</outbound>
                <outbound type="class" confirmed="no">java.lang.Object</outbound>
                <outbound type="feature" confirmed="no">java.lang.RuntimeException.RuntimeException(java.lang.String)</outbound>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="class" confirmed="no">java.lang.StringBuilder</outbound>
                <outbound type="feature" confirmed="no">java.lang.StringBuilder.StringBuilder()</outbound>
                <outbound type="feature" confirmed="no">java.lang.StringBuilder.append(java.lang.Object)</outbound>
                <outbound type="feature" confirmed="no">java.lang.StringBuilder.append(java.lang.String)</outbound>
                <outbound type="feature" confirmed="no">java.lang.StringBuilder.toString()</outbound>
                <outbound type="class" confirmed="no">java.util.Properties</outbound>
                <outbound type="feature" confirmed="no">java.util.Properties.getProperty(java.lang.String)</outbound>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainHelper$ClassLoaderBuilder.addFrameworkJars()</inbound>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainHelper.mergePlatformConfiguration(java.util.Properties)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>com.sun.enterprise.glassfish.bootstrap.ASMainHelper$PlatformHelper.glassfishDir</name>
                <outbound type="class" confirmed="no">java.io.File</outbound>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainHelper$PlatformHelper.init(java.util.Properties)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>com.sun.enterprise.glassfish.bootstrap.ASMainHelper$PlatformHelper.init(java.util.Properties)</name>
                <outbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainHelper$PlatformHelper.glassfishDir</outbound>
                <outbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainHelper$PlatformHelper.properties</outbound>
                <outbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainHelper$PlatformHelper.setFwDir()</outbound>
                <outbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.StartupContextUtil.getInstallRoot(java.util.Properties)</outbound>
                <outbound type="class" confirmed="no">java.io.File</outbound>
                <outbound type="class" confirmed="no">java.util.Properties</outbound>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainHelper$PlatformHelper.getPlatformHelper(java.util.Properties)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>com.sun.enterprise.glassfish.bootstrap.ASMainHelper$PlatformHelper.properties</name>
                <outbound type="class" confirmed="no">java.util.Properties</outbound>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainHelper$PlatformHelper.init(java.util.Properties)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>com.sun.enterprise.glassfish.bootstrap.ASMainHelper$PlatformHelper.readPlatformConfiguration()</name>
                <outbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainHelper$PlatformHelper.getFrameworkConfigFile()</outbound>
                <outbound type="class" confirmed="no">java.io.File</outbound>
                <outbound type="feature" confirmed="no">java.io.FileInputStream.FileInputStream(java.io.File)</outbound>
                <outbound type="class" confirmed="no">java.io.IOException</outbound>
                <outbound type="class" confirmed="no">java.io.InputStream</outbound>
                <outbound type="feature" confirmed="no">java.io.InputStream.close()</outbound>
                <outbound type="class" confirmed="no">java.util.Properties</outbound>
                <outbound type="feature" confirmed="no">java.util.Properties.Properties()</outbound>
                <outbound type="feature" confirmed="no">java.util.Properties.load(java.io.InputStream)</outbound>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainHelper.mergePlatformConfiguration(java.util.Properties)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>com.sun.enterprise.glassfish.bootstrap.ASMainHelper$PlatformHelper.setFwDir()</name>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainHelper$PlatformHelper.init(java.util.Properties)</inbound>
            </feature>
        </class>
        <class confirmed="yes">
            <name>com.sun.enterprise.glassfish.bootstrap.ASMainHelper$StaticHelper</name>
            <outbound type="class" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainHelper$PlatformHelper</outbound>
            <feature confirmed="yes">
                <name>com.sun.enterprise.glassfish.bootstrap.ASMainHelper$StaticHelper.ASMainHelper$StaticHelper()</name>
                <outbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainHelper$PlatformHelper.ASMainHelper$PlatformHelper()</outbound>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainHelper$PlatformHelper.getPlatformHelper(java.util.Properties)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>com.sun.enterprise.glassfish.bootstrap.ASMainHelper$StaticHelper.addFrameworkJars(com.sun.enterprise.glassfish.bootstrap.ClassPathBuilder)</name>
                <outbound type="class" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ClassPathBuilder</outbound>
                <outbound type="class" confirmed="no">java.io.IOException</outbound>
            </feature>
            <feature confirmed="yes">
                <name>com.sun.enterprise.glassfish.bootstrap.ASMainHelper$StaticHelper.getFrameworkConfigFile()</name>
                <outbound type="class" confirmed="no">java.io.File</outbound>
            </feature>
            <feature confirmed="yes">
                <name>com.sun.enterprise.glassfish.bootstrap.ASMainHelper$StaticHelper.setFwDir()</name>
            </feature>
        </class>
        <class confirmed="yes">
            <name>com.sun.enterprise.glassfish.bootstrap.ASMainKnopflerFish</name>
            <outbound type="class" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainOSGi</outbound>
            <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainKnopflerFish$1.ASMainKnopflerFish$1(com.sun.enterprise.glassfish.bootstrap.ASMainKnopflerFish, java.lang.reflect.Method, java.lang.String[])</inbound>
            <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainKnopflerFish$1.this$0</inbound>
            <feature confirmed="yes">
                <name>com.sun.enterprise.glassfish.bootstrap.ASMainKnopflerFish.ASMainKnopflerFish()</name>
                <outbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainOSGi.ASMainOSGi()</outbound>
            </feature>
            <feature confirmed="yes">
                <name>com.sun.enterprise.glassfish.bootstrap.ASMainKnopflerFish.addFrameworkJars(com.sun.enterprise.glassfish.bootstrap.ClassPathBuilder)</name>
                <outbound type="feature" confirmed="no">com.sun.enterprise.glassfish.bootstrap.ASMainKnopflerFish.fwDir</outbound>
                <outbound type="class" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ClassPathBuilder</outbound>
                <outbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ClassPathBuilder.addJar(java.io.File)</outbound>
                <outbound type="class" confirmed="no">java.io.File</outbound>
                <outbound type="feature" confirmed="no">java.io.File.File(java.io.File, java.lang.String)</outbound>
                <outbound type="class" confirmed="no">java.io.IOException</outbound>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
            </feature>
            <feature confirmed="no">
                <name>com.sun.enterprise.glassfish.bootstrap.ASMainKnopflerFish.fwDir</name>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainKnopflerFish.addFrameworkJars(com.sun.enterprise.glassfish.bootstrap.ClassPathBuilder)</inbound>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainKnopflerFish.launchOSGiFW()</inbound>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainKnopflerFish.setFwDir()</inbound>
            </feature>
            <feature confirmed="yes">
                <name>com.sun.enterprise.glassfish.bootstrap.ASMainKnopflerFish.getFWMainClassName()</name>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainKnopflerFish.launchOSGiFW()</inbound>
            </feature>
            <feature confirmed="yes">
                <name>com.sun.enterprise.glassfish.bootstrap.ASMainKnopflerFish.getName()</name>
                <outbound type="class" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.Constants$Platform</outbound>
                <outbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.Constants$Platform.Knopflerfish</outbound>
                <outbound type="feature" confirmed="no">com.sun.enterprise.glassfish.bootstrap.Constants$Platform.toString()</outbound>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
            </feature>
            <feature confirmed="yes">
                <name>com.sun.enterprise.glassfish.bootstrap.ASMainKnopflerFish.getPreferedCacheDir()</name>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
            </feature>
            <feature confirmed="no">
                <name>com.sun.enterprise.glassfish.bootstrap.ASMainKnopflerFish.glassfishDir</name>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainKnopflerFish.setFwDir()</inbound>
            </feature>
            <feature confirmed="yes">
                <name>com.sun.enterprise.glassfish.bootstrap.ASMainKnopflerFish.launchOSGiFW()</name>
                <outbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainKnopflerFish$1.ASMainKnopflerFish$1(com.sun.enterprise.glassfish.bootstrap.ASMainKnopflerFish, java.lang.reflect.Method, java.lang.String[])</outbound>
                <outbound type="feature" confirmed="no">com.sun.enterprise.glassfish.bootstrap.ASMainKnopflerFish.fwDir</outbound>
                <outbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainKnopflerFish.getFWMainClassName()</outbound>
                <outbound type="feature" confirmed="no">com.sun.enterprise.glassfish.bootstrap.ASMainKnopflerFish.launcherCL</outbound>
                <outbound type="class" confirmed="no">java.io.File</outbound>
                <outbound type="feature" confirmed="no">java.io.File.File(java.io.File, java.lang.String)</outbound>
                <outbound type="feature" confirmed="no">java.io.File.getAbsolutePath()</outbound>
                <outbound type="feature" confirmed="no">java.io.File.toURI()</outbound>
                <outbound type="class" confirmed="no">java.lang.Class</outbound>
                <outbound type="feature" confirmed="no">java.lang.Class.getMethod(java.lang.String, java.lang.Class[])</outbound>
                <outbound type="class" confirmed="no">java.lang.ClassLoader</outbound>
                <outbound type="feature" confirmed="no">java.lang.ClassLoader.loadClass(java.lang.String)</outbound>
                <outbound type="class" confirmed="no">java.lang.Exception</outbound>
                <outbound type="feature" confirmed="no">java.lang.Object.getClass()</outbound>
                <outbound type="class" confirmed="no">java.lang.Runnable</outbound>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="feature" confirmed="no">java.lang.System.setProperty(java.lang.String, java.lang.String)</outbound>
                <outbound type="feature" confirmed="no">java.lang.Thread.Thread(java.lang.Runnable, java.lang.String)</outbound>
                <outbound type="feature" confirmed="no">java.lang.Thread.setDaemon(boolean)</outbound>
                <outbound type="feature" confirmed="no">java.lang.Thread.start()</outbound>
                <outbound type="class" confirmed="no">java.lang.reflect.Method</outbound>
                <outbound type="class" confirmed="no">java.net.URI</outbound>
                <outbound type="feature" confirmed="no">java.net.URI.toString()</outbound>
                <outbound type="feature" confirmed="no">java.net.URI.toURL()</outbound>
                <outbound type="class" confirmed="no">java.net.URL</outbound>
                <outbound type="feature" confirmed="no">java.net.URL.toString()</outbound>
            </feature>
            <feature confirmed="no">
                <name>com.sun.enterprise.glassfish.bootstrap.ASMainKnopflerFish.launcherCL</name>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainKnopflerFish.launchOSGiFW()</inbound>
            </feature>
            <feature confirmed="yes">
                <name>com.sun.enterprise.glassfish.bootstrap.ASMainKnopflerFish.setFwDir()</name>
                <outbound type="feature" confirmed="no">com.sun.enterprise.glassfish.bootstrap.ASMainKnopflerFish.fwDir</outbound>
                <outbound type="feature" confirmed="no">com.sun.enterprise.glassfish.bootstrap.ASMainKnopflerFish.glassfishDir</outbound>
                <outbound type="class" confirmed="no">java.io.File</outbound>
                <outbound type="feature" confirmed="no">java.io.File.File(java.io.File, java.lang.String)</outbound>
                <outbound type="feature" confirmed="no">java.io.File.File(java.lang.String)</outbound>
                <outbound type="feature" confirmed="no">java.io.File.exists()</outbound>
                <outbound type="feature" confirmed="no">java.io.File.getAbsolutePath()</outbound>
                <outbound type="feature" confirmed="no">java.lang.RuntimeException.RuntimeException(java.lang.String)</outbound>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="class" confirmed="no">java.lang.StringBuilder</outbound>
                <outbound type="feature" confirmed="no">java.lang.StringBuilder.StringBuilder()</outbound>
                <outbound type="feature" confirmed="no">java.lang.StringBuilder.append(java.lang.String)</outbound>
                <outbound type="feature" confirmed="no">java.lang.StringBuilder.toString()</outbound>
                <outbound type="feature" confirmed="no">java.lang.System.getenv(java.lang.String)</outbound>
            </feature>
        </class>
        <class confirmed="yes">
            <name>com.sun.enterprise.glassfish.bootstrap.ASMainKnopflerFish$1</name>
            <outbound type="class" confirmed="no">java.lang.Object</outbound>
            <outbound type="class" confirmed="no">java.lang.Runnable</outbound>
            <feature confirmed="yes">
                <name>com.sun.enterprise.glassfish.bootstrap.ASMainKnopflerFish$1.ASMainKnopflerFish$1(com.sun.enterprise.glassfish.bootstrap.ASMainKnopflerFish, java.lang.reflect.Method, java.lang.String[])</name>
                <outbound type="class" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainKnopflerFish</outbound>
                <outbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainKnopflerFish$1.this$0</outbound>
                <outbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainKnopflerFish$1.val$args</outbound>
                <outbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainKnopflerFish$1.val$m</outbound>
                <outbound type="feature" confirmed="no">java.lang.Object.Object()</outbound>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="class" confirmed="no">java.lang.reflect.Method</outbound>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainKnopflerFish.launchOSGiFW()</inbound>
            </feature>
            <feature confirmed="yes">
                <name>com.sun.enterprise.glassfish.bootstrap.ASMainKnopflerFish$1.run()</name>
                <outbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainKnopflerFish$1.val$args</outbound>
                <outbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainKnopflerFish$1.val$m</outbound>
                <outbound type="class" confirmed="no">java.lang.IllegalAccessException</outbound>
                <outbound type="class" confirmed="no">java.lang.Object</outbound>
                <outbound type="feature" confirmed="no">java.lang.RuntimeException.RuntimeException(java.lang.Throwable)</outbound>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="class" confirmed="no">java.lang.Throwable</outbound>
                <outbound type="class" confirmed="no">java.lang.reflect.InvocationTargetException</outbound>
                <outbound type="class" confirmed="no">java.lang.reflect.Method</outbound>
                <outbound type="feature" confirmed="no">java.lang.reflect.Method.invoke(java.lang.Object, java.lang.Object[])</outbound>
            </feature>
            <feature confirmed="yes">
                <name>com.sun.enterprise.glassfish.bootstrap.ASMainKnopflerFish$1.this$0</name>
                <outbound type="class" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainKnopflerFish</outbound>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainKnopflerFish$1.ASMainKnopflerFish$1(com.sun.enterprise.glassfish.bootstrap.ASMainKnopflerFish, java.lang.reflect.Method, java.lang.String[])</inbound>
            </feature>
            <feature confirmed="yes">
                <name>com.sun.enterprise.glassfish.bootstrap.ASMainKnopflerFish$1.val$args</name>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainKnopflerFish$1.ASMainKnopflerFish$1(com.sun.enterprise.glassfish.bootstrap.ASMainKnopflerFish, java.lang.reflect.Method, java.lang.String[])</inbound>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainKnopflerFish$1.run()</inbound>
            </feature>
            <feature confirmed="yes">
                <name>com.sun.enterprise.glassfish.bootstrap.ASMainKnopflerFish$1.val$m</name>
                <outbound type="class" confirmed="no">java.lang.reflect.Method</outbound>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainKnopflerFish$1.ASMainKnopflerFish$1(com.sun.enterprise.glassfish.bootstrap.ASMainKnopflerFish, java.lang.reflect.Method, java.lang.String[])</inbound>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainKnopflerFish$1.run()</inbound>
            </feature>
        </class>
        <class confirmed="yes">
            <name>com.sun.enterprise.glassfish.bootstrap.ASMainNonOSGi</name>
            <outbound type="class" confirmed="no">com.sun.enterprise.module.bootstrap.PlatformMain</outbound>
            <inbound type="class" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASEmbedded</inbound>
            <inbound type="class" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainStatic</inbound>
            <feature confirmed="yes">
                <name>com.sun.enterprise.glassfish.bootstrap.ASMainNonOSGi.ASMainNonOSGi()</name>
                <outbound type="feature" confirmed="no">com.sun.enterprise.module.bootstrap.PlatformMain.PlatformMain()</outbound>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASEmbedded.ASEmbedded()</inbound>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainStatic.ASMainStatic()</inbound>
            </feature>
            <feature confirmed="yes">
                <name>com.sun.enterprise.glassfish.bootstrap.ASMainNonOSGi.createCache(java.io.File)</name>
                <outbound type="class" confirmed="no">java.io.File</outbound>
                <outbound type="class" confirmed="no">java.io.IOException</outbound>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainNonOSGi.flushAndCreate(java.io.File, long)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>com.sun.enterprise.glassfish.bootstrap.ASMainNonOSGi.flushAndCreate(java.io.File, long)</name>
                <outbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainNonOSGi.createCache(java.io.File)</outbound>
                <outbound type="feature" confirmed="no">com.sun.enterprise.glassfish.bootstrap.ASMainNonOSGi.getLogger()</outbound>
                <outbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainNonOSGi.saveCacheInformation(java.io.File, java.lang.String, long)</outbound>
                <outbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.Util.deleteRecursive(java.io.File)</outbound>
                <outbound type="class" confirmed="no">java.io.File</outbound>
                <outbound type="feature" confirmed="no">java.io.File.exists()</outbound>
                <outbound type="feature" confirmed="no">java.io.File.isDirectory()</outbound>
                <outbound type="feature" confirmed="no">java.io.File.toURI()</outbound>
                <outbound type="class" confirmed="no">java.io.IOException</outbound>
                <outbound type="feature" confirmed="no">java.io.IOException.IOException(java.lang.String)</outbound>
                <outbound type="class" confirmed="no">java.lang.Object</outbound>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="class" confirmed="no">java.lang.StringBuilder</outbound>
                <outbound type="feature" confirmed="no">java.lang.StringBuilder.StringBuilder()</outbound>
                <outbound type="feature" confirmed="no">java.lang.StringBuilder.append(java.lang.Object)</outbound>
                <outbound type="feature" confirmed="no">java.lang.StringBuilder.append(java.lang.String)</outbound>
                <outbound type="feature" confirmed="no">java.lang.StringBuilder.toString()</outbound>
                <outbound type="class" confirmed="no">java.lang.Throwable</outbound>
                <outbound type="class" confirmed="no">java.net.MalformedURLException</outbound>
                <outbound type="class" confirmed="no">java.net.URI</outbound>
                <outbound type="feature" confirmed="no">java.net.URI.toURL()</outbound>
                <outbound type="class" confirmed="no">java.net.URL</outbound>
                <outbound type="feature" confirmed="no">java.net.URL.toString()</outbound>
                <outbound type="class" confirmed="no">java.util.logging.Level</outbound>
                <outbound type="feature" confirmed="no">java.util.logging.Level.SEVERE</outbound>
                <outbound type="class" confirmed="no">java.util.logging.Logger</outbound>
                <outbound type="feature" confirmed="no">java.util.logging.Logger.info(java.lang.String)</outbound>
                <outbound type="feature" confirmed="no">java.util.logging.Logger.log(java.util.logging.Level, java.lang.String, java.lang.Throwable)</outbound>
                <outbound type="feature" confirmed="no">java.util.logging.Logger.warning(java.lang.String)</outbound>
            </feature>
            <feature confirmed="no">
                <name>com.sun.enterprise.glassfish.bootstrap.ASMainNonOSGi.getLogger()</name>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainNonOSGi.flushAndCreate(java.io.File, long)</inbound>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainNonOSGi.isCacheOutdated(long, java.io.File)</inbound>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainNonOSGi.loadCacheInformation(java.io.File)</inbound>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainNonOSGi.saveCacheInformation(java.io.File, java.lang.String, long)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>com.sun.enterprise.glassfish.bootstrap.ASMainNonOSGi.isCacheOutdated(long, java.io.File)</name>
                <outbound type="feature" confirmed="no">com.sun.enterprise.glassfish.bootstrap.ASMainNonOSGi.getLogger()</outbound>
                <outbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainNonOSGi.loadCacheInformation(java.io.File)</outbound>
                <outbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainNonOSGi.parse(java.util.Properties, java.lang.String)</outbound>
                <outbound type="class" confirmed="no">java.io.File</outbound>
                <outbound type="feature" confirmed="no">java.io.File.toURI()</outbound>
                <outbound type="class" confirmed="no">java.lang.Object</outbound>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="feature" confirmed="no">java.lang.String.equals(java.lang.Object)</outbound>
                <outbound type="class" confirmed="no">java.lang.Throwable</outbound>
                <outbound type="class" confirmed="no">java.net.MalformedURLException</outbound>
                <outbound type="class" confirmed="no">java.net.URI</outbound>
                <outbound type="feature" confirmed="no">java.net.URI.toURL()</outbound>
                <outbound type="class" confirmed="no">java.net.URL</outbound>
                <outbound type="feature" confirmed="no">java.net.URL.toString()</outbound>
                <outbound type="class" confirmed="no">java.util.Properties</outbound>
                <outbound type="feature" confirmed="no">java.util.Properties.getProperty(java.lang.String)</outbound>
                <outbound type="class" confirmed="no">java.util.logging.Level</outbound>
                <outbound type="feature" confirmed="no">java.util.logging.Level.SEVERE</outbound>
                <outbound type="class" confirmed="no">java.util.logging.Logger</outbound>
                <outbound type="feature" confirmed="no">java.util.logging.Logger.log(java.util.logging.Level, java.lang.String, java.lang.Throwable)</outbound>
            </feature>
            <feature confirmed="yes">
                <name>com.sun.enterprise.glassfish.bootstrap.ASMainNonOSGi.loadCacheInformation(java.io.File)</name>
                <outbound type="feature" confirmed="no">com.sun.enterprise.glassfish.bootstrap.ASMainNonOSGi.getLogger()</outbound>
                <outbound type="feature" confirmed="no">java.io.BufferedInputStream.BufferedInputStream(java.io.InputStream)</outbound>
                <outbound type="class" confirmed="no">java.io.File</outbound>
                <outbound type="feature" confirmed="no">java.io.File.File(java.io.File, java.lang.String)</outbound>
                <outbound type="feature" confirmed="no">java.io.File.exists()</outbound>
                <outbound type="feature" confirmed="no">java.io.File.getName()</outbound>
                <outbound type="feature" confirmed="no">java.io.File.getParentFile()</outbound>
                <outbound type="feature" confirmed="no">java.io.File.toURI()</outbound>
                <outbound type="feature" confirmed="no">java.io.FileInputStream.FileInputStream(java.io.File)</outbound>
                <outbound type="class" confirmed="no">java.io.IOException</outbound>
                <outbound type="class" confirmed="no">java.io.InputStream</outbound>
                <outbound type="feature" confirmed="no">java.io.InputStream.close()</outbound>
                <outbound type="feature" confirmed="no">java.lang.Long.parseLong(java.lang.String)</outbound>
                <outbound type="class" confirmed="no">java.lang.NumberFormatException</outbound>
                <outbound type="class" confirmed="no">java.lang.Object</outbound>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="feature" confirmed="no">java.lang.String.equals(java.lang.Object)</outbound>
                <outbound type="class" confirmed="no">java.lang.StringBuilder</outbound>
                <outbound type="feature" confirmed="no">java.lang.StringBuilder.StringBuilder()</outbound>
                <outbound type="feature" confirmed="no">java.lang.StringBuilder.append(java.lang.String)</outbound>
                <outbound type="feature" confirmed="no">java.lang.StringBuilder.toString()</outbound>
                <outbound type="class" confirmed="no">java.net.URI</outbound>
                <outbound type="feature" confirmed="no">java.net.URI.toURL()</outbound>
                <outbound type="class" confirmed="no">java.net.URL</outbound>
                <outbound type="feature" confirmed="no">java.net.URL.toString()</outbound>
                <outbound type="class" confirmed="no">java.util.Properties</outbound>
                <outbound type="feature" confirmed="no">java.util.Properties.Properties()</outbound>
                <outbound type="feature" confirmed="no">java.util.Properties.getProperty(java.lang.String)</outbound>
                <outbound type="feature" confirmed="no">java.util.Properties.load(java.io.InputStream)</outbound>
                <outbound type="class" confirmed="no">java.util.logging.Logger</outbound>
                <outbound type="feature" confirmed="no">java.util.logging.Logger.info(java.lang.String)</outbound>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainNonOSGi.isCacheOutdated(long, java.io.File)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>com.sun.enterprise.glassfish.bootstrap.ASMainNonOSGi.parse(java.util.Properties, java.lang.String)</name>
                <outbound type="feature" confirmed="no">java.lang.Long.parseLong(java.lang.String)</outbound>
                <outbound type="class" confirmed="no">java.lang.NumberFormatException</outbound>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="class" confirmed="no">java.util.Properties</outbound>
                <outbound type="feature" confirmed="no">java.util.Properties.getProperty(java.lang.String)</outbound>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainNonOSGi.isCacheOutdated(long, java.io.File)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>com.sun.enterprise.glassfish.bootstrap.ASMainNonOSGi.saveCacheInformation(java.io.File, java.lang.String, long)</name>
                <outbound type="feature" confirmed="no">com.sun.enterprise.glassfish.bootstrap.ASMainNonOSGi.getLogger()</outbound>
                <outbound type="class" confirmed="no">java.io.File</outbound>
                <outbound type="feature" confirmed="no">java.io.File.File(java.io.File, java.lang.String)</outbound>
                <outbound type="feature" confirmed="no">java.io.File.createNewFile()</outbound>
                <outbound type="feature" confirmed="no">java.io.File.delete()</outbound>
                <outbound type="feature" confirmed="no">java.io.File.getName()</outbound>
                <outbound type="feature" confirmed="no">java.io.File.getParentFile()</outbound>
                <outbound type="feature" confirmed="no">java.io.File.toURI()</outbound>
                <outbound type="feature" confirmed="no">java.io.FileOutputStream.FileOutputStream(java.io.File)</outbound>
                <outbound type="class" confirmed="no">java.io.IOException</outbound>
                <outbound type="feature" confirmed="no">java.io.ObjectOutputStream.ObjectOutputStream(java.io.OutputStream)</outbound>
                <outbound type="feature" confirmed="no">java.io.ObjectOutputStream.close()</outbound>
                <outbound type="class" confirmed="no">java.io.OutputStream</outbound>
                <outbound type="feature" confirmed="no">java.lang.Long.Long(long)</outbound>
                <outbound type="feature" confirmed="no">java.lang.Long.toString()</outbound>
                <outbound type="class" confirmed="no">java.lang.Object</outbound>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="class" confirmed="no">java.lang.StringBuilder</outbound>
                <outbound type="feature" confirmed="no">java.lang.StringBuilder.StringBuilder()</outbound>
                <outbound type="feature" confirmed="no">java.lang.StringBuilder.append(java.lang.String)</outbound>
                <outbound type="feature" confirmed="no">java.lang.StringBuilder.toString()</outbound>
                <outbound type="class" confirmed="no">java.net.URI</outbound>
                <outbound type="feature" confirmed="no">java.net.URI.toURL()</outbound>
                <outbound type="class" confirmed="no">java.net.URL</outbound>
                <outbound type="feature" confirmed="no">java.net.URL.toString()</outbound>
                <outbound type="feature" confirmed="no">java.util.Properties.Properties()</outbound>
                <outbound type="feature" confirmed="no">java.util.Properties.put(java.lang.Object, java.lang.Object)</outbound>
                <outbound type="feature" confirmed="no">java.util.Properties.store(java.io.OutputStream, java.lang.String)</outbound>
                <outbound type="class" confirmed="no">java.util.logging.Logger</outbound>
                <outbound type="feature" confirmed="no">java.util.logging.Logger.info(java.lang.String)</outbound>
                <outbound type="feature" confirmed="no">java.util.logging.Logger.warning(java.lang.String)</outbound>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainNonOSGi.flushAndCreate(java.io.File, long)</inbound>
            </feature>
            <feature confirmed="no">
                <name>com.sun.enterprise.glassfish.bootstrap.ASMainNonOSGi.setContext(java.lang.Object)</name>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainStatic.start(java.util.Properties)</inbound>
            </feature>
        </class>
        <class confirmed="yes">
            <name>com.sun.enterprise.glassfish.bootstrap.ASMainOSGi</name>
            <outbound type="class" confirmed="no">com.sun.enterprise.module.bootstrap.PlatformMain</outbound>
            <inbound type="class" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainEquinox</inbound>
            <inbound type="class" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainFelix</inbound>
            <inbound type="class" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainKnopflerFish</inbound>
            <feature confirmed="yes">
                <name>com.sun.enterprise.glassfish.bootstrap.ASMainOSGi.ASMainOSGi()</name>
                <outbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainOSGi.additionalJars</outbound>
                <outbound type="feature" confirmed="no">com.sun.enterprise.module.bootstrap.PlatformMain.PlatformMain()</outbound>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainEquinox.ASMainEquinox()</inbound>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainFelix.ASMainFelix()</inbound>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainKnopflerFish.ASMainKnopflerFish()</inbound>
            </feature>
            <feature confirmed="yes">
                <name>com.sun.enterprise.glassfish.bootstrap.ASMainOSGi.addFrameworkJars(com.sun.enterprise.glassfish.bootstrap.ClassPathBuilder)</name>
                <outbound type="class" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ClassPathBuilder</outbound>
                <outbound type="class" confirmed="no">java.io.IOException</outbound>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainOSGi.setupLauncherClassLoader()</inbound>
            </feature>
            <feature confirmed="yes">
                <name>com.sun.enterprise.glassfish.bootstrap.ASMainOSGi.addJDKToolsJar(com.sun.enterprise.glassfish.bootstrap.ClassPathBuilder)</name>
                <outbound type="feature" confirmed="no">com.sun.enterprise.glassfish.bootstrap.ASMainOSGi.logger</outbound>
                <outbound type="class" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ClassPathBuilder</outbound>
                <outbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ClassPathBuilder.addJar(java.io.File)</outbound>
                <outbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.Util.getJDKToolsJar()</outbound>
                <outbound type="class" confirmed="no">java.io.File</outbound>
                <outbound type="feature" confirmed="no">java.io.File.exists()</outbound>
                <outbound type="class" confirmed="no">java.io.IOException</outbound>
                <outbound type="feature" confirmed="no">java.lang.Error.Error(java.lang.Throwable)</outbound>
                <outbound type="class" confirmed="no">java.lang.Object</outbound>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="class" confirmed="no">java.lang.StringBuilder</outbound>
                <outbound type="feature" confirmed="no">java.lang.StringBuilder.StringBuilder()</outbound>
                <outbound type="feature" confirmed="no">java.lang.StringBuilder.append(java.lang.Object)</outbound>
                <outbound type="feature" confirmed="no">java.lang.StringBuilder.append(java.lang.String)</outbound>
                <outbound type="feature" confirmed="no">java.lang.StringBuilder.toString()</outbound>
                <outbound type="class" confirmed="no">java.lang.Throwable</outbound>
                <outbound type="class" confirmed="no">java.util.logging.Logger</outbound>
                <outbound type="feature" confirmed="no">java.util.logging.Logger.fine(java.lang.String)</outbound>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainOSGi.setupLauncherClassLoader()</inbound>
            </feature>
            <feature confirmed="yes">
                <name>com.sun.enterprise.glassfish.bootstrap.ASMainOSGi.additionalJars</name>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainOSGi.ASMainOSGi()</inbound>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainOSGi.setupLauncherClassLoader()</inbound>
            </feature>
            <feature confirmed="yes">
                <name>com.sun.enterprise.glassfish.bootstrap.ASMainOSGi.configureEnvironment()</name>
                <outbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainOSGi.configureProvisioningBundle()</outbound>
                <outbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainOSGi.ctx</outbound>
                <outbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainOSGi.domainDir</outbound>
                <outbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainOSGi.getCacheDir()</outbound>
                <outbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainOSGi.glassfishDir</outbound>
                <outbound type="feature" confirmed="no">com.sun.enterprise.glassfish.bootstrap.ASMainOSGi.logger</outbound>
                <outbound type="class" confirmed="no">java.io.File</outbound>
                <outbound type="feature" confirmed="no">java.io.File.getAbsolutePath()</outbound>
                <outbound type="feature" confirmed="no">java.io.File.toURI()</outbound>
                <outbound type="class" confirmed="no">java.io.IOException</outbound>
                <outbound type="feature" confirmed="no">java.io.StringWriter.StringWriter()</outbound>
                <outbound type="class" confirmed="no">java.io.Writer</outbound>
                <outbound type="class" confirmed="no">java.lang.Exception</outbound>
                <outbound type="feature" confirmed="no">java.lang.Object.toString()</outbound>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="feature" confirmed="no">java.lang.System.setProperty(java.lang.String, java.lang.String)</outbound>
                <outbound type="class" confirmed="no">java.net.URI</outbound>
                <outbound type="feature" confirmed="no">java.net.URI.toString()</outbound>
                <outbound type="class" confirmed="no">java.util.Properties</outbound>
                <outbound type="feature" confirmed="no">java.util.Properties.store(java.io.Writer, java.lang.String)</outbound>
                <outbound type="class" confirmed="no">java.util.logging.Logger</outbound>
                <outbound type="feature" confirmed="no">java.util.logging.Logger.info(java.lang.String)</outbound>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainOSGi.start(java.util.Properties)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>com.sun.enterprise.glassfish.bootstrap.ASMainOSGi.configureProvisioningBundle()</name>
                <outbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainOSGi.glassfishDir</outbound>
                <outbound type="class" confirmed="no">java.io.File</outbound>
                <outbound type="feature" confirmed="no">java.io.File.File(java.io.File, java.lang.String)</outbound>
                <outbound type="feature" confirmed="no">java.io.File.getAbsolutePath()</outbound>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="feature" confirmed="no">java.lang.System.getProperty(java.lang.String)</outbound>
                <outbound type="feature" confirmed="no">java.lang.System.setProperty(java.lang.String, java.lang.String)</outbound>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainOSGi.configureEnvironment()</inbound>
            </feature>
            <feature confirmed="yes">
                <name>com.sun.enterprise.glassfish.bootstrap.ASMainOSGi.ctx</name>
                <outbound type="class" confirmed="no">java.util.Properties</outbound>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainOSGi.configureEnvironment()</inbound>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainOSGi.start(java.util.Properties)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>com.sun.enterprise.glassfish.bootstrap.ASMainOSGi.domainDir</name>
                <outbound type="class" confirmed="no">java.io.File</outbound>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainOSGi.configureEnvironment()</inbound>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainOSGi.getCacheDir()</inbound>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainOSGi.start(java.util.Properties)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>com.sun.enterprise.glassfish.bootstrap.ASMainOSGi.findDerbyClient(com.sun.enterprise.glassfish.bootstrap.ClassPathBuilder)</name>
                <outbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainHelper.parseAsEnv(java.io.File)</outbound>
                <outbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainOSGi.glassfishDir</outbound>
                <outbound type="feature" confirmed="no">com.sun.enterprise.glassfish.bootstrap.ASMainOSGi.logger</outbound>
                <outbound type="class" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ClassPathBuilder</outbound>
                <outbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ClassPathBuilder.addGlob(java.io.File, java.lang.String[])</outbound>
                <outbound type="class" confirmed="no">java.io.File</outbound>
                <outbound type="feature" confirmed="no">java.io.File.File(java.io.File, java.lang.String)</outbound>
                <outbound type="feature" confirmed="no">java.io.File.File(java.lang.String)</outbound>
                <outbound type="feature" confirmed="no">java.io.File.File(java.lang.String, java.lang.String)</outbound>
                <outbound type="feature" confirmed="no">java.io.File.exists()</outbound>
                <outbound type="class" confirmed="no">java.io.IOException</outbound>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="feature" confirmed="no">java.lang.String.compareTo(java.lang.String)</outbound>
                <outbound type="feature" confirmed="no">java.lang.System.getProperty(java.lang.String)</outbound>
                <outbound type="class" confirmed="no">java.util.Properties</outbound>
                <outbound type="feature" confirmed="no">java.util.Properties.getProperty(java.lang.String)</outbound>
                <outbound type="class" confirmed="no">java.util.logging.Logger</outbound>
                <outbound type="feature" confirmed="no">java.util.logging.Logger.info(java.lang.String)</outbound>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainOSGi.setupLauncherClassLoader()</inbound>
            </feature>
            <feature confirmed="yes">
                <name>com.sun.enterprise.glassfish.bootstrap.ASMainOSGi.fwDir</name>
                <outbound type="class" confirmed="no">java.io.File</outbound>
            </feature>
            <feature confirmed="yes">
                <name>com.sun.enterprise.glassfish.bootstrap.ASMainOSGi.getCacheDir()</name>
                <outbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainOSGi.domainDir</outbound>
                <outbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainOSGi.getPreferedCacheDir()</outbound>
                <outbound type="class" confirmed="no">java.io.File</outbound>
                <outbound type="feature" confirmed="no">java.io.File.File(java.io.File, java.lang.String)</outbound>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainOSGi.configureEnvironment()</inbound>
            </feature>
            <feature confirmed="yes">
                <name>com.sun.enterprise.glassfish.bootstrap.ASMainOSGi.getPreferedCacheDir()</name>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainOSGi.getCacheDir()</inbound>
            </feature>
            <feature confirmed="yes">
                <name>com.sun.enterprise.glassfish.bootstrap.ASMainOSGi.glassfishDir</name>
                <outbound type="class" confirmed="no">java.io.File</outbound>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainOSGi.configureEnvironment()</inbound>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainOSGi.configureProvisioningBundle()</inbound>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainOSGi.findDerbyClient(com.sun.enterprise.glassfish.bootstrap.ClassPathBuilder)</inbound>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainOSGi.setupLauncherClassLoader()</inbound>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainOSGi.start(java.util.Properties)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>com.sun.enterprise.glassfish.bootstrap.ASMainOSGi.launchOSGiFW()</name>
                <outbound type="class" confirmed="no">java.lang.Exception</outbound>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainOSGi.start(java.util.Properties)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>com.sun.enterprise.glassfish.bootstrap.ASMainOSGi.launcherCL</name>
                <outbound type="class" confirmed="no">java.lang.ClassLoader</outbound>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainOSGi.setupLauncherClassLoader()</inbound>
            </feature>
            <feature confirmed="no">
                <name>com.sun.enterprise.glassfish.bootstrap.ASMainOSGi.logger</name>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainOSGi.addJDKToolsJar(com.sun.enterprise.glassfish.bootstrap.ClassPathBuilder)</inbound>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainOSGi.configureEnvironment()</inbound>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainOSGi.findDerbyClient(com.sun.enterprise.glassfish.bootstrap.ClassPathBuilder)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>com.sun.enterprise.glassfish.bootstrap.ASMainOSGi.setFwDir()</name>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainOSGi.start(java.util.Properties)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>com.sun.enterprise.glassfish.bootstrap.ASMainOSGi.setupLauncherClassLoader()</name>
                <outbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainOSGi.addFrameworkJars(com.sun.enterprise.glassfish.bootstrap.ClassPathBuilder)</outbound>
                <outbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainOSGi.addJDKToolsJar(com.sun.enterprise.glassfish.bootstrap.ClassPathBuilder)</outbound>
                <outbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainOSGi.additionalJars</outbound>
                <outbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainOSGi.findDerbyClient(com.sun.enterprise.glassfish.bootstrap.ClassPathBuilder)</outbound>
                <outbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainOSGi.glassfishDir</outbound>
                <outbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainOSGi.launcherCL</outbound>
                <outbound type="class" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ClassPathBuilder</outbound>
                <outbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ClassPathBuilder.ClassPathBuilder(java.lang.ClassLoader)</outbound>
                <outbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ClassPathBuilder.addGlob(java.io.File, java.lang.String[])</outbound>
                <outbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ClassPathBuilder.create()</outbound>
                <outbound type="class" confirmed="no">java.io.File</outbound>
                <outbound type="feature" confirmed="no">java.io.File.File(java.io.File, java.lang.String)</outbound>
                <outbound type="class" confirmed="no">java.io.IOException</outbound>
                <outbound type="class" confirmed="no">java.lang.ClassLoader</outbound>
                <outbound type="feature" confirmed="no">java.lang.ClassLoader.getParent()</outbound>
                <outbound type="feature" confirmed="no">java.lang.ClassLoader.getSystemClassLoader()</outbound>
                <outbound type="feature" confirmed="no">java.lang.Error.Error(java.lang.Throwable)</outbound>
                <outbound type="class" confirmed="no">java.lang.Exception</outbound>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="class" confirmed="no">java.lang.Thread</outbound>
                <outbound type="feature" confirmed="no">java.lang.Thread.currentThread()</outbound>
                <outbound type="feature" confirmed="no">java.lang.Thread.setContextClassLoader(java.lang.ClassLoader)</outbound>
                <outbound type="class" confirmed="no">java.lang.Throwable</outbound>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainOSGi.start(java.util.Properties)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>com.sun.enterprise.glassfish.bootstrap.ASMainOSGi.start(java.util.Properties)</name>
                <outbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainOSGi.configureEnvironment()</outbound>
                <outbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainOSGi.ctx</outbound>
                <outbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainOSGi.domainDir</outbound>
                <outbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainOSGi.glassfishDir</outbound>
                <outbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainOSGi.launchOSGiFW()</outbound>
                <outbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainOSGi.setFwDir()</outbound>
                <outbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainOSGi.setupLauncherClassLoader()</outbound>
                <outbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.StartupContextUtil.getInstallRoot(java.util.Properties)</outbound>
                <outbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.StartupContextUtil.getInstanceRoot(java.util.Properties)</outbound>
                <outbound type="class" confirmed="no">java.io.File</outbound>
                <outbound type="class" confirmed="no">java.lang.Exception</outbound>
                <outbound type="class" confirmed="no">java.util.Properties</outbound>
            </feature>
        </class>
        <class confirmed="yes">
            <name>com.sun.enterprise.glassfish.bootstrap.ASMainStatic</name>
            <outbound type="class" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainNonOSGi</outbound>
            <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainStatic$1$1.createHabitat(com.sun.enterprise.module.ModulesRegistry, com.sun.enterprise.module.bootstrap.StartupContext)</inbound>
            <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainStatic$1.ASMainStatic$1(com.sun.enterprise.glassfish.bootstrap.ASMainStatic, java.lang.ClassLoader, com.sun.enterprise.module.impl.ModulesRegistryImpl, com.sun.enterprise.module.bootstrap.StartupContext)</inbound>
            <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainStatic$1.run()</inbound>
            <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainStatic$1.this$0</inbound>
            <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainStatic$ModuleInfo.ASMainStatic$ModuleInfo(com.sun.enterprise.glassfish.bootstrap.ASMainStatic, java.lang.String, java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainStatic$ModuleInfo.ASMainStatic$ModuleInfo(com.sun.enterprise.glassfish.bootstrap.ASMainStatic, java.lang.String, java.lang.String, com.sun.enterprise.glassfish.bootstrap.ASMainStatic$1)</inbound>
            <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainStatic$ModuleInfo.this$0</inbound>
            <feature confirmed="yes">
                <name>com.sun.enterprise.glassfish.bootstrap.ASMainStatic.ASMainStatic()</name>
                <outbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainNonOSGi.ASMainNonOSGi()</outbound>
            </feature>
            <feature confirmed="yes">
                <name>com.sun.enterprise.glassfish.bootstrap.ASMainStatic.access$000(com.sun.enterprise.glassfish.bootstrap.ASMainStatic)</name>
                <outbound type="feature" confirmed="no">com.sun.enterprise.glassfish.bootstrap.ASMainStatic.logger</outbound>
                <outbound type="class" confirmed="no">java.util.logging.Logger</outbound>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainStatic$1$1.createHabitat(com.sun.enterprise.module.ModulesRegistry, com.sun.enterprise.module.bootstrap.StartupContext)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>com.sun.enterprise.glassfish.bootstrap.ASMainStatic.access$102(com.sun.enterprise.glassfish.bootstrap.ASMainStatic, org.jvnet.hk2.component.Habitat)</name>
                <outbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainStatic.habitat</outbound>
                <outbound type="class" confirmed="no">org.jvnet.hk2.component.Habitat</outbound>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainStatic$1$1.createHabitat(com.sun.enterprise.module.ModulesRegistry, com.sun.enterprise.module.bootstrap.StartupContext)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>com.sun.enterprise.glassfish.bootstrap.ASMainStatic.access$200(com.sun.enterprise.glassfish.bootstrap.ASMainStatic)</name>
                <outbound type="feature" confirmed="no">com.sun.enterprise.glassfish.bootstrap.ASMainStatic.logger</outbound>
                <outbound type="class" confirmed="no">java.util.logging.Logger</outbound>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainStatic$1.run()</inbound>
            </feature>
            <feature confirmed="yes">
                <name>com.sun.enterprise.glassfish.bootstrap.ASMainStatic.configureEnvironment()</name>
                <outbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainStatic.domainDir</outbound>
                <outbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainStatic.getPreferedCacheDir()</outbound>
                <outbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainStatic.glassfishDir</outbound>
                <outbound type="class" confirmed="no">java.io.File</outbound>
                <outbound type="feature" confirmed="no">java.io.File.File(java.io.File, java.lang.String)</outbound>
                <outbound type="feature" confirmed="no">java.io.File.getAbsolutePath()</outbound>
                <outbound type="feature" confirmed="no">java.io.File.toURI()</outbound>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="feature" confirmed="no">java.lang.System.setProperty(java.lang.String, java.lang.String)</outbound>
                <outbound type="class" confirmed="no">java.net.URI</outbound>
                <outbound type="feature" confirmed="no">java.net.URI.toString()</outbound>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainStatic.start(java.util.Properties)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>com.sun.enterprise.glassfish.bootstrap.ASMainStatic.createCache(java.io.File)</name>
                <outbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainStatic.glassfishDir</outbound>
                <outbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainStatic.out</outbound>
                <outbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.Rejar.Rejar()</outbound>
                <outbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.Rejar.rejar(java.io.File, java.io.File)</outbound>
                <outbound type="class" confirmed="no">java.io.File</outbound>
                <outbound type="feature" confirmed="no">java.io.File.File(java.io.File, java.lang.String)</outbound>
                <outbound type="feature" confirmed="no">java.io.File.mkdirs()</outbound>
                <outbound type="class" confirmed="no">java.io.IOException</outbound>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
            </feature>
            <feature confirmed="yes">
                <name>com.sun.enterprise.glassfish.bootstrap.ASMainStatic.createClassLoader(java.io.File)</name>
                <outbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainStatic.findDerbyClient(java.util.List)</outbound>
                <outbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainStatic.out</outbound>
                <outbound type="class" confirmed="no">java.io.File</outbound>
                <outbound type="feature" confirmed="no">java.io.File.toURI()</outbound>
                <outbound type="class" confirmed="no">java.lang.Class</outbound>
                <outbound type="feature" confirmed="no">java.lang.Class.getClassLoader()</outbound>
                <outbound type="class" confirmed="no">java.lang.ClassLoader</outbound>
                <outbound type="class" confirmed="no">java.lang.Exception</outbound>
                <outbound type="class" confirmed="no">java.lang.Object</outbound>
                <outbound type="feature" confirmed="no">java.lang.Object.getClass()</outbound>
                <outbound type="class" confirmed="no">java.net.URI</outbound>
                <outbound type="feature" confirmed="no">java.net.URI.toURL()</outbound>
                <outbound type="class" confirmed="no">java.net.URL</outbound>
                <outbound type="feature" confirmed="no">java.net.URLClassLoader.URLClassLoader(java.net.URL[], java.lang.ClassLoader)</outbound>
                <outbound type="class" confirmed="no">java.net.URL[]</outbound>
                <outbound type="feature" confirmed="no">java.util.ArrayList.ArrayList()</outbound>
                <outbound type="class" confirmed="no">java.util.List</outbound>
                <outbound type="feature" confirmed="no">java.util.List.add(java.lang.Object)</outbound>
                <outbound type="feature" confirmed="no">java.util.List.size()</outbound>
                <outbound type="feature" confirmed="no">java.util.List.toArray(java.lang.Object[])</outbound>
            </feature>
            <feature confirmed="yes">
                <name>com.sun.enterprise.glassfish.bootstrap.ASMainStatic.createTmpClassLoader(java.lang.ClassLoader, java.io.File)</name>
                <outbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainStatic.findDerbyClient(java.util.List)</outbound>
                <outbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainStatic.getAlreadyLoadedModules()</outbound>
                <outbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainStatic.insertURLs(java.io.File, java.util.Set, java.util.List)</outbound>
                <outbound type="class" confirmed="no">java.io.File</outbound>
                <outbound type="class" confirmed="no">java.lang.ClassLoader</outbound>
                <outbound type="class" confirmed="no">java.lang.Exception</outbound>
                <outbound type="class" confirmed="no">java.lang.Object</outbound>
                <outbound type="class" confirmed="no">java.net.URL</outbound>
                <outbound type="feature" confirmed="no">java.net.URLClassLoader.URLClassLoader(java.net.URL[], java.lang.ClassLoader)</outbound>
                <outbound type="class" confirmed="no">java.net.URL[]</outbound>
                <outbound type="feature" confirmed="no">java.util.ArrayList.ArrayList()</outbound>
                <outbound type="class" confirmed="no">java.util.List</outbound>
                <outbound type="feature" confirmed="no">java.util.List.size()</outbound>
                <outbound type="feature" confirmed="no">java.util.List.toArray(java.lang.Object[])</outbound>
                <outbound type="class" confirmed="no">java.util.Set</outbound>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainStatic.start(java.util.Properties)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>com.sun.enterprise.glassfish.bootstrap.ASMainStatic.domainDir</name>
                <outbound type="class" confirmed="no">java.io.File</outbound>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainStatic.configureEnvironment()</inbound>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainStatic.start(java.util.Properties)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>com.sun.enterprise.glassfish.bootstrap.ASMainStatic.findDerbyClient(java.util.List)</name>
                <outbound type="feature" confirmed="no">com.sun.enterprise.glassfish.bootstrap.ASMainStatic.logger</outbound>
                <outbound type="class" confirmed="no">java.io.File</outbound>
                <outbound type="feature" confirmed="no">java.io.File.File(java.io.File, java.lang.String)</outbound>
                <outbound type="feature" confirmed="no">java.io.File.File(java.lang.String)</outbound>
                <outbound type="feature" confirmed="no">java.io.File.File(java.lang.String, java.lang.String)</outbound>
                <outbound type="feature" confirmed="no">java.io.File.exists()</outbound>
                <outbound type="feature" confirmed="no">java.io.File.toURI()</outbound>
                <outbound type="class" confirmed="no">java.io.IOException</outbound>
                <outbound type="class" confirmed="no">java.lang.Object</outbound>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="feature" confirmed="no">java.lang.String.compareTo(java.lang.String)</outbound>
                <outbound type="feature" confirmed="no">java.lang.System.getProperty(java.lang.String)</outbound>
                <outbound type="class" confirmed="no">java.net.URI</outbound>
                <outbound type="feature" confirmed="no">java.net.URI.toURL()</outbound>
                <outbound type="class" confirmed="no">java.net.URL</outbound>
                <outbound type="class" confirmed="no">java.util.List</outbound>
                <outbound type="feature" confirmed="no">java.util.List.add(java.lang.Object)</outbound>
                <outbound type="class" confirmed="no">java.util.logging.Logger</outbound>
                <outbound type="feature" confirmed="no">java.util.logging.Logger.fine(java.lang.String)</outbound>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainStatic.createClassLoader(java.io.File)</inbound>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainStatic.createTmpClassLoader(java.lang.ClassLoader, java.io.File)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>com.sun.enterprise.glassfish.bootstrap.ASMainStatic.getAlreadyLoadedModules()</name>
                <outbound type="class" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainStatic$1</outbound>
                <outbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainStatic$ModuleInfo.ASMainStatic$ModuleInfo(com.sun.enterprise.glassfish.bootstrap.ASMainStatic, java.lang.String, java.lang.String, com.sun.enterprise.glassfish.bootstrap.ASMainStatic$1)</outbound>
                <outbound type="class" confirmed="no">java.io.IOException</outbound>
                <outbound type="class" confirmed="no">java.io.InputStream</outbound>
                <outbound type="feature" confirmed="no">java.io.InputStream.close()</outbound>
                <outbound type="class" confirmed="no">java.lang.Class</outbound>
                <outbound type="feature" confirmed="no">java.lang.Class.getClassLoader()</outbound>
                <outbound type="class" confirmed="no">java.lang.ClassLoader</outbound>
                <outbound type="feature" confirmed="no">java.lang.ClassLoader.getResources(java.lang.String)</outbound>
                <outbound type="class" confirmed="no">java.lang.Object</outbound>
                <outbound type="feature" confirmed="no">java.lang.Object.getClass()</outbound>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="class" confirmed="no">java.net.URL</outbound>
                <outbound type="feature" confirmed="no">java.net.URL.openStream()</outbound>
                <outbound type="class" confirmed="no">java.util.Enumeration</outbound>
                <outbound type="feature" confirmed="no">java.util.Enumeration.hasMoreElements()</outbound>
                <outbound type="feature" confirmed="no">java.util.Enumeration.nextElement()</outbound>
                <outbound type="feature" confirmed="no">java.util.HashSet.HashSet()</outbound>
                <outbound type="class" confirmed="no">java.util.Set</outbound>
                <outbound type="feature" confirmed="no">java.util.Set.add(java.lang.Object)</outbound>
                <outbound type="class" confirmed="no">java.util.jar.Attributes</outbound>
                <outbound type="feature" confirmed="no">java.util.jar.Attributes.getValue(java.lang.String)</outbound>
                <outbound type="feature" confirmed="no">java.util.jar.Manifest.Manifest(java.io.InputStream)</outbound>
                <outbound type="feature" confirmed="no">java.util.jar.Manifest.getMainAttributes()</outbound>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainStatic.createTmpClassLoader(java.lang.ClassLoader, java.io.File)</inbound>
            </feature>
            <feature confirmed="no">
                <name>com.sun.enterprise.glassfish.bootstrap.ASMainStatic.getContext(java.lang.Class)</name>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainStatic.start(java.util.Properties)</inbound>
            </feature>
            <feature confirmed="no">
                <name>com.sun.enterprise.glassfish.bootstrap.ASMainStatic.getContexts()</name>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainStatic$1$1.createHabitat(com.sun.enterprise.module.ModulesRegistry, com.sun.enterprise.module.bootstrap.StartupContext)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>com.sun.enterprise.glassfish.bootstrap.ASMainStatic.getJarFileURL(java.net.URL)</name>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="feature" confirmed="no">java.lang.String.length()</outbound>
                <outbound type="feature" confirmed="no">java.lang.String.substring(int, int)</outbound>
                <outbound type="class" confirmed="no">java.net.MalformedURLException</outbound>
                <outbound type="class" confirmed="no">java.net.URL</outbound>
                <outbound type="feature" confirmed="no">java.net.URL.URL(java.lang.String)</outbound>
                <outbound type="feature" confirmed="no">java.net.URL.toExternalForm()</outbound>
            </feature>
            <feature confirmed="yes">
                <name>com.sun.enterprise.glassfish.bootstrap.ASMainStatic.getMaskingClassLoader(java.lang.ClassLoader, java.io.File, java.util.logging.Logger)</name>
                <outbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainStatic.getMaskingClassLoader(java.lang.ClassLoader, java.io.File, java.util.logging.Logger, boolean)</outbound>
                <outbound type="class" confirmed="no">java.io.File</outbound>
                <outbound type="class" confirmed="no">java.lang.ClassLoader</outbound>
                <outbound type="class" confirmed="no">java.util.logging.Logger</outbound>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainStatic.start(java.util.Properties)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>com.sun.enterprise.glassfish.bootstrap.ASMainStatic.getMaskingClassLoader(java.lang.ClassLoader, java.io.File, java.util.logging.Logger, boolean)</name>
                <outbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainStatic.getMaskingClassLoader(java.lang.ClassLoader, java.util.Properties, boolean)</outbound>
                <outbound type="class" confirmed="no">java.io.File</outbound>
                <outbound type="feature" confirmed="no">java.io.File.File(java.io.File, java.lang.String)</outbound>
                <outbound type="feature" confirmed="no">java.io.File.exists()</outbound>
                <outbound type="feature" confirmed="no">java.io.File.getAbsolutePath()</outbound>
                <outbound type="feature" confirmed="no">java.io.FileReader.FileReader(java.io.File)</outbound>
                <outbound type="feature" confirmed="no">java.io.FileReader.close()</outbound>
                <outbound type="class" confirmed="no">java.io.IOException</outbound>
                <outbound type="class" confirmed="no">java.io.Reader</outbound>
                <outbound type="class" confirmed="no">java.lang.ClassLoader</outbound>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="class" confirmed="no">java.lang.StringBuilder</outbound>
                <outbound type="feature" confirmed="no">java.lang.StringBuilder.StringBuilder()</outbound>
                <outbound type="feature" confirmed="no">java.lang.StringBuilder.append(java.lang.String)</outbound>
                <outbound type="feature" confirmed="no">java.lang.StringBuilder.toString()</outbound>
                <outbound type="class" confirmed="no">java.util.Properties</outbound>
                <outbound type="feature" confirmed="no">java.util.Properties.Properties()</outbound>
                <outbound type="feature" confirmed="no">java.util.Properties.load(java.io.Reader)</outbound>
                <outbound type="class" confirmed="no">java.util.logging.Level</outbound>
                <outbound type="feature" confirmed="no">java.util.logging.Level.SEVERE</outbound>
                <outbound type="class" confirmed="no">java.util.logging.Logger</outbound>
                <outbound type="feature" confirmed="no">java.util.logging.Logger.log(java.util.logging.Level, java.lang.String)</outbound>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainStatic.getMaskingClassLoader(java.lang.ClassLoader, java.io.File, java.util.logging.Logger)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>com.sun.enterprise.glassfish.bootstrap.ASMainStatic.getMaskingClassLoader(java.lang.ClassLoader, java.util.Properties)</name>
                <outbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainStatic.getMaskingClassLoader(java.lang.ClassLoader, java.util.Properties, boolean)</outbound>
                <outbound type="class" confirmed="no">java.lang.ClassLoader</outbound>
                <outbound type="class" confirmed="no">java.util.Properties</outbound>
            </feature>
            <feature confirmed="yes">
                <name>com.sun.enterprise.glassfish.bootstrap.ASMainStatic.getMaskingClassLoader(java.lang.ClassLoader, java.util.Properties, boolean)</name>
                <outbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.MaskingClassLoader.MaskingClassLoader(java.lang.ClassLoader, java.util.Collection, java.util.Collection, boolean)</outbound>
                <outbound type="class" confirmed="no">java.lang.CharSequence</outbound>
                <outbound type="class" confirmed="no">java.lang.ClassLoader</outbound>
                <outbound type="class" confirmed="no">java.lang.Object</outbound>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="feature" confirmed="no">java.lang.String.contains(java.lang.CharSequence)</outbound>
                <outbound type="feature" confirmed="no">java.lang.String.indexOf(java.lang.String)</outbound>
                <outbound type="feature" confirmed="no">java.lang.String.substring(int, int)</outbound>
                <outbound type="feature" confirmed="no">java.lang.String.trim()</outbound>
                <outbound type="feature" confirmed="no">java.util.ArrayList.ArrayList()</outbound>
                <outbound type="class" confirmed="no">java.util.Collection</outbound>
                <outbound type="feature" confirmed="no">java.util.List.add(java.lang.Object)</outbound>
                <outbound type="class" confirmed="no">java.util.Properties</outbound>
                <outbound type="feature" confirmed="no">java.util.Properties.getProperty(java.lang.String)</outbound>
                <outbound type="feature" confirmed="no">java.util.StringTokenizer.StringTokenizer(java.lang.String, java.lang.String)</outbound>
                <outbound type="feature" confirmed="no">java.util.StringTokenizer.hasMoreTokens()</outbound>
                <outbound type="feature" confirmed="no">java.util.StringTokenizer.nextToken()</outbound>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainStatic.getMaskingClassLoader(java.lang.ClassLoader, java.io.File, java.util.logging.Logger, boolean)</inbound>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainStatic.getMaskingClassLoader(java.lang.ClassLoader, java.util.Properties)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>com.sun.enterprise.glassfish.bootstrap.ASMainStatic.getName()</name>
                <outbound type="class" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.Constants$Platform</outbound>
                <outbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.Constants$Platform.Static</outbound>
                <outbound type="feature" confirmed="no">com.sun.enterprise.glassfish.bootstrap.Constants$Platform.toString()</outbound>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
            </feature>
            <feature confirmed="yes">
                <name>com.sun.enterprise.glassfish.bootstrap.ASMainStatic.getPreferedCacheDir()</name>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainStatic.configureEnvironment()</inbound>
            </feature>
            <feature confirmed="yes">
                <name>com.sun.enterprise.glassfish.bootstrap.ASMainStatic.getStartedService(java.lang.Class)</name>
                <outbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainStatic.habitat</outbound>
                <outbound type="class" confirmed="no">java.lang.Class</outbound>
                <outbound type="class" confirmed="no">java.lang.Object</outbound>
                <outbound type="class" confirmed="no">org.jvnet.hk2.component.Habitat</outbound>
                <outbound type="feature" confirmed="no">org.jvnet.hk2.component.Habitat.getComponent(java.lang.Class)</outbound>
            </feature>
            <feature confirmed="yes">
                <name>com.sun.enterprise.glassfish.bootstrap.ASMainStatic.glassfishDir</name>
                <outbound type="class" confirmed="no">java.io.File</outbound>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainStatic.configureEnvironment()</inbound>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainStatic.createCache(java.io.File)</inbound>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainStatic.start(java.util.Properties)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>com.sun.enterprise.glassfish.bootstrap.ASMainStatic.habitat</name>
                <outbound type="class" confirmed="no">org.jvnet.hk2.component.Habitat</outbound>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainStatic.access$102(com.sun.enterprise.glassfish.bootstrap.ASMainStatic, org.jvnet.hk2.component.Habitat)</inbound>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainStatic.getStartedService(java.lang.Class)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>com.sun.enterprise.glassfish.bootstrap.ASMainStatic.insertURLs(java.io.File, java.util.Set, java.util.List)</name>
                <outbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainStatic.processFile(java.io.File, java.util.Set, java.util.List)</outbound>
                <outbound type="class" confirmed="no">java.io.File</outbound>
                <outbound type="feature" confirmed="no">java.io.File.getName()</outbound>
                <outbound type="feature" confirmed="no">java.io.File.isDirectory()</outbound>
                <outbound type="feature" confirmed="no">java.io.File.isFile()</outbound>
                <outbound type="feature" confirmed="no">java.io.File.listFiles()</outbound>
                <outbound type="class" confirmed="no">java.lang.Exception</outbound>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="feature" confirmed="no">java.lang.String.endsWith(java.lang.String)</outbound>
                <outbound type="class" confirmed="no">java.util.List</outbound>
                <outbound type="class" confirmed="no">java.util.Set</outbound>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainStatic.createTmpClassLoader(java.lang.ClassLoader, java.io.File)</inbound>
            </feature>
            <feature confirmed="no">
                <name>com.sun.enterprise.glassfish.bootstrap.ASMainStatic.logger</name>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainStatic.access$000(com.sun.enterprise.glassfish.bootstrap.ASMainStatic)</inbound>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainStatic.access$200(com.sun.enterprise.glassfish.bootstrap.ASMainStatic)</inbound>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainStatic.findDerbyClient(java.util.List)</inbound>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainStatic.start(java.util.Properties)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>com.sun.enterprise.glassfish.bootstrap.ASMainStatic.out</name>
                <outbound type="class" confirmed="no">java.io.File</outbound>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainStatic.createCache(java.io.File)</inbound>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainStatic.createClassLoader(java.io.File)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>com.sun.enterprise.glassfish.bootstrap.ASMainStatic.processFile(java.io.File, java.util.Set, java.util.List)</name>
                <outbound type="class" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainStatic$1</outbound>
                <outbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainStatic$ModuleInfo.ASMainStatic$ModuleInfo(com.sun.enterprise.glassfish.bootstrap.ASMainStatic, java.lang.String, java.lang.String, com.sun.enterprise.glassfish.bootstrap.ASMainStatic$1)</outbound>
                <outbound type="class" confirmed="no">java.io.File</outbound>
                <outbound type="feature" confirmed="no">java.io.File.toURI()</outbound>
                <outbound type="class" confirmed="no">java.io.IOException</outbound>
                <outbound type="class" confirmed="no">java.lang.Object</outbound>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="class" confirmed="no">java.net.URI</outbound>
                <outbound type="feature" confirmed="no">java.net.URI.toURL()</outbound>
                <outbound type="class" confirmed="no">java.net.URL</outbound>
                <outbound type="class" confirmed="no">java.util.List</outbound>
                <outbound type="feature" confirmed="no">java.util.List.add(java.lang.Object)</outbound>
                <outbound type="class" confirmed="no">java.util.Set</outbound>
                <outbound type="feature" confirmed="no">java.util.Set.add(java.lang.Object)</outbound>
                <outbound type="feature" confirmed="no">java.util.Set.contains(java.lang.Object)</outbound>
                <outbound type="feature" confirmed="no">java.util.StringTokenizer.StringTokenizer(java.lang.String)</outbound>
                <outbound type="feature" confirmed="no">java.util.StringTokenizer.hasMoreTokens()</outbound>
                <outbound type="feature" confirmed="no">java.util.StringTokenizer.nextToken()</outbound>
                <outbound type="class" confirmed="no">java.util.jar.Attributes</outbound>
                <outbound type="feature" confirmed="no">java.util.jar.Attributes.getValue(java.lang.String)</outbound>
                <outbound type="feature" confirmed="no">java.util.jar.JarFile.JarFile(java.io.File)</outbound>
                <outbound type="feature" confirmed="no">java.util.jar.JarFile.getManifest()</outbound>
                <outbound type="class" confirmed="no">java.util.jar.Manifest</outbound>
                <outbound type="feature" confirmed="no">java.util.jar.Manifest.getMainAttributes()</outbound>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainStatic.insertURLs(java.io.File, java.util.Set, java.util.List)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>com.sun.enterprise.glassfish.bootstrap.ASMainStatic.start(java.util.Properties)</name>
                <outbound type="feature" confirmed="no">com.sun.enterprise.glassfish.bootstrap.ASMainNonOSGi.setContext(java.lang.Object)</outbound>
                <outbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainStatic$1.ASMainStatic$1(com.sun.enterprise.glassfish.bootstrap.ASMainStatic, java.lang.ClassLoader, com.sun.enterprise.module.impl.ModulesRegistryImpl, com.sun.enterprise.module.bootstrap.StartupContext)</outbound>
                <outbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainStatic.configureEnvironment()</outbound>
                <outbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainStatic.createTmpClassLoader(java.lang.ClassLoader, java.io.File)</outbound>
                <outbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainStatic.domainDir</outbound>
                <outbound type="feature" confirmed="no">com.sun.enterprise.glassfish.bootstrap.ASMainStatic.getContext(java.lang.Class)</outbound>
                <outbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainStatic.getMaskingClassLoader(java.lang.ClassLoader, java.io.File, java.util.logging.Logger)</outbound>
                <outbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainStatic.glassfishDir</outbound>
                <outbound type="feature" confirmed="no">com.sun.enterprise.glassfish.bootstrap.ASMainStatic.logger</outbound>
                <outbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.StartupContextUtil.getInstallRoot(com.sun.enterprise.module.bootstrap.StartupContext)</outbound>
                <outbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.StartupContextUtil.getInstanceRoot(com.sun.enterprise.module.bootstrap.StartupContext)</outbound>
                <outbound type="feature" confirmed="no">com.sun.enterprise.module.bootstrap.BootException.BootException(java.lang.String)</outbound>
                <outbound type="class" confirmed="no">com.sun.enterprise.module.bootstrap.StartupContext</outbound>
                <outbound type="feature" confirmed="no">com.sun.enterprise.module.bootstrap.StartupContext.StartupContext(java.util.Properties)</outbound>
                <outbound type="class" confirmed="no">com.sun.enterprise.module.impl.ModulesRegistryImpl</outbound>
                <outbound type="feature" confirmed="no">com.sun.enterprise.module.impl.ModulesRegistryImpl.setParentClassLoader(java.lang.ClassLoader)</outbound>
                <outbound type="feature" confirmed="no">com.sun.enterprise.module.single.SingleModulesRegistry.SingleModulesRegistry(java.lang.ClassLoader)</outbound>
                <outbound type="class" confirmed="no">java.io.File</outbound>
                <outbound type="feature" confirmed="no">java.io.File.File(java.io.File, java.lang.String)</outbound>
                <outbound type="class" confirmed="no">java.lang.Class</outbound>
                <outbound type="feature" confirmed="no">java.lang.Class.getClassLoader()</outbound>
                <outbound type="class" confirmed="no">java.lang.ClassLoader</outbound>
                <outbound type="class" confirmed="no">java.lang.Exception</outbound>
                <outbound type="class" confirmed="no">java.lang.InterruptedException</outbound>
                <outbound type="class" confirmed="no">java.lang.Object</outbound>
                <outbound type="feature" confirmed="no">java.lang.Object.getClass()</outbound>
                <outbound type="class" confirmed="no">java.lang.Runnable</outbound>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="feature" confirmed="no">java.lang.Thread.Thread(java.lang.Runnable, java.lang.String)</outbound>
                <outbound type="feature" confirmed="no">java.lang.Thread.join()</outbound>
                <outbound type="feature" confirmed="no">java.lang.Thread.setContextClassLoader(java.lang.ClassLoader)</outbound>
                <outbound type="feature" confirmed="no">java.lang.Thread.setDaemon(boolean)</outbound>
                <outbound type="feature" confirmed="no">java.lang.Thread.start()</outbound>
                <outbound type="class" confirmed="no">java.util.Properties</outbound>
                <outbound type="class" confirmed="no">java.util.logging.Logger</outbound>
                <outbound type="feature" confirmed="no">java.util.logging.Logger.fine(java.lang.String)</outbound>
                <outbound type="feature" confirmed="no">java.util.logging.Logger.warning(java.lang.String)</outbound>
            </feature>
        </class>
        <class confirmed="yes">
            <name>com.sun.enterprise.glassfish.bootstrap.ASMainStatic$1</name>
            <outbound type="class" confirmed="no">java.lang.Object</outbound>
            <outbound type="class" confirmed="no">java.lang.Runnable</outbound>
            <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainStatic$1$1.ASMainStatic$1$1(com.sun.enterprise.glassfish.bootstrap.ASMainStatic$1)</inbound>
            <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainStatic$1$1.createHabitat(com.sun.enterprise.module.ModulesRegistry, com.sun.enterprise.module.bootstrap.StartupContext)</inbound>
            <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainStatic$1$1.createInhabitantsParser(org.jvnet.hk2.component.Habitat)</inbound>
            <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainStatic$1$1.this$1</inbound>
            <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainStatic$ModuleInfo.ASMainStatic$ModuleInfo(com.sun.enterprise.glassfish.bootstrap.ASMainStatic, java.lang.String, java.lang.String, com.sun.enterprise.glassfish.bootstrap.ASMainStatic$1)</inbound>
            <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainStatic.getAlreadyLoadedModules()</inbound>
            <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainStatic.processFile(java.io.File, java.util.Set, java.util.List)</inbound>
            <feature confirmed="yes">
                <name>com.sun.enterprise.glassfish.bootstrap.ASMainStatic$1.ASMainStatic$1(com.sun.enterprise.glassfish.bootstrap.ASMainStatic, java.lang.ClassLoader, com.sun.enterprise.module.impl.ModulesRegistryImpl, com.sun.enterprise.module.bootstrap.StartupContext)</name>
                <outbound type="class" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainStatic</outbound>
                <outbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainStatic$1.this$0</outbound>
                <outbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainStatic$1.val$cl</outbound>
                <outbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainStatic$1.val$modulesRegistry</outbound>
                <outbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainStatic$1.val$startupContext</outbound>
                <outbound type="class" confirmed="no">com.sun.enterprise.module.bootstrap.StartupContext</outbound>
                <outbound type="class" confirmed="no">com.sun.enterprise.module.impl.ModulesRegistryImpl</outbound>
                <outbound type="class" confirmed="no">java.lang.ClassLoader</outbound>
                <outbound type="feature" confirmed="no">java.lang.Object.Object()</outbound>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainStatic.start(java.util.Properties)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>com.sun.enterprise.glassfish.bootstrap.ASMainStatic$1.run()</name>
                <outbound type="class" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainStatic</outbound>
                <outbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainStatic$1$1.ASMainStatic$1$1(com.sun.enterprise.glassfish.bootstrap.ASMainStatic$1)</outbound>
                <outbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainStatic$1.this$0</outbound>
                <outbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainStatic$1.val$modulesRegistry</outbound>
                <outbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainStatic$1.val$startupContext</outbound>
                <outbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainStatic.access$200(com.sun.enterprise.glassfish.bootstrap.ASMainStatic)</outbound>
                <outbound type="class" confirmed="no">com.sun.enterprise.module.ModulesRegistry</outbound>
                <outbound type="class" confirmed="no">com.sun.enterprise.module.bootstrap.BootException</outbound>
                <outbound type="feature" confirmed="no">com.sun.enterprise.module.bootstrap.BootException.getMessage()</outbound>
                <outbound type="feature" confirmed="no">com.sun.enterprise.module.bootstrap.Main.launch(com.sun.enterprise.module.ModulesRegistry, com.sun.enterprise.module.bootstrap.StartupContext)</outbound>
                <outbound type="class" confirmed="no">com.sun.enterprise.module.bootstrap.StartupContext</outbound>
                <outbound type="class" confirmed="no">com.sun.enterprise.module.impl.ModulesRegistryImpl</outbound>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="class" confirmed="no">java.lang.Throwable</outbound>
                <outbound type="class" confirmed="no">java.util.logging.Level</outbound>
                <outbound type="feature" confirmed="no">java.util.logging.Level.SEVERE</outbound>
                <outbound type="class" confirmed="no">java.util.logging.Logger</outbound>
                <outbound type="feature" confirmed="no">java.util.logging.Logger.log(java.util.logging.Level, java.lang.String, java.lang.Throwable)</outbound>
                <outbound type="class" confirmed="no">org.jvnet.hk2.component.Habitat</outbound>
            </feature>
            <feature confirmed="yes">
                <name>com.sun.enterprise.glassfish.bootstrap.ASMainStatic$1.this$0</name>
                <outbound type="class" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainStatic</outbound>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainStatic$1$1.createHabitat(com.sun.enterprise.module.ModulesRegistry, com.sun.enterprise.module.bootstrap.StartupContext)</inbound>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainStatic$1.ASMainStatic$1(com.sun.enterprise.glassfish.bootstrap.ASMainStatic, java.lang.ClassLoader, com.sun.enterprise.module.impl.ModulesRegistryImpl, com.sun.enterprise.module.bootstrap.StartupContext)</inbound>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainStatic$1.run()</inbound>
            </feature>
            <feature confirmed="yes">
                <name>com.sun.enterprise.glassfish.bootstrap.ASMainStatic$1.val$cl</name>
                <outbound type="class" confirmed="no">java.lang.ClassLoader</outbound>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainStatic$1$1.createInhabitantsParser(org.jvnet.hk2.component.Habitat)</inbound>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainStatic$1.ASMainStatic$1(com.sun.enterprise.glassfish.bootstrap.ASMainStatic, java.lang.ClassLoader, com.sun.enterprise.module.impl.ModulesRegistryImpl, com.sun.enterprise.module.bootstrap.StartupContext)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>com.sun.enterprise.glassfish.bootstrap.ASMainStatic$1.val$modulesRegistry</name>
                <outbound type="class" confirmed="no">com.sun.enterprise.module.impl.ModulesRegistryImpl</outbound>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainStatic$1.ASMainStatic$1(com.sun.enterprise.glassfish.bootstrap.ASMainStatic, java.lang.ClassLoader, com.sun.enterprise.module.impl.ModulesRegistryImpl, com.sun.enterprise.module.bootstrap.StartupContext)</inbound>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainStatic$1.run()</inbound>
            </feature>
            <feature confirmed="yes">
                <name>com.sun.enterprise.glassfish.bootstrap.ASMainStatic$1.val$startupContext</name>
                <outbound type="class" confirmed="no">com.sun.enterprise.module.bootstrap.StartupContext</outbound>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainStatic$1.ASMainStatic$1(com.sun.enterprise.glassfish.bootstrap.ASMainStatic, java.lang.ClassLoader, com.sun.enterprise.module.impl.ModulesRegistryImpl, com.sun.enterprise.module.bootstrap.StartupContext)</inbound>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainStatic$1.run()</inbound>
            </feature>
        </class>
        <class confirmed="yes">
            <name>com.sun.enterprise.glassfish.bootstrap.ASMainStatic$1$1</name>
            <outbound type="class" confirmed="no">com.sun.enterprise.module.bootstrap.Main</outbound>
            <feature confirmed="yes">
                <name>com.sun.enterprise.glassfish.bootstrap.ASMainStatic$1$1.ASMainStatic$1$1(com.sun.enterprise.glassfish.bootstrap.ASMainStatic$1)</name>
                <outbound type="class" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainStatic$1</outbound>
                <outbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainStatic$1$1.this$1</outbound>
                <outbound type="feature" confirmed="no">com.sun.enterprise.module.bootstrap.Main.Main()</outbound>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainStatic$1.run()</inbound>
            </feature>
            <feature confirmed="yes">
                <name>com.sun.enterprise.glassfish.bootstrap.ASMainStatic$1$1.createHabitat(com.sun.enterprise.module.ModulesRegistry, com.sun.enterprise.module.bootstrap.StartupContext)</name>
                <outbound type="class" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainStatic</outbound>
                <outbound type="class" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainStatic$1</outbound>
                <outbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainStatic$1$1.createInhabitantsParser(org.jvnet.hk2.component.Habitat)</outbound>
                <outbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainStatic$1$1.this$1</outbound>
                <outbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainStatic$1.this$0</outbound>
                <outbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainStatic.access$000(com.sun.enterprise.glassfish.bootstrap.ASMainStatic)</outbound>
                <outbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainStatic.access$102(com.sun.enterprise.glassfish.bootstrap.ASMainStatic, org.jvnet.hk2.component.Habitat)</outbound>
                <outbound type="feature" confirmed="no">com.sun.enterprise.glassfish.bootstrap.ASMainStatic.getContexts()</outbound>
                <outbound type="class" confirmed="no">com.sun.enterprise.module.ModulesRegistry</outbound>
                <outbound type="feature" confirmed="no">com.sun.enterprise.module.ModulesRegistry.createHabitat(java.lang.String, com.sun.hk2.component.InhabitantsParser)</outbound>
                <outbound type="feature" confirmed="no">com.sun.enterprise.module.ModulesRegistry.newHabitat()</outbound>
                <outbound type="class" confirmed="no">com.sun.enterprise.module.bootstrap.BootException</outbound>
                <outbound type="class" confirmed="no">com.sun.enterprise.module.bootstrap.StartupContext</outbound>
                <outbound type="feature" confirmed="no">com.sun.hk2.component.ExistingSingletonInhabitant.ExistingSingletonInhabitant(java.lang.Class, java.lang.Object)</outbound>
                <outbound type="class" confirmed="no">com.sun.hk2.component.InhabitantsParser</outbound>
                <outbound type="class" confirmed="no">java.lang.Class</outbound>
                <outbound type="class" confirmed="no">java.lang.Object</outbound>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="class" confirmed="no">java.util.Iterator</outbound>
                <outbound type="feature" confirmed="no">java.util.Iterator.hasNext()</outbound>
                <outbound type="feature" confirmed="no">java.util.Iterator.next()</outbound>
                <outbound type="class" confirmed="no">java.util.List</outbound>
                <outbound type="feature" confirmed="no">java.util.List.iterator()</outbound>
                <outbound type="class" confirmed="no">java.util.logging.Logger</outbound>
                <outbound type="class" confirmed="no">org.jvnet.hk2.component.Habitat</outbound>
                <outbound type="feature" confirmed="no">org.jvnet.hk2.component.Habitat.add(org.jvnet.hk2.component.Inhabitant)</outbound>
                <outbound type="class" confirmed="no">org.jvnet.hk2.component.Inhabitant</outbound>
                <outbound type="feature" confirmed="no">org.jvnet.hk2.component.Inhabitants.create(java.lang.Object)</outbound>
            </feature>
            <feature confirmed="yes">
                <name>com.sun.enterprise.glassfish.bootstrap.ASMainStatic$1$1.createInhabitantsParser(org.jvnet.hk2.component.Habitat)</name>
                <outbound type="class" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainStatic$1</outbound>
                <outbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainStatic$1$1.this$1</outbound>
                <outbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainStatic$1.val$cl</outbound>
                <outbound type="feature" confirmed="no">com.sun.enterprise.module.bootstrap.Main.createInhabitantsParser(org.jvnet.hk2.component.Habitat)</outbound>
                <outbound type="class" confirmed="no">com.sun.hk2.component.InhabitantsParser</outbound>
                <outbound type="class" confirmed="no">com.sun.hk2.component.InhabitantsParserDecorator</outbound>
                <outbound type="feature" confirmed="no">com.sun.hk2.component.InhabitantsParserDecorator.decorate(com.sun.hk2.component.InhabitantsParser)</outbound>
                <outbound type="class" confirmed="no">java.lang.Class</outbound>
                <outbound type="class" confirmed="no">java.lang.ClassLoader</outbound>
                <outbound type="class" confirmed="no">java.lang.Object</outbound>
                <outbound type="class" confirmed="no">java.util.Iterator</outbound>
                <outbound type="feature" confirmed="no">java.util.Iterator.hasNext()</outbound>
                <outbound type="feature" confirmed="no">java.util.Iterator.next()</outbound>
                <outbound type="class" confirmed="no">java.util.ServiceLoader</outbound>
                <outbound type="feature" confirmed="no">java.util.ServiceLoader.iterator()</outbound>
                <outbound type="feature" confirmed="no">java.util.ServiceLoader.load(java.lang.Class, java.lang.ClassLoader)</outbound>
                <outbound type="class" confirmed="no">org.jvnet.hk2.component.Habitat</outbound>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainStatic$1$1.createHabitat(com.sun.enterprise.module.ModulesRegistry, com.sun.enterprise.module.bootstrap.StartupContext)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>com.sun.enterprise.glassfish.bootstrap.ASMainStatic$1$1.this$1</name>
                <outbound type="class" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainStatic$1</outbound>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainStatic$1$1.ASMainStatic$1$1(com.sun.enterprise.glassfish.bootstrap.ASMainStatic$1)</inbound>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainStatic$1$1.createHabitat(com.sun.enterprise.module.ModulesRegistry, com.sun.enterprise.module.bootstrap.StartupContext)</inbound>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainStatic$1$1.createInhabitantsParser(org.jvnet.hk2.component.Habitat)</inbound>
            </feature>
        </class>
        <class confirmed="yes">
            <name>com.sun.enterprise.glassfish.bootstrap.ASMainStatic$ModuleInfo</name>
            <outbound type="class" confirmed="no">java.lang.Object</outbound>
            <feature confirmed="yes">
                <name>com.sun.enterprise.glassfish.bootstrap.ASMainStatic$ModuleInfo.ASMainStatic$ModuleInfo(com.sun.enterprise.glassfish.bootstrap.ASMainStatic, java.lang.String, java.lang.String)</name>
                <outbound type="class" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainStatic</outbound>
                <outbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainStatic$ModuleInfo.bundleName</outbound>
                <outbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainStatic$ModuleInfo.bundleVersion</outbound>
                <outbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainStatic$ModuleInfo.this$0</outbound>
                <outbound type="feature" confirmed="no">java.lang.Object.Object()</outbound>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainStatic$ModuleInfo.ASMainStatic$ModuleInfo(com.sun.enterprise.glassfish.bootstrap.ASMainStatic, java.lang.String, java.lang.String, com.sun.enterprise.glassfish.bootstrap.ASMainStatic$1)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>com.sun.enterprise.glassfish.bootstrap.ASMainStatic$ModuleInfo.ASMainStatic$ModuleInfo(com.sun.enterprise.glassfish.bootstrap.ASMainStatic, java.lang.String, java.lang.String, com.sun.enterprise.glassfish.bootstrap.ASMainStatic$1)</name>
                <outbound type="class" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainStatic</outbound>
                <outbound type="class" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainStatic$1</outbound>
                <outbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainStatic$ModuleInfo.ASMainStatic$ModuleInfo(com.sun.enterprise.glassfish.bootstrap.ASMainStatic, java.lang.String, java.lang.String)</outbound>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainStatic.getAlreadyLoadedModules()</inbound>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainStatic.processFile(java.io.File, java.util.Set, java.util.List)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>com.sun.enterprise.glassfish.bootstrap.ASMainStatic$ModuleInfo.bundleName</name>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainStatic$ModuleInfo.ASMainStatic$ModuleInfo(com.sun.enterprise.glassfish.bootstrap.ASMainStatic, java.lang.String, java.lang.String)</inbound>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainStatic$ModuleInfo.equals(java.lang.Object)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>com.sun.enterprise.glassfish.bootstrap.ASMainStatic$ModuleInfo.bundleVersion</name>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainStatic$ModuleInfo.ASMainStatic$ModuleInfo(com.sun.enterprise.glassfish.bootstrap.ASMainStatic, java.lang.String, java.lang.String)</inbound>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainStatic$ModuleInfo.equals(java.lang.Object)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>com.sun.enterprise.glassfish.bootstrap.ASMainStatic$ModuleInfo.equals(java.lang.Object)</name>
                <outbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainStatic$ModuleInfo.bundleName</outbound>
                <outbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainStatic$ModuleInfo.bundleVersion</outbound>
                <outbound type="class" confirmed="no">java.lang.Object</outbound>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="feature" confirmed="no">java.lang.String.equals(java.lang.Object)</outbound>
            </feature>
            <feature confirmed="yes">
                <name>com.sun.enterprise.glassfish.bootstrap.ASMainStatic$ModuleInfo.this$0</name>
                <outbound type="class" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainStatic</outbound>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainStatic$ModuleInfo.ASMainStatic$ModuleInfo(com.sun.enterprise.glassfish.bootstrap.ASMainStatic, java.lang.String, java.lang.String)</inbound>
            </feature>
        </class>
        <class confirmed="yes">
            <name>com.sun.enterprise.glassfish.bootstrap.AutoProcessor</name>
            <outbound type="class" confirmed="no">java.lang.Object</outbound>
            <feature confirmed="yes">
                <name>com.sun.enterprise.glassfish.bootstrap.AutoProcessor.AUTO_INSTALL_PROP</name>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
            </feature>
            <feature confirmed="yes">
                <name>com.sun.enterprise.glassfish.bootstrap.AutoProcessor.AUTO_START_PROP</name>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
            </feature>
            <feature confirmed="yes">
                <name>com.sun.enterprise.glassfish.bootstrap.AutoProcessor.AutoProcessor()</name>
                <outbound type="feature" confirmed="no">java.lang.Object.Object()</outbound>
            </feature>
            <feature confirmed="yes">
                <name>com.sun.enterprise.glassfish.bootstrap.AutoProcessor.nextLocation(java.util.StringTokenizer)</name>
                <outbound type="class" confirmed="no">java.lang.Object</outbound>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="feature" confirmed="no">java.lang.String.equals(java.lang.Object)</outbound>
                <outbound type="feature" confirmed="no">java.lang.String.trim()</outbound>
                <outbound type="class" confirmed="no">java.lang.StringBuffer</outbound>
                <outbound type="feature" confirmed="no">java.lang.StringBuffer.StringBuffer(int)</outbound>
                <outbound type="feature" confirmed="no">java.lang.StringBuffer.append(java.lang.String)</outbound>
                <outbound type="feature" confirmed="no">java.lang.StringBuffer.toString()</outbound>
                <outbound type="class" confirmed="no">java.util.StringTokenizer</outbound>
                <outbound type="feature" confirmed="no">java.util.StringTokenizer.countTokens()</outbound>
                <outbound type="feature" confirmed="no">java.util.StringTokenizer.hasMoreTokens()</outbound>
                <outbound type="feature" confirmed="no">java.util.StringTokenizer.nextToken(java.lang.String)</outbound>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.AutoProcessor.processAutoProperties(java.util.Map, org.osgi.framework.BundleContext)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>com.sun.enterprise.glassfish.bootstrap.AutoProcessor.process(java.util.Map, org.osgi.framework.BundleContext)</name>
                <outbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.AutoProcessor.processAutoProperties(java.util.Map, org.osgi.framework.BundleContext)</outbound>
                <outbound type="feature" confirmed="no">java.util.HashMap.HashMap()</outbound>
                <outbound type="class" confirmed="no">java.util.Map</outbound>
                <outbound type="class" confirmed="no">org.osgi.framework.BundleContext</outbound>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.OSGiGlassFishRuntimeBuilder.launchOSGiFrameWork()</inbound>
            </feature>
            <feature confirmed="yes">
                <name>com.sun.enterprise.glassfish.bootstrap.AutoProcessor.processAutoProperties(java.util.Map, org.osgi.framework.BundleContext)</name>
                <outbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.AutoProcessor.nextLocation(java.util.StringTokenizer)</outbound>
                <outbound type="class" confirmed="no">java.io.InputStream</outbound>
                <outbound type="class" confirmed="no">java.io.PrintStream</outbound>
                <outbound type="feature" confirmed="no">java.io.PrintStream.println(java.lang.String)</outbound>
                <outbound type="feature" confirmed="no">java.lang.Class.getName()</outbound>
                <outbound type="class" confirmed="no">java.lang.Exception</outbound>
                <outbound type="feature" confirmed="no">java.lang.Exception.getCause()</outbound>
                <outbound type="feature" confirmed="no">java.lang.Exception.printStackTrace()</outbound>
                <outbound type="feature" confirmed="no">java.lang.Integer.parseInt(java.lang.String)</outbound>
                <outbound type="class" confirmed="no">java.lang.NumberFormatException</outbound>
                <outbound type="class" confirmed="no">java.lang.Object</outbound>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="feature" confirmed="no">java.lang.String.equals(java.lang.Object)</outbound>
                <outbound type="feature" confirmed="no">java.lang.String.lastIndexOf(int)</outbound>
                <outbound type="feature" confirmed="no">java.lang.String.startsWith(java.lang.String)</outbound>
                <outbound type="feature" confirmed="no">java.lang.String.substring(int)</outbound>
                <outbound type="feature" confirmed="no">java.lang.String.toLowerCase()</outbound>
                <outbound type="class" confirmed="no">java.lang.StringBuilder</outbound>
                <outbound type="feature" confirmed="no">java.lang.StringBuilder.StringBuilder()</outbound>
                <outbound type="feature" confirmed="no">java.lang.StringBuilder.append(java.lang.Object)</outbound>
                <outbound type="feature" confirmed="no">java.lang.StringBuilder.append(java.lang.String)</outbound>
                <outbound type="feature" confirmed="no">java.lang.StringBuilder.toString()</outbound>
                <outbound type="feature" confirmed="no">java.lang.System.err</outbound>
                <outbound type="class" confirmed="no">java.lang.Throwable</outbound>
                <outbound type="class" confirmed="no">java.util.Iterator</outbound>
                <outbound type="feature" confirmed="no">java.util.Iterator.hasNext()</outbound>
                <outbound type="feature" confirmed="no">java.util.Iterator.next()</outbound>
                <outbound type="class" confirmed="no">java.util.Map</outbound>
                <outbound type="feature" confirmed="no">java.util.Map.get(java.lang.Object)</outbound>
                <outbound type="feature" confirmed="no">java.util.Map.keySet()</outbound>
                <outbound type="class" confirmed="no">java.util.Set</outbound>
                <outbound type="feature" confirmed="no">java.util.Set.iterator()</outbound>
                <outbound type="class" confirmed="no">java.util.StringTokenizer</outbound>
                <outbound type="feature" confirmed="no">java.util.StringTokenizer.StringTokenizer(java.lang.String, java.lang.String, boolean)</outbound>
                <outbound type="class" confirmed="no">org.osgi.framework.Bundle</outbound>
                <outbound type="feature" confirmed="no">org.osgi.framework.Bundle.start()</outbound>
                <outbound type="class" confirmed="no">org.osgi.framework.BundleContext</outbound>
                <outbound type="feature" confirmed="no">org.osgi.framework.BundleContext.getService(org.osgi.framework.ServiceReference)</outbound>
                <outbound type="feature" confirmed="no">org.osgi.framework.BundleContext.getServiceReference(java.lang.String)</outbound>
                <outbound type="feature" confirmed="no">org.osgi.framework.BundleContext.installBundle(java.lang.String, java.io.InputStream)</outbound>
                <outbound type="class" confirmed="no">org.osgi.framework.ServiceReference</outbound>
                <outbound type="class" confirmed="no">org.osgi.service.startlevel.StartLevel</outbound>
                <outbound type="feature" confirmed="no">org.osgi.service.startlevel.StartLevel.getInitialBundleStartLevel()</outbound>
                <outbound type="feature" confirmed="no">org.osgi.service.startlevel.StartLevel.setBundleStartLevel(org.osgi.framework.Bundle, int)</outbound>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.AutoProcessor.process(java.util.Map, org.osgi.framework.BundleContext)</inbound>
            </feature>
        </class>
        <class confirmed="yes">
            <name>com.sun.enterprise.glassfish.bootstrap.ClassPathBuilder</name>
            <outbound type="class" confirmed="no">java.lang.Object</outbound>
            <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainEquinox.addFrameworkJars(com.sun.enterprise.glassfish.bootstrap.ClassPathBuilder)</inbound>
            <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainFelix.addFrameworkJars(com.sun.enterprise.glassfish.bootstrap.ClassPathBuilder)</inbound>
            <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainHelper$ClassLoaderBuilder.ASMainHelper$ClassLoaderBuilder(java.util.Properties, java.lang.ClassLoader)</inbound>
            <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainHelper$ClassLoaderBuilder.addFrameworkJars()</inbound>
            <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainHelper$ClassLoaderBuilder.addJDKToolsJar()</inbound>
            <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainHelper$ClassLoaderBuilder.addLauncherJar()</inbound>
            <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainHelper$ClassLoaderBuilder.build()</inbound>
            <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainHelper$ClassLoaderBuilder.cpb</inbound>
            <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainHelper$ClassLoaderBuilder.findDerbyClient()</inbound>
            <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainHelper$EquinoxHelper.addFrameworkJars(com.sun.enterprise.glassfish.bootstrap.ClassPathBuilder)</inbound>
            <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainHelper$FelixHelper.addFrameworkJars(com.sun.enterprise.glassfish.bootstrap.ClassPathBuilder)</inbound>
            <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainHelper$KnopflerfishHelper.addFrameworkJars(com.sun.enterprise.glassfish.bootstrap.ClassPathBuilder)</inbound>
            <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainHelper$PlatformHelper.addFrameworkJars(com.sun.enterprise.glassfish.bootstrap.ClassPathBuilder)</inbound>
            <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainHelper$StaticHelper.addFrameworkJars(com.sun.enterprise.glassfish.bootstrap.ClassPathBuilder)</inbound>
            <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainKnopflerFish.addFrameworkJars(com.sun.enterprise.glassfish.bootstrap.ClassPathBuilder)</inbound>
            <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainOSGi.addFrameworkJars(com.sun.enterprise.glassfish.bootstrap.ClassPathBuilder)</inbound>
            <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainOSGi.addJDKToolsJar(com.sun.enterprise.glassfish.bootstrap.ClassPathBuilder)</inbound>
            <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainOSGi.findDerbyClient(com.sun.enterprise.glassfish.bootstrap.ClassPathBuilder)</inbound>
            <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainOSGi.setupLauncherClassLoader()</inbound>
            <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ClassPathBuilder$1.ClassPathBuilder$1(com.sun.enterprise.glassfish.bootstrap.ClassPathBuilder, java.lang.String[])</inbound>
            <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ClassPathBuilder$1.this$0</inbound>
            <feature confirmed="yes">
                <name>com.sun.enterprise.glassfish.bootstrap.ClassPathBuilder.ClassPathBuilder(java.lang.ClassLoader)</name>
                <outbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ClassPathBuilder.parent</outbound>
                <outbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ClassPathBuilder.urls</outbound>
                <outbound type="class" confirmed="no">java.lang.ClassLoader</outbound>
                <outbound type="feature" confirmed="no">java.lang.Object.Object()</outbound>
                <outbound type="feature" confirmed="no">java.util.ArrayList.ArrayList()</outbound>
                <outbound type="class" confirmed="no">java.util.List</outbound>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainHelper$ClassLoaderBuilder.ASMainHelper$ClassLoaderBuilder(java.util.Properties, java.lang.ClassLoader)</inbound>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainOSGi.setupLauncherClassLoader()</inbound>
            </feature>
            <feature confirmed="yes">
                <name>com.sun.enterprise.glassfish.bootstrap.ClassPathBuilder.addClassFolder(java.io.File)</name>
                <outbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ClassPathBuilder.addJar(java.io.File)</outbound>
                <outbound type="class" confirmed="no">java.io.File</outbound>
                <outbound type="class" confirmed="no">java.io.IOException</outbound>
            </feature>
            <feature confirmed="yes">
                <name>com.sun.enterprise.glassfish.bootstrap.ClassPathBuilder.addGlob(java.io.File, java.lang.String[])</name>
                <outbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ClassPathBuilder.addJar(java.io.File)</outbound>
                <outbound type="class" confirmed="no">java.io.File</outbound>
                <outbound type="feature" confirmed="no">java.io.File.getName()</outbound>
                <outbound type="feature" confirmed="no">java.io.File.listFiles()</outbound>
                <outbound type="class" confirmed="no">java.io.IOException</outbound>
                <outbound type="class" confirmed="no">java.lang.CharSequence</outbound>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="feature" confirmed="no">java.lang.String.replace(java.lang.CharSequence, java.lang.CharSequence)</outbound>
                <outbound type="class" confirmed="no">java.lang.StringBuilder</outbound>
                <outbound type="feature" confirmed="no">java.lang.StringBuilder.StringBuilder()</outbound>
                <outbound type="feature" confirmed="no">java.lang.StringBuilder.append(char)</outbound>
                <outbound type="feature" confirmed="no">java.lang.StringBuilder.append(java.lang.String)</outbound>
                <outbound type="feature" confirmed="no">java.lang.StringBuilder.length()</outbound>
                <outbound type="feature" confirmed="no">java.lang.StringBuilder.toString()</outbound>
                <outbound type="class" confirmed="no">java.util.regex.Matcher</outbound>
                <outbound type="feature" confirmed="no">java.util.regex.Matcher.matches()</outbound>
                <outbound type="class" confirmed="no">java.util.regex.Pattern</outbound>
                <outbound type="feature" confirmed="no">java.util.regex.Pattern.compile(java.lang.String)</outbound>
                <outbound type="feature" confirmed="no">java.util.regex.Pattern.matcher(java.lang.CharSequence)</outbound>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainEquinox.addFrameworkJars(com.sun.enterprise.glassfish.bootstrap.ClassPathBuilder)</inbound>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainHelper$ClassLoaderBuilder.findDerbyClient()</inbound>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainHelper$EquinoxHelper.addFrameworkJars(com.sun.enterprise.glassfish.bootstrap.ClassPathBuilder)</inbound>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainOSGi.findDerbyClient(com.sun.enterprise.glassfish.bootstrap.ClassPathBuilder)</inbound>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainOSGi.setupLauncherClassLoader()</inbound>
            </feature>
            <feature confirmed="yes">
                <name>com.sun.enterprise.glassfish.bootstrap.ClassPathBuilder.addJar(java.io.File)</name>
                <outbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ClassPathBuilder.urls</outbound>
                <outbound type="class" confirmed="no">java.io.File</outbound>
                <outbound type="feature" confirmed="no">java.io.File.exists()</outbound>
                <outbound type="feature" confirmed="no">java.io.File.toURI()</outbound>
                <outbound type="class" confirmed="no">java.io.IOException</outbound>
                <outbound type="feature" confirmed="no">java.io.IOException.IOException(java.lang.String)</outbound>
                <outbound type="class" confirmed="no">java.lang.Object</outbound>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="class" confirmed="no">java.lang.StringBuilder</outbound>
                <outbound type="feature" confirmed="no">java.lang.StringBuilder.StringBuilder()</outbound>
                <outbound type="feature" confirmed="no">java.lang.StringBuilder.append(java.lang.Object)</outbound>
                <outbound type="feature" confirmed="no">java.lang.StringBuilder.append(java.lang.String)</outbound>
                <outbound type="feature" confirmed="no">java.lang.StringBuilder.toString()</outbound>
                <outbound type="class" confirmed="no">java.net.URI</outbound>
                <outbound type="feature" confirmed="no">java.net.URI.toURL()</outbound>
                <outbound type="class" confirmed="no">java.net.URL</outbound>
                <outbound type="class" confirmed="no">java.util.List</outbound>
                <outbound type="feature" confirmed="no">java.util.List.add(java.lang.Object)</outbound>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainFelix.addFrameworkJars(com.sun.enterprise.glassfish.bootstrap.ClassPathBuilder)</inbound>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainHelper$ClassLoaderBuilder.addJDKToolsJar()</inbound>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainHelper$ClassLoaderBuilder.addLauncherJar()</inbound>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainHelper$FelixHelper.addFrameworkJars(com.sun.enterprise.glassfish.bootstrap.ClassPathBuilder)</inbound>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainHelper$KnopflerfishHelper.addFrameworkJars(com.sun.enterprise.glassfish.bootstrap.ClassPathBuilder)</inbound>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainKnopflerFish.addFrameworkJars(com.sun.enterprise.glassfish.bootstrap.ClassPathBuilder)</inbound>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainOSGi.addJDKToolsJar(com.sun.enterprise.glassfish.bootstrap.ClassPathBuilder)</inbound>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ClassPathBuilder.addClassFolder(java.io.File)</inbound>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ClassPathBuilder.addGlob(java.io.File, java.lang.String[])</inbound>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ClassPathBuilder.addJarFolder(java.io.File, java.lang.String[])</inbound>
            </feature>
            <feature confirmed="yes">
                <name>com.sun.enterprise.glassfish.bootstrap.ClassPathBuilder.addJarFolder(java.io.File, java.lang.String[])</name>
                <outbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ClassPathBuilder$1.ClassPathBuilder$1(com.sun.enterprise.glassfish.bootstrap.ClassPathBuilder, java.lang.String[])</outbound>
                <outbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ClassPathBuilder.addJar(java.io.File)</outbound>
                <outbound type="class" confirmed="no">java.io.File</outbound>
                <outbound type="feature" confirmed="no">java.io.File.isDirectory()</outbound>
                <outbound type="feature" confirmed="no">java.io.File.listFiles(java.io.FileFilter)</outbound>
                <outbound type="class" confirmed="no">java.io.FileFilter</outbound>
                <outbound type="class" confirmed="no">java.io.IOException</outbound>
                <outbound type="feature" confirmed="no">java.io.IOException.IOException(java.lang.String)</outbound>
                <outbound type="class" confirmed="no">java.lang.Object</outbound>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="class" confirmed="no">java.lang.StringBuilder</outbound>
                <outbound type="feature" confirmed="no">java.lang.StringBuilder.StringBuilder()</outbound>
                <outbound type="feature" confirmed="no">java.lang.StringBuilder.append(java.lang.Object)</outbound>
                <outbound type="feature" confirmed="no">java.lang.StringBuilder.append(java.lang.String)</outbound>
                <outbound type="feature" confirmed="no">java.lang.StringBuilder.toString()</outbound>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainEquinox.addFrameworkJars(com.sun.enterprise.glassfish.bootstrap.ClassPathBuilder)</inbound>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainHelper$EquinoxHelper.addFrameworkJars(com.sun.enterprise.glassfish.bootstrap.ClassPathBuilder)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>com.sun.enterprise.glassfish.bootstrap.ClassPathBuilder.create()</name>
                <outbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ClassPathBuilder.parent</outbound>
                <outbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ClassPathBuilder.urls</outbound>
                <outbound type="class" confirmed="no">java.lang.ClassLoader</outbound>
                <outbound type="class" confirmed="no">java.lang.Object</outbound>
                <outbound type="class" confirmed="no">java.net.URL</outbound>
                <outbound type="feature" confirmed="no">java.net.URLClassLoader.URLClassLoader(java.net.URL[], java.lang.ClassLoader)</outbound>
                <outbound type="class" confirmed="no">java.net.URL[]</outbound>
                <outbound type="class" confirmed="no">java.util.List</outbound>
                <outbound type="feature" confirmed="no">java.util.List.size()</outbound>
                <outbound type="feature" confirmed="no">java.util.List.toArray(java.lang.Object[])</outbound>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainHelper$ClassLoaderBuilder.build()</inbound>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainOSGi.setupLauncherClassLoader()</inbound>
            </feature>
            <feature confirmed="yes">
                <name>com.sun.enterprise.glassfish.bootstrap.ClassPathBuilder.createExtensible(java.util.List)</name>
                <outbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ClassPathBuilder.parent</outbound>
                <outbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ClassPathBuilder.urls</outbound>
                <outbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ExtensibleClassLoader.ExtensibleClassLoader(java.net.URL[], java.lang.ClassLoader, java.util.List)</outbound>
                <outbound type="class" confirmed="no">java.lang.ClassLoader</outbound>
                <outbound type="class" confirmed="no">java.lang.Object</outbound>
                <outbound type="class" confirmed="no">java.net.URL</outbound>
                <outbound type="class" confirmed="no">java.net.URL[]</outbound>
                <outbound type="class" confirmed="no">java.util.List</outbound>
                <outbound type="feature" confirmed="no">java.util.List.size()</outbound>
                <outbound type="feature" confirmed="no">java.util.List.toArray(java.lang.Object[])</outbound>
            </feature>
            <feature confirmed="yes">
                <name>com.sun.enterprise.glassfish.bootstrap.ClassPathBuilder.parent</name>
                <outbound type="class" confirmed="no">java.lang.ClassLoader</outbound>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ClassPathBuilder.ClassPathBuilder(java.lang.ClassLoader)</inbound>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ClassPathBuilder.create()</inbound>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ClassPathBuilder.createExtensible(java.util.List)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>com.sun.enterprise.glassfish.bootstrap.ClassPathBuilder.urls</name>
                <outbound type="class" confirmed="no">java.util.List</outbound>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ClassPathBuilder.ClassPathBuilder(java.lang.ClassLoader)</inbound>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ClassPathBuilder.addJar(java.io.File)</inbound>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ClassPathBuilder.create()</inbound>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ClassPathBuilder.createExtensible(java.util.List)</inbound>
            </feature>
        </class>
        <class confirmed="yes">
            <name>com.sun.enterprise.glassfish.bootstrap.ClassPathBuilder$1</name>
            <outbound type="class" confirmed="no">java.io.FileFilter</outbound>
            <outbound type="class" confirmed="no">java.lang.Object</outbound>
            <feature confirmed="yes">
                <name>com.sun.enterprise.glassfish.bootstrap.ClassPathBuilder$1.ClassPathBuilder$1(com.sun.enterprise.glassfish.bootstrap.ClassPathBuilder, java.lang.String[])</name>
                <outbound type="class" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ClassPathBuilder</outbound>
                <outbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ClassPathBuilder$1.this$0</outbound>
                <outbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ClassPathBuilder$1.val$excludes</outbound>
                <outbound type="feature" confirmed="no">java.lang.Object.Object()</outbound>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ClassPathBuilder.addJarFolder(java.io.File, java.lang.String[])</inbound>
            </feature>
            <feature confirmed="yes">
                <name>com.sun.enterprise.glassfish.bootstrap.ClassPathBuilder$1.accept(java.io.File)</name>
                <outbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ClassPathBuilder$1.val$excludes</outbound>
                <outbound type="class" confirmed="no">java.io.File</outbound>
                <outbound type="feature" confirmed="no">java.io.File.getName()</outbound>
                <outbound type="feature" confirmed="no">java.io.File.getPath()</outbound>
                <outbound type="class" confirmed="no">java.lang.Object</outbound>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="feature" confirmed="no">java.lang.String.endsWith(java.lang.String)</outbound>
                <outbound type="feature" confirmed="no">java.lang.String.equals(java.lang.Object)</outbound>
            </feature>
            <feature confirmed="yes">
                <name>com.sun.enterprise.glassfish.bootstrap.ClassPathBuilder$1.this$0</name>
                <outbound type="class" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ClassPathBuilder</outbound>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ClassPathBuilder$1.ClassPathBuilder$1(com.sun.enterprise.glassfish.bootstrap.ClassPathBuilder, java.lang.String[])</inbound>
            </feature>
            <feature confirmed="yes">
                <name>com.sun.enterprise.glassfish.bootstrap.ClassPathBuilder$1.val$excludes</name>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ClassPathBuilder$1.ClassPathBuilder$1(com.sun.enterprise.glassfish.bootstrap.ClassPathBuilder, java.lang.String[])</inbound>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ClassPathBuilder$1.accept(java.io.File)</inbound>
            </feature>
        </class>
        <class confirmed="yes">
            <name>com.sun.enterprise.glassfish.bootstrap.Constants</name>
            <outbound type="class" confirmed="no">java.lang.Object</outbound>
            <feature confirmed="yes">
                <name>com.sun.enterprise.glassfish.bootstrap.Constants.ARGS_PROP</name>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
            </feature>
            <feature confirmed="yes">
                <name>com.sun.enterprise.glassfish.bootstrap.Constants.ARG_SEP</name>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
            </feature>
            <feature confirmed="yes">
                <name>com.sun.enterprise.glassfish.bootstrap.Constants.Constants()</name>
                <outbound type="feature" confirmed="no">java.lang.Object.Object()</outbound>
            </feature>
            <feature confirmed="yes">
                <name>com.sun.enterprise.glassfish.bootstrap.Constants.DEFAULT_DOMAINS_DIR_PROPNAME</name>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
            </feature>
            <feature confirmed="yes">
                <name>com.sun.enterprise.glassfish.bootstrap.Constants.GF_KERNEL</name>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
            </feature>
            <feature confirmed="yes">
                <name>com.sun.enterprise.glassfish.bootstrap.Constants.HK2_CACHE_DIR</name>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
            </feature>
            <feature confirmed="yes">
                <name>com.sun.enterprise.glassfish.bootstrap.Constants.INSTALL_ROOT_PROP_NAME</name>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
            </feature>
            <feature confirmed="yes">
                <name>com.sun.enterprise.glassfish.bootstrap.Constants.INSTALL_ROOT_URI_PROP_NAME</name>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
            </feature>
            <feature confirmed="yes">
                <name>com.sun.enterprise.glassfish.bootstrap.Constants.INSTANCE_ROOT_PROP_NAME</name>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
            </feature>
            <feature confirmed="yes">
                <name>com.sun.enterprise.glassfish.bootstrap.Constants.INSTANCE_ROOT_URI_PROP_NAME</name>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
            </feature>
            <feature confirmed="yes">
                <name>com.sun.enterprise.glassfish.bootstrap.Constants.ORIGINAL_ARGS</name>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
            </feature>
            <feature confirmed="yes">
                <name>com.sun.enterprise.glassfish.bootstrap.Constants.ORIGINAL_CN</name>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
            </feature>
            <feature confirmed="yes">
                <name>com.sun.enterprise.glassfish.bootstrap.Constants.ORIGINAL_CP</name>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
            </feature>
            <feature confirmed="yes">
                <name>com.sun.enterprise.glassfish.bootstrap.Constants.PLATFORM_PROPERTY_KEY</name>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
            </feature>
        </class>
        <class confirmed="yes">
            <name>com.sun.enterprise.glassfish.bootstrap.Constants$Platform</name>
            <outbound type="class" confirmed="no">java.lang.Enum</outbound>
            <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainEquinox.getName()</inbound>
            <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainFelix.getName()</inbound>
            <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainHelper$2.static {}</inbound>
            <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainHelper$PlatformHelper.getPlatformHelper(java.util.Properties)</inbound>
            <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainHelper.isOSGiPlatform(java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainHelper.whichPlatform()</inbound>
            <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainKnopflerFish.getName()</inbound>
            <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainStatic.getName()</inbound>
            <feature confirmed="yes">
                <name>com.sun.enterprise.glassfish.bootstrap.Constants$Platform.$VALUES</name>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.Constants$Platform.static {}</inbound>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.Constants$Platform.values()</inbound>
            </feature>
            <feature confirmed="yes">
                <name>com.sun.enterprise.glassfish.bootstrap.Constants$Platform.Constants$Platform(java.lang.String, int)</name>
                <outbound type="feature" confirmed="no">java.lang.Enum.Enum(java.lang.String, int)</outbound>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.Constants$Platform.static {}</inbound>
            </feature>
            <feature confirmed="yes">
                <name>com.sun.enterprise.glassfish.bootstrap.Constants$Platform.Equinox</name>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainEquinox.getName()</inbound>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainHelper$2.static {}</inbound>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.Constants$Platform.static {}</inbound>
            </feature>
            <feature confirmed="yes">
                <name>com.sun.enterprise.glassfish.bootstrap.Constants$Platform.Felix</name>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainFelix.getName()</inbound>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainHelper$2.static {}</inbound>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainHelper.whichPlatform()</inbound>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.Constants$Platform.static {}</inbound>
            </feature>
            <feature confirmed="yes">
                <name>com.sun.enterprise.glassfish.bootstrap.Constants$Platform.Knopflerfish</name>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainHelper$2.static {}</inbound>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainKnopflerFish.getName()</inbound>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.Constants$Platform.static {}</inbound>
            </feature>
            <feature confirmed="yes">
                <name>com.sun.enterprise.glassfish.bootstrap.Constants$Platform.Static</name>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainHelper$2.static {}</inbound>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainStatic.getName()</inbound>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.Constants$Platform.static {}</inbound>
            </feature>
            <feature confirmed="no">
                <name>com.sun.enterprise.glassfish.bootstrap.Constants$Platform.ordinal()</name>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainHelper$2.static {}</inbound>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainHelper$PlatformHelper.getPlatformHelper(java.util.Properties)</inbound>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainHelper.isOSGiPlatform(java.lang.String)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>com.sun.enterprise.glassfish.bootstrap.Constants$Platform.static {}</name>
                <outbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.Constants$Platform.$VALUES</outbound>
                <outbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.Constants$Platform.Constants$Platform(java.lang.String, int)</outbound>
                <outbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.Constants$Platform.Equinox</outbound>
                <outbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.Constants$Platform.Felix</outbound>
                <outbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.Constants$Platform.Knopflerfish</outbound>
                <outbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.Constants$Platform.Static</outbound>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
            </feature>
            <feature confirmed="no">
                <name>com.sun.enterprise.glassfish.bootstrap.Constants$Platform.toString()</name>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainEquinox.getName()</inbound>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainFelix.getName()</inbound>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainHelper.whichPlatform()</inbound>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainKnopflerFish.getName()</inbound>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainStatic.getName()</inbound>
            </feature>
            <feature confirmed="yes">
                <name>com.sun.enterprise.glassfish.bootstrap.Constants$Platform.valueOf(java.lang.String)</name>
                <outbound type="class" confirmed="no">java.lang.Class</outbound>
                <outbound type="class" confirmed="no">java.lang.Enum</outbound>
                <outbound type="feature" confirmed="no">java.lang.Enum.valueOf(java.lang.Class, java.lang.String)</outbound>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainHelper$PlatformHelper.getPlatformHelper(java.util.Properties)</inbound>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainHelper.isOSGiPlatform(java.lang.String)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>com.sun.enterprise.glassfish.bootstrap.Constants$Platform.values()</name>
                <outbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.Constants$Platform.$VALUES</outbound>
                <outbound type="class" confirmed="no">com.sun.enterprise.glassfish.bootstrap.Constants$Platform[]</outbound>
                <outbound type="feature" confirmed="no">com.sun.enterprise.glassfish.bootstrap.Constants$Platform[].clone()</outbound>
                <outbound type="class" confirmed="no">java.lang.Object</outbound>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainHelper$2.static {}</inbound>
            </feature>
        </class>
        <class confirmed="no">
            <name>com.sun.enterprise.glassfish.bootstrap.Constants$Platform[]</name>
            <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.Constants$Platform.values()</inbound>
            <feature confirmed="no">
                <name>com.sun.enterprise.glassfish.bootstrap.Constants$Platform[].clone()</name>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.Constants$Platform.values()</inbound>
            </feature>
        </class>
        <class confirmed="yes">
            <name>com.sun.enterprise.glassfish.bootstrap.ExtensibleClassLoader</name>
            <outbound type="class" confirmed="no">com.sun.enterprise.module.RepositoryChangeListener</outbound>
            <outbound type="class" confirmed="no">java.net.URLClassLoader</outbound>
            <feature confirmed="yes">
                <name>com.sun.enterprise.glassfish.bootstrap.ExtensibleClassLoader.ExtensibleClassLoader(java.net.URL[], java.lang.ClassLoader, java.util.List)</name>
                <outbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ExtensibleClassLoader.LOGGER</outbound>
                <outbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ExtensibleClassLoader.addURI(java.net.URI)</outbound>
                <outbound type="class" confirmed="no">com.sun.enterprise.module.Repository</outbound>
                <outbound type="feature" confirmed="no">com.sun.enterprise.module.Repository.addListener(com.sun.enterprise.module.RepositoryChangeListener)</outbound>
                <outbound type="feature" confirmed="no">com.sun.enterprise.module.Repository.getJarLocations()</outbound>
                <outbound type="class" confirmed="no">com.sun.enterprise.module.RepositoryChangeListener</outbound>
                <outbound type="class" confirmed="no">java.lang.ClassLoader</outbound>
                <outbound type="class" confirmed="no">java.lang.Object</outbound>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="class" confirmed="no">java.lang.StringBuilder</outbound>
                <outbound type="feature" confirmed="no">java.lang.StringBuilder.StringBuilder()</outbound>
                <outbound type="feature" confirmed="no">java.lang.StringBuilder.append(java.lang.Object)</outbound>
                <outbound type="feature" confirmed="no">java.lang.StringBuilder.append(java.lang.String)</outbound>
                <outbound type="feature" confirmed="no">java.lang.StringBuilder.toString()</outbound>
                <outbound type="class" confirmed="no">java.net.URI</outbound>
                <outbound type="class" confirmed="no">java.net.URL</outbound>
                <outbound type="feature" confirmed="no">java.net.URLClassLoader.URLClassLoader(java.net.URL[], java.lang.ClassLoader)</outbound>
                <outbound type="class" confirmed="no">java.util.Iterator</outbound>
                <outbound type="feature" confirmed="no">java.util.Iterator.hasNext()</outbound>
                <outbound type="feature" confirmed="no">java.util.Iterator.next()</outbound>
                <outbound type="class" confirmed="no">java.util.List</outbound>
                <outbound type="feature" confirmed="no">java.util.List.iterator()</outbound>
                <outbound type="class" confirmed="no">java.util.logging.Logger</outbound>
                <outbound type="feature" confirmed="no">java.util.logging.Logger.info(java.lang.String)</outbound>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ClassPathBuilder.createExtensible(java.util.List)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>com.sun.enterprise.glassfish.bootstrap.ExtensibleClassLoader.LOGGER</name>
                <outbound type="class" confirmed="no">java.util.logging.Logger</outbound>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ExtensibleClassLoader.ExtensibleClassLoader(java.net.URL[], java.lang.ClassLoader, java.util.List)</inbound>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ExtensibleClassLoader.addURI(java.net.URI)</inbound>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ExtensibleClassLoader.added(java.net.URI)</inbound>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ExtensibleClassLoader.static {}</inbound>
            </feature>
            <feature confirmed="yes">
                <name>com.sun.enterprise.glassfish.bootstrap.ExtensibleClassLoader.addURI(java.net.URI)</name>
                <outbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ExtensibleClassLoader.LOGGER</outbound>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="class" confirmed="no">java.lang.Throwable</outbound>
                <outbound type="class" confirmed="no">java.net.MalformedURLException</outbound>
                <outbound type="class" confirmed="no">java.net.URI</outbound>
                <outbound type="feature" confirmed="no">java.net.URI.toURL()</outbound>
                <outbound type="class" confirmed="no">java.net.URL</outbound>
                <outbound type="feature" confirmed="no">java.net.URLClassLoader.addURL(java.net.URL)</outbound>
                <outbound type="class" confirmed="no">java.util.logging.Level</outbound>
                <outbound type="feature" confirmed="no">java.util.logging.Level.SEVERE</outbound>
                <outbound type="class" confirmed="no">java.util.logging.Logger</outbound>
                <outbound type="feature" confirmed="no">java.util.logging.Logger.log(java.util.logging.Level, java.lang.String, java.lang.Throwable)</outbound>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ExtensibleClassLoader.ExtensibleClassLoader(java.net.URL[], java.lang.ClassLoader, java.util.List)</inbound>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ExtensibleClassLoader.added(java.net.URI)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>com.sun.enterprise.glassfish.bootstrap.ExtensibleClassLoader.added(java.net.URI)</name>
                <outbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ExtensibleClassLoader.LOGGER</outbound>
                <outbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ExtensibleClassLoader.addURI(java.net.URI)</outbound>
                <outbound type="feature" confirmed="no">java.io.File.File(java.net.URI)</outbound>
                <outbound type="feature" confirmed="no">java.io.File.isDirectory()</outbound>
                <outbound type="class" confirmed="no">java.lang.Object</outbound>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="class" confirmed="no">java.lang.StringBuilder</outbound>
                <outbound type="feature" confirmed="no">java.lang.StringBuilder.StringBuilder()</outbound>
                <outbound type="feature" confirmed="no">java.lang.StringBuilder.append(java.lang.Object)</outbound>
                <outbound type="feature" confirmed="no">java.lang.StringBuilder.append(java.lang.String)</outbound>
                <outbound type="feature" confirmed="no">java.lang.StringBuilder.toString()</outbound>
                <outbound type="class" confirmed="no">java.net.URI</outbound>
                <outbound type="class" confirmed="no">java.util.logging.Logger</outbound>
                <outbound type="feature" confirmed="no">java.util.logging.Logger.info(java.lang.String)</outbound>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ExtensibleClassLoader.jarAdded(java.net.URI)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>com.sun.enterprise.glassfish.bootstrap.ExtensibleClassLoader.jarAdded(java.net.URI)</name>
                <outbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ExtensibleClassLoader.added(java.net.URI)</outbound>
                <outbound type="class" confirmed="no">java.net.URI</outbound>
            </feature>
            <feature confirmed="yes">
                <name>com.sun.enterprise.glassfish.bootstrap.ExtensibleClassLoader.jarRemoved(java.net.URI)</name>
                <outbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ExtensibleClassLoader.removed(java.net.URI)</outbound>
                <outbound type="class" confirmed="no">java.net.URI</outbound>
            </feature>
            <feature confirmed="yes">
                <name>com.sun.enterprise.glassfish.bootstrap.ExtensibleClassLoader.moduleAdded(com.sun.enterprise.module.ModuleDefinition)</name>
                <outbound type="class" confirmed="no">com.sun.enterprise.module.ModuleDefinition</outbound>
            </feature>
            <feature confirmed="yes">
                <name>com.sun.enterprise.glassfish.bootstrap.ExtensibleClassLoader.moduleRemoved(com.sun.enterprise.module.ModuleDefinition)</name>
                <outbound type="class" confirmed="no">com.sun.enterprise.module.ModuleDefinition</outbound>
            </feature>
            <feature confirmed="yes">
                <name>com.sun.enterprise.glassfish.bootstrap.ExtensibleClassLoader.removed(java.net.URI)</name>
                <outbound type="class" confirmed="no">java.net.URI</outbound>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ExtensibleClassLoader.jarRemoved(java.net.URI)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>com.sun.enterprise.glassfish.bootstrap.ExtensibleClassLoader.static {}</name>
                <outbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ExtensibleClassLoader.LOGGER</outbound>
                <outbound type="feature" confirmed="no">java.lang.Class.getName()</outbound>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="class" confirmed="no">java.util.logging.Logger</outbound>
                <outbound type="feature" confirmed="no">java.util.logging.Logger.getLogger(java.lang.String)</outbound>
            </feature>
        </class>
        <class confirmed="yes">
            <name>com.sun.enterprise.glassfish.bootstrap.GFModuleDefinition</name>
            <outbound type="class" confirmed="no">com.sun.enterprise.module.common_impl.DefaultModuleDefinition</outbound>
            <feature confirmed="yes">
                <name>com.sun.enterprise.glassfish.bootstrap.GFModuleDefinition.GFModuleDefinition(java.io.File)</name>
                <outbound type="feature" confirmed="no">com.sun.enterprise.module.common_impl.DefaultModuleDefinition.DefaultModuleDefinition(java.io.File)</outbound>
                <outbound type="class" confirmed="no">java.io.File</outbound>
                <outbound type="class" confirmed="no">java.io.IOException</outbound>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.GFRepository.loadJar(java.io.File)</inbound>
            </feature>
        </class>
        <class confirmed="yes">
            <name>com.sun.enterprise.glassfish.bootstrap.GFRepository</name>
            <outbound type="class" confirmed="no">com.sun.enterprise.module.common_impl.DirectoryBasedRepository</outbound>
            <feature confirmed="yes">
                <name>com.sun.enterprise.glassfish.bootstrap.GFRepository.GFRepository(java.lang.String, java.io.File)</name>
                <outbound type="feature" confirmed="no">com.sun.enterprise.module.common_impl.DirectoryBasedRepository.DirectoryBasedRepository(java.lang.String, java.io.File)</outbound>
                <outbound type="class" confirmed="no">java.io.File</outbound>
                <outbound type="class" confirmed="no">java.io.FileNotFoundException</outbound>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
            </feature>
            <feature confirmed="yes">
                <name>com.sun.enterprise.glassfish.bootstrap.GFRepository.loadJar(java.io.File)</name>
                <outbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.GFModuleDefinition.GFModuleDefinition(java.io.File)</outbound>
                <outbound type="class" confirmed="no">com.sun.enterprise.module.ModuleDefinition</outbound>
                <outbound type="class" confirmed="no">java.io.File</outbound>
                <outbound type="class" confirmed="no">java.io.IOException</outbound>
            </feature>
        </class>
        <class confirmed="yes">
            <name>com.sun.enterprise.glassfish.bootstrap.GlassFishActivator</name>
            <outbound type="class" confirmed="no">java.lang.Object</outbound>
            <outbound type="class" confirmed="no">org.osgi.framework.BundleActivator</outbound>
            <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.GlassFishActivator$1$1.start()</inbound>
            <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.GlassFishActivator$1.GlassFishActivator$1(com.sun.enterprise.glassfish.bootstrap.GlassFishActivator, org.osgi.util.tracker.ServiceTracker)</inbound>
            <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.GlassFishActivator$1.newGlassFish(java.util.Properties)</inbound>
            <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.GlassFishActivator$1.this$0</inbound>
            <feature confirmed="yes">
                <name>com.sun.enterprise.glassfish.bootstrap.GlassFishActivator.GlassFishActivator()</name>
                <outbound type="feature" confirmed="no">java.lang.Object.Object()</outbound>
            </feature>
            <feature confirmed="yes">
                <name>com.sun.enterprise.glassfish.bootstrap.GlassFishActivator.access$000(com.sun.enterprise.glassfish.bootstrap.GlassFishActivator, java.util.Properties)</name>
                <outbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.GlassFishActivator.setEnv(java.util.Properties)</outbound>
                <outbound type="class" confirmed="no">java.util.Properties</outbound>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.GlassFishActivator$1.newGlassFish(java.util.Properties)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>com.sun.enterprise.glassfish.bootstrap.GlassFishActivator.access$100(com.sun.enterprise.glassfish.bootstrap.GlassFishActivator)</name>
                <outbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.GlassFishActivator.bundleContext</outbound>
                <outbound type="class" confirmed="no">org.osgi.framework.BundleContext</outbound>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.GlassFishActivator$1.newGlassFish(java.util.Properties)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>com.sun.enterprise.glassfish.bootstrap.GlassFishActivator.access$200(com.sun.enterprise.glassfish.bootstrap.GlassFishActivator)</name>
                <outbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.GlassFishActivator.startPostStartupBundles()</outbound>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.GlassFishActivator$1$1.start()</inbound>
            </feature>
            <feature confirmed="yes">
                <name>com.sun.enterprise.glassfish.bootstrap.GlassFishActivator.bundleContext</name>
                <outbound type="class" confirmed="no">org.osgi.framework.BundleContext</outbound>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.GlassFishActivator.access$100(com.sun.enterprise.glassfish.bootstrap.GlassFishActivator)</inbound>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.GlassFishActivator.findBundle(java.lang.String)</inbound>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.GlassFishActivator.registerGlassFishRuntime()</inbound>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.GlassFishActivator.start(org.osgi.framework.BundleContext)</inbound>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.GlassFishActivator.startConfigAdmin()</inbound>
            </feature>
            <feature confirmed="yes">
                <name>com.sun.enterprise.glassfish.bootstrap.GlassFishActivator.dict2Properties(java.util.Dictionary)</name>
                <outbound type="class" confirmed="no">java.lang.Object</outbound>
                <outbound type="feature" confirmed="no">java.lang.Object.toString()</outbound>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="class" confirmed="no">java.util.Dictionary</outbound>
                <outbound type="feature" confirmed="no">java.util.Dictionary.get(java.lang.Object)</outbound>
                <outbound type="feature" confirmed="no">java.util.Dictionary.keys()</outbound>
                <outbound type="class" confirmed="no">java.util.Enumeration</outbound>
                <outbound type="feature" confirmed="no">java.util.Enumeration.hasMoreElements()</outbound>
                <outbound type="feature" confirmed="no">java.util.Enumeration.nextElement()</outbound>
                <outbound type="class" confirmed="no">java.util.Properties</outbound>
                <outbound type="feature" confirmed="no">java.util.Properties.Properties()</outbound>
                <outbound type="feature" confirmed="no">java.util.Properties.put(java.lang.Object, java.lang.Object)</outbound>
            </feature>
            <feature confirmed="yes">
                <name>com.sun.enterprise.glassfish.bootstrap.GlassFishActivator.findBundle(java.lang.String)</name>
                <outbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.GlassFishActivator.bundleContext</outbound>
                <outbound type="class" confirmed="no">java.lang.Object</outbound>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="feature" confirmed="no">java.lang.String.equals(java.lang.Object)</outbound>
                <outbound type="class" confirmed="no">org.osgi.framework.Bundle</outbound>
                <outbound type="feature" confirmed="no">org.osgi.framework.Bundle.getSymbolicName()</outbound>
                <outbound type="class" confirmed="no">org.osgi.framework.BundleContext</outbound>
                <outbound type="feature" confirmed="no">org.osgi.framework.BundleContext.getBundles()</outbound>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.GlassFishActivator.startBundle(java.lang.String)</inbound>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.GlassFishActivator.stopBundle(java.lang.String)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>com.sun.enterprise.glassfish.bootstrap.GlassFishActivator.registerGlassFishRuntime()</name>
                <outbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.GlassFishActivator$1.GlassFishActivator$1(com.sun.enterprise.glassfish.bootstrap.GlassFishActivator, org.osgi.util.tracker.ServiceTracker)</outbound>
                <outbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.GlassFishActivator.bundleContext</outbound>
                <outbound type="class" confirmed="no">com.sun.enterprise.module.bootstrap.Main</outbound>
                <outbound type="feature" confirmed="no">java.lang.Class.getName()</outbound>
                <outbound type="class" confirmed="no">java.lang.InterruptedException</outbound>
                <outbound type="class" confirmed="no">java.lang.Object</outbound>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="class" confirmed="no">java.util.Dictionary</outbound>
                <outbound type="class" confirmed="yes">org.glassfish.experimentalgfapi.GlassFishRuntime</outbound>
                <outbound type="class" confirmed="no">org.osgi.framework.BundleContext</outbound>
                <outbound type="feature" confirmed="no">org.osgi.framework.BundleContext.registerService(java.lang.String, java.lang.Object, java.util.Dictionary)</outbound>
                <outbound type="class" confirmed="no">org.osgi.framework.ServiceRegistration</outbound>
                <outbound type="class" confirmed="no">org.osgi.util.tracker.ServiceTracker</outbound>
                <outbound type="feature" confirmed="no">org.osgi.util.tracker.ServiceTracker.ServiceTracker(org.osgi.framework.BundleContext, java.lang.String, org.osgi.util.tracker.ServiceTrackerCustomizer)</outbound>
                <outbound type="feature" confirmed="no">org.osgi.util.tracker.ServiceTracker.open()</outbound>
                <outbound type="class" confirmed="no">org.osgi.util.tracker.ServiceTrackerCustomizer</outbound>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.GlassFishActivator.start(org.osgi.framework.BundleContext)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>com.sun.enterprise.glassfish.bootstrap.GlassFishActivator.setEnv(java.util.Properties)</name>
                <outbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainHelper.parseAsEnv(java.io.File)</outbound>
                <outbound type="class" confirmed="no">java.io.File</outbound>
                <outbound type="feature" confirmed="no">java.io.File.File(java.lang.String)</outbound>
                <outbound type="feature" confirmed="no">java.io.File.getAbsolutePath()</outbound>
                <outbound type="feature" confirmed="no">java.io.File.toURI()</outbound>
                <outbound type="class" confirmed="no">java.lang.Object</outbound>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="feature" confirmed="no">java.lang.String.isEmpty()</outbound>
                <outbound type="feature" confirmed="no">java.lang.System.setProperty(java.lang.String, java.lang.String)</outbound>
                <outbound type="class" confirmed="no">java.net.URI</outbound>
                <outbound type="feature" confirmed="no">java.net.URI.toString()</outbound>
                <outbound type="class" confirmed="no">java.util.Iterator</outbound>
                <outbound type="feature" confirmed="no">java.util.Iterator.hasNext()</outbound>
                <outbound type="feature" confirmed="no">java.util.Iterator.next()</outbound>
                <outbound type="class" confirmed="no">java.util.Properties</outbound>
                <outbound type="feature" confirmed="no">java.util.Properties.getProperty(java.lang.String)</outbound>
                <outbound type="feature" confirmed="no">java.util.Properties.stringPropertyNames()</outbound>
                <outbound type="class" confirmed="no">java.util.Set</outbound>
                <outbound type="feature" confirmed="no">java.util.Set.iterator()</outbound>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.GlassFishActivator.access$000(com.sun.enterprise.glassfish.bootstrap.GlassFishActivator, java.util.Properties)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>com.sun.enterprise.glassfish.bootstrap.GlassFishActivator.start(org.osgi.framework.BundleContext)</name>
                <outbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.GlassFishActivator.bundleContext</outbound>
                <outbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.GlassFishActivator.registerGlassFishRuntime()</outbound>
                <outbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.GlassFishActivator.startBundles()</outbound>
                <outbound type="class" confirmed="no">java.lang.Exception</outbound>
                <outbound type="class" confirmed="no">org.osgi.framework.BundleContext</outbound>
            </feature>
            <feature confirmed="yes">
                <name>com.sun.enterprise.glassfish.bootstrap.GlassFishActivator.startBundle(java.lang.String)</name>
                <outbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.GlassFishActivator.findBundle(java.lang.String)</outbound>
                <outbound type="class" confirmed="no">java.io.PrintStream</outbound>
                <outbound type="feature" confirmed="no">java.io.PrintStream.println(java.lang.String)</outbound>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="class" confirmed="no">java.lang.StringBuilder</outbound>
                <outbound type="feature" confirmed="no">java.lang.StringBuilder.StringBuilder()</outbound>
                <outbound type="feature" confirmed="no">java.lang.StringBuilder.append(java.lang.String)</outbound>
                <outbound type="feature" confirmed="no">java.lang.StringBuilder.toString()</outbound>
                <outbound type="feature" confirmed="no">java.lang.System.out</outbound>
                <outbound type="class" confirmed="no">org.osgi.framework.Bundle</outbound>
                <outbound type="feature" confirmed="no">org.osgi.framework.Bundle.start(int)</outbound>
                <outbound type="class" confirmed="no">org.osgi.framework.BundleException</outbound>
                <outbound type="feature" confirmed="no">org.osgi.framework.BundleException.printStackTrace()</outbound>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.GlassFishActivator.startBundles()</inbound>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.GlassFishActivator.startConfigAdmin()</inbound>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.GlassFishActivator.startPostStartupBundles()</inbound>
            </feature>
            <feature confirmed="yes">
                <name>com.sun.enterprise.glassfish.bootstrap.GlassFishActivator.startBundles()</name>
                <outbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.GlassFishActivator.startBundle(java.lang.String)</outbound>
                <outbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.GlassFishActivator.startConfigAdmin()</outbound>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.GlassFishActivator.start(org.osgi.framework.BundleContext)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>com.sun.enterprise.glassfish.bootstrap.GlassFishActivator.startConfigAdmin()</name>
                <outbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.GlassFishActivator.bundleContext</outbound>
                <outbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.GlassFishActivator.startBundle(java.lang.String)</outbound>
                <outbound type="feature" confirmed="no">java.lang.Class.getName()</outbound>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="class" confirmed="no">org.osgi.framework.BundleContext</outbound>
                <outbound type="feature" confirmed="no">org.osgi.framework.BundleContext.getServiceReference(java.lang.String)</outbound>
                <outbound type="feature" confirmed="no">org.osgi.framework.BundleContext.ungetService(org.osgi.framework.ServiceReference)</outbound>
                <outbound type="class" confirmed="no">org.osgi.framework.ServiceReference</outbound>
                <outbound type="class" confirmed="no">org.osgi.service.cm.ConfigurationAdmin</outbound>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.GlassFishActivator.startBundles()</inbound>
            </feature>
            <feature confirmed="yes">
                <name>com.sun.enterprise.glassfish.bootstrap.GlassFishActivator.startPostStartupBundles()</name>
                <outbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.GlassFishActivator.startBundle(java.lang.String)</outbound>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.GlassFishActivator.access$200(com.sun.enterprise.glassfish.bootstrap.GlassFishActivator)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>com.sun.enterprise.glassfish.bootstrap.GlassFishActivator.stop(org.osgi.framework.BundleContext)</name>
                <outbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.GlassFishActivator.stopBundle(java.lang.String)</outbound>
                <outbound type="class" confirmed="no">java.lang.Exception</outbound>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="class" confirmed="no">org.osgi.framework.BundleContext</outbound>
            </feature>
            <feature confirmed="yes">
                <name>com.sun.enterprise.glassfish.bootstrap.GlassFishActivator.stopBundle(java.lang.String)</name>
                <outbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.GlassFishActivator.findBundle(java.lang.String)</outbound>
                <outbound type="class" confirmed="no">java.io.PrintStream</outbound>
                <outbound type="feature" confirmed="no">java.io.PrintStream.println(java.lang.String)</outbound>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="class" confirmed="no">java.lang.StringBuilder</outbound>
                <outbound type="feature" confirmed="no">java.lang.StringBuilder.StringBuilder()</outbound>
                <outbound type="feature" confirmed="no">java.lang.StringBuilder.append(java.lang.String)</outbound>
                <outbound type="feature" confirmed="no">java.lang.StringBuilder.toString()</outbound>
                <outbound type="feature" confirmed="no">java.lang.System.out</outbound>
                <outbound type="class" confirmed="no">org.osgi.framework.Bundle</outbound>
                <outbound type="feature" confirmed="no">org.osgi.framework.Bundle.stop(int)</outbound>
                <outbound type="class" confirmed="no">org.osgi.framework.BundleException</outbound>
                <outbound type="feature" confirmed="no">org.osgi.framework.BundleException.printStackTrace()</outbound>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.GlassFishActivator.stop(org.osgi.framework.BundleContext)</inbound>
            </feature>
        </class>
        <class confirmed="yes">
            <name>com.sun.enterprise.glassfish.bootstrap.GlassFishActivator$1</name>
            <outbound type="class" confirmed="yes">org.glassfish.experimentalgfapi.GlassFishRuntime</outbound>
            <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.GlassFishActivator$1$1.GlassFishActivator$1$1(com.sun.enterprise.glassfish.bootstrap.GlassFishActivator$1, com.sun.enterprise.module.bootstrap.ModuleStartup, org.jvnet.hk2.component.Habitat)</inbound>
            <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.GlassFishActivator$1$1.start()</inbound>
            <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.GlassFishActivator$1$1.this$1</inbound>
            <feature confirmed="yes">
                <name>com.sun.enterprise.glassfish.bootstrap.GlassFishActivator$1.GlassFishActivator$1(com.sun.enterprise.glassfish.bootstrap.GlassFishActivator, org.osgi.util.tracker.ServiceTracker)</name>
                <outbound type="class" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.GlassFishActivator</outbound>
                <outbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.GlassFishActivator$1.this$0</outbound>
                <outbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.GlassFishActivator$1.val$hk2Tracker</outbound>
                <outbound type="feature" confirmed="yes">org.glassfish.experimentalgfapi.GlassFishRuntime.GlassFishRuntime()</outbound>
                <outbound type="class" confirmed="no">org.osgi.util.tracker.ServiceTracker</outbound>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.GlassFishActivator.registerGlassFishRuntime()</inbound>
            </feature>
            <feature confirmed="yes">
                <name>com.sun.enterprise.glassfish.bootstrap.GlassFishActivator$1.newGlassFish(java.util.Properties)</name>
                <outbound type="class" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.GlassFishActivator</outbound>
                <outbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.GlassFishActivator$1$1.GlassFishActivator$1$1(com.sun.enterprise.glassfish.bootstrap.GlassFishActivator$1, com.sun.enterprise.module.bootstrap.ModuleStartup, org.jvnet.hk2.component.Habitat)</outbound>
                <outbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.GlassFishActivator$1.this$0</outbound>
                <outbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.GlassFishActivator$1.val$hk2Tracker</outbound>
                <outbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.GlassFishActivator.access$000(com.sun.enterprise.glassfish.bootstrap.GlassFishActivator, java.util.Properties)</outbound>
                <outbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.GlassFishActivator.access$100(com.sun.enterprise.glassfish.bootstrap.GlassFishActivator)</outbound>
                <outbound type="class" confirmed="no">com.sun.enterprise.module.ModulesRegistry</outbound>
                <outbound type="class" confirmed="no">com.sun.enterprise.module.bootstrap.Main</outbound>
                <outbound type="feature" confirmed="no">com.sun.enterprise.module.bootstrap.Main.createHabitat(com.sun.enterprise.module.ModulesRegistry, com.sun.enterprise.module.bootstrap.StartupContext)</outbound>
                <outbound type="feature" confirmed="no">com.sun.enterprise.module.bootstrap.Main.findStartupService(com.sun.enterprise.module.ModulesRegistry, org.jvnet.hk2.component.Habitat, java.lang.String, com.sun.enterprise.module.bootstrap.StartupContext)</outbound>
                <outbound type="class" confirmed="no">com.sun.enterprise.module.bootstrap.ModuleStartup</outbound>
                <outbound type="class" confirmed="no">com.sun.enterprise.module.bootstrap.StartupContext</outbound>
                <outbound type="feature" confirmed="no">com.sun.enterprise.module.bootstrap.StartupContext.StartupContext(java.util.Properties)</outbound>
                <outbound type="class" confirmed="no">java.io.PrintStream</outbound>
                <outbound type="feature" confirmed="no">java.io.PrintStream.println(java.lang.String)</outbound>
                <outbound type="feature" confirmed="no">java.lang.Class.cast(java.lang.Object)</outbound>
                <outbound type="feature" confirmed="no">java.lang.Class.getName()</outbound>
                <outbound type="class" confirmed="no">java.lang.Exception</outbound>
                <outbound type="class" confirmed="no">java.lang.Object</outbound>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="class" confirmed="no">java.lang.StringBuilder</outbound>
                <outbound type="feature" confirmed="no">java.lang.StringBuilder.StringBuilder()</outbound>
                <outbound type="feature" confirmed="no">java.lang.StringBuilder.append(java.lang.Object)</outbound>
                <outbound type="feature" confirmed="no">java.lang.StringBuilder.append(java.lang.String)</outbound>
                <outbound type="feature" confirmed="no">java.lang.StringBuilder.toString()</outbound>
                <outbound type="feature" confirmed="no">java.lang.System.out</outbound>
                <outbound type="class" confirmed="no">java.util.Dictionary</outbound>
                <outbound type="class" confirmed="no">java.util.Properties</outbound>
                <outbound type="class" confirmed="yes">org.glassfish.experimentalgfapi.GlassFish</outbound>
                <outbound type="class" confirmed="no">org.jvnet.hk2.component.Habitat</outbound>
                <outbound type="class" confirmed="no">org.osgi.framework.BundleContext</outbound>
                <outbound type="feature" confirmed="no">org.osgi.framework.BundleContext.getService(org.osgi.framework.ServiceReference)</outbound>
                <outbound type="feature" confirmed="no">org.osgi.framework.BundleContext.getServiceReference(java.lang.String)</outbound>
                <outbound type="feature" confirmed="no">org.osgi.framework.BundleContext.registerService(java.lang.String, java.lang.Object, java.util.Dictionary)</outbound>
                <outbound type="class" confirmed="no">org.osgi.framework.ServiceReference</outbound>
                <outbound type="class" confirmed="no">org.osgi.framework.ServiceRegistration</outbound>
                <outbound type="class" confirmed="no">org.osgi.util.tracker.ServiceTracker</outbound>
                <outbound type="feature" confirmed="no">org.osgi.util.tracker.ServiceTracker.waitForService(long)</outbound>
            </feature>
            <feature confirmed="yes">
                <name>com.sun.enterprise.glassfish.bootstrap.GlassFishActivator$1.this$0</name>
                <outbound type="class" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.GlassFishActivator</outbound>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.GlassFishActivator$1$1.start()</inbound>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.GlassFishActivator$1.GlassFishActivator$1(com.sun.enterprise.glassfish.bootstrap.GlassFishActivator, org.osgi.util.tracker.ServiceTracker)</inbound>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.GlassFishActivator$1.newGlassFish(java.util.Properties)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>com.sun.enterprise.glassfish.bootstrap.GlassFishActivator$1.val$hk2Tracker</name>
                <outbound type="class" confirmed="no">org.osgi.util.tracker.ServiceTracker</outbound>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.GlassFishActivator$1.GlassFishActivator$1(com.sun.enterprise.glassfish.bootstrap.GlassFishActivator, org.osgi.util.tracker.ServiceTracker)</inbound>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.GlassFishActivator$1.newGlassFish(java.util.Properties)</inbound>
            </feature>
        </class>
        <class confirmed="yes">
            <name>com.sun.enterprise.glassfish.bootstrap.GlassFishActivator$1$1</name>
            <outbound type="class" confirmed="no">java.lang.Object</outbound>
            <outbound type="class" confirmed="yes">org.glassfish.experimentalgfapi.GlassFish</outbound>
            <feature confirmed="yes">
                <name>com.sun.enterprise.glassfish.bootstrap.GlassFishActivator$1$1.GlassFishActivator$1$1(com.sun.enterprise.glassfish.bootstrap.GlassFishActivator$1, com.sun.enterprise.module.bootstrap.ModuleStartup, org.jvnet.hk2.component.Habitat)</name>
                <outbound type="class" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.GlassFishActivator$1</outbound>
                <outbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.GlassFishActivator$1$1.status</outbound>
                <outbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.GlassFishActivator$1$1.this$1</outbound>
                <outbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.GlassFishActivator$1$1.val$gfKernel</outbound>
                <outbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.GlassFishActivator$1$1.val$habitat</outbound>
                <outbound type="class" confirmed="no">com.sun.enterprise.module.bootstrap.ModuleStartup</outbound>
                <outbound type="feature" confirmed="no">java.lang.Object.Object()</outbound>
                <outbound type="class" confirmed="yes">org.glassfish.experimentalgfapi.GlassFish$Status</outbound>
                <outbound type="feature" confirmed="yes">org.glassfish.experimentalgfapi.GlassFish$Status.INIT</outbound>
                <outbound type="class" confirmed="no">org.jvnet.hk2.component.Habitat</outbound>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.GlassFishActivator$1.newGlassFish(java.util.Properties)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>com.sun.enterprise.glassfish.bootstrap.GlassFishActivator$1$1.dispose()</name>
                <outbound type="feature" confirmed="no">java.lang.UnsupportedOperationException.UnsupportedOperationException()</outbound>
            </feature>
            <feature confirmed="yes">
                <name>com.sun.enterprise.glassfish.bootstrap.GlassFishActivator$1$1.getStatus()</name>
                <outbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.GlassFishActivator$1$1.status</outbound>
                <outbound type="class" confirmed="yes">org.glassfish.experimentalgfapi.GlassFish$Status</outbound>
            </feature>
            <feature confirmed="yes">
                <name>com.sun.enterprise.glassfish.bootstrap.GlassFishActivator$1$1.lookupService(java.lang.Class, java.lang.String)</name>
                <outbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.GlassFishActivator$1$1.status</outbound>
                <outbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.GlassFishActivator$1$1.val$habitat</outbound>
                <outbound type="class" confirmed="no">java.lang.Class</outbound>
                <outbound type="feature" confirmed="no">java.lang.IllegalArgumentException.IllegalArgumentException(java.lang.String)</outbound>
                <outbound type="class" confirmed="no">java.lang.Object</outbound>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="class" confirmed="no">java.lang.StringBuilder</outbound>
                <outbound type="feature" confirmed="no">java.lang.StringBuilder.StringBuilder()</outbound>
                <outbound type="feature" confirmed="no">java.lang.StringBuilder.append(java.lang.Object)</outbound>
                <outbound type="feature" confirmed="no">java.lang.StringBuilder.append(java.lang.String)</outbound>
                <outbound type="feature" confirmed="no">java.lang.StringBuilder.toString()</outbound>
                <outbound type="class" confirmed="yes">org.glassfish.experimentalgfapi.GlassFish$Status</outbound>
                <outbound type="feature" confirmed="yes">org.glassfish.experimentalgfapi.GlassFish$Status.STARTED</outbound>
                <outbound type="class" confirmed="no">org.jvnet.hk2.component.Habitat</outbound>
                <outbound type="feature" confirmed="no">org.jvnet.hk2.component.Habitat.getComponent(java.lang.Class)</outbound>
                <outbound type="feature" confirmed="no">org.jvnet.hk2.component.Habitat.getComponent(java.lang.Class, java.lang.String)</outbound>
            </feature>
            <feature confirmed="yes">
                <name>com.sun.enterprise.glassfish.bootstrap.GlassFishActivator$1$1.start()</name>
                <outbound type="class" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.GlassFishActivator</outbound>
                <outbound type="class" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.GlassFishActivator$1</outbound>
                <outbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.GlassFishActivator$1$1.status</outbound>
                <outbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.GlassFishActivator$1$1.this$1</outbound>
                <outbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.GlassFishActivator$1$1.val$gfKernel</outbound>
                <outbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.GlassFishActivator$1.this$0</outbound>
                <outbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.GlassFishActivator.access$200(com.sun.enterprise.glassfish.bootstrap.GlassFishActivator)</outbound>
                <outbound type="class" confirmed="no">com.sun.enterprise.module.bootstrap.ModuleStartup</outbound>
                <outbound type="feature" confirmed="no">com.sun.enterprise.module.bootstrap.ModuleStartup.start()</outbound>
                <outbound type="class" confirmed="no">java.lang.Exception</outbound>
                <outbound type="feature" confirmed="no">java.lang.RuntimeException.RuntimeException(java.lang.Throwable)</outbound>
                <outbound type="class" confirmed="no">java.lang.Throwable</outbound>
                <outbound type="class" confirmed="yes">org.glassfish.experimentalgfapi.GlassFish$Status</outbound>
                <outbound type="feature" confirmed="yes">org.glassfish.experimentalgfapi.GlassFish$Status.STARTED</outbound>
                <outbound type="feature" confirmed="yes">org.glassfish.experimentalgfapi.GlassFish$Status.STARTING</outbound>
            </feature>
            <feature confirmed="yes">
                <name>com.sun.enterprise.glassfish.bootstrap.GlassFishActivator$1$1.status</name>
                <outbound type="class" confirmed="yes">org.glassfish.experimentalgfapi.GlassFish$Status</outbound>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.GlassFishActivator$1$1.GlassFishActivator$1$1(com.sun.enterprise.glassfish.bootstrap.GlassFishActivator$1, com.sun.enterprise.module.bootstrap.ModuleStartup, org.jvnet.hk2.component.Habitat)</inbound>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.GlassFishActivator$1$1.getStatus()</inbound>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.GlassFishActivator$1$1.lookupService(java.lang.Class, java.lang.String)</inbound>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.GlassFishActivator$1$1.start()</inbound>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.GlassFishActivator$1$1.stop()</inbound>
            </feature>
            <feature confirmed="yes">
                <name>com.sun.enterprise.glassfish.bootstrap.GlassFishActivator$1$1.stop()</name>
                <outbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.GlassFishActivator$1$1.status</outbound>
                <outbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.GlassFishActivator$1$1.val$gfKernel</outbound>
                <outbound type="class" confirmed="no">com.sun.enterprise.module.bootstrap.ModuleStartup</outbound>
                <outbound type="feature" confirmed="no">com.sun.enterprise.module.bootstrap.ModuleStartup.stop()</outbound>
                <outbound type="class" confirmed="no">java.lang.Exception</outbound>
                <outbound type="feature" confirmed="no">java.lang.RuntimeException.RuntimeException(java.lang.Throwable)</outbound>
                <outbound type="class" confirmed="no">java.lang.Throwable</outbound>
                <outbound type="class" confirmed="yes">org.glassfish.experimentalgfapi.GlassFish$Status</outbound>
                <outbound type="feature" confirmed="yes">org.glassfish.experimentalgfapi.GlassFish$Status.STARTED</outbound>
                <outbound type="feature" confirmed="yes">org.glassfish.experimentalgfapi.GlassFish$Status.STOPPED</outbound>
                <outbound type="feature" confirmed="yes">org.glassfish.experimentalgfapi.GlassFish$Status.STOPPING</outbound>
            </feature>
            <feature confirmed="yes">
                <name>com.sun.enterprise.glassfish.bootstrap.GlassFishActivator$1$1.this$1</name>
                <outbound type="class" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.GlassFishActivator$1</outbound>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.GlassFishActivator$1$1.GlassFishActivator$1$1(com.sun.enterprise.glassfish.bootstrap.GlassFishActivator$1, com.sun.enterprise.module.bootstrap.ModuleStartup, org.jvnet.hk2.component.Habitat)</inbound>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.GlassFishActivator$1$1.start()</inbound>
            </feature>
            <feature confirmed="yes">
                <name>com.sun.enterprise.glassfish.bootstrap.GlassFishActivator$1$1.val$gfKernel</name>
                <outbound type="class" confirmed="no">com.sun.enterprise.module.bootstrap.ModuleStartup</outbound>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.GlassFishActivator$1$1.GlassFishActivator$1$1(com.sun.enterprise.glassfish.bootstrap.GlassFishActivator$1, com.sun.enterprise.module.bootstrap.ModuleStartup, org.jvnet.hk2.component.Habitat)</inbound>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.GlassFishActivator$1$1.start()</inbound>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.GlassFishActivator$1$1.stop()</inbound>
            </feature>
            <feature confirmed="yes">
                <name>com.sun.enterprise.glassfish.bootstrap.GlassFishActivator$1$1.val$habitat</name>
                <outbound type="class" confirmed="no">org.jvnet.hk2.component.Habitat</outbound>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.GlassFishActivator$1$1.GlassFishActivator$1$1(com.sun.enterprise.glassfish.bootstrap.GlassFishActivator$1, com.sun.enterprise.module.bootstrap.ModuleStartup, org.jvnet.hk2.component.Habitat)</inbound>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.GlassFishActivator$1$1.lookupService(java.lang.Class, java.lang.String)</inbound>
            </feature>
        </class>
        <class confirmed="yes">
            <name>com.sun.enterprise.glassfish.bootstrap.GlassFishMain</name>
            <outbound type="class" confirmed="no">java.lang.Object</outbound>
            <feature confirmed="yes">
                <name>com.sun.enterprise.glassfish.bootstrap.GlassFishMain.GlassFishMain()</name>
                <outbound type="feature" confirmed="no">java.lang.Object.Object()</outbound>
            </feature>
            <feature confirmed="yes">
                <name>com.sun.enterprise.glassfish.bootstrap.GlassFishMain.main(java.lang.String[])</name>
                <outbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainHelper.buildStartupContext(java.lang.String, java.io.File, java.io.File, java.lang.String[])</outbound>
                <outbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainHelper.checkJdkVersion()</outbound>
                <outbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainHelper.createLauncherCL(java.util.Properties, java.lang.ClassLoader)</outbound>
                <outbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainHelper.findInstallRootURI(java.util.Properties)</outbound>
                <outbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainHelper.findInstanceRoot(java.io.File, java.util.Properties)</outbound>
                <outbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainHelper.whichPlatform()</outbound>
                <outbound type="class" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.GlassFishMain$Launcher</outbound>
                <outbound type="feature" confirmed="no">com.sun.enterprise.module.bootstrap.ArgumentManager.argsToMap(java.lang.String[])</outbound>
                <outbound type="class" confirmed="no">java.io.File</outbound>
                <outbound type="feature" confirmed="no">java.io.File.File(java.net.URI)</outbound>
                <outbound type="class" confirmed="no">java.io.PrintStream</outbound>
                <outbound type="feature" confirmed="no">java.io.PrintStream.println(java.lang.String)</outbound>
                <outbound type="class" confirmed="no">java.lang.Class</outbound>
                <outbound type="feature" confirmed="no">java.lang.Class.getMethod(java.lang.String, java.lang.Class[])</outbound>
                <outbound type="feature" confirmed="no">java.lang.Class.getName()</outbound>
                <outbound type="feature" confirmed="no">java.lang.Class.newInstance()</outbound>
                <outbound type="class" confirmed="no">java.lang.ClassLoader</outbound>
                <outbound type="feature" confirmed="no">java.lang.ClassLoader.getParent()</outbound>
                <outbound type="feature" confirmed="no">java.lang.ClassLoader.getSystemClassLoader()</outbound>
                <outbound type="feature" confirmed="no">java.lang.ClassLoader.loadClass(java.lang.String)</outbound>
                <outbound type="class" confirmed="no">java.lang.Exception</outbound>
                <outbound type="class" confirmed="no">java.lang.Object</outbound>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="class" confirmed="no">java.lang.StringBuilder</outbound>
                <outbound type="feature" confirmed="no">java.lang.StringBuilder.StringBuilder()</outbound>
                <outbound type="feature" confirmed="no">java.lang.StringBuilder.append(java.lang.String)</outbound>
                <outbound type="feature" confirmed="no">java.lang.StringBuilder.toString()</outbound>
                <outbound type="feature" confirmed="no">java.lang.System.out</outbound>
                <outbound type="feature" confirmed="no">java.lang.System.setProperty(java.lang.String, java.lang.String)</outbound>
                <outbound type="class" confirmed="no">java.lang.reflect.Method</outbound>
                <outbound type="feature" confirmed="no">java.lang.reflect.Method.invoke(java.lang.Object, java.lang.Object[])</outbound>
                <outbound type="class" confirmed="no">java.net.URI</outbound>
                <outbound type="class" confirmed="no">java.util.Properties</outbound>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMain.main(java.lang.String[])</inbound>
            </feature>
        </class>
        <class confirmed="yes">
            <name>com.sun.enterprise.glassfish.bootstrap.GlassFishMain$Launcher</name>
            <outbound type="class" confirmed="no">java.lang.Object</outbound>
            <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.GlassFishMain.main(java.lang.String[])</inbound>
            <feature confirmed="yes">
                <name>com.sun.enterprise.glassfish.bootstrap.GlassFishMain$Launcher.GlassFishMain$Launcher()</name>
                <outbound type="feature" confirmed="no">java.lang.Object.Object()</outbound>
            </feature>
            <feature confirmed="yes">
                <name>com.sun.enterprise.glassfish.bootstrap.GlassFishMain$Launcher.access$000()</name>
                <outbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.GlassFishMain$Launcher.gf</outbound>
                <outbound type="class" confirmed="yes">org.glassfish.experimentalgfapi.GlassFish</outbound>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.GlassFishMain$Launcher$1.run()</inbound>
            </feature>
            <feature confirmed="yes">
                <name>com.sun.enterprise.glassfish.bootstrap.GlassFishMain$Launcher.addShutdownHook()</name>
                <outbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.GlassFishMain$Launcher$1.GlassFishMain$Launcher$1(java.lang.String)</outbound>
                <outbound type="class" confirmed="no">java.lang.Runtime</outbound>
                <outbound type="feature" confirmed="no">java.lang.Runtime.addShutdownHook(java.lang.Thread)</outbound>
                <outbound type="feature" confirmed="no">java.lang.Runtime.getRuntime()</outbound>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="class" confirmed="no">java.lang.Thread</outbound>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.GlassFishMain$Launcher.launch(java.util.Properties)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>com.sun.enterprise.glassfish.bootstrap.GlassFishMain$Launcher.gf</name>
                <outbound type="class" confirmed="yes">org.glassfish.experimentalgfapi.GlassFish</outbound>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.GlassFishMain$Launcher.access$000()</inbound>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.GlassFishMain$Launcher.launch(java.util.Properties)</inbound>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.GlassFishMain$Launcher.startConsole()</inbound>
            </feature>
            <feature confirmed="yes">
                <name>com.sun.enterprise.glassfish.bootstrap.GlassFishMain$Launcher.launch(java.util.Properties)</name>
                <outbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.GlassFishMain$Launcher.addShutdownHook()</outbound>
                <outbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.GlassFishMain$Launcher.gf</outbound>
                <outbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.GlassFishMain$Launcher.startConsole()</outbound>
                <outbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.Util.getPropertyOrSystemProperty(java.util.Properties, java.lang.String, java.lang.String)</outbound>
                <outbound type="class" confirmed="no">java.lang.Boolean</outbound>
                <outbound type="feature" confirmed="no">java.lang.Boolean.booleanValue()</outbound>
                <outbound type="feature" confirmed="no">java.lang.Boolean.valueOf(java.lang.String)</outbound>
                <outbound type="class" confirmed="no">java.lang.Class</outbound>
                <outbound type="feature" confirmed="no">java.lang.Class.getClassLoader()</outbound>
                <outbound type="class" confirmed="no">java.lang.ClassLoader</outbound>
                <outbound type="class" confirmed="no">java.lang.Exception</outbound>
                <outbound type="feature" confirmed="no">java.lang.Object.getClass()</outbound>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="class" confirmed="no">java.util.Properties</outbound>
                <outbound type="class" confirmed="yes">org.glassfish.experimentalgfapi.GlassFish</outbound>
                <outbound type="feature" confirmed="yes">org.glassfish.experimentalgfapi.GlassFish.start()</outbound>
                <outbound type="class" confirmed="yes">org.glassfish.experimentalgfapi.GlassFishRuntime</outbound>
                <outbound type="feature" confirmed="yes">org.glassfish.experimentalgfapi.GlassFishRuntime.bootstrap(java.util.Properties, java.lang.ClassLoader)</outbound>
                <outbound type="feature" confirmed="yes">org.glassfish.experimentalgfapi.GlassFishRuntime.newGlassFish(java.util.Properties)</outbound>
            </feature>
            <feature confirmed="yes">
                <name>com.sun.enterprise.glassfish.bootstrap.GlassFishMain$Launcher.prompt()</name>
                <outbound type="class" confirmed="no">java.io.PrintStream</outbound>
                <outbound type="feature" confirmed="no">java.io.PrintStream.flush()</outbound>
                <outbound type="feature" confirmed="no">java.io.PrintStream.print(java.lang.String)</outbound>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="feature" confirmed="no">java.lang.System.out</outbound>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.GlassFishMain$Launcher.readCommand(java.io.BufferedReader)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>com.sun.enterprise.glassfish.bootstrap.GlassFishMain$Launcher.readCommand(java.io.BufferedReader)</name>
                <outbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.GlassFishMain$Launcher.prompt()</outbound>
                <outbound type="class" confirmed="no">java.io.BufferedReader</outbound>
                <outbound type="feature" confirmed="no">java.io.BufferedReader.readLine()</outbound>
                <outbound type="class" confirmed="no">java.io.IOException</outbound>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="feature" confirmed="no">java.lang.String.isEmpty()</outbound>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.GlassFishMain$Launcher.startConsole()</inbound>
            </feature>
            <feature confirmed="yes">
                <name>com.sun.enterprise.glassfish.bootstrap.GlassFishMain$Launcher.startConsole()</name>
                <outbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.GlassFishMain$Launcher.gf</outbound>
                <outbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.GlassFishMain$Launcher.readCommand(java.io.BufferedReader)</outbound>
                <outbound type="class" confirmed="no">java.io.BufferedReader</outbound>
                <outbound type="feature" confirmed="no">java.io.BufferedReader.BufferedReader(java.io.Reader)</outbound>
                <outbound type="class" confirmed="no">java.io.File</outbound>
                <outbound type="feature" confirmed="no">java.io.File.File(java.lang.String)</outbound>
                <outbound type="class" confirmed="no">java.io.IOException</outbound>
                <outbound type="class" confirmed="no">java.io.InputStream</outbound>
                <outbound type="feature" confirmed="no">java.io.InputStreamReader.InputStreamReader(java.io.InputStream)</outbound>
                <outbound type="class" confirmed="no">java.io.PrintStream</outbound>
                <outbound type="feature" confirmed="no">java.io.PrintStream.println(java.lang.String)</outbound>
                <outbound type="class" confirmed="no">java.io.Reader</outbound>
                <outbound type="class" confirmed="no">java.lang.Class</outbound>
                <outbound type="class" confirmed="no">java.lang.Exception</outbound>
                <outbound type="feature" confirmed="no">java.lang.Exception.printStackTrace()</outbound>
                <outbound type="class" confirmed="no">java.lang.Object</outbound>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="feature" confirmed="no">java.lang.String.equalsIgnoreCase(java.lang.String)</outbound>
                <outbound type="feature" confirmed="no">java.lang.String.indexOf(java.lang.String)</outbound>
                <outbound type="feature" confirmed="no">java.lang.String.startsWith(java.lang.String)</outbound>
                <outbound type="feature" confirmed="no">java.lang.String.substring(int)</outbound>
                <outbound type="feature" confirmed="no">java.lang.String.trim()</outbound>
                <outbound type="class" confirmed="no">java.lang.StringBuilder</outbound>
                <outbound type="feature" confirmed="no">java.lang.StringBuilder.StringBuilder()</outbound>
                <outbound type="feature" confirmed="no">java.lang.StringBuilder.append(java.lang.String)</outbound>
                <outbound type="feature" confirmed="no">java.lang.StringBuilder.toString()</outbound>
                <outbound type="feature" confirmed="no">java.lang.System.exit(int)</outbound>
                <outbound type="feature" confirmed="no">java.lang.System.in</outbound>
                <outbound type="feature" confirmed="no">java.lang.System.out</outbound>
                <outbound type="feature" confirmed="no">java.util.HashMap.HashMap()</outbound>
                <outbound type="class" confirmed="no">java.util.Map</outbound>
                <outbound type="class" confirmed="yes">org.glassfish.experimentalgfapi.Deployer</outbound>
                <outbound type="feature" confirmed="yes">org.glassfish.experimentalgfapi.Deployer.deploy(java.io.File, java.util.Map)</outbound>
                <outbound type="feature" confirmed="yes">org.glassfish.experimentalgfapi.Deployer.undeploy(java.lang.String, java.util.Map)</outbound>
                <outbound type="class" confirmed="yes">org.glassfish.experimentalgfapi.GlassFish</outbound>
                <outbound type="class" confirmed="yes">org.glassfish.experimentalgfapi.GlassFish$Status</outbound>
                <outbound type="feature" confirmed="yes">org.glassfish.experimentalgfapi.GlassFish$Status.STARTED</outbound>
                <outbound type="feature" confirmed="yes">org.glassfish.experimentalgfapi.GlassFish$Status.STARTING</outbound>
                <outbound type="feature" confirmed="yes">org.glassfish.experimentalgfapi.GlassFish$Status.STOPPING</outbound>
                <outbound type="feature" confirmed="yes">org.glassfish.experimentalgfapi.GlassFish.getStatus()</outbound>
                <outbound type="feature" confirmed="yes">org.glassfish.experimentalgfapi.GlassFish.lookupService(java.lang.Class, java.lang.String)</outbound>
                <outbound type="feature" confirmed="yes">org.glassfish.experimentalgfapi.GlassFish.start()</outbound>
                <outbound type="feature" confirmed="yes">org.glassfish.experimentalgfapi.GlassFish.stop()</outbound>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.GlassFishMain$Launcher.launch(java.util.Properties)</inbound>
            </feature>
        </class>
        <class confirmed="yes">
            <name>com.sun.enterprise.glassfish.bootstrap.GlassFishMain$Launcher$1</name>
            <outbound type="class" confirmed="no">java.lang.Thread</outbound>
            <feature confirmed="yes">
                <name>com.sun.enterprise.glassfish.bootstrap.GlassFishMain$Launcher$1.GlassFishMain$Launcher$1(java.lang.String)</name>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="feature" confirmed="no">java.lang.Thread.Thread(java.lang.String)</outbound>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.GlassFishMain$Launcher.addShutdownHook()</inbound>
            </feature>
            <feature confirmed="yes">
                <name>com.sun.enterprise.glassfish.bootstrap.GlassFishMain$Launcher$1.run()</name>
                <outbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.GlassFishMain$Launcher.access$000()</outbound>
                <outbound type="class" confirmed="no">java.io.PrintStream</outbound>
                <outbound type="feature" confirmed="no">java.io.PrintStream.println(java.lang.String)</outbound>
                <outbound type="class" confirmed="no">java.lang.Exception</outbound>
                <outbound type="feature" confirmed="no">java.lang.Exception.printStackTrace()</outbound>
                <outbound type="class" confirmed="no">java.lang.Object</outbound>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="class" confirmed="no">java.lang.StringBuilder</outbound>
                <outbound type="feature" confirmed="no">java.lang.StringBuilder.StringBuilder()</outbound>
                <outbound type="feature" confirmed="no">java.lang.StringBuilder.append(java.lang.Object)</outbound>
                <outbound type="feature" confirmed="no">java.lang.StringBuilder.append(java.lang.String)</outbound>
                <outbound type="feature" confirmed="no">java.lang.StringBuilder.toString()</outbound>
                <outbound type="feature" confirmed="no">java.lang.System.err</outbound>
                <outbound type="class" confirmed="yes">org.glassfish.experimentalgfapi.GlassFish</outbound>
                <outbound type="feature" confirmed="yes">org.glassfish.experimentalgfapi.GlassFish.stop()</outbound>
                <outbound type="feature" confirmed="yes">org.glassfish.experimentalgfapi.GlassFishRuntime.shutdown()</outbound>
            </feature>
        </class>
        <class confirmed="yes">
            <name>com.sun.enterprise.glassfish.bootstrap.MaskingClassLoader</name>
            <outbound type="class" confirmed="no">java.lang.ClassLoader</outbound>
            <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.MaskingClassLoader$1.MaskingClassLoader$1(com.sun.enterprise.glassfish.bootstrap.MaskingClassLoader)</inbound>
            <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.MaskingClassLoader$1.this$0</inbound>
            <feature confirmed="yes">
                <name>com.sun.enterprise.glassfish.bootstrap.MaskingClassLoader.MaskingClassLoader(java.lang.ClassLoader, java.util.Collection, java.util.Collection)</name>
                <outbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.MaskingClassLoader.MaskingClassLoader(java.lang.ClassLoader, java.util.Collection, java.util.Collection, boolean)</outbound>
                <outbound type="class" confirmed="no">java.lang.ClassLoader</outbound>
                <outbound type="class" confirmed="no">java.util.Collection</outbound>
            </feature>
            <feature confirmed="yes">
                <name>com.sun.enterprise.glassfish.bootstrap.MaskingClassLoader.MaskingClassLoader(java.lang.ClassLoader, java.util.Collection, java.util.Collection, boolean)</name>
                <outbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.MaskingClassLoader.multiples</outbound>
                <outbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.MaskingClassLoader.punchins</outbound>
                <outbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.MaskingClassLoader.useExplicitCallsToFindSystemClass</outbound>
                <outbound type="class" confirmed="no">java.lang.ClassLoader</outbound>
                <outbound type="feature" confirmed="no">java.lang.ClassLoader.ClassLoader(java.lang.ClassLoader)</outbound>
                <outbound type="class" confirmed="no">java.lang.Object</outbound>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="class" confirmed="no">java.lang.String[]</outbound>
                <outbound type="class" confirmed="no">java.util.Collection</outbound>
                <outbound type="feature" confirmed="no">java.util.Collection.size()</outbound>
                <outbound type="feature" confirmed="no">java.util.Collection.toArray(java.lang.Object[])</outbound>
                <outbound type="feature" confirmed="no">java.util.HashSet.HashSet()</outbound>
                <outbound type="class" confirmed="no">java.util.Set</outbound>
                <outbound type="feature" confirmed="no">java.util.Set.addAll(java.util.Collection)</outbound>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainStatic.getMaskingClassLoader(java.lang.ClassLoader, java.util.Properties, boolean)</inbound>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.MaskingClassLoader.MaskingClassLoader(java.lang.ClassLoader, java.util.Collection, java.util.Collection)</inbound>
            </feature>
            <feature confirmed="no">
                <name>com.sun.enterprise.glassfish.bootstrap.MaskingClassLoader.findSystemClass(java.lang.String)</name>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.MaskingClassLoader.loadClass(java.lang.String, boolean)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>com.sun.enterprise.glassfish.bootstrap.MaskingClassLoader.getResource(java.lang.String)</name>
                <outbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.MaskingClassLoader.isDottedNameLoadableByParent(java.lang.String)</outbound>
                <outbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.MaskingClassLoader.resourceToDotted(java.lang.String)</outbound>
                <outbound type="feature" confirmed="no">java.lang.ClassLoader.getResource(java.lang.String)</outbound>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="class" confirmed="no">java.net.URL</outbound>
            </feature>
            <feature confirmed="yes">
                <name>com.sun.enterprise.glassfish.bootstrap.MaskingClassLoader.getResources(java.lang.String)</name>
                <outbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.MaskingClassLoader$1.MaskingClassLoader$1(com.sun.enterprise.glassfish.bootstrap.MaskingClassLoader)</outbound>
                <outbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.MaskingClassLoader.isDottedNameLoadableByParent(java.lang.String)</outbound>
                <outbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.MaskingClassLoader.resourceToDotted(java.lang.String)</outbound>
                <outbound type="class" confirmed="no">java.io.IOException</outbound>
                <outbound type="feature" confirmed="no">java.lang.ClassLoader.getResources(java.lang.String)</outbound>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="class" confirmed="no">java.util.Enumeration</outbound>
            </feature>
            <feature confirmed="yes">
                <name>com.sun.enterprise.glassfish.bootstrap.MaskingClassLoader.isDottedNameLoadableByParent(java.lang.String)</name>
                <outbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.MaskingClassLoader.multiples</outbound>
                <outbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.MaskingClassLoader.punchins</outbound>
                <outbound type="class" confirmed="no">java.lang.Object</outbound>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="feature" confirmed="no">java.lang.String.lastIndexOf(java.lang.String)</outbound>
                <outbound type="feature" confirmed="no">java.lang.String.startsWith(java.lang.String)</outbound>
                <outbound type="feature" confirmed="no">java.lang.String.substring(int, int)</outbound>
                <outbound type="class" confirmed="no">java.util.Set</outbound>
                <outbound type="feature" confirmed="no">java.util.Set.contains(java.lang.Object)</outbound>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.MaskingClassLoader.getResource(java.lang.String)</inbound>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.MaskingClassLoader.getResources(java.lang.String)</inbound>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.MaskingClassLoader.loadClass(java.lang.String, boolean)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>com.sun.enterprise.glassfish.bootstrap.MaskingClassLoader.loadClass(java.lang.String, boolean)</name>
                <outbound type="feature" confirmed="no">com.sun.enterprise.glassfish.bootstrap.MaskingClassLoader.findSystemClass(java.lang.String)</outbound>
                <outbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.MaskingClassLoader.isDottedNameLoadableByParent(java.lang.String)</outbound>
                <outbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.MaskingClassLoader.useExplicitCallsToFindSystemClass</outbound>
                <outbound type="class" confirmed="no">java.lang.Class</outbound>
                <outbound type="feature" confirmed="no">java.lang.ClassLoader.loadClass(java.lang.String, boolean)</outbound>
                <outbound type="class" confirmed="no">java.lang.ClassNotFoundException</outbound>
                <outbound type="feature" confirmed="no">java.lang.ClassNotFoundException.ClassNotFoundException(java.lang.String)</outbound>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
            </feature>
            <feature confirmed="yes">
                <name>com.sun.enterprise.glassfish.bootstrap.MaskingClassLoader.multiples</name>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.MaskingClassLoader.MaskingClassLoader(java.lang.ClassLoader, java.util.Collection, java.util.Collection, boolean)</inbound>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.MaskingClassLoader.isDottedNameLoadableByParent(java.lang.String)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>com.sun.enterprise.glassfish.bootstrap.MaskingClassLoader.punchins</name>
                <outbound type="class" confirmed="no">java.util.Set</outbound>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.MaskingClassLoader.MaskingClassLoader(java.lang.ClassLoader, java.util.Collection, java.util.Collection, boolean)</inbound>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.MaskingClassLoader.isDottedNameLoadableByParent(java.lang.String)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>com.sun.enterprise.glassfish.bootstrap.MaskingClassLoader.resourceToDotted(java.lang.String)</name>
                <outbound type="class" confirmed="no">java.lang.CharSequence</outbound>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="feature" confirmed="no">java.lang.String.replace(java.lang.CharSequence, java.lang.CharSequence)</outbound>
                <outbound type="feature" confirmed="no">java.lang.String.startsWith(java.lang.String)</outbound>
                <outbound type="feature" confirmed="no">java.lang.String.substring(int)</outbound>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.MaskingClassLoader.getResource(java.lang.String)</inbound>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.MaskingClassLoader.getResources(java.lang.String)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>com.sun.enterprise.glassfish.bootstrap.MaskingClassLoader.useExplicitCallsToFindSystemClass</name>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.MaskingClassLoader.MaskingClassLoader(java.lang.ClassLoader, java.util.Collection, java.util.Collection, boolean)</inbound>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.MaskingClassLoader.loadClass(java.lang.String, boolean)</inbound>
            </feature>
        </class>
        <class confirmed="yes">
            <name>com.sun.enterprise.glassfish.bootstrap.MaskingClassLoader$1</name>
            <outbound type="class" confirmed="no">java.lang.Object</outbound>
            <outbound type="class" confirmed="no">java.util.Enumeration</outbound>
            <feature confirmed="yes">
                <name>com.sun.enterprise.glassfish.bootstrap.MaskingClassLoader$1.MaskingClassLoader$1(com.sun.enterprise.glassfish.bootstrap.MaskingClassLoader)</name>
                <outbound type="class" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.MaskingClassLoader</outbound>
                <outbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.MaskingClassLoader$1.this$0</outbound>
                <outbound type="feature" confirmed="no">java.lang.Object.Object()</outbound>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.MaskingClassLoader.getResources(java.lang.String)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>com.sun.enterprise.glassfish.bootstrap.MaskingClassLoader$1.hasMoreElements()</name>
            </feature>
            <feature confirmed="yes">
                <name>com.sun.enterprise.glassfish.bootstrap.MaskingClassLoader$1.nextElement()</name>
                <outbound type="class" confirmed="no">java.lang.Object</outbound>
                <outbound type="class" confirmed="no">java.net.URL</outbound>
            </feature>
            <feature confirmed="yes">
                <name>com.sun.enterprise.glassfish.bootstrap.MaskingClassLoader$1.this$0</name>
                <outbound type="class" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.MaskingClassLoader</outbound>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.MaskingClassLoader$1.MaskingClassLoader$1(com.sun.enterprise.glassfish.bootstrap.MaskingClassLoader)</inbound>
            </feature>
        </class>
        <class confirmed="yes">
            <name>com.sun.enterprise.glassfish.bootstrap.OSGiGlassFishRuntime</name>
            <outbound type="class" confirmed="yes">org.glassfish.experimentalgfapi.GlassFishRuntime</outbound>
            <feature confirmed="yes">
                <name>com.sun.enterprise.glassfish.bootstrap.OSGiGlassFishRuntime.OSGiGlassFishRuntime()</name>
                <outbound type="feature" confirmed="yes">org.glassfish.experimentalgfapi.GlassFishRuntime.GlassFishRuntime()</outbound>
            </feature>
            <feature confirmed="yes">
                <name>com.sun.enterprise.glassfish.bootstrap.OSGiGlassFishRuntime.newGlassFish(java.util.Properties)</name>
                <outbound type="class" confirmed="no">java.lang.Exception</outbound>
                <outbound type="class" confirmed="no">java.util.Properties</outbound>
                <outbound type="class" confirmed="yes">org.glassfish.experimentalgfapi.GlassFish</outbound>
            </feature>
        </class>
        <class confirmed="yes">
            <name>com.sun.enterprise.glassfish.bootstrap.OSGiGlassFishRuntimeBuilder</name>
            <outbound type="class" confirmed="no">java.lang.Object</outbound>
            <outbound type="class" confirmed="yes">org.glassfish.experimentalgfapi.GlassFishRuntime$RuntimeBuilder</outbound>
            <feature confirmed="yes">
                <name>com.sun.enterprise.glassfish.bootstrap.OSGiGlassFishRuntimeBuilder.OSGiGlassFishRuntimeBuilder()</name>
                <outbound type="feature" confirmed="no">java.lang.Object.Object()</outbound>
            </feature>
            <feature confirmed="yes">
                <name>com.sun.enterprise.glassfish.bootstrap.OSGiGlassFishRuntimeBuilder.build(java.util.Properties)</name>
                <outbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.OSGiGlassFishRuntimeBuilder.getRuntime()</outbound>
                <outbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.OSGiGlassFishRuntimeBuilder.launchOSGiFrameWork()</outbound>
                <outbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.OSGiGlassFishRuntimeBuilder.properties</outbound>
                <outbound type="class" confirmed="no">java.lang.Exception</outbound>
                <outbound type="class" confirmed="no">java.util.Properties</outbound>
                <outbound type="class" confirmed="yes">org.glassfish.experimentalgfapi.GlassFishRuntime</outbound>
            </feature>
            <feature confirmed="yes">
                <name>com.sun.enterprise.glassfish.bootstrap.OSGiGlassFishRuntimeBuilder.debug(java.lang.String)</name>
                <outbound type="class" confirmed="no">java.io.PrintStream</outbound>
                <outbound type="feature" confirmed="no">java.io.PrintStream.println(java.lang.String)</outbound>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="class" confirmed="no">java.lang.StringBuilder</outbound>
                <outbound type="feature" confirmed="no">java.lang.StringBuilder.StringBuilder()</outbound>
                <outbound type="feature" confirmed="no">java.lang.StringBuilder.append(java.lang.String)</outbound>
                <outbound type="feature" confirmed="no">java.lang.StringBuilder.toString()</outbound>
                <outbound type="feature" confirmed="no">java.lang.System.out</outbound>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.OSGiGlassFishRuntimeBuilder.launchOSGiFrameWork()</inbound>
            </feature>
            <feature confirmed="yes">
                <name>com.sun.enterprise.glassfish.bootstrap.OSGiGlassFishRuntimeBuilder.destroy()</name>
                <outbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.OSGiGlassFishRuntimeBuilder.framework</outbound>
                <outbound type="class" confirmed="no">java.lang.Exception</outbound>
                <outbound type="class" confirmed="no">org.osgi.framework.FrameworkEvent</outbound>
                <outbound type="class" confirmed="no">org.osgi.framework.launch.Framework</outbound>
                <outbound type="feature" confirmed="no">org.osgi.framework.launch.Framework.stop()</outbound>
                <outbound type="feature" confirmed="no">org.osgi.framework.launch.Framework.waitForStop(long)</outbound>
            </feature>
            <feature confirmed="yes">
                <name>com.sun.enterprise.glassfish.bootstrap.OSGiGlassFishRuntimeBuilder.framework</name>
                <outbound type="class" confirmed="no">org.osgi.framework.launch.Framework</outbound>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.OSGiGlassFishRuntimeBuilder.destroy()</inbound>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.OSGiGlassFishRuntimeBuilder.getRuntime()</inbound>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.OSGiGlassFishRuntimeBuilder.launchOSGiFrameWork()</inbound>
            </feature>
            <feature confirmed="yes">
                <name>com.sun.enterprise.glassfish.bootstrap.OSGiGlassFishRuntimeBuilder.getRuntime()</name>
                <outbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.OSGiGlassFishRuntimeBuilder.framework</outbound>
                <outbound type="feature" confirmed="no">java.lang.Class.cast(java.lang.Object)</outbound>
                <outbound type="feature" confirmed="no">java.lang.Class.getName()</outbound>
                <outbound type="class" confirmed="no">java.lang.Exception</outbound>
                <outbound type="class" confirmed="no">java.lang.Object</outbound>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="class" confirmed="yes">org.glassfish.experimentalgfapi.GlassFishRuntime</outbound>
                <outbound type="class" confirmed="no">org.osgi.framework.BundleContext</outbound>
                <outbound type="class" confirmed="no">org.osgi.framework.launch.Framework</outbound>
                <outbound type="feature" confirmed="no">org.osgi.framework.launch.Framework.getBundleContext()</outbound>
                <outbound type="feature" confirmed="no">org.osgi.util.tracker.ServiceTracker.ServiceTracker(org.osgi.framework.BundleContext, java.lang.String, org.osgi.util.tracker.ServiceTrackerCustomizer)</outbound>
                <outbound type="feature" confirmed="no">org.osgi.util.tracker.ServiceTracker.open(boolean)</outbound>
                <outbound type="feature" confirmed="no">org.osgi.util.tracker.ServiceTracker.waitForService(long)</outbound>
                <outbound type="class" confirmed="no">org.osgi.util.tracker.ServiceTrackerCustomizer</outbound>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.OSGiGlassFishRuntimeBuilder.build(java.util.Properties)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>com.sun.enterprise.glassfish.bootstrap.OSGiGlassFishRuntimeBuilder.handles(org.glassfish.experimentalgfapi.Constants$Platform)</name>
                <outbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.OSGiGlassFishRuntimeBuilder$1.$SwitchMap$org$glassfish$experimentalgfapi$Constants$Platform</outbound>
                <outbound type="class" confirmed="yes">org.glassfish.experimentalgfapi.Constants$Platform</outbound>
                <outbound type="feature" confirmed="no">org.glassfish.experimentalgfapi.Constants$Platform.ordinal()</outbound>
            </feature>
            <feature confirmed="yes">
                <name>com.sun.enterprise.glassfish.bootstrap.OSGiGlassFishRuntimeBuilder.isOSGiEnv()</name>
                <outbound type="class" confirmed="no">java.lang.Class</outbound>
                <outbound type="feature" confirmed="no">java.lang.Class.getClassLoader()</outbound>
                <outbound type="class" confirmed="no">java.lang.ClassLoader</outbound>
                <outbound type="feature" confirmed="no">java.lang.Object.getClass()</outbound>
                <outbound type="class" confirmed="no">org.osgi.framework.BundleReference</outbound>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.OSGiGlassFishRuntimeBuilder.launchOSGiFrameWork()</inbound>
            </feature>
            <feature confirmed="yes">
                <name>com.sun.enterprise.glassfish.bootstrap.OSGiGlassFishRuntimeBuilder.launchOSGiFrameWork()</name>
                <outbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.AutoProcessor.process(java.util.Map, org.osgi.framework.BundleContext)</outbound>
                <outbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.OSGiGlassFishRuntimeBuilder.debug(java.lang.String)</outbound>
                <outbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.OSGiGlassFishRuntimeBuilder.framework</outbound>
                <outbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.OSGiGlassFishRuntimeBuilder.isOSGiEnv()</outbound>
                <outbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.OSGiGlassFishRuntimeBuilder.properties</outbound>
                <outbound type="class" confirmed="no">java.lang.Class</outbound>
                <outbound type="feature" confirmed="no">java.lang.Class.getClassLoader()</outbound>
                <outbound type="class" confirmed="no">java.lang.ClassLoader</outbound>
                <outbound type="class" confirmed="no">java.lang.Exception</outbound>
                <outbound type="class" confirmed="no">java.lang.Object</outbound>
                <outbound type="feature" confirmed="no">java.lang.Object.getClass()</outbound>
                <outbound type="feature" confirmed="no">java.lang.RuntimeException.RuntimeException(java.lang.String)</outbound>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="class" confirmed="no">java.lang.StringBuilder</outbound>
                <outbound type="feature" confirmed="no">java.lang.StringBuilder.StringBuilder()</outbound>
                <outbound type="feature" confirmed="no">java.lang.StringBuilder.append(java.lang.Object)</outbound>
                <outbound type="feature" confirmed="no">java.lang.StringBuilder.append(java.lang.String)</outbound>
                <outbound type="feature" confirmed="no">java.lang.StringBuilder.toString()</outbound>
                <outbound type="class" confirmed="no">java.util.Iterator</outbound>
                <outbound type="feature" confirmed="no">java.util.Iterator.hasNext()</outbound>
                <outbound type="feature" confirmed="no">java.util.Iterator.next()</outbound>
                <outbound type="class" confirmed="no">java.util.Map</outbound>
                <outbound type="class" confirmed="no">java.util.Properties</outbound>
                <outbound type="class" confirmed="no">java.util.ServiceLoader</outbound>
                <outbound type="feature" confirmed="no">java.util.ServiceLoader.iterator()</outbound>
                <outbound type="feature" confirmed="no">java.util.ServiceLoader.load(java.lang.Class, java.lang.ClassLoader)</outbound>
                <outbound type="class" confirmed="no">org.osgi.framework.BundleContext</outbound>
                <outbound type="class" confirmed="no">org.osgi.framework.launch.Framework</outbound>
                <outbound type="feature" confirmed="no">org.osgi.framework.launch.Framework.getBundleContext()</outbound>
                <outbound type="feature" confirmed="no">org.osgi.framework.launch.Framework.init()</outbound>
                <outbound type="feature" confirmed="no">org.osgi.framework.launch.Framework.start()</outbound>
                <outbound type="class" confirmed="no">org.osgi.framework.launch.FrameworkFactory</outbound>
                <outbound type="feature" confirmed="no">org.osgi.framework.launch.FrameworkFactory.newFramework(java.util.Map)</outbound>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.OSGiGlassFishRuntimeBuilder.build(java.util.Properties)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>com.sun.enterprise.glassfish.bootstrap.OSGiGlassFishRuntimeBuilder.properties</name>
                <outbound type="class" confirmed="no">java.util.Properties</outbound>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.OSGiGlassFishRuntimeBuilder.build(java.util.Properties)</inbound>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.OSGiGlassFishRuntimeBuilder.launchOSGiFrameWork()</inbound>
            </feature>
        </class>
        <class confirmed="yes">
            <name>com.sun.enterprise.glassfish.bootstrap.OSGiGlassFishRuntimeBuilder$1</name>
            <outbound type="class" confirmed="no">java.lang.Object</outbound>
            <feature confirmed="yes">
                <name>com.sun.enterprise.glassfish.bootstrap.OSGiGlassFishRuntimeBuilder$1.$SwitchMap$org$glassfish$experimentalgfapi$Constants$Platform</name>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.OSGiGlassFishRuntimeBuilder$1.static {}</inbound>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.OSGiGlassFishRuntimeBuilder.handles(org.glassfish.experimentalgfapi.Constants$Platform)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>com.sun.enterprise.glassfish.bootstrap.OSGiGlassFishRuntimeBuilder$1.static {}</name>
                <outbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.OSGiGlassFishRuntimeBuilder$1.$SwitchMap$org$glassfish$experimentalgfapi$Constants$Platform</outbound>
                <outbound type="class" confirmed="no">java.lang.NoSuchFieldError</outbound>
                <outbound type="class" confirmed="yes">org.glassfish.experimentalgfapi.Constants$Platform</outbound>
                <outbound type="feature" confirmed="yes">org.glassfish.experimentalgfapi.Constants$Platform.Equinox</outbound>
                <outbound type="feature" confirmed="yes">org.glassfish.experimentalgfapi.Constants$Platform.Felix</outbound>
                <outbound type="feature" confirmed="yes">org.glassfish.experimentalgfapi.Constants$Platform.Knopflerfish</outbound>
                <outbound type="feature" confirmed="no">org.glassfish.experimentalgfapi.Constants$Platform.ordinal()</outbound>
                <outbound type="feature" confirmed="yes">org.glassfish.experimentalgfapi.Constants$Platform.values()</outbound>
            </feature>
        </class>
        <class confirmed="yes">
            <name>com.sun.enterprise.glassfish.bootstrap.ProxyModule</name>
            <outbound type="class" confirmed="no">com.sun.enterprise.module.Module</outbound>
            <outbound type="class" confirmed="no">java.lang.Object</outbound>
            <feature confirmed="yes">
                <name>com.sun.enterprise.glassfish.bootstrap.ProxyModule.ProxyModule(com.sun.enterprise.module.ModulesRegistry, com.sun.enterprise.module.ModuleDefinition, java.lang.ClassLoader)</name>
                <outbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ProxyModule.classLoader</outbound>
                <outbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ProxyModule.moduleDef</outbound>
                <outbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ProxyModule.modulesRegistry</outbound>
                <outbound type="class" confirmed="no">com.sun.enterprise.module.ModuleDefinition</outbound>
                <outbound type="class" confirmed="no">com.sun.enterprise.module.ModulesRegistry</outbound>
                <outbound type="class" confirmed="no">java.lang.ClassLoader</outbound>
                <outbound type="feature" confirmed="no">java.lang.Object.Object()</outbound>
            </feature>
            <feature confirmed="yes">
                <name>com.sun.enterprise.glassfish.bootstrap.ProxyModule.addImport(com.sun.enterprise.module.Module)</name>
                <outbound type="class" confirmed="no">com.sun.enterprise.module.Module</outbound>
            </feature>
            <feature confirmed="yes">
                <name>com.sun.enterprise.glassfish.bootstrap.ProxyModule.addImport(com.sun.enterprise.module.ModuleDependency)</name>
                <outbound type="class" confirmed="no">com.sun.enterprise.module.Module</outbound>
                <outbound type="class" confirmed="no">com.sun.enterprise.module.ModuleDependency</outbound>
            </feature>
            <feature confirmed="yes">
                <name>com.sun.enterprise.glassfish.bootstrap.ProxyModule.addListener(com.sun.enterprise.module.ModuleChangeListener)</name>
                <outbound type="class" confirmed="no">com.sun.enterprise.module.ModuleChangeListener</outbound>
            </feature>
            <feature confirmed="yes">
                <name>com.sun.enterprise.glassfish.bootstrap.ProxyModule.classLoader</name>
                <outbound type="class" confirmed="no">java.lang.ClassLoader</outbound>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ProxyModule.ProxyModule(com.sun.enterprise.module.ModulesRegistry, com.sun.enterprise.module.ModuleDefinition, java.lang.ClassLoader)</inbound>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ProxyModule.getClassLoader()</inbound>
            </feature>
            <feature confirmed="yes">
                <name>com.sun.enterprise.glassfish.bootstrap.ProxyModule.detach()</name>
            </feature>
            <feature confirmed="yes">
                <name>com.sun.enterprise.glassfish.bootstrap.ProxyModule.dumpState(java.io.PrintStream)</name>
                <outbound type="class" confirmed="no">java.io.PrintStream</outbound>
            </feature>
            <feature confirmed="yes">
                <name>com.sun.enterprise.glassfish.bootstrap.ProxyModule.getClassLoader()</name>
                <outbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ProxyModule.classLoader</outbound>
                <outbound type="class" confirmed="no">java.lang.ClassLoader</outbound>
            </feature>
            <feature confirmed="yes">
                <name>com.sun.enterprise.glassfish.bootstrap.ProxyModule.getImports()</name>
                <outbound type="class" confirmed="no">java.util.List</outbound>
            </feature>
            <feature confirmed="yes">
                <name>com.sun.enterprise.glassfish.bootstrap.ProxyModule.getMetadata()</name>
                <outbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ProxyModule.moduleDef</outbound>
                <outbound type="class" confirmed="no">com.sun.enterprise.module.ModuleDefinition</outbound>
                <outbound type="feature" confirmed="no">com.sun.enterprise.module.ModuleDefinition.getMetadata()</outbound>
                <outbound type="class" confirmed="no">com.sun.enterprise.module.ModuleMetadata</outbound>
            </feature>
            <feature confirmed="yes">
                <name>com.sun.enterprise.glassfish.bootstrap.ProxyModule.getModuleDefinition()</name>
                <outbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ProxyModule.moduleDef</outbound>
                <outbound type="class" confirmed="no">com.sun.enterprise.module.ModuleDefinition</outbound>
            </feature>
            <feature confirmed="yes">
                <name>com.sun.enterprise.glassfish.bootstrap.ProxyModule.getName()</name>
                <outbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ProxyModule.moduleDef</outbound>
                <outbound type="class" confirmed="no">com.sun.enterprise.module.ModuleDefinition</outbound>
                <outbound type="feature" confirmed="no">com.sun.enterprise.module.ModuleDefinition.getName()</outbound>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
            </feature>
            <feature confirmed="yes">
                <name>com.sun.enterprise.glassfish.bootstrap.ProxyModule.getProvidersClass(java.lang.Class)</name>
                <outbound type="class" confirmed="no">java.lang.Class</outbound>
                <outbound type="class" confirmed="no">java.lang.Iterable</outbound>
            </feature>
            <feature confirmed="yes">
                <name>com.sun.enterprise.glassfish.bootstrap.ProxyModule.getProvidersClass(java.lang.String)</name>
                <outbound type="class" confirmed="no">java.lang.Iterable</outbound>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
            </feature>
            <feature confirmed="yes">
                <name>com.sun.enterprise.glassfish.bootstrap.ProxyModule.getRegistry()</name>
                <outbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ProxyModule.modulesRegistry</outbound>
                <outbound type="class" confirmed="no">com.sun.enterprise.module.ModulesRegistry</outbound>
            </feature>
            <feature confirmed="yes">
                <name>com.sun.enterprise.glassfish.bootstrap.ProxyModule.getState()</name>
                <outbound type="class" confirmed="no">com.sun.enterprise.module.ModuleState</outbound>
                <outbound type="feature" confirmed="no">com.sun.enterprise.module.ModuleState.READY</outbound>
            </feature>
            <feature confirmed="yes">
                <name>com.sun.enterprise.glassfish.bootstrap.ProxyModule.hasProvider(java.lang.Class)</name>
                <outbound type="class" confirmed="no">java.lang.Class</outbound>
            </feature>
            <feature confirmed="yes">
                <name>com.sun.enterprise.glassfish.bootstrap.ProxyModule.isShared()</name>
            </feature>
            <feature confirmed="yes">
                <name>com.sun.enterprise.glassfish.bootstrap.ProxyModule.isSticky()</name>
            </feature>
            <feature confirmed="yes">
                <name>com.sun.enterprise.glassfish.bootstrap.ProxyModule.moduleDef</name>
                <outbound type="class" confirmed="no">com.sun.enterprise.module.ModuleDefinition</outbound>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ProxyModule.ProxyModule(com.sun.enterprise.module.ModulesRegistry, com.sun.enterprise.module.ModuleDefinition, java.lang.ClassLoader)</inbound>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ProxyModule.getMetadata()</inbound>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ProxyModule.getModuleDefinition()</inbound>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ProxyModule.getName()</inbound>
            </feature>
            <feature confirmed="yes">
                <name>com.sun.enterprise.glassfish.bootstrap.ProxyModule.modulesRegistry</name>
                <outbound type="class" confirmed="no">com.sun.enterprise.module.ModulesRegistry</outbound>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ProxyModule.ProxyModule(com.sun.enterprise.module.ModulesRegistry, com.sun.enterprise.module.ModuleDefinition, java.lang.ClassLoader)</inbound>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ProxyModule.getRegistry()</inbound>
            </feature>
            <feature confirmed="yes">
                <name>com.sun.enterprise.glassfish.bootstrap.ProxyModule.refresh()</name>
            </feature>
            <feature confirmed="yes">
                <name>com.sun.enterprise.glassfish.bootstrap.ProxyModule.removeListener(com.sun.enterprise.module.ModuleChangeListener)</name>
                <outbound type="class" confirmed="no">com.sun.enterprise.module.ModuleChangeListener</outbound>
            </feature>
            <feature confirmed="yes">
                <name>com.sun.enterprise.glassfish.bootstrap.ProxyModule.resolve()</name>
                <outbound type="class" confirmed="no">com.sun.enterprise.module.ResolveError</outbound>
            </feature>
            <feature confirmed="yes">
                <name>com.sun.enterprise.glassfish.bootstrap.ProxyModule.setSticky(boolean)</name>
            </feature>
            <feature confirmed="yes">
                <name>com.sun.enterprise.glassfish.bootstrap.ProxyModule.start()</name>
                <outbound type="class" confirmed="no">com.sun.enterprise.module.ResolveError</outbound>
            </feature>
            <feature confirmed="yes">
                <name>com.sun.enterprise.glassfish.bootstrap.ProxyModule.stop()</name>
            </feature>
            <feature confirmed="yes">
                <name>com.sun.enterprise.glassfish.bootstrap.ProxyModule.uninstall()</name>
            </feature>
        </class>
        <class confirmed="yes">
            <name>com.sun.enterprise.glassfish.bootstrap.Rejar</name>
            <outbound type="class" confirmed="no">java.lang.Object</outbound>
            <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.Rejar$1.Rejar$1(com.sun.enterprise.glassfish.bootstrap.Rejar)</inbound>
            <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.Rejar$1.this$0</inbound>
            <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.Rejar$2.Rejar$2(com.sun.enterprise.glassfish.bootstrap.Rejar)</inbound>
            <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.Rejar$2.this$0</inbound>
            <feature confirmed="yes">
                <name>com.sun.enterprise.glassfish.bootstrap.Rejar.Rejar()</name>
                <outbound type="feature" confirmed="no">java.lang.Object.Object()</outbound>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainStatic.createCache(java.io.File)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>com.sun.enterprise.glassfish.bootstrap.Rejar.copy(byte[], java.lang.String, java.util.jar.JarOutputStream)</name>
                <outbound type="class" confirmed="no">java.io.IOException</outbound>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="feature" confirmed="no">java.util.jar.JarEntry.JarEntry(java.lang.String)</outbound>
                <outbound type="class" confirmed="no">java.util.jar.JarOutputStream</outbound>
                <outbound type="feature" confirmed="no">java.util.jar.JarOutputStream.closeEntry()</outbound>
                <outbound type="feature" confirmed="no">java.util.jar.JarOutputStream.putNextEntry(java.util.zip.ZipEntry)</outbound>
                <outbound type="feature" confirmed="no">java.util.jar.JarOutputStream.write(byte[])</outbound>
                <outbound type="class" confirmed="no">java.util.zip.ZipEntry</outbound>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.Rejar.rejar(java.io.File, java.io.File)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>com.sun.enterprise.glassfish.bootstrap.Rejar.copy(java.util.jar.JarFile, java.util.jar.JarEntry, java.io.OutputStream)</name>
                <outbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.Rejar.copy(java.util.jar.JarFile, java.util.jar.JarEntry, java.nio.channels.WritableByteChannel)</outbound>
                <outbound type="class" confirmed="no">java.io.IOException</outbound>
                <outbound type="class" confirmed="no">java.io.OutputStream</outbound>
                <outbound type="feature" confirmed="no">java.nio.channels.Channels.newChannel(java.io.OutputStream)</outbound>
                <outbound type="class" confirmed="no">java.nio.channels.WritableByteChannel</outbound>
                <outbound type="class" confirmed="no">java.util.jar.JarEntry</outbound>
                <outbound type="class" confirmed="no">java.util.jar.JarFile</outbound>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.Rejar.copy(java.util.jar.JarFile, java.util.jar.JarEntry, java.util.jar.JarOutputStream)</inbound>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.Rejar.processDirectory(java.util.jar.JarOutputStream, java.io.File, java.util.Set, java.util.Map)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>com.sun.enterprise.glassfish.bootstrap.Rejar.copy(java.util.jar.JarFile, java.util.jar.JarEntry, java.nio.channels.WritableByteChannel)</name>
                <outbound type="class" confirmed="no">java.io.IOException</outbound>
                <outbound type="class" confirmed="no">java.io.InputStream</outbound>
                <outbound type="feature" confirmed="no">java.io.InputStream.close()</outbound>
                <outbound type="class" confirmed="no">java.lang.Long</outbound>
                <outbound type="feature" confirmed="no">java.lang.Long.intValue()</outbound>
                <outbound type="feature" confirmed="no">java.lang.Long.valueOf(long)</outbound>
                <outbound type="class" confirmed="no">java.nio.Buffer</outbound>
                <outbound type="class" confirmed="no">java.nio.ByteBuffer</outbound>
                <outbound type="feature" confirmed="no">java.nio.ByteBuffer.allocate(int)</outbound>
                <outbound type="feature" confirmed="no">java.nio.ByteBuffer.rewind()</outbound>
                <outbound type="feature" confirmed="no">java.nio.channels.Channels.newChannel(java.io.InputStream)</outbound>
                <outbound type="class" confirmed="no">java.nio.channels.ReadableByteChannel</outbound>
                <outbound type="feature" confirmed="no">java.nio.channels.ReadableByteChannel.read(java.nio.ByteBuffer)</outbound>
                <outbound type="class" confirmed="no">java.nio.channels.WritableByteChannel</outbound>
                <outbound type="feature" confirmed="no">java.nio.channels.WritableByteChannel.write(java.nio.ByteBuffer)</outbound>
                <outbound type="class" confirmed="no">java.util.jar.JarEntry</outbound>
                <outbound type="feature" confirmed="no">java.util.jar.JarEntry.getSize()</outbound>
                <outbound type="class" confirmed="no">java.util.jar.JarFile</outbound>
                <outbound type="feature" confirmed="no">java.util.jar.JarFile.getInputStream(java.util.zip.ZipEntry)</outbound>
                <outbound type="class" confirmed="no">java.util.zip.ZipEntry</outbound>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.Rejar.copy(java.util.jar.JarFile, java.util.jar.JarEntry, java.io.OutputStream)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>com.sun.enterprise.glassfish.bootstrap.Rejar.copy(java.util.jar.JarFile, java.util.jar.JarEntry, java.util.jar.JarOutputStream)</name>
                <outbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.Rejar.copy(java.util.jar.JarFile, java.util.jar.JarEntry, java.io.OutputStream)</outbound>
                <outbound type="class" confirmed="no">java.io.IOException</outbound>
                <outbound type="class" confirmed="no">java.io.OutputStream</outbound>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="class" confirmed="no">java.util.jar.JarEntry</outbound>
                <outbound type="feature" confirmed="no">java.util.jar.JarEntry.JarEntry(java.lang.String)</outbound>
                <outbound type="feature" confirmed="no">java.util.jar.JarEntry.getName()</outbound>
                <outbound type="class" confirmed="no">java.util.jar.JarFile</outbound>
                <outbound type="class" confirmed="no">java.util.jar.JarOutputStream</outbound>
                <outbound type="feature" confirmed="no">java.util.jar.JarOutputStream.closeEntry()</outbound>
                <outbound type="feature" confirmed="no">java.util.jar.JarOutputStream.flush()</outbound>
                <outbound type="feature" confirmed="no">java.util.jar.JarOutputStream.putNextEntry(java.util.zip.ZipEntry)</outbound>
                <outbound type="class" confirmed="no">java.util.zip.ZipEntry</outbound>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.Rejar.processDirectory(java.util.jar.JarOutputStream, java.io.File, java.util.Set, java.util.Map)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>com.sun.enterprise.glassfish.bootstrap.Rejar.getManifest()</name>
                <outbound type="class" confirmed="no">java.io.IOException</outbound>
                <outbound type="class" confirmed="no">java.lang.Object</outbound>
                <outbound type="class" confirmed="no">java.util.jar.Attributes</outbound>
                <outbound type="class" confirmed="no">java.util.jar.Attributes$Name</outbound>
                <outbound type="feature" confirmed="no">java.util.jar.Attributes$Name.MAIN_CLASS</outbound>
                <outbound type="feature" confirmed="no">java.util.jar.Attributes$Name.MANIFEST_VERSION</outbound>
                <outbound type="feature" confirmed="no">java.util.jar.Attributes.put(java.lang.Object, java.lang.Object)</outbound>
                <outbound type="class" confirmed="no">java.util.jar.Manifest</outbound>
                <outbound type="feature" confirmed="no">java.util.jar.Manifest.Manifest()</outbound>
                <outbound type="feature" confirmed="no">java.util.jar.Manifest.getMainAttributes()</outbound>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.Rejar.rejar(java.io.File, java.io.File)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>com.sun.enterprise.glassfish.bootstrap.Rejar.processDirectory(java.util.jar.JarOutputStream, java.io.File, java.util.Set, java.util.Map)</name>
                <outbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.Rejar$2.Rejar$2(com.sun.enterprise.glassfish.bootstrap.Rejar)</outbound>
                <outbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.Rejar.copy(java.util.jar.JarFile, java.util.jar.JarEntry, java.io.OutputStream)</outbound>
                <outbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.Rejar.copy(java.util.jar.JarFile, java.util.jar.JarEntry, java.util.jar.JarOutputStream)</outbound>
                <outbound type="class" confirmed="no">java.io.ByteArrayOutputStream</outbound>
                <outbound type="feature" confirmed="no">java.io.ByteArrayOutputStream.ByteArrayOutputStream()</outbound>
                <outbound type="feature" confirmed="no">java.io.ByteArrayOutputStream.write(byte[])</outbound>
                <outbound type="class" confirmed="no">java.io.File</outbound>
                <outbound type="feature" confirmed="no">java.io.File.getName()</outbound>
                <outbound type="feature" confirmed="no">java.io.File.listFiles(java.io.FileFilter)</outbound>
                <outbound type="class" confirmed="no">java.io.FileFilter</outbound>
                <outbound type="class" confirmed="no">java.io.IOException</outbound>
                <outbound type="class" confirmed="no">java.io.OutputStream</outbound>
                <outbound type="class" confirmed="no">java.lang.Object</outbound>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="feature" confirmed="no">java.lang.String.endsWith(java.lang.String)</outbound>
                <outbound type="feature" confirmed="no">java.lang.String.getBytes()</outbound>
                <outbound type="feature" confirmed="no">java.lang.String.startsWith(java.lang.String)</outbound>
                <outbound type="class" confirmed="no">java.lang.StringBuilder</outbound>
                <outbound type="feature" confirmed="no">java.lang.StringBuilder.StringBuilder()</outbound>
                <outbound type="feature" confirmed="no">java.lang.StringBuilder.append(java.lang.String)</outbound>
                <outbound type="feature" confirmed="no">java.lang.StringBuilder.toString()</outbound>
                <outbound type="class" confirmed="no">java.lang.Throwable</outbound>
                <outbound type="class" confirmed="no">java.util.Enumeration</outbound>
                <outbound type="feature" confirmed="no">java.util.Enumeration.hasMoreElements()</outbound>
                <outbound type="feature" confirmed="no">java.util.Enumeration.nextElement()</outbound>
                <outbound type="class" confirmed="no">java.util.Map</outbound>
                <outbound type="feature" confirmed="no">java.util.Map.get(java.lang.Object)</outbound>
                <outbound type="feature" confirmed="no">java.util.Map.put(java.lang.Object, java.lang.Object)</outbound>
                <outbound type="class" confirmed="no">java.util.Set</outbound>
                <outbound type="feature" confirmed="no">java.util.Set.add(java.lang.Object)</outbound>
                <outbound type="feature" confirmed="no">java.util.Set.contains(java.lang.Object)</outbound>
                <outbound type="class" confirmed="no">java.util.jar.JarEntry</outbound>
                <outbound type="feature" confirmed="no">java.util.jar.JarEntry.getName()</outbound>
                <outbound type="feature" confirmed="no">java.util.jar.JarEntry.isDirectory()</outbound>
                <outbound type="class" confirmed="no">java.util.jar.JarFile</outbound>
                <outbound type="feature" confirmed="no">java.util.jar.JarFile.JarFile(java.io.File)</outbound>
                <outbound type="feature" confirmed="no">java.util.jar.JarFile.close()</outbound>
                <outbound type="feature" confirmed="no">java.util.jar.JarFile.entries()</outbound>
                <outbound type="class" confirmed="no">java.util.jar.JarOutputStream</outbound>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.Rejar.rejar(java.io.File, java.io.File)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>com.sun.enterprise.glassfish.bootstrap.Rejar.rejar(java.io.File, java.io.File)</name>
                <outbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.Rejar$1.Rejar$1(com.sun.enterprise.glassfish.bootstrap.Rejar)</outbound>
                <outbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.Rejar.copy(byte[], java.lang.String, java.util.jar.JarOutputStream)</outbound>
                <outbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.Rejar.getManifest()</outbound>
                <outbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.Rejar.processDirectory(java.util.jar.JarOutputStream, java.io.File, java.util.Set, java.util.Map)</outbound>
                <outbound type="class" confirmed="no">java.io.ByteArrayOutputStream</outbound>
                <outbound type="feature" confirmed="no">java.io.ByteArrayOutputStream.toByteArray()</outbound>
                <outbound type="class" confirmed="no">java.io.File</outbound>
                <outbound type="feature" confirmed="no">java.io.File.listFiles(java.io.FileFilter)</outbound>
                <outbound type="class" confirmed="no">java.io.FileFilter</outbound>
                <outbound type="feature" confirmed="no">java.io.FileOutputStream.FileOutputStream(java.io.File)</outbound>
                <outbound type="class" confirmed="no">java.io.IOException</outbound>
                <outbound type="class" confirmed="no">java.io.OutputStream</outbound>
                <outbound type="class" confirmed="no">java.lang.Object</outbound>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="feature" confirmed="no">java.util.HashMap.HashMap()</outbound>
                <outbound type="feature" confirmed="no">java.util.HashSet.HashSet()</outbound>
                <outbound type="class" confirmed="no">java.util.Iterator</outbound>
                <outbound type="feature" confirmed="no">java.util.Iterator.hasNext()</outbound>
                <outbound type="feature" confirmed="no">java.util.Iterator.next()</outbound>
                <outbound type="class" confirmed="no">java.util.Map</outbound>
                <outbound type="class" confirmed="no">java.util.Map$Entry</outbound>
                <outbound type="feature" confirmed="no">java.util.Map$Entry.getKey()</outbound>
                <outbound type="feature" confirmed="no">java.util.Map$Entry.getValue()</outbound>
                <outbound type="feature" confirmed="no">java.util.Map.entrySet()</outbound>
                <outbound type="class" confirmed="no">java.util.Set</outbound>
                <outbound type="feature" confirmed="no">java.util.Set.add(java.lang.Object)</outbound>
                <outbound type="feature" confirmed="no">java.util.Set.iterator()</outbound>
                <outbound type="class" confirmed="no">java.util.jar.Attributes$Name</outbound>
                <outbound type="feature" confirmed="no">java.util.jar.Attributes$Name.MAIN_CLASS</outbound>
                <outbound type="feature" confirmed="no">java.util.jar.Attributes$Name.toString()</outbound>
                <outbound type="class" confirmed="no">java.util.jar.JarOutputStream</outbound>
                <outbound type="feature" confirmed="no">java.util.jar.JarOutputStream.JarOutputStream(java.io.OutputStream, java.util.jar.Manifest)</outbound>
                <outbound type="feature" confirmed="no">java.util.jar.JarOutputStream.close()</outbound>
                <outbound type="feature" confirmed="no">java.util.jar.JarOutputStream.flush()</outbound>
                <outbound type="class" confirmed="no">java.util.jar.Manifest</outbound>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainStatic.createCache(java.io.File)</inbound>
            </feature>
        </class>
        <class confirmed="yes">
            <name>com.sun.enterprise.glassfish.bootstrap.Rejar$1</name>
            <outbound type="class" confirmed="no">java.io.FileFilter</outbound>
            <outbound type="class" confirmed="no">java.lang.Object</outbound>
            <feature confirmed="yes">
                <name>com.sun.enterprise.glassfish.bootstrap.Rejar$1.Rejar$1(com.sun.enterprise.glassfish.bootstrap.Rejar)</name>
                <outbound type="class" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.Rejar</outbound>
                <outbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.Rejar$1.this$0</outbound>
                <outbound type="feature" confirmed="no">java.lang.Object.Object()</outbound>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.Rejar.rejar(java.io.File, java.io.File)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>com.sun.enterprise.glassfish.bootstrap.Rejar$1.accept(java.io.File)</name>
                <outbound type="class" confirmed="no">java.io.File</outbound>
                <outbound type="feature" confirmed="no">java.io.File.isDirectory()</outbound>
            </feature>
            <feature confirmed="yes">
                <name>com.sun.enterprise.glassfish.bootstrap.Rejar$1.this$0</name>
                <outbound type="class" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.Rejar</outbound>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.Rejar$1.Rejar$1(com.sun.enterprise.glassfish.bootstrap.Rejar)</inbound>
            </feature>
        </class>
        <class confirmed="yes">
            <name>com.sun.enterprise.glassfish.bootstrap.Rejar$2</name>
            <outbound type="class" confirmed="no">java.io.FileFilter</outbound>
            <outbound type="class" confirmed="no">java.lang.Object</outbound>
            <feature confirmed="yes">
                <name>com.sun.enterprise.glassfish.bootstrap.Rejar$2.Rejar$2(com.sun.enterprise.glassfish.bootstrap.Rejar)</name>
                <outbound type="class" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.Rejar</outbound>
                <outbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.Rejar$2.this$0</outbound>
                <outbound type="feature" confirmed="no">java.lang.Object.Object()</outbound>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.Rejar.processDirectory(java.util.jar.JarOutputStream, java.io.File, java.util.Set, java.util.Map)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>com.sun.enterprise.glassfish.bootstrap.Rejar$2.accept(java.io.File)</name>
                <outbound type="class" confirmed="no">java.io.File</outbound>
                <outbound type="feature" confirmed="no">java.io.File.getName()</outbound>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="feature" confirmed="no">java.lang.String.endsWith(java.lang.String)</outbound>
            </feature>
            <feature confirmed="yes">
                <name>com.sun.enterprise.glassfish.bootstrap.Rejar$2.this$0</name>
                <outbound type="class" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.Rejar</outbound>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.Rejar$2.Rejar$2(com.sun.enterprise.glassfish.bootstrap.Rejar)</inbound>
            </feature>
        </class>
        <class confirmed="yes">
            <name>com.sun.enterprise.glassfish.bootstrap.StartupContextUtil</name>
            <outbound type="class" confirmed="no">java.lang.Object</outbound>
            <feature confirmed="yes">
                <name>com.sun.enterprise.glassfish.bootstrap.StartupContextUtil.StartupContextUtil()</name>
                <outbound type="feature" confirmed="no">java.lang.Object.Object()</outbound>
            </feature>
            <feature confirmed="yes">
                <name>com.sun.enterprise.glassfish.bootstrap.StartupContextUtil.absolutize(java.io.File)</name>
                <outbound type="class" confirmed="no">java.io.File</outbound>
                <outbound type="feature" confirmed="no">java.io.File.getAbsoluteFile()</outbound>
                <outbound type="feature" confirmed="no">java.io.File.getCanonicalFile()</outbound>
                <outbound type="class" confirmed="no">java.lang.Exception</outbound>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.StartupContextUtil.getInstallRoot(java.util.Properties)</inbound>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.StartupContextUtil.getInstanceRoot(java.util.Properties)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>com.sun.enterprise.glassfish.bootstrap.StartupContextUtil.getInstallRoot(com.sun.enterprise.module.bootstrap.StartupContext)</name>
                <outbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.StartupContextUtil.getInstallRoot(java.util.Properties)</outbound>
                <outbound type="class" confirmed="no">com.sun.enterprise.module.bootstrap.StartupContext</outbound>
                <outbound type="feature" confirmed="no">com.sun.enterprise.module.bootstrap.StartupContext.getArguments()</outbound>
                <outbound type="class" confirmed="no">java.io.File</outbound>
                <outbound type="class" confirmed="no">java.util.Properties</outbound>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainStatic.start(java.util.Properties)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>com.sun.enterprise.glassfish.bootstrap.StartupContextUtil.getInstallRoot(java.util.Properties)</name>
                <outbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.StartupContextUtil.absolutize(java.io.File)</outbound>
                <outbound type="class" confirmed="no">java.io.File</outbound>
                <outbound type="feature" confirmed="no">java.io.File.File(java.lang.String)</outbound>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="class" confirmed="no">java.util.Properties</outbound>
                <outbound type="feature" confirmed="no">java.util.Properties.getProperty(java.lang.String)</outbound>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainHelper$PlatformHelper.init(java.util.Properties)</inbound>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainOSGi.start(java.util.Properties)</inbound>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.StartupContextUtil.getInstallRoot(com.sun.enterprise.module.bootstrap.StartupContext)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>com.sun.enterprise.glassfish.bootstrap.StartupContextUtil.getInstanceRoot(com.sun.enterprise.module.bootstrap.StartupContext)</name>
                <outbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.StartupContextUtil.getInstanceRoot(java.util.Properties)</outbound>
                <outbound type="class" confirmed="no">com.sun.enterprise.module.bootstrap.StartupContext</outbound>
                <outbound type="feature" confirmed="no">com.sun.enterprise.module.bootstrap.StartupContext.getArguments()</outbound>
                <outbound type="class" confirmed="no">java.io.File</outbound>
                <outbound type="class" confirmed="no">java.util.Properties</outbound>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainStatic.start(java.util.Properties)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>com.sun.enterprise.glassfish.bootstrap.StartupContextUtil.getInstanceRoot(java.util.Properties)</name>
                <outbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.StartupContextUtil.absolutize(java.io.File)</outbound>
                <outbound type="class" confirmed="no">java.io.File</outbound>
                <outbound type="feature" confirmed="no">java.io.File.File(java.lang.String)</outbound>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="class" confirmed="no">java.util.Properties</outbound>
                <outbound type="feature" confirmed="no">java.util.Properties.getProperty(java.lang.String)</outbound>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainOSGi.start(java.util.Properties)</inbound>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.StartupContextUtil.getInstanceRoot(com.sun.enterprise.module.bootstrap.StartupContext)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>com.sun.enterprise.glassfish.bootstrap.StartupContextUtil.getOriginalArguments(com.sun.enterprise.module.bootstrap.StartupContext)</name>
                <outbound type="class" confirmed="no">com.sun.enterprise.module.bootstrap.StartupContext</outbound>
                <outbound type="feature" confirmed="no">com.sun.enterprise.module.bootstrap.StartupContext.getArguments()</outbound>
                <outbound type="class" confirmed="no">java.lang.Object</outbound>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="class" confirmed="no">java.lang.String[]</outbound>
                <outbound type="feature" confirmed="no">java.util.ArrayList.ArrayList()</outbound>
                <outbound type="feature" confirmed="no">java.util.List.add(java.lang.Object)</outbound>
                <outbound type="feature" confirmed="no">java.util.List.toArray(java.lang.Object[])</outbound>
                <outbound type="class" confirmed="no">java.util.Properties</outbound>
                <outbound type="feature" confirmed="no">java.util.Properties.getProperty(java.lang.String)</outbound>
                <outbound type="feature" confirmed="no">java.util.StringTokenizer.StringTokenizer(java.lang.String, java.lang.String, boolean)</outbound>
                <outbound type="feature" confirmed="no">java.util.StringTokenizer.hasMoreTokens()</outbound>
                <outbound type="feature" confirmed="no">java.util.StringTokenizer.nextToken()</outbound>
            </feature>
        </class>
        <class confirmed="yes">
            <name>com.sun.enterprise.glassfish.bootstrap.Util</name>
            <outbound type="class" confirmed="no">java.lang.Object</outbound>
            <feature confirmed="yes">
                <name>com.sun.enterprise.glassfish.bootstrap.Util.DELIM_START</name>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
            </feature>
            <feature confirmed="yes">
                <name>com.sun.enterprise.glassfish.bootstrap.Util.DELIM_STOP</name>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
            </feature>
            <feature confirmed="yes">
                <name>com.sun.enterprise.glassfish.bootstrap.Util.Util()</name>
                <outbound type="feature" confirmed="no">java.lang.Object.Object()</outbound>
            </feature>
            <feature confirmed="yes">
                <name>com.sun.enterprise.glassfish.bootstrap.Util.copy(java.io.InputStream, java.io.FileOutputStream, long)</name>
                <outbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.Util.copyWithoutClose(java.io.InputStream, java.io.FileOutputStream, long)</outbound>
                <outbound type="class" confirmed="no">java.io.FileOutputStream</outbound>
                <outbound type="feature" confirmed="no">java.io.FileOutputStream.close()</outbound>
                <outbound type="class" confirmed="no">java.io.IOException</outbound>
                <outbound type="class" confirmed="no">java.io.InputStream</outbound>
                <outbound type="feature" confirmed="no">java.io.InputStream.close()</outbound>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.Util.copyFile(java.io.File, java.io.File)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>com.sun.enterprise.glassfish.bootstrap.Util.copyFile(java.io.File, java.io.File)</name>
                <outbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.Util.copy(java.io.InputStream, java.io.FileOutputStream, long)</outbound>
                <outbound type="feature" confirmed="no">java.io.BufferedInputStream.BufferedInputStream(java.io.InputStream)</outbound>
                <outbound type="class" confirmed="no">java.io.File</outbound>
                <outbound type="feature" confirmed="no">java.io.File.length()</outbound>
                <outbound type="feature" confirmed="no">java.io.FileInputStream.FileInputStream(java.io.File)</outbound>
                <outbound type="class" confirmed="no">java.io.FileOutputStream</outbound>
                <outbound type="feature" confirmed="no">java.io.FileOutputStream.FileOutputStream(java.io.File)</outbound>
                <outbound type="class" confirmed="no">java.io.IOException</outbound>
                <outbound type="class" confirmed="no">java.io.InputStream</outbound>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainEquinox.setUpCache()</inbound>
            </feature>
            <feature confirmed="yes">
                <name>com.sun.enterprise.glassfish.bootstrap.Util.copyWithoutClose(java.io.InputStream, java.io.FileOutputStream, long)</name>
                <outbound type="class" confirmed="no">java.io.FileOutputStream</outbound>
                <outbound type="feature" confirmed="no">java.io.FileOutputStream.getChannel()</outbound>
                <outbound type="class" confirmed="no">java.io.IOException</outbound>
                <outbound type="class" confirmed="no">java.io.InputStream</outbound>
                <outbound type="feature" confirmed="no">java.nio.channels.Channels.newChannel(java.io.InputStream)</outbound>
                <outbound type="class" confirmed="no">java.nio.channels.FileChannel</outbound>
                <outbound type="feature" confirmed="no">java.nio.channels.FileChannel.transferFrom(java.nio.channels.ReadableByteChannel, long, long)</outbound>
                <outbound type="class" confirmed="no">java.nio.channels.ReadableByteChannel</outbound>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.Util.copy(java.io.InputStream, java.io.FileOutputStream, long)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>com.sun.enterprise.glassfish.bootstrap.Util.deleteRecursive(java.io.File)</name>
                <outbound type="class" confirmed="no">java.io.File</outbound>
                <outbound type="feature" confirmed="no">java.io.File.delete()</outbound>
                <outbound type="feature" confirmed="no">java.io.File.isFile()</outbound>
                <outbound type="feature" confirmed="no">java.io.File.listFiles()</outbound>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainNonOSGi.flushAndCreate(java.io.File, long)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>com.sun.enterprise.glassfish.bootstrap.Util.getJDKToolsJar()</name>
                <outbound type="class" confirmed="no">java.io.File</outbound>
                <outbound type="feature" confirmed="no">java.io.File.File(java.lang.String)</outbound>
                <outbound type="feature" confirmed="no">java.io.File.File(java.lang.String, java.lang.String)</outbound>
                <outbound type="feature" confirmed="no">java.io.File.getParent()</outbound>
                <outbound type="feature" confirmed="no">java.io.File.separator</outbound>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="class" confirmed="no">java.lang.StringBuilder</outbound>
                <outbound type="feature" confirmed="no">java.lang.StringBuilder.StringBuilder()</outbound>
                <outbound type="feature" confirmed="no">java.lang.StringBuilder.append(java.lang.String)</outbound>
                <outbound type="feature" confirmed="no">java.lang.StringBuilder.toString()</outbound>
                <outbound type="feature" confirmed="no">java.lang.System.getProperty(java.lang.String)</outbound>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainHelper$ClassLoaderBuilder.addJDKToolsJar()</inbound>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainOSGi.addJDKToolsJar(com.sun.enterprise.glassfish.bootstrap.ClassPathBuilder)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>com.sun.enterprise.glassfish.bootstrap.Util.getLastModified(java.io.File, long)</name>
                <outbound type="class" confirmed="no">java.io.File</outbound>
                <outbound type="feature" confirmed="no">java.io.File.isDirectory()</outbound>
                <outbound type="feature" confirmed="no">java.io.File.lastModified()</outbound>
                <outbound type="feature" confirmed="no">java.io.File.listFiles()</outbound>
            </feature>
            <feature confirmed="yes">
                <name>com.sun.enterprise.glassfish.bootstrap.Util.getPropertyOrSystemProperty(java.util.Properties, java.lang.String)</name>
                <outbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.Util.getPropertyOrSystemProperty(java.util.Properties, java.lang.String, java.lang.String)</outbound>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="class" confirmed="no">java.util.Properties</outbound>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainHelper.findInstallRootURI(java.util.Properties)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>com.sun.enterprise.glassfish.bootstrap.Util.getPropertyOrSystemProperty(java.util.Properties, java.lang.String, java.lang.String)</name>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="feature" confirmed="no">java.lang.System.getProperty(java.lang.String, java.lang.String)</outbound>
                <outbound type="class" confirmed="no">java.util.Properties</outbound>
                <outbound type="feature" confirmed="no">java.util.Properties.getProperty(java.lang.String)</outbound>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.GlassFishMain$Launcher.launch(java.util.Properties)</inbound>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.Util.getPropertyOrSystemProperty(java.util.Properties, java.lang.String)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>com.sun.enterprise.glassfish.bootstrap.Util.substVars(java.lang.String, java.lang.String, java.util.Map, java.util.Properties)</name>
                <outbound type="class" confirmed="no">java.lang.IllegalArgumentException</outbound>
                <outbound type="feature" confirmed="no">java.lang.IllegalArgumentException.IllegalArgumentException(java.lang.String)</outbound>
                <outbound type="class" confirmed="no">java.lang.Object</outbound>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="feature" confirmed="no">java.lang.String.indexOf(java.lang.String)</outbound>
                <outbound type="feature" confirmed="no">java.lang.String.indexOf(java.lang.String, int)</outbound>
                <outbound type="feature" confirmed="no">java.lang.String.length()</outbound>
                <outbound type="feature" confirmed="no">java.lang.String.substring(int, int)</outbound>
                <outbound type="class" confirmed="no">java.lang.StringBuilder</outbound>
                <outbound type="feature" confirmed="no">java.lang.StringBuilder.StringBuilder()</outbound>
                <outbound type="feature" confirmed="no">java.lang.StringBuilder.append(java.lang.String)</outbound>
                <outbound type="feature" confirmed="no">java.lang.StringBuilder.toString()</outbound>
                <outbound type="feature" confirmed="no">java.lang.System.getProperty(java.lang.String, java.lang.String)</outbound>
                <outbound type="feature" confirmed="no">java.util.HashMap.HashMap()</outbound>
                <outbound type="class" confirmed="no">java.util.Map</outbound>
                <outbound type="feature" confirmed="no">java.util.Map.get(java.lang.Object)</outbound>
                <outbound type="feature" confirmed="no">java.util.Map.put(java.lang.Object, java.lang.Object)</outbound>
                <outbound type="feature" confirmed="no">java.util.Map.remove(java.lang.Object)</outbound>
                <outbound type="class" confirmed="no">java.util.Properties</outbound>
                <outbound type="feature" confirmed="no">java.util.Properties.getProperty(java.lang.String, java.lang.String)</outbound>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.Util.substVars(java.util.Properties)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>com.sun.enterprise.glassfish.bootstrap.Util.substVars(java.util.Properties)</name>
                <outbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.Util.substVars(java.lang.String, java.lang.String, java.util.Map, java.util.Properties)</outbound>
                <outbound type="class" confirmed="no">java.lang.Object</outbound>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="class" confirmed="no">java.util.Enumeration</outbound>
                <outbound type="feature" confirmed="no">java.util.Enumeration.hasMoreElements()</outbound>
                <outbound type="feature" confirmed="no">java.util.Enumeration.nextElement()</outbound>
                <outbound type="class" confirmed="no">java.util.Map</outbound>
                <outbound type="class" confirmed="no">java.util.Properties</outbound>
                <outbound type="feature" confirmed="no">java.util.Properties.getProperty(java.lang.String)</outbound>
                <outbound type="feature" confirmed="no">java.util.Properties.propertyNames()</outbound>
                <outbound type="feature" confirmed="no">java.util.Properties.setProperty(java.lang.String, java.lang.String)</outbound>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainHelper.mergePlatformConfiguration(java.util.Properties)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>com.sun.enterprise.glassfish.bootstrap.Util.whichJar(java.lang.Class)</name>
                <outbound type="class" confirmed="no">java.lang.CharSequence</outbound>
                <outbound type="class" confirmed="no">java.lang.Class</outbound>
                <outbound type="feature" confirmed="no">java.lang.Class.cast(java.lang.Object)</outbound>
                <outbound type="feature" confirmed="no">java.lang.Class.getClassLoader()</outbound>
                <outbound type="feature" confirmed="no">java.lang.Class.getName()</outbound>
                <outbound type="class" confirmed="no">java.lang.ClassLoader</outbound>
                <outbound type="feature" confirmed="no">java.lang.ClassLoader.getResource(java.lang.String)</outbound>
                <outbound type="class" confirmed="no">java.lang.Exception</outbound>
                <outbound type="feature" confirmed="no">java.lang.Exception.printStackTrace()</outbound>
                <outbound type="class" confirmed="no">java.lang.Object</outbound>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="feature" confirmed="no">java.lang.String.replace(java.lang.CharSequence, java.lang.CharSequence)</outbound>
                <outbound type="class" confirmed="no">java.lang.StringBuilder</outbound>
                <outbound type="feature" confirmed="no">java.lang.StringBuilder.StringBuilder()</outbound>
                <outbound type="feature" confirmed="no">java.lang.StringBuilder.append(java.lang.String)</outbound>
                <outbound type="feature" confirmed="no">java.lang.StringBuilder.toString()</outbound>
                <outbound type="class" confirmed="no">java.net.JarURLConnection</outbound>
                <outbound type="feature" confirmed="no">java.net.JarURLConnection.getJarFileURL()</outbound>
                <outbound type="class" confirmed="no">java.net.URI</outbound>
                <outbound type="class" confirmed="no">java.net.URL</outbound>
                <outbound type="feature" confirmed="no">java.net.URL.openConnection()</outbound>
                <outbound type="feature" confirmed="no">java.net.URL.toURI()</outbound>
                <outbound type="class" confirmed="no">java.net.URLConnection</outbound>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainHelper.findInstallRootURI(java.util.Properties)</inbound>
            </feature>
        </class>
    </package>
    <package confirmed="no">
        <name>com.sun.enterprise.module</name>
        <class confirmed="no">
            <name>com.sun.enterprise.module.Module</name>
            <inbound type="class" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ProxyModule</inbound>
            <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ProxyModule.addImport(com.sun.enterprise.module.Module)</inbound>
            <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ProxyModule.addImport(com.sun.enterprise.module.ModuleDependency)</inbound>
        </class>
        <class confirmed="no">
            <name>com.sun.enterprise.module.ModuleChangeListener</name>
            <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ProxyModule.addListener(com.sun.enterprise.module.ModuleChangeListener)</inbound>
            <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ProxyModule.removeListener(com.sun.enterprise.module.ModuleChangeListener)</inbound>
        </class>
        <class confirmed="no">
            <name>com.sun.enterprise.module.ModuleDefinition</name>
            <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ExtensibleClassLoader.moduleAdded(com.sun.enterprise.module.ModuleDefinition)</inbound>
            <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ExtensibleClassLoader.moduleRemoved(com.sun.enterprise.module.ModuleDefinition)</inbound>
            <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.GFRepository.loadJar(java.io.File)</inbound>
            <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ProxyModule.ProxyModule(com.sun.enterprise.module.ModulesRegistry, com.sun.enterprise.module.ModuleDefinition, java.lang.ClassLoader)</inbound>
            <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ProxyModule.getMetadata()</inbound>
            <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ProxyModule.getModuleDefinition()</inbound>
            <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ProxyModule.getName()</inbound>
            <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ProxyModule.moduleDef</inbound>
            <feature confirmed="no">
                <name>com.sun.enterprise.module.ModuleDefinition.getMetadata()</name>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ProxyModule.getMetadata()</inbound>
            </feature>
            <feature confirmed="no">
                <name>com.sun.enterprise.module.ModuleDefinition.getName()</name>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ProxyModule.getName()</inbound>
            </feature>
        </class>
        <class confirmed="no">
            <name>com.sun.enterprise.module.ModuleDependency</name>
            <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ProxyModule.addImport(com.sun.enterprise.module.ModuleDependency)</inbound>
        </class>
        <class confirmed="no">
            <name>com.sun.enterprise.module.ModuleMetadata</name>
            <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ProxyModule.getMetadata()</inbound>
        </class>
        <class confirmed="no">
            <name>com.sun.enterprise.module.ModuleState</name>
            <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ProxyModule.getState()</inbound>
            <feature confirmed="no">
                <name>com.sun.enterprise.module.ModuleState.READY</name>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ProxyModule.getState()</inbound>
            </feature>
        </class>
        <class confirmed="no">
            <name>com.sun.enterprise.module.ModulesRegistry</name>
            <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASEmbedded$EmbeddedMain.createHabitat(com.sun.enterprise.module.ModulesRegistry, com.sun.enterprise.module.bootstrap.StartupContext)</inbound>
            <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASEmbedded.start(java.util.Properties)</inbound>
            <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainStatic$1$1.createHabitat(com.sun.enterprise.module.ModulesRegistry, com.sun.enterprise.module.bootstrap.StartupContext)</inbound>
            <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainStatic$1.run()</inbound>
            <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.GlassFishActivator$1.newGlassFish(java.util.Properties)</inbound>
            <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ProxyModule.ProxyModule(com.sun.enterprise.module.ModulesRegistry, com.sun.enterprise.module.ModuleDefinition, java.lang.ClassLoader)</inbound>
            <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ProxyModule.getRegistry()</inbound>
            <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ProxyModule.modulesRegistry</inbound>
            <feature confirmed="no">
                <name>com.sun.enterprise.module.ModulesRegistry.createHabitat(java.lang.String, com.sun.hk2.component.InhabitantsParser)</name>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASEmbedded$EmbeddedMain.createHabitat(com.sun.enterprise.module.ModulesRegistry, com.sun.enterprise.module.bootstrap.StartupContext)</inbound>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainStatic$1$1.createHabitat(com.sun.enterprise.module.ModulesRegistry, com.sun.enterprise.module.bootstrap.StartupContext)</inbound>
            </feature>
            <feature confirmed="no">
                <name>com.sun.enterprise.module.ModulesRegistry.newHabitat()</name>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASEmbedded$EmbeddedMain.createHabitat(com.sun.enterprise.module.ModulesRegistry, com.sun.enterprise.module.bootstrap.StartupContext)</inbound>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainStatic$1$1.createHabitat(com.sun.enterprise.module.ModulesRegistry, com.sun.enterprise.module.bootstrap.StartupContext)</inbound>
            </feature>
            <feature confirmed="no">
                <name>com.sun.enterprise.module.ModulesRegistry.setParentClassLoader(java.lang.ClassLoader)</name>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASEmbedded.start(java.util.Properties)</inbound>
            </feature>
        </class>
        <class confirmed="no">
            <name>com.sun.enterprise.module.Repository</name>
            <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ExtensibleClassLoader.ExtensibleClassLoader(java.net.URL[], java.lang.ClassLoader, java.util.List)</inbound>
            <feature confirmed="no">
                <name>com.sun.enterprise.module.Repository.addListener(com.sun.enterprise.module.RepositoryChangeListener)</name>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ExtensibleClassLoader.ExtensibleClassLoader(java.net.URL[], java.lang.ClassLoader, java.util.List)</inbound>
            </feature>
            <feature confirmed="no">
                <name>com.sun.enterprise.module.Repository.getJarLocations()</name>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ExtensibleClassLoader.ExtensibleClassLoader(java.net.URL[], java.lang.ClassLoader, java.util.List)</inbound>
            </feature>
        </class>
        <class confirmed="no">
            <name>com.sun.enterprise.module.RepositoryChangeListener</name>
            <inbound type="class" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ExtensibleClassLoader</inbound>
            <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ExtensibleClassLoader.ExtensibleClassLoader(java.net.URL[], java.lang.ClassLoader, java.util.List)</inbound>
        </class>
        <class confirmed="no">
            <name>com.sun.enterprise.module.ResolveError</name>
            <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ProxyModule.resolve()</inbound>
            <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ProxyModule.start()</inbound>
        </class>
    </package>
    <package confirmed="no">
        <name>com.sun.enterprise.module.bootstrap</name>
        <class confirmed="no">
            <name>com.sun.enterprise.module.bootstrap.ArgumentManager</name>
            <feature confirmed="no">
                <name>com.sun.enterprise.module.bootstrap.ArgumentManager.argsToMap(java.lang.String[])</name>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainHelper.buildStartupContext(java.lang.String, java.io.File, java.io.File, java.lang.String[])</inbound>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainHelper.findInstanceRoot(java.io.File, java.lang.String[])</inbound>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.GlassFishMain.main(java.lang.String[])</inbound>
            </feature>
        </class>
        <class confirmed="no">
            <name>com.sun.enterprise.module.bootstrap.BootException</name>
            <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASEmbedded$EmbeddedMain.createHabitat(com.sun.enterprise.module.ModulesRegistry, com.sun.enterprise.module.bootstrap.StartupContext)</inbound>
            <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASEmbedded.start(java.util.Properties)</inbound>
            <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainStatic$1$1.createHabitat(com.sun.enterprise.module.ModulesRegistry, com.sun.enterprise.module.bootstrap.StartupContext)</inbound>
            <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainStatic$1.run()</inbound>
            <feature confirmed="no">
                <name>com.sun.enterprise.module.bootstrap.BootException.BootException(java.lang.String)</name>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainStatic.start(java.util.Properties)</inbound>
            </feature>
            <feature confirmed="no">
                <name>com.sun.enterprise.module.bootstrap.BootException.getMessage()</name>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASEmbedded.start(java.util.Properties)</inbound>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainStatic$1.run()</inbound>
            </feature>
        </class>
        <class confirmed="no">
            <name>com.sun.enterprise.module.bootstrap.Main</name>
            <inbound type="class" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASEmbedded$EmbeddedMain</inbound>
            <inbound type="class" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainStatic$1$1</inbound>
            <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.GlassFishActivator$1.newGlassFish(java.util.Properties)</inbound>
            <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.GlassFishActivator.registerGlassFishRuntime()</inbound>
            <feature confirmed="no">
                <name>com.sun.enterprise.module.bootstrap.Main.Main()</name>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASEmbedded$EmbeddedMain.ASEmbedded$EmbeddedMain(com.sun.enterprise.glassfish.bootstrap.ASEmbedded)</inbound>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainStatic$1$1.ASMainStatic$1$1(com.sun.enterprise.glassfish.bootstrap.ASMainStatic$1)</inbound>
            </feature>
            <feature confirmed="no">
                <name>com.sun.enterprise.module.bootstrap.Main.createHabitat(com.sun.enterprise.module.ModulesRegistry, com.sun.enterprise.module.bootstrap.StartupContext)</name>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.GlassFishActivator$1.newGlassFish(java.util.Properties)</inbound>
            </feature>
            <feature confirmed="no">
                <name>com.sun.enterprise.module.bootstrap.Main.createInhabitantsParser(org.jvnet.hk2.component.Habitat)</name>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASEmbedded$EmbeddedMain.createInhabitantsParser(org.jvnet.hk2.component.Habitat)</inbound>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainStatic$1$1.createInhabitantsParser(org.jvnet.hk2.component.Habitat)</inbound>
            </feature>
            <feature confirmed="no">
                <name>com.sun.enterprise.module.bootstrap.Main.findStartupService(com.sun.enterprise.module.ModulesRegistry, org.jvnet.hk2.component.Habitat, java.lang.String, com.sun.enterprise.module.bootstrap.StartupContext)</name>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.GlassFishActivator$1.newGlassFish(java.util.Properties)</inbound>
            </feature>
            <feature confirmed="no">
                <name>com.sun.enterprise.module.bootstrap.Main.launch(com.sun.enterprise.module.ModulesRegistry, com.sun.enterprise.module.bootstrap.StartupContext)</name>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASEmbedded.start(java.util.Properties)</inbound>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainStatic$1.run()</inbound>
            </feature>
        </class>
        <class confirmed="no">
            <name>com.sun.enterprise.module.bootstrap.ModuleStartup</name>
            <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.GlassFishActivator$1$1.GlassFishActivator$1$1(com.sun.enterprise.glassfish.bootstrap.GlassFishActivator$1, com.sun.enterprise.module.bootstrap.ModuleStartup, org.jvnet.hk2.component.Habitat)</inbound>
            <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.GlassFishActivator$1$1.start()</inbound>
            <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.GlassFishActivator$1$1.stop()</inbound>
            <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.GlassFishActivator$1$1.val$gfKernel</inbound>
            <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.GlassFishActivator$1.newGlassFish(java.util.Properties)</inbound>
            <feature confirmed="no">
                <name>com.sun.enterprise.module.bootstrap.ModuleStartup.start()</name>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.GlassFishActivator$1$1.start()</inbound>
            </feature>
            <feature confirmed="no">
                <name>com.sun.enterprise.module.bootstrap.ModuleStartup.stop()</name>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.GlassFishActivator$1$1.stop()</inbound>
            </feature>
        </class>
        <class confirmed="no">
            <name>com.sun.enterprise.module.bootstrap.PlatformMain</name>
            <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMain.main(java.lang.String[])</inbound>
            <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainHelper.getMain(java.lang.String)</inbound>
            <inbound type="class" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainNonOSGi</inbound>
            <inbound type="class" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainOSGi</inbound>
            <feature confirmed="no">
                <name>com.sun.enterprise.module.bootstrap.PlatformMain.PlatformMain()</name>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainNonOSGi.ASMainNonOSGi()</inbound>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainOSGi.ASMainOSGi()</inbound>
            </feature>
            <feature confirmed="no">
                <name>com.sun.enterprise.module.bootstrap.PlatformMain.getName()</name>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainHelper.getMain(java.lang.String)</inbound>
            </feature>
            <feature confirmed="no">
                <name>com.sun.enterprise.module.bootstrap.PlatformMain.setLogger(java.util.logging.Logger)</name>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMain.main(java.lang.String[])</inbound>
            </feature>
            <feature confirmed="no">
                <name>com.sun.enterprise.module.bootstrap.PlatformMain.start(java.util.Properties)</name>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMain.main(java.lang.String[])</inbound>
            </feature>
        </class>
        <class confirmed="no">
            <name>com.sun.enterprise.module.bootstrap.StartupContext</name>
            <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASEmbedded$EmbeddedMain.createHabitat(com.sun.enterprise.module.ModulesRegistry, com.sun.enterprise.module.bootstrap.StartupContext)</inbound>
            <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASEmbedded.start(java.util.Properties)</inbound>
            <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainStatic$1$1.createHabitat(com.sun.enterprise.module.ModulesRegistry, com.sun.enterprise.module.bootstrap.StartupContext)</inbound>
            <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainStatic$1.ASMainStatic$1(com.sun.enterprise.glassfish.bootstrap.ASMainStatic, java.lang.ClassLoader, com.sun.enterprise.module.impl.ModulesRegistryImpl, com.sun.enterprise.module.bootstrap.StartupContext)</inbound>
            <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainStatic$1.run()</inbound>
            <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainStatic$1.val$startupContext</inbound>
            <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainStatic.start(java.util.Properties)</inbound>
            <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.GlassFishActivator$1.newGlassFish(java.util.Properties)</inbound>
            <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.StartupContextUtil.getInstallRoot(com.sun.enterprise.module.bootstrap.StartupContext)</inbound>
            <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.StartupContextUtil.getInstanceRoot(com.sun.enterprise.module.bootstrap.StartupContext)</inbound>
            <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.StartupContextUtil.getOriginalArguments(com.sun.enterprise.module.bootstrap.StartupContext)</inbound>
            <feature confirmed="no">
                <name>com.sun.enterprise.module.bootstrap.StartupContext.StartupContext(java.util.Properties)</name>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainStatic.start(java.util.Properties)</inbound>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.GlassFishActivator$1.newGlassFish(java.util.Properties)</inbound>
            </feature>
            <feature confirmed="no">
                <name>com.sun.enterprise.module.bootstrap.StartupContext.getArguments()</name>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.StartupContextUtil.getInstallRoot(com.sun.enterprise.module.bootstrap.StartupContext)</inbound>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.StartupContextUtil.getInstanceRoot(com.sun.enterprise.module.bootstrap.StartupContext)</inbound>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.StartupContextUtil.getOriginalArguments(com.sun.enterprise.module.bootstrap.StartupContext)</inbound>
            </feature>
        </class>
        <class confirmed="no">
            <name>com.sun.enterprise.module.bootstrap.Which</name>
            <feature confirmed="no">
                <name>com.sun.enterprise.module.bootstrap.Which.jarFile(java.lang.Class)</name>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainHelper.findBootstrapFile()</inbound>
            </feature>
        </class>
    </package>
    <package confirmed="no">
        <name>com.sun.enterprise.module.common_impl</name>
        <class confirmed="no">
            <name>com.sun.enterprise.module.common_impl.DefaultModuleDefinition</name>
            <inbound type="class" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.GFModuleDefinition</inbound>
            <feature confirmed="no">
                <name>com.sun.enterprise.module.common_impl.DefaultModuleDefinition.DefaultModuleDefinition(java.io.File)</name>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.GFModuleDefinition.GFModuleDefinition(java.io.File)</inbound>
            </feature>
        </class>
        <class confirmed="no">
            <name>com.sun.enterprise.module.common_impl.DirectoryBasedRepository</name>
            <inbound type="class" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.GFRepository</inbound>
            <feature confirmed="no">
                <name>com.sun.enterprise.module.common_impl.DirectoryBasedRepository.DirectoryBasedRepository(java.lang.String, java.io.File)</name>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.GFRepository.GFRepository(java.lang.String, java.io.File)</inbound>
            </feature>
        </class>
    </package>
    <package confirmed="no">
        <name>com.sun.enterprise.module.impl</name>
        <class confirmed="no">
            <name>com.sun.enterprise.module.impl.ModulesRegistryImpl</name>
            <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainStatic$1.ASMainStatic$1(com.sun.enterprise.glassfish.bootstrap.ASMainStatic, java.lang.ClassLoader, com.sun.enterprise.module.impl.ModulesRegistryImpl, com.sun.enterprise.module.bootstrap.StartupContext)</inbound>
            <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainStatic$1.run()</inbound>
            <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainStatic$1.val$modulesRegistry</inbound>
            <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainStatic.start(java.util.Properties)</inbound>
            <feature confirmed="no">
                <name>com.sun.enterprise.module.impl.ModulesRegistryImpl.setParentClassLoader(java.lang.ClassLoader)</name>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainStatic.start(java.util.Properties)</inbound>
            </feature>
        </class>
    </package>
    <package confirmed="no">
        <name>com.sun.enterprise.module.single</name>
        <class confirmed="no">
            <name>com.sun.enterprise.module.single.SingleModulesRegistry</name>
            <feature confirmed="no">
                <name>com.sun.enterprise.module.single.SingleModulesRegistry.SingleModulesRegistry(java.lang.ClassLoader)</name>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASEmbedded.start(java.util.Properties)</inbound>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainStatic.start(java.util.Properties)</inbound>
            </feature>
        </class>
    </package>
    <package confirmed="no">
        <name>com.sun.hk2.component</name>
        <class confirmed="no">
            <name>com.sun.hk2.component.ExistingSingletonInhabitant</name>
            <feature confirmed="no">
                <name>com.sun.hk2.component.ExistingSingletonInhabitant.ExistingSingletonInhabitant(java.lang.Class, java.lang.Object)</name>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASEmbedded$EmbeddedMain.createHabitat(com.sun.enterprise.module.ModulesRegistry, com.sun.enterprise.module.bootstrap.StartupContext)</inbound>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainStatic$1$1.createHabitat(com.sun.enterprise.module.ModulesRegistry, com.sun.enterprise.module.bootstrap.StartupContext)</inbound>
            </feature>
        </class>
        <class confirmed="no">
            <name>com.sun.hk2.component.InhabitantsParser</name>
            <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASEmbedded$EmbeddedMain.createHabitat(com.sun.enterprise.module.ModulesRegistry, com.sun.enterprise.module.bootstrap.StartupContext)</inbound>
            <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASEmbedded$EmbeddedMain.createInhabitantsParser(org.jvnet.hk2.component.Habitat)</inbound>
            <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainStatic$1$1.createHabitat(com.sun.enterprise.module.ModulesRegistry, com.sun.enterprise.module.bootstrap.StartupContext)</inbound>
            <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainStatic$1$1.createInhabitantsParser(org.jvnet.hk2.component.Habitat)</inbound>
        </class>
        <class confirmed="no">
            <name>com.sun.hk2.component.InhabitantsParserDecorator</name>
            <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASEmbedded$EmbeddedMain.createInhabitantsParser(org.jvnet.hk2.component.Habitat)</inbound>
            <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainStatic$1$1.createInhabitantsParser(org.jvnet.hk2.component.Habitat)</inbound>
            <feature confirmed="no">
                <name>com.sun.hk2.component.InhabitantsParserDecorator.decorate(com.sun.hk2.component.InhabitantsParser)</name>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASEmbedded$EmbeddedMain.createInhabitantsParser(org.jvnet.hk2.component.Habitat)</inbound>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainStatic$1$1.createInhabitantsParser(org.jvnet.hk2.component.Habitat)</inbound>
            </feature>
            <feature confirmed="no">
                <name>com.sun.hk2.component.InhabitantsParserDecorator.getName()</name>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASEmbedded$EmbeddedMain.createInhabitantsParser(org.jvnet.hk2.component.Habitat)</inbound>
            </feature>
        </class>
    </package>
    <package confirmed="no">
        <name>java.io</name>
        <class confirmed="no">
            <name>java.io.BufferedInputStream</name>
            <feature confirmed="no">
                <name>java.io.BufferedInputStream.BufferedInputStream(java.io.InputStream)</name>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainNonOSGi.loadCacheInformation(java.io.File)</inbound>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.Util.copyFile(java.io.File, java.io.File)</inbound>
            </feature>
        </class>
        <class confirmed="no">
            <name>java.io.BufferedReader</name>
            <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.GlassFishMain$Launcher.readCommand(java.io.BufferedReader)</inbound>
            <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.GlassFishMain$Launcher.startConsole()</inbound>
            <feature confirmed="no">
                <name>java.io.BufferedReader.BufferedReader(java.io.Reader)</name>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.GlassFishMain$Launcher.startConsole()</inbound>
            </feature>
            <feature confirmed="no">
                <name>java.io.BufferedReader.readLine()</name>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.GlassFishMain$Launcher.readCommand(java.io.BufferedReader)</inbound>
            </feature>
        </class>
        <class confirmed="no">
            <name>java.io.ByteArrayOutputStream</name>
            <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.Rejar.processDirectory(java.util.jar.JarOutputStream, java.io.File, java.util.Set, java.util.Map)</inbound>
            <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.Rejar.rejar(java.io.File, java.io.File)</inbound>
            <feature confirmed="no">
                <name>java.io.ByteArrayOutputStream.ByteArrayOutputStream()</name>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.Rejar.processDirectory(java.util.jar.JarOutputStream, java.io.File, java.util.Set, java.util.Map)</inbound>
            </feature>
            <feature confirmed="no">
                <name>java.io.ByteArrayOutputStream.toByteArray()</name>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.Rejar.rejar(java.io.File, java.io.File)</inbound>
            </feature>
            <feature confirmed="no">
                <name>java.io.ByteArrayOutputStream.write(byte[])</name>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.Rejar.processDirectory(java.util.jar.JarOutputStream, java.io.File, java.util.Set, java.util.Map)</inbound>
            </feature>
        </class>
        <class confirmed="no">
            <name>java.io.File</name>
            <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASEmbedded.createCache(java.io.File)</inbound>
            <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMain.main(java.lang.String[])</inbound>
            <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainEquinox.addFrameworkJars(com.sun.enterprise.glassfish.bootstrap.ClassPathBuilder)</inbound>
            <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainEquinox.getSettingsFile()</inbound>
            <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainEquinox.pluginsDir</inbound>
            <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainEquinox.setFwDir()</inbound>
            <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainEquinox.setUpCache()</inbound>
            <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainEquinox.static {}</inbound>
            <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainFelix.addFrameworkJars(com.sun.enterprise.glassfish.bootstrap.ClassPathBuilder)</inbound>
            <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainFelix.getConfigFileName()</inbound>
            <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainFelix.launchOSGiFW()</inbound>
            <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainFelix.setFwDir()</inbound>
            <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainHelper$1.accept(java.io.File)</inbound>
            <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainHelper$ClassLoaderBuilder.ASMainHelper$ClassLoaderBuilder(java.util.Properties, java.lang.ClassLoader)</inbound>
            <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainHelper$ClassLoaderBuilder.addJDKToolsJar()</inbound>
            <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainHelper$ClassLoaderBuilder.addLauncherJar()</inbound>
            <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainHelper$ClassLoaderBuilder.findDerbyClient()</inbound>
            <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainHelper$ClassLoaderBuilder.glassfishDir</inbound>
            <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainHelper$EquinoxHelper.addFrameworkJars(com.sun.enterprise.glassfish.bootstrap.ClassPathBuilder)</inbound>
            <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainHelper$EquinoxHelper.getFrameworkConfigFile()</inbound>
            <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainHelper$EquinoxHelper.pluginsDir</inbound>
            <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainHelper$EquinoxHelper.setFwDir()</inbound>
            <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainHelper$EquinoxHelper.static {}</inbound>
            <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainHelper$FelixHelper.addFrameworkJars(com.sun.enterprise.glassfish.bootstrap.ClassPathBuilder)</inbound>
            <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainHelper$FelixHelper.getFrameworkConfigFile()</inbound>
            <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainHelper$FelixHelper.setFwDir()</inbound>
            <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainHelper$KnopflerfishHelper.addFrameworkJars(com.sun.enterprise.glassfish.bootstrap.ClassPathBuilder)</inbound>
            <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainHelper$KnopflerfishHelper.getFrameworkConfigFile()</inbound>
            <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainHelper$KnopflerfishHelper.setFwDir()</inbound>
            <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainHelper$PlatformHelper.fwDir</inbound>
            <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainHelper$PlatformHelper.getFrameworkConfigFile()</inbound>
            <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainHelper$PlatformHelper.glassfishDir</inbound>
            <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainHelper$PlatformHelper.init(java.util.Properties)</inbound>
            <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainHelper$PlatformHelper.readPlatformConfiguration()</inbound>
            <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainHelper$StaticHelper.getFrameworkConfigFile()</inbound>
            <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainHelper.absolutize(java.io.File)</inbound>
            <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainHelper.addPaths(java.io.File, java.lang.String[], java.util.List)</inbound>
            <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainHelper.buildStartupContext(java.lang.String, java.io.File, java.io.File, java.lang.String[])</inbound>
            <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainHelper.findBootstrapFile()</inbound>
            <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainHelper.findInstallRoot()</inbound>
            <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainHelper.findInstallRootURI(java.util.Properties)</inbound>
            <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainHelper.findInstanceRoot(java.io.File, java.lang.String[])</inbound>
            <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainHelper.findInstanceRoot(java.io.File, java.util.Properties)</inbound>
            <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainHelper.getAsEnvConf(java.io.File)</inbound>
            <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainHelper.getDefaultDomain(java.io.File)</inbound>
            <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainHelper.getDefaultDomainsDir(java.util.Properties)</inbound>
            <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainHelper.getDomainRoot(java.util.Properties, java.util.Properties)</inbound>
            <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainHelper.getInstanceRoot(java.util.Properties, java.util.Properties)</inbound>
            <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainHelper.parseAsEnv(java.io.File)</inbound>
            <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainHelper.verifyAndSetDomainRoot(java.io.File)</inbound>
            <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainHelper.verifyDomainRoot(java.io.File)</inbound>
            <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainKnopflerFish.addFrameworkJars(com.sun.enterprise.glassfish.bootstrap.ClassPathBuilder)</inbound>
            <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainKnopflerFish.launchOSGiFW()</inbound>
            <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainKnopflerFish.setFwDir()</inbound>
            <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainNonOSGi.createCache(java.io.File)</inbound>
            <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainNonOSGi.flushAndCreate(java.io.File, long)</inbound>
            <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainNonOSGi.isCacheOutdated(long, java.io.File)</inbound>
            <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainNonOSGi.loadCacheInformation(java.io.File)</inbound>
            <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainNonOSGi.saveCacheInformation(java.io.File, java.lang.String, long)</inbound>
            <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainOSGi.addJDKToolsJar(com.sun.enterprise.glassfish.bootstrap.ClassPathBuilder)</inbound>
            <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainOSGi.configureEnvironment()</inbound>
            <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainOSGi.configureProvisioningBundle()</inbound>
            <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainOSGi.domainDir</inbound>
            <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainOSGi.findDerbyClient(com.sun.enterprise.glassfish.bootstrap.ClassPathBuilder)</inbound>
            <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainOSGi.fwDir</inbound>
            <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainOSGi.getCacheDir()</inbound>
            <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainOSGi.glassfishDir</inbound>
            <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainOSGi.setupLauncherClassLoader()</inbound>
            <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainOSGi.start(java.util.Properties)</inbound>
            <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainStatic.configureEnvironment()</inbound>
            <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainStatic.createCache(java.io.File)</inbound>
            <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainStatic.createClassLoader(java.io.File)</inbound>
            <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainStatic.createTmpClassLoader(java.lang.ClassLoader, java.io.File)</inbound>
            <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainStatic.domainDir</inbound>
            <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainStatic.findDerbyClient(java.util.List)</inbound>
            <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainStatic.getMaskingClassLoader(java.lang.ClassLoader, java.io.File, java.util.logging.Logger)</inbound>
            <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainStatic.getMaskingClassLoader(java.lang.ClassLoader, java.io.File, java.util.logging.Logger, boolean)</inbound>
            <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainStatic.glassfishDir</inbound>
            <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainStatic.insertURLs(java.io.File, java.util.Set, java.util.List)</inbound>
            <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainStatic.out</inbound>
            <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainStatic.processFile(java.io.File, java.util.Set, java.util.List)</inbound>
            <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainStatic.start(java.util.Properties)</inbound>
            <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ClassPathBuilder$1.accept(java.io.File)</inbound>
            <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ClassPathBuilder.addClassFolder(java.io.File)</inbound>
            <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ClassPathBuilder.addGlob(java.io.File, java.lang.String[])</inbound>
            <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ClassPathBuilder.addJar(java.io.File)</inbound>
            <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ClassPathBuilder.addJarFolder(java.io.File, java.lang.String[])</inbound>
            <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.GFModuleDefinition.GFModuleDefinition(java.io.File)</inbound>
            <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.GFRepository.GFRepository(java.lang.String, java.io.File)</inbound>
            <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.GFRepository.loadJar(java.io.File)</inbound>
            <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.GlassFishActivator.setEnv(java.util.Properties)</inbound>
            <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.GlassFishMain$Launcher.startConsole()</inbound>
            <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.GlassFishMain.main(java.lang.String[])</inbound>
            <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.Rejar$1.accept(java.io.File)</inbound>
            <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.Rejar$2.accept(java.io.File)</inbound>
            <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.Rejar.processDirectory(java.util.jar.JarOutputStream, java.io.File, java.util.Set, java.util.Map)</inbound>
            <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.Rejar.rejar(java.io.File, java.io.File)</inbound>
            <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.StartupContextUtil.absolutize(java.io.File)</inbound>
            <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.StartupContextUtil.getInstallRoot(com.sun.enterprise.module.bootstrap.StartupContext)</inbound>
            <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.StartupContextUtil.getInstallRoot(java.util.Properties)</inbound>
            <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.StartupContextUtil.getInstanceRoot(com.sun.enterprise.module.bootstrap.StartupContext)</inbound>
            <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.StartupContextUtil.getInstanceRoot(java.util.Properties)</inbound>
            <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.Util.copyFile(java.io.File, java.io.File)</inbound>
            <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.Util.deleteRecursive(java.io.File)</inbound>
            <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.Util.getJDKToolsJar()</inbound>
            <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.Util.getLastModified(java.io.File, long)</inbound>
            <inbound type="feature" confirmed="yes">org.glassfish.experimentalgfapi.Deployer.deploy(java.io.File, java.util.Map)</inbound>
            <feature confirmed="no">
                <name>java.io.File.File(java.io.File, java.lang.String)</name>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainEquinox.getSettingsFile()</inbound>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainEquinox.setFwDir()</inbound>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainEquinox.setUpCache()</inbound>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainFelix.addFrameworkJars(com.sun.enterprise.glassfish.bootstrap.ClassPathBuilder)</inbound>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainFelix.getConfigFileName()</inbound>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainFelix.launchOSGiFW()</inbound>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainFelix.setFwDir()</inbound>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainHelper$ClassLoaderBuilder.addLauncherJar()</inbound>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainHelper$ClassLoaderBuilder.findDerbyClient()</inbound>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainHelper$EquinoxHelper.getFrameworkConfigFile()</inbound>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainHelper$EquinoxHelper.setFwDir()</inbound>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainHelper$FelixHelper.addFrameworkJars(com.sun.enterprise.glassfish.bootstrap.ClassPathBuilder)</inbound>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainHelper$FelixHelper.getFrameworkConfigFile()</inbound>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainHelper$FelixHelper.setFwDir()</inbound>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainHelper$KnopflerfishHelper.addFrameworkJars(com.sun.enterprise.glassfish.bootstrap.ClassPathBuilder)</inbound>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainHelper$KnopflerfishHelper.getFrameworkConfigFile()</inbound>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainHelper$KnopflerfishHelper.setFwDir()</inbound>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainHelper.getAsEnvConf(java.io.File)</inbound>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainHelper.getDomainRoot(java.util.Properties, java.util.Properties)</inbound>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainHelper.parseAsEnv(java.io.File)</inbound>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainHelper.verifyDomainRoot(java.io.File)</inbound>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainKnopflerFish.addFrameworkJars(com.sun.enterprise.glassfish.bootstrap.ClassPathBuilder)</inbound>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainKnopflerFish.launchOSGiFW()</inbound>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainKnopflerFish.setFwDir()</inbound>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainNonOSGi.loadCacheInformation(java.io.File)</inbound>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainNonOSGi.saveCacheInformation(java.io.File, java.lang.String, long)</inbound>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainOSGi.configureProvisioningBundle()</inbound>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainOSGi.findDerbyClient(com.sun.enterprise.glassfish.bootstrap.ClassPathBuilder)</inbound>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainOSGi.getCacheDir()</inbound>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainOSGi.setupLauncherClassLoader()</inbound>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainStatic.configureEnvironment()</inbound>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainStatic.createCache(java.io.File)</inbound>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainStatic.findDerbyClient(java.util.List)</inbound>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainStatic.getMaskingClassLoader(java.lang.ClassLoader, java.io.File, java.util.logging.Logger, boolean)</inbound>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainStatic.start(java.util.Properties)</inbound>
            </feature>
            <feature confirmed="no">
                <name>java.io.File.File(java.lang.String)</name>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainEquinox.setFwDir()</inbound>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainFelix.setFwDir()</inbound>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainHelper$ClassLoaderBuilder.ASMainHelper$ClassLoaderBuilder(java.util.Properties, java.lang.ClassLoader)</inbound>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainHelper$ClassLoaderBuilder.findDerbyClient()</inbound>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainHelper$EquinoxHelper.setFwDir()</inbound>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainHelper$FelixHelper.setFwDir()</inbound>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainHelper$KnopflerfishHelper.setFwDir()</inbound>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainHelper.getDefaultDomainsDir(java.util.Properties)</inbound>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainHelper.getDomainRoot(java.util.Properties, java.util.Properties)</inbound>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainHelper.getInstanceRoot(java.util.Properties, java.util.Properties)</inbound>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainHelper.parseAsEnv(java.io.File)</inbound>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainKnopflerFish.setFwDir()</inbound>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainOSGi.findDerbyClient(com.sun.enterprise.glassfish.bootstrap.ClassPathBuilder)</inbound>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainStatic.findDerbyClient(java.util.List)</inbound>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.GlassFishActivator.setEnv(java.util.Properties)</inbound>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.GlassFishMain$Launcher.startConsole()</inbound>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.StartupContextUtil.getInstallRoot(java.util.Properties)</inbound>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.StartupContextUtil.getInstanceRoot(java.util.Properties)</inbound>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.Util.getJDKToolsJar()</inbound>
            </feature>
            <feature confirmed="no">
                <name>java.io.File.File(java.lang.String, java.lang.String)</name>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainHelper$ClassLoaderBuilder.findDerbyClient()</inbound>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainOSGi.findDerbyClient(com.sun.enterprise.glassfish.bootstrap.ClassPathBuilder)</inbound>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainStatic.findDerbyClient(java.util.List)</inbound>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.Util.getJDKToolsJar()</inbound>
            </feature>
            <feature confirmed="no">
                <name>java.io.File.File(java.net.URI)</name>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainHelper.findInstallRootURI(java.util.Properties)</inbound>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ExtensibleClassLoader.added(java.net.URI)</inbound>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.GlassFishMain.main(java.lang.String[])</inbound>
            </feature>
            <feature confirmed="no">
                <name>java.io.File.canWrite()</name>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainHelper.verifyDomainRoot(java.io.File)</inbound>
            </feature>
            <feature confirmed="no">
                <name>java.io.File.createNewFile()</name>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainNonOSGi.saveCacheInformation(java.io.File, java.lang.String, long)</inbound>
            </feature>
            <feature confirmed="no">
                <name>java.io.File.delete()</name>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainNonOSGi.saveCacheInformation(java.io.File, java.lang.String, long)</inbound>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.Util.deleteRecursive(java.io.File)</inbound>
            </feature>
            <feature confirmed="no">
                <name>java.io.File.exists()</name>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainEquinox.setFwDir()</inbound>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainEquinox.setUpCache()</inbound>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainFelix.getConfigFileName()</inbound>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainFelix.setFwDir()</inbound>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainHelper$ClassLoaderBuilder.addJDKToolsJar()</inbound>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainHelper$ClassLoaderBuilder.findDerbyClient()</inbound>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainHelper$EquinoxHelper.setFwDir()</inbound>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainHelper$FelixHelper.getFrameworkConfigFile()</inbound>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainHelper$FelixHelper.setFwDir()</inbound>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainHelper$KnopflerfishHelper.setFwDir()</inbound>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainHelper.parseAsEnv(java.io.File)</inbound>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainHelper.verifyDomainRoot(java.io.File)</inbound>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainKnopflerFish.setFwDir()</inbound>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainNonOSGi.flushAndCreate(java.io.File, long)</inbound>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainNonOSGi.loadCacheInformation(java.io.File)</inbound>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainOSGi.addJDKToolsJar(com.sun.enterprise.glassfish.bootstrap.ClassPathBuilder)</inbound>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainOSGi.findDerbyClient(com.sun.enterprise.glassfish.bootstrap.ClassPathBuilder)</inbound>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainStatic.findDerbyClient(java.util.List)</inbound>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainStatic.getMaskingClassLoader(java.lang.ClassLoader, java.io.File, java.util.logging.Logger, boolean)</inbound>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ClassPathBuilder.addJar(java.io.File)</inbound>
            </feature>
            <feature confirmed="no">
                <name>java.io.File.getAbsoluteFile()</name>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainHelper.absolutize(java.io.File)</inbound>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.StartupContextUtil.absolutize(java.io.File)</inbound>
            </feature>
            <feature confirmed="no">
                <name>java.io.File.getAbsolutePath()</name>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainEquinox.setFwDir()</inbound>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainEquinox.setUpCache()</inbound>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainFelix.setFwDir()</inbound>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainHelper$EquinoxHelper.setFwDir()</inbound>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainHelper$FelixHelper.setFwDir()</inbound>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainHelper$KnopflerfishHelper.setFwDir()</inbound>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainHelper.buildStartupContext(java.lang.String, java.io.File, java.io.File, java.lang.String[])</inbound>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainHelper.parseAsEnv(java.io.File)</inbound>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainKnopflerFish.launchOSGiFW()</inbound>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainKnopflerFish.setFwDir()</inbound>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainOSGi.configureEnvironment()</inbound>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainOSGi.configureProvisioningBundle()</inbound>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainStatic.configureEnvironment()</inbound>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainStatic.getMaskingClassLoader(java.lang.ClassLoader, java.io.File, java.util.logging.Logger, boolean)</inbound>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.GlassFishActivator.setEnv(java.util.Properties)</inbound>
            </feature>
            <feature confirmed="no">
                <name>java.io.File.getCanonicalFile()</name>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainHelper.absolutize(java.io.File)</inbound>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.StartupContextUtil.absolutize(java.io.File)</inbound>
            </feature>
            <feature confirmed="no">
                <name>java.io.File.getCanonicalPath()</name>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainEquinox.setUpCache()</inbound>
            </feature>
            <feature confirmed="no">
                <name>java.io.File.getName()</name>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainHelper.addPaths(java.io.File, java.lang.String[], java.util.List)</inbound>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainHelper.findInstallRootURI(java.util.Properties)</inbound>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainNonOSGi.loadCacheInformation(java.io.File)</inbound>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainNonOSGi.saveCacheInformation(java.io.File, java.lang.String, long)</inbound>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainStatic.insertURLs(java.io.File, java.util.Set, java.util.List)</inbound>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ClassPathBuilder$1.accept(java.io.File)</inbound>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ClassPathBuilder.addGlob(java.io.File, java.lang.String[])</inbound>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.Rejar$2.accept(java.io.File)</inbound>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.Rejar.processDirectory(java.util.jar.JarOutputStream, java.io.File, java.util.Set, java.util.Map)</inbound>
            </feature>
            <feature confirmed="no">
                <name>java.io.File.getParent()</name>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.Util.getJDKToolsJar()</inbound>
            </feature>
            <feature confirmed="no">
                <name>java.io.File.getParentFile()</name>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainHelper.findInstallRoot()</inbound>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainHelper.findInstallRootURI(java.util.Properties)</inbound>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainNonOSGi.loadCacheInformation(java.io.File)</inbound>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainNonOSGi.saveCacheInformation(java.io.File, java.lang.String, long)</inbound>
            </feature>
            <feature confirmed="no">
                <name>java.io.File.getPath()</name>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainHelper.verifyAndSetDomainRoot(java.io.File)</inbound>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ClassPathBuilder$1.accept(java.io.File)</inbound>
            </feature>
            <feature confirmed="no">
                <name>java.io.File.isAbsolute()</name>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainHelper.parseAsEnv(java.io.File)</inbound>
            </feature>
            <feature confirmed="no">
                <name>java.io.File.isDirectory()</name>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainHelper$1.accept(java.io.File)</inbound>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainHelper.getDefaultDomainsDir(java.util.Properties)</inbound>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainHelper.verifyDomainRoot(java.io.File)</inbound>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainNonOSGi.flushAndCreate(java.io.File, long)</inbound>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainStatic.insertURLs(java.io.File, java.util.Set, java.util.List)</inbound>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ClassPathBuilder.addJarFolder(java.io.File, java.lang.String[])</inbound>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ExtensibleClassLoader.added(java.net.URI)</inbound>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.Rejar$1.accept(java.io.File)</inbound>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.Util.getLastModified(java.io.File, long)</inbound>
            </feature>
            <feature confirmed="no">
                <name>java.io.File.isFile()</name>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainStatic.insertURLs(java.io.File, java.util.Set, java.util.List)</inbound>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.Util.deleteRecursive(java.io.File)</inbound>
            </feature>
            <feature confirmed="no">
                <name>java.io.File.lastModified()</name>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.Util.getLastModified(java.io.File, long)</inbound>
            </feature>
            <feature confirmed="no">
                <name>java.io.File.length()</name>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.Util.copyFile(java.io.File, java.io.File)</inbound>
            </feature>
            <feature confirmed="no">
                <name>java.io.File.listFiles()</name>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainHelper.addPaths(java.io.File, java.lang.String[], java.util.List)</inbound>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainStatic.insertURLs(java.io.File, java.util.Set, java.util.List)</inbound>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ClassPathBuilder.addGlob(java.io.File, java.lang.String[])</inbound>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.Util.deleteRecursive(java.io.File)</inbound>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.Util.getLastModified(java.io.File, long)</inbound>
            </feature>
            <feature confirmed="no">
                <name>java.io.File.listFiles(java.io.FileFilter)</name>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainHelper.getDefaultDomain(java.io.File)</inbound>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ClassPathBuilder.addJarFolder(java.io.File, java.lang.String[])</inbound>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.Rejar.processDirectory(java.util.jar.JarOutputStream, java.io.File, java.util.Set, java.util.Map)</inbound>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.Rejar.rejar(java.io.File, java.io.File)</inbound>
            </feature>
            <feature confirmed="no">
                <name>java.io.File.mkdirs()</name>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainEquinox.setUpCache()</inbound>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainStatic.createCache(java.io.File)</inbound>
            </feature>
            <feature confirmed="no">
                <name>java.io.File.separator</name>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.Util.getJDKToolsJar()</inbound>
            </feature>
            <feature confirmed="no">
                <name>java.io.File.toURI()</name>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainFelix.launchOSGiFW()</inbound>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainHelper.addPaths(java.io.File, java.lang.String[], java.util.List)</inbound>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainHelper.buildStartupContext(java.lang.String, java.io.File, java.io.File, java.lang.String[])</inbound>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainHelper.findInstallRootURI(java.util.Properties)</inbound>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainKnopflerFish.launchOSGiFW()</inbound>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainNonOSGi.flushAndCreate(java.io.File, long)</inbound>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainNonOSGi.isCacheOutdated(long, java.io.File)</inbound>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainNonOSGi.loadCacheInformation(java.io.File)</inbound>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainNonOSGi.saveCacheInformation(java.io.File, java.lang.String, long)</inbound>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainOSGi.configureEnvironment()</inbound>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainStatic.configureEnvironment()</inbound>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainStatic.createClassLoader(java.io.File)</inbound>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainStatic.findDerbyClient(java.util.List)</inbound>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainStatic.processFile(java.io.File, java.util.Set, java.util.List)</inbound>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ClassPathBuilder.addJar(java.io.File)</inbound>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.GlassFishActivator.setEnv(java.util.Properties)</inbound>
            </feature>
        </class>
        <class confirmed="no">
            <name>java.io.FileFilter</name>
            <inbound type="class" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainHelper$1</inbound>
            <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainHelper.getDefaultDomain(java.io.File)</inbound>
            <inbound type="class" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ClassPathBuilder$1</inbound>
            <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ClassPathBuilder.addJarFolder(java.io.File, java.lang.String[])</inbound>
            <inbound type="class" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.Rejar$1</inbound>
            <inbound type="class" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.Rejar$2</inbound>
            <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.Rejar.processDirectory(java.util.jar.JarOutputStream, java.io.File, java.util.Set, java.util.Map)</inbound>
            <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.Rejar.rejar(java.io.File, java.io.File)</inbound>
        </class>
        <class confirmed="no">
            <name>java.io.FileInputStream</name>
            <feature confirmed="no">
                <name>java.io.FileInputStream.FileInputStream(java.io.File)</name>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainHelper$PlatformHelper.readPlatformConfiguration()</inbound>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainNonOSGi.loadCacheInformation(java.io.File)</inbound>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.Util.copyFile(java.io.File, java.io.File)</inbound>
            </feature>
        </class>
        <class confirmed="no">
            <name>java.io.FileNotFoundException</name>
            <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.GFRepository.GFRepository(java.lang.String, java.io.File)</inbound>
        </class>
        <class confirmed="no">
            <name>java.io.FileOutputStream</name>
            <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.Util.copy(java.io.InputStream, java.io.FileOutputStream, long)</inbound>
            <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.Util.copyFile(java.io.File, java.io.File)</inbound>
            <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.Util.copyWithoutClose(java.io.InputStream, java.io.FileOutputStream, long)</inbound>
            <feature confirmed="no">
                <name>java.io.FileOutputStream.FileOutputStream(java.io.File)</name>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainNonOSGi.saveCacheInformation(java.io.File, java.lang.String, long)</inbound>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.Rejar.rejar(java.io.File, java.io.File)</inbound>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.Util.copyFile(java.io.File, java.io.File)</inbound>
            </feature>
            <feature confirmed="no">
                <name>java.io.FileOutputStream.close()</name>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.Util.copy(java.io.InputStream, java.io.FileOutputStream, long)</inbound>
            </feature>
            <feature confirmed="no">
                <name>java.io.FileOutputStream.getChannel()</name>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.Util.copyWithoutClose(java.io.InputStream, java.io.FileOutputStream, long)</inbound>
            </feature>
        </class>
        <class confirmed="no">
            <name>java.io.FileReader</name>
            <feature confirmed="no">
                <name>java.io.FileReader.FileReader(java.io.File)</name>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainHelper.parseAsEnv(java.io.File)</inbound>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainStatic.getMaskingClassLoader(java.lang.ClassLoader, java.io.File, java.util.logging.Logger, boolean)</inbound>
            </feature>
            <feature confirmed="no">
                <name>java.io.FileReader.close()</name>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainStatic.getMaskingClassLoader(java.lang.ClassLoader, java.io.File, java.util.logging.Logger, boolean)</inbound>
            </feature>
        </class>
        <class confirmed="no">
            <name>java.io.IOException</name>
            <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASEmbedded.createCache(java.io.File)</inbound>
            <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainEquinox.addFrameworkJars(com.sun.enterprise.glassfish.bootstrap.ClassPathBuilder)</inbound>
            <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainEquinox.setUpCache()</inbound>
            <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainFelix.addFrameworkJars(com.sun.enterprise.glassfish.bootstrap.ClassPathBuilder)</inbound>
            <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainHelper$ClassLoaderBuilder.addFrameworkJars()</inbound>
            <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainHelper$ClassLoaderBuilder.addJDKToolsJar()</inbound>
            <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainHelper$ClassLoaderBuilder.addLauncherJar()</inbound>
            <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainHelper$ClassLoaderBuilder.findDerbyClient()</inbound>
            <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainHelper$EquinoxHelper.addFrameworkJars(com.sun.enterprise.glassfish.bootstrap.ClassPathBuilder)</inbound>
            <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainHelper$FelixHelper.addFrameworkJars(com.sun.enterprise.glassfish.bootstrap.ClassPathBuilder)</inbound>
            <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainHelper$KnopflerfishHelper.addFrameworkJars(com.sun.enterprise.glassfish.bootstrap.ClassPathBuilder)</inbound>
            <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainHelper$PlatformHelper.addFrameworkJars(com.sun.enterprise.glassfish.bootstrap.ClassPathBuilder)</inbound>
            <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainHelper$PlatformHelper.readPlatformConfiguration()</inbound>
            <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainHelper$StaticHelper.addFrameworkJars(com.sun.enterprise.glassfish.bootstrap.ClassPathBuilder)</inbound>
            <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainHelper.createLauncherCL(java.util.Properties, java.lang.ClassLoader)</inbound>
            <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainHelper.findBootstrapFile()</inbound>
            <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainHelper.mergePlatformConfiguration(java.util.Properties)</inbound>
            <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainHelper.parseAsEnv(java.io.File)</inbound>
            <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainKnopflerFish.addFrameworkJars(com.sun.enterprise.glassfish.bootstrap.ClassPathBuilder)</inbound>
            <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainNonOSGi.createCache(java.io.File)</inbound>
            <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainNonOSGi.flushAndCreate(java.io.File, long)</inbound>
            <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainNonOSGi.loadCacheInformation(java.io.File)</inbound>
            <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainNonOSGi.saveCacheInformation(java.io.File, java.lang.String, long)</inbound>
            <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainOSGi.addFrameworkJars(com.sun.enterprise.glassfish.bootstrap.ClassPathBuilder)</inbound>
            <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainOSGi.addJDKToolsJar(com.sun.enterprise.glassfish.bootstrap.ClassPathBuilder)</inbound>
            <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainOSGi.configureEnvironment()</inbound>
            <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainOSGi.findDerbyClient(com.sun.enterprise.glassfish.bootstrap.ClassPathBuilder)</inbound>
            <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainOSGi.setupLauncherClassLoader()</inbound>
            <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainStatic.createCache(java.io.File)</inbound>
            <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainStatic.findDerbyClient(java.util.List)</inbound>
            <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainStatic.getAlreadyLoadedModules()</inbound>
            <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainStatic.getMaskingClassLoader(java.lang.ClassLoader, java.io.File, java.util.logging.Logger, boolean)</inbound>
            <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainStatic.processFile(java.io.File, java.util.Set, java.util.List)</inbound>
            <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ClassPathBuilder.addClassFolder(java.io.File)</inbound>
            <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ClassPathBuilder.addGlob(java.io.File, java.lang.String[])</inbound>
            <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ClassPathBuilder.addJar(java.io.File)</inbound>
            <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ClassPathBuilder.addJarFolder(java.io.File, java.lang.String[])</inbound>
            <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.GFModuleDefinition.GFModuleDefinition(java.io.File)</inbound>
            <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.GFRepository.loadJar(java.io.File)</inbound>
            <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.GlassFishMain$Launcher.readCommand(java.io.BufferedReader)</inbound>
            <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.GlassFishMain$Launcher.startConsole()</inbound>
            <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.MaskingClassLoader.getResources(java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.Rejar.copy(byte[], java.lang.String, java.util.jar.JarOutputStream)</inbound>
            <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.Rejar.copy(java.util.jar.JarFile, java.util.jar.JarEntry, java.io.OutputStream)</inbound>
            <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.Rejar.copy(java.util.jar.JarFile, java.util.jar.JarEntry, java.nio.channels.WritableByteChannel)</inbound>
            <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.Rejar.copy(java.util.jar.JarFile, java.util.jar.JarEntry, java.util.jar.JarOutputStream)</inbound>
            <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.Rejar.getManifest()</inbound>
            <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.Rejar.processDirectory(java.util.jar.JarOutputStream, java.io.File, java.util.Set, java.util.Map)</inbound>
            <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.Rejar.rejar(java.io.File, java.io.File)</inbound>
            <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.Util.copy(java.io.InputStream, java.io.FileOutputStream, long)</inbound>
            <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.Util.copyFile(java.io.File, java.io.File)</inbound>
            <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.Util.copyWithoutClose(java.io.InputStream, java.io.FileOutputStream, long)</inbound>
            <feature confirmed="no">
                <name>java.io.IOException.IOException(java.lang.String)</name>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainNonOSGi.flushAndCreate(java.io.File, long)</inbound>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ClassPathBuilder.addJar(java.io.File)</inbound>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ClassPathBuilder.addJarFolder(java.io.File, java.lang.String[])</inbound>
            </feature>
        </class>
        <class confirmed="no">
            <name>java.io.InputStream</name>
            <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainHelper$PlatformHelper.readPlatformConfiguration()</inbound>
            <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainNonOSGi.loadCacheInformation(java.io.File)</inbound>
            <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainStatic.getAlreadyLoadedModules()</inbound>
            <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.AutoProcessor.processAutoProperties(java.util.Map, org.osgi.framework.BundleContext)</inbound>
            <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.GlassFishMain$Launcher.startConsole()</inbound>
            <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.Rejar.copy(java.util.jar.JarFile, java.util.jar.JarEntry, java.nio.channels.WritableByteChannel)</inbound>
            <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.Util.copy(java.io.InputStream, java.io.FileOutputStream, long)</inbound>
            <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.Util.copyFile(java.io.File, java.io.File)</inbound>
            <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.Util.copyWithoutClose(java.io.InputStream, java.io.FileOutputStream, long)</inbound>
            <feature confirmed="no">
                <name>java.io.InputStream.close()</name>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainHelper$PlatformHelper.readPlatformConfiguration()</inbound>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainNonOSGi.loadCacheInformation(java.io.File)</inbound>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainStatic.getAlreadyLoadedModules()</inbound>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.Rejar.copy(java.util.jar.JarFile, java.util.jar.JarEntry, java.nio.channels.WritableByteChannel)</inbound>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.Util.copy(java.io.InputStream, java.io.FileOutputStream, long)</inbound>
            </feature>
        </class>
        <class confirmed="no">
            <name>java.io.InputStreamReader</name>
            <feature confirmed="no">
                <name>java.io.InputStreamReader.InputStreamReader(java.io.InputStream)</name>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.GlassFishMain$Launcher.startConsole()</inbound>
            </feature>
        </class>
        <class confirmed="no">
            <name>java.io.LineNumberReader</name>
            <feature confirmed="no">
                <name>java.io.LineNumberReader.LineNumberReader(java.io.Reader)</name>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainHelper.parseAsEnv(java.io.File)</inbound>
            </feature>
            <feature confirmed="no">
                <name>java.io.LineNumberReader.close()</name>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainHelper.parseAsEnv(java.io.File)</inbound>
            </feature>
            <feature confirmed="no">
                <name>java.io.LineNumberReader.readLine()</name>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainHelper.parseAsEnv(java.io.File)</inbound>
            </feature>
        </class>
        <class confirmed="no">
            <name>java.io.ObjectOutputStream</name>
            <feature confirmed="no">
                <name>java.io.ObjectOutputStream.ObjectOutputStream(java.io.OutputStream)</name>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainNonOSGi.saveCacheInformation(java.io.File, java.lang.String, long)</inbound>
            </feature>
            <feature confirmed="no">
                <name>java.io.ObjectOutputStream.close()</name>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainNonOSGi.saveCacheInformation(java.io.File, java.lang.String, long)</inbound>
            </feature>
        </class>
        <class confirmed="no">
            <name>java.io.OutputStream</name>
            <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainNonOSGi.saveCacheInformation(java.io.File, java.lang.String, long)</inbound>
            <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.Rejar.copy(java.util.jar.JarFile, java.util.jar.JarEntry, java.io.OutputStream)</inbound>
            <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.Rejar.copy(java.util.jar.JarFile, java.util.jar.JarEntry, java.util.jar.JarOutputStream)</inbound>
            <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.Rejar.processDirectory(java.util.jar.JarOutputStream, java.io.File, java.util.Set, java.util.Map)</inbound>
            <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.Rejar.rejar(java.io.File, java.io.File)</inbound>
        </class>
        <class confirmed="no">
            <name>java.io.PrintStream</name>
            <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.AutoProcessor.processAutoProperties(java.util.Map, org.osgi.framework.BundleContext)</inbound>
            <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.GlassFishActivator$1.newGlassFish(java.util.Properties)</inbound>
            <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.GlassFishActivator.startBundle(java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.GlassFishActivator.stopBundle(java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.GlassFishMain$Launcher$1.run()</inbound>
            <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.GlassFishMain$Launcher.prompt()</inbound>
            <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.GlassFishMain$Launcher.startConsole()</inbound>
            <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.GlassFishMain.main(java.lang.String[])</inbound>
            <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.OSGiGlassFishRuntimeBuilder.debug(java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ProxyModule.dumpState(java.io.PrintStream)</inbound>
            <feature confirmed="no">
                <name>java.io.PrintStream.flush()</name>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.GlassFishMain$Launcher.prompt()</inbound>
            </feature>
            <feature confirmed="no">
                <name>java.io.PrintStream.print(java.lang.String)</name>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.GlassFishMain$Launcher.prompt()</inbound>
            </feature>
            <feature confirmed="no">
                <name>java.io.PrintStream.println(java.lang.String)</name>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.AutoProcessor.processAutoProperties(java.util.Map, org.osgi.framework.BundleContext)</inbound>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.GlassFishActivator$1.newGlassFish(java.util.Properties)</inbound>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.GlassFishActivator.startBundle(java.lang.String)</inbound>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.GlassFishActivator.stopBundle(java.lang.String)</inbound>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.GlassFishMain$Launcher$1.run()</inbound>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.GlassFishMain$Launcher.startConsole()</inbound>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.GlassFishMain.main(java.lang.String[])</inbound>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.OSGiGlassFishRuntimeBuilder.debug(java.lang.String)</inbound>
            </feature>
        </class>
        <class confirmed="no">
            <name>java.io.Reader</name>
            <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainHelper.parseAsEnv(java.io.File)</inbound>
            <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainStatic.getMaskingClassLoader(java.lang.ClassLoader, java.io.File, java.util.logging.Logger, boolean)</inbound>
            <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.GlassFishMain$Launcher.startConsole()</inbound>
        </class>
        <class confirmed="no">
            <name>java.io.StringWriter</name>
            <feature confirmed="no">
                <name>java.io.StringWriter.StringWriter()</name>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainOSGi.configureEnvironment()</inbound>
            </feature>
        </class>
        <class confirmed="no">
            <name>java.io.Writer</name>
            <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainOSGi.configureEnvironment()</inbound>
        </class>
    </package>
    <package confirmed="no">
        <name>java.lang</name>
        <class confirmed="no">
            <name>java.lang.Boolean</name>
            <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.GlassFishMain$Launcher.launch(java.util.Properties)</inbound>
            <feature confirmed="no">
                <name>java.lang.Boolean.booleanValue()</name>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.GlassFishMain$Launcher.launch(java.util.Properties)</inbound>
            </feature>
            <feature confirmed="no">
                <name>java.lang.Boolean.valueOf(java.lang.String)</name>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.GlassFishMain$Launcher.launch(java.util.Properties)</inbound>
            </feature>
        </class>
        <class confirmed="no">
            <name>java.lang.CharSequence</name>
            <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainHelper.parseAsEnv(java.io.File)</inbound>
            <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainStatic.getMaskingClassLoader(java.lang.ClassLoader, java.util.Properties, boolean)</inbound>
            <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ClassPathBuilder.addGlob(java.io.File, java.lang.String[])</inbound>
            <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.MaskingClassLoader.resourceToDotted(java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.Util.whichJar(java.lang.Class)</inbound>
        </class>
        <class confirmed="no">
            <name>java.lang.Class</name>
            <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASEmbedded$EmbeddedMain.createHabitat(com.sun.enterprise.module.ModulesRegistry, com.sun.enterprise.module.bootstrap.StartupContext)</inbound>
            <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASEmbedded$EmbeddedMain.createInhabitantsParser(org.jvnet.hk2.component.Habitat)</inbound>
            <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASEmbedded.getStartedService(java.lang.Class)</inbound>
            <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASEmbedded.start(java.util.Properties)</inbound>
            <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainEquinox.launchOSGiFW()</inbound>
            <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainFelix.launchOSGiFW()</inbound>
            <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainHelper.findBootstrapFile()</inbound>
            <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainHelper.findInstallRootURI(java.util.Properties)</inbound>
            <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainHelper.getMain(java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainKnopflerFish.launchOSGiFW()</inbound>
            <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainStatic$1$1.createHabitat(com.sun.enterprise.module.ModulesRegistry, com.sun.enterprise.module.bootstrap.StartupContext)</inbound>
            <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainStatic$1$1.createInhabitantsParser(org.jvnet.hk2.component.Habitat)</inbound>
            <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainStatic.createClassLoader(java.io.File)</inbound>
            <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainStatic.getAlreadyLoadedModules()</inbound>
            <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainStatic.getStartedService(java.lang.Class)</inbound>
            <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainStatic.start(java.util.Properties)</inbound>
            <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.Constants$Platform.valueOf(java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.GlassFishActivator$1$1.lookupService(java.lang.Class, java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.GlassFishMain$Launcher.launch(java.util.Properties)</inbound>
            <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.GlassFishMain$Launcher.startConsole()</inbound>
            <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.GlassFishMain.main(java.lang.String[])</inbound>
            <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.MaskingClassLoader.loadClass(java.lang.String, boolean)</inbound>
            <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.OSGiGlassFishRuntimeBuilder.isOSGiEnv()</inbound>
            <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.OSGiGlassFishRuntimeBuilder.launchOSGiFrameWork()</inbound>
            <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ProxyModule.getProvidersClass(java.lang.Class)</inbound>
            <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ProxyModule.hasProvider(java.lang.Class)</inbound>
            <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.Util.whichJar(java.lang.Class)</inbound>
            <inbound type="feature" confirmed="yes">org.glassfish.experimentalgfapi.Constants$Platform.valueOf(java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">org.glassfish.experimentalgfapi.GlassFish$Status.valueOf(java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">org.glassfish.experimentalgfapi.GlassFish.lookupService(java.lang.Class, java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">org.glassfish.experimentalgfapi.GlassFishRuntime.getRuntimeBuilder(org.glassfish.experimentalgfapi.Constants$Platform, java.lang.ClassLoader)</inbound>
            <feature confirmed="no">
                <name>java.lang.Class.cast(java.lang.Object)</name>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.GlassFishActivator$1.newGlassFish(java.util.Properties)</inbound>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.OSGiGlassFishRuntimeBuilder.getRuntime()</inbound>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.Util.whichJar(java.lang.Class)</inbound>
            </feature>
            <feature confirmed="no">
                <name>java.lang.Class.getClassLoader()</name>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASEmbedded$EmbeddedMain.createInhabitantsParser(org.jvnet.hk2.component.Habitat)</inbound>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASEmbedded.start(java.util.Properties)</inbound>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainHelper.getMain(java.lang.String)</inbound>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainStatic.createClassLoader(java.io.File)</inbound>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainStatic.getAlreadyLoadedModules()</inbound>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainStatic.start(java.util.Properties)</inbound>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.GlassFishMain$Launcher.launch(java.util.Properties)</inbound>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.OSGiGlassFishRuntimeBuilder.isOSGiEnv()</inbound>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.OSGiGlassFishRuntimeBuilder.launchOSGiFrameWork()</inbound>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.Util.whichJar(java.lang.Class)</inbound>
                <inbound type="feature" confirmed="yes">org.glassfish.experimentalgfapi.GlassFishRuntime.bootstrap(java.util.Properties, java.lang.ClassLoader)</inbound>
            </feature>
            <feature confirmed="no">
                <name>java.lang.Class.getMethod(java.lang.String, java.lang.Class[])</name>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainEquinox.launchOSGiFW()</inbound>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainFelix.launchOSGiFW()</inbound>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainKnopflerFish.launchOSGiFW()</inbound>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.GlassFishMain.main(java.lang.String[])</inbound>
            </feature>
            <feature confirmed="no">
                <name>java.lang.Class.getName()</name>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainHelper.addRawStartupInfo(java.lang.String[], java.util.Properties)</inbound>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.AutoProcessor.processAutoProperties(java.util.Map, org.osgi.framework.BundleContext)</inbound>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ExtensibleClassLoader.static {}</inbound>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.GlassFishActivator$1.newGlassFish(java.util.Properties)</inbound>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.GlassFishActivator.registerGlassFishRuntime()</inbound>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.GlassFishActivator.startConfigAdmin()</inbound>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.GlassFishMain.main(java.lang.String[])</inbound>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.OSGiGlassFishRuntimeBuilder.getRuntime()</inbound>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.Util.whichJar(java.lang.Class)</inbound>
            </feature>
            <feature confirmed="no">
                <name>java.lang.Class.getPackage()</name>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainHelper.static {}</inbound>
            </feature>
            <feature confirmed="no">
                <name>java.lang.Class.newInstance()</name>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.GlassFishMain.main(java.lang.String[])</inbound>
            </feature>
        </class>
        <class confirmed="no">
            <name>java.lang.ClassLoader</name>
            <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASEmbedded$EmbeddedMain.createInhabitantsParser(org.jvnet.hk2.component.Habitat)</inbound>
            <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASEmbedded.start(java.util.Properties)</inbound>
            <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainEquinox.launchOSGiFW()</inbound>
            <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainFelix.launchOSGiFW()</inbound>
            <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainHelper$ClassLoaderBuilder.ASMainHelper$ClassLoaderBuilder(java.util.Properties, java.lang.ClassLoader)</inbound>
            <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainHelper$ClassLoaderBuilder.build()</inbound>
            <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainHelper.createLauncherCL(java.util.Properties, java.lang.ClassLoader)</inbound>
            <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainHelper.getMain(java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainKnopflerFish.launchOSGiFW()</inbound>
            <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainOSGi.launcherCL</inbound>
            <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainOSGi.setupLauncherClassLoader()</inbound>
            <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainStatic$1$1.createInhabitantsParser(org.jvnet.hk2.component.Habitat)</inbound>
            <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainStatic$1.ASMainStatic$1(com.sun.enterprise.glassfish.bootstrap.ASMainStatic, java.lang.ClassLoader, com.sun.enterprise.module.impl.ModulesRegistryImpl, com.sun.enterprise.module.bootstrap.StartupContext)</inbound>
            <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainStatic$1.val$cl</inbound>
            <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainStatic.createClassLoader(java.io.File)</inbound>
            <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainStatic.createTmpClassLoader(java.lang.ClassLoader, java.io.File)</inbound>
            <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainStatic.getAlreadyLoadedModules()</inbound>
            <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainStatic.getMaskingClassLoader(java.lang.ClassLoader, java.io.File, java.util.logging.Logger)</inbound>
            <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainStatic.getMaskingClassLoader(java.lang.ClassLoader, java.io.File, java.util.logging.Logger, boolean)</inbound>
            <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainStatic.getMaskingClassLoader(java.lang.ClassLoader, java.util.Properties)</inbound>
            <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainStatic.getMaskingClassLoader(java.lang.ClassLoader, java.util.Properties, boolean)</inbound>
            <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainStatic.start(java.util.Properties)</inbound>
            <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ClassPathBuilder.ClassPathBuilder(java.lang.ClassLoader)</inbound>
            <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ClassPathBuilder.create()</inbound>
            <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ClassPathBuilder.createExtensible(java.util.List)</inbound>
            <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ClassPathBuilder.parent</inbound>
            <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ExtensibleClassLoader.ExtensibleClassLoader(java.net.URL[], java.lang.ClassLoader, java.util.List)</inbound>
            <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.GlassFishMain$Launcher.launch(java.util.Properties)</inbound>
            <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.GlassFishMain.main(java.lang.String[])</inbound>
            <inbound type="class" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.MaskingClassLoader</inbound>
            <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.MaskingClassLoader.MaskingClassLoader(java.lang.ClassLoader, java.util.Collection, java.util.Collection)</inbound>
            <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.MaskingClassLoader.MaskingClassLoader(java.lang.ClassLoader, java.util.Collection, java.util.Collection, boolean)</inbound>
            <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.OSGiGlassFishRuntimeBuilder.isOSGiEnv()</inbound>
            <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.OSGiGlassFishRuntimeBuilder.launchOSGiFrameWork()</inbound>
            <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ProxyModule.ProxyModule(com.sun.enterprise.module.ModulesRegistry, com.sun.enterprise.module.ModuleDefinition, java.lang.ClassLoader)</inbound>
            <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ProxyModule.classLoader</inbound>
            <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ProxyModule.getClassLoader()</inbound>
            <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.Util.whichJar(java.lang.Class)</inbound>
            <inbound type="feature" confirmed="yes">org.glassfish.experimentalgfapi.GlassFishRuntime.bootstrap(java.util.Properties, java.lang.ClassLoader)</inbound>
            <inbound type="feature" confirmed="yes">org.glassfish.experimentalgfapi.GlassFishRuntime.getRuntimeBuilder(org.glassfish.experimentalgfapi.Constants$Platform, java.lang.ClassLoader)</inbound>
            <feature confirmed="no">
                <name>java.lang.ClassLoader.ClassLoader(java.lang.ClassLoader)</name>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.MaskingClassLoader.MaskingClassLoader(java.lang.ClassLoader, java.util.Collection, java.util.Collection, boolean)</inbound>
            </feature>
            <feature confirmed="no">
                <name>java.lang.ClassLoader.getParent()</name>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainOSGi.setupLauncherClassLoader()</inbound>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.GlassFishMain.main(java.lang.String[])</inbound>
            </feature>
            <feature confirmed="no">
                <name>java.lang.ClassLoader.getResource(java.lang.String)</name>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.MaskingClassLoader.getResource(java.lang.String)</inbound>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.Util.whichJar(java.lang.Class)</inbound>
            </feature>
            <feature confirmed="no">
                <name>java.lang.ClassLoader.getResources(java.lang.String)</name>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainStatic.getAlreadyLoadedModules()</inbound>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.MaskingClassLoader.getResources(java.lang.String)</inbound>
            </feature>
            <feature confirmed="no">
                <name>java.lang.ClassLoader.getSystemClassLoader()</name>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainOSGi.setupLauncherClassLoader()</inbound>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.GlassFishMain.main(java.lang.String[])</inbound>
            </feature>
            <feature confirmed="no">
                <name>java.lang.ClassLoader.loadClass(java.lang.String)</name>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainEquinox.launchOSGiFW()</inbound>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainFelix.launchOSGiFW()</inbound>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainKnopflerFish.launchOSGiFW()</inbound>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.GlassFishMain.main(java.lang.String[])</inbound>
            </feature>
            <feature confirmed="no">
                <name>java.lang.ClassLoader.loadClass(java.lang.String, boolean)</name>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.MaskingClassLoader.loadClass(java.lang.String, boolean)</inbound>
            </feature>
        </class>
        <class confirmed="no">
            <name>java.lang.ClassNotFoundException</name>
            <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.MaskingClassLoader.loadClass(java.lang.String, boolean)</inbound>
            <feature confirmed="no">
                <name>java.lang.ClassNotFoundException.ClassNotFoundException(java.lang.String)</name>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.MaskingClassLoader.loadClass(java.lang.String, boolean)</inbound>
            </feature>
        </class>
        <class confirmed="no">
            <name>java.lang.Enum</name>
            <inbound type="class" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.Constants$Platform</inbound>
            <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.Constants$Platform.valueOf(java.lang.String)</inbound>
            <inbound type="class" confirmed="yes">org.glassfish.experimentalgfapi.Constants$Platform</inbound>
            <inbound type="feature" confirmed="yes">org.glassfish.experimentalgfapi.Constants$Platform.valueOf(java.lang.String)</inbound>
            <inbound type="class" confirmed="yes">org.glassfish.experimentalgfapi.GlassFish$Status</inbound>
            <inbound type="feature" confirmed="yes">org.glassfish.experimentalgfapi.GlassFish$Status.valueOf(java.lang.String)</inbound>
            <feature confirmed="no">
                <name>java.lang.Enum.Enum(java.lang.String, int)</name>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.Constants$Platform.Constants$Platform(java.lang.String, int)</inbound>
                <inbound type="feature" confirmed="yes">org.glassfish.experimentalgfapi.Constants$Platform.Constants$Platform(java.lang.String, int)</inbound>
                <inbound type="feature" confirmed="yes">org.glassfish.experimentalgfapi.GlassFish$Status.GlassFish$Status(java.lang.String, int)</inbound>
            </feature>
            <feature confirmed="no">
                <name>java.lang.Enum.valueOf(java.lang.Class, java.lang.String)</name>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.Constants$Platform.valueOf(java.lang.String)</inbound>
                <inbound type="feature" confirmed="yes">org.glassfish.experimentalgfapi.Constants$Platform.valueOf(java.lang.String)</inbound>
                <inbound type="feature" confirmed="yes">org.glassfish.experimentalgfapi.GlassFish$Status.valueOf(java.lang.String)</inbound>
            </feature>
        </class>
        <class confirmed="no">
            <name>java.lang.Error</name>
            <feature confirmed="no">
                <name>java.lang.Error.Error(java.lang.Throwable)</name>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainHelper$ClassLoaderBuilder.addJDKToolsJar()</inbound>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainHelper.createLauncherCL(java.util.Properties, java.lang.ClassLoader)</inbound>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainOSGi.addJDKToolsJar(com.sun.enterprise.glassfish.bootstrap.ClassPathBuilder)</inbound>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainOSGi.setupLauncherClassLoader()</inbound>
            </feature>
        </class>
        <class confirmed="no">
            <name>java.lang.Exception</name>
            <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASEmbedded.start(java.util.Properties)</inbound>
            <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMain.main(java.lang.String[])</inbound>
            <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainEquinox.launchOSGiFW()</inbound>
            <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainFelix.launchOSGiFW()</inbound>
            <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainHelper.absolutize(java.io.File)</inbound>
            <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainHelper.getMinorJdkVersion()</inbound>
            <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainKnopflerFish.launchOSGiFW()</inbound>
            <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainOSGi.configureEnvironment()</inbound>
            <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainOSGi.launchOSGiFW()</inbound>
            <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainOSGi.setupLauncherClassLoader()</inbound>
            <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainOSGi.start(java.util.Properties)</inbound>
            <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainStatic.createClassLoader(java.io.File)</inbound>
            <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainStatic.createTmpClassLoader(java.lang.ClassLoader, java.io.File)</inbound>
            <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainStatic.insertURLs(java.io.File, java.util.Set, java.util.List)</inbound>
            <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainStatic.start(java.util.Properties)</inbound>
            <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.AutoProcessor.processAutoProperties(java.util.Map, org.osgi.framework.BundleContext)</inbound>
            <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.GlassFishActivator$1$1.start()</inbound>
            <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.GlassFishActivator$1$1.stop()</inbound>
            <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.GlassFishActivator$1.newGlassFish(java.util.Properties)</inbound>
            <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.GlassFishActivator.start(org.osgi.framework.BundleContext)</inbound>
            <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.GlassFishActivator.stop(org.osgi.framework.BundleContext)</inbound>
            <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.GlassFishMain$Launcher$1.run()</inbound>
            <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.GlassFishMain$Launcher.launch(java.util.Properties)</inbound>
            <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.GlassFishMain$Launcher.startConsole()</inbound>
            <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.GlassFishMain.main(java.lang.String[])</inbound>
            <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.OSGiGlassFishRuntime.newGlassFish(java.util.Properties)</inbound>
            <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.OSGiGlassFishRuntimeBuilder.build(java.util.Properties)</inbound>
            <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.OSGiGlassFishRuntimeBuilder.destroy()</inbound>
            <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.OSGiGlassFishRuntimeBuilder.getRuntime()</inbound>
            <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.OSGiGlassFishRuntimeBuilder.launchOSGiFrameWork()</inbound>
            <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.StartupContextUtil.absolutize(java.io.File)</inbound>
            <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.Util.whichJar(java.lang.Class)</inbound>
            <inbound type="feature" confirmed="yes">org.glassfish.experimentalgfapi.GlassFishRuntime$RuntimeBuilder.build(java.util.Properties)</inbound>
            <inbound type="feature" confirmed="yes">org.glassfish.experimentalgfapi.GlassFishRuntime$RuntimeBuilder.destroy()</inbound>
            <inbound type="feature" confirmed="yes">org.glassfish.experimentalgfapi.GlassFishRuntime.bootstrap(java.util.Properties, java.lang.ClassLoader)</inbound>
            <inbound type="feature" confirmed="yes">org.glassfish.experimentalgfapi.GlassFishRuntime.newGlassFish(java.util.Properties)</inbound>
            <inbound type="feature" confirmed="yes">org.glassfish.experimentalgfapi.GlassFishRuntime.shutdown()</inbound>
            <feature confirmed="no">
                <name>java.lang.Exception.getCause()</name>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.AutoProcessor.processAutoProperties(java.util.Map, org.osgi.framework.BundleContext)</inbound>
            </feature>
            <feature confirmed="no">
                <name>java.lang.Exception.getMessage()</name>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMain.main(java.lang.String[])</inbound>
            </feature>
            <feature confirmed="no">
                <name>java.lang.Exception.printStackTrace()</name>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.AutoProcessor.processAutoProperties(java.util.Map, org.osgi.framework.BundleContext)</inbound>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.GlassFishMain$Launcher$1.run()</inbound>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.GlassFishMain$Launcher.startConsole()</inbound>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.Util.whichJar(java.lang.Class)</inbound>
            </feature>
        </class>
        <class confirmed="no">
            <name>java.lang.IllegalAccessException</name>
            <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainEquinox$1.run()</inbound>
            <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainFelix$1.run()</inbound>
            <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainKnopflerFish$1.run()</inbound>
        </class>
        <class confirmed="no">
            <name>java.lang.IllegalArgumentException</name>
            <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.Util.substVars(java.lang.String, java.lang.String, java.util.Map, java.util.Properties)</inbound>
            <feature confirmed="no">
                <name>java.lang.IllegalArgumentException.IllegalArgumentException(java.lang.String)</name>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.GlassFishActivator$1$1.lookupService(java.lang.Class, java.lang.String)</inbound>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.Util.substVars(java.lang.String, java.lang.String, java.util.Map, java.util.Properties)</inbound>
            </feature>
        </class>
        <class confirmed="no">
            <name>java.lang.IllegalStateException</name>
            <feature confirmed="no">
                <name>java.lang.IllegalStateException.IllegalStateException(java.lang.String)</name>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainHelper.findInstallRootURI(java.util.Properties)</inbound>
            </feature>
        </class>
        <class confirmed="no">
            <name>java.lang.Integer</name>
            <feature confirmed="no">
                <name>java.lang.Integer.parseInt(java.lang.String)</name>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainHelper.getMinorJdkVersion()</inbound>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.AutoProcessor.processAutoProperties(java.util.Map, org.osgi.framework.BundleContext)</inbound>
            </feature>
        </class>
        <class confirmed="no">
            <name>java.lang.InterruptedException</name>
            <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainStatic.start(java.util.Properties)</inbound>
            <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.GlassFishActivator.registerGlassFishRuntime()</inbound>
        </class>
        <class confirmed="no">
            <name>java.lang.Iterable</name>
            <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ProxyModule.getProvidersClass(java.lang.Class)</inbound>
            <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ProxyModule.getProvidersClass(java.lang.String)</inbound>
        </class>
        <class confirmed="no">
            <name>java.lang.Long</name>
            <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.Rejar.copy(java.util.jar.JarFile, java.util.jar.JarEntry, java.nio.channels.WritableByteChannel)</inbound>
            <feature confirmed="no">
                <name>java.lang.Long.Long(long)</name>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainHelper.buildStartupContext(java.lang.String, java.io.File, java.io.File, java.lang.String[])</inbound>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainNonOSGi.saveCacheInformation(java.io.File, java.lang.String, long)</inbound>
            </feature>
            <feature confirmed="no">
                <name>java.lang.Long.intValue()</name>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.Rejar.copy(java.util.jar.JarFile, java.util.jar.JarEntry, java.nio.channels.WritableByteChannel)</inbound>
            </feature>
            <feature confirmed="no">
                <name>java.lang.Long.parseLong(java.lang.String)</name>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainNonOSGi.loadCacheInformation(java.io.File)</inbound>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainNonOSGi.parse(java.util.Properties, java.lang.String)</inbound>
            </feature>
            <feature confirmed="no">
                <name>java.lang.Long.toString()</name>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainHelper.buildStartupContext(java.lang.String, java.io.File, java.io.File, java.lang.String[])</inbound>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainNonOSGi.saveCacheInformation(java.io.File, java.lang.String, long)</inbound>
            </feature>
            <feature confirmed="no">
                <name>java.lang.Long.valueOf(long)</name>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.Rejar.copy(java.util.jar.JarFile, java.util.jar.JarEntry, java.nio.channels.WritableByteChannel)</inbound>
            </feature>
        </class>
        <class confirmed="no">
            <name>java.lang.NoSuchFieldError</name>
            <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainHelper$2.static {}</inbound>
            <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.OSGiGlassFishRuntimeBuilder$1.static {}</inbound>
        </class>
        <class confirmed="no">
            <name>java.lang.NumberFormatException</name>
            <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainNonOSGi.loadCacheInformation(java.io.File)</inbound>
            <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainNonOSGi.parse(java.util.Properties, java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.AutoProcessor.processAutoProperties(java.util.Map, org.osgi.framework.BundleContext)</inbound>
        </class>
        <class confirmed="no">
            <name>java.lang.Object</name>
            <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASEmbedded$EmbeddedMain.createHabitat(com.sun.enterprise.module.ModulesRegistry, com.sun.enterprise.module.bootstrap.StartupContext)</inbound>
            <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASEmbedded$EmbeddedMain.createInhabitantsParser(org.jvnet.hk2.component.Habitat)</inbound>
            <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASEmbedded.getStartedService(java.lang.Class)</inbound>
            <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASEmbedded.start(java.util.Properties)</inbound>
            <inbound type="class" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMain</inbound>
            <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMain.main(java.lang.String[])</inbound>
            <inbound type="class" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainEquinox$1</inbound>
            <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainEquinox$1.run()</inbound>
            <inbound type="class" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainFelix$1</inbound>
            <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainFelix$1.run()</inbound>
            <inbound type="class" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainHelper</inbound>
            <inbound type="class" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainHelper$1</inbound>
            <inbound type="class" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainHelper$2</inbound>
            <inbound type="class" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainHelper$ClassLoaderBuilder</inbound>
            <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainHelper$ClassLoaderBuilder.addJDKToolsJar()</inbound>
            <inbound type="class" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainHelper$PlatformHelper</inbound>
            <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainHelper$PlatformHelper.getPlatformHelper(java.util.Properties)</inbound>
            <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainHelper.addPaths(java.io.File, java.lang.String[], java.util.List)</inbound>
            <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainHelper.addRawStartupInfo(java.lang.String[], java.util.Properties)</inbound>
            <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainHelper.buildStartupContext(java.lang.String, java.io.File, java.io.File, java.lang.String[])</inbound>
            <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainHelper.findBootstrapFile()</inbound>
            <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainHelper.findInstallRootURI(java.util.Properties)</inbound>
            <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainHelper.getDefaultDomain(java.io.File)</inbound>
            <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainHelper.getMain(java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainHelper.getMinorJdkVersion()</inbound>
            <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainHelper.parseAsEnv(java.io.File)</inbound>
            <inbound type="class" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainKnopflerFish$1</inbound>
            <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainKnopflerFish$1.run()</inbound>
            <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainNonOSGi.flushAndCreate(java.io.File, long)</inbound>
            <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainNonOSGi.isCacheOutdated(long, java.io.File)</inbound>
            <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainNonOSGi.loadCacheInformation(java.io.File)</inbound>
            <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainNonOSGi.saveCacheInformation(java.io.File, java.lang.String, long)</inbound>
            <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainOSGi.addJDKToolsJar(com.sun.enterprise.glassfish.bootstrap.ClassPathBuilder)</inbound>
            <inbound type="class" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainStatic$1</inbound>
            <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainStatic$1$1.createHabitat(com.sun.enterprise.module.ModulesRegistry, com.sun.enterprise.module.bootstrap.StartupContext)</inbound>
            <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainStatic$1$1.createInhabitantsParser(org.jvnet.hk2.component.Habitat)</inbound>
            <inbound type="class" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainStatic$ModuleInfo</inbound>
            <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainStatic$ModuleInfo.equals(java.lang.Object)</inbound>
            <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainStatic.createClassLoader(java.io.File)</inbound>
            <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainStatic.createTmpClassLoader(java.lang.ClassLoader, java.io.File)</inbound>
            <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainStatic.findDerbyClient(java.util.List)</inbound>
            <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainStatic.getAlreadyLoadedModules()</inbound>
            <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainStatic.getMaskingClassLoader(java.lang.ClassLoader, java.util.Properties, boolean)</inbound>
            <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainStatic.getStartedService(java.lang.Class)</inbound>
            <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainStatic.processFile(java.io.File, java.util.Set, java.util.List)</inbound>
            <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainStatic.start(java.util.Properties)</inbound>
            <inbound type="class" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.AutoProcessor</inbound>
            <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.AutoProcessor.nextLocation(java.util.StringTokenizer)</inbound>
            <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.AutoProcessor.processAutoProperties(java.util.Map, org.osgi.framework.BundleContext)</inbound>
            <inbound type="class" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ClassPathBuilder</inbound>
            <inbound type="class" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ClassPathBuilder$1</inbound>
            <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ClassPathBuilder$1.accept(java.io.File)</inbound>
            <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ClassPathBuilder.addJar(java.io.File)</inbound>
            <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ClassPathBuilder.addJarFolder(java.io.File, java.lang.String[])</inbound>
            <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ClassPathBuilder.create()</inbound>
            <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ClassPathBuilder.createExtensible(java.util.List)</inbound>
            <inbound type="class" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.Constants</inbound>
            <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.Constants$Platform.values()</inbound>
            <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ExtensibleClassLoader.ExtensibleClassLoader(java.net.URL[], java.lang.ClassLoader, java.util.List)</inbound>
            <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ExtensibleClassLoader.added(java.net.URI)</inbound>
            <inbound type="class" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.GlassFishActivator</inbound>
            <inbound type="class" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.GlassFishActivator$1$1</inbound>
            <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.GlassFishActivator$1$1.lookupService(java.lang.Class, java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.GlassFishActivator$1.newGlassFish(java.util.Properties)</inbound>
            <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.GlassFishActivator.dict2Properties(java.util.Dictionary)</inbound>
            <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.GlassFishActivator.findBundle(java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.GlassFishActivator.registerGlassFishRuntime()</inbound>
            <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.GlassFishActivator.setEnv(java.util.Properties)</inbound>
            <inbound type="class" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.GlassFishMain</inbound>
            <inbound type="class" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.GlassFishMain$Launcher</inbound>
            <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.GlassFishMain$Launcher$1.run()</inbound>
            <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.GlassFishMain$Launcher.startConsole()</inbound>
            <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.GlassFishMain.main(java.lang.String[])</inbound>
            <inbound type="class" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.MaskingClassLoader$1</inbound>
            <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.MaskingClassLoader$1.nextElement()</inbound>
            <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.MaskingClassLoader.MaskingClassLoader(java.lang.ClassLoader, java.util.Collection, java.util.Collection, boolean)</inbound>
            <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.MaskingClassLoader.isDottedNameLoadableByParent(java.lang.String)</inbound>
            <inbound type="class" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.OSGiGlassFishRuntimeBuilder</inbound>
            <inbound type="class" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.OSGiGlassFishRuntimeBuilder$1</inbound>
            <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.OSGiGlassFishRuntimeBuilder.getRuntime()</inbound>
            <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.OSGiGlassFishRuntimeBuilder.launchOSGiFrameWork()</inbound>
            <inbound type="class" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ProxyModule</inbound>
            <inbound type="class" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.Rejar</inbound>
            <inbound type="class" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.Rejar$1</inbound>
            <inbound type="class" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.Rejar$2</inbound>
            <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.Rejar.getManifest()</inbound>
            <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.Rejar.processDirectory(java.util.jar.JarOutputStream, java.io.File, java.util.Set, java.util.Map)</inbound>
            <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.Rejar.rejar(java.io.File, java.io.File)</inbound>
            <inbound type="class" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.StartupContextUtil</inbound>
            <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.StartupContextUtil.getOriginalArguments(com.sun.enterprise.module.bootstrap.StartupContext)</inbound>
            <inbound type="class" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.Util</inbound>
            <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.Util.substVars(java.lang.String, java.lang.String, java.util.Map, java.util.Properties)</inbound>
            <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.Util.substVars(java.util.Properties)</inbound>
            <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.Util.whichJar(java.lang.Class)</inbound>
            <inbound type="class" confirmed="yes">org.glassfish.experimentalgfapi.CommandRunner</inbound>
            <inbound type="class" confirmed="yes">org.glassfish.experimentalgfapi.Configurator</inbound>
            <inbound type="class" confirmed="yes">org.glassfish.experimentalgfapi.Constants</inbound>
            <inbound type="feature" confirmed="yes">org.glassfish.experimentalgfapi.Constants$Platform.values()</inbound>
            <inbound type="class" confirmed="yes">org.glassfish.experimentalgfapi.Deployer</inbound>
            <inbound type="class" confirmed="yes">org.glassfish.experimentalgfapi.GlassFish</inbound>
            <inbound type="feature" confirmed="yes">org.glassfish.experimentalgfapi.GlassFish$Status.values()</inbound>
            <inbound type="feature" confirmed="yes">org.glassfish.experimentalgfapi.GlassFish.lookupService(java.lang.Class, java.lang.String)</inbound>
            <inbound type="class" confirmed="yes">org.glassfish.experimentalgfapi.GlassFishRuntime</inbound>
            <inbound type="class" confirmed="yes">org.glassfish.experimentalgfapi.GlassFishRuntime$RuntimeBuilder</inbound>
            <inbound type="feature" confirmed="yes">org.glassfish.experimentalgfapi.GlassFishRuntime.getRuntimeBuilder(org.glassfish.experimentalgfapi.Constants$Platform, java.lang.ClassLoader)</inbound>
            <feature confirmed="no">
                <name>java.lang.Object.Object()</name>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMain.ASMain()</inbound>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainEquinox$1.ASMainEquinox$1(com.sun.enterprise.glassfish.bootstrap.ASMainEquinox, java.lang.reflect.Method, java.lang.String[])</inbound>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainFelix$1.ASMainFelix$1(com.sun.enterprise.glassfish.bootstrap.ASMainFelix, java.lang.reflect.Method, java.lang.String[])</inbound>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainHelper$1.ASMainHelper$1()</inbound>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainHelper$ClassLoaderBuilder.ASMainHelper$ClassLoaderBuilder(java.util.Properties, java.lang.ClassLoader)</inbound>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainHelper$PlatformHelper.ASMainHelper$PlatformHelper()</inbound>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainHelper.ASMainHelper()</inbound>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainKnopflerFish$1.ASMainKnopflerFish$1(com.sun.enterprise.glassfish.bootstrap.ASMainKnopflerFish, java.lang.reflect.Method, java.lang.String[])</inbound>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainStatic$1.ASMainStatic$1(com.sun.enterprise.glassfish.bootstrap.ASMainStatic, java.lang.ClassLoader, com.sun.enterprise.module.impl.ModulesRegistryImpl, com.sun.enterprise.module.bootstrap.StartupContext)</inbound>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainStatic$ModuleInfo.ASMainStatic$ModuleInfo(com.sun.enterprise.glassfish.bootstrap.ASMainStatic, java.lang.String, java.lang.String)</inbound>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.AutoProcessor.AutoProcessor()</inbound>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ClassPathBuilder$1.ClassPathBuilder$1(com.sun.enterprise.glassfish.bootstrap.ClassPathBuilder, java.lang.String[])</inbound>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ClassPathBuilder.ClassPathBuilder(java.lang.ClassLoader)</inbound>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.Constants.Constants()</inbound>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.GlassFishActivator$1$1.GlassFishActivator$1$1(com.sun.enterprise.glassfish.bootstrap.GlassFishActivator$1, com.sun.enterprise.module.bootstrap.ModuleStartup, org.jvnet.hk2.component.Habitat)</inbound>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.GlassFishActivator.GlassFishActivator()</inbound>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.GlassFishMain$Launcher.GlassFishMain$Launcher()</inbound>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.GlassFishMain.GlassFishMain()</inbound>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.MaskingClassLoader$1.MaskingClassLoader$1(com.sun.enterprise.glassfish.bootstrap.MaskingClassLoader)</inbound>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.OSGiGlassFishRuntimeBuilder.OSGiGlassFishRuntimeBuilder()</inbound>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ProxyModule.ProxyModule(com.sun.enterprise.module.ModulesRegistry, com.sun.enterprise.module.ModuleDefinition, java.lang.ClassLoader)</inbound>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.Rejar$1.Rejar$1(com.sun.enterprise.glassfish.bootstrap.Rejar)</inbound>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.Rejar$2.Rejar$2(com.sun.enterprise.glassfish.bootstrap.Rejar)</inbound>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.Rejar.Rejar()</inbound>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.StartupContextUtil.StartupContextUtil()</inbound>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.Util.Util()</inbound>
                <inbound type="feature" confirmed="yes">org.glassfish.experimentalgfapi.Constants.Constants()</inbound>
                <inbound type="feature" confirmed="yes">org.glassfish.experimentalgfapi.GlassFishRuntime.GlassFishRuntime()</inbound>
            </feature>
            <feature confirmed="no">
                <name>java.lang.Object.getClass()</name>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainEquinox.launchOSGiFW()</inbound>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainFelix.launchOSGiFW()</inbound>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainKnopflerFish.launchOSGiFW()</inbound>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainStatic.createClassLoader(java.io.File)</inbound>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainStatic.getAlreadyLoadedModules()</inbound>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainStatic.start(java.util.Properties)</inbound>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.GlassFishMain$Launcher.launch(java.util.Properties)</inbound>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.OSGiGlassFishRuntimeBuilder.isOSGiEnv()</inbound>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.OSGiGlassFishRuntimeBuilder.launchOSGiFrameWork()</inbound>
            </feature>
            <feature confirmed="no">
                <name>java.lang.Object.toString()</name>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainOSGi.configureEnvironment()</inbound>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.GlassFishActivator.dict2Properties(java.util.Dictionary)</inbound>
            </feature>
        </class>
        <class confirmed="no">
            <name>java.lang.Package</name>
            <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainHelper.static {}</inbound>
            <feature confirmed="no">
                <name>java.lang.Package.getName()</name>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainHelper.static {}</inbound>
            </feature>
        </class>
        <class confirmed="no">
            <name>java.lang.Runnable</name>
            <inbound type="class" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainEquinox$1</inbound>
            <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainEquinox.launchOSGiFW()</inbound>
            <inbound type="class" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainFelix$1</inbound>
            <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainFelix.launchOSGiFW()</inbound>
            <inbound type="class" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainKnopflerFish$1</inbound>
            <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainKnopflerFish.launchOSGiFW()</inbound>
            <inbound type="class" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainStatic$1</inbound>
            <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainStatic.start(java.util.Properties)</inbound>
        </class>
        <class confirmed="no">
            <name>java.lang.Runtime</name>
            <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.GlassFishMain$Launcher.addShutdownHook()</inbound>
            <feature confirmed="no">
                <name>java.lang.Runtime.addShutdownHook(java.lang.Thread)</name>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.GlassFishMain$Launcher.addShutdownHook()</inbound>
            </feature>
            <feature confirmed="no">
                <name>java.lang.Runtime.getRuntime()</name>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.GlassFishMain$Launcher.addShutdownHook()</inbound>
            </feature>
        </class>
        <class confirmed="no">
            <name>java.lang.RuntimeException</name>
            <feature confirmed="no">
                <name>java.lang.RuntimeException.RuntimeException(java.lang.String)</name>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainEquinox.setFwDir()</inbound>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainEquinox.setUpCache()</inbound>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainFelix.setFwDir()</inbound>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainHelper$EquinoxHelper.setFwDir()</inbound>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainHelper$FelixHelper.setFwDir()</inbound>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainHelper$KnopflerfishHelper.setFwDir()</inbound>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainHelper$PlatformHelper.getPlatformHelper(java.util.Properties)</inbound>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainHelper.findBootstrapFile()</inbound>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainHelper.getDefaultDomain(java.io.File)</inbound>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainHelper.getDefaultDomainsDir(java.util.Properties)</inbound>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainHelper.verifyDomainRoot(java.io.File)</inbound>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainKnopflerFish.setFwDir()</inbound>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.OSGiGlassFishRuntimeBuilder.launchOSGiFrameWork()</inbound>
                <inbound type="feature" confirmed="yes">org.glassfish.experimentalgfapi.GlassFishRuntime.get()</inbound>
                <inbound type="feature" confirmed="yes">org.glassfish.experimentalgfapi.GlassFishRuntime.getRuntimeBuilder(org.glassfish.experimentalgfapi.Constants$Platform, java.lang.ClassLoader)</inbound>
            </feature>
            <feature confirmed="no">
                <name>java.lang.RuntimeException.RuntimeException(java.lang.String, java.lang.Throwable)</name>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainHelper.parseAsEnv(java.io.File)</inbound>
            </feature>
            <feature confirmed="no">
                <name>java.lang.RuntimeException.RuntimeException(java.lang.Throwable)</name>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainEquinox$1.run()</inbound>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainFelix$1.run()</inbound>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainHelper.mergePlatformConfiguration(java.util.Properties)</inbound>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainKnopflerFish$1.run()</inbound>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.GlassFishActivator$1$1.start()</inbound>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.GlassFishActivator$1$1.stop()</inbound>
            </feature>
        </class>
        <class confirmed="no">
            <name>java.lang.String</name>
            <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASEmbedded$EmbeddedMain.createHabitat(com.sun.enterprise.module.ModulesRegistry, com.sun.enterprise.module.bootstrap.StartupContext)</inbound>
            <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASEmbedded$EmbeddedMain.createInhabitantsParser(org.jvnet.hk2.component.Habitat)</inbound>
            <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASEmbedded.getName()</inbound>
            <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASEmbedded.start(java.util.Properties)</inbound>
            <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMain.main(java.lang.String[])</inbound>
            <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainEquinox$1.ASMainEquinox$1(com.sun.enterprise.glassfish.bootstrap.ASMainEquinox, java.lang.reflect.Method, java.lang.String[])</inbound>
            <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainEquinox$1.run()</inbound>
            <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainEquinox$1.val$args</inbound>
            <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainEquinox.addFrameworkJars(com.sun.enterprise.glassfish.bootstrap.ClassPathBuilder)</inbound>
            <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainEquinox.getFWMainClassName()</inbound>
            <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainEquinox.getName()</inbound>
            <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainEquinox.getPreferedCacheDir()</inbound>
            <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainEquinox.getSettingsFile()</inbound>
            <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainEquinox.launchOSGiFW()</inbound>
            <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainEquinox.setFwDir()</inbound>
            <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainEquinox.setUpCache()</inbound>
            <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainFelix$1.ASMainFelix$1(com.sun.enterprise.glassfish.bootstrap.ASMainFelix, java.lang.reflect.Method, java.lang.String[])</inbound>
            <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainFelix$1.run()</inbound>
            <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainFelix$1.val$args</inbound>
            <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainFelix.CACHE_DIR</inbound>
            <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainFelix.CONFIG_PROPERTIES</inbound>
            <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainFelix.FELIX_HOME</inbound>
            <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainFelix.GF_FELIX_HOME</inbound>
            <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainFelix.SYSTEM_PROPERTIES</inbound>
            <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainFelix.addFrameworkJars(com.sun.enterprise.glassfish.bootstrap.ClassPathBuilder)</inbound>
            <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainFelix.getConfigFileName()</inbound>
            <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainFelix.getFWMainClassName()</inbound>
            <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainFelix.getName()</inbound>
            <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainFelix.getPreferedCacheDir()</inbound>
            <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainFelix.launchOSGiFW()</inbound>
            <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainFelix.setFwDir()</inbound>
            <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainHelper$ClassLoaderBuilder.ASMainHelper$ClassLoaderBuilder(java.util.Properties, java.lang.ClassLoader)</inbound>
            <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainHelper$ClassLoaderBuilder.addJDKToolsJar()</inbound>
            <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainHelper$ClassLoaderBuilder.addLauncherJar()</inbound>
            <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainHelper$ClassLoaderBuilder.findDerbyClient()</inbound>
            <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainHelper$EquinoxHelper.addFrameworkJars(com.sun.enterprise.glassfish.bootstrap.ClassPathBuilder)</inbound>
            <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainHelper$EquinoxHelper.getFrameworkConfigFile()</inbound>
            <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainHelper$EquinoxHelper.setFwDir()</inbound>
            <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainHelper$FelixHelper.CONFIG_PROPERTIES</inbound>
            <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainHelper$FelixHelper.FELIX_HOME</inbound>
            <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainHelper$FelixHelper.GF_FELIX_HOME</inbound>
            <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainHelper$FelixHelper.addFrameworkJars(com.sun.enterprise.glassfish.bootstrap.ClassPathBuilder)</inbound>
            <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainHelper$FelixHelper.getFrameworkConfigFile()</inbound>
            <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainHelper$FelixHelper.setFwDir()</inbound>
            <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainHelper$KnopflerfishHelper.CONFIG_PROPERTIES</inbound>
            <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainHelper$KnopflerfishHelper.GF_KF_HOME</inbound>
            <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainHelper$KnopflerfishHelper.KF_HOME</inbound>
            <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainHelper$KnopflerfishHelper.addFrameworkJars(com.sun.enterprise.glassfish.bootstrap.ClassPathBuilder)</inbound>
            <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainHelper$KnopflerfishHelper.getFrameworkConfigFile()</inbound>
            <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainHelper$KnopflerfishHelper.setFwDir()</inbound>
            <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainHelper$PlatformHelper.getPlatformHelper(java.util.Properties)</inbound>
            <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainHelper.addPaths(java.io.File, java.lang.String[], java.util.List)</inbound>
            <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainHelper.addRawStartupInfo(java.lang.String[], java.util.Properties)</inbound>
            <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainHelper.buildStartupContext(java.lang.String, java.io.File, java.io.File, java.lang.String[])</inbound>
            <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainHelper.checkJdkVersion()</inbound>
            <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainHelper.findBootstrapFile()</inbound>
            <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainHelper.findInstallRootURI(java.util.Properties)</inbound>
            <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainHelper.findInstanceRoot(java.io.File, java.lang.String[])</inbound>
            <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainHelper.getAsEnvConf(java.io.File)</inbound>
            <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainHelper.getDefaultDomain(java.io.File)</inbound>
            <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainHelper.getDefaultDomainsDir(java.util.Properties)</inbound>
            <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainHelper.getDomainRoot(java.util.Properties, java.util.Properties)</inbound>
            <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainHelper.getInstanceRoot(java.util.Properties, java.util.Properties)</inbound>
            <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainHelper.getMain(java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainHelper.getMinorJdkVersion()</inbound>
            <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainHelper.getParam(java.util.Properties, java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainHelper.isOSGiPlatform(java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainHelper.ok(java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainHelper.parseAsEnv(java.io.File)</inbound>
            <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainHelper.setSystemProperties(java.util.Properties)</inbound>
            <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainHelper.static {}</inbound>
            <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainHelper.verifyAndSetDomainRoot(java.io.File)</inbound>
            <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainHelper.verifyDomainRoot(java.io.File)</inbound>
            <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainHelper.wasStartedByCLI(java.util.Properties)</inbound>
            <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainHelper.whichPlatform()</inbound>
            <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainKnopflerFish$1.ASMainKnopflerFish$1(com.sun.enterprise.glassfish.bootstrap.ASMainKnopflerFish, java.lang.reflect.Method, java.lang.String[])</inbound>
            <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainKnopflerFish$1.run()</inbound>
            <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainKnopflerFish$1.val$args</inbound>
            <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainKnopflerFish.addFrameworkJars(com.sun.enterprise.glassfish.bootstrap.ClassPathBuilder)</inbound>
            <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainKnopflerFish.getFWMainClassName()</inbound>
            <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainKnopflerFish.getName()</inbound>
            <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainKnopflerFish.getPreferedCacheDir()</inbound>
            <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainKnopflerFish.launchOSGiFW()</inbound>
            <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainKnopflerFish.setFwDir()</inbound>
            <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainNonOSGi.flushAndCreate(java.io.File, long)</inbound>
            <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainNonOSGi.isCacheOutdated(long, java.io.File)</inbound>
            <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainNonOSGi.loadCacheInformation(java.io.File)</inbound>
            <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainNonOSGi.parse(java.util.Properties, java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainNonOSGi.saveCacheInformation(java.io.File, java.lang.String, long)</inbound>
            <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainOSGi.ASMainOSGi()</inbound>
            <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainOSGi.addJDKToolsJar(com.sun.enterprise.glassfish.bootstrap.ClassPathBuilder)</inbound>
            <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainOSGi.additionalJars</inbound>
            <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainOSGi.configureEnvironment()</inbound>
            <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainOSGi.configureProvisioningBundle()</inbound>
            <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainOSGi.findDerbyClient(com.sun.enterprise.glassfish.bootstrap.ClassPathBuilder)</inbound>
            <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainOSGi.getCacheDir()</inbound>
            <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainOSGi.getPreferedCacheDir()</inbound>
            <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainOSGi.setupLauncherClassLoader()</inbound>
            <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainStatic$1$1.createHabitat(com.sun.enterprise.module.ModulesRegistry, com.sun.enterprise.module.bootstrap.StartupContext)</inbound>
            <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainStatic$1.run()</inbound>
            <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainStatic$ModuleInfo.ASMainStatic$ModuleInfo(com.sun.enterprise.glassfish.bootstrap.ASMainStatic, java.lang.String, java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainStatic$ModuleInfo.ASMainStatic$ModuleInfo(com.sun.enterprise.glassfish.bootstrap.ASMainStatic, java.lang.String, java.lang.String, com.sun.enterprise.glassfish.bootstrap.ASMainStatic$1)</inbound>
            <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainStatic$ModuleInfo.bundleName</inbound>
            <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainStatic$ModuleInfo.bundleVersion</inbound>
            <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainStatic$ModuleInfo.equals(java.lang.Object)</inbound>
            <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainStatic.configureEnvironment()</inbound>
            <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainStatic.createCache(java.io.File)</inbound>
            <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainStatic.findDerbyClient(java.util.List)</inbound>
            <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainStatic.getAlreadyLoadedModules()</inbound>
            <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainStatic.getJarFileURL(java.net.URL)</inbound>
            <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainStatic.getMaskingClassLoader(java.lang.ClassLoader, java.io.File, java.util.logging.Logger, boolean)</inbound>
            <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainStatic.getMaskingClassLoader(java.lang.ClassLoader, java.util.Properties, boolean)</inbound>
            <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainStatic.getName()</inbound>
            <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainStatic.getPreferedCacheDir()</inbound>
            <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainStatic.insertURLs(java.io.File, java.util.Set, java.util.List)</inbound>
            <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainStatic.processFile(java.io.File, java.util.Set, java.util.List)</inbound>
            <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainStatic.start(java.util.Properties)</inbound>
            <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.AutoProcessor.AUTO_INSTALL_PROP</inbound>
            <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.AutoProcessor.AUTO_START_PROP</inbound>
            <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.AutoProcessor.nextLocation(java.util.StringTokenizer)</inbound>
            <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.AutoProcessor.processAutoProperties(java.util.Map, org.osgi.framework.BundleContext)</inbound>
            <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ClassPathBuilder$1.ClassPathBuilder$1(com.sun.enterprise.glassfish.bootstrap.ClassPathBuilder, java.lang.String[])</inbound>
            <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ClassPathBuilder$1.accept(java.io.File)</inbound>
            <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ClassPathBuilder$1.val$excludes</inbound>
            <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ClassPathBuilder.addGlob(java.io.File, java.lang.String[])</inbound>
            <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ClassPathBuilder.addJar(java.io.File)</inbound>
            <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ClassPathBuilder.addJarFolder(java.io.File, java.lang.String[])</inbound>
            <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.Constants$Platform.Constants$Platform(java.lang.String, int)</inbound>
            <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.Constants$Platform.static {}</inbound>
            <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.Constants$Platform.valueOf(java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.Constants.ARGS_PROP</inbound>
            <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.Constants.ARG_SEP</inbound>
            <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.Constants.DEFAULT_DOMAINS_DIR_PROPNAME</inbound>
            <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.Constants.GF_KERNEL</inbound>
            <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.Constants.HK2_CACHE_DIR</inbound>
            <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.Constants.INSTALL_ROOT_PROP_NAME</inbound>
            <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.Constants.INSTALL_ROOT_URI_PROP_NAME</inbound>
            <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.Constants.INSTANCE_ROOT_PROP_NAME</inbound>
            <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.Constants.INSTANCE_ROOT_URI_PROP_NAME</inbound>
            <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.Constants.ORIGINAL_ARGS</inbound>
            <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.Constants.ORIGINAL_CN</inbound>
            <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.Constants.ORIGINAL_CP</inbound>
            <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.Constants.PLATFORM_PROPERTY_KEY</inbound>
            <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ExtensibleClassLoader.ExtensibleClassLoader(java.net.URL[], java.lang.ClassLoader, java.util.List)</inbound>
            <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ExtensibleClassLoader.addURI(java.net.URI)</inbound>
            <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ExtensibleClassLoader.added(java.net.URI)</inbound>
            <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ExtensibleClassLoader.static {}</inbound>
            <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.GFRepository.GFRepository(java.lang.String, java.io.File)</inbound>
            <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.GlassFishActivator$1$1.lookupService(java.lang.Class, java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.GlassFishActivator$1.newGlassFish(java.util.Properties)</inbound>
            <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.GlassFishActivator.dict2Properties(java.util.Dictionary)</inbound>
            <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.GlassFishActivator.findBundle(java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.GlassFishActivator.registerGlassFishRuntime()</inbound>
            <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.GlassFishActivator.setEnv(java.util.Properties)</inbound>
            <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.GlassFishActivator.startBundle(java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.GlassFishActivator.startBundles()</inbound>
            <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.GlassFishActivator.startConfigAdmin()</inbound>
            <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.GlassFishActivator.startPostStartupBundles()</inbound>
            <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.GlassFishActivator.stop(org.osgi.framework.BundleContext)</inbound>
            <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.GlassFishActivator.stopBundle(java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.GlassFishMain$Launcher$1.GlassFishMain$Launcher$1(java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.GlassFishMain$Launcher$1.run()</inbound>
            <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.GlassFishMain$Launcher.addShutdownHook()</inbound>
            <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.GlassFishMain$Launcher.launch(java.util.Properties)</inbound>
            <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.GlassFishMain$Launcher.prompt()</inbound>
            <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.GlassFishMain$Launcher.readCommand(java.io.BufferedReader)</inbound>
            <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.GlassFishMain$Launcher.startConsole()</inbound>
            <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.GlassFishMain.main(java.lang.String[])</inbound>
            <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.MaskingClassLoader.MaskingClassLoader(java.lang.ClassLoader, java.util.Collection, java.util.Collection, boolean)</inbound>
            <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.MaskingClassLoader.getResource(java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.MaskingClassLoader.getResources(java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.MaskingClassLoader.isDottedNameLoadableByParent(java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.MaskingClassLoader.loadClass(java.lang.String, boolean)</inbound>
            <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.MaskingClassLoader.multiples</inbound>
            <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.MaskingClassLoader.resourceToDotted(java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.OSGiGlassFishRuntimeBuilder.debug(java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.OSGiGlassFishRuntimeBuilder.getRuntime()</inbound>
            <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.OSGiGlassFishRuntimeBuilder.launchOSGiFrameWork()</inbound>
            <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ProxyModule.getName()</inbound>
            <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ProxyModule.getProvidersClass(java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.Rejar$2.accept(java.io.File)</inbound>
            <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.Rejar.copy(byte[], java.lang.String, java.util.jar.JarOutputStream)</inbound>
            <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.Rejar.copy(java.util.jar.JarFile, java.util.jar.JarEntry, java.util.jar.JarOutputStream)</inbound>
            <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.Rejar.processDirectory(java.util.jar.JarOutputStream, java.io.File, java.util.Set, java.util.Map)</inbound>
            <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.Rejar.rejar(java.io.File, java.io.File)</inbound>
            <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.StartupContextUtil.getInstallRoot(java.util.Properties)</inbound>
            <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.StartupContextUtil.getInstanceRoot(java.util.Properties)</inbound>
            <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.StartupContextUtil.getOriginalArguments(com.sun.enterprise.module.bootstrap.StartupContext)</inbound>
            <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.Util.DELIM_START</inbound>
            <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.Util.DELIM_STOP</inbound>
            <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.Util.getJDKToolsJar()</inbound>
            <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.Util.getPropertyOrSystemProperty(java.util.Properties, java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.Util.getPropertyOrSystemProperty(java.util.Properties, java.lang.String, java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.Util.substVars(java.lang.String, java.lang.String, java.util.Map, java.util.Properties)</inbound>
            <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.Util.substVars(java.util.Properties)</inbound>
            <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.Util.whichJar(java.lang.Class)</inbound>
            <inbound type="feature" confirmed="yes">org.glassfish.experimentalgfapi.Constants$Platform.Constants$Platform(java.lang.String, int)</inbound>
            <inbound type="feature" confirmed="yes">org.glassfish.experimentalgfapi.Constants$Platform.static {}</inbound>
            <inbound type="feature" confirmed="yes">org.glassfish.experimentalgfapi.Constants$Platform.valueOf(java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">org.glassfish.experimentalgfapi.Constants.INSTALL_ROOT_PROP_NAME</inbound>
            <inbound type="feature" confirmed="yes">org.glassfish.experimentalgfapi.Constants.INSTALL_ROOT_URI_PROP_NAME</inbound>
            <inbound type="feature" confirmed="yes">org.glassfish.experimentalgfapi.Constants.INSTANCE_ROOT_PROP_NAME</inbound>
            <inbound type="feature" confirmed="yes">org.glassfish.experimentalgfapi.Constants.INSTANCE_ROOT_URI_PROP_NAME</inbound>
            <inbound type="feature" confirmed="yes">org.glassfish.experimentalgfapi.Constants.PLATFORM_PROPERTY_KEY</inbound>
            <inbound type="feature" confirmed="yes">org.glassfish.experimentalgfapi.Deployer.deploy(java.io.File, java.util.Map)</inbound>
            <inbound type="feature" confirmed="yes">org.glassfish.experimentalgfapi.Deployer.deploy(java.net.URI)</inbound>
            <inbound type="feature" confirmed="yes">org.glassfish.experimentalgfapi.Deployer.undeploy(java.lang.String, java.util.Map)</inbound>
            <inbound type="feature" confirmed="yes">org.glassfish.experimentalgfapi.GlassFish$Status.GlassFish$Status(java.lang.String, int)</inbound>
            <inbound type="feature" confirmed="yes">org.glassfish.experimentalgfapi.GlassFish$Status.static {}</inbound>
            <inbound type="feature" confirmed="yes">org.glassfish.experimentalgfapi.GlassFish$Status.valueOf(java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">org.glassfish.experimentalgfapi.GlassFish.lookupService(java.lang.Class, java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">org.glassfish.experimentalgfapi.GlassFishRuntime.get()</inbound>
            <inbound type="feature" confirmed="yes">org.glassfish.experimentalgfapi.GlassFishRuntime.getRuntimeBuilder(org.glassfish.experimentalgfapi.Constants$Platform, java.lang.ClassLoader)</inbound>
            <inbound type="feature" confirmed="yes">org.glassfish.experimentalgfapi.GlassFishRuntime.whichPlatform(java.util.Properties)</inbound>
            <feature confirmed="no">
                <name>java.lang.String.compareTo(java.lang.String)</name>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainHelper$ClassLoaderBuilder.findDerbyClient()</inbound>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainOSGi.findDerbyClient(com.sun.enterprise.glassfish.bootstrap.ClassPathBuilder)</inbound>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainStatic.findDerbyClient(java.util.List)</inbound>
            </feature>
            <feature confirmed="no">
                <name>java.lang.String.contains(java.lang.CharSequence)</name>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainStatic.getMaskingClassLoader(java.lang.ClassLoader, java.util.Properties, boolean)</inbound>
            </feature>
            <feature confirmed="no">
                <name>java.lang.String.endsWith(java.lang.String)</name>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainHelper.addPaths(java.io.File, java.lang.String[], java.util.List)</inbound>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainStatic.insertURLs(java.io.File, java.util.Set, java.util.List)</inbound>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ClassPathBuilder$1.accept(java.io.File)</inbound>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.Rejar$2.accept(java.io.File)</inbound>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.Rejar.processDirectory(java.util.jar.JarOutputStream, java.io.File, java.util.Set, java.util.Map)</inbound>
            </feature>
            <feature confirmed="no">
                <name>java.lang.String.equals(java.lang.Object)</name>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainHelper.buildStartupContext(java.lang.String, java.io.File, java.io.File, java.lang.String[])</inbound>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainHelper.findInstallRootURI(java.util.Properties)</inbound>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainHelper.getMinorJdkVersion()</inbound>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainNonOSGi.isCacheOutdated(long, java.io.File)</inbound>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainNonOSGi.loadCacheInformation(java.io.File)</inbound>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainStatic$ModuleInfo.equals(java.lang.Object)</inbound>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.AutoProcessor.nextLocation(java.util.StringTokenizer)</inbound>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.AutoProcessor.processAutoProperties(java.util.Map, org.osgi.framework.BundleContext)</inbound>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ClassPathBuilder$1.accept(java.io.File)</inbound>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.GlassFishActivator.findBundle(java.lang.String)</inbound>
            </feature>
            <feature confirmed="no">
                <name>java.lang.String.equalsIgnoreCase(java.lang.String)</name>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASEmbedded$EmbeddedMain.createInhabitantsParser(org.jvnet.hk2.component.Habitat)</inbound>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainHelper.findInstallRootURI(java.util.Properties)</inbound>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainHelper.getMain(java.lang.String)</inbound>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.GlassFishMain$Launcher.startConsole()</inbound>
            </feature>
            <feature confirmed="no">
                <name>java.lang.String.getBytes()</name>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.Rejar.processDirectory(java.util.jar.JarOutputStream, java.io.File, java.util.Set, java.util.Map)</inbound>
            </feature>
            <feature confirmed="no">
                <name>java.lang.String.indexOf(java.lang.String)</name>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainHelper.getAsEnvConf(java.io.File)</inbound>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainStatic.getMaskingClassLoader(java.lang.ClassLoader, java.util.Properties, boolean)</inbound>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.GlassFishMain$Launcher.startConsole()</inbound>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.Util.substVars(java.lang.String, java.lang.String, java.util.Map, java.util.Properties)</inbound>
            </feature>
            <feature confirmed="no">
                <name>java.lang.String.indexOf(java.lang.String, int)</name>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.Util.substVars(java.lang.String, java.lang.String, java.util.Map, java.util.Properties)</inbound>
            </feature>
            <feature confirmed="no">
                <name>java.lang.String.isEmpty()</name>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.GlassFishActivator.setEnv(java.util.Properties)</inbound>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.GlassFishMain$Launcher.readCommand(java.io.BufferedReader)</inbound>
            </feature>
            <feature confirmed="no">
                <name>java.lang.String.lastIndexOf(int)</name>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.AutoProcessor.processAutoProperties(java.util.Map, org.osgi.framework.BundleContext)</inbound>
            </feature>
            <feature confirmed="no">
                <name>java.lang.String.lastIndexOf(java.lang.String)</name>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.MaskingClassLoader.isDottedNameLoadableByParent(java.lang.String)</inbound>
            </feature>
            <feature confirmed="no">
                <name>java.lang.String.length()</name>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainHelper.ok(java.lang.String)</inbound>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainHelper.whichPlatform()</inbound>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainStatic.getJarFileURL(java.net.URL)</inbound>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.Util.substVars(java.lang.String, java.lang.String, java.util.Map, java.util.Properties)</inbound>
            </feature>
            <feature confirmed="no">
                <name>java.lang.String.replace(java.lang.CharSequence, java.lang.CharSequence)</name>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ClassPathBuilder.addGlob(java.io.File, java.lang.String[])</inbound>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.MaskingClassLoader.resourceToDotted(java.lang.String)</inbound>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.Util.whichJar(java.lang.Class)</inbound>
            </feature>
            <feature confirmed="no">
                <name>java.lang.String.split(java.lang.String)</name>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainHelper.getMinorJdkVersion()</inbound>
            </feature>
            <feature confirmed="no">
                <name>java.lang.String.startsWith(java.lang.String)</name>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainHelper.addPaths(java.io.File, java.lang.String[], java.util.List)</inbound>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.AutoProcessor.processAutoProperties(java.util.Map, org.osgi.framework.BundleContext)</inbound>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.GlassFishMain$Launcher.startConsole()</inbound>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.MaskingClassLoader.isDottedNameLoadableByParent(java.lang.String)</inbound>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.MaskingClassLoader.resourceToDotted(java.lang.String)</inbound>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.Rejar.processDirectory(java.util.jar.JarOutputStream, java.io.File, java.util.Set, java.util.Map)</inbound>
            </feature>
            <feature confirmed="no">
                <name>java.lang.String.substring(int)</name>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.AutoProcessor.processAutoProperties(java.util.Map, org.osgi.framework.BundleContext)</inbound>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.GlassFishMain$Launcher.startConsole()</inbound>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.MaskingClassLoader.resourceToDotted(java.lang.String)</inbound>
            </feature>
            <feature confirmed="no">
                <name>java.lang.String.substring(int, int)</name>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainStatic.getJarFileURL(java.net.URL)</inbound>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainStatic.getMaskingClassLoader(java.lang.ClassLoader, java.util.Properties, boolean)</inbound>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.MaskingClassLoader.isDottedNameLoadableByParent(java.lang.String)</inbound>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.Util.substVars(java.lang.String, java.lang.String, java.util.Map, java.util.Properties)</inbound>
            </feature>
            <feature confirmed="no">
                <name>java.lang.String.toLowerCase()</name>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.AutoProcessor.processAutoProperties(java.util.Map, org.osgi.framework.BundleContext)</inbound>
            </feature>
            <feature confirmed="no">
                <name>java.lang.String.trim()</name>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainHelper.whichPlatform()</inbound>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainStatic.getMaskingClassLoader(java.lang.ClassLoader, java.util.Properties, boolean)</inbound>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.AutoProcessor.nextLocation(java.util.StringTokenizer)</inbound>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.GlassFishMain$Launcher.startConsole()</inbound>
            </feature>
        </class>
        <class confirmed="no">
            <name>java.lang.StringBuffer</name>
            <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.AutoProcessor.nextLocation(java.util.StringTokenizer)</inbound>
            <feature confirmed="no">
                <name>java.lang.StringBuffer.StringBuffer(int)</name>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.AutoProcessor.nextLocation(java.util.StringTokenizer)</inbound>
            </feature>
            <feature confirmed="no">
                <name>java.lang.StringBuffer.append(java.lang.String)</name>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.AutoProcessor.nextLocation(java.util.StringTokenizer)</inbound>
            </feature>
            <feature confirmed="no">
                <name>java.lang.StringBuffer.toString()</name>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.AutoProcessor.nextLocation(java.util.StringTokenizer)</inbound>
            </feature>
        </class>
        <class confirmed="no">
            <name>java.lang.StringBuilder</name>
            <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMain.main(java.lang.String[])</inbound>
            <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainEquinox.setFwDir()</inbound>
            <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainEquinox.setUpCache()</inbound>
            <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainFelix.setFwDir()</inbound>
            <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainHelper$ClassLoaderBuilder.addJDKToolsJar()</inbound>
            <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainHelper$EquinoxHelper.setFwDir()</inbound>
            <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainHelper$FelixHelper.setFwDir()</inbound>
            <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainHelper$KnopflerfishHelper.setFwDir()</inbound>
            <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainHelper$PlatformHelper.getPlatformHelper(java.util.Properties)</inbound>
            <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainHelper.addRawStartupInfo(java.lang.String[], java.util.Properties)</inbound>
            <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainHelper.checkJdkVersion()</inbound>
            <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainHelper.findBootstrapFile()</inbound>
            <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainHelper.findInstallRootURI(java.util.Properties)</inbound>
            <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainHelper.getDefaultDomain(java.io.File)</inbound>
            <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainHelper.getDefaultDomainsDir(java.util.Properties)</inbound>
            <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainHelper.getParam(java.util.Properties, java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainHelper.parseAsEnv(java.io.File)</inbound>
            <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainKnopflerFish.setFwDir()</inbound>
            <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainNonOSGi.flushAndCreate(java.io.File, long)</inbound>
            <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainNonOSGi.loadCacheInformation(java.io.File)</inbound>
            <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainNonOSGi.saveCacheInformation(java.io.File, java.lang.String, long)</inbound>
            <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainOSGi.addJDKToolsJar(com.sun.enterprise.glassfish.bootstrap.ClassPathBuilder)</inbound>
            <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainStatic.getMaskingClassLoader(java.lang.ClassLoader, java.io.File, java.util.logging.Logger, boolean)</inbound>
            <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.AutoProcessor.processAutoProperties(java.util.Map, org.osgi.framework.BundleContext)</inbound>
            <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ClassPathBuilder.addGlob(java.io.File, java.lang.String[])</inbound>
            <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ClassPathBuilder.addJar(java.io.File)</inbound>
            <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ClassPathBuilder.addJarFolder(java.io.File, java.lang.String[])</inbound>
            <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ExtensibleClassLoader.ExtensibleClassLoader(java.net.URL[], java.lang.ClassLoader, java.util.List)</inbound>
            <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ExtensibleClassLoader.added(java.net.URI)</inbound>
            <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.GlassFishActivator$1$1.lookupService(java.lang.Class, java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.GlassFishActivator$1.newGlassFish(java.util.Properties)</inbound>
            <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.GlassFishActivator.startBundle(java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.GlassFishActivator.stopBundle(java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.GlassFishMain$Launcher$1.run()</inbound>
            <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.GlassFishMain$Launcher.startConsole()</inbound>
            <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.GlassFishMain.main(java.lang.String[])</inbound>
            <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.OSGiGlassFishRuntimeBuilder.debug(java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.OSGiGlassFishRuntimeBuilder.launchOSGiFrameWork()</inbound>
            <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.Rejar.processDirectory(java.util.jar.JarOutputStream, java.io.File, java.util.Set, java.util.Map)</inbound>
            <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.Util.getJDKToolsJar()</inbound>
            <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.Util.substVars(java.lang.String, java.lang.String, java.util.Map, java.util.Properties)</inbound>
            <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.Util.whichJar(java.lang.Class)</inbound>
            <inbound type="feature" confirmed="yes">org.glassfish.experimentalgfapi.GlassFishRuntime.getRuntimeBuilder(org.glassfish.experimentalgfapi.Constants$Platform, java.lang.ClassLoader)</inbound>
            <feature confirmed="no">
                <name>java.lang.StringBuilder.StringBuilder()</name>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMain.main(java.lang.String[])</inbound>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainEquinox.setFwDir()</inbound>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainEquinox.setUpCache()</inbound>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainFelix.setFwDir()</inbound>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainHelper$ClassLoaderBuilder.addJDKToolsJar()</inbound>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainHelper$EquinoxHelper.setFwDir()</inbound>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainHelper$FelixHelper.setFwDir()</inbound>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainHelper$KnopflerfishHelper.setFwDir()</inbound>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainHelper$PlatformHelper.getPlatformHelper(java.util.Properties)</inbound>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainHelper.addRawStartupInfo(java.lang.String[], java.util.Properties)</inbound>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainHelper.checkJdkVersion()</inbound>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainHelper.findBootstrapFile()</inbound>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainHelper.findInstallRootURI(java.util.Properties)</inbound>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainHelper.getDefaultDomain(java.io.File)</inbound>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainHelper.getDefaultDomainsDir(java.util.Properties)</inbound>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainHelper.getParam(java.util.Properties, java.lang.String)</inbound>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainHelper.parseAsEnv(java.io.File)</inbound>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainKnopflerFish.setFwDir()</inbound>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainNonOSGi.flushAndCreate(java.io.File, long)</inbound>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainNonOSGi.loadCacheInformation(java.io.File)</inbound>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainNonOSGi.saveCacheInformation(java.io.File, java.lang.String, long)</inbound>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainOSGi.addJDKToolsJar(com.sun.enterprise.glassfish.bootstrap.ClassPathBuilder)</inbound>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainStatic.getMaskingClassLoader(java.lang.ClassLoader, java.io.File, java.util.logging.Logger, boolean)</inbound>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.AutoProcessor.processAutoProperties(java.util.Map, org.osgi.framework.BundleContext)</inbound>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ClassPathBuilder.addGlob(java.io.File, java.lang.String[])</inbound>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ClassPathBuilder.addJar(java.io.File)</inbound>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ClassPathBuilder.addJarFolder(java.io.File, java.lang.String[])</inbound>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ExtensibleClassLoader.ExtensibleClassLoader(java.net.URL[], java.lang.ClassLoader, java.util.List)</inbound>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ExtensibleClassLoader.added(java.net.URI)</inbound>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.GlassFishActivator$1$1.lookupService(java.lang.Class, java.lang.String)</inbound>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.GlassFishActivator$1.newGlassFish(java.util.Properties)</inbound>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.GlassFishActivator.startBundle(java.lang.String)</inbound>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.GlassFishActivator.stopBundle(java.lang.String)</inbound>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.GlassFishMain$Launcher$1.run()</inbound>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.GlassFishMain$Launcher.startConsole()</inbound>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.GlassFishMain.main(java.lang.String[])</inbound>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.OSGiGlassFishRuntimeBuilder.debug(java.lang.String)</inbound>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.OSGiGlassFishRuntimeBuilder.launchOSGiFrameWork()</inbound>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.Rejar.processDirectory(java.util.jar.JarOutputStream, java.io.File, java.util.Set, java.util.Map)</inbound>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.Util.getJDKToolsJar()</inbound>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.Util.substVars(java.lang.String, java.lang.String, java.util.Map, java.util.Properties)</inbound>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.Util.whichJar(java.lang.Class)</inbound>
                <inbound type="feature" confirmed="yes">org.glassfish.experimentalgfapi.GlassFishRuntime.getRuntimeBuilder(org.glassfish.experimentalgfapi.Constants$Platform, java.lang.ClassLoader)</inbound>
            </feature>
            <feature confirmed="no">
                <name>java.lang.StringBuilder.append(char)</name>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ClassPathBuilder.addGlob(java.io.File, java.lang.String[])</inbound>
            </feature>
            <feature confirmed="no">
                <name>java.lang.StringBuilder.append(int)</name>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainHelper.checkJdkVersion()</inbound>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainHelper.getDefaultDomain(java.io.File)</inbound>
            </feature>
            <feature confirmed="no">
                <name>java.lang.StringBuilder.append(java.lang.Object)</name>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMain.main(java.lang.String[])</inbound>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainHelper$ClassLoaderBuilder.addJDKToolsJar()</inbound>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainHelper$PlatformHelper.getPlatformHelper(java.util.Properties)</inbound>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainHelper.findBootstrapFile()</inbound>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainHelper.findInstallRootURI(java.util.Properties)</inbound>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainHelper.getDefaultDomain(java.io.File)</inbound>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainNonOSGi.flushAndCreate(java.io.File, long)</inbound>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainOSGi.addJDKToolsJar(com.sun.enterprise.glassfish.bootstrap.ClassPathBuilder)</inbound>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.AutoProcessor.processAutoProperties(java.util.Map, org.osgi.framework.BundleContext)</inbound>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ClassPathBuilder.addJar(java.io.File)</inbound>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ClassPathBuilder.addJarFolder(java.io.File, java.lang.String[])</inbound>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ExtensibleClassLoader.ExtensibleClassLoader(java.net.URL[], java.lang.ClassLoader, java.util.List)</inbound>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ExtensibleClassLoader.added(java.net.URI)</inbound>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.GlassFishActivator$1$1.lookupService(java.lang.Class, java.lang.String)</inbound>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.GlassFishActivator$1.newGlassFish(java.util.Properties)</inbound>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.GlassFishMain$Launcher$1.run()</inbound>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.OSGiGlassFishRuntimeBuilder.launchOSGiFrameWork()</inbound>
                <inbound type="feature" confirmed="yes">org.glassfish.experimentalgfapi.GlassFishRuntime.getRuntimeBuilder(org.glassfish.experimentalgfapi.Constants$Platform, java.lang.ClassLoader)</inbound>
            </feature>
            <feature confirmed="no">
                <name>java.lang.StringBuilder.append(java.lang.String)</name>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMain.main(java.lang.String[])</inbound>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainEquinox.setFwDir()</inbound>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainEquinox.setUpCache()</inbound>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainFelix.setFwDir()</inbound>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainHelper$ClassLoaderBuilder.addJDKToolsJar()</inbound>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainHelper$EquinoxHelper.setFwDir()</inbound>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainHelper$FelixHelper.setFwDir()</inbound>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainHelper$KnopflerfishHelper.setFwDir()</inbound>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainHelper$PlatformHelper.getPlatformHelper(java.util.Properties)</inbound>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainHelper.addRawStartupInfo(java.lang.String[], java.util.Properties)</inbound>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainHelper.checkJdkVersion()</inbound>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainHelper.findBootstrapFile()</inbound>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainHelper.findInstallRootURI(java.util.Properties)</inbound>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainHelper.getDefaultDomain(java.io.File)</inbound>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainHelper.getDefaultDomainsDir(java.util.Properties)</inbound>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainHelper.getParam(java.util.Properties, java.lang.String)</inbound>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainHelper.parseAsEnv(java.io.File)</inbound>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainKnopflerFish.setFwDir()</inbound>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainNonOSGi.flushAndCreate(java.io.File, long)</inbound>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainNonOSGi.loadCacheInformation(java.io.File)</inbound>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainNonOSGi.saveCacheInformation(java.io.File, java.lang.String, long)</inbound>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainOSGi.addJDKToolsJar(com.sun.enterprise.glassfish.bootstrap.ClassPathBuilder)</inbound>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainStatic.getMaskingClassLoader(java.lang.ClassLoader, java.io.File, java.util.logging.Logger, boolean)</inbound>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.AutoProcessor.processAutoProperties(java.util.Map, org.osgi.framework.BundleContext)</inbound>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ClassPathBuilder.addGlob(java.io.File, java.lang.String[])</inbound>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ClassPathBuilder.addJar(java.io.File)</inbound>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ClassPathBuilder.addJarFolder(java.io.File, java.lang.String[])</inbound>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ExtensibleClassLoader.ExtensibleClassLoader(java.net.URL[], java.lang.ClassLoader, java.util.List)</inbound>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ExtensibleClassLoader.added(java.net.URI)</inbound>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.GlassFishActivator$1$1.lookupService(java.lang.Class, java.lang.String)</inbound>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.GlassFishActivator$1.newGlassFish(java.util.Properties)</inbound>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.GlassFishActivator.startBundle(java.lang.String)</inbound>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.GlassFishActivator.stopBundle(java.lang.String)</inbound>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.GlassFishMain$Launcher$1.run()</inbound>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.GlassFishMain$Launcher.startConsole()</inbound>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.GlassFishMain.main(java.lang.String[])</inbound>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.OSGiGlassFishRuntimeBuilder.debug(java.lang.String)</inbound>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.OSGiGlassFishRuntimeBuilder.launchOSGiFrameWork()</inbound>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.Rejar.processDirectory(java.util.jar.JarOutputStream, java.io.File, java.util.Set, java.util.Map)</inbound>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.Util.getJDKToolsJar()</inbound>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.Util.substVars(java.lang.String, java.lang.String, java.util.Map, java.util.Properties)</inbound>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.Util.whichJar(java.lang.Class)</inbound>
                <inbound type="feature" confirmed="yes">org.glassfish.experimentalgfapi.GlassFishRuntime.getRuntimeBuilder(org.glassfish.experimentalgfapi.Constants$Platform, java.lang.ClassLoader)</inbound>
            </feature>
            <feature confirmed="no">
                <name>java.lang.StringBuilder.length()</name>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ClassPathBuilder.addGlob(java.io.File, java.lang.String[])</inbound>
            </feature>
            <feature confirmed="no">
                <name>java.lang.StringBuilder.toString()</name>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMain.main(java.lang.String[])</inbound>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainEquinox.setFwDir()</inbound>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainEquinox.setUpCache()</inbound>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainFelix.setFwDir()</inbound>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainHelper$ClassLoaderBuilder.addJDKToolsJar()</inbound>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainHelper$EquinoxHelper.setFwDir()</inbound>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainHelper$FelixHelper.setFwDir()</inbound>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainHelper$KnopflerfishHelper.setFwDir()</inbound>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainHelper$PlatformHelper.getPlatformHelper(java.util.Properties)</inbound>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainHelper.addRawStartupInfo(java.lang.String[], java.util.Properties)</inbound>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainHelper.checkJdkVersion()</inbound>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainHelper.findBootstrapFile()</inbound>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainHelper.findInstallRootURI(java.util.Properties)</inbound>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainHelper.getDefaultDomain(java.io.File)</inbound>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainHelper.getDefaultDomainsDir(java.util.Properties)</inbound>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainHelper.getParam(java.util.Properties, java.lang.String)</inbound>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainHelper.parseAsEnv(java.io.File)</inbound>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainKnopflerFish.setFwDir()</inbound>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainNonOSGi.flushAndCreate(java.io.File, long)</inbound>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainNonOSGi.loadCacheInformation(java.io.File)</inbound>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainNonOSGi.saveCacheInformation(java.io.File, java.lang.String, long)</inbound>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainOSGi.addJDKToolsJar(com.sun.enterprise.glassfish.bootstrap.ClassPathBuilder)</inbound>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainStatic.getMaskingClassLoader(java.lang.ClassLoader, java.io.File, java.util.logging.Logger, boolean)</inbound>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.AutoProcessor.processAutoProperties(java.util.Map, org.osgi.framework.BundleContext)</inbound>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ClassPathBuilder.addGlob(java.io.File, java.lang.String[])</inbound>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ClassPathBuilder.addJar(java.io.File)</inbound>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ClassPathBuilder.addJarFolder(java.io.File, java.lang.String[])</inbound>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ExtensibleClassLoader.ExtensibleClassLoader(java.net.URL[], java.lang.ClassLoader, java.util.List)</inbound>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ExtensibleClassLoader.added(java.net.URI)</inbound>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.GlassFishActivator$1$1.lookupService(java.lang.Class, java.lang.String)</inbound>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.GlassFishActivator$1.newGlassFish(java.util.Properties)</inbound>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.GlassFishActivator.startBundle(java.lang.String)</inbound>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.GlassFishActivator.stopBundle(java.lang.String)</inbound>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.GlassFishMain$Launcher$1.run()</inbound>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.GlassFishMain$Launcher.startConsole()</inbound>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.GlassFishMain.main(java.lang.String[])</inbound>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.OSGiGlassFishRuntimeBuilder.debug(java.lang.String)</inbound>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.OSGiGlassFishRuntimeBuilder.launchOSGiFrameWork()</inbound>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.Rejar.processDirectory(java.util.jar.JarOutputStream, java.io.File, java.util.Set, java.util.Map)</inbound>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.Util.getJDKToolsJar()</inbound>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.Util.substVars(java.lang.String, java.lang.String, java.util.Map, java.util.Properties)</inbound>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.Util.whichJar(java.lang.Class)</inbound>
                <inbound type="feature" confirmed="yes">org.glassfish.experimentalgfapi.GlassFishRuntime.getRuntimeBuilder(org.glassfish.experimentalgfapi.Constants$Platform, java.lang.ClassLoader)</inbound>
            </feature>
        </class>
        <class confirmed="no">
            <name>java.lang.String[]</name>
            <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.MaskingClassLoader.MaskingClassLoader(java.lang.ClassLoader, java.util.Collection, java.util.Collection, boolean)</inbound>
            <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.StartupContextUtil.getOriginalArguments(com.sun.enterprise.module.bootstrap.StartupContext)</inbound>
        </class>
        <class confirmed="no">
            <name>java.lang.System</name>
            <feature confirmed="no">
                <name>java.lang.System.currentTimeMillis()</name>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainHelper.buildStartupContext(java.lang.String, java.io.File, java.io.File, java.lang.String[])</inbound>
            </feature>
            <feature confirmed="no">
                <name>java.lang.System.err</name>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.AutoProcessor.processAutoProperties(java.util.Map, org.osgi.framework.BundleContext)</inbound>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.GlassFishMain$Launcher$1.run()</inbound>
            </feature>
            <feature confirmed="no">
                <name>java.lang.System.exit(int)</name>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainHelper.checkJdkVersion()</inbound>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.GlassFishMain$Launcher.startConsole()</inbound>
            </feature>
            <feature confirmed="no">
                <name>java.lang.System.getProperty(java.lang.String)</name>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainHelper$ClassLoaderBuilder.findDerbyClient()</inbound>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainHelper.addRawStartupInfo(java.lang.String[], java.util.Properties)</inbound>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainHelper.getAsEnvConf(java.io.File)</inbound>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainHelper.getMinorJdkVersion()</inbound>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainHelper.whichPlatform()</inbound>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainOSGi.configureProvisioningBundle()</inbound>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainOSGi.findDerbyClient(com.sun.enterprise.glassfish.bootstrap.ClassPathBuilder)</inbound>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainStatic.findDerbyClient(java.util.List)</inbound>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.Util.getJDKToolsJar()</inbound>
            </feature>
            <feature confirmed="no">
                <name>java.lang.System.getProperty(java.lang.String, java.lang.String)</name>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainFelix.setFwDir()</inbound>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainHelper$FelixHelper.setFwDir()</inbound>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.Util.getPropertyOrSystemProperty(java.util.Properties, java.lang.String, java.lang.String)</inbound>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.Util.substVars(java.lang.String, java.lang.String, java.util.Map, java.util.Properties)</inbound>
            </feature>
            <feature confirmed="no">
                <name>java.lang.System.getenv(java.lang.String)</name>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainEquinox.setFwDir()</inbound>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainFelix.setFwDir()</inbound>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainHelper$EquinoxHelper.setFwDir()</inbound>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainHelper$FelixHelper.setFwDir()</inbound>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainHelper$KnopflerfishHelper.setFwDir()</inbound>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainHelper.whichPlatform()</inbound>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainKnopflerFish.setFwDir()</inbound>
            </feature>
            <feature confirmed="no">
                <name>java.lang.System.in</name>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.GlassFishMain$Launcher.startConsole()</inbound>
            </feature>
            <feature confirmed="no">
                <name>java.lang.System.out</name>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.GlassFishActivator$1.newGlassFish(java.util.Properties)</inbound>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.GlassFishActivator.startBundle(java.lang.String)</inbound>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.GlassFishActivator.stopBundle(java.lang.String)</inbound>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.GlassFishMain$Launcher.prompt()</inbound>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.GlassFishMain$Launcher.startConsole()</inbound>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.GlassFishMain.main(java.lang.String[])</inbound>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.OSGiGlassFishRuntimeBuilder.debug(java.lang.String)</inbound>
            </feature>
            <feature confirmed="no">
                <name>java.lang.System.setProperty(java.lang.String, java.lang.String)</name>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainEquinox.setUpCache()</inbound>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainFelix.launchOSGiFW()</inbound>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainHelper.setSystemProperties(java.util.Properties)</inbound>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainHelper.verifyAndSetDomainRoot(java.io.File)</inbound>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainKnopflerFish.launchOSGiFW()</inbound>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainOSGi.configureEnvironment()</inbound>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainOSGi.configureProvisioningBundle()</inbound>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainStatic.configureEnvironment()</inbound>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.GlassFishActivator.setEnv(java.util.Properties)</inbound>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.GlassFishMain.main(java.lang.String[])</inbound>
            </feature>
        </class>
        <class confirmed="no">
            <name>java.lang.Thread</name>
            <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainOSGi.setupLauncherClassLoader()</inbound>
            <inbound type="class" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.GlassFishMain$Launcher$1</inbound>
            <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.GlassFishMain$Launcher.addShutdownHook()</inbound>
            <feature confirmed="no">
                <name>java.lang.Thread.Thread(java.lang.Runnable, java.lang.String)</name>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainEquinox.launchOSGiFW()</inbound>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainFelix.launchOSGiFW()</inbound>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainKnopflerFish.launchOSGiFW()</inbound>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainStatic.start(java.util.Properties)</inbound>
            </feature>
            <feature confirmed="no">
                <name>java.lang.Thread.Thread(java.lang.String)</name>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.GlassFishMain$Launcher$1.GlassFishMain$Launcher$1(java.lang.String)</inbound>
            </feature>
            <feature confirmed="no">
                <name>java.lang.Thread.currentThread()</name>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainOSGi.setupLauncherClassLoader()</inbound>
            </feature>
            <feature confirmed="no">
                <name>java.lang.Thread.join()</name>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainStatic.start(java.util.Properties)</inbound>
            </feature>
            <feature confirmed="no">
                <name>java.lang.Thread.setContextClassLoader(java.lang.ClassLoader)</name>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainOSGi.setupLauncherClassLoader()</inbound>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainStatic.start(java.util.Properties)</inbound>
            </feature>
            <feature confirmed="no">
                <name>java.lang.Thread.setDaemon(boolean)</name>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainEquinox.launchOSGiFW()</inbound>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainFelix.launchOSGiFW()</inbound>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainKnopflerFish.launchOSGiFW()</inbound>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainStatic.start(java.util.Properties)</inbound>
            </feature>
            <feature confirmed="no">
                <name>java.lang.Thread.start()</name>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainEquinox.launchOSGiFW()</inbound>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainFelix.launchOSGiFW()</inbound>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainKnopflerFish.launchOSGiFW()</inbound>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainStatic.start(java.util.Properties)</inbound>
            </feature>
        </class>
        <class confirmed="no">
            <name>java.lang.Throwable</name>
            <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASEmbedded.start(java.util.Properties)</inbound>
            <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMain.main(java.lang.String[])</inbound>
            <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainEquinox$1.run()</inbound>
            <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainFelix$1.run()</inbound>
            <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainHelper$ClassLoaderBuilder.addJDKToolsJar()</inbound>
            <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainHelper.createLauncherCL(java.util.Properties, java.lang.ClassLoader)</inbound>
            <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainHelper.mergePlatformConfiguration(java.util.Properties)</inbound>
            <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainHelper.parseAsEnv(java.io.File)</inbound>
            <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainKnopflerFish$1.run()</inbound>
            <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainNonOSGi.flushAndCreate(java.io.File, long)</inbound>
            <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainNonOSGi.isCacheOutdated(long, java.io.File)</inbound>
            <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainOSGi.addJDKToolsJar(com.sun.enterprise.glassfish.bootstrap.ClassPathBuilder)</inbound>
            <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainOSGi.setupLauncherClassLoader()</inbound>
            <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainStatic$1.run()</inbound>
            <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.AutoProcessor.processAutoProperties(java.util.Map, org.osgi.framework.BundleContext)</inbound>
            <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ExtensibleClassLoader.addURI(java.net.URI)</inbound>
            <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.GlassFishActivator$1$1.start()</inbound>
            <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.GlassFishActivator$1$1.stop()</inbound>
            <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.Rejar.processDirectory(java.util.jar.JarOutputStream, java.io.File, java.util.Set, java.util.Map)</inbound>
        </class>
        <class confirmed="no">
            <name>java.lang.UnsupportedOperationException</name>
            <feature confirmed="no">
                <name>java.lang.UnsupportedOperationException.UnsupportedOperationException()</name>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.GlassFishActivator$1$1.dispose()</inbound>
            </feature>
        </class>
    </package>
    <package confirmed="no">
        <name>java.lang.reflect</name>
        <class confirmed="no">
            <name>java.lang.reflect.InvocationTargetException</name>
            <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainEquinox$1.run()</inbound>
            <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainFelix$1.run()</inbound>
            <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainKnopflerFish$1.run()</inbound>
        </class>
        <class confirmed="no">
            <name>java.lang.reflect.Method</name>
            <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainEquinox$1.ASMainEquinox$1(com.sun.enterprise.glassfish.bootstrap.ASMainEquinox, java.lang.reflect.Method, java.lang.String[])</inbound>
            <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainEquinox$1.run()</inbound>
            <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainEquinox$1.val$m</inbound>
            <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainEquinox.launchOSGiFW()</inbound>
            <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainFelix$1.ASMainFelix$1(com.sun.enterprise.glassfish.bootstrap.ASMainFelix, java.lang.reflect.Method, java.lang.String[])</inbound>
            <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainFelix$1.run()</inbound>
            <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainFelix$1.val$m</inbound>
            <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainFelix.launchOSGiFW()</inbound>
            <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainKnopflerFish$1.ASMainKnopflerFish$1(com.sun.enterprise.glassfish.bootstrap.ASMainKnopflerFish, java.lang.reflect.Method, java.lang.String[])</inbound>
            <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainKnopflerFish$1.run()</inbound>
            <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainKnopflerFish$1.val$m</inbound>
            <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainKnopflerFish.launchOSGiFW()</inbound>
            <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.GlassFishMain.main(java.lang.String[])</inbound>
            <feature confirmed="no">
                <name>java.lang.reflect.Method.invoke(java.lang.Object, java.lang.Object[])</name>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainEquinox$1.run()</inbound>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainFelix$1.run()</inbound>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainKnopflerFish$1.run()</inbound>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.GlassFishMain.main(java.lang.String[])</inbound>
            </feature>
        </class>
    </package>
    <package confirmed="no">
        <name>java.net</name>
        <class confirmed="no">
            <name>java.net.JarURLConnection</name>
            <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.Util.whichJar(java.lang.Class)</inbound>
            <feature confirmed="no">
                <name>java.net.JarURLConnection.getJarFileURL()</name>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.Util.whichJar(java.lang.Class)</inbound>
            </feature>
        </class>
        <class confirmed="no">
            <name>java.net.MalformedURLException</name>
            <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainHelper.addPaths(java.io.File, java.lang.String[], java.util.List)</inbound>
            <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainNonOSGi.flushAndCreate(java.io.File, long)</inbound>
            <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainNonOSGi.isCacheOutdated(long, java.io.File)</inbound>
            <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainStatic.getJarFileURL(java.net.URL)</inbound>
            <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ExtensibleClassLoader.addURI(java.net.URI)</inbound>
        </class>
        <class confirmed="no">
            <name>java.net.URI</name>
            <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainFelix.launchOSGiFW()</inbound>
            <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainHelper.addPaths(java.io.File, java.lang.String[], java.util.List)</inbound>
            <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainHelper.buildStartupContext(java.lang.String, java.io.File, java.io.File, java.lang.String[])</inbound>
            <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainHelper.findInstallRootURI(java.util.Properties)</inbound>
            <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainKnopflerFish.launchOSGiFW()</inbound>
            <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainNonOSGi.flushAndCreate(java.io.File, long)</inbound>
            <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainNonOSGi.isCacheOutdated(long, java.io.File)</inbound>
            <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainNonOSGi.loadCacheInformation(java.io.File)</inbound>
            <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainNonOSGi.saveCacheInformation(java.io.File, java.lang.String, long)</inbound>
            <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainOSGi.configureEnvironment()</inbound>
            <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainStatic.configureEnvironment()</inbound>
            <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainStatic.createClassLoader(java.io.File)</inbound>
            <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainStatic.findDerbyClient(java.util.List)</inbound>
            <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainStatic.processFile(java.io.File, java.util.Set, java.util.List)</inbound>
            <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ClassPathBuilder.addJar(java.io.File)</inbound>
            <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ExtensibleClassLoader.ExtensibleClassLoader(java.net.URL[], java.lang.ClassLoader, java.util.List)</inbound>
            <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ExtensibleClassLoader.addURI(java.net.URI)</inbound>
            <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ExtensibleClassLoader.added(java.net.URI)</inbound>
            <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ExtensibleClassLoader.jarAdded(java.net.URI)</inbound>
            <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ExtensibleClassLoader.jarRemoved(java.net.URI)</inbound>
            <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ExtensibleClassLoader.removed(java.net.URI)</inbound>
            <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.GlassFishActivator.setEnv(java.util.Properties)</inbound>
            <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.GlassFishMain.main(java.lang.String[])</inbound>
            <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.Util.whichJar(java.lang.Class)</inbound>
            <inbound type="feature" confirmed="yes">org.glassfish.experimentalgfapi.Deployer.deploy(java.net.URI)</inbound>
            <feature confirmed="no">
                <name>java.net.URI.URI(java.lang.String)</name>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainHelper.findInstallRootURI(java.util.Properties)</inbound>
            </feature>
            <feature confirmed="no">
                <name>java.net.URI.create(java.lang.String)</name>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainHelper.findInstallRootURI(java.util.Properties)</inbound>
            </feature>
            <feature confirmed="no">
                <name>java.net.URI.getScheme()</name>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainHelper.findInstallRootURI(java.util.Properties)</inbound>
            </feature>
            <feature confirmed="no">
                <name>java.net.URI.toString()</name>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainHelper.buildStartupContext(java.lang.String, java.io.File, java.io.File, java.lang.String[])</inbound>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainKnopflerFish.launchOSGiFW()</inbound>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainOSGi.configureEnvironment()</inbound>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainStatic.configureEnvironment()</inbound>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.GlassFishActivator.setEnv(java.util.Properties)</inbound>
            </feature>
            <feature confirmed="no">
                <name>java.net.URI.toURL()</name>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainFelix.launchOSGiFW()</inbound>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainHelper.addPaths(java.io.File, java.lang.String[], java.util.List)</inbound>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainKnopflerFish.launchOSGiFW()</inbound>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainNonOSGi.flushAndCreate(java.io.File, long)</inbound>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainNonOSGi.isCacheOutdated(long, java.io.File)</inbound>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainNonOSGi.loadCacheInformation(java.io.File)</inbound>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainNonOSGi.saveCacheInformation(java.io.File, java.lang.String, long)</inbound>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainStatic.createClassLoader(java.io.File)</inbound>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainStatic.findDerbyClient(java.util.List)</inbound>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainStatic.processFile(java.io.File, java.util.Set, java.util.List)</inbound>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ClassPathBuilder.addJar(java.io.File)</inbound>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ExtensibleClassLoader.addURI(java.net.URI)</inbound>
            </feature>
        </class>
        <class confirmed="no">
            <name>java.net.URISyntaxException</name>
            <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainHelper.findInstallRootURI(java.util.Properties)</inbound>
        </class>
        <class confirmed="no">
            <name>java.net.URL</name>
            <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainFelix.launchOSGiFW()</inbound>
            <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainHelper.addPaths(java.io.File, java.lang.String[], java.util.List)</inbound>
            <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainKnopflerFish.launchOSGiFW()</inbound>
            <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainNonOSGi.flushAndCreate(java.io.File, long)</inbound>
            <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainNonOSGi.isCacheOutdated(long, java.io.File)</inbound>
            <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainNonOSGi.loadCacheInformation(java.io.File)</inbound>
            <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainNonOSGi.saveCacheInformation(java.io.File, java.lang.String, long)</inbound>
            <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainStatic.createClassLoader(java.io.File)</inbound>
            <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainStatic.createTmpClassLoader(java.lang.ClassLoader, java.io.File)</inbound>
            <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainStatic.findDerbyClient(java.util.List)</inbound>
            <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainStatic.getAlreadyLoadedModules()</inbound>
            <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainStatic.getJarFileURL(java.net.URL)</inbound>
            <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainStatic.processFile(java.io.File, java.util.Set, java.util.List)</inbound>
            <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ClassPathBuilder.addJar(java.io.File)</inbound>
            <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ClassPathBuilder.create()</inbound>
            <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ClassPathBuilder.createExtensible(java.util.List)</inbound>
            <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ExtensibleClassLoader.ExtensibleClassLoader(java.net.URL[], java.lang.ClassLoader, java.util.List)</inbound>
            <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ExtensibleClassLoader.addURI(java.net.URI)</inbound>
            <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.MaskingClassLoader$1.nextElement()</inbound>
            <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.MaskingClassLoader.getResource(java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.Util.whichJar(java.lang.Class)</inbound>
            <feature confirmed="no">
                <name>java.net.URL.URL(java.lang.String)</name>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainStatic.getJarFileURL(java.net.URL)</inbound>
            </feature>
            <feature confirmed="no">
                <name>java.net.URL.openConnection()</name>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.Util.whichJar(java.lang.Class)</inbound>
            </feature>
            <feature confirmed="no">
                <name>java.net.URL.openStream()</name>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainStatic.getAlreadyLoadedModules()</inbound>
            </feature>
            <feature confirmed="no">
                <name>java.net.URL.toExternalForm()</name>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainStatic.getJarFileURL(java.net.URL)</inbound>
            </feature>
            <feature confirmed="no">
                <name>java.net.URL.toString()</name>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainFelix.launchOSGiFW()</inbound>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainKnopflerFish.launchOSGiFW()</inbound>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainNonOSGi.flushAndCreate(java.io.File, long)</inbound>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainNonOSGi.isCacheOutdated(long, java.io.File)</inbound>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainNonOSGi.loadCacheInformation(java.io.File)</inbound>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainNonOSGi.saveCacheInformation(java.io.File, java.lang.String, long)</inbound>
            </feature>
            <feature confirmed="no">
                <name>java.net.URL.toURI()</name>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.Util.whichJar(java.lang.Class)</inbound>
            </feature>
        </class>
        <class confirmed="no">
            <name>java.net.URLClassLoader</name>
            <inbound type="class" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ExtensibleClassLoader</inbound>
            <feature confirmed="no">
                <name>java.net.URLClassLoader.URLClassLoader(java.net.URL[], java.lang.ClassLoader)</name>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainStatic.createClassLoader(java.io.File)</inbound>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainStatic.createTmpClassLoader(java.lang.ClassLoader, java.io.File)</inbound>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ClassPathBuilder.create()</inbound>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ExtensibleClassLoader.ExtensibleClassLoader(java.net.URL[], java.lang.ClassLoader, java.util.List)</inbound>
            </feature>
            <feature confirmed="no">
                <name>java.net.URLClassLoader.addURL(java.net.URL)</name>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ExtensibleClassLoader.addURI(java.net.URI)</inbound>
            </feature>
        </class>
        <class confirmed="no">
            <name>java.net.URLConnection</name>
            <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.Util.whichJar(java.lang.Class)</inbound>
        </class>
        <class confirmed="no">
            <name>java.net.URL[]</name>
            <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainStatic.createClassLoader(java.io.File)</inbound>
            <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainStatic.createTmpClassLoader(java.lang.ClassLoader, java.io.File)</inbound>
            <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ClassPathBuilder.create()</inbound>
            <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ClassPathBuilder.createExtensible(java.util.List)</inbound>
        </class>
    </package>
    <package confirmed="no">
        <name>java.nio</name>
        <class confirmed="no">
            <name>java.nio.Buffer</name>
            <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.Rejar.copy(java.util.jar.JarFile, java.util.jar.JarEntry, java.nio.channels.WritableByteChannel)</inbound>
        </class>
        <class confirmed="no">
            <name>java.nio.ByteBuffer</name>
            <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.Rejar.copy(java.util.jar.JarFile, java.util.jar.JarEntry, java.nio.channels.WritableByteChannel)</inbound>
            <feature confirmed="no">
                <name>java.nio.ByteBuffer.allocate(int)</name>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.Rejar.copy(java.util.jar.JarFile, java.util.jar.JarEntry, java.nio.channels.WritableByteChannel)</inbound>
            </feature>
            <feature confirmed="no">
                <name>java.nio.ByteBuffer.rewind()</name>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.Rejar.copy(java.util.jar.JarFile, java.util.jar.JarEntry, java.nio.channels.WritableByteChannel)</inbound>
            </feature>
        </class>
    </package>
    <package confirmed="no">
        <name>java.nio.channels</name>
        <class confirmed="no">
            <name>java.nio.channels.Channels</name>
            <feature confirmed="no">
                <name>java.nio.channels.Channels.newChannel(java.io.InputStream)</name>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.Rejar.copy(java.util.jar.JarFile, java.util.jar.JarEntry, java.nio.channels.WritableByteChannel)</inbound>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.Util.copyWithoutClose(java.io.InputStream, java.io.FileOutputStream, long)</inbound>
            </feature>
            <feature confirmed="no">
                <name>java.nio.channels.Channels.newChannel(java.io.OutputStream)</name>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.Rejar.copy(java.util.jar.JarFile, java.util.jar.JarEntry, java.io.OutputStream)</inbound>
            </feature>
        </class>
        <class confirmed="no">
            <name>java.nio.channels.FileChannel</name>
            <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.Util.copyWithoutClose(java.io.InputStream, java.io.FileOutputStream, long)</inbound>
            <feature confirmed="no">
                <name>java.nio.channels.FileChannel.transferFrom(java.nio.channels.ReadableByteChannel, long, long)</name>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.Util.copyWithoutClose(java.io.InputStream, java.io.FileOutputStream, long)</inbound>
            </feature>
        </class>
        <class confirmed="no">
            <name>java.nio.channels.ReadableByteChannel</name>
            <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.Rejar.copy(java.util.jar.JarFile, java.util.jar.JarEntry, java.nio.channels.WritableByteChannel)</inbound>
            <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.Util.copyWithoutClose(java.io.InputStream, java.io.FileOutputStream, long)</inbound>
            <feature confirmed="no">
                <name>java.nio.channels.ReadableByteChannel.read(java.nio.ByteBuffer)</name>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.Rejar.copy(java.util.jar.JarFile, java.util.jar.JarEntry, java.nio.channels.WritableByteChannel)</inbound>
            </feature>
        </class>
        <class confirmed="no">
            <name>java.nio.channels.WritableByteChannel</name>
            <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.Rejar.copy(java.util.jar.JarFile, java.util.jar.JarEntry, java.io.OutputStream)</inbound>
            <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.Rejar.copy(java.util.jar.JarFile, java.util.jar.JarEntry, java.nio.channels.WritableByteChannel)</inbound>
            <feature confirmed="no">
                <name>java.nio.channels.WritableByteChannel.write(java.nio.ByteBuffer)</name>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.Rejar.copy(java.util.jar.JarFile, java.util.jar.JarEntry, java.nio.channels.WritableByteChannel)</inbound>
            </feature>
        </class>
    </package>
    <package confirmed="no">
        <name>java.util</name>
        <class confirmed="no">
            <name>java.util.ArrayList</name>
            <feature confirmed="no">
                <name>java.util.ArrayList.ArrayList()</name>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainStatic.createClassLoader(java.io.File)</inbound>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainStatic.createTmpClassLoader(java.lang.ClassLoader, java.io.File)</inbound>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainStatic.getMaskingClassLoader(java.lang.ClassLoader, java.util.Properties, boolean)</inbound>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ClassPathBuilder.ClassPathBuilder(java.lang.ClassLoader)</inbound>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.StartupContextUtil.getOriginalArguments(com.sun.enterprise.module.bootstrap.StartupContext)</inbound>
            </feature>
        </class>
        <class confirmed="no">
            <name>java.util.Collection</name>
            <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainStatic.getMaskingClassLoader(java.lang.ClassLoader, java.util.Properties, boolean)</inbound>
            <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.MaskingClassLoader.MaskingClassLoader(java.lang.ClassLoader, java.util.Collection, java.util.Collection)</inbound>
            <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.MaskingClassLoader.MaskingClassLoader(java.lang.ClassLoader, java.util.Collection, java.util.Collection, boolean)</inbound>
            <feature confirmed="no">
                <name>java.util.Collection.size()</name>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.MaskingClassLoader.MaskingClassLoader(java.lang.ClassLoader, java.util.Collection, java.util.Collection, boolean)</inbound>
            </feature>
            <feature confirmed="no">
                <name>java.util.Collection.toArray(java.lang.Object[])</name>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.MaskingClassLoader.MaskingClassLoader(java.lang.ClassLoader, java.util.Collection, java.util.Collection, boolean)</inbound>
            </feature>
        </class>
        <class confirmed="no">
            <name>java.util.Dictionary</name>
            <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.GlassFishActivator$1.newGlassFish(java.util.Properties)</inbound>
            <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.GlassFishActivator.dict2Properties(java.util.Dictionary)</inbound>
            <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.GlassFishActivator.registerGlassFishRuntime()</inbound>
            <feature confirmed="no">
                <name>java.util.Dictionary.get(java.lang.Object)</name>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.GlassFishActivator.dict2Properties(java.util.Dictionary)</inbound>
            </feature>
            <feature confirmed="no">
                <name>java.util.Dictionary.keys()</name>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.GlassFishActivator.dict2Properties(java.util.Dictionary)</inbound>
            </feature>
        </class>
        <class confirmed="no">
            <name>java.util.Enumeration</name>
            <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainStatic.getAlreadyLoadedModules()</inbound>
            <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.GlassFishActivator.dict2Properties(java.util.Dictionary)</inbound>
            <inbound type="class" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.MaskingClassLoader$1</inbound>
            <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.MaskingClassLoader.getResources(java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.Rejar.processDirectory(java.util.jar.JarOutputStream, java.io.File, java.util.Set, java.util.Map)</inbound>
            <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.Util.substVars(java.util.Properties)</inbound>
            <feature confirmed="no">
                <name>java.util.Enumeration.hasMoreElements()</name>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainStatic.getAlreadyLoadedModules()</inbound>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.GlassFishActivator.dict2Properties(java.util.Dictionary)</inbound>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.Rejar.processDirectory(java.util.jar.JarOutputStream, java.io.File, java.util.Set, java.util.Map)</inbound>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.Util.substVars(java.util.Properties)</inbound>
            </feature>
            <feature confirmed="no">
                <name>java.util.Enumeration.nextElement()</name>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainStatic.getAlreadyLoadedModules()</inbound>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.GlassFishActivator.dict2Properties(java.util.Dictionary)</inbound>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.Rejar.processDirectory(java.util.jar.JarOutputStream, java.io.File, java.util.Set, java.util.Map)</inbound>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.Util.substVars(java.util.Properties)</inbound>
            </feature>
        </class>
        <class confirmed="no">
            <name>java.util.HashMap</name>
            <feature confirmed="no">
                <name>java.util.HashMap.HashMap()</name>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.AutoProcessor.process(java.util.Map, org.osgi.framework.BundleContext)</inbound>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.GlassFishMain$Launcher.startConsole()</inbound>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.Rejar.rejar(java.io.File, java.io.File)</inbound>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.Util.substVars(java.lang.String, java.lang.String, java.util.Map, java.util.Properties)</inbound>
            </feature>
        </class>
        <class confirmed="no">
            <name>java.util.HashSet</name>
            <feature confirmed="no">
                <name>java.util.HashSet.HashSet()</name>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainStatic.getAlreadyLoadedModules()</inbound>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.MaskingClassLoader.MaskingClassLoader(java.lang.ClassLoader, java.util.Collection, java.util.Collection, boolean)</inbound>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.Rejar.rejar(java.io.File, java.io.File)</inbound>
            </feature>
        </class>
        <class confirmed="no">
            <name>java.util.Iterator</name>
            <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASEmbedded$EmbeddedMain.createHabitat(com.sun.enterprise.module.ModulesRegistry, com.sun.enterprise.module.bootstrap.StartupContext)</inbound>
            <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASEmbedded$EmbeddedMain.createInhabitantsParser(org.jvnet.hk2.component.Habitat)</inbound>
            <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainHelper.getMain(java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainStatic$1$1.createHabitat(com.sun.enterprise.module.ModulesRegistry, com.sun.enterprise.module.bootstrap.StartupContext)</inbound>
            <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainStatic$1$1.createInhabitantsParser(org.jvnet.hk2.component.Habitat)</inbound>
            <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.AutoProcessor.processAutoProperties(java.util.Map, org.osgi.framework.BundleContext)</inbound>
            <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ExtensibleClassLoader.ExtensibleClassLoader(java.net.URL[], java.lang.ClassLoader, java.util.List)</inbound>
            <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.GlassFishActivator.setEnv(java.util.Properties)</inbound>
            <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.OSGiGlassFishRuntimeBuilder.launchOSGiFrameWork()</inbound>
            <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.Rejar.rejar(java.io.File, java.io.File)</inbound>
            <inbound type="feature" confirmed="yes">org.glassfish.experimentalgfapi.GlassFishRuntime.getRuntimeBuilder(org.glassfish.experimentalgfapi.Constants$Platform, java.lang.ClassLoader)</inbound>
            <feature confirmed="no">
                <name>java.util.Iterator.hasNext()</name>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASEmbedded$EmbeddedMain.createHabitat(com.sun.enterprise.module.ModulesRegistry, com.sun.enterprise.module.bootstrap.StartupContext)</inbound>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASEmbedded$EmbeddedMain.createInhabitantsParser(org.jvnet.hk2.component.Habitat)</inbound>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainHelper.getMain(java.lang.String)</inbound>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainStatic$1$1.createHabitat(com.sun.enterprise.module.ModulesRegistry, com.sun.enterprise.module.bootstrap.StartupContext)</inbound>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainStatic$1$1.createInhabitantsParser(org.jvnet.hk2.component.Habitat)</inbound>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.AutoProcessor.processAutoProperties(java.util.Map, org.osgi.framework.BundleContext)</inbound>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ExtensibleClassLoader.ExtensibleClassLoader(java.net.URL[], java.lang.ClassLoader, java.util.List)</inbound>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.GlassFishActivator.setEnv(java.util.Properties)</inbound>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.OSGiGlassFishRuntimeBuilder.launchOSGiFrameWork()</inbound>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.Rejar.rejar(java.io.File, java.io.File)</inbound>
                <inbound type="feature" confirmed="yes">org.glassfish.experimentalgfapi.GlassFishRuntime.getRuntimeBuilder(org.glassfish.experimentalgfapi.Constants$Platform, java.lang.ClassLoader)</inbound>
            </feature>
            <feature confirmed="no">
                <name>java.util.Iterator.next()</name>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASEmbedded$EmbeddedMain.createHabitat(com.sun.enterprise.module.ModulesRegistry, com.sun.enterprise.module.bootstrap.StartupContext)</inbound>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASEmbedded$EmbeddedMain.createInhabitantsParser(org.jvnet.hk2.component.Habitat)</inbound>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainHelper.getMain(java.lang.String)</inbound>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainStatic$1$1.createHabitat(com.sun.enterprise.module.ModulesRegistry, com.sun.enterprise.module.bootstrap.StartupContext)</inbound>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainStatic$1$1.createInhabitantsParser(org.jvnet.hk2.component.Habitat)</inbound>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.AutoProcessor.processAutoProperties(java.util.Map, org.osgi.framework.BundleContext)</inbound>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ExtensibleClassLoader.ExtensibleClassLoader(java.net.URL[], java.lang.ClassLoader, java.util.List)</inbound>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.GlassFishActivator.setEnv(java.util.Properties)</inbound>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.OSGiGlassFishRuntimeBuilder.launchOSGiFrameWork()</inbound>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.Rejar.rejar(java.io.File, java.io.File)</inbound>
                <inbound type="feature" confirmed="yes">org.glassfish.experimentalgfapi.GlassFishRuntime.getRuntimeBuilder(org.glassfish.experimentalgfapi.Constants$Platform, java.lang.ClassLoader)</inbound>
            </feature>
        </class>
        <class confirmed="no">
            <name>java.util.List</name>
            <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASEmbedded$EmbeddedMain.createHabitat(com.sun.enterprise.module.ModulesRegistry, com.sun.enterprise.module.bootstrap.StartupContext)</inbound>
            <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainHelper.addPaths(java.io.File, java.lang.String[], java.util.List)</inbound>
            <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainStatic$1$1.createHabitat(com.sun.enterprise.module.ModulesRegistry, com.sun.enterprise.module.bootstrap.StartupContext)</inbound>
            <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainStatic.createClassLoader(java.io.File)</inbound>
            <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainStatic.createTmpClassLoader(java.lang.ClassLoader, java.io.File)</inbound>
            <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainStatic.findDerbyClient(java.util.List)</inbound>
            <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainStatic.insertURLs(java.io.File, java.util.Set, java.util.List)</inbound>
            <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainStatic.processFile(java.io.File, java.util.Set, java.util.List)</inbound>
            <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ClassPathBuilder.ClassPathBuilder(java.lang.ClassLoader)</inbound>
            <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ClassPathBuilder.addJar(java.io.File)</inbound>
            <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ClassPathBuilder.create()</inbound>
            <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ClassPathBuilder.createExtensible(java.util.List)</inbound>
            <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ClassPathBuilder.urls</inbound>
            <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ExtensibleClassLoader.ExtensibleClassLoader(java.net.URL[], java.lang.ClassLoader, java.util.List)</inbound>
            <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ProxyModule.getImports()</inbound>
            <feature confirmed="no">
                <name>java.util.List.add(java.lang.Object)</name>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainHelper.addPaths(java.io.File, java.lang.String[], java.util.List)</inbound>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainStatic.createClassLoader(java.io.File)</inbound>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainStatic.findDerbyClient(java.util.List)</inbound>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainStatic.getMaskingClassLoader(java.lang.ClassLoader, java.util.Properties, boolean)</inbound>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainStatic.processFile(java.io.File, java.util.Set, java.util.List)</inbound>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ClassPathBuilder.addJar(java.io.File)</inbound>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.StartupContextUtil.getOriginalArguments(com.sun.enterprise.module.bootstrap.StartupContext)</inbound>
            </feature>
            <feature confirmed="no">
                <name>java.util.List.iterator()</name>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASEmbedded$EmbeddedMain.createHabitat(com.sun.enterprise.module.ModulesRegistry, com.sun.enterprise.module.bootstrap.StartupContext)</inbound>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainStatic$1$1.createHabitat(com.sun.enterprise.module.ModulesRegistry, com.sun.enterprise.module.bootstrap.StartupContext)</inbound>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ExtensibleClassLoader.ExtensibleClassLoader(java.net.URL[], java.lang.ClassLoader, java.util.List)</inbound>
            </feature>
            <feature confirmed="no">
                <name>java.util.List.size()</name>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainStatic.createClassLoader(java.io.File)</inbound>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainStatic.createTmpClassLoader(java.lang.ClassLoader, java.io.File)</inbound>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ClassPathBuilder.create()</inbound>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ClassPathBuilder.createExtensible(java.util.List)</inbound>
            </feature>
            <feature confirmed="no">
                <name>java.util.List.toArray(java.lang.Object[])</name>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainStatic.createClassLoader(java.io.File)</inbound>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainStatic.createTmpClassLoader(java.lang.ClassLoader, java.io.File)</inbound>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ClassPathBuilder.create()</inbound>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ClassPathBuilder.createExtensible(java.util.List)</inbound>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.StartupContextUtil.getOriginalArguments(com.sun.enterprise.module.bootstrap.StartupContext)</inbound>
            </feature>
        </class>
        <class confirmed="no">
            <name>java.util.Map</name>
            <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainHelper.mergePlatformConfiguration(java.util.Properties)</inbound>
            <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.AutoProcessor.process(java.util.Map, org.osgi.framework.BundleContext)</inbound>
            <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.AutoProcessor.processAutoProperties(java.util.Map, org.osgi.framework.BundleContext)</inbound>
            <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.GlassFishMain$Launcher.startConsole()</inbound>
            <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.OSGiGlassFishRuntimeBuilder.launchOSGiFrameWork()</inbound>
            <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.Rejar.processDirectory(java.util.jar.JarOutputStream, java.io.File, java.util.Set, java.util.Map)</inbound>
            <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.Rejar.rejar(java.io.File, java.io.File)</inbound>
            <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.Util.substVars(java.lang.String, java.lang.String, java.util.Map, java.util.Properties)</inbound>
            <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.Util.substVars(java.util.Properties)</inbound>
            <inbound type="feature" confirmed="yes">org.glassfish.experimentalgfapi.Deployer.deploy(java.io.File, java.util.Map)</inbound>
            <inbound type="feature" confirmed="yes">org.glassfish.experimentalgfapi.Deployer.undeploy(java.lang.String, java.util.Map)</inbound>
            <feature confirmed="no">
                <name>java.util.Map.entrySet()</name>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.Rejar.rejar(java.io.File, java.io.File)</inbound>
            </feature>
            <feature confirmed="no">
                <name>java.util.Map.get(java.lang.Object)</name>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.AutoProcessor.processAutoProperties(java.util.Map, org.osgi.framework.BundleContext)</inbound>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.Rejar.processDirectory(java.util.jar.JarOutputStream, java.io.File, java.util.Set, java.util.Map)</inbound>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.Util.substVars(java.lang.String, java.lang.String, java.util.Map, java.util.Properties)</inbound>
            </feature>
            <feature confirmed="no">
                <name>java.util.Map.keySet()</name>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.AutoProcessor.processAutoProperties(java.util.Map, org.osgi.framework.BundleContext)</inbound>
            </feature>
            <feature confirmed="no">
                <name>java.util.Map.put(java.lang.Object, java.lang.Object)</name>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.Rejar.processDirectory(java.util.jar.JarOutputStream, java.io.File, java.util.Set, java.util.Map)</inbound>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.Util.substVars(java.lang.String, java.lang.String, java.util.Map, java.util.Properties)</inbound>
            </feature>
            <feature confirmed="no">
                <name>java.util.Map.remove(java.lang.Object)</name>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.Util.substVars(java.lang.String, java.lang.String, java.util.Map, java.util.Properties)</inbound>
            </feature>
        </class>
        <class confirmed="no">
            <name>java.util.Map$Entry</name>
            <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.Rejar.rejar(java.io.File, java.io.File)</inbound>
            <feature confirmed="no">
                <name>java.util.Map$Entry.getKey()</name>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.Rejar.rejar(java.io.File, java.io.File)</inbound>
            </feature>
            <feature confirmed="no">
                <name>java.util.Map$Entry.getValue()</name>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.Rejar.rejar(java.io.File, java.io.File)</inbound>
            </feature>
        </class>
        <class confirmed="no">
            <name>java.util.Properties</name>
            <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASEmbedded.start(java.util.Properties)</inbound>
            <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMain.main(java.lang.String[])</inbound>
            <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainHelper$ClassLoaderBuilder.ASMainHelper$ClassLoaderBuilder(java.util.Properties, java.lang.ClassLoader)</inbound>
            <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainHelper$ClassLoaderBuilder.addFrameworkJars()</inbound>
            <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainHelper$ClassLoaderBuilder.ctx</inbound>
            <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainHelper$ClassLoaderBuilder.findDerbyClient()</inbound>
            <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainHelper$PlatformHelper.getPlatformHelper(java.util.Properties)</inbound>
            <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainHelper$PlatformHelper.init(java.util.Properties)</inbound>
            <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainHelper$PlatformHelper.properties</inbound>
            <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainHelper$PlatformHelper.readPlatformConfiguration()</inbound>
            <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainHelper.addRawStartupInfo(java.lang.String[], java.util.Properties)</inbound>
            <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainHelper.buildStartupContext(java.lang.String, java.io.File, java.io.File, java.lang.String[])</inbound>
            <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainHelper.createLauncherCL(java.util.Properties, java.lang.ClassLoader)</inbound>
            <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainHelper.findInstallRootURI(java.util.Properties)</inbound>
            <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainHelper.findInstanceRoot(java.io.File, java.lang.String[])</inbound>
            <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainHelper.findInstanceRoot(java.io.File, java.util.Properties)</inbound>
            <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainHelper.getDefaultDomainsDir(java.util.Properties)</inbound>
            <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainHelper.getDomainRoot(java.util.Properties, java.util.Properties)</inbound>
            <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainHelper.getInstanceRoot(java.util.Properties, java.util.Properties)</inbound>
            <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainHelper.getParam(java.util.Properties, java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainHelper.mergePlatformConfiguration(java.util.Properties)</inbound>
            <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainHelper.parseAsEnv(java.io.File)</inbound>
            <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainHelper.setSystemProperties(java.util.Properties)</inbound>
            <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainHelper.wasStartedByCLI(java.util.Properties)</inbound>
            <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainNonOSGi.isCacheOutdated(long, java.io.File)</inbound>
            <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainNonOSGi.loadCacheInformation(java.io.File)</inbound>
            <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainNonOSGi.parse(java.util.Properties, java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainOSGi.configureEnvironment()</inbound>
            <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainOSGi.ctx</inbound>
            <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainOSGi.findDerbyClient(com.sun.enterprise.glassfish.bootstrap.ClassPathBuilder)</inbound>
            <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainOSGi.start(java.util.Properties)</inbound>
            <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainStatic.getMaskingClassLoader(java.lang.ClassLoader, java.io.File, java.util.logging.Logger, boolean)</inbound>
            <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainStatic.getMaskingClassLoader(java.lang.ClassLoader, java.util.Properties)</inbound>
            <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainStatic.getMaskingClassLoader(java.lang.ClassLoader, java.util.Properties, boolean)</inbound>
            <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainStatic.start(java.util.Properties)</inbound>
            <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.GlassFishActivator$1.newGlassFish(java.util.Properties)</inbound>
            <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.GlassFishActivator.access$000(com.sun.enterprise.glassfish.bootstrap.GlassFishActivator, java.util.Properties)</inbound>
            <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.GlassFishActivator.dict2Properties(java.util.Dictionary)</inbound>
            <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.GlassFishActivator.setEnv(java.util.Properties)</inbound>
            <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.GlassFishMain$Launcher.launch(java.util.Properties)</inbound>
            <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.GlassFishMain.main(java.lang.String[])</inbound>
            <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.OSGiGlassFishRuntime.newGlassFish(java.util.Properties)</inbound>
            <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.OSGiGlassFishRuntimeBuilder.build(java.util.Properties)</inbound>
            <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.OSGiGlassFishRuntimeBuilder.launchOSGiFrameWork()</inbound>
            <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.OSGiGlassFishRuntimeBuilder.properties</inbound>
            <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.StartupContextUtil.getInstallRoot(com.sun.enterprise.module.bootstrap.StartupContext)</inbound>
            <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.StartupContextUtil.getInstallRoot(java.util.Properties)</inbound>
            <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.StartupContextUtil.getInstanceRoot(com.sun.enterprise.module.bootstrap.StartupContext)</inbound>
            <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.StartupContextUtil.getInstanceRoot(java.util.Properties)</inbound>
            <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.StartupContextUtil.getOriginalArguments(com.sun.enterprise.module.bootstrap.StartupContext)</inbound>
            <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.Util.getPropertyOrSystemProperty(java.util.Properties, java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.Util.getPropertyOrSystemProperty(java.util.Properties, java.lang.String, java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.Util.substVars(java.lang.String, java.lang.String, java.util.Map, java.util.Properties)</inbound>
            <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.Util.substVars(java.util.Properties)</inbound>
            <inbound type="feature" confirmed="yes">org.glassfish.experimentalgfapi.Configurator.configure(java.util.Properties)</inbound>
            <inbound type="feature" confirmed="yes">org.glassfish.experimentalgfapi.GlassFishRuntime$RuntimeBuilder.build(java.util.Properties)</inbound>
            <inbound type="feature" confirmed="yes">org.glassfish.experimentalgfapi.GlassFishRuntime.bootstrap(java.util.Properties, java.lang.ClassLoader)</inbound>
            <inbound type="feature" confirmed="yes">org.glassfish.experimentalgfapi.GlassFishRuntime.newGlassFish(java.util.Properties)</inbound>
            <inbound type="feature" confirmed="yes">org.glassfish.experimentalgfapi.GlassFishRuntime.whichPlatform(java.util.Properties)</inbound>
            <feature confirmed="no">
                <name>java.util.Properties.Properties()</name>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainHelper$PlatformHelper.readPlatformConfiguration()</inbound>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainHelper.parseAsEnv(java.io.File)</inbound>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainNonOSGi.loadCacheInformation(java.io.File)</inbound>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainNonOSGi.saveCacheInformation(java.io.File, java.lang.String, long)</inbound>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainStatic.getMaskingClassLoader(java.lang.ClassLoader, java.io.File, java.util.logging.Logger, boolean)</inbound>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.GlassFishActivator.dict2Properties(java.util.Dictionary)</inbound>
            </feature>
            <feature confirmed="no">
                <name>java.util.Properties.clear()</name>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainHelper.mergePlatformConfiguration(java.util.Properties)</inbound>
            </feature>
            <feature confirmed="no">
                <name>java.util.Properties.getProperty(java.lang.String)</name>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainHelper$ClassLoaderBuilder.ASMainHelper$ClassLoaderBuilder(java.util.Properties, java.lang.ClassLoader)</inbound>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainHelper$ClassLoaderBuilder.findDerbyClient()</inbound>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainHelper$PlatformHelper.getPlatformHelper(java.util.Properties)</inbound>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainHelper.buildStartupContext(java.lang.String, java.io.File, java.io.File, java.lang.String[])</inbound>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainHelper.getDefaultDomainsDir(java.util.Properties)</inbound>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainHelper.getParam(java.util.Properties, java.lang.String)</inbound>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainHelper.setSystemProperties(java.util.Properties)</inbound>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainHelper.wasStartedByCLI(java.util.Properties)</inbound>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainNonOSGi.isCacheOutdated(long, java.io.File)</inbound>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainNonOSGi.loadCacheInformation(java.io.File)</inbound>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainNonOSGi.parse(java.util.Properties, java.lang.String)</inbound>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainOSGi.findDerbyClient(com.sun.enterprise.glassfish.bootstrap.ClassPathBuilder)</inbound>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainStatic.getMaskingClassLoader(java.lang.ClassLoader, java.util.Properties, boolean)</inbound>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.GlassFishActivator.setEnv(java.util.Properties)</inbound>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.StartupContextUtil.getInstallRoot(java.util.Properties)</inbound>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.StartupContextUtil.getInstanceRoot(java.util.Properties)</inbound>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.StartupContextUtil.getOriginalArguments(com.sun.enterprise.module.bootstrap.StartupContext)</inbound>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.Util.getPropertyOrSystemProperty(java.util.Properties, java.lang.String, java.lang.String)</inbound>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.Util.substVars(java.util.Properties)</inbound>
                <inbound type="feature" confirmed="yes">org.glassfish.experimentalgfapi.GlassFishRuntime.whichPlatform(java.util.Properties)</inbound>
            </feature>
            <feature confirmed="no">
                <name>java.util.Properties.getProperty(java.lang.String, java.lang.String)</name>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.Util.substVars(java.lang.String, java.lang.String, java.util.Map, java.util.Properties)</inbound>
            </feature>
            <feature confirmed="no">
                <name>java.util.Properties.load(java.io.InputStream)</name>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainHelper$PlatformHelper.readPlatformConfiguration()</inbound>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainNonOSGi.loadCacheInformation(java.io.File)</inbound>
            </feature>
            <feature confirmed="no">
                <name>java.util.Properties.load(java.io.Reader)</name>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainStatic.getMaskingClassLoader(java.lang.ClassLoader, java.io.File, java.util.logging.Logger, boolean)</inbound>
            </feature>
            <feature confirmed="no">
                <name>java.util.Properties.propertyNames()</name>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.Util.substVars(java.util.Properties)</inbound>
            </feature>
            <feature confirmed="no">
                <name>java.util.Properties.put(java.lang.Object, java.lang.Object)</name>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainHelper.addRawStartupInfo(java.lang.String[], java.util.Properties)</inbound>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainHelper.parseAsEnv(java.io.File)</inbound>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainNonOSGi.saveCacheInformation(java.io.File, java.lang.String, long)</inbound>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.GlassFishActivator.dict2Properties(java.util.Dictionary)</inbound>
            </feature>
            <feature confirmed="no">
                <name>java.util.Properties.putAll(java.util.Map)</name>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainHelper.mergePlatformConfiguration(java.util.Properties)</inbound>
            </feature>
            <feature confirmed="no">
                <name>java.util.Properties.setProperty(java.lang.String, java.lang.String)</name>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainHelper.buildStartupContext(java.lang.String, java.io.File, java.io.File, java.lang.String[])</inbound>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.Util.substVars(java.util.Properties)</inbound>
            </feature>
            <feature confirmed="no">
                <name>java.util.Properties.store(java.io.OutputStream, java.lang.String)</name>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainNonOSGi.saveCacheInformation(java.io.File, java.lang.String, long)</inbound>
            </feature>
            <feature confirmed="no">
                <name>java.util.Properties.store(java.io.Writer, java.lang.String)</name>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainOSGi.configureEnvironment()</inbound>
            </feature>
            <feature confirmed="no">
                <name>java.util.Properties.stringPropertyNames()</name>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.GlassFishActivator.setEnv(java.util.Properties)</inbound>
            </feature>
        </class>
        <class confirmed="no">
            <name>java.util.ServiceLoader</name>
            <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASEmbedded$EmbeddedMain.createInhabitantsParser(org.jvnet.hk2.component.Habitat)</inbound>
            <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainHelper.getMain(java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainStatic$1$1.createInhabitantsParser(org.jvnet.hk2.component.Habitat)</inbound>
            <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.OSGiGlassFishRuntimeBuilder.launchOSGiFrameWork()</inbound>
            <inbound type="feature" confirmed="yes">org.glassfish.experimentalgfapi.GlassFishRuntime.getRuntimeBuilder(org.glassfish.experimentalgfapi.Constants$Platform, java.lang.ClassLoader)</inbound>
            <feature confirmed="no">
                <name>java.util.ServiceLoader.iterator()</name>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASEmbedded$EmbeddedMain.createInhabitantsParser(org.jvnet.hk2.component.Habitat)</inbound>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainHelper.getMain(java.lang.String)</inbound>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainStatic$1$1.createInhabitantsParser(org.jvnet.hk2.component.Habitat)</inbound>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.OSGiGlassFishRuntimeBuilder.launchOSGiFrameWork()</inbound>
                <inbound type="feature" confirmed="yes">org.glassfish.experimentalgfapi.GlassFishRuntime.getRuntimeBuilder(org.glassfish.experimentalgfapi.Constants$Platform, java.lang.ClassLoader)</inbound>
            </feature>
            <feature confirmed="no">
                <name>java.util.ServiceLoader.load(java.lang.Class, java.lang.ClassLoader)</name>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASEmbedded$EmbeddedMain.createInhabitantsParser(org.jvnet.hk2.component.Habitat)</inbound>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainHelper.getMain(java.lang.String)</inbound>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainStatic$1$1.createInhabitantsParser(org.jvnet.hk2.component.Habitat)</inbound>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.OSGiGlassFishRuntimeBuilder.launchOSGiFrameWork()</inbound>
                <inbound type="feature" confirmed="yes">org.glassfish.experimentalgfapi.GlassFishRuntime.getRuntimeBuilder(org.glassfish.experimentalgfapi.Constants$Platform, java.lang.ClassLoader)</inbound>
            </feature>
        </class>
        <class confirmed="no">
            <name>java.util.Set</name>
            <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainStatic.createTmpClassLoader(java.lang.ClassLoader, java.io.File)</inbound>
            <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainStatic.getAlreadyLoadedModules()</inbound>
            <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainStatic.insertURLs(java.io.File, java.util.Set, java.util.List)</inbound>
            <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainStatic.processFile(java.io.File, java.util.Set, java.util.List)</inbound>
            <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.AutoProcessor.processAutoProperties(java.util.Map, org.osgi.framework.BundleContext)</inbound>
            <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.GlassFishActivator.setEnv(java.util.Properties)</inbound>
            <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.MaskingClassLoader.MaskingClassLoader(java.lang.ClassLoader, java.util.Collection, java.util.Collection, boolean)</inbound>
            <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.MaskingClassLoader.isDottedNameLoadableByParent(java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.MaskingClassLoader.punchins</inbound>
            <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.Rejar.processDirectory(java.util.jar.JarOutputStream, java.io.File, java.util.Set, java.util.Map)</inbound>
            <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.Rejar.rejar(java.io.File, java.io.File)</inbound>
            <feature confirmed="no">
                <name>java.util.Set.add(java.lang.Object)</name>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainStatic.getAlreadyLoadedModules()</inbound>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainStatic.processFile(java.io.File, java.util.Set, java.util.List)</inbound>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.Rejar.processDirectory(java.util.jar.JarOutputStream, java.io.File, java.util.Set, java.util.Map)</inbound>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.Rejar.rejar(java.io.File, java.io.File)</inbound>
            </feature>
            <feature confirmed="no">
                <name>java.util.Set.addAll(java.util.Collection)</name>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.MaskingClassLoader.MaskingClassLoader(java.lang.ClassLoader, java.util.Collection, java.util.Collection, boolean)</inbound>
            </feature>
            <feature confirmed="no">
                <name>java.util.Set.contains(java.lang.Object)</name>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainStatic.processFile(java.io.File, java.util.Set, java.util.List)</inbound>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.MaskingClassLoader.isDottedNameLoadableByParent(java.lang.String)</inbound>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.Rejar.processDirectory(java.util.jar.JarOutputStream, java.io.File, java.util.Set, java.util.Map)</inbound>
            </feature>
            <feature confirmed="no">
                <name>java.util.Set.iterator()</name>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.AutoProcessor.processAutoProperties(java.util.Map, org.osgi.framework.BundleContext)</inbound>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.GlassFishActivator.setEnv(java.util.Properties)</inbound>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.Rejar.rejar(java.io.File, java.io.File)</inbound>
            </feature>
        </class>
        <class confirmed="no">
            <name>java.util.StringTokenizer</name>
            <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.AutoProcessor.nextLocation(java.util.StringTokenizer)</inbound>
            <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.AutoProcessor.processAutoProperties(java.util.Map, org.osgi.framework.BundleContext)</inbound>
            <feature confirmed="no">
                <name>java.util.StringTokenizer.StringTokenizer(java.lang.String)</name>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainStatic.processFile(java.io.File, java.util.Set, java.util.List)</inbound>
            </feature>
            <feature confirmed="no">
                <name>java.util.StringTokenizer.StringTokenizer(java.lang.String, java.lang.String)</name>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainStatic.getMaskingClassLoader(java.lang.ClassLoader, java.util.Properties, boolean)</inbound>
            </feature>
            <feature confirmed="no">
                <name>java.util.StringTokenizer.StringTokenizer(java.lang.String, java.lang.String, boolean)</name>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.AutoProcessor.processAutoProperties(java.util.Map, org.osgi.framework.BundleContext)</inbound>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.StartupContextUtil.getOriginalArguments(com.sun.enterprise.module.bootstrap.StartupContext)</inbound>
            </feature>
            <feature confirmed="no">
                <name>java.util.StringTokenizer.countTokens()</name>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.AutoProcessor.nextLocation(java.util.StringTokenizer)</inbound>
            </feature>
            <feature confirmed="no">
                <name>java.util.StringTokenizer.hasMoreTokens()</name>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainStatic.getMaskingClassLoader(java.lang.ClassLoader, java.util.Properties, boolean)</inbound>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainStatic.processFile(java.io.File, java.util.Set, java.util.List)</inbound>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.AutoProcessor.nextLocation(java.util.StringTokenizer)</inbound>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.StartupContextUtil.getOriginalArguments(com.sun.enterprise.module.bootstrap.StartupContext)</inbound>
            </feature>
            <feature confirmed="no">
                <name>java.util.StringTokenizer.nextToken()</name>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainStatic.getMaskingClassLoader(java.lang.ClassLoader, java.util.Properties, boolean)</inbound>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainStatic.processFile(java.io.File, java.util.Set, java.util.List)</inbound>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.StartupContextUtil.getOriginalArguments(com.sun.enterprise.module.bootstrap.StartupContext)</inbound>
            </feature>
            <feature confirmed="no">
                <name>java.util.StringTokenizer.nextToken(java.lang.String)</name>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.AutoProcessor.nextLocation(java.util.StringTokenizer)</inbound>
            </feature>
        </class>
    </package>
    <package confirmed="no">
        <name>java.util.jar</name>
        <class confirmed="no">
            <name>java.util.jar.Attributes</name>
            <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainStatic.getAlreadyLoadedModules()</inbound>
            <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainStatic.processFile(java.io.File, java.util.Set, java.util.List)</inbound>
            <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.Rejar.getManifest()</inbound>
            <feature confirmed="no">
                <name>java.util.jar.Attributes.getValue(java.lang.String)</name>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainStatic.getAlreadyLoadedModules()</inbound>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainStatic.processFile(java.io.File, java.util.Set, java.util.List)</inbound>
            </feature>
            <feature confirmed="no">
                <name>java.util.jar.Attributes.put(java.lang.Object, java.lang.Object)</name>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.Rejar.getManifest()</inbound>
            </feature>
        </class>
        <class confirmed="no">
            <name>java.util.jar.Attributes$Name</name>
            <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.Rejar.getManifest()</inbound>
            <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.Rejar.rejar(java.io.File, java.io.File)</inbound>
            <feature confirmed="no">
                <name>java.util.jar.Attributes$Name.MAIN_CLASS</name>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.Rejar.getManifest()</inbound>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.Rejar.rejar(java.io.File, java.io.File)</inbound>
            </feature>
            <feature confirmed="no">
                <name>java.util.jar.Attributes$Name.MANIFEST_VERSION</name>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.Rejar.getManifest()</inbound>
            </feature>
            <feature confirmed="no">
                <name>java.util.jar.Attributes$Name.toString()</name>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.Rejar.rejar(java.io.File, java.io.File)</inbound>
            </feature>
        </class>
        <class confirmed="no">
            <name>java.util.jar.JarEntry</name>
            <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.Rejar.copy(java.util.jar.JarFile, java.util.jar.JarEntry, java.io.OutputStream)</inbound>
            <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.Rejar.copy(java.util.jar.JarFile, java.util.jar.JarEntry, java.nio.channels.WritableByteChannel)</inbound>
            <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.Rejar.copy(java.util.jar.JarFile, java.util.jar.JarEntry, java.util.jar.JarOutputStream)</inbound>
            <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.Rejar.processDirectory(java.util.jar.JarOutputStream, java.io.File, java.util.Set, java.util.Map)</inbound>
            <feature confirmed="no">
                <name>java.util.jar.JarEntry.JarEntry(java.lang.String)</name>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.Rejar.copy(byte[], java.lang.String, java.util.jar.JarOutputStream)</inbound>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.Rejar.copy(java.util.jar.JarFile, java.util.jar.JarEntry, java.util.jar.JarOutputStream)</inbound>
            </feature>
            <feature confirmed="no">
                <name>java.util.jar.JarEntry.getName()</name>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.Rejar.copy(java.util.jar.JarFile, java.util.jar.JarEntry, java.util.jar.JarOutputStream)</inbound>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.Rejar.processDirectory(java.util.jar.JarOutputStream, java.io.File, java.util.Set, java.util.Map)</inbound>
            </feature>
            <feature confirmed="no">
                <name>java.util.jar.JarEntry.getSize()</name>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.Rejar.copy(java.util.jar.JarFile, java.util.jar.JarEntry, java.nio.channels.WritableByteChannel)</inbound>
            </feature>
            <feature confirmed="no">
                <name>java.util.jar.JarEntry.isDirectory()</name>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.Rejar.processDirectory(java.util.jar.JarOutputStream, java.io.File, java.util.Set, java.util.Map)</inbound>
            </feature>
        </class>
        <class confirmed="no">
            <name>java.util.jar.JarFile</name>
            <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.Rejar.copy(java.util.jar.JarFile, java.util.jar.JarEntry, java.io.OutputStream)</inbound>
            <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.Rejar.copy(java.util.jar.JarFile, java.util.jar.JarEntry, java.nio.channels.WritableByteChannel)</inbound>
            <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.Rejar.copy(java.util.jar.JarFile, java.util.jar.JarEntry, java.util.jar.JarOutputStream)</inbound>
            <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.Rejar.processDirectory(java.util.jar.JarOutputStream, java.io.File, java.util.Set, java.util.Map)</inbound>
            <feature confirmed="no">
                <name>java.util.jar.JarFile.JarFile(java.io.File)</name>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainStatic.processFile(java.io.File, java.util.Set, java.util.List)</inbound>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.Rejar.processDirectory(java.util.jar.JarOutputStream, java.io.File, java.util.Set, java.util.Map)</inbound>
            </feature>
            <feature confirmed="no">
                <name>java.util.jar.JarFile.close()</name>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.Rejar.processDirectory(java.util.jar.JarOutputStream, java.io.File, java.util.Set, java.util.Map)</inbound>
            </feature>
            <feature confirmed="no">
                <name>java.util.jar.JarFile.entries()</name>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.Rejar.processDirectory(java.util.jar.JarOutputStream, java.io.File, java.util.Set, java.util.Map)</inbound>
            </feature>
            <feature confirmed="no">
                <name>java.util.jar.JarFile.getInputStream(java.util.zip.ZipEntry)</name>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.Rejar.copy(java.util.jar.JarFile, java.util.jar.JarEntry, java.nio.channels.WritableByteChannel)</inbound>
            </feature>
            <feature confirmed="no">
                <name>java.util.jar.JarFile.getManifest()</name>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainStatic.processFile(java.io.File, java.util.Set, java.util.List)</inbound>
            </feature>
        </class>
        <class confirmed="no">
            <name>java.util.jar.JarOutputStream</name>
            <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.Rejar.copy(byte[], java.lang.String, java.util.jar.JarOutputStream)</inbound>
            <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.Rejar.copy(java.util.jar.JarFile, java.util.jar.JarEntry, java.util.jar.JarOutputStream)</inbound>
            <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.Rejar.processDirectory(java.util.jar.JarOutputStream, java.io.File, java.util.Set, java.util.Map)</inbound>
            <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.Rejar.rejar(java.io.File, java.io.File)</inbound>
            <feature confirmed="no">
                <name>java.util.jar.JarOutputStream.JarOutputStream(java.io.OutputStream, java.util.jar.Manifest)</name>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.Rejar.rejar(java.io.File, java.io.File)</inbound>
            </feature>
            <feature confirmed="no">
                <name>java.util.jar.JarOutputStream.close()</name>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.Rejar.rejar(java.io.File, java.io.File)</inbound>
            </feature>
            <feature confirmed="no">
                <name>java.util.jar.JarOutputStream.closeEntry()</name>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.Rejar.copy(byte[], java.lang.String, java.util.jar.JarOutputStream)</inbound>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.Rejar.copy(java.util.jar.JarFile, java.util.jar.JarEntry, java.util.jar.JarOutputStream)</inbound>
            </feature>
            <feature confirmed="no">
                <name>java.util.jar.JarOutputStream.flush()</name>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.Rejar.copy(java.util.jar.JarFile, java.util.jar.JarEntry, java.util.jar.JarOutputStream)</inbound>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.Rejar.rejar(java.io.File, java.io.File)</inbound>
            </feature>
            <feature confirmed="no">
                <name>java.util.jar.JarOutputStream.putNextEntry(java.util.zip.ZipEntry)</name>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.Rejar.copy(byte[], java.lang.String, java.util.jar.JarOutputStream)</inbound>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.Rejar.copy(java.util.jar.JarFile, java.util.jar.JarEntry, java.util.jar.JarOutputStream)</inbound>
            </feature>
            <feature confirmed="no">
                <name>java.util.jar.JarOutputStream.write(byte[])</name>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.Rejar.copy(byte[], java.lang.String, java.util.jar.JarOutputStream)</inbound>
            </feature>
        </class>
        <class confirmed="no">
            <name>java.util.jar.Manifest</name>
            <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainStatic.processFile(java.io.File, java.util.Set, java.util.List)</inbound>
            <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.Rejar.getManifest()</inbound>
            <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.Rejar.rejar(java.io.File, java.io.File)</inbound>
            <feature confirmed="no">
                <name>java.util.jar.Manifest.Manifest()</name>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.Rejar.getManifest()</inbound>
            </feature>
            <feature confirmed="no">
                <name>java.util.jar.Manifest.Manifest(java.io.InputStream)</name>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainStatic.getAlreadyLoadedModules()</inbound>
            </feature>
            <feature confirmed="no">
                <name>java.util.jar.Manifest.getMainAttributes()</name>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainStatic.getAlreadyLoadedModules()</inbound>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainStatic.processFile(java.io.File, java.util.Set, java.util.List)</inbound>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.Rejar.getManifest()</inbound>
            </feature>
        </class>
    </package>
    <package confirmed="no">
        <name>java.util.logging</name>
        <class confirmed="no">
            <name>java.util.logging.Level</name>
            <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASEmbedded.start(java.util.Properties)</inbound>
            <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMain.main(java.lang.String[])</inbound>
            <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainNonOSGi.flushAndCreate(java.io.File, long)</inbound>
            <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainNonOSGi.isCacheOutdated(long, java.io.File)</inbound>
            <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainStatic$1.run()</inbound>
            <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainStatic.getMaskingClassLoader(java.lang.ClassLoader, java.io.File, java.util.logging.Logger, boolean)</inbound>
            <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ExtensibleClassLoader.addURI(java.net.URI)</inbound>
            <feature confirmed="no">
                <name>java.util.logging.Level.SEVERE</name>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASEmbedded.start(java.util.Properties)</inbound>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMain.main(java.lang.String[])</inbound>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainNonOSGi.flushAndCreate(java.io.File, long)</inbound>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainNonOSGi.isCacheOutdated(long, java.io.File)</inbound>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainStatic$1.run()</inbound>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainStatic.getMaskingClassLoader(java.lang.ClassLoader, java.io.File, java.util.logging.Logger, boolean)</inbound>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ExtensibleClassLoader.addURI(java.net.URI)</inbound>
            </feature>
        </class>
        <class confirmed="no">
            <name>java.util.logging.Logger</name>
            <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASEmbedded$EmbeddedMain.createHabitat(com.sun.enterprise.module.ModulesRegistry, com.sun.enterprise.module.bootstrap.StartupContext)</inbound>
            <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASEmbedded.access$000(com.sun.enterprise.glassfish.bootstrap.ASEmbedded)</inbound>
            <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASEmbedded.start(java.util.Properties)</inbound>
            <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMain.logger</inbound>
            <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMain.main(java.lang.String[])</inbound>
            <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMain.static {}</inbound>
            <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainHelper$ClassLoaderBuilder.addJDKToolsJar()</inbound>
            <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainHelper$ClassLoaderBuilder.findDerbyClient()</inbound>
            <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainHelper.access$000()</inbound>
            <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainHelper.checkJdkVersion()</inbound>
            <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainHelper.logger</inbound>
            <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainHelper.parseAsEnv(java.io.File)</inbound>
            <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainHelper.static {}</inbound>
            <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainNonOSGi.flushAndCreate(java.io.File, long)</inbound>
            <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainNonOSGi.isCacheOutdated(long, java.io.File)</inbound>
            <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainNonOSGi.loadCacheInformation(java.io.File)</inbound>
            <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainNonOSGi.saveCacheInformation(java.io.File, java.lang.String, long)</inbound>
            <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainOSGi.addJDKToolsJar(com.sun.enterprise.glassfish.bootstrap.ClassPathBuilder)</inbound>
            <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainOSGi.configureEnvironment()</inbound>
            <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainOSGi.findDerbyClient(com.sun.enterprise.glassfish.bootstrap.ClassPathBuilder)</inbound>
            <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainStatic$1$1.createHabitat(com.sun.enterprise.module.ModulesRegistry, com.sun.enterprise.module.bootstrap.StartupContext)</inbound>
            <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainStatic$1.run()</inbound>
            <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainStatic.access$000(com.sun.enterprise.glassfish.bootstrap.ASMainStatic)</inbound>
            <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainStatic.access$200(com.sun.enterprise.glassfish.bootstrap.ASMainStatic)</inbound>
            <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainStatic.findDerbyClient(java.util.List)</inbound>
            <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainStatic.getMaskingClassLoader(java.lang.ClassLoader, java.io.File, java.util.logging.Logger)</inbound>
            <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainStatic.getMaskingClassLoader(java.lang.ClassLoader, java.io.File, java.util.logging.Logger, boolean)</inbound>
            <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainStatic.start(java.util.Properties)</inbound>
            <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ExtensibleClassLoader.ExtensibleClassLoader(java.net.URL[], java.lang.ClassLoader, java.util.List)</inbound>
            <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ExtensibleClassLoader.LOGGER</inbound>
            <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ExtensibleClassLoader.addURI(java.net.URI)</inbound>
            <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ExtensibleClassLoader.added(java.net.URI)</inbound>
            <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ExtensibleClassLoader.static {}</inbound>
            <feature confirmed="no">
                <name>java.util.logging.Logger.fine(java.lang.String)</name>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMain.main(java.lang.String[])</inbound>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainHelper$ClassLoaderBuilder.addJDKToolsJar()</inbound>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainHelper.parseAsEnv(java.io.File)</inbound>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainOSGi.addJDKToolsJar(com.sun.enterprise.glassfish.bootstrap.ClassPathBuilder)</inbound>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainStatic.findDerbyClient(java.util.List)</inbound>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainStatic.start(java.util.Properties)</inbound>
            </feature>
            <feature confirmed="no">
                <name>java.util.logging.Logger.getAnonymousLogger()</name>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASEmbedded.start(java.util.Properties)</inbound>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMain.static {}</inbound>
            </feature>
            <feature confirmed="no">
                <name>java.util.logging.Logger.getLogger(java.lang.String)</name>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainHelper.static {}</inbound>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ExtensibleClassLoader.static {}</inbound>
            </feature>
            <feature confirmed="no">
                <name>java.util.logging.Logger.info(java.lang.String)</name>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMain.main(java.lang.String[])</inbound>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainHelper$ClassLoaderBuilder.findDerbyClient()</inbound>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainNonOSGi.flushAndCreate(java.io.File, long)</inbound>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainNonOSGi.loadCacheInformation(java.io.File)</inbound>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainNonOSGi.saveCacheInformation(java.io.File, java.lang.String, long)</inbound>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainOSGi.configureEnvironment()</inbound>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainOSGi.findDerbyClient(com.sun.enterprise.glassfish.bootstrap.ClassPathBuilder)</inbound>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ExtensibleClassLoader.ExtensibleClassLoader(java.net.URL[], java.lang.ClassLoader, java.util.List)</inbound>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ExtensibleClassLoader.added(java.net.URI)</inbound>
            </feature>
            <feature confirmed="no">
                <name>java.util.logging.Logger.log(java.util.logging.Level, java.lang.String)</name>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainStatic.getMaskingClassLoader(java.lang.ClassLoader, java.io.File, java.util.logging.Logger, boolean)</inbound>
            </feature>
            <feature confirmed="no">
                <name>java.util.logging.Logger.log(java.util.logging.Level, java.lang.String, java.lang.Throwable)</name>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASEmbedded.start(java.util.Properties)</inbound>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMain.main(java.lang.String[])</inbound>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainNonOSGi.flushAndCreate(java.io.File, long)</inbound>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainNonOSGi.isCacheOutdated(long, java.io.File)</inbound>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainStatic$1.run()</inbound>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ExtensibleClassLoader.addURI(java.net.URI)</inbound>
            </feature>
            <feature confirmed="no">
                <name>java.util.logging.Logger.severe(java.lang.String)</name>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMain.main(java.lang.String[])</inbound>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainHelper.checkJdkVersion()</inbound>
            </feature>
            <feature confirmed="no">
                <name>java.util.logging.Logger.warning(java.lang.String)</name>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainNonOSGi.flushAndCreate(java.io.File, long)</inbound>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainNonOSGi.saveCacheInformation(java.io.File, java.lang.String, long)</inbound>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainStatic.start(java.util.Properties)</inbound>
            </feature>
        </class>
    </package>
    <package confirmed="no">
        <name>java.util.regex</name>
        <class confirmed="no">
            <name>java.util.regex.Matcher</name>
            <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainHelper.parseAsEnv(java.io.File)</inbound>
            <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ClassPathBuilder.addGlob(java.io.File, java.lang.String[])</inbound>
            <feature confirmed="no">
                <name>java.util.regex.Matcher.group(int)</name>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainHelper.parseAsEnv(java.io.File)</inbound>
            </feature>
            <feature confirmed="no">
                <name>java.util.regex.Matcher.matches()</name>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainHelper.parseAsEnv(java.io.File)</inbound>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ClassPathBuilder.addGlob(java.io.File, java.lang.String[])</inbound>
            </feature>
        </class>
        <class confirmed="no">
            <name>java.util.regex.Pattern</name>
            <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainHelper.parseAsEnv(java.io.File)</inbound>
            <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ClassPathBuilder.addGlob(java.io.File, java.lang.String[])</inbound>
            <feature confirmed="no">
                <name>java.util.regex.Pattern.compile(java.lang.String)</name>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainHelper.parseAsEnv(java.io.File)</inbound>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ClassPathBuilder.addGlob(java.io.File, java.lang.String[])</inbound>
            </feature>
            <feature confirmed="no">
                <name>java.util.regex.Pattern.matcher(java.lang.CharSequence)</name>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainHelper.parseAsEnv(java.io.File)</inbound>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ClassPathBuilder.addGlob(java.io.File, java.lang.String[])</inbound>
            </feature>
        </class>
    </package>
    <package confirmed="no">
        <name>java.util.zip</name>
        <class confirmed="no">
            <name>java.util.zip.ZipEntry</name>
            <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.Rejar.copy(byte[], java.lang.String, java.util.jar.JarOutputStream)</inbound>
            <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.Rejar.copy(java.util.jar.JarFile, java.util.jar.JarEntry, java.nio.channels.WritableByteChannel)</inbound>
            <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.Rejar.copy(java.util.jar.JarFile, java.util.jar.JarEntry, java.util.jar.JarOutputStream)</inbound>
        </class>
    </package>
    <package confirmed="yes">
        <name>org.glassfish.experimentalgfapi</name>
        <class confirmed="yes">
            <name>org.glassfish.experimentalgfapi.CommandRunner</name>
            <outbound type="class" confirmed="no">java.lang.Object</outbound>
        </class>
        <class confirmed="yes">
            <name>org.glassfish.experimentalgfapi.Configurator</name>
            <outbound type="class" confirmed="no">java.lang.Object</outbound>
            <feature confirmed="yes">
                <name>org.glassfish.experimentalgfapi.Configurator.configure(java.util.Properties)</name>
                <outbound type="class" confirmed="no">java.util.Properties</outbound>
            </feature>
        </class>
        <class confirmed="yes">
            <name>org.glassfish.experimentalgfapi.Constants</name>
            <outbound type="class" confirmed="no">java.lang.Object</outbound>
            <feature confirmed="yes">
                <name>org.glassfish.experimentalgfapi.Constants.Constants()</name>
                <outbound type="feature" confirmed="no">java.lang.Object.Object()</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.glassfish.experimentalgfapi.Constants.INSTALL_ROOT_PROP_NAME</name>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.glassfish.experimentalgfapi.Constants.INSTALL_ROOT_URI_PROP_NAME</name>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.glassfish.experimentalgfapi.Constants.INSTANCE_ROOT_PROP_NAME</name>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.glassfish.experimentalgfapi.Constants.INSTANCE_ROOT_URI_PROP_NAME</name>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.glassfish.experimentalgfapi.Constants.PLATFORM_PROPERTY_KEY</name>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
            </feature>
        </class>
        <class confirmed="yes">
            <name>org.glassfish.experimentalgfapi.Constants$Platform</name>
            <outbound type="class" confirmed="no">java.lang.Enum</outbound>
            <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.OSGiGlassFishRuntimeBuilder$1.static {}</inbound>
            <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.OSGiGlassFishRuntimeBuilder.handles(org.glassfish.experimentalgfapi.Constants$Platform)</inbound>
            <inbound type="feature" confirmed="yes">org.glassfish.experimentalgfapi.GlassFishRuntime$RuntimeBuilder.handles(org.glassfish.experimentalgfapi.Constants$Platform)</inbound>
            <inbound type="feature" confirmed="yes">org.glassfish.experimentalgfapi.GlassFishRuntime.bootstrap(java.util.Properties, java.lang.ClassLoader)</inbound>
            <inbound type="feature" confirmed="yes">org.glassfish.experimentalgfapi.GlassFishRuntime.getRuntimeBuilder(org.glassfish.experimentalgfapi.Constants$Platform, java.lang.ClassLoader)</inbound>
            <inbound type="feature" confirmed="yes">org.glassfish.experimentalgfapi.GlassFishRuntime.whichPlatform(java.util.Properties)</inbound>
            <feature confirmed="yes">
                <name>org.glassfish.experimentalgfapi.Constants$Platform.$VALUES</name>
                <inbound type="feature" confirmed="yes">org.glassfish.experimentalgfapi.Constants$Platform.static {}</inbound>
                <inbound type="feature" confirmed="yes">org.glassfish.experimentalgfapi.Constants$Platform.values()</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.glassfish.experimentalgfapi.Constants$Platform.Constants$Platform(java.lang.String, int)</name>
                <outbound type="feature" confirmed="no">java.lang.Enum.Enum(java.lang.String, int)</outbound>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <inbound type="feature" confirmed="yes">org.glassfish.experimentalgfapi.Constants$Platform.static {}</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.glassfish.experimentalgfapi.Constants$Platform.Equinox</name>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.OSGiGlassFishRuntimeBuilder$1.static {}</inbound>
                <inbound type="feature" confirmed="yes">org.glassfish.experimentalgfapi.Constants$Platform.static {}</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.glassfish.experimentalgfapi.Constants$Platform.Felix</name>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.OSGiGlassFishRuntimeBuilder$1.static {}</inbound>
                <inbound type="feature" confirmed="yes">org.glassfish.experimentalgfapi.Constants$Platform.static {}</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.glassfish.experimentalgfapi.Constants$Platform.GenericOSGi</name>
                <inbound type="feature" confirmed="yes">org.glassfish.experimentalgfapi.Constants$Platform.static {}</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.glassfish.experimentalgfapi.Constants$Platform.Knopflerfish</name>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.OSGiGlassFishRuntimeBuilder$1.static {}</inbound>
                <inbound type="feature" confirmed="yes">org.glassfish.experimentalgfapi.Constants$Platform.static {}</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.glassfish.experimentalgfapi.Constants$Platform.Static</name>
                <inbound type="feature" confirmed="yes">org.glassfish.experimentalgfapi.Constants$Platform.static {}</inbound>
            </feature>
            <feature confirmed="no">
                <name>org.glassfish.experimentalgfapi.Constants$Platform.ordinal()</name>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.OSGiGlassFishRuntimeBuilder$1.static {}</inbound>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.OSGiGlassFishRuntimeBuilder.handles(org.glassfish.experimentalgfapi.Constants$Platform)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.glassfish.experimentalgfapi.Constants$Platform.static {}</name>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="feature" confirmed="yes">org.glassfish.experimentalgfapi.Constants$Platform.$VALUES</outbound>
                <outbound type="feature" confirmed="yes">org.glassfish.experimentalgfapi.Constants$Platform.Constants$Platform(java.lang.String, int)</outbound>
                <outbound type="feature" confirmed="yes">org.glassfish.experimentalgfapi.Constants$Platform.Equinox</outbound>
                <outbound type="feature" confirmed="yes">org.glassfish.experimentalgfapi.Constants$Platform.Felix</outbound>
                <outbound type="feature" confirmed="yes">org.glassfish.experimentalgfapi.Constants$Platform.GenericOSGi</outbound>
                <outbound type="feature" confirmed="yes">org.glassfish.experimentalgfapi.Constants$Platform.Knopflerfish</outbound>
                <outbound type="feature" confirmed="yes">org.glassfish.experimentalgfapi.Constants$Platform.Static</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.glassfish.experimentalgfapi.Constants$Platform.valueOf(java.lang.String)</name>
                <outbound type="class" confirmed="no">java.lang.Class</outbound>
                <outbound type="class" confirmed="no">java.lang.Enum</outbound>
                <outbound type="feature" confirmed="no">java.lang.Enum.valueOf(java.lang.Class, java.lang.String)</outbound>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <inbound type="feature" confirmed="yes">org.glassfish.experimentalgfapi.GlassFishRuntime.whichPlatform(java.util.Properties)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.glassfish.experimentalgfapi.Constants$Platform.values()</name>
                <outbound type="class" confirmed="no">java.lang.Object</outbound>
                <outbound type="feature" confirmed="yes">org.glassfish.experimentalgfapi.Constants$Platform.$VALUES</outbound>
                <outbound type="class" confirmed="no">org.glassfish.experimentalgfapi.Constants$Platform[]</outbound>
                <outbound type="feature" confirmed="no">org.glassfish.experimentalgfapi.Constants$Platform[].clone()</outbound>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.OSGiGlassFishRuntimeBuilder$1.static {}</inbound>
            </feature>
        </class>
        <class confirmed="no">
            <name>org.glassfish.experimentalgfapi.Constants$Platform[]</name>
            <inbound type="feature" confirmed="yes">org.glassfish.experimentalgfapi.Constants$Platform.values()</inbound>
            <feature confirmed="no">
                <name>org.glassfish.experimentalgfapi.Constants$Platform[].clone()</name>
                <inbound type="feature" confirmed="yes">org.glassfish.experimentalgfapi.Constants$Platform.values()</inbound>
            </feature>
        </class>
        <class confirmed="yes">
            <name>org.glassfish.experimentalgfapi.Deployer</name>
            <outbound type="class" confirmed="no">java.lang.Object</outbound>
            <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.GlassFishMain$Launcher.startConsole()</inbound>
            <feature confirmed="yes">
                <name>org.glassfish.experimentalgfapi.Deployer.deploy(java.io.File, java.util.Map)</name>
                <outbound type="class" confirmed="no">java.io.File</outbound>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="class" confirmed="no">java.util.Map</outbound>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.GlassFishMain$Launcher.startConsole()</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.glassfish.experimentalgfapi.Deployer.deploy(java.net.URI)</name>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="class" confirmed="no">java.net.URI</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.glassfish.experimentalgfapi.Deployer.undeploy(java.lang.String, java.util.Map)</name>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="class" confirmed="no">java.util.Map</outbound>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.GlassFishMain$Launcher.startConsole()</inbound>
            </feature>
        </class>
        <class confirmed="yes">
            <name>org.glassfish.experimentalgfapi.GlassFish</name>
            <outbound type="class" confirmed="no">java.lang.Object</outbound>
            <inbound type="class" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.GlassFishActivator$1$1</inbound>
            <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.GlassFishActivator$1.newGlassFish(java.util.Properties)</inbound>
            <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.GlassFishMain$Launcher$1.run()</inbound>
            <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.GlassFishMain$Launcher.access$000()</inbound>
            <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.GlassFishMain$Launcher.gf</inbound>
            <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.GlassFishMain$Launcher.launch(java.util.Properties)</inbound>
            <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.GlassFishMain$Launcher.startConsole()</inbound>
            <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.OSGiGlassFishRuntime.newGlassFish(java.util.Properties)</inbound>
            <inbound type="feature" confirmed="yes">org.glassfish.experimentalgfapi.GlassFishRuntime.newGlassFish(java.util.Properties)</inbound>
            <feature confirmed="yes">
                <name>org.glassfish.experimentalgfapi.GlassFish.dispose()</name>
            </feature>
            <feature confirmed="yes">
                <name>org.glassfish.experimentalgfapi.GlassFish.getStatus()</name>
                <outbound type="class" confirmed="yes">org.glassfish.experimentalgfapi.GlassFish$Status</outbound>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.GlassFishMain$Launcher.startConsole()</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.glassfish.experimentalgfapi.GlassFish.lookupService(java.lang.Class, java.lang.String)</name>
                <outbound type="class" confirmed="no">java.lang.Class</outbound>
                <outbound type="class" confirmed="no">java.lang.Object</outbound>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.GlassFishMain$Launcher.startConsole()</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.glassfish.experimentalgfapi.GlassFish.start()</name>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.GlassFishMain$Launcher.launch(java.util.Properties)</inbound>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.GlassFishMain$Launcher.startConsole()</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.glassfish.experimentalgfapi.GlassFish.stop()</name>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.GlassFishMain$Launcher$1.run()</inbound>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.GlassFishMain$Launcher.startConsole()</inbound>
            </feature>
        </class>
        <class confirmed="yes">
            <name>org.glassfish.experimentalgfapi.GlassFish$Status</name>
            <outbound type="class" confirmed="no">java.lang.Enum</outbound>
            <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.GlassFishActivator$1$1.GlassFishActivator$1$1(com.sun.enterprise.glassfish.bootstrap.GlassFishActivator$1, com.sun.enterprise.module.bootstrap.ModuleStartup, org.jvnet.hk2.component.Habitat)</inbound>
            <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.GlassFishActivator$1$1.getStatus()</inbound>
            <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.GlassFishActivator$1$1.lookupService(java.lang.Class, java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.GlassFishActivator$1$1.start()</inbound>
            <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.GlassFishActivator$1$1.status</inbound>
            <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.GlassFishActivator$1$1.stop()</inbound>
            <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.GlassFishMain$Launcher.startConsole()</inbound>
            <inbound type="feature" confirmed="yes">org.glassfish.experimentalgfapi.GlassFish.getStatus()</inbound>
            <feature confirmed="yes">
                <name>org.glassfish.experimentalgfapi.GlassFish$Status.$VALUES</name>
                <inbound type="feature" confirmed="yes">org.glassfish.experimentalgfapi.GlassFish$Status.static {}</inbound>
                <inbound type="feature" confirmed="yes">org.glassfish.experimentalgfapi.GlassFish$Status.values()</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.glassfish.experimentalgfapi.GlassFish$Status.DISPOSED</name>
                <inbound type="feature" confirmed="yes">org.glassfish.experimentalgfapi.GlassFish$Status.static {}</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.glassfish.experimentalgfapi.GlassFish$Status.GlassFish$Status(java.lang.String, int)</name>
                <outbound type="feature" confirmed="no">java.lang.Enum.Enum(java.lang.String, int)</outbound>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <inbound type="feature" confirmed="yes">org.glassfish.experimentalgfapi.GlassFish$Status.static {}</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.glassfish.experimentalgfapi.GlassFish$Status.INIT</name>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.GlassFishActivator$1$1.GlassFishActivator$1$1(com.sun.enterprise.glassfish.bootstrap.GlassFishActivator$1, com.sun.enterprise.module.bootstrap.ModuleStartup, org.jvnet.hk2.component.Habitat)</inbound>
                <inbound type="feature" confirmed="yes">org.glassfish.experimentalgfapi.GlassFish$Status.static {}</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.glassfish.experimentalgfapi.GlassFish$Status.STARTED</name>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.GlassFishActivator$1$1.lookupService(java.lang.Class, java.lang.String)</inbound>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.GlassFishActivator$1$1.start()</inbound>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.GlassFishActivator$1$1.stop()</inbound>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.GlassFishMain$Launcher.startConsole()</inbound>
                <inbound type="feature" confirmed="yes">org.glassfish.experimentalgfapi.GlassFish$Status.static {}</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.glassfish.experimentalgfapi.GlassFish$Status.STARTING</name>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.GlassFishActivator$1$1.start()</inbound>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.GlassFishMain$Launcher.startConsole()</inbound>
                <inbound type="feature" confirmed="yes">org.glassfish.experimentalgfapi.GlassFish$Status.static {}</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.glassfish.experimentalgfapi.GlassFish$Status.STOPPED</name>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.GlassFishActivator$1$1.stop()</inbound>
                <inbound type="feature" confirmed="yes">org.glassfish.experimentalgfapi.GlassFish$Status.static {}</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.glassfish.experimentalgfapi.GlassFish$Status.STOPPING</name>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.GlassFishActivator$1$1.stop()</inbound>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.GlassFishMain$Launcher.startConsole()</inbound>
                <inbound type="feature" confirmed="yes">org.glassfish.experimentalgfapi.GlassFish$Status.static {}</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.glassfish.experimentalgfapi.GlassFish$Status.static {}</name>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="feature" confirmed="yes">org.glassfish.experimentalgfapi.GlassFish$Status.$VALUES</outbound>
                <outbound type="feature" confirmed="yes">org.glassfish.experimentalgfapi.GlassFish$Status.DISPOSED</outbound>
                <outbound type="feature" confirmed="yes">org.glassfish.experimentalgfapi.GlassFish$Status.GlassFish$Status(java.lang.String, int)</outbound>
                <outbound type="feature" confirmed="yes">org.glassfish.experimentalgfapi.GlassFish$Status.INIT</outbound>
                <outbound type="feature" confirmed="yes">org.glassfish.experimentalgfapi.GlassFish$Status.STARTED</outbound>
                <outbound type="feature" confirmed="yes">org.glassfish.experimentalgfapi.GlassFish$Status.STARTING</outbound>
                <outbound type="feature" confirmed="yes">org.glassfish.experimentalgfapi.GlassFish$Status.STOPPED</outbound>
                <outbound type="feature" confirmed="yes">org.glassfish.experimentalgfapi.GlassFish$Status.STOPPING</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.glassfish.experimentalgfapi.GlassFish$Status.valueOf(java.lang.String)</name>
                <outbound type="class" confirmed="no">java.lang.Class</outbound>
                <outbound type="class" confirmed="no">java.lang.Enum</outbound>
                <outbound type="feature" confirmed="no">java.lang.Enum.valueOf(java.lang.Class, java.lang.String)</outbound>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.glassfish.experimentalgfapi.GlassFish$Status.values()</name>
                <outbound type="class" confirmed="no">java.lang.Object</outbound>
                <outbound type="feature" confirmed="yes">org.glassfish.experimentalgfapi.GlassFish$Status.$VALUES</outbound>
                <outbound type="class" confirmed="no">org.glassfish.experimentalgfapi.GlassFish$Status[]</outbound>
                <outbound type="feature" confirmed="no">org.glassfish.experimentalgfapi.GlassFish$Status[].clone()</outbound>
            </feature>
        </class>
        <class confirmed="no">
            <name>org.glassfish.experimentalgfapi.GlassFish$Status[]</name>
            <inbound type="feature" confirmed="yes">org.glassfish.experimentalgfapi.GlassFish$Status.values()</inbound>
            <feature confirmed="no">
                <name>org.glassfish.experimentalgfapi.GlassFish$Status[].clone()</name>
                <inbound type="feature" confirmed="yes">org.glassfish.experimentalgfapi.GlassFish$Status.values()</inbound>
            </feature>
        </class>
        <class confirmed="yes">
            <name>org.glassfish.experimentalgfapi.GlassFishRuntime</name>
            <outbound type="class" confirmed="no">java.lang.Object</outbound>
            <inbound type="class" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.GlassFishActivator$1</inbound>
            <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.GlassFishActivator.registerGlassFishRuntime()</inbound>
            <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.GlassFishMain$Launcher.launch(java.util.Properties)</inbound>
            <inbound type="class" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.OSGiGlassFishRuntime</inbound>
            <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.OSGiGlassFishRuntimeBuilder.build(java.util.Properties)</inbound>
            <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.OSGiGlassFishRuntimeBuilder.getRuntime()</inbound>
            <inbound type="feature" confirmed="yes">org.glassfish.experimentalgfapi.GlassFishRuntime$RuntimeBuilder.build(java.util.Properties)</inbound>
            <feature confirmed="yes">
                <name>org.glassfish.experimentalgfapi.GlassFishRuntime.GlassFishRuntime()</name>
                <outbound type="feature" confirmed="no">java.lang.Object.Object()</outbound>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.GlassFishActivator$1.GlassFishActivator$1(com.sun.enterprise.glassfish.bootstrap.GlassFishActivator, org.osgi.util.tracker.ServiceTracker)</inbound>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.OSGiGlassFishRuntime.OSGiGlassFishRuntime()</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.glassfish.experimentalgfapi.GlassFishRuntime.bootstrap(java.util.Properties, java.lang.ClassLoader)</name>
                <outbound type="feature" confirmed="no">java.lang.Class.getClassLoader()</outbound>
                <outbound type="class" confirmed="no">java.lang.ClassLoader</outbound>
                <outbound type="class" confirmed="no">java.lang.Exception</outbound>
                <outbound type="class" confirmed="no">java.util.Properties</outbound>
                <outbound type="class" confirmed="yes">org.glassfish.experimentalgfapi.Constants$Platform</outbound>
                <outbound type="class" confirmed="yes">org.glassfish.experimentalgfapi.GlassFishRuntime$RuntimeBuilder</outbound>
                <outbound type="feature" confirmed="yes">org.glassfish.experimentalgfapi.GlassFishRuntime$RuntimeBuilder.build(java.util.Properties)</outbound>
                <outbound type="feature" confirmed="yes">org.glassfish.experimentalgfapi.GlassFishRuntime.getRuntimeBuilder(org.glassfish.experimentalgfapi.Constants$Platform, java.lang.ClassLoader)</outbound>
                <outbound type="feature" confirmed="yes">org.glassfish.experimentalgfapi.GlassFishRuntime.me</outbound>
                <outbound type="feature" confirmed="yes">org.glassfish.experimentalgfapi.GlassFishRuntime.runtimeBuilder</outbound>
                <outbound type="feature" confirmed="yes">org.glassfish.experimentalgfapi.GlassFishRuntime.whichPlatform(java.util.Properties)</outbound>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.GlassFishMain$Launcher.launch(java.util.Properties)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.glassfish.experimentalgfapi.GlassFishRuntime.get()</name>
                <outbound type="feature" confirmed="no">java.lang.RuntimeException.RuntimeException(java.lang.String)</outbound>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="feature" confirmed="yes">org.glassfish.experimentalgfapi.GlassFishRuntime.me</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.glassfish.experimentalgfapi.GlassFishRuntime.getRuntimeBuilder(org.glassfish.experimentalgfapi.Constants$Platform, java.lang.ClassLoader)</name>
                <outbound type="class" confirmed="no">java.lang.Class</outbound>
                <outbound type="class" confirmed="no">java.lang.ClassLoader</outbound>
                <outbound type="class" confirmed="no">java.lang.Object</outbound>
                <outbound type="feature" confirmed="no">java.lang.RuntimeException.RuntimeException(java.lang.String)</outbound>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="class" confirmed="no">java.lang.StringBuilder</outbound>
                <outbound type="feature" confirmed="no">java.lang.StringBuilder.StringBuilder()</outbound>
                <outbound type="feature" confirmed="no">java.lang.StringBuilder.append(java.lang.Object)</outbound>
                <outbound type="feature" confirmed="no">java.lang.StringBuilder.append(java.lang.String)</outbound>
                <outbound type="feature" confirmed="no">java.lang.StringBuilder.toString()</outbound>
                <outbound type="class" confirmed="no">java.util.Iterator</outbound>
                <outbound type="feature" confirmed="no">java.util.Iterator.hasNext()</outbound>
                <outbound type="feature" confirmed="no">java.util.Iterator.next()</outbound>
                <outbound type="class" confirmed="no">java.util.ServiceLoader</outbound>
                <outbound type="feature" confirmed="no">java.util.ServiceLoader.iterator()</outbound>
                <outbound type="feature" confirmed="no">java.util.ServiceLoader.load(java.lang.Class, java.lang.ClassLoader)</outbound>
                <outbound type="class" confirmed="yes">org.glassfish.experimentalgfapi.Constants$Platform</outbound>
                <outbound type="class" confirmed="yes">org.glassfish.experimentalgfapi.GlassFishRuntime$RuntimeBuilder</outbound>
                <outbound type="feature" confirmed="yes">org.glassfish.experimentalgfapi.GlassFishRuntime$RuntimeBuilder.handles(org.glassfish.experimentalgfapi.Constants$Platform)</outbound>
                <inbound type="feature" confirmed="yes">org.glassfish.experimentalgfapi.GlassFishRuntime.bootstrap(java.util.Properties, java.lang.ClassLoader)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.glassfish.experimentalgfapi.GlassFishRuntime.me</name>
                <inbound type="feature" confirmed="yes">org.glassfish.experimentalgfapi.GlassFishRuntime.bootstrap(java.util.Properties, java.lang.ClassLoader)</inbound>
                <inbound type="feature" confirmed="yes">org.glassfish.experimentalgfapi.GlassFishRuntime.get()</inbound>
                <inbound type="feature" confirmed="yes">org.glassfish.experimentalgfapi.GlassFishRuntime.shutdown()</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.glassfish.experimentalgfapi.GlassFishRuntime.newGlassFish(java.util.Properties)</name>
                <outbound type="class" confirmed="no">java.lang.Exception</outbound>
                <outbound type="class" confirmed="no">java.util.Properties</outbound>
                <outbound type="class" confirmed="yes">org.glassfish.experimentalgfapi.GlassFish</outbound>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.GlassFishMain$Launcher.launch(java.util.Properties)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.glassfish.experimentalgfapi.GlassFishRuntime.runtimeBuilder</name>
                <outbound type="class" confirmed="yes">org.glassfish.experimentalgfapi.GlassFishRuntime$RuntimeBuilder</outbound>
                <inbound type="feature" confirmed="yes">org.glassfish.experimentalgfapi.GlassFishRuntime.bootstrap(java.util.Properties, java.lang.ClassLoader)</inbound>
                <inbound type="feature" confirmed="yes">org.glassfish.experimentalgfapi.GlassFishRuntime.shutdown()</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.glassfish.experimentalgfapi.GlassFishRuntime.shutdown()</name>
                <outbound type="class" confirmed="no">java.lang.Exception</outbound>
                <outbound type="class" confirmed="yes">org.glassfish.experimentalgfapi.GlassFishRuntime$RuntimeBuilder</outbound>
                <outbound type="feature" confirmed="yes">org.glassfish.experimentalgfapi.GlassFishRuntime$RuntimeBuilder.destroy()</outbound>
                <outbound type="feature" confirmed="yes">org.glassfish.experimentalgfapi.GlassFishRuntime.me</outbound>
                <outbound type="feature" confirmed="yes">org.glassfish.experimentalgfapi.GlassFishRuntime.runtimeBuilder</outbound>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.GlassFishMain$Launcher$1.run()</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.glassfish.experimentalgfapi.GlassFishRuntime.whichPlatform(java.util.Properties)</name>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="class" confirmed="no">java.util.Properties</outbound>
                <outbound type="feature" confirmed="no">java.util.Properties.getProperty(java.lang.String)</outbound>
                <outbound type="class" confirmed="yes">org.glassfish.experimentalgfapi.Constants$Platform</outbound>
                <outbound type="feature" confirmed="yes">org.glassfish.experimentalgfapi.Constants$Platform.valueOf(java.lang.String)</outbound>
                <inbound type="feature" confirmed="yes">org.glassfish.experimentalgfapi.GlassFishRuntime.bootstrap(java.util.Properties, java.lang.ClassLoader)</inbound>
            </feature>
        </class>
        <class confirmed="yes">
            <name>org.glassfish.experimentalgfapi.GlassFishRuntime$RuntimeBuilder</name>
            <outbound type="class" confirmed="no">java.lang.Object</outbound>
            <inbound type="class" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.OSGiGlassFishRuntimeBuilder</inbound>
            <inbound type="feature" confirmed="yes">org.glassfish.experimentalgfapi.GlassFishRuntime.bootstrap(java.util.Properties, java.lang.ClassLoader)</inbound>
            <inbound type="feature" confirmed="yes">org.glassfish.experimentalgfapi.GlassFishRuntime.getRuntimeBuilder(org.glassfish.experimentalgfapi.Constants$Platform, java.lang.ClassLoader)</inbound>
            <inbound type="feature" confirmed="yes">org.glassfish.experimentalgfapi.GlassFishRuntime.runtimeBuilder</inbound>
            <inbound type="feature" confirmed="yes">org.glassfish.experimentalgfapi.GlassFishRuntime.shutdown()</inbound>
            <feature confirmed="yes">
                <name>org.glassfish.experimentalgfapi.GlassFishRuntime$RuntimeBuilder.build(java.util.Properties)</name>
                <outbound type="class" confirmed="no">java.lang.Exception</outbound>
                <outbound type="class" confirmed="no">java.util.Properties</outbound>
                <outbound type="class" confirmed="yes">org.glassfish.experimentalgfapi.GlassFishRuntime</outbound>
                <inbound type="feature" confirmed="yes">org.glassfish.experimentalgfapi.GlassFishRuntime.bootstrap(java.util.Properties, java.lang.ClassLoader)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.glassfish.experimentalgfapi.GlassFishRuntime$RuntimeBuilder.destroy()</name>
                <outbound type="class" confirmed="no">java.lang.Exception</outbound>
                <inbound type="feature" confirmed="yes">org.glassfish.experimentalgfapi.GlassFishRuntime.shutdown()</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.glassfish.experimentalgfapi.GlassFishRuntime$RuntimeBuilder.handles(org.glassfish.experimentalgfapi.Constants$Platform)</name>
                <outbound type="class" confirmed="yes">org.glassfish.experimentalgfapi.Constants$Platform</outbound>
                <inbound type="feature" confirmed="yes">org.glassfish.experimentalgfapi.GlassFishRuntime.getRuntimeBuilder(org.glassfish.experimentalgfapi.Constants$Platform, java.lang.ClassLoader)</inbound>
            </feature>
        </class>
    </package>
    <package confirmed="no">
        <name>org.jvnet.hk2.component</name>
        <class confirmed="no">
            <name>org.jvnet.hk2.component.Habitat</name>
            <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASEmbedded$EmbeddedMain.createHabitat(com.sun.enterprise.module.ModulesRegistry, com.sun.enterprise.module.bootstrap.StartupContext)</inbound>
            <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASEmbedded$EmbeddedMain.createInhabitantsParser(org.jvnet.hk2.component.Habitat)</inbound>
            <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASEmbedded.ASEmbedded()</inbound>
            <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASEmbedded.getStartedService(java.lang.Class)</inbound>
            <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASEmbedded.habitat</inbound>
            <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASEmbedded.start(java.util.Properties)</inbound>
            <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainStatic$1$1.createHabitat(com.sun.enterprise.module.ModulesRegistry, com.sun.enterprise.module.bootstrap.StartupContext)</inbound>
            <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainStatic$1$1.createInhabitantsParser(org.jvnet.hk2.component.Habitat)</inbound>
            <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainStatic$1.run()</inbound>
            <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainStatic.access$102(com.sun.enterprise.glassfish.bootstrap.ASMainStatic, org.jvnet.hk2.component.Habitat)</inbound>
            <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainStatic.getStartedService(java.lang.Class)</inbound>
            <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainStatic.habitat</inbound>
            <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.GlassFishActivator$1$1.GlassFishActivator$1$1(com.sun.enterprise.glassfish.bootstrap.GlassFishActivator$1, com.sun.enterprise.module.bootstrap.ModuleStartup, org.jvnet.hk2.component.Habitat)</inbound>
            <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.GlassFishActivator$1$1.lookupService(java.lang.Class, java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.GlassFishActivator$1$1.val$habitat</inbound>
            <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.GlassFishActivator$1.newGlassFish(java.util.Properties)</inbound>
            <feature confirmed="no">
                <name>org.jvnet.hk2.component.Habitat.add(org.jvnet.hk2.component.Inhabitant)</name>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASEmbedded$EmbeddedMain.createHabitat(com.sun.enterprise.module.ModulesRegistry, com.sun.enterprise.module.bootstrap.StartupContext)</inbound>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainStatic$1$1.createHabitat(com.sun.enterprise.module.ModulesRegistry, com.sun.enterprise.module.bootstrap.StartupContext)</inbound>
            </feature>
            <feature confirmed="no">
                <name>org.jvnet.hk2.component.Habitat.getComponent(java.lang.Class)</name>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASEmbedded.getStartedService(java.lang.Class)</inbound>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainStatic.getStartedService(java.lang.Class)</inbound>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.GlassFishActivator$1$1.lookupService(java.lang.Class, java.lang.String)</inbound>
            </feature>
            <feature confirmed="no">
                <name>org.jvnet.hk2.component.Habitat.getComponent(java.lang.Class, java.lang.String)</name>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.GlassFishActivator$1$1.lookupService(java.lang.Class, java.lang.String)</inbound>
            </feature>
        </class>
        <class confirmed="no">
            <name>org.jvnet.hk2.component.Inhabitant</name>
            <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASEmbedded$EmbeddedMain.createHabitat(com.sun.enterprise.module.ModulesRegistry, com.sun.enterprise.module.bootstrap.StartupContext)</inbound>
            <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainStatic$1$1.createHabitat(com.sun.enterprise.module.ModulesRegistry, com.sun.enterprise.module.bootstrap.StartupContext)</inbound>
        </class>
        <class confirmed="no">
            <name>org.jvnet.hk2.component.Inhabitants</name>
            <feature confirmed="no">
                <name>org.jvnet.hk2.component.Inhabitants.create(java.lang.Object)</name>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASEmbedded$EmbeddedMain.createHabitat(com.sun.enterprise.module.ModulesRegistry, com.sun.enterprise.module.bootstrap.StartupContext)</inbound>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainStatic$1$1.createHabitat(com.sun.enterprise.module.ModulesRegistry, com.sun.enterprise.module.bootstrap.StartupContext)</inbound>
            </feature>
        </class>
    </package>
    <package confirmed="no">
        <name>org.osgi.framework</name>
        <class confirmed="no">
            <name>org.osgi.framework.Bundle</name>
            <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.AutoProcessor.processAutoProperties(java.util.Map, org.osgi.framework.BundleContext)</inbound>
            <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.GlassFishActivator.findBundle(java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.GlassFishActivator.startBundle(java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.GlassFishActivator.stopBundle(java.lang.String)</inbound>
            <feature confirmed="no">
                <name>org.osgi.framework.Bundle.getSymbolicName()</name>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.GlassFishActivator.findBundle(java.lang.String)</inbound>
            </feature>
            <feature confirmed="no">
                <name>org.osgi.framework.Bundle.start()</name>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.AutoProcessor.processAutoProperties(java.util.Map, org.osgi.framework.BundleContext)</inbound>
            </feature>
            <feature confirmed="no">
                <name>org.osgi.framework.Bundle.start(int)</name>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.GlassFishActivator.startBundle(java.lang.String)</inbound>
            </feature>
            <feature confirmed="no">
                <name>org.osgi.framework.Bundle.stop(int)</name>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.GlassFishActivator.stopBundle(java.lang.String)</inbound>
            </feature>
        </class>
        <class confirmed="no">
            <name>org.osgi.framework.BundleActivator</name>
            <inbound type="class" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.GlassFishActivator</inbound>
        </class>
        <class confirmed="no">
            <name>org.osgi.framework.BundleContext</name>
            <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.AutoProcessor.process(java.util.Map, org.osgi.framework.BundleContext)</inbound>
            <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.AutoProcessor.processAutoProperties(java.util.Map, org.osgi.framework.BundleContext)</inbound>
            <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.GlassFishActivator$1.newGlassFish(java.util.Properties)</inbound>
            <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.GlassFishActivator.access$100(com.sun.enterprise.glassfish.bootstrap.GlassFishActivator)</inbound>
            <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.GlassFishActivator.bundleContext</inbound>
            <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.GlassFishActivator.findBundle(java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.GlassFishActivator.registerGlassFishRuntime()</inbound>
            <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.GlassFishActivator.start(org.osgi.framework.BundleContext)</inbound>
            <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.GlassFishActivator.startConfigAdmin()</inbound>
            <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.GlassFishActivator.stop(org.osgi.framework.BundleContext)</inbound>
            <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.OSGiGlassFishRuntimeBuilder.getRuntime()</inbound>
            <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.OSGiGlassFishRuntimeBuilder.launchOSGiFrameWork()</inbound>
            <feature confirmed="no">
                <name>org.osgi.framework.BundleContext.getBundles()</name>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.GlassFishActivator.findBundle(java.lang.String)</inbound>
            </feature>
            <feature confirmed="no">
                <name>org.osgi.framework.BundleContext.getService(org.osgi.framework.ServiceReference)</name>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.AutoProcessor.processAutoProperties(java.util.Map, org.osgi.framework.BundleContext)</inbound>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.GlassFishActivator$1.newGlassFish(java.util.Properties)</inbound>
            </feature>
            <feature confirmed="no">
                <name>org.osgi.framework.BundleContext.getServiceReference(java.lang.String)</name>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.AutoProcessor.processAutoProperties(java.util.Map, org.osgi.framework.BundleContext)</inbound>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.GlassFishActivator$1.newGlassFish(java.util.Properties)</inbound>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.GlassFishActivator.startConfigAdmin()</inbound>
            </feature>
            <feature confirmed="no">
                <name>org.osgi.framework.BundleContext.installBundle(java.lang.String, java.io.InputStream)</name>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.AutoProcessor.processAutoProperties(java.util.Map, org.osgi.framework.BundleContext)</inbound>
            </feature>
            <feature confirmed="no">
                <name>org.osgi.framework.BundleContext.registerService(java.lang.String, java.lang.Object, java.util.Dictionary)</name>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.GlassFishActivator$1.newGlassFish(java.util.Properties)</inbound>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.GlassFishActivator.registerGlassFishRuntime()</inbound>
            </feature>
            <feature confirmed="no">
                <name>org.osgi.framework.BundleContext.ungetService(org.osgi.framework.ServiceReference)</name>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.GlassFishActivator.startConfigAdmin()</inbound>
            </feature>
        </class>
        <class confirmed="no">
            <name>org.osgi.framework.BundleException</name>
            <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.GlassFishActivator.startBundle(java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.GlassFishActivator.stopBundle(java.lang.String)</inbound>
            <feature confirmed="no">
                <name>org.osgi.framework.BundleException.printStackTrace()</name>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.GlassFishActivator.startBundle(java.lang.String)</inbound>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.GlassFishActivator.stopBundle(java.lang.String)</inbound>
            </feature>
        </class>
        <class confirmed="no">
            <name>org.osgi.framework.BundleReference</name>
            <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.OSGiGlassFishRuntimeBuilder.isOSGiEnv()</inbound>
        </class>
        <class confirmed="no">
            <name>org.osgi.framework.FrameworkEvent</name>
            <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.OSGiGlassFishRuntimeBuilder.destroy()</inbound>
        </class>
        <class confirmed="no">
            <name>org.osgi.framework.ServiceReference</name>
            <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.AutoProcessor.processAutoProperties(java.util.Map, org.osgi.framework.BundleContext)</inbound>
            <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.GlassFishActivator$1.newGlassFish(java.util.Properties)</inbound>
            <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.GlassFishActivator.startConfigAdmin()</inbound>
        </class>
        <class confirmed="no">
            <name>org.osgi.framework.ServiceRegistration</name>
            <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.GlassFishActivator$1.newGlassFish(java.util.Properties)</inbound>
            <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.GlassFishActivator.registerGlassFishRuntime()</inbound>
        </class>
    </package>
    <package confirmed="no">
        <name>org.osgi.framework.launch</name>
        <class confirmed="no">
            <name>org.osgi.framework.launch.Framework</name>
            <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.OSGiGlassFishRuntimeBuilder.destroy()</inbound>
            <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.OSGiGlassFishRuntimeBuilder.framework</inbound>
            <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.OSGiGlassFishRuntimeBuilder.getRuntime()</inbound>
            <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.OSGiGlassFishRuntimeBuilder.launchOSGiFrameWork()</inbound>
            <feature confirmed="no">
                <name>org.osgi.framework.launch.Framework.getBundleContext()</name>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.OSGiGlassFishRuntimeBuilder.getRuntime()</inbound>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.OSGiGlassFishRuntimeBuilder.launchOSGiFrameWork()</inbound>
            </feature>
            <feature confirmed="no">
                <name>org.osgi.framework.launch.Framework.init()</name>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.OSGiGlassFishRuntimeBuilder.launchOSGiFrameWork()</inbound>
            </feature>
            <feature confirmed="no">
                <name>org.osgi.framework.launch.Framework.start()</name>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.OSGiGlassFishRuntimeBuilder.launchOSGiFrameWork()</inbound>
            </feature>
            <feature confirmed="no">
                <name>org.osgi.framework.launch.Framework.stop()</name>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.OSGiGlassFishRuntimeBuilder.destroy()</inbound>
            </feature>
            <feature confirmed="no">
                <name>org.osgi.framework.launch.Framework.waitForStop(long)</name>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.OSGiGlassFishRuntimeBuilder.destroy()</inbound>
            </feature>
        </class>
        <class confirmed="no">
            <name>org.osgi.framework.launch.FrameworkFactory</name>
            <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.OSGiGlassFishRuntimeBuilder.launchOSGiFrameWork()</inbound>
            <feature confirmed="no">
                <name>org.osgi.framework.launch.FrameworkFactory.newFramework(java.util.Map)</name>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.OSGiGlassFishRuntimeBuilder.launchOSGiFrameWork()</inbound>
            </feature>
        </class>
    </package>
    <package confirmed="no">
        <name>org.osgi.service.cm</name>
        <class confirmed="no">
            <name>org.osgi.service.cm.ConfigurationAdmin</name>
            <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.GlassFishActivator.startConfigAdmin()</inbound>
        </class>
    </package>
    <package confirmed="no">
        <name>org.osgi.service.startlevel</name>
        <class confirmed="no">
            <name>org.osgi.service.startlevel.StartLevel</name>
            <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.AutoProcessor.processAutoProperties(java.util.Map, org.osgi.framework.BundleContext)</inbound>
            <feature confirmed="no">
                <name>org.osgi.service.startlevel.StartLevel.getInitialBundleStartLevel()</name>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.AutoProcessor.processAutoProperties(java.util.Map, org.osgi.framework.BundleContext)</inbound>
            </feature>
            <feature confirmed="no">
                <name>org.osgi.service.startlevel.StartLevel.setBundleStartLevel(org.osgi.framework.Bundle, int)</name>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.AutoProcessor.processAutoProperties(java.util.Map, org.osgi.framework.BundleContext)</inbound>
            </feature>
        </class>
    </package>
    <package confirmed="no">
        <name>org.osgi.util.tracker</name>
        <class confirmed="no">
            <name>org.osgi.util.tracker.ServiceTracker</name>
            <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.GlassFishActivator$1.GlassFishActivator$1(com.sun.enterprise.glassfish.bootstrap.GlassFishActivator, org.osgi.util.tracker.ServiceTracker)</inbound>
            <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.GlassFishActivator$1.newGlassFish(java.util.Properties)</inbound>
            <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.GlassFishActivator$1.val$hk2Tracker</inbound>
            <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.GlassFishActivator.registerGlassFishRuntime()</inbound>
            <feature confirmed="no">
                <name>org.osgi.util.tracker.ServiceTracker.ServiceTracker(org.osgi.framework.BundleContext, java.lang.String, org.osgi.util.tracker.ServiceTrackerCustomizer)</name>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.GlassFishActivator.registerGlassFishRuntime()</inbound>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.OSGiGlassFishRuntimeBuilder.getRuntime()</inbound>
            </feature>
            <feature confirmed="no">
                <name>org.osgi.util.tracker.ServiceTracker.open()</name>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.GlassFishActivator.registerGlassFishRuntime()</inbound>
            </feature>
            <feature confirmed="no">
                <name>org.osgi.util.tracker.ServiceTracker.open(boolean)</name>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.OSGiGlassFishRuntimeBuilder.getRuntime()</inbound>
            </feature>
            <feature confirmed="no">
                <name>org.osgi.util.tracker.ServiceTracker.waitForService(long)</name>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.GlassFishActivator$1.newGlassFish(java.util.Properties)</inbound>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.OSGiGlassFishRuntimeBuilder.getRuntime()</inbound>
            </feature>
        </class>
        <class confirmed="no">
            <name>org.osgi.util.tracker.ServiceTrackerCustomizer</name>
            <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.GlassFishActivator.registerGlassFishRuntime()</inbound>
            <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.OSGiGlassFishRuntimeBuilder.getRuntime()</inbound>
        </class>
    </package>
</dependencies>
