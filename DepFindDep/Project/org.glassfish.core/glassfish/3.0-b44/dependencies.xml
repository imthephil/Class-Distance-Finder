<?xml version="1.0" encoding="utf-8" ?>

<!DOCTYPE dependencies SYSTEM "http://depfind.sourceforge.net/dtd/dependencies.dtd">

<dependencies>
    <package confirmed="yes">
        <name>com.sun.enterprise.glassfish.bootstrap</name>
        <class confirmed="yes">
            <name>com.sun.enterprise.glassfish.bootstrap.ASMain</name>
            <outbound type="class" confirmed="no">java.lang.Object</outbound>
            <feature confirmed="yes">
                <name>com.sun.enterprise.glassfish.bootstrap.ASMain.ASMain()</name>
                <outbound type="feature" confirmed="no">java.lang.Object.Object()</outbound>
            </feature>
            <feature confirmed="yes">
                <name>com.sun.enterprise.glassfish.bootstrap.ASMain.PLATFORM_PROPERTY_KEY</name>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
            </feature>
            <feature confirmed="yes">
                <name>com.sun.enterprise.glassfish.bootstrap.ASMain.logger</name>
                <outbound type="class" confirmed="no">java.util.logging.Logger</outbound>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMain.main(java.lang.String[])</inbound>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMain.static {}</inbound>
            </feature>
            <feature confirmed="yes">
                <name>com.sun.enterprise.glassfish.bootstrap.ASMain.main(java.lang.String[])</name>
                <outbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMain$1.$SwitchMap$com$sun$enterprise$glassfish$bootstrap$ASMain$Platform</outbound>
                <outbound type="class" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMain$Platform</outbound>
                <outbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMain$Platform.Felix</outbound>
                <outbound type="feature" confirmed="no">com.sun.enterprise.glassfish.bootstrap.ASMain$Platform.ordinal()</outbound>
                <outbound type="feature" confirmed="no">com.sun.enterprise.glassfish.bootstrap.ASMain$Platform.toString()</outbound>
                <outbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMain$Platform.valueOf(java.lang.String)</outbound>
                <outbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMain.logger</outbound>
                <outbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainEquinox.ASMainEquinox(java.util.logging.Logger, java.lang.String[])</outbound>
                <outbound type="feature" confirmed="no">com.sun.enterprise.glassfish.bootstrap.ASMainEquinox.run()</outbound>
                <outbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainFelix.ASMainFelix(java.util.logging.Logger, java.lang.String[])</outbound>
                <outbound type="feature" confirmed="no">com.sun.enterprise.glassfish.bootstrap.ASMainFelix.run()</outbound>
                <outbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainKnopflerFish.ASMainKnopflerFish(java.util.logging.Logger, java.lang.String[])</outbound>
                <outbound type="feature" confirmed="no">com.sun.enterprise.glassfish.bootstrap.ASMainKnopflerFish.run()</outbound>
                <outbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainStatic.ASMainStatic(java.util.logging.Logger, java.lang.String[])</outbound>
                <outbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainStatic.run()</outbound>
                <outbound type="feature" confirmed="no">java.lang.RuntimeException.RuntimeException(java.lang.String)</outbound>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="feature" confirmed="no">java.lang.String.length()</outbound>
                <outbound type="feature" confirmed="no">java.lang.String.trim()</outbound>
                <outbound type="feature" confirmed="no">java.lang.System.getProperty(java.lang.String)</outbound>
                <outbound type="feature" confirmed="no">java.lang.System.getenv(java.lang.String)</outbound>
                <outbound type="feature" confirmed="no">java.lang.System.setProperty(java.lang.String, java.lang.String)</outbound>
                <outbound type="class" confirmed="no">java.util.logging.Logger</outbound>
                <outbound type="feature" confirmed="no">java.util.logging.Logger.info(java.lang.String)</outbound>
            </feature>
            <feature confirmed="yes">
                <name>com.sun.enterprise.glassfish.bootstrap.ASMain.static {}</name>
                <outbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMain.logger</outbound>
                <outbound type="class" confirmed="no">java.util.logging.Logger</outbound>
                <outbound type="feature" confirmed="no">java.util.logging.Logger.getAnonymousLogger()</outbound>
            </feature>
        </class>
        <class confirmed="yes">
            <name>com.sun.enterprise.glassfish.bootstrap.ASMain$1</name>
            <outbound type="class" confirmed="no">java.lang.Object</outbound>
            <feature confirmed="yes">
                <name>com.sun.enterprise.glassfish.bootstrap.ASMain$1.$SwitchMap$com$sun$enterprise$glassfish$bootstrap$ASMain$Platform</name>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMain$1.static {}</inbound>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMain.main(java.lang.String[])</inbound>
            </feature>
            <feature confirmed="yes">
                <name>com.sun.enterprise.glassfish.bootstrap.ASMain$1.static {}</name>
                <outbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMain$1.$SwitchMap$com$sun$enterprise$glassfish$bootstrap$ASMain$Platform</outbound>
                <outbound type="class" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMain$Platform</outbound>
                <outbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMain$Platform.Equinox</outbound>
                <outbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMain$Platform.Felix</outbound>
                <outbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMain$Platform.HK2</outbound>
                <outbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMain$Platform.KnopflerFish</outbound>
                <outbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMain$Platform.Knopflerfish</outbound>
                <outbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMain$Platform.Static</outbound>
                <outbound type="feature" confirmed="no">com.sun.enterprise.glassfish.bootstrap.ASMain$Platform.ordinal()</outbound>
                <outbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMain$Platform.values()</outbound>
                <outbound type="class" confirmed="no">java.lang.NoSuchFieldError</outbound>
            </feature>
        </class>
        <class confirmed="yes">
            <name>com.sun.enterprise.glassfish.bootstrap.ASMain$Platform</name>
            <outbound type="class" confirmed="no">java.lang.Enum</outbound>
            <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMain$1.static {}</inbound>
            <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMain.main(java.lang.String[])</inbound>
            <feature confirmed="yes">
                <name>com.sun.enterprise.glassfish.bootstrap.ASMain$Platform.$VALUES</name>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMain$Platform.static {}</inbound>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMain$Platform.values()</inbound>
            </feature>
            <feature confirmed="yes">
                <name>com.sun.enterprise.glassfish.bootstrap.ASMain$Platform.ASMain$Platform(java.lang.String, int)</name>
                <outbound type="feature" confirmed="no">java.lang.Enum.Enum(java.lang.String, int)</outbound>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMain$Platform.static {}</inbound>
            </feature>
            <feature confirmed="yes">
                <name>com.sun.enterprise.glassfish.bootstrap.ASMain$Platform.Equinox</name>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMain$1.static {}</inbound>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMain$Platform.static {}</inbound>
            </feature>
            <feature confirmed="yes">
                <name>com.sun.enterprise.glassfish.bootstrap.ASMain$Platform.Felix</name>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMain$1.static {}</inbound>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMain$Platform.static {}</inbound>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMain.main(java.lang.String[])</inbound>
            </feature>
            <feature confirmed="yes">
                <name>com.sun.enterprise.glassfish.bootstrap.ASMain$Platform.HK2</name>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMain$1.static {}</inbound>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMain$Platform.static {}</inbound>
            </feature>
            <feature confirmed="yes">
                <name>com.sun.enterprise.glassfish.bootstrap.ASMain$Platform.KnopflerFish</name>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMain$1.static {}</inbound>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMain$Platform.static {}</inbound>
            </feature>
            <feature confirmed="yes">
                <name>com.sun.enterprise.glassfish.bootstrap.ASMain$Platform.Knopflerfish</name>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMain$1.static {}</inbound>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMain$Platform.static {}</inbound>
            </feature>
            <feature confirmed="yes">
                <name>com.sun.enterprise.glassfish.bootstrap.ASMain$Platform.Static</name>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMain$1.static {}</inbound>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMain$Platform.static {}</inbound>
            </feature>
            <feature confirmed="no">
                <name>com.sun.enterprise.glassfish.bootstrap.ASMain$Platform.ordinal()</name>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMain$1.static {}</inbound>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMain.main(java.lang.String[])</inbound>
            </feature>
            <feature confirmed="yes">
                <name>com.sun.enterprise.glassfish.bootstrap.ASMain$Platform.static {}</name>
                <outbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMain$Platform.$VALUES</outbound>
                <outbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMain$Platform.ASMain$Platform(java.lang.String, int)</outbound>
                <outbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMain$Platform.Equinox</outbound>
                <outbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMain$Platform.Felix</outbound>
                <outbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMain$Platform.HK2</outbound>
                <outbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMain$Platform.KnopflerFish</outbound>
                <outbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMain$Platform.Knopflerfish</outbound>
                <outbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMain$Platform.Static</outbound>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
            </feature>
            <feature confirmed="no">
                <name>com.sun.enterprise.glassfish.bootstrap.ASMain$Platform.toString()</name>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMain.main(java.lang.String[])</inbound>
            </feature>
            <feature confirmed="yes">
                <name>com.sun.enterprise.glassfish.bootstrap.ASMain$Platform.valueOf(java.lang.String)</name>
                <outbound type="class" confirmed="no">java.lang.Class</outbound>
                <outbound type="class" confirmed="no">java.lang.Enum</outbound>
                <outbound type="feature" confirmed="no">java.lang.Enum.valueOf(java.lang.Class, java.lang.String)</outbound>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMain.main(java.lang.String[])</inbound>
            </feature>
            <feature confirmed="yes">
                <name>com.sun.enterprise.glassfish.bootstrap.ASMain$Platform.values()</name>
                <outbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMain$Platform.$VALUES</outbound>
                <outbound type="class" confirmed="no">com.sun.enterprise.glassfish.bootstrap.ASMain$Platform[]</outbound>
                <outbound type="feature" confirmed="no">com.sun.enterprise.glassfish.bootstrap.ASMain$Platform[].clone()</outbound>
                <outbound type="class" confirmed="no">java.lang.Object</outbound>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMain$1.static {}</inbound>
            </feature>
        </class>
        <class confirmed="no">
            <name>com.sun.enterprise.glassfish.bootstrap.ASMain$Platform[]</name>
            <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMain$Platform.values()</inbound>
            <feature confirmed="no">
                <name>com.sun.enterprise.glassfish.bootstrap.ASMain$Platform[].clone()</name>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMain$Platform.values()</inbound>
            </feature>
        </class>
        <class confirmed="yes">
            <name>com.sun.enterprise.glassfish.bootstrap.ASMainEquinox</name>
            <outbound type="class" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainOSGi</outbound>
            <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainEquinox$1.ASMainEquinox$1(com.sun.enterprise.glassfish.bootstrap.ASMainEquinox, java.lang.reflect.Method, java.lang.String[])</inbound>
            <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainEquinox$1.this$0</inbound>
            <feature confirmed="yes">
                <name>com.sun.enterprise.glassfish.bootstrap.ASMainEquinox.ASMainEquinox(java.util.logging.Logger, java.lang.String[])</name>
                <outbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainOSGi.ASMainOSGi(java.util.logging.Logger, java.lang.String[])</outbound>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="class" confirmed="no">java.util.logging.Logger</outbound>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMain.main(java.lang.String[])</inbound>
            </feature>
            <feature confirmed="yes">
                <name>com.sun.enterprise.glassfish.bootstrap.ASMainEquinox.addFrameworkJars(com.sun.enterprise.glassfish.bootstrap.ClassPathBuilder)</name>
                <outbound type="feature" confirmed="no">com.sun.enterprise.glassfish.bootstrap.ASMainEquinox.fwDir</outbound>
                <outbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainEquinox.pluginsDir</outbound>
                <outbound type="class" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ClassPathBuilder</outbound>
                <outbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ClassPathBuilder.addGlob(java.io.File, java.lang.String[])</outbound>
                <outbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ClassPathBuilder.addJarFolder(java.io.File, java.lang.String[])</outbound>
                <outbound type="class" confirmed="no">java.io.File</outbound>
                <outbound type="class" confirmed="no">java.io.IOException</outbound>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
            </feature>
            <feature confirmed="no">
                <name>com.sun.enterprise.glassfish.bootstrap.ASMainEquinox.fwDir</name>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainEquinox.addFrameworkJars(com.sun.enterprise.glassfish.bootstrap.ClassPathBuilder)</inbound>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainEquinox.launchOSGiFW()</inbound>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainEquinox.setFwDir()</inbound>
            </feature>
            <feature confirmed="yes">
                <name>com.sun.enterprise.glassfish.bootstrap.ASMainEquinox.getFWMainClassName()</name>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainEquinox.launchOSGiFW()</inbound>
            </feature>
            <feature confirmed="no">
                <name>com.sun.enterprise.glassfish.bootstrap.ASMainEquinox.glassfishDir</name>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainEquinox.setFwDir()</inbound>
            </feature>
            <feature confirmed="yes">
                <name>com.sun.enterprise.glassfish.bootstrap.ASMainEquinox.launchOSGiFW()</name>
                <outbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainEquinox$1.ASMainEquinox$1(com.sun.enterprise.glassfish.bootstrap.ASMainEquinox, java.lang.reflect.Method, java.lang.String[])</outbound>
                <outbound type="feature" confirmed="no">com.sun.enterprise.glassfish.bootstrap.ASMainEquinox.fwDir</outbound>
                <outbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainEquinox.getFWMainClassName()</outbound>
                <outbound type="feature" confirmed="no">com.sun.enterprise.glassfish.bootstrap.ASMainEquinox.launcherCL</outbound>
                <outbound type="feature" confirmed="no">com.sun.enterprise.glassfish.bootstrap.ASMainEquinox.logger</outbound>
                <outbound type="class" confirmed="no">java.io.File</outbound>
                <outbound type="feature" confirmed="no">java.io.File.File(java.io.File, java.lang.String)</outbound>
                <outbound type="feature" confirmed="no">java.io.File.getCanonicalPath()</outbound>
                <outbound type="class" confirmed="no">java.lang.Class</outbound>
                <outbound type="feature" confirmed="no">java.lang.Class.getMethod(java.lang.String, java.lang.Class[])</outbound>
                <outbound type="class" confirmed="no">java.lang.ClassLoader</outbound>
                <outbound type="feature" confirmed="no">java.lang.ClassLoader.loadClass(java.lang.String)</outbound>
                <outbound type="class" confirmed="no">java.lang.Exception</outbound>
                <outbound type="feature" confirmed="no">java.lang.Object.getClass()</outbound>
                <outbound type="class" confirmed="no">java.lang.Runnable</outbound>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="feature" confirmed="no">java.lang.System.setProperty(java.lang.String, java.lang.String)</outbound>
                <outbound type="feature" confirmed="no">java.lang.Thread.Thread(java.lang.Runnable, java.lang.String)</outbound>
                <outbound type="feature" confirmed="no">java.lang.Thread.join()</outbound>
                <outbound type="feature" confirmed="no">java.lang.Thread.start()</outbound>
                <outbound type="class" confirmed="no">java.lang.reflect.Method</outbound>
                <outbound type="class" confirmed="no">java.util.logging.Logger</outbound>
                <outbound type="feature" confirmed="no">java.util.logging.Logger.info(java.lang.String)</outbound>
            </feature>
            <feature confirmed="no">
                <name>com.sun.enterprise.glassfish.bootstrap.ASMainEquinox.launcherCL</name>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainEquinox.launchOSGiFW()</inbound>
            </feature>
            <feature confirmed="no">
                <name>com.sun.enterprise.glassfish.bootstrap.ASMainEquinox.logger</name>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainEquinox.launchOSGiFW()</inbound>
            </feature>
            <feature confirmed="yes">
                <name>com.sun.enterprise.glassfish.bootstrap.ASMainEquinox.pluginsDir</name>
                <outbound type="class" confirmed="no">java.io.File</outbound>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainEquinox.addFrameworkJars(com.sun.enterprise.glassfish.bootstrap.ClassPathBuilder)</inbound>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainEquinox.setFwDir()</inbound>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainEquinox.static {}</inbound>
            </feature>
            <feature confirmed="no">
                <name>com.sun.enterprise.glassfish.bootstrap.ASMainEquinox.run()</name>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMain.main(java.lang.String[])</inbound>
            </feature>
            <feature confirmed="yes">
                <name>com.sun.enterprise.glassfish.bootstrap.ASMainEquinox.setFwDir()</name>
                <outbound type="feature" confirmed="no">com.sun.enterprise.glassfish.bootstrap.ASMainEquinox.fwDir</outbound>
                <outbound type="feature" confirmed="no">com.sun.enterprise.glassfish.bootstrap.ASMainEquinox.glassfishDir</outbound>
                <outbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainEquinox.pluginsDir</outbound>
                <outbound type="class" confirmed="no">java.io.File</outbound>
                <outbound type="feature" confirmed="no">java.io.File.File(java.io.File, java.lang.String)</outbound>
                <outbound type="feature" confirmed="no">java.io.File.File(java.lang.String)</outbound>
                <outbound type="feature" confirmed="no">java.io.File.exists()</outbound>
                <outbound type="feature" confirmed="no">java.io.File.getAbsolutePath()</outbound>
                <outbound type="feature" confirmed="no">java.lang.RuntimeException.RuntimeException(java.lang.String)</outbound>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="class" confirmed="no">java.lang.StringBuilder</outbound>
                <outbound type="feature" confirmed="no">java.lang.StringBuilder.StringBuilder()</outbound>
                <outbound type="feature" confirmed="no">java.lang.StringBuilder.append(java.lang.String)</outbound>
                <outbound type="feature" confirmed="no">java.lang.StringBuilder.toString()</outbound>
                <outbound type="feature" confirmed="no">java.lang.System.getenv(java.lang.String)</outbound>
            </feature>
            <feature confirmed="yes">
                <name>com.sun.enterprise.glassfish.bootstrap.ASMainEquinox.static {}</name>
                <outbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainEquinox.pluginsDir</outbound>
                <outbound type="class" confirmed="no">java.io.File</outbound>
            </feature>
        </class>
        <class confirmed="yes">
            <name>com.sun.enterprise.glassfish.bootstrap.ASMainEquinox$1</name>
            <outbound type="class" confirmed="no">java.lang.Object</outbound>
            <outbound type="class" confirmed="no">java.lang.Runnable</outbound>
            <feature confirmed="yes">
                <name>com.sun.enterprise.glassfish.bootstrap.ASMainEquinox$1.ASMainEquinox$1(com.sun.enterprise.glassfish.bootstrap.ASMainEquinox, java.lang.reflect.Method, java.lang.String[])</name>
                <outbound type="class" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainEquinox</outbound>
                <outbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainEquinox$1.this$0</outbound>
                <outbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainEquinox$1.val$args</outbound>
                <outbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainEquinox$1.val$m</outbound>
                <outbound type="feature" confirmed="no">java.lang.Object.Object()</outbound>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="class" confirmed="no">java.lang.reflect.Method</outbound>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainEquinox.launchOSGiFW()</inbound>
            </feature>
            <feature confirmed="yes">
                <name>com.sun.enterprise.glassfish.bootstrap.ASMainEquinox$1.run()</name>
                <outbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainEquinox$1.val$args</outbound>
                <outbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainEquinox$1.val$m</outbound>
                <outbound type="class" confirmed="no">java.lang.IllegalAccessException</outbound>
                <outbound type="class" confirmed="no">java.lang.Object</outbound>
                <outbound type="feature" confirmed="no">java.lang.RuntimeException.RuntimeException(java.lang.Throwable)</outbound>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="class" confirmed="no">java.lang.Throwable</outbound>
                <outbound type="class" confirmed="no">java.lang.reflect.InvocationTargetException</outbound>
                <outbound type="class" confirmed="no">java.lang.reflect.Method</outbound>
                <outbound type="feature" confirmed="no">java.lang.reflect.Method.invoke(java.lang.Object, java.lang.Object[])</outbound>
            </feature>
            <feature confirmed="yes">
                <name>com.sun.enterprise.glassfish.bootstrap.ASMainEquinox$1.this$0</name>
                <outbound type="class" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainEquinox</outbound>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainEquinox$1.ASMainEquinox$1(com.sun.enterprise.glassfish.bootstrap.ASMainEquinox, java.lang.reflect.Method, java.lang.String[])</inbound>
            </feature>
            <feature confirmed="yes">
                <name>com.sun.enterprise.glassfish.bootstrap.ASMainEquinox$1.val$args</name>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainEquinox$1.ASMainEquinox$1(com.sun.enterprise.glassfish.bootstrap.ASMainEquinox, java.lang.reflect.Method, java.lang.String[])</inbound>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainEquinox$1.run()</inbound>
            </feature>
            <feature confirmed="yes">
                <name>com.sun.enterprise.glassfish.bootstrap.ASMainEquinox$1.val$m</name>
                <outbound type="class" confirmed="no">java.lang.reflect.Method</outbound>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainEquinox$1.ASMainEquinox$1(com.sun.enterprise.glassfish.bootstrap.ASMainEquinox, java.lang.reflect.Method, java.lang.String[])</inbound>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainEquinox$1.run()</inbound>
            </feature>
        </class>
        <class confirmed="yes">
            <name>com.sun.enterprise.glassfish.bootstrap.ASMainFelix</name>
            <outbound type="class" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainOSGi</outbound>
            <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainFelix$1.ASMainFelix$1(com.sun.enterprise.glassfish.bootstrap.ASMainFelix, java.lang.reflect.Method, java.lang.String[])</inbound>
            <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainFelix$1.this$0</inbound>
            <feature confirmed="yes">
                <name>com.sun.enterprise.glassfish.bootstrap.ASMainFelix.ASMainFelix(java.util.logging.Logger, java.lang.String[])</name>
                <outbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainOSGi.ASMainOSGi(java.util.logging.Logger, java.lang.String[])</outbound>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="class" confirmed="no">java.util.logging.Logger</outbound>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMain.main(java.lang.String[])</inbound>
            </feature>
            <feature confirmed="yes">
                <name>com.sun.enterprise.glassfish.bootstrap.ASMainFelix.FELIX_HOME</name>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
            </feature>
            <feature confirmed="yes">
                <name>com.sun.enterprise.glassfish.bootstrap.ASMainFelix.addFrameworkJars(com.sun.enterprise.glassfish.bootstrap.ClassPathBuilder)</name>
                <outbound type="feature" confirmed="no">com.sun.enterprise.glassfish.bootstrap.ASMainFelix.fwDir</outbound>
                <outbound type="class" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ClassPathBuilder</outbound>
                <outbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ClassPathBuilder.addJar(java.io.File)</outbound>
                <outbound type="class" confirmed="no">java.io.File</outbound>
                <outbound type="feature" confirmed="no">java.io.File.File(java.io.File, java.lang.String)</outbound>
                <outbound type="class" confirmed="no">java.io.IOException</outbound>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
            </feature>
            <feature confirmed="no">
                <name>com.sun.enterprise.glassfish.bootstrap.ASMainFelix.bootstrapFile</name>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainFelix.launchOSGiFW()</inbound>
            </feature>
            <feature confirmed="no">
                <name>com.sun.enterprise.glassfish.bootstrap.ASMainFelix.domainDir</name>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainFelix.launchOSGiFW()</inbound>
            </feature>
            <feature confirmed="no">
                <name>com.sun.enterprise.glassfish.bootstrap.ASMainFelix.fwDir</name>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainFelix.addFrameworkJars(com.sun.enterprise.glassfish.bootstrap.ClassPathBuilder)</inbound>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainFelix.launchOSGiFW()</inbound>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainFelix.setFwDir()</inbound>
            </feature>
            <feature confirmed="yes">
                <name>com.sun.enterprise.glassfish.bootstrap.ASMainFelix.getFWMainClassName()</name>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainFelix.launchOSGiFW()</inbound>
            </feature>
            <feature confirmed="no">
                <name>com.sun.enterprise.glassfish.bootstrap.ASMainFelix.glassfishDir</name>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainFelix.setFwDir()</inbound>
            </feature>
            <feature confirmed="yes">
                <name>com.sun.enterprise.glassfish.bootstrap.ASMainFelix.launchOSGiFW()</name>
                <outbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainFelix$1.ASMainFelix$1(com.sun.enterprise.glassfish.bootstrap.ASMainFelix, java.lang.reflect.Method, java.lang.String[])</outbound>
                <outbound type="feature" confirmed="no">com.sun.enterprise.glassfish.bootstrap.ASMainFelix.bootstrapFile</outbound>
                <outbound type="feature" confirmed="no">com.sun.enterprise.glassfish.bootstrap.ASMainFelix.domainDir</outbound>
                <outbound type="feature" confirmed="no">com.sun.enterprise.glassfish.bootstrap.ASMainFelix.fwDir</outbound>
                <outbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainFelix.getFWMainClassName()</outbound>
                <outbound type="feature" confirmed="no">com.sun.enterprise.glassfish.bootstrap.ASMainFelix.launcherCL</outbound>
                <outbound type="feature" confirmed="no">com.sun.enterprise.glassfish.bootstrap.ASMainFelix.logger</outbound>
                <outbound type="feature" confirmed="no">com.sun.enterprise.glassfish.bootstrap.ASMainFelix.setUpCache(java.io.File, java.io.File)</outbound>
                <outbound type="class" confirmed="no">java.io.File</outbound>
                <outbound type="feature" confirmed="no">java.io.File.File(java.io.File, java.lang.String)</outbound>
                <outbound type="feature" confirmed="no">java.io.File.getCanonicalPath()</outbound>
                <outbound type="feature" confirmed="no">java.io.File.getParentFile()</outbound>
                <outbound type="feature" confirmed="no">java.io.File.toURI()</outbound>
                <outbound type="class" confirmed="no">java.lang.Class</outbound>
                <outbound type="feature" confirmed="no">java.lang.Class.getMethod(java.lang.String, java.lang.Class[])</outbound>
                <outbound type="class" confirmed="no">java.lang.ClassLoader</outbound>
                <outbound type="feature" confirmed="no">java.lang.ClassLoader.loadClass(java.lang.String)</outbound>
                <outbound type="class" confirmed="no">java.lang.Exception</outbound>
                <outbound type="feature" confirmed="no">java.lang.Object.getClass()</outbound>
                <outbound type="class" confirmed="no">java.lang.Runnable</outbound>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="feature" confirmed="no">java.lang.System.setProperty(java.lang.String, java.lang.String)</outbound>
                <outbound type="feature" confirmed="no">java.lang.Thread.Thread(java.lang.Runnable, java.lang.String)</outbound>
                <outbound type="feature" confirmed="no">java.lang.Thread.join()</outbound>
                <outbound type="feature" confirmed="no">java.lang.Thread.setDaemon(boolean)</outbound>
                <outbound type="feature" confirmed="no">java.lang.Thread.start()</outbound>
                <outbound type="class" confirmed="no">java.lang.reflect.Method</outbound>
                <outbound type="class" confirmed="no">java.net.URI</outbound>
                <outbound type="feature" confirmed="no">java.net.URI.toURL()</outbound>
                <outbound type="class" confirmed="no">java.net.URL</outbound>
                <outbound type="feature" confirmed="no">java.net.URL.toString()</outbound>
                <outbound type="class" confirmed="no">java.util.logging.Logger</outbound>
                <outbound type="feature" confirmed="no">java.util.logging.Logger.fine(java.lang.String)</outbound>
            </feature>
            <feature confirmed="no">
                <name>com.sun.enterprise.glassfish.bootstrap.ASMainFelix.launcherCL</name>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainFelix.launchOSGiFW()</inbound>
            </feature>
            <feature confirmed="no">
                <name>com.sun.enterprise.glassfish.bootstrap.ASMainFelix.logger</name>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainFelix.launchOSGiFW()</inbound>
            </feature>
            <feature confirmed="no">
                <name>com.sun.enterprise.glassfish.bootstrap.ASMainFelix.run()</name>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMain.main(java.lang.String[])</inbound>
            </feature>
            <feature confirmed="yes">
                <name>com.sun.enterprise.glassfish.bootstrap.ASMainFelix.setFwDir()</name>
                <outbound type="feature" confirmed="no">com.sun.enterprise.glassfish.bootstrap.ASMainFelix.fwDir</outbound>
                <outbound type="feature" confirmed="no">com.sun.enterprise.glassfish.bootstrap.ASMainFelix.glassfishDir</outbound>
                <outbound type="class" confirmed="no">java.io.File</outbound>
                <outbound type="feature" confirmed="no">java.io.File.File(java.io.File, java.lang.String)</outbound>
                <outbound type="feature" confirmed="no">java.io.File.File(java.lang.String)</outbound>
                <outbound type="feature" confirmed="no">java.io.File.exists()</outbound>
                <outbound type="feature" confirmed="no">java.io.File.getAbsolutePath()</outbound>
                <outbound type="feature" confirmed="no">java.lang.RuntimeException.RuntimeException(java.lang.String)</outbound>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="class" confirmed="no">java.lang.StringBuilder</outbound>
                <outbound type="feature" confirmed="no">java.lang.StringBuilder.StringBuilder()</outbound>
                <outbound type="feature" confirmed="no">java.lang.StringBuilder.append(java.lang.String)</outbound>
                <outbound type="feature" confirmed="no">java.lang.StringBuilder.toString()</outbound>
                <outbound type="feature" confirmed="no">java.lang.System.getProperty(java.lang.String, java.lang.String)</outbound>
                <outbound type="feature" confirmed="no">java.lang.System.getenv(java.lang.String)</outbound>
            </feature>
            <feature confirmed="no">
                <name>com.sun.enterprise.glassfish.bootstrap.ASMainFelix.setUpCache(java.io.File, java.io.File)</name>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainFelix.launchOSGiFW()</inbound>
            </feature>
        </class>
        <class confirmed="yes">
            <name>com.sun.enterprise.glassfish.bootstrap.ASMainFelix$1</name>
            <outbound type="class" confirmed="no">java.lang.Object</outbound>
            <outbound type="class" confirmed="no">java.lang.Runnable</outbound>
            <feature confirmed="yes">
                <name>com.sun.enterprise.glassfish.bootstrap.ASMainFelix$1.ASMainFelix$1(com.sun.enterprise.glassfish.bootstrap.ASMainFelix, java.lang.reflect.Method, java.lang.String[])</name>
                <outbound type="class" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainFelix</outbound>
                <outbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainFelix$1.this$0</outbound>
                <outbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainFelix$1.val$args</outbound>
                <outbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainFelix$1.val$m</outbound>
                <outbound type="feature" confirmed="no">java.lang.Object.Object()</outbound>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="class" confirmed="no">java.lang.reflect.Method</outbound>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainFelix.launchOSGiFW()</inbound>
            </feature>
            <feature confirmed="yes">
                <name>com.sun.enterprise.glassfish.bootstrap.ASMainFelix$1.run()</name>
                <outbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainFelix$1.val$args</outbound>
                <outbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainFelix$1.val$m</outbound>
                <outbound type="class" confirmed="no">java.lang.IllegalAccessException</outbound>
                <outbound type="class" confirmed="no">java.lang.Object</outbound>
                <outbound type="feature" confirmed="no">java.lang.RuntimeException.RuntimeException(java.lang.Throwable)</outbound>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="class" confirmed="no">java.lang.Throwable</outbound>
                <outbound type="class" confirmed="no">java.lang.reflect.InvocationTargetException</outbound>
                <outbound type="class" confirmed="no">java.lang.reflect.Method</outbound>
                <outbound type="feature" confirmed="no">java.lang.reflect.Method.invoke(java.lang.Object, java.lang.Object[])</outbound>
            </feature>
            <feature confirmed="yes">
                <name>com.sun.enterprise.glassfish.bootstrap.ASMainFelix$1.this$0</name>
                <outbound type="class" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainFelix</outbound>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainFelix$1.ASMainFelix$1(com.sun.enterprise.glassfish.bootstrap.ASMainFelix, java.lang.reflect.Method, java.lang.String[])</inbound>
            </feature>
            <feature confirmed="yes">
                <name>com.sun.enterprise.glassfish.bootstrap.ASMainFelix$1.val$args</name>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainFelix$1.ASMainFelix$1(com.sun.enterprise.glassfish.bootstrap.ASMainFelix, java.lang.reflect.Method, java.lang.String[])</inbound>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainFelix$1.run()</inbound>
            </feature>
            <feature confirmed="yes">
                <name>com.sun.enterprise.glassfish.bootstrap.ASMainFelix$1.val$m</name>
                <outbound type="class" confirmed="no">java.lang.reflect.Method</outbound>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainFelix$1.ASMainFelix$1(com.sun.enterprise.glassfish.bootstrap.ASMainFelix, java.lang.reflect.Method, java.lang.String[])</inbound>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainFelix$1.run()</inbound>
            </feature>
        </class>
        <class confirmed="yes">
            <name>com.sun.enterprise.glassfish.bootstrap.ASMainHelper</name>
            <outbound type="class" confirmed="no">java.lang.Object</outbound>
            <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainHelper$1.ASMainHelper$1(com.sun.enterprise.glassfish.bootstrap.ASMainHelper)</inbound>
            <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainHelper$1.this$0</inbound>
            <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainHelper$PlainJarRepository.ASMainHelper$PlainJarRepository(com.sun.enterprise.glassfish.bootstrap.ASMainHelper, java.lang.String, java.io.File)</inbound>
            <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainHelper$PlainJarRepository.this$0</inbound>
            <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainOSGi.ASMainOSGi(java.util.logging.Logger, java.lang.String[])</inbound>
            <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainOSGi.addJDKToolsJar(com.sun.enterprise.glassfish.bootstrap.ClassPathBuilder)</inbound>
            <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainOSGi.helper</inbound>
            <feature confirmed="yes">
                <name>com.sun.enterprise.glassfish.bootstrap.ASMainHelper.ASMainHelper(java.util.logging.Logger)</name>
                <outbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainHelper.logger</outbound>
                <outbound type="feature" confirmed="no">java.lang.Object.Object()</outbound>
                <outbound type="class" confirmed="no">java.util.logging.Logger</outbound>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainOSGi.ASMainOSGi(java.util.logging.Logger, java.lang.String[])</inbound>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainStatic.start(java.lang.String[])</inbound>
            </feature>
            <feature confirmed="yes">
                <name>com.sun.enterprise.glassfish.bootstrap.ASMainHelper.DEFAULT_DOMAINS_DIR_PROPNAME</name>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
            </feature>
            <feature confirmed="yes">
                <name>com.sun.enterprise.glassfish.bootstrap.ASMainHelper.INSTANCE_ROOT_PROP_NAME</name>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
            </feature>
            <feature confirmed="yes">
                <name>com.sun.enterprise.glassfish.bootstrap.ASMainHelper.absolutize(java.io.File)</name>
                <outbound type="class" confirmed="no">java.io.File</outbound>
                <outbound type="feature" confirmed="no">java.io.File.getAbsoluteFile()</outbound>
                <outbound type="feature" confirmed="no">java.io.File.getCanonicalFile()</outbound>
                <outbound type="class" confirmed="no">java.lang.Exception</outbound>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainHelper.getDefaultDomainsDir()</inbound>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainHelper.verifyAndSetDomainRoot(java.io.File)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>com.sun.enterprise.glassfish.bootstrap.ASMainHelper.addPaths(java.io.File, java.lang.String[], java.util.List)</name>
                <outbound type="class" confirmed="no">java.io.File</outbound>
                <outbound type="feature" confirmed="no">java.io.File.getName()</outbound>
                <outbound type="feature" confirmed="no">java.io.File.listFiles()</outbound>
                <outbound type="feature" confirmed="no">java.io.File.toURI()</outbound>
                <outbound type="class" confirmed="no">java.lang.Object</outbound>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="feature" confirmed="no">java.lang.String.endsWith(java.lang.String)</outbound>
                <outbound type="feature" confirmed="no">java.lang.String.startsWith(java.lang.String)</outbound>
                <outbound type="class" confirmed="no">java.net.MalformedURLException</outbound>
                <outbound type="class" confirmed="no">java.net.URI</outbound>
                <outbound type="feature" confirmed="no">java.net.URI.toURL()</outbound>
                <outbound type="class" confirmed="no">java.net.URL</outbound>
                <outbound type="class" confirmed="no">java.util.List</outbound>
                <outbound type="feature" confirmed="no">java.util.List.add(java.lang.Object)</outbound>
            </feature>
            <feature confirmed="yes">
                <name>com.sun.enterprise.glassfish.bootstrap.ASMainHelper.getAsEnvConf(java.io.File)</name>
                <outbound type="class" confirmed="no">java.io.File</outbound>
                <outbound type="feature" confirmed="no">java.io.File.File(java.io.File, java.lang.String)</outbound>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="feature" confirmed="no">java.lang.String.indexOf(java.lang.String)</outbound>
                <outbound type="feature" confirmed="no">java.lang.System.getProperty(java.lang.String)</outbound>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainHelper.parseAsEnv(java.io.File)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>com.sun.enterprise.glassfish.bootstrap.ASMainHelper.getDefaultDomain(java.io.File)</name>
                <outbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainHelper$1.ASMainHelper$1(com.sun.enterprise.glassfish.bootstrap.ASMainHelper)</outbound>
                <outbound type="class" confirmed="no">java.io.File</outbound>
                <outbound type="feature" confirmed="no">java.io.File.listFiles(java.io.FileFilter)</outbound>
                <outbound type="class" confirmed="no">java.io.FileFilter</outbound>
                <outbound type="class" confirmed="no">java.lang.Object</outbound>
                <outbound type="feature" confirmed="no">java.lang.RuntimeException.RuntimeException(java.lang.String)</outbound>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="class" confirmed="no">java.lang.StringBuilder</outbound>
                <outbound type="feature" confirmed="no">java.lang.StringBuilder.StringBuilder()</outbound>
                <outbound type="feature" confirmed="no">java.lang.StringBuilder.append(java.lang.Object)</outbound>
                <outbound type="feature" confirmed="no">java.lang.StringBuilder.append(java.lang.String)</outbound>
                <outbound type="feature" confirmed="no">java.lang.StringBuilder.toString()</outbound>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainHelper.getDomainRoot(com.sun.enterprise.module.bootstrap.StartupContext)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>com.sun.enterprise.glassfish.bootstrap.ASMainHelper.getDefaultDomainsDir()</name>
                <outbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainHelper.absolutize(java.io.File)</outbound>
                <outbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainHelper.ok(java.lang.String)</outbound>
                <outbound type="class" confirmed="no">java.io.File</outbound>
                <outbound type="feature" confirmed="no">java.io.File.File(java.lang.String)</outbound>
                <outbound type="feature" confirmed="no">java.io.File.isDirectory()</outbound>
                <outbound type="feature" confirmed="no">java.lang.RuntimeException.RuntimeException(java.lang.String)</outbound>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="class" confirmed="no">java.lang.StringBuilder</outbound>
                <outbound type="feature" confirmed="no">java.lang.StringBuilder.StringBuilder()</outbound>
                <outbound type="feature" confirmed="no">java.lang.StringBuilder.append(java.lang.String)</outbound>
                <outbound type="feature" confirmed="no">java.lang.StringBuilder.toString()</outbound>
                <outbound type="feature" confirmed="no">java.lang.System.getProperty(java.lang.String)</outbound>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainHelper.getDomainRoot(com.sun.enterprise.module.bootstrap.StartupContext)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>com.sun.enterprise.glassfish.bootstrap.ASMainHelper.getDomainRoot(com.sun.enterprise.module.bootstrap.StartupContext)</name>
                <outbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainHelper.getDefaultDomain(java.io.File)</outbound>
                <outbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainHelper.getDefaultDomainsDir()</outbound>
                <outbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainHelper.getParam(java.util.Properties, java.lang.String)</outbound>
                <outbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainHelper.ok(java.lang.String)</outbound>
                <outbound type="class" confirmed="no">com.sun.enterprise.module.bootstrap.StartupContext</outbound>
                <outbound type="feature" confirmed="no">com.sun.enterprise.module.bootstrap.StartupContext.getArguments()</outbound>
                <outbound type="class" confirmed="no">java.io.File</outbound>
                <outbound type="feature" confirmed="no">java.io.File.File(java.io.File, java.lang.String)</outbound>
                <outbound type="feature" confirmed="no">java.io.File.File(java.lang.String)</outbound>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="class" confirmed="no">java.util.Properties</outbound>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainOSGi.ASMainOSGi(java.util.logging.Logger, java.lang.String[])</inbound>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainStatic.start(java.lang.String[])</inbound>
            </feature>
            <feature confirmed="yes">
                <name>com.sun.enterprise.glassfish.bootstrap.ASMainHelper.getJDKToolsJar()</name>
                <outbound type="class" confirmed="no">java.io.File</outbound>
                <outbound type="feature" confirmed="no">java.io.File.File(java.lang.String)</outbound>
                <outbound type="feature" confirmed="no">java.io.File.File(java.lang.String, java.lang.String)</outbound>
                <outbound type="feature" confirmed="no">java.io.File.getParent()</outbound>
                <outbound type="feature" confirmed="no">java.io.File.separator</outbound>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="class" confirmed="no">java.lang.StringBuilder</outbound>
                <outbound type="feature" confirmed="no">java.lang.StringBuilder.StringBuilder()</outbound>
                <outbound type="feature" confirmed="no">java.lang.StringBuilder.append(java.lang.String)</outbound>
                <outbound type="feature" confirmed="no">java.lang.StringBuilder.toString()</outbound>
                <outbound type="feature" confirmed="no">java.lang.System.getProperty(java.lang.String)</outbound>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainHelper.getJDKToolsRepo()</inbound>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainOSGi.addJDKToolsJar(com.sun.enterprise.glassfish.bootstrap.ClassPathBuilder)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>com.sun.enterprise.glassfish.bootstrap.ASMainHelper.getJDKToolsRepo()</name>
                <outbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainHelper$PlainJarRepository.ASMainHelper$PlainJarRepository(com.sun.enterprise.glassfish.bootstrap.ASMainHelper, java.lang.String, java.io.File)</outbound>
                <outbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainHelper.getJDKToolsJar()</outbound>
                <outbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainHelper.logger</outbound>
                <outbound type="class" confirmed="no">com.sun.enterprise.module.Repository</outbound>
                <outbound type="feature" confirmed="no">com.sun.enterprise.module.Repository.initialize()</outbound>
                <outbound type="class" confirmed="no">java.io.File</outbound>
                <outbound type="feature" confirmed="no">java.io.File.exists()</outbound>
                <outbound type="class" confirmed="no">java.io.IOException</outbound>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="class" confirmed="no">java.lang.Throwable</outbound>
                <outbound type="class" confirmed="no">java.util.logging.Level</outbound>
                <outbound type="feature" confirmed="no">java.util.logging.Level.SEVERE</outbound>
                <outbound type="class" confirmed="no">java.util.logging.Logger</outbound>
                <outbound type="feature" confirmed="no">java.util.logging.Logger.log(java.util.logging.Level, java.lang.String, java.lang.Throwable)</outbound>
            </feature>
            <feature confirmed="yes">
                <name>com.sun.enterprise.glassfish.bootstrap.ASMainHelper.getParam(java.util.Properties, java.lang.String)</name>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="class" confirmed="no">java.lang.StringBuilder</outbound>
                <outbound type="feature" confirmed="no">java.lang.StringBuilder.StringBuilder()</outbound>
                <outbound type="feature" confirmed="no">java.lang.StringBuilder.append(java.lang.String)</outbound>
                <outbound type="feature" confirmed="no">java.lang.StringBuilder.toString()</outbound>
                <outbound type="class" confirmed="no">java.util.Properties</outbound>
                <outbound type="feature" confirmed="no">java.util.Properties.getProperty(java.lang.String)</outbound>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainHelper.getDomainRoot(com.sun.enterprise.module.bootstrap.StartupContext)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>com.sun.enterprise.glassfish.bootstrap.ASMainHelper.logger</name>
                <outbound type="class" confirmed="no">java.util.logging.Logger</outbound>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainHelper.ASMainHelper(java.util.logging.Logger)</inbound>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainHelper.getJDKToolsRepo()</inbound>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainHelper.setupSharedCL(java.lang.ClassLoader, java.util.List, java.util.List)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>com.sun.enterprise.glassfish.bootstrap.ASMainHelper.ok(java.lang.String)</name>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="feature" confirmed="no">java.lang.String.length()</outbound>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainHelper.getDefaultDomainsDir()</inbound>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainHelper.getDomainRoot(com.sun.enterprise.module.bootstrap.StartupContext)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>com.sun.enterprise.glassfish.bootstrap.ASMainHelper.parseAsEnv(java.io.File)</name>
                <outbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainHelper.getAsEnvConf(java.io.File)</outbound>
                <outbound type="class" confirmed="no">java.io.File</outbound>
                <outbound type="feature" confirmed="no">java.io.File.File(java.io.File, java.lang.String)</outbound>
                <outbound type="feature" confirmed="no">java.io.File.File(java.lang.String)</outbound>
                <outbound type="feature" confirmed="no">java.io.File.exists()</outbound>
                <outbound type="feature" confirmed="no">java.io.File.getAbsolutePath()</outbound>
                <outbound type="feature" confirmed="no">java.io.File.getPath()</outbound>
                <outbound type="feature" confirmed="no">java.io.File.isAbsolute()</outbound>
                <outbound type="feature" confirmed="no">java.io.FileReader.FileReader(java.io.File)</outbound>
                <outbound type="class" confirmed="no">java.io.IOException</outbound>
                <outbound type="feature" confirmed="no">java.io.LineNumberReader.LineNumberReader(java.io.Reader)</outbound>
                <outbound type="feature" confirmed="no">java.io.LineNumberReader.close()</outbound>
                <outbound type="feature" confirmed="no">java.io.LineNumberReader.readLine()</outbound>
                <outbound type="class" confirmed="no">java.io.Reader</outbound>
                <outbound type="class" confirmed="no">java.lang.CharSequence</outbound>
                <outbound type="class" confirmed="no">java.lang.Object</outbound>
                <outbound type="feature" confirmed="no">java.lang.RuntimeException.RuntimeException(java.lang.String, java.lang.Throwable)</outbound>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="feature" confirmed="no">java.lang.System.getProperties()</outbound>
                <outbound type="feature" confirmed="no">java.lang.System.setProperties(java.util.Properties)</outbound>
                <outbound type="class" confirmed="no">java.lang.Throwable</outbound>
                <outbound type="class" confirmed="no">java.util.Map</outbound>
                <outbound type="class" confirmed="no">java.util.Properties</outbound>
                <outbound type="feature" confirmed="no">java.util.Properties.Properties()</outbound>
                <outbound type="feature" confirmed="no">java.util.Properties.put(java.lang.Object, java.lang.Object)</outbound>
                <outbound type="feature" confirmed="no">java.util.Properties.putAll(java.util.Map)</outbound>
                <outbound type="class" confirmed="no">java.util.regex.Matcher</outbound>
                <outbound type="feature" confirmed="no">java.util.regex.Matcher.group(int)</outbound>
                <outbound type="feature" confirmed="no">java.util.regex.Matcher.matches()</outbound>
                <outbound type="class" confirmed="no">java.util.regex.Pattern</outbound>
                <outbound type="feature" confirmed="no">java.util.regex.Pattern.compile(java.lang.String)</outbound>
                <outbound type="feature" confirmed="no">java.util.regex.Pattern.matcher(java.lang.CharSequence)</outbound>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainOSGi.ASMainOSGi(java.util.logging.Logger, java.lang.String[])</inbound>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainStatic.start(java.lang.String[])</inbound>
            </feature>
            <feature confirmed="yes">
                <name>com.sun.enterprise.glassfish.bootstrap.ASMainHelper.setupSharedCL(java.lang.ClassLoader, java.util.List, java.util.List)</name>
                <outbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainHelper.logger</outbound>
                <outbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ExtensibleClassLoader.ExtensibleClassLoader(java.net.URL[], java.lang.ClassLoader, java.util.List)</outbound>
                <outbound type="class" confirmed="no">com.sun.enterprise.module.Repository</outbound>
                <outbound type="feature" confirmed="no">com.sun.enterprise.module.Repository.getJarLocations()</outbound>
                <outbound type="class" confirmed="no">java.lang.ClassLoader</outbound>
                <outbound type="class" confirmed="no">java.lang.Object</outbound>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="class" confirmed="no">java.lang.StringBuilder</outbound>
                <outbound type="feature" confirmed="no">java.lang.StringBuilder.StringBuilder()</outbound>
                <outbound type="feature" confirmed="no">java.lang.StringBuilder.append(java.lang.String)</outbound>
                <outbound type="feature" confirmed="no">java.lang.StringBuilder.toString()</outbound>
                <outbound type="class" confirmed="no">java.net.MalformedURLException</outbound>
                <outbound type="feature" confirmed="no">java.net.MalformedURLException.getMessage()</outbound>
                <outbound type="class" confirmed="no">java.net.URI</outbound>
                <outbound type="feature" confirmed="no">java.net.URI.toURL()</outbound>
                <outbound type="class" confirmed="no">java.net.URL</outbound>
                <outbound type="feature" confirmed="no">java.util.ArrayList.ArrayList()</outbound>
                <outbound type="class" confirmed="no">java.util.Collection</outbound>
                <outbound type="class" confirmed="no">java.util.Iterator</outbound>
                <outbound type="feature" confirmed="no">java.util.Iterator.hasNext()</outbound>
                <outbound type="feature" confirmed="no">java.util.Iterator.next()</outbound>
                <outbound type="class" confirmed="no">java.util.List</outbound>
                <outbound type="feature" confirmed="no">java.util.List.addAll(java.util.Collection)</outbound>
                <outbound type="feature" confirmed="no">java.util.List.iterator()</outbound>
                <outbound type="feature" confirmed="no">java.util.List.size()</outbound>
                <outbound type="class" confirmed="no">java.util.logging.Logger</outbound>
                <outbound type="feature" confirmed="no">java.util.logging.Logger.warning(java.lang.String)</outbound>
            </feature>
            <feature confirmed="yes">
                <name>com.sun.enterprise.glassfish.bootstrap.ASMainHelper.verifyAndSetDomainRoot(java.io.File)</name>
                <outbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainHelper.absolutize(java.io.File)</outbound>
                <outbound type="class" confirmed="no">java.io.File</outbound>
                <outbound type="feature" confirmed="no">java.io.File.File(java.io.File, java.lang.String)</outbound>
                <outbound type="feature" confirmed="no">java.io.File.canWrite()</outbound>
                <outbound type="feature" confirmed="no">java.io.File.exists()</outbound>
                <outbound type="feature" confirmed="no">java.io.File.getPath()</outbound>
                <outbound type="feature" confirmed="no">java.io.File.isDirectory()</outbound>
                <outbound type="feature" confirmed="no">java.lang.RuntimeException.RuntimeException(java.lang.String)</outbound>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="feature" confirmed="no">java.lang.System.setProperty(java.lang.String, java.lang.String)</outbound>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainOSGi.ASMainOSGi(java.util.logging.Logger, java.lang.String[])</inbound>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainStatic.start(java.lang.String[])</inbound>
            </feature>
        </class>
        <class confirmed="yes">
            <name>com.sun.enterprise.glassfish.bootstrap.ASMainHelper$1</name>
            <outbound type="class" confirmed="no">java.io.FileFilter</outbound>
            <outbound type="class" confirmed="no">java.lang.Object</outbound>
            <feature confirmed="yes">
                <name>com.sun.enterprise.glassfish.bootstrap.ASMainHelper$1.ASMainHelper$1(com.sun.enterprise.glassfish.bootstrap.ASMainHelper)</name>
                <outbound type="class" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainHelper</outbound>
                <outbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainHelper$1.this$0</outbound>
                <outbound type="feature" confirmed="no">java.lang.Object.Object()</outbound>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainHelper.getDefaultDomain(java.io.File)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>com.sun.enterprise.glassfish.bootstrap.ASMainHelper$1.accept(java.io.File)</name>
                <outbound type="class" confirmed="no">java.io.File</outbound>
                <outbound type="feature" confirmed="no">java.io.File.isDirectory()</outbound>
            </feature>
            <feature confirmed="yes">
                <name>com.sun.enterprise.glassfish.bootstrap.ASMainHelper$1.this$0</name>
                <outbound type="class" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainHelper</outbound>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainHelper$1.ASMainHelper$1(com.sun.enterprise.glassfish.bootstrap.ASMainHelper)</inbound>
            </feature>
        </class>
        <class confirmed="yes">
            <name>com.sun.enterprise.glassfish.bootstrap.ASMainHelper$PlainJarRepository</name>
            <outbound type="class" confirmed="no">com.sun.enterprise.module.common_impl.AbstractRepositoryImpl</outbound>
            <feature confirmed="yes">
                <name>com.sun.enterprise.glassfish.bootstrap.ASMainHelper$PlainJarRepository.ASMainHelper$PlainJarRepository(com.sun.enterprise.glassfish.bootstrap.ASMainHelper, java.lang.String, java.io.File)</name>
                <outbound type="class" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainHelper</outbound>
                <outbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainHelper$PlainJarRepository.aFile</outbound>
                <outbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainHelper$PlainJarRepository.this$0</outbound>
                <outbound type="feature" confirmed="no">com.sun.enterprise.module.common_impl.AbstractRepositoryImpl.AbstractRepositoryImpl(java.lang.String, java.net.URI)</outbound>
                <outbound type="class" confirmed="no">java.io.File</outbound>
                <outbound type="feature" confirmed="no">java.io.File.toURI()</outbound>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="class" confirmed="no">java.net.URI</outbound>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainHelper.getJDKToolsRepo()</inbound>
            </feature>
            <feature confirmed="yes">
                <name>com.sun.enterprise.glassfish.bootstrap.ASMainHelper$PlainJarRepository.aFile</name>
                <outbound type="class" confirmed="no">java.io.File</outbound>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainHelper$PlainJarRepository.ASMainHelper$PlainJarRepository(com.sun.enterprise.glassfish.bootstrap.ASMainHelper, java.lang.String, java.io.File)</inbound>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainHelper$PlainJarRepository.loadModuleDefs(java.util.Map, java.util.List)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>com.sun.enterprise.glassfish.bootstrap.ASMainHelper$PlainJarRepository.loadModuleDefs(java.util.Map, java.util.List)</name>
                <outbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainHelper$PlainJarRepository.aFile</outbound>
                <outbound type="class" confirmed="no">java.io.File</outbound>
                <outbound type="feature" confirmed="no">java.io.File.exists()</outbound>
                <outbound type="feature" confirmed="no">java.io.File.toURI()</outbound>
                <outbound type="class" confirmed="no">java.io.IOException</outbound>
                <outbound type="class" confirmed="no">java.lang.Object</outbound>
                <outbound type="class" confirmed="no">java.net.URI</outbound>
                <outbound type="class" confirmed="no">java.util.List</outbound>
                <outbound type="feature" confirmed="no">java.util.List.add(java.lang.Object)</outbound>
                <outbound type="class" confirmed="no">java.util.Map</outbound>
            </feature>
            <feature confirmed="yes">
                <name>com.sun.enterprise.glassfish.bootstrap.ASMainHelper$PlainJarRepository.this$0</name>
                <outbound type="class" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainHelper</outbound>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainHelper$PlainJarRepository.ASMainHelper$PlainJarRepository(com.sun.enterprise.glassfish.bootstrap.ASMainHelper, java.lang.String, java.io.File)</inbound>
            </feature>
        </class>
        <class confirmed="yes">
            <name>com.sun.enterprise.glassfish.bootstrap.ASMainKnopflerFish</name>
            <outbound type="class" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainOSGi</outbound>
            <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainKnopflerFish$1.ASMainKnopflerFish$1(com.sun.enterprise.glassfish.bootstrap.ASMainKnopflerFish, java.lang.reflect.Method, java.lang.String[])</inbound>
            <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainKnopflerFish$1.this$0</inbound>
            <feature confirmed="yes">
                <name>com.sun.enterprise.glassfish.bootstrap.ASMainKnopflerFish.ASMainKnopflerFish(java.util.logging.Logger, java.lang.String[])</name>
                <outbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainOSGi.ASMainOSGi(java.util.logging.Logger, java.lang.String[])</outbound>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="class" confirmed="no">java.util.logging.Logger</outbound>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMain.main(java.lang.String[])</inbound>
            </feature>
            <feature confirmed="yes">
                <name>com.sun.enterprise.glassfish.bootstrap.ASMainKnopflerFish.addFrameworkJars(com.sun.enterprise.glassfish.bootstrap.ClassPathBuilder)</name>
                <outbound type="feature" confirmed="no">com.sun.enterprise.glassfish.bootstrap.ASMainKnopflerFish.fwDir</outbound>
                <outbound type="class" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ClassPathBuilder</outbound>
                <outbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ClassPathBuilder.addJar(java.io.File)</outbound>
                <outbound type="class" confirmed="no">java.io.File</outbound>
                <outbound type="feature" confirmed="no">java.io.File.File(java.io.File, java.lang.String)</outbound>
                <outbound type="class" confirmed="no">java.io.IOException</outbound>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
            </feature>
            <feature confirmed="no">
                <name>com.sun.enterprise.glassfish.bootstrap.ASMainKnopflerFish.bootstrapFile</name>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainKnopflerFish.launchOSGiFW()</inbound>
            </feature>
            <feature confirmed="no">
                <name>com.sun.enterprise.glassfish.bootstrap.ASMainKnopflerFish.domainDir</name>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainKnopflerFish.launchOSGiFW()</inbound>
            </feature>
            <feature confirmed="no">
                <name>com.sun.enterprise.glassfish.bootstrap.ASMainKnopflerFish.fwDir</name>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainKnopflerFish.addFrameworkJars(com.sun.enterprise.glassfish.bootstrap.ClassPathBuilder)</inbound>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainKnopflerFish.launchOSGiFW()</inbound>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainKnopflerFish.setFwDir()</inbound>
            </feature>
            <feature confirmed="yes">
                <name>com.sun.enterprise.glassfish.bootstrap.ASMainKnopflerFish.getFWMainClassName()</name>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainKnopflerFish.launchOSGiFW()</inbound>
            </feature>
            <feature confirmed="no">
                <name>com.sun.enterprise.glassfish.bootstrap.ASMainKnopflerFish.glassfishDir</name>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainKnopflerFish.setFwDir()</inbound>
            </feature>
            <feature confirmed="yes">
                <name>com.sun.enterprise.glassfish.bootstrap.ASMainKnopflerFish.launchOSGiFW()</name>
                <outbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainKnopflerFish$1.ASMainKnopflerFish$1(com.sun.enterprise.glassfish.bootstrap.ASMainKnopflerFish, java.lang.reflect.Method, java.lang.String[])</outbound>
                <outbound type="feature" confirmed="no">com.sun.enterprise.glassfish.bootstrap.ASMainKnopflerFish.bootstrapFile</outbound>
                <outbound type="feature" confirmed="no">com.sun.enterprise.glassfish.bootstrap.ASMainKnopflerFish.domainDir</outbound>
                <outbound type="feature" confirmed="no">com.sun.enterprise.glassfish.bootstrap.ASMainKnopflerFish.fwDir</outbound>
                <outbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainKnopflerFish.getFWMainClassName()</outbound>
                <outbound type="feature" confirmed="no">com.sun.enterprise.glassfish.bootstrap.ASMainKnopflerFish.launcherCL</outbound>
                <outbound type="feature" confirmed="no">com.sun.enterprise.glassfish.bootstrap.ASMainKnopflerFish.logger</outbound>
                <outbound type="feature" confirmed="no">com.sun.enterprise.glassfish.bootstrap.ASMainKnopflerFish.setUpCache(java.io.File, java.io.File)</outbound>
                <outbound type="class" confirmed="no">java.io.File</outbound>
                <outbound type="feature" confirmed="no">java.io.File.File(java.io.File, java.lang.String)</outbound>
                <outbound type="feature" confirmed="no">java.io.File.getAbsolutePath()</outbound>
                <outbound type="feature" confirmed="no">java.io.File.getCanonicalPath()</outbound>
                <outbound type="feature" confirmed="no">java.io.File.getParentFile()</outbound>
                <outbound type="feature" confirmed="no">java.io.File.toURI()</outbound>
                <outbound type="class" confirmed="no">java.lang.Class</outbound>
                <outbound type="feature" confirmed="no">java.lang.Class.getMethod(java.lang.String, java.lang.Class[])</outbound>
                <outbound type="class" confirmed="no">java.lang.ClassLoader</outbound>
                <outbound type="feature" confirmed="no">java.lang.ClassLoader.loadClass(java.lang.String)</outbound>
                <outbound type="class" confirmed="no">java.lang.Exception</outbound>
                <outbound type="feature" confirmed="no">java.lang.Object.getClass()</outbound>
                <outbound type="class" confirmed="no">java.lang.Runnable</outbound>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="feature" confirmed="no">java.lang.System.setProperty(java.lang.String, java.lang.String)</outbound>
                <outbound type="feature" confirmed="no">java.lang.Thread.Thread(java.lang.Runnable, java.lang.String)</outbound>
                <outbound type="feature" confirmed="no">java.lang.Thread.join()</outbound>
                <outbound type="feature" confirmed="no">java.lang.Thread.start()</outbound>
                <outbound type="class" confirmed="no">java.lang.reflect.Method</outbound>
                <outbound type="class" confirmed="no">java.net.URI</outbound>
                <outbound type="feature" confirmed="no">java.net.URI.toString()</outbound>
                <outbound type="feature" confirmed="no">java.net.URI.toURL()</outbound>
                <outbound type="class" confirmed="no">java.net.URL</outbound>
                <outbound type="feature" confirmed="no">java.net.URL.toString()</outbound>
                <outbound type="class" confirmed="no">java.util.logging.Logger</outbound>
                <outbound type="feature" confirmed="no">java.util.logging.Logger.info(java.lang.String)</outbound>
            </feature>
            <feature confirmed="no">
                <name>com.sun.enterprise.glassfish.bootstrap.ASMainKnopflerFish.launcherCL</name>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainKnopflerFish.launchOSGiFW()</inbound>
            </feature>
            <feature confirmed="no">
                <name>com.sun.enterprise.glassfish.bootstrap.ASMainKnopflerFish.logger</name>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainKnopflerFish.launchOSGiFW()</inbound>
            </feature>
            <feature confirmed="no">
                <name>com.sun.enterprise.glassfish.bootstrap.ASMainKnopflerFish.run()</name>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMain.main(java.lang.String[])</inbound>
            </feature>
            <feature confirmed="yes">
                <name>com.sun.enterprise.glassfish.bootstrap.ASMainKnopflerFish.setFwDir()</name>
                <outbound type="feature" confirmed="no">com.sun.enterprise.glassfish.bootstrap.ASMainKnopflerFish.fwDir</outbound>
                <outbound type="feature" confirmed="no">com.sun.enterprise.glassfish.bootstrap.ASMainKnopflerFish.glassfishDir</outbound>
                <outbound type="class" confirmed="no">java.io.File</outbound>
                <outbound type="feature" confirmed="no">java.io.File.File(java.io.File, java.lang.String)</outbound>
                <outbound type="feature" confirmed="no">java.io.File.File(java.lang.String)</outbound>
                <outbound type="feature" confirmed="no">java.io.File.exists()</outbound>
                <outbound type="feature" confirmed="no">java.io.File.getAbsolutePath()</outbound>
                <outbound type="feature" confirmed="no">java.lang.RuntimeException.RuntimeException(java.lang.String)</outbound>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="class" confirmed="no">java.lang.StringBuilder</outbound>
                <outbound type="feature" confirmed="no">java.lang.StringBuilder.StringBuilder()</outbound>
                <outbound type="feature" confirmed="no">java.lang.StringBuilder.append(java.lang.String)</outbound>
                <outbound type="feature" confirmed="no">java.lang.StringBuilder.toString()</outbound>
                <outbound type="feature" confirmed="no">java.lang.System.getenv(java.lang.String)</outbound>
            </feature>
            <feature confirmed="no">
                <name>com.sun.enterprise.glassfish.bootstrap.ASMainKnopflerFish.setUpCache(java.io.File, java.io.File)</name>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainKnopflerFish.launchOSGiFW()</inbound>
            </feature>
        </class>
        <class confirmed="yes">
            <name>com.sun.enterprise.glassfish.bootstrap.ASMainKnopflerFish$1</name>
            <outbound type="class" confirmed="no">java.lang.Object</outbound>
            <outbound type="class" confirmed="no">java.lang.Runnable</outbound>
            <feature confirmed="yes">
                <name>com.sun.enterprise.glassfish.bootstrap.ASMainKnopflerFish$1.ASMainKnopflerFish$1(com.sun.enterprise.glassfish.bootstrap.ASMainKnopflerFish, java.lang.reflect.Method, java.lang.String[])</name>
                <outbound type="class" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainKnopflerFish</outbound>
                <outbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainKnopflerFish$1.this$0</outbound>
                <outbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainKnopflerFish$1.val$args</outbound>
                <outbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainKnopflerFish$1.val$m</outbound>
                <outbound type="feature" confirmed="no">java.lang.Object.Object()</outbound>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="class" confirmed="no">java.lang.reflect.Method</outbound>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainKnopflerFish.launchOSGiFW()</inbound>
            </feature>
            <feature confirmed="yes">
                <name>com.sun.enterprise.glassfish.bootstrap.ASMainKnopflerFish$1.run()</name>
                <outbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainKnopflerFish$1.val$args</outbound>
                <outbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainKnopflerFish$1.val$m</outbound>
                <outbound type="class" confirmed="no">java.lang.IllegalAccessException</outbound>
                <outbound type="class" confirmed="no">java.lang.Object</outbound>
                <outbound type="feature" confirmed="no">java.lang.RuntimeException.RuntimeException(java.lang.Throwable)</outbound>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="class" confirmed="no">java.lang.Throwable</outbound>
                <outbound type="class" confirmed="no">java.lang.reflect.InvocationTargetException</outbound>
                <outbound type="class" confirmed="no">java.lang.reflect.Method</outbound>
                <outbound type="feature" confirmed="no">java.lang.reflect.Method.invoke(java.lang.Object, java.lang.Object[])</outbound>
            </feature>
            <feature confirmed="yes">
                <name>com.sun.enterprise.glassfish.bootstrap.ASMainKnopflerFish$1.this$0</name>
                <outbound type="class" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainKnopflerFish</outbound>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainKnopflerFish$1.ASMainKnopflerFish$1(com.sun.enterprise.glassfish.bootstrap.ASMainKnopflerFish, java.lang.reflect.Method, java.lang.String[])</inbound>
            </feature>
            <feature confirmed="yes">
                <name>com.sun.enterprise.glassfish.bootstrap.ASMainKnopflerFish$1.val$args</name>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainKnopflerFish$1.ASMainKnopflerFish$1(com.sun.enterprise.glassfish.bootstrap.ASMainKnopflerFish, java.lang.reflect.Method, java.lang.String[])</inbound>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainKnopflerFish$1.run()</inbound>
            </feature>
            <feature confirmed="yes">
                <name>com.sun.enterprise.glassfish.bootstrap.ASMainKnopflerFish$1.val$m</name>
                <outbound type="class" confirmed="no">java.lang.reflect.Method</outbound>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainKnopflerFish$1.ASMainKnopflerFish$1(com.sun.enterprise.glassfish.bootstrap.ASMainKnopflerFish, java.lang.reflect.Method, java.lang.String[])</inbound>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainKnopflerFish$1.run()</inbound>
            </feature>
        </class>
        <class confirmed="yes">
            <name>com.sun.enterprise.glassfish.bootstrap.ASMainOSGi</name>
            <outbound type="class" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.AbstractMain</outbound>
            <inbound type="class" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainEquinox</inbound>
            <inbound type="class" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainFelix</inbound>
            <inbound type="class" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainKnopflerFish</inbound>
            <feature confirmed="yes">
                <name>com.sun.enterprise.glassfish.bootstrap.ASMainOSGi.ASMainOSGi(java.lang.String[])</name>
                <outbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainOSGi.ASMainOSGi(java.util.logging.Logger, java.lang.String[])</outbound>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="class" confirmed="no">java.util.logging.Logger</outbound>
                <outbound type="feature" confirmed="no">java.util.logging.Logger.getAnonymousLogger()</outbound>
            </feature>
            <feature confirmed="yes">
                <name>com.sun.enterprise.glassfish.bootstrap.ASMainOSGi.ASMainOSGi(java.util.logging.Logger, java.lang.String[])</name>
                <outbound type="class" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainHelper</outbound>
                <outbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainHelper.ASMainHelper(java.util.logging.Logger)</outbound>
                <outbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainHelper.getDomainRoot(com.sun.enterprise.module.bootstrap.StartupContext)</outbound>
                <outbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainHelper.parseAsEnv(java.io.File)</outbound>
                <outbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainHelper.verifyAndSetDomainRoot(java.io.File)</outbound>
                <outbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainOSGi.additionalJars</outbound>
                <outbound type="feature" confirmed="no">com.sun.enterprise.glassfish.bootstrap.ASMainOSGi.bootstrapFile</outbound>
                <outbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainOSGi.domainDir</outbound>
                <outbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainOSGi.glassfishDir</outbound>
                <outbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainOSGi.helper</outbound>
                <outbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainOSGi.logger</outbound>
                <outbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainOSGi.setFwDir()</outbound>
                <outbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainOSGi.setStartupContextProperties(java.util.logging.Logger, java.lang.String[])</outbound>
                <outbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.AbstractMain.AbstractMain()</outbound>
                <outbound type="class" confirmed="no">com.sun.enterprise.module.bootstrap.StartupContext</outbound>
                <outbound type="feature" confirmed="no">com.sun.enterprise.module.bootstrap.StartupContext.StartupContext(java.io.File, java.lang.String[])</outbound>
                <outbound type="class" confirmed="no">java.io.File</outbound>
                <outbound type="feature" confirmed="no">java.io.File.getParentFile()</outbound>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="class" confirmed="no">java.util.logging.Logger</outbound>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainEquinox.ASMainEquinox(java.util.logging.Logger, java.lang.String[])</inbound>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainFelix.ASMainFelix(java.util.logging.Logger, java.lang.String[])</inbound>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainKnopflerFish.ASMainKnopflerFish(java.util.logging.Logger, java.lang.String[])</inbound>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainOSGi.ASMainOSGi(java.lang.String[])</inbound>
            </feature>
            <feature confirmed="yes">
                <name>com.sun.enterprise.glassfish.bootstrap.ASMainOSGi.addFrameworkJars(com.sun.enterprise.glassfish.bootstrap.ClassPathBuilder)</name>
                <outbound type="class" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ClassPathBuilder</outbound>
                <outbound type="class" confirmed="no">java.io.IOException</outbound>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainOSGi.setupLauncherClassLoader()</inbound>
            </feature>
            <feature confirmed="yes">
                <name>com.sun.enterprise.glassfish.bootstrap.ASMainOSGi.addJDKToolsJar(com.sun.enterprise.glassfish.bootstrap.ClassPathBuilder)</name>
                <outbound type="class" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainHelper</outbound>
                <outbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainHelper.getJDKToolsJar()</outbound>
                <outbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainOSGi.helper</outbound>
                <outbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainOSGi.logger</outbound>
                <outbound type="class" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ClassPathBuilder</outbound>
                <outbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ClassPathBuilder.addJar(java.io.File)</outbound>
                <outbound type="class" confirmed="no">java.io.File</outbound>
                <outbound type="feature" confirmed="no">java.io.File.exists()</outbound>
                <outbound type="class" confirmed="no">java.io.IOException</outbound>
                <outbound type="feature" confirmed="no">java.lang.Error.Error(java.lang.Throwable)</outbound>
                <outbound type="class" confirmed="no">java.lang.Object</outbound>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="class" confirmed="no">java.lang.StringBuilder</outbound>
                <outbound type="feature" confirmed="no">java.lang.StringBuilder.StringBuilder()</outbound>
                <outbound type="feature" confirmed="no">java.lang.StringBuilder.append(java.lang.Object)</outbound>
                <outbound type="feature" confirmed="no">java.lang.StringBuilder.append(java.lang.String)</outbound>
                <outbound type="feature" confirmed="no">java.lang.StringBuilder.toString()</outbound>
                <outbound type="class" confirmed="no">java.lang.Throwable</outbound>
                <outbound type="class" confirmed="no">java.util.logging.Logger</outbound>
                <outbound type="feature" confirmed="no">java.util.logging.Logger.fine(java.lang.String)</outbound>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainOSGi.setupLauncherClassLoader()</inbound>
            </feature>
            <feature confirmed="yes">
                <name>com.sun.enterprise.glassfish.bootstrap.ASMainOSGi.additionalJars</name>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainOSGi.ASMainOSGi(java.util.logging.Logger, java.lang.String[])</inbound>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainOSGi.setupLauncherClassLoader()</inbound>
            </feature>
            <feature confirmed="no">
                <name>com.sun.enterprise.glassfish.bootstrap.ASMainOSGi.bootstrapFile</name>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainOSGi.ASMainOSGi(java.util.logging.Logger, java.lang.String[])</inbound>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainOSGi.setStartupContextProperties(java.util.logging.Logger, java.lang.String[])</inbound>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainOSGi.setupLauncherClassLoader()</inbound>
            </feature>
            <feature confirmed="yes">
                <name>com.sun.enterprise.glassfish.bootstrap.ASMainOSGi.createCache(java.io.File)</name>
                <outbound type="class" confirmed="no">java.io.File</outbound>
                <outbound type="feature" confirmed="no">java.io.File.mkdirs()</outbound>
                <outbound type="class" confirmed="no">java.io.IOException</outbound>
            </feature>
            <feature confirmed="yes">
                <name>com.sun.enterprise.glassfish.bootstrap.ASMainOSGi.domainDir</name>
                <outbound type="class" confirmed="no">java.io.File</outbound>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainOSGi.ASMainOSGi(java.util.logging.Logger, java.lang.String[])</inbound>
            </feature>
            <feature confirmed="yes">
                <name>com.sun.enterprise.glassfish.bootstrap.ASMainOSGi.findDerbyClient(com.sun.enterprise.glassfish.bootstrap.ClassPathBuilder)</name>
                <outbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainOSGi.logger</outbound>
                <outbound type="class" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ClassPathBuilder</outbound>
                <outbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ClassPathBuilder.addGlob(java.io.File, java.lang.String[])</outbound>
                <outbound type="class" confirmed="no">java.io.File</outbound>
                <outbound type="feature" confirmed="no">java.io.File.File(java.io.File, java.lang.String)</outbound>
                <outbound type="feature" confirmed="no">java.io.File.File(java.lang.String)</outbound>
                <outbound type="feature" confirmed="no">java.io.File.File(java.lang.String, java.lang.String)</outbound>
                <outbound type="feature" confirmed="no">java.io.File.exists()</outbound>
                <outbound type="class" confirmed="no">java.io.IOException</outbound>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="feature" confirmed="no">java.lang.String.compareTo(java.lang.String)</outbound>
                <outbound type="feature" confirmed="no">java.lang.System.getProperty(java.lang.String)</outbound>
                <outbound type="class" confirmed="no">java.util.logging.Logger</outbound>
                <outbound type="feature" confirmed="no">java.util.logging.Logger.info(java.lang.String)</outbound>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainOSGi.setupLauncherClassLoader()</inbound>
            </feature>
            <feature confirmed="yes">
                <name>com.sun.enterprise.glassfish.bootstrap.ASMainOSGi.fwDir</name>
                <outbound type="class" confirmed="no">java.io.File</outbound>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainOSGi.getSettingsLastModification()</inbound>
            </feature>
            <feature confirmed="no">
                <name>com.sun.enterprise.glassfish.bootstrap.ASMainOSGi.getLastModified(java.io.File, long)</name>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainOSGi.getSettingsLastModification()</inbound>
            </feature>
            <feature confirmed="yes">
                <name>com.sun.enterprise.glassfish.bootstrap.ASMainOSGi.getLogger()</name>
                <outbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainOSGi.logger</outbound>
                <outbound type="class" confirmed="no">java.util.logging.Logger</outbound>
            </feature>
            <feature confirmed="yes">
                <name>com.sun.enterprise.glassfish.bootstrap.ASMainOSGi.getSettingsLastModification()</name>
                <outbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainOSGi.fwDir</outbound>
                <outbound type="feature" confirmed="no">com.sun.enterprise.glassfish.bootstrap.ASMainOSGi.getLastModified(java.io.File, long)</outbound>
                <outbound type="class" confirmed="no">java.io.File</outbound>
            </feature>
            <feature confirmed="yes">
                <name>com.sun.enterprise.glassfish.bootstrap.ASMainOSGi.glassfishDir</name>
                <outbound type="class" confirmed="no">java.io.File</outbound>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainOSGi.ASMainOSGi(java.util.logging.Logger, java.lang.String[])</inbound>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainOSGi.setSystemProperties()</inbound>
            </feature>
            <feature confirmed="yes">
                <name>com.sun.enterprise.glassfish.bootstrap.ASMainOSGi.helper</name>
                <outbound type="class" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainHelper</outbound>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainOSGi.ASMainOSGi(java.util.logging.Logger, java.lang.String[])</inbound>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainOSGi.addJDKToolsJar(com.sun.enterprise.glassfish.bootstrap.ClassPathBuilder)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>com.sun.enterprise.glassfish.bootstrap.ASMainOSGi.launchOSGiFW()</name>
                <outbound type="class" confirmed="no">java.lang.Exception</outbound>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainOSGi.run()</inbound>
            </feature>
            <feature confirmed="yes">
                <name>com.sun.enterprise.glassfish.bootstrap.ASMainOSGi.launcherCL</name>
                <outbound type="class" confirmed="no">java.lang.ClassLoader</outbound>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainOSGi.setupLauncherClassLoader()</inbound>
            </feature>
            <feature confirmed="yes">
                <name>com.sun.enterprise.glassfish.bootstrap.ASMainOSGi.logger</name>
                <outbound type="class" confirmed="no">java.util.logging.Logger</outbound>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainOSGi.ASMainOSGi(java.util.logging.Logger, java.lang.String[])</inbound>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainOSGi.addJDKToolsJar(com.sun.enterprise.glassfish.bootstrap.ClassPathBuilder)</inbound>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainOSGi.findDerbyClient(com.sun.enterprise.glassfish.bootstrap.ClassPathBuilder)</inbound>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainOSGi.getLogger()</inbound>
            </feature>
            <feature confirmed="yes">
                <name>com.sun.enterprise.glassfish.bootstrap.ASMainOSGi.run()</name>
                <outbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainOSGi.launchOSGiFW()</outbound>
                <outbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainOSGi.setSystemProperties()</outbound>
                <outbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainOSGi.setupLauncherClassLoader()</outbound>
                <outbound type="class" confirmed="no">java.lang.Exception</outbound>
                <outbound type="feature" confirmed="no">java.lang.RuntimeException.RuntimeException(java.lang.Throwable)</outbound>
                <outbound type="class" confirmed="no">java.lang.Throwable</outbound>
            </feature>
            <feature confirmed="yes">
                <name>com.sun.enterprise.glassfish.bootstrap.ASMainOSGi.setFwDir()</name>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainOSGi.ASMainOSGi(java.util.logging.Logger, java.lang.String[])</inbound>
            </feature>
            <feature confirmed="yes">
                <name>com.sun.enterprise.glassfish.bootstrap.ASMainOSGi.setStartupContextProperties(java.util.logging.Logger, java.lang.String[])</name>
                <outbound type="feature" confirmed="no">com.sun.enterprise.glassfish.bootstrap.ASMainOSGi.bootstrapFile</outbound>
                <outbound type="feature" confirmed="no">com.sun.enterprise.module.bootstrap.ArgumentManager.argsToMap(java.lang.String[])</outbound>
                <outbound type="feature" confirmed="no">java.io.ByteArrayOutputStream.ByteArrayOutputStream()</outbound>
                <outbound type="feature" confirmed="no">java.io.ByteArrayOutputStream.toString()</outbound>
                <outbound type="class" confirmed="no">java.io.File</outbound>
                <outbound type="feature" confirmed="no">java.io.File.getParent()</outbound>
                <outbound type="class" confirmed="no">java.io.IOException</outbound>
                <outbound type="class" confirmed="no">java.io.OutputStream</outbound>
                <outbound type="feature" confirmed="no">java.lang.Long.Long(long)</outbound>
                <outbound type="feature" confirmed="no">java.lang.Long.toString()</outbound>
                <outbound type="class" confirmed="no">java.lang.Object</outbound>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="feature" confirmed="no">java.lang.System.currentTimeMillis()</outbound>
                <outbound type="feature" confirmed="no">java.lang.System.setProperty(java.lang.String, java.lang.String)</outbound>
                <outbound type="class" confirmed="no">java.util.Properties</outbound>
                <outbound type="feature" confirmed="no">java.util.Properties.put(java.lang.Object, java.lang.Object)</outbound>
                <outbound type="feature" confirmed="no">java.util.Properties.store(java.io.OutputStream, java.lang.String)</outbound>
                <outbound type="class" confirmed="no">java.util.logging.Logger</outbound>
                <outbound type="feature" confirmed="no">java.util.logging.Logger.info(java.lang.String)</outbound>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainOSGi.ASMainOSGi(java.util.logging.Logger, java.lang.String[])</inbound>
            </feature>
            <feature confirmed="yes">
                <name>com.sun.enterprise.glassfish.bootstrap.ASMainOSGi.setSystemProperties()</name>
                <outbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainOSGi.glassfishDir</outbound>
                <outbound type="class" confirmed="no">java.io.File</outbound>
                <outbound type="feature" confirmed="no">java.io.File.File(java.io.File, java.lang.String)</outbound>
                <outbound type="feature" confirmed="no">java.io.File.File(java.lang.String)</outbound>
                <outbound type="feature" confirmed="no">java.io.File.getAbsolutePath()</outbound>
                <outbound type="feature" confirmed="no">java.io.File.toURI()</outbound>
                <outbound type="class" confirmed="no">java.lang.Exception</outbound>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="feature" confirmed="no">java.lang.System.getProperty(java.lang.String)</outbound>
                <outbound type="feature" confirmed="no">java.lang.System.setProperty(java.lang.String, java.lang.String)</outbound>
                <outbound type="class" confirmed="no">java.net.MalformedURLException</outbound>
                <outbound type="class" confirmed="no">java.net.URI</outbound>
                <outbound type="feature" confirmed="no">java.net.URI.toString()</outbound>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainOSGi.run()</inbound>
            </feature>
            <feature confirmed="yes">
                <name>com.sun.enterprise.glassfish.bootstrap.ASMainOSGi.setupLauncherClassLoader()</name>
                <outbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainOSGi.addFrameworkJars(com.sun.enterprise.glassfish.bootstrap.ClassPathBuilder)</outbound>
                <outbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainOSGi.addJDKToolsJar(com.sun.enterprise.glassfish.bootstrap.ClassPathBuilder)</outbound>
                <outbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainOSGi.additionalJars</outbound>
                <outbound type="feature" confirmed="no">com.sun.enterprise.glassfish.bootstrap.ASMainOSGi.bootstrapFile</outbound>
                <outbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainOSGi.findDerbyClient(com.sun.enterprise.glassfish.bootstrap.ClassPathBuilder)</outbound>
                <outbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainOSGi.launcherCL</outbound>
                <outbound type="class" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ClassPathBuilder</outbound>
                <outbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ClassPathBuilder.ClassPathBuilder(java.lang.ClassLoader)</outbound>
                <outbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ClassPathBuilder.addGlob(java.io.File, java.lang.String[])</outbound>
                <outbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ClassPathBuilder.create()</outbound>
                <outbound type="class" confirmed="no">java.io.File</outbound>
                <outbound type="feature" confirmed="no">java.io.File.getParentFile()</outbound>
                <outbound type="class" confirmed="no">java.io.IOException</outbound>
                <outbound type="class" confirmed="no">java.lang.ClassLoader</outbound>
                <outbound type="feature" confirmed="no">java.lang.ClassLoader.getParent()</outbound>
                <outbound type="feature" confirmed="no">java.lang.ClassLoader.getSystemClassLoader()</outbound>
                <outbound type="feature" confirmed="no">java.lang.Error.Error(java.lang.Throwable)</outbound>
                <outbound type="class" confirmed="no">java.lang.Exception</outbound>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="class" confirmed="no">java.lang.Thread</outbound>
                <outbound type="feature" confirmed="no">java.lang.Thread.currentThread()</outbound>
                <outbound type="feature" confirmed="no">java.lang.Thread.setContextClassLoader(java.lang.ClassLoader)</outbound>
                <outbound type="class" confirmed="no">java.lang.Throwable</outbound>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainOSGi.run()</inbound>
            </feature>
        </class>
        <class confirmed="yes">
            <name>com.sun.enterprise.glassfish.bootstrap.ASMainStatic</name>
            <outbound type="class" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.AbstractMain</outbound>
            <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainStatic$1.ASMainStatic$1(com.sun.enterprise.glassfish.bootstrap.ASMainStatic, java.io.File, long)</inbound>
            <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainStatic$1.run()</inbound>
            <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainStatic$1.this$0</inbound>
            <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainStatic$2.ASMainStatic$2(com.sun.enterprise.glassfish.bootstrap.ASMainStatic, com.sun.enterprise.module.common_impl.AbstractModulesRegistryImpl, com.sun.enterprise.module.Module[])</inbound>
            <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainStatic$2.this$0</inbound>
            <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainStatic$3$1.createHabitat(com.sun.enterprise.module.ModulesRegistry, com.sun.enterprise.module.bootstrap.StartupContext)</inbound>
            <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainStatic$3.ASMainStatic$3(com.sun.enterprise.glassfish.bootstrap.ASMainStatic, com.sun.enterprise.module.impl.ModulesRegistryImpl, com.sun.enterprise.module.bootstrap.StartupContext)</inbound>
            <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainStatic$3.run()</inbound>
            <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainStatic$3.this$0</inbound>
            <feature confirmed="yes">
                <name>com.sun.enterprise.glassfish.bootstrap.ASMainStatic.ASMainStatic(java.util.logging.Logger, java.lang.String[])</name>
                <outbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainStatic.args</outbound>
                <outbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainStatic.logger</outbound>
                <outbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.AbstractMain.AbstractMain()</outbound>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="class" confirmed="no">java.util.logging.Logger</outbound>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMain.main(java.lang.String[])</inbound>
            </feature>
            <feature confirmed="yes">
                <name>com.sun.enterprise.glassfish.bootstrap.ASMainStatic.access$000(com.sun.enterprise.glassfish.bootstrap.ASMainStatic)</name>
                <outbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainStatic.logger</outbound>
                <outbound type="class" confirmed="no">java.util.logging.Logger</outbound>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainStatic$3$1.createHabitat(com.sun.enterprise.module.ModulesRegistry, com.sun.enterprise.module.bootstrap.StartupContext)</inbound>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainStatic$3.run()</inbound>
            </feature>
            <feature confirmed="yes">
                <name>com.sun.enterprise.glassfish.bootstrap.ASMainStatic.args</name>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainStatic.ASMainStatic(java.util.logging.Logger, java.lang.String[])</inbound>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainStatic.run()</inbound>
            </feature>
            <feature confirmed="no">
                <name>com.sun.enterprise.glassfish.bootstrap.ASMainStatic.bootstrapFile</name>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainStatic.createCache(java.io.File)</inbound>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainStatic.start(java.lang.String[])</inbound>
            </feature>
            <feature confirmed="yes">
                <name>com.sun.enterprise.glassfish.bootstrap.ASMainStatic.createCache(java.io.File)</name>
                <outbound type="feature" confirmed="no">com.sun.enterprise.glassfish.bootstrap.ASMainStatic.bootstrapFile</outbound>
                <outbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainStatic.out</outbound>
                <outbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.Rejar.Rejar()</outbound>
                <outbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.Rejar.rejar(java.io.File, java.io.File)</outbound>
                <outbound type="class" confirmed="no">java.io.File</outbound>
                <outbound type="feature" confirmed="no">java.io.File.getParentFile()</outbound>
                <outbound type="feature" confirmed="no">java.io.File.mkdirs()</outbound>
                <outbound type="class" confirmed="no">java.io.IOException</outbound>
            </feature>
            <feature confirmed="yes">
                <name>com.sun.enterprise.glassfish.bootstrap.ASMainStatic.createClassLoader(java.io.File)</name>
                <outbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainStatic.findDerbyClient(java.util.List)</outbound>
                <outbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainStatic.out</outbound>
                <outbound type="class" confirmed="no">java.io.File</outbound>
                <outbound type="feature" confirmed="no">java.io.File.toURI()</outbound>
                <outbound type="class" confirmed="no">java.lang.Class</outbound>
                <outbound type="feature" confirmed="no">java.lang.Class.getClassLoader()</outbound>
                <outbound type="class" confirmed="no">java.lang.ClassLoader</outbound>
                <outbound type="class" confirmed="no">java.lang.Exception</outbound>
                <outbound type="class" confirmed="no">java.lang.Object</outbound>
                <outbound type="feature" confirmed="no">java.lang.Object.getClass()</outbound>
                <outbound type="class" confirmed="no">java.net.URI</outbound>
                <outbound type="feature" confirmed="no">java.net.URI.toURL()</outbound>
                <outbound type="class" confirmed="no">java.net.URL</outbound>
                <outbound type="feature" confirmed="no">java.net.URLClassLoader.URLClassLoader(java.net.URL[], java.lang.ClassLoader)</outbound>
                <outbound type="class" confirmed="no">java.net.URL[]</outbound>
                <outbound type="feature" confirmed="no">java.util.ArrayList.ArrayList()</outbound>
                <outbound type="class" confirmed="no">java.util.List</outbound>
                <outbound type="feature" confirmed="no">java.util.List.add(java.lang.Object)</outbound>
                <outbound type="feature" confirmed="no">java.util.List.size()</outbound>
                <outbound type="feature" confirmed="no">java.util.List.toArray(java.lang.Object[])</outbound>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainStatic.start(java.lang.String[])</inbound>
            </feature>
            <feature confirmed="yes">
                <name>com.sun.enterprise.glassfish.bootstrap.ASMainStatic.createTmpClassLoader(java.io.File)</name>
                <outbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainStatic.findDerbyClient(java.util.List)</outbound>
                <outbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainStatic.insertURLs(java.io.File, java.util.List)</outbound>
                <outbound type="class" confirmed="no">java.io.File</outbound>
                <outbound type="class" confirmed="no">java.lang.Class</outbound>
                <outbound type="feature" confirmed="no">java.lang.Class.getClassLoader()</outbound>
                <outbound type="class" confirmed="no">java.lang.ClassLoader</outbound>
                <outbound type="class" confirmed="no">java.lang.Exception</outbound>
                <outbound type="class" confirmed="no">java.lang.Object</outbound>
                <outbound type="feature" confirmed="no">java.lang.Object.getClass()</outbound>
                <outbound type="class" confirmed="no">java.net.URL</outbound>
                <outbound type="feature" confirmed="no">java.net.URLClassLoader.URLClassLoader(java.net.URL[], java.lang.ClassLoader)</outbound>
                <outbound type="class" confirmed="no">java.net.URL[]</outbound>
                <outbound type="feature" confirmed="no">java.util.ArrayList.ArrayList()</outbound>
                <outbound type="class" confirmed="no">java.util.List</outbound>
                <outbound type="feature" confirmed="no">java.util.List.size()</outbound>
                <outbound type="feature" confirmed="no">java.util.List.toArray(java.lang.Object[])</outbound>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainStatic.start(java.lang.String[])</inbound>
            </feature>
            <feature confirmed="no">
                <name>com.sun.enterprise.glassfish.bootstrap.ASMainStatic.findBootstrapFile()</name>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainStatic.start(java.lang.String[])</inbound>
            </feature>
            <feature confirmed="yes">
                <name>com.sun.enterprise.glassfish.bootstrap.ASMainStatic.findDerbyClient(java.util.List)</name>
                <outbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainStatic.logger</outbound>
                <outbound type="class" confirmed="no">java.io.File</outbound>
                <outbound type="feature" confirmed="no">java.io.File.File(java.io.File, java.lang.String)</outbound>
                <outbound type="feature" confirmed="no">java.io.File.File(java.lang.String)</outbound>
                <outbound type="feature" confirmed="no">java.io.File.File(java.lang.String, java.lang.String)</outbound>
                <outbound type="feature" confirmed="no">java.io.File.exists()</outbound>
                <outbound type="feature" confirmed="no">java.io.File.toURI()</outbound>
                <outbound type="class" confirmed="no">java.io.IOException</outbound>
                <outbound type="class" confirmed="no">java.lang.Object</outbound>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="feature" confirmed="no">java.lang.String.compareTo(java.lang.String)</outbound>
                <outbound type="feature" confirmed="no">java.lang.System.getProperty(java.lang.String)</outbound>
                <outbound type="class" confirmed="no">java.net.URI</outbound>
                <outbound type="feature" confirmed="no">java.net.URI.toURL()</outbound>
                <outbound type="class" confirmed="no">java.net.URL</outbound>
                <outbound type="class" confirmed="no">java.util.List</outbound>
                <outbound type="feature" confirmed="no">java.util.List.add(java.lang.Object)</outbound>
                <outbound type="class" confirmed="no">java.util.logging.Logger</outbound>
                <outbound type="feature" confirmed="no">java.util.logging.Logger.info(java.lang.String)</outbound>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainStatic.createClassLoader(java.io.File)</inbound>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainStatic.createTmpClassLoader(java.io.File)</inbound>
            </feature>
            <feature confirmed="no">
                <name>com.sun.enterprise.glassfish.bootstrap.ASMainStatic.flushAndCreate(java.io.File, long)</name>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainStatic$1.run()</inbound>
            </feature>
            <feature confirmed="no">
                <name>com.sun.enterprise.glassfish.bootstrap.ASMainStatic.getLastModified(java.io.File, long)</name>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainStatic.start(java.lang.String[])</inbound>
            </feature>
            <feature confirmed="yes">
                <name>com.sun.enterprise.glassfish.bootstrap.ASMainStatic.getLogger()</name>
                <outbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainStatic.logger</outbound>
                <outbound type="class" confirmed="no">java.util.logging.Logger</outbound>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainStatic$1.run()</inbound>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainStatic.start(java.lang.String[])</inbound>
            </feature>
            <feature confirmed="yes">
                <name>com.sun.enterprise.glassfish.bootstrap.ASMainStatic.getSettingsLastModification()</name>
            </feature>
            <feature confirmed="yes">
                <name>com.sun.enterprise.glassfish.bootstrap.ASMainStatic.insertURLs(java.io.File, java.util.List)</name>
                <outbound type="class" confirmed="no">java.io.File</outbound>
                <outbound type="feature" confirmed="no">java.io.File.isFile()</outbound>
                <outbound type="feature" confirmed="no">java.io.File.listFiles()</outbound>
                <outbound type="feature" confirmed="no">java.io.File.toURI()</outbound>
                <outbound type="class" confirmed="no">java.lang.Exception</outbound>
                <outbound type="class" confirmed="no">java.lang.Object</outbound>
                <outbound type="class" confirmed="no">java.net.URI</outbound>
                <outbound type="feature" confirmed="no">java.net.URI.toURL()</outbound>
                <outbound type="class" confirmed="no">java.net.URL</outbound>
                <outbound type="class" confirmed="no">java.util.List</outbound>
                <outbound type="feature" confirmed="no">java.util.List.add(java.lang.Object)</outbound>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainStatic.createTmpClassLoader(java.io.File)</inbound>
            </feature>
            <feature confirmed="no">
                <name>com.sun.enterprise.glassfish.bootstrap.ASMainStatic.isCacheOutdated(long, java.io.File)</name>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainStatic.start(java.lang.String[])</inbound>
            </feature>
            <feature confirmed="yes">
                <name>com.sun.enterprise.glassfish.bootstrap.ASMainStatic.logger</name>
                <outbound type="class" confirmed="no">java.util.logging.Logger</outbound>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainStatic.ASMainStatic(java.util.logging.Logger, java.lang.String[])</inbound>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainStatic.access$000(com.sun.enterprise.glassfish.bootstrap.ASMainStatic)</inbound>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainStatic.findDerbyClient(java.util.List)</inbound>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainStatic.getLogger()</inbound>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainStatic.start(java.lang.String[])</inbound>
            </feature>
            <feature confirmed="yes">
                <name>com.sun.enterprise.glassfish.bootstrap.ASMainStatic.out</name>
                <outbound type="class" confirmed="no">java.io.File</outbound>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainStatic.createCache(java.io.File)</inbound>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainStatic.createClassLoader(java.io.File)</inbound>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainStatic.start(java.lang.String[])</inbound>
            </feature>
            <feature confirmed="yes">
                <name>com.sun.enterprise.glassfish.bootstrap.ASMainStatic.run()</name>
                <outbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainStatic.args</outbound>
                <outbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainStatic.start(java.lang.String[])</outbound>
                <outbound type="class" confirmed="no">java.lang.Exception</outbound>
                <outbound type="feature" confirmed="no">java.lang.RuntimeException.RuntimeException(java.lang.Throwable)</outbound>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="class" confirmed="no">java.lang.Throwable</outbound>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMain.main(java.lang.String[])</inbound>
            </feature>
            <feature confirmed="yes">
                <name>com.sun.enterprise.glassfish.bootstrap.ASMainStatic.start(java.lang.String[])</name>
                <outbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainHelper.ASMainHelper(java.util.logging.Logger)</outbound>
                <outbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainHelper.getDomainRoot(com.sun.enterprise.module.bootstrap.StartupContext)</outbound>
                <outbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainHelper.parseAsEnv(java.io.File)</outbound>
                <outbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainHelper.verifyAndSetDomainRoot(java.io.File)</outbound>
                <outbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainStatic$1.ASMainStatic$1(com.sun.enterprise.glassfish.bootstrap.ASMainStatic, java.io.File, long)</outbound>
                <outbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainStatic$2.ASMainStatic$2(com.sun.enterprise.glassfish.bootstrap.ASMainStatic, com.sun.enterprise.module.common_impl.AbstractModulesRegistryImpl, com.sun.enterprise.module.Module[])</outbound>
                <outbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainStatic$3.ASMainStatic$3(com.sun.enterprise.glassfish.bootstrap.ASMainStatic, com.sun.enterprise.module.impl.ModulesRegistryImpl, com.sun.enterprise.module.bootstrap.StartupContext)</outbound>
                <outbound type="feature" confirmed="no">com.sun.enterprise.glassfish.bootstrap.ASMainStatic.bootstrapFile</outbound>
                <outbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainStatic.createClassLoader(java.io.File)</outbound>
                <outbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainStatic.createTmpClassLoader(java.io.File)</outbound>
                <outbound type="feature" confirmed="no">com.sun.enterprise.glassfish.bootstrap.ASMainStatic.findBootstrapFile()</outbound>
                <outbound type="feature" confirmed="no">com.sun.enterprise.glassfish.bootstrap.ASMainStatic.getLastModified(java.io.File, long)</outbound>
                <outbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainStatic.getLogger()</outbound>
                <outbound type="feature" confirmed="no">com.sun.enterprise.glassfish.bootstrap.ASMainStatic.isCacheOutdated(long, java.io.File)</outbound>
                <outbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainStatic.logger</outbound>
                <outbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainStatic.out</outbound>
                <outbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ProxyModule.ProxyModule(com.sun.enterprise.module.ModulesRegistry, com.sun.enterprise.module.ModuleDefinition, java.lang.ClassLoader)</outbound>
                <outbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ProxyModuleDefinition.ProxyModuleDefinition(java.lang.ClassLoader)</outbound>
                <outbound type="class" confirmed="no">com.sun.enterprise.module.Module</outbound>
                <outbound type="class" confirmed="no">com.sun.enterprise.module.ModuleDefinition</outbound>
                <outbound type="class" confirmed="no">com.sun.enterprise.module.ModulesRegistry</outbound>
                <outbound type="class" confirmed="no">com.sun.enterprise.module.bootstrap.BootException</outbound>
                <outbound type="feature" confirmed="no">com.sun.enterprise.module.bootstrap.BootException.BootException(java.lang.String)</outbound>
                <outbound type="feature" confirmed="no">com.sun.enterprise.module.bootstrap.BootException.BootException(java.lang.Throwable)</outbound>
                <outbound type="class" confirmed="no">com.sun.enterprise.module.bootstrap.StartupContext</outbound>
                <outbound type="feature" confirmed="no">com.sun.enterprise.module.bootstrap.StartupContext.StartupContext(java.io.File, java.lang.String[])</outbound>
                <outbound type="class" confirmed="no">com.sun.enterprise.module.common_impl.AbstractModulesRegistryImpl</outbound>
                <outbound type="feature" confirmed="no">com.sun.enterprise.module.impl.HK2Factory.initialize()</outbound>
                <outbound type="class" confirmed="no">com.sun.enterprise.module.impl.ModulesRegistryImpl</outbound>
                <outbound type="feature" confirmed="no">com.sun.enterprise.module.impl.ModulesRegistryImpl.add(com.sun.enterprise.module.ModuleDefinition)</outbound>
                <outbound type="feature" confirmed="no">com.sun.enterprise.module.impl.ModulesRegistryImpl.setParentClassLoader(java.lang.ClassLoader)</outbound>
                <outbound type="class" confirmed="no">java.io.File</outbound>
                <outbound type="feature" confirmed="no">java.io.File.File(java.io.File, java.lang.String)</outbound>
                <outbound type="feature" confirmed="no">java.io.File.File(java.lang.String)</outbound>
                <outbound type="feature" confirmed="no">java.io.File.File(java.lang.String, java.lang.String)</outbound>
                <outbound type="feature" confirmed="no">java.io.File.getAbsolutePath()</outbound>
                <outbound type="feature" confirmed="no">java.io.File.getParentFile()</outbound>
                <outbound type="feature" confirmed="no">java.io.File.toURI()</outbound>
                <outbound type="class" confirmed="no">java.io.IOException</outbound>
                <outbound type="class" confirmed="no">java.lang.ClassLoader</outbound>
                <outbound type="class" confirmed="no">java.lang.Exception</outbound>
                <outbound type="class" confirmed="no">java.lang.InterruptedException</outbound>
                <outbound type="class" confirmed="no">java.lang.Runnable</outbound>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="feature" confirmed="no">java.lang.System.getProperty(java.lang.String)</outbound>
                <outbound type="feature" confirmed="no">java.lang.System.setProperty(java.lang.String, java.lang.String)</outbound>
                <outbound type="feature" confirmed="no">java.lang.Thread.Thread(java.lang.Runnable)</outbound>
                <outbound type="feature" confirmed="no">java.lang.Thread.Thread(java.lang.Runnable, java.lang.String)</outbound>
                <outbound type="feature" confirmed="no">java.lang.Thread.join()</outbound>
                <outbound type="feature" confirmed="no">java.lang.Thread.setContextClassLoader(java.lang.ClassLoader)</outbound>
                <outbound type="feature" confirmed="no">java.lang.Thread.setDaemon(boolean)</outbound>
                <outbound type="feature" confirmed="no">java.lang.Thread.start()</outbound>
                <outbound type="class" confirmed="no">java.lang.Throwable</outbound>
                <outbound type="class" confirmed="no">java.net.URI</outbound>
                <outbound type="feature" confirmed="no">java.net.URI.toString()</outbound>
                <outbound type="class" confirmed="no">java.util.logging.Level</outbound>
                <outbound type="feature" confirmed="no">java.util.logging.Level.SEVERE</outbound>
                <outbound type="class" confirmed="no">java.util.logging.Logger</outbound>
                <outbound type="feature" confirmed="no">java.util.logging.Logger.fine(java.lang.String)</outbound>
                <outbound type="feature" confirmed="no">java.util.logging.Logger.getAnonymousLogger()</outbound>
                <outbound type="feature" confirmed="no">java.util.logging.Logger.info(java.lang.String)</outbound>
                <outbound type="feature" confirmed="no">java.util.logging.Logger.log(java.util.logging.Level, java.lang.String, java.lang.Throwable)</outbound>
                <outbound type="feature" confirmed="no">java.util.logging.Logger.warning(java.lang.String)</outbound>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainStatic.run()</inbound>
            </feature>
        </class>
        <class confirmed="yes">
            <name>com.sun.enterprise.glassfish.bootstrap.ASMainStatic$1</name>
            <outbound type="class" confirmed="no">java.lang.Object</outbound>
            <outbound type="class" confirmed="no">java.lang.Runnable</outbound>
            <feature confirmed="yes">
                <name>com.sun.enterprise.glassfish.bootstrap.ASMainStatic$1.ASMainStatic$1(com.sun.enterprise.glassfish.bootstrap.ASMainStatic, java.io.File, long)</name>
                <outbound type="class" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainStatic</outbound>
                <outbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainStatic$1.this$0</outbound>
                <outbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainStatic$1.val$cacheDir</outbound>
                <outbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainStatic$1.val$lastModified</outbound>
                <outbound type="class" confirmed="no">java.io.File</outbound>
                <outbound type="feature" confirmed="no">java.lang.Object.Object()</outbound>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainStatic.start(java.lang.String[])</inbound>
            </feature>
            <feature confirmed="yes">
                <name>com.sun.enterprise.glassfish.bootstrap.ASMainStatic$1.run()</name>
                <outbound type="class" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainStatic</outbound>
                <outbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainStatic$1.this$0</outbound>
                <outbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainStatic$1.val$cacheDir</outbound>
                <outbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainStatic$1.val$lastModified</outbound>
                <outbound type="feature" confirmed="no">com.sun.enterprise.glassfish.bootstrap.ASMainStatic.flushAndCreate(java.io.File, long)</outbound>
                <outbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainStatic.getLogger()</outbound>
                <outbound type="class" confirmed="no">java.io.File</outbound>
                <outbound type="class" confirmed="no">java.io.IOException</outbound>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="class" confirmed="no">java.lang.Throwable</outbound>
                <outbound type="class" confirmed="no">java.util.logging.Level</outbound>
                <outbound type="feature" confirmed="no">java.util.logging.Level.SEVERE</outbound>
                <outbound type="class" confirmed="no">java.util.logging.Logger</outbound>
                <outbound type="feature" confirmed="no">java.util.logging.Logger.log(java.util.logging.Level, java.lang.String, java.lang.Throwable)</outbound>
            </feature>
            <feature confirmed="yes">
                <name>com.sun.enterprise.glassfish.bootstrap.ASMainStatic$1.this$0</name>
                <outbound type="class" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainStatic</outbound>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainStatic$1.ASMainStatic$1(com.sun.enterprise.glassfish.bootstrap.ASMainStatic, java.io.File, long)</inbound>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainStatic$1.run()</inbound>
            </feature>
            <feature confirmed="yes">
                <name>com.sun.enterprise.glassfish.bootstrap.ASMainStatic$1.val$cacheDir</name>
                <outbound type="class" confirmed="no">java.io.File</outbound>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainStatic$1.ASMainStatic$1(com.sun.enterprise.glassfish.bootstrap.ASMainStatic, java.io.File, long)</inbound>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainStatic$1.run()</inbound>
            </feature>
            <feature confirmed="yes">
                <name>com.sun.enterprise.glassfish.bootstrap.ASMainStatic$1.val$lastModified</name>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainStatic$1.ASMainStatic$1(com.sun.enterprise.glassfish.bootstrap.ASMainStatic, java.io.File, long)</inbound>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainStatic$1.run()</inbound>
            </feature>
        </class>
        <class confirmed="yes">
            <name>com.sun.enterprise.glassfish.bootstrap.ASMainStatic$2</name>
            <outbound type="class" confirmed="no">com.sun.enterprise.module.impl.ModulesRegistryImpl</outbound>
            <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainStatic$2$1.ASMainStatic$2$1(com.sun.enterprise.glassfish.bootstrap.ASMainStatic$2)</inbound>
            <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainStatic$2$1.this$1</inbound>
            <feature confirmed="yes">
                <name>com.sun.enterprise.glassfish.bootstrap.ASMainStatic$2.ASMainStatic$2(com.sun.enterprise.glassfish.bootstrap.ASMainStatic, com.sun.enterprise.module.common_impl.AbstractModulesRegistryImpl, com.sun.enterprise.module.Module[])</name>
                <outbound type="class" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainStatic</outbound>
                <outbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainStatic$2.this$0</outbound>
                <outbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainStatic$2.val$proxyMod</outbound>
                <outbound type="class" confirmed="no">com.sun.enterprise.module.Module</outbound>
                <outbound type="class" confirmed="no">com.sun.enterprise.module.common_impl.AbstractModulesRegistryImpl</outbound>
                <outbound type="feature" confirmed="no">com.sun.enterprise.module.impl.ModulesRegistryImpl.ModulesRegistryImpl(com.sun.enterprise.module.common_impl.AbstractModulesRegistryImpl)</outbound>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainStatic.start(java.lang.String[])</inbound>
            </feature>
            <feature confirmed="yes">
                <name>com.sun.enterprise.glassfish.bootstrap.ASMainStatic$2.find(java.lang.Class)</name>
                <outbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainStatic$2.val$proxyMod</outbound>
                <outbound type="class" confirmed="no">com.sun.enterprise.module.Module</outbound>
                <outbound type="feature" confirmed="no">com.sun.enterprise.module.impl.ModulesRegistryImpl.find(java.lang.Class)</outbound>
                <outbound type="class" confirmed="no">java.lang.Class</outbound>
            </feature>
            <feature confirmed="yes">
                <name>com.sun.enterprise.glassfish.bootstrap.ASMainStatic$2.getModules()</name>
                <outbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainStatic$2.val$proxyMod</outbound>
                <outbound type="class" confirmed="no">com.sun.enterprise.module.Module</outbound>
                <outbound type="class" confirmed="no">java.lang.Object</outbound>
                <outbound type="feature" confirmed="no">java.util.ArrayList.ArrayList()</outbound>
                <outbound type="feature" confirmed="no">java.util.ArrayList.add(java.lang.Object)</outbound>
                <outbound type="class" confirmed="no">java.util.Collection</outbound>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainStatic$2.getModules(java.lang.String)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>com.sun.enterprise.glassfish.bootstrap.ASMainStatic$2.getModules(java.lang.String)</name>
                <outbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainStatic$2.getModules()</outbound>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="class" confirmed="no">java.util.Collection</outbound>
            </feature>
            <feature confirmed="yes">
                <name>com.sun.enterprise.glassfish.bootstrap.ASMainStatic$2.makeModuleFor(java.lang.String, java.lang.String)</name>
                <outbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainStatic$2.val$proxyMod</outbound>
                <outbound type="class" confirmed="no">com.sun.enterprise.module.Module</outbound>
                <outbound type="class" confirmed="no">com.sun.enterprise.module.ResolveError</outbound>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
            </feature>
            <feature confirmed="yes">
                <name>com.sun.enterprise.glassfish.bootstrap.ASMainStatic$2.parseInhabitants(com.sun.enterprise.module.Module, java.lang.String, com.sun.hk2.component.InhabitantsParser)</name>
                <outbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainStatic$2$1.ASMainStatic$2$1(com.sun.enterprise.glassfish.bootstrap.ASMainStatic$2)</outbound>
                <outbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainStatic$2.val$proxyMod</outbound>
                <outbound type="class" confirmed="no">com.sun.enterprise.module.Module</outbound>
                <outbound type="feature" confirmed="no">com.sun.enterprise.module.Module.getMetadata()</outbound>
                <outbound type="class" confirmed="no">com.sun.enterprise.module.ModuleMetadata</outbound>
                <outbound type="class" confirmed="no">com.sun.enterprise.module.ModuleMetadata$InhabitantsDescriptor</outbound>
                <outbound type="feature" confirmed="no">com.sun.enterprise.module.ModuleMetadata$InhabitantsDescriptor.createScanner()</outbound>
                <outbound type="feature" confirmed="no">com.sun.enterprise.module.ModuleMetadata.getHabitats(java.lang.String)</outbound>
                <outbound type="class" confirmed="no">com.sun.hk2.component.Holder</outbound>
                <outbound type="class" confirmed="no">com.sun.hk2.component.InhabitantsParser</outbound>
                <outbound type="feature" confirmed="no">com.sun.hk2.component.InhabitantsParser.parse(com.sun.hk2.component.InhabitantsScanner, com.sun.hk2.component.Holder)</outbound>
                <outbound type="class" confirmed="no">com.sun.hk2.component.InhabitantsScanner</outbound>
                <outbound type="class" confirmed="no">java.io.IOException</outbound>
                <outbound type="class" confirmed="no">java.lang.Object</outbound>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="class" confirmed="no">java.util.Iterator</outbound>
                <outbound type="feature" confirmed="no">java.util.Iterator.hasNext()</outbound>
                <outbound type="feature" confirmed="no">java.util.Iterator.next()</outbound>
                <outbound type="class" confirmed="no">java.util.List</outbound>
                <outbound type="feature" confirmed="no">java.util.List.iterator()</outbound>
            </feature>
            <feature confirmed="yes">
                <name>com.sun.enterprise.glassfish.bootstrap.ASMainStatic$2.this$0</name>
                <outbound type="class" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainStatic</outbound>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainStatic$2.ASMainStatic$2(com.sun.enterprise.glassfish.bootstrap.ASMainStatic, com.sun.enterprise.module.common_impl.AbstractModulesRegistryImpl, com.sun.enterprise.module.Module[])</inbound>
            </feature>
            <feature confirmed="yes">
                <name>com.sun.enterprise.glassfish.bootstrap.ASMainStatic$2.val$proxyMod</name>
                <outbound type="class" confirmed="no">com.sun.enterprise.module.Module</outbound>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainStatic$2.ASMainStatic$2(com.sun.enterprise.glassfish.bootstrap.ASMainStatic, com.sun.enterprise.module.common_impl.AbstractModulesRegistryImpl, com.sun.enterprise.module.Module[])</inbound>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainStatic$2.find(java.lang.Class)</inbound>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainStatic$2.getModules()</inbound>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainStatic$2.makeModuleFor(java.lang.String, java.lang.String)</inbound>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainStatic$2.parseInhabitants(com.sun.enterprise.module.Module, java.lang.String, com.sun.hk2.component.InhabitantsParser)</inbound>
            </feature>
        </class>
        <class confirmed="yes">
            <name>com.sun.enterprise.glassfish.bootstrap.ASMainStatic$2$1</name>
            <outbound type="class" confirmed="no">com.sun.hk2.component.Holder</outbound>
            <outbound type="class" confirmed="no">java.lang.Object</outbound>
            <feature confirmed="yes">
                <name>com.sun.enterprise.glassfish.bootstrap.ASMainStatic$2$1.ASMainStatic$2$1(com.sun.enterprise.glassfish.bootstrap.ASMainStatic$2)</name>
                <outbound type="class" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainStatic$2</outbound>
                <outbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainStatic$2$1.this$1</outbound>
                <outbound type="feature" confirmed="no">java.lang.Object.Object()</outbound>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainStatic$2.parseInhabitants(com.sun.enterprise.module.Module, java.lang.String, com.sun.hk2.component.InhabitantsParser)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>com.sun.enterprise.glassfish.bootstrap.ASMainStatic$2$1.get()</name>
                <outbound type="class" confirmed="no">java.lang.ClassLoader</outbound>
                <outbound type="class" confirmed="no">java.lang.Object</outbound>
            </feature>
            <feature confirmed="yes">
                <name>com.sun.enterprise.glassfish.bootstrap.ASMainStatic$2$1.this$1</name>
                <outbound type="class" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainStatic$2</outbound>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainStatic$2$1.ASMainStatic$2$1(com.sun.enterprise.glassfish.bootstrap.ASMainStatic$2)</inbound>
            </feature>
        </class>
        <class confirmed="yes">
            <name>com.sun.enterprise.glassfish.bootstrap.ASMainStatic$3</name>
            <outbound type="class" confirmed="no">java.lang.Object</outbound>
            <outbound type="class" confirmed="no">java.lang.Runnable</outbound>
            <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainStatic$3$1.ASMainStatic$3$1(com.sun.enterprise.glassfish.bootstrap.ASMainStatic$3)</inbound>
            <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainStatic$3$1.createHabitat(com.sun.enterprise.module.ModulesRegistry, com.sun.enterprise.module.bootstrap.StartupContext)</inbound>
            <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainStatic$3$1.this$1</inbound>
            <feature confirmed="yes">
                <name>com.sun.enterprise.glassfish.bootstrap.ASMainStatic$3.ASMainStatic$3(com.sun.enterprise.glassfish.bootstrap.ASMainStatic, com.sun.enterprise.module.impl.ModulesRegistryImpl, com.sun.enterprise.module.bootstrap.StartupContext)</name>
                <outbound type="class" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainStatic</outbound>
                <outbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainStatic$3.this$0</outbound>
                <outbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainStatic$3.val$modulesRegistry</outbound>
                <outbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainStatic$3.val$startupContext</outbound>
                <outbound type="class" confirmed="no">com.sun.enterprise.module.bootstrap.StartupContext</outbound>
                <outbound type="class" confirmed="no">com.sun.enterprise.module.impl.ModulesRegistryImpl</outbound>
                <outbound type="feature" confirmed="no">java.lang.Object.Object()</outbound>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainStatic.start(java.lang.String[])</inbound>
            </feature>
            <feature confirmed="yes">
                <name>com.sun.enterprise.glassfish.bootstrap.ASMainStatic$3.run()</name>
                <outbound type="class" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainStatic</outbound>
                <outbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainStatic$3$1.ASMainStatic$3$1(com.sun.enterprise.glassfish.bootstrap.ASMainStatic$3)</outbound>
                <outbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainStatic$3.this$0</outbound>
                <outbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainStatic$3.val$modulesRegistry</outbound>
                <outbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainStatic$3.val$startupContext</outbound>
                <outbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainStatic.access$000(com.sun.enterprise.glassfish.bootstrap.ASMainStatic)</outbound>
                <outbound type="class" confirmed="no">com.sun.enterprise.module.ModulesRegistry</outbound>
                <outbound type="class" confirmed="no">com.sun.enterprise.module.bootstrap.BootException</outbound>
                <outbound type="feature" confirmed="no">com.sun.enterprise.module.bootstrap.BootException.getMessage()</outbound>
                <outbound type="feature" confirmed="no">com.sun.enterprise.module.bootstrap.Main.launch(com.sun.enterprise.module.ModulesRegistry, com.sun.enterprise.module.bootstrap.StartupContext)</outbound>
                <outbound type="class" confirmed="no">com.sun.enterprise.module.bootstrap.StartupContext</outbound>
                <outbound type="class" confirmed="no">com.sun.enterprise.module.impl.ModulesRegistryImpl</outbound>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="class" confirmed="no">java.lang.Throwable</outbound>
                <outbound type="class" confirmed="no">java.util.logging.Level</outbound>
                <outbound type="feature" confirmed="no">java.util.logging.Level.SEVERE</outbound>
                <outbound type="class" confirmed="no">java.util.logging.Logger</outbound>
                <outbound type="feature" confirmed="no">java.util.logging.Logger.log(java.util.logging.Level, java.lang.String, java.lang.Throwable)</outbound>
                <outbound type="class" confirmed="no">org.jvnet.hk2.component.Habitat</outbound>
            </feature>
            <feature confirmed="yes">
                <name>com.sun.enterprise.glassfish.bootstrap.ASMainStatic$3.this$0</name>
                <outbound type="class" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainStatic</outbound>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainStatic$3$1.createHabitat(com.sun.enterprise.module.ModulesRegistry, com.sun.enterprise.module.bootstrap.StartupContext)</inbound>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainStatic$3.ASMainStatic$3(com.sun.enterprise.glassfish.bootstrap.ASMainStatic, com.sun.enterprise.module.impl.ModulesRegistryImpl, com.sun.enterprise.module.bootstrap.StartupContext)</inbound>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainStatic$3.run()</inbound>
            </feature>
            <feature confirmed="yes">
                <name>com.sun.enterprise.glassfish.bootstrap.ASMainStatic$3.val$modulesRegistry</name>
                <outbound type="class" confirmed="no">com.sun.enterprise.module.impl.ModulesRegistryImpl</outbound>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainStatic$3.ASMainStatic$3(com.sun.enterprise.glassfish.bootstrap.ASMainStatic, com.sun.enterprise.module.impl.ModulesRegistryImpl, com.sun.enterprise.module.bootstrap.StartupContext)</inbound>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainStatic$3.run()</inbound>
            </feature>
            <feature confirmed="yes">
                <name>com.sun.enterprise.glassfish.bootstrap.ASMainStatic$3.val$startupContext</name>
                <outbound type="class" confirmed="no">com.sun.enterprise.module.bootstrap.StartupContext</outbound>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainStatic$3.ASMainStatic$3(com.sun.enterprise.glassfish.bootstrap.ASMainStatic, com.sun.enterprise.module.impl.ModulesRegistryImpl, com.sun.enterprise.module.bootstrap.StartupContext)</inbound>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainStatic$3.run()</inbound>
            </feature>
        </class>
        <class confirmed="yes">
            <name>com.sun.enterprise.glassfish.bootstrap.ASMainStatic$3$1</name>
            <outbound type="class" confirmed="no">com.sun.enterprise.module.bootstrap.Main</outbound>
            <feature confirmed="yes">
                <name>com.sun.enterprise.glassfish.bootstrap.ASMainStatic$3$1.ASMainStatic$3$1(com.sun.enterprise.glassfish.bootstrap.ASMainStatic$3)</name>
                <outbound type="class" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainStatic$3</outbound>
                <outbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainStatic$3$1.this$1</outbound>
                <outbound type="feature" confirmed="no">com.sun.enterprise.module.bootstrap.Main.Main()</outbound>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainStatic$3.run()</inbound>
            </feature>
            <feature confirmed="yes">
                <name>com.sun.enterprise.glassfish.bootstrap.ASMainStatic$3$1.createHabitat(com.sun.enterprise.module.ModulesRegistry, com.sun.enterprise.module.bootstrap.StartupContext)</name>
                <outbound type="class" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainStatic</outbound>
                <outbound type="class" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainStatic$3</outbound>
                <outbound type="feature" confirmed="no">com.sun.enterprise.glassfish.bootstrap.ASMainStatic$3$1.createInhabitantsParser(org.jvnet.hk2.component.Habitat)</outbound>
                <outbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainStatic$3$1.this$1</outbound>
                <outbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainStatic$3.this$0</outbound>
                <outbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainStatic.access$000(com.sun.enterprise.glassfish.bootstrap.ASMainStatic)</outbound>
                <outbound type="class" confirmed="no">com.sun.enterprise.module.ModulesRegistry</outbound>
                <outbound type="feature" confirmed="no">com.sun.enterprise.module.ModulesRegistry.createHabitat(java.lang.String, com.sun.hk2.component.InhabitantsParser)</outbound>
                <outbound type="feature" confirmed="no">com.sun.enterprise.module.ModulesRegistry.newHabitat()</outbound>
                <outbound type="class" confirmed="no">com.sun.enterprise.module.bootstrap.BootException</outbound>
                <outbound type="class" confirmed="no">com.sun.enterprise.module.bootstrap.StartupContext</outbound>
                <outbound type="feature" confirmed="no">com.sun.hk2.component.ExistingSingletonInhabitant.ExistingSingletonInhabitant(java.lang.Class, java.lang.Object)</outbound>
                <outbound type="feature" confirmed="no">com.sun.hk2.component.ExistingSingletonInhabitant.ExistingSingletonInhabitant(java.lang.Object)</outbound>
                <outbound type="class" confirmed="no">com.sun.hk2.component.InhabitantsParser</outbound>
                <outbound type="class" confirmed="no">java.lang.Class</outbound>
                <outbound type="class" confirmed="no">java.lang.Object</outbound>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="class" confirmed="no">java.util.logging.Logger</outbound>
                <outbound type="class" confirmed="no">org.jvnet.hk2.component.Habitat</outbound>
                <outbound type="feature" confirmed="no">org.jvnet.hk2.component.Habitat.add(org.jvnet.hk2.component.Inhabitant)</outbound>
                <outbound type="class" confirmed="no">org.jvnet.hk2.component.Inhabitant</outbound>
            </feature>
            <feature confirmed="no">
                <name>com.sun.enterprise.glassfish.bootstrap.ASMainStatic$3$1.createInhabitantsParser(org.jvnet.hk2.component.Habitat)</name>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainStatic$3$1.createHabitat(com.sun.enterprise.module.ModulesRegistry, com.sun.enterprise.module.bootstrap.StartupContext)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>com.sun.enterprise.glassfish.bootstrap.ASMainStatic$3$1.this$1</name>
                <outbound type="class" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainStatic$3</outbound>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainStatic$3$1.ASMainStatic$3$1(com.sun.enterprise.glassfish.bootstrap.ASMainStatic$3)</inbound>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainStatic$3$1.createHabitat(com.sun.enterprise.module.ModulesRegistry, com.sun.enterprise.module.bootstrap.StartupContext)</inbound>
            </feature>
        </class>
        <class confirmed="yes">
            <name>com.sun.enterprise.glassfish.bootstrap.AbstractMain</name>
            <outbound type="class" confirmed="no">java.lang.Object</outbound>
            <inbound type="class" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainOSGi</inbound>
            <inbound type="class" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainStatic</inbound>
            <feature confirmed="yes">
                <name>com.sun.enterprise.glassfish.bootstrap.AbstractMain.AbstractMain()</name>
                <outbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.AbstractMain.bootstrapFile</outbound>
                <outbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.AbstractMain.findBootstrapFile()</outbound>
                <outbound type="class" confirmed="no">java.io.File</outbound>
                <outbound type="feature" confirmed="no">java.lang.Object.Object()</outbound>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainOSGi.ASMainOSGi(java.util.logging.Logger, java.lang.String[])</inbound>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainStatic.ASMainStatic(java.util.logging.Logger, java.lang.String[])</inbound>
            </feature>
            <feature confirmed="yes">
                <name>com.sun.enterprise.glassfish.bootstrap.AbstractMain.bootstrapFile</name>
                <outbound type="class" confirmed="no">java.io.File</outbound>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.AbstractMain.AbstractMain()</inbound>
            </feature>
            <feature confirmed="yes">
                <name>com.sun.enterprise.glassfish.bootstrap.AbstractMain.createCache(java.io.File)</name>
                <outbound type="class" confirmed="no">java.io.File</outbound>
                <outbound type="class" confirmed="no">java.io.IOException</outbound>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.AbstractMain.flushAndCreate(java.io.File, long)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>com.sun.enterprise.glassfish.bootstrap.AbstractMain.deleteRecursive(java.io.File)</name>
                <outbound type="class" confirmed="no">java.io.File</outbound>
                <outbound type="feature" confirmed="no">java.io.File.delete()</outbound>
                <outbound type="feature" confirmed="no">java.io.File.isFile()</outbound>
                <outbound type="feature" confirmed="no">java.io.File.listFiles()</outbound>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.AbstractMain.flushAndCreate(java.io.File, long)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>com.sun.enterprise.glassfish.bootstrap.AbstractMain.findBootstrapFile()</name>
                <outbound type="feature" confirmed="no">com.sun.enterprise.module.bootstrap.Which.jarFile(java.lang.Class)</outbound>
                <outbound type="class" confirmed="no">java.io.File</outbound>
                <outbound type="class" confirmed="no">java.io.IOException</outbound>
                <outbound type="class" confirmed="no">java.lang.Class</outbound>
                <outbound type="class" confirmed="no">java.lang.Object</outbound>
                <outbound type="feature" confirmed="no">java.lang.Object.getClass()</outbound>
                <outbound type="feature" confirmed="no">java.lang.RuntimeException.RuntimeException(java.lang.String)</outbound>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="class" confirmed="no">java.lang.StringBuilder</outbound>
                <outbound type="feature" confirmed="no">java.lang.StringBuilder.StringBuilder()</outbound>
                <outbound type="feature" confirmed="no">java.lang.StringBuilder.append(java.lang.Object)</outbound>
                <outbound type="feature" confirmed="no">java.lang.StringBuilder.append(java.lang.String)</outbound>
                <outbound type="feature" confirmed="no">java.lang.StringBuilder.toString()</outbound>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.AbstractMain.AbstractMain()</inbound>
            </feature>
            <feature confirmed="yes">
                <name>com.sun.enterprise.glassfish.bootstrap.AbstractMain.flushAndCreate(java.io.File, long)</name>
                <outbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.AbstractMain.createCache(java.io.File)</outbound>
                <outbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.AbstractMain.deleteRecursive(java.io.File)</outbound>
                <outbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.AbstractMain.getLogger()</outbound>
                <outbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.AbstractMain.saveCacheInformation(java.io.File, java.lang.String, long)</outbound>
                <outbound type="class" confirmed="no">java.io.File</outbound>
                <outbound type="feature" confirmed="no">java.io.File.exists()</outbound>
                <outbound type="feature" confirmed="no">java.io.File.isDirectory()</outbound>
                <outbound type="feature" confirmed="no">java.io.File.toURI()</outbound>
                <outbound type="class" confirmed="no">java.io.IOException</outbound>
                <outbound type="feature" confirmed="no">java.io.IOException.IOException(java.lang.String)</outbound>
                <outbound type="class" confirmed="no">java.lang.Object</outbound>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="class" confirmed="no">java.lang.StringBuilder</outbound>
                <outbound type="feature" confirmed="no">java.lang.StringBuilder.StringBuilder()</outbound>
                <outbound type="feature" confirmed="no">java.lang.StringBuilder.append(java.lang.Object)</outbound>
                <outbound type="feature" confirmed="no">java.lang.StringBuilder.append(java.lang.String)</outbound>
                <outbound type="feature" confirmed="no">java.lang.StringBuilder.toString()</outbound>
                <outbound type="class" confirmed="no">java.lang.Throwable</outbound>
                <outbound type="class" confirmed="no">java.net.MalformedURLException</outbound>
                <outbound type="class" confirmed="no">java.net.URI</outbound>
                <outbound type="feature" confirmed="no">java.net.URI.toURL()</outbound>
                <outbound type="class" confirmed="no">java.net.URL</outbound>
                <outbound type="feature" confirmed="no">java.net.URL.toString()</outbound>
                <outbound type="class" confirmed="no">java.util.logging.Level</outbound>
                <outbound type="feature" confirmed="no">java.util.logging.Level.SEVERE</outbound>
                <outbound type="class" confirmed="no">java.util.logging.Logger</outbound>
                <outbound type="feature" confirmed="no">java.util.logging.Logger.info(java.lang.String)</outbound>
                <outbound type="feature" confirmed="no">java.util.logging.Logger.log(java.util.logging.Level, java.lang.String, java.lang.Throwable)</outbound>
                <outbound type="feature" confirmed="no">java.util.logging.Logger.warning(java.lang.String)</outbound>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.AbstractMain.setUpCache(java.io.File, java.io.File)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>com.sun.enterprise.glassfish.bootstrap.AbstractMain.getLastModified(java.io.File, long)</name>
                <outbound type="class" confirmed="no">java.io.File</outbound>
                <outbound type="feature" confirmed="no">java.io.File.isDirectory()</outbound>
                <outbound type="feature" confirmed="no">java.io.File.lastModified()</outbound>
                <outbound type="feature" confirmed="no">java.io.File.listFiles()</outbound>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.AbstractMain.setUpCache(java.io.File, java.io.File)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>com.sun.enterprise.glassfish.bootstrap.AbstractMain.getLogger()</name>
                <outbound type="class" confirmed="no">java.util.logging.Logger</outbound>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.AbstractMain.flushAndCreate(java.io.File, long)</inbound>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.AbstractMain.isCacheOutdated(long, java.io.File)</inbound>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.AbstractMain.loadCacheInformation(java.io.File)</inbound>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.AbstractMain.saveCacheInformation(java.io.File, java.lang.String, long)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>com.sun.enterprise.glassfish.bootstrap.AbstractMain.getSettingsLastModification()</name>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.AbstractMain.setUpCache(java.io.File, java.io.File)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>com.sun.enterprise.glassfish.bootstrap.AbstractMain.isCacheOutdated(long, java.io.File)</name>
                <outbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.AbstractMain.getLogger()</outbound>
                <outbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.AbstractMain.loadCacheInformation(java.io.File)</outbound>
                <outbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.AbstractMain.parse(java.util.Properties, java.lang.String)</outbound>
                <outbound type="class" confirmed="no">java.io.File</outbound>
                <outbound type="feature" confirmed="no">java.io.File.toURI()</outbound>
                <outbound type="class" confirmed="no">java.lang.Object</outbound>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="feature" confirmed="no">java.lang.String.equals(java.lang.Object)</outbound>
                <outbound type="class" confirmed="no">java.lang.Throwable</outbound>
                <outbound type="class" confirmed="no">java.net.MalformedURLException</outbound>
                <outbound type="class" confirmed="no">java.net.URI</outbound>
                <outbound type="feature" confirmed="no">java.net.URI.toURL()</outbound>
                <outbound type="class" confirmed="no">java.net.URL</outbound>
                <outbound type="feature" confirmed="no">java.net.URL.toString()</outbound>
                <outbound type="class" confirmed="no">java.util.Properties</outbound>
                <outbound type="feature" confirmed="no">java.util.Properties.getProperty(java.lang.String)</outbound>
                <outbound type="class" confirmed="no">java.util.logging.Level</outbound>
                <outbound type="feature" confirmed="no">java.util.logging.Level.SEVERE</outbound>
                <outbound type="class" confirmed="no">java.util.logging.Logger</outbound>
                <outbound type="feature" confirmed="no">java.util.logging.Logger.log(java.util.logging.Level, java.lang.String, java.lang.Throwable)</outbound>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.AbstractMain.setUpCache(java.io.File, java.io.File)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>com.sun.enterprise.glassfish.bootstrap.AbstractMain.loadCacheInformation(java.io.File)</name>
                <outbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.AbstractMain.getLogger()</outbound>
                <outbound type="feature" confirmed="no">java.io.BufferedInputStream.BufferedInputStream(java.io.InputStream)</outbound>
                <outbound type="class" confirmed="no">java.io.File</outbound>
                <outbound type="feature" confirmed="no">java.io.File.File(java.io.File, java.lang.String)</outbound>
                <outbound type="feature" confirmed="no">java.io.File.exists()</outbound>
                <outbound type="feature" confirmed="no">java.io.File.getName()</outbound>
                <outbound type="feature" confirmed="no">java.io.File.getParentFile()</outbound>
                <outbound type="feature" confirmed="no">java.io.File.toURI()</outbound>
                <outbound type="feature" confirmed="no">java.io.FileInputStream.FileInputStream(java.io.File)</outbound>
                <outbound type="class" confirmed="no">java.io.IOException</outbound>
                <outbound type="class" confirmed="no">java.io.InputStream</outbound>
                <outbound type="feature" confirmed="no">java.io.InputStream.close()</outbound>
                <outbound type="feature" confirmed="no">java.lang.Long.parseLong(java.lang.String)</outbound>
                <outbound type="class" confirmed="no">java.lang.NumberFormatException</outbound>
                <outbound type="class" confirmed="no">java.lang.Object</outbound>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="feature" confirmed="no">java.lang.String.equals(java.lang.Object)</outbound>
                <outbound type="class" confirmed="no">java.lang.StringBuilder</outbound>
                <outbound type="feature" confirmed="no">java.lang.StringBuilder.StringBuilder()</outbound>
                <outbound type="feature" confirmed="no">java.lang.StringBuilder.append(java.lang.String)</outbound>
                <outbound type="feature" confirmed="no">java.lang.StringBuilder.toString()</outbound>
                <outbound type="class" confirmed="no">java.net.URI</outbound>
                <outbound type="feature" confirmed="no">java.net.URI.toURL()</outbound>
                <outbound type="class" confirmed="no">java.net.URL</outbound>
                <outbound type="feature" confirmed="no">java.net.URL.toString()</outbound>
                <outbound type="class" confirmed="no">java.util.Properties</outbound>
                <outbound type="feature" confirmed="no">java.util.Properties.Properties()</outbound>
                <outbound type="feature" confirmed="no">java.util.Properties.getProperty(java.lang.String)</outbound>
                <outbound type="feature" confirmed="no">java.util.Properties.load(java.io.InputStream)</outbound>
                <outbound type="class" confirmed="no">java.util.logging.Logger</outbound>
                <outbound type="feature" confirmed="no">java.util.logging.Logger.info(java.lang.String)</outbound>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.AbstractMain.isCacheOutdated(long, java.io.File)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>com.sun.enterprise.glassfish.bootstrap.AbstractMain.parse(java.util.Properties, java.lang.String)</name>
                <outbound type="feature" confirmed="no">java.lang.Long.parseLong(java.lang.String)</outbound>
                <outbound type="class" confirmed="no">java.lang.NumberFormatException</outbound>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="class" confirmed="no">java.util.Properties</outbound>
                <outbound type="feature" confirmed="no">java.util.Properties.getProperty(java.lang.String)</outbound>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.AbstractMain.isCacheOutdated(long, java.io.File)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>com.sun.enterprise.glassfish.bootstrap.AbstractMain.saveCacheInformation(java.io.File, java.lang.String, long)</name>
                <outbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.AbstractMain.getLogger()</outbound>
                <outbound type="class" confirmed="no">java.io.File</outbound>
                <outbound type="feature" confirmed="no">java.io.File.File(java.io.File, java.lang.String)</outbound>
                <outbound type="feature" confirmed="no">java.io.File.createNewFile()</outbound>
                <outbound type="feature" confirmed="no">java.io.File.delete()</outbound>
                <outbound type="feature" confirmed="no">java.io.File.getName()</outbound>
                <outbound type="feature" confirmed="no">java.io.File.getParentFile()</outbound>
                <outbound type="feature" confirmed="no">java.io.File.toURI()</outbound>
                <outbound type="feature" confirmed="no">java.io.FileOutputStream.FileOutputStream(java.io.File)</outbound>
                <outbound type="class" confirmed="no">java.io.IOException</outbound>
                <outbound type="feature" confirmed="no">java.io.ObjectOutputStream.ObjectOutputStream(java.io.OutputStream)</outbound>
                <outbound type="feature" confirmed="no">java.io.ObjectOutputStream.close()</outbound>
                <outbound type="class" confirmed="no">java.io.OutputStream</outbound>
                <outbound type="feature" confirmed="no">java.lang.Long.Long(long)</outbound>
                <outbound type="feature" confirmed="no">java.lang.Long.toString()</outbound>
                <outbound type="class" confirmed="no">java.lang.Object</outbound>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="class" confirmed="no">java.lang.StringBuilder</outbound>
                <outbound type="feature" confirmed="no">java.lang.StringBuilder.StringBuilder()</outbound>
                <outbound type="feature" confirmed="no">java.lang.StringBuilder.append(java.lang.String)</outbound>
                <outbound type="feature" confirmed="no">java.lang.StringBuilder.toString()</outbound>
                <outbound type="class" confirmed="no">java.net.URI</outbound>
                <outbound type="feature" confirmed="no">java.net.URI.toURL()</outbound>
                <outbound type="class" confirmed="no">java.net.URL</outbound>
                <outbound type="feature" confirmed="no">java.net.URL.toString()</outbound>
                <outbound type="feature" confirmed="no">java.util.Properties.Properties()</outbound>
                <outbound type="feature" confirmed="no">java.util.Properties.put(java.lang.Object, java.lang.Object)</outbound>
                <outbound type="feature" confirmed="no">java.util.Properties.store(java.io.OutputStream, java.lang.String)</outbound>
                <outbound type="class" confirmed="no">java.util.logging.Logger</outbound>
                <outbound type="feature" confirmed="no">java.util.logging.Logger.info(java.lang.String)</outbound>
                <outbound type="feature" confirmed="no">java.util.logging.Logger.warning(java.lang.String)</outbound>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.AbstractMain.flushAndCreate(java.io.File, long)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>com.sun.enterprise.glassfish.bootstrap.AbstractMain.setUpCache(java.io.File, java.io.File)</name>
                <outbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.AbstractMain.flushAndCreate(java.io.File, long)</outbound>
                <outbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.AbstractMain.getLastModified(java.io.File, long)</outbound>
                <outbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.AbstractMain.getSettingsLastModification()</outbound>
                <outbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.AbstractMain.isCacheOutdated(long, java.io.File)</outbound>
                <outbound type="class" confirmed="no">java.io.File</outbound>
                <outbound type="class" confirmed="no">java.io.IOException</outbound>
            </feature>
        </class>
        <class confirmed="yes">
            <name>com.sun.enterprise.glassfish.bootstrap.ClassPathBuilder</name>
            <outbound type="class" confirmed="no">java.lang.Object</outbound>
            <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainEquinox.addFrameworkJars(com.sun.enterprise.glassfish.bootstrap.ClassPathBuilder)</inbound>
            <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainFelix.addFrameworkJars(com.sun.enterprise.glassfish.bootstrap.ClassPathBuilder)</inbound>
            <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainKnopflerFish.addFrameworkJars(com.sun.enterprise.glassfish.bootstrap.ClassPathBuilder)</inbound>
            <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainOSGi.addFrameworkJars(com.sun.enterprise.glassfish.bootstrap.ClassPathBuilder)</inbound>
            <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainOSGi.addJDKToolsJar(com.sun.enterprise.glassfish.bootstrap.ClassPathBuilder)</inbound>
            <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainOSGi.findDerbyClient(com.sun.enterprise.glassfish.bootstrap.ClassPathBuilder)</inbound>
            <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainOSGi.setupLauncherClassLoader()</inbound>
            <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ClassPathBuilder$1.ClassPathBuilder$1(com.sun.enterprise.glassfish.bootstrap.ClassPathBuilder, java.lang.String[])</inbound>
            <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ClassPathBuilder$1.this$0</inbound>
            <feature confirmed="yes">
                <name>com.sun.enterprise.glassfish.bootstrap.ClassPathBuilder.ClassPathBuilder(java.lang.ClassLoader)</name>
                <outbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ClassPathBuilder.parent</outbound>
                <outbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ClassPathBuilder.urls</outbound>
                <outbound type="class" confirmed="no">java.lang.ClassLoader</outbound>
                <outbound type="feature" confirmed="no">java.lang.Object.Object()</outbound>
                <outbound type="feature" confirmed="no">java.util.ArrayList.ArrayList()</outbound>
                <outbound type="class" confirmed="no">java.util.List</outbound>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainOSGi.setupLauncherClassLoader()</inbound>
            </feature>
            <feature confirmed="yes">
                <name>com.sun.enterprise.glassfish.bootstrap.ClassPathBuilder.addClassFolder(java.io.File)</name>
                <outbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ClassPathBuilder.addJar(java.io.File)</outbound>
                <outbound type="class" confirmed="no">java.io.File</outbound>
                <outbound type="class" confirmed="no">java.io.IOException</outbound>
            </feature>
            <feature confirmed="yes">
                <name>com.sun.enterprise.glassfish.bootstrap.ClassPathBuilder.addGlob(java.io.File, java.lang.String[])</name>
                <outbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ClassPathBuilder.addJar(java.io.File)</outbound>
                <outbound type="class" confirmed="no">java.io.File</outbound>
                <outbound type="feature" confirmed="no">java.io.File.getName()</outbound>
                <outbound type="feature" confirmed="no">java.io.File.listFiles()</outbound>
                <outbound type="class" confirmed="no">java.io.IOException</outbound>
                <outbound type="class" confirmed="no">java.lang.CharSequence</outbound>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="feature" confirmed="no">java.lang.String.replace(java.lang.CharSequence, java.lang.CharSequence)</outbound>
                <outbound type="class" confirmed="no">java.lang.StringBuilder</outbound>
                <outbound type="feature" confirmed="no">java.lang.StringBuilder.StringBuilder()</outbound>
                <outbound type="feature" confirmed="no">java.lang.StringBuilder.append(char)</outbound>
                <outbound type="feature" confirmed="no">java.lang.StringBuilder.append(java.lang.String)</outbound>
                <outbound type="feature" confirmed="no">java.lang.StringBuilder.length()</outbound>
                <outbound type="feature" confirmed="no">java.lang.StringBuilder.toString()</outbound>
                <outbound type="class" confirmed="no">java.util.regex.Matcher</outbound>
                <outbound type="feature" confirmed="no">java.util.regex.Matcher.matches()</outbound>
                <outbound type="class" confirmed="no">java.util.regex.Pattern</outbound>
                <outbound type="feature" confirmed="no">java.util.regex.Pattern.compile(java.lang.String)</outbound>
                <outbound type="feature" confirmed="no">java.util.regex.Pattern.matcher(java.lang.CharSequence)</outbound>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainEquinox.addFrameworkJars(com.sun.enterprise.glassfish.bootstrap.ClassPathBuilder)</inbound>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainOSGi.findDerbyClient(com.sun.enterprise.glassfish.bootstrap.ClassPathBuilder)</inbound>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainOSGi.setupLauncherClassLoader()</inbound>
            </feature>
            <feature confirmed="yes">
                <name>com.sun.enterprise.glassfish.bootstrap.ClassPathBuilder.addJar(java.io.File)</name>
                <outbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ClassPathBuilder.urls</outbound>
                <outbound type="class" confirmed="no">java.io.File</outbound>
                <outbound type="feature" confirmed="no">java.io.File.exists()</outbound>
                <outbound type="feature" confirmed="no">java.io.File.toURI()</outbound>
                <outbound type="class" confirmed="no">java.io.IOException</outbound>
                <outbound type="feature" confirmed="no">java.io.IOException.IOException(java.lang.String)</outbound>
                <outbound type="class" confirmed="no">java.lang.Object</outbound>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="class" confirmed="no">java.lang.StringBuilder</outbound>
                <outbound type="feature" confirmed="no">java.lang.StringBuilder.StringBuilder()</outbound>
                <outbound type="feature" confirmed="no">java.lang.StringBuilder.append(java.lang.Object)</outbound>
                <outbound type="feature" confirmed="no">java.lang.StringBuilder.append(java.lang.String)</outbound>
                <outbound type="feature" confirmed="no">java.lang.StringBuilder.toString()</outbound>
                <outbound type="class" confirmed="no">java.net.URI</outbound>
                <outbound type="feature" confirmed="no">java.net.URI.toURL()</outbound>
                <outbound type="class" confirmed="no">java.net.URL</outbound>
                <outbound type="class" confirmed="no">java.util.List</outbound>
                <outbound type="feature" confirmed="no">java.util.List.add(java.lang.Object)</outbound>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainFelix.addFrameworkJars(com.sun.enterprise.glassfish.bootstrap.ClassPathBuilder)</inbound>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainKnopflerFish.addFrameworkJars(com.sun.enterprise.glassfish.bootstrap.ClassPathBuilder)</inbound>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainOSGi.addJDKToolsJar(com.sun.enterprise.glassfish.bootstrap.ClassPathBuilder)</inbound>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ClassPathBuilder.addClassFolder(java.io.File)</inbound>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ClassPathBuilder.addGlob(java.io.File, java.lang.String[])</inbound>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ClassPathBuilder.addJarFolder(java.io.File, java.lang.String[])</inbound>
            </feature>
            <feature confirmed="yes">
                <name>com.sun.enterprise.glassfish.bootstrap.ClassPathBuilder.addJarFolder(java.io.File, java.lang.String[])</name>
                <outbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ClassPathBuilder$1.ClassPathBuilder$1(com.sun.enterprise.glassfish.bootstrap.ClassPathBuilder, java.lang.String[])</outbound>
                <outbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ClassPathBuilder.addJar(java.io.File)</outbound>
                <outbound type="class" confirmed="no">java.io.File</outbound>
                <outbound type="feature" confirmed="no">java.io.File.isDirectory()</outbound>
                <outbound type="feature" confirmed="no">java.io.File.listFiles(java.io.FileFilter)</outbound>
                <outbound type="class" confirmed="no">java.io.FileFilter</outbound>
                <outbound type="class" confirmed="no">java.io.IOException</outbound>
                <outbound type="feature" confirmed="no">java.io.IOException.IOException(java.lang.String)</outbound>
                <outbound type="class" confirmed="no">java.lang.Object</outbound>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="class" confirmed="no">java.lang.StringBuilder</outbound>
                <outbound type="feature" confirmed="no">java.lang.StringBuilder.StringBuilder()</outbound>
                <outbound type="feature" confirmed="no">java.lang.StringBuilder.append(java.lang.Object)</outbound>
                <outbound type="feature" confirmed="no">java.lang.StringBuilder.append(java.lang.String)</outbound>
                <outbound type="feature" confirmed="no">java.lang.StringBuilder.toString()</outbound>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainEquinox.addFrameworkJars(com.sun.enterprise.glassfish.bootstrap.ClassPathBuilder)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>com.sun.enterprise.glassfish.bootstrap.ClassPathBuilder.create()</name>
                <outbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ClassPathBuilder.parent</outbound>
                <outbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ClassPathBuilder.urls</outbound>
                <outbound type="class" confirmed="no">java.lang.ClassLoader</outbound>
                <outbound type="class" confirmed="no">java.lang.Object</outbound>
                <outbound type="class" confirmed="no">java.net.URL</outbound>
                <outbound type="feature" confirmed="no">java.net.URLClassLoader.URLClassLoader(java.net.URL[], java.lang.ClassLoader)</outbound>
                <outbound type="class" confirmed="no">java.net.URL[]</outbound>
                <outbound type="class" confirmed="no">java.util.List</outbound>
                <outbound type="feature" confirmed="no">java.util.List.size()</outbound>
                <outbound type="feature" confirmed="no">java.util.List.toArray(java.lang.Object[])</outbound>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainOSGi.setupLauncherClassLoader()</inbound>
            </feature>
            <feature confirmed="yes">
                <name>com.sun.enterprise.glassfish.bootstrap.ClassPathBuilder.createExtensible(java.util.List)</name>
                <outbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ClassPathBuilder.parent</outbound>
                <outbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ClassPathBuilder.urls</outbound>
                <outbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ExtensibleClassLoader.ExtensibleClassLoader(java.net.URL[], java.lang.ClassLoader, java.util.List)</outbound>
                <outbound type="class" confirmed="no">java.lang.ClassLoader</outbound>
                <outbound type="class" confirmed="no">java.lang.Object</outbound>
                <outbound type="class" confirmed="no">java.net.URL</outbound>
                <outbound type="class" confirmed="no">java.net.URL[]</outbound>
                <outbound type="class" confirmed="no">java.util.List</outbound>
                <outbound type="feature" confirmed="no">java.util.List.size()</outbound>
                <outbound type="feature" confirmed="no">java.util.List.toArray(java.lang.Object[])</outbound>
            </feature>
            <feature confirmed="yes">
                <name>com.sun.enterprise.glassfish.bootstrap.ClassPathBuilder.parent</name>
                <outbound type="class" confirmed="no">java.lang.ClassLoader</outbound>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ClassPathBuilder.ClassPathBuilder(java.lang.ClassLoader)</inbound>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ClassPathBuilder.create()</inbound>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ClassPathBuilder.createExtensible(java.util.List)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>com.sun.enterprise.glassfish.bootstrap.ClassPathBuilder.urls</name>
                <outbound type="class" confirmed="no">java.util.List</outbound>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ClassPathBuilder.ClassPathBuilder(java.lang.ClassLoader)</inbound>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ClassPathBuilder.addJar(java.io.File)</inbound>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ClassPathBuilder.create()</inbound>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ClassPathBuilder.createExtensible(java.util.List)</inbound>
            </feature>
        </class>
        <class confirmed="yes">
            <name>com.sun.enterprise.glassfish.bootstrap.ClassPathBuilder$1</name>
            <outbound type="class" confirmed="no">java.io.FileFilter</outbound>
            <outbound type="class" confirmed="no">java.lang.Object</outbound>
            <feature confirmed="yes">
                <name>com.sun.enterprise.glassfish.bootstrap.ClassPathBuilder$1.ClassPathBuilder$1(com.sun.enterprise.glassfish.bootstrap.ClassPathBuilder, java.lang.String[])</name>
                <outbound type="class" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ClassPathBuilder</outbound>
                <outbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ClassPathBuilder$1.this$0</outbound>
                <outbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ClassPathBuilder$1.val$excludes</outbound>
                <outbound type="feature" confirmed="no">java.lang.Object.Object()</outbound>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ClassPathBuilder.addJarFolder(java.io.File, java.lang.String[])</inbound>
            </feature>
            <feature confirmed="yes">
                <name>com.sun.enterprise.glassfish.bootstrap.ClassPathBuilder$1.accept(java.io.File)</name>
                <outbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ClassPathBuilder$1.val$excludes</outbound>
                <outbound type="class" confirmed="no">java.io.File</outbound>
                <outbound type="feature" confirmed="no">java.io.File.getName()</outbound>
                <outbound type="feature" confirmed="no">java.io.File.getPath()</outbound>
                <outbound type="class" confirmed="no">java.lang.Object</outbound>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="feature" confirmed="no">java.lang.String.endsWith(java.lang.String)</outbound>
                <outbound type="feature" confirmed="no">java.lang.String.equals(java.lang.Object)</outbound>
            </feature>
            <feature confirmed="yes">
                <name>com.sun.enterprise.glassfish.bootstrap.ClassPathBuilder$1.this$0</name>
                <outbound type="class" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ClassPathBuilder</outbound>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ClassPathBuilder$1.ClassPathBuilder$1(com.sun.enterprise.glassfish.bootstrap.ClassPathBuilder, java.lang.String[])</inbound>
            </feature>
            <feature confirmed="yes">
                <name>com.sun.enterprise.glassfish.bootstrap.ClassPathBuilder$1.val$excludes</name>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ClassPathBuilder$1.ClassPathBuilder$1(com.sun.enterprise.glassfish.bootstrap.ClassPathBuilder, java.lang.String[])</inbound>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ClassPathBuilder$1.accept(java.io.File)</inbound>
            </feature>
        </class>
        <class confirmed="yes">
            <name>com.sun.enterprise.glassfish.bootstrap.ExtensibleClassLoader</name>
            <outbound type="class" confirmed="no">com.sun.enterprise.module.RepositoryChangeListener</outbound>
            <outbound type="class" confirmed="no">java.net.URLClassLoader</outbound>
            <feature confirmed="yes">
                <name>com.sun.enterprise.glassfish.bootstrap.ExtensibleClassLoader.ExtensibleClassLoader(java.net.URL[], java.lang.ClassLoader, java.util.List)</name>
                <outbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ExtensibleClassLoader.LOGGER</outbound>
                <outbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ExtensibleClassLoader.addURI(java.net.URI)</outbound>
                <outbound type="class" confirmed="no">com.sun.enterprise.module.Repository</outbound>
                <outbound type="feature" confirmed="no">com.sun.enterprise.module.Repository.addListener(com.sun.enterprise.module.RepositoryChangeListener)</outbound>
                <outbound type="feature" confirmed="no">com.sun.enterprise.module.Repository.getJarLocations()</outbound>
                <outbound type="class" confirmed="no">com.sun.enterprise.module.RepositoryChangeListener</outbound>
                <outbound type="class" confirmed="no">java.lang.ClassLoader</outbound>
                <outbound type="class" confirmed="no">java.lang.Object</outbound>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="class" confirmed="no">java.lang.StringBuilder</outbound>
                <outbound type="feature" confirmed="no">java.lang.StringBuilder.StringBuilder()</outbound>
                <outbound type="feature" confirmed="no">java.lang.StringBuilder.append(java.lang.Object)</outbound>
                <outbound type="feature" confirmed="no">java.lang.StringBuilder.append(java.lang.String)</outbound>
                <outbound type="feature" confirmed="no">java.lang.StringBuilder.toString()</outbound>
                <outbound type="class" confirmed="no">java.net.URI</outbound>
                <outbound type="class" confirmed="no">java.net.URL</outbound>
                <outbound type="feature" confirmed="no">java.net.URLClassLoader.URLClassLoader(java.net.URL[], java.lang.ClassLoader)</outbound>
                <outbound type="class" confirmed="no">java.util.Iterator</outbound>
                <outbound type="feature" confirmed="no">java.util.Iterator.hasNext()</outbound>
                <outbound type="feature" confirmed="no">java.util.Iterator.next()</outbound>
                <outbound type="class" confirmed="no">java.util.List</outbound>
                <outbound type="feature" confirmed="no">java.util.List.iterator()</outbound>
                <outbound type="class" confirmed="no">java.util.logging.Logger</outbound>
                <outbound type="feature" confirmed="no">java.util.logging.Logger.info(java.lang.String)</outbound>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainHelper.setupSharedCL(java.lang.ClassLoader, java.util.List, java.util.List)</inbound>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ClassPathBuilder.createExtensible(java.util.List)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>com.sun.enterprise.glassfish.bootstrap.ExtensibleClassLoader.LOGGER</name>
                <outbound type="class" confirmed="no">java.util.logging.Logger</outbound>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ExtensibleClassLoader.ExtensibleClassLoader(java.net.URL[], java.lang.ClassLoader, java.util.List)</inbound>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ExtensibleClassLoader.addURI(java.net.URI)</inbound>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ExtensibleClassLoader.added(java.net.URI)</inbound>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ExtensibleClassLoader.static {}</inbound>
            </feature>
            <feature confirmed="yes">
                <name>com.sun.enterprise.glassfish.bootstrap.ExtensibleClassLoader.addURI(java.net.URI)</name>
                <outbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ExtensibleClassLoader.LOGGER</outbound>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="class" confirmed="no">java.lang.Throwable</outbound>
                <outbound type="class" confirmed="no">java.net.MalformedURLException</outbound>
                <outbound type="class" confirmed="no">java.net.URI</outbound>
                <outbound type="feature" confirmed="no">java.net.URI.toURL()</outbound>
                <outbound type="class" confirmed="no">java.net.URL</outbound>
                <outbound type="feature" confirmed="no">java.net.URLClassLoader.addURL(java.net.URL)</outbound>
                <outbound type="class" confirmed="no">java.util.logging.Level</outbound>
                <outbound type="feature" confirmed="no">java.util.logging.Level.SEVERE</outbound>
                <outbound type="class" confirmed="no">java.util.logging.Logger</outbound>
                <outbound type="feature" confirmed="no">java.util.logging.Logger.log(java.util.logging.Level, java.lang.String, java.lang.Throwable)</outbound>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ExtensibleClassLoader.ExtensibleClassLoader(java.net.URL[], java.lang.ClassLoader, java.util.List)</inbound>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ExtensibleClassLoader.added(java.net.URI)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>com.sun.enterprise.glassfish.bootstrap.ExtensibleClassLoader.added(java.net.URI)</name>
                <outbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ExtensibleClassLoader.LOGGER</outbound>
                <outbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ExtensibleClassLoader.addURI(java.net.URI)</outbound>
                <outbound type="feature" confirmed="no">java.io.File.File(java.net.URI)</outbound>
                <outbound type="feature" confirmed="no">java.io.File.isDirectory()</outbound>
                <outbound type="class" confirmed="no">java.lang.Object</outbound>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="class" confirmed="no">java.lang.StringBuilder</outbound>
                <outbound type="feature" confirmed="no">java.lang.StringBuilder.StringBuilder()</outbound>
                <outbound type="feature" confirmed="no">java.lang.StringBuilder.append(java.lang.Object)</outbound>
                <outbound type="feature" confirmed="no">java.lang.StringBuilder.append(java.lang.String)</outbound>
                <outbound type="feature" confirmed="no">java.lang.StringBuilder.toString()</outbound>
                <outbound type="class" confirmed="no">java.net.URI</outbound>
                <outbound type="class" confirmed="no">java.util.logging.Logger</outbound>
                <outbound type="feature" confirmed="no">java.util.logging.Logger.info(java.lang.String)</outbound>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ExtensibleClassLoader.jarAdded(java.net.URI)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>com.sun.enterprise.glassfish.bootstrap.ExtensibleClassLoader.jarAdded(java.net.URI)</name>
                <outbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ExtensibleClassLoader.added(java.net.URI)</outbound>
                <outbound type="class" confirmed="no">java.net.URI</outbound>
            </feature>
            <feature confirmed="yes">
                <name>com.sun.enterprise.glassfish.bootstrap.ExtensibleClassLoader.jarRemoved(java.net.URI)</name>
                <outbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ExtensibleClassLoader.removed(java.net.URI)</outbound>
                <outbound type="class" confirmed="no">java.net.URI</outbound>
            </feature>
            <feature confirmed="yes">
                <name>com.sun.enterprise.glassfish.bootstrap.ExtensibleClassLoader.moduleAdded(com.sun.enterprise.module.ModuleDefinition)</name>
                <outbound type="class" confirmed="no">com.sun.enterprise.module.ModuleDefinition</outbound>
            </feature>
            <feature confirmed="yes">
                <name>com.sun.enterprise.glassfish.bootstrap.ExtensibleClassLoader.moduleRemoved(com.sun.enterprise.module.ModuleDefinition)</name>
                <outbound type="class" confirmed="no">com.sun.enterprise.module.ModuleDefinition</outbound>
            </feature>
            <feature confirmed="yes">
                <name>com.sun.enterprise.glassfish.bootstrap.ExtensibleClassLoader.removed(java.net.URI)</name>
                <outbound type="class" confirmed="no">java.net.URI</outbound>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ExtensibleClassLoader.jarRemoved(java.net.URI)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>com.sun.enterprise.glassfish.bootstrap.ExtensibleClassLoader.static {}</name>
                <outbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ExtensibleClassLoader.LOGGER</outbound>
                <outbound type="feature" confirmed="no">java.lang.Class.getName()</outbound>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="class" confirmed="no">java.util.logging.Logger</outbound>
                <outbound type="feature" confirmed="no">java.util.logging.Logger.getLogger(java.lang.String)</outbound>
            </feature>
        </class>
        <class confirmed="yes">
            <name>com.sun.enterprise.glassfish.bootstrap.GFModuleDefinition</name>
            <outbound type="class" confirmed="no">com.sun.enterprise.module.common_impl.DefaultModuleDefinition</outbound>
            <feature confirmed="yes">
                <name>com.sun.enterprise.glassfish.bootstrap.GFModuleDefinition.GFModuleDefinition(java.io.File)</name>
                <outbound type="feature" confirmed="no">com.sun.enterprise.module.common_impl.DefaultModuleDefinition.DefaultModuleDefinition(java.io.File)</outbound>
                <outbound type="class" confirmed="no">java.io.File</outbound>
                <outbound type="class" confirmed="no">java.io.IOException</outbound>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.GFRepository.loadJar(java.io.File)</inbound>
            </feature>
        </class>
        <class confirmed="yes">
            <name>com.sun.enterprise.glassfish.bootstrap.GFRepository</name>
            <outbound type="class" confirmed="no">com.sun.enterprise.module.common_impl.DirectoryBasedRepository</outbound>
            <feature confirmed="yes">
                <name>com.sun.enterprise.glassfish.bootstrap.GFRepository.GFRepository(java.lang.String, java.io.File)</name>
                <outbound type="feature" confirmed="no">com.sun.enterprise.module.common_impl.DirectoryBasedRepository.DirectoryBasedRepository(java.lang.String, java.io.File)</outbound>
                <outbound type="class" confirmed="no">java.io.File</outbound>
                <outbound type="class" confirmed="no">java.io.FileNotFoundException</outbound>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
            </feature>
            <feature confirmed="yes">
                <name>com.sun.enterprise.glassfish.bootstrap.GFRepository.loadJar(java.io.File)</name>
                <outbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.GFModuleDefinition.GFModuleDefinition(java.io.File)</outbound>
                <outbound type="class" confirmed="no">com.sun.enterprise.module.ModuleDefinition</outbound>
                <outbound type="class" confirmed="no">java.io.File</outbound>
                <outbound type="class" confirmed="no">java.io.IOException</outbound>
            </feature>
        </class>
        <class confirmed="yes">
            <name>com.sun.enterprise.glassfish.bootstrap.MaskingClassLoader</name>
            <outbound type="class" confirmed="no">java.lang.ClassLoader</outbound>
            <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.MaskingClassLoader$1.MaskingClassLoader$1(com.sun.enterprise.glassfish.bootstrap.MaskingClassLoader, java.lang.String[])</inbound>
            <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.MaskingClassLoader$1.this$0</inbound>
            <feature confirmed="yes">
                <name>com.sun.enterprise.glassfish.bootstrap.MaskingClassLoader.MaskingClassLoader(java.lang.ClassLoader, java.net.URL[], java.lang.String[])</name>
                <outbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.MaskingClassLoader.delegate</outbound>
                <outbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.MaskingClassLoader.getMaskingClassLoader(java.lang.String[])</outbound>
                <outbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.MaskingClassLoader.masks</outbound>
                <outbound type="class" confirmed="no">java.lang.ClassLoader</outbound>
                <outbound type="feature" confirmed="no">java.lang.ClassLoader.ClassLoader(java.lang.ClassLoader)</outbound>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="class" confirmed="no">java.net.URL</outbound>
                <outbound type="class" confirmed="no">java.net.URLClassLoader</outbound>
                <outbound type="feature" confirmed="no">java.net.URLClassLoader.URLClassLoader(java.net.URL[], java.lang.ClassLoader)</outbound>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.MaskingClassLoader.MaskingClassLoader(java.lang.ClassLoader, java.net.URL[], java.util.Collection)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>com.sun.enterprise.glassfish.bootstrap.MaskingClassLoader.MaskingClassLoader(java.lang.ClassLoader, java.net.URL[], java.util.Collection)</name>
                <outbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.MaskingClassLoader.MaskingClassLoader(java.lang.ClassLoader, java.net.URL[], java.lang.String[])</outbound>
                <outbound type="class" confirmed="no">java.lang.ClassLoader</outbound>
                <outbound type="class" confirmed="no">java.lang.Object</outbound>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="class" confirmed="no">java.lang.String[]</outbound>
                <outbound type="class" confirmed="no">java.net.URL</outbound>
                <outbound type="class" confirmed="no">java.util.Collection</outbound>
                <outbound type="feature" confirmed="no">java.util.Collection.size()</outbound>
                <outbound type="feature" confirmed="no">java.util.Collection.toArray(java.lang.Object[])</outbound>
            </feature>
            <feature confirmed="yes">
                <name>com.sun.enterprise.glassfish.bootstrap.MaskingClassLoader.delegate</name>
                <outbound type="class" confirmed="no">java.net.URLClassLoader</outbound>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.MaskingClassLoader.MaskingClassLoader(java.lang.ClassLoader, java.net.URL[], java.lang.String[])</inbound>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.MaskingClassLoader.loadClass(java.lang.String, boolean)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>com.sun.enterprise.glassfish.bootstrap.MaskingClassLoader.getMaskingClassLoader(java.lang.String[])</name>
                <outbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.MaskingClassLoader$1.MaskingClassLoader$1(com.sun.enterprise.glassfish.bootstrap.MaskingClassLoader, java.lang.String[])</outbound>
                <outbound type="class" confirmed="no">java.lang.ClassLoader</outbound>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.MaskingClassLoader.MaskingClassLoader(java.lang.ClassLoader, java.net.URL[], java.lang.String[])</inbound>
            </feature>
            <feature confirmed="yes">
                <name>com.sun.enterprise.glassfish.bootstrap.MaskingClassLoader.loadClass(java.lang.String, boolean)</name>
                <outbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.MaskingClassLoader.delegate</outbound>
                <outbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.MaskingClassLoader.masks</outbound>
                <outbound type="class" confirmed="no">java.lang.Class</outbound>
                <outbound type="feature" confirmed="no">java.lang.ClassLoader.loadClass(java.lang.String, boolean)</outbound>
                <outbound type="class" confirmed="no">java.lang.ClassNotFoundException</outbound>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="feature" confirmed="no">java.lang.String.startsWith(java.lang.String)</outbound>
                <outbound type="class" confirmed="no">java.net.URLClassLoader</outbound>
                <outbound type="feature" confirmed="no">java.net.URLClassLoader.loadClass(java.lang.String)</outbound>
            </feature>
            <feature confirmed="yes">
                <name>com.sun.enterprise.glassfish.bootstrap.MaskingClassLoader.masks</name>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.MaskingClassLoader.MaskingClassLoader(java.lang.ClassLoader, java.net.URL[], java.lang.String[])</inbound>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.MaskingClassLoader.loadClass(java.lang.String, boolean)</inbound>
            </feature>
        </class>
        <class confirmed="yes">
            <name>com.sun.enterprise.glassfish.bootstrap.MaskingClassLoader$1</name>
            <outbound type="class" confirmed="no">java.lang.ClassLoader</outbound>
            <feature confirmed="yes">
                <name>com.sun.enterprise.glassfish.bootstrap.MaskingClassLoader$1.MaskingClassLoader$1(com.sun.enterprise.glassfish.bootstrap.MaskingClassLoader, java.lang.String[])</name>
                <outbound type="class" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.MaskingClassLoader</outbound>
                <outbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.MaskingClassLoader$1.this$0</outbound>
                <outbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.MaskingClassLoader$1.val$masks</outbound>
                <outbound type="feature" confirmed="no">java.lang.ClassLoader.ClassLoader()</outbound>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.MaskingClassLoader.getMaskingClassLoader(java.lang.String[])</inbound>
            </feature>
            <feature confirmed="yes">
                <name>com.sun.enterprise.glassfish.bootstrap.MaskingClassLoader$1.loadClass(java.lang.String, boolean)</name>
                <outbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.MaskingClassLoader$1.val$masks</outbound>
                <outbound type="class" confirmed="no">java.lang.Class</outbound>
                <outbound type="feature" confirmed="no">java.lang.ClassLoader.loadClass(java.lang.String, boolean)</outbound>
                <outbound type="class" confirmed="no">java.lang.ClassNotFoundException</outbound>
                <outbound type="feature" confirmed="no">java.lang.ClassNotFoundException.ClassNotFoundException(java.lang.String)</outbound>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="feature" confirmed="no">java.lang.String.startsWith(java.lang.String)</outbound>
            </feature>
            <feature confirmed="yes">
                <name>com.sun.enterprise.glassfish.bootstrap.MaskingClassLoader$1.this$0</name>
                <outbound type="class" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.MaskingClassLoader</outbound>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.MaskingClassLoader$1.MaskingClassLoader$1(com.sun.enterprise.glassfish.bootstrap.MaskingClassLoader, java.lang.String[])</inbound>
            </feature>
            <feature confirmed="yes">
                <name>com.sun.enterprise.glassfish.bootstrap.MaskingClassLoader$1.val$masks</name>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.MaskingClassLoader$1.MaskingClassLoader$1(com.sun.enterprise.glassfish.bootstrap.MaskingClassLoader, java.lang.String[])</inbound>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.MaskingClassLoader$1.loadClass(java.lang.String, boolean)</inbound>
            </feature>
        </class>
        <class confirmed="yes">
            <name>com.sun.enterprise.glassfish.bootstrap.ProxyModule</name>
            <outbound type="class" confirmed="no">com.sun.enterprise.module.Module</outbound>
            <outbound type="class" confirmed="no">java.lang.Object</outbound>
            <feature confirmed="yes">
                <name>com.sun.enterprise.glassfish.bootstrap.ProxyModule.ProxyModule(com.sun.enterprise.module.ModulesRegistry, com.sun.enterprise.module.ModuleDefinition, java.lang.ClassLoader)</name>
                <outbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ProxyModule.classLoader</outbound>
                <outbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ProxyModule.moduleDef</outbound>
                <outbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ProxyModule.modulesRegistry</outbound>
                <outbound type="class" confirmed="no">com.sun.enterprise.module.ModuleDefinition</outbound>
                <outbound type="class" confirmed="no">com.sun.enterprise.module.ModulesRegistry</outbound>
                <outbound type="class" confirmed="no">java.lang.ClassLoader</outbound>
                <outbound type="feature" confirmed="no">java.lang.Object.Object()</outbound>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainStatic.start(java.lang.String[])</inbound>
            </feature>
            <feature confirmed="yes">
                <name>com.sun.enterprise.glassfish.bootstrap.ProxyModule.addImport(com.sun.enterprise.module.Module)</name>
                <outbound type="class" confirmed="no">com.sun.enterprise.module.Module</outbound>
            </feature>
            <feature confirmed="yes">
                <name>com.sun.enterprise.glassfish.bootstrap.ProxyModule.addImport(com.sun.enterprise.module.ModuleDependency)</name>
                <outbound type="class" confirmed="no">com.sun.enterprise.module.Module</outbound>
                <outbound type="class" confirmed="no">com.sun.enterprise.module.ModuleDependency</outbound>
            </feature>
            <feature confirmed="yes">
                <name>com.sun.enterprise.glassfish.bootstrap.ProxyModule.addListener(com.sun.enterprise.module.ModuleChangeListener)</name>
                <outbound type="class" confirmed="no">com.sun.enterprise.module.ModuleChangeListener</outbound>
            </feature>
            <feature confirmed="yes">
                <name>com.sun.enterprise.glassfish.bootstrap.ProxyModule.classLoader</name>
                <outbound type="class" confirmed="no">java.lang.ClassLoader</outbound>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ProxyModule.ProxyModule(com.sun.enterprise.module.ModulesRegistry, com.sun.enterprise.module.ModuleDefinition, java.lang.ClassLoader)</inbound>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ProxyModule.getClassLoader()</inbound>
            </feature>
            <feature confirmed="yes">
                <name>com.sun.enterprise.glassfish.bootstrap.ProxyModule.detach()</name>
            </feature>
            <feature confirmed="yes">
                <name>com.sun.enterprise.glassfish.bootstrap.ProxyModule.dumpState(java.io.PrintStream)</name>
                <outbound type="class" confirmed="no">java.io.PrintStream</outbound>
            </feature>
            <feature confirmed="yes">
                <name>com.sun.enterprise.glassfish.bootstrap.ProxyModule.getClassLoader()</name>
                <outbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ProxyModule.classLoader</outbound>
                <outbound type="class" confirmed="no">java.lang.ClassLoader</outbound>
            </feature>
            <feature confirmed="yes">
                <name>com.sun.enterprise.glassfish.bootstrap.ProxyModule.getImports()</name>
                <outbound type="class" confirmed="no">java.util.List</outbound>
            </feature>
            <feature confirmed="yes">
                <name>com.sun.enterprise.glassfish.bootstrap.ProxyModule.getMetadata()</name>
                <outbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ProxyModule.moduleDef</outbound>
                <outbound type="class" confirmed="no">com.sun.enterprise.module.ModuleDefinition</outbound>
                <outbound type="feature" confirmed="no">com.sun.enterprise.module.ModuleDefinition.getMetadata()</outbound>
                <outbound type="class" confirmed="no">com.sun.enterprise.module.ModuleMetadata</outbound>
            </feature>
            <feature confirmed="yes">
                <name>com.sun.enterprise.glassfish.bootstrap.ProxyModule.getModuleDefinition()</name>
                <outbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ProxyModule.moduleDef</outbound>
                <outbound type="class" confirmed="no">com.sun.enterprise.module.ModuleDefinition</outbound>
            </feature>
            <feature confirmed="yes">
                <name>com.sun.enterprise.glassfish.bootstrap.ProxyModule.getName()</name>
                <outbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ProxyModule.moduleDef</outbound>
                <outbound type="class" confirmed="no">com.sun.enterprise.module.ModuleDefinition</outbound>
                <outbound type="feature" confirmed="no">com.sun.enterprise.module.ModuleDefinition.getName()</outbound>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
            </feature>
            <feature confirmed="yes">
                <name>com.sun.enterprise.glassfish.bootstrap.ProxyModule.getProvidersClass(java.lang.Class)</name>
                <outbound type="class" confirmed="no">java.lang.Class</outbound>
                <outbound type="class" confirmed="no">java.lang.Iterable</outbound>
            </feature>
            <feature confirmed="yes">
                <name>com.sun.enterprise.glassfish.bootstrap.ProxyModule.getProvidersClass(java.lang.String)</name>
                <outbound type="class" confirmed="no">java.lang.Iterable</outbound>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
            </feature>
            <feature confirmed="yes">
                <name>com.sun.enterprise.glassfish.bootstrap.ProxyModule.getRegistry()</name>
                <outbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ProxyModule.modulesRegistry</outbound>
                <outbound type="class" confirmed="no">com.sun.enterprise.module.ModulesRegistry</outbound>
            </feature>
            <feature confirmed="yes">
                <name>com.sun.enterprise.glassfish.bootstrap.ProxyModule.getState()</name>
                <outbound type="class" confirmed="no">com.sun.enterprise.module.ModuleState</outbound>
                <outbound type="feature" confirmed="no">com.sun.enterprise.module.ModuleState.READY</outbound>
            </feature>
            <feature confirmed="yes">
                <name>com.sun.enterprise.glassfish.bootstrap.ProxyModule.hasProvider(java.lang.Class)</name>
                <outbound type="class" confirmed="no">java.lang.Class</outbound>
            </feature>
            <feature confirmed="yes">
                <name>com.sun.enterprise.glassfish.bootstrap.ProxyModule.isShared()</name>
            </feature>
            <feature confirmed="yes">
                <name>com.sun.enterprise.glassfish.bootstrap.ProxyModule.isSticky()</name>
            </feature>
            <feature confirmed="yes">
                <name>com.sun.enterprise.glassfish.bootstrap.ProxyModule.moduleDef</name>
                <outbound type="class" confirmed="no">com.sun.enterprise.module.ModuleDefinition</outbound>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ProxyModule.ProxyModule(com.sun.enterprise.module.ModulesRegistry, com.sun.enterprise.module.ModuleDefinition, java.lang.ClassLoader)</inbound>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ProxyModule.getMetadata()</inbound>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ProxyModule.getModuleDefinition()</inbound>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ProxyModule.getName()</inbound>
            </feature>
            <feature confirmed="yes">
                <name>com.sun.enterprise.glassfish.bootstrap.ProxyModule.modulesRegistry</name>
                <outbound type="class" confirmed="no">com.sun.enterprise.module.ModulesRegistry</outbound>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ProxyModule.ProxyModule(com.sun.enterprise.module.ModulesRegistry, com.sun.enterprise.module.ModuleDefinition, java.lang.ClassLoader)</inbound>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ProxyModule.getRegistry()</inbound>
            </feature>
            <feature confirmed="yes">
                <name>com.sun.enterprise.glassfish.bootstrap.ProxyModule.refresh()</name>
            </feature>
            <feature confirmed="yes">
                <name>com.sun.enterprise.glassfish.bootstrap.ProxyModule.removeListener(com.sun.enterprise.module.ModuleChangeListener)</name>
                <outbound type="class" confirmed="no">com.sun.enterprise.module.ModuleChangeListener</outbound>
            </feature>
            <feature confirmed="yes">
                <name>com.sun.enterprise.glassfish.bootstrap.ProxyModule.resolve()</name>
                <outbound type="class" confirmed="no">com.sun.enterprise.module.ResolveError</outbound>
            </feature>
            <feature confirmed="yes">
                <name>com.sun.enterprise.glassfish.bootstrap.ProxyModule.setSticky(boolean)</name>
            </feature>
            <feature confirmed="yes">
                <name>com.sun.enterprise.glassfish.bootstrap.ProxyModule.start()</name>
                <outbound type="class" confirmed="no">com.sun.enterprise.module.ResolveError</outbound>
            </feature>
            <feature confirmed="yes">
                <name>com.sun.enterprise.glassfish.bootstrap.ProxyModule.stop()</name>
            </feature>
            <feature confirmed="yes">
                <name>com.sun.enterprise.glassfish.bootstrap.ProxyModule.uninstall()</name>
            </feature>
        </class>
        <class confirmed="yes">
            <name>com.sun.enterprise.glassfish.bootstrap.ProxyModuleDefinition</name>
            <outbound type="class" confirmed="no">com.sun.enterprise.module.ModuleDefinition</outbound>
            <outbound type="class" confirmed="no">java.lang.Object</outbound>
            <feature confirmed="yes">
                <name>com.sun.enterprise.glassfish.bootstrap.ProxyModuleDefinition.EMPTY_MODULE_DEFINITIONS_ARRAY</name>
                <outbound type="class" confirmed="no">com.sun.enterprise.module.ModuleDependency</outbound>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ProxyModuleDefinition.getDependencies()</inbound>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ProxyModuleDefinition.static {}</inbound>
            </feature>
            <feature confirmed="yes">
                <name>com.sun.enterprise.glassfish.bootstrap.ProxyModuleDefinition.EMPTY_STRING_ARRAY</name>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ProxyModuleDefinition.static {}</inbound>
            </feature>
            <feature confirmed="yes">
                <name>com.sun.enterprise.glassfish.bootstrap.ProxyModuleDefinition.EMPTY_URI_ARRAY</name>
                <outbound type="class" confirmed="no">java.net.URI</outbound>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ProxyModuleDefinition.getLocations()</inbound>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ProxyModuleDefinition.static {}</inbound>
            </feature>
            <feature confirmed="yes">
                <name>com.sun.enterprise.glassfish.bootstrap.ProxyModuleDefinition.ProxyModuleDefinition(java.lang.ClassLoader)</name>
                <outbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ProxyModuleDefinition.ProxyModuleDefinition(java.lang.ClassLoader, java.util.Collection)</outbound>
                <outbound type="class" confirmed="no">java.io.IOException</outbound>
                <outbound type="class" confirmed="no">java.lang.ClassLoader</outbound>
                <outbound type="class" confirmed="no">java.lang.Object</outbound>
                <outbound type="class" confirmed="no">java.util.Collection</outbound>
                <outbound type="feature" confirmed="no">java.util.Collections.singleton(java.lang.Object)</outbound>
                <outbound type="class" confirmed="no">java.util.Set</outbound>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainStatic.start(java.lang.String[])</inbound>
            </feature>
            <feature confirmed="yes">
                <name>com.sun.enterprise.glassfish.bootstrap.ProxyModuleDefinition.ProxyModuleDefinition(java.lang.ClassLoader, java.util.Collection)</name>
                <outbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ProxyModuleDefinition.manifest</outbound>
                <outbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ProxyModuleDefinition.metadata</outbound>
                <outbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ProxyModuleDefinition.readFully(java.net.URL)</outbound>
                <outbound type="class" confirmed="no">com.sun.enterprise.module.ModuleMetadata</outbound>
                <outbound type="class" confirmed="no">com.sun.enterprise.module.ModuleMetadata$InhabitantsDescriptor</outbound>
                <outbound type="feature" confirmed="no">com.sun.enterprise.module.ModuleMetadata$InhabitantsDescriptor.ModuleMetadata$InhabitantsDescriptor(java.net.URL, byte[])</outbound>
                <outbound type="feature" confirmed="no">com.sun.enterprise.module.ModuleMetadata.ModuleMetadata()</outbound>
                <outbound type="feature" confirmed="no">com.sun.enterprise.module.ModuleMetadata.addHabitat(java.lang.String, com.sun.enterprise.module.ModuleMetadata$InhabitantsDescriptor)</outbound>
                <outbound type="class" confirmed="no">java.io.IOException</outbound>
                <outbound type="class" confirmed="no">java.lang.ClassLoader</outbound>
                <outbound type="feature" confirmed="no">java.lang.ClassLoader.getResources(java.lang.String)</outbound>
                <outbound type="class" confirmed="no">java.lang.Object</outbound>
                <outbound type="feature" confirmed="no">java.lang.Object.Object()</outbound>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="class" confirmed="no">java.lang.StringBuilder</outbound>
                <outbound type="feature" confirmed="no">java.lang.StringBuilder.StringBuilder()</outbound>
                <outbound type="feature" confirmed="no">java.lang.StringBuilder.append(java.lang.String)</outbound>
                <outbound type="feature" confirmed="no">java.lang.StringBuilder.toString()</outbound>
                <outbound type="class" confirmed="no">java.net.URL</outbound>
                <outbound type="class" confirmed="no">java.util.Collection</outbound>
                <outbound type="feature" confirmed="no">java.util.Collection.iterator()</outbound>
                <outbound type="class" confirmed="no">java.util.Enumeration</outbound>
                <outbound type="feature" confirmed="no">java.util.Enumeration.hasMoreElements()</outbound>
                <outbound type="feature" confirmed="no">java.util.Enumeration.nextElement()</outbound>
                <outbound type="class" confirmed="no">java.util.Iterator</outbound>
                <outbound type="feature" confirmed="no">java.util.Iterator.hasNext()</outbound>
                <outbound type="feature" confirmed="no">java.util.Iterator.next()</outbound>
                <outbound type="class" confirmed="no">java.util.jar.Manifest</outbound>
                <outbound type="feature" confirmed="no">java.util.jar.Manifest.Manifest()</outbound>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ProxyModuleDefinition.ProxyModuleDefinition(java.lang.ClassLoader)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>com.sun.enterprise.glassfish.bootstrap.ProxyModuleDefinition.getDependencies()</name>
                <outbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ProxyModuleDefinition.EMPTY_MODULE_DEFINITIONS_ARRAY</outbound>
                <outbound type="class" confirmed="no">com.sun.enterprise.module.ModuleDependency</outbound>
            </feature>
            <feature confirmed="yes">
                <name>com.sun.enterprise.glassfish.bootstrap.ProxyModuleDefinition.getImportPolicyClassName()</name>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
            </feature>
            <feature confirmed="yes">
                <name>com.sun.enterprise.glassfish.bootstrap.ProxyModuleDefinition.getLifecyclePolicyClassName()</name>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
            </feature>
            <feature confirmed="yes">
                <name>com.sun.enterprise.glassfish.bootstrap.ProxyModuleDefinition.getLocations()</name>
                <outbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ProxyModuleDefinition.EMPTY_URI_ARRAY</outbound>
                <outbound type="class" confirmed="no">java.net.URI</outbound>
            </feature>
            <feature confirmed="yes">
                <name>com.sun.enterprise.glassfish.bootstrap.ProxyModuleDefinition.getManifest()</name>
                <outbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ProxyModuleDefinition.manifest</outbound>
                <outbound type="class" confirmed="no">java.util.jar.Manifest</outbound>
            </feature>
            <feature confirmed="yes">
                <name>com.sun.enterprise.glassfish.bootstrap.ProxyModuleDefinition.getMetadata()</name>
                <outbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ProxyModuleDefinition.metadata</outbound>
                <outbound type="class" confirmed="no">com.sun.enterprise.module.ModuleMetadata</outbound>
            </feature>
            <feature confirmed="yes">
                <name>com.sun.enterprise.glassfish.bootstrap.ProxyModuleDefinition.getName()</name>
                <outbound type="feature" confirmed="no">java.lang.Object.toString()</outbound>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
            </feature>
            <feature confirmed="yes">
                <name>com.sun.enterprise.glassfish.bootstrap.ProxyModuleDefinition.getPublicInterfaces()</name>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
            </feature>
            <feature confirmed="yes">
                <name>com.sun.enterprise.glassfish.bootstrap.ProxyModuleDefinition.getVersion()</name>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
            </feature>
            <feature confirmed="yes">
                <name>com.sun.enterprise.glassfish.bootstrap.ProxyModuleDefinition.manifest</name>
                <outbound type="class" confirmed="no">java.util.jar.Manifest</outbound>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ProxyModuleDefinition.ProxyModuleDefinition(java.lang.ClassLoader, java.util.Collection)</inbound>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ProxyModuleDefinition.getManifest()</inbound>
            </feature>
            <feature confirmed="yes">
                <name>com.sun.enterprise.glassfish.bootstrap.ProxyModuleDefinition.metadata</name>
                <outbound type="class" confirmed="no">com.sun.enterprise.module.ModuleMetadata</outbound>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ProxyModuleDefinition.ProxyModuleDefinition(java.lang.ClassLoader, java.util.Collection)</inbound>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ProxyModuleDefinition.getMetadata()</inbound>
            </feature>
            <feature confirmed="yes">
                <name>com.sun.enterprise.glassfish.bootstrap.ProxyModuleDefinition.readFully(java.net.URL)</name>
                <outbound type="feature" confirmed="no">java.io.ByteArrayOutputStream.ByteArrayOutputStream()</outbound>
                <outbound type="feature" confirmed="no">java.io.ByteArrayOutputStream.toByteArray()</outbound>
                <outbound type="feature" confirmed="no">java.io.ByteArrayOutputStream.write(byte[], int, int)</outbound>
                <outbound type="feature" confirmed="no">java.io.DataInputStream.DataInputStream(java.io.InputStream)</outbound>
                <outbound type="feature" confirmed="no">java.io.DataInputStream.readFully(byte[])</outbound>
                <outbound type="class" confirmed="no">java.io.IOException</outbound>
                <outbound type="feature" confirmed="no">java.io.IOException.IOException(java.lang.String)</outbound>
                <outbound type="feature" confirmed="no">java.io.IOException.initCause(java.lang.Throwable)</outbound>
                <outbound type="class" confirmed="no">java.io.InputStream</outbound>
                <outbound type="feature" confirmed="no">java.io.InputStream.close()</outbound>
                <outbound type="feature" confirmed="no">java.io.InputStream.read(byte[])</outbound>
                <outbound type="class" confirmed="no">java.lang.Object</outbound>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="class" confirmed="no">java.lang.StringBuilder</outbound>
                <outbound type="feature" confirmed="no">java.lang.StringBuilder.StringBuilder()</outbound>
                <outbound type="feature" confirmed="no">java.lang.StringBuilder.append(java.lang.Object)</outbound>
                <outbound type="feature" confirmed="no">java.lang.StringBuilder.append(java.lang.String)</outbound>
                <outbound type="feature" confirmed="no">java.lang.StringBuilder.toString()</outbound>
                <outbound type="class" confirmed="no">java.lang.Throwable</outbound>
                <outbound type="class" confirmed="no">java.net.URL</outbound>
                <outbound type="feature" confirmed="no">java.net.URL.openConnection()</outbound>
                <outbound type="class" confirmed="no">java.net.URLConnection</outbound>
                <outbound type="feature" confirmed="no">java.net.URLConnection.getContentLength()</outbound>
                <outbound type="feature" confirmed="no">java.net.URLConnection.getInputStream()</outbound>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ProxyModuleDefinition.ProxyModuleDefinition(java.lang.ClassLoader, java.util.Collection)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>com.sun.enterprise.glassfish.bootstrap.ProxyModuleDefinition.static {}</name>
                <outbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ProxyModuleDefinition.EMPTY_MODULE_DEFINITIONS_ARRAY</outbound>
                <outbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ProxyModuleDefinition.EMPTY_STRING_ARRAY</outbound>
                <outbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ProxyModuleDefinition.EMPTY_URI_ARRAY</outbound>
                <outbound type="class" confirmed="no">com.sun.enterprise.module.ModuleDependency</outbound>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="class" confirmed="no">java.net.URI</outbound>
            </feature>
        </class>
        <class confirmed="yes">
            <name>com.sun.enterprise.glassfish.bootstrap.Rejar</name>
            <outbound type="class" confirmed="no">java.lang.Object</outbound>
            <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.Rejar$1.Rejar$1(com.sun.enterprise.glassfish.bootstrap.Rejar)</inbound>
            <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.Rejar$1.this$0</inbound>
            <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.Rejar$2.Rejar$2(com.sun.enterprise.glassfish.bootstrap.Rejar)</inbound>
            <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.Rejar$2.this$0</inbound>
            <feature confirmed="yes">
                <name>com.sun.enterprise.glassfish.bootstrap.Rejar.Rejar()</name>
                <outbound type="feature" confirmed="no">java.lang.Object.Object()</outbound>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainStatic.createCache(java.io.File)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>com.sun.enterprise.glassfish.bootstrap.Rejar.copy(byte[], java.lang.String, java.util.jar.JarOutputStream)</name>
                <outbound type="class" confirmed="no">java.io.IOException</outbound>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="feature" confirmed="no">java.util.jar.JarEntry.JarEntry(java.lang.String)</outbound>
                <outbound type="class" confirmed="no">java.util.jar.JarOutputStream</outbound>
                <outbound type="feature" confirmed="no">java.util.jar.JarOutputStream.closeEntry()</outbound>
                <outbound type="feature" confirmed="no">java.util.jar.JarOutputStream.putNextEntry(java.util.zip.ZipEntry)</outbound>
                <outbound type="feature" confirmed="no">java.util.jar.JarOutputStream.write(byte[])</outbound>
                <outbound type="class" confirmed="no">java.util.zip.ZipEntry</outbound>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.Rejar.rejar(java.io.File, java.io.File)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>com.sun.enterprise.glassfish.bootstrap.Rejar.copy(java.util.jar.JarFile, java.util.jar.JarEntry, java.io.OutputStream)</name>
                <outbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.Rejar.copy(java.util.jar.JarFile, java.util.jar.JarEntry, java.nio.channels.WritableByteChannel)</outbound>
                <outbound type="class" confirmed="no">java.io.IOException</outbound>
                <outbound type="class" confirmed="no">java.io.OutputStream</outbound>
                <outbound type="feature" confirmed="no">java.nio.channels.Channels.newChannel(java.io.OutputStream)</outbound>
                <outbound type="class" confirmed="no">java.nio.channels.WritableByteChannel</outbound>
                <outbound type="class" confirmed="no">java.util.jar.JarEntry</outbound>
                <outbound type="class" confirmed="no">java.util.jar.JarFile</outbound>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.Rejar.copy(java.util.jar.JarFile, java.util.jar.JarEntry, java.util.jar.JarOutputStream)</inbound>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.Rejar.processDirectory(java.util.jar.JarOutputStream, java.io.File, java.util.Set, java.util.Map)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>com.sun.enterprise.glassfish.bootstrap.Rejar.copy(java.util.jar.JarFile, java.util.jar.JarEntry, java.nio.channels.WritableByteChannel)</name>
                <outbound type="class" confirmed="no">java.io.IOException</outbound>
                <outbound type="class" confirmed="no">java.io.InputStream</outbound>
                <outbound type="feature" confirmed="no">java.io.InputStream.close()</outbound>
                <outbound type="class" confirmed="no">java.lang.Long</outbound>
                <outbound type="feature" confirmed="no">java.lang.Long.intValue()</outbound>
                <outbound type="feature" confirmed="no">java.lang.Long.valueOf(long)</outbound>
                <outbound type="class" confirmed="no">java.nio.Buffer</outbound>
                <outbound type="class" confirmed="no">java.nio.ByteBuffer</outbound>
                <outbound type="feature" confirmed="no">java.nio.ByteBuffer.allocate(int)</outbound>
                <outbound type="feature" confirmed="no">java.nio.ByteBuffer.rewind()</outbound>
                <outbound type="feature" confirmed="no">java.nio.channels.Channels.newChannel(java.io.InputStream)</outbound>
                <outbound type="class" confirmed="no">java.nio.channels.ReadableByteChannel</outbound>
                <outbound type="feature" confirmed="no">java.nio.channels.ReadableByteChannel.read(java.nio.ByteBuffer)</outbound>
                <outbound type="class" confirmed="no">java.nio.channels.WritableByteChannel</outbound>
                <outbound type="feature" confirmed="no">java.nio.channels.WritableByteChannel.write(java.nio.ByteBuffer)</outbound>
                <outbound type="class" confirmed="no">java.util.jar.JarEntry</outbound>
                <outbound type="feature" confirmed="no">java.util.jar.JarEntry.getSize()</outbound>
                <outbound type="class" confirmed="no">java.util.jar.JarFile</outbound>
                <outbound type="feature" confirmed="no">java.util.jar.JarFile.getInputStream(java.util.zip.ZipEntry)</outbound>
                <outbound type="class" confirmed="no">java.util.zip.ZipEntry</outbound>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.Rejar.copy(java.util.jar.JarFile, java.util.jar.JarEntry, java.io.OutputStream)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>com.sun.enterprise.glassfish.bootstrap.Rejar.copy(java.util.jar.JarFile, java.util.jar.JarEntry, java.util.jar.JarOutputStream)</name>
                <outbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.Rejar.copy(java.util.jar.JarFile, java.util.jar.JarEntry, java.io.OutputStream)</outbound>
                <outbound type="class" confirmed="no">java.io.IOException</outbound>
                <outbound type="class" confirmed="no">java.io.OutputStream</outbound>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="class" confirmed="no">java.util.jar.JarEntry</outbound>
                <outbound type="feature" confirmed="no">java.util.jar.JarEntry.JarEntry(java.lang.String)</outbound>
                <outbound type="feature" confirmed="no">java.util.jar.JarEntry.getName()</outbound>
                <outbound type="class" confirmed="no">java.util.jar.JarFile</outbound>
                <outbound type="class" confirmed="no">java.util.jar.JarOutputStream</outbound>
                <outbound type="feature" confirmed="no">java.util.jar.JarOutputStream.closeEntry()</outbound>
                <outbound type="feature" confirmed="no">java.util.jar.JarOutputStream.flush()</outbound>
                <outbound type="feature" confirmed="no">java.util.jar.JarOutputStream.putNextEntry(java.util.zip.ZipEntry)</outbound>
                <outbound type="class" confirmed="no">java.util.zip.ZipEntry</outbound>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.Rejar.processDirectory(java.util.jar.JarOutputStream, java.io.File, java.util.Set, java.util.Map)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>com.sun.enterprise.glassfish.bootstrap.Rejar.getManifest()</name>
                <outbound type="class" confirmed="no">java.io.IOException</outbound>
                <outbound type="class" confirmed="no">java.lang.Object</outbound>
                <outbound type="class" confirmed="no">java.util.jar.Attributes</outbound>
                <outbound type="class" confirmed="no">java.util.jar.Attributes$Name</outbound>
                <outbound type="feature" confirmed="no">java.util.jar.Attributes$Name.MAIN_CLASS</outbound>
                <outbound type="feature" confirmed="no">java.util.jar.Attributes$Name.MANIFEST_VERSION</outbound>
                <outbound type="feature" confirmed="no">java.util.jar.Attributes.put(java.lang.Object, java.lang.Object)</outbound>
                <outbound type="class" confirmed="no">java.util.jar.Manifest</outbound>
                <outbound type="feature" confirmed="no">java.util.jar.Manifest.Manifest()</outbound>
                <outbound type="feature" confirmed="no">java.util.jar.Manifest.getMainAttributes()</outbound>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.Rejar.rejar(java.io.File, java.io.File)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>com.sun.enterprise.glassfish.bootstrap.Rejar.processDirectory(java.util.jar.JarOutputStream, java.io.File, java.util.Set, java.util.Map)</name>
                <outbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.Rejar$2.Rejar$2(com.sun.enterprise.glassfish.bootstrap.Rejar)</outbound>
                <outbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.Rejar.copy(java.util.jar.JarFile, java.util.jar.JarEntry, java.io.OutputStream)</outbound>
                <outbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.Rejar.copy(java.util.jar.JarFile, java.util.jar.JarEntry, java.util.jar.JarOutputStream)</outbound>
                <outbound type="class" confirmed="no">java.io.ByteArrayOutputStream</outbound>
                <outbound type="feature" confirmed="no">java.io.ByteArrayOutputStream.ByteArrayOutputStream()</outbound>
                <outbound type="feature" confirmed="no">java.io.ByteArrayOutputStream.write(byte[])</outbound>
                <outbound type="class" confirmed="no">java.io.File</outbound>
                <outbound type="feature" confirmed="no">java.io.File.getName()</outbound>
                <outbound type="feature" confirmed="no">java.io.File.listFiles(java.io.FileFilter)</outbound>
                <outbound type="class" confirmed="no">java.io.FileFilter</outbound>
                <outbound type="class" confirmed="no">java.io.IOException</outbound>
                <outbound type="class" confirmed="no">java.io.OutputStream</outbound>
                <outbound type="class" confirmed="no">java.lang.Object</outbound>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="feature" confirmed="no">java.lang.String.endsWith(java.lang.String)</outbound>
                <outbound type="feature" confirmed="no">java.lang.String.getBytes()</outbound>
                <outbound type="feature" confirmed="no">java.lang.String.startsWith(java.lang.String)</outbound>
                <outbound type="class" confirmed="no">java.lang.StringBuilder</outbound>
                <outbound type="feature" confirmed="no">java.lang.StringBuilder.StringBuilder()</outbound>
                <outbound type="feature" confirmed="no">java.lang.StringBuilder.append(java.lang.String)</outbound>
                <outbound type="feature" confirmed="no">java.lang.StringBuilder.toString()</outbound>
                <outbound type="class" confirmed="no">java.lang.Throwable</outbound>
                <outbound type="class" confirmed="no">java.util.Enumeration</outbound>
                <outbound type="feature" confirmed="no">java.util.Enumeration.hasMoreElements()</outbound>
                <outbound type="feature" confirmed="no">java.util.Enumeration.nextElement()</outbound>
                <outbound type="class" confirmed="no">java.util.Map</outbound>
                <outbound type="feature" confirmed="no">java.util.Map.get(java.lang.Object)</outbound>
                <outbound type="feature" confirmed="no">java.util.Map.put(java.lang.Object, java.lang.Object)</outbound>
                <outbound type="class" confirmed="no">java.util.Set</outbound>
                <outbound type="feature" confirmed="no">java.util.Set.add(java.lang.Object)</outbound>
                <outbound type="feature" confirmed="no">java.util.Set.contains(java.lang.Object)</outbound>
                <outbound type="class" confirmed="no">java.util.jar.JarEntry</outbound>
                <outbound type="feature" confirmed="no">java.util.jar.JarEntry.getName()</outbound>
                <outbound type="feature" confirmed="no">java.util.jar.JarEntry.isDirectory()</outbound>
                <outbound type="class" confirmed="no">java.util.jar.JarFile</outbound>
                <outbound type="feature" confirmed="no">java.util.jar.JarFile.JarFile(java.io.File)</outbound>
                <outbound type="feature" confirmed="no">java.util.jar.JarFile.close()</outbound>
                <outbound type="feature" confirmed="no">java.util.jar.JarFile.entries()</outbound>
                <outbound type="class" confirmed="no">java.util.jar.JarOutputStream</outbound>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.Rejar.rejar(java.io.File, java.io.File)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>com.sun.enterprise.glassfish.bootstrap.Rejar.rejar(java.io.File, java.io.File)</name>
                <outbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.Rejar$1.Rejar$1(com.sun.enterprise.glassfish.bootstrap.Rejar)</outbound>
                <outbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.Rejar.copy(byte[], java.lang.String, java.util.jar.JarOutputStream)</outbound>
                <outbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.Rejar.getManifest()</outbound>
                <outbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.Rejar.processDirectory(java.util.jar.JarOutputStream, java.io.File, java.util.Set, java.util.Map)</outbound>
                <outbound type="class" confirmed="no">java.io.ByteArrayOutputStream</outbound>
                <outbound type="feature" confirmed="no">java.io.ByteArrayOutputStream.toByteArray()</outbound>
                <outbound type="class" confirmed="no">java.io.File</outbound>
                <outbound type="feature" confirmed="no">java.io.File.listFiles(java.io.FileFilter)</outbound>
                <outbound type="class" confirmed="no">java.io.FileFilter</outbound>
                <outbound type="feature" confirmed="no">java.io.FileOutputStream.FileOutputStream(java.io.File)</outbound>
                <outbound type="class" confirmed="no">java.io.IOException</outbound>
                <outbound type="class" confirmed="no">java.io.OutputStream</outbound>
                <outbound type="class" confirmed="no">java.lang.Object</outbound>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="feature" confirmed="no">java.util.HashMap.HashMap()</outbound>
                <outbound type="feature" confirmed="no">java.util.HashSet.HashSet()</outbound>
                <outbound type="class" confirmed="no">java.util.Iterator</outbound>
                <outbound type="feature" confirmed="no">java.util.Iterator.hasNext()</outbound>
                <outbound type="feature" confirmed="no">java.util.Iterator.next()</outbound>
                <outbound type="class" confirmed="no">java.util.Map</outbound>
                <outbound type="class" confirmed="no">java.util.Map$Entry</outbound>
                <outbound type="feature" confirmed="no">java.util.Map$Entry.getKey()</outbound>
                <outbound type="feature" confirmed="no">java.util.Map$Entry.getValue()</outbound>
                <outbound type="feature" confirmed="no">java.util.Map.entrySet()</outbound>
                <outbound type="class" confirmed="no">java.util.Set</outbound>
                <outbound type="feature" confirmed="no">java.util.Set.add(java.lang.Object)</outbound>
                <outbound type="feature" confirmed="no">java.util.Set.iterator()</outbound>
                <outbound type="class" confirmed="no">java.util.jar.Attributes$Name</outbound>
                <outbound type="feature" confirmed="no">java.util.jar.Attributes$Name.MAIN_CLASS</outbound>
                <outbound type="feature" confirmed="no">java.util.jar.Attributes$Name.toString()</outbound>
                <outbound type="class" confirmed="no">java.util.jar.JarOutputStream</outbound>
                <outbound type="feature" confirmed="no">java.util.jar.JarOutputStream.JarOutputStream(java.io.OutputStream, java.util.jar.Manifest)</outbound>
                <outbound type="feature" confirmed="no">java.util.jar.JarOutputStream.close()</outbound>
                <outbound type="feature" confirmed="no">java.util.jar.JarOutputStream.flush()</outbound>
                <outbound type="class" confirmed="no">java.util.jar.Manifest</outbound>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainStatic.createCache(java.io.File)</inbound>
            </feature>
        </class>
        <class confirmed="yes">
            <name>com.sun.enterprise.glassfish.bootstrap.Rejar$1</name>
            <outbound type="class" confirmed="no">java.io.FileFilter</outbound>
            <outbound type="class" confirmed="no">java.lang.Object</outbound>
            <feature confirmed="yes">
                <name>com.sun.enterprise.glassfish.bootstrap.Rejar$1.Rejar$1(com.sun.enterprise.glassfish.bootstrap.Rejar)</name>
                <outbound type="class" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.Rejar</outbound>
                <outbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.Rejar$1.this$0</outbound>
                <outbound type="feature" confirmed="no">java.lang.Object.Object()</outbound>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.Rejar.rejar(java.io.File, java.io.File)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>com.sun.enterprise.glassfish.bootstrap.Rejar$1.accept(java.io.File)</name>
                <outbound type="class" confirmed="no">java.io.File</outbound>
                <outbound type="feature" confirmed="no">java.io.File.isDirectory()</outbound>
            </feature>
            <feature confirmed="yes">
                <name>com.sun.enterprise.glassfish.bootstrap.Rejar$1.this$0</name>
                <outbound type="class" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.Rejar</outbound>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.Rejar$1.Rejar$1(com.sun.enterprise.glassfish.bootstrap.Rejar)</inbound>
            </feature>
        </class>
        <class confirmed="yes">
            <name>com.sun.enterprise.glassfish.bootstrap.Rejar$2</name>
            <outbound type="class" confirmed="no">java.io.FileFilter</outbound>
            <outbound type="class" confirmed="no">java.lang.Object</outbound>
            <feature confirmed="yes">
                <name>com.sun.enterprise.glassfish.bootstrap.Rejar$2.Rejar$2(com.sun.enterprise.glassfish.bootstrap.Rejar)</name>
                <outbound type="class" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.Rejar</outbound>
                <outbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.Rejar$2.this$0</outbound>
                <outbound type="feature" confirmed="no">java.lang.Object.Object()</outbound>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.Rejar.processDirectory(java.util.jar.JarOutputStream, java.io.File, java.util.Set, java.util.Map)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>com.sun.enterprise.glassfish.bootstrap.Rejar$2.accept(java.io.File)</name>
                <outbound type="class" confirmed="no">java.io.File</outbound>
                <outbound type="feature" confirmed="no">java.io.File.getName()</outbound>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="feature" confirmed="no">java.lang.String.endsWith(java.lang.String)</outbound>
            </feature>
            <feature confirmed="yes">
                <name>com.sun.enterprise.glassfish.bootstrap.Rejar$2.this$0</name>
                <outbound type="class" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.Rejar</outbound>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.Rejar$2.Rejar$2(com.sun.enterprise.glassfish.bootstrap.Rejar)</inbound>
            </feature>
        </class>
    </package>
    <package confirmed="no">
        <name>com.sun.enterprise.module</name>
        <class confirmed="no">
            <name>com.sun.enterprise.module.Module</name>
            <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainStatic$2.ASMainStatic$2(com.sun.enterprise.glassfish.bootstrap.ASMainStatic, com.sun.enterprise.module.common_impl.AbstractModulesRegistryImpl, com.sun.enterprise.module.Module[])</inbound>
            <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainStatic$2.find(java.lang.Class)</inbound>
            <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainStatic$2.getModules()</inbound>
            <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainStatic$2.makeModuleFor(java.lang.String, java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainStatic$2.parseInhabitants(com.sun.enterprise.module.Module, java.lang.String, com.sun.hk2.component.InhabitantsParser)</inbound>
            <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainStatic$2.val$proxyMod</inbound>
            <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainStatic.start(java.lang.String[])</inbound>
            <inbound type="class" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ProxyModule</inbound>
            <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ProxyModule.addImport(com.sun.enterprise.module.Module)</inbound>
            <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ProxyModule.addImport(com.sun.enterprise.module.ModuleDependency)</inbound>
            <feature confirmed="no">
                <name>com.sun.enterprise.module.Module.getMetadata()</name>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainStatic$2.parseInhabitants(com.sun.enterprise.module.Module, java.lang.String, com.sun.hk2.component.InhabitantsParser)</inbound>
            </feature>
        </class>
        <class confirmed="no">
            <name>com.sun.enterprise.module.ModuleChangeListener</name>
            <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ProxyModule.addListener(com.sun.enterprise.module.ModuleChangeListener)</inbound>
            <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ProxyModule.removeListener(com.sun.enterprise.module.ModuleChangeListener)</inbound>
        </class>
        <class confirmed="no">
            <name>com.sun.enterprise.module.ModuleDefinition</name>
            <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainStatic.start(java.lang.String[])</inbound>
            <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ExtensibleClassLoader.moduleAdded(com.sun.enterprise.module.ModuleDefinition)</inbound>
            <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ExtensibleClassLoader.moduleRemoved(com.sun.enterprise.module.ModuleDefinition)</inbound>
            <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.GFRepository.loadJar(java.io.File)</inbound>
            <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ProxyModule.ProxyModule(com.sun.enterprise.module.ModulesRegistry, com.sun.enterprise.module.ModuleDefinition, java.lang.ClassLoader)</inbound>
            <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ProxyModule.getMetadata()</inbound>
            <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ProxyModule.getModuleDefinition()</inbound>
            <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ProxyModule.getName()</inbound>
            <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ProxyModule.moduleDef</inbound>
            <inbound type="class" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ProxyModuleDefinition</inbound>
            <feature confirmed="no">
                <name>com.sun.enterprise.module.ModuleDefinition.getMetadata()</name>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ProxyModule.getMetadata()</inbound>
            </feature>
            <feature confirmed="no">
                <name>com.sun.enterprise.module.ModuleDefinition.getName()</name>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ProxyModule.getName()</inbound>
            </feature>
        </class>
        <class confirmed="no">
            <name>com.sun.enterprise.module.ModuleDependency</name>
            <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ProxyModule.addImport(com.sun.enterprise.module.ModuleDependency)</inbound>
            <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ProxyModuleDefinition.EMPTY_MODULE_DEFINITIONS_ARRAY</inbound>
            <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ProxyModuleDefinition.getDependencies()</inbound>
            <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ProxyModuleDefinition.static {}</inbound>
        </class>
        <class confirmed="no">
            <name>com.sun.enterprise.module.ModuleMetadata</name>
            <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainStatic$2.parseInhabitants(com.sun.enterprise.module.Module, java.lang.String, com.sun.hk2.component.InhabitantsParser)</inbound>
            <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ProxyModule.getMetadata()</inbound>
            <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ProxyModuleDefinition.ProxyModuleDefinition(java.lang.ClassLoader, java.util.Collection)</inbound>
            <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ProxyModuleDefinition.getMetadata()</inbound>
            <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ProxyModuleDefinition.metadata</inbound>
            <feature confirmed="no">
                <name>com.sun.enterprise.module.ModuleMetadata.ModuleMetadata()</name>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ProxyModuleDefinition.ProxyModuleDefinition(java.lang.ClassLoader, java.util.Collection)</inbound>
            </feature>
            <feature confirmed="no">
                <name>com.sun.enterprise.module.ModuleMetadata.addHabitat(java.lang.String, com.sun.enterprise.module.ModuleMetadata$InhabitantsDescriptor)</name>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ProxyModuleDefinition.ProxyModuleDefinition(java.lang.ClassLoader, java.util.Collection)</inbound>
            </feature>
            <feature confirmed="no">
                <name>com.sun.enterprise.module.ModuleMetadata.getHabitats(java.lang.String)</name>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainStatic$2.parseInhabitants(com.sun.enterprise.module.Module, java.lang.String, com.sun.hk2.component.InhabitantsParser)</inbound>
            </feature>
        </class>
        <class confirmed="no">
            <name>com.sun.enterprise.module.ModuleMetadata$InhabitantsDescriptor</name>
            <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainStatic$2.parseInhabitants(com.sun.enterprise.module.Module, java.lang.String, com.sun.hk2.component.InhabitantsParser)</inbound>
            <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ProxyModuleDefinition.ProxyModuleDefinition(java.lang.ClassLoader, java.util.Collection)</inbound>
            <feature confirmed="no">
                <name>com.sun.enterprise.module.ModuleMetadata$InhabitantsDescriptor.ModuleMetadata$InhabitantsDescriptor(java.net.URL, byte[])</name>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ProxyModuleDefinition.ProxyModuleDefinition(java.lang.ClassLoader, java.util.Collection)</inbound>
            </feature>
            <feature confirmed="no">
                <name>com.sun.enterprise.module.ModuleMetadata$InhabitantsDescriptor.createScanner()</name>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainStatic$2.parseInhabitants(com.sun.enterprise.module.Module, java.lang.String, com.sun.hk2.component.InhabitantsParser)</inbound>
            </feature>
        </class>
        <class confirmed="no">
            <name>com.sun.enterprise.module.ModuleState</name>
            <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ProxyModule.getState()</inbound>
            <feature confirmed="no">
                <name>com.sun.enterprise.module.ModuleState.READY</name>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ProxyModule.getState()</inbound>
            </feature>
        </class>
        <class confirmed="no">
            <name>com.sun.enterprise.module.ModulesRegistry</name>
            <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainStatic$3$1.createHabitat(com.sun.enterprise.module.ModulesRegistry, com.sun.enterprise.module.bootstrap.StartupContext)</inbound>
            <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainStatic$3.run()</inbound>
            <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainStatic.start(java.lang.String[])</inbound>
            <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ProxyModule.ProxyModule(com.sun.enterprise.module.ModulesRegistry, com.sun.enterprise.module.ModuleDefinition, java.lang.ClassLoader)</inbound>
            <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ProxyModule.getRegistry()</inbound>
            <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ProxyModule.modulesRegistry</inbound>
            <feature confirmed="no">
                <name>com.sun.enterprise.module.ModulesRegistry.createHabitat(java.lang.String, com.sun.hk2.component.InhabitantsParser)</name>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainStatic$3$1.createHabitat(com.sun.enterprise.module.ModulesRegistry, com.sun.enterprise.module.bootstrap.StartupContext)</inbound>
            </feature>
            <feature confirmed="no">
                <name>com.sun.enterprise.module.ModulesRegistry.newHabitat()</name>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainStatic$3$1.createHabitat(com.sun.enterprise.module.ModulesRegistry, com.sun.enterprise.module.bootstrap.StartupContext)</inbound>
            </feature>
        </class>
        <class confirmed="no">
            <name>com.sun.enterprise.module.Repository</name>
            <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainHelper.getJDKToolsRepo()</inbound>
            <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainHelper.setupSharedCL(java.lang.ClassLoader, java.util.List, java.util.List)</inbound>
            <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ExtensibleClassLoader.ExtensibleClassLoader(java.net.URL[], java.lang.ClassLoader, java.util.List)</inbound>
            <feature confirmed="no">
                <name>com.sun.enterprise.module.Repository.addListener(com.sun.enterprise.module.RepositoryChangeListener)</name>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ExtensibleClassLoader.ExtensibleClassLoader(java.net.URL[], java.lang.ClassLoader, java.util.List)</inbound>
            </feature>
            <feature confirmed="no">
                <name>com.sun.enterprise.module.Repository.getJarLocations()</name>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainHelper.setupSharedCL(java.lang.ClassLoader, java.util.List, java.util.List)</inbound>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ExtensibleClassLoader.ExtensibleClassLoader(java.net.URL[], java.lang.ClassLoader, java.util.List)</inbound>
            </feature>
            <feature confirmed="no">
                <name>com.sun.enterprise.module.Repository.initialize()</name>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainHelper.getJDKToolsRepo()</inbound>
            </feature>
        </class>
        <class confirmed="no">
            <name>com.sun.enterprise.module.RepositoryChangeListener</name>
            <inbound type="class" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ExtensibleClassLoader</inbound>
            <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ExtensibleClassLoader.ExtensibleClassLoader(java.net.URL[], java.lang.ClassLoader, java.util.List)</inbound>
        </class>
        <class confirmed="no">
            <name>com.sun.enterprise.module.ResolveError</name>
            <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainStatic$2.makeModuleFor(java.lang.String, java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ProxyModule.resolve()</inbound>
            <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ProxyModule.start()</inbound>
        </class>
    </package>
    <package confirmed="no">
        <name>com.sun.enterprise.module.bootstrap</name>
        <class confirmed="no">
            <name>com.sun.enterprise.module.bootstrap.ArgumentManager</name>
            <feature confirmed="no">
                <name>com.sun.enterprise.module.bootstrap.ArgumentManager.argsToMap(java.lang.String[])</name>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainOSGi.setStartupContextProperties(java.util.logging.Logger, java.lang.String[])</inbound>
            </feature>
        </class>
        <class confirmed="no">
            <name>com.sun.enterprise.module.bootstrap.BootException</name>
            <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainStatic$3$1.createHabitat(com.sun.enterprise.module.ModulesRegistry, com.sun.enterprise.module.bootstrap.StartupContext)</inbound>
            <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainStatic$3.run()</inbound>
            <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainStatic.start(java.lang.String[])</inbound>
            <feature confirmed="no">
                <name>com.sun.enterprise.module.bootstrap.BootException.BootException(java.lang.String)</name>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainStatic.start(java.lang.String[])</inbound>
            </feature>
            <feature confirmed="no">
                <name>com.sun.enterprise.module.bootstrap.BootException.BootException(java.lang.Throwable)</name>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainStatic.start(java.lang.String[])</inbound>
            </feature>
            <feature confirmed="no">
                <name>com.sun.enterprise.module.bootstrap.BootException.getMessage()</name>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainStatic$3.run()</inbound>
            </feature>
        </class>
        <class confirmed="no">
            <name>com.sun.enterprise.module.bootstrap.Main</name>
            <inbound type="class" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainStatic$3$1</inbound>
            <feature confirmed="no">
                <name>com.sun.enterprise.module.bootstrap.Main.Main()</name>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainStatic$3$1.ASMainStatic$3$1(com.sun.enterprise.glassfish.bootstrap.ASMainStatic$3)</inbound>
            </feature>
            <feature confirmed="no">
                <name>com.sun.enterprise.module.bootstrap.Main.launch(com.sun.enterprise.module.ModulesRegistry, com.sun.enterprise.module.bootstrap.StartupContext)</name>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainStatic$3.run()</inbound>
            </feature>
        </class>
        <class confirmed="no">
            <name>com.sun.enterprise.module.bootstrap.StartupContext</name>
            <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainHelper.getDomainRoot(com.sun.enterprise.module.bootstrap.StartupContext)</inbound>
            <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainOSGi.ASMainOSGi(java.util.logging.Logger, java.lang.String[])</inbound>
            <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainStatic$3$1.createHabitat(com.sun.enterprise.module.ModulesRegistry, com.sun.enterprise.module.bootstrap.StartupContext)</inbound>
            <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainStatic$3.ASMainStatic$3(com.sun.enterprise.glassfish.bootstrap.ASMainStatic, com.sun.enterprise.module.impl.ModulesRegistryImpl, com.sun.enterprise.module.bootstrap.StartupContext)</inbound>
            <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainStatic$3.run()</inbound>
            <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainStatic$3.val$startupContext</inbound>
            <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainStatic.start(java.lang.String[])</inbound>
            <feature confirmed="no">
                <name>com.sun.enterprise.module.bootstrap.StartupContext.StartupContext(java.io.File, java.lang.String[])</name>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainOSGi.ASMainOSGi(java.util.logging.Logger, java.lang.String[])</inbound>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainStatic.start(java.lang.String[])</inbound>
            </feature>
            <feature confirmed="no">
                <name>com.sun.enterprise.module.bootstrap.StartupContext.getArguments()</name>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainHelper.getDomainRoot(com.sun.enterprise.module.bootstrap.StartupContext)</inbound>
            </feature>
        </class>
        <class confirmed="no">
            <name>com.sun.enterprise.module.bootstrap.Which</name>
            <feature confirmed="no">
                <name>com.sun.enterprise.module.bootstrap.Which.jarFile(java.lang.Class)</name>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.AbstractMain.findBootstrapFile()</inbound>
            </feature>
        </class>
    </package>
    <package confirmed="no">
        <name>com.sun.enterprise.module.common_impl</name>
        <class confirmed="no">
            <name>com.sun.enterprise.module.common_impl.AbstractModulesRegistryImpl</name>
            <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainStatic$2.ASMainStatic$2(com.sun.enterprise.glassfish.bootstrap.ASMainStatic, com.sun.enterprise.module.common_impl.AbstractModulesRegistryImpl, com.sun.enterprise.module.Module[])</inbound>
            <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainStatic.start(java.lang.String[])</inbound>
        </class>
        <class confirmed="no">
            <name>com.sun.enterprise.module.common_impl.AbstractRepositoryImpl</name>
            <inbound type="class" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainHelper$PlainJarRepository</inbound>
            <feature confirmed="no">
                <name>com.sun.enterprise.module.common_impl.AbstractRepositoryImpl.AbstractRepositoryImpl(java.lang.String, java.net.URI)</name>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainHelper$PlainJarRepository.ASMainHelper$PlainJarRepository(com.sun.enterprise.glassfish.bootstrap.ASMainHelper, java.lang.String, java.io.File)</inbound>
            </feature>
        </class>
        <class confirmed="no">
            <name>com.sun.enterprise.module.common_impl.DefaultModuleDefinition</name>
            <inbound type="class" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.GFModuleDefinition</inbound>
            <feature confirmed="no">
                <name>com.sun.enterprise.module.common_impl.DefaultModuleDefinition.DefaultModuleDefinition(java.io.File)</name>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.GFModuleDefinition.GFModuleDefinition(java.io.File)</inbound>
            </feature>
        </class>
        <class confirmed="no">
            <name>com.sun.enterprise.module.common_impl.DirectoryBasedRepository</name>
            <inbound type="class" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.GFRepository</inbound>
            <feature confirmed="no">
                <name>com.sun.enterprise.module.common_impl.DirectoryBasedRepository.DirectoryBasedRepository(java.lang.String, java.io.File)</name>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.GFRepository.GFRepository(java.lang.String, java.io.File)</inbound>
            </feature>
        </class>
    </package>
    <package confirmed="no">
        <name>com.sun.enterprise.module.impl</name>
        <class confirmed="no">
            <name>com.sun.enterprise.module.impl.HK2Factory</name>
            <feature confirmed="no">
                <name>com.sun.enterprise.module.impl.HK2Factory.initialize()</name>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainStatic.start(java.lang.String[])</inbound>
            </feature>
        </class>
        <class confirmed="no">
            <name>com.sun.enterprise.module.impl.ModulesRegistryImpl</name>
            <inbound type="class" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainStatic$2</inbound>
            <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainStatic$3.ASMainStatic$3(com.sun.enterprise.glassfish.bootstrap.ASMainStatic, com.sun.enterprise.module.impl.ModulesRegistryImpl, com.sun.enterprise.module.bootstrap.StartupContext)</inbound>
            <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainStatic$3.run()</inbound>
            <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainStatic$3.val$modulesRegistry</inbound>
            <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainStatic.start(java.lang.String[])</inbound>
            <feature confirmed="no">
                <name>com.sun.enterprise.module.impl.ModulesRegistryImpl.ModulesRegistryImpl(com.sun.enterprise.module.common_impl.AbstractModulesRegistryImpl)</name>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainStatic$2.ASMainStatic$2(com.sun.enterprise.glassfish.bootstrap.ASMainStatic, com.sun.enterprise.module.common_impl.AbstractModulesRegistryImpl, com.sun.enterprise.module.Module[])</inbound>
            </feature>
            <feature confirmed="no">
                <name>com.sun.enterprise.module.impl.ModulesRegistryImpl.add(com.sun.enterprise.module.ModuleDefinition)</name>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainStatic.start(java.lang.String[])</inbound>
            </feature>
            <feature confirmed="no">
                <name>com.sun.enterprise.module.impl.ModulesRegistryImpl.find(java.lang.Class)</name>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainStatic$2.find(java.lang.Class)</inbound>
            </feature>
            <feature confirmed="no">
                <name>com.sun.enterprise.module.impl.ModulesRegistryImpl.setParentClassLoader(java.lang.ClassLoader)</name>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainStatic.start(java.lang.String[])</inbound>
            </feature>
        </class>
    </package>
    <package confirmed="no">
        <name>com.sun.hk2.component</name>
        <class confirmed="no">
            <name>com.sun.hk2.component.ExistingSingletonInhabitant</name>
            <feature confirmed="no">
                <name>com.sun.hk2.component.ExistingSingletonInhabitant.ExistingSingletonInhabitant(java.lang.Class, java.lang.Object)</name>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainStatic$3$1.createHabitat(com.sun.enterprise.module.ModulesRegistry, com.sun.enterprise.module.bootstrap.StartupContext)</inbound>
            </feature>
            <feature confirmed="no">
                <name>com.sun.hk2.component.ExistingSingletonInhabitant.ExistingSingletonInhabitant(java.lang.Object)</name>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainStatic$3$1.createHabitat(com.sun.enterprise.module.ModulesRegistry, com.sun.enterprise.module.bootstrap.StartupContext)</inbound>
            </feature>
        </class>
        <class confirmed="no">
            <name>com.sun.hk2.component.Holder</name>
            <inbound type="class" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainStatic$2$1</inbound>
            <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainStatic$2.parseInhabitants(com.sun.enterprise.module.Module, java.lang.String, com.sun.hk2.component.InhabitantsParser)</inbound>
        </class>
        <class confirmed="no">
            <name>com.sun.hk2.component.InhabitantsParser</name>
            <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainStatic$2.parseInhabitants(com.sun.enterprise.module.Module, java.lang.String, com.sun.hk2.component.InhabitantsParser)</inbound>
            <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainStatic$3$1.createHabitat(com.sun.enterprise.module.ModulesRegistry, com.sun.enterprise.module.bootstrap.StartupContext)</inbound>
            <feature confirmed="no">
                <name>com.sun.hk2.component.InhabitantsParser.parse(com.sun.hk2.component.InhabitantsScanner, com.sun.hk2.component.Holder)</name>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainStatic$2.parseInhabitants(com.sun.enterprise.module.Module, java.lang.String, com.sun.hk2.component.InhabitantsParser)</inbound>
            </feature>
        </class>
        <class confirmed="no">
            <name>com.sun.hk2.component.InhabitantsScanner</name>
            <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainStatic$2.parseInhabitants(com.sun.enterprise.module.Module, java.lang.String, com.sun.hk2.component.InhabitantsParser)</inbound>
        </class>
    </package>
    <package confirmed="no">
        <name>java.io</name>
        <class confirmed="no">
            <name>java.io.BufferedInputStream</name>
            <feature confirmed="no">
                <name>java.io.BufferedInputStream.BufferedInputStream(java.io.InputStream)</name>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.AbstractMain.loadCacheInformation(java.io.File)</inbound>
            </feature>
        </class>
        <class confirmed="no">
            <name>java.io.ByteArrayOutputStream</name>
            <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.Rejar.processDirectory(java.util.jar.JarOutputStream, java.io.File, java.util.Set, java.util.Map)</inbound>
            <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.Rejar.rejar(java.io.File, java.io.File)</inbound>
            <feature confirmed="no">
                <name>java.io.ByteArrayOutputStream.ByteArrayOutputStream()</name>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainOSGi.setStartupContextProperties(java.util.logging.Logger, java.lang.String[])</inbound>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ProxyModuleDefinition.readFully(java.net.URL)</inbound>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.Rejar.processDirectory(java.util.jar.JarOutputStream, java.io.File, java.util.Set, java.util.Map)</inbound>
            </feature>
            <feature confirmed="no">
                <name>java.io.ByteArrayOutputStream.toByteArray()</name>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ProxyModuleDefinition.readFully(java.net.URL)</inbound>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.Rejar.rejar(java.io.File, java.io.File)</inbound>
            </feature>
            <feature confirmed="no">
                <name>java.io.ByteArrayOutputStream.toString()</name>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainOSGi.setStartupContextProperties(java.util.logging.Logger, java.lang.String[])</inbound>
            </feature>
            <feature confirmed="no">
                <name>java.io.ByteArrayOutputStream.write(byte[])</name>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.Rejar.processDirectory(java.util.jar.JarOutputStream, java.io.File, java.util.Set, java.util.Map)</inbound>
            </feature>
            <feature confirmed="no">
                <name>java.io.ByteArrayOutputStream.write(byte[], int, int)</name>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ProxyModuleDefinition.readFully(java.net.URL)</inbound>
            </feature>
        </class>
        <class confirmed="no">
            <name>java.io.DataInputStream</name>
            <feature confirmed="no">
                <name>java.io.DataInputStream.DataInputStream(java.io.InputStream)</name>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ProxyModuleDefinition.readFully(java.net.URL)</inbound>
            </feature>
            <feature confirmed="no">
                <name>java.io.DataInputStream.readFully(byte[])</name>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ProxyModuleDefinition.readFully(java.net.URL)</inbound>
            </feature>
        </class>
        <class confirmed="no">
            <name>java.io.File</name>
            <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainEquinox.addFrameworkJars(com.sun.enterprise.glassfish.bootstrap.ClassPathBuilder)</inbound>
            <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainEquinox.launchOSGiFW()</inbound>
            <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainEquinox.pluginsDir</inbound>
            <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainEquinox.setFwDir()</inbound>
            <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainEquinox.static {}</inbound>
            <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainFelix.addFrameworkJars(com.sun.enterprise.glassfish.bootstrap.ClassPathBuilder)</inbound>
            <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainFelix.launchOSGiFW()</inbound>
            <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainFelix.setFwDir()</inbound>
            <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainHelper$1.accept(java.io.File)</inbound>
            <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainHelper$PlainJarRepository.ASMainHelper$PlainJarRepository(com.sun.enterprise.glassfish.bootstrap.ASMainHelper, java.lang.String, java.io.File)</inbound>
            <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainHelper$PlainJarRepository.aFile</inbound>
            <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainHelper$PlainJarRepository.loadModuleDefs(java.util.Map, java.util.List)</inbound>
            <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainHelper.absolutize(java.io.File)</inbound>
            <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainHelper.addPaths(java.io.File, java.lang.String[], java.util.List)</inbound>
            <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainHelper.getAsEnvConf(java.io.File)</inbound>
            <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainHelper.getDefaultDomain(java.io.File)</inbound>
            <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainHelper.getDefaultDomainsDir()</inbound>
            <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainHelper.getDomainRoot(com.sun.enterprise.module.bootstrap.StartupContext)</inbound>
            <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainHelper.getJDKToolsJar()</inbound>
            <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainHelper.getJDKToolsRepo()</inbound>
            <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainHelper.parseAsEnv(java.io.File)</inbound>
            <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainHelper.verifyAndSetDomainRoot(java.io.File)</inbound>
            <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainKnopflerFish.addFrameworkJars(com.sun.enterprise.glassfish.bootstrap.ClassPathBuilder)</inbound>
            <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainKnopflerFish.launchOSGiFW()</inbound>
            <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainKnopflerFish.setFwDir()</inbound>
            <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainOSGi.ASMainOSGi(java.util.logging.Logger, java.lang.String[])</inbound>
            <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainOSGi.addJDKToolsJar(com.sun.enterprise.glassfish.bootstrap.ClassPathBuilder)</inbound>
            <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainOSGi.createCache(java.io.File)</inbound>
            <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainOSGi.domainDir</inbound>
            <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainOSGi.findDerbyClient(com.sun.enterprise.glassfish.bootstrap.ClassPathBuilder)</inbound>
            <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainOSGi.fwDir</inbound>
            <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainOSGi.getSettingsLastModification()</inbound>
            <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainOSGi.glassfishDir</inbound>
            <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainOSGi.setStartupContextProperties(java.util.logging.Logger, java.lang.String[])</inbound>
            <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainOSGi.setSystemProperties()</inbound>
            <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainOSGi.setupLauncherClassLoader()</inbound>
            <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainStatic$1.ASMainStatic$1(com.sun.enterprise.glassfish.bootstrap.ASMainStatic, java.io.File, long)</inbound>
            <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainStatic$1.run()</inbound>
            <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainStatic$1.val$cacheDir</inbound>
            <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainStatic.createCache(java.io.File)</inbound>
            <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainStatic.createClassLoader(java.io.File)</inbound>
            <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainStatic.createTmpClassLoader(java.io.File)</inbound>
            <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainStatic.findDerbyClient(java.util.List)</inbound>
            <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainStatic.insertURLs(java.io.File, java.util.List)</inbound>
            <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainStatic.out</inbound>
            <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainStatic.start(java.lang.String[])</inbound>
            <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.AbstractMain.AbstractMain()</inbound>
            <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.AbstractMain.bootstrapFile</inbound>
            <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.AbstractMain.createCache(java.io.File)</inbound>
            <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.AbstractMain.deleteRecursive(java.io.File)</inbound>
            <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.AbstractMain.findBootstrapFile()</inbound>
            <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.AbstractMain.flushAndCreate(java.io.File, long)</inbound>
            <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.AbstractMain.getLastModified(java.io.File, long)</inbound>
            <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.AbstractMain.isCacheOutdated(long, java.io.File)</inbound>
            <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.AbstractMain.loadCacheInformation(java.io.File)</inbound>
            <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.AbstractMain.saveCacheInformation(java.io.File, java.lang.String, long)</inbound>
            <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.AbstractMain.setUpCache(java.io.File, java.io.File)</inbound>
            <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ClassPathBuilder$1.accept(java.io.File)</inbound>
            <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ClassPathBuilder.addClassFolder(java.io.File)</inbound>
            <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ClassPathBuilder.addGlob(java.io.File, java.lang.String[])</inbound>
            <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ClassPathBuilder.addJar(java.io.File)</inbound>
            <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ClassPathBuilder.addJarFolder(java.io.File, java.lang.String[])</inbound>
            <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.GFModuleDefinition.GFModuleDefinition(java.io.File)</inbound>
            <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.GFRepository.GFRepository(java.lang.String, java.io.File)</inbound>
            <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.GFRepository.loadJar(java.io.File)</inbound>
            <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.Rejar$1.accept(java.io.File)</inbound>
            <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.Rejar$2.accept(java.io.File)</inbound>
            <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.Rejar.processDirectory(java.util.jar.JarOutputStream, java.io.File, java.util.Set, java.util.Map)</inbound>
            <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.Rejar.rejar(java.io.File, java.io.File)</inbound>
            <feature confirmed="no">
                <name>java.io.File.File(java.io.File, java.lang.String)</name>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainEquinox.launchOSGiFW()</inbound>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainEquinox.setFwDir()</inbound>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainFelix.addFrameworkJars(com.sun.enterprise.glassfish.bootstrap.ClassPathBuilder)</inbound>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainFelix.launchOSGiFW()</inbound>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainFelix.setFwDir()</inbound>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainHelper.getAsEnvConf(java.io.File)</inbound>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainHelper.getDomainRoot(com.sun.enterprise.module.bootstrap.StartupContext)</inbound>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainHelper.parseAsEnv(java.io.File)</inbound>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainHelper.verifyAndSetDomainRoot(java.io.File)</inbound>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainKnopflerFish.addFrameworkJars(com.sun.enterprise.glassfish.bootstrap.ClassPathBuilder)</inbound>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainKnopflerFish.launchOSGiFW()</inbound>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainKnopflerFish.setFwDir()</inbound>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainOSGi.findDerbyClient(com.sun.enterprise.glassfish.bootstrap.ClassPathBuilder)</inbound>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainOSGi.setSystemProperties()</inbound>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainStatic.findDerbyClient(java.util.List)</inbound>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainStatic.start(java.lang.String[])</inbound>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.AbstractMain.loadCacheInformation(java.io.File)</inbound>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.AbstractMain.saveCacheInformation(java.io.File, java.lang.String, long)</inbound>
            </feature>
            <feature confirmed="no">
                <name>java.io.File.File(java.lang.String)</name>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainEquinox.setFwDir()</inbound>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainFelix.setFwDir()</inbound>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainHelper.getDefaultDomainsDir()</inbound>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainHelper.getDomainRoot(com.sun.enterprise.module.bootstrap.StartupContext)</inbound>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainHelper.getJDKToolsJar()</inbound>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainHelper.parseAsEnv(java.io.File)</inbound>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainKnopflerFish.setFwDir()</inbound>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainOSGi.findDerbyClient(com.sun.enterprise.glassfish.bootstrap.ClassPathBuilder)</inbound>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainOSGi.setSystemProperties()</inbound>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainStatic.findDerbyClient(java.util.List)</inbound>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainStatic.start(java.lang.String[])</inbound>
            </feature>
            <feature confirmed="no">
                <name>java.io.File.File(java.lang.String, java.lang.String)</name>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainHelper.getJDKToolsJar()</inbound>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainOSGi.findDerbyClient(com.sun.enterprise.glassfish.bootstrap.ClassPathBuilder)</inbound>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainStatic.findDerbyClient(java.util.List)</inbound>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainStatic.start(java.lang.String[])</inbound>
            </feature>
            <feature confirmed="no">
                <name>java.io.File.File(java.net.URI)</name>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ExtensibleClassLoader.added(java.net.URI)</inbound>
            </feature>
            <feature confirmed="no">
                <name>java.io.File.canWrite()</name>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainHelper.verifyAndSetDomainRoot(java.io.File)</inbound>
            </feature>
            <feature confirmed="no">
                <name>java.io.File.createNewFile()</name>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.AbstractMain.saveCacheInformation(java.io.File, java.lang.String, long)</inbound>
            </feature>
            <feature confirmed="no">
                <name>java.io.File.delete()</name>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.AbstractMain.deleteRecursive(java.io.File)</inbound>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.AbstractMain.saveCacheInformation(java.io.File, java.lang.String, long)</inbound>
            </feature>
            <feature confirmed="no">
                <name>java.io.File.exists()</name>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainEquinox.setFwDir()</inbound>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainFelix.setFwDir()</inbound>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainHelper$PlainJarRepository.loadModuleDefs(java.util.Map, java.util.List)</inbound>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainHelper.getJDKToolsRepo()</inbound>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainHelper.parseAsEnv(java.io.File)</inbound>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainHelper.verifyAndSetDomainRoot(java.io.File)</inbound>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainKnopflerFish.setFwDir()</inbound>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainOSGi.addJDKToolsJar(com.sun.enterprise.glassfish.bootstrap.ClassPathBuilder)</inbound>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainOSGi.findDerbyClient(com.sun.enterprise.glassfish.bootstrap.ClassPathBuilder)</inbound>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainStatic.findDerbyClient(java.util.List)</inbound>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.AbstractMain.flushAndCreate(java.io.File, long)</inbound>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.AbstractMain.loadCacheInformation(java.io.File)</inbound>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ClassPathBuilder.addJar(java.io.File)</inbound>
            </feature>
            <feature confirmed="no">
                <name>java.io.File.getAbsoluteFile()</name>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainHelper.absolutize(java.io.File)</inbound>
            </feature>
            <feature confirmed="no">
                <name>java.io.File.getAbsolutePath()</name>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainEquinox.setFwDir()</inbound>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainFelix.setFwDir()</inbound>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainHelper.parseAsEnv(java.io.File)</inbound>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainKnopflerFish.launchOSGiFW()</inbound>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainKnopflerFish.setFwDir()</inbound>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainOSGi.setSystemProperties()</inbound>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainStatic.start(java.lang.String[])</inbound>
            </feature>
            <feature confirmed="no">
                <name>java.io.File.getCanonicalFile()</name>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainHelper.absolutize(java.io.File)</inbound>
            </feature>
            <feature confirmed="no">
                <name>java.io.File.getCanonicalPath()</name>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainEquinox.launchOSGiFW()</inbound>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainFelix.launchOSGiFW()</inbound>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainKnopflerFish.launchOSGiFW()</inbound>
            </feature>
            <feature confirmed="no">
                <name>java.io.File.getName()</name>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainHelper.addPaths(java.io.File, java.lang.String[], java.util.List)</inbound>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.AbstractMain.loadCacheInformation(java.io.File)</inbound>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.AbstractMain.saveCacheInformation(java.io.File, java.lang.String, long)</inbound>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ClassPathBuilder$1.accept(java.io.File)</inbound>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ClassPathBuilder.addGlob(java.io.File, java.lang.String[])</inbound>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.Rejar$2.accept(java.io.File)</inbound>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.Rejar.processDirectory(java.util.jar.JarOutputStream, java.io.File, java.util.Set, java.util.Map)</inbound>
            </feature>
            <feature confirmed="no">
                <name>java.io.File.getParent()</name>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainHelper.getJDKToolsJar()</inbound>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainOSGi.setStartupContextProperties(java.util.logging.Logger, java.lang.String[])</inbound>
            </feature>
            <feature confirmed="no">
                <name>java.io.File.getParentFile()</name>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainFelix.launchOSGiFW()</inbound>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainKnopflerFish.launchOSGiFW()</inbound>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainOSGi.ASMainOSGi(java.util.logging.Logger, java.lang.String[])</inbound>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainOSGi.setupLauncherClassLoader()</inbound>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainStatic.createCache(java.io.File)</inbound>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainStatic.start(java.lang.String[])</inbound>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.AbstractMain.loadCacheInformation(java.io.File)</inbound>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.AbstractMain.saveCacheInformation(java.io.File, java.lang.String, long)</inbound>
            </feature>
            <feature confirmed="no">
                <name>java.io.File.getPath()</name>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainHelper.parseAsEnv(java.io.File)</inbound>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainHelper.verifyAndSetDomainRoot(java.io.File)</inbound>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ClassPathBuilder$1.accept(java.io.File)</inbound>
            </feature>
            <feature confirmed="no">
                <name>java.io.File.isAbsolute()</name>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainHelper.parseAsEnv(java.io.File)</inbound>
            </feature>
            <feature confirmed="no">
                <name>java.io.File.isDirectory()</name>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainHelper$1.accept(java.io.File)</inbound>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainHelper.getDefaultDomainsDir()</inbound>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainHelper.verifyAndSetDomainRoot(java.io.File)</inbound>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.AbstractMain.flushAndCreate(java.io.File, long)</inbound>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.AbstractMain.getLastModified(java.io.File, long)</inbound>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ClassPathBuilder.addJarFolder(java.io.File, java.lang.String[])</inbound>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ExtensibleClassLoader.added(java.net.URI)</inbound>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.Rejar$1.accept(java.io.File)</inbound>
            </feature>
            <feature confirmed="no">
                <name>java.io.File.isFile()</name>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainStatic.insertURLs(java.io.File, java.util.List)</inbound>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.AbstractMain.deleteRecursive(java.io.File)</inbound>
            </feature>
            <feature confirmed="no">
                <name>java.io.File.lastModified()</name>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.AbstractMain.getLastModified(java.io.File, long)</inbound>
            </feature>
            <feature confirmed="no">
                <name>java.io.File.listFiles()</name>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainHelper.addPaths(java.io.File, java.lang.String[], java.util.List)</inbound>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainStatic.insertURLs(java.io.File, java.util.List)</inbound>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.AbstractMain.deleteRecursive(java.io.File)</inbound>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.AbstractMain.getLastModified(java.io.File, long)</inbound>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ClassPathBuilder.addGlob(java.io.File, java.lang.String[])</inbound>
            </feature>
            <feature confirmed="no">
                <name>java.io.File.listFiles(java.io.FileFilter)</name>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainHelper.getDefaultDomain(java.io.File)</inbound>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ClassPathBuilder.addJarFolder(java.io.File, java.lang.String[])</inbound>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.Rejar.processDirectory(java.util.jar.JarOutputStream, java.io.File, java.util.Set, java.util.Map)</inbound>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.Rejar.rejar(java.io.File, java.io.File)</inbound>
            </feature>
            <feature confirmed="no">
                <name>java.io.File.mkdirs()</name>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainOSGi.createCache(java.io.File)</inbound>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainStatic.createCache(java.io.File)</inbound>
            </feature>
            <feature confirmed="no">
                <name>java.io.File.separator</name>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainHelper.getJDKToolsJar()</inbound>
            </feature>
            <feature confirmed="no">
                <name>java.io.File.toURI()</name>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainFelix.launchOSGiFW()</inbound>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainHelper$PlainJarRepository.ASMainHelper$PlainJarRepository(com.sun.enterprise.glassfish.bootstrap.ASMainHelper, java.lang.String, java.io.File)</inbound>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainHelper$PlainJarRepository.loadModuleDefs(java.util.Map, java.util.List)</inbound>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainHelper.addPaths(java.io.File, java.lang.String[], java.util.List)</inbound>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainKnopflerFish.launchOSGiFW()</inbound>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainOSGi.setSystemProperties()</inbound>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainStatic.createClassLoader(java.io.File)</inbound>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainStatic.findDerbyClient(java.util.List)</inbound>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainStatic.insertURLs(java.io.File, java.util.List)</inbound>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainStatic.start(java.lang.String[])</inbound>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.AbstractMain.flushAndCreate(java.io.File, long)</inbound>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.AbstractMain.isCacheOutdated(long, java.io.File)</inbound>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.AbstractMain.loadCacheInformation(java.io.File)</inbound>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.AbstractMain.saveCacheInformation(java.io.File, java.lang.String, long)</inbound>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ClassPathBuilder.addJar(java.io.File)</inbound>
            </feature>
        </class>
        <class confirmed="no">
            <name>java.io.FileFilter</name>
            <inbound type="class" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainHelper$1</inbound>
            <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainHelper.getDefaultDomain(java.io.File)</inbound>
            <inbound type="class" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ClassPathBuilder$1</inbound>
            <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ClassPathBuilder.addJarFolder(java.io.File, java.lang.String[])</inbound>
            <inbound type="class" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.Rejar$1</inbound>
            <inbound type="class" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.Rejar$2</inbound>
            <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.Rejar.processDirectory(java.util.jar.JarOutputStream, java.io.File, java.util.Set, java.util.Map)</inbound>
            <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.Rejar.rejar(java.io.File, java.io.File)</inbound>
        </class>
        <class confirmed="no">
            <name>java.io.FileInputStream</name>
            <feature confirmed="no">
                <name>java.io.FileInputStream.FileInputStream(java.io.File)</name>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.AbstractMain.loadCacheInformation(java.io.File)</inbound>
            </feature>
        </class>
        <class confirmed="no">
            <name>java.io.FileNotFoundException</name>
            <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.GFRepository.GFRepository(java.lang.String, java.io.File)</inbound>
        </class>
        <class confirmed="no">
            <name>java.io.FileOutputStream</name>
            <feature confirmed="no">
                <name>java.io.FileOutputStream.FileOutputStream(java.io.File)</name>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.AbstractMain.saveCacheInformation(java.io.File, java.lang.String, long)</inbound>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.Rejar.rejar(java.io.File, java.io.File)</inbound>
            </feature>
        </class>
        <class confirmed="no">
            <name>java.io.FileReader</name>
            <feature confirmed="no">
                <name>java.io.FileReader.FileReader(java.io.File)</name>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainHelper.parseAsEnv(java.io.File)</inbound>
            </feature>
        </class>
        <class confirmed="no">
            <name>java.io.IOException</name>
            <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainEquinox.addFrameworkJars(com.sun.enterprise.glassfish.bootstrap.ClassPathBuilder)</inbound>
            <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainFelix.addFrameworkJars(com.sun.enterprise.glassfish.bootstrap.ClassPathBuilder)</inbound>
            <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainHelper$PlainJarRepository.loadModuleDefs(java.util.Map, java.util.List)</inbound>
            <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainHelper.getJDKToolsRepo()</inbound>
            <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainHelper.parseAsEnv(java.io.File)</inbound>
            <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainKnopflerFish.addFrameworkJars(com.sun.enterprise.glassfish.bootstrap.ClassPathBuilder)</inbound>
            <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainOSGi.addFrameworkJars(com.sun.enterprise.glassfish.bootstrap.ClassPathBuilder)</inbound>
            <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainOSGi.addJDKToolsJar(com.sun.enterprise.glassfish.bootstrap.ClassPathBuilder)</inbound>
            <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainOSGi.createCache(java.io.File)</inbound>
            <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainOSGi.findDerbyClient(com.sun.enterprise.glassfish.bootstrap.ClassPathBuilder)</inbound>
            <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainOSGi.setStartupContextProperties(java.util.logging.Logger, java.lang.String[])</inbound>
            <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainOSGi.setupLauncherClassLoader()</inbound>
            <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainStatic$1.run()</inbound>
            <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainStatic$2.parseInhabitants(com.sun.enterprise.module.Module, java.lang.String, com.sun.hk2.component.InhabitantsParser)</inbound>
            <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainStatic.createCache(java.io.File)</inbound>
            <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainStatic.findDerbyClient(java.util.List)</inbound>
            <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainStatic.start(java.lang.String[])</inbound>
            <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.AbstractMain.createCache(java.io.File)</inbound>
            <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.AbstractMain.findBootstrapFile()</inbound>
            <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.AbstractMain.flushAndCreate(java.io.File, long)</inbound>
            <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.AbstractMain.loadCacheInformation(java.io.File)</inbound>
            <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.AbstractMain.saveCacheInformation(java.io.File, java.lang.String, long)</inbound>
            <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.AbstractMain.setUpCache(java.io.File, java.io.File)</inbound>
            <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ClassPathBuilder.addClassFolder(java.io.File)</inbound>
            <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ClassPathBuilder.addGlob(java.io.File, java.lang.String[])</inbound>
            <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ClassPathBuilder.addJar(java.io.File)</inbound>
            <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ClassPathBuilder.addJarFolder(java.io.File, java.lang.String[])</inbound>
            <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.GFModuleDefinition.GFModuleDefinition(java.io.File)</inbound>
            <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.GFRepository.loadJar(java.io.File)</inbound>
            <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ProxyModuleDefinition.ProxyModuleDefinition(java.lang.ClassLoader)</inbound>
            <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ProxyModuleDefinition.ProxyModuleDefinition(java.lang.ClassLoader, java.util.Collection)</inbound>
            <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ProxyModuleDefinition.readFully(java.net.URL)</inbound>
            <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.Rejar.copy(byte[], java.lang.String, java.util.jar.JarOutputStream)</inbound>
            <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.Rejar.copy(java.util.jar.JarFile, java.util.jar.JarEntry, java.io.OutputStream)</inbound>
            <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.Rejar.copy(java.util.jar.JarFile, java.util.jar.JarEntry, java.nio.channels.WritableByteChannel)</inbound>
            <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.Rejar.copy(java.util.jar.JarFile, java.util.jar.JarEntry, java.util.jar.JarOutputStream)</inbound>
            <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.Rejar.getManifest()</inbound>
            <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.Rejar.processDirectory(java.util.jar.JarOutputStream, java.io.File, java.util.Set, java.util.Map)</inbound>
            <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.Rejar.rejar(java.io.File, java.io.File)</inbound>
            <feature confirmed="no">
                <name>java.io.IOException.IOException(java.lang.String)</name>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.AbstractMain.flushAndCreate(java.io.File, long)</inbound>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ClassPathBuilder.addJar(java.io.File)</inbound>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ClassPathBuilder.addJarFolder(java.io.File, java.lang.String[])</inbound>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ProxyModuleDefinition.readFully(java.net.URL)</inbound>
            </feature>
            <feature confirmed="no">
                <name>java.io.IOException.initCause(java.lang.Throwable)</name>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ProxyModuleDefinition.readFully(java.net.URL)</inbound>
            </feature>
        </class>
        <class confirmed="no">
            <name>java.io.InputStream</name>
            <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.AbstractMain.loadCacheInformation(java.io.File)</inbound>
            <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ProxyModuleDefinition.readFully(java.net.URL)</inbound>
            <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.Rejar.copy(java.util.jar.JarFile, java.util.jar.JarEntry, java.nio.channels.WritableByteChannel)</inbound>
            <feature confirmed="no">
                <name>java.io.InputStream.close()</name>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.AbstractMain.loadCacheInformation(java.io.File)</inbound>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ProxyModuleDefinition.readFully(java.net.URL)</inbound>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.Rejar.copy(java.util.jar.JarFile, java.util.jar.JarEntry, java.nio.channels.WritableByteChannel)</inbound>
            </feature>
            <feature confirmed="no">
                <name>java.io.InputStream.read(byte[])</name>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ProxyModuleDefinition.readFully(java.net.URL)</inbound>
            </feature>
        </class>
        <class confirmed="no">
            <name>java.io.LineNumberReader</name>
            <feature confirmed="no">
                <name>java.io.LineNumberReader.LineNumberReader(java.io.Reader)</name>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainHelper.parseAsEnv(java.io.File)</inbound>
            </feature>
            <feature confirmed="no">
                <name>java.io.LineNumberReader.close()</name>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainHelper.parseAsEnv(java.io.File)</inbound>
            </feature>
            <feature confirmed="no">
                <name>java.io.LineNumberReader.readLine()</name>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainHelper.parseAsEnv(java.io.File)</inbound>
            </feature>
        </class>
        <class confirmed="no">
            <name>java.io.ObjectOutputStream</name>
            <feature confirmed="no">
                <name>java.io.ObjectOutputStream.ObjectOutputStream(java.io.OutputStream)</name>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.AbstractMain.saveCacheInformation(java.io.File, java.lang.String, long)</inbound>
            </feature>
            <feature confirmed="no">
                <name>java.io.ObjectOutputStream.close()</name>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.AbstractMain.saveCacheInformation(java.io.File, java.lang.String, long)</inbound>
            </feature>
        </class>
        <class confirmed="no">
            <name>java.io.OutputStream</name>
            <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainOSGi.setStartupContextProperties(java.util.logging.Logger, java.lang.String[])</inbound>
            <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.AbstractMain.saveCacheInformation(java.io.File, java.lang.String, long)</inbound>
            <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.Rejar.copy(java.util.jar.JarFile, java.util.jar.JarEntry, java.io.OutputStream)</inbound>
            <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.Rejar.copy(java.util.jar.JarFile, java.util.jar.JarEntry, java.util.jar.JarOutputStream)</inbound>
            <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.Rejar.processDirectory(java.util.jar.JarOutputStream, java.io.File, java.util.Set, java.util.Map)</inbound>
            <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.Rejar.rejar(java.io.File, java.io.File)</inbound>
        </class>
        <class confirmed="no">
            <name>java.io.PrintStream</name>
            <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ProxyModule.dumpState(java.io.PrintStream)</inbound>
        </class>
        <class confirmed="no">
            <name>java.io.Reader</name>
            <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainHelper.parseAsEnv(java.io.File)</inbound>
        </class>
    </package>
    <package confirmed="no">
        <name>java.lang</name>
        <class confirmed="no">
            <name>java.lang.CharSequence</name>
            <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainHelper.parseAsEnv(java.io.File)</inbound>
            <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ClassPathBuilder.addGlob(java.io.File, java.lang.String[])</inbound>
        </class>
        <class confirmed="no">
            <name>java.lang.Class</name>
            <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMain$Platform.valueOf(java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainEquinox.launchOSGiFW()</inbound>
            <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainFelix.launchOSGiFW()</inbound>
            <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainKnopflerFish.launchOSGiFW()</inbound>
            <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainStatic$2.find(java.lang.Class)</inbound>
            <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainStatic$3$1.createHabitat(com.sun.enterprise.module.ModulesRegistry, com.sun.enterprise.module.bootstrap.StartupContext)</inbound>
            <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainStatic.createClassLoader(java.io.File)</inbound>
            <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainStatic.createTmpClassLoader(java.io.File)</inbound>
            <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.AbstractMain.findBootstrapFile()</inbound>
            <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.MaskingClassLoader$1.loadClass(java.lang.String, boolean)</inbound>
            <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.MaskingClassLoader.loadClass(java.lang.String, boolean)</inbound>
            <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ProxyModule.getProvidersClass(java.lang.Class)</inbound>
            <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ProxyModule.hasProvider(java.lang.Class)</inbound>
            <feature confirmed="no">
                <name>java.lang.Class.getClassLoader()</name>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainStatic.createClassLoader(java.io.File)</inbound>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainStatic.createTmpClassLoader(java.io.File)</inbound>
            </feature>
            <feature confirmed="no">
                <name>java.lang.Class.getMethod(java.lang.String, java.lang.Class[])</name>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainEquinox.launchOSGiFW()</inbound>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainFelix.launchOSGiFW()</inbound>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainKnopflerFish.launchOSGiFW()</inbound>
            </feature>
            <feature confirmed="no">
                <name>java.lang.Class.getName()</name>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ExtensibleClassLoader.static {}</inbound>
            </feature>
        </class>
        <class confirmed="no">
            <name>java.lang.ClassLoader</name>
            <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainEquinox.launchOSGiFW()</inbound>
            <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainFelix.launchOSGiFW()</inbound>
            <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainHelper.setupSharedCL(java.lang.ClassLoader, java.util.List, java.util.List)</inbound>
            <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainKnopflerFish.launchOSGiFW()</inbound>
            <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainOSGi.launcherCL</inbound>
            <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainOSGi.setupLauncherClassLoader()</inbound>
            <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainStatic$2$1.get()</inbound>
            <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainStatic.createClassLoader(java.io.File)</inbound>
            <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainStatic.createTmpClassLoader(java.io.File)</inbound>
            <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainStatic.start(java.lang.String[])</inbound>
            <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ClassPathBuilder.ClassPathBuilder(java.lang.ClassLoader)</inbound>
            <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ClassPathBuilder.create()</inbound>
            <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ClassPathBuilder.createExtensible(java.util.List)</inbound>
            <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ClassPathBuilder.parent</inbound>
            <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ExtensibleClassLoader.ExtensibleClassLoader(java.net.URL[], java.lang.ClassLoader, java.util.List)</inbound>
            <inbound type="class" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.MaskingClassLoader</inbound>
            <inbound type="class" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.MaskingClassLoader$1</inbound>
            <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.MaskingClassLoader.MaskingClassLoader(java.lang.ClassLoader, java.net.URL[], java.lang.String[])</inbound>
            <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.MaskingClassLoader.MaskingClassLoader(java.lang.ClassLoader, java.net.URL[], java.util.Collection)</inbound>
            <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.MaskingClassLoader.getMaskingClassLoader(java.lang.String[])</inbound>
            <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ProxyModule.ProxyModule(com.sun.enterprise.module.ModulesRegistry, com.sun.enterprise.module.ModuleDefinition, java.lang.ClassLoader)</inbound>
            <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ProxyModule.classLoader</inbound>
            <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ProxyModule.getClassLoader()</inbound>
            <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ProxyModuleDefinition.ProxyModuleDefinition(java.lang.ClassLoader)</inbound>
            <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ProxyModuleDefinition.ProxyModuleDefinition(java.lang.ClassLoader, java.util.Collection)</inbound>
            <feature confirmed="no">
                <name>java.lang.ClassLoader.ClassLoader()</name>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.MaskingClassLoader$1.MaskingClassLoader$1(com.sun.enterprise.glassfish.bootstrap.MaskingClassLoader, java.lang.String[])</inbound>
            </feature>
            <feature confirmed="no">
                <name>java.lang.ClassLoader.ClassLoader(java.lang.ClassLoader)</name>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.MaskingClassLoader.MaskingClassLoader(java.lang.ClassLoader, java.net.URL[], java.lang.String[])</inbound>
            </feature>
            <feature confirmed="no">
                <name>java.lang.ClassLoader.getParent()</name>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainOSGi.setupLauncherClassLoader()</inbound>
            </feature>
            <feature confirmed="no">
                <name>java.lang.ClassLoader.getResources(java.lang.String)</name>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ProxyModuleDefinition.ProxyModuleDefinition(java.lang.ClassLoader, java.util.Collection)</inbound>
            </feature>
            <feature confirmed="no">
                <name>java.lang.ClassLoader.getSystemClassLoader()</name>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainOSGi.setupLauncherClassLoader()</inbound>
            </feature>
            <feature confirmed="no">
                <name>java.lang.ClassLoader.loadClass(java.lang.String)</name>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainEquinox.launchOSGiFW()</inbound>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainFelix.launchOSGiFW()</inbound>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainKnopflerFish.launchOSGiFW()</inbound>
            </feature>
            <feature confirmed="no">
                <name>java.lang.ClassLoader.loadClass(java.lang.String, boolean)</name>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.MaskingClassLoader$1.loadClass(java.lang.String, boolean)</inbound>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.MaskingClassLoader.loadClass(java.lang.String, boolean)</inbound>
            </feature>
        </class>
        <class confirmed="no">
            <name>java.lang.ClassNotFoundException</name>
            <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.MaskingClassLoader$1.loadClass(java.lang.String, boolean)</inbound>
            <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.MaskingClassLoader.loadClass(java.lang.String, boolean)</inbound>
            <feature confirmed="no">
                <name>java.lang.ClassNotFoundException.ClassNotFoundException(java.lang.String)</name>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.MaskingClassLoader$1.loadClass(java.lang.String, boolean)</inbound>
            </feature>
        </class>
        <class confirmed="no">
            <name>java.lang.Enum</name>
            <inbound type="class" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMain$Platform</inbound>
            <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMain$Platform.valueOf(java.lang.String)</inbound>
            <feature confirmed="no">
                <name>java.lang.Enum.Enum(java.lang.String, int)</name>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMain$Platform.ASMain$Platform(java.lang.String, int)</inbound>
            </feature>
            <feature confirmed="no">
                <name>java.lang.Enum.valueOf(java.lang.Class, java.lang.String)</name>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMain$Platform.valueOf(java.lang.String)</inbound>
            </feature>
        </class>
        <class confirmed="no">
            <name>java.lang.Error</name>
            <feature confirmed="no">
                <name>java.lang.Error.Error(java.lang.Throwable)</name>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainOSGi.addJDKToolsJar(com.sun.enterprise.glassfish.bootstrap.ClassPathBuilder)</inbound>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainOSGi.setupLauncherClassLoader()</inbound>
            </feature>
        </class>
        <class confirmed="no">
            <name>java.lang.Exception</name>
            <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainEquinox.launchOSGiFW()</inbound>
            <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainFelix.launchOSGiFW()</inbound>
            <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainHelper.absolutize(java.io.File)</inbound>
            <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainKnopflerFish.launchOSGiFW()</inbound>
            <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainOSGi.launchOSGiFW()</inbound>
            <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainOSGi.run()</inbound>
            <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainOSGi.setSystemProperties()</inbound>
            <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainOSGi.setupLauncherClassLoader()</inbound>
            <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainStatic.createClassLoader(java.io.File)</inbound>
            <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainStatic.createTmpClassLoader(java.io.File)</inbound>
            <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainStatic.insertURLs(java.io.File, java.util.List)</inbound>
            <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainStatic.run()</inbound>
            <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainStatic.start(java.lang.String[])</inbound>
        </class>
        <class confirmed="no">
            <name>java.lang.IllegalAccessException</name>
            <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainEquinox$1.run()</inbound>
            <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainFelix$1.run()</inbound>
            <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainKnopflerFish$1.run()</inbound>
        </class>
        <class confirmed="no">
            <name>java.lang.InterruptedException</name>
            <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainStatic.start(java.lang.String[])</inbound>
        </class>
        <class confirmed="no">
            <name>java.lang.Iterable</name>
            <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ProxyModule.getProvidersClass(java.lang.Class)</inbound>
            <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ProxyModule.getProvidersClass(java.lang.String)</inbound>
        </class>
        <class confirmed="no">
            <name>java.lang.Long</name>
            <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.Rejar.copy(java.util.jar.JarFile, java.util.jar.JarEntry, java.nio.channels.WritableByteChannel)</inbound>
            <feature confirmed="no">
                <name>java.lang.Long.Long(long)</name>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainOSGi.setStartupContextProperties(java.util.logging.Logger, java.lang.String[])</inbound>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.AbstractMain.saveCacheInformation(java.io.File, java.lang.String, long)</inbound>
            </feature>
            <feature confirmed="no">
                <name>java.lang.Long.intValue()</name>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.Rejar.copy(java.util.jar.JarFile, java.util.jar.JarEntry, java.nio.channels.WritableByteChannel)</inbound>
            </feature>
            <feature confirmed="no">
                <name>java.lang.Long.parseLong(java.lang.String)</name>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.AbstractMain.loadCacheInformation(java.io.File)</inbound>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.AbstractMain.parse(java.util.Properties, java.lang.String)</inbound>
            </feature>
            <feature confirmed="no">
                <name>java.lang.Long.toString()</name>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainOSGi.setStartupContextProperties(java.util.logging.Logger, java.lang.String[])</inbound>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.AbstractMain.saveCacheInformation(java.io.File, java.lang.String, long)</inbound>
            </feature>
            <feature confirmed="no">
                <name>java.lang.Long.valueOf(long)</name>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.Rejar.copy(java.util.jar.JarFile, java.util.jar.JarEntry, java.nio.channels.WritableByteChannel)</inbound>
            </feature>
        </class>
        <class confirmed="no">
            <name>java.lang.NoSuchFieldError</name>
            <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMain$1.static {}</inbound>
        </class>
        <class confirmed="no">
            <name>java.lang.NumberFormatException</name>
            <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.AbstractMain.loadCacheInformation(java.io.File)</inbound>
            <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.AbstractMain.parse(java.util.Properties, java.lang.String)</inbound>
        </class>
        <class confirmed="no">
            <name>java.lang.Object</name>
            <inbound type="class" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMain</inbound>
            <inbound type="class" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMain$1</inbound>
            <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMain$Platform.values()</inbound>
            <inbound type="class" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainEquinox$1</inbound>
            <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainEquinox$1.run()</inbound>
            <inbound type="class" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainFelix$1</inbound>
            <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainFelix$1.run()</inbound>
            <inbound type="class" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainHelper</inbound>
            <inbound type="class" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainHelper$1</inbound>
            <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainHelper$PlainJarRepository.loadModuleDefs(java.util.Map, java.util.List)</inbound>
            <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainHelper.addPaths(java.io.File, java.lang.String[], java.util.List)</inbound>
            <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainHelper.getDefaultDomain(java.io.File)</inbound>
            <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainHelper.parseAsEnv(java.io.File)</inbound>
            <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainHelper.setupSharedCL(java.lang.ClassLoader, java.util.List, java.util.List)</inbound>
            <inbound type="class" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainKnopflerFish$1</inbound>
            <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainKnopflerFish$1.run()</inbound>
            <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainOSGi.addJDKToolsJar(com.sun.enterprise.glassfish.bootstrap.ClassPathBuilder)</inbound>
            <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainOSGi.setStartupContextProperties(java.util.logging.Logger, java.lang.String[])</inbound>
            <inbound type="class" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainStatic$1</inbound>
            <inbound type="class" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainStatic$2$1</inbound>
            <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainStatic$2$1.get()</inbound>
            <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainStatic$2.getModules()</inbound>
            <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainStatic$2.parseInhabitants(com.sun.enterprise.module.Module, java.lang.String, com.sun.hk2.component.InhabitantsParser)</inbound>
            <inbound type="class" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainStatic$3</inbound>
            <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainStatic$3$1.createHabitat(com.sun.enterprise.module.ModulesRegistry, com.sun.enterprise.module.bootstrap.StartupContext)</inbound>
            <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainStatic.createClassLoader(java.io.File)</inbound>
            <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainStatic.createTmpClassLoader(java.io.File)</inbound>
            <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainStatic.findDerbyClient(java.util.List)</inbound>
            <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainStatic.insertURLs(java.io.File, java.util.List)</inbound>
            <inbound type="class" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.AbstractMain</inbound>
            <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.AbstractMain.findBootstrapFile()</inbound>
            <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.AbstractMain.flushAndCreate(java.io.File, long)</inbound>
            <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.AbstractMain.isCacheOutdated(long, java.io.File)</inbound>
            <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.AbstractMain.loadCacheInformation(java.io.File)</inbound>
            <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.AbstractMain.saveCacheInformation(java.io.File, java.lang.String, long)</inbound>
            <inbound type="class" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ClassPathBuilder</inbound>
            <inbound type="class" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ClassPathBuilder$1</inbound>
            <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ClassPathBuilder$1.accept(java.io.File)</inbound>
            <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ClassPathBuilder.addJar(java.io.File)</inbound>
            <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ClassPathBuilder.addJarFolder(java.io.File, java.lang.String[])</inbound>
            <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ClassPathBuilder.create()</inbound>
            <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ClassPathBuilder.createExtensible(java.util.List)</inbound>
            <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ExtensibleClassLoader.ExtensibleClassLoader(java.net.URL[], java.lang.ClassLoader, java.util.List)</inbound>
            <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ExtensibleClassLoader.added(java.net.URI)</inbound>
            <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.MaskingClassLoader.MaskingClassLoader(java.lang.ClassLoader, java.net.URL[], java.util.Collection)</inbound>
            <inbound type="class" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ProxyModule</inbound>
            <inbound type="class" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ProxyModuleDefinition</inbound>
            <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ProxyModuleDefinition.ProxyModuleDefinition(java.lang.ClassLoader)</inbound>
            <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ProxyModuleDefinition.ProxyModuleDefinition(java.lang.ClassLoader, java.util.Collection)</inbound>
            <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ProxyModuleDefinition.readFully(java.net.URL)</inbound>
            <inbound type="class" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.Rejar</inbound>
            <inbound type="class" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.Rejar$1</inbound>
            <inbound type="class" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.Rejar$2</inbound>
            <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.Rejar.getManifest()</inbound>
            <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.Rejar.processDirectory(java.util.jar.JarOutputStream, java.io.File, java.util.Set, java.util.Map)</inbound>
            <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.Rejar.rejar(java.io.File, java.io.File)</inbound>
            <feature confirmed="no">
                <name>java.lang.Object.Object()</name>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMain.ASMain()</inbound>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainEquinox$1.ASMainEquinox$1(com.sun.enterprise.glassfish.bootstrap.ASMainEquinox, java.lang.reflect.Method, java.lang.String[])</inbound>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainFelix$1.ASMainFelix$1(com.sun.enterprise.glassfish.bootstrap.ASMainFelix, java.lang.reflect.Method, java.lang.String[])</inbound>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainHelper$1.ASMainHelper$1(com.sun.enterprise.glassfish.bootstrap.ASMainHelper)</inbound>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainHelper.ASMainHelper(java.util.logging.Logger)</inbound>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainKnopflerFish$1.ASMainKnopflerFish$1(com.sun.enterprise.glassfish.bootstrap.ASMainKnopflerFish, java.lang.reflect.Method, java.lang.String[])</inbound>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainStatic$1.ASMainStatic$1(com.sun.enterprise.glassfish.bootstrap.ASMainStatic, java.io.File, long)</inbound>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainStatic$2$1.ASMainStatic$2$1(com.sun.enterprise.glassfish.bootstrap.ASMainStatic$2)</inbound>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainStatic$3.ASMainStatic$3(com.sun.enterprise.glassfish.bootstrap.ASMainStatic, com.sun.enterprise.module.impl.ModulesRegistryImpl, com.sun.enterprise.module.bootstrap.StartupContext)</inbound>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.AbstractMain.AbstractMain()</inbound>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ClassPathBuilder$1.ClassPathBuilder$1(com.sun.enterprise.glassfish.bootstrap.ClassPathBuilder, java.lang.String[])</inbound>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ClassPathBuilder.ClassPathBuilder(java.lang.ClassLoader)</inbound>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ProxyModule.ProxyModule(com.sun.enterprise.module.ModulesRegistry, com.sun.enterprise.module.ModuleDefinition, java.lang.ClassLoader)</inbound>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ProxyModuleDefinition.ProxyModuleDefinition(java.lang.ClassLoader, java.util.Collection)</inbound>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.Rejar$1.Rejar$1(com.sun.enterprise.glassfish.bootstrap.Rejar)</inbound>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.Rejar$2.Rejar$2(com.sun.enterprise.glassfish.bootstrap.Rejar)</inbound>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.Rejar.Rejar()</inbound>
            </feature>
            <feature confirmed="no">
                <name>java.lang.Object.getClass()</name>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainEquinox.launchOSGiFW()</inbound>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainFelix.launchOSGiFW()</inbound>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainKnopflerFish.launchOSGiFW()</inbound>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainStatic.createClassLoader(java.io.File)</inbound>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainStatic.createTmpClassLoader(java.io.File)</inbound>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.AbstractMain.findBootstrapFile()</inbound>
            </feature>
            <feature confirmed="no">
                <name>java.lang.Object.toString()</name>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ProxyModuleDefinition.getName()</inbound>
            </feature>
        </class>
        <class confirmed="no">
            <name>java.lang.Runnable</name>
            <inbound type="class" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainEquinox$1</inbound>
            <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainEquinox.launchOSGiFW()</inbound>
            <inbound type="class" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainFelix$1</inbound>
            <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainFelix.launchOSGiFW()</inbound>
            <inbound type="class" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainKnopflerFish$1</inbound>
            <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainKnopflerFish.launchOSGiFW()</inbound>
            <inbound type="class" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainStatic$1</inbound>
            <inbound type="class" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainStatic$3</inbound>
            <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainStatic.start(java.lang.String[])</inbound>
        </class>
        <class confirmed="no">
            <name>java.lang.RuntimeException</name>
            <feature confirmed="no">
                <name>java.lang.RuntimeException.RuntimeException(java.lang.String)</name>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMain.main(java.lang.String[])</inbound>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainEquinox.setFwDir()</inbound>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainFelix.setFwDir()</inbound>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainHelper.getDefaultDomain(java.io.File)</inbound>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainHelper.getDefaultDomainsDir()</inbound>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainHelper.verifyAndSetDomainRoot(java.io.File)</inbound>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainKnopflerFish.setFwDir()</inbound>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.AbstractMain.findBootstrapFile()</inbound>
            </feature>
            <feature confirmed="no">
                <name>java.lang.RuntimeException.RuntimeException(java.lang.String, java.lang.Throwable)</name>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainHelper.parseAsEnv(java.io.File)</inbound>
            </feature>
            <feature confirmed="no">
                <name>java.lang.RuntimeException.RuntimeException(java.lang.Throwable)</name>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainEquinox$1.run()</inbound>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainFelix$1.run()</inbound>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainKnopflerFish$1.run()</inbound>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainOSGi.run()</inbound>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainStatic.run()</inbound>
            </feature>
        </class>
        <class confirmed="no">
            <name>java.lang.String</name>
            <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMain$Platform.ASMain$Platform(java.lang.String, int)</inbound>
            <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMain$Platform.static {}</inbound>
            <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMain$Platform.valueOf(java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMain.PLATFORM_PROPERTY_KEY</inbound>
            <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMain.main(java.lang.String[])</inbound>
            <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainEquinox$1.ASMainEquinox$1(com.sun.enterprise.glassfish.bootstrap.ASMainEquinox, java.lang.reflect.Method, java.lang.String[])</inbound>
            <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainEquinox$1.run()</inbound>
            <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainEquinox$1.val$args</inbound>
            <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainEquinox.ASMainEquinox(java.util.logging.Logger, java.lang.String[])</inbound>
            <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainEquinox.addFrameworkJars(com.sun.enterprise.glassfish.bootstrap.ClassPathBuilder)</inbound>
            <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainEquinox.getFWMainClassName()</inbound>
            <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainEquinox.launchOSGiFW()</inbound>
            <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainEquinox.setFwDir()</inbound>
            <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainFelix$1.ASMainFelix$1(com.sun.enterprise.glassfish.bootstrap.ASMainFelix, java.lang.reflect.Method, java.lang.String[])</inbound>
            <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainFelix$1.run()</inbound>
            <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainFelix$1.val$args</inbound>
            <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainFelix.ASMainFelix(java.util.logging.Logger, java.lang.String[])</inbound>
            <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainFelix.FELIX_HOME</inbound>
            <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainFelix.addFrameworkJars(com.sun.enterprise.glassfish.bootstrap.ClassPathBuilder)</inbound>
            <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainFelix.getFWMainClassName()</inbound>
            <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainFelix.launchOSGiFW()</inbound>
            <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainFelix.setFwDir()</inbound>
            <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainHelper$PlainJarRepository.ASMainHelper$PlainJarRepository(com.sun.enterprise.glassfish.bootstrap.ASMainHelper, java.lang.String, java.io.File)</inbound>
            <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainHelper.DEFAULT_DOMAINS_DIR_PROPNAME</inbound>
            <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainHelper.INSTANCE_ROOT_PROP_NAME</inbound>
            <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainHelper.addPaths(java.io.File, java.lang.String[], java.util.List)</inbound>
            <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainHelper.getAsEnvConf(java.io.File)</inbound>
            <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainHelper.getDefaultDomain(java.io.File)</inbound>
            <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainHelper.getDefaultDomainsDir()</inbound>
            <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainHelper.getDomainRoot(com.sun.enterprise.module.bootstrap.StartupContext)</inbound>
            <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainHelper.getJDKToolsJar()</inbound>
            <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainHelper.getJDKToolsRepo()</inbound>
            <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainHelper.getParam(java.util.Properties, java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainHelper.ok(java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainHelper.parseAsEnv(java.io.File)</inbound>
            <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainHelper.setupSharedCL(java.lang.ClassLoader, java.util.List, java.util.List)</inbound>
            <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainHelper.verifyAndSetDomainRoot(java.io.File)</inbound>
            <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainKnopflerFish$1.ASMainKnopflerFish$1(com.sun.enterprise.glassfish.bootstrap.ASMainKnopflerFish, java.lang.reflect.Method, java.lang.String[])</inbound>
            <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainKnopflerFish$1.run()</inbound>
            <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainKnopflerFish$1.val$args</inbound>
            <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainKnopflerFish.ASMainKnopflerFish(java.util.logging.Logger, java.lang.String[])</inbound>
            <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainKnopflerFish.addFrameworkJars(com.sun.enterprise.glassfish.bootstrap.ClassPathBuilder)</inbound>
            <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainKnopflerFish.getFWMainClassName()</inbound>
            <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainKnopflerFish.launchOSGiFW()</inbound>
            <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainKnopflerFish.setFwDir()</inbound>
            <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainOSGi.ASMainOSGi(java.lang.String[])</inbound>
            <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainOSGi.ASMainOSGi(java.util.logging.Logger, java.lang.String[])</inbound>
            <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainOSGi.addJDKToolsJar(com.sun.enterprise.glassfish.bootstrap.ClassPathBuilder)</inbound>
            <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainOSGi.additionalJars</inbound>
            <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainOSGi.findDerbyClient(com.sun.enterprise.glassfish.bootstrap.ClassPathBuilder)</inbound>
            <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainOSGi.setStartupContextProperties(java.util.logging.Logger, java.lang.String[])</inbound>
            <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainOSGi.setSystemProperties()</inbound>
            <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainOSGi.setupLauncherClassLoader()</inbound>
            <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainStatic$1.run()</inbound>
            <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainStatic$2.getModules(java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainStatic$2.makeModuleFor(java.lang.String, java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainStatic$2.parseInhabitants(com.sun.enterprise.module.Module, java.lang.String, com.sun.hk2.component.InhabitantsParser)</inbound>
            <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainStatic$3$1.createHabitat(com.sun.enterprise.module.ModulesRegistry, com.sun.enterprise.module.bootstrap.StartupContext)</inbound>
            <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainStatic$3.run()</inbound>
            <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainStatic.ASMainStatic(java.util.logging.Logger, java.lang.String[])</inbound>
            <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainStatic.args</inbound>
            <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainStatic.findDerbyClient(java.util.List)</inbound>
            <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainStatic.run()</inbound>
            <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainStatic.start(java.lang.String[])</inbound>
            <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.AbstractMain.findBootstrapFile()</inbound>
            <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.AbstractMain.flushAndCreate(java.io.File, long)</inbound>
            <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.AbstractMain.isCacheOutdated(long, java.io.File)</inbound>
            <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.AbstractMain.loadCacheInformation(java.io.File)</inbound>
            <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.AbstractMain.parse(java.util.Properties, java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.AbstractMain.saveCacheInformation(java.io.File, java.lang.String, long)</inbound>
            <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ClassPathBuilder$1.ClassPathBuilder$1(com.sun.enterprise.glassfish.bootstrap.ClassPathBuilder, java.lang.String[])</inbound>
            <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ClassPathBuilder$1.accept(java.io.File)</inbound>
            <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ClassPathBuilder$1.val$excludes</inbound>
            <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ClassPathBuilder.addGlob(java.io.File, java.lang.String[])</inbound>
            <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ClassPathBuilder.addJar(java.io.File)</inbound>
            <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ClassPathBuilder.addJarFolder(java.io.File, java.lang.String[])</inbound>
            <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ExtensibleClassLoader.ExtensibleClassLoader(java.net.URL[], java.lang.ClassLoader, java.util.List)</inbound>
            <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ExtensibleClassLoader.addURI(java.net.URI)</inbound>
            <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ExtensibleClassLoader.added(java.net.URI)</inbound>
            <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ExtensibleClassLoader.static {}</inbound>
            <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.GFRepository.GFRepository(java.lang.String, java.io.File)</inbound>
            <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.MaskingClassLoader$1.MaskingClassLoader$1(com.sun.enterprise.glassfish.bootstrap.MaskingClassLoader, java.lang.String[])</inbound>
            <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.MaskingClassLoader$1.loadClass(java.lang.String, boolean)</inbound>
            <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.MaskingClassLoader$1.val$masks</inbound>
            <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.MaskingClassLoader.MaskingClassLoader(java.lang.ClassLoader, java.net.URL[], java.lang.String[])</inbound>
            <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.MaskingClassLoader.MaskingClassLoader(java.lang.ClassLoader, java.net.URL[], java.util.Collection)</inbound>
            <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.MaskingClassLoader.getMaskingClassLoader(java.lang.String[])</inbound>
            <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.MaskingClassLoader.loadClass(java.lang.String, boolean)</inbound>
            <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.MaskingClassLoader.masks</inbound>
            <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ProxyModule.getName()</inbound>
            <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ProxyModule.getProvidersClass(java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ProxyModuleDefinition.EMPTY_STRING_ARRAY</inbound>
            <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ProxyModuleDefinition.ProxyModuleDefinition(java.lang.ClassLoader, java.util.Collection)</inbound>
            <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ProxyModuleDefinition.getImportPolicyClassName()</inbound>
            <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ProxyModuleDefinition.getLifecyclePolicyClassName()</inbound>
            <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ProxyModuleDefinition.getName()</inbound>
            <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ProxyModuleDefinition.getPublicInterfaces()</inbound>
            <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ProxyModuleDefinition.getVersion()</inbound>
            <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ProxyModuleDefinition.readFully(java.net.URL)</inbound>
            <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ProxyModuleDefinition.static {}</inbound>
            <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.Rejar$2.accept(java.io.File)</inbound>
            <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.Rejar.copy(byte[], java.lang.String, java.util.jar.JarOutputStream)</inbound>
            <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.Rejar.copy(java.util.jar.JarFile, java.util.jar.JarEntry, java.util.jar.JarOutputStream)</inbound>
            <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.Rejar.processDirectory(java.util.jar.JarOutputStream, java.io.File, java.util.Set, java.util.Map)</inbound>
            <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.Rejar.rejar(java.io.File, java.io.File)</inbound>
            <feature confirmed="no">
                <name>java.lang.String.compareTo(java.lang.String)</name>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainOSGi.findDerbyClient(com.sun.enterprise.glassfish.bootstrap.ClassPathBuilder)</inbound>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainStatic.findDerbyClient(java.util.List)</inbound>
            </feature>
            <feature confirmed="no">
                <name>java.lang.String.endsWith(java.lang.String)</name>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainHelper.addPaths(java.io.File, java.lang.String[], java.util.List)</inbound>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ClassPathBuilder$1.accept(java.io.File)</inbound>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.Rejar$2.accept(java.io.File)</inbound>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.Rejar.processDirectory(java.util.jar.JarOutputStream, java.io.File, java.util.Set, java.util.Map)</inbound>
            </feature>
            <feature confirmed="no">
                <name>java.lang.String.equals(java.lang.Object)</name>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.AbstractMain.isCacheOutdated(long, java.io.File)</inbound>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.AbstractMain.loadCacheInformation(java.io.File)</inbound>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ClassPathBuilder$1.accept(java.io.File)</inbound>
            </feature>
            <feature confirmed="no">
                <name>java.lang.String.getBytes()</name>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.Rejar.processDirectory(java.util.jar.JarOutputStream, java.io.File, java.util.Set, java.util.Map)</inbound>
            </feature>
            <feature confirmed="no">
                <name>java.lang.String.indexOf(java.lang.String)</name>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainHelper.getAsEnvConf(java.io.File)</inbound>
            </feature>
            <feature confirmed="no">
                <name>java.lang.String.length()</name>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMain.main(java.lang.String[])</inbound>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainHelper.ok(java.lang.String)</inbound>
            </feature>
            <feature confirmed="no">
                <name>java.lang.String.replace(java.lang.CharSequence, java.lang.CharSequence)</name>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ClassPathBuilder.addGlob(java.io.File, java.lang.String[])</inbound>
            </feature>
            <feature confirmed="no">
                <name>java.lang.String.startsWith(java.lang.String)</name>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainHelper.addPaths(java.io.File, java.lang.String[], java.util.List)</inbound>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.MaskingClassLoader$1.loadClass(java.lang.String, boolean)</inbound>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.MaskingClassLoader.loadClass(java.lang.String, boolean)</inbound>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.Rejar.processDirectory(java.util.jar.JarOutputStream, java.io.File, java.util.Set, java.util.Map)</inbound>
            </feature>
            <feature confirmed="no">
                <name>java.lang.String.trim()</name>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMain.main(java.lang.String[])</inbound>
            </feature>
        </class>
        <class confirmed="no">
            <name>java.lang.StringBuilder</name>
            <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainEquinox.setFwDir()</inbound>
            <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainFelix.setFwDir()</inbound>
            <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainHelper.getDefaultDomain(java.io.File)</inbound>
            <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainHelper.getDefaultDomainsDir()</inbound>
            <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainHelper.getJDKToolsJar()</inbound>
            <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainHelper.getParam(java.util.Properties, java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainHelper.setupSharedCL(java.lang.ClassLoader, java.util.List, java.util.List)</inbound>
            <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainKnopflerFish.setFwDir()</inbound>
            <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainOSGi.addJDKToolsJar(com.sun.enterprise.glassfish.bootstrap.ClassPathBuilder)</inbound>
            <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.AbstractMain.findBootstrapFile()</inbound>
            <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.AbstractMain.flushAndCreate(java.io.File, long)</inbound>
            <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.AbstractMain.loadCacheInformation(java.io.File)</inbound>
            <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.AbstractMain.saveCacheInformation(java.io.File, java.lang.String, long)</inbound>
            <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ClassPathBuilder.addGlob(java.io.File, java.lang.String[])</inbound>
            <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ClassPathBuilder.addJar(java.io.File)</inbound>
            <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ClassPathBuilder.addJarFolder(java.io.File, java.lang.String[])</inbound>
            <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ExtensibleClassLoader.ExtensibleClassLoader(java.net.URL[], java.lang.ClassLoader, java.util.List)</inbound>
            <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ExtensibleClassLoader.added(java.net.URI)</inbound>
            <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ProxyModuleDefinition.ProxyModuleDefinition(java.lang.ClassLoader, java.util.Collection)</inbound>
            <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ProxyModuleDefinition.readFully(java.net.URL)</inbound>
            <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.Rejar.processDirectory(java.util.jar.JarOutputStream, java.io.File, java.util.Set, java.util.Map)</inbound>
            <feature confirmed="no">
                <name>java.lang.StringBuilder.StringBuilder()</name>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainEquinox.setFwDir()</inbound>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainFelix.setFwDir()</inbound>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainHelper.getDefaultDomain(java.io.File)</inbound>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainHelper.getDefaultDomainsDir()</inbound>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainHelper.getJDKToolsJar()</inbound>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainHelper.getParam(java.util.Properties, java.lang.String)</inbound>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainHelper.setupSharedCL(java.lang.ClassLoader, java.util.List, java.util.List)</inbound>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainKnopflerFish.setFwDir()</inbound>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainOSGi.addJDKToolsJar(com.sun.enterprise.glassfish.bootstrap.ClassPathBuilder)</inbound>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.AbstractMain.findBootstrapFile()</inbound>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.AbstractMain.flushAndCreate(java.io.File, long)</inbound>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.AbstractMain.loadCacheInformation(java.io.File)</inbound>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.AbstractMain.saveCacheInformation(java.io.File, java.lang.String, long)</inbound>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ClassPathBuilder.addGlob(java.io.File, java.lang.String[])</inbound>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ClassPathBuilder.addJar(java.io.File)</inbound>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ClassPathBuilder.addJarFolder(java.io.File, java.lang.String[])</inbound>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ExtensibleClassLoader.ExtensibleClassLoader(java.net.URL[], java.lang.ClassLoader, java.util.List)</inbound>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ExtensibleClassLoader.added(java.net.URI)</inbound>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ProxyModuleDefinition.ProxyModuleDefinition(java.lang.ClassLoader, java.util.Collection)</inbound>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ProxyModuleDefinition.readFully(java.net.URL)</inbound>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.Rejar.processDirectory(java.util.jar.JarOutputStream, java.io.File, java.util.Set, java.util.Map)</inbound>
            </feature>
            <feature confirmed="no">
                <name>java.lang.StringBuilder.append(char)</name>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ClassPathBuilder.addGlob(java.io.File, java.lang.String[])</inbound>
            </feature>
            <feature confirmed="no">
                <name>java.lang.StringBuilder.append(java.lang.Object)</name>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainHelper.getDefaultDomain(java.io.File)</inbound>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainOSGi.addJDKToolsJar(com.sun.enterprise.glassfish.bootstrap.ClassPathBuilder)</inbound>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.AbstractMain.findBootstrapFile()</inbound>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.AbstractMain.flushAndCreate(java.io.File, long)</inbound>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ClassPathBuilder.addJar(java.io.File)</inbound>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ClassPathBuilder.addJarFolder(java.io.File, java.lang.String[])</inbound>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ExtensibleClassLoader.ExtensibleClassLoader(java.net.URL[], java.lang.ClassLoader, java.util.List)</inbound>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ExtensibleClassLoader.added(java.net.URI)</inbound>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ProxyModuleDefinition.readFully(java.net.URL)</inbound>
            </feature>
            <feature confirmed="no">
                <name>java.lang.StringBuilder.append(java.lang.String)</name>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainEquinox.setFwDir()</inbound>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainFelix.setFwDir()</inbound>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainHelper.getDefaultDomain(java.io.File)</inbound>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainHelper.getDefaultDomainsDir()</inbound>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainHelper.getJDKToolsJar()</inbound>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainHelper.getParam(java.util.Properties, java.lang.String)</inbound>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainHelper.setupSharedCL(java.lang.ClassLoader, java.util.List, java.util.List)</inbound>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainKnopflerFish.setFwDir()</inbound>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainOSGi.addJDKToolsJar(com.sun.enterprise.glassfish.bootstrap.ClassPathBuilder)</inbound>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.AbstractMain.findBootstrapFile()</inbound>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.AbstractMain.flushAndCreate(java.io.File, long)</inbound>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.AbstractMain.loadCacheInformation(java.io.File)</inbound>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.AbstractMain.saveCacheInformation(java.io.File, java.lang.String, long)</inbound>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ClassPathBuilder.addGlob(java.io.File, java.lang.String[])</inbound>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ClassPathBuilder.addJar(java.io.File)</inbound>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ClassPathBuilder.addJarFolder(java.io.File, java.lang.String[])</inbound>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ExtensibleClassLoader.ExtensibleClassLoader(java.net.URL[], java.lang.ClassLoader, java.util.List)</inbound>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ExtensibleClassLoader.added(java.net.URI)</inbound>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ProxyModuleDefinition.ProxyModuleDefinition(java.lang.ClassLoader, java.util.Collection)</inbound>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ProxyModuleDefinition.readFully(java.net.URL)</inbound>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.Rejar.processDirectory(java.util.jar.JarOutputStream, java.io.File, java.util.Set, java.util.Map)</inbound>
            </feature>
            <feature confirmed="no">
                <name>java.lang.StringBuilder.length()</name>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ClassPathBuilder.addGlob(java.io.File, java.lang.String[])</inbound>
            </feature>
            <feature confirmed="no">
                <name>java.lang.StringBuilder.toString()</name>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainEquinox.setFwDir()</inbound>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainFelix.setFwDir()</inbound>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainHelper.getDefaultDomain(java.io.File)</inbound>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainHelper.getDefaultDomainsDir()</inbound>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainHelper.getJDKToolsJar()</inbound>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainHelper.getParam(java.util.Properties, java.lang.String)</inbound>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainHelper.setupSharedCL(java.lang.ClassLoader, java.util.List, java.util.List)</inbound>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainKnopflerFish.setFwDir()</inbound>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainOSGi.addJDKToolsJar(com.sun.enterprise.glassfish.bootstrap.ClassPathBuilder)</inbound>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.AbstractMain.findBootstrapFile()</inbound>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.AbstractMain.flushAndCreate(java.io.File, long)</inbound>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.AbstractMain.loadCacheInformation(java.io.File)</inbound>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.AbstractMain.saveCacheInformation(java.io.File, java.lang.String, long)</inbound>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ClassPathBuilder.addGlob(java.io.File, java.lang.String[])</inbound>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ClassPathBuilder.addJar(java.io.File)</inbound>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ClassPathBuilder.addJarFolder(java.io.File, java.lang.String[])</inbound>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ExtensibleClassLoader.ExtensibleClassLoader(java.net.URL[], java.lang.ClassLoader, java.util.List)</inbound>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ExtensibleClassLoader.added(java.net.URI)</inbound>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ProxyModuleDefinition.ProxyModuleDefinition(java.lang.ClassLoader, java.util.Collection)</inbound>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ProxyModuleDefinition.readFully(java.net.URL)</inbound>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.Rejar.processDirectory(java.util.jar.JarOutputStream, java.io.File, java.util.Set, java.util.Map)</inbound>
            </feature>
        </class>
        <class confirmed="no">
            <name>java.lang.String[]</name>
            <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.MaskingClassLoader.MaskingClassLoader(java.lang.ClassLoader, java.net.URL[], java.util.Collection)</inbound>
        </class>
        <class confirmed="no">
            <name>java.lang.System</name>
            <feature confirmed="no">
                <name>java.lang.System.currentTimeMillis()</name>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainOSGi.setStartupContextProperties(java.util.logging.Logger, java.lang.String[])</inbound>
            </feature>
            <feature confirmed="no">
                <name>java.lang.System.getProperties()</name>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainHelper.parseAsEnv(java.io.File)</inbound>
            </feature>
            <feature confirmed="no">
                <name>java.lang.System.getProperty(java.lang.String)</name>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMain.main(java.lang.String[])</inbound>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainHelper.getAsEnvConf(java.io.File)</inbound>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainHelper.getDefaultDomainsDir()</inbound>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainHelper.getJDKToolsJar()</inbound>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainOSGi.findDerbyClient(com.sun.enterprise.glassfish.bootstrap.ClassPathBuilder)</inbound>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainOSGi.setSystemProperties()</inbound>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainStatic.findDerbyClient(java.util.List)</inbound>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainStatic.start(java.lang.String[])</inbound>
            </feature>
            <feature confirmed="no">
                <name>java.lang.System.getProperty(java.lang.String, java.lang.String)</name>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainFelix.setFwDir()</inbound>
            </feature>
            <feature confirmed="no">
                <name>java.lang.System.getenv(java.lang.String)</name>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMain.main(java.lang.String[])</inbound>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainEquinox.setFwDir()</inbound>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainFelix.setFwDir()</inbound>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainKnopflerFish.setFwDir()</inbound>
            </feature>
            <feature confirmed="no">
                <name>java.lang.System.setProperties(java.util.Properties)</name>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainHelper.parseAsEnv(java.io.File)</inbound>
            </feature>
            <feature confirmed="no">
                <name>java.lang.System.setProperty(java.lang.String, java.lang.String)</name>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMain.main(java.lang.String[])</inbound>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainEquinox.launchOSGiFW()</inbound>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainFelix.launchOSGiFW()</inbound>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainHelper.verifyAndSetDomainRoot(java.io.File)</inbound>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainKnopflerFish.launchOSGiFW()</inbound>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainOSGi.setStartupContextProperties(java.util.logging.Logger, java.lang.String[])</inbound>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainOSGi.setSystemProperties()</inbound>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainStatic.start(java.lang.String[])</inbound>
            </feature>
        </class>
        <class confirmed="no">
            <name>java.lang.Thread</name>
            <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainOSGi.setupLauncherClassLoader()</inbound>
            <feature confirmed="no">
                <name>java.lang.Thread.Thread(java.lang.Runnable)</name>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainStatic.start(java.lang.String[])</inbound>
            </feature>
            <feature confirmed="no">
                <name>java.lang.Thread.Thread(java.lang.Runnable, java.lang.String)</name>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainEquinox.launchOSGiFW()</inbound>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainFelix.launchOSGiFW()</inbound>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainKnopflerFish.launchOSGiFW()</inbound>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainStatic.start(java.lang.String[])</inbound>
            </feature>
            <feature confirmed="no">
                <name>java.lang.Thread.currentThread()</name>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainOSGi.setupLauncherClassLoader()</inbound>
            </feature>
            <feature confirmed="no">
                <name>java.lang.Thread.join()</name>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainEquinox.launchOSGiFW()</inbound>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainFelix.launchOSGiFW()</inbound>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainKnopflerFish.launchOSGiFW()</inbound>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainStatic.start(java.lang.String[])</inbound>
            </feature>
            <feature confirmed="no">
                <name>java.lang.Thread.setContextClassLoader(java.lang.ClassLoader)</name>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainOSGi.setupLauncherClassLoader()</inbound>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainStatic.start(java.lang.String[])</inbound>
            </feature>
            <feature confirmed="no">
                <name>java.lang.Thread.setDaemon(boolean)</name>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainFelix.launchOSGiFW()</inbound>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainStatic.start(java.lang.String[])</inbound>
            </feature>
            <feature confirmed="no">
                <name>java.lang.Thread.start()</name>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainEquinox.launchOSGiFW()</inbound>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainFelix.launchOSGiFW()</inbound>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainKnopflerFish.launchOSGiFW()</inbound>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainStatic.start(java.lang.String[])</inbound>
            </feature>
        </class>
        <class confirmed="no">
            <name>java.lang.Throwable</name>
            <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainEquinox$1.run()</inbound>
            <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainFelix$1.run()</inbound>
            <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainHelper.getJDKToolsRepo()</inbound>
            <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainHelper.parseAsEnv(java.io.File)</inbound>
            <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainKnopflerFish$1.run()</inbound>
            <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainOSGi.addJDKToolsJar(com.sun.enterprise.glassfish.bootstrap.ClassPathBuilder)</inbound>
            <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainOSGi.run()</inbound>
            <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainOSGi.setupLauncherClassLoader()</inbound>
            <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainStatic$1.run()</inbound>
            <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainStatic$3.run()</inbound>
            <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainStatic.run()</inbound>
            <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainStatic.start(java.lang.String[])</inbound>
            <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.AbstractMain.flushAndCreate(java.io.File, long)</inbound>
            <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.AbstractMain.isCacheOutdated(long, java.io.File)</inbound>
            <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ExtensibleClassLoader.addURI(java.net.URI)</inbound>
            <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ProxyModuleDefinition.readFully(java.net.URL)</inbound>
            <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.Rejar.processDirectory(java.util.jar.JarOutputStream, java.io.File, java.util.Set, java.util.Map)</inbound>
        </class>
    </package>
    <package confirmed="no">
        <name>java.lang.reflect</name>
        <class confirmed="no">
            <name>java.lang.reflect.InvocationTargetException</name>
            <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainEquinox$1.run()</inbound>
            <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainFelix$1.run()</inbound>
            <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainKnopflerFish$1.run()</inbound>
        </class>
        <class confirmed="no">
            <name>java.lang.reflect.Method</name>
            <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainEquinox$1.ASMainEquinox$1(com.sun.enterprise.glassfish.bootstrap.ASMainEquinox, java.lang.reflect.Method, java.lang.String[])</inbound>
            <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainEquinox$1.run()</inbound>
            <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainEquinox$1.val$m</inbound>
            <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainEquinox.launchOSGiFW()</inbound>
            <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainFelix$1.ASMainFelix$1(com.sun.enterprise.glassfish.bootstrap.ASMainFelix, java.lang.reflect.Method, java.lang.String[])</inbound>
            <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainFelix$1.run()</inbound>
            <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainFelix$1.val$m</inbound>
            <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainFelix.launchOSGiFW()</inbound>
            <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainKnopflerFish$1.ASMainKnopflerFish$1(com.sun.enterprise.glassfish.bootstrap.ASMainKnopflerFish, java.lang.reflect.Method, java.lang.String[])</inbound>
            <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainKnopflerFish$1.run()</inbound>
            <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainKnopflerFish$1.val$m</inbound>
            <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainKnopflerFish.launchOSGiFW()</inbound>
            <feature confirmed="no">
                <name>java.lang.reflect.Method.invoke(java.lang.Object, java.lang.Object[])</name>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainEquinox$1.run()</inbound>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainFelix$1.run()</inbound>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainKnopflerFish$1.run()</inbound>
            </feature>
        </class>
    </package>
    <package confirmed="no">
        <name>java.net</name>
        <class confirmed="no">
            <name>java.net.MalformedURLException</name>
            <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainHelper.addPaths(java.io.File, java.lang.String[], java.util.List)</inbound>
            <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainHelper.setupSharedCL(java.lang.ClassLoader, java.util.List, java.util.List)</inbound>
            <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainOSGi.setSystemProperties()</inbound>
            <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.AbstractMain.flushAndCreate(java.io.File, long)</inbound>
            <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.AbstractMain.isCacheOutdated(long, java.io.File)</inbound>
            <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ExtensibleClassLoader.addURI(java.net.URI)</inbound>
            <feature confirmed="no">
                <name>java.net.MalformedURLException.getMessage()</name>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainHelper.setupSharedCL(java.lang.ClassLoader, java.util.List, java.util.List)</inbound>
            </feature>
        </class>
        <class confirmed="no">
            <name>java.net.URI</name>
            <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainFelix.launchOSGiFW()</inbound>
            <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainHelper$PlainJarRepository.ASMainHelper$PlainJarRepository(com.sun.enterprise.glassfish.bootstrap.ASMainHelper, java.lang.String, java.io.File)</inbound>
            <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainHelper$PlainJarRepository.loadModuleDefs(java.util.Map, java.util.List)</inbound>
            <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainHelper.addPaths(java.io.File, java.lang.String[], java.util.List)</inbound>
            <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainHelper.setupSharedCL(java.lang.ClassLoader, java.util.List, java.util.List)</inbound>
            <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainKnopflerFish.launchOSGiFW()</inbound>
            <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainOSGi.setSystemProperties()</inbound>
            <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainStatic.createClassLoader(java.io.File)</inbound>
            <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainStatic.findDerbyClient(java.util.List)</inbound>
            <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainStatic.insertURLs(java.io.File, java.util.List)</inbound>
            <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainStatic.start(java.lang.String[])</inbound>
            <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.AbstractMain.flushAndCreate(java.io.File, long)</inbound>
            <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.AbstractMain.isCacheOutdated(long, java.io.File)</inbound>
            <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.AbstractMain.loadCacheInformation(java.io.File)</inbound>
            <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.AbstractMain.saveCacheInformation(java.io.File, java.lang.String, long)</inbound>
            <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ClassPathBuilder.addJar(java.io.File)</inbound>
            <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ExtensibleClassLoader.ExtensibleClassLoader(java.net.URL[], java.lang.ClassLoader, java.util.List)</inbound>
            <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ExtensibleClassLoader.addURI(java.net.URI)</inbound>
            <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ExtensibleClassLoader.added(java.net.URI)</inbound>
            <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ExtensibleClassLoader.jarAdded(java.net.URI)</inbound>
            <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ExtensibleClassLoader.jarRemoved(java.net.URI)</inbound>
            <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ExtensibleClassLoader.removed(java.net.URI)</inbound>
            <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ProxyModuleDefinition.EMPTY_URI_ARRAY</inbound>
            <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ProxyModuleDefinition.getLocations()</inbound>
            <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ProxyModuleDefinition.static {}</inbound>
            <feature confirmed="no">
                <name>java.net.URI.toString()</name>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainKnopflerFish.launchOSGiFW()</inbound>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainOSGi.setSystemProperties()</inbound>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainStatic.start(java.lang.String[])</inbound>
            </feature>
            <feature confirmed="no">
                <name>java.net.URI.toURL()</name>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainFelix.launchOSGiFW()</inbound>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainHelper.addPaths(java.io.File, java.lang.String[], java.util.List)</inbound>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainHelper.setupSharedCL(java.lang.ClassLoader, java.util.List, java.util.List)</inbound>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainKnopflerFish.launchOSGiFW()</inbound>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainStatic.createClassLoader(java.io.File)</inbound>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainStatic.findDerbyClient(java.util.List)</inbound>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainStatic.insertURLs(java.io.File, java.util.List)</inbound>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.AbstractMain.flushAndCreate(java.io.File, long)</inbound>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.AbstractMain.isCacheOutdated(long, java.io.File)</inbound>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.AbstractMain.loadCacheInformation(java.io.File)</inbound>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.AbstractMain.saveCacheInformation(java.io.File, java.lang.String, long)</inbound>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ClassPathBuilder.addJar(java.io.File)</inbound>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ExtensibleClassLoader.addURI(java.net.URI)</inbound>
            </feature>
        </class>
        <class confirmed="no">
            <name>java.net.URL</name>
            <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainFelix.launchOSGiFW()</inbound>
            <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainHelper.addPaths(java.io.File, java.lang.String[], java.util.List)</inbound>
            <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainHelper.setupSharedCL(java.lang.ClassLoader, java.util.List, java.util.List)</inbound>
            <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainKnopflerFish.launchOSGiFW()</inbound>
            <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainStatic.createClassLoader(java.io.File)</inbound>
            <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainStatic.createTmpClassLoader(java.io.File)</inbound>
            <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainStatic.findDerbyClient(java.util.List)</inbound>
            <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainStatic.insertURLs(java.io.File, java.util.List)</inbound>
            <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.AbstractMain.flushAndCreate(java.io.File, long)</inbound>
            <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.AbstractMain.isCacheOutdated(long, java.io.File)</inbound>
            <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.AbstractMain.loadCacheInformation(java.io.File)</inbound>
            <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.AbstractMain.saveCacheInformation(java.io.File, java.lang.String, long)</inbound>
            <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ClassPathBuilder.addJar(java.io.File)</inbound>
            <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ClassPathBuilder.create()</inbound>
            <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ClassPathBuilder.createExtensible(java.util.List)</inbound>
            <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ExtensibleClassLoader.ExtensibleClassLoader(java.net.URL[], java.lang.ClassLoader, java.util.List)</inbound>
            <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ExtensibleClassLoader.addURI(java.net.URI)</inbound>
            <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.MaskingClassLoader.MaskingClassLoader(java.lang.ClassLoader, java.net.URL[], java.lang.String[])</inbound>
            <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.MaskingClassLoader.MaskingClassLoader(java.lang.ClassLoader, java.net.URL[], java.util.Collection)</inbound>
            <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ProxyModuleDefinition.ProxyModuleDefinition(java.lang.ClassLoader, java.util.Collection)</inbound>
            <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ProxyModuleDefinition.readFully(java.net.URL)</inbound>
            <feature confirmed="no">
                <name>java.net.URL.openConnection()</name>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ProxyModuleDefinition.readFully(java.net.URL)</inbound>
            </feature>
            <feature confirmed="no">
                <name>java.net.URL.toString()</name>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainFelix.launchOSGiFW()</inbound>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainKnopflerFish.launchOSGiFW()</inbound>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.AbstractMain.flushAndCreate(java.io.File, long)</inbound>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.AbstractMain.isCacheOutdated(long, java.io.File)</inbound>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.AbstractMain.loadCacheInformation(java.io.File)</inbound>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.AbstractMain.saveCacheInformation(java.io.File, java.lang.String, long)</inbound>
            </feature>
        </class>
        <class confirmed="no">
            <name>java.net.URLClassLoader</name>
            <inbound type="class" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ExtensibleClassLoader</inbound>
            <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.MaskingClassLoader.MaskingClassLoader(java.lang.ClassLoader, java.net.URL[], java.lang.String[])</inbound>
            <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.MaskingClassLoader.delegate</inbound>
            <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.MaskingClassLoader.loadClass(java.lang.String, boolean)</inbound>
            <feature confirmed="no">
                <name>java.net.URLClassLoader.URLClassLoader(java.net.URL[], java.lang.ClassLoader)</name>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainStatic.createClassLoader(java.io.File)</inbound>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainStatic.createTmpClassLoader(java.io.File)</inbound>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ClassPathBuilder.create()</inbound>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ExtensibleClassLoader.ExtensibleClassLoader(java.net.URL[], java.lang.ClassLoader, java.util.List)</inbound>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.MaskingClassLoader.MaskingClassLoader(java.lang.ClassLoader, java.net.URL[], java.lang.String[])</inbound>
            </feature>
            <feature confirmed="no">
                <name>java.net.URLClassLoader.addURL(java.net.URL)</name>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ExtensibleClassLoader.addURI(java.net.URI)</inbound>
            </feature>
            <feature confirmed="no">
                <name>java.net.URLClassLoader.loadClass(java.lang.String)</name>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.MaskingClassLoader.loadClass(java.lang.String, boolean)</inbound>
            </feature>
        </class>
        <class confirmed="no">
            <name>java.net.URLConnection</name>
            <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ProxyModuleDefinition.readFully(java.net.URL)</inbound>
            <feature confirmed="no">
                <name>java.net.URLConnection.getContentLength()</name>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ProxyModuleDefinition.readFully(java.net.URL)</inbound>
            </feature>
            <feature confirmed="no">
                <name>java.net.URLConnection.getInputStream()</name>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ProxyModuleDefinition.readFully(java.net.URL)</inbound>
            </feature>
        </class>
        <class confirmed="no">
            <name>java.net.URL[]</name>
            <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainStatic.createClassLoader(java.io.File)</inbound>
            <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainStatic.createTmpClassLoader(java.io.File)</inbound>
            <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ClassPathBuilder.create()</inbound>
            <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ClassPathBuilder.createExtensible(java.util.List)</inbound>
        </class>
    </package>
    <package confirmed="no">
        <name>java.nio</name>
        <class confirmed="no">
            <name>java.nio.Buffer</name>
            <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.Rejar.copy(java.util.jar.JarFile, java.util.jar.JarEntry, java.nio.channels.WritableByteChannel)</inbound>
        </class>
        <class confirmed="no">
            <name>java.nio.ByteBuffer</name>
            <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.Rejar.copy(java.util.jar.JarFile, java.util.jar.JarEntry, java.nio.channels.WritableByteChannel)</inbound>
            <feature confirmed="no">
                <name>java.nio.ByteBuffer.allocate(int)</name>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.Rejar.copy(java.util.jar.JarFile, java.util.jar.JarEntry, java.nio.channels.WritableByteChannel)</inbound>
            </feature>
            <feature confirmed="no">
                <name>java.nio.ByteBuffer.rewind()</name>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.Rejar.copy(java.util.jar.JarFile, java.util.jar.JarEntry, java.nio.channels.WritableByteChannel)</inbound>
            </feature>
        </class>
    </package>
    <package confirmed="no">
        <name>java.nio.channels</name>
        <class confirmed="no">
            <name>java.nio.channels.Channels</name>
            <feature confirmed="no">
                <name>java.nio.channels.Channels.newChannel(java.io.InputStream)</name>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.Rejar.copy(java.util.jar.JarFile, java.util.jar.JarEntry, java.nio.channels.WritableByteChannel)</inbound>
            </feature>
            <feature confirmed="no">
                <name>java.nio.channels.Channels.newChannel(java.io.OutputStream)</name>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.Rejar.copy(java.util.jar.JarFile, java.util.jar.JarEntry, java.io.OutputStream)</inbound>
            </feature>
        </class>
        <class confirmed="no">
            <name>java.nio.channels.ReadableByteChannel</name>
            <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.Rejar.copy(java.util.jar.JarFile, java.util.jar.JarEntry, java.nio.channels.WritableByteChannel)</inbound>
            <feature confirmed="no">
                <name>java.nio.channels.ReadableByteChannel.read(java.nio.ByteBuffer)</name>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.Rejar.copy(java.util.jar.JarFile, java.util.jar.JarEntry, java.nio.channels.WritableByteChannel)</inbound>
            </feature>
        </class>
        <class confirmed="no">
            <name>java.nio.channels.WritableByteChannel</name>
            <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.Rejar.copy(java.util.jar.JarFile, java.util.jar.JarEntry, java.io.OutputStream)</inbound>
            <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.Rejar.copy(java.util.jar.JarFile, java.util.jar.JarEntry, java.nio.channels.WritableByteChannel)</inbound>
            <feature confirmed="no">
                <name>java.nio.channels.WritableByteChannel.write(java.nio.ByteBuffer)</name>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.Rejar.copy(java.util.jar.JarFile, java.util.jar.JarEntry, java.nio.channels.WritableByteChannel)</inbound>
            </feature>
        </class>
    </package>
    <package confirmed="no">
        <name>java.util</name>
        <class confirmed="no">
            <name>java.util.ArrayList</name>
            <feature confirmed="no">
                <name>java.util.ArrayList.ArrayList()</name>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainHelper.setupSharedCL(java.lang.ClassLoader, java.util.List, java.util.List)</inbound>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainStatic$2.getModules()</inbound>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainStatic.createClassLoader(java.io.File)</inbound>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainStatic.createTmpClassLoader(java.io.File)</inbound>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ClassPathBuilder.ClassPathBuilder(java.lang.ClassLoader)</inbound>
            </feature>
            <feature confirmed="no">
                <name>java.util.ArrayList.add(java.lang.Object)</name>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainStatic$2.getModules()</inbound>
            </feature>
        </class>
        <class confirmed="no">
            <name>java.util.Collection</name>
            <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainHelper.setupSharedCL(java.lang.ClassLoader, java.util.List, java.util.List)</inbound>
            <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainStatic$2.getModules()</inbound>
            <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainStatic$2.getModules(java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.MaskingClassLoader.MaskingClassLoader(java.lang.ClassLoader, java.net.URL[], java.util.Collection)</inbound>
            <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ProxyModuleDefinition.ProxyModuleDefinition(java.lang.ClassLoader)</inbound>
            <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ProxyModuleDefinition.ProxyModuleDefinition(java.lang.ClassLoader, java.util.Collection)</inbound>
            <feature confirmed="no">
                <name>java.util.Collection.iterator()</name>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ProxyModuleDefinition.ProxyModuleDefinition(java.lang.ClassLoader, java.util.Collection)</inbound>
            </feature>
            <feature confirmed="no">
                <name>java.util.Collection.size()</name>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.MaskingClassLoader.MaskingClassLoader(java.lang.ClassLoader, java.net.URL[], java.util.Collection)</inbound>
            </feature>
            <feature confirmed="no">
                <name>java.util.Collection.toArray(java.lang.Object[])</name>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.MaskingClassLoader.MaskingClassLoader(java.lang.ClassLoader, java.net.URL[], java.util.Collection)</inbound>
            </feature>
        </class>
        <class confirmed="no">
            <name>java.util.Collections</name>
            <feature confirmed="no">
                <name>java.util.Collections.singleton(java.lang.Object)</name>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ProxyModuleDefinition.ProxyModuleDefinition(java.lang.ClassLoader)</inbound>
            </feature>
        </class>
        <class confirmed="no">
            <name>java.util.Enumeration</name>
            <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ProxyModuleDefinition.ProxyModuleDefinition(java.lang.ClassLoader, java.util.Collection)</inbound>
            <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.Rejar.processDirectory(java.util.jar.JarOutputStream, java.io.File, java.util.Set, java.util.Map)</inbound>
            <feature confirmed="no">
                <name>java.util.Enumeration.hasMoreElements()</name>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ProxyModuleDefinition.ProxyModuleDefinition(java.lang.ClassLoader, java.util.Collection)</inbound>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.Rejar.processDirectory(java.util.jar.JarOutputStream, java.io.File, java.util.Set, java.util.Map)</inbound>
            </feature>
            <feature confirmed="no">
                <name>java.util.Enumeration.nextElement()</name>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ProxyModuleDefinition.ProxyModuleDefinition(java.lang.ClassLoader, java.util.Collection)</inbound>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.Rejar.processDirectory(java.util.jar.JarOutputStream, java.io.File, java.util.Set, java.util.Map)</inbound>
            </feature>
        </class>
        <class confirmed="no">
            <name>java.util.HashMap</name>
            <feature confirmed="no">
                <name>java.util.HashMap.HashMap()</name>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.Rejar.rejar(java.io.File, java.io.File)</inbound>
            </feature>
        </class>
        <class confirmed="no">
            <name>java.util.HashSet</name>
            <feature confirmed="no">
                <name>java.util.HashSet.HashSet()</name>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.Rejar.rejar(java.io.File, java.io.File)</inbound>
            </feature>
        </class>
        <class confirmed="no">
            <name>java.util.Iterator</name>
            <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainHelper.setupSharedCL(java.lang.ClassLoader, java.util.List, java.util.List)</inbound>
            <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainStatic$2.parseInhabitants(com.sun.enterprise.module.Module, java.lang.String, com.sun.hk2.component.InhabitantsParser)</inbound>
            <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ExtensibleClassLoader.ExtensibleClassLoader(java.net.URL[], java.lang.ClassLoader, java.util.List)</inbound>
            <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ProxyModuleDefinition.ProxyModuleDefinition(java.lang.ClassLoader, java.util.Collection)</inbound>
            <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.Rejar.rejar(java.io.File, java.io.File)</inbound>
            <feature confirmed="no">
                <name>java.util.Iterator.hasNext()</name>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainHelper.setupSharedCL(java.lang.ClassLoader, java.util.List, java.util.List)</inbound>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainStatic$2.parseInhabitants(com.sun.enterprise.module.Module, java.lang.String, com.sun.hk2.component.InhabitantsParser)</inbound>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ExtensibleClassLoader.ExtensibleClassLoader(java.net.URL[], java.lang.ClassLoader, java.util.List)</inbound>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ProxyModuleDefinition.ProxyModuleDefinition(java.lang.ClassLoader, java.util.Collection)</inbound>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.Rejar.rejar(java.io.File, java.io.File)</inbound>
            </feature>
            <feature confirmed="no">
                <name>java.util.Iterator.next()</name>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainHelper.setupSharedCL(java.lang.ClassLoader, java.util.List, java.util.List)</inbound>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainStatic$2.parseInhabitants(com.sun.enterprise.module.Module, java.lang.String, com.sun.hk2.component.InhabitantsParser)</inbound>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ExtensibleClassLoader.ExtensibleClassLoader(java.net.URL[], java.lang.ClassLoader, java.util.List)</inbound>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ProxyModuleDefinition.ProxyModuleDefinition(java.lang.ClassLoader, java.util.Collection)</inbound>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.Rejar.rejar(java.io.File, java.io.File)</inbound>
            </feature>
        </class>
        <class confirmed="no">
            <name>java.util.List</name>
            <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainHelper$PlainJarRepository.loadModuleDefs(java.util.Map, java.util.List)</inbound>
            <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainHelper.addPaths(java.io.File, java.lang.String[], java.util.List)</inbound>
            <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainHelper.setupSharedCL(java.lang.ClassLoader, java.util.List, java.util.List)</inbound>
            <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainStatic$2.parseInhabitants(com.sun.enterprise.module.Module, java.lang.String, com.sun.hk2.component.InhabitantsParser)</inbound>
            <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainStatic.createClassLoader(java.io.File)</inbound>
            <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainStatic.createTmpClassLoader(java.io.File)</inbound>
            <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainStatic.findDerbyClient(java.util.List)</inbound>
            <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainStatic.insertURLs(java.io.File, java.util.List)</inbound>
            <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ClassPathBuilder.ClassPathBuilder(java.lang.ClassLoader)</inbound>
            <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ClassPathBuilder.addJar(java.io.File)</inbound>
            <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ClassPathBuilder.create()</inbound>
            <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ClassPathBuilder.createExtensible(java.util.List)</inbound>
            <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ClassPathBuilder.urls</inbound>
            <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ExtensibleClassLoader.ExtensibleClassLoader(java.net.URL[], java.lang.ClassLoader, java.util.List)</inbound>
            <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ProxyModule.getImports()</inbound>
            <feature confirmed="no">
                <name>java.util.List.add(java.lang.Object)</name>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainHelper$PlainJarRepository.loadModuleDefs(java.util.Map, java.util.List)</inbound>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainHelper.addPaths(java.io.File, java.lang.String[], java.util.List)</inbound>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainStatic.createClassLoader(java.io.File)</inbound>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainStatic.findDerbyClient(java.util.List)</inbound>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainStatic.insertURLs(java.io.File, java.util.List)</inbound>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ClassPathBuilder.addJar(java.io.File)</inbound>
            </feature>
            <feature confirmed="no">
                <name>java.util.List.addAll(java.util.Collection)</name>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainHelper.setupSharedCL(java.lang.ClassLoader, java.util.List, java.util.List)</inbound>
            </feature>
            <feature confirmed="no">
                <name>java.util.List.iterator()</name>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainHelper.setupSharedCL(java.lang.ClassLoader, java.util.List, java.util.List)</inbound>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainStatic$2.parseInhabitants(com.sun.enterprise.module.Module, java.lang.String, com.sun.hk2.component.InhabitantsParser)</inbound>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ExtensibleClassLoader.ExtensibleClassLoader(java.net.URL[], java.lang.ClassLoader, java.util.List)</inbound>
            </feature>
            <feature confirmed="no">
                <name>java.util.List.size()</name>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainHelper.setupSharedCL(java.lang.ClassLoader, java.util.List, java.util.List)</inbound>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainStatic.createClassLoader(java.io.File)</inbound>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainStatic.createTmpClassLoader(java.io.File)</inbound>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ClassPathBuilder.create()</inbound>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ClassPathBuilder.createExtensible(java.util.List)</inbound>
            </feature>
            <feature confirmed="no">
                <name>java.util.List.toArray(java.lang.Object[])</name>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainStatic.createClassLoader(java.io.File)</inbound>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainStatic.createTmpClassLoader(java.io.File)</inbound>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ClassPathBuilder.create()</inbound>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ClassPathBuilder.createExtensible(java.util.List)</inbound>
            </feature>
        </class>
        <class confirmed="no">
            <name>java.util.Map</name>
            <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainHelper$PlainJarRepository.loadModuleDefs(java.util.Map, java.util.List)</inbound>
            <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainHelper.parseAsEnv(java.io.File)</inbound>
            <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.Rejar.processDirectory(java.util.jar.JarOutputStream, java.io.File, java.util.Set, java.util.Map)</inbound>
            <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.Rejar.rejar(java.io.File, java.io.File)</inbound>
            <feature confirmed="no">
                <name>java.util.Map.entrySet()</name>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.Rejar.rejar(java.io.File, java.io.File)</inbound>
            </feature>
            <feature confirmed="no">
                <name>java.util.Map.get(java.lang.Object)</name>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.Rejar.processDirectory(java.util.jar.JarOutputStream, java.io.File, java.util.Set, java.util.Map)</inbound>
            </feature>
            <feature confirmed="no">
                <name>java.util.Map.put(java.lang.Object, java.lang.Object)</name>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.Rejar.processDirectory(java.util.jar.JarOutputStream, java.io.File, java.util.Set, java.util.Map)</inbound>
            </feature>
        </class>
        <class confirmed="no">
            <name>java.util.Map$Entry</name>
            <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.Rejar.rejar(java.io.File, java.io.File)</inbound>
            <feature confirmed="no">
                <name>java.util.Map$Entry.getKey()</name>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.Rejar.rejar(java.io.File, java.io.File)</inbound>
            </feature>
            <feature confirmed="no">
                <name>java.util.Map$Entry.getValue()</name>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.Rejar.rejar(java.io.File, java.io.File)</inbound>
            </feature>
        </class>
        <class confirmed="no">
            <name>java.util.Properties</name>
            <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainHelper.getDomainRoot(com.sun.enterprise.module.bootstrap.StartupContext)</inbound>
            <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainHelper.getParam(java.util.Properties, java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainHelper.parseAsEnv(java.io.File)</inbound>
            <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainOSGi.setStartupContextProperties(java.util.logging.Logger, java.lang.String[])</inbound>
            <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.AbstractMain.isCacheOutdated(long, java.io.File)</inbound>
            <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.AbstractMain.loadCacheInformation(java.io.File)</inbound>
            <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.AbstractMain.parse(java.util.Properties, java.lang.String)</inbound>
            <feature confirmed="no">
                <name>java.util.Properties.Properties()</name>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainHelper.parseAsEnv(java.io.File)</inbound>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.AbstractMain.loadCacheInformation(java.io.File)</inbound>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.AbstractMain.saveCacheInformation(java.io.File, java.lang.String, long)</inbound>
            </feature>
            <feature confirmed="no">
                <name>java.util.Properties.getProperty(java.lang.String)</name>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainHelper.getParam(java.util.Properties, java.lang.String)</inbound>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.AbstractMain.isCacheOutdated(long, java.io.File)</inbound>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.AbstractMain.loadCacheInformation(java.io.File)</inbound>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.AbstractMain.parse(java.util.Properties, java.lang.String)</inbound>
            </feature>
            <feature confirmed="no">
                <name>java.util.Properties.load(java.io.InputStream)</name>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.AbstractMain.loadCacheInformation(java.io.File)</inbound>
            </feature>
            <feature confirmed="no">
                <name>java.util.Properties.put(java.lang.Object, java.lang.Object)</name>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainHelper.parseAsEnv(java.io.File)</inbound>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainOSGi.setStartupContextProperties(java.util.logging.Logger, java.lang.String[])</inbound>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.AbstractMain.saveCacheInformation(java.io.File, java.lang.String, long)</inbound>
            </feature>
            <feature confirmed="no">
                <name>java.util.Properties.putAll(java.util.Map)</name>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainHelper.parseAsEnv(java.io.File)</inbound>
            </feature>
            <feature confirmed="no">
                <name>java.util.Properties.store(java.io.OutputStream, java.lang.String)</name>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainOSGi.setStartupContextProperties(java.util.logging.Logger, java.lang.String[])</inbound>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.AbstractMain.saveCacheInformation(java.io.File, java.lang.String, long)</inbound>
            </feature>
        </class>
        <class confirmed="no">
            <name>java.util.Set</name>
            <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ProxyModuleDefinition.ProxyModuleDefinition(java.lang.ClassLoader)</inbound>
            <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.Rejar.processDirectory(java.util.jar.JarOutputStream, java.io.File, java.util.Set, java.util.Map)</inbound>
            <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.Rejar.rejar(java.io.File, java.io.File)</inbound>
            <feature confirmed="no">
                <name>java.util.Set.add(java.lang.Object)</name>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.Rejar.processDirectory(java.util.jar.JarOutputStream, java.io.File, java.util.Set, java.util.Map)</inbound>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.Rejar.rejar(java.io.File, java.io.File)</inbound>
            </feature>
            <feature confirmed="no">
                <name>java.util.Set.contains(java.lang.Object)</name>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.Rejar.processDirectory(java.util.jar.JarOutputStream, java.io.File, java.util.Set, java.util.Map)</inbound>
            </feature>
            <feature confirmed="no">
                <name>java.util.Set.iterator()</name>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.Rejar.rejar(java.io.File, java.io.File)</inbound>
            </feature>
        </class>
    </package>
    <package confirmed="no">
        <name>java.util.jar</name>
        <class confirmed="no">
            <name>java.util.jar.Attributes</name>
            <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.Rejar.getManifest()</inbound>
            <feature confirmed="no">
                <name>java.util.jar.Attributes.put(java.lang.Object, java.lang.Object)</name>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.Rejar.getManifest()</inbound>
            </feature>
        </class>
        <class confirmed="no">
            <name>java.util.jar.Attributes$Name</name>
            <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.Rejar.getManifest()</inbound>
            <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.Rejar.rejar(java.io.File, java.io.File)</inbound>
            <feature confirmed="no">
                <name>java.util.jar.Attributes$Name.MAIN_CLASS</name>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.Rejar.getManifest()</inbound>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.Rejar.rejar(java.io.File, java.io.File)</inbound>
            </feature>
            <feature confirmed="no">
                <name>java.util.jar.Attributes$Name.MANIFEST_VERSION</name>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.Rejar.getManifest()</inbound>
            </feature>
            <feature confirmed="no">
                <name>java.util.jar.Attributes$Name.toString()</name>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.Rejar.rejar(java.io.File, java.io.File)</inbound>
            </feature>
        </class>
        <class confirmed="no">
            <name>java.util.jar.JarEntry</name>
            <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.Rejar.copy(java.util.jar.JarFile, java.util.jar.JarEntry, java.io.OutputStream)</inbound>
            <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.Rejar.copy(java.util.jar.JarFile, java.util.jar.JarEntry, java.nio.channels.WritableByteChannel)</inbound>
            <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.Rejar.copy(java.util.jar.JarFile, java.util.jar.JarEntry, java.util.jar.JarOutputStream)</inbound>
            <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.Rejar.processDirectory(java.util.jar.JarOutputStream, java.io.File, java.util.Set, java.util.Map)</inbound>
            <feature confirmed="no">
                <name>java.util.jar.JarEntry.JarEntry(java.lang.String)</name>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.Rejar.copy(byte[], java.lang.String, java.util.jar.JarOutputStream)</inbound>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.Rejar.copy(java.util.jar.JarFile, java.util.jar.JarEntry, java.util.jar.JarOutputStream)</inbound>
            </feature>
            <feature confirmed="no">
                <name>java.util.jar.JarEntry.getName()</name>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.Rejar.copy(java.util.jar.JarFile, java.util.jar.JarEntry, java.util.jar.JarOutputStream)</inbound>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.Rejar.processDirectory(java.util.jar.JarOutputStream, java.io.File, java.util.Set, java.util.Map)</inbound>
            </feature>
            <feature confirmed="no">
                <name>java.util.jar.JarEntry.getSize()</name>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.Rejar.copy(java.util.jar.JarFile, java.util.jar.JarEntry, java.nio.channels.WritableByteChannel)</inbound>
            </feature>
            <feature confirmed="no">
                <name>java.util.jar.JarEntry.isDirectory()</name>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.Rejar.processDirectory(java.util.jar.JarOutputStream, java.io.File, java.util.Set, java.util.Map)</inbound>
            </feature>
        </class>
        <class confirmed="no">
            <name>java.util.jar.JarFile</name>
            <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.Rejar.copy(java.util.jar.JarFile, java.util.jar.JarEntry, java.io.OutputStream)</inbound>
            <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.Rejar.copy(java.util.jar.JarFile, java.util.jar.JarEntry, java.nio.channels.WritableByteChannel)</inbound>
            <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.Rejar.copy(java.util.jar.JarFile, java.util.jar.JarEntry, java.util.jar.JarOutputStream)</inbound>
            <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.Rejar.processDirectory(java.util.jar.JarOutputStream, java.io.File, java.util.Set, java.util.Map)</inbound>
            <feature confirmed="no">
                <name>java.util.jar.JarFile.JarFile(java.io.File)</name>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.Rejar.processDirectory(java.util.jar.JarOutputStream, java.io.File, java.util.Set, java.util.Map)</inbound>
            </feature>
            <feature confirmed="no">
                <name>java.util.jar.JarFile.close()</name>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.Rejar.processDirectory(java.util.jar.JarOutputStream, java.io.File, java.util.Set, java.util.Map)</inbound>
            </feature>
            <feature confirmed="no">
                <name>java.util.jar.JarFile.entries()</name>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.Rejar.processDirectory(java.util.jar.JarOutputStream, java.io.File, java.util.Set, java.util.Map)</inbound>
            </feature>
            <feature confirmed="no">
                <name>java.util.jar.JarFile.getInputStream(java.util.zip.ZipEntry)</name>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.Rejar.copy(java.util.jar.JarFile, java.util.jar.JarEntry, java.nio.channels.WritableByteChannel)</inbound>
            </feature>
        </class>
        <class confirmed="no">
            <name>java.util.jar.JarOutputStream</name>
            <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.Rejar.copy(byte[], java.lang.String, java.util.jar.JarOutputStream)</inbound>
            <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.Rejar.copy(java.util.jar.JarFile, java.util.jar.JarEntry, java.util.jar.JarOutputStream)</inbound>
            <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.Rejar.processDirectory(java.util.jar.JarOutputStream, java.io.File, java.util.Set, java.util.Map)</inbound>
            <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.Rejar.rejar(java.io.File, java.io.File)</inbound>
            <feature confirmed="no">
                <name>java.util.jar.JarOutputStream.JarOutputStream(java.io.OutputStream, java.util.jar.Manifest)</name>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.Rejar.rejar(java.io.File, java.io.File)</inbound>
            </feature>
            <feature confirmed="no">
                <name>java.util.jar.JarOutputStream.close()</name>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.Rejar.rejar(java.io.File, java.io.File)</inbound>
            </feature>
            <feature confirmed="no">
                <name>java.util.jar.JarOutputStream.closeEntry()</name>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.Rejar.copy(byte[], java.lang.String, java.util.jar.JarOutputStream)</inbound>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.Rejar.copy(java.util.jar.JarFile, java.util.jar.JarEntry, java.util.jar.JarOutputStream)</inbound>
            </feature>
            <feature confirmed="no">
                <name>java.util.jar.JarOutputStream.flush()</name>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.Rejar.copy(java.util.jar.JarFile, java.util.jar.JarEntry, java.util.jar.JarOutputStream)</inbound>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.Rejar.rejar(java.io.File, java.io.File)</inbound>
            </feature>
            <feature confirmed="no">
                <name>java.util.jar.JarOutputStream.putNextEntry(java.util.zip.ZipEntry)</name>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.Rejar.copy(byte[], java.lang.String, java.util.jar.JarOutputStream)</inbound>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.Rejar.copy(java.util.jar.JarFile, java.util.jar.JarEntry, java.util.jar.JarOutputStream)</inbound>
            </feature>
            <feature confirmed="no">
                <name>java.util.jar.JarOutputStream.write(byte[])</name>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.Rejar.copy(byte[], java.lang.String, java.util.jar.JarOutputStream)</inbound>
            </feature>
        </class>
        <class confirmed="no">
            <name>java.util.jar.Manifest</name>
            <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ProxyModuleDefinition.ProxyModuleDefinition(java.lang.ClassLoader, java.util.Collection)</inbound>
            <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ProxyModuleDefinition.getManifest()</inbound>
            <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ProxyModuleDefinition.manifest</inbound>
            <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.Rejar.getManifest()</inbound>
            <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.Rejar.rejar(java.io.File, java.io.File)</inbound>
            <feature confirmed="no">
                <name>java.util.jar.Manifest.Manifest()</name>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ProxyModuleDefinition.ProxyModuleDefinition(java.lang.ClassLoader, java.util.Collection)</inbound>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.Rejar.getManifest()</inbound>
            </feature>
            <feature confirmed="no">
                <name>java.util.jar.Manifest.getMainAttributes()</name>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.Rejar.getManifest()</inbound>
            </feature>
        </class>
    </package>
    <package confirmed="no">
        <name>java.util.logging</name>
        <class confirmed="no">
            <name>java.util.logging.Level</name>
            <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainHelper.getJDKToolsRepo()</inbound>
            <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainStatic$1.run()</inbound>
            <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainStatic$3.run()</inbound>
            <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainStatic.start(java.lang.String[])</inbound>
            <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.AbstractMain.flushAndCreate(java.io.File, long)</inbound>
            <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.AbstractMain.isCacheOutdated(long, java.io.File)</inbound>
            <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ExtensibleClassLoader.addURI(java.net.URI)</inbound>
            <feature confirmed="no">
                <name>java.util.logging.Level.SEVERE</name>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainHelper.getJDKToolsRepo()</inbound>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainStatic$1.run()</inbound>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainStatic$3.run()</inbound>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainStatic.start(java.lang.String[])</inbound>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.AbstractMain.flushAndCreate(java.io.File, long)</inbound>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.AbstractMain.isCacheOutdated(long, java.io.File)</inbound>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ExtensibleClassLoader.addURI(java.net.URI)</inbound>
            </feature>
        </class>
        <class confirmed="no">
            <name>java.util.logging.Logger</name>
            <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMain.logger</inbound>
            <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMain.main(java.lang.String[])</inbound>
            <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMain.static {}</inbound>
            <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainEquinox.ASMainEquinox(java.util.logging.Logger, java.lang.String[])</inbound>
            <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainEquinox.launchOSGiFW()</inbound>
            <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainFelix.ASMainFelix(java.util.logging.Logger, java.lang.String[])</inbound>
            <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainFelix.launchOSGiFW()</inbound>
            <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainHelper.ASMainHelper(java.util.logging.Logger)</inbound>
            <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainHelper.getJDKToolsRepo()</inbound>
            <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainHelper.logger</inbound>
            <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainHelper.setupSharedCL(java.lang.ClassLoader, java.util.List, java.util.List)</inbound>
            <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainKnopflerFish.ASMainKnopflerFish(java.util.logging.Logger, java.lang.String[])</inbound>
            <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainKnopflerFish.launchOSGiFW()</inbound>
            <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainOSGi.ASMainOSGi(java.lang.String[])</inbound>
            <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainOSGi.ASMainOSGi(java.util.logging.Logger, java.lang.String[])</inbound>
            <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainOSGi.addJDKToolsJar(com.sun.enterprise.glassfish.bootstrap.ClassPathBuilder)</inbound>
            <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainOSGi.findDerbyClient(com.sun.enterprise.glassfish.bootstrap.ClassPathBuilder)</inbound>
            <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainOSGi.getLogger()</inbound>
            <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainOSGi.logger</inbound>
            <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainOSGi.setStartupContextProperties(java.util.logging.Logger, java.lang.String[])</inbound>
            <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainStatic$1.run()</inbound>
            <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainStatic$3$1.createHabitat(com.sun.enterprise.module.ModulesRegistry, com.sun.enterprise.module.bootstrap.StartupContext)</inbound>
            <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainStatic$3.run()</inbound>
            <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainStatic.ASMainStatic(java.util.logging.Logger, java.lang.String[])</inbound>
            <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainStatic.access$000(com.sun.enterprise.glassfish.bootstrap.ASMainStatic)</inbound>
            <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainStatic.findDerbyClient(java.util.List)</inbound>
            <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainStatic.getLogger()</inbound>
            <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainStatic.logger</inbound>
            <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainStatic.start(java.lang.String[])</inbound>
            <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.AbstractMain.flushAndCreate(java.io.File, long)</inbound>
            <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.AbstractMain.getLogger()</inbound>
            <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.AbstractMain.isCacheOutdated(long, java.io.File)</inbound>
            <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.AbstractMain.loadCacheInformation(java.io.File)</inbound>
            <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.AbstractMain.saveCacheInformation(java.io.File, java.lang.String, long)</inbound>
            <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ExtensibleClassLoader.ExtensibleClassLoader(java.net.URL[], java.lang.ClassLoader, java.util.List)</inbound>
            <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ExtensibleClassLoader.LOGGER</inbound>
            <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ExtensibleClassLoader.addURI(java.net.URI)</inbound>
            <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ExtensibleClassLoader.added(java.net.URI)</inbound>
            <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ExtensibleClassLoader.static {}</inbound>
            <feature confirmed="no">
                <name>java.util.logging.Logger.fine(java.lang.String)</name>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainFelix.launchOSGiFW()</inbound>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainOSGi.addJDKToolsJar(com.sun.enterprise.glassfish.bootstrap.ClassPathBuilder)</inbound>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainStatic.start(java.lang.String[])</inbound>
            </feature>
            <feature confirmed="no">
                <name>java.util.logging.Logger.getAnonymousLogger()</name>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMain.static {}</inbound>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainOSGi.ASMainOSGi(java.lang.String[])</inbound>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainStatic.start(java.lang.String[])</inbound>
            </feature>
            <feature confirmed="no">
                <name>java.util.logging.Logger.getLogger(java.lang.String)</name>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ExtensibleClassLoader.static {}</inbound>
            </feature>
            <feature confirmed="no">
                <name>java.util.logging.Logger.info(java.lang.String)</name>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMain.main(java.lang.String[])</inbound>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainEquinox.launchOSGiFW()</inbound>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainKnopflerFish.launchOSGiFW()</inbound>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainOSGi.findDerbyClient(com.sun.enterprise.glassfish.bootstrap.ClassPathBuilder)</inbound>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainOSGi.setStartupContextProperties(java.util.logging.Logger, java.lang.String[])</inbound>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainStatic.findDerbyClient(java.util.List)</inbound>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainStatic.start(java.lang.String[])</inbound>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.AbstractMain.flushAndCreate(java.io.File, long)</inbound>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.AbstractMain.loadCacheInformation(java.io.File)</inbound>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.AbstractMain.saveCacheInformation(java.io.File, java.lang.String, long)</inbound>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ExtensibleClassLoader.ExtensibleClassLoader(java.net.URL[], java.lang.ClassLoader, java.util.List)</inbound>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ExtensibleClassLoader.added(java.net.URI)</inbound>
            </feature>
            <feature confirmed="no">
                <name>java.util.logging.Logger.log(java.util.logging.Level, java.lang.String, java.lang.Throwable)</name>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainHelper.getJDKToolsRepo()</inbound>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainStatic$1.run()</inbound>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainStatic$3.run()</inbound>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainStatic.start(java.lang.String[])</inbound>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.AbstractMain.flushAndCreate(java.io.File, long)</inbound>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.AbstractMain.isCacheOutdated(long, java.io.File)</inbound>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ExtensibleClassLoader.addURI(java.net.URI)</inbound>
            </feature>
            <feature confirmed="no">
                <name>java.util.logging.Logger.warning(java.lang.String)</name>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainHelper.setupSharedCL(java.lang.ClassLoader, java.util.List, java.util.List)</inbound>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainStatic.start(java.lang.String[])</inbound>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.AbstractMain.flushAndCreate(java.io.File, long)</inbound>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.AbstractMain.saveCacheInformation(java.io.File, java.lang.String, long)</inbound>
            </feature>
        </class>
    </package>
    <package confirmed="no">
        <name>java.util.regex</name>
        <class confirmed="no">
            <name>java.util.regex.Matcher</name>
            <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainHelper.parseAsEnv(java.io.File)</inbound>
            <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ClassPathBuilder.addGlob(java.io.File, java.lang.String[])</inbound>
            <feature confirmed="no">
                <name>java.util.regex.Matcher.group(int)</name>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainHelper.parseAsEnv(java.io.File)</inbound>
            </feature>
            <feature confirmed="no">
                <name>java.util.regex.Matcher.matches()</name>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainHelper.parseAsEnv(java.io.File)</inbound>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ClassPathBuilder.addGlob(java.io.File, java.lang.String[])</inbound>
            </feature>
        </class>
        <class confirmed="no">
            <name>java.util.regex.Pattern</name>
            <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainHelper.parseAsEnv(java.io.File)</inbound>
            <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ClassPathBuilder.addGlob(java.io.File, java.lang.String[])</inbound>
            <feature confirmed="no">
                <name>java.util.regex.Pattern.compile(java.lang.String)</name>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainHelper.parseAsEnv(java.io.File)</inbound>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ClassPathBuilder.addGlob(java.io.File, java.lang.String[])</inbound>
            </feature>
            <feature confirmed="no">
                <name>java.util.regex.Pattern.matcher(java.lang.CharSequence)</name>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainHelper.parseAsEnv(java.io.File)</inbound>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ClassPathBuilder.addGlob(java.io.File, java.lang.String[])</inbound>
            </feature>
        </class>
    </package>
    <package confirmed="no">
        <name>java.util.zip</name>
        <class confirmed="no">
            <name>java.util.zip.ZipEntry</name>
            <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.Rejar.copy(byte[], java.lang.String, java.util.jar.JarOutputStream)</inbound>
            <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.Rejar.copy(java.util.jar.JarFile, java.util.jar.JarEntry, java.nio.channels.WritableByteChannel)</inbound>
            <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.Rejar.copy(java.util.jar.JarFile, java.util.jar.JarEntry, java.util.jar.JarOutputStream)</inbound>
        </class>
    </package>
    <package confirmed="no">
        <name>org.jvnet.hk2.component</name>
        <class confirmed="no">
            <name>org.jvnet.hk2.component.Habitat</name>
            <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainStatic$3$1.createHabitat(com.sun.enterprise.module.ModulesRegistry, com.sun.enterprise.module.bootstrap.StartupContext)</inbound>
            <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainStatic$3.run()</inbound>
            <feature confirmed="no">
                <name>org.jvnet.hk2.component.Habitat.add(org.jvnet.hk2.component.Inhabitant)</name>
                <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainStatic$3$1.createHabitat(com.sun.enterprise.module.ModulesRegistry, com.sun.enterprise.module.bootstrap.StartupContext)</inbound>
            </feature>
        </class>
        <class confirmed="no">
            <name>org.jvnet.hk2.component.Inhabitant</name>
            <inbound type="feature" confirmed="yes">com.sun.enterprise.glassfish.bootstrap.ASMainStatic$3$1.createHabitat(com.sun.enterprise.module.ModulesRegistry, com.sun.enterprise.module.bootstrap.StartupContext)</inbound>
        </class>
    </package>
</dependencies>
