<?xml version="1.0" encoding="utf-8" ?>

<!DOCTYPE dependencies SYSTEM "http://depfind.sourceforge.net/dtd/dependencies.dtd">

<dependencies>
    <package confirmed="no">
        <name></name>
        <class confirmed="no">
            <name>int[]</name>
            <inbound type="feature" confirmed="yes">org.junit.experimental.theories.suppliers.TestedOnSupplier.getValueSources(org.junit.experimental.theories.ParameterSignature)</inbound>
        </class>
    </package>
    <package confirmed="no">
        <name>java.io</name>
        <class confirmed="no">
            <name>java.io.BufferedReader</name>
            <feature confirmed="no">
                <name>java.io.BufferedReader.BufferedReader(java.io.Reader)</name>
                <inbound type="feature" confirmed="yes">junit.runner.BaseTestRunner.getFilteredTrace(java.lang.String)</inbound>
            </feature>
            <feature confirmed="no">
                <name>java.io.BufferedReader.readLine()</name>
                <inbound type="feature" confirmed="yes">junit.runner.BaseTestRunner.getFilteredTrace(java.lang.String)</inbound>
            </feature>
        </class>
        <class confirmed="no">
            <name>java.io.ByteArrayOutputStream</name>
            <feature confirmed="no">
                <name>java.io.ByteArrayOutputStream.ByteArrayOutputStream()</name>
                <inbound type="feature" confirmed="yes">org.junit.experimental.results.PrintableResult.toString()</inbound>
            </feature>
            <feature confirmed="no">
                <name>java.io.ByteArrayOutputStream.toString()</name>
                <inbound type="feature" confirmed="yes">org.junit.experimental.results.PrintableResult.toString()</inbound>
            </feature>
        </class>
        <class confirmed="no">
            <name>java.io.File</name>
            <inbound type="feature" confirmed="yes">junit.runner.BaseTestRunner.getPreferencesFile()</inbound>
            <inbound type="feature" confirmed="yes">junit.runner.BaseTestRunner.readPreferences()</inbound>
            <inbound type="feature" confirmed="yes">junit.runner.BaseTestRunner.savePreferences()</inbound>
            <inbound type="feature" confirmed="yes">org.junit.experimental.max.MaxCore.MaxCore(java.io.File)</inbound>
            <inbound type="feature" confirmed="yes">org.junit.experimental.max.MaxCore.forFolder(java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">org.junit.experimental.max.MaxCore.storedLocally(java.io.File)</inbound>
            <inbound type="feature" confirmed="yes">org.junit.experimental.max.MaxHistory.MaxHistory(java.io.File)</inbound>
            <inbound type="feature" confirmed="yes">org.junit.experimental.max.MaxHistory.fHistoryStore</inbound>
            <inbound type="feature" confirmed="yes">org.junit.experimental.max.MaxHistory.forFolder(java.io.File)</inbound>
            <inbound type="feature" confirmed="yes">org.junit.experimental.max.MaxHistory.readHistory(java.io.File)</inbound>
            <inbound type="feature" confirmed="yes">org.junit.experimental.max.MaxHistory.save()</inbound>
            <inbound type="feature" confirmed="yes">org.junit.rules.TemporaryFolder.create()</inbound>
            <inbound type="feature" confirmed="yes">org.junit.rules.TemporaryFolder.delete()</inbound>
            <inbound type="feature" confirmed="yes">org.junit.rules.TemporaryFolder.folder</inbound>
            <inbound type="feature" confirmed="yes">org.junit.rules.TemporaryFolder.getRoot()</inbound>
            <inbound type="feature" confirmed="yes">org.junit.rules.TemporaryFolder.newFile(java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">org.junit.rules.TemporaryFolder.newFolder(java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">org.junit.rules.TemporaryFolder.recursiveDelete(java.io.File)</inbound>
            <feature confirmed="no">
                <name>java.io.File.File(java.io.File, java.lang.String)</name>
                <inbound type="feature" confirmed="yes">org.junit.rules.TemporaryFolder.newFile(java.lang.String)</inbound>
                <inbound type="feature" confirmed="yes">org.junit.rules.TemporaryFolder.newFolder(java.lang.String)</inbound>
            </feature>
            <feature confirmed="no">
                <name>java.io.File.File(java.lang.String)</name>
                <inbound type="feature" confirmed="yes">org.junit.experimental.max.MaxCore.forFolder(java.lang.String)</inbound>
            </feature>
            <feature confirmed="no">
                <name>java.io.File.File(java.lang.String, java.lang.String)</name>
                <inbound type="feature" confirmed="yes">junit.runner.BaseTestRunner.getPreferencesFile()</inbound>
            </feature>
            <feature confirmed="no">
                <name>java.io.File.createNewFile()</name>
                <inbound type="feature" confirmed="yes">org.junit.rules.TemporaryFolder.newFile(java.lang.String)</inbound>
            </feature>
            <feature confirmed="no">
                <name>java.io.File.createTempFile(java.lang.String, java.lang.String)</name>
                <inbound type="feature" confirmed="yes">org.junit.rules.TemporaryFolder.create()</inbound>
            </feature>
            <feature confirmed="no">
                <name>java.io.File.delete()</name>
                <inbound type="feature" confirmed="yes">org.junit.experimental.max.MaxHistory.forFolder(java.io.File)</inbound>
                <inbound type="feature" confirmed="yes">org.junit.rules.TemporaryFolder.create()</inbound>
                <inbound type="feature" confirmed="yes">org.junit.rules.TemporaryFolder.recursiveDelete(java.io.File)</inbound>
            </feature>
            <feature confirmed="no">
                <name>java.io.File.exists()</name>
                <inbound type="feature" confirmed="yes">org.junit.experimental.max.MaxHistory.forFolder(java.io.File)</inbound>
            </feature>
            <feature confirmed="no">
                <name>java.io.File.listFiles()</name>
                <inbound type="feature" confirmed="yes">org.junit.rules.TemporaryFolder.recursiveDelete(java.io.File)</inbound>
            </feature>
            <feature confirmed="no">
                <name>java.io.File.mkdir()</name>
                <inbound type="feature" confirmed="yes">org.junit.rules.TemporaryFolder.create()</inbound>
                <inbound type="feature" confirmed="yes">org.junit.rules.TemporaryFolder.newFolder(java.lang.String)</inbound>
            </feature>
        </class>
        <class confirmed="no">
            <name>java.io.FileInputStream</name>
            <feature confirmed="no">
                <name>java.io.FileInputStream.FileInputStream(java.io.File)</name>
                <inbound type="feature" confirmed="yes">junit.runner.BaseTestRunner.readPreferences()</inbound>
                <inbound type="feature" confirmed="yes">org.junit.experimental.max.MaxHistory.readHistory(java.io.File)</inbound>
            </feature>
            <feature confirmed="no">
                <name>java.io.FileInputStream.close()</name>
                <inbound type="feature" confirmed="yes">org.junit.experimental.max.MaxHistory.readHistory(java.io.File)</inbound>
            </feature>
        </class>
        <class confirmed="no">
            <name>java.io.FileOutputStream</name>
            <feature confirmed="no">
                <name>java.io.FileOutputStream.FileOutputStream(java.io.File)</name>
                <inbound type="feature" confirmed="yes">junit.runner.BaseTestRunner.savePreferences()</inbound>
                <inbound type="feature" confirmed="yes">org.junit.experimental.max.MaxHistory.save()</inbound>
            </feature>
            <feature confirmed="no">
                <name>java.io.FileOutputStream.close()</name>
                <inbound type="feature" confirmed="yes">junit.runner.BaseTestRunner.savePreferences()</inbound>
            </feature>
        </class>
        <class confirmed="no">
            <name>java.io.IOException</name>
            <inbound type="feature" confirmed="yes">junit.runner.BaseTestRunner.readPreferences()</inbound>
            <inbound type="feature" confirmed="yes">junit.runner.BaseTestRunner.savePreferences()</inbound>
            <inbound type="feature" confirmed="yes">org.hamcrest.StringDescription.append(char)</inbound>
            <inbound type="feature" confirmed="yes">org.hamcrest.StringDescription.append(java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">org.junit.experimental.max.MaxHistory.access$000(org.junit.experimental.max.MaxHistory)</inbound>
            <inbound type="feature" confirmed="yes">org.junit.experimental.max.MaxHistory.save()</inbound>
            <inbound type="feature" confirmed="yes">org.junit.rules.TemporaryFolder.create()</inbound>
            <inbound type="feature" confirmed="yes">org.junit.rules.TemporaryFolder.newFile(java.lang.String)</inbound>
        </class>
        <class confirmed="no">
            <name>java.io.InputStream</name>
            <inbound type="feature" confirmed="yes">junit.runner.BaseTestRunner.readPreferences()</inbound>
            <inbound type="feature" confirmed="yes">junit.textui.TestRunner.pause(boolean)</inbound>
            <inbound type="feature" confirmed="yes">org.junit.experimental.max.MaxHistory.readHistory(java.io.File)</inbound>
            <feature confirmed="no">
                <name>java.io.InputStream.close()</name>
                <inbound type="feature" confirmed="yes">junit.runner.BaseTestRunner.readPreferences()</inbound>
            </feature>
            <feature confirmed="no">
                <name>java.io.InputStream.read()</name>
                <inbound type="feature" confirmed="yes">junit.textui.TestRunner.pause(boolean)</inbound>
            </feature>
        </class>
        <class confirmed="no">
            <name>java.io.ObjectInputStream</name>
            <feature confirmed="no">
                <name>java.io.ObjectInputStream.ObjectInputStream(java.io.InputStream)</name>
                <inbound type="feature" confirmed="yes">org.junit.experimental.max.MaxHistory.readHistory(java.io.File)</inbound>
            </feature>
            <feature confirmed="no">
                <name>java.io.ObjectInputStream.close()</name>
                <inbound type="feature" confirmed="yes">org.junit.experimental.max.MaxHistory.readHistory(java.io.File)</inbound>
            </feature>
            <feature confirmed="no">
                <name>java.io.ObjectInputStream.readObject()</name>
                <inbound type="feature" confirmed="yes">org.junit.experimental.max.MaxHistory.readHistory(java.io.File)</inbound>
            </feature>
        </class>
        <class confirmed="no">
            <name>java.io.ObjectOutputStream</name>
            <feature confirmed="no">
                <name>java.io.ObjectOutputStream.ObjectOutputStream(java.io.OutputStream)</name>
                <inbound type="feature" confirmed="yes">org.junit.experimental.max.MaxHistory.save()</inbound>
            </feature>
            <feature confirmed="no">
                <name>java.io.ObjectOutputStream.close()</name>
                <inbound type="feature" confirmed="yes">org.junit.experimental.max.MaxHistory.save()</inbound>
            </feature>
            <feature confirmed="no">
                <name>java.io.ObjectOutputStream.writeObject(java.lang.Object)</name>
                <inbound type="feature" confirmed="yes">org.junit.experimental.max.MaxHistory.save()</inbound>
            </feature>
        </class>
        <class confirmed="no">
            <name>java.io.OutputStream</name>
            <inbound type="feature" confirmed="yes">junit.runner.BaseTestRunner.savePreferences()</inbound>
            <inbound type="feature" confirmed="yes">org.junit.experimental.max.MaxHistory.save()</inbound>
            <inbound type="feature" confirmed="yes">org.junit.experimental.results.PrintableResult.toString()</inbound>
        </class>
        <class confirmed="no">
            <name>java.io.PrintStream</name>
            <inbound type="feature" confirmed="yes">junit.runner.BaseTestRunner.processArguments(java.lang.String[])</inbound>
            <inbound type="feature" confirmed="yes">junit.runner.Version.main(java.lang.String[])</inbound>
            <inbound type="feature" confirmed="yes">junit.textui.ResultPrinter.ResultPrinter(java.io.PrintStream)</inbound>
            <inbound type="feature" confirmed="yes">junit.textui.ResultPrinter.addError(junit.framework.Test, java.lang.Throwable)</inbound>
            <inbound type="feature" confirmed="yes">junit.textui.ResultPrinter.addFailure(junit.framework.Test, junit.framework.AssertionFailedError)</inbound>
            <inbound type="feature" confirmed="yes">junit.textui.ResultPrinter.fWriter</inbound>
            <inbound type="feature" confirmed="yes">junit.textui.ResultPrinter.getWriter()</inbound>
            <inbound type="feature" confirmed="yes">junit.textui.ResultPrinter.printDefectHeader(junit.framework.TestFailure, int)</inbound>
            <inbound type="feature" confirmed="yes">junit.textui.ResultPrinter.printDefectTrace(junit.framework.TestFailure)</inbound>
            <inbound type="feature" confirmed="yes">junit.textui.ResultPrinter.printDefects(java.util.Enumeration, int, java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">junit.textui.ResultPrinter.printFooter(junit.framework.TestResult)</inbound>
            <inbound type="feature" confirmed="yes">junit.textui.ResultPrinter.printHeader(long)</inbound>
            <inbound type="feature" confirmed="yes">junit.textui.ResultPrinter.printWaitPrompt()</inbound>
            <inbound type="feature" confirmed="yes">junit.textui.ResultPrinter.startTest(junit.framework.Test)</inbound>
            <inbound type="feature" confirmed="yes">junit.textui.TestRunner.TestRunner()</inbound>
            <inbound type="feature" confirmed="yes">junit.textui.TestRunner.TestRunner(java.io.PrintStream)</inbound>
            <inbound type="feature" confirmed="yes">junit.textui.TestRunner.main(java.lang.String[])</inbound>
            <inbound type="feature" confirmed="yes">junit.textui.TestRunner.runFailed(java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">junit.textui.TestRunner.start(java.lang.String[])</inbound>
            <inbound type="feature" confirmed="yes">org.junit.experimental.results.PrintableResult.toString()</inbound>
            <inbound type="feature" confirmed="yes">org.junit.internal.JUnitSystem.out()</inbound>
            <inbound type="feature" confirmed="yes">org.junit.internal.RealSystem.out()</inbound>
            <inbound type="feature" confirmed="yes">org.junit.internal.TextListener.TextListener(java.io.PrintStream)</inbound>
            <inbound type="feature" confirmed="yes">org.junit.internal.TextListener.TextListener(org.junit.internal.JUnitSystem)</inbound>
            <inbound type="feature" confirmed="yes">org.junit.internal.TextListener.fWriter</inbound>
            <inbound type="feature" confirmed="yes">org.junit.internal.TextListener.getWriter()</inbound>
            <inbound type="feature" confirmed="yes">org.junit.internal.TextListener.printFailure(org.junit.runner.notification.Failure, java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">org.junit.internal.TextListener.printFailures(org.junit.runner.Result)</inbound>
            <inbound type="feature" confirmed="yes">org.junit.internal.TextListener.printFooter(org.junit.runner.Result)</inbound>
            <inbound type="feature" confirmed="yes">org.junit.internal.TextListener.printHeader(long)</inbound>
            <inbound type="feature" confirmed="yes">org.junit.internal.TextListener.testFailure(org.junit.runner.notification.Failure)</inbound>
            <inbound type="feature" confirmed="yes">org.junit.internal.TextListener.testIgnored(org.junit.runner.Description)</inbound>
            <inbound type="feature" confirmed="yes">org.junit.internal.TextListener.testStarted(org.junit.runner.Description)</inbound>
            <inbound type="feature" confirmed="yes">org.junit.runner.JUnitCore.runMain(org.junit.internal.JUnitSystem, java.lang.String[])</inbound>
            <feature confirmed="no">
                <name>java.io.PrintStream.PrintStream(java.io.OutputStream)</name>
                <inbound type="feature" confirmed="yes">org.junit.experimental.results.PrintableResult.toString()</inbound>
            </feature>
            <feature confirmed="no">
                <name>java.io.PrintStream.append(char)</name>
                <inbound type="feature" confirmed="yes">org.junit.internal.TextListener.testFailure(org.junit.runner.notification.Failure)</inbound>
                <inbound type="feature" confirmed="yes">org.junit.internal.TextListener.testIgnored(org.junit.runner.Description)</inbound>
                <inbound type="feature" confirmed="yes">org.junit.internal.TextListener.testStarted(org.junit.runner.Description)</inbound>
            </feature>
            <feature confirmed="no">
                <name>java.io.PrintStream.print(java.lang.String)</name>
                <inbound type="feature" confirmed="yes">junit.textui.ResultPrinter.addError(junit.framework.Test, java.lang.Throwable)</inbound>
                <inbound type="feature" confirmed="yes">junit.textui.ResultPrinter.addFailure(junit.framework.Test, junit.framework.AssertionFailedError)</inbound>
                <inbound type="feature" confirmed="yes">junit.textui.ResultPrinter.printDefectHeader(junit.framework.TestFailure, int)</inbound>
                <inbound type="feature" confirmed="yes">junit.textui.ResultPrinter.printDefectTrace(junit.framework.TestFailure)</inbound>
                <inbound type="feature" confirmed="yes">junit.textui.ResultPrinter.printFooter(junit.framework.TestResult)</inbound>
                <inbound type="feature" confirmed="yes">junit.textui.ResultPrinter.startTest(junit.framework.Test)</inbound>
                <inbound type="feature" confirmed="yes">org.junit.internal.TextListener.printFailure(org.junit.runner.notification.Failure, java.lang.String)</inbound>
                <inbound type="feature" confirmed="yes">org.junit.internal.TextListener.printFooter(org.junit.runner.Result)</inbound>
            </feature>
            <feature confirmed="no">
                <name>java.io.PrintStream.println()</name>
                <inbound type="feature" confirmed="yes">junit.textui.ResultPrinter.printFooter(junit.framework.TestResult)</inbound>
                <inbound type="feature" confirmed="yes">junit.textui.ResultPrinter.printHeader(long)</inbound>
                <inbound type="feature" confirmed="yes">junit.textui.ResultPrinter.printWaitPrompt()</inbound>
                <inbound type="feature" confirmed="yes">junit.textui.ResultPrinter.startTest(junit.framework.Test)</inbound>
                <inbound type="feature" confirmed="yes">org.junit.internal.TextListener.printFooter(org.junit.runner.Result)</inbound>
                <inbound type="feature" confirmed="yes">org.junit.internal.TextListener.printHeader(long)</inbound>
            </feature>
            <feature confirmed="no">
                <name>java.io.PrintStream.println(java.lang.String)</name>
                <inbound type="feature" confirmed="yes">junit.runner.BaseTestRunner.processArguments(java.lang.String[])</inbound>
                <inbound type="feature" confirmed="yes">junit.runner.Version.main(java.lang.String[])</inbound>
                <inbound type="feature" confirmed="yes">junit.textui.ResultPrinter.printDefects(java.util.Enumeration, int, java.lang.String)</inbound>
                <inbound type="feature" confirmed="yes">junit.textui.ResultPrinter.printFooter(junit.framework.TestResult)</inbound>
                <inbound type="feature" confirmed="yes">junit.textui.ResultPrinter.printHeader(long)</inbound>
                <inbound type="feature" confirmed="yes">junit.textui.ResultPrinter.printWaitPrompt()</inbound>
                <inbound type="feature" confirmed="yes">junit.textui.TestRunner.main(java.lang.String[])</inbound>
                <inbound type="feature" confirmed="yes">junit.textui.TestRunner.runFailed(java.lang.String)</inbound>
                <inbound type="feature" confirmed="yes">junit.textui.TestRunner.start(java.lang.String[])</inbound>
                <inbound type="feature" confirmed="yes">org.junit.internal.TextListener.printFailure(org.junit.runner.notification.Failure, java.lang.String)</inbound>
                <inbound type="feature" confirmed="yes">org.junit.internal.TextListener.printFailures(org.junit.runner.Result)</inbound>
                <inbound type="feature" confirmed="yes">org.junit.internal.TextListener.printFooter(org.junit.runner.Result)</inbound>
                <inbound type="feature" confirmed="yes">org.junit.internal.TextListener.printHeader(long)</inbound>
                <inbound type="feature" confirmed="yes">org.junit.runner.JUnitCore.runMain(org.junit.internal.JUnitSystem, java.lang.String[])</inbound>
            </feature>
        </class>
        <class confirmed="no">
            <name>java.io.PrintWriter</name>
            <inbound type="feature" confirmed="yes">junit.framework.TestFailure.trace()</inbound>
            <inbound type="feature" confirmed="yes">junit.framework.TestSuite.exceptionToString(java.lang.Throwable)</inbound>
            <inbound type="feature" confirmed="yes">junit.runner.BaseTestRunner.getFilteredTrace(java.lang.Throwable)</inbound>
            <inbound type="feature" confirmed="yes">org.junit.runner.notification.Failure.getTrace()</inbound>
            <feature confirmed="no">
                <name>java.io.PrintWriter.PrintWriter(java.io.Writer)</name>
                <inbound type="feature" confirmed="yes">junit.framework.TestFailure.trace()</inbound>
                <inbound type="feature" confirmed="yes">junit.framework.TestSuite.exceptionToString(java.lang.Throwable)</inbound>
                <inbound type="feature" confirmed="yes">junit.runner.BaseTestRunner.getFilteredTrace(java.lang.String)</inbound>
                <inbound type="feature" confirmed="yes">junit.runner.BaseTestRunner.getFilteredTrace(java.lang.Throwable)</inbound>
                <inbound type="feature" confirmed="yes">org.junit.runner.notification.Failure.getTrace()</inbound>
            </feature>
            <feature confirmed="no">
                <name>java.io.PrintWriter.println(java.lang.String)</name>
                <inbound type="feature" confirmed="yes">junit.runner.BaseTestRunner.getFilteredTrace(java.lang.String)</inbound>
            </feature>
        </class>
        <class confirmed="no">
            <name>java.io.Reader</name>
            <inbound type="feature" confirmed="yes">junit.runner.BaseTestRunner.getFilteredTrace(java.lang.String)</inbound>
        </class>
        <class confirmed="no">
            <name>java.io.Serializable</name>
            <inbound type="class" confirmed="yes">org.junit.experimental.max.MaxHistory</inbound>
        </class>
        <class confirmed="no">
            <name>java.io.StringReader</name>
            <feature confirmed="no">
                <name>java.io.StringReader.StringReader(java.lang.String)</name>
                <inbound type="feature" confirmed="yes">junit.runner.BaseTestRunner.getFilteredTrace(java.lang.String)</inbound>
            </feature>
        </class>
        <class confirmed="no">
            <name>java.io.StringWriter</name>
            <feature confirmed="no">
                <name>java.io.StringWriter.StringWriter()</name>
                <inbound type="feature" confirmed="yes">junit.framework.TestFailure.trace()</inbound>
                <inbound type="feature" confirmed="yes">junit.framework.TestSuite.exceptionToString(java.lang.Throwable)</inbound>
                <inbound type="feature" confirmed="yes">junit.runner.BaseTestRunner.getFilteredTrace(java.lang.String)</inbound>
                <inbound type="feature" confirmed="yes">junit.runner.BaseTestRunner.getFilteredTrace(java.lang.Throwable)</inbound>
                <inbound type="feature" confirmed="yes">org.junit.runner.notification.Failure.getTrace()</inbound>
            </feature>
            <feature confirmed="no">
                <name>java.io.StringWriter.getBuffer()</name>
                <inbound type="feature" confirmed="yes">junit.framework.TestFailure.trace()</inbound>
                <inbound type="feature" confirmed="yes">junit.runner.BaseTestRunner.getFilteredTrace(java.lang.Throwable)</inbound>
                <inbound type="feature" confirmed="yes">org.junit.runner.notification.Failure.getTrace()</inbound>
            </feature>
            <feature confirmed="no">
                <name>java.io.StringWriter.toString()</name>
                <inbound type="feature" confirmed="yes">junit.framework.TestSuite.exceptionToString(java.lang.Throwable)</inbound>
                <inbound type="feature" confirmed="yes">junit.runner.BaseTestRunner.getFilteredTrace(java.lang.String)</inbound>
            </feature>
        </class>
        <class confirmed="no">
            <name>java.io.Writer</name>
            <inbound type="feature" confirmed="yes">junit.framework.TestFailure.trace()</inbound>
            <inbound type="feature" confirmed="yes">junit.framework.TestSuite.exceptionToString(java.lang.Throwable)</inbound>
            <inbound type="feature" confirmed="yes">junit.runner.BaseTestRunner.getFilteredTrace(java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">junit.runner.BaseTestRunner.getFilteredTrace(java.lang.Throwable)</inbound>
            <inbound type="feature" confirmed="yes">org.junit.runner.notification.Failure.getTrace()</inbound>
        </class>
    </package>
    <package confirmed="no">
        <name>java.lang</name>
        <class confirmed="no">
            <name>java.lang.Appendable</name>
            <inbound type="feature" confirmed="yes">org.hamcrest.StringDescription.StringDescription()</inbound>
            <inbound type="feature" confirmed="yes">org.hamcrest.StringDescription.StringDescription(java.lang.Appendable)</inbound>
            <inbound type="feature" confirmed="yes">org.hamcrest.StringDescription.append(char)</inbound>
            <inbound type="feature" confirmed="yes">org.hamcrest.StringDescription.append(java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">org.hamcrest.StringDescription.out</inbound>
            <inbound type="feature" confirmed="yes">org.hamcrest.StringDescription.toString()</inbound>
            <feature confirmed="no">
                <name>java.lang.Appendable.append(char)</name>
                <inbound type="feature" confirmed="yes">org.hamcrest.StringDescription.append(char)</inbound>
            </feature>
            <feature confirmed="no">
                <name>java.lang.Appendable.append(java.lang.CharSequence)</name>
                <inbound type="feature" confirmed="yes">org.hamcrest.StringDescription.append(java.lang.String)</inbound>
            </feature>
        </class>
        <class confirmed="no">
            <name>java.lang.AssertionError</name>
            <inbound type="class" confirmed="yes">junit.framework.AssertionFailedError</inbound>
            <inbound type="class" confirmed="yes">org.junit.ComparisonFailure</inbound>
            <inbound type="class" confirmed="yes">org.junit.internal.ArrayComparisonFailure</inbound>
            <inbound type="feature" confirmed="yes">org.junit.internal.ArrayComparisonFailure.ArrayComparisonFailure(java.lang.String, java.lang.AssertionError, int)</inbound>
            <inbound type="feature" confirmed="yes">org.junit.internal.ArrayComparisonFailure.fCause</inbound>
            <inbound type="feature" confirmed="yes">org.junit.internal.ArrayComparisonFailure.getMessage()</inbound>
            <inbound type="feature" confirmed="yes">org.junit.internal.ComparisonCriteria.arrayEquals(java.lang.String, java.lang.Object, java.lang.Object)</inbound>
            <feature confirmed="no">
                <name>java.lang.AssertionError.AssertionError()</name>
                <inbound type="feature" confirmed="yes">junit.framework.AssertionFailedError.AssertionFailedError()</inbound>
                <inbound type="feature" confirmed="yes">org.junit.Assert.fail(java.lang.String)</inbound>
                <inbound type="feature" confirmed="yes">org.junit.internal.ArrayComparisonFailure.ArrayComparisonFailure(java.lang.String, java.lang.AssertionError, int)</inbound>
            </feature>
            <feature confirmed="no">
                <name>java.lang.AssertionError.AssertionError(java.lang.Object)</name>
                <inbound type="feature" confirmed="yes">junit.framework.AssertionFailedError.AssertionFailedError(java.lang.String)</inbound>
                <inbound type="feature" confirmed="yes">org.junit.Assert.assertThat(java.lang.String, java.lang.Object, org.hamcrest.Matcher)</inbound>
                <inbound type="feature" confirmed="yes">org.junit.Assert.fail(java.lang.String)</inbound>
                <inbound type="feature" confirmed="yes">org.junit.ComparisonFailure.ComparisonFailure(java.lang.String, java.lang.String, java.lang.String)</inbound>
                <inbound type="feature" confirmed="yes">org.junit.internal.runners.MethodRoadie.runTestMethod()</inbound>
                <inbound type="feature" confirmed="yes">org.junit.internal.runners.statements.ExpectException.evaluate()</inbound>
                <inbound type="feature" confirmed="yes">org.junit.rules.ExpectedException$ExpectedExceptionStatement.evaluate()</inbound>
            </feature>
            <feature confirmed="no">
                <name>java.lang.AssertionError.getMessage()</name>
                <inbound type="feature" confirmed="yes">org.junit.ComparisonFailure.getMessage()</inbound>
                <inbound type="feature" confirmed="yes">org.junit.internal.ArrayComparisonFailure.getMessage()</inbound>
            </feature>
        </class>
        <class confirmed="no">
            <name>java.lang.Boolean</name>
            <inbound type="feature" confirmed="yes">junit.framework.Assert.assertEquals(java.lang.String, boolean, boolean)</inbound>
            <inbound type="feature" confirmed="yes">org.junit.Assume.assumeTrue(boolean)</inbound>
            <feature confirmed="no">
                <name>java.lang.Boolean.valueOf(boolean)</name>
                <inbound type="feature" confirmed="yes">junit.framework.Assert.assertEquals(java.lang.String, boolean, boolean)</inbound>
                <inbound type="feature" confirmed="yes">org.junit.Assume.assumeTrue(boolean)</inbound>
            </feature>
        </class>
        <class confirmed="no">
            <name>java.lang.Byte</name>
            <feature confirmed="no">
                <name>java.lang.Byte.Byte(byte)</name>
                <inbound type="feature" confirmed="yes">junit.framework.Assert.assertEquals(java.lang.String, byte, byte)</inbound>
            </feature>
        </class>
        <class confirmed="no">
            <name>java.lang.CharSequence</name>
            <inbound type="feature" confirmed="yes">org.hamcrest.StringDescription.append(java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">org.hamcrest.core.DescribedAs.describeTo(org.hamcrest.Description)</inbound>
            <inbound type="feature" confirmed="yes">org.junit.experimental.max.MaxCore.getMalformedTestClass(org.junit.runner.Description)</inbound>
            <inbound type="feature" confirmed="yes">org.junit.experimental.results.ResultMatchers$2.matches(java.lang.Object)</inbound>
            <inbound type="feature" confirmed="yes">org.junit.experimental.results.ResultMatchers$3.matches(java.lang.Object)</inbound>
            <inbound type="feature" confirmed="yes">org.junit.runner.Description.methodStringMatcher()</inbound>
        </class>
        <class confirmed="no">
            <name>java.lang.Character</name>
            <inbound type="feature" confirmed="yes">org.hamcrest.BaseDescription.appendValue(java.lang.Object)</inbound>
            <feature confirmed="no">
                <name>java.lang.Character.Character(char)</name>
                <inbound type="feature" confirmed="yes">junit.framework.Assert.assertEquals(java.lang.String, char, char)</inbound>
            </feature>
            <feature confirmed="no">
                <name>java.lang.Character.charValue()</name>
                <inbound type="feature" confirmed="yes">org.hamcrest.BaseDescription.appendValue(java.lang.Object)</inbound>
            </feature>
        </class>
        <class confirmed="no">
            <name>java.lang.Class</name>
            <inbound type="feature" confirmed="yes">junit.extensions.ActiveTestSuite.ActiveTestSuite(java.lang.Class)</inbound>
            <inbound type="feature" confirmed="yes">junit.extensions.ActiveTestSuite.ActiveTestSuite(java.lang.Class, java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">junit.framework.JUnit4TestAdapter.JUnit4TestAdapter(java.lang.Class)</inbound>
            <inbound type="feature" confirmed="yes">junit.framework.JUnit4TestAdapter.JUnit4TestAdapter(java.lang.Class, junit.framework.JUnit4TestAdapterCache)</inbound>
            <inbound type="feature" confirmed="yes">junit.framework.JUnit4TestAdapter.fNewTestClass</inbound>
            <inbound type="feature" confirmed="yes">junit.framework.JUnit4TestAdapter.getTestClass()</inbound>
            <inbound type="feature" confirmed="yes">junit.framework.JUnit4TestAdapter.isIgnored(org.junit.runner.Description)</inbound>
            <inbound type="feature" confirmed="yes">junit.framework.JUnit4TestAdapter.toString()</inbound>
            <inbound type="feature" confirmed="yes">junit.framework.TestCase.runTest()</inbound>
            <inbound type="feature" confirmed="yes">junit.framework.TestCase.toString()</inbound>
            <inbound type="feature" confirmed="yes">junit.framework.TestSuite.TestSuite(java.lang.Class)</inbound>
            <inbound type="feature" confirmed="yes">junit.framework.TestSuite.TestSuite(java.lang.Class, java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">junit.framework.TestSuite.TestSuite(java.lang.Class[])</inbound>
            <inbound type="feature" confirmed="yes">junit.framework.TestSuite.TestSuite(java.lang.Class[], java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">junit.framework.TestSuite.addTestMethod(java.lang.reflect.Method, java.util.List, java.lang.Class)</inbound>
            <inbound type="feature" confirmed="yes">junit.framework.TestSuite.addTestSuite(java.lang.Class)</inbound>
            <inbound type="feature" confirmed="yes">junit.framework.TestSuite.addTestsFromTestCase(java.lang.Class)</inbound>
            <inbound type="feature" confirmed="yes">junit.framework.TestSuite.createTest(java.lang.Class, java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">junit.framework.TestSuite.getTestConstructor(java.lang.Class)</inbound>
            <inbound type="feature" confirmed="yes">junit.framework.TestSuite.isTestMethod(java.lang.reflect.Method)</inbound>
            <inbound type="feature" confirmed="yes">junit.framework.TestSuite.testCaseForClass(java.lang.Class)</inbound>
            <inbound type="feature" confirmed="yes">junit.runner.BaseTestRunner.getTest(java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">junit.runner.BaseTestRunner.loadSuiteClass(java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">junit.textui.TestRunner.run(java.lang.Class)</inbound>
            <inbound type="feature" confirmed="yes">junit.textui.TestRunner.runSingleMethod(java.lang.String, java.lang.String, boolean)</inbound>
            <inbound type="feature" confirmed="yes">org.hamcrest.BaseDescription.appendValue(java.lang.Object)</inbound>
            <inbound type="feature" confirmed="yes">org.hamcrest.CoreMatchers.any(java.lang.Class)</inbound>
            <inbound type="feature" confirmed="yes">org.hamcrest.CoreMatchers.instanceOf(java.lang.Class)</inbound>
            <inbound type="feature" confirmed="yes">org.hamcrest.CoreMatchers.is(java.lang.Class)</inbound>
            <inbound type="feature" confirmed="yes">org.hamcrest.CoreMatchers.notNullValue(java.lang.Class)</inbound>
            <inbound type="feature" confirmed="yes">org.hamcrest.CoreMatchers.nullValue(java.lang.Class)</inbound>
            <inbound type="feature" confirmed="yes">org.hamcrest.core.Is.is(java.lang.Class)</inbound>
            <inbound type="feature" confirmed="yes">org.hamcrest.core.IsAnything.any(java.lang.Class)</inbound>
            <inbound type="feature" confirmed="yes">org.hamcrest.core.IsEqual.isArray(java.lang.Object)</inbound>
            <inbound type="feature" confirmed="yes">org.hamcrest.core.IsInstanceOf.IsInstanceOf(java.lang.Class)</inbound>
            <inbound type="feature" confirmed="yes">org.hamcrest.core.IsInstanceOf.describeTo(org.hamcrest.Description)</inbound>
            <inbound type="feature" confirmed="yes">org.hamcrest.core.IsInstanceOf.instanceOf(java.lang.Class)</inbound>
            <inbound type="feature" confirmed="yes">org.hamcrest.core.IsInstanceOf.matches(java.lang.Object)</inbound>
            <inbound type="feature" confirmed="yes">org.hamcrest.core.IsInstanceOf.theClass</inbound>
            <inbound type="feature" confirmed="yes">org.hamcrest.core.IsNull.notNullValue(java.lang.Class)</inbound>
            <inbound type="feature" confirmed="yes">org.hamcrest.core.IsNull.nullValue(java.lang.Class)</inbound>
            <inbound type="feature" confirmed="yes">org.hamcrest.internal.ArrayIterator.ArrayIterator(java.lang.Object)</inbound>
            <inbound type="feature" confirmed="yes">org.junit.Assert.formatClassAndValue(java.lang.Object, java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">org.junit.Test.expected()</inbound>
            <inbound type="feature" confirmed="yes">org.junit.experimental.ParallelComputer.getRunner(org.junit.runners.model.RunnerBuilder, java.lang.Class)</inbound>
            <inbound type="feature" confirmed="yes">org.junit.experimental.ParallelComputer.getSuite(org.junit.runners.model.RunnerBuilder, java.lang.Class[])</inbound>
            <inbound type="feature" confirmed="yes">org.junit.experimental.categories.Categories$CategoryFilter.Categories$CategoryFilter(java.lang.Class, java.lang.Class)</inbound>
            <inbound type="feature" confirmed="yes">org.junit.experimental.categories.Categories$CategoryFilter.categories(org.junit.runner.Description)</inbound>
            <inbound type="feature" confirmed="yes">org.junit.experimental.categories.Categories$CategoryFilter.describe()</inbound>
            <inbound type="feature" confirmed="yes">org.junit.experimental.categories.Categories$CategoryFilter.directCategories(org.junit.runner.Description)</inbound>
            <inbound type="feature" confirmed="yes">org.junit.experimental.categories.Categories$CategoryFilter.fExcluded</inbound>
            <inbound type="feature" confirmed="yes">org.junit.experimental.categories.Categories$CategoryFilter.fIncluded</inbound>
            <inbound type="feature" confirmed="yes">org.junit.experimental.categories.Categories$CategoryFilter.hasCorrectCategoryAnnotation(org.junit.runner.Description)</inbound>
            <inbound type="feature" confirmed="yes">org.junit.experimental.categories.Categories$CategoryFilter.include(java.lang.Class)</inbound>
            <inbound type="feature" confirmed="yes">org.junit.experimental.categories.Categories$CategoryFilter.parentDescription(org.junit.runner.Description)</inbound>
            <inbound type="feature" confirmed="yes">org.junit.experimental.categories.Categories$ExcludeCategory.value()</inbound>
            <inbound type="feature" confirmed="yes">org.junit.experimental.categories.Categories$IncludeCategory.value()</inbound>
            <inbound type="feature" confirmed="yes">org.junit.experimental.categories.Categories.Categories(java.lang.Class, org.junit.runners.model.RunnerBuilder)</inbound>
            <inbound type="feature" confirmed="yes">org.junit.experimental.categories.Categories.assertNoDescendantsHaveCategoryAnnotations(org.junit.runner.Description)</inbound>
            <inbound type="feature" confirmed="yes">org.junit.experimental.categories.Categories.canHaveCategorizedChildren(org.junit.runner.Description)</inbound>
            <inbound type="feature" confirmed="yes">org.junit.experimental.categories.Categories.getExcludedCategory(java.lang.Class)</inbound>
            <inbound type="feature" confirmed="yes">org.junit.experimental.categories.Categories.getIncludedCategory(java.lang.Class)</inbound>
            <inbound type="feature" confirmed="yes">org.junit.experimental.categories.Category.value()</inbound>
            <inbound type="feature" confirmed="yes">org.junit.experimental.max.MaxCore$1$1.MaxCore$1$1(org.junit.experimental.max.MaxCore$1, java.lang.Class, java.util.List)</inbound>
            <inbound type="feature" confirmed="yes">org.junit.experimental.max.MaxCore$1.getRunner()</inbound>
            <inbound type="feature" confirmed="yes">org.junit.experimental.max.MaxCore.buildRunner(org.junit.runner.Description)</inbound>
            <inbound type="feature" confirmed="yes">org.junit.experimental.max.MaxCore.getMalformedTestClass(org.junit.runner.Description)</inbound>
            <inbound type="feature" confirmed="yes">org.junit.experimental.max.MaxCore.run(java.lang.Class)</inbound>
            <inbound type="feature" confirmed="yes">org.junit.experimental.results.PrintableResult.testResult(java.lang.Class)</inbound>
            <inbound type="feature" confirmed="yes">org.junit.experimental.runners.Enclosed.Enclosed(java.lang.Class, org.junit.runners.model.RunnerBuilder)</inbound>
            <inbound type="feature" confirmed="yes">org.junit.experimental.theories.ParameterSignature.ParameterSignature(java.lang.Class, java.lang.annotation.Annotation[])</inbound>
            <inbound type="feature" confirmed="yes">org.junit.experimental.theories.ParameterSignature.canAcceptArrayType(java.lang.Class)</inbound>
            <inbound type="feature" confirmed="yes">org.junit.experimental.theories.ParameterSignature.canAcceptType(java.lang.Class)</inbound>
            <inbound type="feature" confirmed="yes">org.junit.experimental.theories.ParameterSignature.findDeepAnnotation(java.lang.Class)</inbound>
            <inbound type="feature" confirmed="yes">org.junit.experimental.theories.ParameterSignature.findDeepAnnotation(java.lang.annotation.Annotation[], java.lang.Class, int)</inbound>
            <inbound type="feature" confirmed="yes">org.junit.experimental.theories.ParameterSignature.getAnnotation(java.lang.Class)</inbound>
            <inbound type="feature" confirmed="yes">org.junit.experimental.theories.ParameterSignature.getType()</inbound>
            <inbound type="feature" confirmed="yes">org.junit.experimental.theories.ParameterSignature.hasAnnotation(java.lang.Class)</inbound>
            <inbound type="feature" confirmed="yes">org.junit.experimental.theories.ParameterSignature.signatures(java.lang.Class[], java.lang.annotation.Annotation[][])</inbound>
            <inbound type="feature" confirmed="yes">org.junit.experimental.theories.ParameterSignature.signatures(java.lang.reflect.Constructor)</inbound>
            <inbound type="feature" confirmed="yes">org.junit.experimental.theories.ParameterSignature.signatures(java.lang.reflect.Method)</inbound>
            <inbound type="feature" confirmed="yes">org.junit.experimental.theories.ParameterSignature.type</inbound>
            <inbound type="feature" confirmed="yes">org.junit.experimental.theories.ParametersSuppliedBy.value()</inbound>
            <inbound type="feature" confirmed="yes">org.junit.experimental.theories.Theories$TheoryAnchor$1.Theories$TheoryAnchor$1(org.junit.experimental.theories.Theories$TheoryAnchor, java.lang.Class, org.junit.experimental.theories.internal.Assignments)</inbound>
            <inbound type="feature" confirmed="yes">org.junit.experimental.theories.Theories$TheoryAnchor.nullsOk()</inbound>
            <inbound type="feature" confirmed="yes">org.junit.experimental.theories.Theories$TheoryAnchor.runWithCompleteAssignment(org.junit.experimental.theories.internal.Assignments)</inbound>
            <inbound type="feature" confirmed="yes">org.junit.experimental.theories.Theories.Theories(java.lang.Class)</inbound>
            <inbound type="feature" confirmed="yes">org.junit.experimental.theories.Theories.computeTestMethods()</inbound>
            <inbound type="feature" confirmed="yes">org.junit.experimental.theories.Theories.validateDataPointFields(java.util.List)</inbound>
            <inbound type="feature" confirmed="yes">org.junit.experimental.theories.Theories.validateTestMethods(java.util.List)</inbound>
            <inbound type="feature" confirmed="yes">org.junit.experimental.theories.internal.AllMembersSupplier.addFields(org.junit.experimental.theories.ParameterSignature, java.util.List)</inbound>
            <inbound type="feature" confirmed="yes">org.junit.experimental.theories.internal.AllMembersSupplier.addMultiPointMethods(java.util.List)</inbound>
            <inbound type="feature" confirmed="yes">org.junit.experimental.theories.internal.AllMembersSupplier.addSinglePointMethods(org.junit.experimental.theories.ParameterSignature, java.util.List)</inbound>
            <inbound type="feature" confirmed="yes">org.junit.experimental.theories.internal.Assignments.getAnnotatedSupplier(org.junit.experimental.theories.ParameterSignature)</inbound>
            <inbound type="feature" confirmed="yes">org.junit.experimental.theories.suppliers.TestedOnSupplier.getValueSources(org.junit.experimental.theories.ParameterSignature)</inbound>
            <inbound type="feature" confirmed="yes">org.junit.internal.ComparisonCriteria.isArray(java.lang.Object)</inbound>
            <inbound type="feature" confirmed="yes">org.junit.internal.builders.AllDefaultPossibilitiesBuilder.runnerForClass(java.lang.Class)</inbound>
            <inbound type="feature" confirmed="yes">org.junit.internal.builders.AnnotatedBuilder.buildRunner(java.lang.Class, java.lang.Class)</inbound>
            <inbound type="feature" confirmed="yes">org.junit.internal.builders.AnnotatedBuilder.runnerForClass(java.lang.Class)</inbound>
            <inbound type="feature" confirmed="yes">org.junit.internal.builders.IgnoredBuilder.runnerForClass(java.lang.Class)</inbound>
            <inbound type="feature" confirmed="yes">org.junit.internal.builders.IgnoredClassRunner.IgnoredClassRunner(java.lang.Class)</inbound>
            <inbound type="feature" confirmed="yes">org.junit.internal.builders.IgnoredClassRunner.fTestClass</inbound>
            <inbound type="feature" confirmed="yes">org.junit.internal.builders.IgnoredClassRunner.getDescription()</inbound>
            <inbound type="feature" confirmed="yes">org.junit.internal.builders.JUnit3Builder.isPre4Test(java.lang.Class)</inbound>
            <inbound type="feature" confirmed="yes">org.junit.internal.builders.JUnit3Builder.runnerForClass(java.lang.Class)</inbound>
            <inbound type="feature" confirmed="yes">org.junit.internal.builders.JUnit4Builder.runnerForClass(java.lang.Class)</inbound>
            <inbound type="feature" confirmed="yes">org.junit.internal.builders.NullBuilder.runnerForClass(java.lang.Class)</inbound>
            <inbound type="feature" confirmed="yes">org.junit.internal.builders.SuiteMethodBuilder.hasSuiteMethod(java.lang.Class)</inbound>
            <inbound type="feature" confirmed="yes">org.junit.internal.builders.SuiteMethodBuilder.runnerForClass(java.lang.Class)</inbound>
            <inbound type="feature" confirmed="yes">org.junit.internal.matchers.TypeSafeMatcher.TypeSafeMatcher()</inbound>
            <inbound type="feature" confirmed="yes">org.junit.internal.matchers.TypeSafeMatcher.TypeSafeMatcher(java.lang.Class)</inbound>
            <inbound type="feature" confirmed="yes">org.junit.internal.matchers.TypeSafeMatcher.expectedType</inbound>
            <inbound type="feature" confirmed="yes">org.junit.internal.matchers.TypeSafeMatcher.findExpectedType(java.lang.Class)</inbound>
            <inbound type="feature" confirmed="yes">org.junit.internal.matchers.TypeSafeMatcher.isMatchesSafelyMethod(java.lang.reflect.Method)</inbound>
            <inbound type="feature" confirmed="yes">org.junit.internal.matchers.TypeSafeMatcher.matches(java.lang.Object)</inbound>
            <inbound type="feature" confirmed="yes">org.junit.internal.requests.ClassRequest.ClassRequest(java.lang.Class)</inbound>
            <inbound type="feature" confirmed="yes">org.junit.internal.requests.ClassRequest.ClassRequest(java.lang.Class, boolean)</inbound>
            <inbound type="feature" confirmed="yes">org.junit.internal.requests.ClassRequest.fTestClass</inbound>
            <inbound type="feature" confirmed="yes">org.junit.internal.requests.ClassRequest.getRunner()</inbound>
            <inbound type="feature" confirmed="yes">org.junit.internal.requests.FilterRequest.getRunner()</inbound>
            <inbound type="feature" confirmed="yes">org.junit.internal.runners.ErrorReportingRunner.ErrorReportingRunner(java.lang.Class, java.lang.Throwable)</inbound>
            <inbound type="feature" confirmed="yes">org.junit.internal.runners.ErrorReportingRunner.describeCause(java.lang.Throwable)</inbound>
            <inbound type="feature" confirmed="yes">org.junit.internal.runners.ErrorReportingRunner.fTestClass</inbound>
            <inbound type="feature" confirmed="yes">org.junit.internal.runners.ErrorReportingRunner.getDescription()</inbound>
            <inbound type="feature" confirmed="yes">org.junit.internal.runners.JUnit38ClassRunner$OldTestClassAdaptingListener.asDescription(junit.framework.Test)</inbound>
            <inbound type="feature" confirmed="yes">org.junit.internal.runners.JUnit38ClassRunner$OldTestClassAdaptingListener.getEffectiveClass(junit.framework.Test)</inbound>
            <inbound type="feature" confirmed="yes">org.junit.internal.runners.JUnit38ClassRunner.JUnit38ClassRunner(java.lang.Class)</inbound>
            <inbound type="feature" confirmed="yes">org.junit.internal.runners.JUnit38ClassRunner.makeDescription(junit.framework.Test)</inbound>
            <inbound type="feature" confirmed="yes">org.junit.internal.runners.JUnit4ClassRunner.JUnit4ClassRunner(java.lang.Class)</inbound>
            <inbound type="feature" confirmed="yes">org.junit.internal.runners.JUnit4ClassRunner.classAnnotations()</inbound>
            <inbound type="feature" confirmed="yes">org.junit.internal.runners.JUnit4ClassRunner.methodDescription(java.lang.reflect.Method)</inbound>
            <inbound type="feature" confirmed="yes">org.junit.internal.runners.MethodRoadie.runTestMethod()</inbound>
            <inbound type="feature" confirmed="yes">org.junit.internal.runners.MethodValidator.validateInstanceMethods()</inbound>
            <inbound type="feature" confirmed="yes">org.junit.internal.runners.MethodValidator.validateStaticMethods()</inbound>
            <inbound type="feature" confirmed="yes">org.junit.internal.runners.MethodValidator.validateTestMethods(java.lang.Class, boolean)</inbound>
            <inbound type="feature" confirmed="yes">org.junit.internal.runners.SuiteMethod.SuiteMethod(java.lang.Class)</inbound>
            <inbound type="feature" confirmed="yes">org.junit.internal.runners.SuiteMethod.testFromSuiteMethod(java.lang.Class)</inbound>
            <inbound type="feature" confirmed="yes">org.junit.internal.runners.TestClass.TestClass(java.lang.Class)</inbound>
            <inbound type="feature" confirmed="yes">org.junit.internal.runners.TestClass.fClass</inbound>
            <inbound type="feature" confirmed="yes">org.junit.internal.runners.TestClass.getAfters()</inbound>
            <inbound type="feature" confirmed="yes">org.junit.internal.runners.TestClass.getAnnotatedMethods(java.lang.Class)</inbound>
            <inbound type="feature" confirmed="yes">org.junit.internal.runners.TestClass.getBefores()</inbound>
            <inbound type="feature" confirmed="yes">org.junit.internal.runners.TestClass.getConstructor()</inbound>
            <inbound type="feature" confirmed="yes">org.junit.internal.runners.TestClass.getJavaClass()</inbound>
            <inbound type="feature" confirmed="yes">org.junit.internal.runners.TestClass.getName()</inbound>
            <inbound type="feature" confirmed="yes">org.junit.internal.runners.TestClass.getSuperClasses(java.lang.Class)</inbound>
            <inbound type="feature" confirmed="yes">org.junit.internal.runners.TestClass.getTestMethods()</inbound>
            <inbound type="feature" confirmed="yes">org.junit.internal.runners.TestClass.isShadowed(java.lang.reflect.Method, java.lang.reflect.Method)</inbound>
            <inbound type="feature" confirmed="yes">org.junit.internal.runners.TestClass.runsTopToBottom(java.lang.Class)</inbound>
            <inbound type="feature" confirmed="yes">org.junit.internal.runners.TestMethod.expectsException()</inbound>
            <inbound type="feature" confirmed="yes">org.junit.internal.runners.TestMethod.getAfters()</inbound>
            <inbound type="feature" confirmed="yes">org.junit.internal.runners.TestMethod.getBefores()</inbound>
            <inbound type="feature" confirmed="yes">org.junit.internal.runners.TestMethod.getExpectedException()</inbound>
            <inbound type="feature" confirmed="yes">org.junit.internal.runners.TestMethod.getTimeout()</inbound>
            <inbound type="feature" confirmed="yes">org.junit.internal.runners.TestMethod.isIgnored()</inbound>
            <inbound type="feature" confirmed="yes">org.junit.internal.runners.TestMethod.isUnexpected(java.lang.Throwable)</inbound>
            <inbound type="feature" confirmed="yes">org.junit.internal.runners.rules.RuleFieldValidator.RuleFieldValidator(java.lang.String, int, java.lang.Class, boolean)</inbound>
            <inbound type="feature" confirmed="yes">org.junit.internal.runners.rules.RuleFieldValidator.addError(java.util.List, org.junit.runners.model.FrameworkField, java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">org.junit.internal.runners.rules.RuleFieldValidator.fAnnotation</inbound>
            <inbound type="feature" confirmed="yes">org.junit.internal.runners.rules.RuleFieldValidator.isMethodRule(org.junit.runners.model.FrameworkField)</inbound>
            <inbound type="feature" confirmed="yes">org.junit.internal.runners.rules.RuleFieldValidator.isTestRule(org.junit.runners.model.FrameworkField)</inbound>
            <inbound type="feature" confirmed="yes">org.junit.internal.runners.rules.RuleFieldValidator.static {}</inbound>
            <inbound type="feature" confirmed="yes">org.junit.internal.runners.rules.RuleFieldValidator.validate(org.junit.runners.model.TestClass, java.util.List)</inbound>
            <inbound type="feature" confirmed="yes">org.junit.internal.runners.rules.RuleFieldValidator.valueOf(java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">org.junit.internal.runners.statements.ExpectException.ExpectException(org.junit.runners.model.Statement, java.lang.Class)</inbound>
            <inbound type="feature" confirmed="yes">org.junit.internal.runners.statements.ExpectException.evaluate()</inbound>
            <inbound type="feature" confirmed="yes">org.junit.internal.runners.statements.ExpectException.fExpected</inbound>
            <inbound type="feature" confirmed="yes">org.junit.rules.ExpectedException.expect(java.lang.Class)</inbound>
            <inbound type="feature" confirmed="yes">org.junit.runner.Computer$1.runnerForClass(java.lang.Class)</inbound>
            <inbound type="feature" confirmed="yes">org.junit.runner.Computer.getRunner(org.junit.runners.model.RunnerBuilder, java.lang.Class)</inbound>
            <inbound type="feature" confirmed="yes">org.junit.runner.Computer.getSuite(org.junit.runners.model.RunnerBuilder, java.lang.Class[])</inbound>
            <inbound type="feature" confirmed="yes">org.junit.runner.Description.createSuiteDescription(java.lang.Class)</inbound>
            <inbound type="feature" confirmed="yes">org.junit.runner.Description.createTestDescription(java.lang.Class, java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">org.junit.runner.Description.createTestDescription(java.lang.Class, java.lang.String, java.lang.annotation.Annotation[])</inbound>
            <inbound type="feature" confirmed="yes">org.junit.runner.Description.getAnnotation(java.lang.Class)</inbound>
            <inbound type="feature" confirmed="yes">org.junit.runner.Description.getTestClass()</inbound>
            <inbound type="feature" confirmed="yes">org.junit.runner.JUnitCore.run(java.lang.Class[])</inbound>
            <inbound type="feature" confirmed="yes">org.junit.runner.JUnitCore.run(org.junit.runner.Computer, java.lang.Class[])</inbound>
            <inbound type="feature" confirmed="yes">org.junit.runner.JUnitCore.runClasses(java.lang.Class[])</inbound>
            <inbound type="feature" confirmed="yes">org.junit.runner.JUnitCore.runClasses(org.junit.runner.Computer, java.lang.Class[])</inbound>
            <inbound type="feature" confirmed="yes">org.junit.runner.JUnitCore.runMain(org.junit.internal.JUnitSystem, java.lang.String[])</inbound>
            <inbound type="feature" confirmed="yes">org.junit.runner.Request.aClass(java.lang.Class)</inbound>
            <inbound type="feature" confirmed="yes">org.junit.runner.Request.classWithoutSuiteMethod(java.lang.Class)</inbound>
            <inbound type="feature" confirmed="yes">org.junit.runner.Request.classes(java.lang.Class[])</inbound>
            <inbound type="feature" confirmed="yes">org.junit.runner.Request.classes(org.junit.runner.Computer, java.lang.Class[])</inbound>
            <inbound type="feature" confirmed="yes">org.junit.runner.Request.errorReport(java.lang.Class, java.lang.Throwable)</inbound>
            <inbound type="feature" confirmed="yes">org.junit.runner.Request.method(java.lang.Class, java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">org.junit.runner.RunWith.value()</inbound>
            <inbound type="feature" confirmed="yes">org.junit.runners.AllTests.AllTests(java.lang.Class)</inbound>
            <inbound type="feature" confirmed="yes">org.junit.runners.BlockJUnit4ClassRunner.BlockJUnit4ClassRunner(java.lang.Class)</inbound>
            <inbound type="feature" confirmed="yes">org.junit.runners.BlockJUnit4ClassRunner.computeTestMethods()</inbound>
            <inbound type="feature" confirmed="yes">org.junit.runners.BlockJUnit4ClassRunner.describeChild(org.junit.runners.model.FrameworkMethod)</inbound>
            <inbound type="feature" confirmed="yes">org.junit.runners.BlockJUnit4ClassRunner.expectsException(org.junit.Test)</inbound>
            <inbound type="feature" confirmed="yes">org.junit.runners.BlockJUnit4ClassRunner.getExpectedException(org.junit.Test)</inbound>
            <inbound type="feature" confirmed="yes">org.junit.runners.BlockJUnit4ClassRunner.getTestRules(java.lang.Object)</inbound>
            <inbound type="feature" confirmed="yes">org.junit.runners.BlockJUnit4ClassRunner.hasOneConstructor()</inbound>
            <inbound type="feature" confirmed="yes">org.junit.runners.BlockJUnit4ClassRunner.possiblyExpectingExceptions(org.junit.runners.model.FrameworkMethod, java.lang.Object, org.junit.runners.model.Statement)</inbound>
            <inbound type="feature" confirmed="yes">org.junit.runners.BlockJUnit4ClassRunner.rules(java.lang.Object)</inbound>
            <inbound type="feature" confirmed="yes">org.junit.runners.BlockJUnit4ClassRunner.runChild(org.junit.runners.model.FrameworkMethod, org.junit.runner.notification.RunNotifier)</inbound>
            <inbound type="feature" confirmed="yes">org.junit.runners.BlockJUnit4ClassRunner.validateInstanceMethods(java.util.List)</inbound>
            <inbound type="feature" confirmed="yes">org.junit.runners.BlockJUnit4ClassRunner.validateTestMethods(java.util.List)</inbound>
            <inbound type="feature" confirmed="yes">org.junit.runners.BlockJUnit4ClassRunner.validateZeroArgConstructor(java.util.List)</inbound>
            <inbound type="feature" confirmed="yes">org.junit.runners.BlockJUnit4ClassRunner.withAfters(org.junit.runners.model.FrameworkMethod, java.lang.Object, org.junit.runners.model.Statement)</inbound>
            <inbound type="feature" confirmed="yes">org.junit.runners.BlockJUnit4ClassRunner.withBefores(org.junit.runners.model.FrameworkMethod, java.lang.Object, org.junit.runners.model.Statement)</inbound>
            <inbound type="feature" confirmed="yes">org.junit.runners.BlockJUnit4ClassRunner.withPotentialTimeout(org.junit.runners.model.FrameworkMethod, java.lang.Object, org.junit.runners.model.Statement)</inbound>
            <inbound type="feature" confirmed="yes">org.junit.runners.JUnit4.JUnit4(java.lang.Class)</inbound>
            <inbound type="feature" confirmed="yes">org.junit.runners.Parameterized$TestClassRunnerForParameters.Parameterized$TestClassRunnerForParameters(org.junit.runners.Parameterized, java.lang.Class, java.util.List, int)</inbound>
            <inbound type="feature" confirmed="yes">org.junit.runners.Parameterized.Parameterized(java.lang.Class)</inbound>
            <inbound type="feature" confirmed="yes">org.junit.runners.Parameterized.getParametersMethod(org.junit.runners.model.TestClass)</inbound>
            <inbound type="feature" confirmed="yes">org.junit.runners.ParentRunner.ParentRunner(java.lang.Class)</inbound>
            <inbound type="feature" confirmed="yes">org.junit.runners.ParentRunner.classRules()</inbound>
            <inbound type="feature" confirmed="yes">org.junit.runners.ParentRunner.collectInitializationErrors(java.util.List)</inbound>
            <inbound type="feature" confirmed="yes">org.junit.runners.ParentRunner.validatePublicVoidNoArgMethods(java.lang.Class, boolean, java.util.List)</inbound>
            <inbound type="feature" confirmed="yes">org.junit.runners.ParentRunner.withAfterClasses(org.junit.runners.model.Statement)</inbound>
            <inbound type="feature" confirmed="yes">org.junit.runners.ParentRunner.withBeforeClasses(org.junit.runners.model.Statement)</inbound>
            <inbound type="feature" confirmed="yes">org.junit.runners.Suite$SuiteClasses.value()</inbound>
            <inbound type="feature" confirmed="yes">org.junit.runners.Suite.Suite(java.lang.Class, java.lang.Class[])</inbound>
            <inbound type="feature" confirmed="yes">org.junit.runners.Suite.Suite(java.lang.Class, java.util.List)</inbound>
            <inbound type="feature" confirmed="yes">org.junit.runners.Suite.Suite(java.lang.Class, org.junit.runners.model.RunnerBuilder)</inbound>
            <inbound type="feature" confirmed="yes">org.junit.runners.Suite.Suite(org.junit.runners.model.RunnerBuilder, java.lang.Class, java.lang.Class[])</inbound>
            <inbound type="feature" confirmed="yes">org.junit.runners.Suite.Suite(org.junit.runners.model.RunnerBuilder, java.lang.Class[])</inbound>
            <inbound type="feature" confirmed="yes">org.junit.runners.Suite.emptySuite()</inbound>
            <inbound type="feature" confirmed="yes">org.junit.runners.Suite.getAnnotatedClasses(java.lang.Class)</inbound>
            <inbound type="feature" confirmed="yes">org.junit.runners.model.FrameworkField.getType()</inbound>
            <inbound type="feature" confirmed="yes">org.junit.runners.model.FrameworkMethod.getAnnotation(java.lang.Class)</inbound>
            <inbound type="feature" confirmed="yes">org.junit.runners.model.FrameworkMethod.getParameterTypes()</inbound>
            <inbound type="feature" confirmed="yes">org.junit.runners.model.FrameworkMethod.isShadowedBy(org.junit.runners.model.FrameworkMethod)</inbound>
            <inbound type="feature" confirmed="yes">org.junit.runners.model.FrameworkMethod.producesType(java.lang.Class)</inbound>
            <inbound type="feature" confirmed="yes">org.junit.runners.model.FrameworkMethod.validatePublicVoid(boolean, java.util.List)</inbound>
            <inbound type="feature" confirmed="yes">org.junit.runners.model.FrameworkMethod.validatePublicVoidNoArg(boolean, java.util.List)</inbound>
            <inbound type="feature" confirmed="yes">org.junit.runners.model.MultipleFailureException.getMessage()</inbound>
            <inbound type="feature" confirmed="yes">org.junit.runners.model.RunnerBuilder.addParent(java.lang.Class)</inbound>
            <inbound type="feature" confirmed="yes">org.junit.runners.model.RunnerBuilder.removeParent(java.lang.Class)</inbound>
            <inbound type="feature" confirmed="yes">org.junit.runners.model.RunnerBuilder.runnerForClass(java.lang.Class)</inbound>
            <inbound type="feature" confirmed="yes">org.junit.runners.model.RunnerBuilder.runners(java.lang.Class, java.lang.Class[])</inbound>
            <inbound type="feature" confirmed="yes">org.junit.runners.model.RunnerBuilder.runners(java.lang.Class, java.util.List)</inbound>
            <inbound type="feature" confirmed="yes">org.junit.runners.model.RunnerBuilder.runners(java.lang.Class[])</inbound>
            <inbound type="feature" confirmed="yes">org.junit.runners.model.RunnerBuilder.safeRunnerForClass(java.lang.Class)</inbound>
            <inbound type="feature" confirmed="yes">org.junit.runners.model.TestClass.TestClass(java.lang.Class)</inbound>
            <inbound type="feature" confirmed="yes">org.junit.runners.model.TestClass.addToAnnotationLists(org.junit.runners.model.FrameworkMember, java.util.Map)</inbound>
            <inbound type="feature" confirmed="yes">org.junit.runners.model.TestClass.fClass</inbound>
            <inbound type="feature" confirmed="yes">org.junit.runners.model.TestClass.getAnnotatedFieldValues(java.lang.Object, java.lang.Class, java.lang.Class)</inbound>
            <inbound type="feature" confirmed="yes">org.junit.runners.model.TestClass.getAnnotatedFields(java.lang.Class)</inbound>
            <inbound type="feature" confirmed="yes">org.junit.runners.model.TestClass.getAnnotatedMembers(java.util.Map, java.lang.Class)</inbound>
            <inbound type="feature" confirmed="yes">org.junit.runners.model.TestClass.getAnnotatedMethods(java.lang.Class)</inbound>
            <inbound type="feature" confirmed="yes">org.junit.runners.model.TestClass.getAnnotations()</inbound>
            <inbound type="feature" confirmed="yes">org.junit.runners.model.TestClass.getJavaClass()</inbound>
            <inbound type="feature" confirmed="yes">org.junit.runners.model.TestClass.getName()</inbound>
            <inbound type="feature" confirmed="yes">org.junit.runners.model.TestClass.getOnlyConstructor()</inbound>
            <inbound type="feature" confirmed="yes">org.junit.runners.model.TestClass.getSuperClasses(java.lang.Class)</inbound>
            <inbound type="feature" confirmed="yes">org.junit.runners.model.TestClass.runsTopToBottom(java.lang.Class)</inbound>
            <feature confirmed="no">
                <name>java.lang.Class.asSubclass(java.lang.Class)</name>
                <inbound type="feature" confirmed="yes">junit.framework.TestSuite.testCaseForClass(java.lang.Class)</inbound>
                <inbound type="feature" confirmed="yes">junit.textui.TestRunner.runSingleMethod(java.lang.String, java.lang.String, boolean)</inbound>
                <inbound type="feature" confirmed="yes">org.junit.internal.runners.JUnit38ClassRunner.JUnit38ClassRunner(java.lang.Class)</inbound>
            </feature>
            <feature confirmed="no">
                <name>java.lang.Class.cast(java.lang.Object)</name>
                <inbound type="feature" confirmed="yes">org.junit.experimental.theories.ParameterSignature.findDeepAnnotation(java.lang.annotation.Annotation[], java.lang.Class, int)</inbound>
                <inbound type="feature" confirmed="yes">org.junit.experimental.theories.ParameterSignature.getAnnotation(java.lang.Class)</inbound>
                <inbound type="feature" confirmed="yes">org.junit.runner.Description.getAnnotation(java.lang.Class)</inbound>
                <inbound type="feature" confirmed="yes">org.junit.runners.model.TestClass.getAnnotatedFieldValues(java.lang.Object, java.lang.Class, java.lang.Class)</inbound>
            </feature>
            <feature confirmed="no">
                <name>java.lang.Class.forName(java.lang.String)</name>
                <inbound type="feature" confirmed="yes">junit.runner.BaseTestRunner.loadSuiteClass(java.lang.String)</inbound>
                <inbound type="feature" confirmed="yes">org.junit.experimental.max.MaxCore.getMalformedTestClass(org.junit.runner.Description)</inbound>
                <inbound type="feature" confirmed="yes">org.junit.runner.Description.getTestClass()</inbound>
                <inbound type="feature" confirmed="yes">org.junit.runner.JUnitCore.runMain(org.junit.internal.JUnitSystem, java.lang.String[])</inbound>
            </feature>
            <feature confirmed="no">
                <name>java.lang.Class.getAnnotation(java.lang.Class)</name>
                <inbound type="feature" confirmed="yes">org.junit.experimental.categories.Categories.getExcludedCategory(java.lang.Class)</inbound>
                <inbound type="feature" confirmed="yes">org.junit.experimental.categories.Categories.getIncludedCategory(java.lang.Class)</inbound>
                <inbound type="feature" confirmed="yes">org.junit.internal.builders.AnnotatedBuilder.runnerForClass(java.lang.Class)</inbound>
                <inbound type="feature" confirmed="yes">org.junit.internal.builders.IgnoredBuilder.runnerForClass(java.lang.Class)</inbound>
                <inbound type="feature" confirmed="yes">org.junit.runners.Suite.getAnnotatedClasses(java.lang.Class)</inbound>
            </feature>
            <feature confirmed="no">
                <name>java.lang.Class.getAnnotations()</name>
                <inbound type="feature" confirmed="yes">org.junit.experimental.theories.ParameterSignature.findDeepAnnotation(java.lang.annotation.Annotation[], java.lang.Class, int)</inbound>
                <inbound type="feature" confirmed="yes">org.junit.internal.runners.JUnit4ClassRunner.classAnnotations()</inbound>
                <inbound type="feature" confirmed="yes">org.junit.runner.Description.createSuiteDescription(java.lang.Class)</inbound>
                <inbound type="feature" confirmed="yes">org.junit.runners.model.TestClass.getAnnotations()</inbound>
            </feature>
            <feature confirmed="no">
                <name>java.lang.Class.getCanonicalName()</name>
                <inbound type="feature" confirmed="yes">junit.framework.TestSuite.addTestMethod(java.lang.reflect.Method, java.util.List, java.lang.Class)</inbound>
                <inbound type="feature" confirmed="yes">junit.framework.TestSuite.testCaseForClass(java.lang.Class)</inbound>
            </feature>
            <feature confirmed="no">
                <name>java.lang.Class.getClasses()</name>
                <inbound type="feature" confirmed="yes">org.junit.experimental.runners.Enclosed.Enclosed(java.lang.Class, org.junit.runners.model.RunnerBuilder)</inbound>
            </feature>
            <feature confirmed="no">
                <name>java.lang.Class.getComponentType()</name>
                <inbound type="feature" confirmed="yes">org.junit.experimental.theories.ParameterSignature.canAcceptArrayType(java.lang.Class)</inbound>
            </feature>
            <feature confirmed="no">
                <name>java.lang.Class.getConstructor(java.lang.Class[])</name>
                <inbound type="feature" confirmed="yes">junit.framework.TestSuite.getTestConstructor(java.lang.Class)</inbound>
                <inbound type="feature" confirmed="yes">org.junit.internal.builders.AnnotatedBuilder.buildRunner(java.lang.Class, java.lang.Class)</inbound>
                <inbound type="feature" confirmed="yes">org.junit.internal.runners.TestClass.getConstructor()</inbound>
            </feature>
            <feature confirmed="no">
                <name>java.lang.Class.getConstructors()</name>
                <inbound type="feature" confirmed="yes">org.junit.runners.BlockJUnit4ClassRunner.hasOneConstructor()</inbound>
                <inbound type="feature" confirmed="yes">org.junit.runners.model.TestClass.TestClass(java.lang.Class)</inbound>
                <inbound type="feature" confirmed="yes">org.junit.runners.model.TestClass.getOnlyConstructor()</inbound>
            </feature>
            <feature confirmed="no">
                <name>java.lang.Class.getDeclaredFields()</name>
                <inbound type="feature" confirmed="yes">org.junit.experimental.theories.Theories.validateDataPointFields(java.util.List)</inbound>
                <inbound type="feature" confirmed="yes">org.junit.runners.model.TestClass.TestClass(java.lang.Class)</inbound>
            </feature>
            <feature confirmed="no">
                <name>java.lang.Class.getDeclaredMethods()</name>
                <inbound type="feature" confirmed="yes">junit.framework.TestSuite.addTestsFromTestCase(java.lang.Class)</inbound>
                <inbound type="feature" confirmed="yes">org.junit.internal.matchers.TypeSafeMatcher.findExpectedType(java.lang.Class)</inbound>
                <inbound type="feature" confirmed="yes">org.junit.internal.runners.TestClass.getAnnotatedMethods(java.lang.Class)</inbound>
                <inbound type="feature" confirmed="yes">org.junit.runners.model.TestClass.TestClass(java.lang.Class)</inbound>
            </feature>
            <feature confirmed="no">
                <name>java.lang.Class.getFields()</name>
                <inbound type="feature" confirmed="yes">org.junit.experimental.theories.internal.AllMembersSupplier.addFields(org.junit.experimental.theories.ParameterSignature, java.util.List)</inbound>
            </feature>
            <feature confirmed="no">
                <name>java.lang.Class.getMethod(java.lang.String, java.lang.Class[])</name>
                <inbound type="feature" confirmed="yes">junit.framework.TestCase.runTest()</inbound>
                <inbound type="feature" confirmed="yes">junit.runner.BaseTestRunner.getTest(java.lang.String)</inbound>
                <inbound type="feature" confirmed="yes">org.junit.internal.builders.SuiteMethodBuilder.hasSuiteMethod(java.lang.Class)</inbound>
                <inbound type="feature" confirmed="yes">org.junit.internal.runners.SuiteMethod.testFromSuiteMethod(java.lang.Class)</inbound>
            </feature>
            <feature confirmed="no">
                <name>java.lang.Class.getModifiers()</name>
                <inbound type="feature" confirmed="yes">junit.framework.TestSuite.addTestsFromTestCase(java.lang.Class)</inbound>
                <inbound type="feature" confirmed="yes">org.junit.internal.runners.MethodValidator.validateTestMethods(java.lang.Class, boolean)</inbound>
                <inbound type="feature" confirmed="yes">org.junit.runners.model.FrameworkMethod.validatePublicVoid(boolean, java.util.List)</inbound>
            </feature>
            <feature confirmed="no">
                <name>java.lang.Class.getName()</name>
                <inbound type="feature" confirmed="yes">junit.framework.JUnit4TestAdapter.toString()</inbound>
                <inbound type="feature" confirmed="yes">junit.framework.TestCase.toString()</inbound>
                <inbound type="feature" confirmed="yes">junit.framework.TestSuite.addTestsFromTestCase(java.lang.Class)</inbound>
                <inbound type="feature" confirmed="yes">junit.framework.TestSuite.createTest(java.lang.Class, java.lang.String)</inbound>
                <inbound type="feature" confirmed="yes">org.hamcrest.core.IsInstanceOf.describeTo(org.hamcrest.Description)</inbound>
                <inbound type="feature" confirmed="yes">org.junit.Assert.formatClassAndValue(java.lang.Object, java.lang.String)</inbound>
                <inbound type="feature" confirmed="yes">org.junit.internal.runners.MethodRoadie.runTestMethod()</inbound>
                <inbound type="feature" confirmed="yes">org.junit.internal.runners.MethodValidator.validateTestMethods(java.lang.Class, boolean)</inbound>
                <inbound type="feature" confirmed="yes">org.junit.internal.runners.SuiteMethod.testFromSuiteMethod(java.lang.Class)</inbound>
                <inbound type="feature" confirmed="yes">org.junit.internal.runners.TestClass.getName()</inbound>
                <inbound type="feature" confirmed="yes">org.junit.internal.runners.statements.ExpectException.evaluate()</inbound>
                <inbound type="feature" confirmed="yes">org.junit.runner.Description.createSuiteDescription(java.lang.Class)</inbound>
                <inbound type="feature" confirmed="yes">org.junit.runner.Description.createTestDescription(java.lang.Class, java.lang.String, java.lang.annotation.Annotation[])</inbound>
                <inbound type="feature" confirmed="yes">org.junit.runners.Suite.getAnnotatedClasses(java.lang.Class)</inbound>
                <inbound type="feature" confirmed="yes">org.junit.runners.model.FrameworkMethod.validatePublicVoid(boolean, java.util.List)</inbound>
                <inbound type="feature" confirmed="yes">org.junit.runners.model.MultipleFailureException.getMessage()</inbound>
                <inbound type="feature" confirmed="yes">org.junit.runners.model.RunnerBuilder.addParent(java.lang.Class)</inbound>
                <inbound type="feature" confirmed="yes">org.junit.runners.model.TestClass.getName()</inbound>
            </feature>
            <feature confirmed="no">
                <name>java.lang.Class.getSimpleName()</name>
                <inbound type="feature" confirmed="yes">org.junit.internal.builders.AnnotatedBuilder.buildRunner(java.lang.Class, java.lang.Class)</inbound>
                <inbound type="feature" confirmed="yes">org.junit.internal.runners.rules.RuleFieldValidator.addError(java.util.List, org.junit.runners.model.FrameworkField, java.lang.String)</inbound>
            </feature>
            <feature confirmed="no">
                <name>java.lang.Class.getSuperclass()</name>
                <inbound type="feature" confirmed="yes">junit.framework.TestSuite.addTestsFromTestCase(java.lang.Class)</inbound>
                <inbound type="feature" confirmed="yes">org.junit.internal.matchers.TypeSafeMatcher.findExpectedType(java.lang.Class)</inbound>
                <inbound type="feature" confirmed="yes">org.junit.internal.runners.TestClass.getSuperClasses(java.lang.Class)</inbound>
                <inbound type="feature" confirmed="yes">org.junit.runners.model.TestClass.getSuperClasses(java.lang.Class)</inbound>
            </feature>
            <feature confirmed="no">
                <name>java.lang.Class.isArray()</name>
                <inbound type="feature" confirmed="yes">org.hamcrest.BaseDescription.appendValue(java.lang.Object)</inbound>
                <inbound type="feature" confirmed="yes">org.hamcrest.core.IsEqual.isArray(java.lang.Object)</inbound>
                <inbound type="feature" confirmed="yes">org.hamcrest.internal.ArrayIterator.ArrayIterator(java.lang.Object)</inbound>
                <inbound type="feature" confirmed="yes">org.junit.experimental.theories.ParameterSignature.canAcceptArrayType(java.lang.Class)</inbound>
                <inbound type="feature" confirmed="yes">org.junit.internal.ComparisonCriteria.isArray(java.lang.Object)</inbound>
            </feature>
            <feature confirmed="no">
                <name>java.lang.Class.isAssignableFrom(java.lang.Class)</name>
                <inbound type="feature" confirmed="yes">junit.framework.TestSuite.addTestsFromTestCase(java.lang.Class)</inbound>
                <inbound type="feature" confirmed="yes">junit.framework.TestSuite.testCaseForClass(java.lang.Class)</inbound>
                <inbound type="feature" confirmed="yes">org.junit.experimental.categories.Categories$CategoryFilter.hasCorrectCategoryAnnotation(org.junit.runner.Description)</inbound>
                <inbound type="feature" confirmed="yes">org.junit.experimental.theories.ParameterSignature.canAcceptType(java.lang.Class)</inbound>
                <inbound type="feature" confirmed="yes">org.junit.internal.builders.JUnit3Builder.isPre4Test(java.lang.Class)</inbound>
                <inbound type="feature" confirmed="yes">org.junit.internal.runners.TestMethod.isUnexpected(java.lang.Throwable)</inbound>
                <inbound type="feature" confirmed="yes">org.junit.internal.runners.rules.RuleFieldValidator.isMethodRule(org.junit.runners.model.FrameworkField)</inbound>
                <inbound type="feature" confirmed="yes">org.junit.internal.runners.rules.RuleFieldValidator.isTestRule(org.junit.runners.model.FrameworkField)</inbound>
                <inbound type="feature" confirmed="yes">org.junit.internal.runners.statements.ExpectException.evaluate()</inbound>
                <inbound type="feature" confirmed="yes">org.junit.runners.model.FrameworkMethod.producesType(java.lang.Class)</inbound>
            </feature>
            <feature confirmed="no">
                <name>java.lang.Class.isInstance(java.lang.Object)</name>
                <inbound type="feature" confirmed="yes">org.hamcrest.core.IsInstanceOf.matches(java.lang.Object)</inbound>
                <inbound type="feature" confirmed="yes">org.junit.experimental.theories.ParameterSignature.findDeepAnnotation(java.lang.annotation.Annotation[], java.lang.Class, int)</inbound>
                <inbound type="feature" confirmed="yes">org.junit.experimental.theories.ParameterSignature.getAnnotation(java.lang.Class)</inbound>
                <inbound type="feature" confirmed="yes">org.junit.internal.matchers.TypeSafeMatcher.matches(java.lang.Object)</inbound>
                <inbound type="feature" confirmed="yes">org.junit.runners.model.FrameworkMethod.equals(java.lang.Object)</inbound>
                <inbound type="feature" confirmed="yes">org.junit.runners.model.TestClass.getAnnotatedFieldValues(java.lang.Object, java.lang.Class, java.lang.Class)</inbound>
            </feature>
            <feature confirmed="no">
                <name>java.lang.Class.newInstance()</name>
                <inbound type="feature" confirmed="yes">org.junit.experimental.theories.internal.Assignments.getAnnotatedSupplier(org.junit.experimental.theories.ParameterSignature)</inbound>
            </feature>
        </class>
        <class confirmed="no">
            <name>java.lang.ClassCastException</name>
            <inbound type="feature" confirmed="yes">org.junit.runners.Parameterized$TestClassRunnerForParameters.computeParams()</inbound>
        </class>
        <class confirmed="no">
            <name>java.lang.ClassNotFoundException</name>
            <inbound type="feature" confirmed="yes">junit.runner.BaseTestRunner.getTest(java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">junit.runner.BaseTestRunner.loadSuiteClass(java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">org.junit.experimental.max.MaxCore.getMalformedTestClass(org.junit.runner.Description)</inbound>
            <inbound type="feature" confirmed="yes">org.junit.runner.Description.getTestClass()</inbound>
            <inbound type="feature" confirmed="yes">org.junit.runner.JUnitCore.runMain(org.junit.internal.JUnitSystem, java.lang.String[])</inbound>
            <feature confirmed="no">
                <name>java.lang.ClassNotFoundException.getMessage()</name>
                <inbound type="feature" confirmed="yes">junit.runner.BaseTestRunner.getTest(java.lang.String)</inbound>
            </feature>
        </class>
        <class confirmed="no">
            <name>java.lang.Class[]</name>
            <inbound type="feature" confirmed="yes">junit.framework.TestCase.runTest()</inbound>
            <inbound type="feature" confirmed="yes">org.junit.runner.JUnitCore.runMain(org.junit.internal.JUnitSystem, java.lang.String[])</inbound>
            <inbound type="feature" confirmed="yes">org.junit.runners.model.RunnerBuilder.runners(java.lang.Class, java.util.List)</inbound>
        </class>
        <class confirmed="no">
            <name>java.lang.Double</name>
            <inbound type="feature" confirmed="yes">org.junit.internal.InexactComparisonCriteria.assertElementsEqual(java.lang.Object, java.lang.Object)</inbound>
            <feature confirmed="no">
                <name>java.lang.Double.Double(double)</name>
                <inbound type="feature" confirmed="yes">junit.framework.Assert.assertEquals(java.lang.String, double, double, double)</inbound>
                <inbound type="feature" confirmed="yes">org.junit.Assert.assertEquals(java.lang.String, double, double, double)</inbound>
            </feature>
            <feature confirmed="no">
                <name>java.lang.Double.compare(double, double)</name>
                <inbound type="feature" confirmed="yes">junit.framework.Assert.assertEquals(java.lang.String, double, double, double)</inbound>
                <inbound type="feature" confirmed="yes">org.junit.Assert.assertEquals(java.lang.String, double, double, double)</inbound>
            </feature>
            <feature confirmed="no">
                <name>java.lang.Double.doubleValue()</name>
                <inbound type="feature" confirmed="yes">org.junit.internal.InexactComparisonCriteria.assertElementsEqual(java.lang.Object, java.lang.Object)</inbound>
            </feature>
        </class>
        <class confirmed="no">
            <name>java.lang.Enum</name>
            <inbound type="class" confirmed="yes">org.junit.internal.runners.rules.RuleFieldValidator</inbound>
            <inbound type="feature" confirmed="yes">org.junit.internal.runners.rules.RuleFieldValidator.valueOf(java.lang.String)</inbound>
            <feature confirmed="no">
                <name>java.lang.Enum.Enum(java.lang.String, int)</name>
                <inbound type="feature" confirmed="yes">org.junit.internal.runners.rules.RuleFieldValidator.RuleFieldValidator(java.lang.String, int, java.lang.Class, boolean)</inbound>
            </feature>
            <feature confirmed="no">
                <name>java.lang.Enum.valueOf(java.lang.Class, java.lang.String)</name>
                <inbound type="feature" confirmed="yes">org.junit.internal.runners.rules.RuleFieldValidator.valueOf(java.lang.String)</inbound>
            </feature>
        </class>
        <class confirmed="no">
            <name>java.lang.Error</name>
            <feature confirmed="no">
                <name>java.lang.Error.Error(java.lang.String)</name>
                <inbound type="feature" confirmed="yes">org.junit.experimental.theories.Theories.validateDataPointFields(java.util.List)</inbound>
                <inbound type="feature" confirmed="yes">org.junit.internal.matchers.TypeSafeMatcher.findExpectedType(java.lang.Class)</inbound>
            </feature>
        </class>
        <class confirmed="no">
            <name>java.lang.Exception</name>
            <inbound type="feature" confirmed="yes">junit.extensions.TestSetup$1.protect()</inbound>
            <inbound type="feature" confirmed="yes">junit.extensions.TestSetup.setUp()</inbound>
            <inbound type="feature" confirmed="yes">junit.extensions.TestSetup.tearDown()</inbound>
            <inbound type="feature" confirmed="yes">junit.framework.JUnit4TestAdapterCache$1.testFailure(org.junit.runner.notification.Failure)</inbound>
            <inbound type="feature" confirmed="yes">junit.framework.JUnit4TestAdapterCache$1.testFinished(org.junit.runner.Description)</inbound>
            <inbound type="feature" confirmed="yes">junit.framework.JUnit4TestAdapterCache$1.testStarted(org.junit.runner.Description)</inbound>
            <inbound type="feature" confirmed="yes">junit.framework.TestCase.setUp()</inbound>
            <inbound type="feature" confirmed="yes">junit.framework.TestCase.tearDown()</inbound>
            <inbound type="feature" confirmed="yes">junit.runner.BaseTestRunner.getFilteredTrace(java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">junit.runner.BaseTestRunner.getTest(java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">junit.textui.TestRunner.main(java.lang.String[])</inbound>
            <inbound type="feature" confirmed="yes">junit.textui.TestRunner.pause(boolean)</inbound>
            <inbound type="feature" confirmed="yes">junit.textui.TestRunner.runSingleMethod(java.lang.String, java.lang.String, boolean)</inbound>
            <inbound type="feature" confirmed="yes">junit.textui.TestRunner.start(java.lang.String[])</inbound>
            <inbound type="feature" confirmed="yes">org.junit.experimental.ParallelComputer$1$1.call()</inbound>
            <inbound type="feature" confirmed="yes">org.junit.experimental.ParallelComputer$1.finished()</inbound>
            <inbound type="class" confirmed="yes">org.junit.experimental.max.CouldNotReadCoreException</inbound>
            <inbound type="feature" confirmed="yes">org.junit.experimental.max.MaxHistory$RememberingListener.testFailure(org.junit.runner.notification.Failure)</inbound>
            <inbound type="feature" confirmed="yes">org.junit.experimental.max.MaxHistory$RememberingListener.testFinished(org.junit.runner.Description)</inbound>
            <inbound type="feature" confirmed="yes">org.junit.experimental.max.MaxHistory$RememberingListener.testRunFinished(org.junit.runner.Result)</inbound>
            <inbound type="feature" confirmed="yes">org.junit.experimental.max.MaxHistory$RememberingListener.testStarted(org.junit.runner.Description)</inbound>
            <inbound type="feature" confirmed="yes">org.junit.experimental.max.MaxHistory.readHistory(java.io.File)</inbound>
            <inbound type="feature" confirmed="yes">org.junit.experimental.results.FailureList.result()</inbound>
            <inbound type="class" confirmed="yes">org.junit.experimental.theories.PotentialAssignment$CouldNotGenerateValueException</inbound>
            <inbound type="feature" confirmed="yes">org.junit.experimental.theories.Theories$TheoryAnchor$1.createTest()</inbound>
            <inbound type="feature" confirmed="yes">org.junit.experimental.theories.internal.Assignments.allUnassigned(java.lang.reflect.Method, org.junit.runners.model.TestClass)</inbound>
            <inbound type="feature" confirmed="yes">org.junit.internal.builders.AnnotatedBuilder.buildRunner(java.lang.Class, java.lang.Class)</inbound>
            <inbound type="feature" confirmed="yes">org.junit.internal.builders.AnnotatedBuilder.runnerForClass(java.lang.Class)</inbound>
            <inbound type="class" confirmed="yes">org.junit.internal.runners.FailedBefore</inbound>
            <inbound type="class" confirmed="yes">org.junit.internal.runners.InitializationError</inbound>
            <inbound type="feature" confirmed="yes">org.junit.internal.runners.JUnit4ClassRunner.createTest()</inbound>
            <inbound type="feature" confirmed="yes">org.junit.internal.runners.JUnit4ClassRunner.invokeTestMethod(java.lang.reflect.Method, org.junit.runner.notification.RunNotifier)</inbound>
            <inbound type="feature" confirmed="yes">org.junit.internal.runners.MethodRoadie$1$1.call()</inbound>
            <inbound type="feature" confirmed="yes">org.junit.internal.runners.MethodRoadie$1.run()</inbound>
            <inbound type="feature" confirmed="yes">org.junit.internal.runners.MethodRoadie.runBeforesThenTestThenAfters(java.lang.Runnable)</inbound>
            <inbound type="feature" confirmed="yes">org.junit.internal.runners.MethodValidator.validateNoArgConstructor()</inbound>
            <inbound type="feature" confirmed="yes">org.junit.internal.runners.statements.ExpectException.evaluate()</inbound>
            <inbound type="feature" confirmed="yes">org.junit.rules.ErrorCollector$1.call()</inbound>
            <inbound type="feature" confirmed="yes">org.junit.runner.Result$Listener.testFailure(org.junit.runner.notification.Failure)</inbound>
            <inbound type="feature" confirmed="yes">org.junit.runner.Result$Listener.testFinished(org.junit.runner.Description)</inbound>
            <inbound type="feature" confirmed="yes">org.junit.runner.Result$Listener.testIgnored(org.junit.runner.Description)</inbound>
            <inbound type="feature" confirmed="yes">org.junit.runner.Result$Listener.testRunFinished(org.junit.runner.Result)</inbound>
            <inbound type="feature" confirmed="yes">org.junit.runner.Result$Listener.testRunStarted(org.junit.runner.Description)</inbound>
            <inbound type="class" confirmed="yes">org.junit.runner.manipulation.NoTestsRemainException</inbound>
            <inbound type="feature" confirmed="yes">org.junit.runner.notification.RunListener.testFailure(org.junit.runner.notification.Failure)</inbound>
            <inbound type="feature" confirmed="yes">org.junit.runner.notification.RunListener.testFinished(org.junit.runner.Description)</inbound>
            <inbound type="feature" confirmed="yes">org.junit.runner.notification.RunListener.testIgnored(org.junit.runner.Description)</inbound>
            <inbound type="feature" confirmed="yes">org.junit.runner.notification.RunListener.testRunFinished(org.junit.runner.Result)</inbound>
            <inbound type="feature" confirmed="yes">org.junit.runner.notification.RunListener.testRunStarted(org.junit.runner.Description)</inbound>
            <inbound type="feature" confirmed="yes">org.junit.runner.notification.RunListener.testStarted(org.junit.runner.Description)</inbound>
            <inbound type="feature" confirmed="yes">org.junit.runner.notification.RunNotifier$1.notifyListener(org.junit.runner.notification.RunListener)</inbound>
            <inbound type="feature" confirmed="yes">org.junit.runner.notification.RunNotifier$2.notifyListener(org.junit.runner.notification.RunListener)</inbound>
            <inbound type="feature" confirmed="yes">org.junit.runner.notification.RunNotifier$3.notifyListener(org.junit.runner.notification.RunListener)</inbound>
            <inbound type="feature" confirmed="yes">org.junit.runner.notification.RunNotifier$4.notifyListener(org.junit.runner.notification.RunListener)</inbound>
            <inbound type="feature" confirmed="yes">org.junit.runner.notification.RunNotifier$5.notifyListener(org.junit.runner.notification.RunListener)</inbound>
            <inbound type="feature" confirmed="yes">org.junit.runner.notification.RunNotifier$6.notifyListener(org.junit.runner.notification.RunListener)</inbound>
            <inbound type="feature" confirmed="yes">org.junit.runner.notification.RunNotifier$7.notifyListener(org.junit.runner.notification.RunListener)</inbound>
            <inbound type="feature" confirmed="yes">org.junit.runner.notification.RunNotifier$SafeNotifier.notifyListener(org.junit.runner.notification.RunListener)</inbound>
            <inbound type="feature" confirmed="yes">org.junit.runner.notification.RunNotifier$SafeNotifier.run()</inbound>
            <inbound type="feature" confirmed="yes">org.junit.runners.BlockJUnit4ClassRunner.createTest()</inbound>
            <inbound type="feature" confirmed="yes">org.junit.runners.Parameterized$TestClassRunnerForParameters.computeParams()</inbound>
            <inbound type="feature" confirmed="yes">org.junit.runners.Parameterized$TestClassRunnerForParameters.createTest()</inbound>
            <inbound type="feature" confirmed="yes">org.junit.runners.Parameterized.access$000(org.junit.runners.Parameterized, org.junit.runners.model.TestClass)</inbound>
            <inbound type="feature" confirmed="yes">org.junit.runners.Parameterized.getParametersMethod(org.junit.runners.model.TestClass)</inbound>
            <inbound type="class" confirmed="yes">org.junit.runners.model.InitializationError</inbound>
            <inbound type="class" confirmed="yes">org.junit.runners.model.MultipleFailureException</inbound>
            <feature confirmed="no">
                <name>java.lang.Exception.Exception()</name>
                <inbound type="feature" confirmed="yes">org.junit.experimental.theories.PotentialAssignment$CouldNotGenerateValueException.PotentialAssignment$CouldNotGenerateValueException()</inbound>
                <inbound type="feature" confirmed="yes">org.junit.internal.runners.FailedBefore.FailedBefore()</inbound>
                <inbound type="feature" confirmed="yes">org.junit.internal.runners.InitializationError.InitializationError(java.util.List)</inbound>
                <inbound type="feature" confirmed="yes">org.junit.runner.manipulation.NoTestsRemainException.NoTestsRemainException()</inbound>
                <inbound type="feature" confirmed="yes">org.junit.runners.model.InitializationError.InitializationError(java.util.List)</inbound>
                <inbound type="feature" confirmed="yes">org.junit.runners.model.MultipleFailureException.MultipleFailureException(java.util.List)</inbound>
            </feature>
            <feature confirmed="no">
                <name>java.lang.Exception.Exception(java.lang.String)</name>
                <inbound type="feature" confirmed="yes">junit.textui.TestRunner.start(java.lang.String[])</inbound>
                <inbound type="feature" confirmed="yes">org.junit.internal.requests.FilterRequest.getRunner()</inbound>
                <inbound type="feature" confirmed="yes">org.junit.internal.runners.InitializationError.InitializationError(java.lang.String)</inbound>
                <inbound type="feature" confirmed="yes">org.junit.internal.runners.MethodRoadie$1.run()</inbound>
                <inbound type="feature" confirmed="yes">org.junit.internal.runners.MethodValidator.validateInstanceMethods()</inbound>
                <inbound type="feature" confirmed="yes">org.junit.internal.runners.MethodValidator.validateTestMethods(java.lang.Class, boolean)</inbound>
                <inbound type="feature" confirmed="yes">org.junit.internal.runners.SuiteMethod.testFromSuiteMethod(java.lang.Class)</inbound>
                <inbound type="feature" confirmed="yes">org.junit.internal.runners.rules.RuleFieldValidator.addError(java.util.List, org.junit.runners.model.FrameworkField, java.lang.String)</inbound>
                <inbound type="feature" confirmed="yes">org.junit.internal.runners.statements.FailOnTimeout.evaluate()</inbound>
                <inbound type="feature" confirmed="yes">org.junit.runners.BlockJUnit4ClassRunner.validateInstanceMethods(java.util.List)</inbound>
                <inbound type="feature" confirmed="yes">org.junit.runners.BlockJUnit4ClassRunner.validateOnlyOneConstructor(java.util.List)</inbound>
                <inbound type="feature" confirmed="yes">org.junit.runners.BlockJUnit4ClassRunner.validateZeroArgConstructor(java.util.List)</inbound>
                <inbound type="feature" confirmed="yes">org.junit.runners.Parameterized$TestClassRunnerForParameters.computeParams()</inbound>
                <inbound type="feature" confirmed="yes">org.junit.runners.Parameterized.getParametersMethod(org.junit.runners.model.TestClass)</inbound>
                <inbound type="feature" confirmed="yes">org.junit.runners.model.FrameworkMethod.validatePublicVoid(boolean, java.util.List)</inbound>
                <inbound type="feature" confirmed="yes">org.junit.runners.model.FrameworkMethod.validatePublicVoidNoArg(boolean, java.util.List)</inbound>
                <inbound type="feature" confirmed="yes">org.junit.runners.model.InitializationError.InitializationError(java.lang.String)</inbound>
            </feature>
            <feature confirmed="no">
                <name>java.lang.Exception.Exception(java.lang.String, java.lang.Throwable)</name>
                <inbound type="feature" confirmed="yes">org.junit.internal.runners.MethodRoadie.runTestMethod()</inbound>
                <inbound type="feature" confirmed="yes">org.junit.internal.runners.MethodValidator.validateNoArgConstructor()</inbound>
                <inbound type="feature" confirmed="yes">org.junit.internal.runners.statements.ExpectException.evaluate()</inbound>
            </feature>
            <feature confirmed="no">
                <name>java.lang.Exception.Exception(java.lang.Throwable)</name>
                <inbound type="feature" confirmed="yes">org.junit.experimental.max.CouldNotReadCoreException.CouldNotReadCoreException(java.lang.Throwable)</inbound>
            </feature>
            <feature confirmed="no">
                <name>java.lang.Exception.getMessage()</name>
                <inbound type="feature" confirmed="yes">junit.textui.TestRunner.main(java.lang.String[])</inbound>
            </feature>
            <feature confirmed="no">
                <name>java.lang.Exception.printStackTrace()</name>
                <inbound type="feature" confirmed="yes">org.junit.experimental.ParallelComputer$1.finished()</inbound>
            </feature>
            <feature confirmed="no">
                <name>java.lang.Exception.setStackTrace(java.lang.StackTraceElement[])</name>
                <inbound type="feature" confirmed="yes">org.junit.internal.runners.statements.FailOnTimeout.evaluate()</inbound>
            </feature>
            <feature confirmed="no">
                <name>java.lang.Exception.toString()</name>
                <inbound type="feature" confirmed="yes">junit.runner.BaseTestRunner.getTest(java.lang.String)</inbound>
            </feature>
        </class>
        <class confirmed="no">
            <name>java.lang.Float</name>
            <inbound type="feature" confirmed="yes">org.hamcrest.BaseDescription.appendValue(java.lang.Object)</inbound>
            <inbound type="feature" confirmed="yes">org.junit.internal.InexactComparisonCriteria.assertElementsEqual(java.lang.Object, java.lang.Object)</inbound>
            <feature confirmed="no">
                <name>java.lang.Float.Float(float)</name>
                <inbound type="feature" confirmed="yes">junit.framework.Assert.assertEquals(java.lang.String, float, float, float)</inbound>
            </feature>
            <feature confirmed="no">
                <name>java.lang.Float.compare(float, float)</name>
                <inbound type="feature" confirmed="yes">junit.framework.Assert.assertEquals(java.lang.String, float, float, float)</inbound>
            </feature>
            <feature confirmed="no">
                <name>java.lang.Float.floatValue()</name>
                <inbound type="feature" confirmed="yes">org.junit.internal.InexactComparisonCriteria.assertElementsEqual(java.lang.Object, java.lang.Object)</inbound>
            </feature>
        </class>
        <class confirmed="no">
            <name>java.lang.IllegalAccessException</name>
            <inbound type="feature" confirmed="yes">junit.framework.TestCase.runTest()</inbound>
            <inbound type="feature" confirmed="yes">junit.framework.TestSuite.createTest(java.lang.Class, java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">junit.runner.BaseTestRunner.getTest(java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">org.junit.experimental.theories.Theories$TheoryAnchor.runWithCompleteAssignment(org.junit.experimental.theories.internal.Assignments)</inbound>
            <inbound type="feature" confirmed="yes">org.junit.experimental.theories.Theories$TheoryAnchor.runWithIncompleteAssignment(org.junit.experimental.theories.internal.Assignments)</inbound>
            <inbound type="feature" confirmed="yes">org.junit.experimental.theories.internal.AllMembersSupplier$MethodParameterValue.getValue()</inbound>
            <inbound type="feature" confirmed="yes">org.junit.experimental.theories.internal.AllMembersSupplier.getStaticFieldValue(java.lang.reflect.Field)</inbound>
            <inbound type="feature" confirmed="yes">org.junit.experimental.theories.internal.Assignments.getAnnotatedSupplier(org.junit.experimental.theories.ParameterSignature)</inbound>
            <inbound type="feature" confirmed="yes">org.junit.experimental.theories.internal.Assignments.getSupplier(org.junit.experimental.theories.ParameterSignature)</inbound>
            <inbound type="feature" confirmed="yes">org.junit.experimental.theories.internal.Assignments.potentialsForNextUnassigned()</inbound>
            <inbound type="feature" confirmed="yes">org.junit.internal.runners.TestMethod.invoke(java.lang.Object)</inbound>
            <inbound type="feature" confirmed="yes">org.junit.runners.model.FrameworkField.get(java.lang.Object)</inbound>
            <inbound type="feature" confirmed="yes">org.junit.runners.model.TestClass.getAnnotatedFieldValues(java.lang.Object, java.lang.Class, java.lang.Class)</inbound>
            <feature confirmed="no">
                <name>java.lang.IllegalAccessException.fillInStackTrace()</name>
                <inbound type="feature" confirmed="yes">junit.framework.TestCase.runTest()</inbound>
            </feature>
            <feature confirmed="no">
                <name>java.lang.IllegalAccessException.toString()</name>
                <inbound type="feature" confirmed="yes">junit.runner.BaseTestRunner.getTest(java.lang.String)</inbound>
            </feature>
        </class>
        <class confirmed="no">
            <name>java.lang.IllegalArgumentException</name>
            <inbound type="feature" confirmed="yes">org.junit.experimental.theories.internal.AllMembersSupplier$MethodParameterValue.getValue()</inbound>
            <inbound type="feature" confirmed="yes">org.junit.experimental.theories.internal.AllMembersSupplier.getStaticFieldValue(java.lang.reflect.Field)</inbound>
            <inbound type="feature" confirmed="yes">org.junit.internal.runners.TestMethod.invoke(java.lang.Object)</inbound>
            <inbound type="feature" confirmed="yes">org.junit.runners.model.FrameworkField.get(java.lang.Object)</inbound>
            <feature confirmed="no">
                <name>java.lang.IllegalArgumentException.IllegalArgumentException(java.lang.String)</name>
                <inbound type="feature" confirmed="yes">junit.extensions.RepeatedTest.RepeatedTest(junit.framework.Test, int)</inbound>
                <inbound type="feature" confirmed="yes">org.hamcrest.internal.ArrayIterator.ArrayIterator(java.lang.Object)</inbound>
                <inbound type="feature" confirmed="yes">org.junit.runner.Description.createSuiteDescription(java.lang.String, java.lang.annotation.Annotation[])</inbound>
                <inbound type="feature" confirmed="yes">org.junit.runners.model.TestClass.TestClass(java.lang.Class)</inbound>
            </feature>
        </class>
        <class confirmed="no">
            <name>java.lang.InstantiationException</name>
            <inbound type="feature" confirmed="yes">junit.framework.TestSuite.createTest(java.lang.Class, java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">org.junit.experimental.theories.Theories$TheoryAnchor.runWithCompleteAssignment(org.junit.experimental.theories.internal.Assignments)</inbound>
            <inbound type="feature" confirmed="yes">org.junit.experimental.theories.Theories$TheoryAnchor.runWithIncompleteAssignment(org.junit.experimental.theories.internal.Assignments)</inbound>
            <inbound type="feature" confirmed="yes">org.junit.experimental.theories.internal.Assignments.getAnnotatedSupplier(org.junit.experimental.theories.ParameterSignature)</inbound>
            <inbound type="feature" confirmed="yes">org.junit.experimental.theories.internal.Assignments.getSupplier(org.junit.experimental.theories.ParameterSignature)</inbound>
            <inbound type="feature" confirmed="yes">org.junit.experimental.theories.internal.Assignments.potentialsForNextUnassigned()</inbound>
        </class>
        <class confirmed="no">
            <name>java.lang.Integer</name>
            <inbound type="feature" confirmed="yes">org.junit.experimental.theories.suppliers.TestedOnSupplier.getValueSources(org.junit.experimental.theories.ParameterSignature)</inbound>
            <inbound type="feature" confirmed="yes">org.junit.internal.ArrayComparisonFailure.addDimension(int)</inbound>
            <inbound type="feature" confirmed="yes">org.junit.internal.ArrayComparisonFailure.getMessage()</inbound>
            <inbound type="feature" confirmed="yes">org.junit.internal.runners.JUnit38ClassRunner.createSuiteDescription(junit.framework.TestSuite)</inbound>
            <inbound type="feature" confirmed="yes">org.junit.runners.Parameterized$TestClassRunnerForParameters.getName()</inbound>
            <inbound type="feature" confirmed="yes">org.junit.runners.Parameterized$TestClassRunnerForParameters.testName(org.junit.runners.model.FrameworkMethod)</inbound>
            <inbound type="feature" confirmed="yes">org.junit.runners.model.MultipleFailureException.getMessage()</inbound>
            <feature confirmed="no">
                <name>java.lang.Integer.Integer(int)</name>
                <inbound type="feature" confirmed="yes">junit.framework.Assert.assertEquals(java.lang.String, int, int)</inbound>
            </feature>
            <feature confirmed="no">
                <name>java.lang.Integer.intValue()</name>
                <inbound type="feature" confirmed="yes">org.junit.internal.ArrayComparisonFailure.getMessage()</inbound>
            </feature>
            <feature confirmed="no">
                <name>java.lang.Integer.parseInt(java.lang.String)</name>
                <inbound type="feature" confirmed="yes">junit.runner.BaseTestRunner.getPreference(java.lang.String, int)</inbound>
                <inbound type="feature" confirmed="yes">org.hamcrest.core.DescribedAs.describeTo(org.hamcrest.Description)</inbound>
            </feature>
            <feature confirmed="no">
                <name>java.lang.Integer.valueOf(int)</name>
                <inbound type="feature" confirmed="yes">org.junit.experimental.theories.suppliers.TestedOnSupplier.getValueSources(org.junit.experimental.theories.ParameterSignature)</inbound>
                <inbound type="feature" confirmed="yes">org.junit.internal.ArrayComparisonFailure.addDimension(int)</inbound>
                <inbound type="feature" confirmed="yes">org.junit.internal.runners.JUnit38ClassRunner.createSuiteDescription(junit.framework.TestSuite)</inbound>
                <inbound type="feature" confirmed="yes">org.junit.runners.Parameterized$TestClassRunnerForParameters.getName()</inbound>
                <inbound type="feature" confirmed="yes">org.junit.runners.Parameterized$TestClassRunnerForParameters.testName(org.junit.runners.model.FrameworkMethod)</inbound>
                <inbound type="feature" confirmed="yes">org.junit.runners.model.MultipleFailureException.getMessage()</inbound>
            </feature>
        </class>
        <class confirmed="no">
            <name>java.lang.InterruptedException</name>
            <inbound type="feature" confirmed="yes">junit.extensions.ActiveTestSuite.waitUntilFinished()</inbound>
        </class>
        <class confirmed="no">
            <name>java.lang.Iterable</name>
            <inbound type="feature" confirmed="yes">org.hamcrest.BaseDescription.appendList(java.lang.String, java.lang.String, java.lang.String, java.lang.Iterable)</inbound>
            <inbound type="feature" confirmed="yes">org.hamcrest.BaseDescription.appendValueList(java.lang.String, java.lang.String, java.lang.String, java.lang.Iterable)</inbound>
            <inbound type="feature" confirmed="yes">org.hamcrest.BaseDescription.appendValueList(java.lang.String, java.lang.String, java.lang.String, java.lang.Object[])</inbound>
            <inbound type="feature" confirmed="yes">org.hamcrest.CoreMatchers.allOf(java.lang.Iterable)</inbound>
            <inbound type="feature" confirmed="yes">org.hamcrest.CoreMatchers.anyOf(java.lang.Iterable)</inbound>
            <inbound type="feature" confirmed="yes">org.hamcrest.Description.appendList(java.lang.String, java.lang.String, java.lang.String, java.lang.Iterable)</inbound>
            <inbound type="feature" confirmed="yes">org.hamcrest.Description.appendValueList(java.lang.String, java.lang.String, java.lang.String, java.lang.Iterable)</inbound>
            <inbound type="feature" confirmed="yes">org.hamcrest.core.AllOf.AllOf(java.lang.Iterable)</inbound>
            <inbound type="feature" confirmed="yes">org.hamcrest.core.AllOf.allOf(java.lang.Iterable)</inbound>
            <inbound type="feature" confirmed="yes">org.hamcrest.core.AllOf.allOf(org.hamcrest.Matcher[])</inbound>
            <inbound type="feature" confirmed="yes">org.hamcrest.core.AllOf.describeTo(org.hamcrest.Description)</inbound>
            <inbound type="feature" confirmed="yes">org.hamcrest.core.AllOf.matchers</inbound>
            <inbound type="feature" confirmed="yes">org.hamcrest.core.AllOf.matches(java.lang.Object)</inbound>
            <inbound type="feature" confirmed="yes">org.hamcrest.core.AnyOf.AnyOf(java.lang.Iterable)</inbound>
            <inbound type="feature" confirmed="yes">org.hamcrest.core.AnyOf.anyOf(java.lang.Iterable)</inbound>
            <inbound type="feature" confirmed="yes">org.hamcrest.core.AnyOf.anyOf(org.hamcrest.Matcher[])</inbound>
            <inbound type="feature" confirmed="yes">org.hamcrest.core.AnyOf.describeTo(org.hamcrest.Description)</inbound>
            <inbound type="feature" confirmed="yes">org.hamcrest.core.AnyOf.matchers</inbound>
            <inbound type="feature" confirmed="yes">org.hamcrest.core.AnyOf.matches(java.lang.Object)</inbound>
            <inbound type="feature" confirmed="yes">org.junit.internal.matchers.IsCollectionContaining.hasItems(java.lang.Object[])</inbound>
            <inbound type="feature" confirmed="yes">org.junit.internal.matchers.IsCollectionContaining.hasItems(org.hamcrest.Matcher[])</inbound>
            <inbound type="feature" confirmed="yes">org.junit.internal.matchers.IsCollectionContaining.matchesSafely(java.lang.Iterable)</inbound>
            <inbound type="feature" confirmed="yes">org.junit.internal.matchers.IsCollectionContaining.matchesSafely(java.lang.Object)</inbound>
            <inbound type="feature" confirmed="yes">org.junit.rules.RunRules.RunRules(org.junit.runners.model.Statement, java.lang.Iterable, org.junit.runner.Description)</inbound>
            <inbound type="feature" confirmed="yes">org.junit.rules.RunRules.applyAll(org.junit.runners.model.Statement, java.lang.Iterable, org.junit.runner.Description)</inbound>
            <inbound type="feature" confirmed="yes">org.junit.runners.BlockJUnit4ClassRunner.withTestRules(org.junit.runners.model.FrameworkMethod, java.lang.Object, org.junit.runners.model.Statement)</inbound>
            <inbound type="feature" confirmed="yes">org.junit.runners.ParentRunner.withClassRules(org.junit.runners.model.Statement)</inbound>
            <feature confirmed="no">
                <name>java.lang.Iterable.iterator()</name>
                <inbound type="feature" confirmed="yes">org.hamcrest.BaseDescription.appendList(java.lang.String, java.lang.String, java.lang.String, java.lang.Iterable)</inbound>
                <inbound type="feature" confirmed="yes">org.hamcrest.BaseDescription.appendValueList(java.lang.String, java.lang.String, java.lang.String, java.lang.Iterable)</inbound>
                <inbound type="feature" confirmed="yes">org.hamcrest.core.AllOf.matches(java.lang.Object)</inbound>
                <inbound type="feature" confirmed="yes">org.hamcrest.core.AnyOf.matches(java.lang.Object)</inbound>
                <inbound type="feature" confirmed="yes">org.junit.internal.matchers.IsCollectionContaining.matchesSafely(java.lang.Iterable)</inbound>
                <inbound type="feature" confirmed="yes">org.junit.rules.RunRules.applyAll(org.junit.runners.model.Statement, java.lang.Iterable, org.junit.runner.Description)</inbound>
            </feature>
        </class>
        <class confirmed="no">
            <name>java.lang.Long</name>
            <inbound type="feature" confirmed="yes">org.hamcrest.BaseDescription.appendValue(java.lang.Object)</inbound>
            <inbound type="feature" confirmed="yes">org.junit.Assert.assertEquals(java.lang.String, long, long)</inbound>
            <inbound type="feature" confirmed="yes">org.junit.experimental.max.MaxHistory$RememberingListener.testFinished(org.junit.runner.Description)</inbound>
            <inbound type="feature" confirmed="yes">org.junit.experimental.max.MaxHistory$RememberingListener.testStarted(org.junit.runner.Description)</inbound>
            <inbound type="feature" confirmed="yes">org.junit.experimental.max.MaxHistory$TestComparator.compare(org.junit.runner.Description, org.junit.runner.Description)</inbound>
            <inbound type="feature" confirmed="yes">org.junit.experimental.max.MaxHistory$TestComparator.getFailure(org.junit.runner.Description)</inbound>
            <inbound type="feature" confirmed="yes">org.junit.experimental.max.MaxHistory.getFailureTimestamp(org.junit.runner.Description)</inbound>
            <inbound type="feature" confirmed="yes">org.junit.experimental.max.MaxHistory.getTestDuration(org.junit.runner.Description)</inbound>
            <inbound type="feature" confirmed="yes">org.junit.experimental.max.MaxHistory.putTestDuration(org.junit.runner.Description, long)</inbound>
            <inbound type="feature" confirmed="yes">org.junit.experimental.max.MaxHistory.putTestFailureTimestamp(org.junit.runner.Description, long)</inbound>
            <inbound type="feature" confirmed="yes">org.junit.internal.runners.MethodRoadie$1.run()</inbound>
            <inbound type="feature" confirmed="yes">org.junit.internal.runners.statements.FailOnTimeout.evaluate()</inbound>
            <feature confirmed="no">
                <name>java.lang.Long.Long(long)</name>
                <inbound type="feature" confirmed="yes">junit.framework.Assert.assertEquals(java.lang.String, long, long)</inbound>
            </feature>
            <feature confirmed="no">
                <name>java.lang.Long.compareTo(java.lang.Long)</name>
                <inbound type="feature" confirmed="yes">org.junit.experimental.max.MaxHistory$TestComparator.compare(org.junit.runner.Description, org.junit.runner.Description)</inbound>
            </feature>
            <feature confirmed="no">
                <name>java.lang.Long.longValue()</name>
                <inbound type="feature" confirmed="yes">org.junit.experimental.max.MaxHistory$RememberingListener.testFinished(org.junit.runner.Description)</inbound>
            </feature>
            <feature confirmed="no">
                <name>java.lang.Long.valueOf(long)</name>
                <inbound type="feature" confirmed="yes">org.junit.Assert.assertEquals(java.lang.String, long, long)</inbound>
                <inbound type="feature" confirmed="yes">org.junit.experimental.max.MaxHistory$RememberingListener.testStarted(org.junit.runner.Description)</inbound>
                <inbound type="feature" confirmed="yes">org.junit.experimental.max.MaxHistory$TestComparator.getFailure(org.junit.runner.Description)</inbound>
                <inbound type="feature" confirmed="yes">org.junit.experimental.max.MaxHistory.putTestDuration(org.junit.runner.Description, long)</inbound>
                <inbound type="feature" confirmed="yes">org.junit.experimental.max.MaxHistory.putTestFailureTimestamp(org.junit.runner.Description, long)</inbound>
                <inbound type="feature" confirmed="yes">org.junit.internal.runners.MethodRoadie$1.run()</inbound>
                <inbound type="feature" confirmed="yes">org.junit.internal.runners.statements.FailOnTimeout.evaluate()</inbound>
            </feature>
        </class>
        <class confirmed="no">
            <name>java.lang.Math</name>
            <feature confirmed="no">
                <name>java.lang.Math.abs(double)</name>
                <inbound type="feature" confirmed="yes">junit.framework.Assert.assertEquals(java.lang.String, double, double, double)</inbound>
                <inbound type="feature" confirmed="yes">org.junit.Assert.assertEquals(java.lang.String, double, double, double)</inbound>
            </feature>
            <feature confirmed="no">
                <name>java.lang.Math.abs(float)</name>
                <inbound type="feature" confirmed="yes">junit.framework.Assert.assertEquals(java.lang.String, float, float, float)</inbound>
            </feature>
            <feature confirmed="no">
                <name>java.lang.Math.max(int, int)</name>
                <inbound type="feature" confirmed="yes">junit.framework.ComparisonCompactor.computeCommonPrefix()</inbound>
                <inbound type="feature" confirmed="yes">org.junit.ComparisonFailure$ComparisonCompactor.computeCommonPrefix()</inbound>
            </feature>
            <feature confirmed="no">
                <name>java.lang.Math.min(int, int)</name>
                <inbound type="feature" confirmed="yes">junit.framework.ComparisonCompactor.computeCommonSuffix()</inbound>
                <inbound type="feature" confirmed="yes">junit.framework.ComparisonCompactor.findCommonPrefix()</inbound>
                <inbound type="feature" confirmed="yes">org.junit.ComparisonFailure$ComparisonCompactor.computeCommonSuffix()</inbound>
                <inbound type="feature" confirmed="yes">org.junit.ComparisonFailure$ComparisonCompactor.findCommonPrefix()</inbound>
            </feature>
        </class>
        <class confirmed="no">
            <name>java.lang.NoSuchMethodException</name>
            <inbound type="feature" confirmed="yes">junit.framework.TestCase.runTest()</inbound>
            <inbound type="feature" confirmed="yes">junit.framework.TestSuite.addTestsFromTestCase(java.lang.Class)</inbound>
            <inbound type="feature" confirmed="yes">junit.framework.TestSuite.createTest(java.lang.Class, java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">junit.framework.TestSuite.getTestConstructor(java.lang.Class)</inbound>
            <inbound type="feature" confirmed="yes">org.junit.experimental.theories.Theories$TheoryAnchor.runWithCompleteAssignment(org.junit.experimental.theories.internal.Assignments)</inbound>
            <inbound type="feature" confirmed="yes">org.junit.internal.builders.AnnotatedBuilder.buildRunner(java.lang.Class, java.lang.Class)</inbound>
            <inbound type="feature" confirmed="yes">org.junit.internal.builders.SuiteMethodBuilder.hasSuiteMethod(java.lang.Class)</inbound>
            <inbound type="feature" confirmed="yes">org.junit.internal.runners.TestClass.getConstructor()</inbound>
        </class>
        <class confirmed="no">
            <name>java.lang.NumberFormatException</name>
            <inbound type="feature" confirmed="yes">junit.runner.BaseTestRunner.getPreference(java.lang.String, int)</inbound>
        </class>
        <class confirmed="no">
            <name>java.lang.Object</name>
            <inbound type="class" confirmed="yes">junit.extensions.TestSetup$1</inbound>
            <inbound type="class" confirmed="yes">junit.extensions.package-info</inbound>
            <inbound type="class" confirmed="yes">junit.framework.Assert</inbound>
            <inbound type="feature" confirmed="yes">junit.framework.Assert.assertEquals(java.lang.Object, java.lang.Object)</inbound>
            <inbound type="feature" confirmed="yes">junit.framework.Assert.assertEquals(java.lang.String, boolean, boolean)</inbound>
            <inbound type="feature" confirmed="yes">junit.framework.Assert.assertEquals(java.lang.String, byte, byte)</inbound>
            <inbound type="feature" confirmed="yes">junit.framework.Assert.assertEquals(java.lang.String, char, char)</inbound>
            <inbound type="feature" confirmed="yes">junit.framework.Assert.assertEquals(java.lang.String, double, double, double)</inbound>
            <inbound type="feature" confirmed="yes">junit.framework.Assert.assertEquals(java.lang.String, float, float, float)</inbound>
            <inbound type="feature" confirmed="yes">junit.framework.Assert.assertEquals(java.lang.String, int, int)</inbound>
            <inbound type="feature" confirmed="yes">junit.framework.Assert.assertEquals(java.lang.String, java.lang.Object, java.lang.Object)</inbound>
            <inbound type="feature" confirmed="yes">junit.framework.Assert.assertEquals(java.lang.String, java.lang.String, java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">junit.framework.Assert.assertEquals(java.lang.String, long, long)</inbound>
            <inbound type="feature" confirmed="yes">junit.framework.Assert.assertEquals(java.lang.String, short, short)</inbound>
            <inbound type="feature" confirmed="yes">junit.framework.Assert.assertNotNull(java.lang.Object)</inbound>
            <inbound type="feature" confirmed="yes">junit.framework.Assert.assertNotNull(java.lang.String, java.lang.Object)</inbound>
            <inbound type="feature" confirmed="yes">junit.framework.Assert.assertNotSame(java.lang.Object, java.lang.Object)</inbound>
            <inbound type="feature" confirmed="yes">junit.framework.Assert.assertNotSame(java.lang.String, java.lang.Object, java.lang.Object)</inbound>
            <inbound type="feature" confirmed="yes">junit.framework.Assert.assertNull(java.lang.Object)</inbound>
            <inbound type="feature" confirmed="yes">junit.framework.Assert.assertNull(java.lang.String, java.lang.Object)</inbound>
            <inbound type="feature" confirmed="yes">junit.framework.Assert.assertSame(java.lang.Object, java.lang.Object)</inbound>
            <inbound type="feature" confirmed="yes">junit.framework.Assert.assertSame(java.lang.String, java.lang.Object, java.lang.Object)</inbound>
            <inbound type="feature" confirmed="yes">junit.framework.Assert.failNotEquals(java.lang.String, java.lang.Object, java.lang.Object)</inbound>
            <inbound type="feature" confirmed="yes">junit.framework.Assert.failNotSame(java.lang.String, java.lang.Object, java.lang.Object)</inbound>
            <inbound type="feature" confirmed="yes">junit.framework.Assert.format(java.lang.String, java.lang.Object, java.lang.Object)</inbound>
            <inbound type="feature" confirmed="yes">junit.framework.AssertionFailedError.AssertionFailedError(java.lang.String)</inbound>
            <inbound type="class" confirmed="yes">junit.framework.ComparisonCompactor</inbound>
            <inbound type="feature" confirmed="yes">junit.framework.ComparisonCompactor.areStringsEqual()</inbound>
            <inbound type="feature" confirmed="yes">junit.framework.ComparisonCompactor.compact(java.lang.String)</inbound>
            <inbound type="class" confirmed="yes">junit.framework.JUnit4TestAdapter</inbound>
            <inbound type="feature" confirmed="yes">junit.framework.JUnit4TestAdapter.filter(org.junit.runner.manipulation.Filter)</inbound>
            <inbound type="feature" confirmed="yes">junit.framework.JUnit4TestAdapter.removeIgnored(org.junit.runner.Description)</inbound>
            <inbound type="feature" confirmed="yes">junit.framework.JUnit4TestAdapter.sort(org.junit.runner.manipulation.Sorter)</inbound>
            <inbound type="feature" confirmed="yes">junit.framework.JUnit4TestAdapterCache.asTest(org.junit.runner.Description)</inbound>
            <inbound type="feature" confirmed="yes">junit.framework.JUnit4TestAdapterCache.asTestList(org.junit.runner.Description)</inbound>
            <inbound type="feature" confirmed="yes">junit.framework.JUnit4TestAdapterCache.createTest(org.junit.runner.Description)</inbound>
            <inbound type="class" confirmed="yes">junit.framework.JUnit4TestCaseFacade</inbound>
            <inbound type="class" confirmed="yes">junit.framework.Protectable</inbound>
            <inbound type="class" confirmed="yes">junit.framework.Test</inbound>
            <inbound type="feature" confirmed="yes">junit.framework.TestCase.runTest()</inbound>
            <inbound type="class" confirmed="yes">junit.framework.TestFailure</inbound>
            <inbound type="feature" confirmed="yes">junit.framework.TestFailure.toString()</inbound>
            <inbound type="class" confirmed="yes">junit.framework.TestListener</inbound>
            <inbound type="class" confirmed="yes">junit.framework.TestResult</inbound>
            <inbound type="class" confirmed="yes">junit.framework.TestResult$1</inbound>
            <inbound type="feature" confirmed="yes">junit.framework.TestResult.addError(junit.framework.Test, java.lang.Throwable)</inbound>
            <inbound type="feature" confirmed="yes">junit.framework.TestResult.addFailure(junit.framework.Test, junit.framework.AssertionFailedError)</inbound>
            <inbound type="feature" confirmed="yes">junit.framework.TestResult.addListener(junit.framework.TestListener)</inbound>
            <inbound type="feature" confirmed="yes">junit.framework.TestResult.endTest(junit.framework.Test)</inbound>
            <inbound type="feature" confirmed="yes">junit.framework.TestResult.removeListener(junit.framework.TestListener)</inbound>
            <inbound type="feature" confirmed="yes">junit.framework.TestResult.startTest(junit.framework.Test)</inbound>
            <inbound type="class" confirmed="yes">junit.framework.TestSuite</inbound>
            <inbound type="feature" confirmed="yes">junit.framework.TestSuite.addTest(junit.framework.Test)</inbound>
            <inbound type="feature" confirmed="yes">junit.framework.TestSuite.addTestMethod(java.lang.reflect.Method, java.util.List, java.lang.Class)</inbound>
            <inbound type="feature" confirmed="yes">junit.framework.TestSuite.countTestCases()</inbound>
            <inbound type="feature" confirmed="yes">junit.framework.TestSuite.createTest(java.lang.Class, java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">junit.framework.TestSuite.isTestMethod(java.lang.reflect.Method)</inbound>
            <inbound type="feature" confirmed="yes">junit.framework.TestSuite.run(junit.framework.TestResult)</inbound>
            <inbound type="feature" confirmed="yes">junit.framework.TestSuite.testAt(int)</inbound>
            <inbound type="class" confirmed="yes">junit.framework.package-info</inbound>
            <inbound type="class" confirmed="yes">junit.runner.BaseTestRunner</inbound>
            <inbound type="feature" confirmed="yes">junit.runner.BaseTestRunner.getPreferences()</inbound>
            <inbound type="feature" confirmed="yes">junit.runner.BaseTestRunner.getTest(java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">junit.runner.BaseTestRunner.processArguments(java.lang.String[])</inbound>
            <inbound type="feature" confirmed="yes">junit.runner.BaseTestRunner.setPreference(java.lang.String, java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">junit.runner.BaseTestRunner.showStackRaw()</inbound>
            <inbound type="feature" confirmed="yes">junit.runner.BaseTestRunner.useReloadingTestSuiteLoader()</inbound>
            <inbound type="class" confirmed="yes">junit.runner.TestRunListener</inbound>
            <inbound type="class" confirmed="yes">junit.runner.Version</inbound>
            <inbound type="class" confirmed="yes">junit.runner.package-info</inbound>
            <inbound type="class" confirmed="yes">junit.textui.ResultPrinter</inbound>
            <inbound type="feature" confirmed="yes">junit.textui.ResultPrinter.printDefectHeader(junit.framework.TestFailure, int)</inbound>
            <inbound type="feature" confirmed="yes">junit.textui.ResultPrinter.printDefects(java.util.Enumeration, int, java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">junit.textui.TestRunner.start(java.lang.String[])</inbound>
            <inbound type="class" confirmed="yes">junit.textui.package-info</inbound>
            <inbound type="class" confirmed="yes">org.hamcrest.BaseDescription</inbound>
            <inbound type="feature" confirmed="yes">org.hamcrest.BaseDescription.appendList(java.lang.String, java.lang.String, java.lang.String, java.util.Iterator)</inbound>
            <inbound type="feature" confirmed="yes">org.hamcrest.BaseDescription.appendValue(java.lang.Object)</inbound>
            <inbound type="feature" confirmed="yes">org.hamcrest.BaseDescription.appendValueList(java.lang.String, java.lang.String, java.lang.String, java.lang.Object[])</inbound>
            <inbound type="class" confirmed="yes">org.hamcrest.BaseMatcher</inbound>
            <inbound type="class" confirmed="yes">org.hamcrest.CoreMatchers</inbound>
            <inbound type="feature" confirmed="yes">org.hamcrest.CoreMatchers.describedAs(java.lang.String, org.hamcrest.Matcher, java.lang.Object[])</inbound>
            <inbound type="feature" confirmed="yes">org.hamcrest.CoreMatchers.equalTo(java.lang.Object)</inbound>
            <inbound type="feature" confirmed="yes">org.hamcrest.CoreMatchers.is(java.lang.Object)</inbound>
            <inbound type="feature" confirmed="yes">org.hamcrest.CoreMatchers.not(java.lang.Object)</inbound>
            <inbound type="feature" confirmed="yes">org.hamcrest.CoreMatchers.sameInstance(java.lang.Object)</inbound>
            <inbound type="class" confirmed="yes">org.hamcrest.Description</inbound>
            <inbound type="feature" confirmed="yes">org.hamcrest.Description.appendValue(java.lang.Object)</inbound>
            <inbound type="feature" confirmed="yes">org.hamcrest.Description.appendValueList(java.lang.String, java.lang.String, java.lang.String, java.lang.Object[])</inbound>
            <inbound type="class" confirmed="yes">org.hamcrest.Factory</inbound>
            <inbound type="class" confirmed="yes">org.hamcrest.Matcher</inbound>
            <inbound type="feature" confirmed="yes">org.hamcrest.Matcher.matches(java.lang.Object)</inbound>
            <inbound type="class" confirmed="yes">org.hamcrest.SelfDescribing</inbound>
            <inbound type="feature" confirmed="yes">org.hamcrest.core.AllOf.allOf(org.hamcrest.Matcher[])</inbound>
            <inbound type="feature" confirmed="yes">org.hamcrest.core.AllOf.matches(java.lang.Object)</inbound>
            <inbound type="feature" confirmed="yes">org.hamcrest.core.AnyOf.anyOf(org.hamcrest.Matcher[])</inbound>
            <inbound type="feature" confirmed="yes">org.hamcrest.core.AnyOf.matches(java.lang.Object)</inbound>
            <inbound type="feature" confirmed="yes">org.hamcrest.core.DescribedAs.DescribedAs(java.lang.String, org.hamcrest.Matcher, java.lang.Object[])</inbound>
            <inbound type="feature" confirmed="yes">org.hamcrest.core.DescribedAs.describeTo(org.hamcrest.Description)</inbound>
            <inbound type="feature" confirmed="yes">org.hamcrest.core.DescribedAs.describedAs(java.lang.String, org.hamcrest.Matcher, java.lang.Object[])</inbound>
            <inbound type="feature" confirmed="yes">org.hamcrest.core.DescribedAs.matches(java.lang.Object)</inbound>
            <inbound type="feature" confirmed="yes">org.hamcrest.core.DescribedAs.values</inbound>
            <inbound type="feature" confirmed="yes">org.hamcrest.core.Is.is(java.lang.Object)</inbound>
            <inbound type="feature" confirmed="yes">org.hamcrest.core.Is.matches(java.lang.Object)</inbound>
            <inbound type="feature" confirmed="yes">org.hamcrest.core.IsAnything.matches(java.lang.Object)</inbound>
            <inbound type="feature" confirmed="yes">org.hamcrest.core.IsEqual.IsEqual(java.lang.Object)</inbound>
            <inbound type="feature" confirmed="yes">org.hamcrest.core.IsEqual.areArrayElementsEqual(java.lang.Object, java.lang.Object)</inbound>
            <inbound type="feature" confirmed="yes">org.hamcrest.core.IsEqual.areArrayLengthsEqual(java.lang.Object, java.lang.Object)</inbound>
            <inbound type="feature" confirmed="yes">org.hamcrest.core.IsEqual.areArraysEqual(java.lang.Object, java.lang.Object)</inbound>
            <inbound type="feature" confirmed="yes">org.hamcrest.core.IsEqual.areEqual(java.lang.Object, java.lang.Object)</inbound>
            <inbound type="feature" confirmed="yes">org.hamcrest.core.IsEqual.describeTo(org.hamcrest.Description)</inbound>
            <inbound type="feature" confirmed="yes">org.hamcrest.core.IsEqual.equalTo(java.lang.Object)</inbound>
            <inbound type="feature" confirmed="yes">org.hamcrest.core.IsEqual.isArray(java.lang.Object)</inbound>
            <inbound type="feature" confirmed="yes">org.hamcrest.core.IsEqual.matches(java.lang.Object)</inbound>
            <inbound type="feature" confirmed="yes">org.hamcrest.core.IsEqual.object</inbound>
            <inbound type="feature" confirmed="yes">org.hamcrest.core.IsInstanceOf.matches(java.lang.Object)</inbound>
            <inbound type="feature" confirmed="yes">org.hamcrest.core.IsNot.matches(java.lang.Object)</inbound>
            <inbound type="feature" confirmed="yes">org.hamcrest.core.IsNot.not(java.lang.Object)</inbound>
            <inbound type="feature" confirmed="yes">org.hamcrest.core.IsNull.matches(java.lang.Object)</inbound>
            <inbound type="feature" confirmed="yes">org.hamcrest.core.IsSame.IsSame(java.lang.Object)</inbound>
            <inbound type="feature" confirmed="yes">org.hamcrest.core.IsSame.describeTo(org.hamcrest.Description)</inbound>
            <inbound type="feature" confirmed="yes">org.hamcrest.core.IsSame.matches(java.lang.Object)</inbound>
            <inbound type="feature" confirmed="yes">org.hamcrest.core.IsSame.object</inbound>
            <inbound type="feature" confirmed="yes">org.hamcrest.core.IsSame.sameInstance(java.lang.Object)</inbound>
            <inbound type="class" confirmed="yes">org.hamcrest.internal.ArrayIterator</inbound>
            <inbound type="feature" confirmed="yes">org.hamcrest.internal.ArrayIterator.ArrayIterator(java.lang.Object)</inbound>
            <inbound type="feature" confirmed="yes">org.hamcrest.internal.ArrayIterator.array</inbound>
            <inbound type="feature" confirmed="yes">org.hamcrest.internal.ArrayIterator.hasNext()</inbound>
            <inbound type="feature" confirmed="yes">org.hamcrest.internal.ArrayIterator.next()</inbound>
            <inbound type="class" confirmed="yes">org.hamcrest.internal.SelfDescribingValue</inbound>
            <inbound type="feature" confirmed="yes">org.hamcrest.internal.SelfDescribingValue.SelfDescribingValue(java.lang.Object)</inbound>
            <inbound type="feature" confirmed="yes">org.hamcrest.internal.SelfDescribingValue.describeTo(org.hamcrest.Description)</inbound>
            <inbound type="feature" confirmed="yes">org.hamcrest.internal.SelfDescribingValue.value</inbound>
            <inbound type="class" confirmed="yes">org.hamcrest.internal.SelfDescribingValueIterator</inbound>
            <inbound type="feature" confirmed="yes">org.hamcrest.internal.SelfDescribingValueIterator.next()</inbound>
            <inbound type="class" confirmed="yes">org.junit.After</inbound>
            <inbound type="class" confirmed="yes">org.junit.AfterClass</inbound>
            <inbound type="class" confirmed="yes">org.junit.Assert</inbound>
            <inbound type="feature" confirmed="yes">org.junit.Assert.assertArrayEquals(java.lang.Object[], java.lang.Object[])</inbound>
            <inbound type="feature" confirmed="yes">org.junit.Assert.assertArrayEquals(java.lang.String, byte[], byte[])</inbound>
            <inbound type="feature" confirmed="yes">org.junit.Assert.assertArrayEquals(java.lang.String, char[], char[])</inbound>
            <inbound type="feature" confirmed="yes">org.junit.Assert.assertArrayEquals(java.lang.String, double[], double[], double)</inbound>
            <inbound type="feature" confirmed="yes">org.junit.Assert.assertArrayEquals(java.lang.String, float[], float[], float)</inbound>
            <inbound type="feature" confirmed="yes">org.junit.Assert.assertArrayEquals(java.lang.String, int[], int[])</inbound>
            <inbound type="feature" confirmed="yes">org.junit.Assert.assertArrayEquals(java.lang.String, java.lang.Object[], java.lang.Object[])</inbound>
            <inbound type="feature" confirmed="yes">org.junit.Assert.assertArrayEquals(java.lang.String, long[], long[])</inbound>
            <inbound type="feature" confirmed="yes">org.junit.Assert.assertArrayEquals(java.lang.String, short[], short[])</inbound>
            <inbound type="feature" confirmed="yes">org.junit.Assert.assertEquals(java.lang.Object, java.lang.Object)</inbound>
            <inbound type="feature" confirmed="yes">org.junit.Assert.assertEquals(java.lang.Object[], java.lang.Object[])</inbound>
            <inbound type="feature" confirmed="yes">org.junit.Assert.assertEquals(java.lang.String, double, double, double)</inbound>
            <inbound type="feature" confirmed="yes">org.junit.Assert.assertEquals(java.lang.String, java.lang.Object, java.lang.Object)</inbound>
            <inbound type="feature" confirmed="yes">org.junit.Assert.assertEquals(java.lang.String, java.lang.Object[], java.lang.Object[])</inbound>
            <inbound type="feature" confirmed="yes">org.junit.Assert.assertEquals(java.lang.String, long, long)</inbound>
            <inbound type="feature" confirmed="yes">org.junit.Assert.assertNotNull(java.lang.Object)</inbound>
            <inbound type="feature" confirmed="yes">org.junit.Assert.assertNotNull(java.lang.String, java.lang.Object)</inbound>
            <inbound type="feature" confirmed="yes">org.junit.Assert.assertNotSame(java.lang.Object, java.lang.Object)</inbound>
            <inbound type="feature" confirmed="yes">org.junit.Assert.assertNotSame(java.lang.String, java.lang.Object, java.lang.Object)</inbound>
            <inbound type="feature" confirmed="yes">org.junit.Assert.assertNull(java.lang.Object)</inbound>
            <inbound type="feature" confirmed="yes">org.junit.Assert.assertNull(java.lang.String, java.lang.Object)</inbound>
            <inbound type="feature" confirmed="yes">org.junit.Assert.assertSame(java.lang.Object, java.lang.Object)</inbound>
            <inbound type="feature" confirmed="yes">org.junit.Assert.assertSame(java.lang.String, java.lang.Object, java.lang.Object)</inbound>
            <inbound type="feature" confirmed="yes">org.junit.Assert.assertThat(java.lang.Object, org.hamcrest.Matcher)</inbound>
            <inbound type="feature" confirmed="yes">org.junit.Assert.assertThat(java.lang.String, java.lang.Object, org.hamcrest.Matcher)</inbound>
            <inbound type="feature" confirmed="yes">org.junit.Assert.fail(java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">org.junit.Assert.failNotEquals(java.lang.String, java.lang.Object, java.lang.Object)</inbound>
            <inbound type="feature" confirmed="yes">org.junit.Assert.failNotSame(java.lang.String, java.lang.Object, java.lang.Object)</inbound>
            <inbound type="feature" confirmed="yes">org.junit.Assert.format(java.lang.String, java.lang.Object, java.lang.Object)</inbound>
            <inbound type="feature" confirmed="yes">org.junit.Assert.formatClassAndValue(java.lang.Object, java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">org.junit.Assert.internalArrayEquals(java.lang.String, java.lang.Object, java.lang.Object)</inbound>
            <inbound type="feature" confirmed="yes">org.junit.Assert.isEquals(java.lang.Object, java.lang.Object)</inbound>
            <inbound type="class" confirmed="yes">org.junit.Assume</inbound>
            <inbound type="feature" confirmed="yes">org.junit.Assume.assumeNoException(java.lang.Throwable)</inbound>
            <inbound type="feature" confirmed="yes">org.junit.Assume.assumeNotNull(java.lang.Object[])</inbound>
            <inbound type="feature" confirmed="yes">org.junit.Assume.assumeThat(java.lang.Object, org.hamcrest.Matcher)</inbound>
            <inbound type="feature" confirmed="yes">org.junit.Assume.assumeTrue(boolean)</inbound>
            <inbound type="class" confirmed="yes">org.junit.Before</inbound>
            <inbound type="class" confirmed="yes">org.junit.BeforeClass</inbound>
            <inbound type="class" confirmed="yes">org.junit.ClassRule</inbound>
            <inbound type="class" confirmed="yes">org.junit.ComparisonFailure$ComparisonCompactor</inbound>
            <inbound type="feature" confirmed="yes">org.junit.ComparisonFailure$ComparisonCompactor.areStringsEqual()</inbound>
            <inbound type="feature" confirmed="yes">org.junit.ComparisonFailure$ComparisonCompactor.compact(java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">org.junit.ComparisonFailure.ComparisonFailure(java.lang.String, java.lang.String, java.lang.String)</inbound>
            <inbound type="class" confirmed="yes">org.junit.Ignore</inbound>
            <inbound type="class" confirmed="yes">org.junit.Rule</inbound>
            <inbound type="class" confirmed="yes">org.junit.Test</inbound>
            <inbound type="class" confirmed="yes">org.junit.experimental.ParallelComputer$1</inbound>
            <inbound type="class" confirmed="yes">org.junit.experimental.ParallelComputer$1$1</inbound>
            <inbound type="feature" confirmed="yes">org.junit.experimental.ParallelComputer$1$1.call()</inbound>
            <inbound type="feature" confirmed="yes">org.junit.experimental.ParallelComputer$1.finished()</inbound>
            <inbound type="feature" confirmed="yes">org.junit.experimental.ParallelComputer$1.schedule(java.lang.Runnable)</inbound>
            <inbound type="feature" confirmed="yes">org.junit.experimental.categories.Categories$CategoryFilter.categories(org.junit.runner.Description)</inbound>
            <inbound type="feature" confirmed="yes">org.junit.experimental.categories.Categories$CategoryFilter.describe()</inbound>
            <inbound type="feature" confirmed="yes">org.junit.experimental.categories.Categories$CategoryFilter.hasCorrectCategoryAnnotation(org.junit.runner.Description)</inbound>
            <inbound type="feature" confirmed="yes">org.junit.experimental.categories.Categories$CategoryFilter.shouldRun(org.junit.runner.Description)</inbound>
            <inbound type="class" confirmed="yes">org.junit.experimental.categories.Categories$ExcludeCategory</inbound>
            <inbound type="class" confirmed="yes">org.junit.experimental.categories.Categories$IncludeCategory</inbound>
            <inbound type="feature" confirmed="yes">org.junit.experimental.categories.Categories.assertNoCategorizedDescendentsOfUncategorizeableParents(org.junit.runner.Description)</inbound>
            <inbound type="feature" confirmed="yes">org.junit.experimental.categories.Categories.assertNoDescendantsHaveCategoryAnnotations(org.junit.runner.Description)</inbound>
            <inbound type="feature" confirmed="yes">org.junit.experimental.categories.Categories.canHaveCategorizedChildren(org.junit.runner.Description)</inbound>
            <inbound type="class" confirmed="yes">org.junit.experimental.categories.Category</inbound>
            <inbound type="class" confirmed="yes">org.junit.experimental.max.MaxCore</inbound>
            <inbound type="feature" confirmed="yes">org.junit.experimental.max.MaxCore.buildRunner(org.junit.runner.Description)</inbound>
            <inbound type="feature" confirmed="yes">org.junit.experimental.max.MaxCore.constructLeafRequest(java.util.List)</inbound>
            <inbound type="feature" confirmed="yes">org.junit.experimental.max.MaxCore.findLeaves(org.junit.runner.Description, org.junit.runner.Description, java.util.List)</inbound>
            <inbound type="class" confirmed="yes">org.junit.experimental.max.MaxHistory</inbound>
            <inbound type="class" confirmed="yes">org.junit.experimental.max.MaxHistory$1</inbound>
            <inbound type="feature" confirmed="yes">org.junit.experimental.max.MaxHistory$RememberingListener.testFinished(org.junit.runner.Description)</inbound>
            <inbound type="feature" confirmed="yes">org.junit.experimental.max.MaxHistory$RememberingListener.testStarted(org.junit.runner.Description)</inbound>
            <inbound type="class" confirmed="yes">org.junit.experimental.max.MaxHistory$TestComparator</inbound>
            <inbound type="feature" confirmed="yes">org.junit.experimental.max.MaxHistory$TestComparator.compare(java.lang.Object, java.lang.Object)</inbound>
            <inbound type="feature" confirmed="yes">org.junit.experimental.max.MaxHistory.getFailureTimestamp(org.junit.runner.Description)</inbound>
            <inbound type="feature" confirmed="yes">org.junit.experimental.max.MaxHistory.getTestDuration(org.junit.runner.Description)</inbound>
            <inbound type="feature" confirmed="yes">org.junit.experimental.max.MaxHistory.isNewTest(org.junit.runner.Description)</inbound>
            <inbound type="feature" confirmed="yes">org.junit.experimental.max.MaxHistory.putTestDuration(org.junit.runner.Description, long)</inbound>
            <inbound type="feature" confirmed="yes">org.junit.experimental.max.MaxHistory.putTestFailureTimestamp(org.junit.runner.Description, long)</inbound>
            <inbound type="feature" confirmed="yes">org.junit.experimental.max.MaxHistory.readHistory(java.io.File)</inbound>
            <inbound type="feature" confirmed="yes">org.junit.experimental.max.MaxHistory.save()</inbound>
            <inbound type="class" confirmed="yes">org.junit.experimental.results.FailureList</inbound>
            <inbound type="feature" confirmed="yes">org.junit.experimental.results.FailureList.result()</inbound>
            <inbound type="class" confirmed="yes">org.junit.experimental.results.PrintableResult</inbound>
            <inbound type="class" confirmed="yes">org.junit.experimental.results.ResultMatchers</inbound>
            <inbound type="feature" confirmed="yes">org.junit.experimental.results.ResultMatchers$1.matchesSafely(java.lang.Object)</inbound>
            <inbound type="feature" confirmed="yes">org.junit.experimental.results.ResultMatchers$2.matches(java.lang.Object)</inbound>
            <inbound type="feature" confirmed="yes">org.junit.experimental.results.ResultMatchers$3.matches(java.lang.Object)</inbound>
            <inbound type="class" confirmed="yes">org.junit.experimental.theories.DataPoint</inbound>
            <inbound type="class" confirmed="yes">org.junit.experimental.theories.DataPoints</inbound>
            <inbound type="class" confirmed="yes">org.junit.experimental.theories.ParameterSignature</inbound>
            <inbound type="feature" confirmed="yes">org.junit.experimental.theories.ParameterSignature.findDeepAnnotation(java.lang.annotation.Annotation[], java.lang.Class, int)</inbound>
            <inbound type="feature" confirmed="yes">org.junit.experimental.theories.ParameterSignature.getAnnotation(java.lang.Class)</inbound>
            <inbound type="feature" confirmed="yes">org.junit.experimental.theories.ParameterSignature.getAnnotations()</inbound>
            <inbound type="feature" confirmed="yes">org.junit.experimental.theories.ParameterSignature.signatures(java.lang.Class[], java.lang.annotation.Annotation[][])</inbound>
            <inbound type="class" confirmed="yes">org.junit.experimental.theories.ParameterSupplier</inbound>
            <inbound type="class" confirmed="yes">org.junit.experimental.theories.ParametersSuppliedBy</inbound>
            <inbound type="class" confirmed="yes">org.junit.experimental.theories.PotentialAssignment</inbound>
            <inbound type="feature" confirmed="yes">org.junit.experimental.theories.PotentialAssignment$1.PotentialAssignment$1(java.lang.Object, java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">org.junit.experimental.theories.PotentialAssignment$1.getValue()</inbound>
            <inbound type="feature" confirmed="yes">org.junit.experimental.theories.PotentialAssignment$1.toString()</inbound>
            <inbound type="feature" confirmed="yes">org.junit.experimental.theories.PotentialAssignment$1.val$value</inbound>
            <inbound type="feature" confirmed="yes">org.junit.experimental.theories.PotentialAssignment.forValue(java.lang.String, java.lang.Object)</inbound>
            <inbound type="feature" confirmed="yes">org.junit.experimental.theories.PotentialAssignment.getValue()</inbound>
            <inbound type="feature" confirmed="yes">org.junit.experimental.theories.Theories$TheoryAnchor$1$1.evaluate()</inbound>
            <inbound type="feature" confirmed="yes">org.junit.experimental.theories.Theories$TheoryAnchor$1.createTest()</inbound>
            <inbound type="feature" confirmed="yes">org.junit.experimental.theories.Theories$TheoryAnchor$1.methodInvoker(org.junit.runners.model.FrameworkMethod, java.lang.Object)</inbound>
            <inbound type="feature" confirmed="yes">org.junit.experimental.theories.Theories$TheoryAnchor$2.Theories$TheoryAnchor$2(org.junit.experimental.theories.Theories$TheoryAnchor, org.junit.experimental.theories.internal.Assignments, org.junit.runners.model.FrameworkMethod, java.lang.Object)</inbound>
            <inbound type="feature" confirmed="yes">org.junit.experimental.theories.Theories$TheoryAnchor$2.evaluate()</inbound>
            <inbound type="feature" confirmed="yes">org.junit.experimental.theories.Theories$TheoryAnchor$2.val$freshInstance</inbound>
            <inbound type="feature" confirmed="yes">org.junit.experimental.theories.Theories$TheoryAnchor.access$100(org.junit.experimental.theories.Theories$TheoryAnchor, org.junit.runners.model.FrameworkMethod, org.junit.experimental.theories.internal.Assignments, java.lang.Object)</inbound>
            <inbound type="feature" confirmed="yes">org.junit.experimental.theories.Theories$TheoryAnchor.evaluate()</inbound>
            <inbound type="feature" confirmed="yes">org.junit.experimental.theories.Theories$TheoryAnchor.handleAssumptionViolation(org.junit.internal.AssumptionViolatedException)</inbound>
            <inbound type="feature" confirmed="yes">org.junit.experimental.theories.Theories$TheoryAnchor.methodCompletesWithParameters(org.junit.runners.model.FrameworkMethod, org.junit.experimental.theories.internal.Assignments, java.lang.Object)</inbound>
            <inbound type="feature" confirmed="yes">org.junit.experimental.theories.Theories$TheoryAnchor.reportParameterizedError(java.lang.Throwable, java.lang.Object[])</inbound>
            <inbound type="feature" confirmed="yes">org.junit.experimental.theories.Theories$TheoryAnchor.runWithIncompleteAssignment(org.junit.experimental.theories.internal.Assignments)</inbound>
            <inbound type="feature" confirmed="yes">org.junit.experimental.theories.Theories.validateDataPointFields(java.util.List)</inbound>
            <inbound type="feature" confirmed="yes">org.junit.experimental.theories.Theories.validateTestMethods(java.util.List)</inbound>
            <inbound type="class" confirmed="yes">org.junit.experimental.theories.Theory</inbound>
            <inbound type="class" confirmed="yes">org.junit.experimental.theories.internal.AllMembersSupplier$1</inbound>
            <inbound type="feature" confirmed="yes">org.junit.experimental.theories.internal.AllMembersSupplier$MethodParameterValue.getValue()</inbound>
            <inbound type="feature" confirmed="yes">org.junit.experimental.theories.internal.AllMembersSupplier.addArrayValues(java.lang.String, java.util.List, java.lang.Object)</inbound>
            <inbound type="feature" confirmed="yes">org.junit.experimental.theories.internal.AllMembersSupplier.addFields(org.junit.experimental.theories.ParameterSignature, java.util.List)</inbound>
            <inbound type="feature" confirmed="yes">org.junit.experimental.theories.internal.AllMembersSupplier.addMultiPointMethods(java.util.List)</inbound>
            <inbound type="feature" confirmed="yes">org.junit.experimental.theories.internal.AllMembersSupplier.addSinglePointMethods(org.junit.experimental.theories.ParameterSignature, java.util.List)</inbound>
            <inbound type="feature" confirmed="yes">org.junit.experimental.theories.internal.AllMembersSupplier.getStaticFieldValue(java.lang.reflect.Field)</inbound>
            <inbound type="class" confirmed="yes">org.junit.experimental.theories.internal.Assignments</inbound>
            <inbound type="feature" confirmed="yes">org.junit.experimental.theories.internal.Assignments.assignNext(org.junit.experimental.theories.PotentialAssignment)</inbound>
            <inbound type="feature" confirmed="yes">org.junit.experimental.theories.internal.Assignments.getActualValues(int, int, boolean)</inbound>
            <inbound type="feature" confirmed="yes">org.junit.experimental.theories.internal.Assignments.getAllArguments(boolean)</inbound>
            <inbound type="feature" confirmed="yes">org.junit.experimental.theories.internal.Assignments.getAnnotatedSupplier(org.junit.experimental.theories.ParameterSignature)</inbound>
            <inbound type="feature" confirmed="yes">org.junit.experimental.theories.internal.Assignments.getArgumentStrings(boolean)</inbound>
            <inbound type="feature" confirmed="yes">org.junit.experimental.theories.internal.Assignments.getConstructorArguments(boolean)</inbound>
            <inbound type="feature" confirmed="yes">org.junit.experimental.theories.internal.Assignments.getMethodArguments(boolean)</inbound>
            <inbound type="feature" confirmed="yes">org.junit.experimental.theories.internal.Assignments.nextUnassigned()</inbound>
            <inbound type="feature" confirmed="yes">org.junit.experimental.theories.internal.ParameterizedAssertionError.ParameterizedAssertionError(java.lang.Throwable, java.lang.String, java.lang.Object[])</inbound>
            <inbound type="feature" confirmed="yes">org.junit.experimental.theories.internal.ParameterizedAssertionError.equals(java.lang.Object)</inbound>
            <inbound type="feature" confirmed="yes">org.junit.experimental.theories.internal.ParameterizedAssertionError.join(java.lang.String, java.lang.Object[])</inbound>
            <inbound type="feature" confirmed="yes">org.junit.experimental.theories.internal.ParameterizedAssertionError.join(java.lang.String, java.util.Collection)</inbound>
            <inbound type="feature" confirmed="yes">org.junit.experimental.theories.internal.ParameterizedAssertionError.stringValueOf(java.lang.Object)</inbound>
            <inbound type="class" confirmed="yes">org.junit.experimental.theories.suppliers.TestedOn</inbound>
            <inbound type="feature" confirmed="yes">org.junit.experimental.theories.suppliers.TestedOnSupplier.getValueSources(org.junit.experimental.theories.ParameterSignature)</inbound>
            <inbound type="feature" confirmed="yes">org.junit.internal.ArrayComparisonFailure.addDimension(int)</inbound>
            <inbound type="feature" confirmed="yes">org.junit.internal.ArrayComparisonFailure.getMessage()</inbound>
            <inbound type="feature" confirmed="yes">org.junit.internal.AssumptionViolatedException.AssumptionViolatedException(java.lang.Object, org.hamcrest.Matcher)</inbound>
            <inbound type="feature" confirmed="yes">org.junit.internal.AssumptionViolatedException.AssumptionViolatedException(java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">org.junit.internal.AssumptionViolatedException.describeTo(org.hamcrest.Description)</inbound>
            <inbound type="feature" confirmed="yes">org.junit.internal.AssumptionViolatedException.fValue</inbound>
            <inbound type="class" confirmed="yes">org.junit.internal.ComparisonCriteria</inbound>
            <inbound type="feature" confirmed="yes">org.junit.internal.ComparisonCriteria.arrayEquals(java.lang.String, java.lang.Object, java.lang.Object)</inbound>
            <inbound type="feature" confirmed="yes">org.junit.internal.ComparisonCriteria.assertArraysAreSameLength(java.lang.Object, java.lang.Object, java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">org.junit.internal.ComparisonCriteria.assertElementsEqual(java.lang.Object, java.lang.Object)</inbound>
            <inbound type="feature" confirmed="yes">org.junit.internal.ComparisonCriteria.isArray(java.lang.Object)</inbound>
            <inbound type="feature" confirmed="yes">org.junit.internal.ExactComparisonCriteria.assertElementsEqual(java.lang.Object, java.lang.Object)</inbound>
            <inbound type="feature" confirmed="yes">org.junit.internal.InexactComparisonCriteria.assertElementsEqual(java.lang.Object, java.lang.Object)</inbound>
            <inbound type="class" confirmed="yes">org.junit.internal.JUnitSystem</inbound>
            <inbound type="class" confirmed="yes">org.junit.internal.RealSystem</inbound>
            <inbound type="feature" confirmed="yes">org.junit.internal.TextListener.printFailures(org.junit.runner.Result)</inbound>
            <inbound type="feature" confirmed="yes">org.junit.internal.builders.AllDefaultPossibilitiesBuilder.runnerForClass(java.lang.Class)</inbound>
            <inbound type="feature" confirmed="yes">org.junit.internal.builders.AnnotatedBuilder.buildRunner(java.lang.Class, java.lang.Class)</inbound>
            <inbound type="feature" confirmed="yes">org.junit.internal.matchers.CombinableMatcher.matches(java.lang.Object)</inbound>
            <inbound type="class" confirmed="yes">org.junit.internal.matchers.Each</inbound>
            <inbound type="feature" confirmed="yes">org.junit.internal.matchers.Each$1.matches(java.lang.Object)</inbound>
            <inbound type="feature" confirmed="yes">org.junit.internal.matchers.IsCollectionContaining.hasItem(java.lang.Object)</inbound>
            <inbound type="feature" confirmed="yes">org.junit.internal.matchers.IsCollectionContaining.hasItems(java.lang.Object[])</inbound>
            <inbound type="feature" confirmed="yes">org.junit.internal.matchers.IsCollectionContaining.hasItems(org.hamcrest.Matcher[])</inbound>
            <inbound type="feature" confirmed="yes">org.junit.internal.matchers.IsCollectionContaining.matchesSafely(java.lang.Iterable)</inbound>
            <inbound type="feature" confirmed="yes">org.junit.internal.matchers.IsCollectionContaining.matchesSafely(java.lang.Object)</inbound>
            <inbound type="feature" confirmed="yes">org.junit.internal.matchers.SubstringMatcher.describeTo(org.hamcrest.Description)</inbound>
            <inbound type="feature" confirmed="yes">org.junit.internal.matchers.SubstringMatcher.matchesSafely(java.lang.Object)</inbound>
            <inbound type="feature" confirmed="yes">org.junit.internal.matchers.TypeSafeMatcher.findExpectedType(java.lang.Class)</inbound>
            <inbound type="feature" confirmed="yes">org.junit.internal.matchers.TypeSafeMatcher.isMatchesSafelyMethod(java.lang.reflect.Method)</inbound>
            <inbound type="feature" confirmed="yes">org.junit.internal.matchers.TypeSafeMatcher.matches(java.lang.Object)</inbound>
            <inbound type="feature" confirmed="yes">org.junit.internal.matchers.TypeSafeMatcher.matchesSafely(java.lang.Object)</inbound>
            <inbound type="feature" confirmed="yes">org.junit.internal.requests.FilterRequest.getRunner()</inbound>
            <inbound type="feature" confirmed="yes">org.junit.internal.requests.SortingRequest.getRunner()</inbound>
            <inbound type="class" confirmed="yes">org.junit.internal.requests.package-info</inbound>
            <inbound type="class" confirmed="yes">org.junit.internal.runners.ClassRoadie</inbound>
            <inbound type="feature" confirmed="yes">org.junit.internal.runners.ClassRoadie.runAfters()</inbound>
            <inbound type="feature" confirmed="yes">org.junit.internal.runners.ClassRoadie.runBefores()</inbound>
            <inbound type="feature" confirmed="yes">org.junit.internal.runners.ErrorReportingRunner.getCauses(java.lang.Throwable)</inbound>
            <inbound type="feature" confirmed="yes">org.junit.internal.runners.ErrorReportingRunner.getDescription()</inbound>
            <inbound type="feature" confirmed="yes">org.junit.internal.runners.ErrorReportingRunner.run(org.junit.runner.notification.RunNotifier)</inbound>
            <inbound type="feature" confirmed="yes">org.junit.internal.runners.InitializationError.InitializationError(java.lang.Throwable[])</inbound>
            <inbound type="class" confirmed="yes">org.junit.internal.runners.JUnit38ClassRunner$1</inbound>
            <inbound type="class" confirmed="yes">org.junit.internal.runners.JUnit38ClassRunner$OldTestClassAdaptingListener</inbound>
            <inbound type="feature" confirmed="yes">org.junit.internal.runners.JUnit38ClassRunner.createSuiteDescription(junit.framework.TestSuite)</inbound>
            <inbound type="class" confirmed="yes">org.junit.internal.runners.JUnit4ClassRunner$1</inbound>
            <inbound type="class" confirmed="yes">org.junit.internal.runners.JUnit4ClassRunner$2</inbound>
            <inbound type="feature" confirmed="yes">org.junit.internal.runners.JUnit4ClassRunner$2.compare(java.lang.Object, java.lang.Object)</inbound>
            <inbound type="feature" confirmed="yes">org.junit.internal.runners.JUnit4ClassRunner.createTest()</inbound>
            <inbound type="feature" confirmed="yes">org.junit.internal.runners.JUnit4ClassRunner.filter(org.junit.runner.manipulation.Filter)</inbound>
            <inbound type="feature" confirmed="yes">org.junit.internal.runners.JUnit4ClassRunner.getDescription()</inbound>
            <inbound type="feature" confirmed="yes">org.junit.internal.runners.JUnit4ClassRunner.invokeTestMethod(java.lang.reflect.Method, org.junit.runner.notification.RunNotifier)</inbound>
            <inbound type="feature" confirmed="yes">org.junit.internal.runners.JUnit4ClassRunner.runMethods(org.junit.runner.notification.RunNotifier)</inbound>
            <inbound type="class" confirmed="yes">org.junit.internal.runners.MethodRoadie</inbound>
            <inbound type="class" confirmed="yes">org.junit.internal.runners.MethodRoadie$1</inbound>
            <inbound type="class" confirmed="yes">org.junit.internal.runners.MethodRoadie$1$1</inbound>
            <inbound type="feature" confirmed="yes">org.junit.internal.runners.MethodRoadie$1$1.call()</inbound>
            <inbound type="feature" confirmed="yes">org.junit.internal.runners.MethodRoadie$1.run()</inbound>
            <inbound type="class" confirmed="yes">org.junit.internal.runners.MethodRoadie$2</inbound>
            <inbound type="feature" confirmed="yes">org.junit.internal.runners.MethodRoadie.MethodRoadie(java.lang.Object, org.junit.internal.runners.TestMethod, org.junit.runner.notification.RunNotifier, org.junit.runner.Description)</inbound>
            <inbound type="feature" confirmed="yes">org.junit.internal.runners.MethodRoadie.fTest</inbound>
            <inbound type="feature" confirmed="yes">org.junit.internal.runners.MethodRoadie.runAfters()</inbound>
            <inbound type="feature" confirmed="yes">org.junit.internal.runners.MethodRoadie.runBefores()</inbound>
            <inbound type="feature" confirmed="yes">org.junit.internal.runners.MethodRoadie.runTestMethod()</inbound>
            <inbound type="class" confirmed="yes">org.junit.internal.runners.MethodValidator</inbound>
            <inbound type="feature" confirmed="yes">org.junit.internal.runners.MethodValidator.validateInstanceMethods()</inbound>
            <inbound type="feature" confirmed="yes">org.junit.internal.runners.MethodValidator.validateNoArgConstructor()</inbound>
            <inbound type="feature" confirmed="yes">org.junit.internal.runners.MethodValidator.validateTestMethods(java.lang.Class, boolean)</inbound>
            <inbound type="feature" confirmed="yes">org.junit.internal.runners.SuiteMethod.testFromSuiteMethod(java.lang.Class)</inbound>
            <inbound type="class" confirmed="yes">org.junit.internal.runners.TestClass</inbound>
            <inbound type="feature" confirmed="yes">org.junit.internal.runners.TestClass.getAnnotatedMethods(java.lang.Class)</inbound>
            <inbound type="feature" confirmed="yes">org.junit.internal.runners.TestClass.getSuperClasses(java.lang.Class)</inbound>
            <inbound type="feature" confirmed="yes">org.junit.internal.runners.TestClass.isShadowed(java.lang.reflect.Method, java.lang.reflect.Method)</inbound>
            <inbound type="feature" confirmed="yes">org.junit.internal.runners.TestClass.isShadowed(java.lang.reflect.Method, java.util.List)</inbound>
            <inbound type="feature" confirmed="yes">org.junit.internal.runners.TestClass.runsTopToBottom(java.lang.Class)</inbound>
            <inbound type="class" confirmed="yes">org.junit.internal.runners.TestMethod</inbound>
            <inbound type="feature" confirmed="yes">org.junit.internal.runners.TestMethod.invoke(java.lang.Object)</inbound>
            <inbound type="class" confirmed="yes">org.junit.internal.runners.model.EachTestNotifier</inbound>
            <inbound type="feature" confirmed="yes">org.junit.internal.runners.model.EachTestNotifier.addMultipleFailureException(org.junit.runners.model.MultipleFailureException)</inbound>
            <inbound type="class" confirmed="yes">org.junit.internal.runners.model.ReflectiveCallable</inbound>
            <inbound type="feature" confirmed="yes">org.junit.internal.runners.model.ReflectiveCallable.run()</inbound>
            <inbound type="feature" confirmed="yes">org.junit.internal.runners.model.ReflectiveCallable.runReflectiveCall()</inbound>
            <inbound type="class" confirmed="yes">org.junit.internal.runners.package-info</inbound>
            <inbound type="feature" confirmed="yes">org.junit.internal.runners.rules.RuleFieldValidator.addError(java.util.List, org.junit.runners.model.FrameworkField, java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">org.junit.internal.runners.rules.RuleFieldValidator.validate(org.junit.runners.model.TestClass, java.util.List)</inbound>
            <inbound type="feature" confirmed="yes">org.junit.internal.runners.rules.RuleFieldValidator.values()</inbound>
            <inbound type="feature" confirmed="yes">org.junit.internal.runners.statements.ExpectException.evaluate()</inbound>
            <inbound type="feature" confirmed="yes">org.junit.internal.runners.statements.FailOnTimeout.evaluate()</inbound>
            <inbound type="feature" confirmed="yes">org.junit.internal.runners.statements.InvokeMethod.InvokeMethod(org.junit.runners.model.FrameworkMethod, java.lang.Object)</inbound>
            <inbound type="feature" confirmed="yes">org.junit.internal.runners.statements.InvokeMethod.evaluate()</inbound>
            <inbound type="feature" confirmed="yes">org.junit.internal.runners.statements.InvokeMethod.fTarget</inbound>
            <inbound type="feature" confirmed="yes">org.junit.internal.runners.statements.RunAfters.RunAfters(org.junit.runners.model.Statement, java.util.List, java.lang.Object)</inbound>
            <inbound type="feature" confirmed="yes">org.junit.internal.runners.statements.RunAfters.evaluate()</inbound>
            <inbound type="feature" confirmed="yes">org.junit.internal.runners.statements.RunAfters.fTarget</inbound>
            <inbound type="feature" confirmed="yes">org.junit.internal.runners.statements.RunBefores.RunBefores(org.junit.runners.model.Statement, java.util.List, java.lang.Object)</inbound>
            <inbound type="feature" confirmed="yes">org.junit.internal.runners.statements.RunBefores.evaluate()</inbound>
            <inbound type="feature" confirmed="yes">org.junit.internal.runners.statements.RunBefores.fTarget</inbound>
            <inbound type="class" confirmed="yes">org.junit.matchers.JUnitMatchers</inbound>
            <inbound type="feature" confirmed="yes">org.junit.matchers.JUnitMatchers.hasItem(java.lang.Object)</inbound>
            <inbound type="feature" confirmed="yes">org.junit.matchers.JUnitMatchers.hasItems(java.lang.Object[])</inbound>
            <inbound type="class" confirmed="yes">org.junit.matchers.package-info</inbound>
            <inbound type="class" confirmed="yes">org.junit.package-info</inbound>
            <inbound type="class" confirmed="yes">org.junit.rules.ErrorCollector$1</inbound>
            <inbound type="feature" confirmed="yes">org.junit.rules.ErrorCollector$1.ErrorCollector$1(org.junit.rules.ErrorCollector, java.lang.Object, org.hamcrest.Matcher)</inbound>
            <inbound type="feature" confirmed="yes">org.junit.rules.ErrorCollector$1.call()</inbound>
            <inbound type="feature" confirmed="yes">org.junit.rules.ErrorCollector$1.val$value</inbound>
            <inbound type="feature" confirmed="yes">org.junit.rules.ErrorCollector.addError(java.lang.Throwable)</inbound>
            <inbound type="feature" confirmed="yes">org.junit.rules.ErrorCollector.checkSucceeds(java.util.concurrent.Callable)</inbound>
            <inbound type="feature" confirmed="yes">org.junit.rules.ErrorCollector.checkThat(java.lang.Object, org.hamcrest.Matcher)</inbound>
            <inbound type="class" confirmed="yes">org.junit.rules.ExpectedException</inbound>
            <inbound type="feature" confirmed="yes">org.junit.rules.ExpectedException$1.matchesSafely(java.lang.Object)</inbound>
            <inbound type="feature" confirmed="yes">org.junit.rules.ExpectedException$1.matchesSafely(java.lang.Throwable)</inbound>
            <inbound type="feature" confirmed="yes">org.junit.rules.ExpectedException$ExpectedExceptionStatement.evaluate()</inbound>
            <inbound type="class" confirmed="yes">org.junit.rules.ExternalResource</inbound>
            <inbound type="class" confirmed="yes">org.junit.rules.MethodRule</inbound>
            <inbound type="feature" confirmed="yes">org.junit.rules.MethodRule.apply(org.junit.runners.model.Statement, org.junit.runners.model.FrameworkMethod, java.lang.Object)</inbound>
            <inbound type="feature" confirmed="yes">org.junit.rules.RunRules.applyAll(org.junit.runners.model.Statement, java.lang.Iterable, org.junit.runner.Description)</inbound>
            <inbound type="class" confirmed="yes">org.junit.rules.TestRule</inbound>
            <inbound type="class" confirmed="yes">org.junit.rules.TestWatcher</inbound>
            <inbound type="class" confirmed="yes">org.junit.rules.TestWatchman</inbound>
            <inbound type="feature" confirmed="yes">org.junit.rules.TestWatchman.apply(org.junit.runners.model.Statement, org.junit.runners.model.FrameworkMethod, java.lang.Object)</inbound>
            <inbound type="class" confirmed="yes">org.junit.rules.Timeout</inbound>
            <inbound type="class" confirmed="yes">org.junit.rules.Verifier</inbound>
            <inbound type="class" confirmed="yes">org.junit.runner.Computer</inbound>
            <inbound type="class" confirmed="yes">org.junit.runner.Describable</inbound>
            <inbound type="class" confirmed="yes">org.junit.runner.Description</inbound>
            <inbound type="feature" confirmed="yes">org.junit.runner.Description.addChild(org.junit.runner.Description)</inbound>
            <inbound type="feature" confirmed="yes">org.junit.runner.Description.createTestDescription(java.lang.Class, java.lang.String, java.lang.annotation.Annotation[])</inbound>
            <inbound type="feature" confirmed="yes">org.junit.runner.Description.equals(java.lang.Object)</inbound>
            <inbound type="feature" confirmed="yes">org.junit.runner.Description.getAnnotation(java.lang.Class)</inbound>
            <inbound type="feature" confirmed="yes">org.junit.runner.Description.getAnnotations()</inbound>
            <inbound type="feature" confirmed="yes">org.junit.runner.Description.isEmpty()</inbound>
            <inbound type="feature" confirmed="yes">org.junit.runner.Description.testCount()</inbound>
            <inbound type="class" confirmed="yes">org.junit.runner.JUnitCore</inbound>
            <inbound type="feature" confirmed="yes">org.junit.runner.JUnitCore.runMain(org.junit.internal.JUnitSystem, java.lang.String[])</inbound>
            <inbound type="class" confirmed="yes">org.junit.runner.Request</inbound>
            <inbound type="class" confirmed="yes">org.junit.runner.Result</inbound>
            <inbound type="class" confirmed="yes">org.junit.runner.Result$1</inbound>
            <inbound type="feature" confirmed="yes">org.junit.runner.Result$Listener.testFailure(org.junit.runner.notification.Failure)</inbound>
            <inbound type="class" confirmed="yes">org.junit.runner.RunWith</inbound>
            <inbound type="class" confirmed="yes">org.junit.runner.Runner</inbound>
            <inbound type="class" confirmed="yes">org.junit.runner.manipulation.Filter</inbound>
            <inbound type="feature" confirmed="yes">org.junit.runner.manipulation.Filter$1.apply(java.lang.Object)</inbound>
            <inbound type="feature" confirmed="yes">org.junit.runner.manipulation.Filter$2.describe()</inbound>
            <inbound type="feature" confirmed="yes">org.junit.runner.manipulation.Filter$2.shouldRun(org.junit.runner.Description)</inbound>
            <inbound type="feature" confirmed="yes">org.junit.runner.manipulation.Filter.apply(java.lang.Object)</inbound>
            <inbound type="class" confirmed="yes">org.junit.runner.manipulation.Filterable</inbound>
            <inbound type="class" confirmed="yes">org.junit.runner.manipulation.Sortable</inbound>
            <inbound type="class" confirmed="yes">org.junit.runner.manipulation.Sorter</inbound>
            <inbound type="class" confirmed="yes">org.junit.runner.manipulation.Sorter$1</inbound>
            <inbound type="feature" confirmed="yes">org.junit.runner.manipulation.Sorter$1.compare(java.lang.Object, java.lang.Object)</inbound>
            <inbound type="feature" confirmed="yes">org.junit.runner.manipulation.Sorter.apply(java.lang.Object)</inbound>
            <inbound type="feature" confirmed="yes">org.junit.runner.manipulation.Sorter.compare(java.lang.Object, java.lang.Object)</inbound>
            <inbound type="feature" confirmed="yes">org.junit.runner.manipulation.Sorter.compare(org.junit.runner.Description, org.junit.runner.Description)</inbound>
            <inbound type="class" confirmed="yes">org.junit.runner.manipulation.package-info</inbound>
            <inbound type="class" confirmed="yes">org.junit.runner.notification.Failure</inbound>
            <inbound type="class" confirmed="yes">org.junit.runner.notification.RunListener</inbound>
            <inbound type="class" confirmed="yes">org.junit.runner.notification.RunNotifier</inbound>
            <inbound type="class" confirmed="yes">org.junit.runner.notification.RunNotifier$SafeNotifier</inbound>
            <inbound type="feature" confirmed="yes">org.junit.runner.notification.RunNotifier$SafeNotifier.run()</inbound>
            <inbound type="feature" confirmed="yes">org.junit.runner.notification.RunNotifier.addFirstListener(org.junit.runner.notification.RunListener)</inbound>
            <inbound type="feature" confirmed="yes">org.junit.runner.notification.RunNotifier.addListener(org.junit.runner.notification.RunListener)</inbound>
            <inbound type="feature" confirmed="yes">org.junit.runner.notification.RunNotifier.removeListener(org.junit.runner.notification.RunListener)</inbound>
            <inbound type="class" confirmed="yes">org.junit.runner.notification.package-info</inbound>
            <inbound type="class" confirmed="yes">org.junit.runner.package-info</inbound>
            <inbound type="feature" confirmed="yes">org.junit.runners.BlockJUnit4ClassRunner$1.runReflectiveCall()</inbound>
            <inbound type="feature" confirmed="yes">org.junit.runners.BlockJUnit4ClassRunner.createTest()</inbound>
            <inbound type="feature" confirmed="yes">org.junit.runners.BlockJUnit4ClassRunner.describeChild(java.lang.Object)</inbound>
            <inbound type="feature" confirmed="yes">org.junit.runners.BlockJUnit4ClassRunner.getMethodRules(java.lang.Object)</inbound>
            <inbound type="feature" confirmed="yes">org.junit.runners.BlockJUnit4ClassRunner.getTestRules(java.lang.Object)</inbound>
            <inbound type="feature" confirmed="yes">org.junit.runners.BlockJUnit4ClassRunner.methodBlock(org.junit.runners.model.FrameworkMethod)</inbound>
            <inbound type="feature" confirmed="yes">org.junit.runners.BlockJUnit4ClassRunner.methodInvoker(org.junit.runners.model.FrameworkMethod, java.lang.Object)</inbound>
            <inbound type="feature" confirmed="yes">org.junit.runners.BlockJUnit4ClassRunner.possiblyExpectingExceptions(org.junit.runners.model.FrameworkMethod, java.lang.Object, org.junit.runners.model.Statement)</inbound>
            <inbound type="feature" confirmed="yes">org.junit.runners.BlockJUnit4ClassRunner.rules(java.lang.Object)</inbound>
            <inbound type="feature" confirmed="yes">org.junit.runners.BlockJUnit4ClassRunner.runChild(java.lang.Object, org.junit.runner.notification.RunNotifier)</inbound>
            <inbound type="feature" confirmed="yes">org.junit.runners.BlockJUnit4ClassRunner.validateInstanceMethods(java.util.List)</inbound>
            <inbound type="feature" confirmed="yes">org.junit.runners.BlockJUnit4ClassRunner.validateOnlyOneConstructor(java.util.List)</inbound>
            <inbound type="feature" confirmed="yes">org.junit.runners.BlockJUnit4ClassRunner.validateZeroArgConstructor(java.util.List)</inbound>
            <inbound type="feature" confirmed="yes">org.junit.runners.BlockJUnit4ClassRunner.withAfters(org.junit.runners.model.FrameworkMethod, java.lang.Object, org.junit.runners.model.Statement)</inbound>
            <inbound type="feature" confirmed="yes">org.junit.runners.BlockJUnit4ClassRunner.withBefores(org.junit.runners.model.FrameworkMethod, java.lang.Object, org.junit.runners.model.Statement)</inbound>
            <inbound type="feature" confirmed="yes">org.junit.runners.BlockJUnit4ClassRunner.withMethodRules(org.junit.runners.model.FrameworkMethod, java.lang.Object, org.junit.runners.model.Statement)</inbound>
            <inbound type="feature" confirmed="yes">org.junit.runners.BlockJUnit4ClassRunner.withPotentialTimeout(org.junit.runners.model.FrameworkMethod, java.lang.Object, org.junit.runners.model.Statement)</inbound>
            <inbound type="feature" confirmed="yes">org.junit.runners.BlockJUnit4ClassRunner.withRules(org.junit.runners.model.FrameworkMethod, java.lang.Object, org.junit.runners.model.Statement)</inbound>
            <inbound type="feature" confirmed="yes">org.junit.runners.BlockJUnit4ClassRunner.withTestRules(org.junit.runners.model.FrameworkMethod, java.lang.Object, org.junit.runners.model.Statement)</inbound>
            <inbound type="class" confirmed="yes">org.junit.runners.Parameterized$Parameters</inbound>
            <inbound type="feature" confirmed="yes">org.junit.runners.Parameterized$TestClassRunnerForParameters.computeParams()</inbound>
            <inbound type="feature" confirmed="yes">org.junit.runners.Parameterized$TestClassRunnerForParameters.createTest()</inbound>
            <inbound type="feature" confirmed="yes">org.junit.runners.Parameterized$TestClassRunnerForParameters.getName()</inbound>
            <inbound type="feature" confirmed="yes">org.junit.runners.Parameterized$TestClassRunnerForParameters.testName(org.junit.runners.model.FrameworkMethod)</inbound>
            <inbound type="feature" confirmed="yes">org.junit.runners.Parameterized.Parameterized(java.lang.Class)</inbound>
            <inbound type="feature" confirmed="yes">org.junit.runners.Parameterized.getParametersList(org.junit.runners.model.TestClass)</inbound>
            <inbound type="feature" confirmed="yes">org.junit.runners.Parameterized.getParametersMethod(org.junit.runners.model.TestClass)</inbound>
            <inbound type="class" confirmed="yes">org.junit.runners.ParentRunner$1</inbound>
            <inbound type="class" confirmed="yes">org.junit.runners.ParentRunner$3</inbound>
            <inbound type="feature" confirmed="yes">org.junit.runners.ParentRunner$3.ParentRunner$3(org.junit.runners.ParentRunner, java.lang.Object, org.junit.runner.notification.RunNotifier)</inbound>
            <inbound type="feature" confirmed="yes">org.junit.runners.ParentRunner$3.run()</inbound>
            <inbound type="feature" confirmed="yes">org.junit.runners.ParentRunner$3.val$each</inbound>
            <inbound type="class" confirmed="yes">org.junit.runners.ParentRunner$4</inbound>
            <inbound type="feature" confirmed="yes">org.junit.runners.ParentRunner$4.compare(java.lang.Object, java.lang.Object)</inbound>
            <inbound type="feature" confirmed="yes">org.junit.runners.ParentRunner.classRules()</inbound>
            <inbound type="feature" confirmed="yes">org.junit.runners.ParentRunner.describeChild(java.lang.Object)</inbound>
            <inbound type="feature" confirmed="yes">org.junit.runners.ParentRunner.filter(org.junit.runner.manipulation.Filter)</inbound>
            <inbound type="feature" confirmed="yes">org.junit.runners.ParentRunner.getDescription()</inbound>
            <inbound type="feature" confirmed="yes">org.junit.runners.ParentRunner.runChild(java.lang.Object, org.junit.runner.notification.RunNotifier)</inbound>
            <inbound type="feature" confirmed="yes">org.junit.runners.ParentRunner.runChildren(org.junit.runner.notification.RunNotifier)</inbound>
            <inbound type="feature" confirmed="yes">org.junit.runners.ParentRunner.shouldRun(org.junit.runner.manipulation.Filter, java.lang.Object)</inbound>
            <inbound type="feature" confirmed="yes">org.junit.runners.ParentRunner.sort(org.junit.runner.manipulation.Sorter)</inbound>
            <inbound type="feature" confirmed="yes">org.junit.runners.ParentRunner.sortChild(java.lang.Object)</inbound>
            <inbound type="feature" confirmed="yes">org.junit.runners.ParentRunner.validatePublicVoidNoArgMethods(java.lang.Class, boolean, java.util.List)</inbound>
            <inbound type="feature" confirmed="yes">org.junit.runners.ParentRunner.withAfterClasses(org.junit.runners.model.Statement)</inbound>
            <inbound type="feature" confirmed="yes">org.junit.runners.ParentRunner.withBeforeClasses(org.junit.runners.model.Statement)</inbound>
            <inbound type="class" confirmed="yes">org.junit.runners.Suite$SuiteClasses</inbound>
            <inbound type="feature" confirmed="yes">org.junit.runners.Suite.describeChild(java.lang.Object)</inbound>
            <inbound type="feature" confirmed="yes">org.junit.runners.Suite.getAnnotatedClasses(java.lang.Class)</inbound>
            <inbound type="feature" confirmed="yes">org.junit.runners.Suite.runChild(java.lang.Object, org.junit.runner.notification.RunNotifier)</inbound>
            <inbound type="feature" confirmed="yes">org.junit.runners.model.FrameworkField.get(java.lang.Object)</inbound>
            <inbound type="feature" confirmed="yes">org.junit.runners.model.FrameworkField.isShadowedBy(org.junit.runners.model.FrameworkField)</inbound>
            <inbound type="class" confirmed="yes">org.junit.runners.model.FrameworkMember</inbound>
            <inbound type="feature" confirmed="yes">org.junit.runners.model.FrameworkMember.isShadowedBy(java.util.List)</inbound>
            <inbound type="feature" confirmed="yes">org.junit.runners.model.FrameworkMethod$1.FrameworkMethod$1(org.junit.runners.model.FrameworkMethod, java.lang.Object, java.lang.Object[])</inbound>
            <inbound type="feature" confirmed="yes">org.junit.runners.model.FrameworkMethod$1.runReflectiveCall()</inbound>
            <inbound type="feature" confirmed="yes">org.junit.runners.model.FrameworkMethod$1.val$params</inbound>
            <inbound type="feature" confirmed="yes">org.junit.runners.model.FrameworkMethod$1.val$target</inbound>
            <inbound type="feature" confirmed="yes">org.junit.runners.model.FrameworkMethod.equals(java.lang.Object)</inbound>
            <inbound type="feature" confirmed="yes">org.junit.runners.model.FrameworkMethod.invokeExplosively(java.lang.Object, java.lang.Object[])</inbound>
            <inbound type="feature" confirmed="yes">org.junit.runners.model.FrameworkMethod.isShadowedBy(org.junit.runners.model.FrameworkMethod)</inbound>
            <inbound type="feature" confirmed="yes">org.junit.runners.model.FrameworkMethod.validatePublicVoid(boolean, java.util.List)</inbound>
            <inbound type="feature" confirmed="yes">org.junit.runners.model.FrameworkMethod.validatePublicVoidNoArg(boolean, java.util.List)</inbound>
            <inbound type="feature" confirmed="yes">org.junit.runners.model.InitializationError.InitializationError(java.lang.Throwable)</inbound>
            <inbound type="feature" confirmed="yes">org.junit.runners.model.MultipleFailureException.assertEmpty(java.util.List)</inbound>
            <inbound type="feature" confirmed="yes">org.junit.runners.model.MultipleFailureException.getMessage()</inbound>
            <inbound type="class" confirmed="yes">org.junit.runners.model.RunnerBuilder</inbound>
            <inbound type="feature" confirmed="yes">org.junit.runners.model.RunnerBuilder.addParent(java.lang.Class)</inbound>
            <inbound type="feature" confirmed="yes">org.junit.runners.model.RunnerBuilder.removeParent(java.lang.Class)</inbound>
            <inbound type="feature" confirmed="yes">org.junit.runners.model.RunnerBuilder.runners(java.lang.Class, java.util.List)</inbound>
            <inbound type="feature" confirmed="yes">org.junit.runners.model.RunnerBuilder.runners(java.lang.Class[])</inbound>
            <inbound type="class" confirmed="yes">org.junit.runners.model.RunnerScheduler</inbound>
            <inbound type="class" confirmed="yes">org.junit.runners.model.Statement</inbound>
            <inbound type="class" confirmed="yes">org.junit.runners.model.TestClass</inbound>
            <inbound type="feature" confirmed="yes">org.junit.runners.model.TestClass.TestClass(java.lang.Class)</inbound>
            <inbound type="feature" confirmed="yes">org.junit.runners.model.TestClass.addToAnnotationLists(org.junit.runners.model.FrameworkMember, java.util.Map)</inbound>
            <inbound type="feature" confirmed="yes">org.junit.runners.model.TestClass.getAnnotatedFieldValues(java.lang.Object, java.lang.Class, java.lang.Class)</inbound>
            <inbound type="feature" confirmed="yes">org.junit.runners.model.TestClass.getAnnotatedMembers(java.util.Map, java.lang.Class)</inbound>
            <inbound type="feature" confirmed="yes">org.junit.runners.model.TestClass.getSuperClasses(java.lang.Class)</inbound>
            <inbound type="feature" confirmed="yes">org.junit.runners.model.TestClass.runsTopToBottom(java.lang.Class)</inbound>
            <inbound type="class" confirmed="yes">org.junit.runners.package-info</inbound>
            <feature confirmed="no">
                <name>java.lang.Object.Object()</name>
                <inbound type="feature" confirmed="yes">junit.extensions.TestSetup$1.TestSetup$1(junit.extensions.TestSetup, junit.framework.TestResult)</inbound>
                <inbound type="feature" confirmed="yes">junit.framework.Assert.Assert()</inbound>
                <inbound type="feature" confirmed="yes">junit.framework.ComparisonCompactor.ComparisonCompactor(int, java.lang.String, java.lang.String)</inbound>
                <inbound type="feature" confirmed="yes">junit.framework.JUnit4TestAdapter.JUnit4TestAdapter(java.lang.Class, junit.framework.JUnit4TestAdapterCache)</inbound>
                <inbound type="feature" confirmed="yes">junit.framework.JUnit4TestCaseFacade.JUnit4TestCaseFacade(org.junit.runner.Description)</inbound>
                <inbound type="feature" confirmed="yes">junit.framework.TestFailure.TestFailure(junit.framework.Test, java.lang.Throwable)</inbound>
                <inbound type="feature" confirmed="yes">junit.framework.TestResult$1.TestResult$1(junit.framework.TestResult, junit.framework.TestCase)</inbound>
                <inbound type="feature" confirmed="yes">junit.framework.TestResult.TestResult()</inbound>
                <inbound type="feature" confirmed="yes">junit.framework.TestSuite.TestSuite()</inbound>
                <inbound type="feature" confirmed="yes">junit.framework.TestSuite.TestSuite(java.lang.Class)</inbound>
                <inbound type="feature" confirmed="yes">junit.framework.TestSuite.TestSuite(java.lang.Class[])</inbound>
                <inbound type="feature" confirmed="yes">junit.framework.TestSuite.TestSuite(java.lang.String)</inbound>
                <inbound type="feature" confirmed="yes">junit.runner.BaseTestRunner.BaseTestRunner()</inbound>
                <inbound type="feature" confirmed="yes">junit.runner.Version.Version()</inbound>
                <inbound type="feature" confirmed="yes">junit.textui.ResultPrinter.ResultPrinter(java.io.PrintStream)</inbound>
                <inbound type="feature" confirmed="yes">org.hamcrest.BaseDescription.BaseDescription()</inbound>
                <inbound type="feature" confirmed="yes">org.hamcrest.BaseMatcher.BaseMatcher()</inbound>
                <inbound type="feature" confirmed="yes">org.hamcrest.CoreMatchers.CoreMatchers()</inbound>
                <inbound type="feature" confirmed="yes">org.hamcrest.internal.ArrayIterator.ArrayIterator(java.lang.Object)</inbound>
                <inbound type="feature" confirmed="yes">org.hamcrest.internal.SelfDescribingValue.SelfDescribingValue(java.lang.Object)</inbound>
                <inbound type="feature" confirmed="yes">org.hamcrest.internal.SelfDescribingValueIterator.SelfDescribingValueIterator(java.util.Iterator)</inbound>
                <inbound type="feature" confirmed="yes">org.junit.Assert.Assert()</inbound>
                <inbound type="feature" confirmed="yes">org.junit.Assume.Assume()</inbound>
                <inbound type="feature" confirmed="yes">org.junit.ComparisonFailure$ComparisonCompactor.ComparisonFailure$ComparisonCompactor(int, java.lang.String, java.lang.String)</inbound>
                <inbound type="feature" confirmed="yes">org.junit.experimental.ParallelComputer$1$1.ParallelComputer$1$1(org.junit.experimental.ParallelComputer$1, java.lang.Runnable)</inbound>
                <inbound type="feature" confirmed="yes">org.junit.experimental.ParallelComputer$1.ParallelComputer$1()</inbound>
                <inbound type="feature" confirmed="yes">org.junit.experimental.max.MaxCore.MaxCore(java.io.File)</inbound>
                <inbound type="feature" confirmed="yes">org.junit.experimental.max.MaxHistory$TestComparator.MaxHistory$TestComparator(org.junit.experimental.max.MaxHistory)</inbound>
                <inbound type="feature" confirmed="yes">org.junit.experimental.max.MaxHistory.MaxHistory(java.io.File)</inbound>
                <inbound type="feature" confirmed="yes">org.junit.experimental.results.FailureList.FailureList(java.util.List)</inbound>
                <inbound type="feature" confirmed="yes">org.junit.experimental.results.PrintableResult.PrintableResult(org.junit.runner.Result)</inbound>
                <inbound type="feature" confirmed="yes">org.junit.experimental.results.ResultMatchers.ResultMatchers()</inbound>
                <inbound type="feature" confirmed="yes">org.junit.experimental.theories.ParameterSignature.ParameterSignature(java.lang.Class, java.lang.annotation.Annotation[])</inbound>
                <inbound type="feature" confirmed="yes">org.junit.experimental.theories.ParameterSupplier.ParameterSupplier()</inbound>
                <inbound type="feature" confirmed="yes">org.junit.experimental.theories.PotentialAssignment.PotentialAssignment()</inbound>
                <inbound type="feature" confirmed="yes">org.junit.experimental.theories.internal.Assignments.Assignments(java.util.List, java.util.List, org.junit.runners.model.TestClass)</inbound>
                <inbound type="feature" confirmed="yes">org.junit.internal.ComparisonCriteria.ComparisonCriteria()</inbound>
                <inbound type="feature" confirmed="yes">org.junit.internal.RealSystem.RealSystem()</inbound>
                <inbound type="feature" confirmed="yes">org.junit.internal.matchers.Each.Each()</inbound>
                <inbound type="feature" confirmed="yes">org.junit.internal.runners.ClassRoadie.ClassRoadie(org.junit.runner.notification.RunNotifier, org.junit.internal.runners.TestClass, org.junit.runner.Description, java.lang.Runnable)</inbound>
                <inbound type="feature" confirmed="yes">org.junit.internal.runners.JUnit38ClassRunner$OldTestClassAdaptingListener.JUnit38ClassRunner$OldTestClassAdaptingListener(org.junit.internal.runners.JUnit38ClassRunner, org.junit.runner.notification.RunNotifier)</inbound>
                <inbound type="feature" confirmed="yes">org.junit.internal.runners.JUnit4ClassRunner$1.JUnit4ClassRunner$1(org.junit.internal.runners.JUnit4ClassRunner, org.junit.runner.notification.RunNotifier)</inbound>
                <inbound type="feature" confirmed="yes">org.junit.internal.runners.JUnit4ClassRunner$2.JUnit4ClassRunner$2(org.junit.internal.runners.JUnit4ClassRunner, org.junit.runner.manipulation.Sorter)</inbound>
                <inbound type="feature" confirmed="yes">org.junit.internal.runners.MethodRoadie$1$1.MethodRoadie$1$1(org.junit.internal.runners.MethodRoadie$1)</inbound>
                <inbound type="feature" confirmed="yes">org.junit.internal.runners.MethodRoadie$1.MethodRoadie$1(org.junit.internal.runners.MethodRoadie, long)</inbound>
                <inbound type="feature" confirmed="yes">org.junit.internal.runners.MethodRoadie$2.MethodRoadie$2(org.junit.internal.runners.MethodRoadie)</inbound>
                <inbound type="feature" confirmed="yes">org.junit.internal.runners.MethodRoadie.MethodRoadie(java.lang.Object, org.junit.internal.runners.TestMethod, org.junit.runner.notification.RunNotifier, org.junit.runner.Description)</inbound>
                <inbound type="feature" confirmed="yes">org.junit.internal.runners.MethodValidator.MethodValidator(org.junit.internal.runners.TestClass)</inbound>
                <inbound type="feature" confirmed="yes">org.junit.internal.runners.TestClass.TestClass(java.lang.Class)</inbound>
                <inbound type="feature" confirmed="yes">org.junit.internal.runners.TestMethod.TestMethod(java.lang.reflect.Method, org.junit.internal.runners.TestClass)</inbound>
                <inbound type="feature" confirmed="yes">org.junit.internal.runners.model.EachTestNotifier.EachTestNotifier(org.junit.runner.notification.RunNotifier, org.junit.runner.Description)</inbound>
                <inbound type="feature" confirmed="yes">org.junit.internal.runners.model.ReflectiveCallable.ReflectiveCallable()</inbound>
                <inbound type="feature" confirmed="yes">org.junit.matchers.JUnitMatchers.JUnitMatchers()</inbound>
                <inbound type="feature" confirmed="yes">org.junit.rules.ErrorCollector$1.ErrorCollector$1(org.junit.rules.ErrorCollector, java.lang.Object, org.hamcrest.Matcher)</inbound>
                <inbound type="feature" confirmed="yes">org.junit.rules.ExpectedException.ExpectedException()</inbound>
                <inbound type="feature" confirmed="yes">org.junit.rules.ExternalResource.ExternalResource()</inbound>
                <inbound type="feature" confirmed="yes">org.junit.rules.TestWatcher.TestWatcher()</inbound>
                <inbound type="feature" confirmed="yes">org.junit.rules.TestWatchman.TestWatchman()</inbound>
                <inbound type="feature" confirmed="yes">org.junit.rules.Timeout.Timeout(int)</inbound>
                <inbound type="feature" confirmed="yes">org.junit.rules.Verifier.Verifier()</inbound>
                <inbound type="feature" confirmed="yes">org.junit.runner.Computer.Computer()</inbound>
                <inbound type="feature" confirmed="yes">org.junit.runner.Description.Description(java.lang.String, java.lang.annotation.Annotation[])</inbound>
                <inbound type="feature" confirmed="yes">org.junit.runner.JUnitCore.JUnitCore()</inbound>
                <inbound type="feature" confirmed="yes">org.junit.runner.Request.Request()</inbound>
                <inbound type="feature" confirmed="yes">org.junit.runner.Result.Result()</inbound>
                <inbound type="feature" confirmed="yes">org.junit.runner.Runner.Runner()</inbound>
                <inbound type="feature" confirmed="yes">org.junit.runner.manipulation.Filter.Filter()</inbound>
                <inbound type="feature" confirmed="yes">org.junit.runner.manipulation.Sorter$1.Sorter$1()</inbound>
                <inbound type="feature" confirmed="yes">org.junit.runner.manipulation.Sorter.Sorter(java.util.Comparator)</inbound>
                <inbound type="feature" confirmed="yes">org.junit.runner.notification.Failure.Failure(org.junit.runner.Description, java.lang.Throwable)</inbound>
                <inbound type="feature" confirmed="yes">org.junit.runner.notification.RunListener.RunListener()</inbound>
                <inbound type="feature" confirmed="yes">org.junit.runner.notification.RunNotifier$SafeNotifier.RunNotifier$SafeNotifier(org.junit.runner.notification.RunNotifier)</inbound>
                <inbound type="feature" confirmed="yes">org.junit.runner.notification.RunNotifier.RunNotifier()</inbound>
                <inbound type="feature" confirmed="yes">org.junit.runners.ParentRunner$1.ParentRunner$1(org.junit.runners.ParentRunner)</inbound>
                <inbound type="feature" confirmed="yes">org.junit.runners.ParentRunner$3.ParentRunner$3(org.junit.runners.ParentRunner, java.lang.Object, org.junit.runner.notification.RunNotifier)</inbound>
                <inbound type="feature" confirmed="yes">org.junit.runners.ParentRunner$4.ParentRunner$4(org.junit.runners.ParentRunner)</inbound>
                <inbound type="feature" confirmed="yes">org.junit.runners.model.FrameworkMember.FrameworkMember()</inbound>
                <inbound type="feature" confirmed="yes">org.junit.runners.model.RunnerBuilder.RunnerBuilder()</inbound>
                <inbound type="feature" confirmed="yes">org.junit.runners.model.Statement.Statement()</inbound>
                <inbound type="feature" confirmed="yes">org.junit.runners.model.TestClass.TestClass(java.lang.Class)</inbound>
            </feature>
            <feature confirmed="no">
                <name>java.lang.Object.equals(java.lang.Object)</name>
                <inbound type="feature" confirmed="yes">junit.framework.Assert.assertEquals(java.lang.String, java.lang.Object, java.lang.Object)</inbound>
                <inbound type="feature" confirmed="yes">junit.framework.TestSuite.isTestMethod(java.lang.reflect.Method)</inbound>
                <inbound type="feature" confirmed="yes">org.hamcrest.core.IsEqual.areEqual(java.lang.Object, java.lang.Object)</inbound>
                <inbound type="feature" confirmed="yes">org.junit.Assert.isEquals(java.lang.Object, java.lang.Object)</inbound>
                <inbound type="feature" confirmed="yes">org.junit.internal.runners.TestClass.isShadowed(java.lang.reflect.Method, java.lang.reflect.Method)</inbound>
                <inbound type="feature" confirmed="yes">org.junit.internal.runners.TestClass.runsTopToBottom(java.lang.Class)</inbound>
                <inbound type="feature" confirmed="yes">org.junit.runner.Description.getAnnotation(java.lang.Class)</inbound>
                <inbound type="feature" confirmed="yes">org.junit.runners.model.FrameworkMethod.isShadowedBy(org.junit.runners.model.FrameworkMethod)</inbound>
                <inbound type="feature" confirmed="yes">org.junit.runners.model.TestClass.runsTopToBottom(java.lang.Class)</inbound>
            </feature>
            <feature confirmed="no">
                <name>java.lang.Object.getClass()</name>
                <inbound type="feature" confirmed="yes">junit.framework.TestCase.runTest()</inbound>
                <inbound type="feature" confirmed="yes">junit.framework.TestCase.toString()</inbound>
                <inbound type="feature" confirmed="yes">org.hamcrest.BaseDescription.appendValue(java.lang.Object)</inbound>
                <inbound type="feature" confirmed="yes">org.hamcrest.core.IsEqual.isArray(java.lang.Object)</inbound>
                <inbound type="feature" confirmed="yes">org.hamcrest.internal.ArrayIterator.ArrayIterator(java.lang.Object)</inbound>
                <inbound type="feature" confirmed="yes">org.junit.Assert.formatClassAndValue(java.lang.Object, java.lang.String)</inbound>
                <inbound type="feature" confirmed="yes">org.junit.internal.ComparisonCriteria.isArray(java.lang.Object)</inbound>
                <inbound type="feature" confirmed="yes">org.junit.internal.matchers.TypeSafeMatcher.TypeSafeMatcher()</inbound>
                <inbound type="feature" confirmed="yes">org.junit.internal.runners.JUnit38ClassRunner$OldTestClassAdaptingListener.getEffectiveClass(junit.framework.Test)</inbound>
                <inbound type="feature" confirmed="yes">org.junit.internal.runners.JUnit38ClassRunner.makeDescription(junit.framework.Test)</inbound>
                <inbound type="feature" confirmed="yes">org.junit.internal.runners.MethodRoadie.runTestMethod()</inbound>
                <inbound type="feature" confirmed="yes">org.junit.internal.runners.TestMethod.isUnexpected(java.lang.Throwable)</inbound>
                <inbound type="feature" confirmed="yes">org.junit.internal.runners.statements.ExpectException.evaluate()</inbound>
                <inbound type="feature" confirmed="yes">org.junit.runners.model.MultipleFailureException.getMessage()</inbound>
            </feature>
            <feature confirmed="no">
                <name>java.lang.Object.notifyAll()</name>
                <inbound type="feature" confirmed="yes">junit.extensions.ActiveTestSuite.runFinished()</inbound>
            </feature>
            <feature confirmed="no">
                <name>java.lang.Object.toString()</name>
                <inbound type="feature" confirmed="yes">junit.extensions.TestDecorator.toString()</inbound>
                <inbound type="feature" confirmed="yes">junit.framework.TestSuite.toString()</inbound>
                <inbound type="feature" confirmed="yes">junit.runner.BaseTestRunner.endTest(junit.framework.Test)</inbound>
                <inbound type="feature" confirmed="yes">junit.runner.BaseTestRunner.startTest(junit.framework.Test)</inbound>
                <inbound type="feature" confirmed="yes">org.hamcrest.StringDescription.toString()</inbound>
                <inbound type="feature" confirmed="yes">org.hamcrest.StringDescription.toString(org.hamcrest.SelfDescribing)</inbound>
                <inbound type="feature" confirmed="yes">org.junit.Assert.assertThat(java.lang.String, java.lang.Object, org.hamcrest.Matcher)</inbound>
                <inbound type="feature" confirmed="yes">org.junit.experimental.results.ResultMatchers$2.matches(java.lang.Object)</inbound>
                <inbound type="feature" confirmed="yes">org.junit.experimental.results.ResultMatchers$3.matches(java.lang.Object)</inbound>
                <inbound type="feature" confirmed="yes">org.junit.experimental.theories.internal.ParameterizedAssertionError.equals(java.lang.Object)</inbound>
                <inbound type="feature" confirmed="yes">org.junit.experimental.theories.suppliers.TestedOnSupplier.getValueSources(org.junit.experimental.theories.ParameterSignature)</inbound>
                <inbound type="feature" confirmed="yes">org.junit.internal.requests.FilterRequest.getRunner()</inbound>
                <inbound type="feature" confirmed="yes">org.junit.internal.runners.JUnit38ClassRunner$OldTestClassAdaptingListener.getName(junit.framework.Test)</inbound>
            </feature>
            <feature confirmed="no">
                <name>java.lang.Object.wait()</name>
                <inbound type="feature" confirmed="yes">junit.extensions.ActiveTestSuite.waitUntilFinished()</inbound>
            </feature>
        </class>
        <class confirmed="no">
            <name>java.lang.Object[]</name>
            <inbound type="feature" confirmed="yes">junit.runner.BaseTestRunner.getTest(java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">org.hamcrest.core.DescribedAs.DescribedAs(java.lang.String, org.hamcrest.Matcher, java.lang.Object[])</inbound>
            <inbound type="feature" confirmed="yes">org.junit.runners.Parameterized$TestClassRunnerForParameters.computeParams()</inbound>
            <feature confirmed="no">
                <name>java.lang.Object[].clone()</name>
                <inbound type="feature" confirmed="yes">org.hamcrest.core.DescribedAs.DescribedAs(java.lang.String, org.hamcrest.Matcher, java.lang.Object[])</inbound>
            </feature>
        </class>
        <class confirmed="no">
            <name>java.lang.Runnable</name>
            <inbound type="feature" confirmed="yes">org.junit.experimental.ParallelComputer$1$1.ParallelComputer$1$1(org.junit.experimental.ParallelComputer$1, java.lang.Runnable)</inbound>
            <inbound type="feature" confirmed="yes">org.junit.experimental.ParallelComputer$1$1.call()</inbound>
            <inbound type="feature" confirmed="yes">org.junit.experimental.ParallelComputer$1$1.val$childStatement</inbound>
            <inbound type="feature" confirmed="yes">org.junit.experimental.ParallelComputer$1.schedule(java.lang.Runnable)</inbound>
            <inbound type="feature" confirmed="yes">org.junit.internal.runners.ClassRoadie.ClassRoadie(org.junit.runner.notification.RunNotifier, org.junit.internal.runners.TestClass, org.junit.runner.Description, java.lang.Runnable)</inbound>
            <inbound type="feature" confirmed="yes">org.junit.internal.runners.ClassRoadie.fRunnable</inbound>
            <inbound type="feature" confirmed="yes">org.junit.internal.runners.ClassRoadie.runUnprotected()</inbound>
            <inbound type="class" confirmed="yes">org.junit.internal.runners.JUnit4ClassRunner$1</inbound>
            <inbound type="feature" confirmed="yes">org.junit.internal.runners.JUnit4ClassRunner.run(org.junit.runner.notification.RunNotifier)</inbound>
            <inbound type="class" confirmed="yes">org.junit.internal.runners.MethodRoadie$1</inbound>
            <inbound type="class" confirmed="yes">org.junit.internal.runners.MethodRoadie$2</inbound>
            <inbound type="feature" confirmed="yes">org.junit.internal.runners.MethodRoadie.runBeforesThenTestThenAfters(java.lang.Runnable)</inbound>
            <inbound type="feature" confirmed="yes">org.junit.internal.runners.MethodRoadie.runTest()</inbound>
            <inbound type="feature" confirmed="yes">org.junit.internal.runners.MethodRoadie.runWithTimeout(long)</inbound>
            <inbound type="feature" confirmed="yes">org.junit.runners.ParentRunner$1.schedule(java.lang.Runnable)</inbound>
            <inbound type="class" confirmed="yes">org.junit.runners.ParentRunner$3</inbound>
            <inbound type="feature" confirmed="yes">org.junit.runners.ParentRunner.runChildren(org.junit.runner.notification.RunNotifier)</inbound>
            <inbound type="feature" confirmed="yes">org.junit.runners.model.RunnerScheduler.schedule(java.lang.Runnable)</inbound>
            <feature confirmed="no">
                <name>java.lang.Runnable.run()</name>
                <inbound type="feature" confirmed="yes">org.junit.experimental.ParallelComputer$1$1.call()</inbound>
                <inbound type="feature" confirmed="yes">org.junit.internal.runners.ClassRoadie.runUnprotected()</inbound>
                <inbound type="feature" confirmed="yes">org.junit.internal.runners.MethodRoadie.runBeforesThenTestThenAfters(java.lang.Runnable)</inbound>
                <inbound type="feature" confirmed="yes">org.junit.runners.ParentRunner$1.schedule(java.lang.Runnable)</inbound>
            </feature>
        </class>
        <class confirmed="no">
            <name>java.lang.RuntimeException</name>
            <inbound type="class" confirmed="yes">org.junit.experimental.theories.internal.ParameterizedAssertionError</inbound>
            <inbound type="class" confirmed="yes">org.junit.internal.AssumptionViolatedException</inbound>
            <inbound type="class" confirmed="yes">org.junit.runner.notification.StoppedByUserException</inbound>
            <feature confirmed="no">
                <name>java.lang.RuntimeException.RuntimeException()</name>
                <inbound type="feature" confirmed="yes">org.junit.runner.notification.StoppedByUserException.StoppedByUserException()</inbound>
            </feature>
            <feature confirmed="no">
                <name>java.lang.RuntimeException.RuntimeException(java.lang.String)</name>
                <inbound type="feature" confirmed="yes">junit.framework.JUnit4TestCaseFacade.run(junit.framework.TestResult)</inbound>
                <inbound type="feature" confirmed="yes">org.junit.experimental.max.MaxCore.buildRunner(org.junit.runner.Description)</inbound>
                <inbound type="feature" confirmed="yes">org.junit.experimental.results.FailureList.result()</inbound>
                <inbound type="feature" confirmed="yes">org.junit.experimental.theories.internal.AllMembersSupplier$MethodParameterValue.getValue()</inbound>
                <inbound type="feature" confirmed="yes">org.junit.experimental.theories.internal.AllMembersSupplier.getStaticFieldValue(java.lang.reflect.Field)</inbound>
                <inbound type="feature" confirmed="yes">org.junit.internal.runners.MethodRoadie.runBeforesThenTestThenAfters(java.lang.Runnable)</inbound>
                <inbound type="feature" confirmed="yes">org.junit.runner.Request.classes(org.junit.runner.Computer, java.lang.Class[])</inbound>
                <inbound type="feature" confirmed="yes">org.junit.runners.Suite.emptySuite()</inbound>
            </feature>
            <feature confirmed="no">
                <name>java.lang.RuntimeException.RuntimeException(java.lang.String, java.lang.Throwable)</name>
                <inbound type="feature" confirmed="yes">org.hamcrest.StringDescription.append(char)</inbound>
                <inbound type="feature" confirmed="yes">org.hamcrest.StringDescription.append(java.lang.String)</inbound>
                <inbound type="feature" confirmed="yes">org.junit.experimental.theories.internal.ParameterizedAssertionError.ParameterizedAssertionError(java.lang.Throwable, java.lang.String, java.lang.Object[])</inbound>
                <inbound type="feature" confirmed="yes">org.junit.runners.model.TestClass.getAnnotatedFieldValues(java.lang.Object, java.lang.Class, java.lang.Class)</inbound>
            </feature>
            <feature confirmed="no">
                <name>java.lang.RuntimeException.RuntimeException(java.lang.Throwable)</name>
                <inbound type="feature" confirmed="yes">org.junit.internal.AssumptionViolatedException.AssumptionViolatedException(java.lang.Object, org.hamcrest.Matcher)</inbound>
            </feature>
        </class>
        <class confirmed="no">
            <name>java.lang.SecurityException</name>
            <inbound type="feature" confirmed="yes">org.junit.internal.runners.TestClass.getConstructor()</inbound>
        </class>
        <class confirmed="no">
            <name>java.lang.Short</name>
            <inbound type="feature" confirmed="yes">org.hamcrest.BaseDescription.appendValue(java.lang.Object)</inbound>
            <feature confirmed="no">
                <name>java.lang.Short.Short(short)</name>
                <inbound type="feature" confirmed="yes">junit.framework.Assert.assertEquals(java.lang.String, short, short)</inbound>
            </feature>
        </class>
        <class confirmed="no">
            <name>java.lang.StackTraceElement</name>
            <inbound type="feature" confirmed="yes">org.junit.internal.runners.statements.FailOnTimeout.evaluate()</inbound>
        </class>
        <class confirmed="no">
            <name>java.lang.String</name>
            <inbound type="feature" confirmed="yes">junit.extensions.ActiveTestSuite.ActiveTestSuite(java.lang.Class, java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">junit.extensions.ActiveTestSuite.ActiveTestSuite(java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">junit.extensions.RepeatedTest.RepeatedTest(junit.framework.Test, int)</inbound>
            <inbound type="feature" confirmed="yes">junit.extensions.RepeatedTest.toString()</inbound>
            <inbound type="feature" confirmed="yes">junit.extensions.TestDecorator.toString()</inbound>
            <inbound type="feature" confirmed="yes">junit.framework.Assert.assertEquals(boolean, boolean)</inbound>
            <inbound type="feature" confirmed="yes">junit.framework.Assert.assertEquals(byte, byte)</inbound>
            <inbound type="feature" confirmed="yes">junit.framework.Assert.assertEquals(char, char)</inbound>
            <inbound type="feature" confirmed="yes">junit.framework.Assert.assertEquals(double, double, double)</inbound>
            <inbound type="feature" confirmed="yes">junit.framework.Assert.assertEquals(float, float, float)</inbound>
            <inbound type="feature" confirmed="yes">junit.framework.Assert.assertEquals(int, int)</inbound>
            <inbound type="feature" confirmed="yes">junit.framework.Assert.assertEquals(java.lang.Object, java.lang.Object)</inbound>
            <inbound type="feature" confirmed="yes">junit.framework.Assert.assertEquals(java.lang.String, boolean, boolean)</inbound>
            <inbound type="feature" confirmed="yes">junit.framework.Assert.assertEquals(java.lang.String, byte, byte)</inbound>
            <inbound type="feature" confirmed="yes">junit.framework.Assert.assertEquals(java.lang.String, char, char)</inbound>
            <inbound type="feature" confirmed="yes">junit.framework.Assert.assertEquals(java.lang.String, double, double, double)</inbound>
            <inbound type="feature" confirmed="yes">junit.framework.Assert.assertEquals(java.lang.String, float, float, float)</inbound>
            <inbound type="feature" confirmed="yes">junit.framework.Assert.assertEquals(java.lang.String, int, int)</inbound>
            <inbound type="feature" confirmed="yes">junit.framework.Assert.assertEquals(java.lang.String, java.lang.Object, java.lang.Object)</inbound>
            <inbound type="feature" confirmed="yes">junit.framework.Assert.assertEquals(java.lang.String, java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">junit.framework.Assert.assertEquals(java.lang.String, java.lang.String, java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">junit.framework.Assert.assertEquals(java.lang.String, long, long)</inbound>
            <inbound type="feature" confirmed="yes">junit.framework.Assert.assertEquals(java.lang.String, short, short)</inbound>
            <inbound type="feature" confirmed="yes">junit.framework.Assert.assertEquals(long, long)</inbound>
            <inbound type="feature" confirmed="yes">junit.framework.Assert.assertEquals(short, short)</inbound>
            <inbound type="feature" confirmed="yes">junit.framework.Assert.assertFalse(boolean)</inbound>
            <inbound type="feature" confirmed="yes">junit.framework.Assert.assertFalse(java.lang.String, boolean)</inbound>
            <inbound type="feature" confirmed="yes">junit.framework.Assert.assertNotNull(java.lang.Object)</inbound>
            <inbound type="feature" confirmed="yes">junit.framework.Assert.assertNotNull(java.lang.String, java.lang.Object)</inbound>
            <inbound type="feature" confirmed="yes">junit.framework.Assert.assertNotSame(java.lang.Object, java.lang.Object)</inbound>
            <inbound type="feature" confirmed="yes">junit.framework.Assert.assertNotSame(java.lang.String, java.lang.Object, java.lang.Object)</inbound>
            <inbound type="feature" confirmed="yes">junit.framework.Assert.assertNull(java.lang.Object)</inbound>
            <inbound type="feature" confirmed="yes">junit.framework.Assert.assertNull(java.lang.String, java.lang.Object)</inbound>
            <inbound type="feature" confirmed="yes">junit.framework.Assert.assertSame(java.lang.Object, java.lang.Object)</inbound>
            <inbound type="feature" confirmed="yes">junit.framework.Assert.assertSame(java.lang.String, java.lang.Object, java.lang.Object)</inbound>
            <inbound type="feature" confirmed="yes">junit.framework.Assert.assertTrue(boolean)</inbound>
            <inbound type="feature" confirmed="yes">junit.framework.Assert.assertTrue(java.lang.String, boolean)</inbound>
            <inbound type="feature" confirmed="yes">junit.framework.Assert.fail()</inbound>
            <inbound type="feature" confirmed="yes">junit.framework.Assert.fail(java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">junit.framework.Assert.failNotEquals(java.lang.String, java.lang.Object, java.lang.Object)</inbound>
            <inbound type="feature" confirmed="yes">junit.framework.Assert.failNotSame(java.lang.String, java.lang.Object, java.lang.Object)</inbound>
            <inbound type="feature" confirmed="yes">junit.framework.Assert.failSame(java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">junit.framework.Assert.format(java.lang.String, java.lang.Object, java.lang.Object)</inbound>
            <inbound type="feature" confirmed="yes">junit.framework.AssertionFailedError.AssertionFailedError(java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">junit.framework.ComparisonCompactor.ComparisonCompactor(int, java.lang.String, java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">junit.framework.ComparisonCompactor.DELTA_END</inbound>
            <inbound type="feature" confirmed="yes">junit.framework.ComparisonCompactor.DELTA_START</inbound>
            <inbound type="feature" confirmed="yes">junit.framework.ComparisonCompactor.ELLIPSIS</inbound>
            <inbound type="feature" confirmed="yes">junit.framework.ComparisonCompactor.areStringsEqual()</inbound>
            <inbound type="feature" confirmed="yes">junit.framework.ComparisonCompactor.compact(java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">junit.framework.ComparisonCompactor.compactString(java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">junit.framework.ComparisonCompactor.computeCommonPrefix()</inbound>
            <inbound type="feature" confirmed="yes">junit.framework.ComparisonCompactor.computeCommonSuffix()</inbound>
            <inbound type="feature" confirmed="yes">junit.framework.ComparisonCompactor.fActual</inbound>
            <inbound type="feature" confirmed="yes">junit.framework.ComparisonCompactor.fExpected</inbound>
            <inbound type="feature" confirmed="yes">junit.framework.ComparisonCompactor.findCommonPrefix()</inbound>
            <inbound type="feature" confirmed="yes">junit.framework.ComparisonCompactor.findCommonSuffix()</inbound>
            <inbound type="feature" confirmed="yes">junit.framework.ComparisonFailure.ComparisonFailure(java.lang.String, java.lang.String, java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">junit.framework.ComparisonFailure.fActual</inbound>
            <inbound type="feature" confirmed="yes">junit.framework.ComparisonFailure.fExpected</inbound>
            <inbound type="feature" confirmed="yes">junit.framework.ComparisonFailure.getActual()</inbound>
            <inbound type="feature" confirmed="yes">junit.framework.ComparisonFailure.getExpected()</inbound>
            <inbound type="feature" confirmed="yes">junit.framework.ComparisonFailure.getMessage()</inbound>
            <inbound type="feature" confirmed="yes">junit.framework.JUnit4TestAdapter.toString()</inbound>
            <inbound type="feature" confirmed="yes">junit.framework.JUnit4TestAdapterCache.createTest(org.junit.runner.Description)</inbound>
            <inbound type="feature" confirmed="yes">junit.framework.JUnit4TestCaseFacade.run(junit.framework.TestResult)</inbound>
            <inbound type="feature" confirmed="yes">junit.framework.JUnit4TestCaseFacade.toString()</inbound>
            <inbound type="feature" confirmed="yes">junit.framework.TestCase.TestCase()</inbound>
            <inbound type="feature" confirmed="yes">junit.framework.TestCase.TestCase(java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">junit.framework.TestCase.fName</inbound>
            <inbound type="feature" confirmed="yes">junit.framework.TestCase.getName()</inbound>
            <inbound type="feature" confirmed="yes">junit.framework.TestCase.runTest()</inbound>
            <inbound type="feature" confirmed="yes">junit.framework.TestCase.setName(java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">junit.framework.TestCase.toString()</inbound>
            <inbound type="feature" confirmed="yes">junit.framework.TestFailure.exceptionMessage()</inbound>
            <inbound type="feature" confirmed="yes">junit.framework.TestFailure.toString()</inbound>
            <inbound type="feature" confirmed="yes">junit.framework.TestFailure.trace()</inbound>
            <inbound type="feature" confirmed="yes">junit.framework.TestSuite$1.TestSuite$1(java.lang.String, java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">junit.framework.TestSuite$1.runTest()</inbound>
            <inbound type="feature" confirmed="yes">junit.framework.TestSuite$1.val$message</inbound>
            <inbound type="feature" confirmed="yes">junit.framework.TestSuite.TestSuite(java.lang.Class, java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">junit.framework.TestSuite.TestSuite(java.lang.Class[], java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">junit.framework.TestSuite.TestSuite(java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">junit.framework.TestSuite.addTestMethod(java.lang.reflect.Method, java.util.List, java.lang.Class)</inbound>
            <inbound type="feature" confirmed="yes">junit.framework.TestSuite.addTestsFromTestCase(java.lang.Class)</inbound>
            <inbound type="feature" confirmed="yes">junit.framework.TestSuite.createTest(java.lang.Class, java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">junit.framework.TestSuite.exceptionToString(java.lang.Throwable)</inbound>
            <inbound type="feature" confirmed="yes">junit.framework.TestSuite.fName</inbound>
            <inbound type="feature" confirmed="yes">junit.framework.TestSuite.getName()</inbound>
            <inbound type="feature" confirmed="yes">junit.framework.TestSuite.getTestConstructor(java.lang.Class)</inbound>
            <inbound type="feature" confirmed="yes">junit.framework.TestSuite.isTestMethod(java.lang.reflect.Method)</inbound>
            <inbound type="feature" confirmed="yes">junit.framework.TestSuite.setName(java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">junit.framework.TestSuite.testCaseForClass(java.lang.Class)</inbound>
            <inbound type="feature" confirmed="yes">junit.framework.TestSuite.toString()</inbound>
            <inbound type="feature" confirmed="yes">junit.framework.TestSuite.warning(java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">junit.runner.BaseTestRunner.SUITE_METHODNAME</inbound>
            <inbound type="feature" confirmed="yes">junit.runner.BaseTestRunner.elapsedTimeAsString(long)</inbound>
            <inbound type="feature" confirmed="yes">junit.runner.BaseTestRunner.endTest(junit.framework.Test)</inbound>
            <inbound type="feature" confirmed="yes">junit.runner.BaseTestRunner.extractClassName(java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">junit.runner.BaseTestRunner.filterLine(java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">junit.runner.BaseTestRunner.getFilteredTrace(java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">junit.runner.BaseTestRunner.getFilteredTrace(java.lang.Throwable)</inbound>
            <inbound type="feature" confirmed="yes">junit.runner.BaseTestRunner.getPreference(java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">junit.runner.BaseTestRunner.getPreference(java.lang.String, int)</inbound>
            <inbound type="feature" confirmed="yes">junit.runner.BaseTestRunner.getPreferencesFile()</inbound>
            <inbound type="feature" confirmed="yes">junit.runner.BaseTestRunner.getTest(java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">junit.runner.BaseTestRunner.loadSuiteClass(java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">junit.runner.BaseTestRunner.processArguments(java.lang.String[])</inbound>
            <inbound type="feature" confirmed="yes">junit.runner.BaseTestRunner.runFailed(java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">junit.runner.BaseTestRunner.savePreferences()</inbound>
            <inbound type="feature" confirmed="yes">junit.runner.BaseTestRunner.setPreference(java.lang.String, java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">junit.runner.BaseTestRunner.showStackRaw()</inbound>
            <inbound type="feature" confirmed="yes">junit.runner.BaseTestRunner.startTest(junit.framework.Test)</inbound>
            <inbound type="feature" confirmed="yes">junit.runner.BaseTestRunner.static {}</inbound>
            <inbound type="feature" confirmed="yes">junit.runner.BaseTestRunner.testEnded(java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">junit.runner.BaseTestRunner.testStarted(java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">junit.runner.BaseTestRunner.truncate(java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">junit.runner.BaseTestRunner.useReloadingTestSuiteLoader()</inbound>
            <inbound type="feature" confirmed="yes">junit.runner.TestRunListener.testEnded(java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">junit.runner.TestRunListener.testFailed(int, java.lang.String, java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">junit.runner.TestRunListener.testRunStarted(java.lang.String, int)</inbound>
            <inbound type="feature" confirmed="yes">junit.runner.TestRunListener.testStarted(java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">junit.runner.Version.id()</inbound>
            <inbound type="feature" confirmed="yes">junit.runner.Version.main(java.lang.String[])</inbound>
            <inbound type="feature" confirmed="yes">junit.textui.ResultPrinter.addError(junit.framework.Test, java.lang.Throwable)</inbound>
            <inbound type="feature" confirmed="yes">junit.textui.ResultPrinter.addFailure(junit.framework.Test, junit.framework.AssertionFailedError)</inbound>
            <inbound type="feature" confirmed="yes">junit.textui.ResultPrinter.elapsedTimeAsString(long)</inbound>
            <inbound type="feature" confirmed="yes">junit.textui.ResultPrinter.printDefectHeader(junit.framework.TestFailure, int)</inbound>
            <inbound type="feature" confirmed="yes">junit.textui.ResultPrinter.printDefectTrace(junit.framework.TestFailure)</inbound>
            <inbound type="feature" confirmed="yes">junit.textui.ResultPrinter.printDefects(java.util.Enumeration, int, java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">junit.textui.ResultPrinter.printErrors(junit.framework.TestResult)</inbound>
            <inbound type="feature" confirmed="yes">junit.textui.ResultPrinter.printFailures(junit.framework.TestResult)</inbound>
            <inbound type="feature" confirmed="yes">junit.textui.ResultPrinter.printFooter(junit.framework.TestResult)</inbound>
            <inbound type="feature" confirmed="yes">junit.textui.ResultPrinter.printHeader(long)</inbound>
            <inbound type="feature" confirmed="yes">junit.textui.ResultPrinter.printWaitPrompt()</inbound>
            <inbound type="feature" confirmed="yes">junit.textui.ResultPrinter.startTest(junit.framework.Test)</inbound>
            <inbound type="feature" confirmed="yes">junit.textui.TestRunner.main(java.lang.String[])</inbound>
            <inbound type="feature" confirmed="yes">junit.textui.TestRunner.runFailed(java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">junit.textui.TestRunner.runSingleMethod(java.lang.String, java.lang.String, boolean)</inbound>
            <inbound type="feature" confirmed="yes">junit.textui.TestRunner.start(java.lang.String[])</inbound>
            <inbound type="feature" confirmed="yes">junit.textui.TestRunner.testEnded(java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">junit.textui.TestRunner.testStarted(java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">org.hamcrest.BaseDescription.append(java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">org.hamcrest.BaseDescription.appendList(java.lang.String, java.lang.String, java.lang.String, java.lang.Iterable)</inbound>
            <inbound type="feature" confirmed="yes">org.hamcrest.BaseDescription.appendList(java.lang.String, java.lang.String, java.lang.String, java.util.Iterator)</inbound>
            <inbound type="feature" confirmed="yes">org.hamcrest.BaseDescription.appendText(java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">org.hamcrest.BaseDescription.appendValue(java.lang.Object)</inbound>
            <inbound type="feature" confirmed="yes">org.hamcrest.BaseDescription.appendValueList(java.lang.String, java.lang.String, java.lang.String, java.lang.Iterable)</inbound>
            <inbound type="feature" confirmed="yes">org.hamcrest.BaseDescription.appendValueList(java.lang.String, java.lang.String, java.lang.String, java.lang.Object[])</inbound>
            <inbound type="feature" confirmed="yes">org.hamcrest.BaseDescription.appendValueList(java.lang.String, java.lang.String, java.lang.String, java.util.Iterator)</inbound>
            <inbound type="feature" confirmed="yes">org.hamcrest.BaseDescription.toJavaSyntax(char)</inbound>
            <inbound type="feature" confirmed="yes">org.hamcrest.BaseDescription.toJavaSyntax(java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">org.hamcrest.BaseMatcher.toString()</inbound>
            <inbound type="feature" confirmed="yes">org.hamcrest.CoreMatchers.anything(java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">org.hamcrest.CoreMatchers.describedAs(java.lang.String, org.hamcrest.Matcher, java.lang.Object[])</inbound>
            <inbound type="feature" confirmed="yes">org.hamcrest.Description.appendList(java.lang.String, java.lang.String, java.lang.String, java.lang.Iterable)</inbound>
            <inbound type="feature" confirmed="yes">org.hamcrest.Description.appendText(java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">org.hamcrest.Description.appendValueList(java.lang.String, java.lang.String, java.lang.String, java.lang.Iterable)</inbound>
            <inbound type="feature" confirmed="yes">org.hamcrest.Description.appendValueList(java.lang.String, java.lang.String, java.lang.String, java.lang.Object[])</inbound>
            <inbound type="feature" confirmed="yes">org.hamcrest.StringDescription.append(char)</inbound>
            <inbound type="feature" confirmed="yes">org.hamcrest.StringDescription.append(java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">org.hamcrest.StringDescription.asString(org.hamcrest.SelfDescribing)</inbound>
            <inbound type="feature" confirmed="yes">org.hamcrest.StringDescription.toString()</inbound>
            <inbound type="feature" confirmed="yes">org.hamcrest.StringDescription.toString(org.hamcrest.SelfDescribing)</inbound>
            <inbound type="feature" confirmed="yes">org.hamcrest.core.AllOf.describeTo(org.hamcrest.Description)</inbound>
            <inbound type="feature" confirmed="yes">org.hamcrest.core.AnyOf.describeTo(org.hamcrest.Description)</inbound>
            <inbound type="feature" confirmed="yes">org.hamcrest.core.DescribedAs.DescribedAs(java.lang.String, org.hamcrest.Matcher, java.lang.Object[])</inbound>
            <inbound type="feature" confirmed="yes">org.hamcrest.core.DescribedAs.describeTo(org.hamcrest.Description)</inbound>
            <inbound type="feature" confirmed="yes">org.hamcrest.core.DescribedAs.describedAs(java.lang.String, org.hamcrest.Matcher, java.lang.Object[])</inbound>
            <inbound type="feature" confirmed="yes">org.hamcrest.core.DescribedAs.descriptionTemplate</inbound>
            <inbound type="feature" confirmed="yes">org.hamcrest.core.DescribedAs.static {}</inbound>
            <inbound type="feature" confirmed="yes">org.hamcrest.core.Is.describeTo(org.hamcrest.Description)</inbound>
            <inbound type="feature" confirmed="yes">org.hamcrest.core.IsAnything.IsAnything()</inbound>
            <inbound type="feature" confirmed="yes">org.hamcrest.core.IsAnything.IsAnything(java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">org.hamcrest.core.IsAnything.anything(java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">org.hamcrest.core.IsAnything.describeTo(org.hamcrest.Description)</inbound>
            <inbound type="feature" confirmed="yes">org.hamcrest.core.IsAnything.description</inbound>
            <inbound type="feature" confirmed="yes">org.hamcrest.core.IsInstanceOf.describeTo(org.hamcrest.Description)</inbound>
            <inbound type="feature" confirmed="yes">org.hamcrest.core.IsNot.describeTo(org.hamcrest.Description)</inbound>
            <inbound type="feature" confirmed="yes">org.hamcrest.core.IsNull.describeTo(org.hamcrest.Description)</inbound>
            <inbound type="feature" confirmed="yes">org.hamcrest.core.IsSame.describeTo(org.hamcrest.Description)</inbound>
            <inbound type="feature" confirmed="yes">org.hamcrest.internal.ArrayIterator.ArrayIterator(java.lang.Object)</inbound>
            <inbound type="feature" confirmed="yes">org.hamcrest.internal.ArrayIterator.remove()</inbound>
            <inbound type="feature" confirmed="yes">org.junit.Assert.assertArrayEquals(byte[], byte[])</inbound>
            <inbound type="feature" confirmed="yes">org.junit.Assert.assertArrayEquals(char[], char[])</inbound>
            <inbound type="feature" confirmed="yes">org.junit.Assert.assertArrayEquals(double[], double[], double)</inbound>
            <inbound type="feature" confirmed="yes">org.junit.Assert.assertArrayEquals(float[], float[], float)</inbound>
            <inbound type="feature" confirmed="yes">org.junit.Assert.assertArrayEquals(int[], int[])</inbound>
            <inbound type="feature" confirmed="yes">org.junit.Assert.assertArrayEquals(java.lang.Object[], java.lang.Object[])</inbound>
            <inbound type="feature" confirmed="yes">org.junit.Assert.assertArrayEquals(java.lang.String, byte[], byte[])</inbound>
            <inbound type="feature" confirmed="yes">org.junit.Assert.assertArrayEquals(java.lang.String, char[], char[])</inbound>
            <inbound type="feature" confirmed="yes">org.junit.Assert.assertArrayEquals(java.lang.String, double[], double[], double)</inbound>
            <inbound type="feature" confirmed="yes">org.junit.Assert.assertArrayEquals(java.lang.String, float[], float[], float)</inbound>
            <inbound type="feature" confirmed="yes">org.junit.Assert.assertArrayEquals(java.lang.String, int[], int[])</inbound>
            <inbound type="feature" confirmed="yes">org.junit.Assert.assertArrayEquals(java.lang.String, java.lang.Object[], java.lang.Object[])</inbound>
            <inbound type="feature" confirmed="yes">org.junit.Assert.assertArrayEquals(java.lang.String, long[], long[])</inbound>
            <inbound type="feature" confirmed="yes">org.junit.Assert.assertArrayEquals(java.lang.String, short[], short[])</inbound>
            <inbound type="feature" confirmed="yes">org.junit.Assert.assertArrayEquals(long[], long[])</inbound>
            <inbound type="feature" confirmed="yes">org.junit.Assert.assertArrayEquals(short[], short[])</inbound>
            <inbound type="feature" confirmed="yes">org.junit.Assert.assertEquals(double, double)</inbound>
            <inbound type="feature" confirmed="yes">org.junit.Assert.assertEquals(double, double, double)</inbound>
            <inbound type="feature" confirmed="yes">org.junit.Assert.assertEquals(java.lang.Object, java.lang.Object)</inbound>
            <inbound type="feature" confirmed="yes">org.junit.Assert.assertEquals(java.lang.String, double, double)</inbound>
            <inbound type="feature" confirmed="yes">org.junit.Assert.assertEquals(java.lang.String, double, double, double)</inbound>
            <inbound type="feature" confirmed="yes">org.junit.Assert.assertEquals(java.lang.String, java.lang.Object, java.lang.Object)</inbound>
            <inbound type="feature" confirmed="yes">org.junit.Assert.assertEquals(java.lang.String, java.lang.Object[], java.lang.Object[])</inbound>
            <inbound type="feature" confirmed="yes">org.junit.Assert.assertEquals(java.lang.String, long, long)</inbound>
            <inbound type="feature" confirmed="yes">org.junit.Assert.assertEquals(long, long)</inbound>
            <inbound type="feature" confirmed="yes">org.junit.Assert.assertFalse(boolean)</inbound>
            <inbound type="feature" confirmed="yes">org.junit.Assert.assertFalse(java.lang.String, boolean)</inbound>
            <inbound type="feature" confirmed="yes">org.junit.Assert.assertNotNull(java.lang.Object)</inbound>
            <inbound type="feature" confirmed="yes">org.junit.Assert.assertNotNull(java.lang.String, java.lang.Object)</inbound>
            <inbound type="feature" confirmed="yes">org.junit.Assert.assertNotSame(java.lang.Object, java.lang.Object)</inbound>
            <inbound type="feature" confirmed="yes">org.junit.Assert.assertNotSame(java.lang.String, java.lang.Object, java.lang.Object)</inbound>
            <inbound type="feature" confirmed="yes">org.junit.Assert.assertNull(java.lang.Object)</inbound>
            <inbound type="feature" confirmed="yes">org.junit.Assert.assertNull(java.lang.String, java.lang.Object)</inbound>
            <inbound type="feature" confirmed="yes">org.junit.Assert.assertSame(java.lang.Object, java.lang.Object)</inbound>
            <inbound type="feature" confirmed="yes">org.junit.Assert.assertSame(java.lang.String, java.lang.Object, java.lang.Object)</inbound>
            <inbound type="feature" confirmed="yes">org.junit.Assert.assertThat(java.lang.Object, org.hamcrest.Matcher)</inbound>
            <inbound type="feature" confirmed="yes">org.junit.Assert.assertThat(java.lang.String, java.lang.Object, org.hamcrest.Matcher)</inbound>
            <inbound type="feature" confirmed="yes">org.junit.Assert.assertTrue(boolean)</inbound>
            <inbound type="feature" confirmed="yes">org.junit.Assert.assertTrue(java.lang.String, boolean)</inbound>
            <inbound type="feature" confirmed="yes">org.junit.Assert.fail()</inbound>
            <inbound type="feature" confirmed="yes">org.junit.Assert.fail(java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">org.junit.Assert.failNotEquals(java.lang.String, java.lang.Object, java.lang.Object)</inbound>
            <inbound type="feature" confirmed="yes">org.junit.Assert.failNotSame(java.lang.String, java.lang.Object, java.lang.Object)</inbound>
            <inbound type="feature" confirmed="yes">org.junit.Assert.failSame(java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">org.junit.Assert.format(java.lang.String, java.lang.Object, java.lang.Object)</inbound>
            <inbound type="feature" confirmed="yes">org.junit.Assert.formatClassAndValue(java.lang.Object, java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">org.junit.Assert.internalArrayEquals(java.lang.String, java.lang.Object, java.lang.Object)</inbound>
            <inbound type="feature" confirmed="yes">org.junit.ComparisonFailure$ComparisonCompactor.ComparisonFailure$ComparisonCompactor(int, java.lang.String, java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">org.junit.ComparisonFailure$ComparisonCompactor.DELTA_END</inbound>
            <inbound type="feature" confirmed="yes">org.junit.ComparisonFailure$ComparisonCompactor.DELTA_START</inbound>
            <inbound type="feature" confirmed="yes">org.junit.ComparisonFailure$ComparisonCompactor.ELLIPSIS</inbound>
            <inbound type="feature" confirmed="yes">org.junit.ComparisonFailure$ComparisonCompactor.access$000(org.junit.ComparisonFailure$ComparisonCompactor, java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">org.junit.ComparisonFailure$ComparisonCompactor.areStringsEqual()</inbound>
            <inbound type="feature" confirmed="yes">org.junit.ComparisonFailure$ComparisonCompactor.compact(java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">org.junit.ComparisonFailure$ComparisonCompactor.compactString(java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">org.junit.ComparisonFailure$ComparisonCompactor.computeCommonPrefix()</inbound>
            <inbound type="feature" confirmed="yes">org.junit.ComparisonFailure$ComparisonCompactor.computeCommonSuffix()</inbound>
            <inbound type="feature" confirmed="yes">org.junit.ComparisonFailure$ComparisonCompactor.fActual</inbound>
            <inbound type="feature" confirmed="yes">org.junit.ComparisonFailure$ComparisonCompactor.fExpected</inbound>
            <inbound type="feature" confirmed="yes">org.junit.ComparisonFailure$ComparisonCompactor.findCommonPrefix()</inbound>
            <inbound type="feature" confirmed="yes">org.junit.ComparisonFailure$ComparisonCompactor.findCommonSuffix()</inbound>
            <inbound type="feature" confirmed="yes">org.junit.ComparisonFailure.ComparisonFailure(java.lang.String, java.lang.String, java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">org.junit.ComparisonFailure.fActual</inbound>
            <inbound type="feature" confirmed="yes">org.junit.ComparisonFailure.fExpected</inbound>
            <inbound type="feature" confirmed="yes">org.junit.ComparisonFailure.getActual()</inbound>
            <inbound type="feature" confirmed="yes">org.junit.ComparisonFailure.getExpected()</inbound>
            <inbound type="feature" confirmed="yes">org.junit.ComparisonFailure.getMessage()</inbound>
            <inbound type="feature" confirmed="yes">org.junit.Ignore.value()</inbound>
            <inbound type="feature" confirmed="yes">org.junit.experimental.categories.Categories$CategoryFilter.describe()</inbound>
            <inbound type="feature" confirmed="yes">org.junit.experimental.categories.Categories.assertNoDescendantsHaveCategoryAnnotations(org.junit.runner.Description)</inbound>
            <inbound type="feature" confirmed="yes">org.junit.experimental.max.MaxCore.MALFORMED_JUNIT_3_TEST_CLASS_PREFIX</inbound>
            <inbound type="feature" confirmed="yes">org.junit.experimental.max.MaxCore.buildRunner(org.junit.runner.Description)</inbound>
            <inbound type="feature" confirmed="yes">org.junit.experimental.max.MaxCore.findLeaves(org.junit.runner.Description, org.junit.runner.Description, java.util.List)</inbound>
            <inbound type="feature" confirmed="yes">org.junit.experimental.max.MaxCore.forFolder(java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">org.junit.experimental.max.MaxCore.getMalformedTestClass(org.junit.runner.Description)</inbound>
            <inbound type="feature" confirmed="yes">org.junit.experimental.max.MaxHistory.getFailureTimestamp(org.junit.runner.Description)</inbound>
            <inbound type="feature" confirmed="yes">org.junit.experimental.max.MaxHistory.getTestDuration(org.junit.runner.Description)</inbound>
            <inbound type="feature" confirmed="yes">org.junit.experimental.max.MaxHistory.isNewTest(org.junit.runner.Description)</inbound>
            <inbound type="feature" confirmed="yes">org.junit.experimental.max.MaxHistory.putTestDuration(org.junit.runner.Description, long)</inbound>
            <inbound type="feature" confirmed="yes">org.junit.experimental.max.MaxHistory.putTestFailureTimestamp(org.junit.runner.Description, long)</inbound>
            <inbound type="feature" confirmed="yes">org.junit.experimental.results.FailureList.result()</inbound>
            <inbound type="feature" confirmed="yes">org.junit.experimental.results.PrintableResult.toString()</inbound>
            <inbound type="feature" confirmed="yes">org.junit.experimental.results.ResultMatchers$1.describeTo(org.hamcrest.Description)</inbound>
            <inbound type="feature" confirmed="yes">org.junit.experimental.results.ResultMatchers$2.ResultMatchers$2(java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">org.junit.experimental.results.ResultMatchers$2.describeTo(org.hamcrest.Description)</inbound>
            <inbound type="feature" confirmed="yes">org.junit.experimental.results.ResultMatchers$2.matches(java.lang.Object)</inbound>
            <inbound type="feature" confirmed="yes">org.junit.experimental.results.ResultMatchers$2.val$string</inbound>
            <inbound type="feature" confirmed="yes">org.junit.experimental.results.ResultMatchers$3.ResultMatchers$3(java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">org.junit.experimental.results.ResultMatchers$3.describeTo(org.hamcrest.Description)</inbound>
            <inbound type="feature" confirmed="yes">org.junit.experimental.results.ResultMatchers$3.matches(java.lang.Object)</inbound>
            <inbound type="feature" confirmed="yes">org.junit.experimental.results.ResultMatchers$3.val$string</inbound>
            <inbound type="feature" confirmed="yes">org.junit.experimental.results.ResultMatchers.hasFailureContaining(java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">org.junit.experimental.results.ResultMatchers.hasSingleFailureContaining(java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">org.junit.experimental.theories.PotentialAssignment$1.PotentialAssignment$1(java.lang.Object, java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">org.junit.experimental.theories.PotentialAssignment$1.getDescription()</inbound>
            <inbound type="feature" confirmed="yes">org.junit.experimental.theories.PotentialAssignment$1.toString()</inbound>
            <inbound type="feature" confirmed="yes">org.junit.experimental.theories.PotentialAssignment$1.val$name</inbound>
            <inbound type="feature" confirmed="yes">org.junit.experimental.theories.PotentialAssignment.forValue(java.lang.String, java.lang.Object)</inbound>
            <inbound type="feature" confirmed="yes">org.junit.experimental.theories.PotentialAssignment.getDescription()</inbound>
            <inbound type="feature" confirmed="yes">org.junit.experimental.theories.Theories$TheoryAnchor.evaluate()</inbound>
            <inbound type="feature" confirmed="yes">org.junit.experimental.theories.Theories$TheoryAnchor.reportParameterizedError(java.lang.Throwable, java.lang.Object[])</inbound>
            <inbound type="feature" confirmed="yes">org.junit.experimental.theories.Theories.validateDataPointFields(java.util.List)</inbound>
            <inbound type="feature" confirmed="yes">org.junit.experimental.theories.internal.AllMembersSupplier$MethodParameterValue.getDescription()</inbound>
            <inbound type="feature" confirmed="yes">org.junit.experimental.theories.internal.AllMembersSupplier$MethodParameterValue.getValue()</inbound>
            <inbound type="feature" confirmed="yes">org.junit.experimental.theories.internal.AllMembersSupplier.addArrayValues(java.lang.String, java.util.List, java.lang.Object)</inbound>
            <inbound type="feature" confirmed="yes">org.junit.experimental.theories.internal.AllMembersSupplier.addFields(org.junit.experimental.theories.ParameterSignature, java.util.List)</inbound>
            <inbound type="feature" confirmed="yes">org.junit.experimental.theories.internal.AllMembersSupplier.addMultiPointMethods(java.util.List)</inbound>
            <inbound type="feature" confirmed="yes">org.junit.experimental.theories.internal.AllMembersSupplier.getStaticFieldValue(java.lang.reflect.Field)</inbound>
            <inbound type="feature" confirmed="yes">org.junit.experimental.theories.internal.Assignments.getArgumentStrings(boolean)</inbound>
            <inbound type="feature" confirmed="yes">org.junit.experimental.theories.internal.ParameterizedAssertionError.ParameterizedAssertionError(java.lang.Throwable, java.lang.String, java.lang.Object[])</inbound>
            <inbound type="feature" confirmed="yes">org.junit.experimental.theories.internal.ParameterizedAssertionError.equals(java.lang.Object)</inbound>
            <inbound type="feature" confirmed="yes">org.junit.experimental.theories.internal.ParameterizedAssertionError.join(java.lang.String, java.lang.Object[])</inbound>
            <inbound type="feature" confirmed="yes">org.junit.experimental.theories.internal.ParameterizedAssertionError.join(java.lang.String, java.util.Collection)</inbound>
            <inbound type="feature" confirmed="yes">org.junit.experimental.theories.internal.ParameterizedAssertionError.stringValueOf(java.lang.Object)</inbound>
            <inbound type="feature" confirmed="yes">org.junit.experimental.theories.suppliers.TestedOnSupplier.getValueSources(org.junit.experimental.theories.ParameterSignature)</inbound>
            <inbound type="feature" confirmed="yes">org.junit.internal.ArrayComparisonFailure.ArrayComparisonFailure(java.lang.String, java.lang.AssertionError, int)</inbound>
            <inbound type="feature" confirmed="yes">org.junit.internal.ArrayComparisonFailure.fMessage</inbound>
            <inbound type="feature" confirmed="yes">org.junit.internal.ArrayComparisonFailure.getMessage()</inbound>
            <inbound type="feature" confirmed="yes">org.junit.internal.ArrayComparisonFailure.toString()</inbound>
            <inbound type="feature" confirmed="yes">org.junit.internal.AssumptionViolatedException.AssumptionViolatedException(java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">org.junit.internal.AssumptionViolatedException.describeTo(org.hamcrest.Description)</inbound>
            <inbound type="feature" confirmed="yes">org.junit.internal.AssumptionViolatedException.getMessage()</inbound>
            <inbound type="feature" confirmed="yes">org.junit.internal.ComparisonCriteria.arrayEquals(java.lang.String, java.lang.Object, java.lang.Object)</inbound>
            <inbound type="feature" confirmed="yes">org.junit.internal.ComparisonCriteria.assertArraysAreSameLength(java.lang.Object, java.lang.Object, java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">org.junit.internal.TextListener.elapsedTimeAsString(long)</inbound>
            <inbound type="feature" confirmed="yes">org.junit.internal.TextListener.printFailure(org.junit.runner.notification.Failure, java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">org.junit.internal.TextListener.printFailures(org.junit.runner.Result)</inbound>
            <inbound type="feature" confirmed="yes">org.junit.internal.TextListener.printFooter(org.junit.runner.Result)</inbound>
            <inbound type="feature" confirmed="yes">org.junit.internal.TextListener.printHeader(long)</inbound>
            <inbound type="feature" confirmed="yes">org.junit.internal.builders.AnnotatedBuilder.CONSTRUCTOR_ERROR_FORMAT</inbound>
            <inbound type="feature" confirmed="yes">org.junit.internal.builders.AnnotatedBuilder.buildRunner(java.lang.Class, java.lang.Class)</inbound>
            <inbound type="feature" confirmed="yes">org.junit.internal.builders.SuiteMethodBuilder.hasSuiteMethod(java.lang.Class)</inbound>
            <inbound type="feature" confirmed="yes">org.junit.internal.matchers.Each$1.describeTo(org.hamcrest.Description)</inbound>
            <inbound type="feature" confirmed="yes">org.junit.internal.matchers.IsCollectionContaining.describeTo(org.hamcrest.Description)</inbound>
            <inbound type="feature" confirmed="yes">org.junit.internal.matchers.StringContains.StringContains(java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">org.junit.internal.matchers.StringContains.containsString(java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">org.junit.internal.matchers.StringContains.evalSubstringOf(java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">org.junit.internal.matchers.StringContains.relationship()</inbound>
            <inbound type="feature" confirmed="yes">org.junit.internal.matchers.SubstringMatcher.SubstringMatcher(java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">org.junit.internal.matchers.SubstringMatcher.describeTo(org.hamcrest.Description)</inbound>
            <inbound type="feature" confirmed="yes">org.junit.internal.matchers.SubstringMatcher.evalSubstringOf(java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">org.junit.internal.matchers.SubstringMatcher.matchesSafely(java.lang.Object)</inbound>
            <inbound type="feature" confirmed="yes">org.junit.internal.matchers.SubstringMatcher.matchesSafely(java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">org.junit.internal.matchers.SubstringMatcher.relationship()</inbound>
            <inbound type="feature" confirmed="yes">org.junit.internal.matchers.SubstringMatcher.substring</inbound>
            <inbound type="feature" confirmed="yes">org.junit.internal.matchers.TypeSafeMatcher.findExpectedType(java.lang.Class)</inbound>
            <inbound type="feature" confirmed="yes">org.junit.internal.matchers.TypeSafeMatcher.isMatchesSafelyMethod(java.lang.reflect.Method)</inbound>
            <inbound type="feature" confirmed="yes">org.junit.internal.requests.FilterRequest.getRunner()</inbound>
            <inbound type="feature" confirmed="yes">org.junit.internal.runners.ErrorReportingRunner.describeCause(java.lang.Throwable)</inbound>
            <inbound type="feature" confirmed="yes">org.junit.internal.runners.InitializationError.InitializationError(java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">org.junit.internal.runners.JUnit38ClassRunner$OldTestClassAdaptingListener.asDescription(junit.framework.Test)</inbound>
            <inbound type="feature" confirmed="yes">org.junit.internal.runners.JUnit38ClassRunner$OldTestClassAdaptingListener.getName(junit.framework.Test)</inbound>
            <inbound type="feature" confirmed="yes">org.junit.internal.runners.JUnit38ClassRunner.createSuiteDescription(junit.framework.TestSuite)</inbound>
            <inbound type="feature" confirmed="yes">org.junit.internal.runners.JUnit38ClassRunner.filter(org.junit.runner.manipulation.Filter)</inbound>
            <inbound type="feature" confirmed="yes">org.junit.internal.runners.JUnit38ClassRunner.makeDescription(junit.framework.Test)</inbound>
            <inbound type="feature" confirmed="yes">org.junit.internal.runners.JUnit4ClassRunner.getDescription()</inbound>
            <inbound type="feature" confirmed="yes">org.junit.internal.runners.JUnit4ClassRunner.getName()</inbound>
            <inbound type="feature" confirmed="yes">org.junit.internal.runners.JUnit4ClassRunner.methodDescription(java.lang.reflect.Method)</inbound>
            <inbound type="feature" confirmed="yes">org.junit.internal.runners.JUnit4ClassRunner.testName(java.lang.reflect.Method)</inbound>
            <inbound type="feature" confirmed="yes">org.junit.internal.runners.MethodRoadie$1.run()</inbound>
            <inbound type="feature" confirmed="yes">org.junit.internal.runners.MethodRoadie.runBeforesThenTestThenAfters(java.lang.Runnable)</inbound>
            <inbound type="feature" confirmed="yes">org.junit.internal.runners.MethodRoadie.runTestMethod()</inbound>
            <inbound type="feature" confirmed="yes">org.junit.internal.runners.MethodValidator.validateInstanceMethods()</inbound>
            <inbound type="feature" confirmed="yes">org.junit.internal.runners.MethodValidator.validateNoArgConstructor()</inbound>
            <inbound type="feature" confirmed="yes">org.junit.internal.runners.MethodValidator.validateTestMethods(java.lang.Class, boolean)</inbound>
            <inbound type="feature" confirmed="yes">org.junit.internal.runners.SuiteMethod.testFromSuiteMethod(java.lang.Class)</inbound>
            <inbound type="feature" confirmed="yes">org.junit.internal.runners.TestClass.getName()</inbound>
            <inbound type="feature" confirmed="yes">org.junit.internal.runners.TestClass.isShadowed(java.lang.reflect.Method, java.lang.reflect.Method)</inbound>
            <inbound type="feature" confirmed="yes">org.junit.internal.runners.rules.RuleFieldValidator.RuleFieldValidator(java.lang.String, int, java.lang.Class, boolean)</inbound>
            <inbound type="feature" confirmed="yes">org.junit.internal.runners.rules.RuleFieldValidator.addError(java.util.List, org.junit.runners.model.FrameworkField, java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">org.junit.internal.runners.rules.RuleFieldValidator.optionallyValidateStatic(org.junit.runners.model.FrameworkField, java.util.List)</inbound>
            <inbound type="feature" confirmed="yes">org.junit.internal.runners.rules.RuleFieldValidator.static {}</inbound>
            <inbound type="feature" confirmed="yes">org.junit.internal.runners.rules.RuleFieldValidator.validatePublic(org.junit.runners.model.FrameworkField, java.util.List)</inbound>
            <inbound type="feature" confirmed="yes">org.junit.internal.runners.rules.RuleFieldValidator.validateTestRuleOrMethodRule(org.junit.runners.model.FrameworkField, java.util.List)</inbound>
            <inbound type="feature" confirmed="yes">org.junit.internal.runners.rules.RuleFieldValidator.valueOf(java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">org.junit.internal.runners.statements.ExpectException.evaluate()</inbound>
            <inbound type="feature" confirmed="yes">org.junit.internal.runners.statements.FailOnTimeout.evaluate()</inbound>
            <inbound type="feature" confirmed="yes">org.junit.matchers.JUnitMatchers.containsString(java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">org.junit.rules.ExpectedException$1.describeTo(org.hamcrest.Description)</inbound>
            <inbound type="feature" confirmed="yes">org.junit.rules.ExpectedException$1.matchesSafely(java.lang.Throwable)</inbound>
            <inbound type="feature" confirmed="yes">org.junit.rules.ExpectedException$ExpectedExceptionStatement.evaluate()</inbound>
            <inbound type="feature" confirmed="yes">org.junit.rules.ExpectedException.expectMessage(java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">org.junit.rules.TemporaryFolder.create()</inbound>
            <inbound type="feature" confirmed="yes">org.junit.rules.TemporaryFolder.newFile(java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">org.junit.rules.TemporaryFolder.newFolder(java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">org.junit.rules.TestName.fName</inbound>
            <inbound type="feature" confirmed="yes">org.junit.rules.TestName.getMethodName()</inbound>
            <inbound type="feature" confirmed="yes">org.junit.rules.TestName.starting(org.junit.runner.Description)</inbound>
            <inbound type="feature" confirmed="yes">org.junit.runner.Description.Description(java.lang.String, java.lang.annotation.Annotation[])</inbound>
            <inbound type="feature" confirmed="yes">org.junit.runner.Description.childlessCopy()</inbound>
            <inbound type="feature" confirmed="yes">org.junit.runner.Description.createSuiteDescription(java.lang.Class)</inbound>
            <inbound type="feature" confirmed="yes">org.junit.runner.Description.createSuiteDescription(java.lang.String, java.lang.annotation.Annotation[])</inbound>
            <inbound type="feature" confirmed="yes">org.junit.runner.Description.createTestDescription(java.lang.Class, java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">org.junit.runner.Description.createTestDescription(java.lang.Class, java.lang.String, java.lang.annotation.Annotation[])</inbound>
            <inbound type="feature" confirmed="yes">org.junit.runner.Description.equals(java.lang.Object)</inbound>
            <inbound type="feature" confirmed="yes">org.junit.runner.Description.fDisplayName</inbound>
            <inbound type="feature" confirmed="yes">org.junit.runner.Description.getClassName()</inbound>
            <inbound type="feature" confirmed="yes">org.junit.runner.Description.getDisplayName()</inbound>
            <inbound type="feature" confirmed="yes">org.junit.runner.Description.getMethodName()</inbound>
            <inbound type="feature" confirmed="yes">org.junit.runner.Description.getTestClass()</inbound>
            <inbound type="feature" confirmed="yes">org.junit.runner.Description.hashCode()</inbound>
            <inbound type="feature" confirmed="yes">org.junit.runner.Description.methodStringMatcher()</inbound>
            <inbound type="feature" confirmed="yes">org.junit.runner.Description.parseMethod()</inbound>
            <inbound type="feature" confirmed="yes">org.junit.runner.Description.static {}</inbound>
            <inbound type="feature" confirmed="yes">org.junit.runner.Description.toString()</inbound>
            <inbound type="feature" confirmed="yes">org.junit.runner.JUnitCore.getVersion()</inbound>
            <inbound type="feature" confirmed="yes">org.junit.runner.JUnitCore.main(java.lang.String[])</inbound>
            <inbound type="feature" confirmed="yes">org.junit.runner.JUnitCore.runMain(org.junit.internal.JUnitSystem, java.lang.String[])</inbound>
            <inbound type="feature" confirmed="yes">org.junit.runner.JUnitCore.runMainAndExit(org.junit.internal.JUnitSystem, java.lang.String[])</inbound>
            <inbound type="feature" confirmed="yes">org.junit.runner.Request.classes(org.junit.runner.Computer, java.lang.Class[])</inbound>
            <inbound type="feature" confirmed="yes">org.junit.runner.Request.method(java.lang.Class, java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">org.junit.runner.manipulation.Filter$1.describe()</inbound>
            <inbound type="feature" confirmed="yes">org.junit.runner.manipulation.Filter$2.describe()</inbound>
            <inbound type="feature" confirmed="yes">org.junit.runner.manipulation.Filter$3.describe()</inbound>
            <inbound type="feature" confirmed="yes">org.junit.runner.manipulation.Filter.describe()</inbound>
            <inbound type="feature" confirmed="yes">org.junit.runner.notification.Failure.getMessage()</inbound>
            <inbound type="feature" confirmed="yes">org.junit.runner.notification.Failure.getTestHeader()</inbound>
            <inbound type="feature" confirmed="yes">org.junit.runner.notification.Failure.getTrace()</inbound>
            <inbound type="feature" confirmed="yes">org.junit.runner.notification.Failure.toString()</inbound>
            <inbound type="feature" confirmed="yes">org.junit.runners.BlockJUnit4ClassRunner.describeChild(org.junit.runners.model.FrameworkMethod)</inbound>
            <inbound type="feature" confirmed="yes">org.junit.runners.BlockJUnit4ClassRunner.testName(org.junit.runners.model.FrameworkMethod)</inbound>
            <inbound type="feature" confirmed="yes">org.junit.runners.BlockJUnit4ClassRunner.validateInstanceMethods(java.util.List)</inbound>
            <inbound type="feature" confirmed="yes">org.junit.runners.BlockJUnit4ClassRunner.validateOnlyOneConstructor(java.util.List)</inbound>
            <inbound type="feature" confirmed="yes">org.junit.runners.BlockJUnit4ClassRunner.validateZeroArgConstructor(java.util.List)</inbound>
            <inbound type="feature" confirmed="yes">org.junit.runners.Parameterized$TestClassRunnerForParameters.computeParams()</inbound>
            <inbound type="feature" confirmed="yes">org.junit.runners.Parameterized$TestClassRunnerForParameters.getName()</inbound>
            <inbound type="feature" confirmed="yes">org.junit.runners.Parameterized$TestClassRunnerForParameters.testName(org.junit.runners.model.FrameworkMethod)</inbound>
            <inbound type="feature" confirmed="yes">org.junit.runners.Parameterized.getParametersMethod(org.junit.runners.model.TestClass)</inbound>
            <inbound type="feature" confirmed="yes">org.junit.runners.ParentRunner.getDescription()</inbound>
            <inbound type="feature" confirmed="yes">org.junit.runners.ParentRunner.getName()</inbound>
            <inbound type="feature" confirmed="yes">org.junit.runners.Suite.emptySuite()</inbound>
            <inbound type="feature" confirmed="yes">org.junit.runners.Suite.getAnnotatedClasses(java.lang.Class)</inbound>
            <inbound type="feature" confirmed="yes">org.junit.runners.model.FrameworkField.getName()</inbound>
            <inbound type="feature" confirmed="yes">org.junit.runners.model.FrameworkField.isShadowedBy(org.junit.runners.model.FrameworkField)</inbound>
            <inbound type="feature" confirmed="yes">org.junit.runners.model.FrameworkMethod.getName()</inbound>
            <inbound type="feature" confirmed="yes">org.junit.runners.model.FrameworkMethod.isShadowedBy(org.junit.runners.model.FrameworkMethod)</inbound>
            <inbound type="feature" confirmed="yes">org.junit.runners.model.FrameworkMethod.validatePublicVoid(boolean, java.util.List)</inbound>
            <inbound type="feature" confirmed="yes">org.junit.runners.model.FrameworkMethod.validatePublicVoidNoArg(boolean, java.util.List)</inbound>
            <inbound type="feature" confirmed="yes">org.junit.runners.model.InitializationError.InitializationError(java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">org.junit.runners.model.MultipleFailureException.getMessage()</inbound>
            <inbound type="feature" confirmed="yes">org.junit.runners.model.RunnerBuilder.addParent(java.lang.Class)</inbound>
            <inbound type="feature" confirmed="yes">org.junit.runners.model.TestClass.TestClass(java.lang.Class)</inbound>
            <inbound type="feature" confirmed="yes">org.junit.runners.model.TestClass.getAnnotatedFieldValues(java.lang.Object, java.lang.Class, java.lang.Class)</inbound>
            <inbound type="feature" confirmed="yes">org.junit.runners.model.TestClass.getName()</inbound>
            <feature confirmed="no">
                <name>java.lang.String.charAt(int)</name>
                <inbound type="feature" confirmed="yes">junit.framework.ComparisonCompactor.findCommonPrefix()</inbound>
                <inbound type="feature" confirmed="yes">junit.framework.ComparisonCompactor.findCommonSuffix()</inbound>
                <inbound type="feature" confirmed="yes">org.hamcrest.BaseDescription.append(java.lang.String)</inbound>
                <inbound type="feature" confirmed="yes">org.hamcrest.BaseDescription.toJavaSyntax(java.lang.String)</inbound>
                <inbound type="feature" confirmed="yes">org.junit.ComparisonFailure$ComparisonCompactor.findCommonPrefix()</inbound>
                <inbound type="feature" confirmed="yes">org.junit.ComparisonFailure$ComparisonCompactor.findCommonSuffix()</inbound>
            </feature>
            <feature confirmed="no">
                <name>java.lang.String.contains(java.lang.CharSequence)</name>
                <inbound type="feature" confirmed="yes">org.junit.experimental.results.ResultMatchers$2.matches(java.lang.Object)</inbound>
                <inbound type="feature" confirmed="yes">org.junit.experimental.results.ResultMatchers$3.matches(java.lang.Object)</inbound>
            </feature>
            <feature confirmed="no">
                <name>java.lang.String.equals(java.lang.Object)</name>
                <inbound type="feature" confirmed="yes">junit.framework.Assert.assertEquals(java.lang.String, java.lang.String, java.lang.String)</inbound>
                <inbound type="feature" confirmed="yes">junit.framework.ComparisonCompactor.areStringsEqual()</inbound>
                <inbound type="feature" confirmed="yes">junit.runner.BaseTestRunner.processArguments(java.lang.String[])</inbound>
                <inbound type="feature" confirmed="yes">junit.runner.BaseTestRunner.showStackRaw()</inbound>
                <inbound type="feature" confirmed="yes">junit.runner.BaseTestRunner.useReloadingTestSuiteLoader()</inbound>
                <inbound type="feature" confirmed="yes">junit.textui.TestRunner.start(java.lang.String[])</inbound>
                <inbound type="feature" confirmed="yes">org.junit.Assert.format(java.lang.String, java.lang.Object, java.lang.Object)</inbound>
                <inbound type="feature" confirmed="yes">org.junit.ComparisonFailure$ComparisonCompactor.areStringsEqual()</inbound>
                <inbound type="feature" confirmed="yes">org.junit.experimental.max.MaxCore.buildRunner(org.junit.runner.Description)</inbound>
                <inbound type="feature" confirmed="yes">org.junit.experimental.max.MaxCore.findLeaves(org.junit.runner.Description, org.junit.runner.Description, java.util.List)</inbound>
                <inbound type="feature" confirmed="yes">org.junit.experimental.theories.internal.ParameterizedAssertionError.equals(java.lang.Object)</inbound>
                <inbound type="feature" confirmed="yes">org.junit.internal.matchers.TypeSafeMatcher.isMatchesSafelyMethod(java.lang.reflect.Method)</inbound>
                <inbound type="feature" confirmed="yes">org.junit.internal.runners.TestClass.isShadowed(java.lang.reflect.Method, java.lang.reflect.Method)</inbound>
                <inbound type="feature" confirmed="yes">org.junit.runner.Description.equals(java.lang.Object)</inbound>
                <inbound type="feature" confirmed="yes">org.junit.runners.model.FrameworkField.isShadowedBy(org.junit.runners.model.FrameworkField)</inbound>
                <inbound type="feature" confirmed="yes">org.junit.runners.model.FrameworkMethod.isShadowedBy(org.junit.runners.model.FrameworkMethod)</inbound>
            </feature>
            <feature confirmed="no">
                <name>java.lang.String.format(java.lang.String, java.lang.Object[])</name>
                <inbound type="feature" confirmed="yes">org.junit.experimental.theories.PotentialAssignment$1.toString()</inbound>
                <inbound type="feature" confirmed="yes">org.junit.experimental.theories.internal.ParameterizedAssertionError.ParameterizedAssertionError(java.lang.Throwable, java.lang.String, java.lang.Object[])</inbound>
                <inbound type="feature" confirmed="yes">org.junit.internal.builders.AnnotatedBuilder.buildRunner(java.lang.Class, java.lang.Class)</inbound>
                <inbound type="feature" confirmed="yes">org.junit.internal.requests.FilterRequest.getRunner()</inbound>
                <inbound type="feature" confirmed="yes">org.junit.internal.runners.JUnit38ClassRunner.createSuiteDescription(junit.framework.TestSuite)</inbound>
                <inbound type="feature" confirmed="yes">org.junit.internal.runners.MethodRoadie$1.run()</inbound>
                <inbound type="feature" confirmed="yes">org.junit.internal.runners.statements.FailOnTimeout.evaluate()</inbound>
                <inbound type="feature" confirmed="yes">org.junit.runner.Description.createTestDescription(java.lang.Class, java.lang.String, java.lang.annotation.Annotation[])</inbound>
                <inbound type="feature" confirmed="yes">org.junit.runner.manipulation.Filter$2.describe()</inbound>
                <inbound type="feature" confirmed="yes">org.junit.runners.Parameterized$TestClassRunnerForParameters.computeParams()</inbound>
                <inbound type="feature" confirmed="yes">org.junit.runners.Parameterized$TestClassRunnerForParameters.getName()</inbound>
                <inbound type="feature" confirmed="yes">org.junit.runners.Parameterized$TestClassRunnerForParameters.testName(org.junit.runners.model.FrameworkMethod)</inbound>
                <inbound type="feature" confirmed="yes">org.junit.runners.Suite.getAnnotatedClasses(java.lang.Class)</inbound>
                <inbound type="feature" confirmed="yes">org.junit.runners.model.MultipleFailureException.getMessage()</inbound>
                <inbound type="feature" confirmed="yes">org.junit.runners.model.RunnerBuilder.addParent(java.lang.Class)</inbound>
            </feature>
            <feature confirmed="no">
                <name>java.lang.String.hashCode()</name>
                <inbound type="feature" confirmed="yes">org.junit.runner.Description.hashCode()</inbound>
            </feature>
            <feature confirmed="no">
                <name>java.lang.String.indexOf(java.lang.String)</name>
                <inbound type="feature" confirmed="yes">junit.runner.BaseTestRunner.filterLine(java.lang.String)</inbound>
                <inbound type="feature" confirmed="yes">org.junit.internal.matchers.StringContains.evalSubstringOf(java.lang.String)</inbound>
            </feature>
            <feature confirmed="no">
                <name>java.lang.String.lastIndexOf(int)</name>
                <inbound type="feature" confirmed="yes">junit.textui.TestRunner.start(java.lang.String[])</inbound>
            </feature>
            <feature confirmed="no">
                <name>java.lang.String.lastIndexOf(java.lang.String)</name>
                <inbound type="feature" confirmed="yes">junit.runner.BaseTestRunner.extractClassName(java.lang.String)</inbound>
            </feature>
            <feature confirmed="no">
                <name>java.lang.String.length()</name>
                <inbound type="feature" confirmed="yes">junit.framework.Assert.format(java.lang.String, java.lang.Object, java.lang.Object)</inbound>
                <inbound type="feature" confirmed="yes">junit.framework.ComparisonCompactor.compactString(java.lang.String)</inbound>
                <inbound type="feature" confirmed="yes">junit.framework.ComparisonCompactor.computeCommonSuffix()</inbound>
                <inbound type="feature" confirmed="yes">junit.framework.ComparisonCompactor.findCommonPrefix()</inbound>
                <inbound type="feature" confirmed="yes">junit.framework.ComparisonCompactor.findCommonSuffix()</inbound>
                <inbound type="feature" confirmed="yes">junit.runner.BaseTestRunner.getTest(java.lang.String)</inbound>
                <inbound type="feature" confirmed="yes">junit.runner.BaseTestRunner.truncate(java.lang.String)</inbound>
                <inbound type="feature" confirmed="yes">org.hamcrest.BaseDescription.append(java.lang.String)</inbound>
                <inbound type="feature" confirmed="yes">org.hamcrest.BaseDescription.toJavaSyntax(java.lang.String)</inbound>
                <inbound type="feature" confirmed="yes">org.hamcrest.core.DescribedAs.describeTo(org.hamcrest.Description)</inbound>
                <inbound type="feature" confirmed="yes">org.junit.ComparisonFailure$ComparisonCompactor.compactString(java.lang.String)</inbound>
                <inbound type="feature" confirmed="yes">org.junit.ComparisonFailure$ComparisonCompactor.computeCommonSuffix()</inbound>
                <inbound type="feature" confirmed="yes">org.junit.ComparisonFailure$ComparisonCompactor.findCommonPrefix()</inbound>
                <inbound type="feature" confirmed="yes">org.junit.ComparisonFailure$ComparisonCompactor.findCommonSuffix()</inbound>
                <inbound type="feature" confirmed="yes">org.junit.runner.Description.createSuiteDescription(java.lang.String, java.lang.annotation.Annotation[])</inbound>
            </feature>
            <feature confirmed="no">
                <name>java.lang.String.replace(java.lang.CharSequence, java.lang.CharSequence)</name>
                <inbound type="feature" confirmed="yes">org.junit.experimental.max.MaxCore.getMalformedTestClass(org.junit.runner.Description)</inbound>
            </feature>
            <feature confirmed="no">
                <name>java.lang.String.startsWith(java.lang.String)</name>
                <inbound type="feature" confirmed="yes">junit.framework.TestSuite.isTestMethod(java.lang.reflect.Method)</inbound>
                <inbound type="feature" confirmed="yes">junit.runner.BaseTestRunner.extractClassName(java.lang.String)</inbound>
                <inbound type="feature" confirmed="yes">org.junit.experimental.max.MaxCore.buildRunner(org.junit.runner.Description)</inbound>
            </feature>
            <feature confirmed="no">
                <name>java.lang.String.substring(int)</name>
                <inbound type="feature" confirmed="yes">junit.runner.BaseTestRunner.extractClassName(java.lang.String)</inbound>
                <inbound type="feature" confirmed="yes">junit.textui.TestRunner.start(java.lang.String[])</inbound>
                <inbound type="feature" confirmed="yes">org.hamcrest.core.DescribedAs.describeTo(org.hamcrest.Description)</inbound>
            </feature>
            <feature confirmed="no">
                <name>java.lang.String.substring(int, int)</name>
                <inbound type="feature" confirmed="yes">junit.framework.ComparisonCompactor.compactString(java.lang.String)</inbound>
                <inbound type="feature" confirmed="yes">junit.framework.ComparisonCompactor.computeCommonPrefix()</inbound>
                <inbound type="feature" confirmed="yes">junit.framework.ComparisonCompactor.computeCommonSuffix()</inbound>
                <inbound type="feature" confirmed="yes">junit.runner.BaseTestRunner.truncate(java.lang.String)</inbound>
                <inbound type="feature" confirmed="yes">junit.textui.TestRunner.start(java.lang.String[])</inbound>
                <inbound type="feature" confirmed="yes">org.hamcrest.core.DescribedAs.describeTo(org.hamcrest.Description)</inbound>
                <inbound type="feature" confirmed="yes">org.junit.ComparisonFailure$ComparisonCompactor.compactString(java.lang.String)</inbound>
                <inbound type="feature" confirmed="yes">org.junit.ComparisonFailure$ComparisonCompactor.computeCommonPrefix()</inbound>
                <inbound type="feature" confirmed="yes">org.junit.ComparisonFailure$ComparisonCompactor.computeCommonSuffix()</inbound>
            </feature>
            <feature confirmed="no">
                <name>java.lang.String.valueOf(java.lang.Object)</name>
                <inbound type="feature" confirmed="yes">junit.framework.Assert.assertNull(java.lang.Object)</inbound>
                <inbound type="feature" confirmed="yes">org.hamcrest.BaseDescription.appendValue(java.lang.Object)</inbound>
                <inbound type="feature" confirmed="yes">org.junit.Assert.format(java.lang.String, java.lang.Object, java.lang.Object)</inbound>
                <inbound type="feature" confirmed="yes">org.junit.experimental.theories.internal.ParameterizedAssertionError.stringValueOf(java.lang.Object)</inbound>
            </feature>
        </class>
        <class confirmed="no">
            <name>java.lang.StringBuffer</name>
            <inbound type="feature" confirmed="yes">junit.framework.TestFailure.toString()</inbound>
            <inbound type="feature" confirmed="yes">junit.framework.TestFailure.trace()</inbound>
            <inbound type="feature" confirmed="yes">junit.runner.BaseTestRunner.getFilteredTrace(java.lang.Throwable)</inbound>
            <inbound type="feature" confirmed="yes">org.junit.experimental.theories.internal.ParameterizedAssertionError.join(java.lang.String, java.util.Collection)</inbound>
            <inbound type="feature" confirmed="yes">org.junit.runner.notification.Failure.getTrace()</inbound>
            <inbound type="feature" confirmed="yes">org.junit.runner.notification.Failure.toString()</inbound>
            <feature confirmed="no">
                <name>java.lang.StringBuffer.StringBuffer()</name>
                <inbound type="feature" confirmed="yes">junit.framework.TestFailure.toString()</inbound>
                <inbound type="feature" confirmed="yes">org.junit.experimental.theories.internal.ParameterizedAssertionError.join(java.lang.String, java.util.Collection)</inbound>
                <inbound type="feature" confirmed="yes">org.junit.runner.notification.Failure.toString()</inbound>
            </feature>
            <feature confirmed="no">
                <name>java.lang.StringBuffer.append(java.lang.String)</name>
                <inbound type="feature" confirmed="yes">junit.framework.TestFailure.toString()</inbound>
                <inbound type="feature" confirmed="yes">org.junit.experimental.theories.internal.ParameterizedAssertionError.join(java.lang.String, java.util.Collection)</inbound>
                <inbound type="feature" confirmed="yes">org.junit.runner.notification.Failure.toString()</inbound>
            </feature>
            <feature confirmed="no">
                <name>java.lang.StringBuffer.toString()</name>
                <inbound type="feature" confirmed="yes">junit.framework.TestFailure.toString()</inbound>
                <inbound type="feature" confirmed="yes">junit.framework.TestFailure.trace()</inbound>
                <inbound type="feature" confirmed="yes">junit.runner.BaseTestRunner.getFilteredTrace(java.lang.Throwable)</inbound>
                <inbound type="feature" confirmed="yes">org.junit.experimental.theories.internal.ParameterizedAssertionError.join(java.lang.String, java.util.Collection)</inbound>
                <inbound type="feature" confirmed="yes">org.junit.runner.notification.Failure.getTrace()</inbound>
                <inbound type="feature" confirmed="yes">org.junit.runner.notification.Failure.toString()</inbound>
            </feature>
        </class>
        <class confirmed="no">
            <name>java.lang.StringBuilder</name>
            <inbound type="feature" confirmed="yes">junit.extensions.RepeatedTest.toString()</inbound>
            <inbound type="feature" confirmed="yes">junit.framework.Assert.assertNull(java.lang.Object)</inbound>
            <inbound type="feature" confirmed="yes">junit.framework.Assert.failNotSame(java.lang.String, java.lang.Object, java.lang.Object)</inbound>
            <inbound type="feature" confirmed="yes">junit.framework.Assert.failSame(java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">junit.framework.Assert.format(java.lang.String, java.lang.Object, java.lang.Object)</inbound>
            <inbound type="feature" confirmed="yes">junit.framework.ComparisonCompactor.compactString(java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">junit.framework.ComparisonCompactor.computeCommonPrefix()</inbound>
            <inbound type="feature" confirmed="yes">junit.framework.ComparisonCompactor.computeCommonSuffix()</inbound>
            <inbound type="feature" confirmed="yes">junit.framework.TestCase.runTest()</inbound>
            <inbound type="feature" confirmed="yes">junit.framework.TestCase.toString()</inbound>
            <inbound type="feature" confirmed="yes">junit.framework.TestFailure.toString()</inbound>
            <inbound type="feature" confirmed="yes">junit.framework.TestSuite.addTestMethod(java.lang.reflect.Method, java.util.List, java.lang.Class)</inbound>
            <inbound type="feature" confirmed="yes">junit.framework.TestSuite.addTestsFromTestCase(java.lang.Class)</inbound>
            <inbound type="feature" confirmed="yes">junit.framework.TestSuite.createTest(java.lang.Class, java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">junit.framework.TestSuite.testCaseForClass(java.lang.Class)</inbound>
            <inbound type="feature" confirmed="yes">junit.runner.BaseTestRunner.getTest(java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">junit.runner.BaseTestRunner.truncate(java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">junit.textui.ResultPrinter.printDefectHeader(junit.framework.TestFailure, int)</inbound>
            <inbound type="feature" confirmed="yes">junit.textui.ResultPrinter.printDefects(java.util.Enumeration, int, java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">junit.textui.ResultPrinter.printFooter(junit.framework.TestResult)</inbound>
            <inbound type="feature" confirmed="yes">junit.textui.ResultPrinter.printHeader(long)</inbound>
            <inbound type="feature" confirmed="yes">junit.textui.TestRunner.start(java.lang.String[])</inbound>
            <inbound type="feature" confirmed="yes">org.junit.Assert.failNotSame(java.lang.String, java.lang.Object, java.lang.Object)</inbound>
            <inbound type="feature" confirmed="yes">org.junit.Assert.failSame(java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">org.junit.Assert.format(java.lang.String, java.lang.Object, java.lang.Object)</inbound>
            <inbound type="feature" confirmed="yes">org.junit.Assert.formatClassAndValue(java.lang.Object, java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">org.junit.ComparisonFailure$ComparisonCompactor.compactString(java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">org.junit.ComparisonFailure$ComparisonCompactor.computeCommonPrefix()</inbound>
            <inbound type="feature" confirmed="yes">org.junit.ComparisonFailure$ComparisonCompactor.computeCommonSuffix()</inbound>
            <inbound type="feature" confirmed="yes">org.junit.experimental.categories.Categories$CategoryFilter.describe()</inbound>
            <inbound type="feature" confirmed="yes">org.junit.experimental.max.MaxCore.buildRunner(org.junit.runner.Description)</inbound>
            <inbound type="feature" confirmed="yes">org.junit.experimental.max.MaxCore.findLeaves(org.junit.runner.Description, org.junit.runner.Description, java.util.List)</inbound>
            <inbound type="feature" confirmed="yes">org.junit.experimental.results.ResultMatchers$1.describeTo(org.hamcrest.Description)</inbound>
            <inbound type="feature" confirmed="yes">org.junit.experimental.results.ResultMatchers$2.describeTo(org.hamcrest.Description)</inbound>
            <inbound type="feature" confirmed="yes">org.junit.experimental.results.ResultMatchers$3.describeTo(org.hamcrest.Description)</inbound>
            <inbound type="feature" confirmed="yes">org.junit.experimental.theories.Theories$TheoryAnchor.evaluate()</inbound>
            <inbound type="feature" confirmed="yes">org.junit.experimental.theories.Theories.validateDataPointFields(java.util.List)</inbound>
            <inbound type="feature" confirmed="yes">org.junit.experimental.theories.internal.AllMembersSupplier.addArrayValues(java.lang.String, java.util.List, java.lang.Object)</inbound>
            <inbound type="feature" confirmed="yes">org.junit.internal.ArrayComparisonFailure.getMessage()</inbound>
            <inbound type="feature" confirmed="yes">org.junit.internal.AssumptionViolatedException.describeTo(org.hamcrest.Description)</inbound>
            <inbound type="feature" confirmed="yes">org.junit.internal.ComparisonCriteria.arrayEquals(java.lang.String, java.lang.Object, java.lang.Object)</inbound>
            <inbound type="feature" confirmed="yes">org.junit.internal.ComparisonCriteria.assertArraysAreSameLength(java.lang.Object, java.lang.Object, java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">org.junit.internal.TextListener.printFailure(org.junit.runner.notification.Failure, java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">org.junit.internal.TextListener.printFailures(org.junit.runner.Result)</inbound>
            <inbound type="feature" confirmed="yes">org.junit.internal.TextListener.printFooter(org.junit.runner.Result)</inbound>
            <inbound type="feature" confirmed="yes">org.junit.internal.TextListener.printHeader(long)</inbound>
            <inbound type="feature" confirmed="yes">org.junit.internal.runners.MethodRoadie.runTestMethod()</inbound>
            <inbound type="feature" confirmed="yes">org.junit.internal.runners.MethodValidator.validateTestMethods(java.lang.Class, boolean)</inbound>
            <inbound type="feature" confirmed="yes">org.junit.internal.runners.SuiteMethod.testFromSuiteMethod(java.lang.Class)</inbound>
            <inbound type="feature" confirmed="yes">org.junit.internal.runners.rules.RuleFieldValidator.addError(java.util.List, org.junit.runners.model.FrameworkField, java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">org.junit.internal.runners.statements.ExpectException.evaluate()</inbound>
            <inbound type="feature" confirmed="yes">org.junit.rules.ExpectedException$ExpectedExceptionStatement.evaluate()</inbound>
            <inbound type="feature" confirmed="yes">org.junit.runner.JUnitCore.runMain(org.junit.internal.JUnitSystem, java.lang.String[])</inbound>
            <inbound type="feature" confirmed="yes">org.junit.runner.manipulation.Filter$3.describe()</inbound>
            <inbound type="feature" confirmed="yes">org.junit.runner.notification.Failure.toString()</inbound>
            <inbound type="feature" confirmed="yes">org.junit.runners.Parameterized.getParametersMethod(org.junit.runners.model.TestClass)</inbound>
            <inbound type="feature" confirmed="yes">org.junit.runners.model.FrameworkMethod.validatePublicVoid(boolean, java.util.List)</inbound>
            <inbound type="feature" confirmed="yes">org.junit.runners.model.FrameworkMethod.validatePublicVoidNoArg(boolean, java.util.List)</inbound>
            <inbound type="feature" confirmed="yes">org.junit.runners.model.MultipleFailureException.getMessage()</inbound>
            <feature confirmed="no">
                <name>java.lang.StringBuilder.StringBuilder()</name>
                <inbound type="feature" confirmed="yes">junit.extensions.RepeatedTest.toString()</inbound>
                <inbound type="feature" confirmed="yes">junit.framework.Assert.assertNull(java.lang.Object)</inbound>
                <inbound type="feature" confirmed="yes">junit.framework.Assert.failNotSame(java.lang.String, java.lang.Object, java.lang.Object)</inbound>
                <inbound type="feature" confirmed="yes">junit.framework.Assert.failSame(java.lang.String)</inbound>
                <inbound type="feature" confirmed="yes">junit.framework.Assert.format(java.lang.String, java.lang.Object, java.lang.Object)</inbound>
                <inbound type="feature" confirmed="yes">junit.framework.ComparisonCompactor.compactString(java.lang.String)</inbound>
                <inbound type="feature" confirmed="yes">junit.framework.ComparisonCompactor.computeCommonPrefix()</inbound>
                <inbound type="feature" confirmed="yes">junit.framework.ComparisonCompactor.computeCommonSuffix()</inbound>
                <inbound type="feature" confirmed="yes">junit.framework.TestCase.runTest()</inbound>
                <inbound type="feature" confirmed="yes">junit.framework.TestCase.toString()</inbound>
                <inbound type="feature" confirmed="yes">junit.framework.TestFailure.toString()</inbound>
                <inbound type="feature" confirmed="yes">junit.framework.TestSuite.addTestMethod(java.lang.reflect.Method, java.util.List, java.lang.Class)</inbound>
                <inbound type="feature" confirmed="yes">junit.framework.TestSuite.addTestsFromTestCase(java.lang.Class)</inbound>
                <inbound type="feature" confirmed="yes">junit.framework.TestSuite.createTest(java.lang.Class, java.lang.String)</inbound>
                <inbound type="feature" confirmed="yes">junit.framework.TestSuite.testCaseForClass(java.lang.Class)</inbound>
                <inbound type="feature" confirmed="yes">junit.runner.BaseTestRunner.getTest(java.lang.String)</inbound>
                <inbound type="feature" confirmed="yes">junit.runner.BaseTestRunner.truncate(java.lang.String)</inbound>
                <inbound type="feature" confirmed="yes">junit.textui.ResultPrinter.printDefectHeader(junit.framework.TestFailure, int)</inbound>
                <inbound type="feature" confirmed="yes">junit.textui.ResultPrinter.printDefects(java.util.Enumeration, int, java.lang.String)</inbound>
                <inbound type="feature" confirmed="yes">junit.textui.ResultPrinter.printFooter(junit.framework.TestResult)</inbound>
                <inbound type="feature" confirmed="yes">junit.textui.ResultPrinter.printHeader(long)</inbound>
                <inbound type="feature" confirmed="yes">junit.textui.TestRunner.start(java.lang.String[])</inbound>
                <inbound type="feature" confirmed="yes">org.hamcrest.StringDescription.StringDescription()</inbound>
                <inbound type="feature" confirmed="yes">org.junit.Assert.failNotSame(java.lang.String, java.lang.Object, java.lang.Object)</inbound>
                <inbound type="feature" confirmed="yes">org.junit.Assert.failSame(java.lang.String)</inbound>
                <inbound type="feature" confirmed="yes">org.junit.Assert.format(java.lang.String, java.lang.Object, java.lang.Object)</inbound>
                <inbound type="feature" confirmed="yes">org.junit.Assert.formatClassAndValue(java.lang.Object, java.lang.String)</inbound>
                <inbound type="feature" confirmed="yes">org.junit.ComparisonFailure$ComparisonCompactor.compactString(java.lang.String)</inbound>
                <inbound type="feature" confirmed="yes">org.junit.ComparisonFailure$ComparisonCompactor.computeCommonPrefix()</inbound>
                <inbound type="feature" confirmed="yes">org.junit.ComparisonFailure$ComparisonCompactor.computeCommonSuffix()</inbound>
                <inbound type="feature" confirmed="yes">org.junit.experimental.categories.Categories$CategoryFilter.describe()</inbound>
                <inbound type="feature" confirmed="yes">org.junit.experimental.max.MaxCore.buildRunner(org.junit.runner.Description)</inbound>
                <inbound type="feature" confirmed="yes">org.junit.experimental.max.MaxCore.findLeaves(org.junit.runner.Description, org.junit.runner.Description, java.util.List)</inbound>
                <inbound type="feature" confirmed="yes">org.junit.experimental.results.ResultMatchers$1.describeTo(org.hamcrest.Description)</inbound>
                <inbound type="feature" confirmed="yes">org.junit.experimental.results.ResultMatchers$2.describeTo(org.hamcrest.Description)</inbound>
                <inbound type="feature" confirmed="yes">org.junit.experimental.results.ResultMatchers$3.describeTo(org.hamcrest.Description)</inbound>
                <inbound type="feature" confirmed="yes">org.junit.experimental.theories.Theories$TheoryAnchor.evaluate()</inbound>
                <inbound type="feature" confirmed="yes">org.junit.experimental.theories.Theories.validateDataPointFields(java.util.List)</inbound>
                <inbound type="feature" confirmed="yes">org.junit.experimental.theories.internal.AllMembersSupplier.addArrayValues(java.lang.String, java.util.List, java.lang.Object)</inbound>
                <inbound type="feature" confirmed="yes">org.junit.internal.ArrayComparisonFailure.getMessage()</inbound>
                <inbound type="feature" confirmed="yes">org.junit.internal.AssumptionViolatedException.describeTo(org.hamcrest.Description)</inbound>
                <inbound type="feature" confirmed="yes">org.junit.internal.ComparisonCriteria.arrayEquals(java.lang.String, java.lang.Object, java.lang.Object)</inbound>
                <inbound type="feature" confirmed="yes">org.junit.internal.ComparisonCriteria.assertArraysAreSameLength(java.lang.Object, java.lang.Object, java.lang.String)</inbound>
                <inbound type="feature" confirmed="yes">org.junit.internal.TextListener.printFailure(org.junit.runner.notification.Failure, java.lang.String)</inbound>
                <inbound type="feature" confirmed="yes">org.junit.internal.TextListener.printFailures(org.junit.runner.Result)</inbound>
                <inbound type="feature" confirmed="yes">org.junit.internal.TextListener.printFooter(org.junit.runner.Result)</inbound>
                <inbound type="feature" confirmed="yes">org.junit.internal.TextListener.printHeader(long)</inbound>
                <inbound type="feature" confirmed="yes">org.junit.internal.runners.MethodRoadie.runTestMethod()</inbound>
                <inbound type="feature" confirmed="yes">org.junit.internal.runners.MethodValidator.validateTestMethods(java.lang.Class, boolean)</inbound>
                <inbound type="feature" confirmed="yes">org.junit.internal.runners.SuiteMethod.testFromSuiteMethod(java.lang.Class)</inbound>
                <inbound type="feature" confirmed="yes">org.junit.internal.runners.rules.RuleFieldValidator.addError(java.util.List, org.junit.runners.model.FrameworkField, java.lang.String)</inbound>
                <inbound type="feature" confirmed="yes">org.junit.internal.runners.statements.ExpectException.evaluate()</inbound>
                <inbound type="feature" confirmed="yes">org.junit.rules.ExpectedException$ExpectedExceptionStatement.evaluate()</inbound>
                <inbound type="feature" confirmed="yes">org.junit.runner.JUnitCore.runMain(org.junit.internal.JUnitSystem, java.lang.String[])</inbound>
                <inbound type="feature" confirmed="yes">org.junit.runner.manipulation.Filter$3.describe()</inbound>
                <inbound type="feature" confirmed="yes">org.junit.runner.notification.Failure.toString()</inbound>
                <inbound type="feature" confirmed="yes">org.junit.runners.Parameterized.getParametersMethod(org.junit.runners.model.TestClass)</inbound>
                <inbound type="feature" confirmed="yes">org.junit.runners.model.FrameworkMethod.validatePublicVoid(boolean, java.util.List)</inbound>
                <inbound type="feature" confirmed="yes">org.junit.runners.model.FrameworkMethod.validatePublicVoidNoArg(boolean, java.util.List)</inbound>
            </feature>
            <feature confirmed="no">
                <name>java.lang.StringBuilder.StringBuilder(java.lang.String)</name>
                <inbound type="feature" confirmed="yes">org.junit.runners.model.MultipleFailureException.getMessage()</inbound>
            </feature>
            <feature confirmed="no">
                <name>java.lang.StringBuilder.append(int)</name>
                <inbound type="feature" confirmed="yes">junit.textui.ResultPrinter.printDefectHeader(junit.framework.TestFailure, int)</inbound>
                <inbound type="feature" confirmed="yes">junit.textui.ResultPrinter.printDefects(java.util.Enumeration, int, java.lang.String)</inbound>
                <inbound type="feature" confirmed="yes">junit.textui.ResultPrinter.printFooter(junit.framework.TestResult)</inbound>
                <inbound type="feature" confirmed="yes">org.junit.experimental.results.ResultMatchers$1.describeTo(org.hamcrest.Description)</inbound>
                <inbound type="feature" confirmed="yes">org.junit.experimental.theories.internal.AllMembersSupplier.addArrayValues(java.lang.String, java.util.List, java.lang.Object)</inbound>
                <inbound type="feature" confirmed="yes">org.junit.internal.ArrayComparisonFailure.getMessage()</inbound>
                <inbound type="feature" confirmed="yes">org.junit.internal.ComparisonCriteria.assertArraysAreSameLength(java.lang.Object, java.lang.Object, java.lang.String)</inbound>
                <inbound type="feature" confirmed="yes">org.junit.internal.TextListener.printFailures(org.junit.runner.Result)</inbound>
                <inbound type="feature" confirmed="yes">org.junit.internal.TextListener.printFooter(org.junit.runner.Result)</inbound>
            </feature>
            <feature confirmed="no">
                <name>java.lang.StringBuilder.append(java.lang.Object)</name>
                <inbound type="feature" confirmed="yes">junit.framework.Assert.failNotSame(java.lang.String, java.lang.Object, java.lang.Object)</inbound>
                <inbound type="feature" confirmed="yes">junit.framework.Assert.format(java.lang.String, java.lang.Object, java.lang.Object)</inbound>
                <inbound type="feature" confirmed="yes">junit.framework.TestFailure.toString()</inbound>
                <inbound type="feature" confirmed="yes">junit.textui.ResultPrinter.printDefectHeader(junit.framework.TestFailure, int)</inbound>
                <inbound type="feature" confirmed="yes">junit.textui.TestRunner.start(java.lang.String[])</inbound>
                <inbound type="feature" confirmed="yes">org.junit.Assert.failNotSame(java.lang.String, java.lang.Object, java.lang.Object)</inbound>
                <inbound type="feature" confirmed="yes">org.junit.experimental.categories.Categories$CategoryFilter.describe()</inbound>
                <inbound type="feature" confirmed="yes">org.junit.experimental.max.MaxCore.buildRunner(org.junit.runner.Description)</inbound>
                <inbound type="feature" confirmed="yes">org.junit.experimental.max.MaxCore.findLeaves(org.junit.runner.Description, org.junit.runner.Description, java.util.List)</inbound>
                <inbound type="feature" confirmed="yes">org.junit.experimental.theories.Theories$TheoryAnchor.evaluate()</inbound>
                <inbound type="feature" confirmed="yes">org.junit.internal.AssumptionViolatedException.describeTo(org.hamcrest.Description)</inbound>
            </feature>
            <feature confirmed="no">
                <name>java.lang.StringBuilder.append(java.lang.String)</name>
                <inbound type="feature" confirmed="yes">junit.extensions.RepeatedTest.toString()</inbound>
                <inbound type="feature" confirmed="yes">junit.framework.Assert.assertNull(java.lang.Object)</inbound>
                <inbound type="feature" confirmed="yes">junit.framework.Assert.failNotSame(java.lang.String, java.lang.Object, java.lang.Object)</inbound>
                <inbound type="feature" confirmed="yes">junit.framework.Assert.failSame(java.lang.String)</inbound>
                <inbound type="feature" confirmed="yes">junit.framework.Assert.format(java.lang.String, java.lang.Object, java.lang.Object)</inbound>
                <inbound type="feature" confirmed="yes">junit.framework.ComparisonCompactor.compactString(java.lang.String)</inbound>
                <inbound type="feature" confirmed="yes">junit.framework.ComparisonCompactor.computeCommonPrefix()</inbound>
                <inbound type="feature" confirmed="yes">junit.framework.ComparisonCompactor.computeCommonSuffix()</inbound>
                <inbound type="feature" confirmed="yes">junit.framework.TestCase.runTest()</inbound>
                <inbound type="feature" confirmed="yes">junit.framework.TestCase.toString()</inbound>
                <inbound type="feature" confirmed="yes">junit.framework.TestFailure.toString()</inbound>
                <inbound type="feature" confirmed="yes">junit.framework.TestSuite.addTestMethod(java.lang.reflect.Method, java.util.List, java.lang.Class)</inbound>
                <inbound type="feature" confirmed="yes">junit.framework.TestSuite.addTestsFromTestCase(java.lang.Class)</inbound>
                <inbound type="feature" confirmed="yes">junit.framework.TestSuite.createTest(java.lang.Class, java.lang.String)</inbound>
                <inbound type="feature" confirmed="yes">junit.framework.TestSuite.testCaseForClass(java.lang.Class)</inbound>
                <inbound type="feature" confirmed="yes">junit.runner.BaseTestRunner.getTest(java.lang.String)</inbound>
                <inbound type="feature" confirmed="yes">junit.runner.BaseTestRunner.truncate(java.lang.String)</inbound>
                <inbound type="feature" confirmed="yes">junit.textui.ResultPrinter.printDefectHeader(junit.framework.TestFailure, int)</inbound>
                <inbound type="feature" confirmed="yes">junit.textui.ResultPrinter.printDefects(java.util.Enumeration, int, java.lang.String)</inbound>
                <inbound type="feature" confirmed="yes">junit.textui.ResultPrinter.printFooter(junit.framework.TestResult)</inbound>
                <inbound type="feature" confirmed="yes">junit.textui.ResultPrinter.printHeader(long)</inbound>
                <inbound type="feature" confirmed="yes">junit.textui.TestRunner.start(java.lang.String[])</inbound>
                <inbound type="feature" confirmed="yes">org.junit.Assert.failNotSame(java.lang.String, java.lang.Object, java.lang.Object)</inbound>
                <inbound type="feature" confirmed="yes">org.junit.Assert.failSame(java.lang.String)</inbound>
                <inbound type="feature" confirmed="yes">org.junit.Assert.format(java.lang.String, java.lang.Object, java.lang.Object)</inbound>
                <inbound type="feature" confirmed="yes">org.junit.Assert.formatClassAndValue(java.lang.Object, java.lang.String)</inbound>
                <inbound type="feature" confirmed="yes">org.junit.ComparisonFailure$ComparisonCompactor.compactString(java.lang.String)</inbound>
                <inbound type="feature" confirmed="yes">org.junit.ComparisonFailure$ComparisonCompactor.computeCommonPrefix()</inbound>
                <inbound type="feature" confirmed="yes">org.junit.ComparisonFailure$ComparisonCompactor.computeCommonSuffix()</inbound>
                <inbound type="feature" confirmed="yes">org.junit.experimental.categories.Categories$CategoryFilter.describe()</inbound>
                <inbound type="feature" confirmed="yes">org.junit.experimental.max.MaxCore.buildRunner(org.junit.runner.Description)</inbound>
                <inbound type="feature" confirmed="yes">org.junit.experimental.max.MaxCore.findLeaves(org.junit.runner.Description, org.junit.runner.Description, java.util.List)</inbound>
                <inbound type="feature" confirmed="yes">org.junit.experimental.results.ResultMatchers$1.describeTo(org.hamcrest.Description)</inbound>
                <inbound type="feature" confirmed="yes">org.junit.experimental.results.ResultMatchers$2.describeTo(org.hamcrest.Description)</inbound>
                <inbound type="feature" confirmed="yes">org.junit.experimental.results.ResultMatchers$3.describeTo(org.hamcrest.Description)</inbound>
                <inbound type="feature" confirmed="yes">org.junit.experimental.theories.Theories$TheoryAnchor.evaluate()</inbound>
                <inbound type="feature" confirmed="yes">org.junit.experimental.theories.Theories.validateDataPointFields(java.util.List)</inbound>
                <inbound type="feature" confirmed="yes">org.junit.experimental.theories.internal.AllMembersSupplier.addArrayValues(java.lang.String, java.util.List, java.lang.Object)</inbound>
                <inbound type="feature" confirmed="yes">org.junit.internal.ArrayComparisonFailure.getMessage()</inbound>
                <inbound type="feature" confirmed="yes">org.junit.internal.AssumptionViolatedException.describeTo(org.hamcrest.Description)</inbound>
                <inbound type="feature" confirmed="yes">org.junit.internal.ComparisonCriteria.arrayEquals(java.lang.String, java.lang.Object, java.lang.Object)</inbound>
                <inbound type="feature" confirmed="yes">org.junit.internal.ComparisonCriteria.assertArraysAreSameLength(java.lang.Object, java.lang.Object, java.lang.String)</inbound>
                <inbound type="feature" confirmed="yes">org.junit.internal.TextListener.printFailure(org.junit.runner.notification.Failure, java.lang.String)</inbound>
                <inbound type="feature" confirmed="yes">org.junit.internal.TextListener.printFailures(org.junit.runner.Result)</inbound>
                <inbound type="feature" confirmed="yes">org.junit.internal.TextListener.printFooter(org.junit.runner.Result)</inbound>
                <inbound type="feature" confirmed="yes">org.junit.internal.TextListener.printHeader(long)</inbound>
                <inbound type="feature" confirmed="yes">org.junit.internal.runners.MethodRoadie.runTestMethod()</inbound>
                <inbound type="feature" confirmed="yes">org.junit.internal.runners.MethodValidator.validateTestMethods(java.lang.Class, boolean)</inbound>
                <inbound type="feature" confirmed="yes">org.junit.internal.runners.SuiteMethod.testFromSuiteMethod(java.lang.Class)</inbound>
                <inbound type="feature" confirmed="yes">org.junit.internal.runners.rules.RuleFieldValidator.addError(java.util.List, org.junit.runners.model.FrameworkField, java.lang.String)</inbound>
                <inbound type="feature" confirmed="yes">org.junit.internal.runners.statements.ExpectException.evaluate()</inbound>
                <inbound type="feature" confirmed="yes">org.junit.rules.ExpectedException$ExpectedExceptionStatement.evaluate()</inbound>
                <inbound type="feature" confirmed="yes">org.junit.runner.JUnitCore.runMain(org.junit.internal.JUnitSystem, java.lang.String[])</inbound>
                <inbound type="feature" confirmed="yes">org.junit.runner.manipulation.Filter$3.describe()</inbound>
                <inbound type="feature" confirmed="yes">org.junit.runner.notification.Failure.toString()</inbound>
                <inbound type="feature" confirmed="yes">org.junit.runners.Parameterized.getParametersMethod(org.junit.runners.model.TestClass)</inbound>
                <inbound type="feature" confirmed="yes">org.junit.runners.model.FrameworkMethod.validatePublicVoid(boolean, java.util.List)</inbound>
                <inbound type="feature" confirmed="yes">org.junit.runners.model.FrameworkMethod.validatePublicVoidNoArg(boolean, java.util.List)</inbound>
                <inbound type="feature" confirmed="yes">org.junit.runners.model.MultipleFailureException.getMessage()</inbound>
            </feature>
            <feature confirmed="no">
                <name>java.lang.StringBuilder.toString()</name>
                <inbound type="feature" confirmed="yes">junit.extensions.RepeatedTest.toString()</inbound>
                <inbound type="feature" confirmed="yes">junit.framework.Assert.assertNull(java.lang.Object)</inbound>
                <inbound type="feature" confirmed="yes">junit.framework.Assert.failNotSame(java.lang.String, java.lang.Object, java.lang.Object)</inbound>
                <inbound type="feature" confirmed="yes">junit.framework.Assert.failSame(java.lang.String)</inbound>
                <inbound type="feature" confirmed="yes">junit.framework.Assert.format(java.lang.String, java.lang.Object, java.lang.Object)</inbound>
                <inbound type="feature" confirmed="yes">junit.framework.ComparisonCompactor.compactString(java.lang.String)</inbound>
                <inbound type="feature" confirmed="yes">junit.framework.ComparisonCompactor.computeCommonPrefix()</inbound>
                <inbound type="feature" confirmed="yes">junit.framework.ComparisonCompactor.computeCommonSuffix()</inbound>
                <inbound type="feature" confirmed="yes">junit.framework.TestCase.runTest()</inbound>
                <inbound type="feature" confirmed="yes">junit.framework.TestCase.toString()</inbound>
                <inbound type="feature" confirmed="yes">junit.framework.TestFailure.toString()</inbound>
                <inbound type="feature" confirmed="yes">junit.framework.TestSuite.addTestMethod(java.lang.reflect.Method, java.util.List, java.lang.Class)</inbound>
                <inbound type="feature" confirmed="yes">junit.framework.TestSuite.addTestsFromTestCase(java.lang.Class)</inbound>
                <inbound type="feature" confirmed="yes">junit.framework.TestSuite.createTest(java.lang.Class, java.lang.String)</inbound>
                <inbound type="feature" confirmed="yes">junit.framework.TestSuite.testCaseForClass(java.lang.Class)</inbound>
                <inbound type="feature" confirmed="yes">junit.runner.BaseTestRunner.getTest(java.lang.String)</inbound>
                <inbound type="feature" confirmed="yes">junit.runner.BaseTestRunner.truncate(java.lang.String)</inbound>
                <inbound type="feature" confirmed="yes">junit.textui.ResultPrinter.printDefectHeader(junit.framework.TestFailure, int)</inbound>
                <inbound type="feature" confirmed="yes">junit.textui.ResultPrinter.printDefects(java.util.Enumeration, int, java.lang.String)</inbound>
                <inbound type="feature" confirmed="yes">junit.textui.ResultPrinter.printFooter(junit.framework.TestResult)</inbound>
                <inbound type="feature" confirmed="yes">junit.textui.ResultPrinter.printHeader(long)</inbound>
                <inbound type="feature" confirmed="yes">junit.textui.TestRunner.start(java.lang.String[])</inbound>
                <inbound type="feature" confirmed="yes">org.junit.Assert.failNotSame(java.lang.String, java.lang.Object, java.lang.Object)</inbound>
                <inbound type="feature" confirmed="yes">org.junit.Assert.failSame(java.lang.String)</inbound>
                <inbound type="feature" confirmed="yes">org.junit.Assert.format(java.lang.String, java.lang.Object, java.lang.Object)</inbound>
                <inbound type="feature" confirmed="yes">org.junit.Assert.formatClassAndValue(java.lang.Object, java.lang.String)</inbound>
                <inbound type="feature" confirmed="yes">org.junit.ComparisonFailure$ComparisonCompactor.compactString(java.lang.String)</inbound>
                <inbound type="feature" confirmed="yes">org.junit.ComparisonFailure$ComparisonCompactor.computeCommonPrefix()</inbound>
                <inbound type="feature" confirmed="yes">org.junit.ComparisonFailure$ComparisonCompactor.computeCommonSuffix()</inbound>
                <inbound type="feature" confirmed="yes">org.junit.experimental.categories.Categories$CategoryFilter.describe()</inbound>
                <inbound type="feature" confirmed="yes">org.junit.experimental.max.MaxCore.buildRunner(org.junit.runner.Description)</inbound>
                <inbound type="feature" confirmed="yes">org.junit.experimental.max.MaxCore.findLeaves(org.junit.runner.Description, org.junit.runner.Description, java.util.List)</inbound>
                <inbound type="feature" confirmed="yes">org.junit.experimental.results.ResultMatchers$1.describeTo(org.hamcrest.Description)</inbound>
                <inbound type="feature" confirmed="yes">org.junit.experimental.results.ResultMatchers$2.describeTo(org.hamcrest.Description)</inbound>
                <inbound type="feature" confirmed="yes">org.junit.experimental.results.ResultMatchers$3.describeTo(org.hamcrest.Description)</inbound>
                <inbound type="feature" confirmed="yes">org.junit.experimental.theories.Theories$TheoryAnchor.evaluate()</inbound>
                <inbound type="feature" confirmed="yes">org.junit.experimental.theories.Theories.validateDataPointFields(java.util.List)</inbound>
                <inbound type="feature" confirmed="yes">org.junit.experimental.theories.internal.AllMembersSupplier.addArrayValues(java.lang.String, java.util.List, java.lang.Object)</inbound>
                <inbound type="feature" confirmed="yes">org.junit.internal.ArrayComparisonFailure.getMessage()</inbound>
                <inbound type="feature" confirmed="yes">org.junit.internal.AssumptionViolatedException.describeTo(org.hamcrest.Description)</inbound>
                <inbound type="feature" confirmed="yes">org.junit.internal.ComparisonCriteria.arrayEquals(java.lang.String, java.lang.Object, java.lang.Object)</inbound>
                <inbound type="feature" confirmed="yes">org.junit.internal.ComparisonCriteria.assertArraysAreSameLength(java.lang.Object, java.lang.Object, java.lang.String)</inbound>
                <inbound type="feature" confirmed="yes">org.junit.internal.TextListener.printFailure(org.junit.runner.notification.Failure, java.lang.String)</inbound>
                <inbound type="feature" confirmed="yes">org.junit.internal.TextListener.printFailures(org.junit.runner.Result)</inbound>
                <inbound type="feature" confirmed="yes">org.junit.internal.TextListener.printFooter(org.junit.runner.Result)</inbound>
                <inbound type="feature" confirmed="yes">org.junit.internal.TextListener.printHeader(long)</inbound>
                <inbound type="feature" confirmed="yes">org.junit.internal.runners.MethodRoadie.runTestMethod()</inbound>
                <inbound type="feature" confirmed="yes">org.junit.internal.runners.MethodValidator.validateTestMethods(java.lang.Class, boolean)</inbound>
                <inbound type="feature" confirmed="yes">org.junit.internal.runners.SuiteMethod.testFromSuiteMethod(java.lang.Class)</inbound>
                <inbound type="feature" confirmed="yes">org.junit.internal.runners.rules.RuleFieldValidator.addError(java.util.List, org.junit.runners.model.FrameworkField, java.lang.String)</inbound>
                <inbound type="feature" confirmed="yes">org.junit.internal.runners.statements.ExpectException.evaluate()</inbound>
                <inbound type="feature" confirmed="yes">org.junit.rules.ExpectedException$ExpectedExceptionStatement.evaluate()</inbound>
                <inbound type="feature" confirmed="yes">org.junit.runner.JUnitCore.runMain(org.junit.internal.JUnitSystem, java.lang.String[])</inbound>
                <inbound type="feature" confirmed="yes">org.junit.runner.manipulation.Filter$3.describe()</inbound>
                <inbound type="feature" confirmed="yes">org.junit.runner.notification.Failure.toString()</inbound>
                <inbound type="feature" confirmed="yes">org.junit.runners.Parameterized.getParametersMethod(org.junit.runners.model.TestClass)</inbound>
                <inbound type="feature" confirmed="yes">org.junit.runners.model.FrameworkMethod.validatePublicVoid(boolean, java.util.List)</inbound>
                <inbound type="feature" confirmed="yes">org.junit.runners.model.FrameworkMethod.validatePublicVoidNoArg(boolean, java.util.List)</inbound>
                <inbound type="feature" confirmed="yes">org.junit.runners.model.MultipleFailureException.getMessage()</inbound>
            </feature>
        </class>
        <class confirmed="no">
            <name>java.lang.System</name>
            <feature confirmed="no">
                <name>java.lang.System.currentTimeMillis()</name>
                <inbound type="feature" confirmed="yes">junit.textui.TestRunner.doRun(junit.framework.Test, boolean)</inbound>
                <inbound type="feature" confirmed="yes">org.junit.experimental.max.MaxHistory$RememberingListener.MaxHistory$RememberingListener(org.junit.experimental.max.MaxHistory)</inbound>
                <inbound type="feature" confirmed="yes">org.junit.runner.Result$Listener.testRunFinished(org.junit.runner.Result)</inbound>
                <inbound type="feature" confirmed="yes">org.junit.runner.Result$Listener.testRunStarted(org.junit.runner.Description)</inbound>
            </feature>
            <feature confirmed="no">
                <name>java.lang.System.err</name>
                <inbound type="feature" confirmed="yes">junit.textui.TestRunner.main(java.lang.String[])</inbound>
                <inbound type="feature" confirmed="yes">junit.textui.TestRunner.runFailed(java.lang.String)</inbound>
                <inbound type="feature" confirmed="yes">junit.textui.TestRunner.start(java.lang.String[])</inbound>
            </feature>
            <feature confirmed="no">
                <name>java.lang.System.exit(int)</name>
                <inbound type="feature" confirmed="yes">junit.textui.TestRunner.main(java.lang.String[])</inbound>
                <inbound type="feature" confirmed="yes">junit.textui.TestRunner.runFailed(java.lang.String)</inbound>
                <inbound type="feature" confirmed="yes">org.junit.internal.RealSystem.exit(int)</inbound>
            </feature>
            <feature confirmed="no">
                <name>java.lang.System.getProperty(java.lang.String)</name>
                <inbound type="feature" confirmed="yes">junit.runner.BaseTestRunner.getPreferencesFile()</inbound>
            </feature>
            <feature confirmed="no">
                <name>java.lang.System.in</name>
                <inbound type="feature" confirmed="yes">junit.textui.TestRunner.pause(boolean)</inbound>
            </feature>
            <feature confirmed="no">
                <name>java.lang.System.nanoTime()</name>
                <inbound type="feature" confirmed="yes">org.junit.experimental.max.MaxHistory$RememberingListener.testFinished(org.junit.runner.Description)</inbound>
                <inbound type="feature" confirmed="yes">org.junit.experimental.max.MaxHistory$RememberingListener.testStarted(org.junit.runner.Description)</inbound>
            </feature>
            <feature confirmed="no">
                <name>java.lang.System.out</name>
                <inbound type="feature" confirmed="yes">junit.runner.BaseTestRunner.processArguments(java.lang.String[])</inbound>
                <inbound type="feature" confirmed="yes">junit.runner.Version.main(java.lang.String[])</inbound>
                <inbound type="feature" confirmed="yes">junit.textui.TestRunner.TestRunner()</inbound>
                <inbound type="feature" confirmed="yes">org.junit.internal.RealSystem.out()</inbound>
            </feature>
        </class>
        <class confirmed="no">
            <name>java.lang.Thread</name>
            <inbound type="class" confirmed="yes">junit.extensions.ActiveTestSuite$1</inbound>
            <inbound type="class" confirmed="yes">org.junit.internal.runners.statements.FailOnTimeout$1</inbound>
            <feature confirmed="no">
                <name>java.lang.Thread.Thread()</name>
                <inbound type="feature" confirmed="yes">junit.extensions.ActiveTestSuite$1.ActiveTestSuite$1(junit.extensions.ActiveTestSuite, junit.framework.Test, junit.framework.TestResult)</inbound>
                <inbound type="feature" confirmed="yes">org.junit.internal.runners.statements.FailOnTimeout$1.FailOnTimeout$1(org.junit.internal.runners.statements.FailOnTimeout)</inbound>
            </feature>
            <feature confirmed="no">
                <name>java.lang.Thread.getStackTrace()</name>
                <inbound type="feature" confirmed="yes">org.junit.internal.runners.statements.FailOnTimeout.evaluate()</inbound>
            </feature>
            <feature confirmed="no">
                <name>java.lang.Thread.join(long)</name>
                <inbound type="feature" confirmed="yes">org.junit.internal.runners.statements.FailOnTimeout.evaluate()</inbound>
            </feature>
            <feature confirmed="no">
                <name>java.lang.Thread.start()</name>
                <inbound type="feature" confirmed="yes">junit.extensions.ActiveTestSuite.runTest(junit.framework.Test, junit.framework.TestResult)</inbound>
                <inbound type="feature" confirmed="yes">org.junit.internal.runners.statements.FailOnTimeout.evaluate()</inbound>
            </feature>
        </class>
        <class confirmed="no">
            <name>java.lang.ThreadDeath</name>
            <inbound type="feature" confirmed="yes">junit.framework.TestResult.runProtected(junit.framework.Test, junit.framework.Protectable)</inbound>
        </class>
        <class confirmed="no">
            <name>java.lang.Throwable</name>
            <inbound type="feature" confirmed="yes">junit.framework.JUnit4TestAdapterCache$1.testFailure(org.junit.runner.notification.Failure)</inbound>
            <inbound type="feature" confirmed="yes">junit.framework.Protectable.protect()</inbound>
            <inbound type="feature" confirmed="yes">junit.framework.TestCase.runBare()</inbound>
            <inbound type="feature" confirmed="yes">junit.framework.TestCase.runTest()</inbound>
            <inbound type="feature" confirmed="yes">junit.framework.TestFailure.TestFailure(junit.framework.Test, java.lang.Throwable)</inbound>
            <inbound type="feature" confirmed="yes">junit.framework.TestFailure.exceptionMessage()</inbound>
            <inbound type="feature" confirmed="yes">junit.framework.TestFailure.fThrownException</inbound>
            <inbound type="feature" confirmed="yes">junit.framework.TestFailure.isFailure()</inbound>
            <inbound type="feature" confirmed="yes">junit.framework.TestFailure.thrownException()</inbound>
            <inbound type="feature" confirmed="yes">junit.framework.TestFailure.toString()</inbound>
            <inbound type="feature" confirmed="yes">junit.framework.TestFailure.trace()</inbound>
            <inbound type="feature" confirmed="yes">junit.framework.TestListener.addError(junit.framework.Test, java.lang.Throwable)</inbound>
            <inbound type="feature" confirmed="yes">junit.framework.TestResult$1.protect()</inbound>
            <inbound type="feature" confirmed="yes">junit.framework.TestResult.addError(junit.framework.Test, java.lang.Throwable)</inbound>
            <inbound type="feature" confirmed="yes">junit.framework.TestResult.addFailure(junit.framework.Test, junit.framework.AssertionFailedError)</inbound>
            <inbound type="feature" confirmed="yes">junit.framework.TestResult.runProtected(junit.framework.Test, junit.framework.Protectable)</inbound>
            <inbound type="feature" confirmed="yes">junit.framework.TestSuite.createTest(java.lang.Class, java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">junit.framework.TestSuite.exceptionToString(java.lang.Throwable)</inbound>
            <inbound type="feature" confirmed="yes">junit.runner.BaseTestRunner.addError(junit.framework.Test, java.lang.Throwable)</inbound>
            <inbound type="feature" confirmed="yes">junit.runner.BaseTestRunner.addFailure(junit.framework.Test, junit.framework.AssertionFailedError)</inbound>
            <inbound type="feature" confirmed="yes">junit.runner.BaseTestRunner.getFilteredTrace(java.lang.Throwable)</inbound>
            <inbound type="feature" confirmed="yes">junit.runner.BaseTestRunner.getTest(java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">junit.runner.BaseTestRunner.testFailed(int, junit.framework.Test, java.lang.Throwable)</inbound>
            <inbound type="feature" confirmed="yes">junit.textui.ResultPrinter.addError(junit.framework.Test, java.lang.Throwable)</inbound>
            <inbound type="feature" confirmed="yes">junit.textui.TestRunner.testFailed(int, junit.framework.Test, java.lang.Throwable)</inbound>
            <inbound type="feature" confirmed="yes">org.hamcrest.StringDescription.append(char)</inbound>
            <inbound type="feature" confirmed="yes">org.hamcrest.StringDescription.append(java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">org.junit.Assume.assumeNoException(java.lang.Throwable)</inbound>
            <inbound type="class" confirmed="yes">org.junit.Test$None</inbound>
            <inbound type="feature" confirmed="yes">org.junit.experimental.ParallelComputer.getRunner(org.junit.runners.model.RunnerBuilder, java.lang.Class)</inbound>
            <inbound type="feature" confirmed="yes">org.junit.experimental.categories.Categories.Categories(java.lang.Class, org.junit.runners.model.RunnerBuilder)</inbound>
            <inbound type="feature" confirmed="yes">org.junit.experimental.max.CouldNotReadCoreException.CouldNotReadCoreException(java.lang.Throwable)</inbound>
            <inbound type="feature" confirmed="yes">org.junit.experimental.max.MaxCore$1.getRunner()</inbound>
            <inbound type="feature" confirmed="yes">org.junit.experimental.max.MaxHistory.readHistory(java.io.File)</inbound>
            <inbound type="feature" confirmed="yes">org.junit.experimental.runners.Enclosed.Enclosed(java.lang.Class, org.junit.runners.model.RunnerBuilder)</inbound>
            <inbound type="feature" confirmed="yes">org.junit.experimental.theories.Theories$TheoryAnchor$1$1.evaluate()</inbound>
            <inbound type="feature" confirmed="yes">org.junit.experimental.theories.Theories$TheoryAnchor$2.evaluate()</inbound>
            <inbound type="feature" confirmed="yes">org.junit.experimental.theories.Theories$TheoryAnchor.evaluate()</inbound>
            <inbound type="feature" confirmed="yes">org.junit.experimental.theories.Theories$TheoryAnchor.reportParameterizedError(java.lang.Throwable, java.lang.Object[])</inbound>
            <inbound type="feature" confirmed="yes">org.junit.experimental.theories.Theories$TheoryAnchor.runWithAssignment(org.junit.experimental.theories.internal.Assignments)</inbound>
            <inbound type="feature" confirmed="yes">org.junit.experimental.theories.Theories$TheoryAnchor.runWithCompleteAssignment(org.junit.experimental.theories.internal.Assignments)</inbound>
            <inbound type="feature" confirmed="yes">org.junit.experimental.theories.Theories$TheoryAnchor.runWithIncompleteAssignment(org.junit.experimental.theories.internal.Assignments)</inbound>
            <inbound type="feature" confirmed="yes">org.junit.experimental.theories.internal.AllMembersSupplier$MethodParameterValue.getValue()</inbound>
            <inbound type="feature" confirmed="yes">org.junit.experimental.theories.internal.AllMembersSupplier.addMultiPointMethods(java.util.List)</inbound>
            <inbound type="feature" confirmed="yes">org.junit.experimental.theories.internal.ParameterizedAssertionError.ParameterizedAssertionError(java.lang.Throwable, java.lang.String, java.lang.Object[])</inbound>
            <inbound type="feature" confirmed="yes">org.junit.experimental.theories.internal.ParameterizedAssertionError.stringValueOf(java.lang.Object)</inbound>
            <inbound type="feature" confirmed="yes">org.junit.internal.AssumptionViolatedException.AssumptionViolatedException(java.lang.Object, org.hamcrest.Matcher)</inbound>
            <inbound type="feature" confirmed="yes">org.junit.internal.builders.AllDefaultPossibilitiesBuilder.runnerForClass(java.lang.Class)</inbound>
            <inbound type="feature" confirmed="yes">org.junit.internal.builders.JUnit3Builder.runnerForClass(java.lang.Class)</inbound>
            <inbound type="feature" confirmed="yes">org.junit.internal.builders.JUnit4Builder.runnerForClass(java.lang.Class)</inbound>
            <inbound type="feature" confirmed="yes">org.junit.internal.builders.NullBuilder.runnerForClass(java.lang.Class)</inbound>
            <inbound type="feature" confirmed="yes">org.junit.internal.builders.SuiteMethodBuilder.runnerForClass(java.lang.Class)</inbound>
            <inbound type="feature" confirmed="yes">org.junit.internal.requests.FilterRequest.getRunner()</inbound>
            <inbound type="feature" confirmed="yes">org.junit.internal.runners.ClassRoadie.addFailure(java.lang.Throwable)</inbound>
            <inbound type="feature" confirmed="yes">org.junit.internal.runners.ClassRoadie.runAfters()</inbound>
            <inbound type="feature" confirmed="yes">org.junit.internal.runners.ClassRoadie.runBefores()</inbound>
            <inbound type="feature" confirmed="yes">org.junit.internal.runners.ErrorReportingRunner.ErrorReportingRunner(java.lang.Class, java.lang.Throwable)</inbound>
            <inbound type="feature" confirmed="yes">org.junit.internal.runners.ErrorReportingRunner.describeCause(java.lang.Throwable)</inbound>
            <inbound type="feature" confirmed="yes">org.junit.internal.runners.ErrorReportingRunner.getCauses(java.lang.Throwable)</inbound>
            <inbound type="feature" confirmed="yes">org.junit.internal.runners.ErrorReportingRunner.getDescription()</inbound>
            <inbound type="feature" confirmed="yes">org.junit.internal.runners.ErrorReportingRunner.run(org.junit.runner.notification.RunNotifier)</inbound>
            <inbound type="feature" confirmed="yes">org.junit.internal.runners.ErrorReportingRunner.runCause(java.lang.Throwable, org.junit.runner.notification.RunNotifier)</inbound>
            <inbound type="feature" confirmed="yes">org.junit.internal.runners.InitializationError.InitializationError(java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">org.junit.internal.runners.InitializationError.InitializationError(java.lang.Throwable[])</inbound>
            <inbound type="feature" confirmed="yes">org.junit.internal.runners.JUnit38ClassRunner$OldTestClassAdaptingListener.addError(junit.framework.Test, java.lang.Throwable)</inbound>
            <inbound type="feature" confirmed="yes">org.junit.internal.runners.JUnit38ClassRunner$OldTestClassAdaptingListener.addFailure(junit.framework.Test, junit.framework.AssertionFailedError)</inbound>
            <inbound type="feature" confirmed="yes">org.junit.internal.runners.JUnit4ClassRunner.invokeTestMethod(java.lang.reflect.Method, org.junit.runner.notification.RunNotifier)</inbound>
            <inbound type="feature" confirmed="yes">org.junit.internal.runners.JUnit4ClassRunner.testAborted(org.junit.runner.notification.RunNotifier, org.junit.runner.Description, java.lang.Throwable)</inbound>
            <inbound type="feature" confirmed="yes">org.junit.internal.runners.MethodRoadie$1.run()</inbound>
            <inbound type="feature" confirmed="yes">org.junit.internal.runners.MethodRoadie.addFailure(java.lang.Throwable)</inbound>
            <inbound type="feature" confirmed="yes">org.junit.internal.runners.MethodRoadie.runAfters()</inbound>
            <inbound type="feature" confirmed="yes">org.junit.internal.runners.MethodRoadie.runBefores()</inbound>
            <inbound type="feature" confirmed="yes">org.junit.internal.runners.MethodRoadie.runTestMethod()</inbound>
            <inbound type="feature" confirmed="yes">org.junit.internal.runners.MethodValidator.validateNoArgConstructor()</inbound>
            <inbound type="feature" confirmed="yes">org.junit.internal.runners.SuiteMethod.SuiteMethod(java.lang.Class)</inbound>
            <inbound type="feature" confirmed="yes">org.junit.internal.runners.SuiteMethod.testFromSuiteMethod(java.lang.Class)</inbound>
            <inbound type="feature" confirmed="yes">org.junit.internal.runners.TestMethod.isUnexpected(java.lang.Throwable)</inbound>
            <inbound type="feature" confirmed="yes">org.junit.internal.runners.model.EachTestNotifier.addFailedAssumption(org.junit.internal.AssumptionViolatedException)</inbound>
            <inbound type="feature" confirmed="yes">org.junit.internal.runners.model.EachTestNotifier.addFailure(java.lang.Throwable)</inbound>
            <inbound type="feature" confirmed="yes">org.junit.internal.runners.model.EachTestNotifier.addMultipleFailureException(org.junit.runners.model.MultipleFailureException)</inbound>
            <inbound type="feature" confirmed="yes">org.junit.internal.runners.model.ReflectiveCallable.run()</inbound>
            <inbound type="feature" confirmed="yes">org.junit.internal.runners.model.ReflectiveCallable.runReflectiveCall()</inbound>
            <inbound type="feature" confirmed="yes">org.junit.internal.runners.statements.ExpectException.evaluate()</inbound>
            <inbound type="feature" confirmed="yes">org.junit.internal.runners.statements.Fail.Fail(java.lang.Throwable)</inbound>
            <inbound type="feature" confirmed="yes">org.junit.internal.runners.statements.Fail.evaluate()</inbound>
            <inbound type="feature" confirmed="yes">org.junit.internal.runners.statements.Fail.fError</inbound>
            <inbound type="feature" confirmed="yes">org.junit.internal.runners.statements.FailOnTimeout$1.run()</inbound>
            <inbound type="feature" confirmed="yes">org.junit.internal.runners.statements.FailOnTimeout.FailOnTimeout(org.junit.runners.model.Statement, long)</inbound>
            <inbound type="feature" confirmed="yes">org.junit.internal.runners.statements.FailOnTimeout.access$202(org.junit.internal.runners.statements.FailOnTimeout, java.lang.Throwable)</inbound>
            <inbound type="feature" confirmed="yes">org.junit.internal.runners.statements.FailOnTimeout.evaluate()</inbound>
            <inbound type="feature" confirmed="yes">org.junit.internal.runners.statements.FailOnTimeout.fThrown</inbound>
            <inbound type="feature" confirmed="yes">org.junit.internal.runners.statements.InvokeMethod.evaluate()</inbound>
            <inbound type="feature" confirmed="yes">org.junit.internal.runners.statements.RunAfters.evaluate()</inbound>
            <inbound type="feature" confirmed="yes">org.junit.internal.runners.statements.RunBefores.evaluate()</inbound>
            <inbound type="feature" confirmed="yes">org.junit.rules.ErrorCollector.addError(java.lang.Throwable)</inbound>
            <inbound type="feature" confirmed="yes">org.junit.rules.ErrorCollector.checkSucceeds(java.util.concurrent.Callable)</inbound>
            <inbound type="feature" confirmed="yes">org.junit.rules.ErrorCollector.verify()</inbound>
            <inbound type="feature" confirmed="yes">org.junit.rules.ExpectedException$1.matchesSafely(java.lang.Object)</inbound>
            <inbound type="feature" confirmed="yes">org.junit.rules.ExpectedException$1.matchesSafely(java.lang.Throwable)</inbound>
            <inbound type="feature" confirmed="yes">org.junit.rules.ExpectedException$ExpectedExceptionStatement.evaluate()</inbound>
            <inbound type="feature" confirmed="yes">org.junit.rules.ExternalResource$1.evaluate()</inbound>
            <inbound type="feature" confirmed="yes">org.junit.rules.ExternalResource.before()</inbound>
            <inbound type="feature" confirmed="yes">org.junit.rules.RunRules.evaluate()</inbound>
            <inbound type="feature" confirmed="yes">org.junit.rules.TemporaryFolder.before()</inbound>
            <inbound type="feature" confirmed="yes">org.junit.rules.TestWatcher$1.evaluate()</inbound>
            <inbound type="feature" confirmed="yes">org.junit.rules.TestWatcher.failed(java.lang.Throwable, org.junit.runner.Description)</inbound>
            <inbound type="feature" confirmed="yes">org.junit.rules.TestWatchman$1.evaluate()</inbound>
            <inbound type="feature" confirmed="yes">org.junit.rules.TestWatchman.failed(java.lang.Throwable, org.junit.runners.model.FrameworkMethod)</inbound>
            <inbound type="feature" confirmed="yes">org.junit.rules.Verifier$1.evaluate()</inbound>
            <inbound type="feature" confirmed="yes">org.junit.rules.Verifier.verify()</inbound>
            <inbound type="feature" confirmed="yes">org.junit.runner.Computer$1.runnerForClass(java.lang.Class)</inbound>
            <inbound type="feature" confirmed="yes">org.junit.runner.Computer.getRunner(org.junit.runners.model.RunnerBuilder, java.lang.Class)</inbound>
            <inbound type="feature" confirmed="yes">org.junit.runner.JUnitCore.runMain(org.junit.internal.JUnitSystem, java.lang.String[])</inbound>
            <inbound type="feature" confirmed="yes">org.junit.runner.Request.errorReport(java.lang.Class, java.lang.Throwable)</inbound>
            <inbound type="feature" confirmed="yes">org.junit.runner.notification.Failure.Failure(org.junit.runner.Description, java.lang.Throwable)</inbound>
            <inbound type="feature" confirmed="yes">org.junit.runner.notification.Failure.fThrownException</inbound>
            <inbound type="feature" confirmed="yes">org.junit.runner.notification.Failure.getException()</inbound>
            <inbound type="feature" confirmed="yes">org.junit.runner.notification.Failure.getMessage()</inbound>
            <inbound type="feature" confirmed="yes">org.junit.runner.notification.Failure.getTrace()</inbound>
            <inbound type="feature" confirmed="yes">org.junit.runner.notification.Failure.toString()</inbound>
            <inbound type="feature" confirmed="yes">org.junit.runner.notification.RunNotifier$SafeNotifier.run()</inbound>
            <inbound type="feature" confirmed="yes">org.junit.runners.AllTests.AllTests(java.lang.Class)</inbound>
            <inbound type="feature" confirmed="yes">org.junit.runners.BlockJUnit4ClassRunner$1.runReflectiveCall()</inbound>
            <inbound type="feature" confirmed="yes">org.junit.runners.BlockJUnit4ClassRunner.methodBlock(org.junit.runners.model.FrameworkMethod)</inbound>
            <inbound type="feature" confirmed="yes">org.junit.runners.Parameterized.Parameterized(java.lang.Class)</inbound>
            <inbound type="feature" confirmed="yes">org.junit.runners.Parameterized.getParametersList(org.junit.runners.model.TestClass)</inbound>
            <inbound type="feature" confirmed="yes">org.junit.runners.ParentRunner.run(org.junit.runner.notification.RunNotifier)</inbound>
            <inbound type="feature" confirmed="yes">org.junit.runners.ParentRunner.runLeaf(org.junit.runners.model.Statement, org.junit.runner.Description, org.junit.runner.notification.RunNotifier)</inbound>
            <inbound type="feature" confirmed="yes">org.junit.runners.model.FrameworkMethod$1.runReflectiveCall()</inbound>
            <inbound type="feature" confirmed="yes">org.junit.runners.model.FrameworkMethod.invokeExplosively(java.lang.Object, java.lang.Object[])</inbound>
            <inbound type="feature" confirmed="yes">org.junit.runners.model.InitializationError.InitializationError(java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">org.junit.runners.model.InitializationError.InitializationError(java.lang.Throwable)</inbound>
            <inbound type="feature" confirmed="yes">org.junit.runners.model.MultipleFailureException.assertEmpty(java.util.List)</inbound>
            <inbound type="feature" confirmed="yes">org.junit.runners.model.MultipleFailureException.getMessage()</inbound>
            <inbound type="feature" confirmed="yes">org.junit.runners.model.RunnerBuilder.runnerForClass(java.lang.Class)</inbound>
            <inbound type="feature" confirmed="yes">org.junit.runners.model.RunnerBuilder.safeRunnerForClass(java.lang.Class)</inbound>
            <inbound type="feature" confirmed="yes">org.junit.runners.model.Statement.evaluate()</inbound>
            <inbound type="feature" confirmed="yes">org.junit.runners.model.TestClass.getAnnotatedFieldValues(java.lang.Object, java.lang.Class, java.lang.Class)</inbound>
            <feature confirmed="no">
                <name>java.lang.Throwable.Throwable()</name>
                <inbound type="feature" confirmed="yes">org.junit.Test$None.Test$None()</inbound>
            </feature>
            <feature confirmed="no">
                <name>java.lang.Throwable.getCause()</name>
                <inbound type="feature" confirmed="yes">org.junit.internal.runners.ErrorReportingRunner.getCauses(java.lang.Throwable)</inbound>
            </feature>
            <feature confirmed="no">
                <name>java.lang.Throwable.getMessage()</name>
                <inbound type="feature" confirmed="yes">junit.framework.TestFailure.exceptionMessage()</inbound>
                <inbound type="feature" confirmed="yes">junit.framework.TestFailure.toString()</inbound>
                <inbound type="feature" confirmed="yes">org.junit.rules.ExpectedException$1.matchesSafely(java.lang.Throwable)</inbound>
                <inbound type="feature" confirmed="yes">org.junit.runner.notification.Failure.getMessage()</inbound>
                <inbound type="feature" confirmed="yes">org.junit.runner.notification.Failure.toString()</inbound>
                <inbound type="feature" confirmed="yes">org.junit.runners.model.MultipleFailureException.getMessage()</inbound>
            </feature>
            <feature confirmed="no">
                <name>java.lang.Throwable.printStackTrace(java.io.PrintWriter)</name>
                <inbound type="feature" confirmed="yes">junit.framework.TestFailure.trace()</inbound>
                <inbound type="feature" confirmed="yes">junit.framework.TestSuite.exceptionToString(java.lang.Throwable)</inbound>
                <inbound type="feature" confirmed="yes">junit.runner.BaseTestRunner.getFilteredTrace(java.lang.Throwable)</inbound>
                <inbound type="feature" confirmed="yes">org.junit.runner.notification.Failure.getTrace()</inbound>
            </feature>
            <feature confirmed="no">
                <name>java.lang.Throwable.toString()</name>
                <inbound type="feature" confirmed="yes">junit.runner.BaseTestRunner.getTest(java.lang.String)</inbound>
            </feature>
        </class>
        <class confirmed="no">
            <name>java.lang.UnsupportedOperationException</name>
            <feature confirmed="no">
                <name>java.lang.UnsupportedOperationException.UnsupportedOperationException(java.lang.String)</name>
                <inbound type="feature" confirmed="yes">org.hamcrest.internal.ArrayIterator.remove()</inbound>
            </feature>
        </class>
        <class confirmed="no">
            <name>java.lang.Void</name>
            <feature confirmed="no">
                <name>java.lang.Void.TYPE</name>
                <inbound type="feature" confirmed="yes">junit.framework.TestSuite.isTestMethod(java.lang.reflect.Method)</inbound>
                <inbound type="feature" confirmed="yes">org.junit.internal.runners.MethodValidator.validateTestMethods(java.lang.Class, boolean)</inbound>
                <inbound type="feature" confirmed="yes">org.junit.runners.model.FrameworkMethod.validatePublicVoid(boolean, java.util.List)</inbound>
            </feature>
        </class>
    </package>
    <package confirmed="no">
        <name>java.lang.annotation</name>
        <class confirmed="no">
            <name>java.lang.annotation.Annotation</name>
            <inbound type="feature" confirmed="yes">junit.framework.JUnit4TestAdapter.isIgnored(org.junit.runner.Description)</inbound>
            <inbound type="class" confirmed="yes">org.hamcrest.Factory</inbound>
            <inbound type="class" confirmed="yes">org.junit.After</inbound>
            <inbound type="class" confirmed="yes">org.junit.AfterClass</inbound>
            <inbound type="class" confirmed="yes">org.junit.Before</inbound>
            <inbound type="class" confirmed="yes">org.junit.BeforeClass</inbound>
            <inbound type="class" confirmed="yes">org.junit.ClassRule</inbound>
            <inbound type="class" confirmed="yes">org.junit.Ignore</inbound>
            <inbound type="class" confirmed="yes">org.junit.Rule</inbound>
            <inbound type="class" confirmed="yes">org.junit.Test</inbound>
            <inbound type="feature" confirmed="yes">org.junit.experimental.categories.Categories$CategoryFilter.directCategories(org.junit.runner.Description)</inbound>
            <inbound type="class" confirmed="yes">org.junit.experimental.categories.Categories$ExcludeCategory</inbound>
            <inbound type="class" confirmed="yes">org.junit.experimental.categories.Categories$IncludeCategory</inbound>
            <inbound type="feature" confirmed="yes">org.junit.experimental.categories.Categories.assertNoDescendantsHaveCategoryAnnotations(org.junit.runner.Description)</inbound>
            <inbound type="feature" confirmed="yes">org.junit.experimental.categories.Categories.getExcludedCategory(java.lang.Class)</inbound>
            <inbound type="feature" confirmed="yes">org.junit.experimental.categories.Categories.getIncludedCategory(java.lang.Class)</inbound>
            <inbound type="class" confirmed="yes">org.junit.experimental.categories.Category</inbound>
            <inbound type="feature" confirmed="yes">org.junit.experimental.max.MaxCore.findLeaves(org.junit.runner.Description, org.junit.runner.Description, java.util.List)</inbound>
            <inbound type="class" confirmed="yes">org.junit.experimental.theories.DataPoint</inbound>
            <inbound type="class" confirmed="yes">org.junit.experimental.theories.DataPoints</inbound>
            <inbound type="feature" confirmed="yes">org.junit.experimental.theories.ParameterSignature.ParameterSignature(java.lang.Class, java.lang.annotation.Annotation[])</inbound>
            <inbound type="feature" confirmed="yes">org.junit.experimental.theories.ParameterSignature.annotations</inbound>
            <inbound type="feature" confirmed="yes">org.junit.experimental.theories.ParameterSignature.findDeepAnnotation(java.lang.Class)</inbound>
            <inbound type="feature" confirmed="yes">org.junit.experimental.theories.ParameterSignature.findDeepAnnotation(java.lang.annotation.Annotation[], java.lang.Class, int)</inbound>
            <inbound type="feature" confirmed="yes">org.junit.experimental.theories.ParameterSignature.getAnnotation(java.lang.Class)</inbound>
            <inbound type="feature" confirmed="yes">org.junit.experimental.theories.ParameterSignature.getAnnotations()</inbound>
            <inbound type="feature" confirmed="yes">org.junit.experimental.theories.ParameterSignature.hasAnnotation(java.lang.Class)</inbound>
            <inbound type="feature" confirmed="yes">org.junit.experimental.theories.ParameterSignature.signatures(java.lang.Class[], java.lang.annotation.Annotation[][])</inbound>
            <inbound type="feature" confirmed="yes">org.junit.experimental.theories.ParameterSignature.signatures(java.lang.reflect.Constructor)</inbound>
            <inbound type="feature" confirmed="yes">org.junit.experimental.theories.ParameterSignature.signatures(java.lang.reflect.Method)</inbound>
            <inbound type="class" confirmed="yes">org.junit.experimental.theories.ParametersSuppliedBy</inbound>
            <inbound type="feature" confirmed="yes">org.junit.experimental.theories.Theories$TheoryAnchor.nullsOk()</inbound>
            <inbound type="feature" confirmed="yes">org.junit.experimental.theories.Theories.validateDataPointFields(java.util.List)</inbound>
            <inbound type="feature" confirmed="yes">org.junit.experimental.theories.Theories.validateTestMethods(java.util.List)</inbound>
            <inbound type="class" confirmed="yes">org.junit.experimental.theories.Theory</inbound>
            <inbound type="feature" confirmed="yes">org.junit.experimental.theories.internal.AllMembersSupplier.addFields(org.junit.experimental.theories.ParameterSignature, java.util.List)</inbound>
            <inbound type="feature" confirmed="yes">org.junit.experimental.theories.internal.Assignments.getAnnotatedSupplier(org.junit.experimental.theories.ParameterSignature)</inbound>
            <inbound type="class" confirmed="yes">org.junit.experimental.theories.suppliers.TestedOn</inbound>
            <inbound type="feature" confirmed="yes">org.junit.experimental.theories.suppliers.TestedOnSupplier.getValueSources(org.junit.experimental.theories.ParameterSignature)</inbound>
            <inbound type="feature" confirmed="yes">org.junit.internal.builders.AnnotatedBuilder.runnerForClass(java.lang.Class)</inbound>
            <inbound type="feature" confirmed="yes">org.junit.internal.builders.IgnoredBuilder.runnerForClass(java.lang.Class)</inbound>
            <inbound type="feature" confirmed="yes">org.junit.internal.runners.JUnit38ClassRunner.makeDescription(junit.framework.Test)</inbound>
            <inbound type="feature" confirmed="yes">org.junit.internal.runners.JUnit4ClassRunner.classAnnotations()</inbound>
            <inbound type="feature" confirmed="yes">org.junit.internal.runners.JUnit4ClassRunner.getDescription()</inbound>
            <inbound type="feature" confirmed="yes">org.junit.internal.runners.JUnit4ClassRunner.methodDescription(java.lang.reflect.Method)</inbound>
            <inbound type="feature" confirmed="yes">org.junit.internal.runners.JUnit4ClassRunner.testAnnotations(java.lang.reflect.Method)</inbound>
            <inbound type="feature" confirmed="yes">org.junit.internal.runners.TestClass.getAnnotatedMethods(java.lang.Class)</inbound>
            <inbound type="feature" confirmed="yes">org.junit.internal.runners.TestMethod.getExpectedException()</inbound>
            <inbound type="feature" confirmed="yes">org.junit.internal.runners.TestMethod.getTimeout()</inbound>
            <inbound type="feature" confirmed="yes">org.junit.internal.runners.TestMethod.isIgnored()</inbound>
            <inbound type="feature" confirmed="yes">org.junit.runner.Description.Description(java.lang.String, java.lang.annotation.Annotation[])</inbound>
            <inbound type="feature" confirmed="yes">org.junit.runner.Description.childlessCopy()</inbound>
            <inbound type="feature" confirmed="yes">org.junit.runner.Description.createSuiteDescription(java.lang.Class)</inbound>
            <inbound type="feature" confirmed="yes">org.junit.runner.Description.createSuiteDescription(java.lang.String, java.lang.annotation.Annotation[])</inbound>
            <inbound type="feature" confirmed="yes">org.junit.runner.Description.createTestDescription(java.lang.Class, java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">org.junit.runner.Description.createTestDescription(java.lang.Class, java.lang.String, java.lang.annotation.Annotation[])</inbound>
            <inbound type="feature" confirmed="yes">org.junit.runner.Description.fAnnotations</inbound>
            <inbound type="feature" confirmed="yes">org.junit.runner.Description.getAnnotation(java.lang.Class)</inbound>
            <inbound type="feature" confirmed="yes">org.junit.runner.Description.getAnnotations()</inbound>
            <inbound type="feature" confirmed="yes">org.junit.runner.Description.static {}</inbound>
            <inbound type="feature" confirmed="yes">org.junit.runner.JUnitCore.runMain(org.junit.internal.JUnitSystem, java.lang.String[])</inbound>
            <inbound type="class" confirmed="yes">org.junit.runner.RunWith</inbound>
            <inbound type="feature" confirmed="yes">org.junit.runners.BlockJUnit4ClassRunner.describeChild(org.junit.runners.model.FrameworkMethod)</inbound>
            <inbound type="feature" confirmed="yes">org.junit.runners.BlockJUnit4ClassRunner.possiblyExpectingExceptions(org.junit.runners.model.FrameworkMethod, java.lang.Object, org.junit.runners.model.Statement)</inbound>
            <inbound type="feature" confirmed="yes">org.junit.runners.BlockJUnit4ClassRunner.runChild(org.junit.runners.model.FrameworkMethod, org.junit.runner.notification.RunNotifier)</inbound>
            <inbound type="feature" confirmed="yes">org.junit.runners.BlockJUnit4ClassRunner.withPotentialTimeout(org.junit.runners.model.FrameworkMethod, java.lang.Object, org.junit.runners.model.Statement)</inbound>
            <inbound type="class" confirmed="yes">org.junit.runners.Parameterized$Parameters</inbound>
            <inbound type="feature" confirmed="yes">org.junit.runners.ParentRunner.getDescription()</inbound>
            <inbound type="class" confirmed="yes">org.junit.runners.Suite$SuiteClasses</inbound>
            <inbound type="feature" confirmed="yes">org.junit.runners.Suite.getAnnotatedClasses(java.lang.Class)</inbound>
            <inbound type="feature" confirmed="yes">org.junit.runners.model.FrameworkField.getAnnotations()</inbound>
            <inbound type="feature" confirmed="yes">org.junit.runners.model.FrameworkMember.getAnnotations()</inbound>
            <inbound type="feature" confirmed="yes">org.junit.runners.model.FrameworkMethod.getAnnotation(java.lang.Class)</inbound>
            <inbound type="feature" confirmed="yes">org.junit.runners.model.FrameworkMethod.getAnnotations()</inbound>
            <inbound type="feature" confirmed="yes">org.junit.runners.model.TestClass.addToAnnotationLists(org.junit.runners.model.FrameworkMember, java.util.Map)</inbound>
            <inbound type="feature" confirmed="yes">org.junit.runners.model.TestClass.getAnnotations()</inbound>
            <feature confirmed="no">
                <name>java.lang.annotation.Annotation.annotationType()</name>
                <inbound type="feature" confirmed="yes">org.junit.experimental.theories.ParameterSignature.findDeepAnnotation(java.lang.annotation.Annotation[], java.lang.Class, int)</inbound>
                <inbound type="feature" confirmed="yes">org.junit.runner.Description.getAnnotation(java.lang.Class)</inbound>
                <inbound type="feature" confirmed="yes">org.junit.runners.model.TestClass.addToAnnotationLists(org.junit.runners.model.FrameworkMember, java.util.Map)</inbound>
            </feature>
        </class>
    </package>
    <package confirmed="no">
        <name>java.lang.reflect</name>
        <class confirmed="no">
            <name>java.lang.reflect.Array</name>
            <feature confirmed="no">
                <name>java.lang.reflect.Array.get(java.lang.Object, int)</name>
                <inbound type="feature" confirmed="yes">org.hamcrest.core.IsEqual.areArrayElementsEqual(java.lang.Object, java.lang.Object)</inbound>
                <inbound type="feature" confirmed="yes">org.hamcrest.internal.ArrayIterator.next()</inbound>
                <inbound type="feature" confirmed="yes">org.junit.experimental.theories.internal.AllMembersSupplier.addArrayValues(java.lang.String, java.util.List, java.lang.Object)</inbound>
                <inbound type="feature" confirmed="yes">org.junit.internal.ComparisonCriteria.arrayEquals(java.lang.String, java.lang.Object, java.lang.Object)</inbound>
            </feature>
            <feature confirmed="no">
                <name>java.lang.reflect.Array.getLength(java.lang.Object)</name>
                <inbound type="feature" confirmed="yes">org.hamcrest.core.IsEqual.areArrayElementsEqual(java.lang.Object, java.lang.Object)</inbound>
                <inbound type="feature" confirmed="yes">org.hamcrest.core.IsEqual.areArrayLengthsEqual(java.lang.Object, java.lang.Object)</inbound>
                <inbound type="feature" confirmed="yes">org.hamcrest.internal.ArrayIterator.hasNext()</inbound>
                <inbound type="feature" confirmed="yes">org.junit.experimental.theories.internal.AllMembersSupplier.addArrayValues(java.lang.String, java.util.List, java.lang.Object)</inbound>
                <inbound type="feature" confirmed="yes">org.junit.internal.ComparisonCriteria.assertArraysAreSameLength(java.lang.Object, java.lang.Object, java.lang.String)</inbound>
            </feature>
        </class>
        <class confirmed="no">
            <name>java.lang.reflect.Constructor</name>
            <inbound type="feature" confirmed="yes">junit.framework.TestSuite.addTestsFromTestCase(java.lang.Class)</inbound>
            <inbound type="feature" confirmed="yes">junit.framework.TestSuite.createTest(java.lang.Class, java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">junit.framework.TestSuite.getTestConstructor(java.lang.Class)</inbound>
            <inbound type="feature" confirmed="yes">org.junit.experimental.theories.ParameterSignature.signatures(java.lang.reflect.Constructor)</inbound>
            <inbound type="feature" confirmed="yes">org.junit.experimental.theories.Theories$TheoryAnchor$1.createTest()</inbound>
            <inbound type="feature" confirmed="yes">org.junit.experimental.theories.internal.Assignments.allUnassigned(java.lang.reflect.Method, org.junit.runners.model.TestClass)</inbound>
            <inbound type="feature" confirmed="yes">org.junit.experimental.theories.internal.Assignments.getConstructorParameterCount()</inbound>
            <inbound type="feature" confirmed="yes">org.junit.internal.builders.AnnotatedBuilder.buildRunner(java.lang.Class, java.lang.Class)</inbound>
            <inbound type="feature" confirmed="yes">org.junit.internal.runners.JUnit4ClassRunner.createTest()</inbound>
            <inbound type="feature" confirmed="yes">org.junit.internal.runners.MethodValidator.validateNoArgConstructor()</inbound>
            <inbound type="feature" confirmed="yes">org.junit.internal.runners.TestClass.getConstructor()</inbound>
            <inbound type="feature" confirmed="yes">org.junit.runners.BlockJUnit4ClassRunner.createTest()</inbound>
            <inbound type="feature" confirmed="yes">org.junit.runners.BlockJUnit4ClassRunner.hasOneConstructor()</inbound>
            <inbound type="feature" confirmed="yes">org.junit.runners.BlockJUnit4ClassRunner.validateZeroArgConstructor(java.util.List)</inbound>
            <inbound type="feature" confirmed="yes">org.junit.runners.Parameterized$TestClassRunnerForParameters.createTest()</inbound>
            <inbound type="feature" confirmed="yes">org.junit.runners.model.TestClass.TestClass(java.lang.Class)</inbound>
            <inbound type="feature" confirmed="yes">org.junit.runners.model.TestClass.getOnlyConstructor()</inbound>
            <feature confirmed="no">
                <name>java.lang.reflect.Constructor.getParameterAnnotations()</name>
                <inbound type="feature" confirmed="yes">org.junit.experimental.theories.ParameterSignature.signatures(java.lang.reflect.Constructor)</inbound>
            </feature>
            <feature confirmed="no">
                <name>java.lang.reflect.Constructor.getParameterTypes()</name>
                <inbound type="feature" confirmed="yes">junit.framework.TestSuite.createTest(java.lang.Class, java.lang.String)</inbound>
                <inbound type="feature" confirmed="yes">org.junit.experimental.theories.ParameterSignature.signatures(java.lang.reflect.Constructor)</inbound>
                <inbound type="feature" confirmed="yes">org.junit.runners.BlockJUnit4ClassRunner.validateZeroArgConstructor(java.util.List)</inbound>
            </feature>
            <feature confirmed="no">
                <name>java.lang.reflect.Constructor.newInstance(java.lang.Object[])</name>
                <inbound type="feature" confirmed="yes">junit.framework.TestSuite.createTest(java.lang.Class, java.lang.String)</inbound>
                <inbound type="feature" confirmed="yes">org.junit.experimental.theories.Theories$TheoryAnchor$1.createTest()</inbound>
                <inbound type="feature" confirmed="yes">org.junit.internal.builders.AnnotatedBuilder.buildRunner(java.lang.Class, java.lang.Class)</inbound>
                <inbound type="feature" confirmed="yes">org.junit.internal.runners.JUnit4ClassRunner.createTest()</inbound>
                <inbound type="feature" confirmed="yes">org.junit.runners.BlockJUnit4ClassRunner.createTest()</inbound>
                <inbound type="feature" confirmed="yes">org.junit.runners.Parameterized$TestClassRunnerForParameters.createTest()</inbound>
            </feature>
        </class>
        <class confirmed="no">
            <name>java.lang.reflect.Field</name>
            <inbound type="feature" confirmed="yes">org.junit.experimental.theories.Theories.validateDataPointFields(java.util.List)</inbound>
            <inbound type="feature" confirmed="yes">org.junit.experimental.theories.internal.AllMembersSupplier.addFields(org.junit.experimental.theories.ParameterSignature, java.util.List)</inbound>
            <inbound type="feature" confirmed="yes">org.junit.experimental.theories.internal.AllMembersSupplier.getStaticFieldValue(java.lang.reflect.Field)</inbound>
            <inbound type="feature" confirmed="yes">org.junit.runners.model.FrameworkField.FrameworkField(java.lang.reflect.Field)</inbound>
            <inbound type="feature" confirmed="yes">org.junit.runners.model.FrameworkField.fField</inbound>
            <inbound type="feature" confirmed="yes">org.junit.runners.model.FrameworkField.get(java.lang.Object)</inbound>
            <inbound type="feature" confirmed="yes">org.junit.runners.model.FrameworkField.getAnnotations()</inbound>
            <inbound type="feature" confirmed="yes">org.junit.runners.model.FrameworkField.getField()</inbound>
            <inbound type="feature" confirmed="yes">org.junit.runners.model.FrameworkField.getName()</inbound>
            <inbound type="feature" confirmed="yes">org.junit.runners.model.FrameworkField.getType()</inbound>
            <inbound type="feature" confirmed="yes">org.junit.runners.model.FrameworkField.isPublic()</inbound>
            <inbound type="feature" confirmed="yes">org.junit.runners.model.FrameworkField.isStatic()</inbound>
            <inbound type="feature" confirmed="yes">org.junit.runners.model.TestClass.TestClass(java.lang.Class)</inbound>
            <feature confirmed="no">
                <name>java.lang.reflect.Field.get(java.lang.Object)</name>
                <inbound type="feature" confirmed="yes">org.junit.experimental.theories.internal.AllMembersSupplier.getStaticFieldValue(java.lang.reflect.Field)</inbound>
                <inbound type="feature" confirmed="yes">org.junit.runners.model.FrameworkField.get(java.lang.Object)</inbound>
            </feature>
            <feature confirmed="no">
                <name>java.lang.reflect.Field.getAnnotation(java.lang.Class)</name>
                <inbound type="feature" confirmed="yes">org.junit.experimental.theories.Theories.validateDataPointFields(java.util.List)</inbound>
                <inbound type="feature" confirmed="yes">org.junit.experimental.theories.internal.AllMembersSupplier.addFields(org.junit.experimental.theories.ParameterSignature, java.util.List)</inbound>
            </feature>
            <feature confirmed="no">
                <name>java.lang.reflect.Field.getAnnotations()</name>
                <inbound type="feature" confirmed="yes">org.junit.runners.model.FrameworkField.getAnnotations()</inbound>
            </feature>
            <feature confirmed="no">
                <name>java.lang.reflect.Field.getModifiers()</name>
                <inbound type="feature" confirmed="yes">org.junit.experimental.theories.Theories.validateDataPointFields(java.util.List)</inbound>
                <inbound type="feature" confirmed="yes">org.junit.experimental.theories.internal.AllMembersSupplier.addFields(org.junit.experimental.theories.ParameterSignature, java.util.List)</inbound>
                <inbound type="feature" confirmed="yes">org.junit.runners.model.FrameworkField.isPublic()</inbound>
                <inbound type="feature" confirmed="yes">org.junit.runners.model.FrameworkField.isStatic()</inbound>
            </feature>
            <feature confirmed="no">
                <name>java.lang.reflect.Field.getName()</name>
                <inbound type="feature" confirmed="yes">org.junit.experimental.theories.Theories.validateDataPointFields(java.util.List)</inbound>
                <inbound type="feature" confirmed="yes">org.junit.experimental.theories.internal.AllMembersSupplier.addFields(org.junit.experimental.theories.ParameterSignature, java.util.List)</inbound>
                <inbound type="feature" confirmed="yes">org.junit.runners.model.FrameworkField.getName()</inbound>
            </feature>
            <feature confirmed="no">
                <name>java.lang.reflect.Field.getType()</name>
                <inbound type="feature" confirmed="yes">org.junit.experimental.theories.internal.AllMembersSupplier.addFields(org.junit.experimental.theories.ParameterSignature, java.util.List)</inbound>
                <inbound type="feature" confirmed="yes">org.junit.runners.model.FrameworkField.getType()</inbound>
            </feature>
        </class>
        <class confirmed="no">
            <name>java.lang.reflect.InvocationTargetException</name>
            <inbound type="feature" confirmed="yes">junit.framework.TestCase.runTest()</inbound>
            <inbound type="feature" confirmed="yes">junit.framework.TestSuite.createTest(java.lang.Class, java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">junit.runner.BaseTestRunner.getTest(java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">org.junit.experimental.theories.Theories$TheoryAnchor.runWithCompleteAssignment(org.junit.experimental.theories.internal.Assignments)</inbound>
            <inbound type="feature" confirmed="yes">org.junit.internal.runners.ClassRoadie.runAfters()</inbound>
            <inbound type="feature" confirmed="yes">org.junit.internal.runners.ClassRoadie.runBefores()</inbound>
            <inbound type="feature" confirmed="yes">org.junit.internal.runners.ErrorReportingRunner.getCauses(java.lang.Throwable)</inbound>
            <inbound type="feature" confirmed="yes">org.junit.internal.runners.JUnit4ClassRunner.invokeTestMethod(java.lang.reflect.Method, org.junit.runner.notification.RunNotifier)</inbound>
            <inbound type="feature" confirmed="yes">org.junit.internal.runners.MethodRoadie.runAfters()</inbound>
            <inbound type="feature" confirmed="yes">org.junit.internal.runners.MethodRoadie.runBefores()</inbound>
            <inbound type="feature" confirmed="yes">org.junit.internal.runners.MethodRoadie.runTestMethod()</inbound>
            <inbound type="feature" confirmed="yes">org.junit.internal.runners.SuiteMethod.testFromSuiteMethod(java.lang.Class)</inbound>
            <inbound type="feature" confirmed="yes">org.junit.internal.runners.TestMethod.invoke(java.lang.Object)</inbound>
            <inbound type="feature" confirmed="yes">org.junit.internal.runners.model.ReflectiveCallable.run()</inbound>
            <feature confirmed="no">
                <name>java.lang.reflect.InvocationTargetException.fillInStackTrace()</name>
                <inbound type="feature" confirmed="yes">junit.framework.TestCase.runTest()</inbound>
            </feature>
            <feature confirmed="no">
                <name>java.lang.reflect.InvocationTargetException.getCause()</name>
                <inbound type="feature" confirmed="yes">org.junit.internal.runners.JUnit4ClassRunner.invokeTestMethod(java.lang.reflect.Method, org.junit.runner.notification.RunNotifier)</inbound>
                <inbound type="feature" confirmed="yes">org.junit.internal.runners.SuiteMethod.testFromSuiteMethod(java.lang.Class)</inbound>
            </feature>
            <feature confirmed="no">
                <name>java.lang.reflect.InvocationTargetException.getTargetException()</name>
                <inbound type="feature" confirmed="yes">junit.framework.TestCase.runTest()</inbound>
                <inbound type="feature" confirmed="yes">junit.framework.TestSuite.createTest(java.lang.Class, java.lang.String)</inbound>
                <inbound type="feature" confirmed="yes">junit.runner.BaseTestRunner.getTest(java.lang.String)</inbound>
                <inbound type="feature" confirmed="yes">org.junit.internal.runners.ClassRoadie.runAfters()</inbound>
                <inbound type="feature" confirmed="yes">org.junit.internal.runners.ClassRoadie.runBefores()</inbound>
                <inbound type="feature" confirmed="yes">org.junit.internal.runners.MethodRoadie.runAfters()</inbound>
                <inbound type="feature" confirmed="yes">org.junit.internal.runners.MethodRoadie.runBefores()</inbound>
                <inbound type="feature" confirmed="yes">org.junit.internal.runners.MethodRoadie.runTestMethod()</inbound>
                <inbound type="feature" confirmed="yes">org.junit.internal.runners.model.ReflectiveCallable.run()</inbound>
            </feature>
        </class>
        <class confirmed="no">
            <name>java.lang.reflect.Method</name>
            <inbound type="feature" confirmed="yes">junit.framework.TestCase.runTest()</inbound>
            <inbound type="feature" confirmed="yes">junit.framework.TestSuite.addTestMethod(java.lang.reflect.Method, java.util.List, java.lang.Class)</inbound>
            <inbound type="feature" confirmed="yes">junit.framework.TestSuite.addTestsFromTestCase(java.lang.Class)</inbound>
            <inbound type="feature" confirmed="yes">junit.framework.TestSuite.isPublicTestMethod(java.lang.reflect.Method)</inbound>
            <inbound type="feature" confirmed="yes">junit.framework.TestSuite.isTestMethod(java.lang.reflect.Method)</inbound>
            <inbound type="feature" confirmed="yes">junit.runner.BaseTestRunner.getTest(java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">org.junit.experimental.theories.ParameterSignature.signatures(java.lang.reflect.Method)</inbound>
            <inbound type="feature" confirmed="yes">org.junit.experimental.theories.Theories$TheoryAnchor.evaluate()</inbound>
            <inbound type="feature" confirmed="yes">org.junit.experimental.theories.Theories$TheoryAnchor.nullsOk()</inbound>
            <inbound type="feature" confirmed="yes">org.junit.experimental.theories.internal.Assignments.allUnassigned(java.lang.reflect.Method, org.junit.runners.model.TestClass)</inbound>
            <inbound type="feature" confirmed="yes">org.junit.internal.builders.SuiteMethodBuilder.hasSuiteMethod(java.lang.Class)</inbound>
            <inbound type="feature" confirmed="yes">org.junit.internal.matchers.TypeSafeMatcher.findExpectedType(java.lang.Class)</inbound>
            <inbound type="feature" confirmed="yes">org.junit.internal.matchers.TypeSafeMatcher.isMatchesSafelyMethod(java.lang.reflect.Method)</inbound>
            <inbound type="feature" confirmed="yes">org.junit.internal.runners.ClassRoadie.runAfters()</inbound>
            <inbound type="feature" confirmed="yes">org.junit.internal.runners.ClassRoadie.runBefores()</inbound>
            <inbound type="feature" confirmed="yes">org.junit.internal.runners.JUnit4ClassRunner$2.compare(java.lang.Object, java.lang.Object)</inbound>
            <inbound type="feature" confirmed="yes">org.junit.internal.runners.JUnit4ClassRunner$2.compare(java.lang.reflect.Method, java.lang.reflect.Method)</inbound>
            <inbound type="feature" confirmed="yes">org.junit.internal.runners.JUnit4ClassRunner.filter(org.junit.runner.manipulation.Filter)</inbound>
            <inbound type="feature" confirmed="yes">org.junit.internal.runners.JUnit4ClassRunner.getDescription()</inbound>
            <inbound type="feature" confirmed="yes">org.junit.internal.runners.JUnit4ClassRunner.invokeTestMethod(java.lang.reflect.Method, org.junit.runner.notification.RunNotifier)</inbound>
            <inbound type="feature" confirmed="yes">org.junit.internal.runners.JUnit4ClassRunner.methodDescription(java.lang.reflect.Method)</inbound>
            <inbound type="feature" confirmed="yes">org.junit.internal.runners.JUnit4ClassRunner.runMethods(org.junit.runner.notification.RunNotifier)</inbound>
            <inbound type="feature" confirmed="yes">org.junit.internal.runners.JUnit4ClassRunner.testAnnotations(java.lang.reflect.Method)</inbound>
            <inbound type="feature" confirmed="yes">org.junit.internal.runners.JUnit4ClassRunner.testName(java.lang.reflect.Method)</inbound>
            <inbound type="feature" confirmed="yes">org.junit.internal.runners.JUnit4ClassRunner.wrapMethod(java.lang.reflect.Method)</inbound>
            <inbound type="feature" confirmed="yes">org.junit.internal.runners.MethodRoadie.runAfters()</inbound>
            <inbound type="feature" confirmed="yes">org.junit.internal.runners.MethodRoadie.runBefores()</inbound>
            <inbound type="feature" confirmed="yes">org.junit.internal.runners.MethodValidator.validateTestMethods(java.lang.Class, boolean)</inbound>
            <inbound type="feature" confirmed="yes">org.junit.internal.runners.SuiteMethod.testFromSuiteMethod(java.lang.Class)</inbound>
            <inbound type="feature" confirmed="yes">org.junit.internal.runners.TestClass.getAnnotatedMethods(java.lang.Class)</inbound>
            <inbound type="feature" confirmed="yes">org.junit.internal.runners.TestClass.isShadowed(java.lang.reflect.Method, java.lang.reflect.Method)</inbound>
            <inbound type="feature" confirmed="yes">org.junit.internal.runners.TestClass.isShadowed(java.lang.reflect.Method, java.util.List)</inbound>
            <inbound type="feature" confirmed="yes">org.junit.internal.runners.TestMethod.TestMethod(java.lang.reflect.Method, org.junit.internal.runners.TestClass)</inbound>
            <inbound type="feature" confirmed="yes">org.junit.internal.runners.TestMethod.fMethod</inbound>
            <inbound type="feature" confirmed="yes">org.junit.internal.runners.TestMethod.getExpectedException()</inbound>
            <inbound type="feature" confirmed="yes">org.junit.internal.runners.TestMethod.getTimeout()</inbound>
            <inbound type="feature" confirmed="yes">org.junit.internal.runners.TestMethod.invoke(java.lang.Object)</inbound>
            <inbound type="feature" confirmed="yes">org.junit.internal.runners.TestMethod.isIgnored()</inbound>
            <inbound type="feature" confirmed="yes">org.junit.runners.Parameterized.getParametersMethod(org.junit.runners.model.TestClass)</inbound>
            <inbound type="feature" confirmed="yes">org.junit.runners.model.FrameworkMethod$1.runReflectiveCall()</inbound>
            <inbound type="feature" confirmed="yes">org.junit.runners.model.FrameworkMethod.FrameworkMethod(java.lang.reflect.Method)</inbound>
            <inbound type="feature" confirmed="yes">org.junit.runners.model.FrameworkMethod.equals(java.lang.Object)</inbound>
            <inbound type="feature" confirmed="yes">org.junit.runners.model.FrameworkMethod.fMethod</inbound>
            <inbound type="feature" confirmed="yes">org.junit.runners.model.FrameworkMethod.getAnnotation(java.lang.Class)</inbound>
            <inbound type="feature" confirmed="yes">org.junit.runners.model.FrameworkMethod.getAnnotations()</inbound>
            <inbound type="feature" confirmed="yes">org.junit.runners.model.FrameworkMethod.getMethod()</inbound>
            <inbound type="feature" confirmed="yes">org.junit.runners.model.FrameworkMethod.getName()</inbound>
            <inbound type="feature" confirmed="yes">org.junit.runners.model.FrameworkMethod.getParameterTypes()</inbound>
            <inbound type="feature" confirmed="yes">org.junit.runners.model.FrameworkMethod.hashCode()</inbound>
            <inbound type="feature" confirmed="yes">org.junit.runners.model.FrameworkMethod.producesType(java.lang.Class)</inbound>
            <inbound type="feature" confirmed="yes">org.junit.runners.model.FrameworkMethod.validatePublicVoid(boolean, java.util.List)</inbound>
            <inbound type="feature" confirmed="yes">org.junit.runners.model.FrameworkMethod.validatePublicVoidNoArg(boolean, java.util.List)</inbound>
            <inbound type="feature" confirmed="yes">org.junit.runners.model.TestClass.TestClass(java.lang.Class)</inbound>
            <feature confirmed="no">
                <name>java.lang.reflect.Method.equals(java.lang.Object)</name>
                <inbound type="feature" confirmed="yes">org.junit.runners.model.FrameworkMethod.equals(java.lang.Object)</inbound>
            </feature>
            <feature confirmed="no">
                <name>java.lang.reflect.Method.getAnnotation(java.lang.Class)</name>
                <inbound type="feature" confirmed="yes">org.junit.experimental.theories.Theories$TheoryAnchor.nullsOk()</inbound>
                <inbound type="feature" confirmed="yes">org.junit.internal.runners.TestClass.getAnnotatedMethods(java.lang.Class)</inbound>
                <inbound type="feature" confirmed="yes">org.junit.internal.runners.TestMethod.getExpectedException()</inbound>
                <inbound type="feature" confirmed="yes">org.junit.internal.runners.TestMethod.getTimeout()</inbound>
                <inbound type="feature" confirmed="yes">org.junit.internal.runners.TestMethod.isIgnored()</inbound>
                <inbound type="feature" confirmed="yes">org.junit.runners.model.FrameworkMethod.getAnnotation(java.lang.Class)</inbound>
            </feature>
            <feature confirmed="no">
                <name>java.lang.reflect.Method.getAnnotations()</name>
                <inbound type="feature" confirmed="yes">org.junit.internal.runners.JUnit4ClassRunner.testAnnotations(java.lang.reflect.Method)</inbound>
                <inbound type="feature" confirmed="yes">org.junit.runners.model.FrameworkMethod.getAnnotations()</inbound>
            </feature>
            <feature confirmed="no">
                <name>java.lang.reflect.Method.getDeclaringClass()</name>
                <inbound type="feature" confirmed="yes">org.junit.internal.runners.MethodValidator.validateTestMethods(java.lang.Class, boolean)</inbound>
                <inbound type="feature" confirmed="yes">org.junit.runners.model.FrameworkMethod.validatePublicVoid(boolean, java.util.List)</inbound>
            </feature>
            <feature confirmed="no">
                <name>java.lang.reflect.Method.getModifiers()</name>
                <inbound type="feature" confirmed="yes">junit.framework.TestCase.runTest()</inbound>
                <inbound type="feature" confirmed="yes">junit.framework.TestSuite.isPublicTestMethod(java.lang.reflect.Method)</inbound>
                <inbound type="feature" confirmed="yes">junit.runner.BaseTestRunner.getTest(java.lang.String)</inbound>
                <inbound type="feature" confirmed="yes">org.junit.internal.runners.MethodValidator.validateTestMethods(java.lang.Class, boolean)</inbound>
                <inbound type="feature" confirmed="yes">org.junit.internal.runners.SuiteMethod.testFromSuiteMethod(java.lang.Class)</inbound>
                <inbound type="feature" confirmed="yes">org.junit.runners.Parameterized.getParametersMethod(org.junit.runners.model.TestClass)</inbound>
                <inbound type="feature" confirmed="yes">org.junit.runners.model.FrameworkMethod.validatePublicVoid(boolean, java.util.List)</inbound>
            </feature>
            <feature confirmed="no">
                <name>java.lang.reflect.Method.getName()</name>
                <inbound type="feature" confirmed="yes">junit.framework.TestSuite.addTestMethod(java.lang.reflect.Method, java.util.List, java.lang.Class)</inbound>
                <inbound type="feature" confirmed="yes">junit.framework.TestSuite.isTestMethod(java.lang.reflect.Method)</inbound>
                <inbound type="feature" confirmed="yes">org.junit.internal.matchers.TypeSafeMatcher.isMatchesSafelyMethod(java.lang.reflect.Method)</inbound>
                <inbound type="feature" confirmed="yes">org.junit.internal.runners.JUnit4ClassRunner.testName(java.lang.reflect.Method)</inbound>
                <inbound type="feature" confirmed="yes">org.junit.internal.runners.MethodValidator.validateTestMethods(java.lang.Class, boolean)</inbound>
                <inbound type="feature" confirmed="yes">org.junit.internal.runners.TestClass.isShadowed(java.lang.reflect.Method, java.lang.reflect.Method)</inbound>
                <inbound type="feature" confirmed="yes">org.junit.runners.model.FrameworkMethod.getName()</inbound>
                <inbound type="feature" confirmed="yes">org.junit.runners.model.FrameworkMethod.validatePublicVoid(boolean, java.util.List)</inbound>
                <inbound type="feature" confirmed="yes">org.junit.runners.model.FrameworkMethod.validatePublicVoidNoArg(boolean, java.util.List)</inbound>
            </feature>
            <feature confirmed="no">
                <name>java.lang.reflect.Method.getParameterAnnotations()</name>
                <inbound type="feature" confirmed="yes">org.junit.experimental.theories.ParameterSignature.signatures(java.lang.reflect.Method)</inbound>
            </feature>
            <feature confirmed="no">
                <name>java.lang.reflect.Method.getParameterTypes()</name>
                <inbound type="feature" confirmed="yes">junit.framework.TestSuite.isTestMethod(java.lang.reflect.Method)</inbound>
                <inbound type="feature" confirmed="yes">org.junit.experimental.theories.ParameterSignature.signatures(java.lang.reflect.Method)</inbound>
                <inbound type="feature" confirmed="yes">org.junit.internal.matchers.TypeSafeMatcher.findExpectedType(java.lang.Class)</inbound>
                <inbound type="feature" confirmed="yes">org.junit.internal.matchers.TypeSafeMatcher.isMatchesSafelyMethod(java.lang.reflect.Method)</inbound>
                <inbound type="feature" confirmed="yes">org.junit.internal.runners.MethodValidator.validateTestMethods(java.lang.Class, boolean)</inbound>
                <inbound type="feature" confirmed="yes">org.junit.internal.runners.TestClass.isShadowed(java.lang.reflect.Method, java.lang.reflect.Method)</inbound>
                <inbound type="feature" confirmed="yes">org.junit.runners.model.FrameworkMethod.getParameterTypes()</inbound>
                <inbound type="feature" confirmed="yes">org.junit.runners.model.FrameworkMethod.validatePublicVoidNoArg(boolean, java.util.List)</inbound>
            </feature>
            <feature confirmed="no">
                <name>java.lang.reflect.Method.getReturnType()</name>
                <inbound type="feature" confirmed="yes">junit.framework.TestSuite.isTestMethod(java.lang.reflect.Method)</inbound>
                <inbound type="feature" confirmed="yes">org.junit.internal.runners.MethodValidator.validateTestMethods(java.lang.Class, boolean)</inbound>
                <inbound type="feature" confirmed="yes">org.junit.runners.model.FrameworkMethod.producesType(java.lang.Class)</inbound>
                <inbound type="feature" confirmed="yes">org.junit.runners.model.FrameworkMethod.validatePublicVoid(boolean, java.util.List)</inbound>
            </feature>
            <feature confirmed="no">
                <name>java.lang.reflect.Method.hashCode()</name>
                <inbound type="feature" confirmed="yes">org.junit.runners.model.FrameworkMethod.hashCode()</inbound>
            </feature>
            <feature confirmed="no">
                <name>java.lang.reflect.Method.invoke(java.lang.Object, java.lang.Object[])</name>
                <inbound type="feature" confirmed="yes">junit.framework.TestCase.runTest()</inbound>
                <inbound type="feature" confirmed="yes">junit.runner.BaseTestRunner.getTest(java.lang.String)</inbound>
                <inbound type="feature" confirmed="yes">org.junit.internal.runners.ClassRoadie.runAfters()</inbound>
                <inbound type="feature" confirmed="yes">org.junit.internal.runners.ClassRoadie.runBefores()</inbound>
                <inbound type="feature" confirmed="yes">org.junit.internal.runners.MethodRoadie.runAfters()</inbound>
                <inbound type="feature" confirmed="yes">org.junit.internal.runners.MethodRoadie.runBefores()</inbound>
                <inbound type="feature" confirmed="yes">org.junit.internal.runners.SuiteMethod.testFromSuiteMethod(java.lang.Class)</inbound>
                <inbound type="feature" confirmed="yes">org.junit.internal.runners.TestMethod.invoke(java.lang.Object)</inbound>
                <inbound type="feature" confirmed="yes">org.junit.runners.model.FrameworkMethod$1.runReflectiveCall()</inbound>
            </feature>
            <feature confirmed="no">
                <name>java.lang.reflect.Method.isSynthetic()</name>
                <inbound type="feature" confirmed="yes">org.junit.internal.matchers.TypeSafeMatcher.isMatchesSafelyMethod(java.lang.reflect.Method)</inbound>
            </feature>
        </class>
        <class confirmed="no">
            <name>java.lang.reflect.Modifier</name>
            <feature confirmed="no">
                <name>java.lang.reflect.Modifier.isPublic(int)</name>
                <inbound type="feature" confirmed="yes">junit.framework.TestCase.runTest()</inbound>
                <inbound type="feature" confirmed="yes">junit.framework.TestSuite.addTestsFromTestCase(java.lang.Class)</inbound>
                <inbound type="feature" confirmed="yes">junit.framework.TestSuite.isPublicTestMethod(java.lang.reflect.Method)</inbound>
                <inbound type="feature" confirmed="yes">org.junit.internal.runners.MethodValidator.validateTestMethods(java.lang.Class, boolean)</inbound>
                <inbound type="feature" confirmed="yes">org.junit.runners.Parameterized.getParametersMethod(org.junit.runners.model.TestClass)</inbound>
                <inbound type="feature" confirmed="yes">org.junit.runners.model.FrameworkField.isPublic()</inbound>
                <inbound type="feature" confirmed="yes">org.junit.runners.model.FrameworkMethod.validatePublicVoid(boolean, java.util.List)</inbound>
            </feature>
            <feature confirmed="no">
                <name>java.lang.reflect.Modifier.isStatic(int)</name>
                <inbound type="feature" confirmed="yes">junit.runner.BaseTestRunner.getTest(java.lang.String)</inbound>
                <inbound type="feature" confirmed="yes">org.junit.experimental.theories.Theories.validateDataPointFields(java.util.List)</inbound>
                <inbound type="feature" confirmed="yes">org.junit.experimental.theories.internal.AllMembersSupplier.addFields(org.junit.experimental.theories.ParameterSignature, java.util.List)</inbound>
                <inbound type="feature" confirmed="yes">org.junit.internal.runners.MethodValidator.validateTestMethods(java.lang.Class, boolean)</inbound>
                <inbound type="feature" confirmed="yes">org.junit.internal.runners.SuiteMethod.testFromSuiteMethod(java.lang.Class)</inbound>
                <inbound type="feature" confirmed="yes">org.junit.runners.Parameterized.getParametersMethod(org.junit.runners.model.TestClass)</inbound>
                <inbound type="feature" confirmed="yes">org.junit.runners.model.FrameworkField.isStatic()</inbound>
                <inbound type="feature" confirmed="yes">org.junit.runners.model.FrameworkMethod.validatePublicVoid(boolean, java.util.List)</inbound>
            </feature>
        </class>
    </package>
    <package confirmed="no">
        <name>java.text</name>
        <class confirmed="no">
            <name>java.text.NumberFormat</name>
            <inbound type="feature" confirmed="yes">junit.runner.BaseTestRunner.elapsedTimeAsString(long)</inbound>
            <inbound type="feature" confirmed="yes">junit.textui.ResultPrinter.elapsedTimeAsString(long)</inbound>
            <inbound type="feature" confirmed="yes">org.junit.internal.TextListener.elapsedTimeAsString(long)</inbound>
            <feature confirmed="no">
                <name>java.text.NumberFormat.format(double)</name>
                <inbound type="feature" confirmed="yes">junit.runner.BaseTestRunner.elapsedTimeAsString(long)</inbound>
                <inbound type="feature" confirmed="yes">junit.textui.ResultPrinter.elapsedTimeAsString(long)</inbound>
                <inbound type="feature" confirmed="yes">org.junit.internal.TextListener.elapsedTimeAsString(long)</inbound>
            </feature>
            <feature confirmed="no">
                <name>java.text.NumberFormat.getInstance()</name>
                <inbound type="feature" confirmed="yes">junit.runner.BaseTestRunner.elapsedTimeAsString(long)</inbound>
                <inbound type="feature" confirmed="yes">junit.textui.ResultPrinter.elapsedTimeAsString(long)</inbound>
                <inbound type="feature" confirmed="yes">org.junit.internal.TextListener.elapsedTimeAsString(long)</inbound>
            </feature>
        </class>
    </package>
    <package confirmed="no">
        <name>java.util</name>
        <class confirmed="no">
            <name>java.util.ArrayList</name>
            <inbound type="feature" confirmed="yes">junit.framework.JUnit4TestAdapter.removeIgnored(org.junit.runner.Description)</inbound>
            <inbound type="feature" confirmed="yes">junit.framework.JUnit4TestAdapterCache.asTestList(org.junit.runner.Description)</inbound>
            <inbound type="feature" confirmed="yes">junit.framework.JUnit4TestAdapterCache.createTest(org.junit.runner.Description)</inbound>
            <inbound type="feature" confirmed="yes">org.junit.experimental.categories.Categories$CategoryFilter.shouldRun(org.junit.runner.Description)</inbound>
            <inbound type="feature" confirmed="yes">org.junit.experimental.categories.Categories.assertNoCategorizedDescendentsOfUncategorizeableParents(org.junit.runner.Description)</inbound>
            <inbound type="feature" confirmed="yes">org.junit.experimental.categories.Categories.assertNoDescendantsHaveCategoryAnnotations(org.junit.runner.Description)</inbound>
            <inbound type="feature" confirmed="yes">org.junit.experimental.categories.Categories.canHaveCategorizedChildren(org.junit.runner.Description)</inbound>
            <inbound type="feature" confirmed="yes">org.junit.experimental.max.MaxCore.findLeaves(org.junit.runner.Description, org.junit.runner.Description, java.util.List)</inbound>
            <inbound type="feature" confirmed="yes">org.junit.experimental.theories.ParameterSignature.signatures(java.lang.Class[], java.lang.annotation.Annotation[][])</inbound>
            <inbound type="feature" confirmed="yes">org.junit.experimental.theories.ParameterSignature.signatures(java.lang.reflect.Constructor)</inbound>
            <inbound type="feature" confirmed="yes">org.junit.experimental.theories.ParameterSignature.signatures(java.lang.reflect.Method)</inbound>
            <inbound type="feature" confirmed="yes">org.junit.experimental.theories.internal.Assignments.allUnassigned(java.lang.reflect.Method, org.junit.runners.model.TestClass)</inbound>
            <inbound type="feature" confirmed="yes">org.junit.runner.Description.Description(java.lang.String, java.lang.annotation.Annotation[])</inbound>
            <inbound type="feature" confirmed="yes">org.junit.runner.Description.addChild(org.junit.runner.Description)</inbound>
            <inbound type="feature" confirmed="yes">org.junit.runner.Description.fChildren</inbound>
            <inbound type="feature" confirmed="yes">org.junit.runner.Description.getChildren()</inbound>
            <inbound type="feature" confirmed="yes">org.junit.runner.Description.isTest()</inbound>
            <inbound type="feature" confirmed="yes">org.junit.runner.Description.testCount()</inbound>
            <inbound type="feature" confirmed="yes">org.junit.runner.manipulation.Filter$2.shouldRun(org.junit.runner.Description)</inbound>
            <inbound type="feature" confirmed="yes">org.junit.runners.Parameterized.Parameterized(java.lang.Class)</inbound>
            <inbound type="feature" confirmed="yes">org.junit.runners.Parameterized.getChildren()</inbound>
            <inbound type="feature" confirmed="yes">org.junit.runners.Parameterized.runners</inbound>
            <feature confirmed="no">
                <name>java.util.ArrayList.ArrayList()</name>
                <inbound type="feature" confirmed="yes">junit.framework.JUnit4TestAdapterCache.asTestList(org.junit.runner.Description)</inbound>
                <inbound type="feature" confirmed="yes">junit.framework.TestResult.TestResult()</inbound>
                <inbound type="feature" confirmed="yes">junit.framework.TestResult.cloneListeners()</inbound>
                <inbound type="feature" confirmed="yes">junit.framework.TestSuite.addTestsFromTestCase(java.lang.Class)</inbound>
                <inbound type="feature" confirmed="yes">org.junit.experimental.ParallelComputer$1.ParallelComputer$1()</inbound>
                <inbound type="feature" confirmed="yes">org.junit.experimental.categories.Categories$CategoryFilter.categories(org.junit.runner.Description)</inbound>
                <inbound type="feature" confirmed="yes">org.junit.experimental.max.MaxCore.constructLeafRequest(java.util.List)</inbound>
                <inbound type="feature" confirmed="yes">org.junit.experimental.max.MaxCore.findLeaves(org.junit.runner.Request)</inbound>
                <inbound type="feature" confirmed="yes">org.junit.experimental.theories.ParameterSignature.signatures(java.lang.Class[], java.lang.annotation.Annotation[][])</inbound>
                <inbound type="feature" confirmed="yes">org.junit.experimental.theories.Theories$TheoryAnchor.Theories$TheoryAnchor(org.junit.runners.model.FrameworkMethod, org.junit.runners.model.TestClass)</inbound>
                <inbound type="feature" confirmed="yes">org.junit.experimental.theories.internal.AllMembersSupplier.getValueSources(org.junit.experimental.theories.ParameterSignature)</inbound>
                <inbound type="feature" confirmed="yes">org.junit.experimental.theories.internal.Assignments.allUnassigned(java.lang.reflect.Method, org.junit.runners.model.TestClass)</inbound>
                <inbound type="feature" confirmed="yes">org.junit.experimental.theories.suppliers.TestedOnSupplier.getValueSources(org.junit.experimental.theories.ParameterSignature)</inbound>
                <inbound type="feature" confirmed="yes">org.junit.internal.ArrayComparisonFailure.ArrayComparisonFailure(java.lang.String, java.lang.AssertionError, int)</inbound>
                <inbound type="feature" confirmed="yes">org.junit.internal.runners.MethodValidator.MethodValidator(org.junit.internal.runners.TestClass)</inbound>
                <inbound type="feature" confirmed="yes">org.junit.internal.runners.TestClass.getAnnotatedMethods(java.lang.Class)</inbound>
                <inbound type="feature" confirmed="yes">org.junit.internal.runners.TestClass.getSuperClasses(java.lang.Class)</inbound>
                <inbound type="feature" confirmed="yes">org.junit.internal.runners.statements.RunAfters.evaluate()</inbound>
                <inbound type="feature" confirmed="yes">org.junit.rules.ErrorCollector.ErrorCollector()</inbound>
                <inbound type="feature" confirmed="yes">org.junit.runner.Description.Description(java.lang.String, java.lang.annotation.Annotation[])</inbound>
                <inbound type="feature" confirmed="yes">org.junit.runner.JUnitCore.runMain(org.junit.internal.JUnitSystem, java.lang.String[])</inbound>
                <inbound type="feature" confirmed="yes">org.junit.runner.Result.Result()</inbound>
                <inbound type="feature" confirmed="yes">org.junit.runner.notification.RunNotifier.RunNotifier()</inbound>
                <inbound type="feature" confirmed="yes">org.junit.runners.Parameterized.Parameterized(java.lang.Class)</inbound>
                <inbound type="feature" confirmed="yes">org.junit.runners.ParentRunner.validate()</inbound>
                <inbound type="feature" confirmed="yes">org.junit.runners.model.RunnerBuilder.runners(java.lang.Class[])</inbound>
                <inbound type="feature" confirmed="yes">org.junit.runners.model.TestClass.getAnnotatedFieldValues(java.lang.Object, java.lang.Class, java.lang.Class)</inbound>
                <inbound type="feature" confirmed="yes">org.junit.runners.model.TestClass.getAnnotatedMembers(java.util.Map, java.lang.Class)</inbound>
                <inbound type="feature" confirmed="yes">org.junit.runners.model.TestClass.getSuperClasses(java.lang.Class)</inbound>
            </feature>
            <feature confirmed="no">
                <name>java.util.ArrayList.ArrayList(int)</name>
                <inbound type="feature" confirmed="yes">org.junit.internal.matchers.IsCollectionContaining.hasItems(java.lang.Object[])</inbound>
                <inbound type="feature" confirmed="yes">org.junit.internal.matchers.IsCollectionContaining.hasItems(org.hamcrest.Matcher[])</inbound>
            </feature>
            <feature confirmed="no">
                <name>java.util.ArrayList.ArrayList(java.util.Collection)</name>
                <inbound type="feature" confirmed="yes">org.junit.experimental.theories.internal.Assignments.assignNext(org.junit.experimental.theories.PotentialAssignment)</inbound>
                <inbound type="feature" confirmed="yes">org.junit.runners.ParentRunner.getFilteredChildren()</inbound>
                <inbound type="feature" confirmed="yes">org.junit.runners.model.MultipleFailureException.MultipleFailureException(java.util.List)</inbound>
            </feature>
            <feature confirmed="no">
                <name>java.util.ArrayList.add(java.lang.Object)</name>
                <inbound type="feature" confirmed="yes">org.junit.experimental.theories.ParameterSignature.signatures(java.lang.Class[], java.lang.annotation.Annotation[][])</inbound>
                <inbound type="feature" confirmed="yes">org.junit.internal.runners.TestClass.getSuperClasses(java.lang.Class)</inbound>
                <inbound type="feature" confirmed="yes">org.junit.runner.Description.addChild(org.junit.runner.Description)</inbound>
                <inbound type="feature" confirmed="yes">org.junit.runners.Parameterized.Parameterized(java.lang.Class)</inbound>
                <inbound type="feature" confirmed="yes">org.junit.runners.model.RunnerBuilder.runners(java.lang.Class[])</inbound>
                <inbound type="feature" confirmed="yes">org.junit.runners.model.TestClass.getSuperClasses(java.lang.Class)</inbound>
            </feature>
            <feature confirmed="no">
                <name>java.util.ArrayList.addAll(java.util.Collection)</name>
                <inbound type="feature" confirmed="yes">org.junit.experimental.categories.Categories$CategoryFilter.categories(org.junit.runner.Description)</inbound>
            </feature>
            <feature confirmed="no">
                <name>java.util.ArrayList.isEmpty()</name>
                <inbound type="feature" confirmed="yes">org.junit.experimental.max.MaxCore.findLeaves(org.junit.runner.Description, org.junit.runner.Description, java.util.List)</inbound>
                <inbound type="feature" confirmed="yes">org.junit.runner.Description.isTest()</inbound>
            </feature>
            <feature confirmed="no">
                <name>java.util.ArrayList.iterator()</name>
                <inbound type="feature" confirmed="yes">junit.framework.JUnit4TestAdapter.removeIgnored(org.junit.runner.Description)</inbound>
                <inbound type="feature" confirmed="yes">junit.framework.JUnit4TestAdapterCache.asTestList(org.junit.runner.Description)</inbound>
                <inbound type="feature" confirmed="yes">junit.framework.JUnit4TestAdapterCache.createTest(org.junit.runner.Description)</inbound>
                <inbound type="feature" confirmed="yes">org.junit.experimental.categories.Categories$CategoryFilter.shouldRun(org.junit.runner.Description)</inbound>
                <inbound type="feature" confirmed="yes">org.junit.experimental.categories.Categories.assertNoCategorizedDescendentsOfUncategorizeableParents(org.junit.runner.Description)</inbound>
                <inbound type="feature" confirmed="yes">org.junit.experimental.categories.Categories.assertNoDescendantsHaveCategoryAnnotations(org.junit.runner.Description)</inbound>
                <inbound type="feature" confirmed="yes">org.junit.experimental.categories.Categories.canHaveCategorizedChildren(org.junit.runner.Description)</inbound>
                <inbound type="feature" confirmed="yes">org.junit.experimental.max.MaxCore.findLeaves(org.junit.runner.Description, org.junit.runner.Description, java.util.List)</inbound>
                <inbound type="feature" confirmed="yes">org.junit.runner.Description.testCount()</inbound>
                <inbound type="feature" confirmed="yes">org.junit.runner.manipulation.Filter$2.shouldRun(org.junit.runner.Description)</inbound>
            </feature>
        </class>
        <class confirmed="no">
            <name>java.util.Arrays</name>
            <feature confirmed="no">
                <name>java.util.Arrays.asList(java.lang.Object[])</name>
                <inbound type="feature" confirmed="yes">junit.framework.JUnit4TestAdapterCache.asTestList(org.junit.runner.Description)</inbound>
                <inbound type="feature" confirmed="yes">org.hamcrest.BaseDescription.appendValueList(java.lang.String, java.lang.String, java.lang.String, java.lang.Object[])</inbound>
                <inbound type="feature" confirmed="yes">org.hamcrest.core.AllOf.allOf(org.hamcrest.Matcher[])</inbound>
                <inbound type="feature" confirmed="yes">org.hamcrest.core.AnyOf.anyOf(org.hamcrest.Matcher[])</inbound>
                <inbound type="feature" confirmed="yes">org.junit.Assume.assumeNotNull(java.lang.Object[])</inbound>
                <inbound type="feature" confirmed="yes">org.junit.experimental.categories.Categories$CategoryFilter.categories(org.junit.runner.Description)</inbound>
                <inbound type="feature" confirmed="yes">org.junit.experimental.theories.ParameterSignature.getAnnotations()</inbound>
                <inbound type="feature" confirmed="yes">org.junit.experimental.theories.internal.ParameterizedAssertionError.join(java.lang.String, java.lang.Object[])</inbound>
                <inbound type="feature" confirmed="yes">org.junit.experimental.theories.suppliers.TestedOnSupplier.getValueSources(org.junit.experimental.theories.ParameterSignature)</inbound>
                <inbound type="feature" confirmed="yes">org.junit.internal.builders.AllDefaultPossibilitiesBuilder.runnerForClass(java.lang.Class)</inbound>
                <inbound type="feature" confirmed="yes">org.junit.internal.runners.ErrorReportingRunner.getCauses(java.lang.Throwable)</inbound>
                <inbound type="feature" confirmed="yes">org.junit.internal.runners.InitializationError.InitializationError(java.lang.Throwable[])</inbound>
                <inbound type="feature" confirmed="yes">org.junit.runner.Description.getAnnotations()</inbound>
                <inbound type="feature" confirmed="yes">org.junit.runners.model.InitializationError.InitializationError(java.lang.Throwable)</inbound>
            </feature>
        </class>
        <class confirmed="no">
            <name>java.util.Collection</name>
            <inbound type="feature" confirmed="yes">junit.framework.TestResult.cloneListeners()</inbound>
            <inbound type="feature" confirmed="yes">junit.framework.TestResult.errors()</inbound>
            <inbound type="feature" confirmed="yes">junit.framework.TestResult.failures()</inbound>
            <inbound type="feature" confirmed="yes">org.junit.experimental.categories.Categories$CategoryFilter.categories(org.junit.runner.Description)</inbound>
            <inbound type="feature" confirmed="yes">org.junit.experimental.theories.Theories.computeTestMethods()</inbound>
            <inbound type="feature" confirmed="yes">org.junit.experimental.theories.internal.Assignments.allUnassigned(java.lang.reflect.Method, org.junit.runners.model.TestClass)</inbound>
            <inbound type="feature" confirmed="yes">org.junit.experimental.theories.internal.Assignments.assignNext(org.junit.experimental.theories.PotentialAssignment)</inbound>
            <inbound type="feature" confirmed="yes">org.junit.experimental.theories.internal.ParameterizedAssertionError.join(java.lang.String, java.lang.Object[])</inbound>
            <inbound type="feature" confirmed="yes">org.junit.experimental.theories.internal.ParameterizedAssertionError.join(java.lang.String, java.util.Collection)</inbound>
            <inbound type="feature" confirmed="yes">org.junit.runner.Description.getAnnotations()</inbound>
            <inbound type="feature" confirmed="yes">org.junit.runners.ParentRunner.getFilteredChildren()</inbound>
            <inbound type="feature" confirmed="yes">org.junit.runners.model.MultipleFailureException.MultipleFailureException(java.util.List)</inbound>
            <feature confirmed="no">
                <name>java.util.Collection.add(java.lang.Object)</name>
                <inbound type="feature" confirmed="yes">org.junit.internal.matchers.IsCollectionContaining.hasItems(java.lang.Object[])</inbound>
                <inbound type="feature" confirmed="yes">org.junit.internal.matchers.IsCollectionContaining.hasItems(org.hamcrest.Matcher[])</inbound>
            </feature>
            <feature confirmed="no">
                <name>java.util.Collection.iterator()</name>
                <inbound type="feature" confirmed="yes">org.junit.experimental.theories.internal.ParameterizedAssertionError.join(java.lang.String, java.util.Collection)</inbound>
            </feature>
        </class>
        <class confirmed="no">
            <name>java.util.Collections</name>
            <feature confirmed="no">
                <name>java.util.Collections.emptyList()</name>
                <inbound type="feature" confirmed="yes">org.junit.runners.Parameterized.Parameterized(java.lang.Class)</inbound>
            </feature>
            <feature confirmed="no">
                <name>java.util.Collections.enumeration(java.util.Collection)</name>
                <inbound type="feature" confirmed="yes">junit.framework.TestResult.errors()</inbound>
                <inbound type="feature" confirmed="yes">junit.framework.TestResult.failures()</inbound>
            </feature>
            <feature confirmed="no">
                <name>java.util.Collections.reverse(java.util.List)</name>
                <inbound type="feature" confirmed="yes">org.junit.internal.runners.TestClass.getAnnotatedMethods(java.lang.Class)</inbound>
            </feature>
            <feature confirmed="no">
                <name>java.util.Collections.sort(java.util.List, java.util.Comparator)</name>
                <inbound type="feature" confirmed="yes">org.junit.experimental.max.MaxCore.sortRequest(org.junit.runner.Request)</inbound>
                <inbound type="feature" confirmed="yes">org.junit.internal.runners.JUnit4ClassRunner.sort(org.junit.runner.manipulation.Sorter)</inbound>
                <inbound type="feature" confirmed="yes">org.junit.runners.ParentRunner.sort(org.junit.runner.manipulation.Sorter)</inbound>
            </feature>
            <feature confirmed="no">
                <name>java.util.Collections.synchronizedList(java.util.List)</name>
                <inbound type="feature" confirmed="yes">org.junit.runner.Result.Result()</inbound>
                <inbound type="feature" confirmed="yes">org.junit.runner.notification.RunNotifier.RunNotifier()</inbound>
            </feature>
            <feature confirmed="no">
                <name>java.util.Collections.unmodifiableList(java.util.List)</name>
                <inbound type="feature" confirmed="yes">org.junit.runners.model.MultipleFailureException.getFailures()</inbound>
            </feature>
        </class>
        <class confirmed="no">
            <name>java.util.Comparator</name>
            <inbound type="feature" confirmed="yes">org.junit.experimental.max.MaxCore.sortRequest(org.junit.runner.Request)</inbound>
            <inbound type="class" confirmed="yes">org.junit.experimental.max.MaxHistory$TestComparator</inbound>
            <inbound type="feature" confirmed="yes">org.junit.experimental.max.MaxHistory.testComparator()</inbound>
            <inbound type="feature" confirmed="yes">org.junit.internal.requests.SortingRequest.SortingRequest(org.junit.runner.Request, java.util.Comparator)</inbound>
            <inbound type="feature" confirmed="yes">org.junit.internal.requests.SortingRequest.fComparator</inbound>
            <inbound type="feature" confirmed="yes">org.junit.internal.requests.SortingRequest.getRunner()</inbound>
            <inbound type="class" confirmed="yes">org.junit.internal.runners.JUnit4ClassRunner$2</inbound>
            <inbound type="feature" confirmed="yes">org.junit.internal.runners.JUnit4ClassRunner.sort(org.junit.runner.manipulation.Sorter)</inbound>
            <inbound type="feature" confirmed="yes">org.junit.runner.Request.sortWith(java.util.Comparator)</inbound>
            <inbound type="class" confirmed="yes">org.junit.runner.manipulation.Sorter</inbound>
            <inbound type="class" confirmed="yes">org.junit.runner.manipulation.Sorter$1</inbound>
            <inbound type="feature" confirmed="yes">org.junit.runner.manipulation.Sorter.Sorter(java.util.Comparator)</inbound>
            <inbound type="feature" confirmed="yes">org.junit.runner.manipulation.Sorter.compare(org.junit.runner.Description, org.junit.runner.Description)</inbound>
            <inbound type="feature" confirmed="yes">org.junit.runner.manipulation.Sorter.fComparator</inbound>
            <inbound type="feature" confirmed="yes">org.junit.runner.manipulation.Sorter.static {}</inbound>
            <inbound type="class" confirmed="yes">org.junit.runners.ParentRunner$4</inbound>
            <inbound type="feature" confirmed="yes">org.junit.runners.ParentRunner.comparator()</inbound>
            <inbound type="feature" confirmed="yes">org.junit.runners.ParentRunner.sort(org.junit.runner.manipulation.Sorter)</inbound>
            <feature confirmed="no">
                <name>java.util.Comparator.compare(java.lang.Object, java.lang.Object)</name>
                <inbound type="feature" confirmed="yes">org.junit.runner.manipulation.Sorter.compare(org.junit.runner.Description, org.junit.runner.Description)</inbound>
            </feature>
        </class>
        <class confirmed="no">
            <name>java.util.Enumeration</name>
            <inbound type="feature" confirmed="yes">junit.framework.TestResult.errors()</inbound>
            <inbound type="feature" confirmed="yes">junit.framework.TestResult.failures()</inbound>
            <inbound type="feature" confirmed="yes">junit.framework.TestSuite.tests()</inbound>
            <inbound type="feature" confirmed="yes">junit.textui.ResultPrinter.printDefects(java.util.Enumeration, int, java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">junit.textui.ResultPrinter.printErrors(junit.framework.TestResult)</inbound>
            <inbound type="feature" confirmed="yes">junit.textui.ResultPrinter.printFailures(junit.framework.TestResult)</inbound>
            <feature confirmed="no">
                <name>java.util.Enumeration.hasMoreElements()</name>
                <inbound type="feature" confirmed="yes">junit.textui.ResultPrinter.printDefects(java.util.Enumeration, int, java.lang.String)</inbound>
            </feature>
            <feature confirmed="no">
                <name>java.util.Enumeration.nextElement()</name>
                <inbound type="feature" confirmed="yes">junit.textui.ResultPrinter.printDefects(java.util.Enumeration, int, java.lang.String)</inbound>
            </feature>
        </class>
        <class confirmed="no">
            <name>java.util.HashMap</name>
            <inbound type="class" confirmed="yes">junit.framework.JUnit4TestAdapterCache</inbound>
            <feature confirmed="no">
                <name>java.util.HashMap.HashMap()</name>
                <inbound type="feature" confirmed="yes">junit.framework.JUnit4TestAdapterCache.JUnit4TestAdapterCache()</inbound>
                <inbound type="feature" confirmed="yes">org.junit.experimental.max.MaxHistory$RememberingListener.MaxHistory$RememberingListener(org.junit.experimental.max.MaxHistory)</inbound>
                <inbound type="feature" confirmed="yes">org.junit.experimental.max.MaxHistory.MaxHistory(java.io.File)</inbound>
                <inbound type="feature" confirmed="yes">org.junit.runners.model.TestClass.TestClass(java.lang.Class)</inbound>
            </feature>
        </class>
        <class confirmed="no">
            <name>java.util.HashSet</name>
            <feature confirmed="no">
                <name>java.util.HashSet.HashSet()</name>
                <inbound type="feature" confirmed="yes">org.junit.runners.model.RunnerBuilder.RunnerBuilder()</inbound>
            </feature>
        </class>
        <class confirmed="no">
            <name>java.util.Iterator</name>
            <inbound type="feature" confirmed="yes">junit.framework.JUnit4TestAdapter.removeIgnored(org.junit.runner.Description)</inbound>
            <inbound type="feature" confirmed="yes">junit.framework.JUnit4TestAdapterCache.asTestList(org.junit.runner.Description)</inbound>
            <inbound type="feature" confirmed="yes">junit.framework.JUnit4TestAdapterCache.createTest(org.junit.runner.Description)</inbound>
            <inbound type="feature" confirmed="yes">junit.framework.TestResult.addError(junit.framework.Test, java.lang.Throwable)</inbound>
            <inbound type="feature" confirmed="yes">junit.framework.TestResult.addFailure(junit.framework.Test, junit.framework.AssertionFailedError)</inbound>
            <inbound type="feature" confirmed="yes">junit.framework.TestResult.endTest(junit.framework.Test)</inbound>
            <inbound type="feature" confirmed="yes">junit.framework.TestResult.startTest(junit.framework.Test)</inbound>
            <inbound type="feature" confirmed="yes">junit.framework.TestSuite.countTestCases()</inbound>
            <inbound type="feature" confirmed="yes">junit.framework.TestSuite.run(junit.framework.TestResult)</inbound>
            <inbound type="feature" confirmed="yes">org.hamcrest.BaseDescription.appendList(java.lang.String, java.lang.String, java.lang.String, java.lang.Iterable)</inbound>
            <inbound type="feature" confirmed="yes">org.hamcrest.BaseDescription.appendList(java.lang.String, java.lang.String, java.lang.String, java.util.Iterator)</inbound>
            <inbound type="feature" confirmed="yes">org.hamcrest.BaseDescription.appendValue(java.lang.Object)</inbound>
            <inbound type="feature" confirmed="yes">org.hamcrest.BaseDescription.appendValueList(java.lang.String, java.lang.String, java.lang.String, java.lang.Iterable)</inbound>
            <inbound type="feature" confirmed="yes">org.hamcrest.BaseDescription.appendValueList(java.lang.String, java.lang.String, java.lang.String, java.util.Iterator)</inbound>
            <inbound type="feature" confirmed="yes">org.hamcrest.core.AllOf.matches(java.lang.Object)</inbound>
            <inbound type="feature" confirmed="yes">org.hamcrest.core.AnyOf.matches(java.lang.Object)</inbound>
            <inbound type="class" confirmed="yes">org.hamcrest.internal.ArrayIterator</inbound>
            <inbound type="class" confirmed="yes">org.hamcrest.internal.SelfDescribingValueIterator</inbound>
            <inbound type="feature" confirmed="yes">org.hamcrest.internal.SelfDescribingValueIterator.SelfDescribingValueIterator(java.util.Iterator)</inbound>
            <inbound type="feature" confirmed="yes">org.hamcrest.internal.SelfDescribingValueIterator.hasNext()</inbound>
            <inbound type="feature" confirmed="yes">org.hamcrest.internal.SelfDescribingValueIterator.remove()</inbound>
            <inbound type="feature" confirmed="yes">org.hamcrest.internal.SelfDescribingValueIterator.values</inbound>
            <inbound type="feature" confirmed="yes">org.junit.experimental.ParallelComputer$1.finished()</inbound>
            <inbound type="feature" confirmed="yes">org.junit.experimental.categories.Categories$CategoryFilter.hasCorrectCategoryAnnotation(org.junit.runner.Description)</inbound>
            <inbound type="feature" confirmed="yes">org.junit.experimental.categories.Categories$CategoryFilter.shouldRun(org.junit.runner.Description)</inbound>
            <inbound type="feature" confirmed="yes">org.junit.experimental.categories.Categories.assertNoCategorizedDescendentsOfUncategorizeableParents(org.junit.runner.Description)</inbound>
            <inbound type="feature" confirmed="yes">org.junit.experimental.categories.Categories.assertNoDescendantsHaveCategoryAnnotations(org.junit.runner.Description)</inbound>
            <inbound type="feature" confirmed="yes">org.junit.experimental.categories.Categories.canHaveCategorizedChildren(org.junit.runner.Description)</inbound>
            <inbound type="feature" confirmed="yes">org.junit.experimental.max.MaxCore.constructLeafRequest(java.util.List)</inbound>
            <inbound type="feature" confirmed="yes">org.junit.experimental.max.MaxCore.findLeaves(org.junit.runner.Description, org.junit.runner.Description, java.util.List)</inbound>
            <inbound type="feature" confirmed="yes">org.junit.experimental.results.FailureList.result()</inbound>
            <inbound type="feature" confirmed="yes">org.junit.experimental.theories.ParameterSignature.getAnnotation(java.lang.Class)</inbound>
            <inbound type="feature" confirmed="yes">org.junit.experimental.theories.Theories$TheoryAnchor.runWithIncompleteAssignment(org.junit.experimental.theories.internal.Assignments)</inbound>
            <inbound type="feature" confirmed="yes">org.junit.experimental.theories.Theories.validateTestMethods(java.util.List)</inbound>
            <inbound type="feature" confirmed="yes">org.junit.experimental.theories.internal.AllMembersSupplier.addMultiPointMethods(java.util.List)</inbound>
            <inbound type="feature" confirmed="yes">org.junit.experimental.theories.internal.AllMembersSupplier.addSinglePointMethods(org.junit.experimental.theories.ParameterSignature, java.util.List)</inbound>
            <inbound type="feature" confirmed="yes">org.junit.experimental.theories.internal.ParameterizedAssertionError.join(java.lang.String, java.util.Collection)</inbound>
            <inbound type="feature" confirmed="yes">org.junit.internal.ArrayComparisonFailure.getMessage()</inbound>
            <inbound type="feature" confirmed="yes">org.junit.internal.TextListener.printFailures(org.junit.runner.Result)</inbound>
            <inbound type="feature" confirmed="yes">org.junit.internal.builders.AllDefaultPossibilitiesBuilder.runnerForClass(java.lang.Class)</inbound>
            <inbound type="feature" confirmed="yes">org.junit.internal.matchers.IsCollectionContaining.matchesSafely(java.lang.Iterable)</inbound>
            <inbound type="feature" confirmed="yes">org.junit.internal.runners.ClassRoadie.runAfters()</inbound>
            <inbound type="feature" confirmed="yes">org.junit.internal.runners.ClassRoadie.runBefores()</inbound>
            <inbound type="feature" confirmed="yes">org.junit.internal.runners.ErrorReportingRunner.getDescription()</inbound>
            <inbound type="feature" confirmed="yes">org.junit.internal.runners.ErrorReportingRunner.run(org.junit.runner.notification.RunNotifier)</inbound>
            <inbound type="feature" confirmed="yes">org.junit.internal.runners.JUnit4ClassRunner.filter(org.junit.runner.manipulation.Filter)</inbound>
            <inbound type="feature" confirmed="yes">org.junit.internal.runners.JUnit4ClassRunner.getDescription()</inbound>
            <inbound type="feature" confirmed="yes">org.junit.internal.runners.JUnit4ClassRunner.runMethods(org.junit.runner.notification.RunNotifier)</inbound>
            <inbound type="feature" confirmed="yes">org.junit.internal.runners.MethodRoadie.runAfters()</inbound>
            <inbound type="feature" confirmed="yes">org.junit.internal.runners.MethodRoadie.runBefores()</inbound>
            <inbound type="feature" confirmed="yes">org.junit.internal.runners.MethodValidator.validateTestMethods(java.lang.Class, boolean)</inbound>
            <inbound type="feature" confirmed="yes">org.junit.internal.runners.TestClass.getAnnotatedMethods(java.lang.Class)</inbound>
            <inbound type="feature" confirmed="yes">org.junit.internal.runners.TestClass.isShadowed(java.lang.reflect.Method, java.util.List)</inbound>
            <inbound type="feature" confirmed="yes">org.junit.internal.runners.model.EachTestNotifier.addMultipleFailureException(org.junit.runners.model.MultipleFailureException)</inbound>
            <inbound type="feature" confirmed="yes">org.junit.internal.runners.rules.RuleFieldValidator.validate(org.junit.runners.model.TestClass, java.util.List)</inbound>
            <inbound type="feature" confirmed="yes">org.junit.internal.runners.statements.RunAfters.evaluate()</inbound>
            <inbound type="feature" confirmed="yes">org.junit.internal.runners.statements.RunBefores.evaluate()</inbound>
            <inbound type="feature" confirmed="yes">org.junit.rules.RunRules.applyAll(org.junit.runners.model.Statement, java.lang.Iterable, org.junit.runner.Description)</inbound>
            <inbound type="feature" confirmed="yes">org.junit.runner.Description.testCount()</inbound>
            <inbound type="feature" confirmed="yes">org.junit.runner.JUnitCore.runMain(org.junit.internal.JUnitSystem, java.lang.String[])</inbound>
            <inbound type="feature" confirmed="yes">org.junit.runner.manipulation.Filter$2.shouldRun(org.junit.runner.Description)</inbound>
            <inbound type="feature" confirmed="yes">org.junit.runner.notification.RunNotifier$SafeNotifier.run()</inbound>
            <inbound type="feature" confirmed="yes">org.junit.runners.BlockJUnit4ClassRunner.withMethodRules(org.junit.runners.model.FrameworkMethod, java.lang.Object, org.junit.runners.model.Statement)</inbound>
            <inbound type="feature" confirmed="yes">org.junit.runners.Parameterized.getParametersMethod(org.junit.runners.model.TestClass)</inbound>
            <inbound type="feature" confirmed="yes">org.junit.runners.ParentRunner.filter(org.junit.runner.manipulation.Filter)</inbound>
            <inbound type="feature" confirmed="yes">org.junit.runners.ParentRunner.getDescription()</inbound>
            <inbound type="feature" confirmed="yes">org.junit.runners.ParentRunner.runChildren(org.junit.runner.notification.RunNotifier)</inbound>
            <inbound type="feature" confirmed="yes">org.junit.runners.ParentRunner.sort(org.junit.runner.manipulation.Sorter)</inbound>
            <inbound type="feature" confirmed="yes">org.junit.runners.ParentRunner.validatePublicVoidNoArgMethods(java.lang.Class, boolean, java.util.List)</inbound>
            <inbound type="feature" confirmed="yes">org.junit.runners.model.FrameworkMember.isShadowedBy(java.util.List)</inbound>
            <inbound type="feature" confirmed="yes">org.junit.runners.model.MultipleFailureException.getMessage()</inbound>
            <inbound type="feature" confirmed="yes">org.junit.runners.model.TestClass.TestClass(java.lang.Class)</inbound>
            <inbound type="feature" confirmed="yes">org.junit.runners.model.TestClass.getAnnotatedFieldValues(java.lang.Object, java.lang.Class, java.lang.Class)</inbound>
            <feature confirmed="no">
                <name>java.util.Iterator.hasNext()</name>
                <inbound type="feature" confirmed="yes">junit.framework.JUnit4TestAdapter.removeIgnored(org.junit.runner.Description)</inbound>
                <inbound type="feature" confirmed="yes">junit.framework.JUnit4TestAdapterCache.asTestList(org.junit.runner.Description)</inbound>
                <inbound type="feature" confirmed="yes">junit.framework.JUnit4TestAdapterCache.createTest(org.junit.runner.Description)</inbound>
                <inbound type="feature" confirmed="yes">junit.framework.TestResult.addError(junit.framework.Test, java.lang.Throwable)</inbound>
                <inbound type="feature" confirmed="yes">junit.framework.TestResult.addFailure(junit.framework.Test, junit.framework.AssertionFailedError)</inbound>
                <inbound type="feature" confirmed="yes">junit.framework.TestResult.endTest(junit.framework.Test)</inbound>
                <inbound type="feature" confirmed="yes">junit.framework.TestResult.startTest(junit.framework.Test)</inbound>
                <inbound type="feature" confirmed="yes">junit.framework.TestSuite.countTestCases()</inbound>
                <inbound type="feature" confirmed="yes">junit.framework.TestSuite.run(junit.framework.TestResult)</inbound>
                <inbound type="feature" confirmed="yes">org.hamcrest.BaseDescription.appendList(java.lang.String, java.lang.String, java.lang.String, java.util.Iterator)</inbound>
                <inbound type="feature" confirmed="yes">org.hamcrest.core.AllOf.matches(java.lang.Object)</inbound>
                <inbound type="feature" confirmed="yes">org.hamcrest.core.AnyOf.matches(java.lang.Object)</inbound>
                <inbound type="feature" confirmed="yes">org.hamcrest.internal.SelfDescribingValueIterator.hasNext()</inbound>
                <inbound type="feature" confirmed="yes">org.junit.experimental.ParallelComputer$1.finished()</inbound>
                <inbound type="feature" confirmed="yes">org.junit.experimental.categories.Categories$CategoryFilter.hasCorrectCategoryAnnotation(org.junit.runner.Description)</inbound>
                <inbound type="feature" confirmed="yes">org.junit.experimental.categories.Categories$CategoryFilter.shouldRun(org.junit.runner.Description)</inbound>
                <inbound type="feature" confirmed="yes">org.junit.experimental.categories.Categories.assertNoCategorizedDescendentsOfUncategorizeableParents(org.junit.runner.Description)</inbound>
                <inbound type="feature" confirmed="yes">org.junit.experimental.categories.Categories.assertNoDescendantsHaveCategoryAnnotations(org.junit.runner.Description)</inbound>
                <inbound type="feature" confirmed="yes">org.junit.experimental.categories.Categories.canHaveCategorizedChildren(org.junit.runner.Description)</inbound>
                <inbound type="feature" confirmed="yes">org.junit.experimental.max.MaxCore.constructLeafRequest(java.util.List)</inbound>
                <inbound type="feature" confirmed="yes">org.junit.experimental.max.MaxCore.findLeaves(org.junit.runner.Description, org.junit.runner.Description, java.util.List)</inbound>
                <inbound type="feature" confirmed="yes">org.junit.experimental.results.FailureList.result()</inbound>
                <inbound type="feature" confirmed="yes">org.junit.experimental.theories.ParameterSignature.getAnnotation(java.lang.Class)</inbound>
                <inbound type="feature" confirmed="yes">org.junit.experimental.theories.Theories$TheoryAnchor.runWithIncompleteAssignment(org.junit.experimental.theories.internal.Assignments)</inbound>
                <inbound type="feature" confirmed="yes">org.junit.experimental.theories.Theories.validateTestMethods(java.util.List)</inbound>
                <inbound type="feature" confirmed="yes">org.junit.experimental.theories.internal.AllMembersSupplier.addMultiPointMethods(java.util.List)</inbound>
                <inbound type="feature" confirmed="yes">org.junit.experimental.theories.internal.AllMembersSupplier.addSinglePointMethods(org.junit.experimental.theories.ParameterSignature, java.util.List)</inbound>
                <inbound type="feature" confirmed="yes">org.junit.experimental.theories.internal.ParameterizedAssertionError.join(java.lang.String, java.util.Collection)</inbound>
                <inbound type="feature" confirmed="yes">org.junit.internal.ArrayComparisonFailure.getMessage()</inbound>
                <inbound type="feature" confirmed="yes">org.junit.internal.TextListener.printFailures(org.junit.runner.Result)</inbound>
                <inbound type="feature" confirmed="yes">org.junit.internal.builders.AllDefaultPossibilitiesBuilder.runnerForClass(java.lang.Class)</inbound>
                <inbound type="feature" confirmed="yes">org.junit.internal.matchers.IsCollectionContaining.matchesSafely(java.lang.Iterable)</inbound>
                <inbound type="feature" confirmed="yes">org.junit.internal.runners.ClassRoadie.runAfters()</inbound>
                <inbound type="feature" confirmed="yes">org.junit.internal.runners.ClassRoadie.runBefores()</inbound>
                <inbound type="feature" confirmed="yes">org.junit.internal.runners.ErrorReportingRunner.getDescription()</inbound>
                <inbound type="feature" confirmed="yes">org.junit.internal.runners.ErrorReportingRunner.run(org.junit.runner.notification.RunNotifier)</inbound>
                <inbound type="feature" confirmed="yes">org.junit.internal.runners.JUnit4ClassRunner.filter(org.junit.runner.manipulation.Filter)</inbound>
                <inbound type="feature" confirmed="yes">org.junit.internal.runners.JUnit4ClassRunner.getDescription()</inbound>
                <inbound type="feature" confirmed="yes">org.junit.internal.runners.JUnit4ClassRunner.runMethods(org.junit.runner.notification.RunNotifier)</inbound>
                <inbound type="feature" confirmed="yes">org.junit.internal.runners.MethodRoadie.runAfters()</inbound>
                <inbound type="feature" confirmed="yes">org.junit.internal.runners.MethodRoadie.runBefores()</inbound>
                <inbound type="feature" confirmed="yes">org.junit.internal.runners.MethodValidator.validateTestMethods(java.lang.Class, boolean)</inbound>
                <inbound type="feature" confirmed="yes">org.junit.internal.runners.TestClass.getAnnotatedMethods(java.lang.Class)</inbound>
                <inbound type="feature" confirmed="yes">org.junit.internal.runners.TestClass.isShadowed(java.lang.reflect.Method, java.util.List)</inbound>
                <inbound type="feature" confirmed="yes">org.junit.internal.runners.model.EachTestNotifier.addMultipleFailureException(org.junit.runners.model.MultipleFailureException)</inbound>
                <inbound type="feature" confirmed="yes">org.junit.internal.runners.rules.RuleFieldValidator.validate(org.junit.runners.model.TestClass, java.util.List)</inbound>
                <inbound type="feature" confirmed="yes">org.junit.internal.runners.statements.RunAfters.evaluate()</inbound>
                <inbound type="feature" confirmed="yes">org.junit.internal.runners.statements.RunBefores.evaluate()</inbound>
                <inbound type="feature" confirmed="yes">org.junit.rules.RunRules.applyAll(org.junit.runners.model.Statement, java.lang.Iterable, org.junit.runner.Description)</inbound>
                <inbound type="feature" confirmed="yes">org.junit.runner.Description.testCount()</inbound>
                <inbound type="feature" confirmed="yes">org.junit.runner.JUnitCore.runMain(org.junit.internal.JUnitSystem, java.lang.String[])</inbound>
                <inbound type="feature" confirmed="yes">org.junit.runner.manipulation.Filter$2.shouldRun(org.junit.runner.Description)</inbound>
                <inbound type="feature" confirmed="yes">org.junit.runner.notification.RunNotifier$SafeNotifier.run()</inbound>
                <inbound type="feature" confirmed="yes">org.junit.runners.BlockJUnit4ClassRunner.withMethodRules(org.junit.runners.model.FrameworkMethod, java.lang.Object, org.junit.runners.model.Statement)</inbound>
                <inbound type="feature" confirmed="yes">org.junit.runners.Parameterized.getParametersMethod(org.junit.runners.model.TestClass)</inbound>
                <inbound type="feature" confirmed="yes">org.junit.runners.ParentRunner.filter(org.junit.runner.manipulation.Filter)</inbound>
                <inbound type="feature" confirmed="yes">org.junit.runners.ParentRunner.getDescription()</inbound>
                <inbound type="feature" confirmed="yes">org.junit.runners.ParentRunner.runChildren(org.junit.runner.notification.RunNotifier)</inbound>
                <inbound type="feature" confirmed="yes">org.junit.runners.ParentRunner.sort(org.junit.runner.manipulation.Sorter)</inbound>
                <inbound type="feature" confirmed="yes">org.junit.runners.ParentRunner.validatePublicVoidNoArgMethods(java.lang.Class, boolean, java.util.List)</inbound>
                <inbound type="feature" confirmed="yes">org.junit.runners.model.FrameworkMember.isShadowedBy(java.util.List)</inbound>
                <inbound type="feature" confirmed="yes">org.junit.runners.model.MultipleFailureException.getMessage()</inbound>
                <inbound type="feature" confirmed="yes">org.junit.runners.model.TestClass.TestClass(java.lang.Class)</inbound>
                <inbound type="feature" confirmed="yes">org.junit.runners.model.TestClass.getAnnotatedFieldValues(java.lang.Object, java.lang.Class, java.lang.Class)</inbound>
            </feature>
            <feature confirmed="no">
                <name>java.util.Iterator.next()</name>
                <inbound type="feature" confirmed="yes">junit.framework.JUnit4TestAdapter.removeIgnored(org.junit.runner.Description)</inbound>
                <inbound type="feature" confirmed="yes">junit.framework.JUnit4TestAdapterCache.asTestList(org.junit.runner.Description)</inbound>
                <inbound type="feature" confirmed="yes">junit.framework.JUnit4TestAdapterCache.createTest(org.junit.runner.Description)</inbound>
                <inbound type="feature" confirmed="yes">junit.framework.TestResult.addError(junit.framework.Test, java.lang.Throwable)</inbound>
                <inbound type="feature" confirmed="yes">junit.framework.TestResult.addFailure(junit.framework.Test, junit.framework.AssertionFailedError)</inbound>
                <inbound type="feature" confirmed="yes">junit.framework.TestResult.endTest(junit.framework.Test)</inbound>
                <inbound type="feature" confirmed="yes">junit.framework.TestResult.startTest(junit.framework.Test)</inbound>
                <inbound type="feature" confirmed="yes">junit.framework.TestSuite.countTestCases()</inbound>
                <inbound type="feature" confirmed="yes">junit.framework.TestSuite.run(junit.framework.TestResult)</inbound>
                <inbound type="feature" confirmed="yes">org.hamcrest.BaseDescription.appendList(java.lang.String, java.lang.String, java.lang.String, java.util.Iterator)</inbound>
                <inbound type="feature" confirmed="yes">org.hamcrest.core.AllOf.matches(java.lang.Object)</inbound>
                <inbound type="feature" confirmed="yes">org.hamcrest.core.AnyOf.matches(java.lang.Object)</inbound>
                <inbound type="feature" confirmed="yes">org.junit.experimental.ParallelComputer$1.finished()</inbound>
                <inbound type="feature" confirmed="yes">org.junit.experimental.categories.Categories$CategoryFilter.hasCorrectCategoryAnnotation(org.junit.runner.Description)</inbound>
                <inbound type="feature" confirmed="yes">org.junit.experimental.categories.Categories$CategoryFilter.shouldRun(org.junit.runner.Description)</inbound>
                <inbound type="feature" confirmed="yes">org.junit.experimental.categories.Categories.assertNoCategorizedDescendentsOfUncategorizeableParents(org.junit.runner.Description)</inbound>
                <inbound type="feature" confirmed="yes">org.junit.experimental.categories.Categories.assertNoDescendantsHaveCategoryAnnotations(org.junit.runner.Description)</inbound>
                <inbound type="feature" confirmed="yes">org.junit.experimental.categories.Categories.canHaveCategorizedChildren(org.junit.runner.Description)</inbound>
                <inbound type="feature" confirmed="yes">org.junit.experimental.max.MaxCore.constructLeafRequest(java.util.List)</inbound>
                <inbound type="feature" confirmed="yes">org.junit.experimental.max.MaxCore.findLeaves(org.junit.runner.Description, org.junit.runner.Description, java.util.List)</inbound>
                <inbound type="feature" confirmed="yes">org.junit.experimental.results.FailureList.result()</inbound>
                <inbound type="feature" confirmed="yes">org.junit.experimental.theories.ParameterSignature.getAnnotation(java.lang.Class)</inbound>
                <inbound type="feature" confirmed="yes">org.junit.experimental.theories.Theories$TheoryAnchor.runWithIncompleteAssignment(org.junit.experimental.theories.internal.Assignments)</inbound>
                <inbound type="feature" confirmed="yes">org.junit.experimental.theories.Theories.validateTestMethods(java.util.List)</inbound>
                <inbound type="feature" confirmed="yes">org.junit.experimental.theories.internal.AllMembersSupplier.addMultiPointMethods(java.util.List)</inbound>
                <inbound type="feature" confirmed="yes">org.junit.experimental.theories.internal.AllMembersSupplier.addSinglePointMethods(org.junit.experimental.theories.ParameterSignature, java.util.List)</inbound>
                <inbound type="feature" confirmed="yes">org.junit.experimental.theories.internal.ParameterizedAssertionError.join(java.lang.String, java.util.Collection)</inbound>
                <inbound type="feature" confirmed="yes">org.junit.internal.ArrayComparisonFailure.getMessage()</inbound>
                <inbound type="feature" confirmed="yes">org.junit.internal.TextListener.printFailures(org.junit.runner.Result)</inbound>
                <inbound type="feature" confirmed="yes">org.junit.internal.builders.AllDefaultPossibilitiesBuilder.runnerForClass(java.lang.Class)</inbound>
                <inbound type="feature" confirmed="yes">org.junit.internal.matchers.IsCollectionContaining.matchesSafely(java.lang.Iterable)</inbound>
                <inbound type="feature" confirmed="yes">org.junit.internal.runners.ClassRoadie.runAfters()</inbound>
                <inbound type="feature" confirmed="yes">org.junit.internal.runners.ClassRoadie.runBefores()</inbound>
                <inbound type="feature" confirmed="yes">org.junit.internal.runners.ErrorReportingRunner.getDescription()</inbound>
                <inbound type="feature" confirmed="yes">org.junit.internal.runners.ErrorReportingRunner.run(org.junit.runner.notification.RunNotifier)</inbound>
                <inbound type="feature" confirmed="yes">org.junit.internal.runners.JUnit4ClassRunner.filter(org.junit.runner.manipulation.Filter)</inbound>
                <inbound type="feature" confirmed="yes">org.junit.internal.runners.JUnit4ClassRunner.getDescription()</inbound>
                <inbound type="feature" confirmed="yes">org.junit.internal.runners.JUnit4ClassRunner.runMethods(org.junit.runner.notification.RunNotifier)</inbound>
                <inbound type="feature" confirmed="yes">org.junit.internal.runners.MethodRoadie.runAfters()</inbound>
                <inbound type="feature" confirmed="yes">org.junit.internal.runners.MethodRoadie.runBefores()</inbound>
                <inbound type="feature" confirmed="yes">org.junit.internal.runners.MethodValidator.validateTestMethods(java.lang.Class, boolean)</inbound>
                <inbound type="feature" confirmed="yes">org.junit.internal.runners.TestClass.getAnnotatedMethods(java.lang.Class)</inbound>
                <inbound type="feature" confirmed="yes">org.junit.internal.runners.TestClass.isShadowed(java.lang.reflect.Method, java.util.List)</inbound>
                <inbound type="feature" confirmed="yes">org.junit.internal.runners.model.EachTestNotifier.addMultipleFailureException(org.junit.runners.model.MultipleFailureException)</inbound>
                <inbound type="feature" confirmed="yes">org.junit.internal.runners.rules.RuleFieldValidator.validate(org.junit.runners.model.TestClass, java.util.List)</inbound>
                <inbound type="feature" confirmed="yes">org.junit.internal.runners.statements.RunAfters.evaluate()</inbound>
                <inbound type="feature" confirmed="yes">org.junit.internal.runners.statements.RunBefores.evaluate()</inbound>
                <inbound type="feature" confirmed="yes">org.junit.rules.RunRules.applyAll(org.junit.runners.model.Statement, java.lang.Iterable, org.junit.runner.Description)</inbound>
                <inbound type="feature" confirmed="yes">org.junit.runner.Description.testCount()</inbound>
                <inbound type="feature" confirmed="yes">org.junit.runner.JUnitCore.runMain(org.junit.internal.JUnitSystem, java.lang.String[])</inbound>
                <inbound type="feature" confirmed="yes">org.junit.runner.manipulation.Filter$2.shouldRun(org.junit.runner.Description)</inbound>
                <inbound type="feature" confirmed="yes">org.junit.runner.notification.RunNotifier$SafeNotifier.run()</inbound>
                <inbound type="feature" confirmed="yes">org.junit.runners.BlockJUnit4ClassRunner.withMethodRules(org.junit.runners.model.FrameworkMethod, java.lang.Object, org.junit.runners.model.Statement)</inbound>
                <inbound type="feature" confirmed="yes">org.junit.runners.Parameterized.getParametersMethod(org.junit.runners.model.TestClass)</inbound>
                <inbound type="feature" confirmed="yes">org.junit.runners.ParentRunner.filter(org.junit.runner.manipulation.Filter)</inbound>
                <inbound type="feature" confirmed="yes">org.junit.runners.ParentRunner.getDescription()</inbound>
                <inbound type="feature" confirmed="yes">org.junit.runners.ParentRunner.runChildren(org.junit.runner.notification.RunNotifier)</inbound>
                <inbound type="feature" confirmed="yes">org.junit.runners.ParentRunner.sort(org.junit.runner.manipulation.Sorter)</inbound>
                <inbound type="feature" confirmed="yes">org.junit.runners.ParentRunner.validatePublicVoidNoArgMethods(java.lang.Class, boolean, java.util.List)</inbound>
                <inbound type="feature" confirmed="yes">org.junit.runners.model.FrameworkMember.isShadowedBy(java.util.List)</inbound>
                <inbound type="feature" confirmed="yes">org.junit.runners.model.MultipleFailureException.getMessage()</inbound>
                <inbound type="feature" confirmed="yes">org.junit.runners.model.TestClass.TestClass(java.lang.Class)</inbound>
                <inbound type="feature" confirmed="yes">org.junit.runners.model.TestClass.getAnnotatedFieldValues(java.lang.Object, java.lang.Class, java.lang.Class)</inbound>
            </feature>
            <feature confirmed="no">
                <name>java.util.Iterator.remove()</name>
                <inbound type="feature" confirmed="yes">org.hamcrest.internal.SelfDescribingValueIterator.remove()</inbound>
                <inbound type="feature" confirmed="yes">org.junit.internal.runners.JUnit4ClassRunner.filter(org.junit.runner.manipulation.Filter)</inbound>
                <inbound type="feature" confirmed="yes">org.junit.runner.notification.RunNotifier$SafeNotifier.run()</inbound>
                <inbound type="feature" confirmed="yes">org.junit.runners.ParentRunner.filter(org.junit.runner.manipulation.Filter)</inbound>
            </feature>
        </class>
        <class confirmed="no">
            <name>java.util.List</name>
            <inbound type="feature" confirmed="yes">junit.framework.JUnit4TestAdapter.getTests()</inbound>
            <inbound type="feature" confirmed="yes">junit.framework.JUnit4TestAdapterCache.asTestList(org.junit.runner.Description)</inbound>
            <inbound type="feature" confirmed="yes">junit.framework.TestResult.TestResult()</inbound>
            <inbound type="feature" confirmed="yes">junit.framework.TestResult.addError(junit.framework.Test, java.lang.Throwable)</inbound>
            <inbound type="feature" confirmed="yes">junit.framework.TestResult.addFailure(junit.framework.Test, junit.framework.AssertionFailedError)</inbound>
            <inbound type="feature" confirmed="yes">junit.framework.TestResult.addListener(junit.framework.TestListener)</inbound>
            <inbound type="feature" confirmed="yes">junit.framework.TestResult.cloneListeners()</inbound>
            <inbound type="feature" confirmed="yes">junit.framework.TestResult.endTest(junit.framework.Test)</inbound>
            <inbound type="feature" confirmed="yes">junit.framework.TestResult.errorCount()</inbound>
            <inbound type="feature" confirmed="yes">junit.framework.TestResult.errors()</inbound>
            <inbound type="feature" confirmed="yes">junit.framework.TestResult.fErrors</inbound>
            <inbound type="feature" confirmed="yes">junit.framework.TestResult.fFailures</inbound>
            <inbound type="feature" confirmed="yes">junit.framework.TestResult.fListeners</inbound>
            <inbound type="feature" confirmed="yes">junit.framework.TestResult.failureCount()</inbound>
            <inbound type="feature" confirmed="yes">junit.framework.TestResult.failures()</inbound>
            <inbound type="feature" confirmed="yes">junit.framework.TestResult.removeListener(junit.framework.TestListener)</inbound>
            <inbound type="feature" confirmed="yes">junit.framework.TestResult.startTest(junit.framework.Test)</inbound>
            <inbound type="feature" confirmed="yes">junit.framework.TestSuite.addTestMethod(java.lang.reflect.Method, java.util.List, java.lang.Class)</inbound>
            <inbound type="feature" confirmed="yes">junit.framework.TestSuite.addTestsFromTestCase(java.lang.Class)</inbound>
            <inbound type="feature" confirmed="yes">org.hamcrest.BaseDescription.appendValueList(java.lang.String, java.lang.String, java.lang.String, java.lang.Object[])</inbound>
            <inbound type="feature" confirmed="yes">org.hamcrest.core.AllOf.allOf(org.hamcrest.Matcher[])</inbound>
            <inbound type="feature" confirmed="yes">org.hamcrest.core.AnyOf.anyOf(org.hamcrest.Matcher[])</inbound>
            <inbound type="feature" confirmed="yes">org.junit.Assume.assumeNotNull(java.lang.Object[])</inbound>
            <inbound type="feature" confirmed="yes">org.junit.experimental.ParallelComputer$1.ParallelComputer$1()</inbound>
            <inbound type="feature" confirmed="yes">org.junit.experimental.ParallelComputer$1.fResults</inbound>
            <inbound type="feature" confirmed="yes">org.junit.experimental.ParallelComputer$1.finished()</inbound>
            <inbound type="feature" confirmed="yes">org.junit.experimental.ParallelComputer$1.schedule(java.lang.Runnable)</inbound>
            <inbound type="feature" confirmed="yes">org.junit.experimental.categories.Categories$CategoryFilter.categories(org.junit.runner.Description)</inbound>
            <inbound type="feature" confirmed="yes">org.junit.experimental.categories.Categories$CategoryFilter.hasCorrectCategoryAnnotation(org.junit.runner.Description)</inbound>
            <inbound type="feature" confirmed="yes">org.junit.experimental.max.MaxCore$1$1.MaxCore$1$1(org.junit.experimental.max.MaxCore$1, java.lang.Class, java.util.List)</inbound>
            <inbound type="feature" confirmed="yes">org.junit.experimental.max.MaxCore$1.MaxCore$1(org.junit.experimental.max.MaxCore, java.util.List)</inbound>
            <inbound type="feature" confirmed="yes">org.junit.experimental.max.MaxCore$1.getRunner()</inbound>
            <inbound type="feature" confirmed="yes">org.junit.experimental.max.MaxCore$1.val$runners</inbound>
            <inbound type="feature" confirmed="yes">org.junit.experimental.max.MaxCore.constructLeafRequest(java.util.List)</inbound>
            <inbound type="feature" confirmed="yes">org.junit.experimental.max.MaxCore.findLeaves(org.junit.runner.Description, org.junit.runner.Description, java.util.List)</inbound>
            <inbound type="feature" confirmed="yes">org.junit.experimental.max.MaxCore.findLeaves(org.junit.runner.Request)</inbound>
            <inbound type="feature" confirmed="yes">org.junit.experimental.max.MaxCore.sortRequest(org.junit.runner.Request)</inbound>
            <inbound type="feature" confirmed="yes">org.junit.experimental.max.MaxCore.sortedLeavesForTest(org.junit.runner.Request)</inbound>
            <inbound type="feature" confirmed="yes">org.junit.experimental.results.FailureList.FailureList(java.util.List)</inbound>
            <inbound type="feature" confirmed="yes">org.junit.experimental.results.FailureList.failures</inbound>
            <inbound type="feature" confirmed="yes">org.junit.experimental.results.FailureList.result()</inbound>
            <inbound type="feature" confirmed="yes">org.junit.experimental.results.PrintableResult.PrintableResult(java.util.List)</inbound>
            <inbound type="feature" confirmed="yes">org.junit.experimental.results.PrintableResult.failureCount()</inbound>
            <inbound type="feature" confirmed="yes">org.junit.experimental.theories.ParameterSignature.getAnnotation(java.lang.Class)</inbound>
            <inbound type="feature" confirmed="yes">org.junit.experimental.theories.ParameterSignature.getAnnotations()</inbound>
            <inbound type="feature" confirmed="yes">org.junit.experimental.theories.ParameterSignature.signatures(java.lang.reflect.Constructor)</inbound>
            <inbound type="feature" confirmed="yes">org.junit.experimental.theories.ParameterSupplier.getValueSources(org.junit.experimental.theories.ParameterSignature)</inbound>
            <inbound type="feature" confirmed="yes">org.junit.experimental.theories.Theories$TheoryAnchor$1.collectInitializationErrors(java.util.List)</inbound>
            <inbound type="feature" confirmed="yes">org.junit.experimental.theories.Theories$TheoryAnchor.Theories$TheoryAnchor(org.junit.runners.model.FrameworkMethod, org.junit.runners.model.TestClass)</inbound>
            <inbound type="feature" confirmed="yes">org.junit.experimental.theories.Theories$TheoryAnchor.evaluate()</inbound>
            <inbound type="feature" confirmed="yes">org.junit.experimental.theories.Theories$TheoryAnchor.fInvalidParameters</inbound>
            <inbound type="feature" confirmed="yes">org.junit.experimental.theories.Theories$TheoryAnchor.handleAssumptionViolation(org.junit.internal.AssumptionViolatedException)</inbound>
            <inbound type="feature" confirmed="yes">org.junit.experimental.theories.Theories$TheoryAnchor.runWithIncompleteAssignment(org.junit.experimental.theories.internal.Assignments)</inbound>
            <inbound type="feature" confirmed="yes">org.junit.experimental.theories.Theories.collectInitializationErrors(java.util.List)</inbound>
            <inbound type="feature" confirmed="yes">org.junit.experimental.theories.Theories.computeTestMethods()</inbound>
            <inbound type="feature" confirmed="yes">org.junit.experimental.theories.Theories.validateConstructor(java.util.List)</inbound>
            <inbound type="feature" confirmed="yes">org.junit.experimental.theories.Theories.validateDataPointFields(java.util.List)</inbound>
            <inbound type="feature" confirmed="yes">org.junit.experimental.theories.Theories.validateTestMethods(java.util.List)</inbound>
            <inbound type="feature" confirmed="yes">org.junit.experimental.theories.internal.AllMembersSupplier.addArrayValues(java.lang.String, java.util.List, java.lang.Object)</inbound>
            <inbound type="feature" confirmed="yes">org.junit.experimental.theories.internal.AllMembersSupplier.addFields(org.junit.experimental.theories.ParameterSignature, java.util.List)</inbound>
            <inbound type="feature" confirmed="yes">org.junit.experimental.theories.internal.AllMembersSupplier.addMultiPointMethods(java.util.List)</inbound>
            <inbound type="feature" confirmed="yes">org.junit.experimental.theories.internal.AllMembersSupplier.addSinglePointMethods(org.junit.experimental.theories.ParameterSignature, java.util.List)</inbound>
            <inbound type="feature" confirmed="yes">org.junit.experimental.theories.internal.AllMembersSupplier.getValueSources(org.junit.experimental.theories.ParameterSignature)</inbound>
            <inbound type="feature" confirmed="yes">org.junit.experimental.theories.internal.Assignments.Assignments(java.util.List, java.util.List, org.junit.runners.model.TestClass)</inbound>
            <inbound type="feature" confirmed="yes">org.junit.experimental.theories.internal.Assignments.allUnassigned(java.lang.reflect.Method, org.junit.runners.model.TestClass)</inbound>
            <inbound type="feature" confirmed="yes">org.junit.experimental.theories.internal.Assignments.assignNext(org.junit.experimental.theories.PotentialAssignment)</inbound>
            <inbound type="feature" confirmed="yes">org.junit.experimental.theories.internal.Assignments.fAssigned</inbound>
            <inbound type="feature" confirmed="yes">org.junit.experimental.theories.internal.Assignments.fUnassigned</inbound>
            <inbound type="feature" confirmed="yes">org.junit.experimental.theories.internal.Assignments.getActualValues(int, int, boolean)</inbound>
            <inbound type="feature" confirmed="yes">org.junit.experimental.theories.internal.Assignments.getAllArguments(boolean)</inbound>
            <inbound type="feature" confirmed="yes">org.junit.experimental.theories.internal.Assignments.getArgumentStrings(boolean)</inbound>
            <inbound type="feature" confirmed="yes">org.junit.experimental.theories.internal.Assignments.getConstructorParameterCount()</inbound>
            <inbound type="feature" confirmed="yes">org.junit.experimental.theories.internal.Assignments.getMethodArguments(boolean)</inbound>
            <inbound type="feature" confirmed="yes">org.junit.experimental.theories.internal.Assignments.isComplete()</inbound>
            <inbound type="feature" confirmed="yes">org.junit.experimental.theories.internal.Assignments.nextUnassigned()</inbound>
            <inbound type="feature" confirmed="yes">org.junit.experimental.theories.internal.Assignments.potentialsForNextUnassigned()</inbound>
            <inbound type="feature" confirmed="yes">org.junit.experimental.theories.internal.ParameterizedAssertionError.join(java.lang.String, java.lang.Object[])</inbound>
            <inbound type="feature" confirmed="yes">org.junit.experimental.theories.suppliers.TestedOnSupplier.getValueSources(org.junit.experimental.theories.ParameterSignature)</inbound>
            <inbound type="feature" confirmed="yes">org.junit.internal.ArrayComparisonFailure.ArrayComparisonFailure(java.lang.String, java.lang.AssertionError, int)</inbound>
            <inbound type="feature" confirmed="yes">org.junit.internal.ArrayComparisonFailure.addDimension(int)</inbound>
            <inbound type="feature" confirmed="yes">org.junit.internal.ArrayComparisonFailure.fIndices</inbound>
            <inbound type="feature" confirmed="yes">org.junit.internal.ArrayComparisonFailure.getMessage()</inbound>
            <inbound type="feature" confirmed="yes">org.junit.internal.TextListener.printFailures(org.junit.runner.Result)</inbound>
            <inbound type="feature" confirmed="yes">org.junit.internal.builders.AllDefaultPossibilitiesBuilder.runnerForClass(java.lang.Class)</inbound>
            <inbound type="feature" confirmed="yes">org.junit.internal.runners.ClassRoadie.runAfters()</inbound>
            <inbound type="feature" confirmed="yes">org.junit.internal.runners.ClassRoadie.runBefores()</inbound>
            <inbound type="feature" confirmed="yes">org.junit.internal.runners.ErrorReportingRunner.ErrorReportingRunner(java.lang.Class, java.lang.Throwable)</inbound>
            <inbound type="feature" confirmed="yes">org.junit.internal.runners.ErrorReportingRunner.fCauses</inbound>
            <inbound type="feature" confirmed="yes">org.junit.internal.runners.ErrorReportingRunner.getCauses(java.lang.Throwable)</inbound>
            <inbound type="feature" confirmed="yes">org.junit.internal.runners.ErrorReportingRunner.getDescription()</inbound>
            <inbound type="feature" confirmed="yes">org.junit.internal.runners.ErrorReportingRunner.run(org.junit.runner.notification.RunNotifier)</inbound>
            <inbound type="feature" confirmed="yes">org.junit.internal.runners.InitializationError.InitializationError(java.lang.Throwable[])</inbound>
            <inbound type="feature" confirmed="yes">org.junit.internal.runners.InitializationError.InitializationError(java.util.List)</inbound>
            <inbound type="feature" confirmed="yes">org.junit.internal.runners.InitializationError.fErrors</inbound>
            <inbound type="feature" confirmed="yes">org.junit.internal.runners.InitializationError.getCauses()</inbound>
            <inbound type="feature" confirmed="yes">org.junit.internal.runners.JUnit4ClassRunner.JUnit4ClassRunner(java.lang.Class)</inbound>
            <inbound type="feature" confirmed="yes">org.junit.internal.runners.JUnit4ClassRunner.fTestMethods</inbound>
            <inbound type="feature" confirmed="yes">org.junit.internal.runners.JUnit4ClassRunner.filter(org.junit.runner.manipulation.Filter)</inbound>
            <inbound type="feature" confirmed="yes">org.junit.internal.runners.JUnit4ClassRunner.getDescription()</inbound>
            <inbound type="feature" confirmed="yes">org.junit.internal.runners.JUnit4ClassRunner.getTestMethods()</inbound>
            <inbound type="feature" confirmed="yes">org.junit.internal.runners.JUnit4ClassRunner.runMethods(org.junit.runner.notification.RunNotifier)</inbound>
            <inbound type="feature" confirmed="yes">org.junit.internal.runners.JUnit4ClassRunner.sort(org.junit.runner.manipulation.Sorter)</inbound>
            <inbound type="feature" confirmed="yes">org.junit.internal.runners.JUnit4ClassRunner.validate()</inbound>
            <inbound type="feature" confirmed="yes">org.junit.internal.runners.MethodRoadie$1.run()</inbound>
            <inbound type="feature" confirmed="yes">org.junit.internal.runners.MethodRoadie.runAfters()</inbound>
            <inbound type="feature" confirmed="yes">org.junit.internal.runners.MethodRoadie.runBefores()</inbound>
            <inbound type="feature" confirmed="yes">org.junit.internal.runners.MethodValidator.MethodValidator(org.junit.internal.runners.TestClass)</inbound>
            <inbound type="feature" confirmed="yes">org.junit.internal.runners.MethodValidator.assertValid()</inbound>
            <inbound type="feature" confirmed="yes">org.junit.internal.runners.MethodValidator.fErrors</inbound>
            <inbound type="feature" confirmed="yes">org.junit.internal.runners.MethodValidator.validateInstanceMethods()</inbound>
            <inbound type="feature" confirmed="yes">org.junit.internal.runners.MethodValidator.validateMethodsForDefaultRunner()</inbound>
            <inbound type="feature" confirmed="yes">org.junit.internal.runners.MethodValidator.validateNoArgConstructor()</inbound>
            <inbound type="feature" confirmed="yes">org.junit.internal.runners.MethodValidator.validateTestMethods(java.lang.Class, boolean)</inbound>
            <inbound type="feature" confirmed="yes">org.junit.internal.runners.TestClass.getAfters()</inbound>
            <inbound type="feature" confirmed="yes">org.junit.internal.runners.TestClass.getAnnotatedMethods(java.lang.Class)</inbound>
            <inbound type="feature" confirmed="yes">org.junit.internal.runners.TestClass.getBefores()</inbound>
            <inbound type="feature" confirmed="yes">org.junit.internal.runners.TestClass.getSuperClasses(java.lang.Class)</inbound>
            <inbound type="feature" confirmed="yes">org.junit.internal.runners.TestClass.getTestMethods()</inbound>
            <inbound type="feature" confirmed="yes">org.junit.internal.runners.TestClass.isShadowed(java.lang.reflect.Method, java.util.List)</inbound>
            <inbound type="feature" confirmed="yes">org.junit.internal.runners.TestMethod.getAfters()</inbound>
            <inbound type="feature" confirmed="yes">org.junit.internal.runners.TestMethod.getBefores()</inbound>
            <inbound type="feature" confirmed="yes">org.junit.internal.runners.model.EachTestNotifier.addMultipleFailureException(org.junit.runners.model.MultipleFailureException)</inbound>
            <inbound type="feature" confirmed="yes">org.junit.internal.runners.model.MultipleFailureException.MultipleFailureException(java.util.List)</inbound>
            <inbound type="feature" confirmed="yes">org.junit.internal.runners.rules.RuleFieldValidator.addError(java.util.List, org.junit.runners.model.FrameworkField, java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">org.junit.internal.runners.rules.RuleFieldValidator.optionallyValidateStatic(org.junit.runners.model.FrameworkField, java.util.List)</inbound>
            <inbound type="feature" confirmed="yes">org.junit.internal.runners.rules.RuleFieldValidator.validate(org.junit.runners.model.TestClass, java.util.List)</inbound>
            <inbound type="feature" confirmed="yes">org.junit.internal.runners.rules.RuleFieldValidator.validateField(org.junit.runners.model.FrameworkField, java.util.List)</inbound>
            <inbound type="feature" confirmed="yes">org.junit.internal.runners.rules.RuleFieldValidator.validatePublic(org.junit.runners.model.FrameworkField, java.util.List)</inbound>
            <inbound type="feature" confirmed="yes">org.junit.internal.runners.rules.RuleFieldValidator.validateTestRuleOrMethodRule(org.junit.runners.model.FrameworkField, java.util.List)</inbound>
            <inbound type="feature" confirmed="yes">org.junit.internal.runners.statements.RunAfters.RunAfters(org.junit.runners.model.Statement, java.util.List, java.lang.Object)</inbound>
            <inbound type="feature" confirmed="yes">org.junit.internal.runners.statements.RunAfters.evaluate()</inbound>
            <inbound type="feature" confirmed="yes">org.junit.internal.runners.statements.RunAfters.fAfters</inbound>
            <inbound type="feature" confirmed="yes">org.junit.internal.runners.statements.RunBefores.RunBefores(org.junit.runners.model.Statement, java.util.List, java.lang.Object)</inbound>
            <inbound type="feature" confirmed="yes">org.junit.internal.runners.statements.RunBefores.evaluate()</inbound>
            <inbound type="feature" confirmed="yes">org.junit.internal.runners.statements.RunBefores.fBefores</inbound>
            <inbound type="feature" confirmed="yes">org.junit.rules.ErrorCollector.ErrorCollector()</inbound>
            <inbound type="feature" confirmed="yes">org.junit.rules.ErrorCollector.addError(java.lang.Throwable)</inbound>
            <inbound type="feature" confirmed="yes">org.junit.rules.ErrorCollector.errors</inbound>
            <inbound type="feature" confirmed="yes">org.junit.rules.ErrorCollector.verify()</inbound>
            <inbound type="feature" confirmed="yes">org.junit.runner.Description.getAnnotations()</inbound>
            <inbound type="feature" confirmed="yes">org.junit.runner.JUnitCore.runMain(org.junit.internal.JUnitSystem, java.lang.String[])</inbound>
            <inbound type="feature" confirmed="yes">org.junit.runner.Result$Listener.testFailure(org.junit.runner.notification.Failure)</inbound>
            <inbound type="feature" confirmed="yes">org.junit.runner.Result.Result()</inbound>
            <inbound type="feature" confirmed="yes">org.junit.runner.Result.access$300(org.junit.runner.Result)</inbound>
            <inbound type="feature" confirmed="yes">org.junit.runner.Result.fFailures</inbound>
            <inbound type="feature" confirmed="yes">org.junit.runner.Result.getFailureCount()</inbound>
            <inbound type="feature" confirmed="yes">org.junit.runner.Result.getFailures()</inbound>
            <inbound type="feature" confirmed="yes">org.junit.runner.notification.RunNotifier$SafeNotifier.run()</inbound>
            <inbound type="feature" confirmed="yes">org.junit.runner.notification.RunNotifier.RunNotifier()</inbound>
            <inbound type="feature" confirmed="yes">org.junit.runner.notification.RunNotifier.access$000(org.junit.runner.notification.RunNotifier)</inbound>
            <inbound type="feature" confirmed="yes">org.junit.runner.notification.RunNotifier.addFirstListener(org.junit.runner.notification.RunListener)</inbound>
            <inbound type="feature" confirmed="yes">org.junit.runner.notification.RunNotifier.addListener(org.junit.runner.notification.RunListener)</inbound>
            <inbound type="feature" confirmed="yes">org.junit.runner.notification.RunNotifier.fListeners</inbound>
            <inbound type="feature" confirmed="yes">org.junit.runner.notification.RunNotifier.removeListener(org.junit.runner.notification.RunListener)</inbound>
            <inbound type="feature" confirmed="yes">org.junit.runners.BlockJUnit4ClassRunner.collectInitializationErrors(java.util.List)</inbound>
            <inbound type="feature" confirmed="yes">org.junit.runners.BlockJUnit4ClassRunner.computeTestMethods()</inbound>
            <inbound type="feature" confirmed="yes">org.junit.runners.BlockJUnit4ClassRunner.getChildren()</inbound>
            <inbound type="feature" confirmed="yes">org.junit.runners.BlockJUnit4ClassRunner.getMethodRules(java.lang.Object)</inbound>
            <inbound type="feature" confirmed="yes">org.junit.runners.BlockJUnit4ClassRunner.getTestRules(java.lang.Object)</inbound>
            <inbound type="feature" confirmed="yes">org.junit.runners.BlockJUnit4ClassRunner.rules(java.lang.Object)</inbound>
            <inbound type="feature" confirmed="yes">org.junit.runners.BlockJUnit4ClassRunner.validateConstructor(java.util.List)</inbound>
            <inbound type="feature" confirmed="yes">org.junit.runners.BlockJUnit4ClassRunner.validateFields(java.util.List)</inbound>
            <inbound type="feature" confirmed="yes">org.junit.runners.BlockJUnit4ClassRunner.validateInstanceMethods(java.util.List)</inbound>
            <inbound type="feature" confirmed="yes">org.junit.runners.BlockJUnit4ClassRunner.validateOnlyOneConstructor(java.util.List)</inbound>
            <inbound type="feature" confirmed="yes">org.junit.runners.BlockJUnit4ClassRunner.validateTestMethods(java.util.List)</inbound>
            <inbound type="feature" confirmed="yes">org.junit.runners.BlockJUnit4ClassRunner.validateZeroArgConstructor(java.util.List)</inbound>
            <inbound type="feature" confirmed="yes">org.junit.runners.BlockJUnit4ClassRunner.withAfters(org.junit.runners.model.FrameworkMethod, java.lang.Object, org.junit.runners.model.Statement)</inbound>
            <inbound type="feature" confirmed="yes">org.junit.runners.BlockJUnit4ClassRunner.withBefores(org.junit.runners.model.FrameworkMethod, java.lang.Object, org.junit.runners.model.Statement)</inbound>
            <inbound type="feature" confirmed="yes">org.junit.runners.BlockJUnit4ClassRunner.withMethodRules(org.junit.runners.model.FrameworkMethod, java.lang.Object, org.junit.runners.model.Statement)</inbound>
            <inbound type="feature" confirmed="yes">org.junit.runners.BlockJUnit4ClassRunner.withTestRules(org.junit.runners.model.FrameworkMethod, java.lang.Object, org.junit.runners.model.Statement)</inbound>
            <inbound type="feature" confirmed="yes">org.junit.runners.Parameterized$TestClassRunnerForParameters.Parameterized$TestClassRunnerForParameters(org.junit.runners.Parameterized, java.lang.Class, java.util.List, int)</inbound>
            <inbound type="feature" confirmed="yes">org.junit.runners.Parameterized$TestClassRunnerForParameters.computeParams()</inbound>
            <inbound type="feature" confirmed="yes">org.junit.runners.Parameterized$TestClassRunnerForParameters.fParameterList</inbound>
            <inbound type="feature" confirmed="yes">org.junit.runners.Parameterized$TestClassRunnerForParameters.validateConstructor(java.util.List)</inbound>
            <inbound type="feature" confirmed="yes">org.junit.runners.Parameterized.Parameterized(java.lang.Class)</inbound>
            <inbound type="feature" confirmed="yes">org.junit.runners.Parameterized.getChildren()</inbound>
            <inbound type="feature" confirmed="yes">org.junit.runners.Parameterized.getParametersList(org.junit.runners.model.TestClass)</inbound>
            <inbound type="feature" confirmed="yes">org.junit.runners.Parameterized.getParametersMethod(org.junit.runners.model.TestClass)</inbound>
            <inbound type="feature" confirmed="yes">org.junit.runners.ParentRunner.ParentRunner(java.lang.Class)</inbound>
            <inbound type="feature" confirmed="yes">org.junit.runners.ParentRunner.classRules()</inbound>
            <inbound type="feature" confirmed="yes">org.junit.runners.ParentRunner.collectInitializationErrors(java.util.List)</inbound>
            <inbound type="feature" confirmed="yes">org.junit.runners.ParentRunner.fFilteredChildren</inbound>
            <inbound type="feature" confirmed="yes">org.junit.runners.ParentRunner.filter(org.junit.runner.manipulation.Filter)</inbound>
            <inbound type="feature" confirmed="yes">org.junit.runners.ParentRunner.getChildren()</inbound>
            <inbound type="feature" confirmed="yes">org.junit.runners.ParentRunner.getDescription()</inbound>
            <inbound type="feature" confirmed="yes">org.junit.runners.ParentRunner.getFilteredChildren()</inbound>
            <inbound type="feature" confirmed="yes">org.junit.runners.ParentRunner.runChildren(org.junit.runner.notification.RunNotifier)</inbound>
            <inbound type="feature" confirmed="yes">org.junit.runners.ParentRunner.sort(org.junit.runner.manipulation.Sorter)</inbound>
            <inbound type="feature" confirmed="yes">org.junit.runners.ParentRunner.validate()</inbound>
            <inbound type="feature" confirmed="yes">org.junit.runners.ParentRunner.validateClassRules(java.util.List)</inbound>
            <inbound type="feature" confirmed="yes">org.junit.runners.ParentRunner.validatePublicVoidNoArgMethods(java.lang.Class, boolean, java.util.List)</inbound>
            <inbound type="feature" confirmed="yes">org.junit.runners.ParentRunner.withAfterClasses(org.junit.runners.model.Statement)</inbound>
            <inbound type="feature" confirmed="yes">org.junit.runners.ParentRunner.withBeforeClasses(org.junit.runners.model.Statement)</inbound>
            <inbound type="feature" confirmed="yes">org.junit.runners.ParentRunner.withClassRules(org.junit.runners.model.Statement)</inbound>
            <inbound type="feature" confirmed="yes">org.junit.runners.Suite.Suite(java.lang.Class, java.util.List)</inbound>
            <inbound type="feature" confirmed="yes">org.junit.runners.Suite.Suite(org.junit.runners.model.RunnerBuilder, java.lang.Class, java.lang.Class[])</inbound>
            <inbound type="feature" confirmed="yes">org.junit.runners.Suite.Suite(org.junit.runners.model.RunnerBuilder, java.lang.Class[])</inbound>
            <inbound type="feature" confirmed="yes">org.junit.runners.Suite.fRunners</inbound>
            <inbound type="feature" confirmed="yes">org.junit.runners.Suite.getChildren()</inbound>
            <inbound type="feature" confirmed="yes">org.junit.runners.model.FrameworkMember.isShadowedBy(java.util.List)</inbound>
            <inbound type="feature" confirmed="yes">org.junit.runners.model.FrameworkMethod.validatePublicVoid(boolean, java.util.List)</inbound>
            <inbound type="feature" confirmed="yes">org.junit.runners.model.FrameworkMethod.validatePublicVoidNoArg(boolean, java.util.List)</inbound>
            <inbound type="feature" confirmed="yes">org.junit.runners.model.InitializationError.InitializationError(java.lang.Throwable)</inbound>
            <inbound type="feature" confirmed="yes">org.junit.runners.model.InitializationError.InitializationError(java.util.List)</inbound>
            <inbound type="feature" confirmed="yes">org.junit.runners.model.InitializationError.fErrors</inbound>
            <inbound type="feature" confirmed="yes">org.junit.runners.model.InitializationError.getCauses()</inbound>
            <inbound type="feature" confirmed="yes">org.junit.runners.model.MultipleFailureException.MultipleFailureException(java.util.List)</inbound>
            <inbound type="feature" confirmed="yes">org.junit.runners.model.MultipleFailureException.assertEmpty(java.util.List)</inbound>
            <inbound type="feature" confirmed="yes">org.junit.runners.model.MultipleFailureException.fErrors</inbound>
            <inbound type="feature" confirmed="yes">org.junit.runners.model.MultipleFailureException.getFailures()</inbound>
            <inbound type="feature" confirmed="yes">org.junit.runners.model.MultipleFailureException.getMessage()</inbound>
            <inbound type="feature" confirmed="yes">org.junit.runners.model.RunnerBuilder.runners(java.lang.Class, java.lang.Class[])</inbound>
            <inbound type="feature" confirmed="yes">org.junit.runners.model.RunnerBuilder.runners(java.lang.Class, java.util.List)</inbound>
            <inbound type="feature" confirmed="yes">org.junit.runners.model.RunnerBuilder.runners(java.lang.Class[])</inbound>
            <inbound type="feature" confirmed="yes">org.junit.runners.model.TestClass.TestClass(java.lang.Class)</inbound>
            <inbound type="feature" confirmed="yes">org.junit.runners.model.TestClass.addToAnnotationLists(org.junit.runners.model.FrameworkMember, java.util.Map)</inbound>
            <inbound type="feature" confirmed="yes">org.junit.runners.model.TestClass.getAnnotatedFieldValues(java.lang.Object, java.lang.Class, java.lang.Class)</inbound>
            <inbound type="feature" confirmed="yes">org.junit.runners.model.TestClass.getAnnotatedFields(java.lang.Class)</inbound>
            <inbound type="feature" confirmed="yes">org.junit.runners.model.TestClass.getAnnotatedMembers(java.util.Map, java.lang.Class)</inbound>
            <inbound type="feature" confirmed="yes">org.junit.runners.model.TestClass.getAnnotatedMethods(java.lang.Class)</inbound>
            <inbound type="feature" confirmed="yes">org.junit.runners.model.TestClass.getSuperClasses(java.lang.Class)</inbound>
            <feature confirmed="no">
                <name>java.util.List.add(int, java.lang.Object)</name>
                <inbound type="feature" confirmed="yes">org.junit.internal.ArrayComparisonFailure.addDimension(int)</inbound>
                <inbound type="feature" confirmed="yes">org.junit.runner.notification.RunNotifier.addFirstListener(org.junit.runner.notification.RunListener)</inbound>
                <inbound type="feature" confirmed="yes">org.junit.runners.model.TestClass.addToAnnotationLists(org.junit.runners.model.FrameworkMember, java.util.Map)</inbound>
            </feature>
            <feature confirmed="no">
                <name>java.util.List.add(java.lang.Object)</name>
                <inbound type="feature" confirmed="yes">junit.framework.JUnit4TestAdapterCache.asTestList(org.junit.runner.Description)</inbound>
                <inbound type="feature" confirmed="yes">junit.framework.TestResult.addError(junit.framework.Test, java.lang.Throwable)</inbound>
                <inbound type="feature" confirmed="yes">junit.framework.TestResult.addFailure(junit.framework.Test, junit.framework.AssertionFailedError)</inbound>
                <inbound type="feature" confirmed="yes">junit.framework.TestResult.addListener(junit.framework.TestListener)</inbound>
                <inbound type="feature" confirmed="yes">junit.framework.TestSuite.addTestMethod(java.lang.reflect.Method, java.util.List, java.lang.Class)</inbound>
                <inbound type="feature" confirmed="yes">org.junit.experimental.ParallelComputer$1.schedule(java.lang.Runnable)</inbound>
                <inbound type="feature" confirmed="yes">org.junit.experimental.max.MaxCore.constructLeafRequest(java.util.List)</inbound>
                <inbound type="feature" confirmed="yes">org.junit.experimental.max.MaxCore.findLeaves(org.junit.runner.Description, org.junit.runner.Description, java.util.List)</inbound>
                <inbound type="feature" confirmed="yes">org.junit.experimental.theories.Theories$TheoryAnchor.handleAssumptionViolation(org.junit.internal.AssumptionViolatedException)</inbound>
                <inbound type="feature" confirmed="yes">org.junit.experimental.theories.Theories.validateDataPointFields(java.util.List)</inbound>
                <inbound type="feature" confirmed="yes">org.junit.experimental.theories.internal.AllMembersSupplier.addArrayValues(java.lang.String, java.util.List, java.lang.Object)</inbound>
                <inbound type="feature" confirmed="yes">org.junit.experimental.theories.internal.AllMembersSupplier.addFields(org.junit.experimental.theories.ParameterSignature, java.util.List)</inbound>
                <inbound type="feature" confirmed="yes">org.junit.experimental.theories.internal.AllMembersSupplier.addSinglePointMethods(org.junit.experimental.theories.ParameterSignature, java.util.List)</inbound>
                <inbound type="feature" confirmed="yes">org.junit.experimental.theories.internal.Assignments.assignNext(org.junit.experimental.theories.PotentialAssignment)</inbound>
                <inbound type="feature" confirmed="yes">org.junit.experimental.theories.suppliers.TestedOnSupplier.getValueSources(org.junit.experimental.theories.ParameterSignature)</inbound>
                <inbound type="feature" confirmed="yes">org.junit.internal.runners.MethodValidator.validateInstanceMethods()</inbound>
                <inbound type="feature" confirmed="yes">org.junit.internal.runners.MethodValidator.validateNoArgConstructor()</inbound>
                <inbound type="feature" confirmed="yes">org.junit.internal.runners.MethodValidator.validateTestMethods(java.lang.Class, boolean)</inbound>
                <inbound type="feature" confirmed="yes">org.junit.internal.runners.TestClass.getAnnotatedMethods(java.lang.Class)</inbound>
                <inbound type="feature" confirmed="yes">org.junit.internal.runners.rules.RuleFieldValidator.addError(java.util.List, org.junit.runners.model.FrameworkField, java.lang.String)</inbound>
                <inbound type="feature" confirmed="yes">org.junit.internal.runners.statements.RunAfters.evaluate()</inbound>
                <inbound type="feature" confirmed="yes">org.junit.rules.ErrorCollector.addError(java.lang.Throwable)</inbound>
                <inbound type="feature" confirmed="yes">org.junit.runner.JUnitCore.runMain(org.junit.internal.JUnitSystem, java.lang.String[])</inbound>
                <inbound type="feature" confirmed="yes">org.junit.runner.Result$Listener.testFailure(org.junit.runner.notification.Failure)</inbound>
                <inbound type="feature" confirmed="yes">org.junit.runner.notification.RunNotifier.addListener(org.junit.runner.notification.RunListener)</inbound>
                <inbound type="feature" confirmed="yes">org.junit.runners.BlockJUnit4ClassRunner.validateInstanceMethods(java.util.List)</inbound>
                <inbound type="feature" confirmed="yes">org.junit.runners.BlockJUnit4ClassRunner.validateOnlyOneConstructor(java.util.List)</inbound>
                <inbound type="feature" confirmed="yes">org.junit.runners.BlockJUnit4ClassRunner.validateZeroArgConstructor(java.util.List)</inbound>
                <inbound type="feature" confirmed="yes">org.junit.runners.model.FrameworkMethod.validatePublicVoid(boolean, java.util.List)</inbound>
                <inbound type="feature" confirmed="yes">org.junit.runners.model.FrameworkMethod.validatePublicVoidNoArg(boolean, java.util.List)</inbound>
                <inbound type="feature" confirmed="yes">org.junit.runners.model.TestClass.addToAnnotationLists(org.junit.runners.model.FrameworkMember, java.util.Map)</inbound>
                <inbound type="feature" confirmed="yes">org.junit.runners.model.TestClass.getAnnotatedFieldValues(java.lang.Object, java.lang.Class, java.lang.Class)</inbound>
            </feature>
            <feature confirmed="no">
                <name>java.util.List.addAll(java.util.Collection)</name>
                <inbound type="feature" confirmed="yes">junit.framework.TestResult.cloneListeners()</inbound>
                <inbound type="feature" confirmed="yes">org.junit.experimental.theories.Theories.computeTestMethods()</inbound>
                <inbound type="feature" confirmed="yes">org.junit.experimental.theories.internal.Assignments.allUnassigned(java.lang.reflect.Method, org.junit.runners.model.TestClass)</inbound>
            </feature>
            <feature confirmed="no">
                <name>java.util.List.clear()</name>
                <inbound type="feature" confirmed="yes">org.junit.internal.runners.statements.RunAfters.evaluate()</inbound>
            </feature>
            <feature confirmed="no">
                <name>java.util.List.contains(java.lang.Object)</name>
                <inbound type="feature" confirmed="yes">junit.framework.TestSuite.addTestMethod(java.lang.reflect.Method, java.util.List, java.lang.Class)</inbound>
                <inbound type="feature" confirmed="yes">org.junit.runners.BlockJUnit4ClassRunner.withMethodRules(org.junit.runners.model.FrameworkMethod, java.lang.Object, org.junit.runners.model.Statement)</inbound>
            </feature>
            <feature confirmed="no">
                <name>java.util.List.get(int)</name>
                <inbound type="feature" confirmed="yes">org.junit.experimental.theories.internal.Assignments.getActualValues(int, int, boolean)</inbound>
                <inbound type="feature" confirmed="yes">org.junit.experimental.theories.internal.Assignments.getArgumentStrings(boolean)</inbound>
                <inbound type="feature" confirmed="yes">org.junit.experimental.theories.internal.Assignments.nextUnassigned()</inbound>
                <inbound type="feature" confirmed="yes">org.junit.runners.Parameterized$TestClassRunnerForParameters.computeParams()</inbound>
                <inbound type="feature" confirmed="yes">org.junit.runners.model.MultipleFailureException.assertEmpty(java.util.List)</inbound>
            </feature>
            <feature confirmed="no">
                <name>java.util.List.isEmpty()</name>
                <inbound type="feature" confirmed="yes">org.junit.experimental.categories.Categories$CategoryFilter.hasCorrectCategoryAnnotation(org.junit.runner.Description)</inbound>
                <inbound type="feature" confirmed="yes">org.junit.internal.runners.JUnit4ClassRunner.filter(org.junit.runner.manipulation.Filter)</inbound>
                <inbound type="feature" confirmed="yes">org.junit.internal.runners.MethodValidator.assertValid()</inbound>
                <inbound type="feature" confirmed="yes">org.junit.runners.BlockJUnit4ClassRunner.withAfters(org.junit.runners.model.FrameworkMethod, java.lang.Object, org.junit.runners.model.Statement)</inbound>
                <inbound type="feature" confirmed="yes">org.junit.runners.BlockJUnit4ClassRunner.withBefores(org.junit.runners.model.FrameworkMethod, java.lang.Object, org.junit.runners.model.Statement)</inbound>
                <inbound type="feature" confirmed="yes">org.junit.runners.BlockJUnit4ClassRunner.withTestRules(org.junit.runners.model.FrameworkMethod, java.lang.Object, org.junit.runners.model.Statement)</inbound>
                <inbound type="feature" confirmed="yes">org.junit.runners.ParentRunner.filter(org.junit.runner.manipulation.Filter)</inbound>
                <inbound type="feature" confirmed="yes">org.junit.runners.ParentRunner.validate()</inbound>
                <inbound type="feature" confirmed="yes">org.junit.runners.ParentRunner.withAfterClasses(org.junit.runners.model.Statement)</inbound>
                <inbound type="feature" confirmed="yes">org.junit.runners.ParentRunner.withBeforeClasses(org.junit.runners.model.Statement)</inbound>
                <inbound type="feature" confirmed="yes">org.junit.runners.ParentRunner.withClassRules(org.junit.runners.model.Statement)</inbound>
                <inbound type="feature" confirmed="yes">org.junit.runners.model.MultipleFailureException.assertEmpty(java.util.List)</inbound>
            </feature>
            <feature confirmed="no">
                <name>java.util.List.iterator()</name>
                <inbound type="feature" confirmed="yes">junit.framework.TestResult.addError(junit.framework.Test, java.lang.Throwable)</inbound>
                <inbound type="feature" confirmed="yes">junit.framework.TestResult.addFailure(junit.framework.Test, junit.framework.AssertionFailedError)</inbound>
                <inbound type="feature" confirmed="yes">junit.framework.TestResult.endTest(junit.framework.Test)</inbound>
                <inbound type="feature" confirmed="yes">junit.framework.TestResult.startTest(junit.framework.Test)</inbound>
                <inbound type="feature" confirmed="yes">org.junit.experimental.ParallelComputer$1.finished()</inbound>
                <inbound type="feature" confirmed="yes">org.junit.experimental.categories.Categories$CategoryFilter.hasCorrectCategoryAnnotation(org.junit.runner.Description)</inbound>
                <inbound type="feature" confirmed="yes">org.junit.experimental.max.MaxCore.constructLeafRequest(java.util.List)</inbound>
                <inbound type="feature" confirmed="yes">org.junit.experimental.results.FailureList.result()</inbound>
                <inbound type="feature" confirmed="yes">org.junit.experimental.theories.ParameterSignature.getAnnotation(java.lang.Class)</inbound>
                <inbound type="feature" confirmed="yes">org.junit.experimental.theories.Theories$TheoryAnchor.runWithIncompleteAssignment(org.junit.experimental.theories.internal.Assignments)</inbound>
                <inbound type="feature" confirmed="yes">org.junit.experimental.theories.Theories.validateTestMethods(java.util.List)</inbound>
                <inbound type="feature" confirmed="yes">org.junit.experimental.theories.internal.AllMembersSupplier.addMultiPointMethods(java.util.List)</inbound>
                <inbound type="feature" confirmed="yes">org.junit.experimental.theories.internal.AllMembersSupplier.addSinglePointMethods(org.junit.experimental.theories.ParameterSignature, java.util.List)</inbound>
                <inbound type="feature" confirmed="yes">org.junit.internal.ArrayComparisonFailure.getMessage()</inbound>
                <inbound type="feature" confirmed="yes">org.junit.internal.TextListener.printFailures(org.junit.runner.Result)</inbound>
                <inbound type="feature" confirmed="yes">org.junit.internal.builders.AllDefaultPossibilitiesBuilder.runnerForClass(java.lang.Class)</inbound>
                <inbound type="feature" confirmed="yes">org.junit.internal.runners.ClassRoadie.runAfters()</inbound>
                <inbound type="feature" confirmed="yes">org.junit.internal.runners.ClassRoadie.runBefores()</inbound>
                <inbound type="feature" confirmed="yes">org.junit.internal.runners.ErrorReportingRunner.getDescription()</inbound>
                <inbound type="feature" confirmed="yes">org.junit.internal.runners.ErrorReportingRunner.run(org.junit.runner.notification.RunNotifier)</inbound>
                <inbound type="feature" confirmed="yes">org.junit.internal.runners.JUnit4ClassRunner.filter(org.junit.runner.manipulation.Filter)</inbound>
                <inbound type="feature" confirmed="yes">org.junit.internal.runners.JUnit4ClassRunner.getDescription()</inbound>
                <inbound type="feature" confirmed="yes">org.junit.internal.runners.JUnit4ClassRunner.runMethods(org.junit.runner.notification.RunNotifier)</inbound>
                <inbound type="feature" confirmed="yes">org.junit.internal.runners.MethodRoadie.runAfters()</inbound>
                <inbound type="feature" confirmed="yes">org.junit.internal.runners.MethodRoadie.runBefores()</inbound>
                <inbound type="feature" confirmed="yes">org.junit.internal.runners.MethodValidator.validateTestMethods(java.lang.Class, boolean)</inbound>
                <inbound type="feature" confirmed="yes">org.junit.internal.runners.TestClass.getAnnotatedMethods(java.lang.Class)</inbound>
                <inbound type="feature" confirmed="yes">org.junit.internal.runners.TestClass.isShadowed(java.lang.reflect.Method, java.util.List)</inbound>
                <inbound type="feature" confirmed="yes">org.junit.internal.runners.model.EachTestNotifier.addMultipleFailureException(org.junit.runners.model.MultipleFailureException)</inbound>
                <inbound type="feature" confirmed="yes">org.junit.internal.runners.rules.RuleFieldValidator.validate(org.junit.runners.model.TestClass, java.util.List)</inbound>
                <inbound type="feature" confirmed="yes">org.junit.internal.runners.statements.RunAfters.evaluate()</inbound>
                <inbound type="feature" confirmed="yes">org.junit.internal.runners.statements.RunBefores.evaluate()</inbound>
                <inbound type="feature" confirmed="yes">org.junit.runner.JUnitCore.runMain(org.junit.internal.JUnitSystem, java.lang.String[])</inbound>
                <inbound type="feature" confirmed="yes">org.junit.runner.notification.RunNotifier$SafeNotifier.run()</inbound>
                <inbound type="feature" confirmed="yes">org.junit.runners.BlockJUnit4ClassRunner.withMethodRules(org.junit.runners.model.FrameworkMethod, java.lang.Object, org.junit.runners.model.Statement)</inbound>
                <inbound type="feature" confirmed="yes">org.junit.runners.Parameterized.getParametersMethod(org.junit.runners.model.TestClass)</inbound>
                <inbound type="feature" confirmed="yes">org.junit.runners.ParentRunner.filter(org.junit.runner.manipulation.Filter)</inbound>
                <inbound type="feature" confirmed="yes">org.junit.runners.ParentRunner.getDescription()</inbound>
                <inbound type="feature" confirmed="yes">org.junit.runners.ParentRunner.runChildren(org.junit.runner.notification.RunNotifier)</inbound>
                <inbound type="feature" confirmed="yes">org.junit.runners.ParentRunner.sort(org.junit.runner.manipulation.Sorter)</inbound>
                <inbound type="feature" confirmed="yes">org.junit.runners.ParentRunner.validatePublicVoidNoArgMethods(java.lang.Class, boolean, java.util.List)</inbound>
                <inbound type="feature" confirmed="yes">org.junit.runners.model.FrameworkMember.isShadowedBy(java.util.List)</inbound>
                <inbound type="feature" confirmed="yes">org.junit.runners.model.MultipleFailureException.getMessage()</inbound>
                <inbound type="feature" confirmed="yes">org.junit.runners.model.TestClass.TestClass(java.lang.Class)</inbound>
                <inbound type="feature" confirmed="yes">org.junit.runners.model.TestClass.getAnnotatedFieldValues(java.lang.Object, java.lang.Class, java.lang.Class)</inbound>
            </feature>
            <feature confirmed="no">
                <name>java.util.List.remove(java.lang.Object)</name>
                <inbound type="feature" confirmed="yes">junit.framework.TestResult.removeListener(junit.framework.TestListener)</inbound>
                <inbound type="feature" confirmed="yes">org.junit.runner.notification.RunNotifier.removeListener(org.junit.runner.notification.RunListener)</inbound>
            </feature>
            <feature confirmed="no">
                <name>java.util.List.removeAll(java.util.Collection)</name>
                <inbound type="feature" confirmed="yes">org.junit.experimental.theories.Theories.computeTestMethods()</inbound>
            </feature>
            <feature confirmed="no">
                <name>java.util.List.size()</name>
                <inbound type="feature" confirmed="yes">junit.framework.TestResult.errorCount()</inbound>
                <inbound type="feature" confirmed="yes">junit.framework.TestResult.failureCount()</inbound>
                <inbound type="feature" confirmed="yes">org.junit.experimental.results.PrintableResult.failureCount()</inbound>
                <inbound type="feature" confirmed="yes">org.junit.experimental.theories.internal.Assignments.assignNext(org.junit.experimental.theories.PotentialAssignment)</inbound>
                <inbound type="feature" confirmed="yes">org.junit.experimental.theories.internal.Assignments.getAllArguments(boolean)</inbound>
                <inbound type="feature" confirmed="yes">org.junit.experimental.theories.internal.Assignments.getArgumentStrings(boolean)</inbound>
                <inbound type="feature" confirmed="yes">org.junit.experimental.theories.internal.Assignments.getConstructorParameterCount()</inbound>
                <inbound type="feature" confirmed="yes">org.junit.experimental.theories.internal.Assignments.getMethodArguments(boolean)</inbound>
                <inbound type="feature" confirmed="yes">org.junit.experimental.theories.internal.Assignments.isComplete()</inbound>
                <inbound type="feature" confirmed="yes">org.junit.internal.TextListener.printFailures(org.junit.runner.Result)</inbound>
                <inbound type="feature" confirmed="yes">org.junit.internal.runners.MethodValidator.validateInstanceMethods()</inbound>
                <inbound type="feature" confirmed="yes">org.junit.runner.Result.getFailureCount()</inbound>
                <inbound type="feature" confirmed="yes">org.junit.runners.BlockJUnit4ClassRunner.validateInstanceMethods(java.util.List)</inbound>
                <inbound type="feature" confirmed="yes">org.junit.runners.Parameterized.Parameterized(java.lang.Class)</inbound>
                <inbound type="feature" confirmed="yes">org.junit.runners.model.MultipleFailureException.assertEmpty(java.util.List)</inbound>
                <inbound type="feature" confirmed="yes">org.junit.runners.model.MultipleFailureException.getMessage()</inbound>
            </feature>
            <feature confirmed="no">
                <name>java.util.List.subList(int, int)</name>
                <inbound type="feature" confirmed="yes">org.junit.experimental.theories.internal.Assignments.assignNext(org.junit.experimental.theories.PotentialAssignment)</inbound>
            </feature>
            <feature confirmed="no">
                <name>java.util.List.toArray(java.lang.Object[])</name>
                <inbound type="feature" confirmed="yes">org.junit.runner.JUnitCore.runMain(org.junit.internal.JUnitSystem, java.lang.String[])</inbound>
                <inbound type="feature" confirmed="yes">org.junit.runners.model.RunnerBuilder.runners(java.lang.Class, java.util.List)</inbound>
            </feature>
        </class>
        <class confirmed="no">
            <name>java.util.Map</name>
            <inbound type="feature" confirmed="yes">org.junit.experimental.max.MaxHistory$RememberingListener.MaxHistory$RememberingListener(org.junit.experimental.max.MaxHistory)</inbound>
            <inbound type="feature" confirmed="yes">org.junit.experimental.max.MaxHistory$RememberingListener.starts</inbound>
            <inbound type="feature" confirmed="yes">org.junit.experimental.max.MaxHistory$RememberingListener.testFinished(org.junit.runner.Description)</inbound>
            <inbound type="feature" confirmed="yes">org.junit.experimental.max.MaxHistory$RememberingListener.testStarted(org.junit.runner.Description)</inbound>
            <inbound type="feature" confirmed="yes">org.junit.experimental.max.MaxHistory.MaxHistory(java.io.File)</inbound>
            <inbound type="feature" confirmed="yes">org.junit.experimental.max.MaxHistory.fDurations</inbound>
            <inbound type="feature" confirmed="yes">org.junit.experimental.max.MaxHistory.fFailureTimestamps</inbound>
            <inbound type="feature" confirmed="yes">org.junit.experimental.max.MaxHistory.getFailureTimestamp(org.junit.runner.Description)</inbound>
            <inbound type="feature" confirmed="yes">org.junit.experimental.max.MaxHistory.getTestDuration(org.junit.runner.Description)</inbound>
            <inbound type="feature" confirmed="yes">org.junit.experimental.max.MaxHistory.isNewTest(org.junit.runner.Description)</inbound>
            <inbound type="feature" confirmed="yes">org.junit.experimental.max.MaxHistory.putTestDuration(org.junit.runner.Description, long)</inbound>
            <inbound type="feature" confirmed="yes">org.junit.experimental.max.MaxHistory.putTestFailureTimestamp(org.junit.runner.Description, long)</inbound>
            <inbound type="feature" confirmed="yes">org.junit.runners.model.TestClass.TestClass(java.lang.Class)</inbound>
            <inbound type="feature" confirmed="yes">org.junit.runners.model.TestClass.addToAnnotationLists(org.junit.runners.model.FrameworkMember, java.util.Map)</inbound>
            <inbound type="feature" confirmed="yes">org.junit.runners.model.TestClass.fFieldsForAnnotations</inbound>
            <inbound type="feature" confirmed="yes">org.junit.runners.model.TestClass.fMethodsForAnnotations</inbound>
            <inbound type="feature" confirmed="yes">org.junit.runners.model.TestClass.getAnnotatedFields(java.lang.Class)</inbound>
            <inbound type="feature" confirmed="yes">org.junit.runners.model.TestClass.getAnnotatedMembers(java.util.Map, java.lang.Class)</inbound>
            <inbound type="feature" confirmed="yes">org.junit.runners.model.TestClass.getAnnotatedMethods(java.lang.Class)</inbound>
            <feature confirmed="no">
                <name>java.util.Map.containsKey(java.lang.Object)</name>
                <inbound type="feature" confirmed="yes">org.junit.experimental.max.MaxHistory.isNewTest(org.junit.runner.Description)</inbound>
                <inbound type="feature" confirmed="yes">org.junit.runners.model.TestClass.getAnnotatedMembers(java.util.Map, java.lang.Class)</inbound>
            </feature>
            <feature confirmed="no">
                <name>java.util.Map.get(java.lang.Object)</name>
                <inbound type="feature" confirmed="yes">org.junit.experimental.max.MaxHistory$RememberingListener.testFinished(org.junit.runner.Description)</inbound>
                <inbound type="feature" confirmed="yes">org.junit.experimental.max.MaxHistory.getFailureTimestamp(org.junit.runner.Description)</inbound>
                <inbound type="feature" confirmed="yes">org.junit.experimental.max.MaxHistory.getTestDuration(org.junit.runner.Description)</inbound>
                <inbound type="feature" confirmed="yes">org.junit.runners.model.TestClass.getAnnotatedMembers(java.util.Map, java.lang.Class)</inbound>
            </feature>
            <feature confirmed="no">
                <name>java.util.Map.put(java.lang.Object, java.lang.Object)</name>
                <inbound type="feature" confirmed="yes">org.junit.experimental.max.MaxHistory$RememberingListener.testStarted(org.junit.runner.Description)</inbound>
                <inbound type="feature" confirmed="yes">org.junit.experimental.max.MaxHistory.putTestDuration(org.junit.runner.Description, long)</inbound>
                <inbound type="feature" confirmed="yes">org.junit.experimental.max.MaxHistory.putTestFailureTimestamp(org.junit.runner.Description, long)</inbound>
                <inbound type="feature" confirmed="yes">org.junit.runners.model.TestClass.getAnnotatedMembers(java.util.Map, java.lang.Class)</inbound>
            </feature>
        </class>
        <class confirmed="no">
            <name>java.util.Properties</name>
            <inbound type="feature" confirmed="yes">junit.runner.BaseTestRunner.fPreferences</inbound>
            <inbound type="feature" confirmed="yes">junit.runner.BaseTestRunner.getPreference(java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">junit.runner.BaseTestRunner.getPreferences()</inbound>
            <inbound type="feature" confirmed="yes">junit.runner.BaseTestRunner.readPreferences()</inbound>
            <inbound type="feature" confirmed="yes">junit.runner.BaseTestRunner.savePreferences()</inbound>
            <inbound type="feature" confirmed="yes">junit.runner.BaseTestRunner.setPreference(java.lang.String, java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">junit.runner.BaseTestRunner.setPreferences(java.util.Properties)</inbound>
            <feature confirmed="no">
                <name>java.util.Properties.Properties()</name>
                <inbound type="feature" confirmed="yes">junit.runner.BaseTestRunner.getPreferences()</inbound>
            </feature>
            <feature confirmed="no">
                <name>java.util.Properties.Properties(java.util.Properties)</name>
                <inbound type="feature" confirmed="yes">junit.runner.BaseTestRunner.readPreferences()</inbound>
            </feature>
            <feature confirmed="no">
                <name>java.util.Properties.getProperty(java.lang.String)</name>
                <inbound type="feature" confirmed="yes">junit.runner.BaseTestRunner.getPreference(java.lang.String)</inbound>
            </feature>
            <feature confirmed="no">
                <name>java.util.Properties.load(java.io.InputStream)</name>
                <inbound type="feature" confirmed="yes">junit.runner.BaseTestRunner.readPreferences()</inbound>
            </feature>
            <feature confirmed="no">
                <name>java.util.Properties.put(java.lang.Object, java.lang.Object)</name>
                <inbound type="feature" confirmed="yes">junit.runner.BaseTestRunner.getPreferences()</inbound>
                <inbound type="feature" confirmed="yes">junit.runner.BaseTestRunner.setPreference(java.lang.String, java.lang.String)</inbound>
            </feature>
            <feature confirmed="no">
                <name>java.util.Properties.store(java.io.OutputStream, java.lang.String)</name>
                <inbound type="feature" confirmed="yes">junit.runner.BaseTestRunner.savePreferences()</inbound>
            </feature>
        </class>
        <class confirmed="no">
            <name>java.util.Set</name>
            <inbound type="feature" confirmed="yes">org.junit.runners.model.RunnerBuilder.RunnerBuilder()</inbound>
            <inbound type="feature" confirmed="yes">org.junit.runners.model.RunnerBuilder.addParent(java.lang.Class)</inbound>
            <inbound type="feature" confirmed="yes">org.junit.runners.model.RunnerBuilder.parents</inbound>
            <inbound type="feature" confirmed="yes">org.junit.runners.model.RunnerBuilder.removeParent(java.lang.Class)</inbound>
            <feature confirmed="no">
                <name>java.util.Set.add(java.lang.Object)</name>
                <inbound type="feature" confirmed="yes">org.junit.runners.model.RunnerBuilder.addParent(java.lang.Class)</inbound>
            </feature>
            <feature confirmed="no">
                <name>java.util.Set.remove(java.lang.Object)</name>
                <inbound type="feature" confirmed="yes">org.junit.runners.model.RunnerBuilder.removeParent(java.lang.Class)</inbound>
            </feature>
        </class>
        <class confirmed="no">
            <name>java.util.Vector</name>
            <inbound type="feature" confirmed="yes">junit.framework.TestSuite.TestSuite()</inbound>
            <inbound type="feature" confirmed="yes">junit.framework.TestSuite.TestSuite(java.lang.Class)</inbound>
            <inbound type="feature" confirmed="yes">junit.framework.TestSuite.TestSuite(java.lang.Class[])</inbound>
            <inbound type="feature" confirmed="yes">junit.framework.TestSuite.TestSuite(java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">junit.framework.TestSuite.addTest(junit.framework.Test)</inbound>
            <inbound type="feature" confirmed="yes">junit.framework.TestSuite.addTestsFromTestCase(java.lang.Class)</inbound>
            <inbound type="feature" confirmed="yes">junit.framework.TestSuite.countTestCases()</inbound>
            <inbound type="feature" confirmed="yes">junit.framework.TestSuite.fTests</inbound>
            <inbound type="feature" confirmed="yes">junit.framework.TestSuite.run(junit.framework.TestResult)</inbound>
            <inbound type="feature" confirmed="yes">junit.framework.TestSuite.testAt(int)</inbound>
            <inbound type="feature" confirmed="yes">junit.framework.TestSuite.testCount()</inbound>
            <inbound type="feature" confirmed="yes">junit.framework.TestSuite.tests()</inbound>
            <feature confirmed="no">
                <name>java.util.Vector.Vector(int)</name>
                <inbound type="feature" confirmed="yes">junit.framework.TestSuite.TestSuite()</inbound>
                <inbound type="feature" confirmed="yes">junit.framework.TestSuite.TestSuite(java.lang.Class)</inbound>
                <inbound type="feature" confirmed="yes">junit.framework.TestSuite.TestSuite(java.lang.Class[])</inbound>
                <inbound type="feature" confirmed="yes">junit.framework.TestSuite.TestSuite(java.lang.String)</inbound>
            </feature>
            <feature confirmed="no">
                <name>java.util.Vector.add(java.lang.Object)</name>
                <inbound type="feature" confirmed="yes">junit.framework.TestSuite.addTest(junit.framework.Test)</inbound>
            </feature>
            <feature confirmed="no">
                <name>java.util.Vector.elements()</name>
                <inbound type="feature" confirmed="yes">junit.framework.TestSuite.tests()</inbound>
            </feature>
            <feature confirmed="no">
                <name>java.util.Vector.get(int)</name>
                <inbound type="feature" confirmed="yes">junit.framework.TestSuite.testAt(int)</inbound>
            </feature>
            <feature confirmed="no">
                <name>java.util.Vector.iterator()</name>
                <inbound type="feature" confirmed="yes">junit.framework.TestSuite.countTestCases()</inbound>
                <inbound type="feature" confirmed="yes">junit.framework.TestSuite.run(junit.framework.TestResult)</inbound>
            </feature>
            <feature confirmed="no">
                <name>java.util.Vector.size()</name>
                <inbound type="feature" confirmed="yes">junit.framework.TestSuite.addTestsFromTestCase(java.lang.Class)</inbound>
                <inbound type="feature" confirmed="yes">junit.framework.TestSuite.testCount()</inbound>
            </feature>
        </class>
    </package>
    <package confirmed="no">
        <name>java.util.concurrent</name>
        <class confirmed="no">
            <name>java.util.concurrent.Callable</name>
            <inbound type="class" confirmed="yes">org.junit.experimental.ParallelComputer$1$1</inbound>
            <inbound type="feature" confirmed="yes">org.junit.experimental.ParallelComputer$1.schedule(java.lang.Runnable)</inbound>
            <inbound type="class" confirmed="yes">org.junit.internal.runners.MethodRoadie$1$1</inbound>
            <inbound type="feature" confirmed="yes">org.junit.internal.runners.MethodRoadie$1.run()</inbound>
            <inbound type="class" confirmed="yes">org.junit.rules.ErrorCollector$1</inbound>
            <inbound type="feature" confirmed="yes">org.junit.rules.ErrorCollector.checkSucceeds(java.util.concurrent.Callable)</inbound>
            <inbound type="feature" confirmed="yes">org.junit.rules.ErrorCollector.checkThat(java.lang.Object, org.hamcrest.Matcher)</inbound>
            <feature confirmed="no">
                <name>java.util.concurrent.Callable.call()</name>
                <inbound type="feature" confirmed="yes">org.junit.rules.ErrorCollector.checkSucceeds(java.util.concurrent.Callable)</inbound>
            </feature>
        </class>
        <class confirmed="no">
            <name>java.util.concurrent.ExecutorService</name>
            <inbound type="feature" confirmed="yes">org.junit.experimental.ParallelComputer$1.ParallelComputer$1()</inbound>
            <inbound type="feature" confirmed="yes">org.junit.experimental.ParallelComputer$1.fService</inbound>
            <inbound type="feature" confirmed="yes">org.junit.experimental.ParallelComputer$1.schedule(java.lang.Runnable)</inbound>
            <inbound type="feature" confirmed="yes">org.junit.internal.runners.MethodRoadie$1.run()</inbound>
            <feature confirmed="no">
                <name>java.util.concurrent.ExecutorService.awaitTermination(long, java.util.concurrent.TimeUnit)</name>
                <inbound type="feature" confirmed="yes">org.junit.internal.runners.MethodRoadie$1.run()</inbound>
            </feature>
            <feature confirmed="no">
                <name>java.util.concurrent.ExecutorService.shutdown()</name>
                <inbound type="feature" confirmed="yes">org.junit.internal.runners.MethodRoadie$1.run()</inbound>
            </feature>
            <feature confirmed="no">
                <name>java.util.concurrent.ExecutorService.shutdownNow()</name>
                <inbound type="feature" confirmed="yes">org.junit.internal.runners.MethodRoadie$1.run()</inbound>
            </feature>
            <feature confirmed="no">
                <name>java.util.concurrent.ExecutorService.submit(java.util.concurrent.Callable)</name>
                <inbound type="feature" confirmed="yes">org.junit.experimental.ParallelComputer$1.schedule(java.lang.Runnable)</inbound>
                <inbound type="feature" confirmed="yes">org.junit.internal.runners.MethodRoadie$1.run()</inbound>
            </feature>
        </class>
        <class confirmed="no">
            <name>java.util.concurrent.Executors</name>
            <feature confirmed="no">
                <name>java.util.concurrent.Executors.newCachedThreadPool()</name>
                <inbound type="feature" confirmed="yes">org.junit.experimental.ParallelComputer$1.ParallelComputer$1()</inbound>
            </feature>
            <feature confirmed="no">
                <name>java.util.concurrent.Executors.newSingleThreadExecutor()</name>
                <inbound type="feature" confirmed="yes">org.junit.internal.runners.MethodRoadie$1.run()</inbound>
            </feature>
        </class>
        <class confirmed="no">
            <name>java.util.concurrent.Future</name>
            <inbound type="feature" confirmed="yes">org.junit.experimental.ParallelComputer$1.finished()</inbound>
            <inbound type="feature" confirmed="yes">org.junit.experimental.ParallelComputer$1.schedule(java.lang.Runnable)</inbound>
            <inbound type="feature" confirmed="yes">org.junit.internal.runners.MethodRoadie$1.run()</inbound>
            <feature confirmed="no">
                <name>java.util.concurrent.Future.get()</name>
                <inbound type="feature" confirmed="yes">org.junit.experimental.ParallelComputer$1.finished()</inbound>
            </feature>
            <feature confirmed="no">
                <name>java.util.concurrent.Future.get(long, java.util.concurrent.TimeUnit)</name>
                <inbound type="feature" confirmed="yes">org.junit.internal.runners.MethodRoadie$1.run()</inbound>
            </feature>
        </class>
        <class confirmed="no">
            <name>java.util.concurrent.TimeUnit</name>
            <inbound type="feature" confirmed="yes">org.junit.internal.runners.MethodRoadie$1.run()</inbound>
            <feature confirmed="no">
                <name>java.util.concurrent.TimeUnit.MILLISECONDS</name>
                <inbound type="feature" confirmed="yes">org.junit.internal.runners.MethodRoadie$1.run()</inbound>
            </feature>
        </class>
        <class confirmed="no">
            <name>java.util.concurrent.TimeoutException</name>
            <inbound type="feature" confirmed="yes">org.junit.internal.runners.MethodRoadie$1.run()</inbound>
        </class>
    </package>
    <package confirmed="no">
        <name>java.util.concurrent.atomic</name>
        <class confirmed="no">
            <name>java.util.concurrent.atomic.AtomicInteger</name>
            <inbound type="feature" confirmed="yes">org.junit.runner.Result$Listener.testFinished(org.junit.runner.Description)</inbound>
            <inbound type="feature" confirmed="yes">org.junit.runner.Result$Listener.testIgnored(org.junit.runner.Description)</inbound>
            <inbound type="feature" confirmed="yes">org.junit.runner.Result.Result()</inbound>
            <inbound type="feature" confirmed="yes">org.junit.runner.Result.access$200(org.junit.runner.Result)</inbound>
            <inbound type="feature" confirmed="yes">org.junit.runner.Result.access$400(org.junit.runner.Result)</inbound>
            <inbound type="feature" confirmed="yes">org.junit.runner.Result.fCount</inbound>
            <inbound type="feature" confirmed="yes">org.junit.runner.Result.fIgnoreCount</inbound>
            <inbound type="feature" confirmed="yes">org.junit.runner.Result.getIgnoreCount()</inbound>
            <inbound type="feature" confirmed="yes">org.junit.runner.Result.getRunCount()</inbound>
            <feature confirmed="no">
                <name>java.util.concurrent.atomic.AtomicInteger.AtomicInteger()</name>
                <inbound type="feature" confirmed="yes">org.junit.runner.Result.Result()</inbound>
            </feature>
            <feature confirmed="no">
                <name>java.util.concurrent.atomic.AtomicInteger.get()</name>
                <inbound type="feature" confirmed="yes">org.junit.runner.Result.getIgnoreCount()</inbound>
                <inbound type="feature" confirmed="yes">org.junit.runner.Result.getRunCount()</inbound>
            </feature>
            <feature confirmed="no">
                <name>java.util.concurrent.atomic.AtomicInteger.getAndIncrement()</name>
                <inbound type="feature" confirmed="yes">org.junit.runner.Result$Listener.testFinished(org.junit.runner.Description)</inbound>
                <inbound type="feature" confirmed="yes">org.junit.runner.Result$Listener.testIgnored(org.junit.runner.Description)</inbound>
            </feature>
        </class>
    </package>
    <package confirmed="no">
        <name>java.util.regex</name>
        <class confirmed="no">
            <name>java.util.regex.Matcher</name>
            <inbound type="feature" confirmed="yes">org.hamcrest.core.DescribedAs.describeTo(org.hamcrest.Description)</inbound>
            <inbound type="feature" confirmed="yes">org.junit.runner.Description.getClassName()</inbound>
            <inbound type="feature" confirmed="yes">org.junit.runner.Description.methodStringMatcher()</inbound>
            <inbound type="feature" confirmed="yes">org.junit.runner.Description.parseMethod()</inbound>
            <feature confirmed="no">
                <name>java.util.regex.Matcher.end()</name>
                <inbound type="feature" confirmed="yes">org.hamcrest.core.DescribedAs.describeTo(org.hamcrest.Description)</inbound>
            </feature>
            <feature confirmed="no">
                <name>java.util.regex.Matcher.find()</name>
                <inbound type="feature" confirmed="yes">org.hamcrest.core.DescribedAs.describeTo(org.hamcrest.Description)</inbound>
            </feature>
            <feature confirmed="no">
                <name>java.util.regex.Matcher.group(int)</name>
                <inbound type="feature" confirmed="yes">org.hamcrest.core.DescribedAs.describeTo(org.hamcrest.Description)</inbound>
                <inbound type="feature" confirmed="yes">org.junit.runner.Description.getClassName()</inbound>
                <inbound type="feature" confirmed="yes">org.junit.runner.Description.parseMethod()</inbound>
            </feature>
            <feature confirmed="no">
                <name>java.util.regex.Matcher.matches()</name>
                <inbound type="feature" confirmed="yes">org.junit.runner.Description.getClassName()</inbound>
                <inbound type="feature" confirmed="yes">org.junit.runner.Description.parseMethod()</inbound>
            </feature>
            <feature confirmed="no">
                <name>java.util.regex.Matcher.start()</name>
                <inbound type="feature" confirmed="yes">org.hamcrest.core.DescribedAs.describeTo(org.hamcrest.Description)</inbound>
            </feature>
        </class>
        <class confirmed="no">
            <name>java.util.regex.Pattern</name>
            <inbound type="feature" confirmed="yes">org.hamcrest.core.DescribedAs.ARG_PATTERN</inbound>
            <inbound type="feature" confirmed="yes">org.hamcrest.core.DescribedAs.describeTo(org.hamcrest.Description)</inbound>
            <inbound type="feature" confirmed="yes">org.hamcrest.core.DescribedAs.static {}</inbound>
            <inbound type="feature" confirmed="yes">org.junit.runner.Description.methodStringMatcher()</inbound>
            <feature confirmed="no">
                <name>java.util.regex.Pattern.compile(java.lang.String)</name>
                <inbound type="feature" confirmed="yes">org.hamcrest.core.DescribedAs.static {}</inbound>
                <inbound type="feature" confirmed="yes">org.junit.runner.Description.methodStringMatcher()</inbound>
            </feature>
            <feature confirmed="no">
                <name>java.util.regex.Pattern.matcher(java.lang.CharSequence)</name>
                <inbound type="feature" confirmed="yes">org.hamcrest.core.DescribedAs.describeTo(org.hamcrest.Description)</inbound>
                <inbound type="feature" confirmed="yes">org.junit.runner.Description.methodStringMatcher()</inbound>
            </feature>
        </class>
    </package>
    <package confirmed="yes">
        <name>junit.extensions</name>
        <class confirmed="yes">
            <name>junit.extensions.ActiveTestSuite</name>
            <outbound type="class" confirmed="yes">junit.framework.TestSuite</outbound>
            <inbound type="feature" confirmed="yes">junit.extensions.ActiveTestSuite$1.ActiveTestSuite$1(junit.extensions.ActiveTestSuite, junit.framework.Test, junit.framework.TestResult)</inbound>
            <inbound type="feature" confirmed="yes">junit.extensions.ActiveTestSuite$1.run()</inbound>
            <inbound type="feature" confirmed="yes">junit.extensions.ActiveTestSuite$1.this$0</inbound>
            <feature confirmed="yes">
                <name>junit.extensions.ActiveTestSuite.ActiveTestSuite()</name>
                <outbound type="feature" confirmed="yes">junit.framework.TestSuite.TestSuite()</outbound>
            </feature>
            <feature confirmed="yes">
                <name>junit.extensions.ActiveTestSuite.ActiveTestSuite(java.lang.Class)</name>
                <outbound type="class" confirmed="no">java.lang.Class</outbound>
                <outbound type="feature" confirmed="yes">junit.framework.TestSuite.TestSuite(java.lang.Class)</outbound>
            </feature>
            <feature confirmed="yes">
                <name>junit.extensions.ActiveTestSuite.ActiveTestSuite(java.lang.Class, java.lang.String)</name>
                <outbound type="class" confirmed="no">java.lang.Class</outbound>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="feature" confirmed="yes">junit.framework.TestSuite.TestSuite(java.lang.Class, java.lang.String)</outbound>
            </feature>
            <feature confirmed="yes">
                <name>junit.extensions.ActiveTestSuite.ActiveTestSuite(java.lang.String)</name>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="feature" confirmed="yes">junit.framework.TestSuite.TestSuite(java.lang.String)</outbound>
            </feature>
            <feature confirmed="yes">
                <name>junit.extensions.ActiveTestSuite.fActiveTestDeathCount</name>
                <inbound type="feature" confirmed="yes">junit.extensions.ActiveTestSuite.run(junit.framework.TestResult)</inbound>
                <inbound type="feature" confirmed="yes">junit.extensions.ActiveTestSuite.runFinished()</inbound>
                <inbound type="feature" confirmed="yes">junit.extensions.ActiveTestSuite.waitUntilFinished()</inbound>
            </feature>
            <feature confirmed="yes">
                <name>junit.extensions.ActiveTestSuite.run(junit.framework.TestResult)</name>
                <outbound type="feature" confirmed="yes">junit.extensions.ActiveTestSuite.fActiveTestDeathCount</outbound>
                <outbound type="feature" confirmed="yes">junit.extensions.ActiveTestSuite.waitUntilFinished()</outbound>
                <outbound type="class" confirmed="yes">junit.framework.TestResult</outbound>
                <outbound type="feature" confirmed="yes">junit.framework.TestSuite.run(junit.framework.TestResult)</outbound>
            </feature>
            <feature confirmed="yes">
                <name>junit.extensions.ActiveTestSuite.runFinished()</name>
                <outbound type="feature" confirmed="no">java.lang.Object.notifyAll()</outbound>
                <outbound type="feature" confirmed="yes">junit.extensions.ActiveTestSuite.fActiveTestDeathCount</outbound>
                <inbound type="feature" confirmed="yes">junit.extensions.ActiveTestSuite$1.run()</inbound>
            </feature>
            <feature confirmed="yes">
                <name>junit.extensions.ActiveTestSuite.runTest(junit.framework.Test, junit.framework.TestResult)</name>
                <outbound type="feature" confirmed="no">java.lang.Thread.start()</outbound>
                <outbound type="feature" confirmed="yes">junit.extensions.ActiveTestSuite$1.ActiveTestSuite$1(junit.extensions.ActiveTestSuite, junit.framework.Test, junit.framework.TestResult)</outbound>
                <outbound type="class" confirmed="yes">junit.framework.Test</outbound>
                <outbound type="class" confirmed="yes">junit.framework.TestResult</outbound>
            </feature>
            <feature confirmed="no">
                <name>junit.extensions.ActiveTestSuite.testCount()</name>
                <inbound type="feature" confirmed="yes">junit.extensions.ActiveTestSuite.waitUntilFinished()</inbound>
            </feature>
            <feature confirmed="yes">
                <name>junit.extensions.ActiveTestSuite.waitUntilFinished()</name>
                <outbound type="class" confirmed="no">java.lang.InterruptedException</outbound>
                <outbound type="feature" confirmed="no">java.lang.Object.wait()</outbound>
                <outbound type="feature" confirmed="yes">junit.extensions.ActiveTestSuite.fActiveTestDeathCount</outbound>
                <outbound type="feature" confirmed="no">junit.extensions.ActiveTestSuite.testCount()</outbound>
                <inbound type="feature" confirmed="yes">junit.extensions.ActiveTestSuite.run(junit.framework.TestResult)</inbound>
            </feature>
        </class>
        <class confirmed="yes">
            <name>junit.extensions.ActiveTestSuite$1</name>
            <outbound type="class" confirmed="no">java.lang.Thread</outbound>
            <feature confirmed="yes">
                <name>junit.extensions.ActiveTestSuite$1.ActiveTestSuite$1(junit.extensions.ActiveTestSuite, junit.framework.Test, junit.framework.TestResult)</name>
                <outbound type="feature" confirmed="no">java.lang.Thread.Thread()</outbound>
                <outbound type="class" confirmed="yes">junit.extensions.ActiveTestSuite</outbound>
                <outbound type="feature" confirmed="yes">junit.extensions.ActiveTestSuite$1.this$0</outbound>
                <outbound type="feature" confirmed="yes">junit.extensions.ActiveTestSuite$1.val$result</outbound>
                <outbound type="feature" confirmed="yes">junit.extensions.ActiveTestSuite$1.val$test</outbound>
                <outbound type="class" confirmed="yes">junit.framework.Test</outbound>
                <outbound type="class" confirmed="yes">junit.framework.TestResult</outbound>
                <inbound type="feature" confirmed="yes">junit.extensions.ActiveTestSuite.runTest(junit.framework.Test, junit.framework.TestResult)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>junit.extensions.ActiveTestSuite$1.run()</name>
                <outbound type="class" confirmed="yes">junit.extensions.ActiveTestSuite</outbound>
                <outbound type="feature" confirmed="yes">junit.extensions.ActiveTestSuite$1.this$0</outbound>
                <outbound type="feature" confirmed="yes">junit.extensions.ActiveTestSuite$1.val$result</outbound>
                <outbound type="feature" confirmed="yes">junit.extensions.ActiveTestSuite$1.val$test</outbound>
                <outbound type="feature" confirmed="yes">junit.extensions.ActiveTestSuite.runFinished()</outbound>
                <outbound type="class" confirmed="yes">junit.framework.Test</outbound>
                <outbound type="feature" confirmed="yes">junit.framework.Test.run(junit.framework.TestResult)</outbound>
                <outbound type="class" confirmed="yes">junit.framework.TestResult</outbound>
            </feature>
            <feature confirmed="yes">
                <name>junit.extensions.ActiveTestSuite$1.this$0</name>
                <outbound type="class" confirmed="yes">junit.extensions.ActiveTestSuite</outbound>
                <inbound type="feature" confirmed="yes">junit.extensions.ActiveTestSuite$1.ActiveTestSuite$1(junit.extensions.ActiveTestSuite, junit.framework.Test, junit.framework.TestResult)</inbound>
                <inbound type="feature" confirmed="yes">junit.extensions.ActiveTestSuite$1.run()</inbound>
            </feature>
            <feature confirmed="yes">
                <name>junit.extensions.ActiveTestSuite$1.val$result</name>
                <outbound type="class" confirmed="yes">junit.framework.TestResult</outbound>
                <inbound type="feature" confirmed="yes">junit.extensions.ActiveTestSuite$1.ActiveTestSuite$1(junit.extensions.ActiveTestSuite, junit.framework.Test, junit.framework.TestResult)</inbound>
                <inbound type="feature" confirmed="yes">junit.extensions.ActiveTestSuite$1.run()</inbound>
            </feature>
            <feature confirmed="yes">
                <name>junit.extensions.ActiveTestSuite$1.val$test</name>
                <outbound type="class" confirmed="yes">junit.framework.Test</outbound>
                <inbound type="feature" confirmed="yes">junit.extensions.ActiveTestSuite$1.ActiveTestSuite$1(junit.extensions.ActiveTestSuite, junit.framework.Test, junit.framework.TestResult)</inbound>
                <inbound type="feature" confirmed="yes">junit.extensions.ActiveTestSuite$1.run()</inbound>
            </feature>
        </class>
        <class confirmed="yes">
            <name>junit.extensions.RepeatedTest</name>
            <outbound type="class" confirmed="yes">junit.extensions.TestDecorator</outbound>
            <feature confirmed="yes">
                <name>junit.extensions.RepeatedTest.RepeatedTest(junit.framework.Test, int)</name>
                <outbound type="feature" confirmed="no">java.lang.IllegalArgumentException.IllegalArgumentException(java.lang.String)</outbound>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="feature" confirmed="yes">junit.extensions.RepeatedTest.fTimesRepeat</outbound>
                <outbound type="feature" confirmed="yes">junit.extensions.TestDecorator.TestDecorator(junit.framework.Test)</outbound>
                <outbound type="class" confirmed="yes">junit.framework.Test</outbound>
            </feature>
            <feature confirmed="yes">
                <name>junit.extensions.RepeatedTest.countTestCases()</name>
                <outbound type="feature" confirmed="yes">junit.extensions.RepeatedTest.fTimesRepeat</outbound>
                <outbound type="feature" confirmed="yes">junit.extensions.TestDecorator.countTestCases()</outbound>
            </feature>
            <feature confirmed="yes">
                <name>junit.extensions.RepeatedTest.fTimesRepeat</name>
                <inbound type="feature" confirmed="yes">junit.extensions.RepeatedTest.RepeatedTest(junit.framework.Test, int)</inbound>
                <inbound type="feature" confirmed="yes">junit.extensions.RepeatedTest.countTestCases()</inbound>
                <inbound type="feature" confirmed="yes">junit.extensions.RepeatedTest.run(junit.framework.TestResult)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>junit.extensions.RepeatedTest.run(junit.framework.TestResult)</name>
                <outbound type="feature" confirmed="yes">junit.extensions.RepeatedTest.fTimesRepeat</outbound>
                <outbound type="feature" confirmed="yes">junit.extensions.TestDecorator.run(junit.framework.TestResult)</outbound>
                <outbound type="class" confirmed="yes">junit.framework.TestResult</outbound>
                <outbound type="feature" confirmed="yes">junit.framework.TestResult.shouldStop()</outbound>
            </feature>
            <feature confirmed="yes">
                <name>junit.extensions.RepeatedTest.toString()</name>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="class" confirmed="no">java.lang.StringBuilder</outbound>
                <outbound type="feature" confirmed="no">java.lang.StringBuilder.StringBuilder()</outbound>
                <outbound type="feature" confirmed="no">java.lang.StringBuilder.append(java.lang.String)</outbound>
                <outbound type="feature" confirmed="no">java.lang.StringBuilder.toString()</outbound>
                <outbound type="feature" confirmed="yes">junit.extensions.TestDecorator.toString()</outbound>
            </feature>
        </class>
        <class confirmed="yes">
            <name>junit.extensions.TestDecorator</name>
            <outbound type="class" confirmed="yes">junit.framework.Assert</outbound>
            <outbound type="class" confirmed="yes">junit.framework.Test</outbound>
            <inbound type="class" confirmed="yes">junit.extensions.RepeatedTest</inbound>
            <inbound type="class" confirmed="yes">junit.extensions.TestSetup</inbound>
            <inbound type="feature" confirmed="yes">org.junit.internal.runners.JUnit38ClassRunner.makeDescription(junit.framework.Test)</inbound>
            <feature confirmed="yes">
                <name>junit.extensions.TestDecorator.TestDecorator(junit.framework.Test)</name>
                <outbound type="feature" confirmed="yes">junit.extensions.TestDecorator.fTest</outbound>
                <outbound type="feature" confirmed="yes">junit.framework.Assert.Assert()</outbound>
                <outbound type="class" confirmed="yes">junit.framework.Test</outbound>
                <inbound type="feature" confirmed="yes">junit.extensions.RepeatedTest.RepeatedTest(junit.framework.Test, int)</inbound>
                <inbound type="feature" confirmed="yes">junit.extensions.TestSetup.TestSetup(junit.framework.Test)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>junit.extensions.TestDecorator.basicRun(junit.framework.TestResult)</name>
                <outbound type="feature" confirmed="yes">junit.extensions.TestDecorator.fTest</outbound>
                <outbound type="class" confirmed="yes">junit.framework.Test</outbound>
                <outbound type="feature" confirmed="yes">junit.framework.Test.run(junit.framework.TestResult)</outbound>
                <outbound type="class" confirmed="yes">junit.framework.TestResult</outbound>
                <inbound type="feature" confirmed="yes">junit.extensions.TestDecorator.run(junit.framework.TestResult)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>junit.extensions.TestDecorator.countTestCases()</name>
                <outbound type="feature" confirmed="yes">junit.extensions.TestDecorator.fTest</outbound>
                <outbound type="class" confirmed="yes">junit.framework.Test</outbound>
                <outbound type="feature" confirmed="yes">junit.framework.Test.countTestCases()</outbound>
                <inbound type="feature" confirmed="yes">junit.extensions.RepeatedTest.countTestCases()</inbound>
            </feature>
            <feature confirmed="yes">
                <name>junit.extensions.TestDecorator.fTest</name>
                <outbound type="class" confirmed="yes">junit.framework.Test</outbound>
                <inbound type="feature" confirmed="yes">junit.extensions.TestDecorator.TestDecorator(junit.framework.Test)</inbound>
                <inbound type="feature" confirmed="yes">junit.extensions.TestDecorator.basicRun(junit.framework.TestResult)</inbound>
                <inbound type="feature" confirmed="yes">junit.extensions.TestDecorator.countTestCases()</inbound>
                <inbound type="feature" confirmed="yes">junit.extensions.TestDecorator.getTest()</inbound>
                <inbound type="feature" confirmed="yes">junit.extensions.TestDecorator.toString()</inbound>
            </feature>
            <feature confirmed="yes">
                <name>junit.extensions.TestDecorator.getTest()</name>
                <outbound type="feature" confirmed="yes">junit.extensions.TestDecorator.fTest</outbound>
                <outbound type="class" confirmed="yes">junit.framework.Test</outbound>
                <inbound type="feature" confirmed="yes">org.junit.internal.runners.JUnit38ClassRunner.makeDescription(junit.framework.Test)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>junit.extensions.TestDecorator.run(junit.framework.TestResult)</name>
                <outbound type="feature" confirmed="yes">junit.extensions.TestDecorator.basicRun(junit.framework.TestResult)</outbound>
                <outbound type="class" confirmed="yes">junit.framework.TestResult</outbound>
                <inbound type="feature" confirmed="yes">junit.extensions.RepeatedTest.run(junit.framework.TestResult)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>junit.extensions.TestDecorator.toString()</name>
                <outbound type="feature" confirmed="no">java.lang.Object.toString()</outbound>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="feature" confirmed="yes">junit.extensions.TestDecorator.fTest</outbound>
                <outbound type="class" confirmed="yes">junit.framework.Test</outbound>
                <inbound type="feature" confirmed="yes">junit.extensions.RepeatedTest.toString()</inbound>
            </feature>
        </class>
        <class confirmed="yes">
            <name>junit.extensions.TestSetup</name>
            <outbound type="class" confirmed="yes">junit.extensions.TestDecorator</outbound>
            <inbound type="feature" confirmed="yes">junit.extensions.TestSetup$1.TestSetup$1(junit.extensions.TestSetup, junit.framework.TestResult)</inbound>
            <inbound type="feature" confirmed="yes">junit.extensions.TestSetup$1.protect()</inbound>
            <inbound type="feature" confirmed="yes">junit.extensions.TestSetup$1.this$0</inbound>
            <feature confirmed="yes">
                <name>junit.extensions.TestSetup.TestSetup(junit.framework.Test)</name>
                <outbound type="feature" confirmed="yes">junit.extensions.TestDecorator.TestDecorator(junit.framework.Test)</outbound>
                <outbound type="class" confirmed="yes">junit.framework.Test</outbound>
            </feature>
            <feature confirmed="no">
                <name>junit.extensions.TestSetup.basicRun(junit.framework.TestResult)</name>
                <inbound type="feature" confirmed="yes">junit.extensions.TestSetup$1.protect()</inbound>
            </feature>
            <feature confirmed="yes">
                <name>junit.extensions.TestSetup.run(junit.framework.TestResult)</name>
                <outbound type="feature" confirmed="yes">junit.extensions.TestSetup$1.TestSetup$1(junit.extensions.TestSetup, junit.framework.TestResult)</outbound>
                <outbound type="class" confirmed="yes">junit.framework.Protectable</outbound>
                <outbound type="class" confirmed="yes">junit.framework.Test</outbound>
                <outbound type="class" confirmed="yes">junit.framework.TestResult</outbound>
                <outbound type="feature" confirmed="yes">junit.framework.TestResult.runProtected(junit.framework.Test, junit.framework.Protectable)</outbound>
            </feature>
            <feature confirmed="yes">
                <name>junit.extensions.TestSetup.setUp()</name>
                <outbound type="class" confirmed="no">java.lang.Exception</outbound>
                <inbound type="feature" confirmed="yes">junit.extensions.TestSetup$1.protect()</inbound>
            </feature>
            <feature confirmed="yes">
                <name>junit.extensions.TestSetup.tearDown()</name>
                <outbound type="class" confirmed="no">java.lang.Exception</outbound>
                <inbound type="feature" confirmed="yes">junit.extensions.TestSetup$1.protect()</inbound>
            </feature>
        </class>
        <class confirmed="yes">
            <name>junit.extensions.TestSetup$1</name>
            <outbound type="class" confirmed="no">java.lang.Object</outbound>
            <outbound type="class" confirmed="yes">junit.framework.Protectable</outbound>
            <feature confirmed="yes">
                <name>junit.extensions.TestSetup$1.TestSetup$1(junit.extensions.TestSetup, junit.framework.TestResult)</name>
                <outbound type="feature" confirmed="no">java.lang.Object.Object()</outbound>
                <outbound type="class" confirmed="yes">junit.extensions.TestSetup</outbound>
                <outbound type="feature" confirmed="yes">junit.extensions.TestSetup$1.this$0</outbound>
                <outbound type="feature" confirmed="yes">junit.extensions.TestSetup$1.val$result</outbound>
                <outbound type="class" confirmed="yes">junit.framework.TestResult</outbound>
                <inbound type="feature" confirmed="yes">junit.extensions.TestSetup.run(junit.framework.TestResult)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>junit.extensions.TestSetup$1.protect()</name>
                <outbound type="class" confirmed="no">java.lang.Exception</outbound>
                <outbound type="class" confirmed="yes">junit.extensions.TestSetup</outbound>
                <outbound type="feature" confirmed="yes">junit.extensions.TestSetup$1.this$0</outbound>
                <outbound type="feature" confirmed="yes">junit.extensions.TestSetup$1.val$result</outbound>
                <outbound type="feature" confirmed="no">junit.extensions.TestSetup.basicRun(junit.framework.TestResult)</outbound>
                <outbound type="feature" confirmed="yes">junit.extensions.TestSetup.setUp()</outbound>
                <outbound type="feature" confirmed="yes">junit.extensions.TestSetup.tearDown()</outbound>
                <outbound type="class" confirmed="yes">junit.framework.TestResult</outbound>
            </feature>
            <feature confirmed="yes">
                <name>junit.extensions.TestSetup$1.this$0</name>
                <outbound type="class" confirmed="yes">junit.extensions.TestSetup</outbound>
                <inbound type="feature" confirmed="yes">junit.extensions.TestSetup$1.TestSetup$1(junit.extensions.TestSetup, junit.framework.TestResult)</inbound>
                <inbound type="feature" confirmed="yes">junit.extensions.TestSetup$1.protect()</inbound>
            </feature>
            <feature confirmed="yes">
                <name>junit.extensions.TestSetup$1.val$result</name>
                <outbound type="class" confirmed="yes">junit.framework.TestResult</outbound>
                <inbound type="feature" confirmed="yes">junit.extensions.TestSetup$1.TestSetup$1(junit.extensions.TestSetup, junit.framework.TestResult)</inbound>
                <inbound type="feature" confirmed="yes">junit.extensions.TestSetup$1.protect()</inbound>
            </feature>
        </class>
        <class confirmed="yes">
            <name>junit.extensions.package-info</name>
            <outbound type="class" confirmed="no">java.lang.Object</outbound>
        </class>
    </package>
    <package confirmed="yes">
        <name>junit.framework</name>
        <class confirmed="yes">
            <name>junit.framework.Assert</name>
            <outbound type="class" confirmed="no">java.lang.Object</outbound>
            <inbound type="class" confirmed="yes">junit.extensions.TestDecorator</inbound>
            <inbound type="class" confirmed="yes">junit.framework.TestCase</inbound>
            <feature confirmed="yes">
                <name>junit.framework.Assert.Assert()</name>
                <outbound type="feature" confirmed="no">java.lang.Object.Object()</outbound>
                <inbound type="feature" confirmed="yes">junit.extensions.TestDecorator.TestDecorator(junit.framework.Test)</inbound>
                <inbound type="feature" confirmed="yes">junit.framework.TestCase.TestCase()</inbound>
                <inbound type="feature" confirmed="yes">junit.framework.TestCase.TestCase(java.lang.String)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>junit.framework.Assert.assertEquals(boolean, boolean)</name>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="feature" confirmed="yes">junit.framework.Assert.assertEquals(java.lang.String, boolean, boolean)</outbound>
            </feature>
            <feature confirmed="yes">
                <name>junit.framework.Assert.assertEquals(byte, byte)</name>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="feature" confirmed="yes">junit.framework.Assert.assertEquals(java.lang.String, byte, byte)</outbound>
            </feature>
            <feature confirmed="yes">
                <name>junit.framework.Assert.assertEquals(char, char)</name>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="feature" confirmed="yes">junit.framework.Assert.assertEquals(java.lang.String, char, char)</outbound>
            </feature>
            <feature confirmed="yes">
                <name>junit.framework.Assert.assertEquals(double, double, double)</name>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="feature" confirmed="yes">junit.framework.Assert.assertEquals(java.lang.String, double, double, double)</outbound>
            </feature>
            <feature confirmed="yes">
                <name>junit.framework.Assert.assertEquals(float, float, float)</name>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="feature" confirmed="yes">junit.framework.Assert.assertEquals(java.lang.String, float, float, float)</outbound>
            </feature>
            <feature confirmed="yes">
                <name>junit.framework.Assert.assertEquals(int, int)</name>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="feature" confirmed="yes">junit.framework.Assert.assertEquals(java.lang.String, int, int)</outbound>
            </feature>
            <feature confirmed="yes">
                <name>junit.framework.Assert.assertEquals(java.lang.Object, java.lang.Object)</name>
                <outbound type="class" confirmed="no">java.lang.Object</outbound>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="feature" confirmed="yes">junit.framework.Assert.assertEquals(java.lang.String, java.lang.Object, java.lang.Object)</outbound>
            </feature>
            <feature confirmed="yes">
                <name>junit.framework.Assert.assertEquals(java.lang.String, boolean, boolean)</name>
                <outbound type="class" confirmed="no">java.lang.Boolean</outbound>
                <outbound type="feature" confirmed="no">java.lang.Boolean.valueOf(boolean)</outbound>
                <outbound type="class" confirmed="no">java.lang.Object</outbound>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="feature" confirmed="yes">junit.framework.Assert.assertEquals(java.lang.String, java.lang.Object, java.lang.Object)</outbound>
                <inbound type="feature" confirmed="yes">junit.framework.Assert.assertEquals(boolean, boolean)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>junit.framework.Assert.assertEquals(java.lang.String, byte, byte)</name>
                <outbound type="feature" confirmed="no">java.lang.Byte.Byte(byte)</outbound>
                <outbound type="class" confirmed="no">java.lang.Object</outbound>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="feature" confirmed="yes">junit.framework.Assert.assertEquals(java.lang.String, java.lang.Object, java.lang.Object)</outbound>
                <inbound type="feature" confirmed="yes">junit.framework.Assert.assertEquals(byte, byte)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>junit.framework.Assert.assertEquals(java.lang.String, char, char)</name>
                <outbound type="feature" confirmed="no">java.lang.Character.Character(char)</outbound>
                <outbound type="class" confirmed="no">java.lang.Object</outbound>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="feature" confirmed="yes">junit.framework.Assert.assertEquals(java.lang.String, java.lang.Object, java.lang.Object)</outbound>
                <inbound type="feature" confirmed="yes">junit.framework.Assert.assertEquals(char, char)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>junit.framework.Assert.assertEquals(java.lang.String, double, double, double)</name>
                <outbound type="feature" confirmed="no">java.lang.Double.Double(double)</outbound>
                <outbound type="feature" confirmed="no">java.lang.Double.compare(double, double)</outbound>
                <outbound type="feature" confirmed="no">java.lang.Math.abs(double)</outbound>
                <outbound type="class" confirmed="no">java.lang.Object</outbound>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="feature" confirmed="yes">junit.framework.Assert.failNotEquals(java.lang.String, java.lang.Object, java.lang.Object)</outbound>
                <inbound type="feature" confirmed="yes">junit.framework.Assert.assertEquals(double, double, double)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>junit.framework.Assert.assertEquals(java.lang.String, float, float, float)</name>
                <outbound type="feature" confirmed="no">java.lang.Float.Float(float)</outbound>
                <outbound type="feature" confirmed="no">java.lang.Float.compare(float, float)</outbound>
                <outbound type="feature" confirmed="no">java.lang.Math.abs(float)</outbound>
                <outbound type="class" confirmed="no">java.lang.Object</outbound>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="feature" confirmed="yes">junit.framework.Assert.failNotEquals(java.lang.String, java.lang.Object, java.lang.Object)</outbound>
                <inbound type="feature" confirmed="yes">junit.framework.Assert.assertEquals(float, float, float)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>junit.framework.Assert.assertEquals(java.lang.String, int, int)</name>
                <outbound type="feature" confirmed="no">java.lang.Integer.Integer(int)</outbound>
                <outbound type="class" confirmed="no">java.lang.Object</outbound>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="feature" confirmed="yes">junit.framework.Assert.assertEquals(java.lang.String, java.lang.Object, java.lang.Object)</outbound>
                <inbound type="feature" confirmed="yes">junit.framework.Assert.assertEquals(int, int)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>junit.framework.Assert.assertEquals(java.lang.String, java.lang.Object, java.lang.Object)</name>
                <outbound type="class" confirmed="no">java.lang.Object</outbound>
                <outbound type="feature" confirmed="no">java.lang.Object.equals(java.lang.Object)</outbound>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="feature" confirmed="yes">junit.framework.Assert.failNotEquals(java.lang.String, java.lang.Object, java.lang.Object)</outbound>
                <inbound type="feature" confirmed="yes">junit.framework.Assert.assertEquals(java.lang.Object, java.lang.Object)</inbound>
                <inbound type="feature" confirmed="yes">junit.framework.Assert.assertEquals(java.lang.String, boolean, boolean)</inbound>
                <inbound type="feature" confirmed="yes">junit.framework.Assert.assertEquals(java.lang.String, byte, byte)</inbound>
                <inbound type="feature" confirmed="yes">junit.framework.Assert.assertEquals(java.lang.String, char, char)</inbound>
                <inbound type="feature" confirmed="yes">junit.framework.Assert.assertEquals(java.lang.String, int, int)</inbound>
                <inbound type="feature" confirmed="yes">junit.framework.Assert.assertEquals(java.lang.String, long, long)</inbound>
                <inbound type="feature" confirmed="yes">junit.framework.Assert.assertEquals(java.lang.String, short, short)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>junit.framework.Assert.assertEquals(java.lang.String, java.lang.String)</name>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="feature" confirmed="yes">junit.framework.Assert.assertEquals(java.lang.String, java.lang.String, java.lang.String)</outbound>
            </feature>
            <feature confirmed="yes">
                <name>junit.framework.Assert.assertEquals(java.lang.String, java.lang.String, java.lang.String)</name>
                <outbound type="class" confirmed="no">java.lang.Object</outbound>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="feature" confirmed="no">java.lang.String.equals(java.lang.Object)</outbound>
                <outbound type="feature" confirmed="yes">junit.framework.ComparisonFailure.ComparisonFailure(java.lang.String, java.lang.String, java.lang.String)</outbound>
                <inbound type="feature" confirmed="yes">junit.framework.Assert.assertEquals(java.lang.String, java.lang.String)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>junit.framework.Assert.assertEquals(java.lang.String, long, long)</name>
                <outbound type="feature" confirmed="no">java.lang.Long.Long(long)</outbound>
                <outbound type="class" confirmed="no">java.lang.Object</outbound>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="feature" confirmed="yes">junit.framework.Assert.assertEquals(java.lang.String, java.lang.Object, java.lang.Object)</outbound>
                <inbound type="feature" confirmed="yes">junit.framework.Assert.assertEquals(long, long)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>junit.framework.Assert.assertEquals(java.lang.String, short, short)</name>
                <outbound type="class" confirmed="no">java.lang.Object</outbound>
                <outbound type="feature" confirmed="no">java.lang.Short.Short(short)</outbound>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="feature" confirmed="yes">junit.framework.Assert.assertEquals(java.lang.String, java.lang.Object, java.lang.Object)</outbound>
                <inbound type="feature" confirmed="yes">junit.framework.Assert.assertEquals(short, short)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>junit.framework.Assert.assertEquals(long, long)</name>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="feature" confirmed="yes">junit.framework.Assert.assertEquals(java.lang.String, long, long)</outbound>
            </feature>
            <feature confirmed="yes">
                <name>junit.framework.Assert.assertEquals(short, short)</name>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="feature" confirmed="yes">junit.framework.Assert.assertEquals(java.lang.String, short, short)</outbound>
            </feature>
            <feature confirmed="yes">
                <name>junit.framework.Assert.assertFalse(boolean)</name>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="feature" confirmed="yes">junit.framework.Assert.assertFalse(java.lang.String, boolean)</outbound>
            </feature>
            <feature confirmed="yes">
                <name>junit.framework.Assert.assertFalse(java.lang.String, boolean)</name>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="feature" confirmed="yes">junit.framework.Assert.assertTrue(java.lang.String, boolean)</outbound>
                <inbound type="feature" confirmed="yes">junit.framework.Assert.assertFalse(boolean)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>junit.framework.Assert.assertNotNull(java.lang.Object)</name>
                <outbound type="class" confirmed="no">java.lang.Object</outbound>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="feature" confirmed="yes">junit.framework.Assert.assertNotNull(java.lang.String, java.lang.Object)</outbound>
            </feature>
            <feature confirmed="yes">
                <name>junit.framework.Assert.assertNotNull(java.lang.String, java.lang.Object)</name>
                <outbound type="class" confirmed="no">java.lang.Object</outbound>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="feature" confirmed="yes">junit.framework.Assert.assertTrue(java.lang.String, boolean)</outbound>
                <inbound type="feature" confirmed="yes">junit.framework.Assert.assertNotNull(java.lang.Object)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>junit.framework.Assert.assertNotSame(java.lang.Object, java.lang.Object)</name>
                <outbound type="class" confirmed="no">java.lang.Object</outbound>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="feature" confirmed="yes">junit.framework.Assert.assertNotSame(java.lang.String, java.lang.Object, java.lang.Object)</outbound>
            </feature>
            <feature confirmed="yes">
                <name>junit.framework.Assert.assertNotSame(java.lang.String, java.lang.Object, java.lang.Object)</name>
                <outbound type="class" confirmed="no">java.lang.Object</outbound>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="feature" confirmed="yes">junit.framework.Assert.failSame(java.lang.String)</outbound>
                <inbound type="feature" confirmed="yes">junit.framework.Assert.assertNotSame(java.lang.Object, java.lang.Object)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>junit.framework.Assert.assertNull(java.lang.Object)</name>
                <outbound type="class" confirmed="no">java.lang.Object</outbound>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="feature" confirmed="no">java.lang.String.valueOf(java.lang.Object)</outbound>
                <outbound type="class" confirmed="no">java.lang.StringBuilder</outbound>
                <outbound type="feature" confirmed="no">java.lang.StringBuilder.StringBuilder()</outbound>
                <outbound type="feature" confirmed="no">java.lang.StringBuilder.append(java.lang.String)</outbound>
                <outbound type="feature" confirmed="no">java.lang.StringBuilder.toString()</outbound>
                <outbound type="feature" confirmed="yes">junit.framework.Assert.assertNull(java.lang.String, java.lang.Object)</outbound>
            </feature>
            <feature confirmed="yes">
                <name>junit.framework.Assert.assertNull(java.lang.String, java.lang.Object)</name>
                <outbound type="class" confirmed="no">java.lang.Object</outbound>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="feature" confirmed="yes">junit.framework.Assert.assertTrue(java.lang.String, boolean)</outbound>
                <inbound type="feature" confirmed="yes">junit.framework.Assert.assertNull(java.lang.Object)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>junit.framework.Assert.assertSame(java.lang.Object, java.lang.Object)</name>
                <outbound type="class" confirmed="no">java.lang.Object</outbound>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="feature" confirmed="yes">junit.framework.Assert.assertSame(java.lang.String, java.lang.Object, java.lang.Object)</outbound>
            </feature>
            <feature confirmed="yes">
                <name>junit.framework.Assert.assertSame(java.lang.String, java.lang.Object, java.lang.Object)</name>
                <outbound type="class" confirmed="no">java.lang.Object</outbound>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="feature" confirmed="yes">junit.framework.Assert.failNotSame(java.lang.String, java.lang.Object, java.lang.Object)</outbound>
                <inbound type="feature" confirmed="yes">junit.framework.Assert.assertSame(java.lang.Object, java.lang.Object)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>junit.framework.Assert.assertTrue(boolean)</name>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="feature" confirmed="yes">junit.framework.Assert.assertTrue(java.lang.String, boolean)</outbound>
            </feature>
            <feature confirmed="yes">
                <name>junit.framework.Assert.assertTrue(java.lang.String, boolean)</name>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="feature" confirmed="yes">junit.framework.Assert.fail(java.lang.String)</outbound>
                <inbound type="feature" confirmed="yes">junit.framework.Assert.assertFalse(java.lang.String, boolean)</inbound>
                <inbound type="feature" confirmed="yes">junit.framework.Assert.assertNotNull(java.lang.String, java.lang.Object)</inbound>
                <inbound type="feature" confirmed="yes">junit.framework.Assert.assertNull(java.lang.String, java.lang.Object)</inbound>
                <inbound type="feature" confirmed="yes">junit.framework.Assert.assertTrue(boolean)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>junit.framework.Assert.fail()</name>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="feature" confirmed="yes">junit.framework.Assert.fail(java.lang.String)</outbound>
            </feature>
            <feature confirmed="yes">
                <name>junit.framework.Assert.fail(java.lang.String)</name>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="feature" confirmed="yes">junit.framework.AssertionFailedError.AssertionFailedError()</outbound>
                <outbound type="feature" confirmed="yes">junit.framework.AssertionFailedError.AssertionFailedError(java.lang.String)</outbound>
                <inbound type="feature" confirmed="yes">junit.framework.Assert.assertTrue(java.lang.String, boolean)</inbound>
                <inbound type="feature" confirmed="yes">junit.framework.Assert.fail()</inbound>
                <inbound type="feature" confirmed="yes">junit.framework.Assert.failNotEquals(java.lang.String, java.lang.Object, java.lang.Object)</inbound>
                <inbound type="feature" confirmed="yes">junit.framework.Assert.failNotSame(java.lang.String, java.lang.Object, java.lang.Object)</inbound>
                <inbound type="feature" confirmed="yes">junit.framework.Assert.failSame(java.lang.String)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>junit.framework.Assert.failNotEquals(java.lang.String, java.lang.Object, java.lang.Object)</name>
                <outbound type="class" confirmed="no">java.lang.Object</outbound>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="feature" confirmed="yes">junit.framework.Assert.fail(java.lang.String)</outbound>
                <outbound type="feature" confirmed="yes">junit.framework.Assert.format(java.lang.String, java.lang.Object, java.lang.Object)</outbound>
                <inbound type="feature" confirmed="yes">junit.framework.Assert.assertEquals(java.lang.String, double, double, double)</inbound>
                <inbound type="feature" confirmed="yes">junit.framework.Assert.assertEquals(java.lang.String, float, float, float)</inbound>
                <inbound type="feature" confirmed="yes">junit.framework.Assert.assertEquals(java.lang.String, java.lang.Object, java.lang.Object)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>junit.framework.Assert.failNotSame(java.lang.String, java.lang.Object, java.lang.Object)</name>
                <outbound type="class" confirmed="no">java.lang.Object</outbound>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="class" confirmed="no">java.lang.StringBuilder</outbound>
                <outbound type="feature" confirmed="no">java.lang.StringBuilder.StringBuilder()</outbound>
                <outbound type="feature" confirmed="no">java.lang.StringBuilder.append(java.lang.Object)</outbound>
                <outbound type="feature" confirmed="no">java.lang.StringBuilder.append(java.lang.String)</outbound>
                <outbound type="feature" confirmed="no">java.lang.StringBuilder.toString()</outbound>
                <outbound type="feature" confirmed="yes">junit.framework.Assert.fail(java.lang.String)</outbound>
                <inbound type="feature" confirmed="yes">junit.framework.Assert.assertSame(java.lang.String, java.lang.Object, java.lang.Object)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>junit.framework.Assert.failSame(java.lang.String)</name>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="class" confirmed="no">java.lang.StringBuilder</outbound>
                <outbound type="feature" confirmed="no">java.lang.StringBuilder.StringBuilder()</outbound>
                <outbound type="feature" confirmed="no">java.lang.StringBuilder.append(java.lang.String)</outbound>
                <outbound type="feature" confirmed="no">java.lang.StringBuilder.toString()</outbound>
                <outbound type="feature" confirmed="yes">junit.framework.Assert.fail(java.lang.String)</outbound>
                <inbound type="feature" confirmed="yes">junit.framework.Assert.assertNotSame(java.lang.String, java.lang.Object, java.lang.Object)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>junit.framework.Assert.format(java.lang.String, java.lang.Object, java.lang.Object)</name>
                <outbound type="class" confirmed="no">java.lang.Object</outbound>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="feature" confirmed="no">java.lang.String.length()</outbound>
                <outbound type="class" confirmed="no">java.lang.StringBuilder</outbound>
                <outbound type="feature" confirmed="no">java.lang.StringBuilder.StringBuilder()</outbound>
                <outbound type="feature" confirmed="no">java.lang.StringBuilder.append(java.lang.Object)</outbound>
                <outbound type="feature" confirmed="no">java.lang.StringBuilder.append(java.lang.String)</outbound>
                <outbound type="feature" confirmed="no">java.lang.StringBuilder.toString()</outbound>
                <inbound type="feature" confirmed="yes">junit.framework.Assert.failNotEquals(java.lang.String, java.lang.Object, java.lang.Object)</inbound>
                <inbound type="feature" confirmed="yes">junit.framework.ComparisonCompactor.compact(java.lang.String)</inbound>
            </feature>
        </class>
        <class confirmed="yes">
            <name>junit.framework.AssertionFailedError</name>
            <outbound type="class" confirmed="no">java.lang.AssertionError</outbound>
            <inbound type="class" confirmed="yes">junit.framework.ComparisonFailure</inbound>
            <inbound type="feature" confirmed="yes">junit.framework.TestFailure.isFailure()</inbound>
            <inbound type="feature" confirmed="yes">junit.framework.TestListener.addFailure(junit.framework.Test, junit.framework.AssertionFailedError)</inbound>
            <inbound type="feature" confirmed="yes">junit.framework.TestResult.addFailure(junit.framework.Test, junit.framework.AssertionFailedError)</inbound>
            <inbound type="feature" confirmed="yes">junit.framework.TestResult.runProtected(junit.framework.Test, junit.framework.Protectable)</inbound>
            <inbound type="feature" confirmed="yes">junit.runner.BaseTestRunner.addFailure(junit.framework.Test, junit.framework.AssertionFailedError)</inbound>
            <inbound type="feature" confirmed="yes">junit.textui.ResultPrinter.addFailure(junit.framework.Test, junit.framework.AssertionFailedError)</inbound>
            <inbound type="feature" confirmed="yes">org.junit.internal.runners.JUnit38ClassRunner$OldTestClassAdaptingListener.addFailure(junit.framework.Test, junit.framework.AssertionFailedError)</inbound>
            <feature confirmed="yes">
                <name>junit.framework.AssertionFailedError.AssertionFailedError()</name>
                <outbound type="feature" confirmed="no">java.lang.AssertionError.AssertionError()</outbound>
                <inbound type="feature" confirmed="yes">junit.framework.Assert.fail(java.lang.String)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>junit.framework.AssertionFailedError.AssertionFailedError(java.lang.String)</name>
                <outbound type="feature" confirmed="no">java.lang.AssertionError.AssertionError(java.lang.Object)</outbound>
                <outbound type="class" confirmed="no">java.lang.Object</outbound>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <inbound type="feature" confirmed="yes">junit.framework.Assert.fail(java.lang.String)</inbound>
                <inbound type="feature" confirmed="yes">junit.framework.ComparisonFailure.ComparisonFailure(java.lang.String, java.lang.String, java.lang.String)</inbound>
            </feature>
            <feature confirmed="no">
                <name>junit.framework.AssertionFailedError.getMessage()</name>
                <inbound type="feature" confirmed="yes">junit.framework.ComparisonFailure.getMessage()</inbound>
            </feature>
            <feature confirmed="yes">
                <name>junit.framework.AssertionFailedError.serialVersionUID</name>
            </feature>
        </class>
        <class confirmed="yes">
            <name>junit.framework.ComparisonCompactor</name>
            <outbound type="class" confirmed="no">java.lang.Object</outbound>
            <feature confirmed="yes">
                <name>junit.framework.ComparisonCompactor.ComparisonCompactor(int, java.lang.String, java.lang.String)</name>
                <outbound type="feature" confirmed="no">java.lang.Object.Object()</outbound>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="feature" confirmed="yes">junit.framework.ComparisonCompactor.fActual</outbound>
                <outbound type="feature" confirmed="yes">junit.framework.ComparisonCompactor.fContextLength</outbound>
                <outbound type="feature" confirmed="yes">junit.framework.ComparisonCompactor.fExpected</outbound>
                <inbound type="feature" confirmed="yes">junit.framework.ComparisonFailure.getMessage()</inbound>
            </feature>
            <feature confirmed="yes">
                <name>junit.framework.ComparisonCompactor.DELTA_END</name>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
            </feature>
            <feature confirmed="yes">
                <name>junit.framework.ComparisonCompactor.DELTA_START</name>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
            </feature>
            <feature confirmed="yes">
                <name>junit.framework.ComparisonCompactor.ELLIPSIS</name>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
            </feature>
            <feature confirmed="yes">
                <name>junit.framework.ComparisonCompactor.areStringsEqual()</name>
                <outbound type="class" confirmed="no">java.lang.Object</outbound>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="feature" confirmed="no">java.lang.String.equals(java.lang.Object)</outbound>
                <outbound type="feature" confirmed="yes">junit.framework.ComparisonCompactor.fActual</outbound>
                <outbound type="feature" confirmed="yes">junit.framework.ComparisonCompactor.fExpected</outbound>
                <inbound type="feature" confirmed="yes">junit.framework.ComparisonCompactor.compact(java.lang.String)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>junit.framework.ComparisonCompactor.compact(java.lang.String)</name>
                <outbound type="class" confirmed="no">java.lang.Object</outbound>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="feature" confirmed="yes">junit.framework.Assert.format(java.lang.String, java.lang.Object, java.lang.Object)</outbound>
                <outbound type="feature" confirmed="yes">junit.framework.ComparisonCompactor.areStringsEqual()</outbound>
                <outbound type="feature" confirmed="yes">junit.framework.ComparisonCompactor.compactString(java.lang.String)</outbound>
                <outbound type="feature" confirmed="yes">junit.framework.ComparisonCompactor.fActual</outbound>
                <outbound type="feature" confirmed="yes">junit.framework.ComparisonCompactor.fExpected</outbound>
                <outbound type="feature" confirmed="yes">junit.framework.ComparisonCompactor.findCommonPrefix()</outbound>
                <outbound type="feature" confirmed="yes">junit.framework.ComparisonCompactor.findCommonSuffix()</outbound>
                <inbound type="feature" confirmed="yes">junit.framework.ComparisonFailure.getMessage()</inbound>
            </feature>
            <feature confirmed="yes">
                <name>junit.framework.ComparisonCompactor.compactString(java.lang.String)</name>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="feature" confirmed="no">java.lang.String.length()</outbound>
                <outbound type="feature" confirmed="no">java.lang.String.substring(int, int)</outbound>
                <outbound type="class" confirmed="no">java.lang.StringBuilder</outbound>
                <outbound type="feature" confirmed="no">java.lang.StringBuilder.StringBuilder()</outbound>
                <outbound type="feature" confirmed="no">java.lang.StringBuilder.append(java.lang.String)</outbound>
                <outbound type="feature" confirmed="no">java.lang.StringBuilder.toString()</outbound>
                <outbound type="feature" confirmed="yes">junit.framework.ComparisonCompactor.computeCommonPrefix()</outbound>
                <outbound type="feature" confirmed="yes">junit.framework.ComparisonCompactor.computeCommonSuffix()</outbound>
                <outbound type="feature" confirmed="yes">junit.framework.ComparisonCompactor.fPrefix</outbound>
                <outbound type="feature" confirmed="yes">junit.framework.ComparisonCompactor.fSuffix</outbound>
                <inbound type="feature" confirmed="yes">junit.framework.ComparisonCompactor.compact(java.lang.String)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>junit.framework.ComparisonCompactor.computeCommonPrefix()</name>
                <outbound type="feature" confirmed="no">java.lang.Math.max(int, int)</outbound>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="feature" confirmed="no">java.lang.String.substring(int, int)</outbound>
                <outbound type="class" confirmed="no">java.lang.StringBuilder</outbound>
                <outbound type="feature" confirmed="no">java.lang.StringBuilder.StringBuilder()</outbound>
                <outbound type="feature" confirmed="no">java.lang.StringBuilder.append(java.lang.String)</outbound>
                <outbound type="feature" confirmed="no">java.lang.StringBuilder.toString()</outbound>
                <outbound type="feature" confirmed="yes">junit.framework.ComparisonCompactor.fContextLength</outbound>
                <outbound type="feature" confirmed="yes">junit.framework.ComparisonCompactor.fExpected</outbound>
                <outbound type="feature" confirmed="yes">junit.framework.ComparisonCompactor.fPrefix</outbound>
                <inbound type="feature" confirmed="yes">junit.framework.ComparisonCompactor.compactString(java.lang.String)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>junit.framework.ComparisonCompactor.computeCommonSuffix()</name>
                <outbound type="feature" confirmed="no">java.lang.Math.min(int, int)</outbound>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="feature" confirmed="no">java.lang.String.length()</outbound>
                <outbound type="feature" confirmed="no">java.lang.String.substring(int, int)</outbound>
                <outbound type="class" confirmed="no">java.lang.StringBuilder</outbound>
                <outbound type="feature" confirmed="no">java.lang.StringBuilder.StringBuilder()</outbound>
                <outbound type="feature" confirmed="no">java.lang.StringBuilder.append(java.lang.String)</outbound>
                <outbound type="feature" confirmed="no">java.lang.StringBuilder.toString()</outbound>
                <outbound type="feature" confirmed="yes">junit.framework.ComparisonCompactor.fContextLength</outbound>
                <outbound type="feature" confirmed="yes">junit.framework.ComparisonCompactor.fExpected</outbound>
                <outbound type="feature" confirmed="yes">junit.framework.ComparisonCompactor.fSuffix</outbound>
                <inbound type="feature" confirmed="yes">junit.framework.ComparisonCompactor.compactString(java.lang.String)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>junit.framework.ComparisonCompactor.fActual</name>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <inbound type="feature" confirmed="yes">junit.framework.ComparisonCompactor.ComparisonCompactor(int, java.lang.String, java.lang.String)</inbound>
                <inbound type="feature" confirmed="yes">junit.framework.ComparisonCompactor.areStringsEqual()</inbound>
                <inbound type="feature" confirmed="yes">junit.framework.ComparisonCompactor.compact(java.lang.String)</inbound>
                <inbound type="feature" confirmed="yes">junit.framework.ComparisonCompactor.findCommonPrefix()</inbound>
                <inbound type="feature" confirmed="yes">junit.framework.ComparisonCompactor.findCommonSuffix()</inbound>
            </feature>
            <feature confirmed="yes">
                <name>junit.framework.ComparisonCompactor.fContextLength</name>
                <inbound type="feature" confirmed="yes">junit.framework.ComparisonCompactor.ComparisonCompactor(int, java.lang.String, java.lang.String)</inbound>
                <inbound type="feature" confirmed="yes">junit.framework.ComparisonCompactor.computeCommonPrefix()</inbound>
                <inbound type="feature" confirmed="yes">junit.framework.ComparisonCompactor.computeCommonSuffix()</inbound>
            </feature>
            <feature confirmed="yes">
                <name>junit.framework.ComparisonCompactor.fExpected</name>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <inbound type="feature" confirmed="yes">junit.framework.ComparisonCompactor.ComparisonCompactor(int, java.lang.String, java.lang.String)</inbound>
                <inbound type="feature" confirmed="yes">junit.framework.ComparisonCompactor.areStringsEqual()</inbound>
                <inbound type="feature" confirmed="yes">junit.framework.ComparisonCompactor.compact(java.lang.String)</inbound>
                <inbound type="feature" confirmed="yes">junit.framework.ComparisonCompactor.computeCommonPrefix()</inbound>
                <inbound type="feature" confirmed="yes">junit.framework.ComparisonCompactor.computeCommonSuffix()</inbound>
                <inbound type="feature" confirmed="yes">junit.framework.ComparisonCompactor.findCommonPrefix()</inbound>
                <inbound type="feature" confirmed="yes">junit.framework.ComparisonCompactor.findCommonSuffix()</inbound>
            </feature>
            <feature confirmed="yes">
                <name>junit.framework.ComparisonCompactor.fPrefix</name>
                <inbound type="feature" confirmed="yes">junit.framework.ComparisonCompactor.compactString(java.lang.String)</inbound>
                <inbound type="feature" confirmed="yes">junit.framework.ComparisonCompactor.computeCommonPrefix()</inbound>
                <inbound type="feature" confirmed="yes">junit.framework.ComparisonCompactor.findCommonPrefix()</inbound>
                <inbound type="feature" confirmed="yes">junit.framework.ComparisonCompactor.findCommonSuffix()</inbound>
            </feature>
            <feature confirmed="yes">
                <name>junit.framework.ComparisonCompactor.fSuffix</name>
                <inbound type="feature" confirmed="yes">junit.framework.ComparisonCompactor.compactString(java.lang.String)</inbound>
                <inbound type="feature" confirmed="yes">junit.framework.ComparisonCompactor.computeCommonSuffix()</inbound>
                <inbound type="feature" confirmed="yes">junit.framework.ComparisonCompactor.findCommonSuffix()</inbound>
            </feature>
            <feature confirmed="yes">
                <name>junit.framework.ComparisonCompactor.findCommonPrefix()</name>
                <outbound type="feature" confirmed="no">java.lang.Math.min(int, int)</outbound>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="feature" confirmed="no">java.lang.String.charAt(int)</outbound>
                <outbound type="feature" confirmed="no">java.lang.String.length()</outbound>
                <outbound type="feature" confirmed="yes">junit.framework.ComparisonCompactor.fActual</outbound>
                <outbound type="feature" confirmed="yes">junit.framework.ComparisonCompactor.fExpected</outbound>
                <outbound type="feature" confirmed="yes">junit.framework.ComparisonCompactor.fPrefix</outbound>
                <inbound type="feature" confirmed="yes">junit.framework.ComparisonCompactor.compact(java.lang.String)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>junit.framework.ComparisonCompactor.findCommonSuffix()</name>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="feature" confirmed="no">java.lang.String.charAt(int)</outbound>
                <outbound type="feature" confirmed="no">java.lang.String.length()</outbound>
                <outbound type="feature" confirmed="yes">junit.framework.ComparisonCompactor.fActual</outbound>
                <outbound type="feature" confirmed="yes">junit.framework.ComparisonCompactor.fExpected</outbound>
                <outbound type="feature" confirmed="yes">junit.framework.ComparisonCompactor.fPrefix</outbound>
                <outbound type="feature" confirmed="yes">junit.framework.ComparisonCompactor.fSuffix</outbound>
                <inbound type="feature" confirmed="yes">junit.framework.ComparisonCompactor.compact(java.lang.String)</inbound>
            </feature>
        </class>
        <class confirmed="yes">
            <name>junit.framework.ComparisonFailure</name>
            <outbound type="class" confirmed="yes">junit.framework.AssertionFailedError</outbound>
            <feature confirmed="yes">
                <name>junit.framework.ComparisonFailure.ComparisonFailure(java.lang.String, java.lang.String, java.lang.String)</name>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="feature" confirmed="yes">junit.framework.AssertionFailedError.AssertionFailedError(java.lang.String)</outbound>
                <outbound type="feature" confirmed="yes">junit.framework.ComparisonFailure.fActual</outbound>
                <outbound type="feature" confirmed="yes">junit.framework.ComparisonFailure.fExpected</outbound>
                <inbound type="feature" confirmed="yes">junit.framework.Assert.assertEquals(java.lang.String, java.lang.String, java.lang.String)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>junit.framework.ComparisonFailure.MAX_CONTEXT_LENGTH</name>
            </feature>
            <feature confirmed="yes">
                <name>junit.framework.ComparisonFailure.fActual</name>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <inbound type="feature" confirmed="yes">junit.framework.ComparisonFailure.ComparisonFailure(java.lang.String, java.lang.String, java.lang.String)</inbound>
                <inbound type="feature" confirmed="yes">junit.framework.ComparisonFailure.getActual()</inbound>
                <inbound type="feature" confirmed="yes">junit.framework.ComparisonFailure.getMessage()</inbound>
            </feature>
            <feature confirmed="yes">
                <name>junit.framework.ComparisonFailure.fExpected</name>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <inbound type="feature" confirmed="yes">junit.framework.ComparisonFailure.ComparisonFailure(java.lang.String, java.lang.String, java.lang.String)</inbound>
                <inbound type="feature" confirmed="yes">junit.framework.ComparisonFailure.getExpected()</inbound>
                <inbound type="feature" confirmed="yes">junit.framework.ComparisonFailure.getMessage()</inbound>
            </feature>
            <feature confirmed="yes">
                <name>junit.framework.ComparisonFailure.getActual()</name>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="feature" confirmed="yes">junit.framework.ComparisonFailure.fActual</outbound>
            </feature>
            <feature confirmed="yes">
                <name>junit.framework.ComparisonFailure.getExpected()</name>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="feature" confirmed="yes">junit.framework.ComparisonFailure.fExpected</outbound>
            </feature>
            <feature confirmed="yes">
                <name>junit.framework.ComparisonFailure.getMessage()</name>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="feature" confirmed="no">junit.framework.AssertionFailedError.getMessage()</outbound>
                <outbound type="feature" confirmed="yes">junit.framework.ComparisonCompactor.ComparisonCompactor(int, java.lang.String, java.lang.String)</outbound>
                <outbound type="feature" confirmed="yes">junit.framework.ComparisonCompactor.compact(java.lang.String)</outbound>
                <outbound type="feature" confirmed="yes">junit.framework.ComparisonFailure.fActual</outbound>
                <outbound type="feature" confirmed="yes">junit.framework.ComparisonFailure.fExpected</outbound>
            </feature>
            <feature confirmed="yes">
                <name>junit.framework.ComparisonFailure.serialVersionUID</name>
            </feature>
        </class>
        <class confirmed="yes">
            <name>junit.framework.JUnit4TestAdapter</name>
            <outbound type="class" confirmed="no">java.lang.Object</outbound>
            <outbound type="class" confirmed="yes">junit.framework.Test</outbound>
            <outbound type="class" confirmed="yes">org.junit.runner.Describable</outbound>
            <outbound type="class" confirmed="yes">org.junit.runner.manipulation.Filterable</outbound>
            <outbound type="class" confirmed="yes">org.junit.runner.manipulation.Sortable</outbound>
            <inbound type="feature" confirmed="yes">junit.framework.JUnit4TestAdapterCache.getNotifier(junit.framework.TestResult, junit.framework.JUnit4TestAdapter)</inbound>
            <feature confirmed="yes">
                <name>junit.framework.JUnit4TestAdapter.JUnit4TestAdapter(java.lang.Class)</name>
                <outbound type="class" confirmed="no">java.lang.Class</outbound>
                <outbound type="feature" confirmed="yes">junit.framework.JUnit4TestAdapter.JUnit4TestAdapter(java.lang.Class, junit.framework.JUnit4TestAdapterCache)</outbound>
                <outbound type="class" confirmed="yes">junit.framework.JUnit4TestAdapterCache</outbound>
                <outbound type="feature" confirmed="yes">junit.framework.JUnit4TestAdapterCache.getDefault()</outbound>
            </feature>
            <feature confirmed="yes">
                <name>junit.framework.JUnit4TestAdapter.JUnit4TestAdapter(java.lang.Class, junit.framework.JUnit4TestAdapterCache)</name>
                <outbound type="class" confirmed="no">java.lang.Class</outbound>
                <outbound type="feature" confirmed="no">java.lang.Object.Object()</outbound>
                <outbound type="feature" confirmed="yes">junit.framework.JUnit4TestAdapter.fCache</outbound>
                <outbound type="feature" confirmed="yes">junit.framework.JUnit4TestAdapter.fNewTestClass</outbound>
                <outbound type="feature" confirmed="yes">junit.framework.JUnit4TestAdapter.fRunner</outbound>
                <outbound type="class" confirmed="yes">junit.framework.JUnit4TestAdapterCache</outbound>
                <outbound type="class" confirmed="yes">org.junit.runner.Request</outbound>
                <outbound type="feature" confirmed="yes">org.junit.runner.Request.classWithoutSuiteMethod(java.lang.Class)</outbound>
                <outbound type="feature" confirmed="yes">org.junit.runner.Request.getRunner()</outbound>
                <outbound type="class" confirmed="yes">org.junit.runner.Runner</outbound>
                <inbound type="feature" confirmed="yes">junit.framework.JUnit4TestAdapter.JUnit4TestAdapter(java.lang.Class)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>junit.framework.JUnit4TestAdapter.countTestCases()</name>
                <outbound type="feature" confirmed="yes">junit.framework.JUnit4TestAdapter.fRunner</outbound>
                <outbound type="class" confirmed="yes">org.junit.runner.Runner</outbound>
                <outbound type="feature" confirmed="yes">org.junit.runner.Runner.testCount()</outbound>
            </feature>
            <feature confirmed="yes">
                <name>junit.framework.JUnit4TestAdapter.fCache</name>
                <outbound type="class" confirmed="yes">junit.framework.JUnit4TestAdapterCache</outbound>
                <inbound type="feature" confirmed="yes">junit.framework.JUnit4TestAdapter.JUnit4TestAdapter(java.lang.Class, junit.framework.JUnit4TestAdapterCache)</inbound>
                <inbound type="feature" confirmed="yes">junit.framework.JUnit4TestAdapter.getTests()</inbound>
                <inbound type="feature" confirmed="yes">junit.framework.JUnit4TestAdapter.run(junit.framework.TestResult)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>junit.framework.JUnit4TestAdapter.fNewTestClass</name>
                <outbound type="class" confirmed="no">java.lang.Class</outbound>
                <inbound type="feature" confirmed="yes">junit.framework.JUnit4TestAdapter.JUnit4TestAdapter(java.lang.Class, junit.framework.JUnit4TestAdapterCache)</inbound>
                <inbound type="feature" confirmed="yes">junit.framework.JUnit4TestAdapter.getTestClass()</inbound>
                <inbound type="feature" confirmed="yes">junit.framework.JUnit4TestAdapter.toString()</inbound>
            </feature>
            <feature confirmed="yes">
                <name>junit.framework.JUnit4TestAdapter.fRunner</name>
                <outbound type="class" confirmed="yes">org.junit.runner.Runner</outbound>
                <inbound type="feature" confirmed="yes">junit.framework.JUnit4TestAdapter.JUnit4TestAdapter(java.lang.Class, junit.framework.JUnit4TestAdapterCache)</inbound>
                <inbound type="feature" confirmed="yes">junit.framework.JUnit4TestAdapter.countTestCases()</inbound>
                <inbound type="feature" confirmed="yes">junit.framework.JUnit4TestAdapter.filter(org.junit.runner.manipulation.Filter)</inbound>
                <inbound type="feature" confirmed="yes">junit.framework.JUnit4TestAdapter.getDescription()</inbound>
                <inbound type="feature" confirmed="yes">junit.framework.JUnit4TestAdapter.run(junit.framework.TestResult)</inbound>
                <inbound type="feature" confirmed="yes">junit.framework.JUnit4TestAdapter.sort(org.junit.runner.manipulation.Sorter)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>junit.framework.JUnit4TestAdapter.filter(org.junit.runner.manipulation.Filter)</name>
                <outbound type="class" confirmed="no">java.lang.Object</outbound>
                <outbound type="feature" confirmed="yes">junit.framework.JUnit4TestAdapter.fRunner</outbound>
                <outbound type="class" confirmed="yes">org.junit.runner.Runner</outbound>
                <outbound type="class" confirmed="yes">org.junit.runner.manipulation.Filter</outbound>
                <outbound type="feature" confirmed="yes">org.junit.runner.manipulation.Filter.apply(java.lang.Object)</outbound>
                <outbound type="class" confirmed="yes">org.junit.runner.manipulation.NoTestsRemainException</outbound>
            </feature>
            <feature confirmed="yes">
                <name>junit.framework.JUnit4TestAdapter.getDescription()</name>
                <outbound type="feature" confirmed="yes">junit.framework.JUnit4TestAdapter.fRunner</outbound>
                <outbound type="feature" confirmed="yes">junit.framework.JUnit4TestAdapter.removeIgnored(org.junit.runner.Description)</outbound>
                <outbound type="class" confirmed="yes">org.junit.runner.Description</outbound>
                <outbound type="class" confirmed="yes">org.junit.runner.Runner</outbound>
                <outbound type="feature" confirmed="yes">org.junit.runner.Runner.getDescription()</outbound>
                <inbound type="feature" confirmed="yes">junit.framework.JUnit4TestAdapter.getTests()</inbound>
            </feature>
            <feature confirmed="yes">
                <name>junit.framework.JUnit4TestAdapter.getTestClass()</name>
                <outbound type="class" confirmed="no">java.lang.Class</outbound>
                <outbound type="feature" confirmed="yes">junit.framework.JUnit4TestAdapter.fNewTestClass</outbound>
            </feature>
            <feature confirmed="yes">
                <name>junit.framework.JUnit4TestAdapter.getTests()</name>
                <outbound type="class" confirmed="no">java.util.List</outbound>
                <outbound type="feature" confirmed="yes">junit.framework.JUnit4TestAdapter.fCache</outbound>
                <outbound type="feature" confirmed="yes">junit.framework.JUnit4TestAdapter.getDescription()</outbound>
                <outbound type="class" confirmed="yes">junit.framework.JUnit4TestAdapterCache</outbound>
                <outbound type="feature" confirmed="yes">junit.framework.JUnit4TestAdapterCache.asTestList(org.junit.runner.Description)</outbound>
                <outbound type="class" confirmed="yes">org.junit.runner.Description</outbound>
            </feature>
            <feature confirmed="yes">
                <name>junit.framework.JUnit4TestAdapter.isIgnored(org.junit.runner.Description)</name>
                <outbound type="class" confirmed="no">java.lang.Class</outbound>
                <outbound type="class" confirmed="no">java.lang.annotation.Annotation</outbound>
                <outbound type="class" confirmed="yes">org.junit.Ignore</outbound>
                <outbound type="class" confirmed="yes">org.junit.runner.Description</outbound>
                <outbound type="feature" confirmed="yes">org.junit.runner.Description.getAnnotation(java.lang.Class)</outbound>
                <inbound type="feature" confirmed="yes">junit.framework.JUnit4TestAdapter.removeIgnored(org.junit.runner.Description)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>junit.framework.JUnit4TestAdapter.removeIgnored(org.junit.runner.Description)</name>
                <outbound type="class" confirmed="no">java.lang.Object</outbound>
                <outbound type="class" confirmed="no">java.util.ArrayList</outbound>
                <outbound type="feature" confirmed="no">java.util.ArrayList.iterator()</outbound>
                <outbound type="class" confirmed="no">java.util.Iterator</outbound>
                <outbound type="feature" confirmed="no">java.util.Iterator.hasNext()</outbound>
                <outbound type="feature" confirmed="no">java.util.Iterator.next()</outbound>
                <outbound type="feature" confirmed="yes">junit.framework.JUnit4TestAdapter.isIgnored(org.junit.runner.Description)</outbound>
                <outbound type="class" confirmed="yes">org.junit.runner.Description</outbound>
                <outbound type="feature" confirmed="yes">org.junit.runner.Description.EMPTY</outbound>
                <outbound type="feature" confirmed="yes">org.junit.runner.Description.addChild(org.junit.runner.Description)</outbound>
                <outbound type="feature" confirmed="yes">org.junit.runner.Description.childlessCopy()</outbound>
                <outbound type="feature" confirmed="yes">org.junit.runner.Description.getChildren()</outbound>
                <outbound type="feature" confirmed="yes">org.junit.runner.Description.isEmpty()</outbound>
                <inbound type="feature" confirmed="yes">junit.framework.JUnit4TestAdapter.getDescription()</inbound>
            </feature>
            <feature confirmed="yes">
                <name>junit.framework.JUnit4TestAdapter.run(junit.framework.TestResult)</name>
                <outbound type="feature" confirmed="yes">junit.framework.JUnit4TestAdapter.fCache</outbound>
                <outbound type="feature" confirmed="yes">junit.framework.JUnit4TestAdapter.fRunner</outbound>
                <outbound type="class" confirmed="yes">junit.framework.JUnit4TestAdapterCache</outbound>
                <outbound type="feature" confirmed="yes">junit.framework.JUnit4TestAdapterCache.getNotifier(junit.framework.TestResult, junit.framework.JUnit4TestAdapter)</outbound>
                <outbound type="class" confirmed="yes">junit.framework.TestResult</outbound>
                <outbound type="class" confirmed="yes">org.junit.runner.Runner</outbound>
                <outbound type="feature" confirmed="yes">org.junit.runner.Runner.run(org.junit.runner.notification.RunNotifier)</outbound>
                <outbound type="class" confirmed="yes">org.junit.runner.notification.RunNotifier</outbound>
            </feature>
            <feature confirmed="yes">
                <name>junit.framework.JUnit4TestAdapter.sort(org.junit.runner.manipulation.Sorter)</name>
                <outbound type="class" confirmed="no">java.lang.Object</outbound>
                <outbound type="feature" confirmed="yes">junit.framework.JUnit4TestAdapter.fRunner</outbound>
                <outbound type="class" confirmed="yes">org.junit.runner.Runner</outbound>
                <outbound type="class" confirmed="yes">org.junit.runner.manipulation.Sorter</outbound>
                <outbound type="feature" confirmed="yes">org.junit.runner.manipulation.Sorter.apply(java.lang.Object)</outbound>
            </feature>
            <feature confirmed="yes">
                <name>junit.framework.JUnit4TestAdapter.toString()</name>
                <outbound type="class" confirmed="no">java.lang.Class</outbound>
                <outbound type="feature" confirmed="no">java.lang.Class.getName()</outbound>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="feature" confirmed="yes">junit.framework.JUnit4TestAdapter.fNewTestClass</outbound>
            </feature>
        </class>
        <class confirmed="yes">
            <name>junit.framework.JUnit4TestAdapterCache</name>
            <outbound type="class" confirmed="no">java.util.HashMap</outbound>
            <inbound type="feature" confirmed="yes">junit.framework.JUnit4TestAdapter.JUnit4TestAdapter(java.lang.Class)</inbound>
            <inbound type="feature" confirmed="yes">junit.framework.JUnit4TestAdapter.JUnit4TestAdapter(java.lang.Class, junit.framework.JUnit4TestAdapterCache)</inbound>
            <inbound type="feature" confirmed="yes">junit.framework.JUnit4TestAdapter.fCache</inbound>
            <inbound type="feature" confirmed="yes">junit.framework.JUnit4TestAdapter.getTests()</inbound>
            <inbound type="feature" confirmed="yes">junit.framework.JUnit4TestAdapter.run(junit.framework.TestResult)</inbound>
            <inbound type="feature" confirmed="yes">junit.framework.JUnit4TestAdapterCache$1.JUnit4TestAdapterCache$1(junit.framework.JUnit4TestAdapterCache, junit.framework.TestResult)</inbound>
            <inbound type="feature" confirmed="yes">junit.framework.JUnit4TestAdapterCache$1.testFailure(org.junit.runner.notification.Failure)</inbound>
            <inbound type="feature" confirmed="yes">junit.framework.JUnit4TestAdapterCache$1.testFinished(org.junit.runner.Description)</inbound>
            <inbound type="feature" confirmed="yes">junit.framework.JUnit4TestAdapterCache$1.testStarted(org.junit.runner.Description)</inbound>
            <inbound type="feature" confirmed="yes">junit.framework.JUnit4TestAdapterCache$1.this$0</inbound>
            <feature confirmed="yes">
                <name>junit.framework.JUnit4TestAdapterCache.JUnit4TestAdapterCache()</name>
                <outbound type="feature" confirmed="no">java.util.HashMap.HashMap()</outbound>
                <inbound type="feature" confirmed="yes">junit.framework.JUnit4TestAdapterCache.static {}</inbound>
            </feature>
            <feature confirmed="yes">
                <name>junit.framework.JUnit4TestAdapterCache.asTest(org.junit.runner.Description)</name>
                <outbound type="class" confirmed="no">java.lang.Object</outbound>
                <outbound type="feature" confirmed="no">junit.framework.JUnit4TestAdapterCache.containsKey(java.lang.Object)</outbound>
                <outbound type="feature" confirmed="yes">junit.framework.JUnit4TestAdapterCache.createTest(org.junit.runner.Description)</outbound>
                <outbound type="feature" confirmed="no">junit.framework.JUnit4TestAdapterCache.get(java.lang.Object)</outbound>
                <outbound type="feature" confirmed="no">junit.framework.JUnit4TestAdapterCache.put(java.lang.Object, java.lang.Object)</outbound>
                <outbound type="class" confirmed="yes">junit.framework.Test</outbound>
                <outbound type="class" confirmed="yes">org.junit.runner.Description</outbound>
                <outbound type="feature" confirmed="yes">org.junit.runner.Description.isSuite()</outbound>
                <inbound type="feature" confirmed="yes">junit.framework.JUnit4TestAdapterCache$1.testFailure(org.junit.runner.notification.Failure)</inbound>
                <inbound type="feature" confirmed="yes">junit.framework.JUnit4TestAdapterCache$1.testFinished(org.junit.runner.Description)</inbound>
                <inbound type="feature" confirmed="yes">junit.framework.JUnit4TestAdapterCache$1.testStarted(org.junit.runner.Description)</inbound>
                <inbound type="feature" confirmed="yes">junit.framework.JUnit4TestAdapterCache.asTestList(org.junit.runner.Description)</inbound>
                <inbound type="feature" confirmed="yes">junit.framework.JUnit4TestAdapterCache.createTest(org.junit.runner.Description)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>junit.framework.JUnit4TestAdapterCache.asTestList(org.junit.runner.Description)</name>
                <outbound type="class" confirmed="no">java.lang.Object</outbound>
                <outbound type="class" confirmed="no">java.util.ArrayList</outbound>
                <outbound type="feature" confirmed="no">java.util.ArrayList.ArrayList()</outbound>
                <outbound type="feature" confirmed="no">java.util.ArrayList.iterator()</outbound>
                <outbound type="feature" confirmed="no">java.util.Arrays.asList(java.lang.Object[])</outbound>
                <outbound type="class" confirmed="no">java.util.Iterator</outbound>
                <outbound type="feature" confirmed="no">java.util.Iterator.hasNext()</outbound>
                <outbound type="feature" confirmed="no">java.util.Iterator.next()</outbound>
                <outbound type="class" confirmed="no">java.util.List</outbound>
                <outbound type="feature" confirmed="no">java.util.List.add(java.lang.Object)</outbound>
                <outbound type="feature" confirmed="yes">junit.framework.JUnit4TestAdapterCache.asTest(org.junit.runner.Description)</outbound>
                <outbound type="class" confirmed="yes">junit.framework.Test</outbound>
                <outbound type="class" confirmed="yes">org.junit.runner.Description</outbound>
                <outbound type="feature" confirmed="yes">org.junit.runner.Description.getChildren()</outbound>
                <outbound type="feature" confirmed="yes">org.junit.runner.Description.isTest()</outbound>
                <inbound type="feature" confirmed="yes">junit.framework.JUnit4TestAdapter.getTests()</inbound>
            </feature>
            <feature confirmed="no">
                <name>junit.framework.JUnit4TestAdapterCache.containsKey(java.lang.Object)</name>
                <inbound type="feature" confirmed="yes">junit.framework.JUnit4TestAdapterCache.asTest(org.junit.runner.Description)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>junit.framework.JUnit4TestAdapterCache.createTest(org.junit.runner.Description)</name>
                <outbound type="class" confirmed="no">java.lang.Object</outbound>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="class" confirmed="no">java.util.ArrayList</outbound>
                <outbound type="feature" confirmed="no">java.util.ArrayList.iterator()</outbound>
                <outbound type="class" confirmed="no">java.util.Iterator</outbound>
                <outbound type="feature" confirmed="no">java.util.Iterator.hasNext()</outbound>
                <outbound type="feature" confirmed="no">java.util.Iterator.next()</outbound>
                <outbound type="feature" confirmed="yes">junit.framework.JUnit4TestAdapterCache.asTest(org.junit.runner.Description)</outbound>
                <outbound type="feature" confirmed="yes">junit.framework.JUnit4TestCaseFacade.JUnit4TestCaseFacade(org.junit.runner.Description)</outbound>
                <outbound type="class" confirmed="yes">junit.framework.Test</outbound>
                <outbound type="feature" confirmed="yes">junit.framework.TestSuite.TestSuite(java.lang.String)</outbound>
                <outbound type="feature" confirmed="yes">junit.framework.TestSuite.addTest(junit.framework.Test)</outbound>
                <outbound type="class" confirmed="yes">org.junit.runner.Description</outbound>
                <outbound type="feature" confirmed="yes">org.junit.runner.Description.getChildren()</outbound>
                <outbound type="feature" confirmed="yes">org.junit.runner.Description.getDisplayName()</outbound>
                <outbound type="feature" confirmed="yes">org.junit.runner.Description.isTest()</outbound>
                <inbound type="feature" confirmed="yes">junit.framework.JUnit4TestAdapterCache.asTest(org.junit.runner.Description)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>junit.framework.JUnit4TestAdapterCache.fInstance</name>
                <inbound type="feature" confirmed="yes">junit.framework.JUnit4TestAdapterCache.getDefault()</inbound>
                <inbound type="feature" confirmed="yes">junit.framework.JUnit4TestAdapterCache.static {}</inbound>
            </feature>
            <feature confirmed="no">
                <name>junit.framework.JUnit4TestAdapterCache.get(java.lang.Object)</name>
                <inbound type="feature" confirmed="yes">junit.framework.JUnit4TestAdapterCache.asTest(org.junit.runner.Description)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>junit.framework.JUnit4TestAdapterCache.getDefault()</name>
                <outbound type="feature" confirmed="yes">junit.framework.JUnit4TestAdapterCache.fInstance</outbound>
                <inbound type="feature" confirmed="yes">junit.framework.JUnit4TestAdapter.JUnit4TestAdapter(java.lang.Class)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>junit.framework.JUnit4TestAdapterCache.getNotifier(junit.framework.TestResult, junit.framework.JUnit4TestAdapter)</name>
                <outbound type="class" confirmed="yes">junit.framework.JUnit4TestAdapter</outbound>
                <outbound type="feature" confirmed="yes">junit.framework.JUnit4TestAdapterCache$1.JUnit4TestAdapterCache$1(junit.framework.JUnit4TestAdapterCache, junit.framework.TestResult)</outbound>
                <outbound type="class" confirmed="yes">junit.framework.TestResult</outbound>
                <outbound type="class" confirmed="yes">org.junit.runner.notification.RunListener</outbound>
                <outbound type="class" confirmed="yes">org.junit.runner.notification.RunNotifier</outbound>
                <outbound type="feature" confirmed="yes">org.junit.runner.notification.RunNotifier.RunNotifier()</outbound>
                <outbound type="feature" confirmed="yes">org.junit.runner.notification.RunNotifier.addListener(org.junit.runner.notification.RunListener)</outbound>
                <inbound type="feature" confirmed="yes">junit.framework.JUnit4TestAdapter.run(junit.framework.TestResult)</inbound>
            </feature>
            <feature confirmed="no">
                <name>junit.framework.JUnit4TestAdapterCache.put(java.lang.Object, java.lang.Object)</name>
                <inbound type="feature" confirmed="yes">junit.framework.JUnit4TestAdapterCache.asTest(org.junit.runner.Description)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>junit.framework.JUnit4TestAdapterCache.serialVersionUID</name>
            </feature>
            <feature confirmed="yes">
                <name>junit.framework.JUnit4TestAdapterCache.static {}</name>
                <outbound type="feature" confirmed="yes">junit.framework.JUnit4TestAdapterCache.JUnit4TestAdapterCache()</outbound>
                <outbound type="feature" confirmed="yes">junit.framework.JUnit4TestAdapterCache.fInstance</outbound>
            </feature>
        </class>
        <class confirmed="yes">
            <name>junit.framework.JUnit4TestAdapterCache$1</name>
            <outbound type="class" confirmed="yes">org.junit.runner.notification.RunListener</outbound>
            <feature confirmed="yes">
                <name>junit.framework.JUnit4TestAdapterCache$1.JUnit4TestAdapterCache$1(junit.framework.JUnit4TestAdapterCache, junit.framework.TestResult)</name>
                <outbound type="class" confirmed="yes">junit.framework.JUnit4TestAdapterCache</outbound>
                <outbound type="feature" confirmed="yes">junit.framework.JUnit4TestAdapterCache$1.this$0</outbound>
                <outbound type="feature" confirmed="yes">junit.framework.JUnit4TestAdapterCache$1.val$result</outbound>
                <outbound type="class" confirmed="yes">junit.framework.TestResult</outbound>
                <outbound type="feature" confirmed="yes">org.junit.runner.notification.RunListener.RunListener()</outbound>
                <inbound type="feature" confirmed="yes">junit.framework.JUnit4TestAdapterCache.getNotifier(junit.framework.TestResult, junit.framework.JUnit4TestAdapter)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>junit.framework.JUnit4TestAdapterCache$1.testFailure(org.junit.runner.notification.Failure)</name>
                <outbound type="class" confirmed="no">java.lang.Exception</outbound>
                <outbound type="class" confirmed="no">java.lang.Throwable</outbound>
                <outbound type="class" confirmed="yes">junit.framework.JUnit4TestAdapterCache</outbound>
                <outbound type="feature" confirmed="yes">junit.framework.JUnit4TestAdapterCache$1.this$0</outbound>
                <outbound type="feature" confirmed="yes">junit.framework.JUnit4TestAdapterCache$1.val$result</outbound>
                <outbound type="feature" confirmed="yes">junit.framework.JUnit4TestAdapterCache.asTest(org.junit.runner.Description)</outbound>
                <outbound type="class" confirmed="yes">junit.framework.Test</outbound>
                <outbound type="class" confirmed="yes">junit.framework.TestResult</outbound>
                <outbound type="feature" confirmed="yes">junit.framework.TestResult.addError(junit.framework.Test, java.lang.Throwable)</outbound>
                <outbound type="class" confirmed="yes">org.junit.runner.Description</outbound>
                <outbound type="class" confirmed="yes">org.junit.runner.notification.Failure</outbound>
                <outbound type="feature" confirmed="yes">org.junit.runner.notification.Failure.getDescription()</outbound>
                <outbound type="feature" confirmed="yes">org.junit.runner.notification.Failure.getException()</outbound>
            </feature>
            <feature confirmed="yes">
                <name>junit.framework.JUnit4TestAdapterCache$1.testFinished(org.junit.runner.Description)</name>
                <outbound type="class" confirmed="no">java.lang.Exception</outbound>
                <outbound type="class" confirmed="yes">junit.framework.JUnit4TestAdapterCache</outbound>
                <outbound type="feature" confirmed="yes">junit.framework.JUnit4TestAdapterCache$1.this$0</outbound>
                <outbound type="feature" confirmed="yes">junit.framework.JUnit4TestAdapterCache$1.val$result</outbound>
                <outbound type="feature" confirmed="yes">junit.framework.JUnit4TestAdapterCache.asTest(org.junit.runner.Description)</outbound>
                <outbound type="class" confirmed="yes">junit.framework.Test</outbound>
                <outbound type="class" confirmed="yes">junit.framework.TestResult</outbound>
                <outbound type="feature" confirmed="yes">junit.framework.TestResult.endTest(junit.framework.Test)</outbound>
                <outbound type="class" confirmed="yes">org.junit.runner.Description</outbound>
            </feature>
            <feature confirmed="yes">
                <name>junit.framework.JUnit4TestAdapterCache$1.testStarted(org.junit.runner.Description)</name>
                <outbound type="class" confirmed="no">java.lang.Exception</outbound>
                <outbound type="class" confirmed="yes">junit.framework.JUnit4TestAdapterCache</outbound>
                <outbound type="feature" confirmed="yes">junit.framework.JUnit4TestAdapterCache$1.this$0</outbound>
                <outbound type="feature" confirmed="yes">junit.framework.JUnit4TestAdapterCache$1.val$result</outbound>
                <outbound type="feature" confirmed="yes">junit.framework.JUnit4TestAdapterCache.asTest(org.junit.runner.Description)</outbound>
                <outbound type="class" confirmed="yes">junit.framework.Test</outbound>
                <outbound type="class" confirmed="yes">junit.framework.TestResult</outbound>
                <outbound type="feature" confirmed="yes">junit.framework.TestResult.startTest(junit.framework.Test)</outbound>
                <outbound type="class" confirmed="yes">org.junit.runner.Description</outbound>
            </feature>
            <feature confirmed="yes">
                <name>junit.framework.JUnit4TestAdapterCache$1.this$0</name>
                <outbound type="class" confirmed="yes">junit.framework.JUnit4TestAdapterCache</outbound>
                <inbound type="feature" confirmed="yes">junit.framework.JUnit4TestAdapterCache$1.JUnit4TestAdapterCache$1(junit.framework.JUnit4TestAdapterCache, junit.framework.TestResult)</inbound>
                <inbound type="feature" confirmed="yes">junit.framework.JUnit4TestAdapterCache$1.testFailure(org.junit.runner.notification.Failure)</inbound>
                <inbound type="feature" confirmed="yes">junit.framework.JUnit4TestAdapterCache$1.testFinished(org.junit.runner.Description)</inbound>
                <inbound type="feature" confirmed="yes">junit.framework.JUnit4TestAdapterCache$1.testStarted(org.junit.runner.Description)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>junit.framework.JUnit4TestAdapterCache$1.val$result</name>
                <outbound type="class" confirmed="yes">junit.framework.TestResult</outbound>
                <inbound type="feature" confirmed="yes">junit.framework.JUnit4TestAdapterCache$1.JUnit4TestAdapterCache$1(junit.framework.JUnit4TestAdapterCache, junit.framework.TestResult)</inbound>
                <inbound type="feature" confirmed="yes">junit.framework.JUnit4TestAdapterCache$1.testFailure(org.junit.runner.notification.Failure)</inbound>
                <inbound type="feature" confirmed="yes">junit.framework.JUnit4TestAdapterCache$1.testFinished(org.junit.runner.Description)</inbound>
                <inbound type="feature" confirmed="yes">junit.framework.JUnit4TestAdapterCache$1.testStarted(org.junit.runner.Description)</inbound>
            </feature>
        </class>
        <class confirmed="yes">
            <name>junit.framework.JUnit4TestCaseFacade</name>
            <outbound type="class" confirmed="no">java.lang.Object</outbound>
            <outbound type="class" confirmed="yes">junit.framework.Test</outbound>
            <outbound type="class" confirmed="yes">org.junit.runner.Describable</outbound>
            <feature confirmed="yes">
                <name>junit.framework.JUnit4TestCaseFacade.JUnit4TestCaseFacade(org.junit.runner.Description)</name>
                <outbound type="feature" confirmed="no">java.lang.Object.Object()</outbound>
                <outbound type="feature" confirmed="yes">junit.framework.JUnit4TestCaseFacade.fDescription</outbound>
                <outbound type="class" confirmed="yes">org.junit.runner.Description</outbound>
                <inbound type="feature" confirmed="yes">junit.framework.JUnit4TestAdapterCache.createTest(org.junit.runner.Description)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>junit.framework.JUnit4TestCaseFacade.countTestCases()</name>
            </feature>
            <feature confirmed="yes">
                <name>junit.framework.JUnit4TestCaseFacade.fDescription</name>
                <outbound type="class" confirmed="yes">org.junit.runner.Description</outbound>
                <inbound type="feature" confirmed="yes">junit.framework.JUnit4TestCaseFacade.JUnit4TestCaseFacade(org.junit.runner.Description)</inbound>
                <inbound type="feature" confirmed="yes">junit.framework.JUnit4TestCaseFacade.getDescription()</inbound>
            </feature>
            <feature confirmed="yes">
                <name>junit.framework.JUnit4TestCaseFacade.getDescription()</name>
                <outbound type="feature" confirmed="yes">junit.framework.JUnit4TestCaseFacade.fDescription</outbound>
                <outbound type="class" confirmed="yes">org.junit.runner.Description</outbound>
                <inbound type="feature" confirmed="yes">junit.framework.JUnit4TestCaseFacade.toString()</inbound>
            </feature>
            <feature confirmed="yes">
                <name>junit.framework.JUnit4TestCaseFacade.run(junit.framework.TestResult)</name>
                <outbound type="feature" confirmed="no">java.lang.RuntimeException.RuntimeException(java.lang.String)</outbound>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="class" confirmed="yes">junit.framework.TestResult</outbound>
            </feature>
            <feature confirmed="yes">
                <name>junit.framework.JUnit4TestCaseFacade.toString()</name>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="feature" confirmed="yes">junit.framework.JUnit4TestCaseFacade.getDescription()</outbound>
                <outbound type="class" confirmed="yes">org.junit.runner.Description</outbound>
                <outbound type="feature" confirmed="yes">org.junit.runner.Description.toString()</outbound>
            </feature>
        </class>
        <class confirmed="yes">
            <name>junit.framework.Protectable</name>
            <outbound type="class" confirmed="no">java.lang.Object</outbound>
            <inbound type="class" confirmed="yes">junit.extensions.TestSetup$1</inbound>
            <inbound type="feature" confirmed="yes">junit.extensions.TestSetup.run(junit.framework.TestResult)</inbound>
            <inbound type="class" confirmed="yes">junit.framework.TestResult$1</inbound>
            <inbound type="feature" confirmed="yes">junit.framework.TestResult.run(junit.framework.TestCase)</inbound>
            <inbound type="feature" confirmed="yes">junit.framework.TestResult.runProtected(junit.framework.Test, junit.framework.Protectable)</inbound>
            <feature confirmed="yes">
                <name>junit.framework.Protectable.protect()</name>
                <outbound type="class" confirmed="no">java.lang.Throwable</outbound>
                <inbound type="feature" confirmed="yes">junit.framework.TestResult.runProtected(junit.framework.Test, junit.framework.Protectable)</inbound>
            </feature>
        </class>
        <class confirmed="yes">
            <name>junit.framework.Test</name>
            <outbound type="class" confirmed="no">java.lang.Object</outbound>
            <inbound type="feature" confirmed="yes">junit.extensions.ActiveTestSuite$1.ActiveTestSuite$1(junit.extensions.ActiveTestSuite, junit.framework.Test, junit.framework.TestResult)</inbound>
            <inbound type="feature" confirmed="yes">junit.extensions.ActiveTestSuite$1.run()</inbound>
            <inbound type="feature" confirmed="yes">junit.extensions.ActiveTestSuite$1.val$test</inbound>
            <inbound type="feature" confirmed="yes">junit.extensions.ActiveTestSuite.runTest(junit.framework.Test, junit.framework.TestResult)</inbound>
            <inbound type="feature" confirmed="yes">junit.extensions.RepeatedTest.RepeatedTest(junit.framework.Test, int)</inbound>
            <inbound type="class" confirmed="yes">junit.extensions.TestDecorator</inbound>
            <inbound type="feature" confirmed="yes">junit.extensions.TestDecorator.TestDecorator(junit.framework.Test)</inbound>
            <inbound type="feature" confirmed="yes">junit.extensions.TestDecorator.basicRun(junit.framework.TestResult)</inbound>
            <inbound type="feature" confirmed="yes">junit.extensions.TestDecorator.countTestCases()</inbound>
            <inbound type="feature" confirmed="yes">junit.extensions.TestDecorator.fTest</inbound>
            <inbound type="feature" confirmed="yes">junit.extensions.TestDecorator.getTest()</inbound>
            <inbound type="feature" confirmed="yes">junit.extensions.TestDecorator.toString()</inbound>
            <inbound type="feature" confirmed="yes">junit.extensions.TestSetup.TestSetup(junit.framework.Test)</inbound>
            <inbound type="feature" confirmed="yes">junit.extensions.TestSetup.run(junit.framework.TestResult)</inbound>
            <inbound type="class" confirmed="yes">junit.framework.JUnit4TestAdapter</inbound>
            <inbound type="feature" confirmed="yes">junit.framework.JUnit4TestAdapterCache$1.testFailure(org.junit.runner.notification.Failure)</inbound>
            <inbound type="feature" confirmed="yes">junit.framework.JUnit4TestAdapterCache$1.testFinished(org.junit.runner.Description)</inbound>
            <inbound type="feature" confirmed="yes">junit.framework.JUnit4TestAdapterCache$1.testStarted(org.junit.runner.Description)</inbound>
            <inbound type="feature" confirmed="yes">junit.framework.JUnit4TestAdapterCache.asTest(org.junit.runner.Description)</inbound>
            <inbound type="feature" confirmed="yes">junit.framework.JUnit4TestAdapterCache.asTestList(org.junit.runner.Description)</inbound>
            <inbound type="feature" confirmed="yes">junit.framework.JUnit4TestAdapterCache.createTest(org.junit.runner.Description)</inbound>
            <inbound type="class" confirmed="yes">junit.framework.JUnit4TestCaseFacade</inbound>
            <inbound type="class" confirmed="yes">junit.framework.TestCase</inbound>
            <inbound type="feature" confirmed="yes">junit.framework.TestFailure.TestFailure(junit.framework.Test, java.lang.Throwable)</inbound>
            <inbound type="feature" confirmed="yes">junit.framework.TestFailure.fFailedTest</inbound>
            <inbound type="feature" confirmed="yes">junit.framework.TestFailure.failedTest()</inbound>
            <inbound type="feature" confirmed="yes">junit.framework.TestFailure.toString()</inbound>
            <inbound type="feature" confirmed="yes">junit.framework.TestListener.addError(junit.framework.Test, java.lang.Throwable)</inbound>
            <inbound type="feature" confirmed="yes">junit.framework.TestListener.addFailure(junit.framework.Test, junit.framework.AssertionFailedError)</inbound>
            <inbound type="feature" confirmed="yes">junit.framework.TestListener.endTest(junit.framework.Test)</inbound>
            <inbound type="feature" confirmed="yes">junit.framework.TestListener.startTest(junit.framework.Test)</inbound>
            <inbound type="feature" confirmed="yes">junit.framework.TestResult.addError(junit.framework.Test, java.lang.Throwable)</inbound>
            <inbound type="feature" confirmed="yes">junit.framework.TestResult.addFailure(junit.framework.Test, junit.framework.AssertionFailedError)</inbound>
            <inbound type="feature" confirmed="yes">junit.framework.TestResult.endTest(junit.framework.Test)</inbound>
            <inbound type="feature" confirmed="yes">junit.framework.TestResult.run(junit.framework.TestCase)</inbound>
            <inbound type="feature" confirmed="yes">junit.framework.TestResult.runProtected(junit.framework.Test, junit.framework.Protectable)</inbound>
            <inbound type="feature" confirmed="yes">junit.framework.TestResult.startTest(junit.framework.Test)</inbound>
            <inbound type="class" confirmed="yes">junit.framework.TestSuite</inbound>
            <inbound type="feature" confirmed="yes">junit.framework.TestSuite.TestSuite(java.lang.Class[])</inbound>
            <inbound type="feature" confirmed="yes">junit.framework.TestSuite.addTest(junit.framework.Test)</inbound>
            <inbound type="feature" confirmed="yes">junit.framework.TestSuite.addTestMethod(java.lang.reflect.Method, java.util.List, java.lang.Class)</inbound>
            <inbound type="feature" confirmed="yes">junit.framework.TestSuite.addTestSuite(java.lang.Class)</inbound>
            <inbound type="feature" confirmed="yes">junit.framework.TestSuite.addTestsFromTestCase(java.lang.Class)</inbound>
            <inbound type="feature" confirmed="yes">junit.framework.TestSuite.countTestCases()</inbound>
            <inbound type="feature" confirmed="yes">junit.framework.TestSuite.createTest(java.lang.Class, java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">junit.framework.TestSuite.run(junit.framework.TestResult)</inbound>
            <inbound type="feature" confirmed="yes">junit.framework.TestSuite.runTest(junit.framework.Test, junit.framework.TestResult)</inbound>
            <inbound type="feature" confirmed="yes">junit.framework.TestSuite.testAt(int)</inbound>
            <inbound type="feature" confirmed="yes">junit.framework.TestSuite.testCaseForClass(java.lang.Class)</inbound>
            <inbound type="feature" confirmed="yes">junit.framework.TestSuite.warning(java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">junit.runner.BaseTestRunner.addError(junit.framework.Test, java.lang.Throwable)</inbound>
            <inbound type="feature" confirmed="yes">junit.runner.BaseTestRunner.addFailure(junit.framework.Test, junit.framework.AssertionFailedError)</inbound>
            <inbound type="feature" confirmed="yes">junit.runner.BaseTestRunner.endTest(junit.framework.Test)</inbound>
            <inbound type="feature" confirmed="yes">junit.runner.BaseTestRunner.getTest(java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">junit.runner.BaseTestRunner.startTest(junit.framework.Test)</inbound>
            <inbound type="feature" confirmed="yes">junit.runner.BaseTestRunner.testFailed(int, junit.framework.Test, java.lang.Throwable)</inbound>
            <inbound type="feature" confirmed="yes">junit.textui.ResultPrinter.addError(junit.framework.Test, java.lang.Throwable)</inbound>
            <inbound type="feature" confirmed="yes">junit.textui.ResultPrinter.addFailure(junit.framework.Test, junit.framework.AssertionFailedError)</inbound>
            <inbound type="feature" confirmed="yes">junit.textui.ResultPrinter.endTest(junit.framework.Test)</inbound>
            <inbound type="feature" confirmed="yes">junit.textui.ResultPrinter.printDefectHeader(junit.framework.TestFailure, int)</inbound>
            <inbound type="feature" confirmed="yes">junit.textui.ResultPrinter.startTest(junit.framework.Test)</inbound>
            <inbound type="feature" confirmed="yes">junit.textui.TestRunner.doRun(junit.framework.Test)</inbound>
            <inbound type="feature" confirmed="yes">junit.textui.TestRunner.doRun(junit.framework.Test, boolean)</inbound>
            <inbound type="feature" confirmed="yes">junit.textui.TestRunner.run(java.lang.Class)</inbound>
            <inbound type="feature" confirmed="yes">junit.textui.TestRunner.run(junit.framework.Test)</inbound>
            <inbound type="feature" confirmed="yes">junit.textui.TestRunner.runAndWait(junit.framework.Test)</inbound>
            <inbound type="feature" confirmed="yes">junit.textui.TestRunner.runSingleMethod(java.lang.String, java.lang.String, boolean)</inbound>
            <inbound type="feature" confirmed="yes">junit.textui.TestRunner.start(java.lang.String[])</inbound>
            <inbound type="feature" confirmed="yes">junit.textui.TestRunner.testFailed(int, junit.framework.Test, java.lang.Throwable)</inbound>
            <inbound type="feature" confirmed="yes">org.junit.experimental.max.MaxCore.buildRunner(org.junit.runner.Description)</inbound>
            <inbound type="feature" confirmed="yes">org.junit.internal.runners.JUnit38ClassRunner$OldTestClassAdaptingListener.addError(junit.framework.Test, java.lang.Throwable)</inbound>
            <inbound type="feature" confirmed="yes">org.junit.internal.runners.JUnit38ClassRunner$OldTestClassAdaptingListener.addFailure(junit.framework.Test, junit.framework.AssertionFailedError)</inbound>
            <inbound type="feature" confirmed="yes">org.junit.internal.runners.JUnit38ClassRunner$OldTestClassAdaptingListener.asDescription(junit.framework.Test)</inbound>
            <inbound type="feature" confirmed="yes">org.junit.internal.runners.JUnit38ClassRunner$OldTestClassAdaptingListener.endTest(junit.framework.Test)</inbound>
            <inbound type="feature" confirmed="yes">org.junit.internal.runners.JUnit38ClassRunner$OldTestClassAdaptingListener.getEffectiveClass(junit.framework.Test)</inbound>
            <inbound type="feature" confirmed="yes">org.junit.internal.runners.JUnit38ClassRunner$OldTestClassAdaptingListener.getName(junit.framework.Test)</inbound>
            <inbound type="feature" confirmed="yes">org.junit.internal.runners.JUnit38ClassRunner$OldTestClassAdaptingListener.startTest(junit.framework.Test)</inbound>
            <inbound type="feature" confirmed="yes">org.junit.internal.runners.JUnit38ClassRunner.JUnit38ClassRunner(java.lang.Class)</inbound>
            <inbound type="feature" confirmed="yes">org.junit.internal.runners.JUnit38ClassRunner.JUnit38ClassRunner(junit.framework.Test)</inbound>
            <inbound type="feature" confirmed="yes">org.junit.internal.runners.JUnit38ClassRunner.createSuiteDescription(junit.framework.TestSuite)</inbound>
            <inbound type="feature" confirmed="yes">org.junit.internal.runners.JUnit38ClassRunner.fTest</inbound>
            <inbound type="feature" confirmed="yes">org.junit.internal.runners.JUnit38ClassRunner.filter(org.junit.runner.manipulation.Filter)</inbound>
            <inbound type="feature" confirmed="yes">org.junit.internal.runners.JUnit38ClassRunner.getDescription()</inbound>
            <inbound type="feature" confirmed="yes">org.junit.internal.runners.JUnit38ClassRunner.getTest()</inbound>
            <inbound type="feature" confirmed="yes">org.junit.internal.runners.JUnit38ClassRunner.makeDescription(junit.framework.Test)</inbound>
            <inbound type="feature" confirmed="yes">org.junit.internal.runners.JUnit38ClassRunner.run(org.junit.runner.notification.RunNotifier)</inbound>
            <inbound type="feature" confirmed="yes">org.junit.internal.runners.JUnit38ClassRunner.setTest(junit.framework.Test)</inbound>
            <inbound type="feature" confirmed="yes">org.junit.internal.runners.JUnit38ClassRunner.sort(org.junit.runner.manipulation.Sorter)</inbound>
            <inbound type="feature" confirmed="yes">org.junit.internal.runners.SuiteMethod.SuiteMethod(java.lang.Class)</inbound>
            <inbound type="feature" confirmed="yes">org.junit.internal.runners.SuiteMethod.testFromSuiteMethod(java.lang.Class)</inbound>
            <inbound type="feature" confirmed="yes">org.junit.runner.JUnitCore.run(junit.framework.Test)</inbound>
            <feature confirmed="yes">
                <name>junit.framework.Test.countTestCases()</name>
                <inbound type="feature" confirmed="yes">junit.extensions.TestDecorator.countTestCases()</inbound>
                <inbound type="feature" confirmed="yes">junit.framework.TestResult.startTest(junit.framework.Test)</inbound>
                <inbound type="feature" confirmed="yes">junit.framework.TestSuite.countTestCases()</inbound>
            </feature>
            <feature confirmed="yes">
                <name>junit.framework.Test.run(junit.framework.TestResult)</name>
                <outbound type="class" confirmed="yes">junit.framework.TestResult</outbound>
                <inbound type="feature" confirmed="yes">junit.extensions.ActiveTestSuite$1.run()</inbound>
                <inbound type="feature" confirmed="yes">junit.extensions.TestDecorator.basicRun(junit.framework.TestResult)</inbound>
                <inbound type="feature" confirmed="yes">junit.framework.TestSuite.runTest(junit.framework.Test, junit.framework.TestResult)</inbound>
                <inbound type="feature" confirmed="yes">junit.textui.TestRunner.doRun(junit.framework.Test, boolean)</inbound>
                <inbound type="feature" confirmed="yes">org.junit.internal.runners.JUnit38ClassRunner.run(org.junit.runner.notification.RunNotifier)</inbound>
            </feature>
        </class>
        <class confirmed="yes">
            <name>junit.framework.TestCase</name>
            <outbound type="class" confirmed="yes">junit.framework.Assert</outbound>
            <outbound type="class" confirmed="yes">junit.framework.Test</outbound>
            <inbound type="feature" confirmed="yes">junit.framework.TestResult$1.TestResult$1(junit.framework.TestResult, junit.framework.TestCase)</inbound>
            <inbound type="feature" confirmed="yes">junit.framework.TestResult$1.protect()</inbound>
            <inbound type="feature" confirmed="yes">junit.framework.TestResult$1.val$test</inbound>
            <inbound type="feature" confirmed="yes">junit.framework.TestResult.run(junit.framework.TestCase)</inbound>
            <inbound type="class" confirmed="yes">junit.framework.TestSuite$1</inbound>
            <inbound type="feature" confirmed="yes">junit.framework.TestSuite.createTest(java.lang.Class, java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">junit.framework.TestSuite.testCaseForClass(java.lang.Class)</inbound>
            <inbound type="feature" confirmed="yes">junit.textui.TestRunner.runSingleMethod(java.lang.String, java.lang.String, boolean)</inbound>
            <inbound type="feature" confirmed="yes">org.junit.internal.builders.JUnit3Builder.isPre4Test(java.lang.Class)</inbound>
            <inbound type="feature" confirmed="yes">org.junit.internal.runners.JUnit38ClassRunner$OldTestClassAdaptingListener.getName(junit.framework.Test)</inbound>
            <inbound type="feature" confirmed="yes">org.junit.internal.runners.JUnit38ClassRunner.JUnit38ClassRunner(java.lang.Class)</inbound>
            <inbound type="feature" confirmed="yes">org.junit.internal.runners.JUnit38ClassRunner.makeDescription(junit.framework.Test)</inbound>
            <feature confirmed="yes">
                <name>junit.framework.TestCase.TestCase()</name>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="feature" confirmed="yes">junit.framework.Assert.Assert()</outbound>
                <outbound type="feature" confirmed="yes">junit.framework.TestCase.fName</outbound>
            </feature>
            <feature confirmed="yes">
                <name>junit.framework.TestCase.TestCase(java.lang.String)</name>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="feature" confirmed="yes">junit.framework.Assert.Assert()</outbound>
                <outbound type="feature" confirmed="yes">junit.framework.TestCase.fName</outbound>
                <inbound type="feature" confirmed="yes">junit.framework.TestSuite$1.TestSuite$1(java.lang.String, java.lang.String)</inbound>
            </feature>
            <feature confirmed="no">
                <name>junit.framework.TestCase.assertNotNull(java.lang.String, java.lang.Object)</name>
                <inbound type="feature" confirmed="yes">junit.framework.TestCase.runTest()</inbound>
            </feature>
            <feature confirmed="yes">
                <name>junit.framework.TestCase.countTestCases()</name>
            </feature>
            <feature confirmed="yes">
                <name>junit.framework.TestCase.createResult()</name>
                <outbound type="class" confirmed="yes">junit.framework.TestResult</outbound>
                <outbound type="feature" confirmed="yes">junit.framework.TestResult.TestResult()</outbound>
                <inbound type="feature" confirmed="yes">junit.framework.TestCase.run()</inbound>
            </feature>
            <feature confirmed="yes">
                <name>junit.framework.TestCase.fName</name>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <inbound type="feature" confirmed="yes">junit.framework.TestCase.TestCase()</inbound>
                <inbound type="feature" confirmed="yes">junit.framework.TestCase.TestCase(java.lang.String)</inbound>
                <inbound type="feature" confirmed="yes">junit.framework.TestCase.getName()</inbound>
                <inbound type="feature" confirmed="yes">junit.framework.TestCase.runTest()</inbound>
                <inbound type="feature" confirmed="yes">junit.framework.TestCase.setName(java.lang.String)</inbound>
            </feature>
            <feature confirmed="no">
                <name>junit.framework.TestCase.fail(java.lang.String)</name>
                <inbound type="feature" confirmed="yes">junit.framework.TestCase.runTest()</inbound>
            </feature>
            <feature confirmed="yes">
                <name>junit.framework.TestCase.getName()</name>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="feature" confirmed="yes">junit.framework.TestCase.fName</outbound>
                <inbound type="feature" confirmed="yes">junit.framework.TestCase.toString()</inbound>
                <inbound type="feature" confirmed="yes">org.junit.internal.runners.JUnit38ClassRunner$OldTestClassAdaptingListener.getName(junit.framework.Test)</inbound>
                <inbound type="feature" confirmed="yes">org.junit.internal.runners.JUnit38ClassRunner.makeDescription(junit.framework.Test)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>junit.framework.TestCase.run()</name>
                <outbound type="feature" confirmed="yes">junit.framework.TestCase.createResult()</outbound>
                <outbound type="feature" confirmed="yes">junit.framework.TestCase.run(junit.framework.TestResult)</outbound>
                <outbound type="class" confirmed="yes">junit.framework.TestResult</outbound>
            </feature>
            <feature confirmed="yes">
                <name>junit.framework.TestCase.run(junit.framework.TestResult)</name>
                <outbound type="class" confirmed="yes">junit.framework.TestResult</outbound>
                <outbound type="feature" confirmed="yes">junit.framework.TestResult.run(junit.framework.TestCase)</outbound>
                <inbound type="feature" confirmed="yes">junit.framework.TestCase.run()</inbound>
            </feature>
            <feature confirmed="yes">
                <name>junit.framework.TestCase.runBare()</name>
                <outbound type="class" confirmed="no">java.lang.Throwable</outbound>
                <outbound type="feature" confirmed="yes">junit.framework.TestCase.runTest()</outbound>
                <outbound type="feature" confirmed="yes">junit.framework.TestCase.setUp()</outbound>
                <outbound type="feature" confirmed="yes">junit.framework.TestCase.tearDown()</outbound>
                <inbound type="feature" confirmed="yes">junit.framework.TestResult$1.protect()</inbound>
            </feature>
            <feature confirmed="yes">
                <name>junit.framework.TestCase.runTest()</name>
                <outbound type="class" confirmed="no">java.lang.Class</outbound>
                <outbound type="feature" confirmed="no">java.lang.Class.getMethod(java.lang.String, java.lang.Class[])</outbound>
                <outbound type="class" confirmed="no">java.lang.Class[]</outbound>
                <outbound type="class" confirmed="no">java.lang.IllegalAccessException</outbound>
                <outbound type="feature" confirmed="no">java.lang.IllegalAccessException.fillInStackTrace()</outbound>
                <outbound type="class" confirmed="no">java.lang.NoSuchMethodException</outbound>
                <outbound type="class" confirmed="no">java.lang.Object</outbound>
                <outbound type="feature" confirmed="no">java.lang.Object.getClass()</outbound>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="class" confirmed="no">java.lang.StringBuilder</outbound>
                <outbound type="feature" confirmed="no">java.lang.StringBuilder.StringBuilder()</outbound>
                <outbound type="feature" confirmed="no">java.lang.StringBuilder.append(java.lang.String)</outbound>
                <outbound type="feature" confirmed="no">java.lang.StringBuilder.toString()</outbound>
                <outbound type="class" confirmed="no">java.lang.Throwable</outbound>
                <outbound type="class" confirmed="no">java.lang.reflect.InvocationTargetException</outbound>
                <outbound type="feature" confirmed="no">java.lang.reflect.InvocationTargetException.fillInStackTrace()</outbound>
                <outbound type="feature" confirmed="no">java.lang.reflect.InvocationTargetException.getTargetException()</outbound>
                <outbound type="class" confirmed="no">java.lang.reflect.Method</outbound>
                <outbound type="feature" confirmed="no">java.lang.reflect.Method.getModifiers()</outbound>
                <outbound type="feature" confirmed="no">java.lang.reflect.Method.invoke(java.lang.Object, java.lang.Object[])</outbound>
                <outbound type="feature" confirmed="no">java.lang.reflect.Modifier.isPublic(int)</outbound>
                <outbound type="feature" confirmed="no">junit.framework.TestCase.assertNotNull(java.lang.String, java.lang.Object)</outbound>
                <outbound type="feature" confirmed="yes">junit.framework.TestCase.fName</outbound>
                <outbound type="feature" confirmed="no">junit.framework.TestCase.fail(java.lang.String)</outbound>
                <inbound type="feature" confirmed="yes">junit.framework.TestCase.runBare()</inbound>
            </feature>
            <feature confirmed="yes">
                <name>junit.framework.TestCase.setName(java.lang.String)</name>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="feature" confirmed="yes">junit.framework.TestCase.fName</outbound>
                <inbound type="feature" confirmed="yes">junit.framework.TestSuite.createTest(java.lang.Class, java.lang.String)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>junit.framework.TestCase.setUp()</name>
                <outbound type="class" confirmed="no">java.lang.Exception</outbound>
                <inbound type="feature" confirmed="yes">junit.framework.TestCase.runBare()</inbound>
            </feature>
            <feature confirmed="yes">
                <name>junit.framework.TestCase.tearDown()</name>
                <outbound type="class" confirmed="no">java.lang.Exception</outbound>
                <inbound type="feature" confirmed="yes">junit.framework.TestCase.runBare()</inbound>
            </feature>
            <feature confirmed="yes">
                <name>junit.framework.TestCase.toString()</name>
                <outbound type="class" confirmed="no">java.lang.Class</outbound>
                <outbound type="feature" confirmed="no">java.lang.Class.getName()</outbound>
                <outbound type="feature" confirmed="no">java.lang.Object.getClass()</outbound>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="class" confirmed="no">java.lang.StringBuilder</outbound>
                <outbound type="feature" confirmed="no">java.lang.StringBuilder.StringBuilder()</outbound>
                <outbound type="feature" confirmed="no">java.lang.StringBuilder.append(java.lang.String)</outbound>
                <outbound type="feature" confirmed="no">java.lang.StringBuilder.toString()</outbound>
                <outbound type="feature" confirmed="yes">junit.framework.TestCase.getName()</outbound>
            </feature>
        </class>
        <class confirmed="yes">
            <name>junit.framework.TestFailure</name>
            <outbound type="class" confirmed="no">java.lang.Object</outbound>
            <inbound type="feature" confirmed="yes">junit.textui.ResultPrinter.printDefect(junit.framework.TestFailure, int)</inbound>
            <inbound type="feature" confirmed="yes">junit.textui.ResultPrinter.printDefectHeader(junit.framework.TestFailure, int)</inbound>
            <inbound type="feature" confirmed="yes">junit.textui.ResultPrinter.printDefectTrace(junit.framework.TestFailure)</inbound>
            <inbound type="feature" confirmed="yes">junit.textui.ResultPrinter.printDefects(java.util.Enumeration, int, java.lang.String)</inbound>
            <feature confirmed="yes">
                <name>junit.framework.TestFailure.TestFailure(junit.framework.Test, java.lang.Throwable)</name>
                <outbound type="feature" confirmed="no">java.lang.Object.Object()</outbound>
                <outbound type="class" confirmed="no">java.lang.Throwable</outbound>
                <outbound type="class" confirmed="yes">junit.framework.Test</outbound>
                <outbound type="feature" confirmed="yes">junit.framework.TestFailure.fFailedTest</outbound>
                <outbound type="feature" confirmed="yes">junit.framework.TestFailure.fThrownException</outbound>
                <inbound type="feature" confirmed="yes">junit.framework.TestResult.addError(junit.framework.Test, java.lang.Throwable)</inbound>
                <inbound type="feature" confirmed="yes">junit.framework.TestResult.addFailure(junit.framework.Test, junit.framework.AssertionFailedError)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>junit.framework.TestFailure.exceptionMessage()</name>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="class" confirmed="no">java.lang.Throwable</outbound>
                <outbound type="feature" confirmed="no">java.lang.Throwable.getMessage()</outbound>
                <outbound type="feature" confirmed="yes">junit.framework.TestFailure.thrownException()</outbound>
            </feature>
            <feature confirmed="yes">
                <name>junit.framework.TestFailure.fFailedTest</name>
                <outbound type="class" confirmed="yes">junit.framework.Test</outbound>
                <inbound type="feature" confirmed="yes">junit.framework.TestFailure.TestFailure(junit.framework.Test, java.lang.Throwable)</inbound>
                <inbound type="feature" confirmed="yes">junit.framework.TestFailure.failedTest()</inbound>
                <inbound type="feature" confirmed="yes">junit.framework.TestFailure.toString()</inbound>
            </feature>
            <feature confirmed="yes">
                <name>junit.framework.TestFailure.fThrownException</name>
                <outbound type="class" confirmed="no">java.lang.Throwable</outbound>
                <inbound type="feature" confirmed="yes">junit.framework.TestFailure.TestFailure(junit.framework.Test, java.lang.Throwable)</inbound>
                <inbound type="feature" confirmed="yes">junit.framework.TestFailure.thrownException()</inbound>
                <inbound type="feature" confirmed="yes">junit.framework.TestFailure.toString()</inbound>
            </feature>
            <feature confirmed="yes">
                <name>junit.framework.TestFailure.failedTest()</name>
                <outbound type="class" confirmed="yes">junit.framework.Test</outbound>
                <outbound type="feature" confirmed="yes">junit.framework.TestFailure.fFailedTest</outbound>
                <inbound type="feature" confirmed="yes">junit.textui.ResultPrinter.printDefectHeader(junit.framework.TestFailure, int)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>junit.framework.TestFailure.isFailure()</name>
                <outbound type="class" confirmed="no">java.lang.Throwable</outbound>
                <outbound type="class" confirmed="yes">junit.framework.AssertionFailedError</outbound>
                <outbound type="feature" confirmed="yes">junit.framework.TestFailure.thrownException()</outbound>
            </feature>
            <feature confirmed="yes">
                <name>junit.framework.TestFailure.thrownException()</name>
                <outbound type="class" confirmed="no">java.lang.Throwable</outbound>
                <outbound type="feature" confirmed="yes">junit.framework.TestFailure.fThrownException</outbound>
                <inbound type="feature" confirmed="yes">junit.framework.TestFailure.exceptionMessage()</inbound>
                <inbound type="feature" confirmed="yes">junit.framework.TestFailure.isFailure()</inbound>
                <inbound type="feature" confirmed="yes">junit.framework.TestFailure.trace()</inbound>
            </feature>
            <feature confirmed="yes">
                <name>junit.framework.TestFailure.toString()</name>
                <outbound type="class" confirmed="no">java.lang.Object</outbound>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="class" confirmed="no">java.lang.StringBuffer</outbound>
                <outbound type="feature" confirmed="no">java.lang.StringBuffer.StringBuffer()</outbound>
                <outbound type="feature" confirmed="no">java.lang.StringBuffer.append(java.lang.String)</outbound>
                <outbound type="feature" confirmed="no">java.lang.StringBuffer.toString()</outbound>
                <outbound type="class" confirmed="no">java.lang.StringBuilder</outbound>
                <outbound type="feature" confirmed="no">java.lang.StringBuilder.StringBuilder()</outbound>
                <outbound type="feature" confirmed="no">java.lang.StringBuilder.append(java.lang.Object)</outbound>
                <outbound type="feature" confirmed="no">java.lang.StringBuilder.append(java.lang.String)</outbound>
                <outbound type="feature" confirmed="no">java.lang.StringBuilder.toString()</outbound>
                <outbound type="class" confirmed="no">java.lang.Throwable</outbound>
                <outbound type="feature" confirmed="no">java.lang.Throwable.getMessage()</outbound>
                <outbound type="class" confirmed="yes">junit.framework.Test</outbound>
                <outbound type="feature" confirmed="yes">junit.framework.TestFailure.fFailedTest</outbound>
                <outbound type="feature" confirmed="yes">junit.framework.TestFailure.fThrownException</outbound>
            </feature>
            <feature confirmed="yes">
                <name>junit.framework.TestFailure.trace()</name>
                <outbound type="class" confirmed="no">java.io.PrintWriter</outbound>
                <outbound type="feature" confirmed="no">java.io.PrintWriter.PrintWriter(java.io.Writer)</outbound>
                <outbound type="feature" confirmed="no">java.io.StringWriter.StringWriter()</outbound>
                <outbound type="feature" confirmed="no">java.io.StringWriter.getBuffer()</outbound>
                <outbound type="class" confirmed="no">java.io.Writer</outbound>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="class" confirmed="no">java.lang.StringBuffer</outbound>
                <outbound type="feature" confirmed="no">java.lang.StringBuffer.toString()</outbound>
                <outbound type="class" confirmed="no">java.lang.Throwable</outbound>
                <outbound type="feature" confirmed="no">java.lang.Throwable.printStackTrace(java.io.PrintWriter)</outbound>
                <outbound type="feature" confirmed="yes">junit.framework.TestFailure.thrownException()</outbound>
                <inbound type="feature" confirmed="yes">junit.textui.ResultPrinter.printDefectTrace(junit.framework.TestFailure)</inbound>
            </feature>
        </class>
        <class confirmed="yes">
            <name>junit.framework.TestListener</name>
            <outbound type="class" confirmed="no">java.lang.Object</outbound>
            <inbound type="feature" confirmed="yes">junit.framework.TestResult.addError(junit.framework.Test, java.lang.Throwable)</inbound>
            <inbound type="feature" confirmed="yes">junit.framework.TestResult.addFailure(junit.framework.Test, junit.framework.AssertionFailedError)</inbound>
            <inbound type="feature" confirmed="yes">junit.framework.TestResult.addListener(junit.framework.TestListener)</inbound>
            <inbound type="feature" confirmed="yes">junit.framework.TestResult.endTest(junit.framework.Test)</inbound>
            <inbound type="feature" confirmed="yes">junit.framework.TestResult.removeListener(junit.framework.TestListener)</inbound>
            <inbound type="feature" confirmed="yes">junit.framework.TestResult.startTest(junit.framework.Test)</inbound>
            <inbound type="class" confirmed="yes">junit.runner.BaseTestRunner</inbound>
            <inbound type="class" confirmed="yes">junit.textui.ResultPrinter</inbound>
            <inbound type="feature" confirmed="yes">junit.textui.TestRunner.doRun(junit.framework.Test, boolean)</inbound>
            <inbound type="class" confirmed="yes">org.junit.internal.runners.JUnit38ClassRunner$OldTestClassAdaptingListener</inbound>
            <inbound type="feature" confirmed="yes">org.junit.internal.runners.JUnit38ClassRunner.createAdaptingListener(org.junit.runner.notification.RunNotifier)</inbound>
            <inbound type="feature" confirmed="yes">org.junit.internal.runners.JUnit38ClassRunner.run(org.junit.runner.notification.RunNotifier)</inbound>
            <feature confirmed="yes">
                <name>junit.framework.TestListener.addError(junit.framework.Test, java.lang.Throwable)</name>
                <outbound type="class" confirmed="no">java.lang.Throwable</outbound>
                <outbound type="class" confirmed="yes">junit.framework.Test</outbound>
                <inbound type="feature" confirmed="yes">junit.framework.TestResult.addError(junit.framework.Test, java.lang.Throwable)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>junit.framework.TestListener.addFailure(junit.framework.Test, junit.framework.AssertionFailedError)</name>
                <outbound type="class" confirmed="yes">junit.framework.AssertionFailedError</outbound>
                <outbound type="class" confirmed="yes">junit.framework.Test</outbound>
                <inbound type="feature" confirmed="yes">junit.framework.TestResult.addFailure(junit.framework.Test, junit.framework.AssertionFailedError)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>junit.framework.TestListener.endTest(junit.framework.Test)</name>
                <outbound type="class" confirmed="yes">junit.framework.Test</outbound>
                <inbound type="feature" confirmed="yes">junit.framework.TestResult.endTest(junit.framework.Test)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>junit.framework.TestListener.startTest(junit.framework.Test)</name>
                <outbound type="class" confirmed="yes">junit.framework.Test</outbound>
                <inbound type="feature" confirmed="yes">junit.framework.TestResult.startTest(junit.framework.Test)</inbound>
            </feature>
        </class>
        <class confirmed="yes">
            <name>junit.framework.TestResult</name>
            <outbound type="class" confirmed="no">java.lang.Object</outbound>
            <inbound type="feature" confirmed="yes">junit.extensions.ActiveTestSuite$1.ActiveTestSuite$1(junit.extensions.ActiveTestSuite, junit.framework.Test, junit.framework.TestResult)</inbound>
            <inbound type="feature" confirmed="yes">junit.extensions.ActiveTestSuite$1.run()</inbound>
            <inbound type="feature" confirmed="yes">junit.extensions.ActiveTestSuite$1.val$result</inbound>
            <inbound type="feature" confirmed="yes">junit.extensions.ActiveTestSuite.run(junit.framework.TestResult)</inbound>
            <inbound type="feature" confirmed="yes">junit.extensions.ActiveTestSuite.runTest(junit.framework.Test, junit.framework.TestResult)</inbound>
            <inbound type="feature" confirmed="yes">junit.extensions.RepeatedTest.run(junit.framework.TestResult)</inbound>
            <inbound type="feature" confirmed="yes">junit.extensions.TestDecorator.basicRun(junit.framework.TestResult)</inbound>
            <inbound type="feature" confirmed="yes">junit.extensions.TestDecorator.run(junit.framework.TestResult)</inbound>
            <inbound type="feature" confirmed="yes">junit.extensions.TestSetup$1.TestSetup$1(junit.extensions.TestSetup, junit.framework.TestResult)</inbound>
            <inbound type="feature" confirmed="yes">junit.extensions.TestSetup$1.protect()</inbound>
            <inbound type="feature" confirmed="yes">junit.extensions.TestSetup$1.val$result</inbound>
            <inbound type="feature" confirmed="yes">junit.extensions.TestSetup.run(junit.framework.TestResult)</inbound>
            <inbound type="feature" confirmed="yes">junit.framework.JUnit4TestAdapter.run(junit.framework.TestResult)</inbound>
            <inbound type="feature" confirmed="yes">junit.framework.JUnit4TestAdapterCache$1.JUnit4TestAdapterCache$1(junit.framework.JUnit4TestAdapterCache, junit.framework.TestResult)</inbound>
            <inbound type="feature" confirmed="yes">junit.framework.JUnit4TestAdapterCache$1.testFailure(org.junit.runner.notification.Failure)</inbound>
            <inbound type="feature" confirmed="yes">junit.framework.JUnit4TestAdapterCache$1.testFinished(org.junit.runner.Description)</inbound>
            <inbound type="feature" confirmed="yes">junit.framework.JUnit4TestAdapterCache$1.testStarted(org.junit.runner.Description)</inbound>
            <inbound type="feature" confirmed="yes">junit.framework.JUnit4TestAdapterCache$1.val$result</inbound>
            <inbound type="feature" confirmed="yes">junit.framework.JUnit4TestAdapterCache.getNotifier(junit.framework.TestResult, junit.framework.JUnit4TestAdapter)</inbound>
            <inbound type="feature" confirmed="yes">junit.framework.JUnit4TestCaseFacade.run(junit.framework.TestResult)</inbound>
            <inbound type="feature" confirmed="yes">junit.framework.Test.run(junit.framework.TestResult)</inbound>
            <inbound type="feature" confirmed="yes">junit.framework.TestCase.createResult()</inbound>
            <inbound type="feature" confirmed="yes">junit.framework.TestCase.run()</inbound>
            <inbound type="feature" confirmed="yes">junit.framework.TestCase.run(junit.framework.TestResult)</inbound>
            <inbound type="feature" confirmed="yes">junit.framework.TestResult$1.TestResult$1(junit.framework.TestResult, junit.framework.TestCase)</inbound>
            <inbound type="feature" confirmed="yes">junit.framework.TestResult$1.this$0</inbound>
            <inbound type="feature" confirmed="yes">junit.framework.TestSuite.run(junit.framework.TestResult)</inbound>
            <inbound type="feature" confirmed="yes">junit.framework.TestSuite.runTest(junit.framework.Test, junit.framework.TestResult)</inbound>
            <inbound type="feature" confirmed="yes">junit.textui.ResultPrinter.print(junit.framework.TestResult, long)</inbound>
            <inbound type="feature" confirmed="yes">junit.textui.ResultPrinter.printErrors(junit.framework.TestResult)</inbound>
            <inbound type="feature" confirmed="yes">junit.textui.ResultPrinter.printFailures(junit.framework.TestResult)</inbound>
            <inbound type="feature" confirmed="yes">junit.textui.ResultPrinter.printFooter(junit.framework.TestResult)</inbound>
            <inbound type="feature" confirmed="yes">junit.textui.TestRunner.createTestResult()</inbound>
            <inbound type="feature" confirmed="yes">junit.textui.TestRunner.doRun(junit.framework.Test)</inbound>
            <inbound type="feature" confirmed="yes">junit.textui.TestRunner.doRun(junit.framework.Test, boolean)</inbound>
            <inbound type="feature" confirmed="yes">junit.textui.TestRunner.main(java.lang.String[])</inbound>
            <inbound type="feature" confirmed="yes">junit.textui.TestRunner.run(java.lang.Class)</inbound>
            <inbound type="feature" confirmed="yes">junit.textui.TestRunner.run(junit.framework.Test)</inbound>
            <inbound type="feature" confirmed="yes">junit.textui.TestRunner.runAndWait(junit.framework.Test)</inbound>
            <inbound type="feature" confirmed="yes">junit.textui.TestRunner.runSingleMethod(java.lang.String, java.lang.String, boolean)</inbound>
            <inbound type="feature" confirmed="yes">junit.textui.TestRunner.start(java.lang.String[])</inbound>
            <inbound type="feature" confirmed="yes">org.junit.internal.runners.JUnit38ClassRunner.run(org.junit.runner.notification.RunNotifier)</inbound>
            <feature confirmed="yes">
                <name>junit.framework.TestResult.TestResult()</name>
                <outbound type="feature" confirmed="no">java.lang.Object.Object()</outbound>
                <outbound type="feature" confirmed="no">java.util.ArrayList.ArrayList()</outbound>
                <outbound type="class" confirmed="no">java.util.List</outbound>
                <outbound type="feature" confirmed="yes">junit.framework.TestResult.fErrors</outbound>
                <outbound type="feature" confirmed="yes">junit.framework.TestResult.fFailures</outbound>
                <outbound type="feature" confirmed="yes">junit.framework.TestResult.fListeners</outbound>
                <outbound type="feature" confirmed="yes">junit.framework.TestResult.fRunTests</outbound>
                <outbound type="feature" confirmed="yes">junit.framework.TestResult.fStop</outbound>
                <inbound type="feature" confirmed="yes">junit.framework.TestCase.createResult()</inbound>
                <inbound type="feature" confirmed="yes">junit.textui.TestRunner.createTestResult()</inbound>
                <inbound type="feature" confirmed="yes">org.junit.internal.runners.JUnit38ClassRunner.run(org.junit.runner.notification.RunNotifier)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>junit.framework.TestResult.addError(junit.framework.Test, java.lang.Throwable)</name>
                <outbound type="class" confirmed="no">java.lang.Object</outbound>
                <outbound type="class" confirmed="no">java.lang.Throwable</outbound>
                <outbound type="class" confirmed="no">java.util.Iterator</outbound>
                <outbound type="feature" confirmed="no">java.util.Iterator.hasNext()</outbound>
                <outbound type="feature" confirmed="no">java.util.Iterator.next()</outbound>
                <outbound type="class" confirmed="no">java.util.List</outbound>
                <outbound type="feature" confirmed="no">java.util.List.add(java.lang.Object)</outbound>
                <outbound type="feature" confirmed="no">java.util.List.iterator()</outbound>
                <outbound type="class" confirmed="yes">junit.framework.Test</outbound>
                <outbound type="feature" confirmed="yes">junit.framework.TestFailure.TestFailure(junit.framework.Test, java.lang.Throwable)</outbound>
                <outbound type="class" confirmed="yes">junit.framework.TestListener</outbound>
                <outbound type="feature" confirmed="yes">junit.framework.TestListener.addError(junit.framework.Test, java.lang.Throwable)</outbound>
                <outbound type="feature" confirmed="yes">junit.framework.TestResult.cloneListeners()</outbound>
                <outbound type="feature" confirmed="yes">junit.framework.TestResult.fErrors</outbound>
                <inbound type="feature" confirmed="yes">junit.framework.JUnit4TestAdapterCache$1.testFailure(org.junit.runner.notification.Failure)</inbound>
                <inbound type="feature" confirmed="yes">junit.framework.TestResult.runProtected(junit.framework.Test, junit.framework.Protectable)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>junit.framework.TestResult.addFailure(junit.framework.Test, junit.framework.AssertionFailedError)</name>
                <outbound type="class" confirmed="no">java.lang.Object</outbound>
                <outbound type="class" confirmed="no">java.lang.Throwable</outbound>
                <outbound type="class" confirmed="no">java.util.Iterator</outbound>
                <outbound type="feature" confirmed="no">java.util.Iterator.hasNext()</outbound>
                <outbound type="feature" confirmed="no">java.util.Iterator.next()</outbound>
                <outbound type="class" confirmed="no">java.util.List</outbound>
                <outbound type="feature" confirmed="no">java.util.List.add(java.lang.Object)</outbound>
                <outbound type="feature" confirmed="no">java.util.List.iterator()</outbound>
                <outbound type="class" confirmed="yes">junit.framework.AssertionFailedError</outbound>
                <outbound type="class" confirmed="yes">junit.framework.Test</outbound>
                <outbound type="feature" confirmed="yes">junit.framework.TestFailure.TestFailure(junit.framework.Test, java.lang.Throwable)</outbound>
                <outbound type="class" confirmed="yes">junit.framework.TestListener</outbound>
                <outbound type="feature" confirmed="yes">junit.framework.TestListener.addFailure(junit.framework.Test, junit.framework.AssertionFailedError)</outbound>
                <outbound type="feature" confirmed="yes">junit.framework.TestResult.cloneListeners()</outbound>
                <outbound type="feature" confirmed="yes">junit.framework.TestResult.fFailures</outbound>
                <inbound type="feature" confirmed="yes">junit.framework.TestResult.runProtected(junit.framework.Test, junit.framework.Protectable)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>junit.framework.TestResult.addListener(junit.framework.TestListener)</name>
                <outbound type="class" confirmed="no">java.lang.Object</outbound>
                <outbound type="class" confirmed="no">java.util.List</outbound>
                <outbound type="feature" confirmed="no">java.util.List.add(java.lang.Object)</outbound>
                <outbound type="class" confirmed="yes">junit.framework.TestListener</outbound>
                <outbound type="feature" confirmed="yes">junit.framework.TestResult.fListeners</outbound>
                <inbound type="feature" confirmed="yes">junit.textui.TestRunner.doRun(junit.framework.Test, boolean)</inbound>
                <inbound type="feature" confirmed="yes">org.junit.internal.runners.JUnit38ClassRunner.run(org.junit.runner.notification.RunNotifier)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>junit.framework.TestResult.cloneListeners()</name>
                <outbound type="feature" confirmed="no">java.util.ArrayList.ArrayList()</outbound>
                <outbound type="class" confirmed="no">java.util.Collection</outbound>
                <outbound type="class" confirmed="no">java.util.List</outbound>
                <outbound type="feature" confirmed="no">java.util.List.addAll(java.util.Collection)</outbound>
                <outbound type="feature" confirmed="yes">junit.framework.TestResult.fListeners</outbound>
                <inbound type="feature" confirmed="yes">junit.framework.TestResult.addError(junit.framework.Test, java.lang.Throwable)</inbound>
                <inbound type="feature" confirmed="yes">junit.framework.TestResult.addFailure(junit.framework.Test, junit.framework.AssertionFailedError)</inbound>
                <inbound type="feature" confirmed="yes">junit.framework.TestResult.endTest(junit.framework.Test)</inbound>
                <inbound type="feature" confirmed="yes">junit.framework.TestResult.startTest(junit.framework.Test)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>junit.framework.TestResult.endTest(junit.framework.Test)</name>
                <outbound type="class" confirmed="no">java.lang.Object</outbound>
                <outbound type="class" confirmed="no">java.util.Iterator</outbound>
                <outbound type="feature" confirmed="no">java.util.Iterator.hasNext()</outbound>
                <outbound type="feature" confirmed="no">java.util.Iterator.next()</outbound>
                <outbound type="class" confirmed="no">java.util.List</outbound>
                <outbound type="feature" confirmed="no">java.util.List.iterator()</outbound>
                <outbound type="class" confirmed="yes">junit.framework.Test</outbound>
                <outbound type="class" confirmed="yes">junit.framework.TestListener</outbound>
                <outbound type="feature" confirmed="yes">junit.framework.TestListener.endTest(junit.framework.Test)</outbound>
                <outbound type="feature" confirmed="yes">junit.framework.TestResult.cloneListeners()</outbound>
                <inbound type="feature" confirmed="yes">junit.framework.JUnit4TestAdapterCache$1.testFinished(org.junit.runner.Description)</inbound>
                <inbound type="feature" confirmed="yes">junit.framework.TestResult.run(junit.framework.TestCase)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>junit.framework.TestResult.errorCount()</name>
                <outbound type="class" confirmed="no">java.util.List</outbound>
                <outbound type="feature" confirmed="no">java.util.List.size()</outbound>
                <outbound type="feature" confirmed="yes">junit.framework.TestResult.fErrors</outbound>
                <inbound type="feature" confirmed="yes">junit.framework.TestResult.wasSuccessful()</inbound>
                <inbound type="feature" confirmed="yes">junit.textui.ResultPrinter.printErrors(junit.framework.TestResult)</inbound>
                <inbound type="feature" confirmed="yes">junit.textui.ResultPrinter.printFooter(junit.framework.TestResult)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>junit.framework.TestResult.errors()</name>
                <outbound type="class" confirmed="no">java.util.Collection</outbound>
                <outbound type="feature" confirmed="no">java.util.Collections.enumeration(java.util.Collection)</outbound>
                <outbound type="class" confirmed="no">java.util.Enumeration</outbound>
                <outbound type="class" confirmed="no">java.util.List</outbound>
                <outbound type="feature" confirmed="yes">junit.framework.TestResult.fErrors</outbound>
                <inbound type="feature" confirmed="yes">junit.textui.ResultPrinter.printErrors(junit.framework.TestResult)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>junit.framework.TestResult.fErrors</name>
                <outbound type="class" confirmed="no">java.util.List</outbound>
                <inbound type="feature" confirmed="yes">junit.framework.TestResult.TestResult()</inbound>
                <inbound type="feature" confirmed="yes">junit.framework.TestResult.addError(junit.framework.Test, java.lang.Throwable)</inbound>
                <inbound type="feature" confirmed="yes">junit.framework.TestResult.errorCount()</inbound>
                <inbound type="feature" confirmed="yes">junit.framework.TestResult.errors()</inbound>
            </feature>
            <feature confirmed="yes">
                <name>junit.framework.TestResult.fFailures</name>
                <outbound type="class" confirmed="no">java.util.List</outbound>
                <inbound type="feature" confirmed="yes">junit.framework.TestResult.TestResult()</inbound>
                <inbound type="feature" confirmed="yes">junit.framework.TestResult.addFailure(junit.framework.Test, junit.framework.AssertionFailedError)</inbound>
                <inbound type="feature" confirmed="yes">junit.framework.TestResult.failureCount()</inbound>
                <inbound type="feature" confirmed="yes">junit.framework.TestResult.failures()</inbound>
            </feature>
            <feature confirmed="yes">
                <name>junit.framework.TestResult.fListeners</name>
                <outbound type="class" confirmed="no">java.util.List</outbound>
                <inbound type="feature" confirmed="yes">junit.framework.TestResult.TestResult()</inbound>
                <inbound type="feature" confirmed="yes">junit.framework.TestResult.addListener(junit.framework.TestListener)</inbound>
                <inbound type="feature" confirmed="yes">junit.framework.TestResult.cloneListeners()</inbound>
                <inbound type="feature" confirmed="yes">junit.framework.TestResult.removeListener(junit.framework.TestListener)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>junit.framework.TestResult.fRunTests</name>
                <inbound type="feature" confirmed="yes">junit.framework.TestResult.TestResult()</inbound>
                <inbound type="feature" confirmed="yes">junit.framework.TestResult.runCount()</inbound>
                <inbound type="feature" confirmed="yes">junit.framework.TestResult.startTest(junit.framework.Test)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>junit.framework.TestResult.fStop</name>
                <inbound type="feature" confirmed="yes">junit.framework.TestResult.TestResult()</inbound>
                <inbound type="feature" confirmed="yes">junit.framework.TestResult.shouldStop()</inbound>
                <inbound type="feature" confirmed="yes">junit.framework.TestResult.stop()</inbound>
            </feature>
            <feature confirmed="yes">
                <name>junit.framework.TestResult.failureCount()</name>
                <outbound type="class" confirmed="no">java.util.List</outbound>
                <outbound type="feature" confirmed="no">java.util.List.size()</outbound>
                <outbound type="feature" confirmed="yes">junit.framework.TestResult.fFailures</outbound>
                <inbound type="feature" confirmed="yes">junit.framework.TestResult.wasSuccessful()</inbound>
                <inbound type="feature" confirmed="yes">junit.textui.ResultPrinter.printFailures(junit.framework.TestResult)</inbound>
                <inbound type="feature" confirmed="yes">junit.textui.ResultPrinter.printFooter(junit.framework.TestResult)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>junit.framework.TestResult.failures()</name>
                <outbound type="class" confirmed="no">java.util.Collection</outbound>
                <outbound type="feature" confirmed="no">java.util.Collections.enumeration(java.util.Collection)</outbound>
                <outbound type="class" confirmed="no">java.util.Enumeration</outbound>
                <outbound type="class" confirmed="no">java.util.List</outbound>
                <outbound type="feature" confirmed="yes">junit.framework.TestResult.fFailures</outbound>
                <inbound type="feature" confirmed="yes">junit.textui.ResultPrinter.printFailures(junit.framework.TestResult)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>junit.framework.TestResult.removeListener(junit.framework.TestListener)</name>
                <outbound type="class" confirmed="no">java.lang.Object</outbound>
                <outbound type="class" confirmed="no">java.util.List</outbound>
                <outbound type="feature" confirmed="no">java.util.List.remove(java.lang.Object)</outbound>
                <outbound type="class" confirmed="yes">junit.framework.TestListener</outbound>
                <outbound type="feature" confirmed="yes">junit.framework.TestResult.fListeners</outbound>
            </feature>
            <feature confirmed="yes">
                <name>junit.framework.TestResult.run(junit.framework.TestCase)</name>
                <outbound type="class" confirmed="yes">junit.framework.Protectable</outbound>
                <outbound type="class" confirmed="yes">junit.framework.Test</outbound>
                <outbound type="class" confirmed="yes">junit.framework.TestCase</outbound>
                <outbound type="feature" confirmed="yes">junit.framework.TestResult$1.TestResult$1(junit.framework.TestResult, junit.framework.TestCase)</outbound>
                <outbound type="feature" confirmed="yes">junit.framework.TestResult.endTest(junit.framework.Test)</outbound>
                <outbound type="feature" confirmed="yes">junit.framework.TestResult.runProtected(junit.framework.Test, junit.framework.Protectable)</outbound>
                <outbound type="feature" confirmed="yes">junit.framework.TestResult.startTest(junit.framework.Test)</outbound>
                <inbound type="feature" confirmed="yes">junit.framework.TestCase.run(junit.framework.TestResult)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>junit.framework.TestResult.runCount()</name>
                <outbound type="feature" confirmed="yes">junit.framework.TestResult.fRunTests</outbound>
                <inbound type="feature" confirmed="yes">junit.textui.ResultPrinter.printFooter(junit.framework.TestResult)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>junit.framework.TestResult.runProtected(junit.framework.Test, junit.framework.Protectable)</name>
                <outbound type="class" confirmed="no">java.lang.ThreadDeath</outbound>
                <outbound type="class" confirmed="no">java.lang.Throwable</outbound>
                <outbound type="class" confirmed="yes">junit.framework.AssertionFailedError</outbound>
                <outbound type="class" confirmed="yes">junit.framework.Protectable</outbound>
                <outbound type="feature" confirmed="yes">junit.framework.Protectable.protect()</outbound>
                <outbound type="class" confirmed="yes">junit.framework.Test</outbound>
                <outbound type="feature" confirmed="yes">junit.framework.TestResult.addError(junit.framework.Test, java.lang.Throwable)</outbound>
                <outbound type="feature" confirmed="yes">junit.framework.TestResult.addFailure(junit.framework.Test, junit.framework.AssertionFailedError)</outbound>
                <inbound type="feature" confirmed="yes">junit.extensions.TestSetup.run(junit.framework.TestResult)</inbound>
                <inbound type="feature" confirmed="yes">junit.framework.TestResult.run(junit.framework.TestCase)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>junit.framework.TestResult.shouldStop()</name>
                <outbound type="feature" confirmed="yes">junit.framework.TestResult.fStop</outbound>
                <inbound type="feature" confirmed="yes">junit.extensions.RepeatedTest.run(junit.framework.TestResult)</inbound>
                <inbound type="feature" confirmed="yes">junit.framework.TestSuite.run(junit.framework.TestResult)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>junit.framework.TestResult.startTest(junit.framework.Test)</name>
                <outbound type="class" confirmed="no">java.lang.Object</outbound>
                <outbound type="class" confirmed="no">java.util.Iterator</outbound>
                <outbound type="feature" confirmed="no">java.util.Iterator.hasNext()</outbound>
                <outbound type="feature" confirmed="no">java.util.Iterator.next()</outbound>
                <outbound type="class" confirmed="no">java.util.List</outbound>
                <outbound type="feature" confirmed="no">java.util.List.iterator()</outbound>
                <outbound type="class" confirmed="yes">junit.framework.Test</outbound>
                <outbound type="feature" confirmed="yes">junit.framework.Test.countTestCases()</outbound>
                <outbound type="class" confirmed="yes">junit.framework.TestListener</outbound>
                <outbound type="feature" confirmed="yes">junit.framework.TestListener.startTest(junit.framework.Test)</outbound>
                <outbound type="feature" confirmed="yes">junit.framework.TestResult.cloneListeners()</outbound>
                <outbound type="feature" confirmed="yes">junit.framework.TestResult.fRunTests</outbound>
                <inbound type="feature" confirmed="yes">junit.framework.JUnit4TestAdapterCache$1.testStarted(org.junit.runner.Description)</inbound>
                <inbound type="feature" confirmed="yes">junit.framework.TestResult.run(junit.framework.TestCase)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>junit.framework.TestResult.stop()</name>
                <outbound type="feature" confirmed="yes">junit.framework.TestResult.fStop</outbound>
            </feature>
            <feature confirmed="yes">
                <name>junit.framework.TestResult.wasSuccessful()</name>
                <outbound type="feature" confirmed="yes">junit.framework.TestResult.errorCount()</outbound>
                <outbound type="feature" confirmed="yes">junit.framework.TestResult.failureCount()</outbound>
                <inbound type="feature" confirmed="yes">junit.textui.ResultPrinter.printFooter(junit.framework.TestResult)</inbound>
                <inbound type="feature" confirmed="yes">junit.textui.TestRunner.main(java.lang.String[])</inbound>
            </feature>
        </class>
        <class confirmed="yes">
            <name>junit.framework.TestResult$1</name>
            <outbound type="class" confirmed="no">java.lang.Object</outbound>
            <outbound type="class" confirmed="yes">junit.framework.Protectable</outbound>
            <feature confirmed="yes">
                <name>junit.framework.TestResult$1.TestResult$1(junit.framework.TestResult, junit.framework.TestCase)</name>
                <outbound type="feature" confirmed="no">java.lang.Object.Object()</outbound>
                <outbound type="class" confirmed="yes">junit.framework.TestCase</outbound>
                <outbound type="class" confirmed="yes">junit.framework.TestResult</outbound>
                <outbound type="feature" confirmed="yes">junit.framework.TestResult$1.this$0</outbound>
                <outbound type="feature" confirmed="yes">junit.framework.TestResult$1.val$test</outbound>
                <inbound type="feature" confirmed="yes">junit.framework.TestResult.run(junit.framework.TestCase)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>junit.framework.TestResult$1.protect()</name>
                <outbound type="class" confirmed="no">java.lang.Throwable</outbound>
                <outbound type="class" confirmed="yes">junit.framework.TestCase</outbound>
                <outbound type="feature" confirmed="yes">junit.framework.TestCase.runBare()</outbound>
                <outbound type="feature" confirmed="yes">junit.framework.TestResult$1.val$test</outbound>
            </feature>
            <feature confirmed="yes">
                <name>junit.framework.TestResult$1.this$0</name>
                <outbound type="class" confirmed="yes">junit.framework.TestResult</outbound>
                <inbound type="feature" confirmed="yes">junit.framework.TestResult$1.TestResult$1(junit.framework.TestResult, junit.framework.TestCase)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>junit.framework.TestResult$1.val$test</name>
                <outbound type="class" confirmed="yes">junit.framework.TestCase</outbound>
                <inbound type="feature" confirmed="yes">junit.framework.TestResult$1.TestResult$1(junit.framework.TestResult, junit.framework.TestCase)</inbound>
                <inbound type="feature" confirmed="yes">junit.framework.TestResult$1.protect()</inbound>
            </feature>
        </class>
        <class confirmed="yes">
            <name>junit.framework.TestSuite</name>
            <outbound type="class" confirmed="no">java.lang.Object</outbound>
            <outbound type="class" confirmed="yes">junit.framework.Test</outbound>
            <inbound type="class" confirmed="yes">junit.extensions.ActiveTestSuite</inbound>
            <inbound type="feature" confirmed="yes">org.junit.internal.runners.JUnit38ClassRunner.createSuiteDescription(junit.framework.TestSuite)</inbound>
            <inbound type="feature" confirmed="yes">org.junit.internal.runners.JUnit38ClassRunner.filter(org.junit.runner.manipulation.Filter)</inbound>
            <inbound type="feature" confirmed="yes">org.junit.internal.runners.JUnit38ClassRunner.makeDescription(junit.framework.Test)</inbound>
            <feature confirmed="yes">
                <name>junit.framework.TestSuite.TestSuite()</name>
                <outbound type="feature" confirmed="no">java.lang.Object.Object()</outbound>
                <outbound type="class" confirmed="no">java.util.Vector</outbound>
                <outbound type="feature" confirmed="no">java.util.Vector.Vector(int)</outbound>
                <outbound type="feature" confirmed="yes">junit.framework.TestSuite.fTests</outbound>
                <inbound type="feature" confirmed="yes">junit.extensions.ActiveTestSuite.ActiveTestSuite()</inbound>
            </feature>
            <feature confirmed="yes">
                <name>junit.framework.TestSuite.TestSuite(java.lang.Class)</name>
                <outbound type="class" confirmed="no">java.lang.Class</outbound>
                <outbound type="feature" confirmed="no">java.lang.Object.Object()</outbound>
                <outbound type="class" confirmed="no">java.util.Vector</outbound>
                <outbound type="feature" confirmed="no">java.util.Vector.Vector(int)</outbound>
                <outbound type="feature" confirmed="yes">junit.framework.TestSuite.addTestsFromTestCase(java.lang.Class)</outbound>
                <outbound type="feature" confirmed="yes">junit.framework.TestSuite.fTests</outbound>
                <inbound type="feature" confirmed="yes">junit.extensions.ActiveTestSuite.ActiveTestSuite(java.lang.Class)</inbound>
                <inbound type="feature" confirmed="yes">junit.framework.TestSuite.TestSuite(java.lang.Class, java.lang.String)</inbound>
                <inbound type="feature" confirmed="yes">junit.framework.TestSuite.addTestSuite(java.lang.Class)</inbound>
                <inbound type="feature" confirmed="yes">junit.framework.TestSuite.testCaseForClass(java.lang.Class)</inbound>
                <inbound type="feature" confirmed="yes">junit.runner.BaseTestRunner.getTest(java.lang.String)</inbound>
                <inbound type="feature" confirmed="yes">junit.textui.TestRunner.run(java.lang.Class)</inbound>
                <inbound type="feature" confirmed="yes">org.junit.experimental.max.MaxCore.buildRunner(org.junit.runner.Description)</inbound>
                <inbound type="feature" confirmed="yes">org.junit.internal.runners.JUnit38ClassRunner.JUnit38ClassRunner(java.lang.Class)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>junit.framework.TestSuite.TestSuite(java.lang.Class, java.lang.String)</name>
                <outbound type="class" confirmed="no">java.lang.Class</outbound>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="feature" confirmed="yes">junit.framework.TestSuite.TestSuite(java.lang.Class)</outbound>
                <outbound type="feature" confirmed="yes">junit.framework.TestSuite.setName(java.lang.String)</outbound>
                <inbound type="feature" confirmed="yes">junit.extensions.ActiveTestSuite.ActiveTestSuite(java.lang.Class, java.lang.String)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>junit.framework.TestSuite.TestSuite(java.lang.Class[])</name>
                <outbound type="class" confirmed="no">java.lang.Class</outbound>
                <outbound type="feature" confirmed="no">java.lang.Object.Object()</outbound>
                <outbound type="class" confirmed="no">java.util.Vector</outbound>
                <outbound type="feature" confirmed="no">java.util.Vector.Vector(int)</outbound>
                <outbound type="class" confirmed="yes">junit.framework.Test</outbound>
                <outbound type="feature" confirmed="yes">junit.framework.TestSuite.addTest(junit.framework.Test)</outbound>
                <outbound type="feature" confirmed="yes">junit.framework.TestSuite.fTests</outbound>
                <outbound type="feature" confirmed="yes">junit.framework.TestSuite.testCaseForClass(java.lang.Class)</outbound>
                <inbound type="feature" confirmed="yes">junit.framework.TestSuite.TestSuite(java.lang.Class[], java.lang.String)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>junit.framework.TestSuite.TestSuite(java.lang.Class[], java.lang.String)</name>
                <outbound type="class" confirmed="no">java.lang.Class</outbound>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="feature" confirmed="yes">junit.framework.TestSuite.TestSuite(java.lang.Class[])</outbound>
                <outbound type="feature" confirmed="yes">junit.framework.TestSuite.setName(java.lang.String)</outbound>
            </feature>
            <feature confirmed="yes">
                <name>junit.framework.TestSuite.TestSuite(java.lang.String)</name>
                <outbound type="feature" confirmed="no">java.lang.Object.Object()</outbound>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="class" confirmed="no">java.util.Vector</outbound>
                <outbound type="feature" confirmed="no">java.util.Vector.Vector(int)</outbound>
                <outbound type="feature" confirmed="yes">junit.framework.TestSuite.fTests</outbound>
                <outbound type="feature" confirmed="yes">junit.framework.TestSuite.setName(java.lang.String)</outbound>
                <inbound type="feature" confirmed="yes">junit.extensions.ActiveTestSuite.ActiveTestSuite(java.lang.String)</inbound>
                <inbound type="feature" confirmed="yes">junit.framework.JUnit4TestAdapterCache.createTest(org.junit.runner.Description)</inbound>
                <inbound type="feature" confirmed="yes">org.junit.internal.runners.JUnit38ClassRunner.filter(org.junit.runner.manipulation.Filter)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>junit.framework.TestSuite.addTest(junit.framework.Test)</name>
                <outbound type="class" confirmed="no">java.lang.Object</outbound>
                <outbound type="class" confirmed="no">java.util.Vector</outbound>
                <outbound type="feature" confirmed="no">java.util.Vector.add(java.lang.Object)</outbound>
                <outbound type="class" confirmed="yes">junit.framework.Test</outbound>
                <outbound type="feature" confirmed="yes">junit.framework.TestSuite.fTests</outbound>
                <inbound type="feature" confirmed="yes">junit.framework.JUnit4TestAdapterCache.createTest(org.junit.runner.Description)</inbound>
                <inbound type="feature" confirmed="yes">junit.framework.TestSuite.TestSuite(java.lang.Class[])</inbound>
                <inbound type="feature" confirmed="yes">junit.framework.TestSuite.addTestMethod(java.lang.reflect.Method, java.util.List, java.lang.Class)</inbound>
                <inbound type="feature" confirmed="yes">junit.framework.TestSuite.addTestSuite(java.lang.Class)</inbound>
                <inbound type="feature" confirmed="yes">junit.framework.TestSuite.addTestsFromTestCase(java.lang.Class)</inbound>
                <inbound type="feature" confirmed="yes">org.junit.internal.runners.JUnit38ClassRunner.filter(org.junit.runner.manipulation.Filter)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>junit.framework.TestSuite.addTestMethod(java.lang.reflect.Method, java.util.List, java.lang.Class)</name>
                <outbound type="class" confirmed="no">java.lang.Class</outbound>
                <outbound type="feature" confirmed="no">java.lang.Class.getCanonicalName()</outbound>
                <outbound type="class" confirmed="no">java.lang.Object</outbound>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="class" confirmed="no">java.lang.StringBuilder</outbound>
                <outbound type="feature" confirmed="no">java.lang.StringBuilder.StringBuilder()</outbound>
                <outbound type="feature" confirmed="no">java.lang.StringBuilder.append(java.lang.String)</outbound>
                <outbound type="feature" confirmed="no">java.lang.StringBuilder.toString()</outbound>
                <outbound type="class" confirmed="no">java.lang.reflect.Method</outbound>
                <outbound type="feature" confirmed="no">java.lang.reflect.Method.getName()</outbound>
                <outbound type="class" confirmed="no">java.util.List</outbound>
                <outbound type="feature" confirmed="no">java.util.List.add(java.lang.Object)</outbound>
                <outbound type="feature" confirmed="no">java.util.List.contains(java.lang.Object)</outbound>
                <outbound type="class" confirmed="yes">junit.framework.Test</outbound>
                <outbound type="feature" confirmed="yes">junit.framework.TestSuite.addTest(junit.framework.Test)</outbound>
                <outbound type="feature" confirmed="yes">junit.framework.TestSuite.createTest(java.lang.Class, java.lang.String)</outbound>
                <outbound type="feature" confirmed="yes">junit.framework.TestSuite.isPublicTestMethod(java.lang.reflect.Method)</outbound>
                <outbound type="feature" confirmed="yes">junit.framework.TestSuite.isTestMethod(java.lang.reflect.Method)</outbound>
                <outbound type="feature" confirmed="yes">junit.framework.TestSuite.warning(java.lang.String)</outbound>
                <inbound type="feature" confirmed="yes">junit.framework.TestSuite.addTestsFromTestCase(java.lang.Class)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>junit.framework.TestSuite.addTestSuite(java.lang.Class)</name>
                <outbound type="class" confirmed="no">java.lang.Class</outbound>
                <outbound type="class" confirmed="yes">junit.framework.Test</outbound>
                <outbound type="feature" confirmed="yes">junit.framework.TestSuite.TestSuite(java.lang.Class)</outbound>
                <outbound type="feature" confirmed="yes">junit.framework.TestSuite.addTest(junit.framework.Test)</outbound>
            </feature>
            <feature confirmed="yes">
                <name>junit.framework.TestSuite.addTestsFromTestCase(java.lang.Class)</name>
                <outbound type="class" confirmed="no">java.lang.Class</outbound>
                <outbound type="feature" confirmed="no">java.lang.Class.getDeclaredMethods()</outbound>
                <outbound type="feature" confirmed="no">java.lang.Class.getModifiers()</outbound>
                <outbound type="feature" confirmed="no">java.lang.Class.getName()</outbound>
                <outbound type="feature" confirmed="no">java.lang.Class.getSuperclass()</outbound>
                <outbound type="feature" confirmed="no">java.lang.Class.isAssignableFrom(java.lang.Class)</outbound>
                <outbound type="class" confirmed="no">java.lang.NoSuchMethodException</outbound>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="class" confirmed="no">java.lang.StringBuilder</outbound>
                <outbound type="feature" confirmed="no">java.lang.StringBuilder.StringBuilder()</outbound>
                <outbound type="feature" confirmed="no">java.lang.StringBuilder.append(java.lang.String)</outbound>
                <outbound type="feature" confirmed="no">java.lang.StringBuilder.toString()</outbound>
                <outbound type="class" confirmed="no">java.lang.reflect.Constructor</outbound>
                <outbound type="class" confirmed="no">java.lang.reflect.Method</outbound>
                <outbound type="feature" confirmed="no">java.lang.reflect.Modifier.isPublic(int)</outbound>
                <outbound type="feature" confirmed="no">java.util.ArrayList.ArrayList()</outbound>
                <outbound type="class" confirmed="no">java.util.List</outbound>
                <outbound type="class" confirmed="no">java.util.Vector</outbound>
                <outbound type="feature" confirmed="no">java.util.Vector.size()</outbound>
                <outbound type="class" confirmed="yes">junit.framework.Test</outbound>
                <outbound type="feature" confirmed="yes">junit.framework.TestSuite.addTest(junit.framework.Test)</outbound>
                <outbound type="feature" confirmed="yes">junit.framework.TestSuite.addTestMethod(java.lang.reflect.Method, java.util.List, java.lang.Class)</outbound>
                <outbound type="feature" confirmed="yes">junit.framework.TestSuite.fName</outbound>
                <outbound type="feature" confirmed="yes">junit.framework.TestSuite.fTests</outbound>
                <outbound type="feature" confirmed="yes">junit.framework.TestSuite.getTestConstructor(java.lang.Class)</outbound>
                <outbound type="feature" confirmed="yes">junit.framework.TestSuite.warning(java.lang.String)</outbound>
                <inbound type="feature" confirmed="yes">junit.framework.TestSuite.TestSuite(java.lang.Class)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>junit.framework.TestSuite.countTestCases()</name>
                <outbound type="class" confirmed="no">java.lang.Object</outbound>
                <outbound type="class" confirmed="no">java.util.Iterator</outbound>
                <outbound type="feature" confirmed="no">java.util.Iterator.hasNext()</outbound>
                <outbound type="feature" confirmed="no">java.util.Iterator.next()</outbound>
                <outbound type="class" confirmed="no">java.util.Vector</outbound>
                <outbound type="feature" confirmed="no">java.util.Vector.iterator()</outbound>
                <outbound type="class" confirmed="yes">junit.framework.Test</outbound>
                <outbound type="feature" confirmed="yes">junit.framework.Test.countTestCases()</outbound>
                <outbound type="feature" confirmed="yes">junit.framework.TestSuite.fTests</outbound>
                <inbound type="feature" confirmed="yes">org.junit.internal.runners.JUnit38ClassRunner.createSuiteDescription(junit.framework.TestSuite)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>junit.framework.TestSuite.createTest(java.lang.Class, java.lang.String)</name>
                <outbound type="class" confirmed="no">java.lang.Class</outbound>
                <outbound type="feature" confirmed="no">java.lang.Class.getName()</outbound>
                <outbound type="class" confirmed="no">java.lang.IllegalAccessException</outbound>
                <outbound type="class" confirmed="no">java.lang.InstantiationException</outbound>
                <outbound type="class" confirmed="no">java.lang.NoSuchMethodException</outbound>
                <outbound type="class" confirmed="no">java.lang.Object</outbound>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="class" confirmed="no">java.lang.StringBuilder</outbound>
                <outbound type="feature" confirmed="no">java.lang.StringBuilder.StringBuilder()</outbound>
                <outbound type="feature" confirmed="no">java.lang.StringBuilder.append(java.lang.String)</outbound>
                <outbound type="feature" confirmed="no">java.lang.StringBuilder.toString()</outbound>
                <outbound type="class" confirmed="no">java.lang.Throwable</outbound>
                <outbound type="class" confirmed="no">java.lang.reflect.Constructor</outbound>
                <outbound type="feature" confirmed="no">java.lang.reflect.Constructor.getParameterTypes()</outbound>
                <outbound type="feature" confirmed="no">java.lang.reflect.Constructor.newInstance(java.lang.Object[])</outbound>
                <outbound type="class" confirmed="no">java.lang.reflect.InvocationTargetException</outbound>
                <outbound type="feature" confirmed="no">java.lang.reflect.InvocationTargetException.getTargetException()</outbound>
                <outbound type="class" confirmed="yes">junit.framework.Test</outbound>
                <outbound type="class" confirmed="yes">junit.framework.TestCase</outbound>
                <outbound type="feature" confirmed="yes">junit.framework.TestCase.setName(java.lang.String)</outbound>
                <outbound type="feature" confirmed="yes">junit.framework.TestSuite.exceptionToString(java.lang.Throwable)</outbound>
                <outbound type="feature" confirmed="yes">junit.framework.TestSuite.getTestConstructor(java.lang.Class)</outbound>
                <outbound type="feature" confirmed="yes">junit.framework.TestSuite.warning(java.lang.String)</outbound>
                <inbound type="feature" confirmed="yes">junit.framework.TestSuite.addTestMethod(java.lang.reflect.Method, java.util.List, java.lang.Class)</inbound>
                <inbound type="feature" confirmed="yes">junit.textui.TestRunner.runSingleMethod(java.lang.String, java.lang.String, boolean)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>junit.framework.TestSuite.exceptionToString(java.lang.Throwable)</name>
                <outbound type="class" confirmed="no">java.io.PrintWriter</outbound>
                <outbound type="feature" confirmed="no">java.io.PrintWriter.PrintWriter(java.io.Writer)</outbound>
                <outbound type="feature" confirmed="no">java.io.StringWriter.StringWriter()</outbound>
                <outbound type="feature" confirmed="no">java.io.StringWriter.toString()</outbound>
                <outbound type="class" confirmed="no">java.io.Writer</outbound>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="class" confirmed="no">java.lang.Throwable</outbound>
                <outbound type="feature" confirmed="no">java.lang.Throwable.printStackTrace(java.io.PrintWriter)</outbound>
                <inbound type="feature" confirmed="yes">junit.framework.TestSuite.createTest(java.lang.Class, java.lang.String)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>junit.framework.TestSuite.fName</name>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <inbound type="feature" confirmed="yes">junit.framework.TestSuite.addTestsFromTestCase(java.lang.Class)</inbound>
                <inbound type="feature" confirmed="yes">junit.framework.TestSuite.getName()</inbound>
                <inbound type="feature" confirmed="yes">junit.framework.TestSuite.setName(java.lang.String)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>junit.framework.TestSuite.fTests</name>
                <outbound type="class" confirmed="no">java.util.Vector</outbound>
                <inbound type="feature" confirmed="yes">junit.framework.TestSuite.TestSuite()</inbound>
                <inbound type="feature" confirmed="yes">junit.framework.TestSuite.TestSuite(java.lang.Class)</inbound>
                <inbound type="feature" confirmed="yes">junit.framework.TestSuite.TestSuite(java.lang.Class[])</inbound>
                <inbound type="feature" confirmed="yes">junit.framework.TestSuite.TestSuite(java.lang.String)</inbound>
                <inbound type="feature" confirmed="yes">junit.framework.TestSuite.addTest(junit.framework.Test)</inbound>
                <inbound type="feature" confirmed="yes">junit.framework.TestSuite.addTestsFromTestCase(java.lang.Class)</inbound>
                <inbound type="feature" confirmed="yes">junit.framework.TestSuite.countTestCases()</inbound>
                <inbound type="feature" confirmed="yes">junit.framework.TestSuite.run(junit.framework.TestResult)</inbound>
                <inbound type="feature" confirmed="yes">junit.framework.TestSuite.testAt(int)</inbound>
                <inbound type="feature" confirmed="yes">junit.framework.TestSuite.testCount()</inbound>
                <inbound type="feature" confirmed="yes">junit.framework.TestSuite.tests()</inbound>
            </feature>
            <feature confirmed="yes">
                <name>junit.framework.TestSuite.getName()</name>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="feature" confirmed="yes">junit.framework.TestSuite.fName</outbound>
                <inbound type="feature" confirmed="yes">junit.framework.TestSuite.toString()</inbound>
                <inbound type="feature" confirmed="yes">org.junit.internal.runners.JUnit38ClassRunner.filter(org.junit.runner.manipulation.Filter)</inbound>
                <inbound type="feature" confirmed="yes">org.junit.internal.runners.JUnit38ClassRunner.makeDescription(junit.framework.Test)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>junit.framework.TestSuite.getTestConstructor(java.lang.Class)</name>
                <outbound type="class" confirmed="no">java.lang.Class</outbound>
                <outbound type="feature" confirmed="no">java.lang.Class.getConstructor(java.lang.Class[])</outbound>
                <outbound type="class" confirmed="no">java.lang.NoSuchMethodException</outbound>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="class" confirmed="no">java.lang.reflect.Constructor</outbound>
                <inbound type="feature" confirmed="yes">junit.framework.TestSuite.addTestsFromTestCase(java.lang.Class)</inbound>
                <inbound type="feature" confirmed="yes">junit.framework.TestSuite.createTest(java.lang.Class, java.lang.String)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>junit.framework.TestSuite.isPublicTestMethod(java.lang.reflect.Method)</name>
                <outbound type="class" confirmed="no">java.lang.reflect.Method</outbound>
                <outbound type="feature" confirmed="no">java.lang.reflect.Method.getModifiers()</outbound>
                <outbound type="feature" confirmed="no">java.lang.reflect.Modifier.isPublic(int)</outbound>
                <outbound type="feature" confirmed="yes">junit.framework.TestSuite.isTestMethod(java.lang.reflect.Method)</outbound>
                <inbound type="feature" confirmed="yes">junit.framework.TestSuite.addTestMethod(java.lang.reflect.Method, java.util.List, java.lang.Class)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>junit.framework.TestSuite.isTestMethod(java.lang.reflect.Method)</name>
                <outbound type="class" confirmed="no">java.lang.Class</outbound>
                <outbound type="class" confirmed="no">java.lang.Object</outbound>
                <outbound type="feature" confirmed="no">java.lang.Object.equals(java.lang.Object)</outbound>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="feature" confirmed="no">java.lang.String.startsWith(java.lang.String)</outbound>
                <outbound type="feature" confirmed="no">java.lang.Void.TYPE</outbound>
                <outbound type="class" confirmed="no">java.lang.reflect.Method</outbound>
                <outbound type="feature" confirmed="no">java.lang.reflect.Method.getName()</outbound>
                <outbound type="feature" confirmed="no">java.lang.reflect.Method.getParameterTypes()</outbound>
                <outbound type="feature" confirmed="no">java.lang.reflect.Method.getReturnType()</outbound>
                <inbound type="feature" confirmed="yes">junit.framework.TestSuite.addTestMethod(java.lang.reflect.Method, java.util.List, java.lang.Class)</inbound>
                <inbound type="feature" confirmed="yes">junit.framework.TestSuite.isPublicTestMethod(java.lang.reflect.Method)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>junit.framework.TestSuite.run(junit.framework.TestResult)</name>
                <outbound type="class" confirmed="no">java.lang.Object</outbound>
                <outbound type="class" confirmed="no">java.util.Iterator</outbound>
                <outbound type="feature" confirmed="no">java.util.Iterator.hasNext()</outbound>
                <outbound type="feature" confirmed="no">java.util.Iterator.next()</outbound>
                <outbound type="class" confirmed="no">java.util.Vector</outbound>
                <outbound type="feature" confirmed="no">java.util.Vector.iterator()</outbound>
                <outbound type="class" confirmed="yes">junit.framework.Test</outbound>
                <outbound type="class" confirmed="yes">junit.framework.TestResult</outbound>
                <outbound type="feature" confirmed="yes">junit.framework.TestResult.shouldStop()</outbound>
                <outbound type="feature" confirmed="yes">junit.framework.TestSuite.fTests</outbound>
                <outbound type="feature" confirmed="yes">junit.framework.TestSuite.runTest(junit.framework.Test, junit.framework.TestResult)</outbound>
                <inbound type="feature" confirmed="yes">junit.extensions.ActiveTestSuite.run(junit.framework.TestResult)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>junit.framework.TestSuite.runTest(junit.framework.Test, junit.framework.TestResult)</name>
                <outbound type="class" confirmed="yes">junit.framework.Test</outbound>
                <outbound type="feature" confirmed="yes">junit.framework.Test.run(junit.framework.TestResult)</outbound>
                <outbound type="class" confirmed="yes">junit.framework.TestResult</outbound>
                <inbound type="feature" confirmed="yes">junit.framework.TestSuite.run(junit.framework.TestResult)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>junit.framework.TestSuite.setName(java.lang.String)</name>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="feature" confirmed="yes">junit.framework.TestSuite.fName</outbound>
                <inbound type="feature" confirmed="yes">junit.framework.TestSuite.TestSuite(java.lang.Class, java.lang.String)</inbound>
                <inbound type="feature" confirmed="yes">junit.framework.TestSuite.TestSuite(java.lang.Class[], java.lang.String)</inbound>
                <inbound type="feature" confirmed="yes">junit.framework.TestSuite.TestSuite(java.lang.String)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>junit.framework.TestSuite.testAt(int)</name>
                <outbound type="class" confirmed="no">java.lang.Object</outbound>
                <outbound type="class" confirmed="no">java.util.Vector</outbound>
                <outbound type="feature" confirmed="no">java.util.Vector.get(int)</outbound>
                <outbound type="class" confirmed="yes">junit.framework.Test</outbound>
                <outbound type="feature" confirmed="yes">junit.framework.TestSuite.fTests</outbound>
                <inbound type="feature" confirmed="yes">org.junit.internal.runners.JUnit38ClassRunner.createSuiteDescription(junit.framework.TestSuite)</inbound>
                <inbound type="feature" confirmed="yes">org.junit.internal.runners.JUnit38ClassRunner.filter(org.junit.runner.manipulation.Filter)</inbound>
                <inbound type="feature" confirmed="yes">org.junit.internal.runners.JUnit38ClassRunner.makeDescription(junit.framework.Test)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>junit.framework.TestSuite.testCaseForClass(java.lang.Class)</name>
                <outbound type="class" confirmed="no">java.lang.Class</outbound>
                <outbound type="feature" confirmed="no">java.lang.Class.asSubclass(java.lang.Class)</outbound>
                <outbound type="feature" confirmed="no">java.lang.Class.getCanonicalName()</outbound>
                <outbound type="feature" confirmed="no">java.lang.Class.isAssignableFrom(java.lang.Class)</outbound>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="class" confirmed="no">java.lang.StringBuilder</outbound>
                <outbound type="feature" confirmed="no">java.lang.StringBuilder.StringBuilder()</outbound>
                <outbound type="feature" confirmed="no">java.lang.StringBuilder.append(java.lang.String)</outbound>
                <outbound type="feature" confirmed="no">java.lang.StringBuilder.toString()</outbound>
                <outbound type="class" confirmed="yes">junit.framework.Test</outbound>
                <outbound type="class" confirmed="yes">junit.framework.TestCase</outbound>
                <outbound type="feature" confirmed="yes">junit.framework.TestSuite.TestSuite(java.lang.Class)</outbound>
                <outbound type="feature" confirmed="yes">junit.framework.TestSuite.warning(java.lang.String)</outbound>
                <inbound type="feature" confirmed="yes">junit.framework.TestSuite.TestSuite(java.lang.Class[])</inbound>
            </feature>
            <feature confirmed="yes">
                <name>junit.framework.TestSuite.testCount()</name>
                <outbound type="class" confirmed="no">java.util.Vector</outbound>
                <outbound type="feature" confirmed="no">java.util.Vector.size()</outbound>
                <outbound type="feature" confirmed="yes">junit.framework.TestSuite.fTests</outbound>
                <inbound type="feature" confirmed="yes">org.junit.internal.runners.JUnit38ClassRunner.filter(org.junit.runner.manipulation.Filter)</inbound>
                <inbound type="feature" confirmed="yes">org.junit.internal.runners.JUnit38ClassRunner.makeDescription(junit.framework.Test)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>junit.framework.TestSuite.tests()</name>
                <outbound type="class" confirmed="no">java.util.Enumeration</outbound>
                <outbound type="class" confirmed="no">java.util.Vector</outbound>
                <outbound type="feature" confirmed="no">java.util.Vector.elements()</outbound>
                <outbound type="feature" confirmed="yes">junit.framework.TestSuite.fTests</outbound>
            </feature>
            <feature confirmed="yes">
                <name>junit.framework.TestSuite.toString()</name>
                <outbound type="feature" confirmed="no">java.lang.Object.toString()</outbound>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="feature" confirmed="yes">junit.framework.TestSuite.getName()</outbound>
            </feature>
            <feature confirmed="yes">
                <name>junit.framework.TestSuite.warning(java.lang.String)</name>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="class" confirmed="yes">junit.framework.Test</outbound>
                <outbound type="feature" confirmed="yes">junit.framework.TestSuite$1.TestSuite$1(java.lang.String, java.lang.String)</outbound>
                <inbound type="feature" confirmed="yes">junit.framework.TestSuite.addTestMethod(java.lang.reflect.Method, java.util.List, java.lang.Class)</inbound>
                <inbound type="feature" confirmed="yes">junit.framework.TestSuite.addTestsFromTestCase(java.lang.Class)</inbound>
                <inbound type="feature" confirmed="yes">junit.framework.TestSuite.createTest(java.lang.Class, java.lang.String)</inbound>
                <inbound type="feature" confirmed="yes">junit.framework.TestSuite.testCaseForClass(java.lang.Class)</inbound>
            </feature>
        </class>
        <class confirmed="yes">
            <name>junit.framework.TestSuite$1</name>
            <outbound type="class" confirmed="yes">junit.framework.TestCase</outbound>
            <feature confirmed="yes">
                <name>junit.framework.TestSuite$1.TestSuite$1(java.lang.String, java.lang.String)</name>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="feature" confirmed="yes">junit.framework.TestCase.TestCase(java.lang.String)</outbound>
                <outbound type="feature" confirmed="yes">junit.framework.TestSuite$1.val$message</outbound>
                <inbound type="feature" confirmed="yes">junit.framework.TestSuite.warning(java.lang.String)</inbound>
            </feature>
            <feature confirmed="no">
                <name>junit.framework.TestSuite$1.fail(java.lang.String)</name>
                <inbound type="feature" confirmed="yes">junit.framework.TestSuite$1.runTest()</inbound>
            </feature>
            <feature confirmed="yes">
                <name>junit.framework.TestSuite$1.runTest()</name>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="feature" confirmed="no">junit.framework.TestSuite$1.fail(java.lang.String)</outbound>
                <outbound type="feature" confirmed="yes">junit.framework.TestSuite$1.val$message</outbound>
            </feature>
            <feature confirmed="yes">
                <name>junit.framework.TestSuite$1.val$message</name>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <inbound type="feature" confirmed="yes">junit.framework.TestSuite$1.TestSuite$1(java.lang.String, java.lang.String)</inbound>
                <inbound type="feature" confirmed="yes">junit.framework.TestSuite$1.runTest()</inbound>
            </feature>
        </class>
        <class confirmed="yes">
            <name>junit.framework.package-info</name>
            <outbound type="class" confirmed="no">java.lang.Object</outbound>
        </class>
    </package>
    <package confirmed="yes">
        <name>junit.runner</name>
        <class confirmed="yes">
            <name>junit.runner.BaseTestRunner</name>
            <outbound type="class" confirmed="no">java.lang.Object</outbound>
            <outbound type="class" confirmed="yes">junit.framework.TestListener</outbound>
            <inbound type="class" confirmed="yes">junit.textui.TestRunner</inbound>
            <feature confirmed="yes">
                <name>junit.runner.BaseTestRunner.BaseTestRunner()</name>
                <outbound type="feature" confirmed="no">java.lang.Object.Object()</outbound>
                <outbound type="feature" confirmed="yes">junit.runner.BaseTestRunner.fLoading</outbound>
                <inbound type="feature" confirmed="yes">junit.textui.TestRunner.TestRunner(junit.textui.ResultPrinter)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>junit.runner.BaseTestRunner.SUITE_METHODNAME</name>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
            </feature>
            <feature confirmed="yes">
                <name>junit.runner.BaseTestRunner.addError(junit.framework.Test, java.lang.Throwable)</name>
                <outbound type="class" confirmed="no">java.lang.Throwable</outbound>
                <outbound type="class" confirmed="yes">junit.framework.Test</outbound>
                <outbound type="feature" confirmed="yes">junit.runner.BaseTestRunner.testFailed(int, junit.framework.Test, java.lang.Throwable)</outbound>
            </feature>
            <feature confirmed="yes">
                <name>junit.runner.BaseTestRunner.addFailure(junit.framework.Test, junit.framework.AssertionFailedError)</name>
                <outbound type="class" confirmed="no">java.lang.Throwable</outbound>
                <outbound type="class" confirmed="yes">junit.framework.AssertionFailedError</outbound>
                <outbound type="class" confirmed="yes">junit.framework.Test</outbound>
                <outbound type="feature" confirmed="yes">junit.runner.BaseTestRunner.testFailed(int, junit.framework.Test, java.lang.Throwable)</outbound>
            </feature>
            <feature confirmed="yes">
                <name>junit.runner.BaseTestRunner.clearStatus()</name>
                <inbound type="feature" confirmed="yes">junit.runner.BaseTestRunner.getTest(java.lang.String)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>junit.runner.BaseTestRunner.elapsedTimeAsString(long)</name>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="class" confirmed="no">java.text.NumberFormat</outbound>
                <outbound type="feature" confirmed="no">java.text.NumberFormat.format(double)</outbound>
                <outbound type="feature" confirmed="no">java.text.NumberFormat.getInstance()</outbound>
            </feature>
            <feature confirmed="yes">
                <name>junit.runner.BaseTestRunner.endTest(junit.framework.Test)</name>
                <outbound type="feature" confirmed="no">java.lang.Object.toString()</outbound>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="class" confirmed="yes">junit.framework.Test</outbound>
                <outbound type="feature" confirmed="yes">junit.runner.BaseTestRunner.testEnded(java.lang.String)</outbound>
            </feature>
            <feature confirmed="yes">
                <name>junit.runner.BaseTestRunner.extractClassName(java.lang.String)</name>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="feature" confirmed="no">java.lang.String.lastIndexOf(java.lang.String)</outbound>
                <outbound type="feature" confirmed="no">java.lang.String.startsWith(java.lang.String)</outbound>
                <outbound type="feature" confirmed="no">java.lang.String.substring(int)</outbound>
                <inbound type="feature" confirmed="yes">junit.runner.BaseTestRunner.processArguments(java.lang.String[])</inbound>
            </feature>
            <feature confirmed="yes">
                <name>junit.runner.BaseTestRunner.fLoading</name>
                <inbound type="feature" confirmed="yes">junit.runner.BaseTestRunner.BaseTestRunner()</inbound>
                <inbound type="feature" confirmed="yes">junit.runner.BaseTestRunner.setLoading(boolean)</inbound>
                <inbound type="feature" confirmed="yes">junit.runner.BaseTestRunner.useReloadingTestSuiteLoader()</inbound>
            </feature>
            <feature confirmed="yes">
                <name>junit.runner.BaseTestRunner.fPreferences</name>
                <outbound type="class" confirmed="no">java.util.Properties</outbound>
                <inbound type="feature" confirmed="yes">junit.runner.BaseTestRunner.getPreferences()</inbound>
                <inbound type="feature" confirmed="yes">junit.runner.BaseTestRunner.setPreferences(java.util.Properties)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>junit.runner.BaseTestRunner.fgFilterStack</name>
                <inbound type="feature" confirmed="yes">junit.runner.BaseTestRunner.processArguments(java.lang.String[])</inbound>
                <inbound type="feature" confirmed="yes">junit.runner.BaseTestRunner.showStackRaw()</inbound>
                <inbound type="feature" confirmed="yes">junit.runner.BaseTestRunner.static {}</inbound>
            </feature>
            <feature confirmed="yes">
                <name>junit.runner.BaseTestRunner.fgMaxMessageLength</name>
                <inbound type="feature" confirmed="yes">junit.runner.BaseTestRunner.static {}</inbound>
                <inbound type="feature" confirmed="yes">junit.runner.BaseTestRunner.truncate(java.lang.String)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>junit.runner.BaseTestRunner.filterLine(java.lang.String)</name>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="feature" confirmed="no">java.lang.String.indexOf(java.lang.String)</outbound>
                <inbound type="feature" confirmed="yes">junit.runner.BaseTestRunner.getFilteredTrace(java.lang.String)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>junit.runner.BaseTestRunner.getFilteredTrace(java.lang.String)</name>
                <outbound type="feature" confirmed="no">java.io.BufferedReader.BufferedReader(java.io.Reader)</outbound>
                <outbound type="feature" confirmed="no">java.io.BufferedReader.readLine()</outbound>
                <outbound type="feature" confirmed="no">java.io.PrintWriter.PrintWriter(java.io.Writer)</outbound>
                <outbound type="feature" confirmed="no">java.io.PrintWriter.println(java.lang.String)</outbound>
                <outbound type="class" confirmed="no">java.io.Reader</outbound>
                <outbound type="feature" confirmed="no">java.io.StringReader.StringReader(java.lang.String)</outbound>
                <outbound type="feature" confirmed="no">java.io.StringWriter.StringWriter()</outbound>
                <outbound type="feature" confirmed="no">java.io.StringWriter.toString()</outbound>
                <outbound type="class" confirmed="no">java.io.Writer</outbound>
                <outbound type="class" confirmed="no">java.lang.Exception</outbound>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="feature" confirmed="yes">junit.runner.BaseTestRunner.filterLine(java.lang.String)</outbound>
                <outbound type="feature" confirmed="yes">junit.runner.BaseTestRunner.showStackRaw()</outbound>
                <inbound type="feature" confirmed="yes">junit.runner.BaseTestRunner.getFilteredTrace(java.lang.Throwable)</inbound>
                <inbound type="feature" confirmed="yes">junit.textui.ResultPrinter.printDefectTrace(junit.framework.TestFailure)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>junit.runner.BaseTestRunner.getFilteredTrace(java.lang.Throwable)</name>
                <outbound type="class" confirmed="no">java.io.PrintWriter</outbound>
                <outbound type="feature" confirmed="no">java.io.PrintWriter.PrintWriter(java.io.Writer)</outbound>
                <outbound type="feature" confirmed="no">java.io.StringWriter.StringWriter()</outbound>
                <outbound type="feature" confirmed="no">java.io.StringWriter.getBuffer()</outbound>
                <outbound type="class" confirmed="no">java.io.Writer</outbound>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="class" confirmed="no">java.lang.StringBuffer</outbound>
                <outbound type="feature" confirmed="no">java.lang.StringBuffer.toString()</outbound>
                <outbound type="class" confirmed="no">java.lang.Throwable</outbound>
                <outbound type="feature" confirmed="no">java.lang.Throwable.printStackTrace(java.io.PrintWriter)</outbound>
                <outbound type="feature" confirmed="yes">junit.runner.BaseTestRunner.getFilteredTrace(java.lang.String)</outbound>
            </feature>
            <feature confirmed="yes">
                <name>junit.runner.BaseTestRunner.getPreference(java.lang.String)</name>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="class" confirmed="no">java.util.Properties</outbound>
                <outbound type="feature" confirmed="no">java.util.Properties.getProperty(java.lang.String)</outbound>
                <outbound type="feature" confirmed="yes">junit.runner.BaseTestRunner.getPreferences()</outbound>
                <inbound type="feature" confirmed="yes">junit.runner.BaseTestRunner.getPreference(java.lang.String, int)</inbound>
                <inbound type="feature" confirmed="yes">junit.runner.BaseTestRunner.showStackRaw()</inbound>
                <inbound type="feature" confirmed="yes">junit.runner.BaseTestRunner.useReloadingTestSuiteLoader()</inbound>
            </feature>
            <feature confirmed="yes">
                <name>junit.runner.BaseTestRunner.getPreference(java.lang.String, int)</name>
                <outbound type="feature" confirmed="no">java.lang.Integer.parseInt(java.lang.String)</outbound>
                <outbound type="class" confirmed="no">java.lang.NumberFormatException</outbound>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="feature" confirmed="yes">junit.runner.BaseTestRunner.getPreference(java.lang.String)</outbound>
                <inbound type="feature" confirmed="yes">junit.runner.BaseTestRunner.static {}</inbound>
            </feature>
            <feature confirmed="yes">
                <name>junit.runner.BaseTestRunner.getPreferences()</name>
                <outbound type="class" confirmed="no">java.lang.Object</outbound>
                <outbound type="class" confirmed="no">java.util.Properties</outbound>
                <outbound type="feature" confirmed="no">java.util.Properties.Properties()</outbound>
                <outbound type="feature" confirmed="no">java.util.Properties.put(java.lang.Object, java.lang.Object)</outbound>
                <outbound type="feature" confirmed="yes">junit.runner.BaseTestRunner.fPreferences</outbound>
                <outbound type="feature" confirmed="yes">junit.runner.BaseTestRunner.readPreferences()</outbound>
                <inbound type="feature" confirmed="yes">junit.runner.BaseTestRunner.getPreference(java.lang.String)</inbound>
                <inbound type="feature" confirmed="yes">junit.runner.BaseTestRunner.readPreferences()</inbound>
                <inbound type="feature" confirmed="yes">junit.runner.BaseTestRunner.savePreferences()</inbound>
                <inbound type="feature" confirmed="yes">junit.runner.BaseTestRunner.setPreference(java.lang.String, java.lang.String)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>junit.runner.BaseTestRunner.getPreferencesFile()</name>
                <outbound type="class" confirmed="no">java.io.File</outbound>
                <outbound type="feature" confirmed="no">java.io.File.File(java.lang.String, java.lang.String)</outbound>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="feature" confirmed="no">java.lang.System.getProperty(java.lang.String)</outbound>
                <inbound type="feature" confirmed="yes">junit.runner.BaseTestRunner.readPreferences()</inbound>
                <inbound type="feature" confirmed="yes">junit.runner.BaseTestRunner.savePreferences()</inbound>
            </feature>
            <feature confirmed="yes">
                <name>junit.runner.BaseTestRunner.getTest(java.lang.String)</name>
                <outbound type="class" confirmed="no">java.lang.Class</outbound>
                <outbound type="feature" confirmed="no">java.lang.Class.getMethod(java.lang.String, java.lang.Class[])</outbound>
                <outbound type="class" confirmed="no">java.lang.ClassNotFoundException</outbound>
                <outbound type="feature" confirmed="no">java.lang.ClassNotFoundException.getMessage()</outbound>
                <outbound type="class" confirmed="no">java.lang.Exception</outbound>
                <outbound type="feature" confirmed="no">java.lang.Exception.toString()</outbound>
                <outbound type="class" confirmed="no">java.lang.IllegalAccessException</outbound>
                <outbound type="feature" confirmed="no">java.lang.IllegalAccessException.toString()</outbound>
                <outbound type="class" confirmed="no">java.lang.Object</outbound>
                <outbound type="class" confirmed="no">java.lang.Object[]</outbound>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="feature" confirmed="no">java.lang.String.length()</outbound>
                <outbound type="class" confirmed="no">java.lang.StringBuilder</outbound>
                <outbound type="feature" confirmed="no">java.lang.StringBuilder.StringBuilder()</outbound>
                <outbound type="feature" confirmed="no">java.lang.StringBuilder.append(java.lang.String)</outbound>
                <outbound type="feature" confirmed="no">java.lang.StringBuilder.toString()</outbound>
                <outbound type="class" confirmed="no">java.lang.Throwable</outbound>
                <outbound type="feature" confirmed="no">java.lang.Throwable.toString()</outbound>
                <outbound type="class" confirmed="no">java.lang.reflect.InvocationTargetException</outbound>
                <outbound type="feature" confirmed="no">java.lang.reflect.InvocationTargetException.getTargetException()</outbound>
                <outbound type="class" confirmed="no">java.lang.reflect.Method</outbound>
                <outbound type="feature" confirmed="no">java.lang.reflect.Method.getModifiers()</outbound>
                <outbound type="feature" confirmed="no">java.lang.reflect.Method.invoke(java.lang.Object, java.lang.Object[])</outbound>
                <outbound type="feature" confirmed="no">java.lang.reflect.Modifier.isStatic(int)</outbound>
                <outbound type="class" confirmed="yes">junit.framework.Test</outbound>
                <outbound type="feature" confirmed="yes">junit.framework.TestSuite.TestSuite(java.lang.Class)</outbound>
                <outbound type="feature" confirmed="yes">junit.runner.BaseTestRunner.clearStatus()</outbound>
                <outbound type="feature" confirmed="yes">junit.runner.BaseTestRunner.loadSuiteClass(java.lang.String)</outbound>
                <outbound type="feature" confirmed="yes">junit.runner.BaseTestRunner.runFailed(java.lang.String)</outbound>
            </feature>
            <feature confirmed="yes">
                <name>junit.runner.BaseTestRunner.loadSuiteClass(java.lang.String)</name>
                <outbound type="class" confirmed="no">java.lang.Class</outbound>
                <outbound type="feature" confirmed="no">java.lang.Class.forName(java.lang.String)</outbound>
                <outbound type="class" confirmed="no">java.lang.ClassNotFoundException</outbound>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <inbound type="feature" confirmed="yes">junit.runner.BaseTestRunner.getTest(java.lang.String)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>junit.runner.BaseTestRunner.processArguments(java.lang.String[])</name>
                <outbound type="class" confirmed="no">java.io.PrintStream</outbound>
                <outbound type="feature" confirmed="no">java.io.PrintStream.println(java.lang.String)</outbound>
                <outbound type="class" confirmed="no">java.lang.Object</outbound>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="feature" confirmed="no">java.lang.String.equals(java.lang.Object)</outbound>
                <outbound type="feature" confirmed="no">java.lang.System.out</outbound>
                <outbound type="feature" confirmed="yes">junit.runner.BaseTestRunner.extractClassName(java.lang.String)</outbound>
                <outbound type="feature" confirmed="yes">junit.runner.BaseTestRunner.fgFilterStack</outbound>
                <outbound type="feature" confirmed="yes">junit.runner.BaseTestRunner.setLoading(boolean)</outbound>
            </feature>
            <feature confirmed="yes">
                <name>junit.runner.BaseTestRunner.readPreferences()</name>
                <outbound type="class" confirmed="no">java.io.File</outbound>
                <outbound type="feature" confirmed="no">java.io.FileInputStream.FileInputStream(java.io.File)</outbound>
                <outbound type="class" confirmed="no">java.io.IOException</outbound>
                <outbound type="class" confirmed="no">java.io.InputStream</outbound>
                <outbound type="feature" confirmed="no">java.io.InputStream.close()</outbound>
                <outbound type="class" confirmed="no">java.util.Properties</outbound>
                <outbound type="feature" confirmed="no">java.util.Properties.Properties(java.util.Properties)</outbound>
                <outbound type="feature" confirmed="no">java.util.Properties.load(java.io.InputStream)</outbound>
                <outbound type="feature" confirmed="yes">junit.runner.BaseTestRunner.getPreferences()</outbound>
                <outbound type="feature" confirmed="yes">junit.runner.BaseTestRunner.getPreferencesFile()</outbound>
                <outbound type="feature" confirmed="yes">junit.runner.BaseTestRunner.setPreferences(java.util.Properties)</outbound>
                <inbound type="feature" confirmed="yes">junit.runner.BaseTestRunner.getPreferences()</inbound>
            </feature>
            <feature confirmed="yes">
                <name>junit.runner.BaseTestRunner.runFailed(java.lang.String)</name>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <inbound type="feature" confirmed="yes">junit.runner.BaseTestRunner.getTest(java.lang.String)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>junit.runner.BaseTestRunner.savePreferences()</name>
                <outbound type="class" confirmed="no">java.io.File</outbound>
                <outbound type="feature" confirmed="no">java.io.FileOutputStream.FileOutputStream(java.io.File)</outbound>
                <outbound type="feature" confirmed="no">java.io.FileOutputStream.close()</outbound>
                <outbound type="class" confirmed="no">java.io.IOException</outbound>
                <outbound type="class" confirmed="no">java.io.OutputStream</outbound>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="class" confirmed="no">java.util.Properties</outbound>
                <outbound type="feature" confirmed="no">java.util.Properties.store(java.io.OutputStream, java.lang.String)</outbound>
                <outbound type="feature" confirmed="yes">junit.runner.BaseTestRunner.getPreferences()</outbound>
                <outbound type="feature" confirmed="yes">junit.runner.BaseTestRunner.getPreferencesFile()</outbound>
            </feature>
            <feature confirmed="yes">
                <name>junit.runner.BaseTestRunner.setLoading(boolean)</name>
                <outbound type="feature" confirmed="yes">junit.runner.BaseTestRunner.fLoading</outbound>
                <inbound type="feature" confirmed="yes">junit.runner.BaseTestRunner.processArguments(java.lang.String[])</inbound>
            </feature>
            <feature confirmed="yes">
                <name>junit.runner.BaseTestRunner.setPreference(java.lang.String, java.lang.String)</name>
                <outbound type="class" confirmed="no">java.lang.Object</outbound>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="class" confirmed="no">java.util.Properties</outbound>
                <outbound type="feature" confirmed="no">java.util.Properties.put(java.lang.Object, java.lang.Object)</outbound>
                <outbound type="feature" confirmed="yes">junit.runner.BaseTestRunner.getPreferences()</outbound>
            </feature>
            <feature confirmed="yes">
                <name>junit.runner.BaseTestRunner.setPreferences(java.util.Properties)</name>
                <outbound type="class" confirmed="no">java.util.Properties</outbound>
                <outbound type="feature" confirmed="yes">junit.runner.BaseTestRunner.fPreferences</outbound>
                <inbound type="feature" confirmed="yes">junit.runner.BaseTestRunner.readPreferences()</inbound>
            </feature>
            <feature confirmed="yes">
                <name>junit.runner.BaseTestRunner.showStackRaw()</name>
                <outbound type="class" confirmed="no">java.lang.Object</outbound>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="feature" confirmed="no">java.lang.String.equals(java.lang.Object)</outbound>
                <outbound type="feature" confirmed="yes">junit.runner.BaseTestRunner.fgFilterStack</outbound>
                <outbound type="feature" confirmed="yes">junit.runner.BaseTestRunner.getPreference(java.lang.String)</outbound>
                <inbound type="feature" confirmed="yes">junit.runner.BaseTestRunner.getFilteredTrace(java.lang.String)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>junit.runner.BaseTestRunner.startTest(junit.framework.Test)</name>
                <outbound type="feature" confirmed="no">java.lang.Object.toString()</outbound>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="class" confirmed="yes">junit.framework.Test</outbound>
                <outbound type="feature" confirmed="yes">junit.runner.BaseTestRunner.testStarted(java.lang.String)</outbound>
            </feature>
            <feature confirmed="yes">
                <name>junit.runner.BaseTestRunner.static {}</name>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="feature" confirmed="yes">junit.runner.BaseTestRunner.fgFilterStack</outbound>
                <outbound type="feature" confirmed="yes">junit.runner.BaseTestRunner.fgMaxMessageLength</outbound>
                <outbound type="feature" confirmed="yes">junit.runner.BaseTestRunner.getPreference(java.lang.String, int)</outbound>
            </feature>
            <feature confirmed="yes">
                <name>junit.runner.BaseTestRunner.testEnded(java.lang.String)</name>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <inbound type="feature" confirmed="yes">junit.runner.BaseTestRunner.endTest(junit.framework.Test)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>junit.runner.BaseTestRunner.testFailed(int, junit.framework.Test, java.lang.Throwable)</name>
                <outbound type="class" confirmed="no">java.lang.Throwable</outbound>
                <outbound type="class" confirmed="yes">junit.framework.Test</outbound>
                <inbound type="feature" confirmed="yes">junit.runner.BaseTestRunner.addError(junit.framework.Test, java.lang.Throwable)</inbound>
                <inbound type="feature" confirmed="yes">junit.runner.BaseTestRunner.addFailure(junit.framework.Test, junit.framework.AssertionFailedError)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>junit.runner.BaseTestRunner.testStarted(java.lang.String)</name>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <inbound type="feature" confirmed="yes">junit.runner.BaseTestRunner.startTest(junit.framework.Test)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>junit.runner.BaseTestRunner.truncate(java.lang.String)</name>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="feature" confirmed="no">java.lang.String.length()</outbound>
                <outbound type="feature" confirmed="no">java.lang.String.substring(int, int)</outbound>
                <outbound type="class" confirmed="no">java.lang.StringBuilder</outbound>
                <outbound type="feature" confirmed="no">java.lang.StringBuilder.StringBuilder()</outbound>
                <outbound type="feature" confirmed="no">java.lang.StringBuilder.append(java.lang.String)</outbound>
                <outbound type="feature" confirmed="no">java.lang.StringBuilder.toString()</outbound>
                <outbound type="feature" confirmed="yes">junit.runner.BaseTestRunner.fgMaxMessageLength</outbound>
            </feature>
            <feature confirmed="yes">
                <name>junit.runner.BaseTestRunner.useReloadingTestSuiteLoader()</name>
                <outbound type="class" confirmed="no">java.lang.Object</outbound>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="feature" confirmed="no">java.lang.String.equals(java.lang.Object)</outbound>
                <outbound type="feature" confirmed="yes">junit.runner.BaseTestRunner.fLoading</outbound>
                <outbound type="feature" confirmed="yes">junit.runner.BaseTestRunner.getPreference(java.lang.String)</outbound>
            </feature>
        </class>
        <class confirmed="yes">
            <name>junit.runner.TestRunListener</name>
            <outbound type="class" confirmed="no">java.lang.Object</outbound>
            <feature confirmed="yes">
                <name>junit.runner.TestRunListener.STATUS_ERROR</name>
            </feature>
            <feature confirmed="yes">
                <name>junit.runner.TestRunListener.STATUS_FAILURE</name>
            </feature>
            <feature confirmed="yes">
                <name>junit.runner.TestRunListener.testEnded(java.lang.String)</name>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
            </feature>
            <feature confirmed="yes">
                <name>junit.runner.TestRunListener.testFailed(int, java.lang.String, java.lang.String)</name>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
            </feature>
            <feature confirmed="yes">
                <name>junit.runner.TestRunListener.testRunEnded(long)</name>
            </feature>
            <feature confirmed="yes">
                <name>junit.runner.TestRunListener.testRunStarted(java.lang.String, int)</name>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
            </feature>
            <feature confirmed="yes">
                <name>junit.runner.TestRunListener.testRunStopped(long)</name>
            </feature>
            <feature confirmed="yes">
                <name>junit.runner.TestRunListener.testStarted(java.lang.String)</name>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
            </feature>
        </class>
        <class confirmed="yes">
            <name>junit.runner.Version</name>
            <outbound type="class" confirmed="no">java.lang.Object</outbound>
            <feature confirmed="yes">
                <name>junit.runner.Version.Version()</name>
                <outbound type="feature" confirmed="no">java.lang.Object.Object()</outbound>
            </feature>
            <feature confirmed="yes">
                <name>junit.runner.Version.id()</name>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <inbound type="feature" confirmed="yes">junit.runner.Version.main(java.lang.String[])</inbound>
                <inbound type="feature" confirmed="yes">junit.textui.TestRunner.start(java.lang.String[])</inbound>
                <inbound type="feature" confirmed="yes">org.junit.runner.JUnitCore.getVersion()</inbound>
                <inbound type="feature" confirmed="yes">org.junit.runner.JUnitCore.runMain(org.junit.internal.JUnitSystem, java.lang.String[])</inbound>
            </feature>
            <feature confirmed="yes">
                <name>junit.runner.Version.main(java.lang.String[])</name>
                <outbound type="class" confirmed="no">java.io.PrintStream</outbound>
                <outbound type="feature" confirmed="no">java.io.PrintStream.println(java.lang.String)</outbound>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="feature" confirmed="no">java.lang.System.out</outbound>
                <outbound type="feature" confirmed="yes">junit.runner.Version.id()</outbound>
            </feature>
        </class>
        <class confirmed="yes">
            <name>junit.runner.package-info</name>
            <outbound type="class" confirmed="no">java.lang.Object</outbound>
        </class>
    </package>
    <package confirmed="yes">
        <name>junit.textui</name>
        <class confirmed="yes">
            <name>junit.textui.ResultPrinter</name>
            <outbound type="class" confirmed="no">java.lang.Object</outbound>
            <outbound type="class" confirmed="yes">junit.framework.TestListener</outbound>
            <inbound type="feature" confirmed="yes">junit.textui.TestRunner.TestRunner(java.io.PrintStream)</inbound>
            <inbound type="feature" confirmed="yes">junit.textui.TestRunner.TestRunner(junit.textui.ResultPrinter)</inbound>
            <inbound type="feature" confirmed="yes">junit.textui.TestRunner.doRun(junit.framework.Test, boolean)</inbound>
            <inbound type="feature" confirmed="yes">junit.textui.TestRunner.fPrinter</inbound>
            <inbound type="feature" confirmed="yes">junit.textui.TestRunner.pause(boolean)</inbound>
            <inbound type="feature" confirmed="yes">junit.textui.TestRunner.setPrinter(junit.textui.ResultPrinter)</inbound>
            <feature confirmed="yes">
                <name>junit.textui.ResultPrinter.ResultPrinter(java.io.PrintStream)</name>
                <outbound type="class" confirmed="no">java.io.PrintStream</outbound>
                <outbound type="feature" confirmed="no">java.lang.Object.Object()</outbound>
                <outbound type="feature" confirmed="yes">junit.textui.ResultPrinter.fColumn</outbound>
                <outbound type="feature" confirmed="yes">junit.textui.ResultPrinter.fWriter</outbound>
                <inbound type="feature" confirmed="yes">junit.textui.TestRunner.TestRunner(java.io.PrintStream)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>junit.textui.ResultPrinter.addError(junit.framework.Test, java.lang.Throwable)</name>
                <outbound type="class" confirmed="no">java.io.PrintStream</outbound>
                <outbound type="feature" confirmed="no">java.io.PrintStream.print(java.lang.String)</outbound>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="class" confirmed="no">java.lang.Throwable</outbound>
                <outbound type="class" confirmed="yes">junit.framework.Test</outbound>
                <outbound type="feature" confirmed="yes">junit.textui.ResultPrinter.getWriter()</outbound>
            </feature>
            <feature confirmed="yes">
                <name>junit.textui.ResultPrinter.addFailure(junit.framework.Test, junit.framework.AssertionFailedError)</name>
                <outbound type="class" confirmed="no">java.io.PrintStream</outbound>
                <outbound type="feature" confirmed="no">java.io.PrintStream.print(java.lang.String)</outbound>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="class" confirmed="yes">junit.framework.AssertionFailedError</outbound>
                <outbound type="class" confirmed="yes">junit.framework.Test</outbound>
                <outbound type="feature" confirmed="yes">junit.textui.ResultPrinter.getWriter()</outbound>
            </feature>
            <feature confirmed="yes">
                <name>junit.textui.ResultPrinter.elapsedTimeAsString(long)</name>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="class" confirmed="no">java.text.NumberFormat</outbound>
                <outbound type="feature" confirmed="no">java.text.NumberFormat.format(double)</outbound>
                <outbound type="feature" confirmed="no">java.text.NumberFormat.getInstance()</outbound>
                <inbound type="feature" confirmed="yes">junit.textui.ResultPrinter.printHeader(long)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>junit.textui.ResultPrinter.endTest(junit.framework.Test)</name>
                <outbound type="class" confirmed="yes">junit.framework.Test</outbound>
            </feature>
            <feature confirmed="yes">
                <name>junit.textui.ResultPrinter.fColumn</name>
                <inbound type="feature" confirmed="yes">junit.textui.ResultPrinter.ResultPrinter(java.io.PrintStream)</inbound>
                <inbound type="feature" confirmed="yes">junit.textui.ResultPrinter.startTest(junit.framework.Test)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>junit.textui.ResultPrinter.fWriter</name>
                <outbound type="class" confirmed="no">java.io.PrintStream</outbound>
                <inbound type="feature" confirmed="yes">junit.textui.ResultPrinter.ResultPrinter(java.io.PrintStream)</inbound>
                <inbound type="feature" confirmed="yes">junit.textui.ResultPrinter.getWriter()</inbound>
            </feature>
            <feature confirmed="yes">
                <name>junit.textui.ResultPrinter.getWriter()</name>
                <outbound type="class" confirmed="no">java.io.PrintStream</outbound>
                <outbound type="feature" confirmed="yes">junit.textui.ResultPrinter.fWriter</outbound>
                <inbound type="feature" confirmed="yes">junit.textui.ResultPrinter.addError(junit.framework.Test, java.lang.Throwable)</inbound>
                <inbound type="feature" confirmed="yes">junit.textui.ResultPrinter.addFailure(junit.framework.Test, junit.framework.AssertionFailedError)</inbound>
                <inbound type="feature" confirmed="yes">junit.textui.ResultPrinter.printDefectHeader(junit.framework.TestFailure, int)</inbound>
                <inbound type="feature" confirmed="yes">junit.textui.ResultPrinter.printDefectTrace(junit.framework.TestFailure)</inbound>
                <inbound type="feature" confirmed="yes">junit.textui.ResultPrinter.printDefects(java.util.Enumeration, int, java.lang.String)</inbound>
                <inbound type="feature" confirmed="yes">junit.textui.ResultPrinter.printFooter(junit.framework.TestResult)</inbound>
                <inbound type="feature" confirmed="yes">junit.textui.ResultPrinter.printHeader(long)</inbound>
                <inbound type="feature" confirmed="yes">junit.textui.ResultPrinter.printWaitPrompt()</inbound>
                <inbound type="feature" confirmed="yes">junit.textui.ResultPrinter.startTest(junit.framework.Test)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>junit.textui.ResultPrinter.print(junit.framework.TestResult, long)</name>
                <outbound type="class" confirmed="yes">junit.framework.TestResult</outbound>
                <outbound type="feature" confirmed="yes">junit.textui.ResultPrinter.printErrors(junit.framework.TestResult)</outbound>
                <outbound type="feature" confirmed="yes">junit.textui.ResultPrinter.printFailures(junit.framework.TestResult)</outbound>
                <outbound type="feature" confirmed="yes">junit.textui.ResultPrinter.printFooter(junit.framework.TestResult)</outbound>
                <outbound type="feature" confirmed="yes">junit.textui.ResultPrinter.printHeader(long)</outbound>
                <inbound type="feature" confirmed="yes">junit.textui.TestRunner.doRun(junit.framework.Test, boolean)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>junit.textui.ResultPrinter.printDefect(junit.framework.TestFailure, int)</name>
                <outbound type="class" confirmed="yes">junit.framework.TestFailure</outbound>
                <outbound type="feature" confirmed="yes">junit.textui.ResultPrinter.printDefectHeader(junit.framework.TestFailure, int)</outbound>
                <outbound type="feature" confirmed="yes">junit.textui.ResultPrinter.printDefectTrace(junit.framework.TestFailure)</outbound>
                <inbound type="feature" confirmed="yes">junit.textui.ResultPrinter.printDefects(java.util.Enumeration, int, java.lang.String)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>junit.textui.ResultPrinter.printDefectHeader(junit.framework.TestFailure, int)</name>
                <outbound type="class" confirmed="no">java.io.PrintStream</outbound>
                <outbound type="feature" confirmed="no">java.io.PrintStream.print(java.lang.String)</outbound>
                <outbound type="class" confirmed="no">java.lang.Object</outbound>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="class" confirmed="no">java.lang.StringBuilder</outbound>
                <outbound type="feature" confirmed="no">java.lang.StringBuilder.StringBuilder()</outbound>
                <outbound type="feature" confirmed="no">java.lang.StringBuilder.append(int)</outbound>
                <outbound type="feature" confirmed="no">java.lang.StringBuilder.append(java.lang.Object)</outbound>
                <outbound type="feature" confirmed="no">java.lang.StringBuilder.append(java.lang.String)</outbound>
                <outbound type="feature" confirmed="no">java.lang.StringBuilder.toString()</outbound>
                <outbound type="class" confirmed="yes">junit.framework.Test</outbound>
                <outbound type="class" confirmed="yes">junit.framework.TestFailure</outbound>
                <outbound type="feature" confirmed="yes">junit.framework.TestFailure.failedTest()</outbound>
                <outbound type="feature" confirmed="yes">junit.textui.ResultPrinter.getWriter()</outbound>
                <inbound type="feature" confirmed="yes">junit.textui.ResultPrinter.printDefect(junit.framework.TestFailure, int)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>junit.textui.ResultPrinter.printDefectTrace(junit.framework.TestFailure)</name>
                <outbound type="class" confirmed="no">java.io.PrintStream</outbound>
                <outbound type="feature" confirmed="no">java.io.PrintStream.print(java.lang.String)</outbound>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="class" confirmed="yes">junit.framework.TestFailure</outbound>
                <outbound type="feature" confirmed="yes">junit.framework.TestFailure.trace()</outbound>
                <outbound type="feature" confirmed="yes">junit.runner.BaseTestRunner.getFilteredTrace(java.lang.String)</outbound>
                <outbound type="feature" confirmed="yes">junit.textui.ResultPrinter.getWriter()</outbound>
                <inbound type="feature" confirmed="yes">junit.textui.ResultPrinter.printDefect(junit.framework.TestFailure, int)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>junit.textui.ResultPrinter.printDefects(java.util.Enumeration, int, java.lang.String)</name>
                <outbound type="class" confirmed="no">java.io.PrintStream</outbound>
                <outbound type="feature" confirmed="no">java.io.PrintStream.println(java.lang.String)</outbound>
                <outbound type="class" confirmed="no">java.lang.Object</outbound>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="class" confirmed="no">java.lang.StringBuilder</outbound>
                <outbound type="feature" confirmed="no">java.lang.StringBuilder.StringBuilder()</outbound>
                <outbound type="feature" confirmed="no">java.lang.StringBuilder.append(int)</outbound>
                <outbound type="feature" confirmed="no">java.lang.StringBuilder.append(java.lang.String)</outbound>
                <outbound type="feature" confirmed="no">java.lang.StringBuilder.toString()</outbound>
                <outbound type="class" confirmed="no">java.util.Enumeration</outbound>
                <outbound type="feature" confirmed="no">java.util.Enumeration.hasMoreElements()</outbound>
                <outbound type="feature" confirmed="no">java.util.Enumeration.nextElement()</outbound>
                <outbound type="class" confirmed="yes">junit.framework.TestFailure</outbound>
                <outbound type="feature" confirmed="yes">junit.textui.ResultPrinter.getWriter()</outbound>
                <outbound type="feature" confirmed="yes">junit.textui.ResultPrinter.printDefect(junit.framework.TestFailure, int)</outbound>
                <inbound type="feature" confirmed="yes">junit.textui.ResultPrinter.printErrors(junit.framework.TestResult)</inbound>
                <inbound type="feature" confirmed="yes">junit.textui.ResultPrinter.printFailures(junit.framework.TestResult)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>junit.textui.ResultPrinter.printErrors(junit.framework.TestResult)</name>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="class" confirmed="no">java.util.Enumeration</outbound>
                <outbound type="class" confirmed="yes">junit.framework.TestResult</outbound>
                <outbound type="feature" confirmed="yes">junit.framework.TestResult.errorCount()</outbound>
                <outbound type="feature" confirmed="yes">junit.framework.TestResult.errors()</outbound>
                <outbound type="feature" confirmed="yes">junit.textui.ResultPrinter.printDefects(java.util.Enumeration, int, java.lang.String)</outbound>
                <inbound type="feature" confirmed="yes">junit.textui.ResultPrinter.print(junit.framework.TestResult, long)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>junit.textui.ResultPrinter.printFailures(junit.framework.TestResult)</name>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="class" confirmed="no">java.util.Enumeration</outbound>
                <outbound type="class" confirmed="yes">junit.framework.TestResult</outbound>
                <outbound type="feature" confirmed="yes">junit.framework.TestResult.failureCount()</outbound>
                <outbound type="feature" confirmed="yes">junit.framework.TestResult.failures()</outbound>
                <outbound type="feature" confirmed="yes">junit.textui.ResultPrinter.printDefects(java.util.Enumeration, int, java.lang.String)</outbound>
                <inbound type="feature" confirmed="yes">junit.textui.ResultPrinter.print(junit.framework.TestResult, long)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>junit.textui.ResultPrinter.printFooter(junit.framework.TestResult)</name>
                <outbound type="class" confirmed="no">java.io.PrintStream</outbound>
                <outbound type="feature" confirmed="no">java.io.PrintStream.print(java.lang.String)</outbound>
                <outbound type="feature" confirmed="no">java.io.PrintStream.println()</outbound>
                <outbound type="feature" confirmed="no">java.io.PrintStream.println(java.lang.String)</outbound>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="class" confirmed="no">java.lang.StringBuilder</outbound>
                <outbound type="feature" confirmed="no">java.lang.StringBuilder.StringBuilder()</outbound>
                <outbound type="feature" confirmed="no">java.lang.StringBuilder.append(int)</outbound>
                <outbound type="feature" confirmed="no">java.lang.StringBuilder.append(java.lang.String)</outbound>
                <outbound type="feature" confirmed="no">java.lang.StringBuilder.toString()</outbound>
                <outbound type="class" confirmed="yes">junit.framework.TestResult</outbound>
                <outbound type="feature" confirmed="yes">junit.framework.TestResult.errorCount()</outbound>
                <outbound type="feature" confirmed="yes">junit.framework.TestResult.failureCount()</outbound>
                <outbound type="feature" confirmed="yes">junit.framework.TestResult.runCount()</outbound>
                <outbound type="feature" confirmed="yes">junit.framework.TestResult.wasSuccessful()</outbound>
                <outbound type="feature" confirmed="yes">junit.textui.ResultPrinter.getWriter()</outbound>
                <inbound type="feature" confirmed="yes">junit.textui.ResultPrinter.print(junit.framework.TestResult, long)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>junit.textui.ResultPrinter.printHeader(long)</name>
                <outbound type="class" confirmed="no">java.io.PrintStream</outbound>
                <outbound type="feature" confirmed="no">java.io.PrintStream.println()</outbound>
                <outbound type="feature" confirmed="no">java.io.PrintStream.println(java.lang.String)</outbound>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="class" confirmed="no">java.lang.StringBuilder</outbound>
                <outbound type="feature" confirmed="no">java.lang.StringBuilder.StringBuilder()</outbound>
                <outbound type="feature" confirmed="no">java.lang.StringBuilder.append(java.lang.String)</outbound>
                <outbound type="feature" confirmed="no">java.lang.StringBuilder.toString()</outbound>
                <outbound type="feature" confirmed="yes">junit.textui.ResultPrinter.elapsedTimeAsString(long)</outbound>
                <outbound type="feature" confirmed="yes">junit.textui.ResultPrinter.getWriter()</outbound>
                <inbound type="feature" confirmed="yes">junit.textui.ResultPrinter.print(junit.framework.TestResult, long)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>junit.textui.ResultPrinter.printWaitPrompt()</name>
                <outbound type="class" confirmed="no">java.io.PrintStream</outbound>
                <outbound type="feature" confirmed="no">java.io.PrintStream.println()</outbound>
                <outbound type="feature" confirmed="no">java.io.PrintStream.println(java.lang.String)</outbound>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="feature" confirmed="yes">junit.textui.ResultPrinter.getWriter()</outbound>
                <inbound type="feature" confirmed="yes">junit.textui.TestRunner.pause(boolean)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>junit.textui.ResultPrinter.startTest(junit.framework.Test)</name>
                <outbound type="class" confirmed="no">java.io.PrintStream</outbound>
                <outbound type="feature" confirmed="no">java.io.PrintStream.print(java.lang.String)</outbound>
                <outbound type="feature" confirmed="no">java.io.PrintStream.println()</outbound>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="class" confirmed="yes">junit.framework.Test</outbound>
                <outbound type="feature" confirmed="yes">junit.textui.ResultPrinter.fColumn</outbound>
                <outbound type="feature" confirmed="yes">junit.textui.ResultPrinter.getWriter()</outbound>
            </feature>
        </class>
        <class confirmed="yes">
            <name>junit.textui.TestRunner</name>
            <outbound type="class" confirmed="yes">junit.runner.BaseTestRunner</outbound>
            <feature confirmed="yes">
                <name>junit.textui.TestRunner.EXCEPTION_EXIT</name>
            </feature>
            <feature confirmed="yes">
                <name>junit.textui.TestRunner.FAILURE_EXIT</name>
            </feature>
            <feature confirmed="yes">
                <name>junit.textui.TestRunner.SUCCESS_EXIT</name>
            </feature>
            <feature confirmed="yes">
                <name>junit.textui.TestRunner.TestRunner()</name>
                <outbound type="class" confirmed="no">java.io.PrintStream</outbound>
                <outbound type="feature" confirmed="no">java.lang.System.out</outbound>
                <outbound type="feature" confirmed="yes">junit.textui.TestRunner.TestRunner(java.io.PrintStream)</outbound>
                <inbound type="feature" confirmed="yes">junit.textui.TestRunner.main(java.lang.String[])</inbound>
                <inbound type="feature" confirmed="yes">junit.textui.TestRunner.run(junit.framework.Test)</inbound>
                <inbound type="feature" confirmed="yes">junit.textui.TestRunner.runAndWait(junit.framework.Test)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>junit.textui.TestRunner.TestRunner(java.io.PrintStream)</name>
                <outbound type="class" confirmed="no">java.io.PrintStream</outbound>
                <outbound type="class" confirmed="yes">junit.textui.ResultPrinter</outbound>
                <outbound type="feature" confirmed="yes">junit.textui.ResultPrinter.ResultPrinter(java.io.PrintStream)</outbound>
                <outbound type="feature" confirmed="yes">junit.textui.TestRunner.TestRunner(junit.textui.ResultPrinter)</outbound>
                <inbound type="feature" confirmed="yes">junit.textui.TestRunner.TestRunner()</inbound>
            </feature>
            <feature confirmed="yes">
                <name>junit.textui.TestRunner.TestRunner(junit.textui.ResultPrinter)</name>
                <outbound type="feature" confirmed="yes">junit.runner.BaseTestRunner.BaseTestRunner()</outbound>
                <outbound type="class" confirmed="yes">junit.textui.ResultPrinter</outbound>
                <outbound type="feature" confirmed="yes">junit.textui.TestRunner.fPrinter</outbound>
                <inbound type="feature" confirmed="yes">junit.textui.TestRunner.TestRunner(java.io.PrintStream)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>junit.textui.TestRunner.createTestResult()</name>
                <outbound type="class" confirmed="yes">junit.framework.TestResult</outbound>
                <outbound type="feature" confirmed="yes">junit.framework.TestResult.TestResult()</outbound>
                <inbound type="feature" confirmed="yes">junit.textui.TestRunner.doRun(junit.framework.Test, boolean)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>junit.textui.TestRunner.doRun(junit.framework.Test)</name>
                <outbound type="class" confirmed="yes">junit.framework.Test</outbound>
                <outbound type="class" confirmed="yes">junit.framework.TestResult</outbound>
                <outbound type="feature" confirmed="yes">junit.textui.TestRunner.doRun(junit.framework.Test, boolean)</outbound>
                <inbound type="feature" confirmed="yes">junit.textui.TestRunner.run(junit.framework.Test)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>junit.textui.TestRunner.doRun(junit.framework.Test, boolean)</name>
                <outbound type="feature" confirmed="no">java.lang.System.currentTimeMillis()</outbound>
                <outbound type="class" confirmed="yes">junit.framework.Test</outbound>
                <outbound type="feature" confirmed="yes">junit.framework.Test.run(junit.framework.TestResult)</outbound>
                <outbound type="class" confirmed="yes">junit.framework.TestListener</outbound>
                <outbound type="class" confirmed="yes">junit.framework.TestResult</outbound>
                <outbound type="feature" confirmed="yes">junit.framework.TestResult.addListener(junit.framework.TestListener)</outbound>
                <outbound type="class" confirmed="yes">junit.textui.ResultPrinter</outbound>
                <outbound type="feature" confirmed="yes">junit.textui.ResultPrinter.print(junit.framework.TestResult, long)</outbound>
                <outbound type="feature" confirmed="yes">junit.textui.TestRunner.createTestResult()</outbound>
                <outbound type="feature" confirmed="yes">junit.textui.TestRunner.fPrinter</outbound>
                <outbound type="feature" confirmed="yes">junit.textui.TestRunner.pause(boolean)</outbound>
                <inbound type="feature" confirmed="yes">junit.textui.TestRunner.doRun(junit.framework.Test)</inbound>
                <inbound type="feature" confirmed="yes">junit.textui.TestRunner.runAndWait(junit.framework.Test)</inbound>
                <inbound type="feature" confirmed="yes">junit.textui.TestRunner.runSingleMethod(java.lang.String, java.lang.String, boolean)</inbound>
                <inbound type="feature" confirmed="yes">junit.textui.TestRunner.start(java.lang.String[])</inbound>
            </feature>
            <feature confirmed="no">
                <name>junit.textui.TestRunner.extractClassName(java.lang.String)</name>
                <inbound type="feature" confirmed="yes">junit.textui.TestRunner.start(java.lang.String[])</inbound>
            </feature>
            <feature confirmed="yes">
                <name>junit.textui.TestRunner.fPrinter</name>
                <outbound type="class" confirmed="yes">junit.textui.ResultPrinter</outbound>
                <inbound type="feature" confirmed="yes">junit.textui.TestRunner.TestRunner(junit.textui.ResultPrinter)</inbound>
                <inbound type="feature" confirmed="yes">junit.textui.TestRunner.doRun(junit.framework.Test, boolean)</inbound>
                <inbound type="feature" confirmed="yes">junit.textui.TestRunner.pause(boolean)</inbound>
                <inbound type="feature" confirmed="yes">junit.textui.TestRunner.setPrinter(junit.textui.ResultPrinter)</inbound>
            </feature>
            <feature confirmed="no">
                <name>junit.textui.TestRunner.getTest(java.lang.String)</name>
                <inbound type="feature" confirmed="yes">junit.textui.TestRunner.start(java.lang.String[])</inbound>
            </feature>
            <feature confirmed="no">
                <name>junit.textui.TestRunner.loadSuiteClass(java.lang.String)</name>
                <inbound type="feature" confirmed="yes">junit.textui.TestRunner.runSingleMethod(java.lang.String, java.lang.String, boolean)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>junit.textui.TestRunner.main(java.lang.String[])</name>
                <outbound type="class" confirmed="no">java.io.PrintStream</outbound>
                <outbound type="feature" confirmed="no">java.io.PrintStream.println(java.lang.String)</outbound>
                <outbound type="class" confirmed="no">java.lang.Exception</outbound>
                <outbound type="feature" confirmed="no">java.lang.Exception.getMessage()</outbound>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="feature" confirmed="no">java.lang.System.err</outbound>
                <outbound type="feature" confirmed="no">java.lang.System.exit(int)</outbound>
                <outbound type="class" confirmed="yes">junit.framework.TestResult</outbound>
                <outbound type="feature" confirmed="yes">junit.framework.TestResult.wasSuccessful()</outbound>
                <outbound type="feature" confirmed="yes">junit.textui.TestRunner.TestRunner()</outbound>
                <outbound type="feature" confirmed="yes">junit.textui.TestRunner.start(java.lang.String[])</outbound>
            </feature>
            <feature confirmed="yes">
                <name>junit.textui.TestRunner.pause(boolean)</name>
                <outbound type="class" confirmed="no">java.io.InputStream</outbound>
                <outbound type="feature" confirmed="no">java.io.InputStream.read()</outbound>
                <outbound type="class" confirmed="no">java.lang.Exception</outbound>
                <outbound type="feature" confirmed="no">java.lang.System.in</outbound>
                <outbound type="class" confirmed="yes">junit.textui.ResultPrinter</outbound>
                <outbound type="feature" confirmed="yes">junit.textui.ResultPrinter.printWaitPrompt()</outbound>
                <outbound type="feature" confirmed="yes">junit.textui.TestRunner.fPrinter</outbound>
                <inbound type="feature" confirmed="yes">junit.textui.TestRunner.doRun(junit.framework.Test, boolean)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>junit.textui.TestRunner.run(java.lang.Class)</name>
                <outbound type="class" confirmed="no">java.lang.Class</outbound>
                <outbound type="class" confirmed="yes">junit.framework.Test</outbound>
                <outbound type="class" confirmed="yes">junit.framework.TestResult</outbound>
                <outbound type="feature" confirmed="yes">junit.framework.TestSuite.TestSuite(java.lang.Class)</outbound>
                <outbound type="feature" confirmed="yes">junit.textui.TestRunner.run(junit.framework.Test)</outbound>
            </feature>
            <feature confirmed="yes">
                <name>junit.textui.TestRunner.run(junit.framework.Test)</name>
                <outbound type="class" confirmed="yes">junit.framework.Test</outbound>
                <outbound type="class" confirmed="yes">junit.framework.TestResult</outbound>
                <outbound type="feature" confirmed="yes">junit.textui.TestRunner.TestRunner()</outbound>
                <outbound type="feature" confirmed="yes">junit.textui.TestRunner.doRun(junit.framework.Test)</outbound>
                <inbound type="feature" confirmed="yes">junit.textui.TestRunner.run(java.lang.Class)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>junit.textui.TestRunner.runAndWait(junit.framework.Test)</name>
                <outbound type="class" confirmed="yes">junit.framework.Test</outbound>
                <outbound type="class" confirmed="yes">junit.framework.TestResult</outbound>
                <outbound type="feature" confirmed="yes">junit.textui.TestRunner.TestRunner()</outbound>
                <outbound type="feature" confirmed="yes">junit.textui.TestRunner.doRun(junit.framework.Test, boolean)</outbound>
            </feature>
            <feature confirmed="yes">
                <name>junit.textui.TestRunner.runFailed(java.lang.String)</name>
                <outbound type="class" confirmed="no">java.io.PrintStream</outbound>
                <outbound type="feature" confirmed="no">java.io.PrintStream.println(java.lang.String)</outbound>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="feature" confirmed="no">java.lang.System.err</outbound>
                <outbound type="feature" confirmed="no">java.lang.System.exit(int)</outbound>
            </feature>
            <feature confirmed="yes">
                <name>junit.textui.TestRunner.runSingleMethod(java.lang.String, java.lang.String, boolean)</name>
                <outbound type="class" confirmed="no">java.lang.Class</outbound>
                <outbound type="feature" confirmed="no">java.lang.Class.asSubclass(java.lang.Class)</outbound>
                <outbound type="class" confirmed="no">java.lang.Exception</outbound>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="class" confirmed="yes">junit.framework.Test</outbound>
                <outbound type="class" confirmed="yes">junit.framework.TestCase</outbound>
                <outbound type="class" confirmed="yes">junit.framework.TestResult</outbound>
                <outbound type="feature" confirmed="yes">junit.framework.TestSuite.createTest(java.lang.Class, java.lang.String)</outbound>
                <outbound type="feature" confirmed="yes">junit.textui.TestRunner.doRun(junit.framework.Test, boolean)</outbound>
                <outbound type="feature" confirmed="no">junit.textui.TestRunner.loadSuiteClass(java.lang.String)</outbound>
                <inbound type="feature" confirmed="yes">junit.textui.TestRunner.start(java.lang.String[])</inbound>
            </feature>
            <feature confirmed="yes">
                <name>junit.textui.TestRunner.setPrinter(junit.textui.ResultPrinter)</name>
                <outbound type="class" confirmed="yes">junit.textui.ResultPrinter</outbound>
                <outbound type="feature" confirmed="yes">junit.textui.TestRunner.fPrinter</outbound>
            </feature>
            <feature confirmed="yes">
                <name>junit.textui.TestRunner.start(java.lang.String[])</name>
                <outbound type="class" confirmed="no">java.io.PrintStream</outbound>
                <outbound type="feature" confirmed="no">java.io.PrintStream.println(java.lang.String)</outbound>
                <outbound type="class" confirmed="no">java.lang.Exception</outbound>
                <outbound type="feature" confirmed="no">java.lang.Exception.Exception(java.lang.String)</outbound>
                <outbound type="class" confirmed="no">java.lang.Object</outbound>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="feature" confirmed="no">java.lang.String.equals(java.lang.Object)</outbound>
                <outbound type="feature" confirmed="no">java.lang.String.lastIndexOf(int)</outbound>
                <outbound type="feature" confirmed="no">java.lang.String.substring(int)</outbound>
                <outbound type="feature" confirmed="no">java.lang.String.substring(int, int)</outbound>
                <outbound type="class" confirmed="no">java.lang.StringBuilder</outbound>
                <outbound type="feature" confirmed="no">java.lang.StringBuilder.StringBuilder()</outbound>
                <outbound type="feature" confirmed="no">java.lang.StringBuilder.append(java.lang.Object)</outbound>
                <outbound type="feature" confirmed="no">java.lang.StringBuilder.append(java.lang.String)</outbound>
                <outbound type="feature" confirmed="no">java.lang.StringBuilder.toString()</outbound>
                <outbound type="feature" confirmed="no">java.lang.System.err</outbound>
                <outbound type="class" confirmed="yes">junit.framework.Test</outbound>
                <outbound type="class" confirmed="yes">junit.framework.TestResult</outbound>
                <outbound type="feature" confirmed="yes">junit.runner.Version.id()</outbound>
                <outbound type="feature" confirmed="yes">junit.textui.TestRunner.doRun(junit.framework.Test, boolean)</outbound>
                <outbound type="feature" confirmed="no">junit.textui.TestRunner.extractClassName(java.lang.String)</outbound>
                <outbound type="feature" confirmed="no">junit.textui.TestRunner.getTest(java.lang.String)</outbound>
                <outbound type="feature" confirmed="yes">junit.textui.TestRunner.runSingleMethod(java.lang.String, java.lang.String, boolean)</outbound>
                <inbound type="feature" confirmed="yes">junit.textui.TestRunner.main(java.lang.String[])</inbound>
            </feature>
            <feature confirmed="yes">
                <name>junit.textui.TestRunner.testEnded(java.lang.String)</name>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
            </feature>
            <feature confirmed="yes">
                <name>junit.textui.TestRunner.testFailed(int, junit.framework.Test, java.lang.Throwable)</name>
                <outbound type="class" confirmed="no">java.lang.Throwable</outbound>
                <outbound type="class" confirmed="yes">junit.framework.Test</outbound>
            </feature>
            <feature confirmed="yes">
                <name>junit.textui.TestRunner.testStarted(java.lang.String)</name>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
            </feature>
        </class>
        <class confirmed="yes">
            <name>junit.textui.package-info</name>
            <outbound type="class" confirmed="no">java.lang.Object</outbound>
        </class>
    </package>
    <package confirmed="yes">
        <name>org.hamcrest</name>
        <class confirmed="yes">
            <name>org.hamcrest.BaseDescription</name>
            <outbound type="class" confirmed="no">java.lang.Object</outbound>
            <outbound type="class" confirmed="yes">org.hamcrest.Description</outbound>
            <inbound type="class" confirmed="yes">org.hamcrest.StringDescription</inbound>
            <feature confirmed="yes">
                <name>org.hamcrest.BaseDescription.BaseDescription()</name>
                <outbound type="feature" confirmed="no">java.lang.Object.Object()</outbound>
                <inbound type="feature" confirmed="yes">org.hamcrest.StringDescription.StringDescription(java.lang.Appendable)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.hamcrest.BaseDescription.append(char)</name>
                <inbound type="feature" confirmed="yes">org.hamcrest.BaseDescription.append(java.lang.String)</inbound>
                <inbound type="feature" confirmed="yes">org.hamcrest.BaseDescription.appendValue(java.lang.Object)</inbound>
                <inbound type="feature" confirmed="yes">org.hamcrest.BaseDescription.toJavaSyntax(char)</inbound>
                <inbound type="feature" confirmed="yes">org.hamcrest.BaseDescription.toJavaSyntax(java.lang.String)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.hamcrest.BaseDescription.append(java.lang.String)</name>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="feature" confirmed="no">java.lang.String.charAt(int)</outbound>
                <outbound type="feature" confirmed="no">java.lang.String.length()</outbound>
                <outbound type="feature" confirmed="yes">org.hamcrest.BaseDescription.append(char)</outbound>
                <inbound type="feature" confirmed="yes">org.hamcrest.BaseDescription.appendList(java.lang.String, java.lang.String, java.lang.String, java.util.Iterator)</inbound>
                <inbound type="feature" confirmed="yes">org.hamcrest.BaseDescription.appendText(java.lang.String)</inbound>
                <inbound type="feature" confirmed="yes">org.hamcrest.BaseDescription.appendValue(java.lang.Object)</inbound>
                <inbound type="feature" confirmed="yes">org.hamcrest.BaseDescription.toJavaSyntax(char)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.hamcrest.BaseDescription.appendDescriptionOf(org.hamcrest.SelfDescribing)</name>
                <outbound type="class" confirmed="yes">org.hamcrest.Description</outbound>
                <outbound type="class" confirmed="yes">org.hamcrest.SelfDescribing</outbound>
                <outbound type="feature" confirmed="yes">org.hamcrest.SelfDescribing.describeTo(org.hamcrest.Description)</outbound>
                <inbound type="feature" confirmed="yes">org.hamcrest.BaseDescription.appendList(java.lang.String, java.lang.String, java.lang.String, java.util.Iterator)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.hamcrest.BaseDescription.appendList(java.lang.String, java.lang.String, java.lang.String, java.lang.Iterable)</name>
                <outbound type="class" confirmed="no">java.lang.Iterable</outbound>
                <outbound type="feature" confirmed="no">java.lang.Iterable.iterator()</outbound>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="class" confirmed="no">java.util.Iterator</outbound>
                <outbound type="feature" confirmed="yes">org.hamcrest.BaseDescription.appendList(java.lang.String, java.lang.String, java.lang.String, java.util.Iterator)</outbound>
                <outbound type="class" confirmed="yes">org.hamcrest.Description</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.hamcrest.BaseDescription.appendList(java.lang.String, java.lang.String, java.lang.String, java.util.Iterator)</name>
                <outbound type="class" confirmed="no">java.lang.Object</outbound>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="class" confirmed="no">java.util.Iterator</outbound>
                <outbound type="feature" confirmed="no">java.util.Iterator.hasNext()</outbound>
                <outbound type="feature" confirmed="no">java.util.Iterator.next()</outbound>
                <outbound type="feature" confirmed="yes">org.hamcrest.BaseDescription.append(java.lang.String)</outbound>
                <outbound type="feature" confirmed="yes">org.hamcrest.BaseDescription.appendDescriptionOf(org.hamcrest.SelfDescribing)</outbound>
                <outbound type="class" confirmed="yes">org.hamcrest.Description</outbound>
                <outbound type="class" confirmed="yes">org.hamcrest.SelfDescribing</outbound>
                <inbound type="feature" confirmed="yes">org.hamcrest.BaseDescription.appendList(java.lang.String, java.lang.String, java.lang.String, java.lang.Iterable)</inbound>
                <inbound type="feature" confirmed="yes">org.hamcrest.BaseDescription.appendValueList(java.lang.String, java.lang.String, java.lang.String, java.util.Iterator)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.hamcrest.BaseDescription.appendText(java.lang.String)</name>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="feature" confirmed="yes">org.hamcrest.BaseDescription.append(java.lang.String)</outbound>
                <outbound type="class" confirmed="yes">org.hamcrest.Description</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.hamcrest.BaseDescription.appendValue(java.lang.Object)</name>
                <outbound type="class" confirmed="no">java.lang.Character</outbound>
                <outbound type="feature" confirmed="no">java.lang.Character.charValue()</outbound>
                <outbound type="class" confirmed="no">java.lang.Class</outbound>
                <outbound type="feature" confirmed="no">java.lang.Class.isArray()</outbound>
                <outbound type="class" confirmed="no">java.lang.Float</outbound>
                <outbound type="class" confirmed="no">java.lang.Long</outbound>
                <outbound type="class" confirmed="no">java.lang.Object</outbound>
                <outbound type="feature" confirmed="no">java.lang.Object.getClass()</outbound>
                <outbound type="class" confirmed="no">java.lang.Short</outbound>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="feature" confirmed="no">java.lang.String.valueOf(java.lang.Object)</outbound>
                <outbound type="class" confirmed="no">java.util.Iterator</outbound>
                <outbound type="feature" confirmed="yes">org.hamcrest.BaseDescription.append(char)</outbound>
                <outbound type="feature" confirmed="yes">org.hamcrest.BaseDescription.append(java.lang.String)</outbound>
                <outbound type="feature" confirmed="yes">org.hamcrest.BaseDescription.appendValueList(java.lang.String, java.lang.String, java.lang.String, java.util.Iterator)</outbound>
                <outbound type="feature" confirmed="yes">org.hamcrest.BaseDescription.toJavaSyntax(char)</outbound>
                <outbound type="feature" confirmed="yes">org.hamcrest.BaseDescription.toJavaSyntax(java.lang.String)</outbound>
                <outbound type="class" confirmed="yes">org.hamcrest.Description</outbound>
                <outbound type="feature" confirmed="yes">org.hamcrest.internal.ArrayIterator.ArrayIterator(java.lang.Object)</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.hamcrest.BaseDescription.appendValueList(java.lang.String, java.lang.String, java.lang.String, java.lang.Iterable)</name>
                <outbound type="class" confirmed="no">java.lang.Iterable</outbound>
                <outbound type="feature" confirmed="no">java.lang.Iterable.iterator()</outbound>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="class" confirmed="no">java.util.Iterator</outbound>
                <outbound type="feature" confirmed="yes">org.hamcrest.BaseDescription.appendValueList(java.lang.String, java.lang.String, java.lang.String, java.util.Iterator)</outbound>
                <outbound type="class" confirmed="yes">org.hamcrest.Description</outbound>
                <inbound type="feature" confirmed="yes">org.hamcrest.BaseDescription.appendValueList(java.lang.String, java.lang.String, java.lang.String, java.lang.Object[])</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.hamcrest.BaseDescription.appendValueList(java.lang.String, java.lang.String, java.lang.String, java.lang.Object[])</name>
                <outbound type="class" confirmed="no">java.lang.Iterable</outbound>
                <outbound type="class" confirmed="no">java.lang.Object</outbound>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="feature" confirmed="no">java.util.Arrays.asList(java.lang.Object[])</outbound>
                <outbound type="class" confirmed="no">java.util.List</outbound>
                <outbound type="feature" confirmed="yes">org.hamcrest.BaseDescription.appendValueList(java.lang.String, java.lang.String, java.lang.String, java.lang.Iterable)</outbound>
                <outbound type="class" confirmed="yes">org.hamcrest.Description</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.hamcrest.BaseDescription.appendValueList(java.lang.String, java.lang.String, java.lang.String, java.util.Iterator)</name>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="class" confirmed="no">java.util.Iterator</outbound>
                <outbound type="feature" confirmed="yes">org.hamcrest.BaseDescription.appendList(java.lang.String, java.lang.String, java.lang.String, java.util.Iterator)</outbound>
                <outbound type="class" confirmed="yes">org.hamcrest.Description</outbound>
                <outbound type="feature" confirmed="yes">org.hamcrest.internal.SelfDescribingValueIterator.SelfDescribingValueIterator(java.util.Iterator)</outbound>
                <inbound type="feature" confirmed="yes">org.hamcrest.BaseDescription.appendValue(java.lang.Object)</inbound>
                <inbound type="feature" confirmed="yes">org.hamcrest.BaseDescription.appendValueList(java.lang.String, java.lang.String, java.lang.String, java.lang.Iterable)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.hamcrest.BaseDescription.toJavaSyntax(char)</name>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="feature" confirmed="yes">org.hamcrest.BaseDescription.append(char)</outbound>
                <outbound type="feature" confirmed="yes">org.hamcrest.BaseDescription.append(java.lang.String)</outbound>
                <inbound type="feature" confirmed="yes">org.hamcrest.BaseDescription.appendValue(java.lang.Object)</inbound>
                <inbound type="feature" confirmed="yes">org.hamcrest.BaseDescription.toJavaSyntax(java.lang.String)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.hamcrest.BaseDescription.toJavaSyntax(java.lang.String)</name>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="feature" confirmed="no">java.lang.String.charAt(int)</outbound>
                <outbound type="feature" confirmed="no">java.lang.String.length()</outbound>
                <outbound type="feature" confirmed="yes">org.hamcrest.BaseDescription.append(char)</outbound>
                <outbound type="feature" confirmed="yes">org.hamcrest.BaseDescription.toJavaSyntax(char)</outbound>
                <inbound type="feature" confirmed="yes">org.hamcrest.BaseDescription.appendValue(java.lang.Object)</inbound>
            </feature>
        </class>
        <class confirmed="yes">
            <name>org.hamcrest.BaseMatcher</name>
            <outbound type="class" confirmed="no">java.lang.Object</outbound>
            <outbound type="class" confirmed="yes">org.hamcrest.Matcher</outbound>
            <inbound type="class" confirmed="yes">org.hamcrest.core.AllOf</inbound>
            <inbound type="class" confirmed="yes">org.hamcrest.core.AnyOf</inbound>
            <inbound type="class" confirmed="yes">org.hamcrest.core.DescribedAs</inbound>
            <inbound type="class" confirmed="yes">org.hamcrest.core.Is</inbound>
            <inbound type="class" confirmed="yes">org.hamcrest.core.IsAnything</inbound>
            <inbound type="class" confirmed="yes">org.hamcrest.core.IsEqual</inbound>
            <inbound type="class" confirmed="yes">org.hamcrest.core.IsInstanceOf</inbound>
            <inbound type="class" confirmed="yes">org.hamcrest.core.IsNot</inbound>
            <inbound type="class" confirmed="yes">org.hamcrest.core.IsNull</inbound>
            <inbound type="class" confirmed="yes">org.hamcrest.core.IsSame</inbound>
            <inbound type="class" confirmed="yes">org.junit.experimental.results.ResultMatchers$2</inbound>
            <inbound type="class" confirmed="yes">org.junit.experimental.results.ResultMatchers$3</inbound>
            <inbound type="class" confirmed="yes">org.junit.internal.matchers.CombinableMatcher</inbound>
            <inbound type="class" confirmed="yes">org.junit.internal.matchers.Each$1</inbound>
            <inbound type="class" confirmed="yes">org.junit.internal.matchers.TypeSafeMatcher</inbound>
            <feature confirmed="yes">
                <name>org.hamcrest.BaseMatcher.BaseMatcher()</name>
                <outbound type="feature" confirmed="no">java.lang.Object.Object()</outbound>
                <inbound type="feature" confirmed="yes">org.hamcrest.core.AllOf.AllOf(java.lang.Iterable)</inbound>
                <inbound type="feature" confirmed="yes">org.hamcrest.core.AnyOf.AnyOf(java.lang.Iterable)</inbound>
                <inbound type="feature" confirmed="yes">org.hamcrest.core.DescribedAs.DescribedAs(java.lang.String, org.hamcrest.Matcher, java.lang.Object[])</inbound>
                <inbound type="feature" confirmed="yes">org.hamcrest.core.Is.Is(org.hamcrest.Matcher)</inbound>
                <inbound type="feature" confirmed="yes">org.hamcrest.core.IsAnything.IsAnything(java.lang.String)</inbound>
                <inbound type="feature" confirmed="yes">org.hamcrest.core.IsEqual.IsEqual(java.lang.Object)</inbound>
                <inbound type="feature" confirmed="yes">org.hamcrest.core.IsInstanceOf.IsInstanceOf(java.lang.Class)</inbound>
                <inbound type="feature" confirmed="yes">org.hamcrest.core.IsNot.IsNot(org.hamcrest.Matcher)</inbound>
                <inbound type="feature" confirmed="yes">org.hamcrest.core.IsNull.IsNull()</inbound>
                <inbound type="feature" confirmed="yes">org.hamcrest.core.IsSame.IsSame(java.lang.Object)</inbound>
                <inbound type="feature" confirmed="yes">org.junit.experimental.results.ResultMatchers$2.ResultMatchers$2(java.lang.String)</inbound>
                <inbound type="feature" confirmed="yes">org.junit.experimental.results.ResultMatchers$3.ResultMatchers$3(java.lang.String)</inbound>
                <inbound type="feature" confirmed="yes">org.junit.internal.matchers.CombinableMatcher.CombinableMatcher(org.hamcrest.Matcher)</inbound>
                <inbound type="feature" confirmed="yes">org.junit.internal.matchers.Each$1.Each$1(org.hamcrest.Matcher, org.hamcrest.Matcher)</inbound>
                <inbound type="feature" confirmed="yes">org.junit.internal.matchers.TypeSafeMatcher.TypeSafeMatcher()</inbound>
                <inbound type="feature" confirmed="yes">org.junit.internal.matchers.TypeSafeMatcher.TypeSafeMatcher(java.lang.Class)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.hamcrest.BaseMatcher._dont_implement_Matcher___instead_extend_BaseMatcher_()</name>
            </feature>
            <feature confirmed="yes">
                <name>org.hamcrest.BaseMatcher.toString()</name>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="class" confirmed="yes">org.hamcrest.SelfDescribing</outbound>
                <outbound type="feature" confirmed="yes">org.hamcrest.StringDescription.toString(org.hamcrest.SelfDescribing)</outbound>
            </feature>
        </class>
        <class confirmed="yes">
            <name>org.hamcrest.CoreMatchers</name>
            <outbound type="class" confirmed="no">java.lang.Object</outbound>
            <feature confirmed="yes">
                <name>org.hamcrest.CoreMatchers.CoreMatchers()</name>
                <outbound type="feature" confirmed="no">java.lang.Object.Object()</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.hamcrest.CoreMatchers.allOf(java.lang.Iterable)</name>
                <outbound type="class" confirmed="no">java.lang.Iterable</outbound>
                <outbound type="class" confirmed="yes">org.hamcrest.Matcher</outbound>
                <outbound type="feature" confirmed="yes">org.hamcrest.core.AllOf.allOf(java.lang.Iterable)</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.hamcrest.CoreMatchers.allOf(org.hamcrest.Matcher[])</name>
                <outbound type="class" confirmed="yes">org.hamcrest.Matcher</outbound>
                <outbound type="feature" confirmed="yes">org.hamcrest.core.AllOf.allOf(org.hamcrest.Matcher[])</outbound>
                <inbound type="feature" confirmed="yes">org.junit.internal.matchers.CombinableMatcher.and(org.hamcrest.Matcher)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.hamcrest.CoreMatchers.any(java.lang.Class)</name>
                <outbound type="class" confirmed="no">java.lang.Class</outbound>
                <outbound type="class" confirmed="yes">org.hamcrest.Matcher</outbound>
                <outbound type="feature" confirmed="yes">org.hamcrest.core.IsAnything.any(java.lang.Class)</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.hamcrest.CoreMatchers.anyOf(java.lang.Iterable)</name>
                <outbound type="class" confirmed="no">java.lang.Iterable</outbound>
                <outbound type="class" confirmed="yes">org.hamcrest.Matcher</outbound>
                <outbound type="feature" confirmed="yes">org.hamcrest.core.AnyOf.anyOf(java.lang.Iterable)</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.hamcrest.CoreMatchers.anyOf(org.hamcrest.Matcher[])</name>
                <outbound type="class" confirmed="yes">org.hamcrest.Matcher</outbound>
                <outbound type="feature" confirmed="yes">org.hamcrest.core.AnyOf.anyOf(org.hamcrest.Matcher[])</outbound>
                <inbound type="feature" confirmed="yes">org.junit.internal.matchers.CombinableMatcher.or(org.hamcrest.Matcher)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.hamcrest.CoreMatchers.anything()</name>
                <outbound type="class" confirmed="yes">org.hamcrest.Matcher</outbound>
                <outbound type="feature" confirmed="yes">org.hamcrest.core.IsAnything.anything()</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.hamcrest.CoreMatchers.anything(java.lang.String)</name>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="class" confirmed="yes">org.hamcrest.Matcher</outbound>
                <outbound type="feature" confirmed="yes">org.hamcrest.core.IsAnything.anything(java.lang.String)</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.hamcrest.CoreMatchers.describedAs(java.lang.String, org.hamcrest.Matcher, java.lang.Object[])</name>
                <outbound type="class" confirmed="no">java.lang.Object</outbound>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="class" confirmed="yes">org.hamcrest.Matcher</outbound>
                <outbound type="feature" confirmed="yes">org.hamcrest.core.DescribedAs.describedAs(java.lang.String, org.hamcrest.Matcher, java.lang.Object[])</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.hamcrest.CoreMatchers.equalTo(java.lang.Object)</name>
                <outbound type="class" confirmed="no">java.lang.Object</outbound>
                <outbound type="class" confirmed="yes">org.hamcrest.Matcher</outbound>
                <outbound type="feature" confirmed="yes">org.hamcrest.core.IsEqual.equalTo(java.lang.Object)</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.hamcrest.CoreMatchers.instanceOf(java.lang.Class)</name>
                <outbound type="class" confirmed="no">java.lang.Class</outbound>
                <outbound type="class" confirmed="yes">org.hamcrest.Matcher</outbound>
                <outbound type="feature" confirmed="yes">org.hamcrest.core.IsInstanceOf.instanceOf(java.lang.Class)</outbound>
                <inbound type="feature" confirmed="yes">org.junit.rules.ExpectedException.expect(java.lang.Class)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.hamcrest.CoreMatchers.is(java.lang.Class)</name>
                <outbound type="class" confirmed="no">java.lang.Class</outbound>
                <outbound type="class" confirmed="yes">org.hamcrest.Matcher</outbound>
                <outbound type="feature" confirmed="yes">org.hamcrest.core.Is.is(java.lang.Class)</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.hamcrest.CoreMatchers.is(java.lang.Object)</name>
                <outbound type="class" confirmed="no">java.lang.Object</outbound>
                <outbound type="class" confirmed="yes">org.hamcrest.Matcher</outbound>
                <outbound type="feature" confirmed="yes">org.hamcrest.core.Is.is(java.lang.Object)</outbound>
                <inbound type="feature" confirmed="yes">org.junit.Assume.assumeTrue(boolean)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.hamcrest.CoreMatchers.is(org.hamcrest.Matcher)</name>
                <outbound type="class" confirmed="yes">org.hamcrest.Matcher</outbound>
                <outbound type="feature" confirmed="yes">org.hamcrest.core.Is.is(org.hamcrest.Matcher)</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.hamcrest.CoreMatchers.not(java.lang.Object)</name>
                <outbound type="class" confirmed="no">java.lang.Object</outbound>
                <outbound type="class" confirmed="yes">org.hamcrest.Matcher</outbound>
                <outbound type="feature" confirmed="yes">org.hamcrest.core.IsNot.not(java.lang.Object)</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.hamcrest.CoreMatchers.not(org.hamcrest.Matcher)</name>
                <outbound type="class" confirmed="yes">org.hamcrest.Matcher</outbound>
                <outbound type="feature" confirmed="yes">org.hamcrest.core.IsNot.not(org.hamcrest.Matcher)</outbound>
                <inbound type="feature" confirmed="yes">org.junit.internal.matchers.Each.each(org.hamcrest.Matcher)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.hamcrest.CoreMatchers.notNullValue()</name>
                <outbound type="class" confirmed="yes">org.hamcrest.Matcher</outbound>
                <outbound type="feature" confirmed="yes">org.hamcrest.core.IsNull.notNullValue()</outbound>
                <inbound type="feature" confirmed="yes">org.junit.Assume.assumeNotNull(java.lang.Object[])</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.hamcrest.CoreMatchers.notNullValue(java.lang.Class)</name>
                <outbound type="class" confirmed="no">java.lang.Class</outbound>
                <outbound type="class" confirmed="yes">org.hamcrest.Matcher</outbound>
                <outbound type="feature" confirmed="yes">org.hamcrest.core.IsNull.notNullValue(java.lang.Class)</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.hamcrest.CoreMatchers.nullValue()</name>
                <outbound type="class" confirmed="yes">org.hamcrest.Matcher</outbound>
                <outbound type="feature" confirmed="yes">org.hamcrest.core.IsNull.nullValue()</outbound>
                <inbound type="feature" confirmed="yes">org.junit.Assume.assumeNoException(java.lang.Throwable)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.hamcrest.CoreMatchers.nullValue(java.lang.Class)</name>
                <outbound type="class" confirmed="no">java.lang.Class</outbound>
                <outbound type="class" confirmed="yes">org.hamcrest.Matcher</outbound>
                <outbound type="feature" confirmed="yes">org.hamcrest.core.IsNull.nullValue(java.lang.Class)</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.hamcrest.CoreMatchers.sameInstance(java.lang.Object)</name>
                <outbound type="class" confirmed="no">java.lang.Object</outbound>
                <outbound type="class" confirmed="yes">org.hamcrest.Matcher</outbound>
                <outbound type="feature" confirmed="yes">org.hamcrest.core.IsSame.sameInstance(java.lang.Object)</outbound>
            </feature>
        </class>
        <class confirmed="yes">
            <name>org.hamcrest.Description</name>
            <outbound type="class" confirmed="no">java.lang.Object</outbound>
            <inbound type="class" confirmed="yes">org.hamcrest.BaseDescription</inbound>
            <inbound type="feature" confirmed="yes">org.hamcrest.BaseDescription.appendDescriptionOf(org.hamcrest.SelfDescribing)</inbound>
            <inbound type="feature" confirmed="yes">org.hamcrest.BaseDescription.appendList(java.lang.String, java.lang.String, java.lang.String, java.lang.Iterable)</inbound>
            <inbound type="feature" confirmed="yes">org.hamcrest.BaseDescription.appendList(java.lang.String, java.lang.String, java.lang.String, java.util.Iterator)</inbound>
            <inbound type="feature" confirmed="yes">org.hamcrest.BaseDescription.appendText(java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">org.hamcrest.BaseDescription.appendValue(java.lang.Object)</inbound>
            <inbound type="feature" confirmed="yes">org.hamcrest.BaseDescription.appendValueList(java.lang.String, java.lang.String, java.lang.String, java.lang.Iterable)</inbound>
            <inbound type="feature" confirmed="yes">org.hamcrest.BaseDescription.appendValueList(java.lang.String, java.lang.String, java.lang.String, java.lang.Object[])</inbound>
            <inbound type="feature" confirmed="yes">org.hamcrest.BaseDescription.appendValueList(java.lang.String, java.lang.String, java.lang.String, java.util.Iterator)</inbound>
            <inbound type="feature" confirmed="yes">org.hamcrest.SelfDescribing.describeTo(org.hamcrest.Description)</inbound>
            <inbound type="feature" confirmed="yes">org.hamcrest.StringDescription.toString(org.hamcrest.SelfDescribing)</inbound>
            <inbound type="feature" confirmed="yes">org.hamcrest.core.AllOf.describeTo(org.hamcrest.Description)</inbound>
            <inbound type="feature" confirmed="yes">org.hamcrest.core.AnyOf.describeTo(org.hamcrest.Description)</inbound>
            <inbound type="feature" confirmed="yes">org.hamcrest.core.DescribedAs.describeTo(org.hamcrest.Description)</inbound>
            <inbound type="feature" confirmed="yes">org.hamcrest.core.Is.describeTo(org.hamcrest.Description)</inbound>
            <inbound type="feature" confirmed="yes">org.hamcrest.core.IsAnything.describeTo(org.hamcrest.Description)</inbound>
            <inbound type="feature" confirmed="yes">org.hamcrest.core.IsEqual.describeTo(org.hamcrest.Description)</inbound>
            <inbound type="feature" confirmed="yes">org.hamcrest.core.IsInstanceOf.describeTo(org.hamcrest.Description)</inbound>
            <inbound type="feature" confirmed="yes">org.hamcrest.core.IsNot.describeTo(org.hamcrest.Description)</inbound>
            <inbound type="feature" confirmed="yes">org.hamcrest.core.IsNull.describeTo(org.hamcrest.Description)</inbound>
            <inbound type="feature" confirmed="yes">org.hamcrest.core.IsSame.describeTo(org.hamcrest.Description)</inbound>
            <inbound type="feature" confirmed="yes">org.hamcrest.internal.SelfDescribingValue.describeTo(org.hamcrest.Description)</inbound>
            <inbound type="feature" confirmed="yes">org.junit.Assert.assertThat(java.lang.String, java.lang.Object, org.hamcrest.Matcher)</inbound>
            <inbound type="feature" confirmed="yes">org.junit.experimental.results.ResultMatchers$1.describeTo(org.hamcrest.Description)</inbound>
            <inbound type="feature" confirmed="yes">org.junit.experimental.results.ResultMatchers$2.describeTo(org.hamcrest.Description)</inbound>
            <inbound type="feature" confirmed="yes">org.junit.experimental.results.ResultMatchers$3.describeTo(org.hamcrest.Description)</inbound>
            <inbound type="feature" confirmed="yes">org.junit.internal.AssumptionViolatedException.describeTo(org.hamcrest.Description)</inbound>
            <inbound type="feature" confirmed="yes">org.junit.internal.matchers.CombinableMatcher.describeTo(org.hamcrest.Description)</inbound>
            <inbound type="feature" confirmed="yes">org.junit.internal.matchers.Each$1.describeTo(org.hamcrest.Description)</inbound>
            <inbound type="feature" confirmed="yes">org.junit.internal.matchers.IsCollectionContaining.describeTo(org.hamcrest.Description)</inbound>
            <inbound type="feature" confirmed="yes">org.junit.internal.matchers.SubstringMatcher.describeTo(org.hamcrest.Description)</inbound>
            <inbound type="feature" confirmed="yes">org.junit.rules.ExpectedException$1.describeTo(org.hamcrest.Description)</inbound>
            <feature confirmed="yes">
                <name>org.hamcrest.Description.appendDescriptionOf(org.hamcrest.SelfDescribing)</name>
                <outbound type="class" confirmed="yes">org.hamcrest.SelfDescribing</outbound>
                <inbound type="feature" confirmed="yes">org.hamcrest.core.Is.describeTo(org.hamcrest.Description)</inbound>
                <inbound type="feature" confirmed="yes">org.hamcrest.core.IsNot.describeTo(org.hamcrest.Description)</inbound>
                <inbound type="feature" confirmed="yes">org.junit.Assert.assertThat(java.lang.String, java.lang.Object, org.hamcrest.Matcher)</inbound>
                <inbound type="feature" confirmed="yes">org.junit.internal.AssumptionViolatedException.describeTo(org.hamcrest.Description)</inbound>
                <inbound type="feature" confirmed="yes">org.junit.internal.matchers.CombinableMatcher.describeTo(org.hamcrest.Description)</inbound>
                <inbound type="feature" confirmed="yes">org.junit.internal.matchers.IsCollectionContaining.describeTo(org.hamcrest.Description)</inbound>
                <inbound type="feature" confirmed="yes">org.junit.rules.ExpectedException$1.describeTo(org.hamcrest.Description)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.hamcrest.Description.appendList(java.lang.String, java.lang.String, java.lang.String, java.lang.Iterable)</name>
                <outbound type="class" confirmed="no">java.lang.Iterable</outbound>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <inbound type="feature" confirmed="yes">org.hamcrest.core.AllOf.describeTo(org.hamcrest.Description)</inbound>
                <inbound type="feature" confirmed="yes">org.hamcrest.core.AnyOf.describeTo(org.hamcrest.Description)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.hamcrest.Description.appendText(java.lang.String)</name>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <inbound type="feature" confirmed="yes">org.hamcrest.core.DescribedAs.describeTo(org.hamcrest.Description)</inbound>
                <inbound type="feature" confirmed="yes">org.hamcrest.core.Is.describeTo(org.hamcrest.Description)</inbound>
                <inbound type="feature" confirmed="yes">org.hamcrest.core.IsAnything.describeTo(org.hamcrest.Description)</inbound>
                <inbound type="feature" confirmed="yes">org.hamcrest.core.IsInstanceOf.describeTo(org.hamcrest.Description)</inbound>
                <inbound type="feature" confirmed="yes">org.hamcrest.core.IsNot.describeTo(org.hamcrest.Description)</inbound>
                <inbound type="feature" confirmed="yes">org.hamcrest.core.IsNull.describeTo(org.hamcrest.Description)</inbound>
                <inbound type="feature" confirmed="yes">org.hamcrest.core.IsSame.describeTo(org.hamcrest.Description)</inbound>
                <inbound type="feature" confirmed="yes">org.junit.Assert.assertThat(java.lang.String, java.lang.Object, org.hamcrest.Matcher)</inbound>
                <inbound type="feature" confirmed="yes">org.junit.experimental.results.ResultMatchers$1.describeTo(org.hamcrest.Description)</inbound>
                <inbound type="feature" confirmed="yes">org.junit.experimental.results.ResultMatchers$2.describeTo(org.hamcrest.Description)</inbound>
                <inbound type="feature" confirmed="yes">org.junit.experimental.results.ResultMatchers$3.describeTo(org.hamcrest.Description)</inbound>
                <inbound type="feature" confirmed="yes">org.junit.internal.AssumptionViolatedException.describeTo(org.hamcrest.Description)</inbound>
                <inbound type="feature" confirmed="yes">org.junit.internal.matchers.Each$1.describeTo(org.hamcrest.Description)</inbound>
                <inbound type="feature" confirmed="yes">org.junit.internal.matchers.IsCollectionContaining.describeTo(org.hamcrest.Description)</inbound>
                <inbound type="feature" confirmed="yes">org.junit.internal.matchers.SubstringMatcher.describeTo(org.hamcrest.Description)</inbound>
                <inbound type="feature" confirmed="yes">org.junit.rules.ExpectedException$1.describeTo(org.hamcrest.Description)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.hamcrest.Description.appendValue(java.lang.Object)</name>
                <outbound type="class" confirmed="no">java.lang.Object</outbound>
                <inbound type="feature" confirmed="yes">org.hamcrest.core.DescribedAs.describeTo(org.hamcrest.Description)</inbound>
                <inbound type="feature" confirmed="yes">org.hamcrest.core.IsEqual.describeTo(org.hamcrest.Description)</inbound>
                <inbound type="feature" confirmed="yes">org.hamcrest.core.IsSame.describeTo(org.hamcrest.Description)</inbound>
                <inbound type="feature" confirmed="yes">org.hamcrest.internal.SelfDescribingValue.describeTo(org.hamcrest.Description)</inbound>
                <inbound type="feature" confirmed="yes">org.junit.Assert.assertThat(java.lang.String, java.lang.Object, org.hamcrest.Matcher)</inbound>
                <inbound type="feature" confirmed="yes">org.junit.internal.AssumptionViolatedException.describeTo(org.hamcrest.Description)</inbound>
                <inbound type="feature" confirmed="yes">org.junit.internal.matchers.SubstringMatcher.describeTo(org.hamcrest.Description)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.hamcrest.Description.appendValueList(java.lang.String, java.lang.String, java.lang.String, java.lang.Iterable)</name>
                <outbound type="class" confirmed="no">java.lang.Iterable</outbound>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.hamcrest.Description.appendValueList(java.lang.String, java.lang.String, java.lang.String, java.lang.Object[])</name>
                <outbound type="class" confirmed="no">java.lang.Object</outbound>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
            </feature>
        </class>
        <class confirmed="yes">
            <name>org.hamcrest.Factory</name>
            <outbound type="class" confirmed="no">java.lang.Object</outbound>
            <outbound type="class" confirmed="no">java.lang.annotation.Annotation</outbound>
        </class>
        <class confirmed="yes">
            <name>org.hamcrest.Matcher</name>
            <outbound type="class" confirmed="no">java.lang.Object</outbound>
            <outbound type="class" confirmed="yes">org.hamcrest.SelfDescribing</outbound>
            <inbound type="class" confirmed="yes">org.hamcrest.BaseMatcher</inbound>
            <inbound type="feature" confirmed="yes">org.hamcrest.CoreMatchers.allOf(java.lang.Iterable)</inbound>
            <inbound type="feature" confirmed="yes">org.hamcrest.CoreMatchers.allOf(org.hamcrest.Matcher[])</inbound>
            <inbound type="feature" confirmed="yes">org.hamcrest.CoreMatchers.any(java.lang.Class)</inbound>
            <inbound type="feature" confirmed="yes">org.hamcrest.CoreMatchers.anyOf(java.lang.Iterable)</inbound>
            <inbound type="feature" confirmed="yes">org.hamcrest.CoreMatchers.anyOf(org.hamcrest.Matcher[])</inbound>
            <inbound type="feature" confirmed="yes">org.hamcrest.CoreMatchers.anything()</inbound>
            <inbound type="feature" confirmed="yes">org.hamcrest.CoreMatchers.anything(java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">org.hamcrest.CoreMatchers.describedAs(java.lang.String, org.hamcrest.Matcher, java.lang.Object[])</inbound>
            <inbound type="feature" confirmed="yes">org.hamcrest.CoreMatchers.equalTo(java.lang.Object)</inbound>
            <inbound type="feature" confirmed="yes">org.hamcrest.CoreMatchers.instanceOf(java.lang.Class)</inbound>
            <inbound type="feature" confirmed="yes">org.hamcrest.CoreMatchers.is(java.lang.Class)</inbound>
            <inbound type="feature" confirmed="yes">org.hamcrest.CoreMatchers.is(java.lang.Object)</inbound>
            <inbound type="feature" confirmed="yes">org.hamcrest.CoreMatchers.is(org.hamcrest.Matcher)</inbound>
            <inbound type="feature" confirmed="yes">org.hamcrest.CoreMatchers.not(java.lang.Object)</inbound>
            <inbound type="feature" confirmed="yes">org.hamcrest.CoreMatchers.not(org.hamcrest.Matcher)</inbound>
            <inbound type="feature" confirmed="yes">org.hamcrest.CoreMatchers.notNullValue()</inbound>
            <inbound type="feature" confirmed="yes">org.hamcrest.CoreMatchers.notNullValue(java.lang.Class)</inbound>
            <inbound type="feature" confirmed="yes">org.hamcrest.CoreMatchers.nullValue()</inbound>
            <inbound type="feature" confirmed="yes">org.hamcrest.CoreMatchers.nullValue(java.lang.Class)</inbound>
            <inbound type="feature" confirmed="yes">org.hamcrest.CoreMatchers.sameInstance(java.lang.Object)</inbound>
            <inbound type="feature" confirmed="yes">org.hamcrest.core.AllOf.allOf(java.lang.Iterable)</inbound>
            <inbound type="feature" confirmed="yes">org.hamcrest.core.AllOf.allOf(org.hamcrest.Matcher[])</inbound>
            <inbound type="feature" confirmed="yes">org.hamcrest.core.AllOf.matches(java.lang.Object)</inbound>
            <inbound type="feature" confirmed="yes">org.hamcrest.core.AnyOf.anyOf(java.lang.Iterable)</inbound>
            <inbound type="feature" confirmed="yes">org.hamcrest.core.AnyOf.anyOf(org.hamcrest.Matcher[])</inbound>
            <inbound type="feature" confirmed="yes">org.hamcrest.core.AnyOf.matches(java.lang.Object)</inbound>
            <inbound type="feature" confirmed="yes">org.hamcrest.core.DescribedAs.DescribedAs(java.lang.String, org.hamcrest.Matcher, java.lang.Object[])</inbound>
            <inbound type="feature" confirmed="yes">org.hamcrest.core.DescribedAs.describedAs(java.lang.String, org.hamcrest.Matcher, java.lang.Object[])</inbound>
            <inbound type="feature" confirmed="yes">org.hamcrest.core.DescribedAs.matcher</inbound>
            <inbound type="feature" confirmed="yes">org.hamcrest.core.DescribedAs.matches(java.lang.Object)</inbound>
            <inbound type="feature" confirmed="yes">org.hamcrest.core.Is.Is(org.hamcrest.Matcher)</inbound>
            <inbound type="feature" confirmed="yes">org.hamcrest.core.Is.describeTo(org.hamcrest.Description)</inbound>
            <inbound type="feature" confirmed="yes">org.hamcrest.core.Is.is(java.lang.Class)</inbound>
            <inbound type="feature" confirmed="yes">org.hamcrest.core.Is.is(java.lang.Object)</inbound>
            <inbound type="feature" confirmed="yes">org.hamcrest.core.Is.is(org.hamcrest.Matcher)</inbound>
            <inbound type="feature" confirmed="yes">org.hamcrest.core.Is.matcher</inbound>
            <inbound type="feature" confirmed="yes">org.hamcrest.core.Is.matches(java.lang.Object)</inbound>
            <inbound type="feature" confirmed="yes">org.hamcrest.core.IsAnything.any(java.lang.Class)</inbound>
            <inbound type="feature" confirmed="yes">org.hamcrest.core.IsAnything.anything()</inbound>
            <inbound type="feature" confirmed="yes">org.hamcrest.core.IsAnything.anything(java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">org.hamcrest.core.IsEqual.equalTo(java.lang.Object)</inbound>
            <inbound type="feature" confirmed="yes">org.hamcrest.core.IsInstanceOf.instanceOf(java.lang.Class)</inbound>
            <inbound type="feature" confirmed="yes">org.hamcrest.core.IsNot.IsNot(org.hamcrest.Matcher)</inbound>
            <inbound type="feature" confirmed="yes">org.hamcrest.core.IsNot.describeTo(org.hamcrest.Description)</inbound>
            <inbound type="feature" confirmed="yes">org.hamcrest.core.IsNot.matcher</inbound>
            <inbound type="feature" confirmed="yes">org.hamcrest.core.IsNot.matches(java.lang.Object)</inbound>
            <inbound type="feature" confirmed="yes">org.hamcrest.core.IsNot.not(java.lang.Object)</inbound>
            <inbound type="feature" confirmed="yes">org.hamcrest.core.IsNot.not(org.hamcrest.Matcher)</inbound>
            <inbound type="feature" confirmed="yes">org.hamcrest.core.IsNull.notNullValue()</inbound>
            <inbound type="feature" confirmed="yes">org.hamcrest.core.IsNull.notNullValue(java.lang.Class)</inbound>
            <inbound type="feature" confirmed="yes">org.hamcrest.core.IsNull.nullValue()</inbound>
            <inbound type="feature" confirmed="yes">org.hamcrest.core.IsNull.nullValue(java.lang.Class)</inbound>
            <inbound type="feature" confirmed="yes">org.hamcrest.core.IsSame.sameInstance(java.lang.Object)</inbound>
            <inbound type="feature" confirmed="yes">org.junit.Assert.assertThat(java.lang.Object, org.hamcrest.Matcher)</inbound>
            <inbound type="feature" confirmed="yes">org.junit.Assert.assertThat(java.lang.String, java.lang.Object, org.hamcrest.Matcher)</inbound>
            <inbound type="feature" confirmed="yes">org.junit.Assume.assumeNoException(java.lang.Throwable)</inbound>
            <inbound type="feature" confirmed="yes">org.junit.Assume.assumeNotNull(java.lang.Object[])</inbound>
            <inbound type="feature" confirmed="yes">org.junit.Assume.assumeThat(java.lang.Object, org.hamcrest.Matcher)</inbound>
            <inbound type="feature" confirmed="yes">org.junit.Assume.assumeTrue(boolean)</inbound>
            <inbound type="feature" confirmed="yes">org.junit.experimental.results.ResultMatchers$2.matches(java.lang.Object)</inbound>
            <inbound type="feature" confirmed="yes">org.junit.experimental.results.ResultMatchers.failureCountIs(int)</inbound>
            <inbound type="feature" confirmed="yes">org.junit.experimental.results.ResultMatchers.hasFailureContaining(java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">org.junit.experimental.results.ResultMatchers.hasSingleFailureContaining(java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">org.junit.experimental.results.ResultMatchers.isSuccessful()</inbound>
            <inbound type="feature" confirmed="yes">org.junit.internal.AssumptionViolatedException.AssumptionViolatedException(java.lang.Object, org.hamcrest.Matcher)</inbound>
            <inbound type="feature" confirmed="yes">org.junit.internal.AssumptionViolatedException.AssumptionViolatedException(java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">org.junit.internal.AssumptionViolatedException.describeTo(org.hamcrest.Description)</inbound>
            <inbound type="feature" confirmed="yes">org.junit.internal.AssumptionViolatedException.fMatcher</inbound>
            <inbound type="feature" confirmed="yes">org.junit.internal.matchers.CombinableMatcher.CombinableMatcher(org.hamcrest.Matcher)</inbound>
            <inbound type="feature" confirmed="yes">org.junit.internal.matchers.CombinableMatcher.and(org.hamcrest.Matcher)</inbound>
            <inbound type="feature" confirmed="yes">org.junit.internal.matchers.CombinableMatcher.describeTo(org.hamcrest.Description)</inbound>
            <inbound type="feature" confirmed="yes">org.junit.internal.matchers.CombinableMatcher.fMatcher</inbound>
            <inbound type="feature" confirmed="yes">org.junit.internal.matchers.CombinableMatcher.matches(java.lang.Object)</inbound>
            <inbound type="feature" confirmed="yes">org.junit.internal.matchers.CombinableMatcher.or(org.hamcrest.Matcher)</inbound>
            <inbound type="feature" confirmed="yes">org.junit.internal.matchers.Each$1.Each$1(org.hamcrest.Matcher, org.hamcrest.Matcher)</inbound>
            <inbound type="feature" confirmed="yes">org.junit.internal.matchers.Each$1.describeTo(org.hamcrest.Description)</inbound>
            <inbound type="feature" confirmed="yes">org.junit.internal.matchers.Each$1.matches(java.lang.Object)</inbound>
            <inbound type="feature" confirmed="yes">org.junit.internal.matchers.Each$1.val$allItemsAre</inbound>
            <inbound type="feature" confirmed="yes">org.junit.internal.matchers.Each$1.val$individual</inbound>
            <inbound type="feature" confirmed="yes">org.junit.internal.matchers.Each.each(org.hamcrest.Matcher)</inbound>
            <inbound type="feature" confirmed="yes">org.junit.internal.matchers.IsCollectionContaining.IsCollectionContaining(org.hamcrest.Matcher)</inbound>
            <inbound type="feature" confirmed="yes">org.junit.internal.matchers.IsCollectionContaining.describeTo(org.hamcrest.Description)</inbound>
            <inbound type="feature" confirmed="yes">org.junit.internal.matchers.IsCollectionContaining.elementMatcher</inbound>
            <inbound type="feature" confirmed="yes">org.junit.internal.matchers.IsCollectionContaining.hasItem(java.lang.Object)</inbound>
            <inbound type="feature" confirmed="yes">org.junit.internal.matchers.IsCollectionContaining.hasItem(org.hamcrest.Matcher)</inbound>
            <inbound type="feature" confirmed="yes">org.junit.internal.matchers.IsCollectionContaining.hasItems(java.lang.Object[])</inbound>
            <inbound type="feature" confirmed="yes">org.junit.internal.matchers.IsCollectionContaining.hasItems(org.hamcrest.Matcher[])</inbound>
            <inbound type="feature" confirmed="yes">org.junit.internal.matchers.IsCollectionContaining.matchesSafely(java.lang.Iterable)</inbound>
            <inbound type="feature" confirmed="yes">org.junit.internal.matchers.StringContains.containsString(java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">org.junit.matchers.JUnitMatchers.both(org.hamcrest.Matcher)</inbound>
            <inbound type="feature" confirmed="yes">org.junit.matchers.JUnitMatchers.containsString(java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">org.junit.matchers.JUnitMatchers.either(org.hamcrest.Matcher)</inbound>
            <inbound type="feature" confirmed="yes">org.junit.matchers.JUnitMatchers.everyItem(org.hamcrest.Matcher)</inbound>
            <inbound type="feature" confirmed="yes">org.junit.matchers.JUnitMatchers.hasItem(java.lang.Object)</inbound>
            <inbound type="feature" confirmed="yes">org.junit.matchers.JUnitMatchers.hasItem(org.hamcrest.Matcher)</inbound>
            <inbound type="feature" confirmed="yes">org.junit.matchers.JUnitMatchers.hasItems(java.lang.Object[])</inbound>
            <inbound type="feature" confirmed="yes">org.junit.matchers.JUnitMatchers.hasItems(org.hamcrest.Matcher[])</inbound>
            <inbound type="feature" confirmed="yes">org.junit.rules.ErrorCollector$1.ErrorCollector$1(org.junit.rules.ErrorCollector, java.lang.Object, org.hamcrest.Matcher)</inbound>
            <inbound type="feature" confirmed="yes">org.junit.rules.ErrorCollector$1.call()</inbound>
            <inbound type="feature" confirmed="yes">org.junit.rules.ErrorCollector$1.val$matcher</inbound>
            <inbound type="feature" confirmed="yes">org.junit.rules.ErrorCollector.checkThat(java.lang.Object, org.hamcrest.Matcher)</inbound>
            <inbound type="feature" confirmed="yes">org.junit.rules.ExpectedException$1.ExpectedException$1(org.junit.rules.ExpectedException, org.hamcrest.Matcher)</inbound>
            <inbound type="feature" confirmed="yes">org.junit.rules.ExpectedException$1.describeTo(org.hamcrest.Description)</inbound>
            <inbound type="feature" confirmed="yes">org.junit.rules.ExpectedException$1.matchesSafely(java.lang.Throwable)</inbound>
            <inbound type="feature" confirmed="yes">org.junit.rules.ExpectedException$1.val$matcher</inbound>
            <inbound type="feature" confirmed="yes">org.junit.rules.ExpectedException$ExpectedExceptionStatement.evaluate()</inbound>
            <inbound type="feature" confirmed="yes">org.junit.rules.ExpectedException.ExpectedException()</inbound>
            <inbound type="feature" confirmed="yes">org.junit.rules.ExpectedException.access$000(org.junit.rules.ExpectedException)</inbound>
            <inbound type="feature" confirmed="yes">org.junit.rules.ExpectedException.expect(java.lang.Class)</inbound>
            <inbound type="feature" confirmed="yes">org.junit.rules.ExpectedException.expect(org.hamcrest.Matcher)</inbound>
            <inbound type="feature" confirmed="yes">org.junit.rules.ExpectedException.expectMessage(java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">org.junit.rules.ExpectedException.expectMessage(org.hamcrest.Matcher)</inbound>
            <inbound type="feature" confirmed="yes">org.junit.rules.ExpectedException.fMatcher</inbound>
            <inbound type="feature" confirmed="yes">org.junit.rules.ExpectedException.hasMessage(org.hamcrest.Matcher)</inbound>
            <feature confirmed="yes">
                <name>org.hamcrest.Matcher._dont_implement_Matcher___instead_extend_BaseMatcher_()</name>
            </feature>
            <feature confirmed="no">
                <name>org.hamcrest.Matcher.describeTo(org.hamcrest.Description)</name>
                <inbound type="feature" confirmed="yes">org.junit.internal.matchers.Each$1.describeTo(org.hamcrest.Description)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.hamcrest.Matcher.matches(java.lang.Object)</name>
                <outbound type="class" confirmed="no">java.lang.Object</outbound>
                <inbound type="feature" confirmed="yes">org.hamcrest.core.AllOf.matches(java.lang.Object)</inbound>
                <inbound type="feature" confirmed="yes">org.hamcrest.core.AnyOf.matches(java.lang.Object)</inbound>
                <inbound type="feature" confirmed="yes">org.hamcrest.core.DescribedAs.matches(java.lang.Object)</inbound>
                <inbound type="feature" confirmed="yes">org.hamcrest.core.Is.matches(java.lang.Object)</inbound>
                <inbound type="feature" confirmed="yes">org.hamcrest.core.IsNot.matches(java.lang.Object)</inbound>
                <inbound type="feature" confirmed="yes">org.junit.Assert.assertThat(java.lang.String, java.lang.Object, org.hamcrest.Matcher)</inbound>
                <inbound type="feature" confirmed="yes">org.junit.Assume.assumeThat(java.lang.Object, org.hamcrest.Matcher)</inbound>
                <inbound type="feature" confirmed="yes">org.junit.experimental.results.ResultMatchers$2.matches(java.lang.Object)</inbound>
                <inbound type="feature" confirmed="yes">org.junit.internal.matchers.CombinableMatcher.matches(java.lang.Object)</inbound>
                <inbound type="feature" confirmed="yes">org.junit.internal.matchers.Each$1.matches(java.lang.Object)</inbound>
                <inbound type="feature" confirmed="yes">org.junit.internal.matchers.IsCollectionContaining.matchesSafely(java.lang.Iterable)</inbound>
                <inbound type="feature" confirmed="yes">org.junit.rules.ExpectedException$1.matchesSafely(java.lang.Throwable)</inbound>
            </feature>
        </class>
        <class confirmed="yes">
            <name>org.hamcrest.SelfDescribing</name>
            <outbound type="class" confirmed="no">java.lang.Object</outbound>
            <inbound type="feature" confirmed="yes">org.hamcrest.BaseDescription.appendDescriptionOf(org.hamcrest.SelfDescribing)</inbound>
            <inbound type="feature" confirmed="yes">org.hamcrest.BaseDescription.appendList(java.lang.String, java.lang.String, java.lang.String, java.util.Iterator)</inbound>
            <inbound type="feature" confirmed="yes">org.hamcrest.BaseMatcher.toString()</inbound>
            <inbound type="feature" confirmed="yes">org.hamcrest.Description.appendDescriptionOf(org.hamcrest.SelfDescribing)</inbound>
            <inbound type="class" confirmed="yes">org.hamcrest.Matcher</inbound>
            <inbound type="feature" confirmed="yes">org.hamcrest.StringDescription.asString(org.hamcrest.SelfDescribing)</inbound>
            <inbound type="feature" confirmed="yes">org.hamcrest.StringDescription.toString(org.hamcrest.SelfDescribing)</inbound>
            <inbound type="feature" confirmed="yes">org.hamcrest.core.Is.describeTo(org.hamcrest.Description)</inbound>
            <inbound type="feature" confirmed="yes">org.hamcrest.core.IsNot.describeTo(org.hamcrest.Description)</inbound>
            <inbound type="class" confirmed="yes">org.hamcrest.internal.SelfDescribingValue</inbound>
            <inbound type="feature" confirmed="yes">org.hamcrest.internal.SelfDescribingValueIterator.next()</inbound>
            <inbound type="feature" confirmed="yes">org.junit.Assert.assertThat(java.lang.String, java.lang.Object, org.hamcrest.Matcher)</inbound>
            <inbound type="class" confirmed="yes">org.junit.internal.AssumptionViolatedException</inbound>
            <inbound type="feature" confirmed="yes">org.junit.internal.AssumptionViolatedException.describeTo(org.hamcrest.Description)</inbound>
            <inbound type="feature" confirmed="yes">org.junit.internal.AssumptionViolatedException.getMessage()</inbound>
            <inbound type="feature" confirmed="yes">org.junit.internal.matchers.CombinableMatcher.describeTo(org.hamcrest.Description)</inbound>
            <inbound type="feature" confirmed="yes">org.junit.internal.matchers.IsCollectionContaining.describeTo(org.hamcrest.Description)</inbound>
            <inbound type="feature" confirmed="yes">org.junit.rules.ExpectedException$1.describeTo(org.hamcrest.Description)</inbound>
            <inbound type="feature" confirmed="yes">org.junit.rules.ExpectedException$ExpectedExceptionStatement.evaluate()</inbound>
            <feature confirmed="yes">
                <name>org.hamcrest.SelfDescribing.describeTo(org.hamcrest.Description)</name>
                <outbound type="class" confirmed="yes">org.hamcrest.Description</outbound>
                <inbound type="feature" confirmed="yes">org.hamcrest.BaseDescription.appendDescriptionOf(org.hamcrest.SelfDescribing)</inbound>
            </feature>
        </class>
        <class confirmed="yes">
            <name>org.hamcrest.StringDescription</name>
            <outbound type="class" confirmed="yes">org.hamcrest.BaseDescription</outbound>
            <feature confirmed="yes">
                <name>org.hamcrest.StringDescription.StringDescription()</name>
                <outbound type="class" confirmed="no">java.lang.Appendable</outbound>
                <outbound type="feature" confirmed="no">java.lang.StringBuilder.StringBuilder()</outbound>
                <outbound type="feature" confirmed="yes">org.hamcrest.StringDescription.StringDescription(java.lang.Appendable)</outbound>
                <inbound type="feature" confirmed="yes">org.hamcrest.StringDescription.toString(org.hamcrest.SelfDescribing)</inbound>
                <inbound type="feature" confirmed="yes">org.junit.Assert.assertThat(java.lang.String, java.lang.Object, org.hamcrest.Matcher)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.hamcrest.StringDescription.StringDescription(java.lang.Appendable)</name>
                <outbound type="class" confirmed="no">java.lang.Appendable</outbound>
                <outbound type="feature" confirmed="yes">org.hamcrest.BaseDescription.BaseDescription()</outbound>
                <outbound type="feature" confirmed="yes">org.hamcrest.StringDescription.out</outbound>
                <inbound type="feature" confirmed="yes">org.hamcrest.StringDescription.StringDescription()</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.hamcrest.StringDescription.append(char)</name>
                <outbound type="class" confirmed="no">java.io.IOException</outbound>
                <outbound type="class" confirmed="no">java.lang.Appendable</outbound>
                <outbound type="feature" confirmed="no">java.lang.Appendable.append(char)</outbound>
                <outbound type="feature" confirmed="no">java.lang.RuntimeException.RuntimeException(java.lang.String, java.lang.Throwable)</outbound>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="class" confirmed="no">java.lang.Throwable</outbound>
                <outbound type="feature" confirmed="yes">org.hamcrest.StringDescription.out</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.hamcrest.StringDescription.append(java.lang.String)</name>
                <outbound type="class" confirmed="no">java.io.IOException</outbound>
                <outbound type="class" confirmed="no">java.lang.Appendable</outbound>
                <outbound type="feature" confirmed="no">java.lang.Appendable.append(java.lang.CharSequence)</outbound>
                <outbound type="class" confirmed="no">java.lang.CharSequence</outbound>
                <outbound type="feature" confirmed="no">java.lang.RuntimeException.RuntimeException(java.lang.String, java.lang.Throwable)</outbound>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="class" confirmed="no">java.lang.Throwable</outbound>
                <outbound type="feature" confirmed="yes">org.hamcrest.StringDescription.out</outbound>
            </feature>
            <feature confirmed="no">
                <name>org.hamcrest.StringDescription.appendDescriptionOf(org.hamcrest.SelfDescribing)</name>
                <inbound type="feature" confirmed="yes">org.hamcrest.StringDescription.toString(org.hamcrest.SelfDescribing)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.hamcrest.StringDescription.asString(org.hamcrest.SelfDescribing)</name>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="class" confirmed="yes">org.hamcrest.SelfDescribing</outbound>
                <outbound type="feature" confirmed="yes">org.hamcrest.StringDescription.toString(org.hamcrest.SelfDescribing)</outbound>
                <inbound type="feature" confirmed="yes">org.junit.internal.AssumptionViolatedException.getMessage()</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.hamcrest.StringDescription.out</name>
                <outbound type="class" confirmed="no">java.lang.Appendable</outbound>
                <inbound type="feature" confirmed="yes">org.hamcrest.StringDescription.StringDescription(java.lang.Appendable)</inbound>
                <inbound type="feature" confirmed="yes">org.hamcrest.StringDescription.append(char)</inbound>
                <inbound type="feature" confirmed="yes">org.hamcrest.StringDescription.append(java.lang.String)</inbound>
                <inbound type="feature" confirmed="yes">org.hamcrest.StringDescription.toString()</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.hamcrest.StringDescription.toString()</name>
                <outbound type="class" confirmed="no">java.lang.Appendable</outbound>
                <outbound type="feature" confirmed="no">java.lang.Object.toString()</outbound>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="feature" confirmed="yes">org.hamcrest.StringDescription.out</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.hamcrest.StringDescription.toString(org.hamcrest.SelfDescribing)</name>
                <outbound type="feature" confirmed="no">java.lang.Object.toString()</outbound>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="class" confirmed="yes">org.hamcrest.Description</outbound>
                <outbound type="class" confirmed="yes">org.hamcrest.SelfDescribing</outbound>
                <outbound type="feature" confirmed="yes">org.hamcrest.StringDescription.StringDescription()</outbound>
                <outbound type="feature" confirmed="no">org.hamcrest.StringDescription.appendDescriptionOf(org.hamcrest.SelfDescribing)</outbound>
                <inbound type="feature" confirmed="yes">org.hamcrest.BaseMatcher.toString()</inbound>
                <inbound type="feature" confirmed="yes">org.hamcrest.StringDescription.asString(org.hamcrest.SelfDescribing)</inbound>
                <inbound type="feature" confirmed="yes">org.junit.rules.ExpectedException$ExpectedExceptionStatement.evaluate()</inbound>
            </feature>
        </class>
    </package>
    <package confirmed="yes">
        <name>org.hamcrest.core</name>
        <class confirmed="yes">
            <name>org.hamcrest.core.AllOf</name>
            <outbound type="class" confirmed="yes">org.hamcrest.BaseMatcher</outbound>
            <feature confirmed="yes">
                <name>org.hamcrest.core.AllOf.AllOf(java.lang.Iterable)</name>
                <outbound type="class" confirmed="no">java.lang.Iterable</outbound>
                <outbound type="feature" confirmed="yes">org.hamcrest.BaseMatcher.BaseMatcher()</outbound>
                <outbound type="feature" confirmed="yes">org.hamcrest.core.AllOf.matchers</outbound>
                <inbound type="feature" confirmed="yes">org.hamcrest.core.AllOf.allOf(java.lang.Iterable)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.hamcrest.core.AllOf.allOf(java.lang.Iterable)</name>
                <outbound type="class" confirmed="no">java.lang.Iterable</outbound>
                <outbound type="class" confirmed="yes">org.hamcrest.Matcher</outbound>
                <outbound type="feature" confirmed="yes">org.hamcrest.core.AllOf.AllOf(java.lang.Iterable)</outbound>
                <inbound type="feature" confirmed="yes">org.hamcrest.CoreMatchers.allOf(java.lang.Iterable)</inbound>
                <inbound type="feature" confirmed="yes">org.hamcrest.core.AllOf.allOf(org.hamcrest.Matcher[])</inbound>
                <inbound type="feature" confirmed="yes">org.junit.internal.matchers.IsCollectionContaining.hasItems(java.lang.Object[])</inbound>
                <inbound type="feature" confirmed="yes">org.junit.internal.matchers.IsCollectionContaining.hasItems(org.hamcrest.Matcher[])</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.hamcrest.core.AllOf.allOf(org.hamcrest.Matcher[])</name>
                <outbound type="class" confirmed="no">java.lang.Iterable</outbound>
                <outbound type="class" confirmed="no">java.lang.Object</outbound>
                <outbound type="feature" confirmed="no">java.util.Arrays.asList(java.lang.Object[])</outbound>
                <outbound type="class" confirmed="no">java.util.List</outbound>
                <outbound type="class" confirmed="yes">org.hamcrest.Matcher</outbound>
                <outbound type="feature" confirmed="yes">org.hamcrest.core.AllOf.allOf(java.lang.Iterable)</outbound>
                <inbound type="feature" confirmed="yes">org.hamcrest.CoreMatchers.allOf(org.hamcrest.Matcher[])</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.hamcrest.core.AllOf.describeTo(org.hamcrest.Description)</name>
                <outbound type="class" confirmed="no">java.lang.Iterable</outbound>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="class" confirmed="yes">org.hamcrest.Description</outbound>
                <outbound type="feature" confirmed="yes">org.hamcrest.Description.appendList(java.lang.String, java.lang.String, java.lang.String, java.lang.Iterable)</outbound>
                <outbound type="feature" confirmed="yes">org.hamcrest.core.AllOf.matchers</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.hamcrest.core.AllOf.matchers</name>
                <outbound type="class" confirmed="no">java.lang.Iterable</outbound>
                <inbound type="feature" confirmed="yes">org.hamcrest.core.AllOf.AllOf(java.lang.Iterable)</inbound>
                <inbound type="feature" confirmed="yes">org.hamcrest.core.AllOf.describeTo(org.hamcrest.Description)</inbound>
                <inbound type="feature" confirmed="yes">org.hamcrest.core.AllOf.matches(java.lang.Object)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.hamcrest.core.AllOf.matches(java.lang.Object)</name>
                <outbound type="class" confirmed="no">java.lang.Iterable</outbound>
                <outbound type="feature" confirmed="no">java.lang.Iterable.iterator()</outbound>
                <outbound type="class" confirmed="no">java.lang.Object</outbound>
                <outbound type="class" confirmed="no">java.util.Iterator</outbound>
                <outbound type="feature" confirmed="no">java.util.Iterator.hasNext()</outbound>
                <outbound type="feature" confirmed="no">java.util.Iterator.next()</outbound>
                <outbound type="class" confirmed="yes">org.hamcrest.Matcher</outbound>
                <outbound type="feature" confirmed="yes">org.hamcrest.Matcher.matches(java.lang.Object)</outbound>
                <outbound type="feature" confirmed="yes">org.hamcrest.core.AllOf.matchers</outbound>
            </feature>
        </class>
        <class confirmed="yes">
            <name>org.hamcrest.core.AnyOf</name>
            <outbound type="class" confirmed="yes">org.hamcrest.BaseMatcher</outbound>
            <feature confirmed="yes">
                <name>org.hamcrest.core.AnyOf.AnyOf(java.lang.Iterable)</name>
                <outbound type="class" confirmed="no">java.lang.Iterable</outbound>
                <outbound type="feature" confirmed="yes">org.hamcrest.BaseMatcher.BaseMatcher()</outbound>
                <outbound type="feature" confirmed="yes">org.hamcrest.core.AnyOf.matchers</outbound>
                <inbound type="feature" confirmed="yes">org.hamcrest.core.AnyOf.anyOf(java.lang.Iterable)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.hamcrest.core.AnyOf.anyOf(java.lang.Iterable)</name>
                <outbound type="class" confirmed="no">java.lang.Iterable</outbound>
                <outbound type="class" confirmed="yes">org.hamcrest.Matcher</outbound>
                <outbound type="feature" confirmed="yes">org.hamcrest.core.AnyOf.AnyOf(java.lang.Iterable)</outbound>
                <inbound type="feature" confirmed="yes">org.hamcrest.CoreMatchers.anyOf(java.lang.Iterable)</inbound>
                <inbound type="feature" confirmed="yes">org.hamcrest.core.AnyOf.anyOf(org.hamcrest.Matcher[])</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.hamcrest.core.AnyOf.anyOf(org.hamcrest.Matcher[])</name>
                <outbound type="class" confirmed="no">java.lang.Iterable</outbound>
                <outbound type="class" confirmed="no">java.lang.Object</outbound>
                <outbound type="feature" confirmed="no">java.util.Arrays.asList(java.lang.Object[])</outbound>
                <outbound type="class" confirmed="no">java.util.List</outbound>
                <outbound type="class" confirmed="yes">org.hamcrest.Matcher</outbound>
                <outbound type="feature" confirmed="yes">org.hamcrest.core.AnyOf.anyOf(java.lang.Iterable)</outbound>
                <inbound type="feature" confirmed="yes">org.hamcrest.CoreMatchers.anyOf(org.hamcrest.Matcher[])</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.hamcrest.core.AnyOf.describeTo(org.hamcrest.Description)</name>
                <outbound type="class" confirmed="no">java.lang.Iterable</outbound>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="class" confirmed="yes">org.hamcrest.Description</outbound>
                <outbound type="feature" confirmed="yes">org.hamcrest.Description.appendList(java.lang.String, java.lang.String, java.lang.String, java.lang.Iterable)</outbound>
                <outbound type="feature" confirmed="yes">org.hamcrest.core.AnyOf.matchers</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.hamcrest.core.AnyOf.matchers</name>
                <outbound type="class" confirmed="no">java.lang.Iterable</outbound>
                <inbound type="feature" confirmed="yes">org.hamcrest.core.AnyOf.AnyOf(java.lang.Iterable)</inbound>
                <inbound type="feature" confirmed="yes">org.hamcrest.core.AnyOf.describeTo(org.hamcrest.Description)</inbound>
                <inbound type="feature" confirmed="yes">org.hamcrest.core.AnyOf.matches(java.lang.Object)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.hamcrest.core.AnyOf.matches(java.lang.Object)</name>
                <outbound type="class" confirmed="no">java.lang.Iterable</outbound>
                <outbound type="feature" confirmed="no">java.lang.Iterable.iterator()</outbound>
                <outbound type="class" confirmed="no">java.lang.Object</outbound>
                <outbound type="class" confirmed="no">java.util.Iterator</outbound>
                <outbound type="feature" confirmed="no">java.util.Iterator.hasNext()</outbound>
                <outbound type="feature" confirmed="no">java.util.Iterator.next()</outbound>
                <outbound type="class" confirmed="yes">org.hamcrest.Matcher</outbound>
                <outbound type="feature" confirmed="yes">org.hamcrest.Matcher.matches(java.lang.Object)</outbound>
                <outbound type="feature" confirmed="yes">org.hamcrest.core.AnyOf.matchers</outbound>
            </feature>
        </class>
        <class confirmed="yes">
            <name>org.hamcrest.core.DescribedAs</name>
            <outbound type="class" confirmed="yes">org.hamcrest.BaseMatcher</outbound>
            <feature confirmed="yes">
                <name>org.hamcrest.core.DescribedAs.ARG_PATTERN</name>
                <outbound type="class" confirmed="no">java.util.regex.Pattern</outbound>
                <inbound type="feature" confirmed="yes">org.hamcrest.core.DescribedAs.describeTo(org.hamcrest.Description)</inbound>
                <inbound type="feature" confirmed="yes">org.hamcrest.core.DescribedAs.static {}</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.hamcrest.core.DescribedAs.DescribedAs(java.lang.String, org.hamcrest.Matcher, java.lang.Object[])</name>
                <outbound type="class" confirmed="no">java.lang.Object</outbound>
                <outbound type="class" confirmed="no">java.lang.Object[]</outbound>
                <outbound type="feature" confirmed="no">java.lang.Object[].clone()</outbound>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="feature" confirmed="yes">org.hamcrest.BaseMatcher.BaseMatcher()</outbound>
                <outbound type="class" confirmed="yes">org.hamcrest.Matcher</outbound>
                <outbound type="feature" confirmed="yes">org.hamcrest.core.DescribedAs.descriptionTemplate</outbound>
                <outbound type="feature" confirmed="yes">org.hamcrest.core.DescribedAs.matcher</outbound>
                <outbound type="feature" confirmed="yes">org.hamcrest.core.DescribedAs.values</outbound>
                <inbound type="feature" confirmed="yes">org.hamcrest.core.DescribedAs.describedAs(java.lang.String, org.hamcrest.Matcher, java.lang.Object[])</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.hamcrest.core.DescribedAs.describeTo(org.hamcrest.Description)</name>
                <outbound type="class" confirmed="no">java.lang.CharSequence</outbound>
                <outbound type="feature" confirmed="no">java.lang.Integer.parseInt(java.lang.String)</outbound>
                <outbound type="class" confirmed="no">java.lang.Object</outbound>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="feature" confirmed="no">java.lang.String.length()</outbound>
                <outbound type="feature" confirmed="no">java.lang.String.substring(int)</outbound>
                <outbound type="feature" confirmed="no">java.lang.String.substring(int, int)</outbound>
                <outbound type="class" confirmed="no">java.util.regex.Matcher</outbound>
                <outbound type="feature" confirmed="no">java.util.regex.Matcher.end()</outbound>
                <outbound type="feature" confirmed="no">java.util.regex.Matcher.find()</outbound>
                <outbound type="feature" confirmed="no">java.util.regex.Matcher.group(int)</outbound>
                <outbound type="feature" confirmed="no">java.util.regex.Matcher.start()</outbound>
                <outbound type="class" confirmed="no">java.util.regex.Pattern</outbound>
                <outbound type="feature" confirmed="no">java.util.regex.Pattern.matcher(java.lang.CharSequence)</outbound>
                <outbound type="class" confirmed="yes">org.hamcrest.Description</outbound>
                <outbound type="feature" confirmed="yes">org.hamcrest.Description.appendText(java.lang.String)</outbound>
                <outbound type="feature" confirmed="yes">org.hamcrest.Description.appendValue(java.lang.Object)</outbound>
                <outbound type="feature" confirmed="yes">org.hamcrest.core.DescribedAs.ARG_PATTERN</outbound>
                <outbound type="feature" confirmed="yes">org.hamcrest.core.DescribedAs.descriptionTemplate</outbound>
                <outbound type="feature" confirmed="yes">org.hamcrest.core.DescribedAs.values</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.hamcrest.core.DescribedAs.describedAs(java.lang.String, org.hamcrest.Matcher, java.lang.Object[])</name>
                <outbound type="class" confirmed="no">java.lang.Object</outbound>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="class" confirmed="yes">org.hamcrest.Matcher</outbound>
                <outbound type="feature" confirmed="yes">org.hamcrest.core.DescribedAs.DescribedAs(java.lang.String, org.hamcrest.Matcher, java.lang.Object[])</outbound>
                <inbound type="feature" confirmed="yes">org.hamcrest.CoreMatchers.describedAs(java.lang.String, org.hamcrest.Matcher, java.lang.Object[])</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.hamcrest.core.DescribedAs.descriptionTemplate</name>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <inbound type="feature" confirmed="yes">org.hamcrest.core.DescribedAs.DescribedAs(java.lang.String, org.hamcrest.Matcher, java.lang.Object[])</inbound>
                <inbound type="feature" confirmed="yes">org.hamcrest.core.DescribedAs.describeTo(org.hamcrest.Description)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.hamcrest.core.DescribedAs.matcher</name>
                <outbound type="class" confirmed="yes">org.hamcrest.Matcher</outbound>
                <inbound type="feature" confirmed="yes">org.hamcrest.core.DescribedAs.DescribedAs(java.lang.String, org.hamcrest.Matcher, java.lang.Object[])</inbound>
                <inbound type="feature" confirmed="yes">org.hamcrest.core.DescribedAs.matches(java.lang.Object)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.hamcrest.core.DescribedAs.matches(java.lang.Object)</name>
                <outbound type="class" confirmed="no">java.lang.Object</outbound>
                <outbound type="class" confirmed="yes">org.hamcrest.Matcher</outbound>
                <outbound type="feature" confirmed="yes">org.hamcrest.Matcher.matches(java.lang.Object)</outbound>
                <outbound type="feature" confirmed="yes">org.hamcrest.core.DescribedAs.matcher</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.hamcrest.core.DescribedAs.static {}</name>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="class" confirmed="no">java.util.regex.Pattern</outbound>
                <outbound type="feature" confirmed="no">java.util.regex.Pattern.compile(java.lang.String)</outbound>
                <outbound type="feature" confirmed="yes">org.hamcrest.core.DescribedAs.ARG_PATTERN</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.hamcrest.core.DescribedAs.values</name>
                <outbound type="class" confirmed="no">java.lang.Object</outbound>
                <inbound type="feature" confirmed="yes">org.hamcrest.core.DescribedAs.DescribedAs(java.lang.String, org.hamcrest.Matcher, java.lang.Object[])</inbound>
                <inbound type="feature" confirmed="yes">org.hamcrest.core.DescribedAs.describeTo(org.hamcrest.Description)</inbound>
            </feature>
        </class>
        <class confirmed="yes">
            <name>org.hamcrest.core.Is</name>
            <outbound type="class" confirmed="yes">org.hamcrest.BaseMatcher</outbound>
            <feature confirmed="yes">
                <name>org.hamcrest.core.Is.Is(org.hamcrest.Matcher)</name>
                <outbound type="feature" confirmed="yes">org.hamcrest.BaseMatcher.BaseMatcher()</outbound>
                <outbound type="class" confirmed="yes">org.hamcrest.Matcher</outbound>
                <outbound type="feature" confirmed="yes">org.hamcrest.core.Is.matcher</outbound>
                <inbound type="feature" confirmed="yes">org.hamcrest.core.Is.is(org.hamcrest.Matcher)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.hamcrest.core.Is.describeTo(org.hamcrest.Description)</name>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="class" confirmed="yes">org.hamcrest.Description</outbound>
                <outbound type="feature" confirmed="yes">org.hamcrest.Description.appendDescriptionOf(org.hamcrest.SelfDescribing)</outbound>
                <outbound type="feature" confirmed="yes">org.hamcrest.Description.appendText(java.lang.String)</outbound>
                <outbound type="class" confirmed="yes">org.hamcrest.Matcher</outbound>
                <outbound type="class" confirmed="yes">org.hamcrest.SelfDescribing</outbound>
                <outbound type="feature" confirmed="yes">org.hamcrest.core.Is.matcher</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.hamcrest.core.Is.is(java.lang.Class)</name>
                <outbound type="class" confirmed="no">java.lang.Class</outbound>
                <outbound type="class" confirmed="yes">org.hamcrest.Matcher</outbound>
                <outbound type="feature" confirmed="yes">org.hamcrest.core.Is.is(org.hamcrest.Matcher)</outbound>
                <outbound type="feature" confirmed="yes">org.hamcrest.core.IsInstanceOf.instanceOf(java.lang.Class)</outbound>
                <inbound type="feature" confirmed="yes">org.hamcrest.CoreMatchers.is(java.lang.Class)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.hamcrest.core.Is.is(java.lang.Object)</name>
                <outbound type="class" confirmed="no">java.lang.Object</outbound>
                <outbound type="class" confirmed="yes">org.hamcrest.Matcher</outbound>
                <outbound type="feature" confirmed="yes">org.hamcrest.core.Is.is(org.hamcrest.Matcher)</outbound>
                <outbound type="feature" confirmed="yes">org.hamcrest.core.IsEqual.equalTo(java.lang.Object)</outbound>
                <inbound type="feature" confirmed="yes">org.hamcrest.CoreMatchers.is(java.lang.Object)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.hamcrest.core.Is.is(org.hamcrest.Matcher)</name>
                <outbound type="class" confirmed="yes">org.hamcrest.Matcher</outbound>
                <outbound type="feature" confirmed="yes">org.hamcrest.core.Is.Is(org.hamcrest.Matcher)</outbound>
                <inbound type="feature" confirmed="yes">org.hamcrest.CoreMatchers.is(org.hamcrest.Matcher)</inbound>
                <inbound type="feature" confirmed="yes">org.hamcrest.core.Is.is(java.lang.Class)</inbound>
                <inbound type="feature" confirmed="yes">org.hamcrest.core.Is.is(java.lang.Object)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.hamcrest.core.Is.matcher</name>
                <outbound type="class" confirmed="yes">org.hamcrest.Matcher</outbound>
                <inbound type="feature" confirmed="yes">org.hamcrest.core.Is.Is(org.hamcrest.Matcher)</inbound>
                <inbound type="feature" confirmed="yes">org.hamcrest.core.Is.describeTo(org.hamcrest.Description)</inbound>
                <inbound type="feature" confirmed="yes">org.hamcrest.core.Is.matches(java.lang.Object)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.hamcrest.core.Is.matches(java.lang.Object)</name>
                <outbound type="class" confirmed="no">java.lang.Object</outbound>
                <outbound type="class" confirmed="yes">org.hamcrest.Matcher</outbound>
                <outbound type="feature" confirmed="yes">org.hamcrest.Matcher.matches(java.lang.Object)</outbound>
                <outbound type="feature" confirmed="yes">org.hamcrest.core.Is.matcher</outbound>
            </feature>
        </class>
        <class confirmed="yes">
            <name>org.hamcrest.core.IsAnything</name>
            <outbound type="class" confirmed="yes">org.hamcrest.BaseMatcher</outbound>
            <feature confirmed="yes">
                <name>org.hamcrest.core.IsAnything.IsAnything()</name>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="feature" confirmed="yes">org.hamcrest.core.IsAnything.IsAnything(java.lang.String)</outbound>
                <inbound type="feature" confirmed="yes">org.hamcrest.core.IsAnything.any(java.lang.Class)</inbound>
                <inbound type="feature" confirmed="yes">org.hamcrest.core.IsAnything.anything()</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.hamcrest.core.IsAnything.IsAnything(java.lang.String)</name>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="feature" confirmed="yes">org.hamcrest.BaseMatcher.BaseMatcher()</outbound>
                <outbound type="feature" confirmed="yes">org.hamcrest.core.IsAnything.description</outbound>
                <inbound type="feature" confirmed="yes">org.hamcrest.core.IsAnything.IsAnything()</inbound>
                <inbound type="feature" confirmed="yes">org.hamcrest.core.IsAnything.anything(java.lang.String)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.hamcrest.core.IsAnything.any(java.lang.Class)</name>
                <outbound type="class" confirmed="no">java.lang.Class</outbound>
                <outbound type="class" confirmed="yes">org.hamcrest.Matcher</outbound>
                <outbound type="feature" confirmed="yes">org.hamcrest.core.IsAnything.IsAnything()</outbound>
                <inbound type="feature" confirmed="yes">org.hamcrest.CoreMatchers.any(java.lang.Class)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.hamcrest.core.IsAnything.anything()</name>
                <outbound type="class" confirmed="yes">org.hamcrest.Matcher</outbound>
                <outbound type="feature" confirmed="yes">org.hamcrest.core.IsAnything.IsAnything()</outbound>
                <inbound type="feature" confirmed="yes">org.hamcrest.CoreMatchers.anything()</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.hamcrest.core.IsAnything.anything(java.lang.String)</name>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="class" confirmed="yes">org.hamcrest.Matcher</outbound>
                <outbound type="feature" confirmed="yes">org.hamcrest.core.IsAnything.IsAnything(java.lang.String)</outbound>
                <inbound type="feature" confirmed="yes">org.hamcrest.CoreMatchers.anything(java.lang.String)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.hamcrest.core.IsAnything.describeTo(org.hamcrest.Description)</name>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="class" confirmed="yes">org.hamcrest.Description</outbound>
                <outbound type="feature" confirmed="yes">org.hamcrest.Description.appendText(java.lang.String)</outbound>
                <outbound type="feature" confirmed="yes">org.hamcrest.core.IsAnything.description</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.hamcrest.core.IsAnything.description</name>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <inbound type="feature" confirmed="yes">org.hamcrest.core.IsAnything.IsAnything(java.lang.String)</inbound>
                <inbound type="feature" confirmed="yes">org.hamcrest.core.IsAnything.describeTo(org.hamcrest.Description)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.hamcrest.core.IsAnything.matches(java.lang.Object)</name>
                <outbound type="class" confirmed="no">java.lang.Object</outbound>
            </feature>
        </class>
        <class confirmed="yes">
            <name>org.hamcrest.core.IsEqual</name>
            <outbound type="class" confirmed="yes">org.hamcrest.BaseMatcher</outbound>
            <feature confirmed="yes">
                <name>org.hamcrest.core.IsEqual.IsEqual(java.lang.Object)</name>
                <outbound type="class" confirmed="no">java.lang.Object</outbound>
                <outbound type="feature" confirmed="yes">org.hamcrest.BaseMatcher.BaseMatcher()</outbound>
                <outbound type="feature" confirmed="yes">org.hamcrest.core.IsEqual.object</outbound>
                <inbound type="feature" confirmed="yes">org.hamcrest.core.IsEqual.equalTo(java.lang.Object)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.hamcrest.core.IsEqual.areArrayElementsEqual(java.lang.Object, java.lang.Object)</name>
                <outbound type="class" confirmed="no">java.lang.Object</outbound>
                <outbound type="feature" confirmed="no">java.lang.reflect.Array.get(java.lang.Object, int)</outbound>
                <outbound type="feature" confirmed="no">java.lang.reflect.Array.getLength(java.lang.Object)</outbound>
                <outbound type="feature" confirmed="yes">org.hamcrest.core.IsEqual.areEqual(java.lang.Object, java.lang.Object)</outbound>
                <inbound type="feature" confirmed="yes">org.hamcrest.core.IsEqual.areArraysEqual(java.lang.Object, java.lang.Object)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.hamcrest.core.IsEqual.areArrayLengthsEqual(java.lang.Object, java.lang.Object)</name>
                <outbound type="class" confirmed="no">java.lang.Object</outbound>
                <outbound type="feature" confirmed="no">java.lang.reflect.Array.getLength(java.lang.Object)</outbound>
                <inbound type="feature" confirmed="yes">org.hamcrest.core.IsEqual.areArraysEqual(java.lang.Object, java.lang.Object)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.hamcrest.core.IsEqual.areArraysEqual(java.lang.Object, java.lang.Object)</name>
                <outbound type="class" confirmed="no">java.lang.Object</outbound>
                <outbound type="feature" confirmed="yes">org.hamcrest.core.IsEqual.areArrayElementsEqual(java.lang.Object, java.lang.Object)</outbound>
                <outbound type="feature" confirmed="yes">org.hamcrest.core.IsEqual.areArrayLengthsEqual(java.lang.Object, java.lang.Object)</outbound>
                <inbound type="feature" confirmed="yes">org.hamcrest.core.IsEqual.areEqual(java.lang.Object, java.lang.Object)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.hamcrest.core.IsEqual.areEqual(java.lang.Object, java.lang.Object)</name>
                <outbound type="class" confirmed="no">java.lang.Object</outbound>
                <outbound type="feature" confirmed="no">java.lang.Object.equals(java.lang.Object)</outbound>
                <outbound type="feature" confirmed="yes">org.hamcrest.core.IsEqual.areArraysEqual(java.lang.Object, java.lang.Object)</outbound>
                <outbound type="feature" confirmed="yes">org.hamcrest.core.IsEqual.isArray(java.lang.Object)</outbound>
                <inbound type="feature" confirmed="yes">org.hamcrest.core.IsEqual.areArrayElementsEqual(java.lang.Object, java.lang.Object)</inbound>
                <inbound type="feature" confirmed="yes">org.hamcrest.core.IsEqual.matches(java.lang.Object)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.hamcrest.core.IsEqual.describeTo(org.hamcrest.Description)</name>
                <outbound type="class" confirmed="no">java.lang.Object</outbound>
                <outbound type="class" confirmed="yes">org.hamcrest.Description</outbound>
                <outbound type="feature" confirmed="yes">org.hamcrest.Description.appendValue(java.lang.Object)</outbound>
                <outbound type="feature" confirmed="yes">org.hamcrest.core.IsEqual.object</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.hamcrest.core.IsEqual.equalTo(java.lang.Object)</name>
                <outbound type="class" confirmed="no">java.lang.Object</outbound>
                <outbound type="class" confirmed="yes">org.hamcrest.Matcher</outbound>
                <outbound type="feature" confirmed="yes">org.hamcrest.core.IsEqual.IsEqual(java.lang.Object)</outbound>
                <inbound type="feature" confirmed="yes">org.hamcrest.CoreMatchers.equalTo(java.lang.Object)</inbound>
                <inbound type="feature" confirmed="yes">org.hamcrest.core.Is.is(java.lang.Object)</inbound>
                <inbound type="feature" confirmed="yes">org.hamcrest.core.IsNot.not(java.lang.Object)</inbound>
                <inbound type="feature" confirmed="yes">org.junit.internal.matchers.IsCollectionContaining.hasItem(java.lang.Object)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.hamcrest.core.IsEqual.isArray(java.lang.Object)</name>
                <outbound type="class" confirmed="no">java.lang.Class</outbound>
                <outbound type="feature" confirmed="no">java.lang.Class.isArray()</outbound>
                <outbound type="class" confirmed="no">java.lang.Object</outbound>
                <outbound type="feature" confirmed="no">java.lang.Object.getClass()</outbound>
                <inbound type="feature" confirmed="yes">org.hamcrest.core.IsEqual.areEqual(java.lang.Object, java.lang.Object)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.hamcrest.core.IsEqual.matches(java.lang.Object)</name>
                <outbound type="class" confirmed="no">java.lang.Object</outbound>
                <outbound type="feature" confirmed="yes">org.hamcrest.core.IsEqual.areEqual(java.lang.Object, java.lang.Object)</outbound>
                <outbound type="feature" confirmed="yes">org.hamcrest.core.IsEqual.object</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.hamcrest.core.IsEqual.object</name>
                <outbound type="class" confirmed="no">java.lang.Object</outbound>
                <inbound type="feature" confirmed="yes">org.hamcrest.core.IsEqual.IsEqual(java.lang.Object)</inbound>
                <inbound type="feature" confirmed="yes">org.hamcrest.core.IsEqual.describeTo(org.hamcrest.Description)</inbound>
                <inbound type="feature" confirmed="yes">org.hamcrest.core.IsEqual.matches(java.lang.Object)</inbound>
            </feature>
        </class>
        <class confirmed="yes">
            <name>org.hamcrest.core.IsInstanceOf</name>
            <outbound type="class" confirmed="yes">org.hamcrest.BaseMatcher</outbound>
            <feature confirmed="yes">
                <name>org.hamcrest.core.IsInstanceOf.IsInstanceOf(java.lang.Class)</name>
                <outbound type="class" confirmed="no">java.lang.Class</outbound>
                <outbound type="feature" confirmed="yes">org.hamcrest.BaseMatcher.BaseMatcher()</outbound>
                <outbound type="feature" confirmed="yes">org.hamcrest.core.IsInstanceOf.theClass</outbound>
                <inbound type="feature" confirmed="yes">org.hamcrest.core.IsInstanceOf.instanceOf(java.lang.Class)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.hamcrest.core.IsInstanceOf.describeTo(org.hamcrest.Description)</name>
                <outbound type="class" confirmed="no">java.lang.Class</outbound>
                <outbound type="feature" confirmed="no">java.lang.Class.getName()</outbound>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="class" confirmed="yes">org.hamcrest.Description</outbound>
                <outbound type="feature" confirmed="yes">org.hamcrest.Description.appendText(java.lang.String)</outbound>
                <outbound type="feature" confirmed="yes">org.hamcrest.core.IsInstanceOf.theClass</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.hamcrest.core.IsInstanceOf.instanceOf(java.lang.Class)</name>
                <outbound type="class" confirmed="no">java.lang.Class</outbound>
                <outbound type="class" confirmed="yes">org.hamcrest.Matcher</outbound>
                <outbound type="feature" confirmed="yes">org.hamcrest.core.IsInstanceOf.IsInstanceOf(java.lang.Class)</outbound>
                <inbound type="feature" confirmed="yes">org.hamcrest.CoreMatchers.instanceOf(java.lang.Class)</inbound>
                <inbound type="feature" confirmed="yes">org.hamcrest.core.Is.is(java.lang.Class)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.hamcrest.core.IsInstanceOf.matches(java.lang.Object)</name>
                <outbound type="class" confirmed="no">java.lang.Class</outbound>
                <outbound type="feature" confirmed="no">java.lang.Class.isInstance(java.lang.Object)</outbound>
                <outbound type="class" confirmed="no">java.lang.Object</outbound>
                <outbound type="feature" confirmed="yes">org.hamcrest.core.IsInstanceOf.theClass</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.hamcrest.core.IsInstanceOf.theClass</name>
                <outbound type="class" confirmed="no">java.lang.Class</outbound>
                <inbound type="feature" confirmed="yes">org.hamcrest.core.IsInstanceOf.IsInstanceOf(java.lang.Class)</inbound>
                <inbound type="feature" confirmed="yes">org.hamcrest.core.IsInstanceOf.describeTo(org.hamcrest.Description)</inbound>
                <inbound type="feature" confirmed="yes">org.hamcrest.core.IsInstanceOf.matches(java.lang.Object)</inbound>
            </feature>
        </class>
        <class confirmed="yes">
            <name>org.hamcrest.core.IsNot</name>
            <outbound type="class" confirmed="yes">org.hamcrest.BaseMatcher</outbound>
            <feature confirmed="yes">
                <name>org.hamcrest.core.IsNot.IsNot(org.hamcrest.Matcher)</name>
                <outbound type="feature" confirmed="yes">org.hamcrest.BaseMatcher.BaseMatcher()</outbound>
                <outbound type="class" confirmed="yes">org.hamcrest.Matcher</outbound>
                <outbound type="feature" confirmed="yes">org.hamcrest.core.IsNot.matcher</outbound>
                <inbound type="feature" confirmed="yes">org.hamcrest.core.IsNot.not(org.hamcrest.Matcher)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.hamcrest.core.IsNot.describeTo(org.hamcrest.Description)</name>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="class" confirmed="yes">org.hamcrest.Description</outbound>
                <outbound type="feature" confirmed="yes">org.hamcrest.Description.appendDescriptionOf(org.hamcrest.SelfDescribing)</outbound>
                <outbound type="feature" confirmed="yes">org.hamcrest.Description.appendText(java.lang.String)</outbound>
                <outbound type="class" confirmed="yes">org.hamcrest.Matcher</outbound>
                <outbound type="class" confirmed="yes">org.hamcrest.SelfDescribing</outbound>
                <outbound type="feature" confirmed="yes">org.hamcrest.core.IsNot.matcher</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.hamcrest.core.IsNot.matcher</name>
                <outbound type="class" confirmed="yes">org.hamcrest.Matcher</outbound>
                <inbound type="feature" confirmed="yes">org.hamcrest.core.IsNot.IsNot(org.hamcrest.Matcher)</inbound>
                <inbound type="feature" confirmed="yes">org.hamcrest.core.IsNot.describeTo(org.hamcrest.Description)</inbound>
                <inbound type="feature" confirmed="yes">org.hamcrest.core.IsNot.matches(java.lang.Object)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.hamcrest.core.IsNot.matches(java.lang.Object)</name>
                <outbound type="class" confirmed="no">java.lang.Object</outbound>
                <outbound type="class" confirmed="yes">org.hamcrest.Matcher</outbound>
                <outbound type="feature" confirmed="yes">org.hamcrest.Matcher.matches(java.lang.Object)</outbound>
                <outbound type="feature" confirmed="yes">org.hamcrest.core.IsNot.matcher</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.hamcrest.core.IsNot.not(java.lang.Object)</name>
                <outbound type="class" confirmed="no">java.lang.Object</outbound>
                <outbound type="class" confirmed="yes">org.hamcrest.Matcher</outbound>
                <outbound type="feature" confirmed="yes">org.hamcrest.core.IsEqual.equalTo(java.lang.Object)</outbound>
                <outbound type="feature" confirmed="yes">org.hamcrest.core.IsNot.not(org.hamcrest.Matcher)</outbound>
                <inbound type="feature" confirmed="yes">org.hamcrest.CoreMatchers.not(java.lang.Object)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.hamcrest.core.IsNot.not(org.hamcrest.Matcher)</name>
                <outbound type="class" confirmed="yes">org.hamcrest.Matcher</outbound>
                <outbound type="feature" confirmed="yes">org.hamcrest.core.IsNot.IsNot(org.hamcrest.Matcher)</outbound>
                <inbound type="feature" confirmed="yes">org.hamcrest.CoreMatchers.not(org.hamcrest.Matcher)</inbound>
                <inbound type="feature" confirmed="yes">org.hamcrest.core.IsNot.not(java.lang.Object)</inbound>
                <inbound type="feature" confirmed="yes">org.hamcrest.core.IsNull.notNullValue()</inbound>
            </feature>
        </class>
        <class confirmed="yes">
            <name>org.hamcrest.core.IsNull</name>
            <outbound type="class" confirmed="yes">org.hamcrest.BaseMatcher</outbound>
            <feature confirmed="yes">
                <name>org.hamcrest.core.IsNull.IsNull()</name>
                <outbound type="feature" confirmed="yes">org.hamcrest.BaseMatcher.BaseMatcher()</outbound>
                <inbound type="feature" confirmed="yes">org.hamcrest.core.IsNull.nullValue()</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.hamcrest.core.IsNull.describeTo(org.hamcrest.Description)</name>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="class" confirmed="yes">org.hamcrest.Description</outbound>
                <outbound type="feature" confirmed="yes">org.hamcrest.Description.appendText(java.lang.String)</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.hamcrest.core.IsNull.matches(java.lang.Object)</name>
                <outbound type="class" confirmed="no">java.lang.Object</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.hamcrest.core.IsNull.notNullValue()</name>
                <outbound type="class" confirmed="yes">org.hamcrest.Matcher</outbound>
                <outbound type="feature" confirmed="yes">org.hamcrest.core.IsNot.not(org.hamcrest.Matcher)</outbound>
                <outbound type="feature" confirmed="yes">org.hamcrest.core.IsNull.nullValue()</outbound>
                <inbound type="feature" confirmed="yes">org.hamcrest.CoreMatchers.notNullValue()</inbound>
                <inbound type="feature" confirmed="yes">org.hamcrest.core.IsNull.notNullValue(java.lang.Class)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.hamcrest.core.IsNull.notNullValue(java.lang.Class)</name>
                <outbound type="class" confirmed="no">java.lang.Class</outbound>
                <outbound type="class" confirmed="yes">org.hamcrest.Matcher</outbound>
                <outbound type="feature" confirmed="yes">org.hamcrest.core.IsNull.notNullValue()</outbound>
                <inbound type="feature" confirmed="yes">org.hamcrest.CoreMatchers.notNullValue(java.lang.Class)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.hamcrest.core.IsNull.nullValue()</name>
                <outbound type="class" confirmed="yes">org.hamcrest.Matcher</outbound>
                <outbound type="feature" confirmed="yes">org.hamcrest.core.IsNull.IsNull()</outbound>
                <inbound type="feature" confirmed="yes">org.hamcrest.CoreMatchers.nullValue()</inbound>
                <inbound type="feature" confirmed="yes">org.hamcrest.core.IsNull.notNullValue()</inbound>
                <inbound type="feature" confirmed="yes">org.hamcrest.core.IsNull.nullValue(java.lang.Class)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.hamcrest.core.IsNull.nullValue(java.lang.Class)</name>
                <outbound type="class" confirmed="no">java.lang.Class</outbound>
                <outbound type="class" confirmed="yes">org.hamcrest.Matcher</outbound>
                <outbound type="feature" confirmed="yes">org.hamcrest.core.IsNull.nullValue()</outbound>
                <inbound type="feature" confirmed="yes">org.hamcrest.CoreMatchers.nullValue(java.lang.Class)</inbound>
            </feature>
        </class>
        <class confirmed="yes">
            <name>org.hamcrest.core.IsSame</name>
            <outbound type="class" confirmed="yes">org.hamcrest.BaseMatcher</outbound>
            <feature confirmed="yes">
                <name>org.hamcrest.core.IsSame.IsSame(java.lang.Object)</name>
                <outbound type="class" confirmed="no">java.lang.Object</outbound>
                <outbound type="feature" confirmed="yes">org.hamcrest.BaseMatcher.BaseMatcher()</outbound>
                <outbound type="feature" confirmed="yes">org.hamcrest.core.IsSame.object</outbound>
                <inbound type="feature" confirmed="yes">org.hamcrest.core.IsSame.sameInstance(java.lang.Object)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.hamcrest.core.IsSame.describeTo(org.hamcrest.Description)</name>
                <outbound type="class" confirmed="no">java.lang.Object</outbound>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="class" confirmed="yes">org.hamcrest.Description</outbound>
                <outbound type="feature" confirmed="yes">org.hamcrest.Description.appendText(java.lang.String)</outbound>
                <outbound type="feature" confirmed="yes">org.hamcrest.Description.appendValue(java.lang.Object)</outbound>
                <outbound type="feature" confirmed="yes">org.hamcrest.core.IsSame.object</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.hamcrest.core.IsSame.matches(java.lang.Object)</name>
                <outbound type="class" confirmed="no">java.lang.Object</outbound>
                <outbound type="feature" confirmed="yes">org.hamcrest.core.IsSame.object</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.hamcrest.core.IsSame.object</name>
                <outbound type="class" confirmed="no">java.lang.Object</outbound>
                <inbound type="feature" confirmed="yes">org.hamcrest.core.IsSame.IsSame(java.lang.Object)</inbound>
                <inbound type="feature" confirmed="yes">org.hamcrest.core.IsSame.describeTo(org.hamcrest.Description)</inbound>
                <inbound type="feature" confirmed="yes">org.hamcrest.core.IsSame.matches(java.lang.Object)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.hamcrest.core.IsSame.sameInstance(java.lang.Object)</name>
                <outbound type="class" confirmed="no">java.lang.Object</outbound>
                <outbound type="class" confirmed="yes">org.hamcrest.Matcher</outbound>
                <outbound type="feature" confirmed="yes">org.hamcrest.core.IsSame.IsSame(java.lang.Object)</outbound>
                <inbound type="feature" confirmed="yes">org.hamcrest.CoreMatchers.sameInstance(java.lang.Object)</inbound>
            </feature>
        </class>
    </package>
    <package confirmed="yes">
        <name>org.hamcrest.internal</name>
        <class confirmed="yes">
            <name>org.hamcrest.internal.ArrayIterator</name>
            <outbound type="class" confirmed="no">java.lang.Object</outbound>
            <outbound type="class" confirmed="no">java.util.Iterator</outbound>
            <feature confirmed="yes">
                <name>org.hamcrest.internal.ArrayIterator.ArrayIterator(java.lang.Object)</name>
                <outbound type="class" confirmed="no">java.lang.Class</outbound>
                <outbound type="feature" confirmed="no">java.lang.Class.isArray()</outbound>
                <outbound type="feature" confirmed="no">java.lang.IllegalArgumentException.IllegalArgumentException(java.lang.String)</outbound>
                <outbound type="class" confirmed="no">java.lang.Object</outbound>
                <outbound type="feature" confirmed="no">java.lang.Object.Object()</outbound>
                <outbound type="feature" confirmed="no">java.lang.Object.getClass()</outbound>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="feature" confirmed="yes">org.hamcrest.internal.ArrayIterator.array</outbound>
                <outbound type="feature" confirmed="yes">org.hamcrest.internal.ArrayIterator.currentIndex</outbound>
                <inbound type="feature" confirmed="yes">org.hamcrest.BaseDescription.appendValue(java.lang.Object)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.hamcrest.internal.ArrayIterator.array</name>
                <outbound type="class" confirmed="no">java.lang.Object</outbound>
                <inbound type="feature" confirmed="yes">org.hamcrest.internal.ArrayIterator.ArrayIterator(java.lang.Object)</inbound>
                <inbound type="feature" confirmed="yes">org.hamcrest.internal.ArrayIterator.hasNext()</inbound>
                <inbound type="feature" confirmed="yes">org.hamcrest.internal.ArrayIterator.next()</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.hamcrest.internal.ArrayIterator.currentIndex</name>
                <inbound type="feature" confirmed="yes">org.hamcrest.internal.ArrayIterator.ArrayIterator(java.lang.Object)</inbound>
                <inbound type="feature" confirmed="yes">org.hamcrest.internal.ArrayIterator.hasNext()</inbound>
                <inbound type="feature" confirmed="yes">org.hamcrest.internal.ArrayIterator.next()</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.hamcrest.internal.ArrayIterator.hasNext()</name>
                <outbound type="class" confirmed="no">java.lang.Object</outbound>
                <outbound type="feature" confirmed="no">java.lang.reflect.Array.getLength(java.lang.Object)</outbound>
                <outbound type="feature" confirmed="yes">org.hamcrest.internal.ArrayIterator.array</outbound>
                <outbound type="feature" confirmed="yes">org.hamcrest.internal.ArrayIterator.currentIndex</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.hamcrest.internal.ArrayIterator.next()</name>
                <outbound type="class" confirmed="no">java.lang.Object</outbound>
                <outbound type="feature" confirmed="no">java.lang.reflect.Array.get(java.lang.Object, int)</outbound>
                <outbound type="feature" confirmed="yes">org.hamcrest.internal.ArrayIterator.array</outbound>
                <outbound type="feature" confirmed="yes">org.hamcrest.internal.ArrayIterator.currentIndex</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.hamcrest.internal.ArrayIterator.remove()</name>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="feature" confirmed="no">java.lang.UnsupportedOperationException.UnsupportedOperationException(java.lang.String)</outbound>
            </feature>
        </class>
        <class confirmed="yes">
            <name>org.hamcrest.internal.SelfDescribingValue</name>
            <outbound type="class" confirmed="no">java.lang.Object</outbound>
            <outbound type="class" confirmed="yes">org.hamcrest.SelfDescribing</outbound>
            <feature confirmed="yes">
                <name>org.hamcrest.internal.SelfDescribingValue.SelfDescribingValue(java.lang.Object)</name>
                <outbound type="class" confirmed="no">java.lang.Object</outbound>
                <outbound type="feature" confirmed="no">java.lang.Object.Object()</outbound>
                <outbound type="feature" confirmed="yes">org.hamcrest.internal.SelfDescribingValue.value</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.hamcrest.internal.SelfDescribingValue.describeTo(org.hamcrest.Description)</name>
                <outbound type="class" confirmed="no">java.lang.Object</outbound>
                <outbound type="class" confirmed="yes">org.hamcrest.Description</outbound>
                <outbound type="feature" confirmed="yes">org.hamcrest.Description.appendValue(java.lang.Object)</outbound>
                <outbound type="feature" confirmed="yes">org.hamcrest.internal.SelfDescribingValue.value</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.hamcrest.internal.SelfDescribingValue.value</name>
                <outbound type="class" confirmed="no">java.lang.Object</outbound>
                <inbound type="feature" confirmed="yes">org.hamcrest.internal.SelfDescribingValue.SelfDescribingValue(java.lang.Object)</inbound>
                <inbound type="feature" confirmed="yes">org.hamcrest.internal.SelfDescribingValue.describeTo(org.hamcrest.Description)</inbound>
            </feature>
        </class>
        <class confirmed="yes">
            <name>org.hamcrest.internal.SelfDescribingValueIterator</name>
            <outbound type="class" confirmed="no">java.lang.Object</outbound>
            <outbound type="class" confirmed="no">java.util.Iterator</outbound>
            <feature confirmed="yes">
                <name>org.hamcrest.internal.SelfDescribingValueIterator.SelfDescribingValueIterator(java.util.Iterator)</name>
                <outbound type="feature" confirmed="no">java.lang.Object.Object()</outbound>
                <outbound type="class" confirmed="no">java.util.Iterator</outbound>
                <outbound type="feature" confirmed="yes">org.hamcrest.internal.SelfDescribingValueIterator.values</outbound>
                <inbound type="feature" confirmed="yes">org.hamcrest.BaseDescription.appendValueList(java.lang.String, java.lang.String, java.lang.String, java.util.Iterator)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.hamcrest.internal.SelfDescribingValueIterator.hasNext()</name>
                <outbound type="class" confirmed="no">java.util.Iterator</outbound>
                <outbound type="feature" confirmed="no">java.util.Iterator.hasNext()</outbound>
                <outbound type="feature" confirmed="yes">org.hamcrest.internal.SelfDescribingValueIterator.values</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.hamcrest.internal.SelfDescribingValueIterator.next()</name>
                <outbound type="class" confirmed="no">java.lang.Object</outbound>
                <outbound type="class" confirmed="yes">org.hamcrest.SelfDescribing</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.hamcrest.internal.SelfDescribingValueIterator.remove()</name>
                <outbound type="class" confirmed="no">java.util.Iterator</outbound>
                <outbound type="feature" confirmed="no">java.util.Iterator.remove()</outbound>
                <outbound type="feature" confirmed="yes">org.hamcrest.internal.SelfDescribingValueIterator.values</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.hamcrest.internal.SelfDescribingValueIterator.values</name>
                <outbound type="class" confirmed="no">java.util.Iterator</outbound>
                <inbound type="feature" confirmed="yes">org.hamcrest.internal.SelfDescribingValueIterator.SelfDescribingValueIterator(java.util.Iterator)</inbound>
                <inbound type="feature" confirmed="yes">org.hamcrest.internal.SelfDescribingValueIterator.hasNext()</inbound>
                <inbound type="feature" confirmed="yes">org.hamcrest.internal.SelfDescribingValueIterator.remove()</inbound>
            </feature>
        </class>
    </package>
    <package confirmed="yes">
        <name>org.junit</name>
        <class confirmed="yes">
            <name>org.junit.After</name>
            <outbound type="class" confirmed="no">java.lang.Object</outbound>
            <outbound type="class" confirmed="no">java.lang.annotation.Annotation</outbound>
            <inbound type="feature" confirmed="yes">org.junit.internal.runners.MethodValidator.validateInstanceMethods()</inbound>
            <inbound type="feature" confirmed="yes">org.junit.internal.runners.TestMethod.getAfters()</inbound>
            <inbound type="feature" confirmed="yes">org.junit.runners.BlockJUnit4ClassRunner.validateInstanceMethods(java.util.List)</inbound>
            <inbound type="feature" confirmed="yes">org.junit.runners.BlockJUnit4ClassRunner.withAfters(org.junit.runners.model.FrameworkMethod, java.lang.Object, org.junit.runners.model.Statement)</inbound>
        </class>
        <class confirmed="yes">
            <name>org.junit.AfterClass</name>
            <outbound type="class" confirmed="no">java.lang.Object</outbound>
            <outbound type="class" confirmed="no">java.lang.annotation.Annotation</outbound>
            <inbound type="feature" confirmed="yes">org.junit.internal.runners.MethodValidator.validateStaticMethods()</inbound>
            <inbound type="feature" confirmed="yes">org.junit.internal.runners.TestClass.getAfters()</inbound>
            <inbound type="feature" confirmed="yes">org.junit.runners.ParentRunner.collectInitializationErrors(java.util.List)</inbound>
            <inbound type="feature" confirmed="yes">org.junit.runners.ParentRunner.withAfterClasses(org.junit.runners.model.Statement)</inbound>
        </class>
        <class confirmed="yes">
            <name>org.junit.Assert</name>
            <outbound type="class" confirmed="no">java.lang.Object</outbound>
            <feature confirmed="yes">
                <name>org.junit.Assert.Assert()</name>
                <outbound type="feature" confirmed="no">java.lang.Object.Object()</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.junit.Assert.assertArrayEquals(byte[], byte[])</name>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="feature" confirmed="yes">org.junit.Assert.assertArrayEquals(java.lang.String, byte[], byte[])</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.junit.Assert.assertArrayEquals(char[], char[])</name>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="feature" confirmed="yes">org.junit.Assert.assertArrayEquals(java.lang.String, char[], char[])</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.junit.Assert.assertArrayEquals(double[], double[], double)</name>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="feature" confirmed="yes">org.junit.Assert.assertArrayEquals(java.lang.String, double[], double[], double)</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.junit.Assert.assertArrayEquals(float[], float[], float)</name>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="feature" confirmed="yes">org.junit.Assert.assertArrayEquals(java.lang.String, float[], float[], float)</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.junit.Assert.assertArrayEquals(int[], int[])</name>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="feature" confirmed="yes">org.junit.Assert.assertArrayEquals(java.lang.String, int[], int[])</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.junit.Assert.assertArrayEquals(java.lang.Object[], java.lang.Object[])</name>
                <outbound type="class" confirmed="no">java.lang.Object</outbound>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="feature" confirmed="yes">org.junit.Assert.assertArrayEquals(java.lang.String, java.lang.Object[], java.lang.Object[])</outbound>
                <inbound type="feature" confirmed="yes">org.junit.Assert.assertEquals(java.lang.Object[], java.lang.Object[])</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.junit.Assert.assertArrayEquals(java.lang.String, byte[], byte[])</name>
                <outbound type="class" confirmed="no">java.lang.Object</outbound>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="feature" confirmed="yes">org.junit.Assert.internalArrayEquals(java.lang.String, java.lang.Object, java.lang.Object)</outbound>
                <outbound type="class" confirmed="yes">org.junit.internal.ArrayComparisonFailure</outbound>
                <inbound type="feature" confirmed="yes">org.junit.Assert.assertArrayEquals(byte[], byte[])</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.junit.Assert.assertArrayEquals(java.lang.String, char[], char[])</name>
                <outbound type="class" confirmed="no">java.lang.Object</outbound>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="feature" confirmed="yes">org.junit.Assert.internalArrayEquals(java.lang.String, java.lang.Object, java.lang.Object)</outbound>
                <outbound type="class" confirmed="yes">org.junit.internal.ArrayComparisonFailure</outbound>
                <inbound type="feature" confirmed="yes">org.junit.Assert.assertArrayEquals(char[], char[])</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.junit.Assert.assertArrayEquals(java.lang.String, double[], double[], double)</name>
                <outbound type="class" confirmed="no">java.lang.Object</outbound>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="class" confirmed="yes">org.junit.internal.ArrayComparisonFailure</outbound>
                <outbound type="feature" confirmed="yes">org.junit.internal.InexactComparisonCriteria.InexactComparisonCriteria(double)</outbound>
                <outbound type="feature" confirmed="no">org.junit.internal.InexactComparisonCriteria.arrayEquals(java.lang.String, java.lang.Object, java.lang.Object)</outbound>
                <inbound type="feature" confirmed="yes">org.junit.Assert.assertArrayEquals(double[], double[], double)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.junit.Assert.assertArrayEquals(java.lang.String, float[], float[], float)</name>
                <outbound type="class" confirmed="no">java.lang.Object</outbound>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="class" confirmed="yes">org.junit.internal.ArrayComparisonFailure</outbound>
                <outbound type="feature" confirmed="yes">org.junit.internal.InexactComparisonCriteria.InexactComparisonCriteria(double)</outbound>
                <outbound type="feature" confirmed="no">org.junit.internal.InexactComparisonCriteria.arrayEquals(java.lang.String, java.lang.Object, java.lang.Object)</outbound>
                <inbound type="feature" confirmed="yes">org.junit.Assert.assertArrayEquals(float[], float[], float)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.junit.Assert.assertArrayEquals(java.lang.String, int[], int[])</name>
                <outbound type="class" confirmed="no">java.lang.Object</outbound>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="feature" confirmed="yes">org.junit.Assert.internalArrayEquals(java.lang.String, java.lang.Object, java.lang.Object)</outbound>
                <outbound type="class" confirmed="yes">org.junit.internal.ArrayComparisonFailure</outbound>
                <inbound type="feature" confirmed="yes">org.junit.Assert.assertArrayEquals(int[], int[])</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.junit.Assert.assertArrayEquals(java.lang.String, java.lang.Object[], java.lang.Object[])</name>
                <outbound type="class" confirmed="no">java.lang.Object</outbound>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="feature" confirmed="yes">org.junit.Assert.internalArrayEquals(java.lang.String, java.lang.Object, java.lang.Object)</outbound>
                <outbound type="class" confirmed="yes">org.junit.internal.ArrayComparisonFailure</outbound>
                <inbound type="feature" confirmed="yes">org.junit.Assert.assertArrayEquals(java.lang.Object[], java.lang.Object[])</inbound>
                <inbound type="feature" confirmed="yes">org.junit.Assert.assertEquals(java.lang.String, java.lang.Object[], java.lang.Object[])</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.junit.Assert.assertArrayEquals(java.lang.String, long[], long[])</name>
                <outbound type="class" confirmed="no">java.lang.Object</outbound>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="feature" confirmed="yes">org.junit.Assert.internalArrayEquals(java.lang.String, java.lang.Object, java.lang.Object)</outbound>
                <outbound type="class" confirmed="yes">org.junit.internal.ArrayComparisonFailure</outbound>
                <inbound type="feature" confirmed="yes">org.junit.Assert.assertArrayEquals(long[], long[])</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.junit.Assert.assertArrayEquals(java.lang.String, short[], short[])</name>
                <outbound type="class" confirmed="no">java.lang.Object</outbound>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="feature" confirmed="yes">org.junit.Assert.internalArrayEquals(java.lang.String, java.lang.Object, java.lang.Object)</outbound>
                <outbound type="class" confirmed="yes">org.junit.internal.ArrayComparisonFailure</outbound>
                <inbound type="feature" confirmed="yes">org.junit.Assert.assertArrayEquals(short[], short[])</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.junit.Assert.assertArrayEquals(long[], long[])</name>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="feature" confirmed="yes">org.junit.Assert.assertArrayEquals(java.lang.String, long[], long[])</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.junit.Assert.assertArrayEquals(short[], short[])</name>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="feature" confirmed="yes">org.junit.Assert.assertArrayEquals(java.lang.String, short[], short[])</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.junit.Assert.assertEquals(double, double)</name>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="feature" confirmed="yes">org.junit.Assert.assertEquals(java.lang.String, double, double)</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.junit.Assert.assertEquals(double, double, double)</name>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="feature" confirmed="yes">org.junit.Assert.assertEquals(java.lang.String, double, double, double)</outbound>
                <inbound type="feature" confirmed="yes">org.junit.internal.InexactComparisonCriteria.assertElementsEqual(java.lang.Object, java.lang.Object)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.junit.Assert.assertEquals(java.lang.Object, java.lang.Object)</name>
                <outbound type="class" confirmed="no">java.lang.Object</outbound>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="feature" confirmed="yes">org.junit.Assert.assertEquals(java.lang.String, java.lang.Object, java.lang.Object)</outbound>
                <inbound type="feature" confirmed="yes">org.junit.internal.ExactComparisonCriteria.assertElementsEqual(java.lang.Object, java.lang.Object)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.junit.Assert.assertEquals(java.lang.Object[], java.lang.Object[])</name>
                <outbound type="class" confirmed="no">java.lang.Object</outbound>
                <outbound type="feature" confirmed="yes">org.junit.Assert.assertArrayEquals(java.lang.Object[], java.lang.Object[])</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.junit.Assert.assertEquals(java.lang.String, double, double)</name>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="feature" confirmed="yes">org.junit.Assert.fail(java.lang.String)</outbound>
                <inbound type="feature" confirmed="yes">org.junit.Assert.assertEquals(double, double)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.junit.Assert.assertEquals(java.lang.String, double, double, double)</name>
                <outbound type="feature" confirmed="no">java.lang.Double.Double(double)</outbound>
                <outbound type="feature" confirmed="no">java.lang.Double.compare(double, double)</outbound>
                <outbound type="feature" confirmed="no">java.lang.Math.abs(double)</outbound>
                <outbound type="class" confirmed="no">java.lang.Object</outbound>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="feature" confirmed="yes">org.junit.Assert.failNotEquals(java.lang.String, java.lang.Object, java.lang.Object)</outbound>
                <inbound type="feature" confirmed="yes">org.junit.Assert.assertEquals(double, double, double)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.junit.Assert.assertEquals(java.lang.String, java.lang.Object, java.lang.Object)</name>
                <outbound type="class" confirmed="no">java.lang.Object</outbound>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="feature" confirmed="yes">org.junit.Assert.failNotEquals(java.lang.String, java.lang.Object, java.lang.Object)</outbound>
                <outbound type="feature" confirmed="yes">org.junit.Assert.isEquals(java.lang.Object, java.lang.Object)</outbound>
                <outbound type="feature" confirmed="yes">org.junit.ComparisonFailure.ComparisonFailure(java.lang.String, java.lang.String, java.lang.String)</outbound>
                <inbound type="feature" confirmed="yes">org.junit.Assert.assertEquals(java.lang.Object, java.lang.Object)</inbound>
                <inbound type="feature" confirmed="yes">org.junit.Assert.assertEquals(java.lang.String, long, long)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.junit.Assert.assertEquals(java.lang.String, java.lang.Object[], java.lang.Object[])</name>
                <outbound type="class" confirmed="no">java.lang.Object</outbound>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="feature" confirmed="yes">org.junit.Assert.assertArrayEquals(java.lang.String, java.lang.Object[], java.lang.Object[])</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.junit.Assert.assertEquals(java.lang.String, long, long)</name>
                <outbound type="class" confirmed="no">java.lang.Long</outbound>
                <outbound type="feature" confirmed="no">java.lang.Long.valueOf(long)</outbound>
                <outbound type="class" confirmed="no">java.lang.Object</outbound>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="feature" confirmed="yes">org.junit.Assert.assertEquals(java.lang.String, java.lang.Object, java.lang.Object)</outbound>
                <inbound type="feature" confirmed="yes">org.junit.Assert.assertEquals(long, long)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.junit.Assert.assertEquals(long, long)</name>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="feature" confirmed="yes">org.junit.Assert.assertEquals(java.lang.String, long, long)</outbound>
                <inbound type="feature" confirmed="yes">org.junit.runners.model.TestClass.getOnlyConstructor()</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.junit.Assert.assertFalse(boolean)</name>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="feature" confirmed="yes">org.junit.Assert.assertFalse(java.lang.String, boolean)</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.junit.Assert.assertFalse(java.lang.String, boolean)</name>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="feature" confirmed="yes">org.junit.Assert.assertTrue(java.lang.String, boolean)</outbound>
                <inbound type="feature" confirmed="yes">org.junit.Assert.assertFalse(boolean)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.junit.Assert.assertNotNull(java.lang.Object)</name>
                <outbound type="class" confirmed="no">java.lang.Object</outbound>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="feature" confirmed="yes">org.junit.Assert.assertNotNull(java.lang.String, java.lang.Object)</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.junit.Assert.assertNotNull(java.lang.String, java.lang.Object)</name>
                <outbound type="class" confirmed="no">java.lang.Object</outbound>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="feature" confirmed="yes">org.junit.Assert.assertTrue(java.lang.String, boolean)</outbound>
                <inbound type="feature" confirmed="yes">org.junit.Assert.assertNotNull(java.lang.Object)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.junit.Assert.assertNotSame(java.lang.Object, java.lang.Object)</name>
                <outbound type="class" confirmed="no">java.lang.Object</outbound>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="feature" confirmed="yes">org.junit.Assert.assertNotSame(java.lang.String, java.lang.Object, java.lang.Object)</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.junit.Assert.assertNotSame(java.lang.String, java.lang.Object, java.lang.Object)</name>
                <outbound type="class" confirmed="no">java.lang.Object</outbound>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="feature" confirmed="yes">org.junit.Assert.failSame(java.lang.String)</outbound>
                <inbound type="feature" confirmed="yes">org.junit.Assert.assertNotSame(java.lang.Object, java.lang.Object)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.junit.Assert.assertNull(java.lang.Object)</name>
                <outbound type="class" confirmed="no">java.lang.Object</outbound>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="feature" confirmed="yes">org.junit.Assert.assertNull(java.lang.String, java.lang.Object)</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.junit.Assert.assertNull(java.lang.String, java.lang.Object)</name>
                <outbound type="class" confirmed="no">java.lang.Object</outbound>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="feature" confirmed="yes">org.junit.Assert.assertTrue(java.lang.String, boolean)</outbound>
                <inbound type="feature" confirmed="yes">org.junit.Assert.assertNull(java.lang.Object)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.junit.Assert.assertSame(java.lang.Object, java.lang.Object)</name>
                <outbound type="class" confirmed="no">java.lang.Object</outbound>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="feature" confirmed="yes">org.junit.Assert.assertSame(java.lang.String, java.lang.Object, java.lang.Object)</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.junit.Assert.assertSame(java.lang.String, java.lang.Object, java.lang.Object)</name>
                <outbound type="class" confirmed="no">java.lang.Object</outbound>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="feature" confirmed="yes">org.junit.Assert.failNotSame(java.lang.String, java.lang.Object, java.lang.Object)</outbound>
                <inbound type="feature" confirmed="yes">org.junit.Assert.assertSame(java.lang.Object, java.lang.Object)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.junit.Assert.assertThat(java.lang.Object, org.hamcrest.Matcher)</name>
                <outbound type="class" confirmed="no">java.lang.Object</outbound>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="class" confirmed="yes">org.hamcrest.Matcher</outbound>
                <outbound type="feature" confirmed="yes">org.junit.Assert.assertThat(java.lang.String, java.lang.Object, org.hamcrest.Matcher)</outbound>
                <inbound type="feature" confirmed="yes">org.junit.rules.ErrorCollector$1.call()</inbound>
                <inbound type="feature" confirmed="yes">org.junit.rules.ExpectedException$ExpectedExceptionStatement.evaluate()</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.junit.Assert.assertThat(java.lang.String, java.lang.Object, org.hamcrest.Matcher)</name>
                <outbound type="feature" confirmed="no">java.lang.AssertionError.AssertionError(java.lang.Object)</outbound>
                <outbound type="class" confirmed="no">java.lang.Object</outbound>
                <outbound type="feature" confirmed="no">java.lang.Object.toString()</outbound>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="class" confirmed="yes">org.hamcrest.Description</outbound>
                <outbound type="feature" confirmed="yes">org.hamcrest.Description.appendDescriptionOf(org.hamcrest.SelfDescribing)</outbound>
                <outbound type="feature" confirmed="yes">org.hamcrest.Description.appendText(java.lang.String)</outbound>
                <outbound type="feature" confirmed="yes">org.hamcrest.Description.appendValue(java.lang.Object)</outbound>
                <outbound type="class" confirmed="yes">org.hamcrest.Matcher</outbound>
                <outbound type="feature" confirmed="yes">org.hamcrest.Matcher.matches(java.lang.Object)</outbound>
                <outbound type="class" confirmed="yes">org.hamcrest.SelfDescribing</outbound>
                <outbound type="feature" confirmed="yes">org.hamcrest.StringDescription.StringDescription()</outbound>
                <inbound type="feature" confirmed="yes">org.junit.Assert.assertThat(java.lang.Object, org.hamcrest.Matcher)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.junit.Assert.assertTrue(boolean)</name>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="feature" confirmed="yes">org.junit.Assert.assertTrue(java.lang.String, boolean)</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.junit.Assert.assertTrue(java.lang.String, boolean)</name>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="feature" confirmed="yes">org.junit.Assert.fail(java.lang.String)</outbound>
                <inbound type="feature" confirmed="yes">org.junit.Assert.assertFalse(java.lang.String, boolean)</inbound>
                <inbound type="feature" confirmed="yes">org.junit.Assert.assertNotNull(java.lang.String, java.lang.Object)</inbound>
                <inbound type="feature" confirmed="yes">org.junit.Assert.assertNull(java.lang.String, java.lang.Object)</inbound>
                <inbound type="feature" confirmed="yes">org.junit.Assert.assertTrue(boolean)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.junit.Assert.fail()</name>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="feature" confirmed="yes">org.junit.Assert.fail(java.lang.String)</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.junit.Assert.fail(java.lang.String)</name>
                <outbound type="feature" confirmed="no">java.lang.AssertionError.AssertionError()</outbound>
                <outbound type="feature" confirmed="no">java.lang.AssertionError.AssertionError(java.lang.Object)</outbound>
                <outbound type="class" confirmed="no">java.lang.Object</outbound>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <inbound type="feature" confirmed="yes">org.junit.Assert.assertEquals(java.lang.String, double, double)</inbound>
                <inbound type="feature" confirmed="yes">org.junit.Assert.assertTrue(java.lang.String, boolean)</inbound>
                <inbound type="feature" confirmed="yes">org.junit.Assert.fail()</inbound>
                <inbound type="feature" confirmed="yes">org.junit.Assert.failNotEquals(java.lang.String, java.lang.Object, java.lang.Object)</inbound>
                <inbound type="feature" confirmed="yes">org.junit.Assert.failNotSame(java.lang.String, java.lang.Object, java.lang.Object)</inbound>
                <inbound type="feature" confirmed="yes">org.junit.Assert.failSame(java.lang.String)</inbound>
                <inbound type="feature" confirmed="yes">org.junit.experimental.theories.Theories$TheoryAnchor.evaluate()</inbound>
                <inbound type="feature" confirmed="yes">org.junit.internal.ComparisonCriteria.assertArraysAreSameLength(java.lang.Object, java.lang.Object, java.lang.String)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.junit.Assert.failNotEquals(java.lang.String, java.lang.Object, java.lang.Object)</name>
                <outbound type="class" confirmed="no">java.lang.Object</outbound>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="feature" confirmed="yes">org.junit.Assert.fail(java.lang.String)</outbound>
                <outbound type="feature" confirmed="yes">org.junit.Assert.format(java.lang.String, java.lang.Object, java.lang.Object)</outbound>
                <inbound type="feature" confirmed="yes">org.junit.Assert.assertEquals(java.lang.String, double, double, double)</inbound>
                <inbound type="feature" confirmed="yes">org.junit.Assert.assertEquals(java.lang.String, java.lang.Object, java.lang.Object)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.junit.Assert.failNotSame(java.lang.String, java.lang.Object, java.lang.Object)</name>
                <outbound type="class" confirmed="no">java.lang.Object</outbound>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="class" confirmed="no">java.lang.StringBuilder</outbound>
                <outbound type="feature" confirmed="no">java.lang.StringBuilder.StringBuilder()</outbound>
                <outbound type="feature" confirmed="no">java.lang.StringBuilder.append(java.lang.Object)</outbound>
                <outbound type="feature" confirmed="no">java.lang.StringBuilder.append(java.lang.String)</outbound>
                <outbound type="feature" confirmed="no">java.lang.StringBuilder.toString()</outbound>
                <outbound type="feature" confirmed="yes">org.junit.Assert.fail(java.lang.String)</outbound>
                <inbound type="feature" confirmed="yes">org.junit.Assert.assertSame(java.lang.String, java.lang.Object, java.lang.Object)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.junit.Assert.failSame(java.lang.String)</name>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="class" confirmed="no">java.lang.StringBuilder</outbound>
                <outbound type="feature" confirmed="no">java.lang.StringBuilder.StringBuilder()</outbound>
                <outbound type="feature" confirmed="no">java.lang.StringBuilder.append(java.lang.String)</outbound>
                <outbound type="feature" confirmed="no">java.lang.StringBuilder.toString()</outbound>
                <outbound type="feature" confirmed="yes">org.junit.Assert.fail(java.lang.String)</outbound>
                <inbound type="feature" confirmed="yes">org.junit.Assert.assertNotSame(java.lang.String, java.lang.Object, java.lang.Object)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.junit.Assert.format(java.lang.String, java.lang.Object, java.lang.Object)</name>
                <outbound type="class" confirmed="no">java.lang.Object</outbound>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="feature" confirmed="no">java.lang.String.equals(java.lang.Object)</outbound>
                <outbound type="feature" confirmed="no">java.lang.String.valueOf(java.lang.Object)</outbound>
                <outbound type="class" confirmed="no">java.lang.StringBuilder</outbound>
                <outbound type="feature" confirmed="no">java.lang.StringBuilder.StringBuilder()</outbound>
                <outbound type="feature" confirmed="no">java.lang.StringBuilder.append(java.lang.String)</outbound>
                <outbound type="feature" confirmed="no">java.lang.StringBuilder.toString()</outbound>
                <outbound type="feature" confirmed="yes">org.junit.Assert.formatClassAndValue(java.lang.Object, java.lang.String)</outbound>
                <inbound type="feature" confirmed="yes">org.junit.Assert.failNotEquals(java.lang.String, java.lang.Object, java.lang.Object)</inbound>
                <inbound type="feature" confirmed="yes">org.junit.ComparisonFailure$ComparisonCompactor.compact(java.lang.String)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.junit.Assert.formatClassAndValue(java.lang.Object, java.lang.String)</name>
                <outbound type="class" confirmed="no">java.lang.Class</outbound>
                <outbound type="feature" confirmed="no">java.lang.Class.getName()</outbound>
                <outbound type="class" confirmed="no">java.lang.Object</outbound>
                <outbound type="feature" confirmed="no">java.lang.Object.getClass()</outbound>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="class" confirmed="no">java.lang.StringBuilder</outbound>
                <outbound type="feature" confirmed="no">java.lang.StringBuilder.StringBuilder()</outbound>
                <outbound type="feature" confirmed="no">java.lang.StringBuilder.append(java.lang.String)</outbound>
                <outbound type="feature" confirmed="no">java.lang.StringBuilder.toString()</outbound>
                <inbound type="feature" confirmed="yes">org.junit.Assert.format(java.lang.String, java.lang.Object, java.lang.Object)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.junit.Assert.internalArrayEquals(java.lang.String, java.lang.Object, java.lang.Object)</name>
                <outbound type="class" confirmed="no">java.lang.Object</outbound>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="class" confirmed="yes">org.junit.internal.ArrayComparisonFailure</outbound>
                <outbound type="feature" confirmed="yes">org.junit.internal.ExactComparisonCriteria.ExactComparisonCriteria()</outbound>
                <outbound type="feature" confirmed="no">org.junit.internal.ExactComparisonCriteria.arrayEquals(java.lang.String, java.lang.Object, java.lang.Object)</outbound>
                <inbound type="feature" confirmed="yes">org.junit.Assert.assertArrayEquals(java.lang.String, byte[], byte[])</inbound>
                <inbound type="feature" confirmed="yes">org.junit.Assert.assertArrayEquals(java.lang.String, char[], char[])</inbound>
                <inbound type="feature" confirmed="yes">org.junit.Assert.assertArrayEquals(java.lang.String, int[], int[])</inbound>
                <inbound type="feature" confirmed="yes">org.junit.Assert.assertArrayEquals(java.lang.String, java.lang.Object[], java.lang.Object[])</inbound>
                <inbound type="feature" confirmed="yes">org.junit.Assert.assertArrayEquals(java.lang.String, long[], long[])</inbound>
                <inbound type="feature" confirmed="yes">org.junit.Assert.assertArrayEquals(java.lang.String, short[], short[])</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.junit.Assert.isEquals(java.lang.Object, java.lang.Object)</name>
                <outbound type="class" confirmed="no">java.lang.Object</outbound>
                <outbound type="feature" confirmed="no">java.lang.Object.equals(java.lang.Object)</outbound>
                <inbound type="feature" confirmed="yes">org.junit.Assert.assertEquals(java.lang.String, java.lang.Object, java.lang.Object)</inbound>
            </feature>
        </class>
        <class confirmed="yes">
            <name>org.junit.Assume</name>
            <outbound type="class" confirmed="no">java.lang.Object</outbound>
            <feature confirmed="yes">
                <name>org.junit.Assume.Assume()</name>
                <outbound type="feature" confirmed="no">java.lang.Object.Object()</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.junit.Assume.assumeNoException(java.lang.Throwable)</name>
                <outbound type="class" confirmed="no">java.lang.Object</outbound>
                <outbound type="class" confirmed="no">java.lang.Throwable</outbound>
                <outbound type="feature" confirmed="yes">org.hamcrest.CoreMatchers.nullValue()</outbound>
                <outbound type="class" confirmed="yes">org.hamcrest.Matcher</outbound>
                <outbound type="feature" confirmed="yes">org.junit.Assume.assumeThat(java.lang.Object, org.hamcrest.Matcher)</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.junit.Assume.assumeNotNull(java.lang.Object[])</name>
                <outbound type="class" confirmed="no">java.lang.Object</outbound>
                <outbound type="feature" confirmed="no">java.util.Arrays.asList(java.lang.Object[])</outbound>
                <outbound type="class" confirmed="no">java.util.List</outbound>
                <outbound type="feature" confirmed="yes">org.hamcrest.CoreMatchers.notNullValue()</outbound>
                <outbound type="class" confirmed="yes">org.hamcrest.Matcher</outbound>
                <outbound type="feature" confirmed="yes">org.junit.Assume.assumeThat(java.lang.Object, org.hamcrest.Matcher)</outbound>
                <outbound type="feature" confirmed="yes">org.junit.internal.matchers.Each.each(org.hamcrest.Matcher)</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.junit.Assume.assumeThat(java.lang.Object, org.hamcrest.Matcher)</name>
                <outbound type="class" confirmed="no">java.lang.Object</outbound>
                <outbound type="class" confirmed="yes">org.hamcrest.Matcher</outbound>
                <outbound type="feature" confirmed="yes">org.hamcrest.Matcher.matches(java.lang.Object)</outbound>
                <outbound type="feature" confirmed="yes">org.junit.internal.AssumptionViolatedException.AssumptionViolatedException(java.lang.Object, org.hamcrest.Matcher)</outbound>
                <inbound type="feature" confirmed="yes">org.junit.Assume.assumeNoException(java.lang.Throwable)</inbound>
                <inbound type="feature" confirmed="yes">org.junit.Assume.assumeNotNull(java.lang.Object[])</inbound>
                <inbound type="feature" confirmed="yes">org.junit.Assume.assumeTrue(boolean)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.junit.Assume.assumeTrue(boolean)</name>
                <outbound type="class" confirmed="no">java.lang.Boolean</outbound>
                <outbound type="feature" confirmed="no">java.lang.Boolean.valueOf(boolean)</outbound>
                <outbound type="class" confirmed="no">java.lang.Object</outbound>
                <outbound type="feature" confirmed="yes">org.hamcrest.CoreMatchers.is(java.lang.Object)</outbound>
                <outbound type="class" confirmed="yes">org.hamcrest.Matcher</outbound>
                <outbound type="feature" confirmed="yes">org.junit.Assume.assumeThat(java.lang.Object, org.hamcrest.Matcher)</outbound>
            </feature>
        </class>
        <class confirmed="yes">
            <name>org.junit.Before</name>
            <outbound type="class" confirmed="no">java.lang.Object</outbound>
            <outbound type="class" confirmed="no">java.lang.annotation.Annotation</outbound>
            <inbound type="feature" confirmed="yes">org.junit.internal.runners.MethodValidator.validateInstanceMethods()</inbound>
            <inbound type="feature" confirmed="yes">org.junit.internal.runners.TestClass.runsTopToBottom(java.lang.Class)</inbound>
            <inbound type="feature" confirmed="yes">org.junit.internal.runners.TestMethod.getBefores()</inbound>
            <inbound type="feature" confirmed="yes">org.junit.runners.BlockJUnit4ClassRunner.validateInstanceMethods(java.util.List)</inbound>
            <inbound type="feature" confirmed="yes">org.junit.runners.BlockJUnit4ClassRunner.withBefores(org.junit.runners.model.FrameworkMethod, java.lang.Object, org.junit.runners.model.Statement)</inbound>
            <inbound type="feature" confirmed="yes">org.junit.runners.model.TestClass.runsTopToBottom(java.lang.Class)</inbound>
        </class>
        <class confirmed="yes">
            <name>org.junit.BeforeClass</name>
            <outbound type="class" confirmed="no">java.lang.Object</outbound>
            <outbound type="class" confirmed="no">java.lang.annotation.Annotation</outbound>
            <inbound type="feature" confirmed="yes">org.junit.internal.runners.MethodValidator.validateStaticMethods()</inbound>
            <inbound type="feature" confirmed="yes">org.junit.internal.runners.TestClass.getBefores()</inbound>
            <inbound type="feature" confirmed="yes">org.junit.internal.runners.TestClass.runsTopToBottom(java.lang.Class)</inbound>
            <inbound type="feature" confirmed="yes">org.junit.runners.ParentRunner.collectInitializationErrors(java.util.List)</inbound>
            <inbound type="feature" confirmed="yes">org.junit.runners.ParentRunner.withBeforeClasses(org.junit.runners.model.Statement)</inbound>
            <inbound type="feature" confirmed="yes">org.junit.runners.model.TestClass.runsTopToBottom(java.lang.Class)</inbound>
        </class>
        <class confirmed="yes">
            <name>org.junit.ClassRule</name>
            <outbound type="class" confirmed="no">java.lang.Object</outbound>
            <outbound type="class" confirmed="no">java.lang.annotation.Annotation</outbound>
            <inbound type="feature" confirmed="yes">org.junit.internal.runners.rules.RuleFieldValidator.static {}</inbound>
            <inbound type="feature" confirmed="yes">org.junit.runners.ParentRunner.classRules()</inbound>
        </class>
        <class confirmed="yes">
            <name>org.junit.ComparisonFailure</name>
            <outbound type="class" confirmed="no">java.lang.AssertionError</outbound>
            <feature confirmed="yes">
                <name>org.junit.ComparisonFailure.ComparisonFailure(java.lang.String, java.lang.String, java.lang.String)</name>
                <outbound type="feature" confirmed="no">java.lang.AssertionError.AssertionError(java.lang.Object)</outbound>
                <outbound type="class" confirmed="no">java.lang.Object</outbound>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="feature" confirmed="yes">org.junit.ComparisonFailure.fActual</outbound>
                <outbound type="feature" confirmed="yes">org.junit.ComparisonFailure.fExpected</outbound>
                <inbound type="feature" confirmed="yes">org.junit.Assert.assertEquals(java.lang.String, java.lang.Object, java.lang.Object)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.junit.ComparisonFailure.MAX_CONTEXT_LENGTH</name>
            </feature>
            <feature confirmed="yes">
                <name>org.junit.ComparisonFailure.fActual</name>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <inbound type="feature" confirmed="yes">org.junit.ComparisonFailure.ComparisonFailure(java.lang.String, java.lang.String, java.lang.String)</inbound>
                <inbound type="feature" confirmed="yes">org.junit.ComparisonFailure.getActual()</inbound>
                <inbound type="feature" confirmed="yes">org.junit.ComparisonFailure.getMessage()</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.junit.ComparisonFailure.fExpected</name>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <inbound type="feature" confirmed="yes">org.junit.ComparisonFailure.ComparisonFailure(java.lang.String, java.lang.String, java.lang.String)</inbound>
                <inbound type="feature" confirmed="yes">org.junit.ComparisonFailure.getExpected()</inbound>
                <inbound type="feature" confirmed="yes">org.junit.ComparisonFailure.getMessage()</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.junit.ComparisonFailure.getActual()</name>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="feature" confirmed="yes">org.junit.ComparisonFailure.fActual</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.junit.ComparisonFailure.getExpected()</name>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="feature" confirmed="yes">org.junit.ComparisonFailure.fExpected</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.junit.ComparisonFailure.getMessage()</name>
                <outbound type="feature" confirmed="no">java.lang.AssertionError.getMessage()</outbound>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="class" confirmed="yes">org.junit.ComparisonFailure$ComparisonCompactor</outbound>
                <outbound type="feature" confirmed="yes">org.junit.ComparisonFailure$ComparisonCompactor.ComparisonFailure$ComparisonCompactor(int, java.lang.String, java.lang.String)</outbound>
                <outbound type="feature" confirmed="yes">org.junit.ComparisonFailure$ComparisonCompactor.access$000(org.junit.ComparisonFailure$ComparisonCompactor, java.lang.String)</outbound>
                <outbound type="feature" confirmed="yes">org.junit.ComparisonFailure.fActual</outbound>
                <outbound type="feature" confirmed="yes">org.junit.ComparisonFailure.fExpected</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.junit.ComparisonFailure.serialVersionUID</name>
            </feature>
        </class>
        <class confirmed="yes">
            <name>org.junit.ComparisonFailure$ComparisonCompactor</name>
            <outbound type="class" confirmed="no">java.lang.Object</outbound>
            <inbound type="feature" confirmed="yes">org.junit.ComparisonFailure.getMessage()</inbound>
            <feature confirmed="yes">
                <name>org.junit.ComparisonFailure$ComparisonCompactor.ComparisonFailure$ComparisonCompactor(int, java.lang.String, java.lang.String)</name>
                <outbound type="feature" confirmed="no">java.lang.Object.Object()</outbound>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="feature" confirmed="yes">org.junit.ComparisonFailure$ComparisonCompactor.fActual</outbound>
                <outbound type="feature" confirmed="yes">org.junit.ComparisonFailure$ComparisonCompactor.fContextLength</outbound>
                <outbound type="feature" confirmed="yes">org.junit.ComparisonFailure$ComparisonCompactor.fExpected</outbound>
                <inbound type="feature" confirmed="yes">org.junit.ComparisonFailure.getMessage()</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.junit.ComparisonFailure$ComparisonCompactor.DELTA_END</name>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.junit.ComparisonFailure$ComparisonCompactor.DELTA_START</name>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.junit.ComparisonFailure$ComparisonCompactor.ELLIPSIS</name>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.junit.ComparisonFailure$ComparisonCompactor.access$000(org.junit.ComparisonFailure$ComparisonCompactor, java.lang.String)</name>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="feature" confirmed="yes">org.junit.ComparisonFailure$ComparisonCompactor.compact(java.lang.String)</outbound>
                <inbound type="feature" confirmed="yes">org.junit.ComparisonFailure.getMessage()</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.junit.ComparisonFailure$ComparisonCompactor.areStringsEqual()</name>
                <outbound type="class" confirmed="no">java.lang.Object</outbound>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="feature" confirmed="no">java.lang.String.equals(java.lang.Object)</outbound>
                <outbound type="feature" confirmed="yes">org.junit.ComparisonFailure$ComparisonCompactor.fActual</outbound>
                <outbound type="feature" confirmed="yes">org.junit.ComparisonFailure$ComparisonCompactor.fExpected</outbound>
                <inbound type="feature" confirmed="yes">org.junit.ComparisonFailure$ComparisonCompactor.compact(java.lang.String)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.junit.ComparisonFailure$ComparisonCompactor.compact(java.lang.String)</name>
                <outbound type="class" confirmed="no">java.lang.Object</outbound>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="feature" confirmed="yes">org.junit.Assert.format(java.lang.String, java.lang.Object, java.lang.Object)</outbound>
                <outbound type="feature" confirmed="yes">org.junit.ComparisonFailure$ComparisonCompactor.areStringsEqual()</outbound>
                <outbound type="feature" confirmed="yes">org.junit.ComparisonFailure$ComparisonCompactor.compactString(java.lang.String)</outbound>
                <outbound type="feature" confirmed="yes">org.junit.ComparisonFailure$ComparisonCompactor.fActual</outbound>
                <outbound type="feature" confirmed="yes">org.junit.ComparisonFailure$ComparisonCompactor.fExpected</outbound>
                <outbound type="feature" confirmed="yes">org.junit.ComparisonFailure$ComparisonCompactor.findCommonPrefix()</outbound>
                <outbound type="feature" confirmed="yes">org.junit.ComparisonFailure$ComparisonCompactor.findCommonSuffix()</outbound>
                <inbound type="feature" confirmed="yes">org.junit.ComparisonFailure$ComparisonCompactor.access$000(org.junit.ComparisonFailure$ComparisonCompactor, java.lang.String)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.junit.ComparisonFailure$ComparisonCompactor.compactString(java.lang.String)</name>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="feature" confirmed="no">java.lang.String.length()</outbound>
                <outbound type="feature" confirmed="no">java.lang.String.substring(int, int)</outbound>
                <outbound type="class" confirmed="no">java.lang.StringBuilder</outbound>
                <outbound type="feature" confirmed="no">java.lang.StringBuilder.StringBuilder()</outbound>
                <outbound type="feature" confirmed="no">java.lang.StringBuilder.append(java.lang.String)</outbound>
                <outbound type="feature" confirmed="no">java.lang.StringBuilder.toString()</outbound>
                <outbound type="feature" confirmed="yes">org.junit.ComparisonFailure$ComparisonCompactor.computeCommonPrefix()</outbound>
                <outbound type="feature" confirmed="yes">org.junit.ComparisonFailure$ComparisonCompactor.computeCommonSuffix()</outbound>
                <outbound type="feature" confirmed="yes">org.junit.ComparisonFailure$ComparisonCompactor.fPrefix</outbound>
                <outbound type="feature" confirmed="yes">org.junit.ComparisonFailure$ComparisonCompactor.fSuffix</outbound>
                <inbound type="feature" confirmed="yes">org.junit.ComparisonFailure$ComparisonCompactor.compact(java.lang.String)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.junit.ComparisonFailure$ComparisonCompactor.computeCommonPrefix()</name>
                <outbound type="feature" confirmed="no">java.lang.Math.max(int, int)</outbound>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="feature" confirmed="no">java.lang.String.substring(int, int)</outbound>
                <outbound type="class" confirmed="no">java.lang.StringBuilder</outbound>
                <outbound type="feature" confirmed="no">java.lang.StringBuilder.StringBuilder()</outbound>
                <outbound type="feature" confirmed="no">java.lang.StringBuilder.append(java.lang.String)</outbound>
                <outbound type="feature" confirmed="no">java.lang.StringBuilder.toString()</outbound>
                <outbound type="feature" confirmed="yes">org.junit.ComparisonFailure$ComparisonCompactor.fContextLength</outbound>
                <outbound type="feature" confirmed="yes">org.junit.ComparisonFailure$ComparisonCompactor.fExpected</outbound>
                <outbound type="feature" confirmed="yes">org.junit.ComparisonFailure$ComparisonCompactor.fPrefix</outbound>
                <inbound type="feature" confirmed="yes">org.junit.ComparisonFailure$ComparisonCompactor.compactString(java.lang.String)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.junit.ComparisonFailure$ComparisonCompactor.computeCommonSuffix()</name>
                <outbound type="feature" confirmed="no">java.lang.Math.min(int, int)</outbound>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="feature" confirmed="no">java.lang.String.length()</outbound>
                <outbound type="feature" confirmed="no">java.lang.String.substring(int, int)</outbound>
                <outbound type="class" confirmed="no">java.lang.StringBuilder</outbound>
                <outbound type="feature" confirmed="no">java.lang.StringBuilder.StringBuilder()</outbound>
                <outbound type="feature" confirmed="no">java.lang.StringBuilder.append(java.lang.String)</outbound>
                <outbound type="feature" confirmed="no">java.lang.StringBuilder.toString()</outbound>
                <outbound type="feature" confirmed="yes">org.junit.ComparisonFailure$ComparisonCompactor.fContextLength</outbound>
                <outbound type="feature" confirmed="yes">org.junit.ComparisonFailure$ComparisonCompactor.fExpected</outbound>
                <outbound type="feature" confirmed="yes">org.junit.ComparisonFailure$ComparisonCompactor.fSuffix</outbound>
                <inbound type="feature" confirmed="yes">org.junit.ComparisonFailure$ComparisonCompactor.compactString(java.lang.String)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.junit.ComparisonFailure$ComparisonCompactor.fActual</name>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <inbound type="feature" confirmed="yes">org.junit.ComparisonFailure$ComparisonCompactor.ComparisonFailure$ComparisonCompactor(int, java.lang.String, java.lang.String)</inbound>
                <inbound type="feature" confirmed="yes">org.junit.ComparisonFailure$ComparisonCompactor.areStringsEqual()</inbound>
                <inbound type="feature" confirmed="yes">org.junit.ComparisonFailure$ComparisonCompactor.compact(java.lang.String)</inbound>
                <inbound type="feature" confirmed="yes">org.junit.ComparisonFailure$ComparisonCompactor.findCommonPrefix()</inbound>
                <inbound type="feature" confirmed="yes">org.junit.ComparisonFailure$ComparisonCompactor.findCommonSuffix()</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.junit.ComparisonFailure$ComparisonCompactor.fContextLength</name>
                <inbound type="feature" confirmed="yes">org.junit.ComparisonFailure$ComparisonCompactor.ComparisonFailure$ComparisonCompactor(int, java.lang.String, java.lang.String)</inbound>
                <inbound type="feature" confirmed="yes">org.junit.ComparisonFailure$ComparisonCompactor.computeCommonPrefix()</inbound>
                <inbound type="feature" confirmed="yes">org.junit.ComparisonFailure$ComparisonCompactor.computeCommonSuffix()</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.junit.ComparisonFailure$ComparisonCompactor.fExpected</name>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <inbound type="feature" confirmed="yes">org.junit.ComparisonFailure$ComparisonCompactor.ComparisonFailure$ComparisonCompactor(int, java.lang.String, java.lang.String)</inbound>
                <inbound type="feature" confirmed="yes">org.junit.ComparisonFailure$ComparisonCompactor.areStringsEqual()</inbound>
                <inbound type="feature" confirmed="yes">org.junit.ComparisonFailure$ComparisonCompactor.compact(java.lang.String)</inbound>
                <inbound type="feature" confirmed="yes">org.junit.ComparisonFailure$ComparisonCompactor.computeCommonPrefix()</inbound>
                <inbound type="feature" confirmed="yes">org.junit.ComparisonFailure$ComparisonCompactor.computeCommonSuffix()</inbound>
                <inbound type="feature" confirmed="yes">org.junit.ComparisonFailure$ComparisonCompactor.findCommonPrefix()</inbound>
                <inbound type="feature" confirmed="yes">org.junit.ComparisonFailure$ComparisonCompactor.findCommonSuffix()</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.junit.ComparisonFailure$ComparisonCompactor.fPrefix</name>
                <inbound type="feature" confirmed="yes">org.junit.ComparisonFailure$ComparisonCompactor.compactString(java.lang.String)</inbound>
                <inbound type="feature" confirmed="yes">org.junit.ComparisonFailure$ComparisonCompactor.computeCommonPrefix()</inbound>
                <inbound type="feature" confirmed="yes">org.junit.ComparisonFailure$ComparisonCompactor.findCommonPrefix()</inbound>
                <inbound type="feature" confirmed="yes">org.junit.ComparisonFailure$ComparisonCompactor.findCommonSuffix()</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.junit.ComparisonFailure$ComparisonCompactor.fSuffix</name>
                <inbound type="feature" confirmed="yes">org.junit.ComparisonFailure$ComparisonCompactor.compactString(java.lang.String)</inbound>
                <inbound type="feature" confirmed="yes">org.junit.ComparisonFailure$ComparisonCompactor.computeCommonSuffix()</inbound>
                <inbound type="feature" confirmed="yes">org.junit.ComparisonFailure$ComparisonCompactor.findCommonSuffix()</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.junit.ComparisonFailure$ComparisonCompactor.findCommonPrefix()</name>
                <outbound type="feature" confirmed="no">java.lang.Math.min(int, int)</outbound>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="feature" confirmed="no">java.lang.String.charAt(int)</outbound>
                <outbound type="feature" confirmed="no">java.lang.String.length()</outbound>
                <outbound type="feature" confirmed="yes">org.junit.ComparisonFailure$ComparisonCompactor.fActual</outbound>
                <outbound type="feature" confirmed="yes">org.junit.ComparisonFailure$ComparisonCompactor.fExpected</outbound>
                <outbound type="feature" confirmed="yes">org.junit.ComparisonFailure$ComparisonCompactor.fPrefix</outbound>
                <inbound type="feature" confirmed="yes">org.junit.ComparisonFailure$ComparisonCompactor.compact(java.lang.String)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.junit.ComparisonFailure$ComparisonCompactor.findCommonSuffix()</name>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="feature" confirmed="no">java.lang.String.charAt(int)</outbound>
                <outbound type="feature" confirmed="no">java.lang.String.length()</outbound>
                <outbound type="feature" confirmed="yes">org.junit.ComparisonFailure$ComparisonCompactor.fActual</outbound>
                <outbound type="feature" confirmed="yes">org.junit.ComparisonFailure$ComparisonCompactor.fExpected</outbound>
                <outbound type="feature" confirmed="yes">org.junit.ComparisonFailure$ComparisonCompactor.fPrefix</outbound>
                <outbound type="feature" confirmed="yes">org.junit.ComparisonFailure$ComparisonCompactor.fSuffix</outbound>
                <inbound type="feature" confirmed="yes">org.junit.ComparisonFailure$ComparisonCompactor.compact(java.lang.String)</inbound>
            </feature>
        </class>
        <class confirmed="yes">
            <name>org.junit.Ignore</name>
            <outbound type="class" confirmed="no">java.lang.Object</outbound>
            <outbound type="class" confirmed="no">java.lang.annotation.Annotation</outbound>
            <inbound type="feature" confirmed="yes">junit.framework.JUnit4TestAdapter.isIgnored(org.junit.runner.Description)</inbound>
            <inbound type="feature" confirmed="yes">org.junit.internal.builders.IgnoredBuilder.runnerForClass(java.lang.Class)</inbound>
            <inbound type="feature" confirmed="yes">org.junit.internal.runners.TestMethod.isIgnored()</inbound>
            <inbound type="feature" confirmed="yes">org.junit.runners.BlockJUnit4ClassRunner.runChild(org.junit.runners.model.FrameworkMethod, org.junit.runner.notification.RunNotifier)</inbound>
            <feature confirmed="yes">
                <name>org.junit.Ignore.value()</name>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
            </feature>
        </class>
        <class confirmed="yes">
            <name>org.junit.Rule</name>
            <outbound type="class" confirmed="no">java.lang.Object</outbound>
            <outbound type="class" confirmed="no">java.lang.annotation.Annotation</outbound>
            <inbound type="feature" confirmed="yes">org.junit.internal.runners.rules.RuleFieldValidator.static {}</inbound>
            <inbound type="feature" confirmed="yes">org.junit.runners.BlockJUnit4ClassRunner.getTestRules(java.lang.Object)</inbound>
            <inbound type="feature" confirmed="yes">org.junit.runners.BlockJUnit4ClassRunner.rules(java.lang.Object)</inbound>
        </class>
        <class confirmed="yes">
            <name>org.junit.Test</name>
            <outbound type="class" confirmed="no">java.lang.Object</outbound>
            <outbound type="class" confirmed="no">java.lang.annotation.Annotation</outbound>
            <inbound type="feature" confirmed="yes">org.junit.internal.runners.MethodValidator.validateInstanceMethods()</inbound>
            <inbound type="feature" confirmed="yes">org.junit.internal.runners.TestClass.getTestMethods()</inbound>
            <inbound type="feature" confirmed="yes">org.junit.internal.runners.TestMethod.getExpectedException()</inbound>
            <inbound type="feature" confirmed="yes">org.junit.internal.runners.TestMethod.getTimeout()</inbound>
            <inbound type="feature" confirmed="yes">org.junit.runners.BlockJUnit4ClassRunner.computeTestMethods()</inbound>
            <inbound type="feature" confirmed="yes">org.junit.runners.BlockJUnit4ClassRunner.expectsException(org.junit.Test)</inbound>
            <inbound type="feature" confirmed="yes">org.junit.runners.BlockJUnit4ClassRunner.getExpectedException(org.junit.Test)</inbound>
            <inbound type="feature" confirmed="yes">org.junit.runners.BlockJUnit4ClassRunner.getTimeout(org.junit.Test)</inbound>
            <inbound type="feature" confirmed="yes">org.junit.runners.BlockJUnit4ClassRunner.possiblyExpectingExceptions(org.junit.runners.model.FrameworkMethod, java.lang.Object, org.junit.runners.model.Statement)</inbound>
            <inbound type="feature" confirmed="yes">org.junit.runners.BlockJUnit4ClassRunner.validateTestMethods(java.util.List)</inbound>
            <inbound type="feature" confirmed="yes">org.junit.runners.BlockJUnit4ClassRunner.withPotentialTimeout(org.junit.runners.model.FrameworkMethod, java.lang.Object, org.junit.runners.model.Statement)</inbound>
            <feature confirmed="yes">
                <name>org.junit.Test.expected()</name>
                <outbound type="class" confirmed="no">java.lang.Class</outbound>
                <inbound type="feature" confirmed="yes">org.junit.internal.runners.TestMethod.getExpectedException()</inbound>
                <inbound type="feature" confirmed="yes">org.junit.runners.BlockJUnit4ClassRunner.getExpectedException(org.junit.Test)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.junit.Test.timeout()</name>
                <inbound type="feature" confirmed="yes">org.junit.internal.runners.TestMethod.getTimeout()</inbound>
                <inbound type="feature" confirmed="yes">org.junit.runners.BlockJUnit4ClassRunner.getTimeout(org.junit.Test)</inbound>
            </feature>
        </class>
        <class confirmed="yes">
            <name>org.junit.Test$None</name>
            <outbound type="class" confirmed="no">java.lang.Throwable</outbound>
            <inbound type="feature" confirmed="yes">org.junit.internal.runners.TestMethod.getExpectedException()</inbound>
            <inbound type="feature" confirmed="yes">org.junit.runners.BlockJUnit4ClassRunner.getExpectedException(org.junit.Test)</inbound>
            <feature confirmed="yes">
                <name>org.junit.Test$None.Test$None()</name>
                <outbound type="feature" confirmed="no">java.lang.Throwable.Throwable()</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.junit.Test$None.serialVersionUID</name>
            </feature>
        </class>
        <class confirmed="yes">
            <name>org.junit.package-info</name>
            <outbound type="class" confirmed="no">java.lang.Object</outbound>
        </class>
    </package>
    <package confirmed="yes">
        <name>org.junit.experimental</name>
        <class confirmed="yes">
            <name>org.junit.experimental.ParallelComputer</name>
            <outbound type="class" confirmed="yes">org.junit.runner.Computer</outbound>
            <feature confirmed="yes">
                <name>org.junit.experimental.ParallelComputer.ParallelComputer(boolean, boolean)</name>
                <outbound type="feature" confirmed="yes">org.junit.experimental.ParallelComputer.fClasses</outbound>
                <outbound type="feature" confirmed="yes">org.junit.experimental.ParallelComputer.fMethods</outbound>
                <outbound type="feature" confirmed="yes">org.junit.runner.Computer.Computer()</outbound>
                <inbound type="feature" confirmed="yes">org.junit.experimental.ParallelComputer.classes()</inbound>
                <inbound type="feature" confirmed="yes">org.junit.experimental.ParallelComputer.methods()</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.junit.experimental.ParallelComputer.classes()</name>
                <outbound type="feature" confirmed="yes">org.junit.experimental.ParallelComputer.ParallelComputer(boolean, boolean)</outbound>
                <outbound type="class" confirmed="yes">org.junit.runner.Computer</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.junit.experimental.ParallelComputer.fClasses</name>
                <inbound type="feature" confirmed="yes">org.junit.experimental.ParallelComputer.ParallelComputer(boolean, boolean)</inbound>
                <inbound type="feature" confirmed="yes">org.junit.experimental.ParallelComputer.getSuite(org.junit.runners.model.RunnerBuilder, java.lang.Class[])</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.junit.experimental.ParallelComputer.fMethods</name>
                <inbound type="feature" confirmed="yes">org.junit.experimental.ParallelComputer.ParallelComputer(boolean, boolean)</inbound>
                <inbound type="feature" confirmed="yes">org.junit.experimental.ParallelComputer.getRunner(org.junit.runners.model.RunnerBuilder, java.lang.Class)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.junit.experimental.ParallelComputer.getRunner(org.junit.runners.model.RunnerBuilder, java.lang.Class)</name>
                <outbound type="class" confirmed="no">java.lang.Class</outbound>
                <outbound type="class" confirmed="no">java.lang.Throwable</outbound>
                <outbound type="feature" confirmed="yes">org.junit.experimental.ParallelComputer.fMethods</outbound>
                <outbound type="feature" confirmed="yes">org.junit.experimental.ParallelComputer.parallelize(org.junit.runner.Runner)</outbound>
                <outbound type="feature" confirmed="yes">org.junit.runner.Computer.getRunner(org.junit.runners.model.RunnerBuilder, java.lang.Class)</outbound>
                <outbound type="class" confirmed="yes">org.junit.runner.Runner</outbound>
                <outbound type="class" confirmed="yes">org.junit.runners.model.RunnerBuilder</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.junit.experimental.ParallelComputer.getSuite(org.junit.runners.model.RunnerBuilder, java.lang.Class[])</name>
                <outbound type="class" confirmed="no">java.lang.Class</outbound>
                <outbound type="feature" confirmed="yes">org.junit.experimental.ParallelComputer.fClasses</outbound>
                <outbound type="feature" confirmed="yes">org.junit.experimental.ParallelComputer.parallelize(org.junit.runner.Runner)</outbound>
                <outbound type="feature" confirmed="yes">org.junit.runner.Computer.getSuite(org.junit.runners.model.RunnerBuilder, java.lang.Class[])</outbound>
                <outbound type="class" confirmed="yes">org.junit.runner.Runner</outbound>
                <outbound type="class" confirmed="yes">org.junit.runners.model.InitializationError</outbound>
                <outbound type="class" confirmed="yes">org.junit.runners.model.RunnerBuilder</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.junit.experimental.ParallelComputer.methods()</name>
                <outbound type="feature" confirmed="yes">org.junit.experimental.ParallelComputer.ParallelComputer(boolean, boolean)</outbound>
                <outbound type="class" confirmed="yes">org.junit.runner.Computer</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.junit.experimental.ParallelComputer.parallelize(org.junit.runner.Runner)</name>
                <outbound type="feature" confirmed="yes">org.junit.experimental.ParallelComputer$1.ParallelComputer$1()</outbound>
                <outbound type="class" confirmed="yes">org.junit.runner.Runner</outbound>
                <outbound type="class" confirmed="yes">org.junit.runners.ParentRunner</outbound>
                <outbound type="feature" confirmed="yes">org.junit.runners.ParentRunner.setScheduler(org.junit.runners.model.RunnerScheduler)</outbound>
                <outbound type="class" confirmed="yes">org.junit.runners.model.RunnerScheduler</outbound>
                <inbound type="feature" confirmed="yes">org.junit.experimental.ParallelComputer.getRunner(org.junit.runners.model.RunnerBuilder, java.lang.Class)</inbound>
                <inbound type="feature" confirmed="yes">org.junit.experimental.ParallelComputer.getSuite(org.junit.runners.model.RunnerBuilder, java.lang.Class[])</inbound>
            </feature>
        </class>
        <class confirmed="yes">
            <name>org.junit.experimental.ParallelComputer$1</name>
            <outbound type="class" confirmed="no">java.lang.Object</outbound>
            <outbound type="class" confirmed="yes">org.junit.runners.model.RunnerScheduler</outbound>
            <inbound type="feature" confirmed="yes">org.junit.experimental.ParallelComputer$1$1.ParallelComputer$1$1(org.junit.experimental.ParallelComputer$1, java.lang.Runnable)</inbound>
            <inbound type="feature" confirmed="yes">org.junit.experimental.ParallelComputer$1$1.this$0</inbound>
            <feature confirmed="yes">
                <name>org.junit.experimental.ParallelComputer$1.ParallelComputer$1()</name>
                <outbound type="feature" confirmed="no">java.lang.Object.Object()</outbound>
                <outbound type="feature" confirmed="no">java.util.ArrayList.ArrayList()</outbound>
                <outbound type="class" confirmed="no">java.util.List</outbound>
                <outbound type="class" confirmed="no">java.util.concurrent.ExecutorService</outbound>
                <outbound type="feature" confirmed="no">java.util.concurrent.Executors.newCachedThreadPool()</outbound>
                <outbound type="feature" confirmed="yes">org.junit.experimental.ParallelComputer$1.fResults</outbound>
                <outbound type="feature" confirmed="yes">org.junit.experimental.ParallelComputer$1.fService</outbound>
                <inbound type="feature" confirmed="yes">org.junit.experimental.ParallelComputer.parallelize(org.junit.runner.Runner)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.junit.experimental.ParallelComputer$1.fResults</name>
                <outbound type="class" confirmed="no">java.util.List</outbound>
                <inbound type="feature" confirmed="yes">org.junit.experimental.ParallelComputer$1.ParallelComputer$1()</inbound>
                <inbound type="feature" confirmed="yes">org.junit.experimental.ParallelComputer$1.finished()</inbound>
                <inbound type="feature" confirmed="yes">org.junit.experimental.ParallelComputer$1.schedule(java.lang.Runnable)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.junit.experimental.ParallelComputer$1.fService</name>
                <outbound type="class" confirmed="no">java.util.concurrent.ExecutorService</outbound>
                <inbound type="feature" confirmed="yes">org.junit.experimental.ParallelComputer$1.ParallelComputer$1()</inbound>
                <inbound type="feature" confirmed="yes">org.junit.experimental.ParallelComputer$1.schedule(java.lang.Runnable)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.junit.experimental.ParallelComputer$1.finished()</name>
                <outbound type="class" confirmed="no">java.lang.Exception</outbound>
                <outbound type="feature" confirmed="no">java.lang.Exception.printStackTrace()</outbound>
                <outbound type="class" confirmed="no">java.lang.Object</outbound>
                <outbound type="class" confirmed="no">java.util.Iterator</outbound>
                <outbound type="feature" confirmed="no">java.util.Iterator.hasNext()</outbound>
                <outbound type="feature" confirmed="no">java.util.Iterator.next()</outbound>
                <outbound type="class" confirmed="no">java.util.List</outbound>
                <outbound type="feature" confirmed="no">java.util.List.iterator()</outbound>
                <outbound type="class" confirmed="no">java.util.concurrent.Future</outbound>
                <outbound type="feature" confirmed="no">java.util.concurrent.Future.get()</outbound>
                <outbound type="feature" confirmed="yes">org.junit.experimental.ParallelComputer$1.fResults</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.junit.experimental.ParallelComputer$1.schedule(java.lang.Runnable)</name>
                <outbound type="class" confirmed="no">java.lang.Object</outbound>
                <outbound type="class" confirmed="no">java.lang.Runnable</outbound>
                <outbound type="class" confirmed="no">java.util.List</outbound>
                <outbound type="feature" confirmed="no">java.util.List.add(java.lang.Object)</outbound>
                <outbound type="class" confirmed="no">java.util.concurrent.Callable</outbound>
                <outbound type="class" confirmed="no">java.util.concurrent.ExecutorService</outbound>
                <outbound type="feature" confirmed="no">java.util.concurrent.ExecutorService.submit(java.util.concurrent.Callable)</outbound>
                <outbound type="class" confirmed="no">java.util.concurrent.Future</outbound>
                <outbound type="feature" confirmed="yes">org.junit.experimental.ParallelComputer$1$1.ParallelComputer$1$1(org.junit.experimental.ParallelComputer$1, java.lang.Runnable)</outbound>
                <outbound type="feature" confirmed="yes">org.junit.experimental.ParallelComputer$1.fResults</outbound>
                <outbound type="feature" confirmed="yes">org.junit.experimental.ParallelComputer$1.fService</outbound>
            </feature>
        </class>
        <class confirmed="yes">
            <name>org.junit.experimental.ParallelComputer$1$1</name>
            <outbound type="class" confirmed="no">java.lang.Object</outbound>
            <outbound type="class" confirmed="no">java.util.concurrent.Callable</outbound>
            <feature confirmed="yes">
                <name>org.junit.experimental.ParallelComputer$1$1.ParallelComputer$1$1(org.junit.experimental.ParallelComputer$1, java.lang.Runnable)</name>
                <outbound type="feature" confirmed="no">java.lang.Object.Object()</outbound>
                <outbound type="class" confirmed="no">java.lang.Runnable</outbound>
                <outbound type="class" confirmed="yes">org.junit.experimental.ParallelComputer$1</outbound>
                <outbound type="feature" confirmed="yes">org.junit.experimental.ParallelComputer$1$1.this$0</outbound>
                <outbound type="feature" confirmed="yes">org.junit.experimental.ParallelComputer$1$1.val$childStatement</outbound>
                <inbound type="feature" confirmed="yes">org.junit.experimental.ParallelComputer$1.schedule(java.lang.Runnable)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.junit.experimental.ParallelComputer$1$1.call()</name>
                <outbound type="class" confirmed="no">java.lang.Exception</outbound>
                <outbound type="class" confirmed="no">java.lang.Object</outbound>
                <outbound type="class" confirmed="no">java.lang.Runnable</outbound>
                <outbound type="feature" confirmed="no">java.lang.Runnable.run()</outbound>
                <outbound type="feature" confirmed="yes">org.junit.experimental.ParallelComputer$1$1.val$childStatement</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.junit.experimental.ParallelComputer$1$1.this$0</name>
                <outbound type="class" confirmed="yes">org.junit.experimental.ParallelComputer$1</outbound>
                <inbound type="feature" confirmed="yes">org.junit.experimental.ParallelComputer$1$1.ParallelComputer$1$1(org.junit.experimental.ParallelComputer$1, java.lang.Runnable)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.junit.experimental.ParallelComputer$1$1.val$childStatement</name>
                <outbound type="class" confirmed="no">java.lang.Runnable</outbound>
                <inbound type="feature" confirmed="yes">org.junit.experimental.ParallelComputer$1$1.ParallelComputer$1$1(org.junit.experimental.ParallelComputer$1, java.lang.Runnable)</inbound>
                <inbound type="feature" confirmed="yes">org.junit.experimental.ParallelComputer$1$1.call()</inbound>
            </feature>
        </class>
    </package>
    <package confirmed="yes">
        <name>org.junit.experimental.categories</name>
        <class confirmed="yes">
            <name>org.junit.experimental.categories.Categories</name>
            <outbound type="class" confirmed="yes">org.junit.runners.Suite</outbound>
            <feature confirmed="yes">
                <name>org.junit.experimental.categories.Categories.Categories(java.lang.Class, org.junit.runners.model.RunnerBuilder)</name>
                <outbound type="class" confirmed="no">java.lang.Class</outbound>
                <outbound type="class" confirmed="no">java.lang.Throwable</outbound>
                <outbound type="feature" confirmed="yes">org.junit.experimental.categories.Categories$CategoryFilter.Categories$CategoryFilter(java.lang.Class, java.lang.Class)</outbound>
                <outbound type="feature" confirmed="yes">org.junit.experimental.categories.Categories.assertNoCategorizedDescendentsOfUncategorizeableParents(org.junit.runner.Description)</outbound>
                <outbound type="feature" confirmed="no">org.junit.experimental.categories.Categories.filter(org.junit.runner.manipulation.Filter)</outbound>
                <outbound type="feature" confirmed="no">org.junit.experimental.categories.Categories.getDescription()</outbound>
                <outbound type="feature" confirmed="yes">org.junit.experimental.categories.Categories.getExcludedCategory(java.lang.Class)</outbound>
                <outbound type="feature" confirmed="yes">org.junit.experimental.categories.Categories.getIncludedCategory(java.lang.Class)</outbound>
                <outbound type="class" confirmed="yes">org.junit.runner.Description</outbound>
                <outbound type="class" confirmed="yes">org.junit.runner.manipulation.Filter</outbound>
                <outbound type="class" confirmed="yes">org.junit.runner.manipulation.NoTestsRemainException</outbound>
                <outbound type="feature" confirmed="yes">org.junit.runners.Suite.Suite(java.lang.Class, org.junit.runners.model.RunnerBuilder)</outbound>
                <outbound type="class" confirmed="yes">org.junit.runners.model.InitializationError</outbound>
                <outbound type="feature" confirmed="yes">org.junit.runners.model.InitializationError.InitializationError(java.lang.Throwable)</outbound>
                <outbound type="class" confirmed="yes">org.junit.runners.model.RunnerBuilder</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.junit.experimental.categories.Categories.assertNoCategorizedDescendentsOfUncategorizeableParents(org.junit.runner.Description)</name>
                <outbound type="class" confirmed="no">java.lang.Object</outbound>
                <outbound type="class" confirmed="no">java.util.ArrayList</outbound>
                <outbound type="feature" confirmed="no">java.util.ArrayList.iterator()</outbound>
                <outbound type="class" confirmed="no">java.util.Iterator</outbound>
                <outbound type="feature" confirmed="no">java.util.Iterator.hasNext()</outbound>
                <outbound type="feature" confirmed="no">java.util.Iterator.next()</outbound>
                <outbound type="feature" confirmed="yes">org.junit.experimental.categories.Categories.assertNoDescendantsHaveCategoryAnnotations(org.junit.runner.Description)</outbound>
                <outbound type="feature" confirmed="yes">org.junit.experimental.categories.Categories.canHaveCategorizedChildren(org.junit.runner.Description)</outbound>
                <outbound type="class" confirmed="yes">org.junit.runner.Description</outbound>
                <outbound type="feature" confirmed="yes">org.junit.runner.Description.getChildren()</outbound>
                <outbound type="class" confirmed="yes">org.junit.runners.model.InitializationError</outbound>
                <inbound type="feature" confirmed="yes">org.junit.experimental.categories.Categories.Categories(java.lang.Class, org.junit.runners.model.RunnerBuilder)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.junit.experimental.categories.Categories.assertNoDescendantsHaveCategoryAnnotations(org.junit.runner.Description)</name>
                <outbound type="class" confirmed="no">java.lang.Class</outbound>
                <outbound type="class" confirmed="no">java.lang.Object</outbound>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="class" confirmed="no">java.lang.annotation.Annotation</outbound>
                <outbound type="class" confirmed="no">java.util.ArrayList</outbound>
                <outbound type="feature" confirmed="no">java.util.ArrayList.iterator()</outbound>
                <outbound type="class" confirmed="no">java.util.Iterator</outbound>
                <outbound type="feature" confirmed="no">java.util.Iterator.hasNext()</outbound>
                <outbound type="feature" confirmed="no">java.util.Iterator.next()</outbound>
                <outbound type="class" confirmed="yes">org.junit.experimental.categories.Category</outbound>
                <outbound type="class" confirmed="yes">org.junit.runner.Description</outbound>
                <outbound type="feature" confirmed="yes">org.junit.runner.Description.getAnnotation(java.lang.Class)</outbound>
                <outbound type="feature" confirmed="yes">org.junit.runner.Description.getChildren()</outbound>
                <outbound type="class" confirmed="yes">org.junit.runners.model.InitializationError</outbound>
                <outbound type="feature" confirmed="yes">org.junit.runners.model.InitializationError.InitializationError(java.lang.String)</outbound>
                <inbound type="feature" confirmed="yes">org.junit.experimental.categories.Categories.assertNoCategorizedDescendentsOfUncategorizeableParents(org.junit.runner.Description)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.junit.experimental.categories.Categories.canHaveCategorizedChildren(org.junit.runner.Description)</name>
                <outbound type="class" confirmed="no">java.lang.Class</outbound>
                <outbound type="class" confirmed="no">java.lang.Object</outbound>
                <outbound type="class" confirmed="no">java.util.ArrayList</outbound>
                <outbound type="feature" confirmed="no">java.util.ArrayList.iterator()</outbound>
                <outbound type="class" confirmed="no">java.util.Iterator</outbound>
                <outbound type="feature" confirmed="no">java.util.Iterator.hasNext()</outbound>
                <outbound type="feature" confirmed="no">java.util.Iterator.next()</outbound>
                <outbound type="class" confirmed="yes">org.junit.runner.Description</outbound>
                <outbound type="feature" confirmed="yes">org.junit.runner.Description.getChildren()</outbound>
                <outbound type="feature" confirmed="yes">org.junit.runner.Description.getTestClass()</outbound>
                <inbound type="feature" confirmed="yes">org.junit.experimental.categories.Categories.assertNoCategorizedDescendentsOfUncategorizeableParents(org.junit.runner.Description)</inbound>
            </feature>
            <feature confirmed="no">
                <name>org.junit.experimental.categories.Categories.filter(org.junit.runner.manipulation.Filter)</name>
                <inbound type="feature" confirmed="yes">org.junit.experimental.categories.Categories.Categories(java.lang.Class, org.junit.runners.model.RunnerBuilder)</inbound>
            </feature>
            <feature confirmed="no">
                <name>org.junit.experimental.categories.Categories.getDescription()</name>
                <inbound type="feature" confirmed="yes">org.junit.experimental.categories.Categories.Categories(java.lang.Class, org.junit.runners.model.RunnerBuilder)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.junit.experimental.categories.Categories.getExcludedCategory(java.lang.Class)</name>
                <outbound type="class" confirmed="no">java.lang.Class</outbound>
                <outbound type="feature" confirmed="no">java.lang.Class.getAnnotation(java.lang.Class)</outbound>
                <outbound type="class" confirmed="no">java.lang.annotation.Annotation</outbound>
                <outbound type="class" confirmed="yes">org.junit.experimental.categories.Categories$ExcludeCategory</outbound>
                <outbound type="feature" confirmed="yes">org.junit.experimental.categories.Categories$ExcludeCategory.value()</outbound>
                <inbound type="feature" confirmed="yes">org.junit.experimental.categories.Categories.Categories(java.lang.Class, org.junit.runners.model.RunnerBuilder)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.junit.experimental.categories.Categories.getIncludedCategory(java.lang.Class)</name>
                <outbound type="class" confirmed="no">java.lang.Class</outbound>
                <outbound type="feature" confirmed="no">java.lang.Class.getAnnotation(java.lang.Class)</outbound>
                <outbound type="class" confirmed="no">java.lang.annotation.Annotation</outbound>
                <outbound type="class" confirmed="yes">org.junit.experimental.categories.Categories$IncludeCategory</outbound>
                <outbound type="feature" confirmed="yes">org.junit.experimental.categories.Categories$IncludeCategory.value()</outbound>
                <inbound type="feature" confirmed="yes">org.junit.experimental.categories.Categories.Categories(java.lang.Class, org.junit.runners.model.RunnerBuilder)</inbound>
            </feature>
        </class>
        <class confirmed="yes">
            <name>org.junit.experimental.categories.Categories$CategoryFilter</name>
            <outbound type="class" confirmed="yes">org.junit.runner.manipulation.Filter</outbound>
            <feature confirmed="yes">
                <name>org.junit.experimental.categories.Categories$CategoryFilter.Categories$CategoryFilter(java.lang.Class, java.lang.Class)</name>
                <outbound type="class" confirmed="no">java.lang.Class</outbound>
                <outbound type="feature" confirmed="yes">org.junit.experimental.categories.Categories$CategoryFilter.fExcluded</outbound>
                <outbound type="feature" confirmed="yes">org.junit.experimental.categories.Categories$CategoryFilter.fIncluded</outbound>
                <outbound type="feature" confirmed="yes">org.junit.runner.manipulation.Filter.Filter()</outbound>
                <inbound type="feature" confirmed="yes">org.junit.experimental.categories.Categories$CategoryFilter.include(java.lang.Class)</inbound>
                <inbound type="feature" confirmed="yes">org.junit.experimental.categories.Categories.Categories(java.lang.Class, org.junit.runners.model.RunnerBuilder)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.junit.experimental.categories.Categories$CategoryFilter.categories(org.junit.runner.Description)</name>
                <outbound type="class" confirmed="no">java.lang.Class</outbound>
                <outbound type="class" confirmed="no">java.lang.Object</outbound>
                <outbound type="feature" confirmed="no">java.util.ArrayList.ArrayList()</outbound>
                <outbound type="feature" confirmed="no">java.util.ArrayList.addAll(java.util.Collection)</outbound>
                <outbound type="feature" confirmed="no">java.util.Arrays.asList(java.lang.Object[])</outbound>
                <outbound type="class" confirmed="no">java.util.Collection</outbound>
                <outbound type="class" confirmed="no">java.util.List</outbound>
                <outbound type="feature" confirmed="yes">org.junit.experimental.categories.Categories$CategoryFilter.directCategories(org.junit.runner.Description)</outbound>
                <outbound type="feature" confirmed="yes">org.junit.experimental.categories.Categories$CategoryFilter.parentDescription(org.junit.runner.Description)</outbound>
                <outbound type="class" confirmed="yes">org.junit.runner.Description</outbound>
                <inbound type="feature" confirmed="yes">org.junit.experimental.categories.Categories$CategoryFilter.hasCorrectCategoryAnnotation(org.junit.runner.Description)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.junit.experimental.categories.Categories$CategoryFilter.describe()</name>
                <outbound type="class" confirmed="no">java.lang.Class</outbound>
                <outbound type="class" confirmed="no">java.lang.Object</outbound>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="class" confirmed="no">java.lang.StringBuilder</outbound>
                <outbound type="feature" confirmed="no">java.lang.StringBuilder.StringBuilder()</outbound>
                <outbound type="feature" confirmed="no">java.lang.StringBuilder.append(java.lang.Object)</outbound>
                <outbound type="feature" confirmed="no">java.lang.StringBuilder.append(java.lang.String)</outbound>
                <outbound type="feature" confirmed="no">java.lang.StringBuilder.toString()</outbound>
                <outbound type="feature" confirmed="yes">org.junit.experimental.categories.Categories$CategoryFilter.fIncluded</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.junit.experimental.categories.Categories$CategoryFilter.directCategories(org.junit.runner.Description)</name>
                <outbound type="class" confirmed="no">java.lang.Class</outbound>
                <outbound type="class" confirmed="no">java.lang.annotation.Annotation</outbound>
                <outbound type="class" confirmed="yes">org.junit.experimental.categories.Category</outbound>
                <outbound type="feature" confirmed="yes">org.junit.experimental.categories.Category.value()</outbound>
                <outbound type="class" confirmed="yes">org.junit.runner.Description</outbound>
                <outbound type="feature" confirmed="yes">org.junit.runner.Description.getAnnotation(java.lang.Class)</outbound>
                <inbound type="feature" confirmed="yes">org.junit.experimental.categories.Categories$CategoryFilter.categories(org.junit.runner.Description)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.junit.experimental.categories.Categories$CategoryFilter.fExcluded</name>
                <outbound type="class" confirmed="no">java.lang.Class</outbound>
                <inbound type="feature" confirmed="yes">org.junit.experimental.categories.Categories$CategoryFilter.Categories$CategoryFilter(java.lang.Class, java.lang.Class)</inbound>
                <inbound type="feature" confirmed="yes">org.junit.experimental.categories.Categories$CategoryFilter.hasCorrectCategoryAnnotation(org.junit.runner.Description)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.junit.experimental.categories.Categories$CategoryFilter.fIncluded</name>
                <outbound type="class" confirmed="no">java.lang.Class</outbound>
                <inbound type="feature" confirmed="yes">org.junit.experimental.categories.Categories$CategoryFilter.Categories$CategoryFilter(java.lang.Class, java.lang.Class)</inbound>
                <inbound type="feature" confirmed="yes">org.junit.experimental.categories.Categories$CategoryFilter.describe()</inbound>
                <inbound type="feature" confirmed="yes">org.junit.experimental.categories.Categories$CategoryFilter.hasCorrectCategoryAnnotation(org.junit.runner.Description)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.junit.experimental.categories.Categories$CategoryFilter.hasCorrectCategoryAnnotation(org.junit.runner.Description)</name>
                <outbound type="class" confirmed="no">java.lang.Class</outbound>
                <outbound type="feature" confirmed="no">java.lang.Class.isAssignableFrom(java.lang.Class)</outbound>
                <outbound type="class" confirmed="no">java.lang.Object</outbound>
                <outbound type="class" confirmed="no">java.util.Iterator</outbound>
                <outbound type="feature" confirmed="no">java.util.Iterator.hasNext()</outbound>
                <outbound type="feature" confirmed="no">java.util.Iterator.next()</outbound>
                <outbound type="class" confirmed="no">java.util.List</outbound>
                <outbound type="feature" confirmed="no">java.util.List.isEmpty()</outbound>
                <outbound type="feature" confirmed="no">java.util.List.iterator()</outbound>
                <outbound type="feature" confirmed="yes">org.junit.experimental.categories.Categories$CategoryFilter.categories(org.junit.runner.Description)</outbound>
                <outbound type="feature" confirmed="yes">org.junit.experimental.categories.Categories$CategoryFilter.fExcluded</outbound>
                <outbound type="feature" confirmed="yes">org.junit.experimental.categories.Categories$CategoryFilter.fIncluded</outbound>
                <outbound type="class" confirmed="yes">org.junit.runner.Description</outbound>
                <inbound type="feature" confirmed="yes">org.junit.experimental.categories.Categories$CategoryFilter.shouldRun(org.junit.runner.Description)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.junit.experimental.categories.Categories$CategoryFilter.include(java.lang.Class)</name>
                <outbound type="class" confirmed="no">java.lang.Class</outbound>
                <outbound type="feature" confirmed="yes">org.junit.experimental.categories.Categories$CategoryFilter.Categories$CategoryFilter(java.lang.Class, java.lang.Class)</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.junit.experimental.categories.Categories$CategoryFilter.parentDescription(org.junit.runner.Description)</name>
                <outbound type="class" confirmed="no">java.lang.Class</outbound>
                <outbound type="class" confirmed="yes">org.junit.runner.Description</outbound>
                <outbound type="feature" confirmed="yes">org.junit.runner.Description.createSuiteDescription(java.lang.Class)</outbound>
                <outbound type="feature" confirmed="yes">org.junit.runner.Description.getTestClass()</outbound>
                <inbound type="feature" confirmed="yes">org.junit.experimental.categories.Categories$CategoryFilter.categories(org.junit.runner.Description)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.junit.experimental.categories.Categories$CategoryFilter.shouldRun(org.junit.runner.Description)</name>
                <outbound type="class" confirmed="no">java.lang.Object</outbound>
                <outbound type="class" confirmed="no">java.util.ArrayList</outbound>
                <outbound type="feature" confirmed="no">java.util.ArrayList.iterator()</outbound>
                <outbound type="class" confirmed="no">java.util.Iterator</outbound>
                <outbound type="feature" confirmed="no">java.util.Iterator.hasNext()</outbound>
                <outbound type="feature" confirmed="no">java.util.Iterator.next()</outbound>
                <outbound type="feature" confirmed="yes">org.junit.experimental.categories.Categories$CategoryFilter.hasCorrectCategoryAnnotation(org.junit.runner.Description)</outbound>
                <outbound type="class" confirmed="yes">org.junit.runner.Description</outbound>
                <outbound type="feature" confirmed="yes">org.junit.runner.Description.getChildren()</outbound>
            </feature>
        </class>
        <class confirmed="yes">
            <name>org.junit.experimental.categories.Categories$ExcludeCategory</name>
            <outbound type="class" confirmed="no">java.lang.Object</outbound>
            <outbound type="class" confirmed="no">java.lang.annotation.Annotation</outbound>
            <inbound type="feature" confirmed="yes">org.junit.experimental.categories.Categories.getExcludedCategory(java.lang.Class)</inbound>
            <feature confirmed="yes">
                <name>org.junit.experimental.categories.Categories$ExcludeCategory.value()</name>
                <outbound type="class" confirmed="no">java.lang.Class</outbound>
                <inbound type="feature" confirmed="yes">org.junit.experimental.categories.Categories.getExcludedCategory(java.lang.Class)</inbound>
            </feature>
        </class>
        <class confirmed="yes">
            <name>org.junit.experimental.categories.Categories$IncludeCategory</name>
            <outbound type="class" confirmed="no">java.lang.Object</outbound>
            <outbound type="class" confirmed="no">java.lang.annotation.Annotation</outbound>
            <inbound type="feature" confirmed="yes">org.junit.experimental.categories.Categories.getIncludedCategory(java.lang.Class)</inbound>
            <feature confirmed="yes">
                <name>org.junit.experimental.categories.Categories$IncludeCategory.value()</name>
                <outbound type="class" confirmed="no">java.lang.Class</outbound>
                <inbound type="feature" confirmed="yes">org.junit.experimental.categories.Categories.getIncludedCategory(java.lang.Class)</inbound>
            </feature>
        </class>
        <class confirmed="yes">
            <name>org.junit.experimental.categories.Category</name>
            <outbound type="class" confirmed="no">java.lang.Object</outbound>
            <outbound type="class" confirmed="no">java.lang.annotation.Annotation</outbound>
            <inbound type="feature" confirmed="yes">org.junit.experimental.categories.Categories$CategoryFilter.directCategories(org.junit.runner.Description)</inbound>
            <inbound type="feature" confirmed="yes">org.junit.experimental.categories.Categories.assertNoDescendantsHaveCategoryAnnotations(org.junit.runner.Description)</inbound>
            <feature confirmed="yes">
                <name>org.junit.experimental.categories.Category.value()</name>
                <outbound type="class" confirmed="no">java.lang.Class</outbound>
                <inbound type="feature" confirmed="yes">org.junit.experimental.categories.Categories$CategoryFilter.directCategories(org.junit.runner.Description)</inbound>
            </feature>
        </class>
    </package>
    <package confirmed="yes">
        <name>org.junit.experimental.max</name>
        <class confirmed="yes">
            <name>org.junit.experimental.max.CouldNotReadCoreException</name>
            <outbound type="class" confirmed="no">java.lang.Exception</outbound>
            <inbound type="feature" confirmed="yes">org.junit.experimental.max.MaxHistory.forFolder(java.io.File)</inbound>
            <inbound type="feature" confirmed="yes">org.junit.experimental.max.MaxHistory.readHistory(java.io.File)</inbound>
            <feature confirmed="yes">
                <name>org.junit.experimental.max.CouldNotReadCoreException.CouldNotReadCoreException(java.lang.Throwable)</name>
                <outbound type="feature" confirmed="no">java.lang.Exception.Exception(java.lang.Throwable)</outbound>
                <outbound type="class" confirmed="no">java.lang.Throwable</outbound>
                <inbound type="feature" confirmed="yes">org.junit.experimental.max.MaxHistory.readHistory(java.io.File)</inbound>
            </feature>
            <feature confirmed="no">
                <name>org.junit.experimental.max.CouldNotReadCoreException.printStackTrace()</name>
                <inbound type="feature" confirmed="yes">org.junit.experimental.max.MaxHistory.forFolder(java.io.File)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.junit.experimental.max.CouldNotReadCoreException.serialVersionUID</name>
            </feature>
        </class>
        <class confirmed="yes">
            <name>org.junit.experimental.max.MaxCore</name>
            <outbound type="class" confirmed="no">java.lang.Object</outbound>
            <inbound type="feature" confirmed="yes">org.junit.experimental.max.MaxCore$1.MaxCore$1(org.junit.experimental.max.MaxCore, java.util.List)</inbound>
            <inbound type="feature" confirmed="yes">org.junit.experimental.max.MaxCore$1.this$0</inbound>
            <feature confirmed="yes">
                <name>org.junit.experimental.max.MaxCore.MALFORMED_JUNIT_3_TEST_CLASS_PREFIX</name>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.junit.experimental.max.MaxCore.MaxCore(java.io.File)</name>
                <outbound type="class" confirmed="no">java.io.File</outbound>
                <outbound type="feature" confirmed="no">java.lang.Object.Object()</outbound>
                <outbound type="feature" confirmed="yes">org.junit.experimental.max.MaxCore.fHistory</outbound>
                <outbound type="class" confirmed="yes">org.junit.experimental.max.MaxHistory</outbound>
                <outbound type="feature" confirmed="yes">org.junit.experimental.max.MaxHistory.forFolder(java.io.File)</outbound>
                <inbound type="feature" confirmed="yes">org.junit.experimental.max.MaxCore.storedLocally(java.io.File)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.junit.experimental.max.MaxCore.buildRunner(org.junit.runner.Description)</name>
                <outbound type="class" confirmed="no">java.lang.Class</outbound>
                <outbound type="class" confirmed="no">java.lang.Object</outbound>
                <outbound type="feature" confirmed="no">java.lang.RuntimeException.RuntimeException(java.lang.String)</outbound>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="feature" confirmed="no">java.lang.String.equals(java.lang.Object)</outbound>
                <outbound type="feature" confirmed="no">java.lang.String.startsWith(java.lang.String)</outbound>
                <outbound type="class" confirmed="no">java.lang.StringBuilder</outbound>
                <outbound type="feature" confirmed="no">java.lang.StringBuilder.StringBuilder()</outbound>
                <outbound type="feature" confirmed="no">java.lang.StringBuilder.append(java.lang.Object)</outbound>
                <outbound type="feature" confirmed="no">java.lang.StringBuilder.append(java.lang.String)</outbound>
                <outbound type="feature" confirmed="no">java.lang.StringBuilder.toString()</outbound>
                <outbound type="class" confirmed="yes">junit.framework.Test</outbound>
                <outbound type="feature" confirmed="yes">junit.framework.TestSuite.TestSuite(java.lang.Class)</outbound>
                <outbound type="feature" confirmed="yes">org.junit.experimental.max.MaxCore.getMalformedTestClass(org.junit.runner.Description)</outbound>
                <outbound type="feature" confirmed="yes">org.junit.internal.runners.JUnit38ClassRunner.JUnit38ClassRunner(junit.framework.Test)</outbound>
                <outbound type="class" confirmed="yes">org.junit.runner.Description</outbound>
                <outbound type="feature" confirmed="yes">org.junit.runner.Description.getMethodName()</outbound>
                <outbound type="feature" confirmed="yes">org.junit.runner.Description.getTestClass()</outbound>
                <outbound type="feature" confirmed="yes">org.junit.runner.Description.toString()</outbound>
                <outbound type="class" confirmed="yes">org.junit.runner.Request</outbound>
                <outbound type="feature" confirmed="yes">org.junit.runner.Request.aClass(java.lang.Class)</outbound>
                <outbound type="feature" confirmed="yes">org.junit.runner.Request.getRunner()</outbound>
                <outbound type="feature" confirmed="yes">org.junit.runner.Request.method(java.lang.Class, java.lang.String)</outbound>
                <outbound type="class" confirmed="yes">org.junit.runner.Runner</outbound>
                <outbound type="feature" confirmed="yes">org.junit.runners.Suite.emptySuite()</outbound>
                <inbound type="feature" confirmed="yes">org.junit.experimental.max.MaxCore.constructLeafRequest(java.util.List)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.junit.experimental.max.MaxCore.constructLeafRequest(java.util.List)</name>
                <outbound type="class" confirmed="no">java.lang.Object</outbound>
                <outbound type="feature" confirmed="no">java.util.ArrayList.ArrayList()</outbound>
                <outbound type="class" confirmed="no">java.util.Iterator</outbound>
                <outbound type="feature" confirmed="no">java.util.Iterator.hasNext()</outbound>
                <outbound type="feature" confirmed="no">java.util.Iterator.next()</outbound>
                <outbound type="class" confirmed="no">java.util.List</outbound>
                <outbound type="feature" confirmed="no">java.util.List.add(java.lang.Object)</outbound>
                <outbound type="feature" confirmed="no">java.util.List.iterator()</outbound>
                <outbound type="feature" confirmed="yes">org.junit.experimental.max.MaxCore$1.MaxCore$1(org.junit.experimental.max.MaxCore, java.util.List)</outbound>
                <outbound type="feature" confirmed="yes">org.junit.experimental.max.MaxCore.buildRunner(org.junit.runner.Description)</outbound>
                <outbound type="class" confirmed="yes">org.junit.runner.Description</outbound>
                <outbound type="class" confirmed="yes">org.junit.runner.Request</outbound>
                <outbound type="class" confirmed="yes">org.junit.runner.Runner</outbound>
                <inbound type="feature" confirmed="yes">org.junit.experimental.max.MaxCore.sortRequest(org.junit.runner.Request)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.junit.experimental.max.MaxCore.fHistory</name>
                <outbound type="class" confirmed="yes">org.junit.experimental.max.MaxHistory</outbound>
                <inbound type="feature" confirmed="yes">org.junit.experimental.max.MaxCore.MaxCore(java.io.File)</inbound>
                <inbound type="feature" confirmed="yes">org.junit.experimental.max.MaxCore.run(org.junit.runner.Request, org.junit.runner.JUnitCore)</inbound>
                <inbound type="feature" confirmed="yes">org.junit.experimental.max.MaxCore.sortRequest(org.junit.runner.Request)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.junit.experimental.max.MaxCore.findLeaves(org.junit.runner.Description, org.junit.runner.Description, java.util.List)</name>
                <outbound type="class" confirmed="no">java.lang.Object</outbound>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="feature" confirmed="no">java.lang.String.equals(java.lang.Object)</outbound>
                <outbound type="class" confirmed="no">java.lang.StringBuilder</outbound>
                <outbound type="feature" confirmed="no">java.lang.StringBuilder.StringBuilder()</outbound>
                <outbound type="feature" confirmed="no">java.lang.StringBuilder.append(java.lang.Object)</outbound>
                <outbound type="feature" confirmed="no">java.lang.StringBuilder.append(java.lang.String)</outbound>
                <outbound type="feature" confirmed="no">java.lang.StringBuilder.toString()</outbound>
                <outbound type="class" confirmed="no">java.lang.annotation.Annotation</outbound>
                <outbound type="class" confirmed="no">java.util.ArrayList</outbound>
                <outbound type="feature" confirmed="no">java.util.ArrayList.isEmpty()</outbound>
                <outbound type="feature" confirmed="no">java.util.ArrayList.iterator()</outbound>
                <outbound type="class" confirmed="no">java.util.Iterator</outbound>
                <outbound type="feature" confirmed="no">java.util.Iterator.hasNext()</outbound>
                <outbound type="feature" confirmed="no">java.util.Iterator.next()</outbound>
                <outbound type="class" confirmed="no">java.util.List</outbound>
                <outbound type="feature" confirmed="no">java.util.List.add(java.lang.Object)</outbound>
                <outbound type="class" confirmed="yes">org.junit.runner.Description</outbound>
                <outbound type="feature" confirmed="yes">org.junit.runner.Description.createSuiteDescription(java.lang.String, java.lang.annotation.Annotation[])</outbound>
                <outbound type="feature" confirmed="yes">org.junit.runner.Description.getChildren()</outbound>
                <outbound type="feature" confirmed="yes">org.junit.runner.Description.toString()</outbound>
                <inbound type="feature" confirmed="yes">org.junit.experimental.max.MaxCore.findLeaves(org.junit.runner.Request)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.junit.experimental.max.MaxCore.findLeaves(org.junit.runner.Request)</name>
                <outbound type="feature" confirmed="no">java.util.ArrayList.ArrayList()</outbound>
                <outbound type="class" confirmed="no">java.util.List</outbound>
                <outbound type="feature" confirmed="yes">org.junit.experimental.max.MaxCore.findLeaves(org.junit.runner.Description, org.junit.runner.Description, java.util.List)</outbound>
                <outbound type="class" confirmed="yes">org.junit.runner.Description</outbound>
                <outbound type="class" confirmed="yes">org.junit.runner.Request</outbound>
                <outbound type="feature" confirmed="yes">org.junit.runner.Request.getRunner()</outbound>
                <outbound type="class" confirmed="yes">org.junit.runner.Runner</outbound>
                <outbound type="feature" confirmed="yes">org.junit.runner.Runner.getDescription()</outbound>
                <inbound type="feature" confirmed="yes">org.junit.experimental.max.MaxCore.sortRequest(org.junit.runner.Request)</inbound>
                <inbound type="feature" confirmed="yes">org.junit.experimental.max.MaxCore.sortedLeavesForTest(org.junit.runner.Request)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.junit.experimental.max.MaxCore.forFolder(java.lang.String)</name>
                <outbound type="class" confirmed="no">java.io.File</outbound>
                <outbound type="feature" confirmed="no">java.io.File.File(java.lang.String)</outbound>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="feature" confirmed="yes">org.junit.experimental.max.MaxCore.storedLocally(java.io.File)</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.junit.experimental.max.MaxCore.getMalformedTestClass(org.junit.runner.Description)</name>
                <outbound type="class" confirmed="no">java.lang.CharSequence</outbound>
                <outbound type="class" confirmed="no">java.lang.Class</outbound>
                <outbound type="feature" confirmed="no">java.lang.Class.forName(java.lang.String)</outbound>
                <outbound type="class" confirmed="no">java.lang.ClassNotFoundException</outbound>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="feature" confirmed="no">java.lang.String.replace(java.lang.CharSequence, java.lang.CharSequence)</outbound>
                <outbound type="class" confirmed="yes">org.junit.runner.Description</outbound>
                <outbound type="feature" confirmed="yes">org.junit.runner.Description.toString()</outbound>
                <inbound type="feature" confirmed="yes">org.junit.experimental.max.MaxCore.buildRunner(org.junit.runner.Description)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.junit.experimental.max.MaxCore.run(java.lang.Class)</name>
                <outbound type="class" confirmed="no">java.lang.Class</outbound>
                <outbound type="feature" confirmed="yes">org.junit.experimental.max.MaxCore.run(org.junit.runner.Request)</outbound>
                <outbound type="class" confirmed="yes">org.junit.runner.Request</outbound>
                <outbound type="feature" confirmed="yes">org.junit.runner.Request.aClass(java.lang.Class)</outbound>
                <outbound type="class" confirmed="yes">org.junit.runner.Result</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.junit.experimental.max.MaxCore.run(org.junit.runner.Request)</name>
                <outbound type="feature" confirmed="yes">org.junit.experimental.max.MaxCore.run(org.junit.runner.Request, org.junit.runner.JUnitCore)</outbound>
                <outbound type="class" confirmed="yes">org.junit.runner.JUnitCore</outbound>
                <outbound type="feature" confirmed="yes">org.junit.runner.JUnitCore.JUnitCore()</outbound>
                <outbound type="class" confirmed="yes">org.junit.runner.Request</outbound>
                <outbound type="class" confirmed="yes">org.junit.runner.Result</outbound>
                <inbound type="feature" confirmed="yes">org.junit.experimental.max.MaxCore.run(java.lang.Class)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.junit.experimental.max.MaxCore.run(org.junit.runner.Request, org.junit.runner.JUnitCore)</name>
                <outbound type="feature" confirmed="yes">org.junit.experimental.max.MaxCore.fHistory</outbound>
                <outbound type="feature" confirmed="yes">org.junit.experimental.max.MaxCore.sortRequest(org.junit.runner.Request)</outbound>
                <outbound type="class" confirmed="yes">org.junit.experimental.max.MaxHistory</outbound>
                <outbound type="feature" confirmed="yes">org.junit.experimental.max.MaxHistory.listener()</outbound>
                <outbound type="class" confirmed="yes">org.junit.runner.JUnitCore</outbound>
                <outbound type="feature" confirmed="yes">org.junit.runner.JUnitCore.addListener(org.junit.runner.notification.RunListener)</outbound>
                <outbound type="feature" confirmed="yes">org.junit.runner.JUnitCore.run(org.junit.runner.Runner)</outbound>
                <outbound type="class" confirmed="yes">org.junit.runner.Request</outbound>
                <outbound type="feature" confirmed="yes">org.junit.runner.Request.getRunner()</outbound>
                <outbound type="class" confirmed="yes">org.junit.runner.Result</outbound>
                <outbound type="class" confirmed="yes">org.junit.runner.Runner</outbound>
                <outbound type="class" confirmed="yes">org.junit.runner.notification.RunListener</outbound>
                <inbound type="feature" confirmed="yes">org.junit.experimental.max.MaxCore.run(org.junit.runner.Request)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.junit.experimental.max.MaxCore.sortRequest(org.junit.runner.Request)</name>
                <outbound type="feature" confirmed="no">java.util.Collections.sort(java.util.List, java.util.Comparator)</outbound>
                <outbound type="class" confirmed="no">java.util.Comparator</outbound>
                <outbound type="class" confirmed="no">java.util.List</outbound>
                <outbound type="feature" confirmed="yes">org.junit.experimental.max.MaxCore.constructLeafRequest(java.util.List)</outbound>
                <outbound type="feature" confirmed="yes">org.junit.experimental.max.MaxCore.fHistory</outbound>
                <outbound type="feature" confirmed="yes">org.junit.experimental.max.MaxCore.findLeaves(org.junit.runner.Request)</outbound>
                <outbound type="class" confirmed="yes">org.junit.experimental.max.MaxHistory</outbound>
                <outbound type="feature" confirmed="yes">org.junit.experimental.max.MaxHistory.testComparator()</outbound>
                <outbound type="class" confirmed="yes">org.junit.internal.requests.SortingRequest</outbound>
                <outbound type="class" confirmed="yes">org.junit.runner.Request</outbound>
                <inbound type="feature" confirmed="yes">org.junit.experimental.max.MaxCore.run(org.junit.runner.Request, org.junit.runner.JUnitCore)</inbound>
                <inbound type="feature" confirmed="yes">org.junit.experimental.max.MaxCore.sortedLeavesForTest(org.junit.runner.Request)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.junit.experimental.max.MaxCore.sortedLeavesForTest(org.junit.runner.Request)</name>
                <outbound type="class" confirmed="no">java.util.List</outbound>
                <outbound type="feature" confirmed="yes">org.junit.experimental.max.MaxCore.findLeaves(org.junit.runner.Request)</outbound>
                <outbound type="feature" confirmed="yes">org.junit.experimental.max.MaxCore.sortRequest(org.junit.runner.Request)</outbound>
                <outbound type="class" confirmed="yes">org.junit.runner.Request</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.junit.experimental.max.MaxCore.storedLocally(java.io.File)</name>
                <outbound type="class" confirmed="no">java.io.File</outbound>
                <outbound type="feature" confirmed="yes">org.junit.experimental.max.MaxCore.MaxCore(java.io.File)</outbound>
                <inbound type="feature" confirmed="yes">org.junit.experimental.max.MaxCore.forFolder(java.lang.String)</inbound>
            </feature>
        </class>
        <class confirmed="yes">
            <name>org.junit.experimental.max.MaxCore$1</name>
            <outbound type="class" confirmed="yes">org.junit.runner.Request</outbound>
            <inbound type="feature" confirmed="yes">org.junit.experimental.max.MaxCore$1$1.MaxCore$1$1(org.junit.experimental.max.MaxCore$1, java.lang.Class, java.util.List)</inbound>
            <inbound type="feature" confirmed="yes">org.junit.experimental.max.MaxCore$1$1.this$1</inbound>
            <feature confirmed="yes">
                <name>org.junit.experimental.max.MaxCore$1.MaxCore$1(org.junit.experimental.max.MaxCore, java.util.List)</name>
                <outbound type="class" confirmed="no">java.util.List</outbound>
                <outbound type="class" confirmed="yes">org.junit.experimental.max.MaxCore</outbound>
                <outbound type="feature" confirmed="yes">org.junit.experimental.max.MaxCore$1.this$0</outbound>
                <outbound type="feature" confirmed="yes">org.junit.experimental.max.MaxCore$1.val$runners</outbound>
                <outbound type="feature" confirmed="yes">org.junit.runner.Request.Request()</outbound>
                <inbound type="feature" confirmed="yes">org.junit.experimental.max.MaxCore.constructLeafRequest(java.util.List)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.junit.experimental.max.MaxCore$1.getRunner()</name>
                <outbound type="class" confirmed="no">java.lang.Class</outbound>
                <outbound type="class" confirmed="no">java.lang.Throwable</outbound>
                <outbound type="class" confirmed="no">java.util.List</outbound>
                <outbound type="feature" confirmed="yes">org.junit.experimental.max.MaxCore$1$1.MaxCore$1$1(org.junit.experimental.max.MaxCore$1, java.lang.Class, java.util.List)</outbound>
                <outbound type="feature" confirmed="yes">org.junit.experimental.max.MaxCore$1.val$runners</outbound>
                <outbound type="feature" confirmed="yes">org.junit.internal.runners.ErrorReportingRunner.ErrorReportingRunner(java.lang.Class, java.lang.Throwable)</outbound>
                <outbound type="class" confirmed="yes">org.junit.runner.Runner</outbound>
                <outbound type="class" confirmed="yes">org.junit.runners.model.InitializationError</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.junit.experimental.max.MaxCore$1.this$0</name>
                <outbound type="class" confirmed="yes">org.junit.experimental.max.MaxCore</outbound>
                <inbound type="feature" confirmed="yes">org.junit.experimental.max.MaxCore$1.MaxCore$1(org.junit.experimental.max.MaxCore, java.util.List)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.junit.experimental.max.MaxCore$1.val$runners</name>
                <outbound type="class" confirmed="no">java.util.List</outbound>
                <inbound type="feature" confirmed="yes">org.junit.experimental.max.MaxCore$1.MaxCore$1(org.junit.experimental.max.MaxCore, java.util.List)</inbound>
                <inbound type="feature" confirmed="yes">org.junit.experimental.max.MaxCore$1.getRunner()</inbound>
            </feature>
        </class>
        <class confirmed="yes">
            <name>org.junit.experimental.max.MaxCore$1$1</name>
            <outbound type="class" confirmed="yes">org.junit.runners.Suite</outbound>
            <feature confirmed="yes">
                <name>org.junit.experimental.max.MaxCore$1$1.MaxCore$1$1(org.junit.experimental.max.MaxCore$1, java.lang.Class, java.util.List)</name>
                <outbound type="class" confirmed="no">java.lang.Class</outbound>
                <outbound type="class" confirmed="no">java.util.List</outbound>
                <outbound type="class" confirmed="yes">org.junit.experimental.max.MaxCore$1</outbound>
                <outbound type="feature" confirmed="yes">org.junit.experimental.max.MaxCore$1$1.this$1</outbound>
                <outbound type="feature" confirmed="yes">org.junit.runners.Suite.Suite(java.lang.Class, java.util.List)</outbound>
                <inbound type="feature" confirmed="yes">org.junit.experimental.max.MaxCore$1.getRunner()</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.junit.experimental.max.MaxCore$1$1.this$1</name>
                <outbound type="class" confirmed="yes">org.junit.experimental.max.MaxCore$1</outbound>
                <inbound type="feature" confirmed="yes">org.junit.experimental.max.MaxCore$1$1.MaxCore$1$1(org.junit.experimental.max.MaxCore$1, java.lang.Class, java.util.List)</inbound>
            </feature>
        </class>
        <class confirmed="yes">
            <name>org.junit.experimental.max.MaxHistory</name>
            <outbound type="class" confirmed="no">java.io.Serializable</outbound>
            <outbound type="class" confirmed="no">java.lang.Object</outbound>
            <inbound type="feature" confirmed="yes">org.junit.experimental.max.MaxCore.MaxCore(java.io.File)</inbound>
            <inbound type="feature" confirmed="yes">org.junit.experimental.max.MaxCore.fHistory</inbound>
            <inbound type="feature" confirmed="yes">org.junit.experimental.max.MaxCore.run(org.junit.runner.Request, org.junit.runner.JUnitCore)</inbound>
            <inbound type="feature" confirmed="yes">org.junit.experimental.max.MaxCore.sortRequest(org.junit.runner.Request)</inbound>
            <inbound type="feature" confirmed="yes">org.junit.experimental.max.MaxHistory$RememberingListener.MaxHistory$RememberingListener(org.junit.experimental.max.MaxHistory)</inbound>
            <inbound type="feature" confirmed="yes">org.junit.experimental.max.MaxHistory$RememberingListener.MaxHistory$RememberingListener(org.junit.experimental.max.MaxHistory, org.junit.experimental.max.MaxHistory$1)</inbound>
            <inbound type="feature" confirmed="yes">org.junit.experimental.max.MaxHistory$RememberingListener.testFailure(org.junit.runner.notification.Failure)</inbound>
            <inbound type="feature" confirmed="yes">org.junit.experimental.max.MaxHistory$RememberingListener.testFinished(org.junit.runner.Description)</inbound>
            <inbound type="feature" confirmed="yes">org.junit.experimental.max.MaxHistory$RememberingListener.testRunFinished(org.junit.runner.Result)</inbound>
            <inbound type="feature" confirmed="yes">org.junit.experimental.max.MaxHistory$RememberingListener.this$0</inbound>
            <inbound type="feature" confirmed="yes">org.junit.experimental.max.MaxHistory$TestComparator.MaxHistory$TestComparator(org.junit.experimental.max.MaxHistory)</inbound>
            <inbound type="feature" confirmed="yes">org.junit.experimental.max.MaxHistory$TestComparator.MaxHistory$TestComparator(org.junit.experimental.max.MaxHistory, org.junit.experimental.max.MaxHistory$1)</inbound>
            <inbound type="feature" confirmed="yes">org.junit.experimental.max.MaxHistory$TestComparator.compare(org.junit.runner.Description, org.junit.runner.Description)</inbound>
            <inbound type="feature" confirmed="yes">org.junit.experimental.max.MaxHistory$TestComparator.getFailure(org.junit.runner.Description)</inbound>
            <inbound type="feature" confirmed="yes">org.junit.experimental.max.MaxHistory$TestComparator.this$0</inbound>
            <feature confirmed="yes">
                <name>org.junit.experimental.max.MaxHistory.MaxHistory(java.io.File)</name>
                <outbound type="class" confirmed="no">java.io.File</outbound>
                <outbound type="feature" confirmed="no">java.lang.Object.Object()</outbound>
                <outbound type="feature" confirmed="no">java.util.HashMap.HashMap()</outbound>
                <outbound type="class" confirmed="no">java.util.Map</outbound>
                <outbound type="feature" confirmed="yes">org.junit.experimental.max.MaxHistory.fDurations</outbound>
                <outbound type="feature" confirmed="yes">org.junit.experimental.max.MaxHistory.fFailureTimestamps</outbound>
                <outbound type="feature" confirmed="yes">org.junit.experimental.max.MaxHistory.fHistoryStore</outbound>
                <inbound type="feature" confirmed="yes">org.junit.experimental.max.MaxHistory.forFolder(java.io.File)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.junit.experimental.max.MaxHistory.access$000(org.junit.experimental.max.MaxHistory)</name>
                <outbound type="class" confirmed="no">java.io.IOException</outbound>
                <outbound type="feature" confirmed="yes">org.junit.experimental.max.MaxHistory.save()</outbound>
                <inbound type="feature" confirmed="yes">org.junit.experimental.max.MaxHistory$RememberingListener.testRunFinished(org.junit.runner.Result)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.junit.experimental.max.MaxHistory.fDurations</name>
                <outbound type="class" confirmed="no">java.util.Map</outbound>
                <inbound type="feature" confirmed="yes">org.junit.experimental.max.MaxHistory.MaxHistory(java.io.File)</inbound>
                <inbound type="feature" confirmed="yes">org.junit.experimental.max.MaxHistory.getTestDuration(org.junit.runner.Description)</inbound>
                <inbound type="feature" confirmed="yes">org.junit.experimental.max.MaxHistory.isNewTest(org.junit.runner.Description)</inbound>
                <inbound type="feature" confirmed="yes">org.junit.experimental.max.MaxHistory.putTestDuration(org.junit.runner.Description, long)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.junit.experimental.max.MaxHistory.fFailureTimestamps</name>
                <outbound type="class" confirmed="no">java.util.Map</outbound>
                <inbound type="feature" confirmed="yes">org.junit.experimental.max.MaxHistory.MaxHistory(java.io.File)</inbound>
                <inbound type="feature" confirmed="yes">org.junit.experimental.max.MaxHistory.getFailureTimestamp(org.junit.runner.Description)</inbound>
                <inbound type="feature" confirmed="yes">org.junit.experimental.max.MaxHistory.putTestFailureTimestamp(org.junit.runner.Description, long)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.junit.experimental.max.MaxHistory.fHistoryStore</name>
                <outbound type="class" confirmed="no">java.io.File</outbound>
                <inbound type="feature" confirmed="yes">org.junit.experimental.max.MaxHistory.MaxHistory(java.io.File)</inbound>
                <inbound type="feature" confirmed="yes">org.junit.experimental.max.MaxHistory.save()</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.junit.experimental.max.MaxHistory.forFolder(java.io.File)</name>
                <outbound type="class" confirmed="no">java.io.File</outbound>
                <outbound type="feature" confirmed="no">java.io.File.delete()</outbound>
                <outbound type="feature" confirmed="no">java.io.File.exists()</outbound>
                <outbound type="class" confirmed="yes">org.junit.experimental.max.CouldNotReadCoreException</outbound>
                <outbound type="feature" confirmed="no">org.junit.experimental.max.CouldNotReadCoreException.printStackTrace()</outbound>
                <outbound type="feature" confirmed="yes">org.junit.experimental.max.MaxHistory.MaxHistory(java.io.File)</outbound>
                <outbound type="feature" confirmed="yes">org.junit.experimental.max.MaxHistory.readHistory(java.io.File)</outbound>
                <inbound type="feature" confirmed="yes">org.junit.experimental.max.MaxCore.MaxCore(java.io.File)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.junit.experimental.max.MaxHistory.getFailureTimestamp(org.junit.runner.Description)</name>
                <outbound type="class" confirmed="no">java.lang.Long</outbound>
                <outbound type="class" confirmed="no">java.lang.Object</outbound>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="class" confirmed="no">java.util.Map</outbound>
                <outbound type="feature" confirmed="no">java.util.Map.get(java.lang.Object)</outbound>
                <outbound type="feature" confirmed="yes">org.junit.experimental.max.MaxHistory.fFailureTimestamps</outbound>
                <outbound type="class" confirmed="yes">org.junit.runner.Description</outbound>
                <outbound type="feature" confirmed="yes">org.junit.runner.Description.toString()</outbound>
                <inbound type="feature" confirmed="yes">org.junit.experimental.max.MaxHistory$TestComparator.getFailure(org.junit.runner.Description)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.junit.experimental.max.MaxHistory.getTestDuration(org.junit.runner.Description)</name>
                <outbound type="class" confirmed="no">java.lang.Long</outbound>
                <outbound type="class" confirmed="no">java.lang.Object</outbound>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="class" confirmed="no">java.util.Map</outbound>
                <outbound type="feature" confirmed="no">java.util.Map.get(java.lang.Object)</outbound>
                <outbound type="feature" confirmed="yes">org.junit.experimental.max.MaxHistory.fDurations</outbound>
                <outbound type="class" confirmed="yes">org.junit.runner.Description</outbound>
                <outbound type="feature" confirmed="yes">org.junit.runner.Description.toString()</outbound>
                <inbound type="feature" confirmed="yes">org.junit.experimental.max.MaxHistory$TestComparator.compare(org.junit.runner.Description, org.junit.runner.Description)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.junit.experimental.max.MaxHistory.isNewTest(org.junit.runner.Description)</name>
                <outbound type="class" confirmed="no">java.lang.Object</outbound>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="class" confirmed="no">java.util.Map</outbound>
                <outbound type="feature" confirmed="no">java.util.Map.containsKey(java.lang.Object)</outbound>
                <outbound type="feature" confirmed="yes">org.junit.experimental.max.MaxHistory.fDurations</outbound>
                <outbound type="class" confirmed="yes">org.junit.runner.Description</outbound>
                <outbound type="feature" confirmed="yes">org.junit.runner.Description.toString()</outbound>
                <inbound type="feature" confirmed="yes">org.junit.experimental.max.MaxHistory$TestComparator.compare(org.junit.runner.Description, org.junit.runner.Description)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.junit.experimental.max.MaxHistory.listener()</name>
                <outbound type="class" confirmed="yes">org.junit.experimental.max.MaxHistory$1</outbound>
                <outbound type="feature" confirmed="yes">org.junit.experimental.max.MaxHistory$RememberingListener.MaxHistory$RememberingListener(org.junit.experimental.max.MaxHistory, org.junit.experimental.max.MaxHistory$1)</outbound>
                <outbound type="class" confirmed="yes">org.junit.runner.notification.RunListener</outbound>
                <inbound type="feature" confirmed="yes">org.junit.experimental.max.MaxCore.run(org.junit.runner.Request, org.junit.runner.JUnitCore)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.junit.experimental.max.MaxHistory.putTestDuration(org.junit.runner.Description, long)</name>
                <outbound type="class" confirmed="no">java.lang.Long</outbound>
                <outbound type="feature" confirmed="no">java.lang.Long.valueOf(long)</outbound>
                <outbound type="class" confirmed="no">java.lang.Object</outbound>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="class" confirmed="no">java.util.Map</outbound>
                <outbound type="feature" confirmed="no">java.util.Map.put(java.lang.Object, java.lang.Object)</outbound>
                <outbound type="feature" confirmed="yes">org.junit.experimental.max.MaxHistory.fDurations</outbound>
                <outbound type="class" confirmed="yes">org.junit.runner.Description</outbound>
                <outbound type="feature" confirmed="yes">org.junit.runner.Description.toString()</outbound>
                <inbound type="feature" confirmed="yes">org.junit.experimental.max.MaxHistory$RememberingListener.testFinished(org.junit.runner.Description)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.junit.experimental.max.MaxHistory.putTestFailureTimestamp(org.junit.runner.Description, long)</name>
                <outbound type="class" confirmed="no">java.lang.Long</outbound>
                <outbound type="feature" confirmed="no">java.lang.Long.valueOf(long)</outbound>
                <outbound type="class" confirmed="no">java.lang.Object</outbound>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="class" confirmed="no">java.util.Map</outbound>
                <outbound type="feature" confirmed="no">java.util.Map.put(java.lang.Object, java.lang.Object)</outbound>
                <outbound type="feature" confirmed="yes">org.junit.experimental.max.MaxHistory.fFailureTimestamps</outbound>
                <outbound type="class" confirmed="yes">org.junit.runner.Description</outbound>
                <outbound type="feature" confirmed="yes">org.junit.runner.Description.toString()</outbound>
                <inbound type="feature" confirmed="yes">org.junit.experimental.max.MaxHistory$RememberingListener.testFailure(org.junit.runner.notification.Failure)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.junit.experimental.max.MaxHistory.readHistory(java.io.File)</name>
                <outbound type="class" confirmed="no">java.io.File</outbound>
                <outbound type="feature" confirmed="no">java.io.FileInputStream.FileInputStream(java.io.File)</outbound>
                <outbound type="feature" confirmed="no">java.io.FileInputStream.close()</outbound>
                <outbound type="class" confirmed="no">java.io.InputStream</outbound>
                <outbound type="feature" confirmed="no">java.io.ObjectInputStream.ObjectInputStream(java.io.InputStream)</outbound>
                <outbound type="feature" confirmed="no">java.io.ObjectInputStream.close()</outbound>
                <outbound type="feature" confirmed="no">java.io.ObjectInputStream.readObject()</outbound>
                <outbound type="class" confirmed="no">java.lang.Exception</outbound>
                <outbound type="class" confirmed="no">java.lang.Object</outbound>
                <outbound type="class" confirmed="no">java.lang.Throwable</outbound>
                <outbound type="class" confirmed="yes">org.junit.experimental.max.CouldNotReadCoreException</outbound>
                <outbound type="feature" confirmed="yes">org.junit.experimental.max.CouldNotReadCoreException.CouldNotReadCoreException(java.lang.Throwable)</outbound>
                <inbound type="feature" confirmed="yes">org.junit.experimental.max.MaxHistory.forFolder(java.io.File)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.junit.experimental.max.MaxHistory.save()</name>
                <outbound type="class" confirmed="no">java.io.File</outbound>
                <outbound type="feature" confirmed="no">java.io.FileOutputStream.FileOutputStream(java.io.File)</outbound>
                <outbound type="class" confirmed="no">java.io.IOException</outbound>
                <outbound type="feature" confirmed="no">java.io.ObjectOutputStream.ObjectOutputStream(java.io.OutputStream)</outbound>
                <outbound type="feature" confirmed="no">java.io.ObjectOutputStream.close()</outbound>
                <outbound type="feature" confirmed="no">java.io.ObjectOutputStream.writeObject(java.lang.Object)</outbound>
                <outbound type="class" confirmed="no">java.io.OutputStream</outbound>
                <outbound type="class" confirmed="no">java.lang.Object</outbound>
                <outbound type="feature" confirmed="yes">org.junit.experimental.max.MaxHistory.fHistoryStore</outbound>
                <inbound type="feature" confirmed="yes">org.junit.experimental.max.MaxHistory.access$000(org.junit.experimental.max.MaxHistory)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.junit.experimental.max.MaxHistory.serialVersionUID</name>
            </feature>
            <feature confirmed="yes">
                <name>org.junit.experimental.max.MaxHistory.testComparator()</name>
                <outbound type="class" confirmed="no">java.util.Comparator</outbound>
                <outbound type="class" confirmed="yes">org.junit.experimental.max.MaxHistory$1</outbound>
                <outbound type="feature" confirmed="yes">org.junit.experimental.max.MaxHistory$TestComparator.MaxHistory$TestComparator(org.junit.experimental.max.MaxHistory, org.junit.experimental.max.MaxHistory$1)</outbound>
                <inbound type="feature" confirmed="yes">org.junit.experimental.max.MaxCore.sortRequest(org.junit.runner.Request)</inbound>
            </feature>
        </class>
        <class confirmed="yes">
            <name>org.junit.experimental.max.MaxHistory$1</name>
            <outbound type="class" confirmed="no">java.lang.Object</outbound>
            <inbound type="feature" confirmed="yes">org.junit.experimental.max.MaxHistory$RememberingListener.MaxHistory$RememberingListener(org.junit.experimental.max.MaxHistory, org.junit.experimental.max.MaxHistory$1)</inbound>
            <inbound type="feature" confirmed="yes">org.junit.experimental.max.MaxHistory$TestComparator.MaxHistory$TestComparator(org.junit.experimental.max.MaxHistory, org.junit.experimental.max.MaxHistory$1)</inbound>
            <inbound type="feature" confirmed="yes">org.junit.experimental.max.MaxHistory.listener()</inbound>
            <inbound type="feature" confirmed="yes">org.junit.experimental.max.MaxHistory.testComparator()</inbound>
        </class>
        <class confirmed="yes">
            <name>org.junit.experimental.max.MaxHistory$RememberingListener</name>
            <outbound type="class" confirmed="yes">org.junit.runner.notification.RunListener</outbound>
            <feature confirmed="yes">
                <name>org.junit.experimental.max.MaxHistory$RememberingListener.MaxHistory$RememberingListener(org.junit.experimental.max.MaxHistory)</name>
                <outbound type="feature" confirmed="no">java.lang.System.currentTimeMillis()</outbound>
                <outbound type="feature" confirmed="no">java.util.HashMap.HashMap()</outbound>
                <outbound type="class" confirmed="no">java.util.Map</outbound>
                <outbound type="class" confirmed="yes">org.junit.experimental.max.MaxHistory</outbound>
                <outbound type="feature" confirmed="yes">org.junit.experimental.max.MaxHistory$RememberingListener.overallStart</outbound>
                <outbound type="feature" confirmed="yes">org.junit.experimental.max.MaxHistory$RememberingListener.starts</outbound>
                <outbound type="feature" confirmed="yes">org.junit.experimental.max.MaxHistory$RememberingListener.this$0</outbound>
                <outbound type="feature" confirmed="yes">org.junit.runner.notification.RunListener.RunListener()</outbound>
                <inbound type="feature" confirmed="yes">org.junit.experimental.max.MaxHistory$RememberingListener.MaxHistory$RememberingListener(org.junit.experimental.max.MaxHistory, org.junit.experimental.max.MaxHistory$1)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.junit.experimental.max.MaxHistory$RememberingListener.MaxHistory$RememberingListener(org.junit.experimental.max.MaxHistory, org.junit.experimental.max.MaxHistory$1)</name>
                <outbound type="class" confirmed="yes">org.junit.experimental.max.MaxHistory</outbound>
                <outbound type="class" confirmed="yes">org.junit.experimental.max.MaxHistory$1</outbound>
                <outbound type="feature" confirmed="yes">org.junit.experimental.max.MaxHistory$RememberingListener.MaxHistory$RememberingListener(org.junit.experimental.max.MaxHistory)</outbound>
                <inbound type="feature" confirmed="yes">org.junit.experimental.max.MaxHistory.listener()</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.junit.experimental.max.MaxHistory$RememberingListener.overallStart</name>
                <inbound type="feature" confirmed="yes">org.junit.experimental.max.MaxHistory$RememberingListener.MaxHistory$RememberingListener(org.junit.experimental.max.MaxHistory)</inbound>
                <inbound type="feature" confirmed="yes">org.junit.experimental.max.MaxHistory$RememberingListener.testFailure(org.junit.runner.notification.Failure)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.junit.experimental.max.MaxHistory$RememberingListener.starts</name>
                <outbound type="class" confirmed="no">java.util.Map</outbound>
                <inbound type="feature" confirmed="yes">org.junit.experimental.max.MaxHistory$RememberingListener.MaxHistory$RememberingListener(org.junit.experimental.max.MaxHistory)</inbound>
                <inbound type="feature" confirmed="yes">org.junit.experimental.max.MaxHistory$RememberingListener.testFinished(org.junit.runner.Description)</inbound>
                <inbound type="feature" confirmed="yes">org.junit.experimental.max.MaxHistory$RememberingListener.testStarted(org.junit.runner.Description)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.junit.experimental.max.MaxHistory$RememberingListener.testFailure(org.junit.runner.notification.Failure)</name>
                <outbound type="class" confirmed="no">java.lang.Exception</outbound>
                <outbound type="class" confirmed="yes">org.junit.experimental.max.MaxHistory</outbound>
                <outbound type="feature" confirmed="yes">org.junit.experimental.max.MaxHistory$RememberingListener.overallStart</outbound>
                <outbound type="feature" confirmed="yes">org.junit.experimental.max.MaxHistory$RememberingListener.this$0</outbound>
                <outbound type="feature" confirmed="yes">org.junit.experimental.max.MaxHistory.putTestFailureTimestamp(org.junit.runner.Description, long)</outbound>
                <outbound type="class" confirmed="yes">org.junit.runner.Description</outbound>
                <outbound type="class" confirmed="yes">org.junit.runner.notification.Failure</outbound>
                <outbound type="feature" confirmed="yes">org.junit.runner.notification.Failure.getDescription()</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.junit.experimental.max.MaxHistory$RememberingListener.testFinished(org.junit.runner.Description)</name>
                <outbound type="class" confirmed="no">java.lang.Exception</outbound>
                <outbound type="class" confirmed="no">java.lang.Long</outbound>
                <outbound type="feature" confirmed="no">java.lang.Long.longValue()</outbound>
                <outbound type="class" confirmed="no">java.lang.Object</outbound>
                <outbound type="feature" confirmed="no">java.lang.System.nanoTime()</outbound>
                <outbound type="class" confirmed="no">java.util.Map</outbound>
                <outbound type="feature" confirmed="no">java.util.Map.get(java.lang.Object)</outbound>
                <outbound type="class" confirmed="yes">org.junit.experimental.max.MaxHistory</outbound>
                <outbound type="feature" confirmed="yes">org.junit.experimental.max.MaxHistory$RememberingListener.starts</outbound>
                <outbound type="feature" confirmed="yes">org.junit.experimental.max.MaxHistory$RememberingListener.this$0</outbound>
                <outbound type="feature" confirmed="yes">org.junit.experimental.max.MaxHistory.putTestDuration(org.junit.runner.Description, long)</outbound>
                <outbound type="class" confirmed="yes">org.junit.runner.Description</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.junit.experimental.max.MaxHistory$RememberingListener.testRunFinished(org.junit.runner.Result)</name>
                <outbound type="class" confirmed="no">java.lang.Exception</outbound>
                <outbound type="class" confirmed="yes">org.junit.experimental.max.MaxHistory</outbound>
                <outbound type="feature" confirmed="yes">org.junit.experimental.max.MaxHistory$RememberingListener.this$0</outbound>
                <outbound type="feature" confirmed="yes">org.junit.experimental.max.MaxHistory.access$000(org.junit.experimental.max.MaxHistory)</outbound>
                <outbound type="class" confirmed="yes">org.junit.runner.Result</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.junit.experimental.max.MaxHistory$RememberingListener.testStarted(org.junit.runner.Description)</name>
                <outbound type="class" confirmed="no">java.lang.Exception</outbound>
                <outbound type="class" confirmed="no">java.lang.Long</outbound>
                <outbound type="feature" confirmed="no">java.lang.Long.valueOf(long)</outbound>
                <outbound type="class" confirmed="no">java.lang.Object</outbound>
                <outbound type="feature" confirmed="no">java.lang.System.nanoTime()</outbound>
                <outbound type="class" confirmed="no">java.util.Map</outbound>
                <outbound type="feature" confirmed="no">java.util.Map.put(java.lang.Object, java.lang.Object)</outbound>
                <outbound type="feature" confirmed="yes">org.junit.experimental.max.MaxHistory$RememberingListener.starts</outbound>
                <outbound type="class" confirmed="yes">org.junit.runner.Description</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.junit.experimental.max.MaxHistory$RememberingListener.this$0</name>
                <outbound type="class" confirmed="yes">org.junit.experimental.max.MaxHistory</outbound>
                <inbound type="feature" confirmed="yes">org.junit.experimental.max.MaxHistory$RememberingListener.MaxHistory$RememberingListener(org.junit.experimental.max.MaxHistory)</inbound>
                <inbound type="feature" confirmed="yes">org.junit.experimental.max.MaxHistory$RememberingListener.testFailure(org.junit.runner.notification.Failure)</inbound>
                <inbound type="feature" confirmed="yes">org.junit.experimental.max.MaxHistory$RememberingListener.testFinished(org.junit.runner.Description)</inbound>
                <inbound type="feature" confirmed="yes">org.junit.experimental.max.MaxHistory$RememberingListener.testRunFinished(org.junit.runner.Result)</inbound>
            </feature>
        </class>
        <class confirmed="yes">
            <name>org.junit.experimental.max.MaxHistory$TestComparator</name>
            <outbound type="class" confirmed="no">java.lang.Object</outbound>
            <outbound type="class" confirmed="no">java.util.Comparator</outbound>
            <feature confirmed="yes">
                <name>org.junit.experimental.max.MaxHistory$TestComparator.MaxHistory$TestComparator(org.junit.experimental.max.MaxHistory)</name>
                <outbound type="feature" confirmed="no">java.lang.Object.Object()</outbound>
                <outbound type="class" confirmed="yes">org.junit.experimental.max.MaxHistory</outbound>
                <outbound type="feature" confirmed="yes">org.junit.experimental.max.MaxHistory$TestComparator.this$0</outbound>
                <inbound type="feature" confirmed="yes">org.junit.experimental.max.MaxHistory$TestComparator.MaxHistory$TestComparator(org.junit.experimental.max.MaxHistory, org.junit.experimental.max.MaxHistory$1)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.junit.experimental.max.MaxHistory$TestComparator.MaxHistory$TestComparator(org.junit.experimental.max.MaxHistory, org.junit.experimental.max.MaxHistory$1)</name>
                <outbound type="class" confirmed="yes">org.junit.experimental.max.MaxHistory</outbound>
                <outbound type="class" confirmed="yes">org.junit.experimental.max.MaxHistory$1</outbound>
                <outbound type="feature" confirmed="yes">org.junit.experimental.max.MaxHistory$TestComparator.MaxHistory$TestComparator(org.junit.experimental.max.MaxHistory)</outbound>
                <inbound type="feature" confirmed="yes">org.junit.experimental.max.MaxHistory.testComparator()</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.junit.experimental.max.MaxHistory$TestComparator.compare(java.lang.Object, java.lang.Object)</name>
                <outbound type="class" confirmed="no">java.lang.Object</outbound>
                <outbound type="feature" confirmed="yes">org.junit.experimental.max.MaxHistory$TestComparator.compare(org.junit.runner.Description, org.junit.runner.Description)</outbound>
                <outbound type="class" confirmed="yes">org.junit.runner.Description</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.junit.experimental.max.MaxHistory$TestComparator.compare(org.junit.runner.Description, org.junit.runner.Description)</name>
                <outbound type="class" confirmed="no">java.lang.Long</outbound>
                <outbound type="feature" confirmed="no">java.lang.Long.compareTo(java.lang.Long)</outbound>
                <outbound type="class" confirmed="yes">org.junit.experimental.max.MaxHistory</outbound>
                <outbound type="feature" confirmed="yes">org.junit.experimental.max.MaxHistory$TestComparator.getFailure(org.junit.runner.Description)</outbound>
                <outbound type="feature" confirmed="yes">org.junit.experimental.max.MaxHistory$TestComparator.this$0</outbound>
                <outbound type="feature" confirmed="yes">org.junit.experimental.max.MaxHistory.getTestDuration(org.junit.runner.Description)</outbound>
                <outbound type="feature" confirmed="yes">org.junit.experimental.max.MaxHistory.isNewTest(org.junit.runner.Description)</outbound>
                <outbound type="class" confirmed="yes">org.junit.runner.Description</outbound>
                <inbound type="feature" confirmed="yes">org.junit.experimental.max.MaxHistory$TestComparator.compare(java.lang.Object, java.lang.Object)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.junit.experimental.max.MaxHistory$TestComparator.getFailure(org.junit.runner.Description)</name>
                <outbound type="class" confirmed="no">java.lang.Long</outbound>
                <outbound type="feature" confirmed="no">java.lang.Long.valueOf(long)</outbound>
                <outbound type="class" confirmed="yes">org.junit.experimental.max.MaxHistory</outbound>
                <outbound type="feature" confirmed="yes">org.junit.experimental.max.MaxHistory$TestComparator.this$0</outbound>
                <outbound type="feature" confirmed="yes">org.junit.experimental.max.MaxHistory.getFailureTimestamp(org.junit.runner.Description)</outbound>
                <outbound type="class" confirmed="yes">org.junit.runner.Description</outbound>
                <inbound type="feature" confirmed="yes">org.junit.experimental.max.MaxHistory$TestComparator.compare(org.junit.runner.Description, org.junit.runner.Description)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.junit.experimental.max.MaxHistory$TestComparator.this$0</name>
                <outbound type="class" confirmed="yes">org.junit.experimental.max.MaxHistory</outbound>
                <inbound type="feature" confirmed="yes">org.junit.experimental.max.MaxHistory$TestComparator.MaxHistory$TestComparator(org.junit.experimental.max.MaxHistory)</inbound>
                <inbound type="feature" confirmed="yes">org.junit.experimental.max.MaxHistory$TestComparator.compare(org.junit.runner.Description, org.junit.runner.Description)</inbound>
                <inbound type="feature" confirmed="yes">org.junit.experimental.max.MaxHistory$TestComparator.getFailure(org.junit.runner.Description)</inbound>
            </feature>
        </class>
    </package>
    <package confirmed="yes">
        <name>org.junit.experimental.results</name>
        <class confirmed="yes">
            <name>org.junit.experimental.results.FailureList</name>
            <outbound type="class" confirmed="no">java.lang.Object</outbound>
            <feature confirmed="yes">
                <name>org.junit.experimental.results.FailureList.FailureList(java.util.List)</name>
                <outbound type="feature" confirmed="no">java.lang.Object.Object()</outbound>
                <outbound type="class" confirmed="no">java.util.List</outbound>
                <outbound type="feature" confirmed="yes">org.junit.experimental.results.FailureList.failures</outbound>
                <inbound type="feature" confirmed="yes">org.junit.experimental.results.PrintableResult.PrintableResult(java.util.List)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.junit.experimental.results.FailureList.failures</name>
                <outbound type="class" confirmed="no">java.util.List</outbound>
                <inbound type="feature" confirmed="yes">org.junit.experimental.results.FailureList.FailureList(java.util.List)</inbound>
                <inbound type="feature" confirmed="yes">org.junit.experimental.results.FailureList.result()</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.junit.experimental.results.FailureList.result()</name>
                <outbound type="class" confirmed="no">java.lang.Exception</outbound>
                <outbound type="class" confirmed="no">java.lang.Object</outbound>
                <outbound type="feature" confirmed="no">java.lang.RuntimeException.RuntimeException(java.lang.String)</outbound>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="class" confirmed="no">java.util.Iterator</outbound>
                <outbound type="feature" confirmed="no">java.util.Iterator.hasNext()</outbound>
                <outbound type="feature" confirmed="no">java.util.Iterator.next()</outbound>
                <outbound type="class" confirmed="no">java.util.List</outbound>
                <outbound type="feature" confirmed="no">java.util.List.iterator()</outbound>
                <outbound type="feature" confirmed="yes">org.junit.experimental.results.FailureList.failures</outbound>
                <outbound type="class" confirmed="yes">org.junit.runner.Result</outbound>
                <outbound type="feature" confirmed="yes">org.junit.runner.Result.Result()</outbound>
                <outbound type="feature" confirmed="yes">org.junit.runner.Result.createListener()</outbound>
                <outbound type="class" confirmed="yes">org.junit.runner.notification.Failure</outbound>
                <outbound type="class" confirmed="yes">org.junit.runner.notification.RunListener</outbound>
                <outbound type="feature" confirmed="yes">org.junit.runner.notification.RunListener.testFailure(org.junit.runner.notification.Failure)</outbound>
                <inbound type="feature" confirmed="yes">org.junit.experimental.results.PrintableResult.PrintableResult(java.util.List)</inbound>
            </feature>
        </class>
        <class confirmed="yes">
            <name>org.junit.experimental.results.PrintableResult</name>
            <outbound type="class" confirmed="no">java.lang.Object</outbound>
            <inbound type="feature" confirmed="yes">org.junit.experimental.results.ResultMatchers$1.matchesSafely(java.lang.Object)</inbound>
            <inbound type="feature" confirmed="yes">org.junit.experimental.results.ResultMatchers$1.matchesSafely(org.junit.experimental.results.PrintableResult)</inbound>
            <feature confirmed="yes">
                <name>org.junit.experimental.results.PrintableResult.PrintableResult(java.util.List)</name>
                <outbound type="class" confirmed="no">java.util.List</outbound>
                <outbound type="feature" confirmed="yes">org.junit.experimental.results.FailureList.FailureList(java.util.List)</outbound>
                <outbound type="feature" confirmed="yes">org.junit.experimental.results.FailureList.result()</outbound>
                <outbound type="feature" confirmed="yes">org.junit.experimental.results.PrintableResult.PrintableResult(org.junit.runner.Result)</outbound>
                <outbound type="class" confirmed="yes">org.junit.runner.Result</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.junit.experimental.results.PrintableResult.PrintableResult(org.junit.runner.Result)</name>
                <outbound type="feature" confirmed="no">java.lang.Object.Object()</outbound>
                <outbound type="feature" confirmed="yes">org.junit.experimental.results.PrintableResult.result</outbound>
                <outbound type="class" confirmed="yes">org.junit.runner.Result</outbound>
                <inbound type="feature" confirmed="yes">org.junit.experimental.results.PrintableResult.PrintableResult(java.util.List)</inbound>
                <inbound type="feature" confirmed="yes">org.junit.experimental.results.PrintableResult.testResult(org.junit.runner.Request)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.junit.experimental.results.PrintableResult.failureCount()</name>
                <outbound type="class" confirmed="no">java.util.List</outbound>
                <outbound type="feature" confirmed="no">java.util.List.size()</outbound>
                <outbound type="feature" confirmed="yes">org.junit.experimental.results.PrintableResult.result</outbound>
                <outbound type="class" confirmed="yes">org.junit.runner.Result</outbound>
                <outbound type="feature" confirmed="yes">org.junit.runner.Result.getFailures()</outbound>
                <inbound type="feature" confirmed="yes">org.junit.experimental.results.ResultMatchers$1.matchesSafely(org.junit.experimental.results.PrintableResult)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.junit.experimental.results.PrintableResult.result</name>
                <outbound type="class" confirmed="yes">org.junit.runner.Result</outbound>
                <inbound type="feature" confirmed="yes">org.junit.experimental.results.PrintableResult.PrintableResult(org.junit.runner.Result)</inbound>
                <inbound type="feature" confirmed="yes">org.junit.experimental.results.PrintableResult.failureCount()</inbound>
                <inbound type="feature" confirmed="yes">org.junit.experimental.results.PrintableResult.toString()</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.junit.experimental.results.PrintableResult.testResult(java.lang.Class)</name>
                <outbound type="class" confirmed="no">java.lang.Class</outbound>
                <outbound type="feature" confirmed="yes">org.junit.experimental.results.PrintableResult.testResult(org.junit.runner.Request)</outbound>
                <outbound type="class" confirmed="yes">org.junit.runner.Request</outbound>
                <outbound type="feature" confirmed="yes">org.junit.runner.Request.aClass(java.lang.Class)</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.junit.experimental.results.PrintableResult.testResult(org.junit.runner.Request)</name>
                <outbound type="feature" confirmed="yes">org.junit.experimental.results.PrintableResult.PrintableResult(org.junit.runner.Result)</outbound>
                <outbound type="feature" confirmed="yes">org.junit.runner.JUnitCore.JUnitCore()</outbound>
                <outbound type="feature" confirmed="yes">org.junit.runner.JUnitCore.run(org.junit.runner.Request)</outbound>
                <outbound type="class" confirmed="yes">org.junit.runner.Request</outbound>
                <outbound type="class" confirmed="yes">org.junit.runner.Result</outbound>
                <inbound type="feature" confirmed="yes">org.junit.experimental.results.PrintableResult.testResult(java.lang.Class)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.junit.experimental.results.PrintableResult.toString()</name>
                <outbound type="feature" confirmed="no">java.io.ByteArrayOutputStream.ByteArrayOutputStream()</outbound>
                <outbound type="feature" confirmed="no">java.io.ByteArrayOutputStream.toString()</outbound>
                <outbound type="class" confirmed="no">java.io.OutputStream</outbound>
                <outbound type="class" confirmed="no">java.io.PrintStream</outbound>
                <outbound type="feature" confirmed="no">java.io.PrintStream.PrintStream(java.io.OutputStream)</outbound>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="feature" confirmed="yes">org.junit.experimental.results.PrintableResult.result</outbound>
                <outbound type="feature" confirmed="yes">org.junit.internal.TextListener.TextListener(java.io.PrintStream)</outbound>
                <outbound type="feature" confirmed="yes">org.junit.internal.TextListener.testRunFinished(org.junit.runner.Result)</outbound>
                <outbound type="class" confirmed="yes">org.junit.runner.Result</outbound>
            </feature>
        </class>
        <class confirmed="yes">
            <name>org.junit.experimental.results.ResultMatchers</name>
            <outbound type="class" confirmed="no">java.lang.Object</outbound>
            <feature confirmed="yes">
                <name>org.junit.experimental.results.ResultMatchers.ResultMatchers()</name>
                <outbound type="feature" confirmed="no">java.lang.Object.Object()</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.junit.experimental.results.ResultMatchers.failureCountIs(int)</name>
                <outbound type="class" confirmed="yes">org.hamcrest.Matcher</outbound>
                <outbound type="feature" confirmed="yes">org.junit.experimental.results.ResultMatchers$1.ResultMatchers$1(int)</outbound>
                <inbound type="feature" confirmed="yes">org.junit.experimental.results.ResultMatchers$2.matches(java.lang.Object)</inbound>
                <inbound type="feature" confirmed="yes">org.junit.experimental.results.ResultMatchers.isSuccessful()</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.junit.experimental.results.ResultMatchers.hasFailureContaining(java.lang.String)</name>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="class" confirmed="yes">org.hamcrest.Matcher</outbound>
                <outbound type="feature" confirmed="yes">org.junit.experimental.results.ResultMatchers$3.ResultMatchers$3(java.lang.String)</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.junit.experimental.results.ResultMatchers.hasSingleFailureContaining(java.lang.String)</name>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="class" confirmed="yes">org.hamcrest.Matcher</outbound>
                <outbound type="feature" confirmed="yes">org.junit.experimental.results.ResultMatchers$2.ResultMatchers$2(java.lang.String)</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.junit.experimental.results.ResultMatchers.isSuccessful()</name>
                <outbound type="class" confirmed="yes">org.hamcrest.Matcher</outbound>
                <outbound type="feature" confirmed="yes">org.junit.experimental.results.ResultMatchers.failureCountIs(int)</outbound>
            </feature>
        </class>
        <class confirmed="yes">
            <name>org.junit.experimental.results.ResultMatchers$1</name>
            <outbound type="class" confirmed="yes">org.junit.internal.matchers.TypeSafeMatcher</outbound>
            <feature confirmed="yes">
                <name>org.junit.experimental.results.ResultMatchers$1.ResultMatchers$1(int)</name>
                <outbound type="feature" confirmed="yes">org.junit.experimental.results.ResultMatchers$1.val$count</outbound>
                <outbound type="feature" confirmed="yes">org.junit.internal.matchers.TypeSafeMatcher.TypeSafeMatcher()</outbound>
                <inbound type="feature" confirmed="yes">org.junit.experimental.results.ResultMatchers.failureCountIs(int)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.junit.experimental.results.ResultMatchers$1.describeTo(org.hamcrest.Description)</name>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="class" confirmed="no">java.lang.StringBuilder</outbound>
                <outbound type="feature" confirmed="no">java.lang.StringBuilder.StringBuilder()</outbound>
                <outbound type="feature" confirmed="no">java.lang.StringBuilder.append(int)</outbound>
                <outbound type="feature" confirmed="no">java.lang.StringBuilder.append(java.lang.String)</outbound>
                <outbound type="feature" confirmed="no">java.lang.StringBuilder.toString()</outbound>
                <outbound type="class" confirmed="yes">org.hamcrest.Description</outbound>
                <outbound type="feature" confirmed="yes">org.hamcrest.Description.appendText(java.lang.String)</outbound>
                <outbound type="feature" confirmed="yes">org.junit.experimental.results.ResultMatchers$1.val$count</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.junit.experimental.results.ResultMatchers$1.matchesSafely(java.lang.Object)</name>
                <outbound type="class" confirmed="no">java.lang.Object</outbound>
                <outbound type="class" confirmed="yes">org.junit.experimental.results.PrintableResult</outbound>
                <outbound type="feature" confirmed="yes">org.junit.experimental.results.ResultMatchers$1.matchesSafely(org.junit.experimental.results.PrintableResult)</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.junit.experimental.results.ResultMatchers$1.matchesSafely(org.junit.experimental.results.PrintableResult)</name>
                <outbound type="class" confirmed="yes">org.junit.experimental.results.PrintableResult</outbound>
                <outbound type="feature" confirmed="yes">org.junit.experimental.results.PrintableResult.failureCount()</outbound>
                <outbound type="feature" confirmed="yes">org.junit.experimental.results.ResultMatchers$1.val$count</outbound>
                <inbound type="feature" confirmed="yes">org.junit.experimental.results.ResultMatchers$1.matchesSafely(java.lang.Object)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.junit.experimental.results.ResultMatchers$1.val$count</name>
                <inbound type="feature" confirmed="yes">org.junit.experimental.results.ResultMatchers$1.ResultMatchers$1(int)</inbound>
                <inbound type="feature" confirmed="yes">org.junit.experimental.results.ResultMatchers$1.describeTo(org.hamcrest.Description)</inbound>
                <inbound type="feature" confirmed="yes">org.junit.experimental.results.ResultMatchers$1.matchesSafely(org.junit.experimental.results.PrintableResult)</inbound>
            </feature>
        </class>
        <class confirmed="yes">
            <name>org.junit.experimental.results.ResultMatchers$2</name>
            <outbound type="class" confirmed="yes">org.hamcrest.BaseMatcher</outbound>
            <feature confirmed="yes">
                <name>org.junit.experimental.results.ResultMatchers$2.ResultMatchers$2(java.lang.String)</name>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="feature" confirmed="yes">org.hamcrest.BaseMatcher.BaseMatcher()</outbound>
                <outbound type="feature" confirmed="yes">org.junit.experimental.results.ResultMatchers$2.val$string</outbound>
                <inbound type="feature" confirmed="yes">org.junit.experimental.results.ResultMatchers.hasSingleFailureContaining(java.lang.String)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.junit.experimental.results.ResultMatchers$2.describeTo(org.hamcrest.Description)</name>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="class" confirmed="no">java.lang.StringBuilder</outbound>
                <outbound type="feature" confirmed="no">java.lang.StringBuilder.StringBuilder()</outbound>
                <outbound type="feature" confirmed="no">java.lang.StringBuilder.append(java.lang.String)</outbound>
                <outbound type="feature" confirmed="no">java.lang.StringBuilder.toString()</outbound>
                <outbound type="class" confirmed="yes">org.hamcrest.Description</outbound>
                <outbound type="feature" confirmed="yes">org.hamcrest.Description.appendText(java.lang.String)</outbound>
                <outbound type="feature" confirmed="yes">org.junit.experimental.results.ResultMatchers$2.val$string</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.junit.experimental.results.ResultMatchers$2.matches(java.lang.Object)</name>
                <outbound type="class" confirmed="no">java.lang.CharSequence</outbound>
                <outbound type="class" confirmed="no">java.lang.Object</outbound>
                <outbound type="feature" confirmed="no">java.lang.Object.toString()</outbound>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="feature" confirmed="no">java.lang.String.contains(java.lang.CharSequence)</outbound>
                <outbound type="class" confirmed="yes">org.hamcrest.Matcher</outbound>
                <outbound type="feature" confirmed="yes">org.hamcrest.Matcher.matches(java.lang.Object)</outbound>
                <outbound type="feature" confirmed="yes">org.junit.experimental.results.ResultMatchers$2.val$string</outbound>
                <outbound type="feature" confirmed="yes">org.junit.experimental.results.ResultMatchers.failureCountIs(int)</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.junit.experimental.results.ResultMatchers$2.val$string</name>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <inbound type="feature" confirmed="yes">org.junit.experimental.results.ResultMatchers$2.ResultMatchers$2(java.lang.String)</inbound>
                <inbound type="feature" confirmed="yes">org.junit.experimental.results.ResultMatchers$2.describeTo(org.hamcrest.Description)</inbound>
                <inbound type="feature" confirmed="yes">org.junit.experimental.results.ResultMatchers$2.matches(java.lang.Object)</inbound>
            </feature>
        </class>
        <class confirmed="yes">
            <name>org.junit.experimental.results.ResultMatchers$3</name>
            <outbound type="class" confirmed="yes">org.hamcrest.BaseMatcher</outbound>
            <feature confirmed="yes">
                <name>org.junit.experimental.results.ResultMatchers$3.ResultMatchers$3(java.lang.String)</name>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="feature" confirmed="yes">org.hamcrest.BaseMatcher.BaseMatcher()</outbound>
                <outbound type="feature" confirmed="yes">org.junit.experimental.results.ResultMatchers$3.val$string</outbound>
                <inbound type="feature" confirmed="yes">org.junit.experimental.results.ResultMatchers.hasFailureContaining(java.lang.String)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.junit.experimental.results.ResultMatchers$3.describeTo(org.hamcrest.Description)</name>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="class" confirmed="no">java.lang.StringBuilder</outbound>
                <outbound type="feature" confirmed="no">java.lang.StringBuilder.StringBuilder()</outbound>
                <outbound type="feature" confirmed="no">java.lang.StringBuilder.append(java.lang.String)</outbound>
                <outbound type="feature" confirmed="no">java.lang.StringBuilder.toString()</outbound>
                <outbound type="class" confirmed="yes">org.hamcrest.Description</outbound>
                <outbound type="feature" confirmed="yes">org.hamcrest.Description.appendText(java.lang.String)</outbound>
                <outbound type="feature" confirmed="yes">org.junit.experimental.results.ResultMatchers$3.val$string</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.junit.experimental.results.ResultMatchers$3.matches(java.lang.Object)</name>
                <outbound type="class" confirmed="no">java.lang.CharSequence</outbound>
                <outbound type="class" confirmed="no">java.lang.Object</outbound>
                <outbound type="feature" confirmed="no">java.lang.Object.toString()</outbound>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="feature" confirmed="no">java.lang.String.contains(java.lang.CharSequence)</outbound>
                <outbound type="feature" confirmed="yes">org.junit.experimental.results.ResultMatchers$3.val$string</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.junit.experimental.results.ResultMatchers$3.val$string</name>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <inbound type="feature" confirmed="yes">org.junit.experimental.results.ResultMatchers$3.ResultMatchers$3(java.lang.String)</inbound>
                <inbound type="feature" confirmed="yes">org.junit.experimental.results.ResultMatchers$3.describeTo(org.hamcrest.Description)</inbound>
                <inbound type="feature" confirmed="yes">org.junit.experimental.results.ResultMatchers$3.matches(java.lang.Object)</inbound>
            </feature>
        </class>
    </package>
    <package confirmed="yes">
        <name>org.junit.experimental.runners</name>
        <class confirmed="yes">
            <name>org.junit.experimental.runners.Enclosed</name>
            <outbound type="class" confirmed="yes">org.junit.runners.Suite</outbound>
            <feature confirmed="yes">
                <name>org.junit.experimental.runners.Enclosed.Enclosed(java.lang.Class, org.junit.runners.model.RunnerBuilder)</name>
                <outbound type="class" confirmed="no">java.lang.Class</outbound>
                <outbound type="feature" confirmed="no">java.lang.Class.getClasses()</outbound>
                <outbound type="class" confirmed="no">java.lang.Throwable</outbound>
                <outbound type="feature" confirmed="yes">org.junit.runners.Suite.Suite(org.junit.runners.model.RunnerBuilder, java.lang.Class, java.lang.Class[])</outbound>
                <outbound type="class" confirmed="yes">org.junit.runners.model.RunnerBuilder</outbound>
            </feature>
        </class>
    </package>
    <package confirmed="yes">
        <name>org.junit.experimental.theories</name>
        <class confirmed="yes">
            <name>org.junit.experimental.theories.DataPoint</name>
            <outbound type="class" confirmed="no">java.lang.Object</outbound>
            <outbound type="class" confirmed="no">java.lang.annotation.Annotation</outbound>
            <inbound type="feature" confirmed="yes">org.junit.experimental.theories.Theories.validateDataPointFields(java.util.List)</inbound>
            <inbound type="feature" confirmed="yes">org.junit.experimental.theories.internal.AllMembersSupplier.addFields(org.junit.experimental.theories.ParameterSignature, java.util.List)</inbound>
            <inbound type="feature" confirmed="yes">org.junit.experimental.theories.internal.AllMembersSupplier.addSinglePointMethods(org.junit.experimental.theories.ParameterSignature, java.util.List)</inbound>
        </class>
        <class confirmed="yes">
            <name>org.junit.experimental.theories.DataPoints</name>
            <outbound type="class" confirmed="no">java.lang.Object</outbound>
            <outbound type="class" confirmed="no">java.lang.annotation.Annotation</outbound>
            <inbound type="feature" confirmed="yes">org.junit.experimental.theories.internal.AllMembersSupplier.addFields(org.junit.experimental.theories.ParameterSignature, java.util.List)</inbound>
            <inbound type="feature" confirmed="yes">org.junit.experimental.theories.internal.AllMembersSupplier.addMultiPointMethods(java.util.List)</inbound>
        </class>
        <class confirmed="yes">
            <name>org.junit.experimental.theories.ParameterSignature</name>
            <outbound type="class" confirmed="no">java.lang.Object</outbound>
            <inbound type="feature" confirmed="yes">org.junit.experimental.theories.ParameterSupplier.getValueSources(org.junit.experimental.theories.ParameterSignature)</inbound>
            <inbound type="feature" confirmed="yes">org.junit.experimental.theories.internal.AllMembersSupplier.addFields(org.junit.experimental.theories.ParameterSignature, java.util.List)</inbound>
            <inbound type="feature" confirmed="yes">org.junit.experimental.theories.internal.AllMembersSupplier.addSinglePointMethods(org.junit.experimental.theories.ParameterSignature, java.util.List)</inbound>
            <inbound type="feature" confirmed="yes">org.junit.experimental.theories.internal.AllMembersSupplier.getValueSources(org.junit.experimental.theories.ParameterSignature)</inbound>
            <inbound type="feature" confirmed="yes">org.junit.experimental.theories.internal.Assignments.getAnnotatedSupplier(org.junit.experimental.theories.ParameterSignature)</inbound>
            <inbound type="feature" confirmed="yes">org.junit.experimental.theories.internal.Assignments.getSupplier(org.junit.experimental.theories.ParameterSignature)</inbound>
            <inbound type="feature" confirmed="yes">org.junit.experimental.theories.internal.Assignments.nextUnassigned()</inbound>
            <inbound type="feature" confirmed="yes">org.junit.experimental.theories.internal.Assignments.potentialsForNextUnassigned()</inbound>
            <inbound type="feature" confirmed="yes">org.junit.experimental.theories.suppliers.TestedOnSupplier.getValueSources(org.junit.experimental.theories.ParameterSignature)</inbound>
            <feature confirmed="yes">
                <name>org.junit.experimental.theories.ParameterSignature.ParameterSignature(java.lang.Class, java.lang.annotation.Annotation[])</name>
                <outbound type="class" confirmed="no">java.lang.Class</outbound>
                <outbound type="feature" confirmed="no">java.lang.Object.Object()</outbound>
                <outbound type="class" confirmed="no">java.lang.annotation.Annotation</outbound>
                <outbound type="feature" confirmed="yes">org.junit.experimental.theories.ParameterSignature.annotations</outbound>
                <outbound type="feature" confirmed="yes">org.junit.experimental.theories.ParameterSignature.type</outbound>
                <inbound type="feature" confirmed="yes">org.junit.experimental.theories.ParameterSignature.signatures(java.lang.Class[], java.lang.annotation.Annotation[][])</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.junit.experimental.theories.ParameterSignature.annotations</name>
                <outbound type="class" confirmed="no">java.lang.annotation.Annotation</outbound>
                <inbound type="feature" confirmed="yes">org.junit.experimental.theories.ParameterSignature.ParameterSignature(java.lang.Class, java.lang.annotation.Annotation[])</inbound>
                <inbound type="feature" confirmed="yes">org.junit.experimental.theories.ParameterSignature.findDeepAnnotation(java.lang.Class)</inbound>
                <inbound type="feature" confirmed="yes">org.junit.experimental.theories.ParameterSignature.getAnnotations()</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.junit.experimental.theories.ParameterSignature.canAcceptArrayType(java.lang.Class)</name>
                <outbound type="class" confirmed="no">java.lang.Class</outbound>
                <outbound type="feature" confirmed="no">java.lang.Class.getComponentType()</outbound>
                <outbound type="feature" confirmed="no">java.lang.Class.isArray()</outbound>
                <outbound type="feature" confirmed="yes">org.junit.experimental.theories.ParameterSignature.canAcceptType(java.lang.Class)</outbound>
                <inbound type="feature" confirmed="yes">org.junit.experimental.theories.internal.AllMembersSupplier.addFields(org.junit.experimental.theories.ParameterSignature, java.util.List)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.junit.experimental.theories.ParameterSignature.canAcceptType(java.lang.Class)</name>
                <outbound type="class" confirmed="no">java.lang.Class</outbound>
                <outbound type="feature" confirmed="no">java.lang.Class.isAssignableFrom(java.lang.Class)</outbound>
                <outbound type="feature" confirmed="yes">org.junit.experimental.theories.ParameterSignature.type</outbound>
                <inbound type="feature" confirmed="yes">org.junit.experimental.theories.ParameterSignature.canAcceptArrayType(java.lang.Class)</inbound>
                <inbound type="feature" confirmed="yes">org.junit.experimental.theories.internal.AllMembersSupplier.addFields(org.junit.experimental.theories.ParameterSignature, java.util.List)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.junit.experimental.theories.ParameterSignature.findDeepAnnotation(java.lang.Class)</name>
                <outbound type="class" confirmed="no">java.lang.Class</outbound>
                <outbound type="class" confirmed="no">java.lang.annotation.Annotation</outbound>
                <outbound type="feature" confirmed="yes">org.junit.experimental.theories.ParameterSignature.annotations</outbound>
                <outbound type="feature" confirmed="yes">org.junit.experimental.theories.ParameterSignature.findDeepAnnotation(java.lang.annotation.Annotation[], java.lang.Class, int)</outbound>
                <inbound type="feature" confirmed="yes">org.junit.experimental.theories.internal.Assignments.getAnnotatedSupplier(org.junit.experimental.theories.ParameterSignature)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.junit.experimental.theories.ParameterSignature.findDeepAnnotation(java.lang.annotation.Annotation[], java.lang.Class, int)</name>
                <outbound type="class" confirmed="no">java.lang.Class</outbound>
                <outbound type="feature" confirmed="no">java.lang.Class.cast(java.lang.Object)</outbound>
                <outbound type="feature" confirmed="no">java.lang.Class.getAnnotations()</outbound>
                <outbound type="feature" confirmed="no">java.lang.Class.isInstance(java.lang.Object)</outbound>
                <outbound type="class" confirmed="no">java.lang.Object</outbound>
                <outbound type="class" confirmed="no">java.lang.annotation.Annotation</outbound>
                <outbound type="feature" confirmed="no">java.lang.annotation.Annotation.annotationType()</outbound>
                <inbound type="feature" confirmed="yes">org.junit.experimental.theories.ParameterSignature.findDeepAnnotation(java.lang.Class)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.junit.experimental.theories.ParameterSignature.getAnnotation(java.lang.Class)</name>
                <outbound type="class" confirmed="no">java.lang.Class</outbound>
                <outbound type="feature" confirmed="no">java.lang.Class.cast(java.lang.Object)</outbound>
                <outbound type="feature" confirmed="no">java.lang.Class.isInstance(java.lang.Object)</outbound>
                <outbound type="class" confirmed="no">java.lang.Object</outbound>
                <outbound type="class" confirmed="no">java.lang.annotation.Annotation</outbound>
                <outbound type="class" confirmed="no">java.util.Iterator</outbound>
                <outbound type="feature" confirmed="no">java.util.Iterator.hasNext()</outbound>
                <outbound type="feature" confirmed="no">java.util.Iterator.next()</outbound>
                <outbound type="class" confirmed="no">java.util.List</outbound>
                <outbound type="feature" confirmed="no">java.util.List.iterator()</outbound>
                <outbound type="feature" confirmed="yes">org.junit.experimental.theories.ParameterSignature.getAnnotations()</outbound>
                <inbound type="feature" confirmed="yes">org.junit.experimental.theories.ParameterSignature.hasAnnotation(java.lang.Class)</inbound>
                <inbound type="feature" confirmed="yes">org.junit.experimental.theories.suppliers.TestedOnSupplier.getValueSources(org.junit.experimental.theories.ParameterSignature)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.junit.experimental.theories.ParameterSignature.getAnnotations()</name>
                <outbound type="class" confirmed="no">java.lang.Object</outbound>
                <outbound type="class" confirmed="no">java.lang.annotation.Annotation</outbound>
                <outbound type="feature" confirmed="no">java.util.Arrays.asList(java.lang.Object[])</outbound>
                <outbound type="class" confirmed="no">java.util.List</outbound>
                <outbound type="feature" confirmed="yes">org.junit.experimental.theories.ParameterSignature.annotations</outbound>
                <inbound type="feature" confirmed="yes">org.junit.experimental.theories.ParameterSignature.getAnnotation(java.lang.Class)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.junit.experimental.theories.ParameterSignature.getType()</name>
                <outbound type="class" confirmed="no">java.lang.Class</outbound>
                <outbound type="feature" confirmed="yes">org.junit.experimental.theories.ParameterSignature.type</outbound>
                <inbound type="feature" confirmed="yes">org.junit.experimental.theories.internal.AllMembersSupplier.addSinglePointMethods(org.junit.experimental.theories.ParameterSignature, java.util.List)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.junit.experimental.theories.ParameterSignature.hasAnnotation(java.lang.Class)</name>
                <outbound type="class" confirmed="no">java.lang.Class</outbound>
                <outbound type="class" confirmed="no">java.lang.annotation.Annotation</outbound>
                <outbound type="feature" confirmed="yes">org.junit.experimental.theories.ParameterSignature.getAnnotation(java.lang.Class)</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.junit.experimental.theories.ParameterSignature.signatures(java.lang.Class[], java.lang.annotation.Annotation[][])</name>
                <outbound type="class" confirmed="no">java.lang.Class</outbound>
                <outbound type="class" confirmed="no">java.lang.Object</outbound>
                <outbound type="class" confirmed="no">java.lang.annotation.Annotation</outbound>
                <outbound type="class" confirmed="no">java.util.ArrayList</outbound>
                <outbound type="feature" confirmed="no">java.util.ArrayList.ArrayList()</outbound>
                <outbound type="feature" confirmed="no">java.util.ArrayList.add(java.lang.Object)</outbound>
                <outbound type="feature" confirmed="yes">org.junit.experimental.theories.ParameterSignature.ParameterSignature(java.lang.Class, java.lang.annotation.Annotation[])</outbound>
                <inbound type="feature" confirmed="yes">org.junit.experimental.theories.ParameterSignature.signatures(java.lang.reflect.Constructor)</inbound>
                <inbound type="feature" confirmed="yes">org.junit.experimental.theories.ParameterSignature.signatures(java.lang.reflect.Method)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.junit.experimental.theories.ParameterSignature.signatures(java.lang.reflect.Constructor)</name>
                <outbound type="class" confirmed="no">java.lang.Class</outbound>
                <outbound type="class" confirmed="no">java.lang.annotation.Annotation</outbound>
                <outbound type="class" confirmed="no">java.lang.reflect.Constructor</outbound>
                <outbound type="feature" confirmed="no">java.lang.reflect.Constructor.getParameterAnnotations()</outbound>
                <outbound type="feature" confirmed="no">java.lang.reflect.Constructor.getParameterTypes()</outbound>
                <outbound type="class" confirmed="no">java.util.ArrayList</outbound>
                <outbound type="class" confirmed="no">java.util.List</outbound>
                <outbound type="feature" confirmed="yes">org.junit.experimental.theories.ParameterSignature.signatures(java.lang.Class[], java.lang.annotation.Annotation[][])</outbound>
                <inbound type="feature" confirmed="yes">org.junit.experimental.theories.internal.Assignments.allUnassigned(java.lang.reflect.Method, org.junit.runners.model.TestClass)</inbound>
                <inbound type="feature" confirmed="yes">org.junit.experimental.theories.internal.Assignments.getConstructorParameterCount()</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.junit.experimental.theories.ParameterSignature.signatures(java.lang.reflect.Method)</name>
                <outbound type="class" confirmed="no">java.lang.Class</outbound>
                <outbound type="class" confirmed="no">java.lang.annotation.Annotation</outbound>
                <outbound type="class" confirmed="no">java.lang.reflect.Method</outbound>
                <outbound type="feature" confirmed="no">java.lang.reflect.Method.getParameterAnnotations()</outbound>
                <outbound type="feature" confirmed="no">java.lang.reflect.Method.getParameterTypes()</outbound>
                <outbound type="class" confirmed="no">java.util.ArrayList</outbound>
                <outbound type="feature" confirmed="yes">org.junit.experimental.theories.ParameterSignature.signatures(java.lang.Class[], java.lang.annotation.Annotation[][])</outbound>
                <inbound type="feature" confirmed="yes">org.junit.experimental.theories.internal.Assignments.allUnassigned(java.lang.reflect.Method, org.junit.runners.model.TestClass)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.junit.experimental.theories.ParameterSignature.type</name>
                <outbound type="class" confirmed="no">java.lang.Class</outbound>
                <inbound type="feature" confirmed="yes">org.junit.experimental.theories.ParameterSignature.ParameterSignature(java.lang.Class, java.lang.annotation.Annotation[])</inbound>
                <inbound type="feature" confirmed="yes">org.junit.experimental.theories.ParameterSignature.canAcceptType(java.lang.Class)</inbound>
                <inbound type="feature" confirmed="yes">org.junit.experimental.theories.ParameterSignature.getType()</inbound>
            </feature>
        </class>
        <class confirmed="yes">
            <name>org.junit.experimental.theories.ParameterSupplier</name>
            <outbound type="class" confirmed="no">java.lang.Object</outbound>
            <inbound type="class" confirmed="yes">org.junit.experimental.theories.internal.AllMembersSupplier</inbound>
            <inbound type="feature" confirmed="yes">org.junit.experimental.theories.internal.Assignments.getAnnotatedSupplier(org.junit.experimental.theories.ParameterSignature)</inbound>
            <inbound type="feature" confirmed="yes">org.junit.experimental.theories.internal.Assignments.getSupplier(org.junit.experimental.theories.ParameterSignature)</inbound>
            <inbound type="feature" confirmed="yes">org.junit.experimental.theories.internal.Assignments.potentialsForNextUnassigned()</inbound>
            <inbound type="class" confirmed="yes">org.junit.experimental.theories.suppliers.TestedOnSupplier</inbound>
            <feature confirmed="yes">
                <name>org.junit.experimental.theories.ParameterSupplier.ParameterSupplier()</name>
                <outbound type="feature" confirmed="no">java.lang.Object.Object()</outbound>
                <inbound type="feature" confirmed="yes">org.junit.experimental.theories.internal.AllMembersSupplier.AllMembersSupplier(org.junit.runners.model.TestClass)</inbound>
                <inbound type="feature" confirmed="yes">org.junit.experimental.theories.suppliers.TestedOnSupplier.TestedOnSupplier()</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.junit.experimental.theories.ParameterSupplier.getValueSources(org.junit.experimental.theories.ParameterSignature)</name>
                <outbound type="class" confirmed="no">java.util.List</outbound>
                <outbound type="class" confirmed="yes">org.junit.experimental.theories.ParameterSignature</outbound>
                <inbound type="feature" confirmed="yes">org.junit.experimental.theories.internal.Assignments.potentialsForNextUnassigned()</inbound>
            </feature>
        </class>
        <class confirmed="yes">
            <name>org.junit.experimental.theories.ParametersSuppliedBy</name>
            <outbound type="class" confirmed="no">java.lang.Object</outbound>
            <outbound type="class" confirmed="no">java.lang.annotation.Annotation</outbound>
            <inbound type="feature" confirmed="yes">org.junit.experimental.theories.internal.Assignments.getAnnotatedSupplier(org.junit.experimental.theories.ParameterSignature)</inbound>
            <feature confirmed="yes">
                <name>org.junit.experimental.theories.ParametersSuppliedBy.value()</name>
                <outbound type="class" confirmed="no">java.lang.Class</outbound>
                <inbound type="feature" confirmed="yes">org.junit.experimental.theories.internal.Assignments.getAnnotatedSupplier(org.junit.experimental.theories.ParameterSignature)</inbound>
            </feature>
        </class>
        <class confirmed="yes">
            <name>org.junit.experimental.theories.PotentialAssignment</name>
            <outbound type="class" confirmed="no">java.lang.Object</outbound>
            <inbound type="class" confirmed="yes">org.junit.experimental.theories.PotentialAssignment$1</inbound>
            <inbound type="feature" confirmed="yes">org.junit.experimental.theories.Theories$TheoryAnchor.runWithIncompleteAssignment(org.junit.experimental.theories.internal.Assignments)</inbound>
            <inbound type="class" confirmed="yes">org.junit.experimental.theories.internal.AllMembersSupplier$MethodParameterValue</inbound>
            <inbound type="feature" confirmed="yes">org.junit.experimental.theories.internal.AllMembersSupplier.addArrayValues(java.lang.String, java.util.List, java.lang.Object)</inbound>
            <inbound type="feature" confirmed="yes">org.junit.experimental.theories.internal.AllMembersSupplier.addFields(org.junit.experimental.theories.ParameterSignature, java.util.List)</inbound>
            <inbound type="feature" confirmed="yes">org.junit.experimental.theories.internal.Assignments.assignNext(org.junit.experimental.theories.PotentialAssignment)</inbound>
            <inbound type="feature" confirmed="yes">org.junit.experimental.theories.internal.Assignments.getActualValues(int, int, boolean)</inbound>
            <inbound type="feature" confirmed="yes">org.junit.experimental.theories.internal.Assignments.getArgumentStrings(boolean)</inbound>
            <inbound type="feature" confirmed="yes">org.junit.experimental.theories.suppliers.TestedOnSupplier.getValueSources(org.junit.experimental.theories.ParameterSignature)</inbound>
            <feature confirmed="yes">
                <name>org.junit.experimental.theories.PotentialAssignment.PotentialAssignment()</name>
                <outbound type="feature" confirmed="no">java.lang.Object.Object()</outbound>
                <inbound type="feature" confirmed="yes">org.junit.experimental.theories.PotentialAssignment$1.PotentialAssignment$1(java.lang.Object, java.lang.String)</inbound>
                <inbound type="feature" confirmed="yes">org.junit.experimental.theories.internal.AllMembersSupplier$MethodParameterValue.AllMembersSupplier$MethodParameterValue(org.junit.runners.model.FrameworkMethod)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.junit.experimental.theories.PotentialAssignment.forValue(java.lang.String, java.lang.Object)</name>
                <outbound type="class" confirmed="no">java.lang.Object</outbound>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="feature" confirmed="yes">org.junit.experimental.theories.PotentialAssignment$1.PotentialAssignment$1(java.lang.Object, java.lang.String)</outbound>
                <inbound type="feature" confirmed="yes">org.junit.experimental.theories.internal.AllMembersSupplier.addArrayValues(java.lang.String, java.util.List, java.lang.Object)</inbound>
                <inbound type="feature" confirmed="yes">org.junit.experimental.theories.internal.AllMembersSupplier.addFields(org.junit.experimental.theories.ParameterSignature, java.util.List)</inbound>
                <inbound type="feature" confirmed="yes">org.junit.experimental.theories.suppliers.TestedOnSupplier.getValueSources(org.junit.experimental.theories.ParameterSignature)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.junit.experimental.theories.PotentialAssignment.getDescription()</name>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="class" confirmed="yes">org.junit.experimental.theories.PotentialAssignment$CouldNotGenerateValueException</outbound>
                <inbound type="feature" confirmed="yes">org.junit.experimental.theories.internal.Assignments.getArgumentStrings(boolean)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.junit.experimental.theories.PotentialAssignment.getValue()</name>
                <outbound type="class" confirmed="no">java.lang.Object</outbound>
                <outbound type="class" confirmed="yes">org.junit.experimental.theories.PotentialAssignment$CouldNotGenerateValueException</outbound>
                <inbound type="feature" confirmed="yes">org.junit.experimental.theories.internal.Assignments.getActualValues(int, int, boolean)</inbound>
            </feature>
        </class>
        <class confirmed="yes">
            <name>org.junit.experimental.theories.PotentialAssignment$1</name>
            <outbound type="class" confirmed="yes">org.junit.experimental.theories.PotentialAssignment</outbound>
            <feature confirmed="yes">
                <name>org.junit.experimental.theories.PotentialAssignment$1.PotentialAssignment$1(java.lang.Object, java.lang.String)</name>
                <outbound type="class" confirmed="no">java.lang.Object</outbound>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="feature" confirmed="yes">org.junit.experimental.theories.PotentialAssignment$1.val$name</outbound>
                <outbound type="feature" confirmed="yes">org.junit.experimental.theories.PotentialAssignment$1.val$value</outbound>
                <outbound type="feature" confirmed="yes">org.junit.experimental.theories.PotentialAssignment.PotentialAssignment()</outbound>
                <inbound type="feature" confirmed="yes">org.junit.experimental.theories.PotentialAssignment.forValue(java.lang.String, java.lang.Object)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.junit.experimental.theories.PotentialAssignment$1.getDescription()</name>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="feature" confirmed="yes">org.junit.experimental.theories.PotentialAssignment$1.val$name</outbound>
                <outbound type="class" confirmed="yes">org.junit.experimental.theories.PotentialAssignment$CouldNotGenerateValueException</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.junit.experimental.theories.PotentialAssignment$1.getValue()</name>
                <outbound type="class" confirmed="no">java.lang.Object</outbound>
                <outbound type="feature" confirmed="yes">org.junit.experimental.theories.PotentialAssignment$1.val$value</outbound>
                <outbound type="class" confirmed="yes">org.junit.experimental.theories.PotentialAssignment$CouldNotGenerateValueException</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.junit.experimental.theories.PotentialAssignment$1.toString()</name>
                <outbound type="class" confirmed="no">java.lang.Object</outbound>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="feature" confirmed="no">java.lang.String.format(java.lang.String, java.lang.Object[])</outbound>
                <outbound type="feature" confirmed="yes">org.junit.experimental.theories.PotentialAssignment$1.val$value</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.junit.experimental.theories.PotentialAssignment$1.val$name</name>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <inbound type="feature" confirmed="yes">org.junit.experimental.theories.PotentialAssignment$1.PotentialAssignment$1(java.lang.Object, java.lang.String)</inbound>
                <inbound type="feature" confirmed="yes">org.junit.experimental.theories.PotentialAssignment$1.getDescription()</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.junit.experimental.theories.PotentialAssignment$1.val$value</name>
                <outbound type="class" confirmed="no">java.lang.Object</outbound>
                <inbound type="feature" confirmed="yes">org.junit.experimental.theories.PotentialAssignment$1.PotentialAssignment$1(java.lang.Object, java.lang.String)</inbound>
                <inbound type="feature" confirmed="yes">org.junit.experimental.theories.PotentialAssignment$1.getValue()</inbound>
                <inbound type="feature" confirmed="yes">org.junit.experimental.theories.PotentialAssignment$1.toString()</inbound>
            </feature>
        </class>
        <class confirmed="yes">
            <name>org.junit.experimental.theories.PotentialAssignment$CouldNotGenerateValueException</name>
            <outbound type="class" confirmed="no">java.lang.Exception</outbound>
            <inbound type="feature" confirmed="yes">org.junit.experimental.theories.PotentialAssignment$1.getDescription()</inbound>
            <inbound type="feature" confirmed="yes">org.junit.experimental.theories.PotentialAssignment$1.getValue()</inbound>
            <inbound type="feature" confirmed="yes">org.junit.experimental.theories.PotentialAssignment.getDescription()</inbound>
            <inbound type="feature" confirmed="yes">org.junit.experimental.theories.PotentialAssignment.getValue()</inbound>
            <inbound type="feature" confirmed="yes">org.junit.experimental.theories.Theories$TheoryAnchor$2.evaluate()</inbound>
            <inbound type="feature" confirmed="yes">org.junit.experimental.theories.internal.AllMembersSupplier$MethodParameterValue.getDescription()</inbound>
            <inbound type="feature" confirmed="yes">org.junit.experimental.theories.internal.AllMembersSupplier$MethodParameterValue.getValue()</inbound>
            <inbound type="feature" confirmed="yes">org.junit.experimental.theories.internal.Assignments.getActualValues(int, int, boolean)</inbound>
            <inbound type="feature" confirmed="yes">org.junit.experimental.theories.internal.Assignments.getAllArguments(boolean)</inbound>
            <inbound type="feature" confirmed="yes">org.junit.experimental.theories.internal.Assignments.getArgumentStrings(boolean)</inbound>
            <inbound type="feature" confirmed="yes">org.junit.experimental.theories.internal.Assignments.getConstructorArguments(boolean)</inbound>
            <inbound type="feature" confirmed="yes">org.junit.experimental.theories.internal.Assignments.getMethodArguments(boolean)</inbound>
            <feature confirmed="yes">
                <name>org.junit.experimental.theories.PotentialAssignment$CouldNotGenerateValueException.PotentialAssignment$CouldNotGenerateValueException()</name>
                <outbound type="feature" confirmed="no">java.lang.Exception.Exception()</outbound>
                <inbound type="feature" confirmed="yes">org.junit.experimental.theories.internal.AllMembersSupplier$MethodParameterValue.getValue()</inbound>
                <inbound type="feature" confirmed="yes">org.junit.experimental.theories.internal.Assignments.getActualValues(int, int, boolean)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.junit.experimental.theories.PotentialAssignment$CouldNotGenerateValueException.serialVersionUID</name>
            </feature>
        </class>
        <class confirmed="yes">
            <name>org.junit.experimental.theories.Theories</name>
            <outbound type="class" confirmed="yes">org.junit.runners.BlockJUnit4ClassRunner</outbound>
            <feature confirmed="yes">
                <name>org.junit.experimental.theories.Theories.Theories(java.lang.Class)</name>
                <outbound type="class" confirmed="no">java.lang.Class</outbound>
                <outbound type="feature" confirmed="yes">org.junit.runners.BlockJUnit4ClassRunner.BlockJUnit4ClassRunner(java.lang.Class)</outbound>
                <outbound type="class" confirmed="yes">org.junit.runners.model.InitializationError</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.junit.experimental.theories.Theories.collectInitializationErrors(java.util.List)</name>
                <outbound type="class" confirmed="no">java.util.List</outbound>
                <outbound type="feature" confirmed="yes">org.junit.experimental.theories.Theories.validateDataPointFields(java.util.List)</outbound>
                <outbound type="feature" confirmed="yes">org.junit.runners.BlockJUnit4ClassRunner.collectInitializationErrors(java.util.List)</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.junit.experimental.theories.Theories.computeTestMethods()</name>
                <outbound type="class" confirmed="no">java.lang.Class</outbound>
                <outbound type="class" confirmed="no">java.util.Collection</outbound>
                <outbound type="class" confirmed="no">java.util.List</outbound>
                <outbound type="feature" confirmed="no">java.util.List.addAll(java.util.Collection)</outbound>
                <outbound type="feature" confirmed="no">java.util.List.removeAll(java.util.Collection)</outbound>
                <outbound type="feature" confirmed="no">org.junit.experimental.theories.Theories.getTestClass()</outbound>
                <outbound type="class" confirmed="yes">org.junit.experimental.theories.Theory</outbound>
                <outbound type="feature" confirmed="yes">org.junit.runners.BlockJUnit4ClassRunner.computeTestMethods()</outbound>
                <outbound type="class" confirmed="yes">org.junit.runners.model.TestClass</outbound>
                <outbound type="feature" confirmed="yes">org.junit.runners.model.TestClass.getAnnotatedMethods(java.lang.Class)</outbound>
                <inbound type="feature" confirmed="yes">org.junit.experimental.theories.Theories.validateTestMethods(java.util.List)</inbound>
            </feature>
            <feature confirmed="no">
                <name>org.junit.experimental.theories.Theories.getTestClass()</name>
                <inbound type="feature" confirmed="yes">org.junit.experimental.theories.Theories.computeTestMethods()</inbound>
                <inbound type="feature" confirmed="yes">org.junit.experimental.theories.Theories.methodBlock(org.junit.runners.model.FrameworkMethod)</inbound>
                <inbound type="feature" confirmed="yes">org.junit.experimental.theories.Theories.validateDataPointFields(java.util.List)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.junit.experimental.theories.Theories.methodBlock(org.junit.runners.model.FrameworkMethod)</name>
                <outbound type="feature" confirmed="yes">org.junit.experimental.theories.Theories$TheoryAnchor.Theories$TheoryAnchor(org.junit.runners.model.FrameworkMethod, org.junit.runners.model.TestClass)</outbound>
                <outbound type="feature" confirmed="no">org.junit.experimental.theories.Theories.getTestClass()</outbound>
                <outbound type="class" confirmed="yes">org.junit.runners.model.FrameworkMethod</outbound>
                <outbound type="class" confirmed="yes">org.junit.runners.model.Statement</outbound>
                <outbound type="class" confirmed="yes">org.junit.runners.model.TestClass</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.junit.experimental.theories.Theories.validateConstructor(java.util.List)</name>
                <outbound type="class" confirmed="no">java.util.List</outbound>
                <outbound type="feature" confirmed="no">org.junit.experimental.theories.Theories.validateOnlyOneConstructor(java.util.List)</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.junit.experimental.theories.Theories.validateDataPointFields(java.util.List)</name>
                <outbound type="class" confirmed="no">java.lang.Class</outbound>
                <outbound type="feature" confirmed="no">java.lang.Class.getDeclaredFields()</outbound>
                <outbound type="feature" confirmed="no">java.lang.Error.Error(java.lang.String)</outbound>
                <outbound type="class" confirmed="no">java.lang.Object</outbound>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="class" confirmed="no">java.lang.StringBuilder</outbound>
                <outbound type="feature" confirmed="no">java.lang.StringBuilder.StringBuilder()</outbound>
                <outbound type="feature" confirmed="no">java.lang.StringBuilder.append(java.lang.String)</outbound>
                <outbound type="feature" confirmed="no">java.lang.StringBuilder.toString()</outbound>
                <outbound type="class" confirmed="no">java.lang.annotation.Annotation</outbound>
                <outbound type="class" confirmed="no">java.lang.reflect.Field</outbound>
                <outbound type="feature" confirmed="no">java.lang.reflect.Field.getAnnotation(java.lang.Class)</outbound>
                <outbound type="feature" confirmed="no">java.lang.reflect.Field.getModifiers()</outbound>
                <outbound type="feature" confirmed="no">java.lang.reflect.Field.getName()</outbound>
                <outbound type="feature" confirmed="no">java.lang.reflect.Modifier.isStatic(int)</outbound>
                <outbound type="class" confirmed="no">java.util.List</outbound>
                <outbound type="feature" confirmed="no">java.util.List.add(java.lang.Object)</outbound>
                <outbound type="class" confirmed="yes">org.junit.experimental.theories.DataPoint</outbound>
                <outbound type="feature" confirmed="no">org.junit.experimental.theories.Theories.getTestClass()</outbound>
                <outbound type="class" confirmed="yes">org.junit.runners.model.TestClass</outbound>
                <outbound type="feature" confirmed="yes">org.junit.runners.model.TestClass.getJavaClass()</outbound>
                <inbound type="feature" confirmed="yes">org.junit.experimental.theories.Theories.collectInitializationErrors(java.util.List)</inbound>
            </feature>
            <feature confirmed="no">
                <name>org.junit.experimental.theories.Theories.validateOnlyOneConstructor(java.util.List)</name>
                <inbound type="feature" confirmed="yes">org.junit.experimental.theories.Theories.validateConstructor(java.util.List)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.junit.experimental.theories.Theories.validateTestMethods(java.util.List)</name>
                <outbound type="class" confirmed="no">java.lang.Class</outbound>
                <outbound type="class" confirmed="no">java.lang.Object</outbound>
                <outbound type="class" confirmed="no">java.lang.annotation.Annotation</outbound>
                <outbound type="class" confirmed="no">java.util.Iterator</outbound>
                <outbound type="feature" confirmed="no">java.util.Iterator.hasNext()</outbound>
                <outbound type="feature" confirmed="no">java.util.Iterator.next()</outbound>
                <outbound type="class" confirmed="no">java.util.List</outbound>
                <outbound type="feature" confirmed="no">java.util.List.iterator()</outbound>
                <outbound type="feature" confirmed="yes">org.junit.experimental.theories.Theories.computeTestMethods()</outbound>
                <outbound type="class" confirmed="yes">org.junit.experimental.theories.Theory</outbound>
                <outbound type="class" confirmed="yes">org.junit.runners.model.FrameworkMethod</outbound>
                <outbound type="feature" confirmed="yes">org.junit.runners.model.FrameworkMethod.getAnnotation(java.lang.Class)</outbound>
                <outbound type="feature" confirmed="yes">org.junit.runners.model.FrameworkMethod.validatePublicVoid(boolean, java.util.List)</outbound>
                <outbound type="feature" confirmed="yes">org.junit.runners.model.FrameworkMethod.validatePublicVoidNoArg(boolean, java.util.List)</outbound>
            </feature>
        </class>
        <class confirmed="yes">
            <name>org.junit.experimental.theories.Theories$TheoryAnchor</name>
            <outbound type="class" confirmed="yes">org.junit.runners.model.Statement</outbound>
            <inbound type="feature" confirmed="yes">org.junit.experimental.theories.Theories$TheoryAnchor$1$1.evaluate()</inbound>
            <inbound type="feature" confirmed="yes">org.junit.experimental.theories.Theories$TheoryAnchor$1.Theories$TheoryAnchor$1(org.junit.experimental.theories.Theories$TheoryAnchor, java.lang.Class, org.junit.experimental.theories.internal.Assignments)</inbound>
            <inbound type="feature" confirmed="yes">org.junit.experimental.theories.Theories$TheoryAnchor$1.createTest()</inbound>
            <inbound type="feature" confirmed="yes">org.junit.experimental.theories.Theories$TheoryAnchor$1.methodInvoker(org.junit.runners.model.FrameworkMethod, java.lang.Object)</inbound>
            <inbound type="feature" confirmed="yes">org.junit.experimental.theories.Theories$TheoryAnchor$1.this$0</inbound>
            <inbound type="feature" confirmed="yes">org.junit.experimental.theories.Theories$TheoryAnchor$2.Theories$TheoryAnchor$2(org.junit.experimental.theories.Theories$TheoryAnchor, org.junit.experimental.theories.internal.Assignments, org.junit.runners.model.FrameworkMethod, java.lang.Object)</inbound>
            <inbound type="feature" confirmed="yes">org.junit.experimental.theories.Theories$TheoryAnchor$2.evaluate()</inbound>
            <inbound type="feature" confirmed="yes">org.junit.experimental.theories.Theories$TheoryAnchor$2.this$0</inbound>
            <feature confirmed="yes">
                <name>org.junit.experimental.theories.Theories$TheoryAnchor.Theories$TheoryAnchor(org.junit.runners.model.FrameworkMethod, org.junit.runners.model.TestClass)</name>
                <outbound type="feature" confirmed="no">java.util.ArrayList.ArrayList()</outbound>
                <outbound type="class" confirmed="no">java.util.List</outbound>
                <outbound type="feature" confirmed="yes">org.junit.experimental.theories.Theories$TheoryAnchor.fInvalidParameters</outbound>
                <outbound type="feature" confirmed="yes">org.junit.experimental.theories.Theories$TheoryAnchor.fTestClass</outbound>
                <outbound type="feature" confirmed="yes">org.junit.experimental.theories.Theories$TheoryAnchor.fTestMethod</outbound>
                <outbound type="feature" confirmed="yes">org.junit.experimental.theories.Theories$TheoryAnchor.successes</outbound>
                <outbound type="class" confirmed="yes">org.junit.runners.model.FrameworkMethod</outbound>
                <outbound type="feature" confirmed="yes">org.junit.runners.model.Statement.Statement()</outbound>
                <outbound type="class" confirmed="yes">org.junit.runners.model.TestClass</outbound>
                <inbound type="feature" confirmed="yes">org.junit.experimental.theories.Theories.methodBlock(org.junit.runners.model.FrameworkMethod)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.junit.experimental.theories.Theories$TheoryAnchor.access$000(org.junit.experimental.theories.Theories$TheoryAnchor)</name>
                <outbound type="feature" confirmed="yes">org.junit.experimental.theories.Theories$TheoryAnchor.nullsOk()</outbound>
                <inbound type="feature" confirmed="yes">org.junit.experimental.theories.Theories$TheoryAnchor$1$1.evaluate()</inbound>
                <inbound type="feature" confirmed="yes">org.junit.experimental.theories.Theories$TheoryAnchor$1.createTest()</inbound>
                <inbound type="feature" confirmed="yes">org.junit.experimental.theories.Theories$TheoryAnchor$2.evaluate()</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.junit.experimental.theories.Theories$TheoryAnchor.access$100(org.junit.experimental.theories.Theories$TheoryAnchor, org.junit.runners.model.FrameworkMethod, org.junit.experimental.theories.internal.Assignments, java.lang.Object)</name>
                <outbound type="class" confirmed="no">java.lang.Object</outbound>
                <outbound type="feature" confirmed="yes">org.junit.experimental.theories.Theories$TheoryAnchor.methodCompletesWithParameters(org.junit.runners.model.FrameworkMethod, org.junit.experimental.theories.internal.Assignments, java.lang.Object)</outbound>
                <outbound type="class" confirmed="yes">org.junit.experimental.theories.internal.Assignments</outbound>
                <outbound type="class" confirmed="yes">org.junit.runners.model.FrameworkMethod</outbound>
                <outbound type="class" confirmed="yes">org.junit.runners.model.Statement</outbound>
                <inbound type="feature" confirmed="yes">org.junit.experimental.theories.Theories$TheoryAnchor$1.methodInvoker(org.junit.runners.model.FrameworkMethod, java.lang.Object)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.junit.experimental.theories.Theories$TheoryAnchor.evaluate()</name>
                <outbound type="class" confirmed="no">java.lang.Object</outbound>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="class" confirmed="no">java.lang.StringBuilder</outbound>
                <outbound type="feature" confirmed="no">java.lang.StringBuilder.StringBuilder()</outbound>
                <outbound type="feature" confirmed="no">java.lang.StringBuilder.append(java.lang.Object)</outbound>
                <outbound type="feature" confirmed="no">java.lang.StringBuilder.append(java.lang.String)</outbound>
                <outbound type="feature" confirmed="no">java.lang.StringBuilder.toString()</outbound>
                <outbound type="class" confirmed="no">java.lang.Throwable</outbound>
                <outbound type="class" confirmed="no">java.lang.reflect.Method</outbound>
                <outbound type="class" confirmed="no">java.util.List</outbound>
                <outbound type="feature" confirmed="yes">org.junit.Assert.fail(java.lang.String)</outbound>
                <outbound type="feature" confirmed="yes">org.junit.experimental.theories.Theories$TheoryAnchor.fInvalidParameters</outbound>
                <outbound type="feature" confirmed="yes">org.junit.experimental.theories.Theories$TheoryAnchor.fTestMethod</outbound>
                <outbound type="feature" confirmed="yes">org.junit.experimental.theories.Theories$TheoryAnchor.getTestClass()</outbound>
                <outbound type="feature" confirmed="yes">org.junit.experimental.theories.Theories$TheoryAnchor.runWithAssignment(org.junit.experimental.theories.internal.Assignments)</outbound>
                <outbound type="feature" confirmed="yes">org.junit.experimental.theories.Theories$TheoryAnchor.successes</outbound>
                <outbound type="class" confirmed="yes">org.junit.experimental.theories.internal.Assignments</outbound>
                <outbound type="feature" confirmed="yes">org.junit.experimental.theories.internal.Assignments.allUnassigned(java.lang.reflect.Method, org.junit.runners.model.TestClass)</outbound>
                <outbound type="class" confirmed="yes">org.junit.runners.model.FrameworkMethod</outbound>
                <outbound type="feature" confirmed="yes">org.junit.runners.model.FrameworkMethod.getMethod()</outbound>
                <outbound type="class" confirmed="yes">org.junit.runners.model.TestClass</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.junit.experimental.theories.Theories$TheoryAnchor.fInvalidParameters</name>
                <outbound type="class" confirmed="no">java.util.List</outbound>
                <inbound type="feature" confirmed="yes">org.junit.experimental.theories.Theories$TheoryAnchor.Theories$TheoryAnchor(org.junit.runners.model.FrameworkMethod, org.junit.runners.model.TestClass)</inbound>
                <inbound type="feature" confirmed="yes">org.junit.experimental.theories.Theories$TheoryAnchor.evaluate()</inbound>
                <inbound type="feature" confirmed="yes">org.junit.experimental.theories.Theories$TheoryAnchor.handleAssumptionViolation(org.junit.internal.AssumptionViolatedException)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.junit.experimental.theories.Theories$TheoryAnchor.fTestClass</name>
                <outbound type="class" confirmed="yes">org.junit.runners.model.TestClass</outbound>
                <inbound type="feature" confirmed="yes">org.junit.experimental.theories.Theories$TheoryAnchor.Theories$TheoryAnchor(org.junit.runners.model.FrameworkMethod, org.junit.runners.model.TestClass)</inbound>
                <inbound type="feature" confirmed="yes">org.junit.experimental.theories.Theories$TheoryAnchor.getTestClass()</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.junit.experimental.theories.Theories$TheoryAnchor.fTestMethod</name>
                <outbound type="class" confirmed="yes">org.junit.runners.model.FrameworkMethod</outbound>
                <inbound type="feature" confirmed="yes">org.junit.experimental.theories.Theories$TheoryAnchor.Theories$TheoryAnchor(org.junit.runners.model.FrameworkMethod, org.junit.runners.model.TestClass)</inbound>
                <inbound type="feature" confirmed="yes">org.junit.experimental.theories.Theories$TheoryAnchor.evaluate()</inbound>
                <inbound type="feature" confirmed="yes">org.junit.experimental.theories.Theories$TheoryAnchor.nullsOk()</inbound>
                <inbound type="feature" confirmed="yes">org.junit.experimental.theories.Theories$TheoryAnchor.reportParameterizedError(java.lang.Throwable, java.lang.Object[])</inbound>
                <inbound type="feature" confirmed="yes">org.junit.experimental.theories.Theories$TheoryAnchor.runWithCompleteAssignment(org.junit.experimental.theories.internal.Assignments)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.junit.experimental.theories.Theories$TheoryAnchor.getTestClass()</name>
                <outbound type="feature" confirmed="yes">org.junit.experimental.theories.Theories$TheoryAnchor.fTestClass</outbound>
                <outbound type="class" confirmed="yes">org.junit.runners.model.TestClass</outbound>
                <inbound type="feature" confirmed="yes">org.junit.experimental.theories.Theories$TheoryAnchor.evaluate()</inbound>
                <inbound type="feature" confirmed="yes">org.junit.experimental.theories.Theories$TheoryAnchor.runWithCompleteAssignment(org.junit.experimental.theories.internal.Assignments)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.junit.experimental.theories.Theories$TheoryAnchor.handleAssumptionViolation(org.junit.internal.AssumptionViolatedException)</name>
                <outbound type="class" confirmed="no">java.lang.Object</outbound>
                <outbound type="class" confirmed="no">java.util.List</outbound>
                <outbound type="feature" confirmed="no">java.util.List.add(java.lang.Object)</outbound>
                <outbound type="feature" confirmed="yes">org.junit.experimental.theories.Theories$TheoryAnchor.fInvalidParameters</outbound>
                <outbound type="class" confirmed="yes">org.junit.internal.AssumptionViolatedException</outbound>
                <inbound type="feature" confirmed="yes">org.junit.experimental.theories.Theories$TheoryAnchor$1$1.evaluate()</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.junit.experimental.theories.Theories$TheoryAnchor.handleDataPointSuccess()</name>
                <outbound type="feature" confirmed="yes">org.junit.experimental.theories.Theories$TheoryAnchor.successes</outbound>
                <inbound type="feature" confirmed="yes">org.junit.experimental.theories.Theories$TheoryAnchor$1$1.evaluate()</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.junit.experimental.theories.Theories$TheoryAnchor.methodCompletesWithParameters(org.junit.runners.model.FrameworkMethod, org.junit.experimental.theories.internal.Assignments, java.lang.Object)</name>
                <outbound type="class" confirmed="no">java.lang.Object</outbound>
                <outbound type="feature" confirmed="yes">org.junit.experimental.theories.Theories$TheoryAnchor$2.Theories$TheoryAnchor$2(org.junit.experimental.theories.Theories$TheoryAnchor, org.junit.experimental.theories.internal.Assignments, org.junit.runners.model.FrameworkMethod, java.lang.Object)</outbound>
                <outbound type="class" confirmed="yes">org.junit.experimental.theories.internal.Assignments</outbound>
                <outbound type="class" confirmed="yes">org.junit.runners.model.FrameworkMethod</outbound>
                <outbound type="class" confirmed="yes">org.junit.runners.model.Statement</outbound>
                <inbound type="feature" confirmed="yes">org.junit.experimental.theories.Theories$TheoryAnchor.access$100(org.junit.experimental.theories.Theories$TheoryAnchor, org.junit.runners.model.FrameworkMethod, org.junit.experimental.theories.internal.Assignments, java.lang.Object)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.junit.experimental.theories.Theories$TheoryAnchor.nullsOk()</name>
                <outbound type="class" confirmed="no">java.lang.Class</outbound>
                <outbound type="class" confirmed="no">java.lang.annotation.Annotation</outbound>
                <outbound type="class" confirmed="no">java.lang.reflect.Method</outbound>
                <outbound type="feature" confirmed="no">java.lang.reflect.Method.getAnnotation(java.lang.Class)</outbound>
                <outbound type="feature" confirmed="yes">org.junit.experimental.theories.Theories$TheoryAnchor.fTestMethod</outbound>
                <outbound type="class" confirmed="yes">org.junit.experimental.theories.Theory</outbound>
                <outbound type="feature" confirmed="yes">org.junit.experimental.theories.Theory.nullsAccepted()</outbound>
                <outbound type="class" confirmed="yes">org.junit.runners.model.FrameworkMethod</outbound>
                <outbound type="feature" confirmed="yes">org.junit.runners.model.FrameworkMethod.getMethod()</outbound>
                <inbound type="feature" confirmed="yes">org.junit.experimental.theories.Theories$TheoryAnchor.access$000(org.junit.experimental.theories.Theories$TheoryAnchor)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.junit.experimental.theories.Theories$TheoryAnchor.reportParameterizedError(java.lang.Throwable, java.lang.Object[])</name>
                <outbound type="class" confirmed="no">java.lang.Object</outbound>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="class" confirmed="no">java.lang.Throwable</outbound>
                <outbound type="feature" confirmed="yes">org.junit.experimental.theories.Theories$TheoryAnchor.fTestMethod</outbound>
                <outbound type="feature" confirmed="yes">org.junit.experimental.theories.internal.ParameterizedAssertionError.ParameterizedAssertionError(java.lang.Throwable, java.lang.String, java.lang.Object[])</outbound>
                <outbound type="class" confirmed="yes">org.junit.runners.model.FrameworkMethod</outbound>
                <outbound type="feature" confirmed="yes">org.junit.runners.model.FrameworkMethod.getName()</outbound>
                <inbound type="feature" confirmed="yes">org.junit.experimental.theories.Theories$TheoryAnchor$1$1.evaluate()</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.junit.experimental.theories.Theories$TheoryAnchor.runWithAssignment(org.junit.experimental.theories.internal.Assignments)</name>
                <outbound type="class" confirmed="no">java.lang.Throwable</outbound>
                <outbound type="feature" confirmed="yes">org.junit.experimental.theories.Theories$TheoryAnchor.runWithCompleteAssignment(org.junit.experimental.theories.internal.Assignments)</outbound>
                <outbound type="feature" confirmed="yes">org.junit.experimental.theories.Theories$TheoryAnchor.runWithIncompleteAssignment(org.junit.experimental.theories.internal.Assignments)</outbound>
                <outbound type="class" confirmed="yes">org.junit.experimental.theories.internal.Assignments</outbound>
                <outbound type="feature" confirmed="yes">org.junit.experimental.theories.internal.Assignments.isComplete()</outbound>
                <inbound type="feature" confirmed="yes">org.junit.experimental.theories.Theories$TheoryAnchor.evaluate()</inbound>
                <inbound type="feature" confirmed="yes">org.junit.experimental.theories.Theories$TheoryAnchor.runWithIncompleteAssignment(org.junit.experimental.theories.internal.Assignments)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.junit.experimental.theories.Theories$TheoryAnchor.runWithCompleteAssignment(org.junit.experimental.theories.internal.Assignments)</name>
                <outbound type="class" confirmed="no">java.lang.Class</outbound>
                <outbound type="class" confirmed="no">java.lang.IllegalAccessException</outbound>
                <outbound type="class" confirmed="no">java.lang.InstantiationException</outbound>
                <outbound type="class" confirmed="no">java.lang.NoSuchMethodException</outbound>
                <outbound type="class" confirmed="no">java.lang.Throwable</outbound>
                <outbound type="class" confirmed="no">java.lang.reflect.InvocationTargetException</outbound>
                <outbound type="feature" confirmed="yes">org.junit.experimental.theories.Theories$TheoryAnchor$1.Theories$TheoryAnchor$1(org.junit.experimental.theories.Theories$TheoryAnchor, java.lang.Class, org.junit.experimental.theories.internal.Assignments)</outbound>
                <outbound type="feature" confirmed="yes">org.junit.experimental.theories.Theories$TheoryAnchor$1.methodBlock(org.junit.runners.model.FrameworkMethod)</outbound>
                <outbound type="feature" confirmed="yes">org.junit.experimental.theories.Theories$TheoryAnchor.fTestMethod</outbound>
                <outbound type="feature" confirmed="yes">org.junit.experimental.theories.Theories$TheoryAnchor.getTestClass()</outbound>
                <outbound type="class" confirmed="yes">org.junit.experimental.theories.internal.Assignments</outbound>
                <outbound type="class" confirmed="yes">org.junit.runners.model.FrameworkMethod</outbound>
                <outbound type="class" confirmed="yes">org.junit.runners.model.Statement</outbound>
                <outbound type="feature" confirmed="yes">org.junit.runners.model.Statement.evaluate()</outbound>
                <outbound type="class" confirmed="yes">org.junit.runners.model.TestClass</outbound>
                <outbound type="feature" confirmed="yes">org.junit.runners.model.TestClass.getJavaClass()</outbound>
                <inbound type="feature" confirmed="yes">org.junit.experimental.theories.Theories$TheoryAnchor.runWithAssignment(org.junit.experimental.theories.internal.Assignments)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.junit.experimental.theories.Theories$TheoryAnchor.runWithIncompleteAssignment(org.junit.experimental.theories.internal.Assignments)</name>
                <outbound type="class" confirmed="no">java.lang.IllegalAccessException</outbound>
                <outbound type="class" confirmed="no">java.lang.InstantiationException</outbound>
                <outbound type="class" confirmed="no">java.lang.Object</outbound>
                <outbound type="class" confirmed="no">java.lang.Throwable</outbound>
                <outbound type="class" confirmed="no">java.util.Iterator</outbound>
                <outbound type="feature" confirmed="no">java.util.Iterator.hasNext()</outbound>
                <outbound type="feature" confirmed="no">java.util.Iterator.next()</outbound>
                <outbound type="class" confirmed="no">java.util.List</outbound>
                <outbound type="feature" confirmed="no">java.util.List.iterator()</outbound>
                <outbound type="class" confirmed="yes">org.junit.experimental.theories.PotentialAssignment</outbound>
                <outbound type="feature" confirmed="yes">org.junit.experimental.theories.Theories$TheoryAnchor.runWithAssignment(org.junit.experimental.theories.internal.Assignments)</outbound>
                <outbound type="class" confirmed="yes">org.junit.experimental.theories.internal.Assignments</outbound>
                <outbound type="feature" confirmed="yes">org.junit.experimental.theories.internal.Assignments.assignNext(org.junit.experimental.theories.PotentialAssignment)</outbound>
                <outbound type="feature" confirmed="yes">org.junit.experimental.theories.internal.Assignments.potentialsForNextUnassigned()</outbound>
                <inbound type="feature" confirmed="yes">org.junit.experimental.theories.Theories$TheoryAnchor.runWithAssignment(org.junit.experimental.theories.internal.Assignments)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.junit.experimental.theories.Theories$TheoryAnchor.successes</name>
                <inbound type="feature" confirmed="yes">org.junit.experimental.theories.Theories$TheoryAnchor.Theories$TheoryAnchor(org.junit.runners.model.FrameworkMethod, org.junit.runners.model.TestClass)</inbound>
                <inbound type="feature" confirmed="yes">org.junit.experimental.theories.Theories$TheoryAnchor.evaluate()</inbound>
                <inbound type="feature" confirmed="yes">org.junit.experimental.theories.Theories$TheoryAnchor.handleDataPointSuccess()</inbound>
            </feature>
        </class>
        <class confirmed="yes">
            <name>org.junit.experimental.theories.Theories$TheoryAnchor$1</name>
            <outbound type="class" confirmed="yes">org.junit.runners.BlockJUnit4ClassRunner</outbound>
            <inbound type="feature" confirmed="yes">org.junit.experimental.theories.Theories$TheoryAnchor$1$1.Theories$TheoryAnchor$1$1(org.junit.experimental.theories.Theories$TheoryAnchor$1, org.junit.runners.model.Statement)</inbound>
            <inbound type="feature" confirmed="yes">org.junit.experimental.theories.Theories$TheoryAnchor$1$1.evaluate()</inbound>
            <inbound type="feature" confirmed="yes">org.junit.experimental.theories.Theories$TheoryAnchor$1$1.this$1</inbound>
            <feature confirmed="yes">
                <name>org.junit.experimental.theories.Theories$TheoryAnchor$1.Theories$TheoryAnchor$1(org.junit.experimental.theories.Theories$TheoryAnchor, java.lang.Class, org.junit.experimental.theories.internal.Assignments)</name>
                <outbound type="class" confirmed="no">java.lang.Class</outbound>
                <outbound type="class" confirmed="yes">org.junit.experimental.theories.Theories$TheoryAnchor</outbound>
                <outbound type="feature" confirmed="yes">org.junit.experimental.theories.Theories$TheoryAnchor$1.this$0</outbound>
                <outbound type="feature" confirmed="yes">org.junit.experimental.theories.Theories$TheoryAnchor$1.val$complete</outbound>
                <outbound type="class" confirmed="yes">org.junit.experimental.theories.internal.Assignments</outbound>
                <outbound type="feature" confirmed="yes">org.junit.runners.BlockJUnit4ClassRunner.BlockJUnit4ClassRunner(java.lang.Class)</outbound>
                <inbound type="feature" confirmed="yes">org.junit.experimental.theories.Theories$TheoryAnchor.runWithCompleteAssignment(org.junit.experimental.theories.internal.Assignments)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.junit.experimental.theories.Theories$TheoryAnchor$1.collectInitializationErrors(java.util.List)</name>
                <outbound type="class" confirmed="no">java.util.List</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.junit.experimental.theories.Theories$TheoryAnchor$1.createTest()</name>
                <outbound type="class" confirmed="no">java.lang.Exception</outbound>
                <outbound type="class" confirmed="no">java.lang.Object</outbound>
                <outbound type="class" confirmed="no">java.lang.reflect.Constructor</outbound>
                <outbound type="feature" confirmed="no">java.lang.reflect.Constructor.newInstance(java.lang.Object[])</outbound>
                <outbound type="class" confirmed="yes">org.junit.experimental.theories.Theories$TheoryAnchor</outbound>
                <outbound type="feature" confirmed="no">org.junit.experimental.theories.Theories$TheoryAnchor$1.getTestClass()</outbound>
                <outbound type="feature" confirmed="yes">org.junit.experimental.theories.Theories$TheoryAnchor$1.this$0</outbound>
                <outbound type="feature" confirmed="yes">org.junit.experimental.theories.Theories$TheoryAnchor$1.val$complete</outbound>
                <outbound type="feature" confirmed="yes">org.junit.experimental.theories.Theories$TheoryAnchor.access$000(org.junit.experimental.theories.Theories$TheoryAnchor)</outbound>
                <outbound type="class" confirmed="yes">org.junit.experimental.theories.internal.Assignments</outbound>
                <outbound type="feature" confirmed="yes">org.junit.experimental.theories.internal.Assignments.getConstructorArguments(boolean)</outbound>
                <outbound type="class" confirmed="yes">org.junit.runners.model.TestClass</outbound>
                <outbound type="feature" confirmed="yes">org.junit.runners.model.TestClass.getOnlyConstructor()</outbound>
            </feature>
            <feature confirmed="no">
                <name>org.junit.experimental.theories.Theories$TheoryAnchor$1.getTestClass()</name>
                <inbound type="feature" confirmed="yes">org.junit.experimental.theories.Theories$TheoryAnchor$1.createTest()</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.junit.experimental.theories.Theories$TheoryAnchor$1.methodBlock(org.junit.runners.model.FrameworkMethod)</name>
                <outbound type="feature" confirmed="yes">org.junit.experimental.theories.Theories$TheoryAnchor$1$1.Theories$TheoryAnchor$1$1(org.junit.experimental.theories.Theories$TheoryAnchor$1, org.junit.runners.model.Statement)</outbound>
                <outbound type="feature" confirmed="yes">org.junit.runners.BlockJUnit4ClassRunner.methodBlock(org.junit.runners.model.FrameworkMethod)</outbound>
                <outbound type="class" confirmed="yes">org.junit.runners.model.FrameworkMethod</outbound>
                <outbound type="class" confirmed="yes">org.junit.runners.model.Statement</outbound>
                <inbound type="feature" confirmed="yes">org.junit.experimental.theories.Theories$TheoryAnchor.runWithCompleteAssignment(org.junit.experimental.theories.internal.Assignments)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.junit.experimental.theories.Theories$TheoryAnchor$1.methodInvoker(org.junit.runners.model.FrameworkMethod, java.lang.Object)</name>
                <outbound type="class" confirmed="no">java.lang.Object</outbound>
                <outbound type="class" confirmed="yes">org.junit.experimental.theories.Theories$TheoryAnchor</outbound>
                <outbound type="feature" confirmed="yes">org.junit.experimental.theories.Theories$TheoryAnchor$1.this$0</outbound>
                <outbound type="feature" confirmed="yes">org.junit.experimental.theories.Theories$TheoryAnchor$1.val$complete</outbound>
                <outbound type="feature" confirmed="yes">org.junit.experimental.theories.Theories$TheoryAnchor.access$100(org.junit.experimental.theories.Theories$TheoryAnchor, org.junit.runners.model.FrameworkMethod, org.junit.experimental.theories.internal.Assignments, java.lang.Object)</outbound>
                <outbound type="class" confirmed="yes">org.junit.experimental.theories.internal.Assignments</outbound>
                <outbound type="class" confirmed="yes">org.junit.runners.model.FrameworkMethod</outbound>
                <outbound type="class" confirmed="yes">org.junit.runners.model.Statement</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.junit.experimental.theories.Theories$TheoryAnchor$1.this$0</name>
                <outbound type="class" confirmed="yes">org.junit.experimental.theories.Theories$TheoryAnchor</outbound>
                <inbound type="feature" confirmed="yes">org.junit.experimental.theories.Theories$TheoryAnchor$1$1.evaluate()</inbound>
                <inbound type="feature" confirmed="yes">org.junit.experimental.theories.Theories$TheoryAnchor$1.Theories$TheoryAnchor$1(org.junit.experimental.theories.Theories$TheoryAnchor, java.lang.Class, org.junit.experimental.theories.internal.Assignments)</inbound>
                <inbound type="feature" confirmed="yes">org.junit.experimental.theories.Theories$TheoryAnchor$1.createTest()</inbound>
                <inbound type="feature" confirmed="yes">org.junit.experimental.theories.Theories$TheoryAnchor$1.methodInvoker(org.junit.runners.model.FrameworkMethod, java.lang.Object)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.junit.experimental.theories.Theories$TheoryAnchor$1.val$complete</name>
                <outbound type="class" confirmed="yes">org.junit.experimental.theories.internal.Assignments</outbound>
                <inbound type="feature" confirmed="yes">org.junit.experimental.theories.Theories$TheoryAnchor$1$1.evaluate()</inbound>
                <inbound type="feature" confirmed="yes">org.junit.experimental.theories.Theories$TheoryAnchor$1.Theories$TheoryAnchor$1(org.junit.experimental.theories.Theories$TheoryAnchor, java.lang.Class, org.junit.experimental.theories.internal.Assignments)</inbound>
                <inbound type="feature" confirmed="yes">org.junit.experimental.theories.Theories$TheoryAnchor$1.createTest()</inbound>
                <inbound type="feature" confirmed="yes">org.junit.experimental.theories.Theories$TheoryAnchor$1.methodInvoker(org.junit.runners.model.FrameworkMethod, java.lang.Object)</inbound>
            </feature>
        </class>
        <class confirmed="yes">
            <name>org.junit.experimental.theories.Theories$TheoryAnchor$1$1</name>
            <outbound type="class" confirmed="yes">org.junit.runners.model.Statement</outbound>
            <feature confirmed="yes">
                <name>org.junit.experimental.theories.Theories$TheoryAnchor$1$1.Theories$TheoryAnchor$1$1(org.junit.experimental.theories.Theories$TheoryAnchor$1, org.junit.runners.model.Statement)</name>
                <outbound type="class" confirmed="yes">org.junit.experimental.theories.Theories$TheoryAnchor$1</outbound>
                <outbound type="feature" confirmed="yes">org.junit.experimental.theories.Theories$TheoryAnchor$1$1.this$1</outbound>
                <outbound type="feature" confirmed="yes">org.junit.experimental.theories.Theories$TheoryAnchor$1$1.val$statement</outbound>
                <outbound type="class" confirmed="yes">org.junit.runners.model.Statement</outbound>
                <outbound type="feature" confirmed="yes">org.junit.runners.model.Statement.Statement()</outbound>
                <inbound type="feature" confirmed="yes">org.junit.experimental.theories.Theories$TheoryAnchor$1.methodBlock(org.junit.runners.model.FrameworkMethod)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.junit.experimental.theories.Theories$TheoryAnchor$1$1.evaluate()</name>
                <outbound type="class" confirmed="no">java.lang.Object</outbound>
                <outbound type="class" confirmed="no">java.lang.Throwable</outbound>
                <outbound type="class" confirmed="yes">org.junit.experimental.theories.Theories$TheoryAnchor</outbound>
                <outbound type="class" confirmed="yes">org.junit.experimental.theories.Theories$TheoryAnchor$1</outbound>
                <outbound type="feature" confirmed="yes">org.junit.experimental.theories.Theories$TheoryAnchor$1$1.this$1</outbound>
                <outbound type="feature" confirmed="yes">org.junit.experimental.theories.Theories$TheoryAnchor$1$1.val$statement</outbound>
                <outbound type="feature" confirmed="yes">org.junit.experimental.theories.Theories$TheoryAnchor$1.this$0</outbound>
                <outbound type="feature" confirmed="yes">org.junit.experimental.theories.Theories$TheoryAnchor$1.val$complete</outbound>
                <outbound type="feature" confirmed="yes">org.junit.experimental.theories.Theories$TheoryAnchor.access$000(org.junit.experimental.theories.Theories$TheoryAnchor)</outbound>
                <outbound type="feature" confirmed="yes">org.junit.experimental.theories.Theories$TheoryAnchor.handleAssumptionViolation(org.junit.internal.AssumptionViolatedException)</outbound>
                <outbound type="feature" confirmed="yes">org.junit.experimental.theories.Theories$TheoryAnchor.handleDataPointSuccess()</outbound>
                <outbound type="feature" confirmed="yes">org.junit.experimental.theories.Theories$TheoryAnchor.reportParameterizedError(java.lang.Throwable, java.lang.Object[])</outbound>
                <outbound type="class" confirmed="yes">org.junit.experimental.theories.internal.Assignments</outbound>
                <outbound type="feature" confirmed="yes">org.junit.experimental.theories.internal.Assignments.getArgumentStrings(boolean)</outbound>
                <outbound type="class" confirmed="yes">org.junit.internal.AssumptionViolatedException</outbound>
                <outbound type="class" confirmed="yes">org.junit.runners.model.Statement</outbound>
                <outbound type="feature" confirmed="yes">org.junit.runners.model.Statement.evaluate()</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.junit.experimental.theories.Theories$TheoryAnchor$1$1.this$1</name>
                <outbound type="class" confirmed="yes">org.junit.experimental.theories.Theories$TheoryAnchor$1</outbound>
                <inbound type="feature" confirmed="yes">org.junit.experimental.theories.Theories$TheoryAnchor$1$1.Theories$TheoryAnchor$1$1(org.junit.experimental.theories.Theories$TheoryAnchor$1, org.junit.runners.model.Statement)</inbound>
                <inbound type="feature" confirmed="yes">org.junit.experimental.theories.Theories$TheoryAnchor$1$1.evaluate()</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.junit.experimental.theories.Theories$TheoryAnchor$1$1.val$statement</name>
                <outbound type="class" confirmed="yes">org.junit.runners.model.Statement</outbound>
                <inbound type="feature" confirmed="yes">org.junit.experimental.theories.Theories$TheoryAnchor$1$1.Theories$TheoryAnchor$1$1(org.junit.experimental.theories.Theories$TheoryAnchor$1, org.junit.runners.model.Statement)</inbound>
                <inbound type="feature" confirmed="yes">org.junit.experimental.theories.Theories$TheoryAnchor$1$1.evaluate()</inbound>
            </feature>
        </class>
        <class confirmed="yes">
            <name>org.junit.experimental.theories.Theories$TheoryAnchor$2</name>
            <outbound type="class" confirmed="yes">org.junit.runners.model.Statement</outbound>
            <feature confirmed="yes">
                <name>org.junit.experimental.theories.Theories$TheoryAnchor$2.Theories$TheoryAnchor$2(org.junit.experimental.theories.Theories$TheoryAnchor, org.junit.experimental.theories.internal.Assignments, org.junit.runners.model.FrameworkMethod, java.lang.Object)</name>
                <outbound type="class" confirmed="no">java.lang.Object</outbound>
                <outbound type="class" confirmed="yes">org.junit.experimental.theories.Theories$TheoryAnchor</outbound>
                <outbound type="feature" confirmed="yes">org.junit.experimental.theories.Theories$TheoryAnchor$2.this$0</outbound>
                <outbound type="feature" confirmed="yes">org.junit.experimental.theories.Theories$TheoryAnchor$2.val$complete</outbound>
                <outbound type="feature" confirmed="yes">org.junit.experimental.theories.Theories$TheoryAnchor$2.val$freshInstance</outbound>
                <outbound type="feature" confirmed="yes">org.junit.experimental.theories.Theories$TheoryAnchor$2.val$method</outbound>
                <outbound type="class" confirmed="yes">org.junit.experimental.theories.internal.Assignments</outbound>
                <outbound type="class" confirmed="yes">org.junit.runners.model.FrameworkMethod</outbound>
                <outbound type="feature" confirmed="yes">org.junit.runners.model.Statement.Statement()</outbound>
                <inbound type="feature" confirmed="yes">org.junit.experimental.theories.Theories$TheoryAnchor.methodCompletesWithParameters(org.junit.runners.model.FrameworkMethod, org.junit.experimental.theories.internal.Assignments, java.lang.Object)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.junit.experimental.theories.Theories$TheoryAnchor$2.evaluate()</name>
                <outbound type="class" confirmed="no">java.lang.Object</outbound>
                <outbound type="class" confirmed="no">java.lang.Throwable</outbound>
                <outbound type="class" confirmed="yes">org.junit.experimental.theories.PotentialAssignment$CouldNotGenerateValueException</outbound>
                <outbound type="class" confirmed="yes">org.junit.experimental.theories.Theories$TheoryAnchor</outbound>
                <outbound type="feature" confirmed="yes">org.junit.experimental.theories.Theories$TheoryAnchor$2.this$0</outbound>
                <outbound type="feature" confirmed="yes">org.junit.experimental.theories.Theories$TheoryAnchor$2.val$complete</outbound>
                <outbound type="feature" confirmed="yes">org.junit.experimental.theories.Theories$TheoryAnchor$2.val$freshInstance</outbound>
                <outbound type="feature" confirmed="yes">org.junit.experimental.theories.Theories$TheoryAnchor$2.val$method</outbound>
                <outbound type="feature" confirmed="yes">org.junit.experimental.theories.Theories$TheoryAnchor.access$000(org.junit.experimental.theories.Theories$TheoryAnchor)</outbound>
                <outbound type="class" confirmed="yes">org.junit.experimental.theories.internal.Assignments</outbound>
                <outbound type="feature" confirmed="yes">org.junit.experimental.theories.internal.Assignments.getMethodArguments(boolean)</outbound>
                <outbound type="class" confirmed="yes">org.junit.runners.model.FrameworkMethod</outbound>
                <outbound type="feature" confirmed="yes">org.junit.runners.model.FrameworkMethod.invokeExplosively(java.lang.Object, java.lang.Object[])</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.junit.experimental.theories.Theories$TheoryAnchor$2.this$0</name>
                <outbound type="class" confirmed="yes">org.junit.experimental.theories.Theories$TheoryAnchor</outbound>
                <inbound type="feature" confirmed="yes">org.junit.experimental.theories.Theories$TheoryAnchor$2.Theories$TheoryAnchor$2(org.junit.experimental.theories.Theories$TheoryAnchor, org.junit.experimental.theories.internal.Assignments, org.junit.runners.model.FrameworkMethod, java.lang.Object)</inbound>
                <inbound type="feature" confirmed="yes">org.junit.experimental.theories.Theories$TheoryAnchor$2.evaluate()</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.junit.experimental.theories.Theories$TheoryAnchor$2.val$complete</name>
                <outbound type="class" confirmed="yes">org.junit.experimental.theories.internal.Assignments</outbound>
                <inbound type="feature" confirmed="yes">org.junit.experimental.theories.Theories$TheoryAnchor$2.Theories$TheoryAnchor$2(org.junit.experimental.theories.Theories$TheoryAnchor, org.junit.experimental.theories.internal.Assignments, org.junit.runners.model.FrameworkMethod, java.lang.Object)</inbound>
                <inbound type="feature" confirmed="yes">org.junit.experimental.theories.Theories$TheoryAnchor$2.evaluate()</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.junit.experimental.theories.Theories$TheoryAnchor$2.val$freshInstance</name>
                <outbound type="class" confirmed="no">java.lang.Object</outbound>
                <inbound type="feature" confirmed="yes">org.junit.experimental.theories.Theories$TheoryAnchor$2.Theories$TheoryAnchor$2(org.junit.experimental.theories.Theories$TheoryAnchor, org.junit.experimental.theories.internal.Assignments, org.junit.runners.model.FrameworkMethod, java.lang.Object)</inbound>
                <inbound type="feature" confirmed="yes">org.junit.experimental.theories.Theories$TheoryAnchor$2.evaluate()</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.junit.experimental.theories.Theories$TheoryAnchor$2.val$method</name>
                <outbound type="class" confirmed="yes">org.junit.runners.model.FrameworkMethod</outbound>
                <inbound type="feature" confirmed="yes">org.junit.experimental.theories.Theories$TheoryAnchor$2.Theories$TheoryAnchor$2(org.junit.experimental.theories.Theories$TheoryAnchor, org.junit.experimental.theories.internal.Assignments, org.junit.runners.model.FrameworkMethod, java.lang.Object)</inbound>
                <inbound type="feature" confirmed="yes">org.junit.experimental.theories.Theories$TheoryAnchor$2.evaluate()</inbound>
            </feature>
        </class>
        <class confirmed="yes">
            <name>org.junit.experimental.theories.Theory</name>
            <outbound type="class" confirmed="no">java.lang.Object</outbound>
            <outbound type="class" confirmed="no">java.lang.annotation.Annotation</outbound>
            <inbound type="feature" confirmed="yes">org.junit.experimental.theories.Theories$TheoryAnchor.nullsOk()</inbound>
            <inbound type="feature" confirmed="yes">org.junit.experimental.theories.Theories.computeTestMethods()</inbound>
            <inbound type="feature" confirmed="yes">org.junit.experimental.theories.Theories.validateTestMethods(java.util.List)</inbound>
            <feature confirmed="yes">
                <name>org.junit.experimental.theories.Theory.nullsAccepted()</name>
                <inbound type="feature" confirmed="yes">org.junit.experimental.theories.Theories$TheoryAnchor.nullsOk()</inbound>
            </feature>
        </class>
    </package>
    <package confirmed="yes">
        <name>org.junit.experimental.theories.internal</name>
        <class confirmed="yes">
            <name>org.junit.experimental.theories.internal.AllMembersSupplier</name>
            <outbound type="class" confirmed="yes">org.junit.experimental.theories.ParameterSupplier</outbound>
            <feature confirmed="yes">
                <name>org.junit.experimental.theories.internal.AllMembersSupplier.AllMembersSupplier(org.junit.runners.model.TestClass)</name>
                <outbound type="feature" confirmed="yes">org.junit.experimental.theories.ParameterSupplier.ParameterSupplier()</outbound>
                <outbound type="feature" confirmed="yes">org.junit.experimental.theories.internal.AllMembersSupplier.fClass</outbound>
                <outbound type="class" confirmed="yes">org.junit.runners.model.TestClass</outbound>
                <inbound type="feature" confirmed="yes">org.junit.experimental.theories.internal.Assignments.getSupplier(org.junit.experimental.theories.ParameterSignature)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.junit.experimental.theories.internal.AllMembersSupplier.addArrayValues(java.lang.String, java.util.List, java.lang.Object)</name>
                <outbound type="class" confirmed="no">java.lang.Object</outbound>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="class" confirmed="no">java.lang.StringBuilder</outbound>
                <outbound type="feature" confirmed="no">java.lang.StringBuilder.StringBuilder()</outbound>
                <outbound type="feature" confirmed="no">java.lang.StringBuilder.append(int)</outbound>
                <outbound type="feature" confirmed="no">java.lang.StringBuilder.append(java.lang.String)</outbound>
                <outbound type="feature" confirmed="no">java.lang.StringBuilder.toString()</outbound>
                <outbound type="feature" confirmed="no">java.lang.reflect.Array.get(java.lang.Object, int)</outbound>
                <outbound type="feature" confirmed="no">java.lang.reflect.Array.getLength(java.lang.Object)</outbound>
                <outbound type="class" confirmed="no">java.util.List</outbound>
                <outbound type="feature" confirmed="no">java.util.List.add(java.lang.Object)</outbound>
                <outbound type="class" confirmed="yes">org.junit.experimental.theories.PotentialAssignment</outbound>
                <outbound type="feature" confirmed="yes">org.junit.experimental.theories.PotentialAssignment.forValue(java.lang.String, java.lang.Object)</outbound>
                <inbound type="feature" confirmed="yes">org.junit.experimental.theories.internal.AllMembersSupplier.addFields(org.junit.experimental.theories.ParameterSignature, java.util.List)</inbound>
                <inbound type="feature" confirmed="yes">org.junit.experimental.theories.internal.AllMembersSupplier.addMultiPointMethods(java.util.List)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.junit.experimental.theories.internal.AllMembersSupplier.addFields(org.junit.experimental.theories.ParameterSignature, java.util.List)</name>
                <outbound type="class" confirmed="no">java.lang.Class</outbound>
                <outbound type="feature" confirmed="no">java.lang.Class.getFields()</outbound>
                <outbound type="class" confirmed="no">java.lang.Object</outbound>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="class" confirmed="no">java.lang.annotation.Annotation</outbound>
                <outbound type="class" confirmed="no">java.lang.reflect.Field</outbound>
                <outbound type="feature" confirmed="no">java.lang.reflect.Field.getAnnotation(java.lang.Class)</outbound>
                <outbound type="feature" confirmed="no">java.lang.reflect.Field.getModifiers()</outbound>
                <outbound type="feature" confirmed="no">java.lang.reflect.Field.getName()</outbound>
                <outbound type="feature" confirmed="no">java.lang.reflect.Field.getType()</outbound>
                <outbound type="feature" confirmed="no">java.lang.reflect.Modifier.isStatic(int)</outbound>
                <outbound type="class" confirmed="no">java.util.List</outbound>
                <outbound type="feature" confirmed="no">java.util.List.add(java.lang.Object)</outbound>
                <outbound type="class" confirmed="yes">org.junit.experimental.theories.DataPoint</outbound>
                <outbound type="class" confirmed="yes">org.junit.experimental.theories.DataPoints</outbound>
                <outbound type="class" confirmed="yes">org.junit.experimental.theories.ParameterSignature</outbound>
                <outbound type="feature" confirmed="yes">org.junit.experimental.theories.ParameterSignature.canAcceptArrayType(java.lang.Class)</outbound>
                <outbound type="feature" confirmed="yes">org.junit.experimental.theories.ParameterSignature.canAcceptType(java.lang.Class)</outbound>
                <outbound type="class" confirmed="yes">org.junit.experimental.theories.PotentialAssignment</outbound>
                <outbound type="feature" confirmed="yes">org.junit.experimental.theories.PotentialAssignment.forValue(java.lang.String, java.lang.Object)</outbound>
                <outbound type="feature" confirmed="yes">org.junit.experimental.theories.internal.AllMembersSupplier.addArrayValues(java.lang.String, java.util.List, java.lang.Object)</outbound>
                <outbound type="feature" confirmed="yes">org.junit.experimental.theories.internal.AllMembersSupplier.fClass</outbound>
                <outbound type="feature" confirmed="yes">org.junit.experimental.theories.internal.AllMembersSupplier.getStaticFieldValue(java.lang.reflect.Field)</outbound>
                <outbound type="class" confirmed="yes">org.junit.runners.model.TestClass</outbound>
                <outbound type="feature" confirmed="yes">org.junit.runners.model.TestClass.getJavaClass()</outbound>
                <inbound type="feature" confirmed="yes">org.junit.experimental.theories.internal.AllMembersSupplier.getValueSources(org.junit.experimental.theories.ParameterSignature)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.junit.experimental.theories.internal.AllMembersSupplier.addMultiPointMethods(java.util.List)</name>
                <outbound type="class" confirmed="no">java.lang.Class</outbound>
                <outbound type="class" confirmed="no">java.lang.Object</outbound>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="class" confirmed="no">java.lang.Throwable</outbound>
                <outbound type="class" confirmed="no">java.util.Iterator</outbound>
                <outbound type="feature" confirmed="no">java.util.Iterator.hasNext()</outbound>
                <outbound type="feature" confirmed="no">java.util.Iterator.next()</outbound>
                <outbound type="class" confirmed="no">java.util.List</outbound>
                <outbound type="feature" confirmed="no">java.util.List.iterator()</outbound>
                <outbound type="class" confirmed="yes">org.junit.experimental.theories.DataPoints</outbound>
                <outbound type="feature" confirmed="yes">org.junit.experimental.theories.internal.AllMembersSupplier.addArrayValues(java.lang.String, java.util.List, java.lang.Object)</outbound>
                <outbound type="feature" confirmed="yes">org.junit.experimental.theories.internal.AllMembersSupplier.fClass</outbound>
                <outbound type="class" confirmed="yes">org.junit.runners.model.FrameworkMethod</outbound>
                <outbound type="feature" confirmed="yes">org.junit.runners.model.FrameworkMethod.getName()</outbound>
                <outbound type="feature" confirmed="yes">org.junit.runners.model.FrameworkMethod.invokeExplosively(java.lang.Object, java.lang.Object[])</outbound>
                <outbound type="class" confirmed="yes">org.junit.runners.model.TestClass</outbound>
                <outbound type="feature" confirmed="yes">org.junit.runners.model.TestClass.getAnnotatedMethods(java.lang.Class)</outbound>
                <inbound type="feature" confirmed="yes">org.junit.experimental.theories.internal.AllMembersSupplier.getValueSources(org.junit.experimental.theories.ParameterSignature)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.junit.experimental.theories.internal.AllMembersSupplier.addSinglePointMethods(org.junit.experimental.theories.ParameterSignature, java.util.List)</name>
                <outbound type="class" confirmed="no">java.lang.Class</outbound>
                <outbound type="class" confirmed="no">java.lang.Object</outbound>
                <outbound type="class" confirmed="no">java.util.Iterator</outbound>
                <outbound type="feature" confirmed="no">java.util.Iterator.hasNext()</outbound>
                <outbound type="feature" confirmed="no">java.util.Iterator.next()</outbound>
                <outbound type="class" confirmed="no">java.util.List</outbound>
                <outbound type="feature" confirmed="no">java.util.List.add(java.lang.Object)</outbound>
                <outbound type="feature" confirmed="no">java.util.List.iterator()</outbound>
                <outbound type="class" confirmed="yes">org.junit.experimental.theories.DataPoint</outbound>
                <outbound type="class" confirmed="yes">org.junit.experimental.theories.ParameterSignature</outbound>
                <outbound type="feature" confirmed="yes">org.junit.experimental.theories.ParameterSignature.getType()</outbound>
                <outbound type="class" confirmed="yes">org.junit.experimental.theories.internal.AllMembersSupplier$1</outbound>
                <outbound type="feature" confirmed="yes">org.junit.experimental.theories.internal.AllMembersSupplier$MethodParameterValue.AllMembersSupplier$MethodParameterValue(org.junit.runners.model.FrameworkMethod, org.junit.experimental.theories.internal.AllMembersSupplier$1)</outbound>
                <outbound type="feature" confirmed="yes">org.junit.experimental.theories.internal.AllMembersSupplier.fClass</outbound>
                <outbound type="class" confirmed="yes">org.junit.runners.model.FrameworkMethod</outbound>
                <outbound type="feature" confirmed="yes">org.junit.runners.model.FrameworkMethod.producesType(java.lang.Class)</outbound>
                <outbound type="class" confirmed="yes">org.junit.runners.model.TestClass</outbound>
                <outbound type="feature" confirmed="yes">org.junit.runners.model.TestClass.getAnnotatedMethods(java.lang.Class)</outbound>
                <inbound type="feature" confirmed="yes">org.junit.experimental.theories.internal.AllMembersSupplier.getValueSources(org.junit.experimental.theories.ParameterSignature)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.junit.experimental.theories.internal.AllMembersSupplier.fClass</name>
                <outbound type="class" confirmed="yes">org.junit.runners.model.TestClass</outbound>
                <inbound type="feature" confirmed="yes">org.junit.experimental.theories.internal.AllMembersSupplier.AllMembersSupplier(org.junit.runners.model.TestClass)</inbound>
                <inbound type="feature" confirmed="yes">org.junit.experimental.theories.internal.AllMembersSupplier.addFields(org.junit.experimental.theories.ParameterSignature, java.util.List)</inbound>
                <inbound type="feature" confirmed="yes">org.junit.experimental.theories.internal.AllMembersSupplier.addMultiPointMethods(java.util.List)</inbound>
                <inbound type="feature" confirmed="yes">org.junit.experimental.theories.internal.AllMembersSupplier.addSinglePointMethods(org.junit.experimental.theories.ParameterSignature, java.util.List)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.junit.experimental.theories.internal.AllMembersSupplier.getStaticFieldValue(java.lang.reflect.Field)</name>
                <outbound type="class" confirmed="no">java.lang.IllegalAccessException</outbound>
                <outbound type="class" confirmed="no">java.lang.IllegalArgumentException</outbound>
                <outbound type="class" confirmed="no">java.lang.Object</outbound>
                <outbound type="feature" confirmed="no">java.lang.RuntimeException.RuntimeException(java.lang.String)</outbound>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="class" confirmed="no">java.lang.reflect.Field</outbound>
                <outbound type="feature" confirmed="no">java.lang.reflect.Field.get(java.lang.Object)</outbound>
                <inbound type="feature" confirmed="yes">org.junit.experimental.theories.internal.AllMembersSupplier.addFields(org.junit.experimental.theories.ParameterSignature, java.util.List)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.junit.experimental.theories.internal.AllMembersSupplier.getValueSources(org.junit.experimental.theories.ParameterSignature)</name>
                <outbound type="feature" confirmed="no">java.util.ArrayList.ArrayList()</outbound>
                <outbound type="class" confirmed="no">java.util.List</outbound>
                <outbound type="class" confirmed="yes">org.junit.experimental.theories.ParameterSignature</outbound>
                <outbound type="feature" confirmed="yes">org.junit.experimental.theories.internal.AllMembersSupplier.addFields(org.junit.experimental.theories.ParameterSignature, java.util.List)</outbound>
                <outbound type="feature" confirmed="yes">org.junit.experimental.theories.internal.AllMembersSupplier.addMultiPointMethods(java.util.List)</outbound>
                <outbound type="feature" confirmed="yes">org.junit.experimental.theories.internal.AllMembersSupplier.addSinglePointMethods(org.junit.experimental.theories.ParameterSignature, java.util.List)</outbound>
            </feature>
        </class>
        <class confirmed="yes">
            <name>org.junit.experimental.theories.internal.AllMembersSupplier$1</name>
            <outbound type="class" confirmed="no">java.lang.Object</outbound>
            <inbound type="feature" confirmed="yes">org.junit.experimental.theories.internal.AllMembersSupplier$MethodParameterValue.AllMembersSupplier$MethodParameterValue(org.junit.runners.model.FrameworkMethod, org.junit.experimental.theories.internal.AllMembersSupplier$1)</inbound>
            <inbound type="feature" confirmed="yes">org.junit.experimental.theories.internal.AllMembersSupplier.addSinglePointMethods(org.junit.experimental.theories.ParameterSignature, java.util.List)</inbound>
        </class>
        <class confirmed="yes">
            <name>org.junit.experimental.theories.internal.AllMembersSupplier$MethodParameterValue</name>
            <outbound type="class" confirmed="yes">org.junit.experimental.theories.PotentialAssignment</outbound>
            <feature confirmed="yes">
                <name>org.junit.experimental.theories.internal.AllMembersSupplier$MethodParameterValue.AllMembersSupplier$MethodParameterValue(org.junit.runners.model.FrameworkMethod)</name>
                <outbound type="feature" confirmed="yes">org.junit.experimental.theories.PotentialAssignment.PotentialAssignment()</outbound>
                <outbound type="feature" confirmed="yes">org.junit.experimental.theories.internal.AllMembersSupplier$MethodParameterValue.fMethod</outbound>
                <outbound type="class" confirmed="yes">org.junit.runners.model.FrameworkMethod</outbound>
                <inbound type="feature" confirmed="yes">org.junit.experimental.theories.internal.AllMembersSupplier$MethodParameterValue.AllMembersSupplier$MethodParameterValue(org.junit.runners.model.FrameworkMethod, org.junit.experimental.theories.internal.AllMembersSupplier$1)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.junit.experimental.theories.internal.AllMembersSupplier$MethodParameterValue.AllMembersSupplier$MethodParameterValue(org.junit.runners.model.FrameworkMethod, org.junit.experimental.theories.internal.AllMembersSupplier$1)</name>
                <outbound type="class" confirmed="yes">org.junit.experimental.theories.internal.AllMembersSupplier$1</outbound>
                <outbound type="feature" confirmed="yes">org.junit.experimental.theories.internal.AllMembersSupplier$MethodParameterValue.AllMembersSupplier$MethodParameterValue(org.junit.runners.model.FrameworkMethod)</outbound>
                <outbound type="class" confirmed="yes">org.junit.runners.model.FrameworkMethod</outbound>
                <inbound type="feature" confirmed="yes">org.junit.experimental.theories.internal.AllMembersSupplier.addSinglePointMethods(org.junit.experimental.theories.ParameterSignature, java.util.List)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.junit.experimental.theories.internal.AllMembersSupplier$MethodParameterValue.fMethod</name>
                <outbound type="class" confirmed="yes">org.junit.runners.model.FrameworkMethod</outbound>
                <inbound type="feature" confirmed="yes">org.junit.experimental.theories.internal.AllMembersSupplier$MethodParameterValue.AllMembersSupplier$MethodParameterValue(org.junit.runners.model.FrameworkMethod)</inbound>
                <inbound type="feature" confirmed="yes">org.junit.experimental.theories.internal.AllMembersSupplier$MethodParameterValue.getDescription()</inbound>
                <inbound type="feature" confirmed="yes">org.junit.experimental.theories.internal.AllMembersSupplier$MethodParameterValue.getValue()</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.junit.experimental.theories.internal.AllMembersSupplier$MethodParameterValue.getDescription()</name>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="class" confirmed="yes">org.junit.experimental.theories.PotentialAssignment$CouldNotGenerateValueException</outbound>
                <outbound type="feature" confirmed="yes">org.junit.experimental.theories.internal.AllMembersSupplier$MethodParameterValue.fMethod</outbound>
                <outbound type="class" confirmed="yes">org.junit.runners.model.FrameworkMethod</outbound>
                <outbound type="feature" confirmed="yes">org.junit.runners.model.FrameworkMethod.getName()</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.junit.experimental.theories.internal.AllMembersSupplier$MethodParameterValue.getValue()</name>
                <outbound type="class" confirmed="no">java.lang.IllegalAccessException</outbound>
                <outbound type="class" confirmed="no">java.lang.IllegalArgumentException</outbound>
                <outbound type="class" confirmed="no">java.lang.Object</outbound>
                <outbound type="feature" confirmed="no">java.lang.RuntimeException.RuntimeException(java.lang.String)</outbound>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="class" confirmed="no">java.lang.Throwable</outbound>
                <outbound type="class" confirmed="yes">org.junit.experimental.theories.PotentialAssignment$CouldNotGenerateValueException</outbound>
                <outbound type="feature" confirmed="yes">org.junit.experimental.theories.PotentialAssignment$CouldNotGenerateValueException.PotentialAssignment$CouldNotGenerateValueException()</outbound>
                <outbound type="feature" confirmed="yes">org.junit.experimental.theories.internal.AllMembersSupplier$MethodParameterValue.fMethod</outbound>
                <outbound type="class" confirmed="yes">org.junit.runners.model.FrameworkMethod</outbound>
                <outbound type="feature" confirmed="yes">org.junit.runners.model.FrameworkMethod.invokeExplosively(java.lang.Object, java.lang.Object[])</outbound>
            </feature>
        </class>
        <class confirmed="yes">
            <name>org.junit.experimental.theories.internal.Assignments</name>
            <outbound type="class" confirmed="no">java.lang.Object</outbound>
            <inbound type="feature" confirmed="yes">org.junit.experimental.theories.Theories$TheoryAnchor$1$1.evaluate()</inbound>
            <inbound type="feature" confirmed="yes">org.junit.experimental.theories.Theories$TheoryAnchor$1.Theories$TheoryAnchor$1(org.junit.experimental.theories.Theories$TheoryAnchor, java.lang.Class, org.junit.experimental.theories.internal.Assignments)</inbound>
            <inbound type="feature" confirmed="yes">org.junit.experimental.theories.Theories$TheoryAnchor$1.createTest()</inbound>
            <inbound type="feature" confirmed="yes">org.junit.experimental.theories.Theories$TheoryAnchor$1.methodInvoker(org.junit.runners.model.FrameworkMethod, java.lang.Object)</inbound>
            <inbound type="feature" confirmed="yes">org.junit.experimental.theories.Theories$TheoryAnchor$1.val$complete</inbound>
            <inbound type="feature" confirmed="yes">org.junit.experimental.theories.Theories$TheoryAnchor$2.Theories$TheoryAnchor$2(org.junit.experimental.theories.Theories$TheoryAnchor, org.junit.experimental.theories.internal.Assignments, org.junit.runners.model.FrameworkMethod, java.lang.Object)</inbound>
            <inbound type="feature" confirmed="yes">org.junit.experimental.theories.Theories$TheoryAnchor$2.evaluate()</inbound>
            <inbound type="feature" confirmed="yes">org.junit.experimental.theories.Theories$TheoryAnchor$2.val$complete</inbound>
            <inbound type="feature" confirmed="yes">org.junit.experimental.theories.Theories$TheoryAnchor.access$100(org.junit.experimental.theories.Theories$TheoryAnchor, org.junit.runners.model.FrameworkMethod, org.junit.experimental.theories.internal.Assignments, java.lang.Object)</inbound>
            <inbound type="feature" confirmed="yes">org.junit.experimental.theories.Theories$TheoryAnchor.evaluate()</inbound>
            <inbound type="feature" confirmed="yes">org.junit.experimental.theories.Theories$TheoryAnchor.methodCompletesWithParameters(org.junit.runners.model.FrameworkMethod, org.junit.experimental.theories.internal.Assignments, java.lang.Object)</inbound>
            <inbound type="feature" confirmed="yes">org.junit.experimental.theories.Theories$TheoryAnchor.runWithAssignment(org.junit.experimental.theories.internal.Assignments)</inbound>
            <inbound type="feature" confirmed="yes">org.junit.experimental.theories.Theories$TheoryAnchor.runWithCompleteAssignment(org.junit.experimental.theories.internal.Assignments)</inbound>
            <inbound type="feature" confirmed="yes">org.junit.experimental.theories.Theories$TheoryAnchor.runWithIncompleteAssignment(org.junit.experimental.theories.internal.Assignments)</inbound>
            <feature confirmed="yes">
                <name>org.junit.experimental.theories.internal.Assignments.Assignments(java.util.List, java.util.List, org.junit.runners.model.TestClass)</name>
                <outbound type="feature" confirmed="no">java.lang.Object.Object()</outbound>
                <outbound type="class" confirmed="no">java.util.List</outbound>
                <outbound type="feature" confirmed="yes">org.junit.experimental.theories.internal.Assignments.fAssigned</outbound>
                <outbound type="feature" confirmed="yes">org.junit.experimental.theories.internal.Assignments.fClass</outbound>
                <outbound type="feature" confirmed="yes">org.junit.experimental.theories.internal.Assignments.fUnassigned</outbound>
                <outbound type="class" confirmed="yes">org.junit.runners.model.TestClass</outbound>
                <inbound type="feature" confirmed="yes">org.junit.experimental.theories.internal.Assignments.allUnassigned(java.lang.reflect.Method, org.junit.runners.model.TestClass)</inbound>
                <inbound type="feature" confirmed="yes">org.junit.experimental.theories.internal.Assignments.assignNext(org.junit.experimental.theories.PotentialAssignment)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.junit.experimental.theories.internal.Assignments.allUnassigned(java.lang.reflect.Method, org.junit.runners.model.TestClass)</name>
                <outbound type="class" confirmed="no">java.lang.Exception</outbound>
                <outbound type="class" confirmed="no">java.lang.reflect.Constructor</outbound>
                <outbound type="class" confirmed="no">java.lang.reflect.Method</outbound>
                <outbound type="class" confirmed="no">java.util.ArrayList</outbound>
                <outbound type="feature" confirmed="no">java.util.ArrayList.ArrayList()</outbound>
                <outbound type="class" confirmed="no">java.util.Collection</outbound>
                <outbound type="class" confirmed="no">java.util.List</outbound>
                <outbound type="feature" confirmed="no">java.util.List.addAll(java.util.Collection)</outbound>
                <outbound type="feature" confirmed="yes">org.junit.experimental.theories.ParameterSignature.signatures(java.lang.reflect.Constructor)</outbound>
                <outbound type="feature" confirmed="yes">org.junit.experimental.theories.ParameterSignature.signatures(java.lang.reflect.Method)</outbound>
                <outbound type="feature" confirmed="yes">org.junit.experimental.theories.internal.Assignments.Assignments(java.util.List, java.util.List, org.junit.runners.model.TestClass)</outbound>
                <outbound type="class" confirmed="yes">org.junit.runners.model.TestClass</outbound>
                <outbound type="feature" confirmed="yes">org.junit.runners.model.TestClass.getOnlyConstructor()</outbound>
                <inbound type="feature" confirmed="yes">org.junit.experimental.theories.Theories$TheoryAnchor.evaluate()</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.junit.experimental.theories.internal.Assignments.assignNext(org.junit.experimental.theories.PotentialAssignment)</name>
                <outbound type="class" confirmed="no">java.lang.Object</outbound>
                <outbound type="feature" confirmed="no">java.util.ArrayList.ArrayList(java.util.Collection)</outbound>
                <outbound type="class" confirmed="no">java.util.Collection</outbound>
                <outbound type="class" confirmed="no">java.util.List</outbound>
                <outbound type="feature" confirmed="no">java.util.List.add(java.lang.Object)</outbound>
                <outbound type="feature" confirmed="no">java.util.List.size()</outbound>
                <outbound type="feature" confirmed="no">java.util.List.subList(int, int)</outbound>
                <outbound type="class" confirmed="yes">org.junit.experimental.theories.PotentialAssignment</outbound>
                <outbound type="feature" confirmed="yes">org.junit.experimental.theories.internal.Assignments.Assignments(java.util.List, java.util.List, org.junit.runners.model.TestClass)</outbound>
                <outbound type="feature" confirmed="yes">org.junit.experimental.theories.internal.Assignments.fAssigned</outbound>
                <outbound type="feature" confirmed="yes">org.junit.experimental.theories.internal.Assignments.fClass</outbound>
                <outbound type="feature" confirmed="yes">org.junit.experimental.theories.internal.Assignments.fUnassigned</outbound>
                <outbound type="class" confirmed="yes">org.junit.runners.model.TestClass</outbound>
                <inbound type="feature" confirmed="yes">org.junit.experimental.theories.Theories$TheoryAnchor.runWithIncompleteAssignment(org.junit.experimental.theories.internal.Assignments)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.junit.experimental.theories.internal.Assignments.fAssigned</name>
                <outbound type="class" confirmed="no">java.util.List</outbound>
                <inbound type="feature" confirmed="yes">org.junit.experimental.theories.internal.Assignments.Assignments(java.util.List, java.util.List, org.junit.runners.model.TestClass)</inbound>
                <inbound type="feature" confirmed="yes">org.junit.experimental.theories.internal.Assignments.assignNext(org.junit.experimental.theories.PotentialAssignment)</inbound>
                <inbound type="feature" confirmed="yes">org.junit.experimental.theories.internal.Assignments.getActualValues(int, int, boolean)</inbound>
                <inbound type="feature" confirmed="yes">org.junit.experimental.theories.internal.Assignments.getAllArguments(boolean)</inbound>
                <inbound type="feature" confirmed="yes">org.junit.experimental.theories.internal.Assignments.getArgumentStrings(boolean)</inbound>
                <inbound type="feature" confirmed="yes">org.junit.experimental.theories.internal.Assignments.getMethodArguments(boolean)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.junit.experimental.theories.internal.Assignments.fClass</name>
                <outbound type="class" confirmed="yes">org.junit.runners.model.TestClass</outbound>
                <inbound type="feature" confirmed="yes">org.junit.experimental.theories.internal.Assignments.Assignments(java.util.List, java.util.List, org.junit.runners.model.TestClass)</inbound>
                <inbound type="feature" confirmed="yes">org.junit.experimental.theories.internal.Assignments.assignNext(org.junit.experimental.theories.PotentialAssignment)</inbound>
                <inbound type="feature" confirmed="yes">org.junit.experimental.theories.internal.Assignments.getConstructorParameterCount()</inbound>
                <inbound type="feature" confirmed="yes">org.junit.experimental.theories.internal.Assignments.getSupplier(org.junit.experimental.theories.ParameterSignature)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.junit.experimental.theories.internal.Assignments.fUnassigned</name>
                <outbound type="class" confirmed="no">java.util.List</outbound>
                <inbound type="feature" confirmed="yes">org.junit.experimental.theories.internal.Assignments.Assignments(java.util.List, java.util.List, org.junit.runners.model.TestClass)</inbound>
                <inbound type="feature" confirmed="yes">org.junit.experimental.theories.internal.Assignments.assignNext(org.junit.experimental.theories.PotentialAssignment)</inbound>
                <inbound type="feature" confirmed="yes">org.junit.experimental.theories.internal.Assignments.isComplete()</inbound>
                <inbound type="feature" confirmed="yes">org.junit.experimental.theories.internal.Assignments.nextUnassigned()</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.junit.experimental.theories.internal.Assignments.getActualValues(int, int, boolean)</name>
                <outbound type="class" confirmed="no">java.lang.Object</outbound>
                <outbound type="class" confirmed="no">java.util.List</outbound>
                <outbound type="feature" confirmed="no">java.util.List.get(int)</outbound>
                <outbound type="class" confirmed="yes">org.junit.experimental.theories.PotentialAssignment</outbound>
                <outbound type="class" confirmed="yes">org.junit.experimental.theories.PotentialAssignment$CouldNotGenerateValueException</outbound>
                <outbound type="feature" confirmed="yes">org.junit.experimental.theories.PotentialAssignment$CouldNotGenerateValueException.PotentialAssignment$CouldNotGenerateValueException()</outbound>
                <outbound type="feature" confirmed="yes">org.junit.experimental.theories.PotentialAssignment.getValue()</outbound>
                <outbound type="feature" confirmed="yes">org.junit.experimental.theories.internal.Assignments.fAssigned</outbound>
                <inbound type="feature" confirmed="yes">org.junit.experimental.theories.internal.Assignments.getAllArguments(boolean)</inbound>
                <inbound type="feature" confirmed="yes">org.junit.experimental.theories.internal.Assignments.getConstructorArguments(boolean)</inbound>
                <inbound type="feature" confirmed="yes">org.junit.experimental.theories.internal.Assignments.getMethodArguments(boolean)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.junit.experimental.theories.internal.Assignments.getAllArguments(boolean)</name>
                <outbound type="class" confirmed="no">java.lang.Object</outbound>
                <outbound type="class" confirmed="no">java.util.List</outbound>
                <outbound type="feature" confirmed="no">java.util.List.size()</outbound>
                <outbound type="class" confirmed="yes">org.junit.experimental.theories.PotentialAssignment$CouldNotGenerateValueException</outbound>
                <outbound type="feature" confirmed="yes">org.junit.experimental.theories.internal.Assignments.fAssigned</outbound>
                <outbound type="feature" confirmed="yes">org.junit.experimental.theories.internal.Assignments.getActualValues(int, int, boolean)</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.junit.experimental.theories.internal.Assignments.getAnnotatedSupplier(org.junit.experimental.theories.ParameterSignature)</name>
                <outbound type="class" confirmed="no">java.lang.Class</outbound>
                <outbound type="feature" confirmed="no">java.lang.Class.newInstance()</outbound>
                <outbound type="class" confirmed="no">java.lang.IllegalAccessException</outbound>
                <outbound type="class" confirmed="no">java.lang.InstantiationException</outbound>
                <outbound type="class" confirmed="no">java.lang.Object</outbound>
                <outbound type="class" confirmed="no">java.lang.annotation.Annotation</outbound>
                <outbound type="class" confirmed="yes">org.junit.experimental.theories.ParameterSignature</outbound>
                <outbound type="feature" confirmed="yes">org.junit.experimental.theories.ParameterSignature.findDeepAnnotation(java.lang.Class)</outbound>
                <outbound type="class" confirmed="yes">org.junit.experimental.theories.ParameterSupplier</outbound>
                <outbound type="class" confirmed="yes">org.junit.experimental.theories.ParametersSuppliedBy</outbound>
                <outbound type="feature" confirmed="yes">org.junit.experimental.theories.ParametersSuppliedBy.value()</outbound>
                <inbound type="feature" confirmed="yes">org.junit.experimental.theories.internal.Assignments.getSupplier(org.junit.experimental.theories.ParameterSignature)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.junit.experimental.theories.internal.Assignments.getArgumentStrings(boolean)</name>
                <outbound type="class" confirmed="no">java.lang.Object</outbound>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="class" confirmed="no">java.util.List</outbound>
                <outbound type="feature" confirmed="no">java.util.List.get(int)</outbound>
                <outbound type="feature" confirmed="no">java.util.List.size()</outbound>
                <outbound type="class" confirmed="yes">org.junit.experimental.theories.PotentialAssignment</outbound>
                <outbound type="class" confirmed="yes">org.junit.experimental.theories.PotentialAssignment$CouldNotGenerateValueException</outbound>
                <outbound type="feature" confirmed="yes">org.junit.experimental.theories.PotentialAssignment.getDescription()</outbound>
                <outbound type="feature" confirmed="yes">org.junit.experimental.theories.internal.Assignments.fAssigned</outbound>
                <inbound type="feature" confirmed="yes">org.junit.experimental.theories.Theories$TheoryAnchor$1$1.evaluate()</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.junit.experimental.theories.internal.Assignments.getConstructorArguments(boolean)</name>
                <outbound type="class" confirmed="no">java.lang.Object</outbound>
                <outbound type="class" confirmed="yes">org.junit.experimental.theories.PotentialAssignment$CouldNotGenerateValueException</outbound>
                <outbound type="feature" confirmed="yes">org.junit.experimental.theories.internal.Assignments.getActualValues(int, int, boolean)</outbound>
                <outbound type="feature" confirmed="yes">org.junit.experimental.theories.internal.Assignments.getConstructorParameterCount()</outbound>
                <inbound type="feature" confirmed="yes">org.junit.experimental.theories.Theories$TheoryAnchor$1.createTest()</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.junit.experimental.theories.internal.Assignments.getConstructorParameterCount()</name>
                <outbound type="class" confirmed="no">java.lang.reflect.Constructor</outbound>
                <outbound type="class" confirmed="no">java.util.List</outbound>
                <outbound type="feature" confirmed="no">java.util.List.size()</outbound>
                <outbound type="feature" confirmed="yes">org.junit.experimental.theories.ParameterSignature.signatures(java.lang.reflect.Constructor)</outbound>
                <outbound type="feature" confirmed="yes">org.junit.experimental.theories.internal.Assignments.fClass</outbound>
                <outbound type="class" confirmed="yes">org.junit.runners.model.TestClass</outbound>
                <outbound type="feature" confirmed="yes">org.junit.runners.model.TestClass.getOnlyConstructor()</outbound>
                <inbound type="feature" confirmed="yes">org.junit.experimental.theories.internal.Assignments.getConstructorArguments(boolean)</inbound>
                <inbound type="feature" confirmed="yes">org.junit.experimental.theories.internal.Assignments.getMethodArguments(boolean)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.junit.experimental.theories.internal.Assignments.getMethodArguments(boolean)</name>
                <outbound type="class" confirmed="no">java.lang.Object</outbound>
                <outbound type="class" confirmed="no">java.util.List</outbound>
                <outbound type="feature" confirmed="no">java.util.List.size()</outbound>
                <outbound type="class" confirmed="yes">org.junit.experimental.theories.PotentialAssignment$CouldNotGenerateValueException</outbound>
                <outbound type="feature" confirmed="yes">org.junit.experimental.theories.internal.Assignments.fAssigned</outbound>
                <outbound type="feature" confirmed="yes">org.junit.experimental.theories.internal.Assignments.getActualValues(int, int, boolean)</outbound>
                <outbound type="feature" confirmed="yes">org.junit.experimental.theories.internal.Assignments.getConstructorParameterCount()</outbound>
                <inbound type="feature" confirmed="yes">org.junit.experimental.theories.Theories$TheoryAnchor$2.evaluate()</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.junit.experimental.theories.internal.Assignments.getSupplier(org.junit.experimental.theories.ParameterSignature)</name>
                <outbound type="class" confirmed="no">java.lang.IllegalAccessException</outbound>
                <outbound type="class" confirmed="no">java.lang.InstantiationException</outbound>
                <outbound type="class" confirmed="yes">org.junit.experimental.theories.ParameterSignature</outbound>
                <outbound type="class" confirmed="yes">org.junit.experimental.theories.ParameterSupplier</outbound>
                <outbound type="feature" confirmed="yes">org.junit.experimental.theories.internal.AllMembersSupplier.AllMembersSupplier(org.junit.runners.model.TestClass)</outbound>
                <outbound type="feature" confirmed="yes">org.junit.experimental.theories.internal.Assignments.fClass</outbound>
                <outbound type="feature" confirmed="yes">org.junit.experimental.theories.internal.Assignments.getAnnotatedSupplier(org.junit.experimental.theories.ParameterSignature)</outbound>
                <outbound type="class" confirmed="yes">org.junit.runners.model.TestClass</outbound>
                <inbound type="feature" confirmed="yes">org.junit.experimental.theories.internal.Assignments.potentialsForNextUnassigned()</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.junit.experimental.theories.internal.Assignments.isComplete()</name>
                <outbound type="class" confirmed="no">java.util.List</outbound>
                <outbound type="feature" confirmed="no">java.util.List.size()</outbound>
                <outbound type="feature" confirmed="yes">org.junit.experimental.theories.internal.Assignments.fUnassigned</outbound>
                <inbound type="feature" confirmed="yes">org.junit.experimental.theories.Theories$TheoryAnchor.runWithAssignment(org.junit.experimental.theories.internal.Assignments)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.junit.experimental.theories.internal.Assignments.nextUnassigned()</name>
                <outbound type="class" confirmed="no">java.lang.Object</outbound>
                <outbound type="class" confirmed="no">java.util.List</outbound>
                <outbound type="feature" confirmed="no">java.util.List.get(int)</outbound>
                <outbound type="class" confirmed="yes">org.junit.experimental.theories.ParameterSignature</outbound>
                <outbound type="feature" confirmed="yes">org.junit.experimental.theories.internal.Assignments.fUnassigned</outbound>
                <inbound type="feature" confirmed="yes">org.junit.experimental.theories.internal.Assignments.potentialsForNextUnassigned()</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.junit.experimental.theories.internal.Assignments.potentialsForNextUnassigned()</name>
                <outbound type="class" confirmed="no">java.lang.IllegalAccessException</outbound>
                <outbound type="class" confirmed="no">java.lang.InstantiationException</outbound>
                <outbound type="class" confirmed="no">java.util.List</outbound>
                <outbound type="class" confirmed="yes">org.junit.experimental.theories.ParameterSignature</outbound>
                <outbound type="class" confirmed="yes">org.junit.experimental.theories.ParameterSupplier</outbound>
                <outbound type="feature" confirmed="yes">org.junit.experimental.theories.ParameterSupplier.getValueSources(org.junit.experimental.theories.ParameterSignature)</outbound>
                <outbound type="feature" confirmed="yes">org.junit.experimental.theories.internal.Assignments.getSupplier(org.junit.experimental.theories.ParameterSignature)</outbound>
                <outbound type="feature" confirmed="yes">org.junit.experimental.theories.internal.Assignments.nextUnassigned()</outbound>
                <inbound type="feature" confirmed="yes">org.junit.experimental.theories.Theories$TheoryAnchor.runWithIncompleteAssignment(org.junit.experimental.theories.internal.Assignments)</inbound>
            </feature>
        </class>
        <class confirmed="yes">
            <name>org.junit.experimental.theories.internal.ParameterizedAssertionError</name>
            <outbound type="class" confirmed="no">java.lang.RuntimeException</outbound>
            <feature confirmed="yes">
                <name>org.junit.experimental.theories.internal.ParameterizedAssertionError.ParameterizedAssertionError(java.lang.Throwable, java.lang.String, java.lang.Object[])</name>
                <outbound type="class" confirmed="no">java.lang.Object</outbound>
                <outbound type="feature" confirmed="no">java.lang.RuntimeException.RuntimeException(java.lang.String, java.lang.Throwable)</outbound>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="feature" confirmed="no">java.lang.String.format(java.lang.String, java.lang.Object[])</outbound>
                <outbound type="class" confirmed="no">java.lang.Throwable</outbound>
                <outbound type="feature" confirmed="yes">org.junit.experimental.theories.internal.ParameterizedAssertionError.join(java.lang.String, java.lang.Object[])</outbound>
                <inbound type="feature" confirmed="yes">org.junit.experimental.theories.Theories$TheoryAnchor.reportParameterizedError(java.lang.Throwable, java.lang.Object[])</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.junit.experimental.theories.internal.ParameterizedAssertionError.equals(java.lang.Object)</name>
                <outbound type="class" confirmed="no">java.lang.Object</outbound>
                <outbound type="feature" confirmed="no">java.lang.Object.toString()</outbound>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="feature" confirmed="no">java.lang.String.equals(java.lang.Object)</outbound>
                <outbound type="feature" confirmed="no">org.junit.experimental.theories.internal.ParameterizedAssertionError.toString()</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.junit.experimental.theories.internal.ParameterizedAssertionError.join(java.lang.String, java.lang.Object[])</name>
                <outbound type="class" confirmed="no">java.lang.Object</outbound>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="feature" confirmed="no">java.util.Arrays.asList(java.lang.Object[])</outbound>
                <outbound type="class" confirmed="no">java.util.Collection</outbound>
                <outbound type="class" confirmed="no">java.util.List</outbound>
                <outbound type="feature" confirmed="yes">org.junit.experimental.theories.internal.ParameterizedAssertionError.join(java.lang.String, java.util.Collection)</outbound>
                <inbound type="feature" confirmed="yes">org.junit.experimental.theories.internal.ParameterizedAssertionError.ParameterizedAssertionError(java.lang.Throwable, java.lang.String, java.lang.Object[])</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.junit.experimental.theories.internal.ParameterizedAssertionError.join(java.lang.String, java.util.Collection)</name>
                <outbound type="class" confirmed="no">java.lang.Object</outbound>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="class" confirmed="no">java.lang.StringBuffer</outbound>
                <outbound type="feature" confirmed="no">java.lang.StringBuffer.StringBuffer()</outbound>
                <outbound type="feature" confirmed="no">java.lang.StringBuffer.append(java.lang.String)</outbound>
                <outbound type="feature" confirmed="no">java.lang.StringBuffer.toString()</outbound>
                <outbound type="class" confirmed="no">java.util.Collection</outbound>
                <outbound type="feature" confirmed="no">java.util.Collection.iterator()</outbound>
                <outbound type="class" confirmed="no">java.util.Iterator</outbound>
                <outbound type="feature" confirmed="no">java.util.Iterator.hasNext()</outbound>
                <outbound type="feature" confirmed="no">java.util.Iterator.next()</outbound>
                <outbound type="feature" confirmed="yes">org.junit.experimental.theories.internal.ParameterizedAssertionError.stringValueOf(java.lang.Object)</outbound>
                <inbound type="feature" confirmed="yes">org.junit.experimental.theories.internal.ParameterizedAssertionError.join(java.lang.String, java.lang.Object[])</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.junit.experimental.theories.internal.ParameterizedAssertionError.serialVersionUID</name>
            </feature>
            <feature confirmed="yes">
                <name>org.junit.experimental.theories.internal.ParameterizedAssertionError.stringValueOf(java.lang.Object)</name>
                <outbound type="class" confirmed="no">java.lang.Object</outbound>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="feature" confirmed="no">java.lang.String.valueOf(java.lang.Object)</outbound>
                <outbound type="class" confirmed="no">java.lang.Throwable</outbound>
                <inbound type="feature" confirmed="yes">org.junit.experimental.theories.internal.ParameterizedAssertionError.join(java.lang.String, java.util.Collection)</inbound>
            </feature>
            <feature confirmed="no">
                <name>org.junit.experimental.theories.internal.ParameterizedAssertionError.toString()</name>
                <inbound type="feature" confirmed="yes">org.junit.experimental.theories.internal.ParameterizedAssertionError.equals(java.lang.Object)</inbound>
            </feature>
        </class>
    </package>
    <package confirmed="yes">
        <name>org.junit.experimental.theories.suppliers</name>
        <class confirmed="yes">
            <name>org.junit.experimental.theories.suppliers.TestedOn</name>
            <outbound type="class" confirmed="no">java.lang.Object</outbound>
            <outbound type="class" confirmed="no">java.lang.annotation.Annotation</outbound>
            <inbound type="feature" confirmed="yes">org.junit.experimental.theories.suppliers.TestedOnSupplier.getValueSources(org.junit.experimental.theories.ParameterSignature)</inbound>
            <feature confirmed="yes">
                <name>org.junit.experimental.theories.suppliers.TestedOn.ints()</name>
                <inbound type="feature" confirmed="yes">org.junit.experimental.theories.suppliers.TestedOnSupplier.getValueSources(org.junit.experimental.theories.ParameterSignature)</inbound>
            </feature>
        </class>
        <class confirmed="yes">
            <name>org.junit.experimental.theories.suppliers.TestedOnSupplier</name>
            <outbound type="class" confirmed="yes">org.junit.experimental.theories.ParameterSupplier</outbound>
            <feature confirmed="yes">
                <name>org.junit.experimental.theories.suppliers.TestedOnSupplier.TestedOnSupplier()</name>
                <outbound type="feature" confirmed="yes">org.junit.experimental.theories.ParameterSupplier.ParameterSupplier()</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.junit.experimental.theories.suppliers.TestedOnSupplier.getValueSources(org.junit.experimental.theories.ParameterSignature)</name>
                <outbound type="class" confirmed="no">int[]</outbound>
                <outbound type="class" confirmed="no">java.lang.Class</outbound>
                <outbound type="class" confirmed="no">java.lang.Integer</outbound>
                <outbound type="feature" confirmed="no">java.lang.Integer.valueOf(int)</outbound>
                <outbound type="class" confirmed="no">java.lang.Object</outbound>
                <outbound type="feature" confirmed="no">java.lang.Object.toString()</outbound>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="class" confirmed="no">java.lang.annotation.Annotation</outbound>
                <outbound type="feature" confirmed="no">java.util.ArrayList.ArrayList()</outbound>
                <outbound type="feature" confirmed="no">java.util.Arrays.asList(java.lang.Object[])</outbound>
                <outbound type="class" confirmed="no">java.util.List</outbound>
                <outbound type="feature" confirmed="no">java.util.List.add(java.lang.Object)</outbound>
                <outbound type="class" confirmed="yes">org.junit.experimental.theories.ParameterSignature</outbound>
                <outbound type="feature" confirmed="yes">org.junit.experimental.theories.ParameterSignature.getAnnotation(java.lang.Class)</outbound>
                <outbound type="class" confirmed="yes">org.junit.experimental.theories.PotentialAssignment</outbound>
                <outbound type="feature" confirmed="yes">org.junit.experimental.theories.PotentialAssignment.forValue(java.lang.String, java.lang.Object)</outbound>
                <outbound type="class" confirmed="yes">org.junit.experimental.theories.suppliers.TestedOn</outbound>
                <outbound type="feature" confirmed="yes">org.junit.experimental.theories.suppliers.TestedOn.ints()</outbound>
            </feature>
        </class>
    </package>
    <package confirmed="yes">
        <name>org.junit.internal</name>
        <class confirmed="yes">
            <name>org.junit.internal.ArrayComparisonFailure</name>
            <outbound type="class" confirmed="no">java.lang.AssertionError</outbound>
            <inbound type="feature" confirmed="yes">org.junit.Assert.assertArrayEquals(java.lang.String, byte[], byte[])</inbound>
            <inbound type="feature" confirmed="yes">org.junit.Assert.assertArrayEquals(java.lang.String, char[], char[])</inbound>
            <inbound type="feature" confirmed="yes">org.junit.Assert.assertArrayEquals(java.lang.String, double[], double[], double)</inbound>
            <inbound type="feature" confirmed="yes">org.junit.Assert.assertArrayEquals(java.lang.String, float[], float[], float)</inbound>
            <inbound type="feature" confirmed="yes">org.junit.Assert.assertArrayEquals(java.lang.String, int[], int[])</inbound>
            <inbound type="feature" confirmed="yes">org.junit.Assert.assertArrayEquals(java.lang.String, java.lang.Object[], java.lang.Object[])</inbound>
            <inbound type="feature" confirmed="yes">org.junit.Assert.assertArrayEquals(java.lang.String, long[], long[])</inbound>
            <inbound type="feature" confirmed="yes">org.junit.Assert.assertArrayEquals(java.lang.String, short[], short[])</inbound>
            <inbound type="feature" confirmed="yes">org.junit.Assert.internalArrayEquals(java.lang.String, java.lang.Object, java.lang.Object)</inbound>
            <inbound type="feature" confirmed="yes">org.junit.internal.ComparisonCriteria.arrayEquals(java.lang.String, java.lang.Object, java.lang.Object)</inbound>
            <feature confirmed="yes">
                <name>org.junit.internal.ArrayComparisonFailure.ArrayComparisonFailure(java.lang.String, java.lang.AssertionError, int)</name>
                <outbound type="class" confirmed="no">java.lang.AssertionError</outbound>
                <outbound type="feature" confirmed="no">java.lang.AssertionError.AssertionError()</outbound>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="feature" confirmed="no">java.util.ArrayList.ArrayList()</outbound>
                <outbound type="class" confirmed="no">java.util.List</outbound>
                <outbound type="feature" confirmed="yes">org.junit.internal.ArrayComparisonFailure.addDimension(int)</outbound>
                <outbound type="feature" confirmed="yes">org.junit.internal.ArrayComparisonFailure.fCause</outbound>
                <outbound type="feature" confirmed="yes">org.junit.internal.ArrayComparisonFailure.fIndices</outbound>
                <outbound type="feature" confirmed="yes">org.junit.internal.ArrayComparisonFailure.fMessage</outbound>
                <inbound type="feature" confirmed="yes">org.junit.internal.ComparisonCriteria.arrayEquals(java.lang.String, java.lang.Object, java.lang.Object)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.junit.internal.ArrayComparisonFailure.addDimension(int)</name>
                <outbound type="class" confirmed="no">java.lang.Integer</outbound>
                <outbound type="feature" confirmed="no">java.lang.Integer.valueOf(int)</outbound>
                <outbound type="class" confirmed="no">java.lang.Object</outbound>
                <outbound type="class" confirmed="no">java.util.List</outbound>
                <outbound type="feature" confirmed="no">java.util.List.add(int, java.lang.Object)</outbound>
                <outbound type="feature" confirmed="yes">org.junit.internal.ArrayComparisonFailure.fIndices</outbound>
                <inbound type="feature" confirmed="yes">org.junit.internal.ArrayComparisonFailure.ArrayComparisonFailure(java.lang.String, java.lang.AssertionError, int)</inbound>
                <inbound type="feature" confirmed="yes">org.junit.internal.ComparisonCriteria.arrayEquals(java.lang.String, java.lang.Object, java.lang.Object)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.junit.internal.ArrayComparisonFailure.fCause</name>
                <outbound type="class" confirmed="no">java.lang.AssertionError</outbound>
                <inbound type="feature" confirmed="yes">org.junit.internal.ArrayComparisonFailure.ArrayComparisonFailure(java.lang.String, java.lang.AssertionError, int)</inbound>
                <inbound type="feature" confirmed="yes">org.junit.internal.ArrayComparisonFailure.getMessage()</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.junit.internal.ArrayComparisonFailure.fIndices</name>
                <outbound type="class" confirmed="no">java.util.List</outbound>
                <inbound type="feature" confirmed="yes">org.junit.internal.ArrayComparisonFailure.ArrayComparisonFailure(java.lang.String, java.lang.AssertionError, int)</inbound>
                <inbound type="feature" confirmed="yes">org.junit.internal.ArrayComparisonFailure.addDimension(int)</inbound>
                <inbound type="feature" confirmed="yes">org.junit.internal.ArrayComparisonFailure.getMessage()</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.junit.internal.ArrayComparisonFailure.fMessage</name>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <inbound type="feature" confirmed="yes">org.junit.internal.ArrayComparisonFailure.ArrayComparisonFailure(java.lang.String, java.lang.AssertionError, int)</inbound>
                <inbound type="feature" confirmed="yes">org.junit.internal.ArrayComparisonFailure.getMessage()</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.junit.internal.ArrayComparisonFailure.getMessage()</name>
                <outbound type="class" confirmed="no">java.lang.AssertionError</outbound>
                <outbound type="feature" confirmed="no">java.lang.AssertionError.getMessage()</outbound>
                <outbound type="class" confirmed="no">java.lang.Integer</outbound>
                <outbound type="feature" confirmed="no">java.lang.Integer.intValue()</outbound>
                <outbound type="class" confirmed="no">java.lang.Object</outbound>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="class" confirmed="no">java.lang.StringBuilder</outbound>
                <outbound type="feature" confirmed="no">java.lang.StringBuilder.StringBuilder()</outbound>
                <outbound type="feature" confirmed="no">java.lang.StringBuilder.append(int)</outbound>
                <outbound type="feature" confirmed="no">java.lang.StringBuilder.append(java.lang.String)</outbound>
                <outbound type="feature" confirmed="no">java.lang.StringBuilder.toString()</outbound>
                <outbound type="class" confirmed="no">java.util.Iterator</outbound>
                <outbound type="feature" confirmed="no">java.util.Iterator.hasNext()</outbound>
                <outbound type="feature" confirmed="no">java.util.Iterator.next()</outbound>
                <outbound type="class" confirmed="no">java.util.List</outbound>
                <outbound type="feature" confirmed="no">java.util.List.iterator()</outbound>
                <outbound type="feature" confirmed="yes">org.junit.internal.ArrayComparisonFailure.fCause</outbound>
                <outbound type="feature" confirmed="yes">org.junit.internal.ArrayComparisonFailure.fIndices</outbound>
                <outbound type="feature" confirmed="yes">org.junit.internal.ArrayComparisonFailure.fMessage</outbound>
                <inbound type="feature" confirmed="yes">org.junit.internal.ArrayComparisonFailure.toString()</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.junit.internal.ArrayComparisonFailure.serialVersionUID</name>
            </feature>
            <feature confirmed="yes">
                <name>org.junit.internal.ArrayComparisonFailure.toString()</name>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="feature" confirmed="yes">org.junit.internal.ArrayComparisonFailure.getMessage()</outbound>
            </feature>
        </class>
        <class confirmed="yes">
            <name>org.junit.internal.AssumptionViolatedException</name>
            <outbound type="class" confirmed="no">java.lang.RuntimeException</outbound>
            <outbound type="class" confirmed="yes">org.hamcrest.SelfDescribing</outbound>
            <inbound type="feature" confirmed="yes">org.junit.experimental.theories.Theories$TheoryAnchor$1$1.evaluate()</inbound>
            <inbound type="feature" confirmed="yes">org.junit.experimental.theories.Theories$TheoryAnchor.handleAssumptionViolation(org.junit.internal.AssumptionViolatedException)</inbound>
            <inbound type="feature" confirmed="yes">org.junit.internal.runners.ClassRoadie.runBefores()</inbound>
            <inbound type="feature" confirmed="yes">org.junit.internal.runners.MethodRoadie.runBefores()</inbound>
            <inbound type="feature" confirmed="yes">org.junit.internal.runners.MethodRoadie.runTestMethod()</inbound>
            <inbound type="feature" confirmed="yes">org.junit.internal.runners.model.EachTestNotifier.addFailedAssumption(org.junit.internal.AssumptionViolatedException)</inbound>
            <inbound type="feature" confirmed="yes">org.junit.internal.runners.statements.ExpectException.evaluate()</inbound>
            <inbound type="feature" confirmed="yes">org.junit.runners.ParentRunner.run(org.junit.runner.notification.RunNotifier)</inbound>
            <inbound type="feature" confirmed="yes">org.junit.runners.ParentRunner.runLeaf(org.junit.runners.model.Statement, org.junit.runner.Description, org.junit.runner.notification.RunNotifier)</inbound>
            <feature confirmed="yes">
                <name>org.junit.internal.AssumptionViolatedException.AssumptionViolatedException(java.lang.Object, org.hamcrest.Matcher)</name>
                <outbound type="class" confirmed="no">java.lang.Object</outbound>
                <outbound type="feature" confirmed="no">java.lang.RuntimeException.RuntimeException(java.lang.Throwable)</outbound>
                <outbound type="class" confirmed="no">java.lang.Throwable</outbound>
                <outbound type="class" confirmed="yes">org.hamcrest.Matcher</outbound>
                <outbound type="feature" confirmed="yes">org.junit.internal.AssumptionViolatedException.fMatcher</outbound>
                <outbound type="feature" confirmed="yes">org.junit.internal.AssumptionViolatedException.fValue</outbound>
                <inbound type="feature" confirmed="yes">org.junit.Assume.assumeThat(java.lang.Object, org.hamcrest.Matcher)</inbound>
                <inbound type="feature" confirmed="yes">org.junit.internal.AssumptionViolatedException.AssumptionViolatedException(java.lang.String)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.junit.internal.AssumptionViolatedException.AssumptionViolatedException(java.lang.String)</name>
                <outbound type="class" confirmed="no">java.lang.Object</outbound>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="class" confirmed="yes">org.hamcrest.Matcher</outbound>
                <outbound type="feature" confirmed="yes">org.junit.internal.AssumptionViolatedException.AssumptionViolatedException(java.lang.Object, org.hamcrest.Matcher)</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.junit.internal.AssumptionViolatedException.describeTo(org.hamcrest.Description)</name>
                <outbound type="class" confirmed="no">java.lang.Object</outbound>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="class" confirmed="no">java.lang.StringBuilder</outbound>
                <outbound type="feature" confirmed="no">java.lang.StringBuilder.StringBuilder()</outbound>
                <outbound type="feature" confirmed="no">java.lang.StringBuilder.append(java.lang.Object)</outbound>
                <outbound type="feature" confirmed="no">java.lang.StringBuilder.append(java.lang.String)</outbound>
                <outbound type="feature" confirmed="no">java.lang.StringBuilder.toString()</outbound>
                <outbound type="class" confirmed="yes">org.hamcrest.Description</outbound>
                <outbound type="feature" confirmed="yes">org.hamcrest.Description.appendDescriptionOf(org.hamcrest.SelfDescribing)</outbound>
                <outbound type="feature" confirmed="yes">org.hamcrest.Description.appendText(java.lang.String)</outbound>
                <outbound type="feature" confirmed="yes">org.hamcrest.Description.appendValue(java.lang.Object)</outbound>
                <outbound type="class" confirmed="yes">org.hamcrest.Matcher</outbound>
                <outbound type="class" confirmed="yes">org.hamcrest.SelfDescribing</outbound>
                <outbound type="feature" confirmed="yes">org.junit.internal.AssumptionViolatedException.fMatcher</outbound>
                <outbound type="feature" confirmed="yes">org.junit.internal.AssumptionViolatedException.fValue</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.junit.internal.AssumptionViolatedException.fMatcher</name>
                <outbound type="class" confirmed="yes">org.hamcrest.Matcher</outbound>
                <inbound type="feature" confirmed="yes">org.junit.internal.AssumptionViolatedException.AssumptionViolatedException(java.lang.Object, org.hamcrest.Matcher)</inbound>
                <inbound type="feature" confirmed="yes">org.junit.internal.AssumptionViolatedException.describeTo(org.hamcrest.Description)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.junit.internal.AssumptionViolatedException.fValue</name>
                <outbound type="class" confirmed="no">java.lang.Object</outbound>
                <inbound type="feature" confirmed="yes">org.junit.internal.AssumptionViolatedException.AssumptionViolatedException(java.lang.Object, org.hamcrest.Matcher)</inbound>
                <inbound type="feature" confirmed="yes">org.junit.internal.AssumptionViolatedException.describeTo(org.hamcrest.Description)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.junit.internal.AssumptionViolatedException.getMessage()</name>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="class" confirmed="yes">org.hamcrest.SelfDescribing</outbound>
                <outbound type="feature" confirmed="yes">org.hamcrest.StringDescription.asString(org.hamcrest.SelfDescribing)</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.junit.internal.AssumptionViolatedException.serialVersionUID</name>
            </feature>
        </class>
        <class confirmed="yes">
            <name>org.junit.internal.ComparisonCriteria</name>
            <outbound type="class" confirmed="no">java.lang.Object</outbound>
            <inbound type="class" confirmed="yes">org.junit.internal.ExactComparisonCriteria</inbound>
            <inbound type="class" confirmed="yes">org.junit.internal.InexactComparisonCriteria</inbound>
            <feature confirmed="yes">
                <name>org.junit.internal.ComparisonCriteria.ComparisonCriteria()</name>
                <outbound type="feature" confirmed="no">java.lang.Object.Object()</outbound>
                <inbound type="feature" confirmed="yes">org.junit.internal.ExactComparisonCriteria.ExactComparisonCriteria()</inbound>
                <inbound type="feature" confirmed="yes">org.junit.internal.InexactComparisonCriteria.InexactComparisonCriteria(double)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.junit.internal.ComparisonCriteria.arrayEquals(java.lang.String, java.lang.Object, java.lang.Object)</name>
                <outbound type="class" confirmed="no">java.lang.AssertionError</outbound>
                <outbound type="class" confirmed="no">java.lang.Object</outbound>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="class" confirmed="no">java.lang.StringBuilder</outbound>
                <outbound type="feature" confirmed="no">java.lang.StringBuilder.StringBuilder()</outbound>
                <outbound type="feature" confirmed="no">java.lang.StringBuilder.append(java.lang.String)</outbound>
                <outbound type="feature" confirmed="no">java.lang.StringBuilder.toString()</outbound>
                <outbound type="feature" confirmed="no">java.lang.reflect.Array.get(java.lang.Object, int)</outbound>
                <outbound type="class" confirmed="yes">org.junit.internal.ArrayComparisonFailure</outbound>
                <outbound type="feature" confirmed="yes">org.junit.internal.ArrayComparisonFailure.ArrayComparisonFailure(java.lang.String, java.lang.AssertionError, int)</outbound>
                <outbound type="feature" confirmed="yes">org.junit.internal.ArrayComparisonFailure.addDimension(int)</outbound>
                <outbound type="feature" confirmed="yes">org.junit.internal.ComparisonCriteria.assertArraysAreSameLength(java.lang.Object, java.lang.Object, java.lang.String)</outbound>
                <outbound type="feature" confirmed="yes">org.junit.internal.ComparisonCriteria.assertElementsEqual(java.lang.Object, java.lang.Object)</outbound>
                <outbound type="feature" confirmed="yes">org.junit.internal.ComparisonCriteria.isArray(java.lang.Object)</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.junit.internal.ComparisonCriteria.assertArraysAreSameLength(java.lang.Object, java.lang.Object, java.lang.String)</name>
                <outbound type="class" confirmed="no">java.lang.Object</outbound>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="class" confirmed="no">java.lang.StringBuilder</outbound>
                <outbound type="feature" confirmed="no">java.lang.StringBuilder.StringBuilder()</outbound>
                <outbound type="feature" confirmed="no">java.lang.StringBuilder.append(int)</outbound>
                <outbound type="feature" confirmed="no">java.lang.StringBuilder.append(java.lang.String)</outbound>
                <outbound type="feature" confirmed="no">java.lang.StringBuilder.toString()</outbound>
                <outbound type="feature" confirmed="no">java.lang.reflect.Array.getLength(java.lang.Object)</outbound>
                <outbound type="feature" confirmed="yes">org.junit.Assert.fail(java.lang.String)</outbound>
                <inbound type="feature" confirmed="yes">org.junit.internal.ComparisonCriteria.arrayEquals(java.lang.String, java.lang.Object, java.lang.Object)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.junit.internal.ComparisonCriteria.assertElementsEqual(java.lang.Object, java.lang.Object)</name>
                <outbound type="class" confirmed="no">java.lang.Object</outbound>
                <inbound type="feature" confirmed="yes">org.junit.internal.ComparisonCriteria.arrayEquals(java.lang.String, java.lang.Object, java.lang.Object)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.junit.internal.ComparisonCriteria.isArray(java.lang.Object)</name>
                <outbound type="class" confirmed="no">java.lang.Class</outbound>
                <outbound type="feature" confirmed="no">java.lang.Class.isArray()</outbound>
                <outbound type="class" confirmed="no">java.lang.Object</outbound>
                <outbound type="feature" confirmed="no">java.lang.Object.getClass()</outbound>
                <inbound type="feature" confirmed="yes">org.junit.internal.ComparisonCriteria.arrayEquals(java.lang.String, java.lang.Object, java.lang.Object)</inbound>
            </feature>
        </class>
        <class confirmed="yes">
            <name>org.junit.internal.ExactComparisonCriteria</name>
            <outbound type="class" confirmed="yes">org.junit.internal.ComparisonCriteria</outbound>
            <feature confirmed="yes">
                <name>org.junit.internal.ExactComparisonCriteria.ExactComparisonCriteria()</name>
                <outbound type="feature" confirmed="yes">org.junit.internal.ComparisonCriteria.ComparisonCriteria()</outbound>
                <inbound type="feature" confirmed="yes">org.junit.Assert.internalArrayEquals(java.lang.String, java.lang.Object, java.lang.Object)</inbound>
            </feature>
            <feature confirmed="no">
                <name>org.junit.internal.ExactComparisonCriteria.arrayEquals(java.lang.String, java.lang.Object, java.lang.Object)</name>
                <inbound type="feature" confirmed="yes">org.junit.Assert.internalArrayEquals(java.lang.String, java.lang.Object, java.lang.Object)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.junit.internal.ExactComparisonCriteria.assertElementsEqual(java.lang.Object, java.lang.Object)</name>
                <outbound type="class" confirmed="no">java.lang.Object</outbound>
                <outbound type="feature" confirmed="yes">org.junit.Assert.assertEquals(java.lang.Object, java.lang.Object)</outbound>
            </feature>
        </class>
        <class confirmed="yes">
            <name>org.junit.internal.InexactComparisonCriteria</name>
            <outbound type="class" confirmed="yes">org.junit.internal.ComparisonCriteria</outbound>
            <feature confirmed="yes">
                <name>org.junit.internal.InexactComparisonCriteria.InexactComparisonCriteria(double)</name>
                <outbound type="feature" confirmed="yes">org.junit.internal.ComparisonCriteria.ComparisonCriteria()</outbound>
                <outbound type="feature" confirmed="yes">org.junit.internal.InexactComparisonCriteria.fDelta</outbound>
                <inbound type="feature" confirmed="yes">org.junit.Assert.assertArrayEquals(java.lang.String, double[], double[], double)</inbound>
                <inbound type="feature" confirmed="yes">org.junit.Assert.assertArrayEquals(java.lang.String, float[], float[], float)</inbound>
            </feature>
            <feature confirmed="no">
                <name>org.junit.internal.InexactComparisonCriteria.arrayEquals(java.lang.String, java.lang.Object, java.lang.Object)</name>
                <inbound type="feature" confirmed="yes">org.junit.Assert.assertArrayEquals(java.lang.String, double[], double[], double)</inbound>
                <inbound type="feature" confirmed="yes">org.junit.Assert.assertArrayEquals(java.lang.String, float[], float[], float)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.junit.internal.InexactComparisonCriteria.assertElementsEqual(java.lang.Object, java.lang.Object)</name>
                <outbound type="class" confirmed="no">java.lang.Double</outbound>
                <outbound type="feature" confirmed="no">java.lang.Double.doubleValue()</outbound>
                <outbound type="class" confirmed="no">java.lang.Float</outbound>
                <outbound type="feature" confirmed="no">java.lang.Float.floatValue()</outbound>
                <outbound type="class" confirmed="no">java.lang.Object</outbound>
                <outbound type="feature" confirmed="yes">org.junit.Assert.assertEquals(double, double, double)</outbound>
                <outbound type="feature" confirmed="yes">org.junit.internal.InexactComparisonCriteria.fDelta</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.junit.internal.InexactComparisonCriteria.fDelta</name>
                <inbound type="feature" confirmed="yes">org.junit.internal.InexactComparisonCriteria.InexactComparisonCriteria(double)</inbound>
                <inbound type="feature" confirmed="yes">org.junit.internal.InexactComparisonCriteria.assertElementsEqual(java.lang.Object, java.lang.Object)</inbound>
            </feature>
        </class>
        <class confirmed="yes">
            <name>org.junit.internal.JUnitSystem</name>
            <outbound type="class" confirmed="no">java.lang.Object</outbound>
            <inbound type="class" confirmed="yes">org.junit.internal.RealSystem</inbound>
            <inbound type="feature" confirmed="yes">org.junit.internal.TextListener.TextListener(org.junit.internal.JUnitSystem)</inbound>
            <inbound type="feature" confirmed="yes">org.junit.runner.JUnitCore.main(java.lang.String[])</inbound>
            <inbound type="feature" confirmed="yes">org.junit.runner.JUnitCore.runMain(org.junit.internal.JUnitSystem, java.lang.String[])</inbound>
            <inbound type="feature" confirmed="yes">org.junit.runner.JUnitCore.runMainAndExit(org.junit.internal.JUnitSystem, java.lang.String[])</inbound>
            <feature confirmed="yes">
                <name>org.junit.internal.JUnitSystem.exit(int)</name>
                <inbound type="feature" confirmed="yes">org.junit.runner.JUnitCore.runMainAndExit(org.junit.internal.JUnitSystem, java.lang.String[])</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.junit.internal.JUnitSystem.out()</name>
                <outbound type="class" confirmed="no">java.io.PrintStream</outbound>
                <inbound type="feature" confirmed="yes">org.junit.internal.TextListener.TextListener(org.junit.internal.JUnitSystem)</inbound>
                <inbound type="feature" confirmed="yes">org.junit.runner.JUnitCore.runMain(org.junit.internal.JUnitSystem, java.lang.String[])</inbound>
            </feature>
        </class>
        <class confirmed="yes">
            <name>org.junit.internal.RealSystem</name>
            <outbound type="class" confirmed="no">java.lang.Object</outbound>
            <outbound type="class" confirmed="yes">org.junit.internal.JUnitSystem</outbound>
            <feature confirmed="yes">
                <name>org.junit.internal.RealSystem.RealSystem()</name>
                <outbound type="feature" confirmed="no">java.lang.Object.Object()</outbound>
                <inbound type="feature" confirmed="yes">org.junit.runner.JUnitCore.main(java.lang.String[])</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.junit.internal.RealSystem.exit(int)</name>
                <outbound type="feature" confirmed="no">java.lang.System.exit(int)</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.junit.internal.RealSystem.out()</name>
                <outbound type="class" confirmed="no">java.io.PrintStream</outbound>
                <outbound type="feature" confirmed="no">java.lang.System.out</outbound>
            </feature>
        </class>
        <class confirmed="yes">
            <name>org.junit.internal.TextListener</name>
            <outbound type="class" confirmed="yes">org.junit.runner.notification.RunListener</outbound>
            <feature confirmed="yes">
                <name>org.junit.internal.TextListener.TextListener(java.io.PrintStream)</name>
                <outbound type="class" confirmed="no">java.io.PrintStream</outbound>
                <outbound type="feature" confirmed="yes">org.junit.internal.TextListener.fWriter</outbound>
                <outbound type="feature" confirmed="yes">org.junit.runner.notification.RunListener.RunListener()</outbound>
                <inbound type="feature" confirmed="yes">org.junit.experimental.results.PrintableResult.toString()</inbound>
                <inbound type="feature" confirmed="yes">org.junit.internal.TextListener.TextListener(org.junit.internal.JUnitSystem)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.junit.internal.TextListener.TextListener(org.junit.internal.JUnitSystem)</name>
                <outbound type="class" confirmed="no">java.io.PrintStream</outbound>
                <outbound type="class" confirmed="yes">org.junit.internal.JUnitSystem</outbound>
                <outbound type="feature" confirmed="yes">org.junit.internal.JUnitSystem.out()</outbound>
                <outbound type="feature" confirmed="yes">org.junit.internal.TextListener.TextListener(java.io.PrintStream)</outbound>
                <inbound type="feature" confirmed="yes">org.junit.runner.JUnitCore.runMain(org.junit.internal.JUnitSystem, java.lang.String[])</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.junit.internal.TextListener.elapsedTimeAsString(long)</name>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="class" confirmed="no">java.text.NumberFormat</outbound>
                <outbound type="feature" confirmed="no">java.text.NumberFormat.format(double)</outbound>
                <outbound type="feature" confirmed="no">java.text.NumberFormat.getInstance()</outbound>
                <inbound type="feature" confirmed="yes">org.junit.internal.TextListener.printHeader(long)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.junit.internal.TextListener.fWriter</name>
                <outbound type="class" confirmed="no">java.io.PrintStream</outbound>
                <inbound type="feature" confirmed="yes">org.junit.internal.TextListener.TextListener(java.io.PrintStream)</inbound>
                <inbound type="feature" confirmed="yes">org.junit.internal.TextListener.getWriter()</inbound>
                <inbound type="feature" confirmed="yes">org.junit.internal.TextListener.testFailure(org.junit.runner.notification.Failure)</inbound>
                <inbound type="feature" confirmed="yes">org.junit.internal.TextListener.testIgnored(org.junit.runner.Description)</inbound>
                <inbound type="feature" confirmed="yes">org.junit.internal.TextListener.testStarted(org.junit.runner.Description)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.junit.internal.TextListener.getWriter()</name>
                <outbound type="class" confirmed="no">java.io.PrintStream</outbound>
                <outbound type="feature" confirmed="yes">org.junit.internal.TextListener.fWriter</outbound>
                <inbound type="feature" confirmed="yes">org.junit.internal.TextListener.printFailure(org.junit.runner.notification.Failure, java.lang.String)</inbound>
                <inbound type="feature" confirmed="yes">org.junit.internal.TextListener.printFailures(org.junit.runner.Result)</inbound>
                <inbound type="feature" confirmed="yes">org.junit.internal.TextListener.printFooter(org.junit.runner.Result)</inbound>
                <inbound type="feature" confirmed="yes">org.junit.internal.TextListener.printHeader(long)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.junit.internal.TextListener.printFailure(org.junit.runner.notification.Failure, java.lang.String)</name>
                <outbound type="class" confirmed="no">java.io.PrintStream</outbound>
                <outbound type="feature" confirmed="no">java.io.PrintStream.print(java.lang.String)</outbound>
                <outbound type="feature" confirmed="no">java.io.PrintStream.println(java.lang.String)</outbound>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="class" confirmed="no">java.lang.StringBuilder</outbound>
                <outbound type="feature" confirmed="no">java.lang.StringBuilder.StringBuilder()</outbound>
                <outbound type="feature" confirmed="no">java.lang.StringBuilder.append(java.lang.String)</outbound>
                <outbound type="feature" confirmed="no">java.lang.StringBuilder.toString()</outbound>
                <outbound type="feature" confirmed="yes">org.junit.internal.TextListener.getWriter()</outbound>
                <outbound type="class" confirmed="yes">org.junit.runner.notification.Failure</outbound>
                <outbound type="feature" confirmed="yes">org.junit.runner.notification.Failure.getTestHeader()</outbound>
                <outbound type="feature" confirmed="yes">org.junit.runner.notification.Failure.getTrace()</outbound>
                <inbound type="feature" confirmed="yes">org.junit.internal.TextListener.printFailures(org.junit.runner.Result)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.junit.internal.TextListener.printFailures(org.junit.runner.Result)</name>
                <outbound type="class" confirmed="no">java.io.PrintStream</outbound>
                <outbound type="feature" confirmed="no">java.io.PrintStream.println(java.lang.String)</outbound>
                <outbound type="class" confirmed="no">java.lang.Object</outbound>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="class" confirmed="no">java.lang.StringBuilder</outbound>
                <outbound type="feature" confirmed="no">java.lang.StringBuilder.StringBuilder()</outbound>
                <outbound type="feature" confirmed="no">java.lang.StringBuilder.append(int)</outbound>
                <outbound type="feature" confirmed="no">java.lang.StringBuilder.append(java.lang.String)</outbound>
                <outbound type="feature" confirmed="no">java.lang.StringBuilder.toString()</outbound>
                <outbound type="class" confirmed="no">java.util.Iterator</outbound>
                <outbound type="feature" confirmed="no">java.util.Iterator.hasNext()</outbound>
                <outbound type="feature" confirmed="no">java.util.Iterator.next()</outbound>
                <outbound type="class" confirmed="no">java.util.List</outbound>
                <outbound type="feature" confirmed="no">java.util.List.iterator()</outbound>
                <outbound type="feature" confirmed="no">java.util.List.size()</outbound>
                <outbound type="feature" confirmed="yes">org.junit.internal.TextListener.getWriter()</outbound>
                <outbound type="feature" confirmed="yes">org.junit.internal.TextListener.printFailure(org.junit.runner.notification.Failure, java.lang.String)</outbound>
                <outbound type="class" confirmed="yes">org.junit.runner.Result</outbound>
                <outbound type="feature" confirmed="yes">org.junit.runner.Result.getFailures()</outbound>
                <outbound type="class" confirmed="yes">org.junit.runner.notification.Failure</outbound>
                <inbound type="feature" confirmed="yes">org.junit.internal.TextListener.testRunFinished(org.junit.runner.Result)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.junit.internal.TextListener.printFooter(org.junit.runner.Result)</name>
                <outbound type="class" confirmed="no">java.io.PrintStream</outbound>
                <outbound type="feature" confirmed="no">java.io.PrintStream.print(java.lang.String)</outbound>
                <outbound type="feature" confirmed="no">java.io.PrintStream.println()</outbound>
                <outbound type="feature" confirmed="no">java.io.PrintStream.println(java.lang.String)</outbound>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="class" confirmed="no">java.lang.StringBuilder</outbound>
                <outbound type="feature" confirmed="no">java.lang.StringBuilder.StringBuilder()</outbound>
                <outbound type="feature" confirmed="no">java.lang.StringBuilder.append(int)</outbound>
                <outbound type="feature" confirmed="no">java.lang.StringBuilder.append(java.lang.String)</outbound>
                <outbound type="feature" confirmed="no">java.lang.StringBuilder.toString()</outbound>
                <outbound type="feature" confirmed="yes">org.junit.internal.TextListener.getWriter()</outbound>
                <outbound type="class" confirmed="yes">org.junit.runner.Result</outbound>
                <outbound type="feature" confirmed="yes">org.junit.runner.Result.getFailureCount()</outbound>
                <outbound type="feature" confirmed="yes">org.junit.runner.Result.getRunCount()</outbound>
                <outbound type="feature" confirmed="yes">org.junit.runner.Result.wasSuccessful()</outbound>
                <inbound type="feature" confirmed="yes">org.junit.internal.TextListener.testRunFinished(org.junit.runner.Result)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.junit.internal.TextListener.printHeader(long)</name>
                <outbound type="class" confirmed="no">java.io.PrintStream</outbound>
                <outbound type="feature" confirmed="no">java.io.PrintStream.println()</outbound>
                <outbound type="feature" confirmed="no">java.io.PrintStream.println(java.lang.String)</outbound>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="class" confirmed="no">java.lang.StringBuilder</outbound>
                <outbound type="feature" confirmed="no">java.lang.StringBuilder.StringBuilder()</outbound>
                <outbound type="feature" confirmed="no">java.lang.StringBuilder.append(java.lang.String)</outbound>
                <outbound type="feature" confirmed="no">java.lang.StringBuilder.toString()</outbound>
                <outbound type="feature" confirmed="yes">org.junit.internal.TextListener.elapsedTimeAsString(long)</outbound>
                <outbound type="feature" confirmed="yes">org.junit.internal.TextListener.getWriter()</outbound>
                <inbound type="feature" confirmed="yes">org.junit.internal.TextListener.testRunFinished(org.junit.runner.Result)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.junit.internal.TextListener.testFailure(org.junit.runner.notification.Failure)</name>
                <outbound type="class" confirmed="no">java.io.PrintStream</outbound>
                <outbound type="feature" confirmed="no">java.io.PrintStream.append(char)</outbound>
                <outbound type="feature" confirmed="yes">org.junit.internal.TextListener.fWriter</outbound>
                <outbound type="class" confirmed="yes">org.junit.runner.notification.Failure</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.junit.internal.TextListener.testIgnored(org.junit.runner.Description)</name>
                <outbound type="class" confirmed="no">java.io.PrintStream</outbound>
                <outbound type="feature" confirmed="no">java.io.PrintStream.append(char)</outbound>
                <outbound type="feature" confirmed="yes">org.junit.internal.TextListener.fWriter</outbound>
                <outbound type="class" confirmed="yes">org.junit.runner.Description</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.junit.internal.TextListener.testRunFinished(org.junit.runner.Result)</name>
                <outbound type="feature" confirmed="yes">org.junit.internal.TextListener.printFailures(org.junit.runner.Result)</outbound>
                <outbound type="feature" confirmed="yes">org.junit.internal.TextListener.printFooter(org.junit.runner.Result)</outbound>
                <outbound type="feature" confirmed="yes">org.junit.internal.TextListener.printHeader(long)</outbound>
                <outbound type="class" confirmed="yes">org.junit.runner.Result</outbound>
                <outbound type="feature" confirmed="yes">org.junit.runner.Result.getRunTime()</outbound>
                <inbound type="feature" confirmed="yes">org.junit.experimental.results.PrintableResult.toString()</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.junit.internal.TextListener.testStarted(org.junit.runner.Description)</name>
                <outbound type="class" confirmed="no">java.io.PrintStream</outbound>
                <outbound type="feature" confirmed="no">java.io.PrintStream.append(char)</outbound>
                <outbound type="feature" confirmed="yes">org.junit.internal.TextListener.fWriter</outbound>
                <outbound type="class" confirmed="yes">org.junit.runner.Description</outbound>
            </feature>
        </class>
    </package>
    <package confirmed="yes">
        <name>org.junit.internal.builders</name>
        <class confirmed="yes">
            <name>org.junit.internal.builders.AllDefaultPossibilitiesBuilder</name>
            <outbound type="class" confirmed="yes">org.junit.runners.model.RunnerBuilder</outbound>
            <feature confirmed="yes">
                <name>org.junit.internal.builders.AllDefaultPossibilitiesBuilder.AllDefaultPossibilitiesBuilder(boolean)</name>
                <outbound type="feature" confirmed="yes">org.junit.internal.builders.AllDefaultPossibilitiesBuilder.fCanUseSuiteMethod</outbound>
                <outbound type="feature" confirmed="yes">org.junit.runners.model.RunnerBuilder.RunnerBuilder()</outbound>
                <inbound type="feature" confirmed="yes">org.junit.internal.requests.ClassRequest.getRunner()</inbound>
                <inbound type="feature" confirmed="yes">org.junit.runner.Request.classes(org.junit.runner.Computer, java.lang.Class[])</inbound>
                <inbound type="feature" confirmed="yes">org.junit.runners.Suite.Suite(java.lang.Class, java.lang.Class[])</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.junit.internal.builders.AllDefaultPossibilitiesBuilder.annotatedBuilder()</name>
                <outbound type="class" confirmed="yes">org.junit.internal.builders.AnnotatedBuilder</outbound>
                <outbound type="feature" confirmed="yes">org.junit.internal.builders.AnnotatedBuilder.AnnotatedBuilder(org.junit.runners.model.RunnerBuilder)</outbound>
                <outbound type="class" confirmed="yes">org.junit.runners.model.RunnerBuilder</outbound>
                <inbound type="feature" confirmed="yes">org.junit.internal.builders.AllDefaultPossibilitiesBuilder.runnerForClass(java.lang.Class)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.junit.internal.builders.AllDefaultPossibilitiesBuilder.fCanUseSuiteMethod</name>
                <inbound type="feature" confirmed="yes">org.junit.internal.builders.AllDefaultPossibilitiesBuilder.AllDefaultPossibilitiesBuilder(boolean)</inbound>
                <inbound type="feature" confirmed="yes">org.junit.internal.builders.AllDefaultPossibilitiesBuilder.suiteMethodBuilder()</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.junit.internal.builders.AllDefaultPossibilitiesBuilder.ignoredBuilder()</name>
                <outbound type="class" confirmed="yes">org.junit.internal.builders.IgnoredBuilder</outbound>
                <outbound type="feature" confirmed="yes">org.junit.internal.builders.IgnoredBuilder.IgnoredBuilder()</outbound>
                <inbound type="feature" confirmed="yes">org.junit.internal.builders.AllDefaultPossibilitiesBuilder.runnerForClass(java.lang.Class)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.junit.internal.builders.AllDefaultPossibilitiesBuilder.junit3Builder()</name>
                <outbound type="class" confirmed="yes">org.junit.internal.builders.JUnit3Builder</outbound>
                <outbound type="feature" confirmed="yes">org.junit.internal.builders.JUnit3Builder.JUnit3Builder()</outbound>
                <inbound type="feature" confirmed="yes">org.junit.internal.builders.AllDefaultPossibilitiesBuilder.runnerForClass(java.lang.Class)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.junit.internal.builders.AllDefaultPossibilitiesBuilder.junit4Builder()</name>
                <outbound type="class" confirmed="yes">org.junit.internal.builders.JUnit4Builder</outbound>
                <outbound type="feature" confirmed="yes">org.junit.internal.builders.JUnit4Builder.JUnit4Builder()</outbound>
                <inbound type="feature" confirmed="yes">org.junit.internal.builders.AllDefaultPossibilitiesBuilder.runnerForClass(java.lang.Class)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.junit.internal.builders.AllDefaultPossibilitiesBuilder.runnerForClass(java.lang.Class)</name>
                <outbound type="class" confirmed="no">java.lang.Class</outbound>
                <outbound type="class" confirmed="no">java.lang.Object</outbound>
                <outbound type="class" confirmed="no">java.lang.Throwable</outbound>
                <outbound type="feature" confirmed="no">java.util.Arrays.asList(java.lang.Object[])</outbound>
                <outbound type="class" confirmed="no">java.util.Iterator</outbound>
                <outbound type="feature" confirmed="no">java.util.Iterator.hasNext()</outbound>
                <outbound type="feature" confirmed="no">java.util.Iterator.next()</outbound>
                <outbound type="class" confirmed="no">java.util.List</outbound>
                <outbound type="feature" confirmed="no">java.util.List.iterator()</outbound>
                <outbound type="feature" confirmed="yes">org.junit.internal.builders.AllDefaultPossibilitiesBuilder.annotatedBuilder()</outbound>
                <outbound type="feature" confirmed="yes">org.junit.internal.builders.AllDefaultPossibilitiesBuilder.ignoredBuilder()</outbound>
                <outbound type="feature" confirmed="yes">org.junit.internal.builders.AllDefaultPossibilitiesBuilder.junit3Builder()</outbound>
                <outbound type="feature" confirmed="yes">org.junit.internal.builders.AllDefaultPossibilitiesBuilder.junit4Builder()</outbound>
                <outbound type="feature" confirmed="yes">org.junit.internal.builders.AllDefaultPossibilitiesBuilder.suiteMethodBuilder()</outbound>
                <outbound type="class" confirmed="yes">org.junit.internal.builders.AnnotatedBuilder</outbound>
                <outbound type="class" confirmed="yes">org.junit.internal.builders.IgnoredBuilder</outbound>
                <outbound type="class" confirmed="yes">org.junit.internal.builders.JUnit3Builder</outbound>
                <outbound type="class" confirmed="yes">org.junit.internal.builders.JUnit4Builder</outbound>
                <outbound type="class" confirmed="yes">org.junit.runner.Runner</outbound>
                <outbound type="class" confirmed="yes">org.junit.runners.model.RunnerBuilder</outbound>
                <outbound type="feature" confirmed="yes">org.junit.runners.model.RunnerBuilder.safeRunnerForClass(java.lang.Class)</outbound>
            </feature>
            <feature confirmed="no">
                <name>org.junit.internal.builders.AllDefaultPossibilitiesBuilder.safeRunnerForClass(java.lang.Class)</name>
                <inbound type="feature" confirmed="yes">org.junit.internal.requests.ClassRequest.getRunner()</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.junit.internal.builders.AllDefaultPossibilitiesBuilder.suiteMethodBuilder()</name>
                <outbound type="feature" confirmed="yes">org.junit.internal.builders.AllDefaultPossibilitiesBuilder.fCanUseSuiteMethod</outbound>
                <outbound type="feature" confirmed="yes">org.junit.internal.builders.NullBuilder.NullBuilder()</outbound>
                <outbound type="feature" confirmed="yes">org.junit.internal.builders.SuiteMethodBuilder.SuiteMethodBuilder()</outbound>
                <outbound type="class" confirmed="yes">org.junit.runners.model.RunnerBuilder</outbound>
                <inbound type="feature" confirmed="yes">org.junit.internal.builders.AllDefaultPossibilitiesBuilder.runnerForClass(java.lang.Class)</inbound>
            </feature>
        </class>
        <class confirmed="yes">
            <name>org.junit.internal.builders.AnnotatedBuilder</name>
            <outbound type="class" confirmed="yes">org.junit.runners.model.RunnerBuilder</outbound>
            <inbound type="feature" confirmed="yes">org.junit.internal.builders.AllDefaultPossibilitiesBuilder.annotatedBuilder()</inbound>
            <inbound type="feature" confirmed="yes">org.junit.internal.builders.AllDefaultPossibilitiesBuilder.runnerForClass(java.lang.Class)</inbound>
            <feature confirmed="yes">
                <name>org.junit.internal.builders.AnnotatedBuilder.AnnotatedBuilder(org.junit.runners.model.RunnerBuilder)</name>
                <outbound type="feature" confirmed="yes">org.junit.internal.builders.AnnotatedBuilder.fSuiteBuilder</outbound>
                <outbound type="class" confirmed="yes">org.junit.runners.model.RunnerBuilder</outbound>
                <outbound type="feature" confirmed="yes">org.junit.runners.model.RunnerBuilder.RunnerBuilder()</outbound>
                <inbound type="feature" confirmed="yes">org.junit.internal.builders.AllDefaultPossibilitiesBuilder.annotatedBuilder()</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.junit.internal.builders.AnnotatedBuilder.CONSTRUCTOR_ERROR_FORMAT</name>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.junit.internal.builders.AnnotatedBuilder.buildRunner(java.lang.Class, java.lang.Class)</name>
                <outbound type="class" confirmed="no">java.lang.Class</outbound>
                <outbound type="feature" confirmed="no">java.lang.Class.getConstructor(java.lang.Class[])</outbound>
                <outbound type="feature" confirmed="no">java.lang.Class.getSimpleName()</outbound>
                <outbound type="class" confirmed="no">java.lang.Exception</outbound>
                <outbound type="class" confirmed="no">java.lang.NoSuchMethodException</outbound>
                <outbound type="class" confirmed="no">java.lang.Object</outbound>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="feature" confirmed="no">java.lang.String.format(java.lang.String, java.lang.Object[])</outbound>
                <outbound type="class" confirmed="no">java.lang.reflect.Constructor</outbound>
                <outbound type="feature" confirmed="no">java.lang.reflect.Constructor.newInstance(java.lang.Object[])</outbound>
                <outbound type="feature" confirmed="yes">org.junit.internal.builders.AnnotatedBuilder.fSuiteBuilder</outbound>
                <outbound type="class" confirmed="yes">org.junit.runner.Runner</outbound>
                <outbound type="feature" confirmed="yes">org.junit.runners.model.InitializationError.InitializationError(java.lang.String)</outbound>
                <outbound type="class" confirmed="yes">org.junit.runners.model.RunnerBuilder</outbound>
                <inbound type="feature" confirmed="yes">org.junit.internal.builders.AnnotatedBuilder.runnerForClass(java.lang.Class)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.junit.internal.builders.AnnotatedBuilder.fSuiteBuilder</name>
                <outbound type="class" confirmed="yes">org.junit.runners.model.RunnerBuilder</outbound>
                <inbound type="feature" confirmed="yes">org.junit.internal.builders.AnnotatedBuilder.AnnotatedBuilder(org.junit.runners.model.RunnerBuilder)</inbound>
                <inbound type="feature" confirmed="yes">org.junit.internal.builders.AnnotatedBuilder.buildRunner(java.lang.Class, java.lang.Class)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.junit.internal.builders.AnnotatedBuilder.runnerForClass(java.lang.Class)</name>
                <outbound type="class" confirmed="no">java.lang.Class</outbound>
                <outbound type="feature" confirmed="no">java.lang.Class.getAnnotation(java.lang.Class)</outbound>
                <outbound type="class" confirmed="no">java.lang.Exception</outbound>
                <outbound type="class" confirmed="no">java.lang.annotation.Annotation</outbound>
                <outbound type="feature" confirmed="yes">org.junit.internal.builders.AnnotatedBuilder.buildRunner(java.lang.Class, java.lang.Class)</outbound>
                <outbound type="class" confirmed="yes">org.junit.runner.RunWith</outbound>
                <outbound type="feature" confirmed="yes">org.junit.runner.RunWith.value()</outbound>
                <outbound type="class" confirmed="yes">org.junit.runner.Runner</outbound>
            </feature>
        </class>
        <class confirmed="yes">
            <name>org.junit.internal.builders.IgnoredBuilder</name>
            <outbound type="class" confirmed="yes">org.junit.runners.model.RunnerBuilder</outbound>
            <inbound type="feature" confirmed="yes">org.junit.internal.builders.AllDefaultPossibilitiesBuilder.ignoredBuilder()</inbound>
            <inbound type="feature" confirmed="yes">org.junit.internal.builders.AllDefaultPossibilitiesBuilder.runnerForClass(java.lang.Class)</inbound>
            <feature confirmed="yes">
                <name>org.junit.internal.builders.IgnoredBuilder.IgnoredBuilder()</name>
                <outbound type="feature" confirmed="yes">org.junit.runners.model.RunnerBuilder.RunnerBuilder()</outbound>
                <inbound type="feature" confirmed="yes">org.junit.internal.builders.AllDefaultPossibilitiesBuilder.ignoredBuilder()</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.junit.internal.builders.IgnoredBuilder.runnerForClass(java.lang.Class)</name>
                <outbound type="class" confirmed="no">java.lang.Class</outbound>
                <outbound type="feature" confirmed="no">java.lang.Class.getAnnotation(java.lang.Class)</outbound>
                <outbound type="class" confirmed="no">java.lang.annotation.Annotation</outbound>
                <outbound type="class" confirmed="yes">org.junit.Ignore</outbound>
                <outbound type="feature" confirmed="yes">org.junit.internal.builders.IgnoredClassRunner.IgnoredClassRunner(java.lang.Class)</outbound>
                <outbound type="class" confirmed="yes">org.junit.runner.Runner</outbound>
            </feature>
        </class>
        <class confirmed="yes">
            <name>org.junit.internal.builders.IgnoredClassRunner</name>
            <outbound type="class" confirmed="yes">org.junit.runner.Runner</outbound>
            <feature confirmed="yes">
                <name>org.junit.internal.builders.IgnoredClassRunner.IgnoredClassRunner(java.lang.Class)</name>
                <outbound type="class" confirmed="no">java.lang.Class</outbound>
                <outbound type="feature" confirmed="yes">org.junit.internal.builders.IgnoredClassRunner.fTestClass</outbound>
                <outbound type="feature" confirmed="yes">org.junit.runner.Runner.Runner()</outbound>
                <inbound type="feature" confirmed="yes">org.junit.internal.builders.IgnoredBuilder.runnerForClass(java.lang.Class)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.junit.internal.builders.IgnoredClassRunner.fTestClass</name>
                <outbound type="class" confirmed="no">java.lang.Class</outbound>
                <inbound type="feature" confirmed="yes">org.junit.internal.builders.IgnoredClassRunner.IgnoredClassRunner(java.lang.Class)</inbound>
                <inbound type="feature" confirmed="yes">org.junit.internal.builders.IgnoredClassRunner.getDescription()</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.junit.internal.builders.IgnoredClassRunner.getDescription()</name>
                <outbound type="class" confirmed="no">java.lang.Class</outbound>
                <outbound type="feature" confirmed="yes">org.junit.internal.builders.IgnoredClassRunner.fTestClass</outbound>
                <outbound type="class" confirmed="yes">org.junit.runner.Description</outbound>
                <outbound type="feature" confirmed="yes">org.junit.runner.Description.createSuiteDescription(java.lang.Class)</outbound>
                <inbound type="feature" confirmed="yes">org.junit.internal.builders.IgnoredClassRunner.run(org.junit.runner.notification.RunNotifier)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.junit.internal.builders.IgnoredClassRunner.run(org.junit.runner.notification.RunNotifier)</name>
                <outbound type="feature" confirmed="yes">org.junit.internal.builders.IgnoredClassRunner.getDescription()</outbound>
                <outbound type="class" confirmed="yes">org.junit.runner.Description</outbound>
                <outbound type="class" confirmed="yes">org.junit.runner.notification.RunNotifier</outbound>
                <outbound type="feature" confirmed="yes">org.junit.runner.notification.RunNotifier.fireTestIgnored(org.junit.runner.Description)</outbound>
            </feature>
        </class>
        <class confirmed="yes">
            <name>org.junit.internal.builders.JUnit3Builder</name>
            <outbound type="class" confirmed="yes">org.junit.runners.model.RunnerBuilder</outbound>
            <inbound type="feature" confirmed="yes">org.junit.internal.builders.AllDefaultPossibilitiesBuilder.junit3Builder()</inbound>
            <inbound type="feature" confirmed="yes">org.junit.internal.builders.AllDefaultPossibilitiesBuilder.runnerForClass(java.lang.Class)</inbound>
            <feature confirmed="yes">
                <name>org.junit.internal.builders.JUnit3Builder.JUnit3Builder()</name>
                <outbound type="feature" confirmed="yes">org.junit.runners.model.RunnerBuilder.RunnerBuilder()</outbound>
                <inbound type="feature" confirmed="yes">org.junit.internal.builders.AllDefaultPossibilitiesBuilder.junit3Builder()</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.junit.internal.builders.JUnit3Builder.isPre4Test(java.lang.Class)</name>
                <outbound type="class" confirmed="no">java.lang.Class</outbound>
                <outbound type="feature" confirmed="no">java.lang.Class.isAssignableFrom(java.lang.Class)</outbound>
                <outbound type="class" confirmed="yes">junit.framework.TestCase</outbound>
                <inbound type="feature" confirmed="yes">org.junit.internal.builders.JUnit3Builder.runnerForClass(java.lang.Class)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.junit.internal.builders.JUnit3Builder.runnerForClass(java.lang.Class)</name>
                <outbound type="class" confirmed="no">java.lang.Class</outbound>
                <outbound type="class" confirmed="no">java.lang.Throwable</outbound>
                <outbound type="feature" confirmed="yes">org.junit.internal.builders.JUnit3Builder.isPre4Test(java.lang.Class)</outbound>
                <outbound type="feature" confirmed="yes">org.junit.internal.runners.JUnit38ClassRunner.JUnit38ClassRunner(java.lang.Class)</outbound>
                <outbound type="class" confirmed="yes">org.junit.runner.Runner</outbound>
            </feature>
        </class>
        <class confirmed="yes">
            <name>org.junit.internal.builders.JUnit4Builder</name>
            <outbound type="class" confirmed="yes">org.junit.runners.model.RunnerBuilder</outbound>
            <inbound type="feature" confirmed="yes">org.junit.internal.builders.AllDefaultPossibilitiesBuilder.junit4Builder()</inbound>
            <inbound type="feature" confirmed="yes">org.junit.internal.builders.AllDefaultPossibilitiesBuilder.runnerForClass(java.lang.Class)</inbound>
            <feature confirmed="yes">
                <name>org.junit.internal.builders.JUnit4Builder.JUnit4Builder()</name>
                <outbound type="feature" confirmed="yes">org.junit.runners.model.RunnerBuilder.RunnerBuilder()</outbound>
                <inbound type="feature" confirmed="yes">org.junit.internal.builders.AllDefaultPossibilitiesBuilder.junit4Builder()</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.junit.internal.builders.JUnit4Builder.runnerForClass(java.lang.Class)</name>
                <outbound type="class" confirmed="no">java.lang.Class</outbound>
                <outbound type="class" confirmed="no">java.lang.Throwable</outbound>
                <outbound type="class" confirmed="yes">org.junit.runner.Runner</outbound>
                <outbound type="feature" confirmed="yes">org.junit.runners.BlockJUnit4ClassRunner.BlockJUnit4ClassRunner(java.lang.Class)</outbound>
            </feature>
        </class>
        <class confirmed="yes">
            <name>org.junit.internal.builders.NullBuilder</name>
            <outbound type="class" confirmed="yes">org.junit.runners.model.RunnerBuilder</outbound>
            <feature confirmed="yes">
                <name>org.junit.internal.builders.NullBuilder.NullBuilder()</name>
                <outbound type="feature" confirmed="yes">org.junit.runners.model.RunnerBuilder.RunnerBuilder()</outbound>
                <inbound type="feature" confirmed="yes">org.junit.internal.builders.AllDefaultPossibilitiesBuilder.suiteMethodBuilder()</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.junit.internal.builders.NullBuilder.runnerForClass(java.lang.Class)</name>
                <outbound type="class" confirmed="no">java.lang.Class</outbound>
                <outbound type="class" confirmed="no">java.lang.Throwable</outbound>
                <outbound type="class" confirmed="yes">org.junit.runner.Runner</outbound>
            </feature>
        </class>
        <class confirmed="yes">
            <name>org.junit.internal.builders.SuiteMethodBuilder</name>
            <outbound type="class" confirmed="yes">org.junit.runners.model.RunnerBuilder</outbound>
            <feature confirmed="yes">
                <name>org.junit.internal.builders.SuiteMethodBuilder.SuiteMethodBuilder()</name>
                <outbound type="feature" confirmed="yes">org.junit.runners.model.RunnerBuilder.RunnerBuilder()</outbound>
                <inbound type="feature" confirmed="yes">org.junit.internal.builders.AllDefaultPossibilitiesBuilder.suiteMethodBuilder()</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.junit.internal.builders.SuiteMethodBuilder.hasSuiteMethod(java.lang.Class)</name>
                <outbound type="class" confirmed="no">java.lang.Class</outbound>
                <outbound type="feature" confirmed="no">java.lang.Class.getMethod(java.lang.String, java.lang.Class[])</outbound>
                <outbound type="class" confirmed="no">java.lang.NoSuchMethodException</outbound>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="class" confirmed="no">java.lang.reflect.Method</outbound>
                <inbound type="feature" confirmed="yes">org.junit.internal.builders.SuiteMethodBuilder.runnerForClass(java.lang.Class)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.junit.internal.builders.SuiteMethodBuilder.runnerForClass(java.lang.Class)</name>
                <outbound type="class" confirmed="no">java.lang.Class</outbound>
                <outbound type="class" confirmed="no">java.lang.Throwable</outbound>
                <outbound type="feature" confirmed="yes">org.junit.internal.builders.SuiteMethodBuilder.hasSuiteMethod(java.lang.Class)</outbound>
                <outbound type="feature" confirmed="yes">org.junit.internal.runners.SuiteMethod.SuiteMethod(java.lang.Class)</outbound>
                <outbound type="class" confirmed="yes">org.junit.runner.Runner</outbound>
            </feature>
        </class>
    </package>
    <package confirmed="yes">
        <name>org.junit.internal.matchers</name>
        <class confirmed="yes">
            <name>org.junit.internal.matchers.CombinableMatcher</name>
            <outbound type="class" confirmed="yes">org.hamcrest.BaseMatcher</outbound>
            <inbound type="feature" confirmed="yes">org.junit.matchers.JUnitMatchers.both(org.hamcrest.Matcher)</inbound>
            <inbound type="feature" confirmed="yes">org.junit.matchers.JUnitMatchers.either(org.hamcrest.Matcher)</inbound>
            <inbound type="feature" confirmed="yes">org.junit.rules.ExpectedException.expect(org.hamcrest.Matcher)</inbound>
            <feature confirmed="yes">
                <name>org.junit.internal.matchers.CombinableMatcher.CombinableMatcher(org.hamcrest.Matcher)</name>
                <outbound type="feature" confirmed="yes">org.hamcrest.BaseMatcher.BaseMatcher()</outbound>
                <outbound type="class" confirmed="yes">org.hamcrest.Matcher</outbound>
                <outbound type="feature" confirmed="yes">org.junit.internal.matchers.CombinableMatcher.fMatcher</outbound>
                <inbound type="feature" confirmed="yes">org.junit.internal.matchers.CombinableMatcher.and(org.hamcrest.Matcher)</inbound>
                <inbound type="feature" confirmed="yes">org.junit.internal.matchers.CombinableMatcher.or(org.hamcrest.Matcher)</inbound>
                <inbound type="feature" confirmed="yes">org.junit.matchers.JUnitMatchers.both(org.hamcrest.Matcher)</inbound>
                <inbound type="feature" confirmed="yes">org.junit.matchers.JUnitMatchers.either(org.hamcrest.Matcher)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.junit.internal.matchers.CombinableMatcher.and(org.hamcrest.Matcher)</name>
                <outbound type="feature" confirmed="yes">org.hamcrest.CoreMatchers.allOf(org.hamcrest.Matcher[])</outbound>
                <outbound type="class" confirmed="yes">org.hamcrest.Matcher</outbound>
                <outbound type="feature" confirmed="yes">org.junit.internal.matchers.CombinableMatcher.CombinableMatcher(org.hamcrest.Matcher)</outbound>
                <outbound type="feature" confirmed="yes">org.junit.internal.matchers.CombinableMatcher.fMatcher</outbound>
                <inbound type="feature" confirmed="yes">org.junit.rules.ExpectedException.expect(org.hamcrest.Matcher)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.junit.internal.matchers.CombinableMatcher.describeTo(org.hamcrest.Description)</name>
                <outbound type="class" confirmed="yes">org.hamcrest.Description</outbound>
                <outbound type="feature" confirmed="yes">org.hamcrest.Description.appendDescriptionOf(org.hamcrest.SelfDescribing)</outbound>
                <outbound type="class" confirmed="yes">org.hamcrest.Matcher</outbound>
                <outbound type="class" confirmed="yes">org.hamcrest.SelfDescribing</outbound>
                <outbound type="feature" confirmed="yes">org.junit.internal.matchers.CombinableMatcher.fMatcher</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.junit.internal.matchers.CombinableMatcher.fMatcher</name>
                <outbound type="class" confirmed="yes">org.hamcrest.Matcher</outbound>
                <inbound type="feature" confirmed="yes">org.junit.internal.matchers.CombinableMatcher.CombinableMatcher(org.hamcrest.Matcher)</inbound>
                <inbound type="feature" confirmed="yes">org.junit.internal.matchers.CombinableMatcher.and(org.hamcrest.Matcher)</inbound>
                <inbound type="feature" confirmed="yes">org.junit.internal.matchers.CombinableMatcher.describeTo(org.hamcrest.Description)</inbound>
                <inbound type="feature" confirmed="yes">org.junit.internal.matchers.CombinableMatcher.matches(java.lang.Object)</inbound>
                <inbound type="feature" confirmed="yes">org.junit.internal.matchers.CombinableMatcher.or(org.hamcrest.Matcher)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.junit.internal.matchers.CombinableMatcher.matches(java.lang.Object)</name>
                <outbound type="class" confirmed="no">java.lang.Object</outbound>
                <outbound type="class" confirmed="yes">org.hamcrest.Matcher</outbound>
                <outbound type="feature" confirmed="yes">org.hamcrest.Matcher.matches(java.lang.Object)</outbound>
                <outbound type="feature" confirmed="yes">org.junit.internal.matchers.CombinableMatcher.fMatcher</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.junit.internal.matchers.CombinableMatcher.or(org.hamcrest.Matcher)</name>
                <outbound type="feature" confirmed="yes">org.hamcrest.CoreMatchers.anyOf(org.hamcrest.Matcher[])</outbound>
                <outbound type="class" confirmed="yes">org.hamcrest.Matcher</outbound>
                <outbound type="feature" confirmed="yes">org.junit.internal.matchers.CombinableMatcher.CombinableMatcher(org.hamcrest.Matcher)</outbound>
                <outbound type="feature" confirmed="yes">org.junit.internal.matchers.CombinableMatcher.fMatcher</outbound>
            </feature>
        </class>
        <class confirmed="yes">
            <name>org.junit.internal.matchers.Each</name>
            <outbound type="class" confirmed="no">java.lang.Object</outbound>
            <feature confirmed="yes">
                <name>org.junit.internal.matchers.Each.Each()</name>
                <outbound type="feature" confirmed="no">java.lang.Object.Object()</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.junit.internal.matchers.Each.each(org.hamcrest.Matcher)</name>
                <outbound type="feature" confirmed="yes">org.hamcrest.CoreMatchers.not(org.hamcrest.Matcher)</outbound>
                <outbound type="class" confirmed="yes">org.hamcrest.Matcher</outbound>
                <outbound type="feature" confirmed="yes">org.junit.internal.matchers.Each$1.Each$1(org.hamcrest.Matcher, org.hamcrest.Matcher)</outbound>
                <outbound type="feature" confirmed="yes">org.junit.internal.matchers.IsCollectionContaining.hasItem(org.hamcrest.Matcher)</outbound>
                <inbound type="feature" confirmed="yes">org.junit.Assume.assumeNotNull(java.lang.Object[])</inbound>
                <inbound type="feature" confirmed="yes">org.junit.matchers.JUnitMatchers.everyItem(org.hamcrest.Matcher)</inbound>
            </feature>
        </class>
        <class confirmed="yes">
            <name>org.junit.internal.matchers.Each$1</name>
            <outbound type="class" confirmed="yes">org.hamcrest.BaseMatcher</outbound>
            <feature confirmed="yes">
                <name>org.junit.internal.matchers.Each$1.Each$1(org.hamcrest.Matcher, org.hamcrest.Matcher)</name>
                <outbound type="feature" confirmed="yes">org.hamcrest.BaseMatcher.BaseMatcher()</outbound>
                <outbound type="class" confirmed="yes">org.hamcrest.Matcher</outbound>
                <outbound type="feature" confirmed="yes">org.junit.internal.matchers.Each$1.val$allItemsAre</outbound>
                <outbound type="feature" confirmed="yes">org.junit.internal.matchers.Each$1.val$individual</outbound>
                <inbound type="feature" confirmed="yes">org.junit.internal.matchers.Each.each(org.hamcrest.Matcher)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.junit.internal.matchers.Each$1.describeTo(org.hamcrest.Description)</name>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="class" confirmed="yes">org.hamcrest.Description</outbound>
                <outbound type="feature" confirmed="yes">org.hamcrest.Description.appendText(java.lang.String)</outbound>
                <outbound type="class" confirmed="yes">org.hamcrest.Matcher</outbound>
                <outbound type="feature" confirmed="no">org.hamcrest.Matcher.describeTo(org.hamcrest.Description)</outbound>
                <outbound type="feature" confirmed="yes">org.junit.internal.matchers.Each$1.val$individual</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.junit.internal.matchers.Each$1.matches(java.lang.Object)</name>
                <outbound type="class" confirmed="no">java.lang.Object</outbound>
                <outbound type="class" confirmed="yes">org.hamcrest.Matcher</outbound>
                <outbound type="feature" confirmed="yes">org.hamcrest.Matcher.matches(java.lang.Object)</outbound>
                <outbound type="feature" confirmed="yes">org.junit.internal.matchers.Each$1.val$allItemsAre</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.junit.internal.matchers.Each$1.val$allItemsAre</name>
                <outbound type="class" confirmed="yes">org.hamcrest.Matcher</outbound>
                <inbound type="feature" confirmed="yes">org.junit.internal.matchers.Each$1.Each$1(org.hamcrest.Matcher, org.hamcrest.Matcher)</inbound>
                <inbound type="feature" confirmed="yes">org.junit.internal.matchers.Each$1.matches(java.lang.Object)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.junit.internal.matchers.Each$1.val$individual</name>
                <outbound type="class" confirmed="yes">org.hamcrest.Matcher</outbound>
                <inbound type="feature" confirmed="yes">org.junit.internal.matchers.Each$1.Each$1(org.hamcrest.Matcher, org.hamcrest.Matcher)</inbound>
                <inbound type="feature" confirmed="yes">org.junit.internal.matchers.Each$1.describeTo(org.hamcrest.Description)</inbound>
            </feature>
        </class>
        <class confirmed="yes">
            <name>org.junit.internal.matchers.IsCollectionContaining</name>
            <outbound type="class" confirmed="yes">org.junit.internal.matchers.TypeSafeMatcher</outbound>
            <feature confirmed="yes">
                <name>org.junit.internal.matchers.IsCollectionContaining.IsCollectionContaining(org.hamcrest.Matcher)</name>
                <outbound type="class" confirmed="yes">org.hamcrest.Matcher</outbound>
                <outbound type="feature" confirmed="yes">org.junit.internal.matchers.IsCollectionContaining.elementMatcher</outbound>
                <outbound type="feature" confirmed="yes">org.junit.internal.matchers.TypeSafeMatcher.TypeSafeMatcher()</outbound>
                <inbound type="feature" confirmed="yes">org.junit.internal.matchers.IsCollectionContaining.hasItem(org.hamcrest.Matcher)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.junit.internal.matchers.IsCollectionContaining.describeTo(org.hamcrest.Description)</name>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="class" confirmed="yes">org.hamcrest.Description</outbound>
                <outbound type="feature" confirmed="yes">org.hamcrest.Description.appendDescriptionOf(org.hamcrest.SelfDescribing)</outbound>
                <outbound type="feature" confirmed="yes">org.hamcrest.Description.appendText(java.lang.String)</outbound>
                <outbound type="class" confirmed="yes">org.hamcrest.Matcher</outbound>
                <outbound type="class" confirmed="yes">org.hamcrest.SelfDescribing</outbound>
                <outbound type="feature" confirmed="yes">org.junit.internal.matchers.IsCollectionContaining.elementMatcher</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.junit.internal.matchers.IsCollectionContaining.elementMatcher</name>
                <outbound type="class" confirmed="yes">org.hamcrest.Matcher</outbound>
                <inbound type="feature" confirmed="yes">org.junit.internal.matchers.IsCollectionContaining.IsCollectionContaining(org.hamcrest.Matcher)</inbound>
                <inbound type="feature" confirmed="yes">org.junit.internal.matchers.IsCollectionContaining.describeTo(org.hamcrest.Description)</inbound>
                <inbound type="feature" confirmed="yes">org.junit.internal.matchers.IsCollectionContaining.matchesSafely(java.lang.Iterable)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.junit.internal.matchers.IsCollectionContaining.hasItem(java.lang.Object)</name>
                <outbound type="class" confirmed="no">java.lang.Object</outbound>
                <outbound type="class" confirmed="yes">org.hamcrest.Matcher</outbound>
                <outbound type="feature" confirmed="yes">org.hamcrest.core.IsEqual.equalTo(java.lang.Object)</outbound>
                <outbound type="feature" confirmed="yes">org.junit.internal.matchers.IsCollectionContaining.hasItem(org.hamcrest.Matcher)</outbound>
                <inbound type="feature" confirmed="yes">org.junit.internal.matchers.IsCollectionContaining.hasItems(java.lang.Object[])</inbound>
                <inbound type="feature" confirmed="yes">org.junit.matchers.JUnitMatchers.hasItem(java.lang.Object)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.junit.internal.matchers.IsCollectionContaining.hasItem(org.hamcrest.Matcher)</name>
                <outbound type="class" confirmed="yes">org.hamcrest.Matcher</outbound>
                <outbound type="feature" confirmed="yes">org.junit.internal.matchers.IsCollectionContaining.IsCollectionContaining(org.hamcrest.Matcher)</outbound>
                <inbound type="feature" confirmed="yes">org.junit.internal.matchers.Each.each(org.hamcrest.Matcher)</inbound>
                <inbound type="feature" confirmed="yes">org.junit.internal.matchers.IsCollectionContaining.hasItem(java.lang.Object)</inbound>
                <inbound type="feature" confirmed="yes">org.junit.internal.matchers.IsCollectionContaining.hasItems(org.hamcrest.Matcher[])</inbound>
                <inbound type="feature" confirmed="yes">org.junit.matchers.JUnitMatchers.hasItem(org.hamcrest.Matcher)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.junit.internal.matchers.IsCollectionContaining.hasItems(java.lang.Object[])</name>
                <outbound type="class" confirmed="no">java.lang.Iterable</outbound>
                <outbound type="class" confirmed="no">java.lang.Object</outbound>
                <outbound type="feature" confirmed="no">java.util.ArrayList.ArrayList(int)</outbound>
                <outbound type="feature" confirmed="no">java.util.Collection.add(java.lang.Object)</outbound>
                <outbound type="class" confirmed="yes">org.hamcrest.Matcher</outbound>
                <outbound type="feature" confirmed="yes">org.hamcrest.core.AllOf.allOf(java.lang.Iterable)</outbound>
                <outbound type="feature" confirmed="yes">org.junit.internal.matchers.IsCollectionContaining.hasItem(java.lang.Object)</outbound>
                <inbound type="feature" confirmed="yes">org.junit.matchers.JUnitMatchers.hasItems(java.lang.Object[])</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.junit.internal.matchers.IsCollectionContaining.hasItems(org.hamcrest.Matcher[])</name>
                <outbound type="class" confirmed="no">java.lang.Iterable</outbound>
                <outbound type="class" confirmed="no">java.lang.Object</outbound>
                <outbound type="feature" confirmed="no">java.util.ArrayList.ArrayList(int)</outbound>
                <outbound type="feature" confirmed="no">java.util.Collection.add(java.lang.Object)</outbound>
                <outbound type="class" confirmed="yes">org.hamcrest.Matcher</outbound>
                <outbound type="feature" confirmed="yes">org.hamcrest.core.AllOf.allOf(java.lang.Iterable)</outbound>
                <outbound type="feature" confirmed="yes">org.junit.internal.matchers.IsCollectionContaining.hasItem(org.hamcrest.Matcher)</outbound>
                <inbound type="feature" confirmed="yes">org.junit.matchers.JUnitMatchers.hasItems(org.hamcrest.Matcher[])</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.junit.internal.matchers.IsCollectionContaining.matchesSafely(java.lang.Iterable)</name>
                <outbound type="class" confirmed="no">java.lang.Iterable</outbound>
                <outbound type="feature" confirmed="no">java.lang.Iterable.iterator()</outbound>
                <outbound type="class" confirmed="no">java.lang.Object</outbound>
                <outbound type="class" confirmed="no">java.util.Iterator</outbound>
                <outbound type="feature" confirmed="no">java.util.Iterator.hasNext()</outbound>
                <outbound type="feature" confirmed="no">java.util.Iterator.next()</outbound>
                <outbound type="class" confirmed="yes">org.hamcrest.Matcher</outbound>
                <outbound type="feature" confirmed="yes">org.hamcrest.Matcher.matches(java.lang.Object)</outbound>
                <outbound type="feature" confirmed="yes">org.junit.internal.matchers.IsCollectionContaining.elementMatcher</outbound>
                <inbound type="feature" confirmed="yes">org.junit.internal.matchers.IsCollectionContaining.matchesSafely(java.lang.Object)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.junit.internal.matchers.IsCollectionContaining.matchesSafely(java.lang.Object)</name>
                <outbound type="class" confirmed="no">java.lang.Iterable</outbound>
                <outbound type="class" confirmed="no">java.lang.Object</outbound>
                <outbound type="feature" confirmed="yes">org.junit.internal.matchers.IsCollectionContaining.matchesSafely(java.lang.Iterable)</outbound>
            </feature>
        </class>
        <class confirmed="yes">
            <name>org.junit.internal.matchers.StringContains</name>
            <outbound type="class" confirmed="yes">org.junit.internal.matchers.SubstringMatcher</outbound>
            <feature confirmed="yes">
                <name>org.junit.internal.matchers.StringContains.StringContains(java.lang.String)</name>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="feature" confirmed="yes">org.junit.internal.matchers.SubstringMatcher.SubstringMatcher(java.lang.String)</outbound>
                <inbound type="feature" confirmed="yes">org.junit.internal.matchers.StringContains.containsString(java.lang.String)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.junit.internal.matchers.StringContains.containsString(java.lang.String)</name>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="class" confirmed="yes">org.hamcrest.Matcher</outbound>
                <outbound type="feature" confirmed="yes">org.junit.internal.matchers.StringContains.StringContains(java.lang.String)</outbound>
                <inbound type="feature" confirmed="yes">org.junit.matchers.JUnitMatchers.containsString(java.lang.String)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.junit.internal.matchers.StringContains.evalSubstringOf(java.lang.String)</name>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="feature" confirmed="no">java.lang.String.indexOf(java.lang.String)</outbound>
                <outbound type="feature" confirmed="no">org.junit.internal.matchers.StringContains.substring</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.junit.internal.matchers.StringContains.relationship()</name>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
            </feature>
            <feature confirmed="no">
                <name>org.junit.internal.matchers.StringContains.substring</name>
                <inbound type="feature" confirmed="yes">org.junit.internal.matchers.StringContains.evalSubstringOf(java.lang.String)</inbound>
            </feature>
        </class>
        <class confirmed="yes">
            <name>org.junit.internal.matchers.SubstringMatcher</name>
            <outbound type="class" confirmed="yes">org.junit.internal.matchers.TypeSafeMatcher</outbound>
            <inbound type="class" confirmed="yes">org.junit.internal.matchers.StringContains</inbound>
            <feature confirmed="yes">
                <name>org.junit.internal.matchers.SubstringMatcher.SubstringMatcher(java.lang.String)</name>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="feature" confirmed="yes">org.junit.internal.matchers.SubstringMatcher.substring</outbound>
                <outbound type="feature" confirmed="yes">org.junit.internal.matchers.TypeSafeMatcher.TypeSafeMatcher()</outbound>
                <inbound type="feature" confirmed="yes">org.junit.internal.matchers.StringContains.StringContains(java.lang.String)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.junit.internal.matchers.SubstringMatcher.describeTo(org.hamcrest.Description)</name>
                <outbound type="class" confirmed="no">java.lang.Object</outbound>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="class" confirmed="yes">org.hamcrest.Description</outbound>
                <outbound type="feature" confirmed="yes">org.hamcrest.Description.appendText(java.lang.String)</outbound>
                <outbound type="feature" confirmed="yes">org.hamcrest.Description.appendValue(java.lang.Object)</outbound>
                <outbound type="feature" confirmed="yes">org.junit.internal.matchers.SubstringMatcher.relationship()</outbound>
                <outbound type="feature" confirmed="yes">org.junit.internal.matchers.SubstringMatcher.substring</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.junit.internal.matchers.SubstringMatcher.evalSubstringOf(java.lang.String)</name>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <inbound type="feature" confirmed="yes">org.junit.internal.matchers.SubstringMatcher.matchesSafely(java.lang.String)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.junit.internal.matchers.SubstringMatcher.matchesSafely(java.lang.Object)</name>
                <outbound type="class" confirmed="no">java.lang.Object</outbound>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="feature" confirmed="yes">org.junit.internal.matchers.SubstringMatcher.matchesSafely(java.lang.String)</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.junit.internal.matchers.SubstringMatcher.matchesSafely(java.lang.String)</name>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="feature" confirmed="yes">org.junit.internal.matchers.SubstringMatcher.evalSubstringOf(java.lang.String)</outbound>
                <inbound type="feature" confirmed="yes">org.junit.internal.matchers.SubstringMatcher.matchesSafely(java.lang.Object)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.junit.internal.matchers.SubstringMatcher.relationship()</name>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <inbound type="feature" confirmed="yes">org.junit.internal.matchers.SubstringMatcher.describeTo(org.hamcrest.Description)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.junit.internal.matchers.SubstringMatcher.substring</name>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <inbound type="feature" confirmed="yes">org.junit.internal.matchers.SubstringMatcher.SubstringMatcher(java.lang.String)</inbound>
                <inbound type="feature" confirmed="yes">org.junit.internal.matchers.SubstringMatcher.describeTo(org.hamcrest.Description)</inbound>
            </feature>
        </class>
        <class confirmed="yes">
            <name>org.junit.internal.matchers.TypeSafeMatcher</name>
            <outbound type="class" confirmed="yes">org.hamcrest.BaseMatcher</outbound>
            <inbound type="class" confirmed="yes">org.junit.experimental.results.ResultMatchers$1</inbound>
            <inbound type="class" confirmed="yes">org.junit.internal.matchers.IsCollectionContaining</inbound>
            <inbound type="class" confirmed="yes">org.junit.internal.matchers.SubstringMatcher</inbound>
            <inbound type="class" confirmed="yes">org.junit.rules.ExpectedException$1</inbound>
            <feature confirmed="yes">
                <name>org.junit.internal.matchers.TypeSafeMatcher.TypeSafeMatcher()</name>
                <outbound type="class" confirmed="no">java.lang.Class</outbound>
                <outbound type="feature" confirmed="no">java.lang.Object.getClass()</outbound>
                <outbound type="feature" confirmed="yes">org.hamcrest.BaseMatcher.BaseMatcher()</outbound>
                <outbound type="feature" confirmed="yes">org.junit.internal.matchers.TypeSafeMatcher.expectedType</outbound>
                <outbound type="feature" confirmed="yes">org.junit.internal.matchers.TypeSafeMatcher.findExpectedType(java.lang.Class)</outbound>
                <inbound type="feature" confirmed="yes">org.junit.experimental.results.ResultMatchers$1.ResultMatchers$1(int)</inbound>
                <inbound type="feature" confirmed="yes">org.junit.internal.matchers.IsCollectionContaining.IsCollectionContaining(org.hamcrest.Matcher)</inbound>
                <inbound type="feature" confirmed="yes">org.junit.internal.matchers.SubstringMatcher.SubstringMatcher(java.lang.String)</inbound>
                <inbound type="feature" confirmed="yes">org.junit.rules.ExpectedException$1.ExpectedException$1(org.junit.rules.ExpectedException, org.hamcrest.Matcher)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.junit.internal.matchers.TypeSafeMatcher.TypeSafeMatcher(java.lang.Class)</name>
                <outbound type="class" confirmed="no">java.lang.Class</outbound>
                <outbound type="feature" confirmed="yes">org.hamcrest.BaseMatcher.BaseMatcher()</outbound>
                <outbound type="feature" confirmed="yes">org.junit.internal.matchers.TypeSafeMatcher.expectedType</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.junit.internal.matchers.TypeSafeMatcher.expectedType</name>
                <outbound type="class" confirmed="no">java.lang.Class</outbound>
                <inbound type="feature" confirmed="yes">org.junit.internal.matchers.TypeSafeMatcher.TypeSafeMatcher()</inbound>
                <inbound type="feature" confirmed="yes">org.junit.internal.matchers.TypeSafeMatcher.TypeSafeMatcher(java.lang.Class)</inbound>
                <inbound type="feature" confirmed="yes">org.junit.internal.matchers.TypeSafeMatcher.matches(java.lang.Object)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.junit.internal.matchers.TypeSafeMatcher.findExpectedType(java.lang.Class)</name>
                <outbound type="class" confirmed="no">java.lang.Class</outbound>
                <outbound type="feature" confirmed="no">java.lang.Class.getDeclaredMethods()</outbound>
                <outbound type="feature" confirmed="no">java.lang.Class.getSuperclass()</outbound>
                <outbound type="feature" confirmed="no">java.lang.Error.Error(java.lang.String)</outbound>
                <outbound type="class" confirmed="no">java.lang.Object</outbound>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="class" confirmed="no">java.lang.reflect.Method</outbound>
                <outbound type="feature" confirmed="no">java.lang.reflect.Method.getParameterTypes()</outbound>
                <outbound type="feature" confirmed="yes">org.junit.internal.matchers.TypeSafeMatcher.isMatchesSafelyMethod(java.lang.reflect.Method)</outbound>
                <inbound type="feature" confirmed="yes">org.junit.internal.matchers.TypeSafeMatcher.TypeSafeMatcher()</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.junit.internal.matchers.TypeSafeMatcher.isMatchesSafelyMethod(java.lang.reflect.Method)</name>
                <outbound type="class" confirmed="no">java.lang.Class</outbound>
                <outbound type="class" confirmed="no">java.lang.Object</outbound>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="feature" confirmed="no">java.lang.String.equals(java.lang.Object)</outbound>
                <outbound type="class" confirmed="no">java.lang.reflect.Method</outbound>
                <outbound type="feature" confirmed="no">java.lang.reflect.Method.getName()</outbound>
                <outbound type="feature" confirmed="no">java.lang.reflect.Method.getParameterTypes()</outbound>
                <outbound type="feature" confirmed="no">java.lang.reflect.Method.isSynthetic()</outbound>
                <inbound type="feature" confirmed="yes">org.junit.internal.matchers.TypeSafeMatcher.findExpectedType(java.lang.Class)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.junit.internal.matchers.TypeSafeMatcher.matches(java.lang.Object)</name>
                <outbound type="class" confirmed="no">java.lang.Class</outbound>
                <outbound type="feature" confirmed="no">java.lang.Class.isInstance(java.lang.Object)</outbound>
                <outbound type="class" confirmed="no">java.lang.Object</outbound>
                <outbound type="feature" confirmed="yes">org.junit.internal.matchers.TypeSafeMatcher.expectedType</outbound>
                <outbound type="feature" confirmed="yes">org.junit.internal.matchers.TypeSafeMatcher.matchesSafely(java.lang.Object)</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.junit.internal.matchers.TypeSafeMatcher.matchesSafely(java.lang.Object)</name>
                <outbound type="class" confirmed="no">java.lang.Object</outbound>
                <inbound type="feature" confirmed="yes">org.junit.internal.matchers.TypeSafeMatcher.matches(java.lang.Object)</inbound>
            </feature>
        </class>
    </package>
    <package confirmed="yes">
        <name>org.junit.internal.requests</name>
        <class confirmed="yes">
            <name>org.junit.internal.requests.ClassRequest</name>
            <outbound type="class" confirmed="yes">org.junit.runner.Request</outbound>
            <feature confirmed="yes">
                <name>org.junit.internal.requests.ClassRequest.ClassRequest(java.lang.Class)</name>
                <outbound type="class" confirmed="no">java.lang.Class</outbound>
                <outbound type="feature" confirmed="yes">org.junit.internal.requests.ClassRequest.ClassRequest(java.lang.Class, boolean)</outbound>
                <inbound type="feature" confirmed="yes">org.junit.runner.Request.aClass(java.lang.Class)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.junit.internal.requests.ClassRequest.ClassRequest(java.lang.Class, boolean)</name>
                <outbound type="class" confirmed="no">java.lang.Class</outbound>
                <outbound type="feature" confirmed="yes">org.junit.internal.requests.ClassRequest.fCanUseSuiteMethod</outbound>
                <outbound type="feature" confirmed="yes">org.junit.internal.requests.ClassRequest.fTestClass</outbound>
                <outbound type="feature" confirmed="yes">org.junit.runner.Request.Request()</outbound>
                <inbound type="feature" confirmed="yes">org.junit.internal.requests.ClassRequest.ClassRequest(java.lang.Class)</inbound>
                <inbound type="feature" confirmed="yes">org.junit.runner.Request.classWithoutSuiteMethod(java.lang.Class)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.junit.internal.requests.ClassRequest.fCanUseSuiteMethod</name>
                <inbound type="feature" confirmed="yes">org.junit.internal.requests.ClassRequest.ClassRequest(java.lang.Class, boolean)</inbound>
                <inbound type="feature" confirmed="yes">org.junit.internal.requests.ClassRequest.getRunner()</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.junit.internal.requests.ClassRequest.fTestClass</name>
                <outbound type="class" confirmed="no">java.lang.Class</outbound>
                <inbound type="feature" confirmed="yes">org.junit.internal.requests.ClassRequest.ClassRequest(java.lang.Class, boolean)</inbound>
                <inbound type="feature" confirmed="yes">org.junit.internal.requests.ClassRequest.getRunner()</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.junit.internal.requests.ClassRequest.getRunner()</name>
                <outbound type="class" confirmed="no">java.lang.Class</outbound>
                <outbound type="feature" confirmed="yes">org.junit.internal.builders.AllDefaultPossibilitiesBuilder.AllDefaultPossibilitiesBuilder(boolean)</outbound>
                <outbound type="feature" confirmed="no">org.junit.internal.builders.AllDefaultPossibilitiesBuilder.safeRunnerForClass(java.lang.Class)</outbound>
                <outbound type="feature" confirmed="yes">org.junit.internal.requests.ClassRequest.fCanUseSuiteMethod</outbound>
                <outbound type="feature" confirmed="yes">org.junit.internal.requests.ClassRequest.fTestClass</outbound>
                <outbound type="class" confirmed="yes">org.junit.runner.Runner</outbound>
            </feature>
        </class>
        <class confirmed="yes">
            <name>org.junit.internal.requests.FilterRequest</name>
            <outbound type="class" confirmed="yes">org.junit.runner.Request</outbound>
            <feature confirmed="yes">
                <name>org.junit.internal.requests.FilterRequest.FilterRequest(org.junit.runner.Request, org.junit.runner.manipulation.Filter)</name>
                <outbound type="feature" confirmed="yes">org.junit.internal.requests.FilterRequest.fFilter</outbound>
                <outbound type="feature" confirmed="yes">org.junit.internal.requests.FilterRequest.fRequest</outbound>
                <outbound type="class" confirmed="yes">org.junit.runner.Request</outbound>
                <outbound type="feature" confirmed="yes">org.junit.runner.Request.Request()</outbound>
                <outbound type="class" confirmed="yes">org.junit.runner.manipulation.Filter</outbound>
                <inbound type="feature" confirmed="yes">org.junit.runner.Request.filterWith(org.junit.runner.manipulation.Filter)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.junit.internal.requests.FilterRequest.fFilter</name>
                <outbound type="class" confirmed="yes">org.junit.runner.manipulation.Filter</outbound>
                <inbound type="feature" confirmed="yes">org.junit.internal.requests.FilterRequest.FilterRequest(org.junit.runner.Request, org.junit.runner.manipulation.Filter)</inbound>
                <inbound type="feature" confirmed="yes">org.junit.internal.requests.FilterRequest.getRunner()</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.junit.internal.requests.FilterRequest.fRequest</name>
                <outbound type="class" confirmed="yes">org.junit.runner.Request</outbound>
                <inbound type="feature" confirmed="yes">org.junit.internal.requests.FilterRequest.FilterRequest(org.junit.runner.Request, org.junit.runner.manipulation.Filter)</inbound>
                <inbound type="feature" confirmed="yes">org.junit.internal.requests.FilterRequest.getRunner()</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.junit.internal.requests.FilterRequest.getRunner()</name>
                <outbound type="class" confirmed="no">java.lang.Class</outbound>
                <outbound type="feature" confirmed="no">java.lang.Exception.Exception(java.lang.String)</outbound>
                <outbound type="class" confirmed="no">java.lang.Object</outbound>
                <outbound type="feature" confirmed="no">java.lang.Object.toString()</outbound>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="feature" confirmed="no">java.lang.String.format(java.lang.String, java.lang.Object[])</outbound>
                <outbound type="class" confirmed="no">java.lang.Throwable</outbound>
                <outbound type="feature" confirmed="yes">org.junit.internal.requests.FilterRequest.fFilter</outbound>
                <outbound type="feature" confirmed="yes">org.junit.internal.requests.FilterRequest.fRequest</outbound>
                <outbound type="feature" confirmed="yes">org.junit.internal.runners.ErrorReportingRunner.ErrorReportingRunner(java.lang.Class, java.lang.Throwable)</outbound>
                <outbound type="class" confirmed="yes">org.junit.runner.Request</outbound>
                <outbound type="feature" confirmed="yes">org.junit.runner.Request.getRunner()</outbound>
                <outbound type="class" confirmed="yes">org.junit.runner.Runner</outbound>
                <outbound type="class" confirmed="yes">org.junit.runner.manipulation.Filter</outbound>
                <outbound type="feature" confirmed="yes">org.junit.runner.manipulation.Filter.apply(java.lang.Object)</outbound>
                <outbound type="feature" confirmed="yes">org.junit.runner.manipulation.Filter.describe()</outbound>
                <outbound type="class" confirmed="yes">org.junit.runner.manipulation.NoTestsRemainException</outbound>
            </feature>
        </class>
        <class confirmed="yes">
            <name>org.junit.internal.requests.SortingRequest</name>
            <outbound type="class" confirmed="yes">org.junit.runner.Request</outbound>
            <inbound type="feature" confirmed="yes">org.junit.experimental.max.MaxCore.sortRequest(org.junit.runner.Request)</inbound>
            <feature confirmed="yes">
                <name>org.junit.internal.requests.SortingRequest.SortingRequest(org.junit.runner.Request, java.util.Comparator)</name>
                <outbound type="class" confirmed="no">java.util.Comparator</outbound>
                <outbound type="feature" confirmed="yes">org.junit.internal.requests.SortingRequest.fComparator</outbound>
                <outbound type="feature" confirmed="yes">org.junit.internal.requests.SortingRequest.fRequest</outbound>
                <outbound type="class" confirmed="yes">org.junit.runner.Request</outbound>
                <outbound type="feature" confirmed="yes">org.junit.runner.Request.Request()</outbound>
                <inbound type="feature" confirmed="yes">org.junit.runner.Request.sortWith(java.util.Comparator)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.junit.internal.requests.SortingRequest.fComparator</name>
                <outbound type="class" confirmed="no">java.util.Comparator</outbound>
                <inbound type="feature" confirmed="yes">org.junit.internal.requests.SortingRequest.SortingRequest(org.junit.runner.Request, java.util.Comparator)</inbound>
                <inbound type="feature" confirmed="yes">org.junit.internal.requests.SortingRequest.getRunner()</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.junit.internal.requests.SortingRequest.fRequest</name>
                <outbound type="class" confirmed="yes">org.junit.runner.Request</outbound>
                <inbound type="feature" confirmed="yes">org.junit.internal.requests.SortingRequest.SortingRequest(org.junit.runner.Request, java.util.Comparator)</inbound>
                <inbound type="feature" confirmed="yes">org.junit.internal.requests.SortingRequest.getRunner()</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.junit.internal.requests.SortingRequest.getRunner()</name>
                <outbound type="class" confirmed="no">java.lang.Object</outbound>
                <outbound type="class" confirmed="no">java.util.Comparator</outbound>
                <outbound type="feature" confirmed="yes">org.junit.internal.requests.SortingRequest.fComparator</outbound>
                <outbound type="feature" confirmed="yes">org.junit.internal.requests.SortingRequest.fRequest</outbound>
                <outbound type="class" confirmed="yes">org.junit.runner.Request</outbound>
                <outbound type="feature" confirmed="yes">org.junit.runner.Request.getRunner()</outbound>
                <outbound type="class" confirmed="yes">org.junit.runner.Runner</outbound>
                <outbound type="feature" confirmed="yes">org.junit.runner.manipulation.Sorter.Sorter(java.util.Comparator)</outbound>
                <outbound type="feature" confirmed="yes">org.junit.runner.manipulation.Sorter.apply(java.lang.Object)</outbound>
            </feature>
        </class>
        <class confirmed="yes">
            <name>org.junit.internal.requests.package-info</name>
            <outbound type="class" confirmed="no">java.lang.Object</outbound>
        </class>
    </package>
    <package confirmed="yes">
        <name>org.junit.internal.runners</name>
        <class confirmed="yes">
            <name>org.junit.internal.runners.ClassRoadie</name>
            <outbound type="class" confirmed="no">java.lang.Object</outbound>
            <feature confirmed="yes">
                <name>org.junit.internal.runners.ClassRoadie.ClassRoadie(org.junit.runner.notification.RunNotifier, org.junit.internal.runners.TestClass, org.junit.runner.Description, java.lang.Runnable)</name>
                <outbound type="feature" confirmed="no">java.lang.Object.Object()</outbound>
                <outbound type="class" confirmed="no">java.lang.Runnable</outbound>
                <outbound type="feature" confirmed="yes">org.junit.internal.runners.ClassRoadie.fDescription</outbound>
                <outbound type="feature" confirmed="yes">org.junit.internal.runners.ClassRoadie.fNotifier</outbound>
                <outbound type="feature" confirmed="yes">org.junit.internal.runners.ClassRoadie.fRunnable</outbound>
                <outbound type="feature" confirmed="yes">org.junit.internal.runners.ClassRoadie.fTestClass</outbound>
                <outbound type="class" confirmed="yes">org.junit.internal.runners.TestClass</outbound>
                <outbound type="class" confirmed="yes">org.junit.runner.Description</outbound>
                <outbound type="class" confirmed="yes">org.junit.runner.notification.RunNotifier</outbound>
                <inbound type="feature" confirmed="yes">org.junit.internal.runners.JUnit4ClassRunner.run(org.junit.runner.notification.RunNotifier)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.junit.internal.runners.ClassRoadie.addFailure(java.lang.Throwable)</name>
                <outbound type="class" confirmed="no">java.lang.Throwable</outbound>
                <outbound type="feature" confirmed="yes">org.junit.internal.runners.ClassRoadie.fDescription</outbound>
                <outbound type="feature" confirmed="yes">org.junit.internal.runners.ClassRoadie.fNotifier</outbound>
                <outbound type="class" confirmed="yes">org.junit.runner.Description</outbound>
                <outbound type="class" confirmed="yes">org.junit.runner.notification.Failure</outbound>
                <outbound type="feature" confirmed="yes">org.junit.runner.notification.Failure.Failure(org.junit.runner.Description, java.lang.Throwable)</outbound>
                <outbound type="class" confirmed="yes">org.junit.runner.notification.RunNotifier</outbound>
                <outbound type="feature" confirmed="yes">org.junit.runner.notification.RunNotifier.fireTestFailure(org.junit.runner.notification.Failure)</outbound>
                <inbound type="feature" confirmed="yes">org.junit.internal.runners.ClassRoadie.runAfters()</inbound>
                <inbound type="feature" confirmed="yes">org.junit.internal.runners.ClassRoadie.runBefores()</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.junit.internal.runners.ClassRoadie.fDescription</name>
                <outbound type="class" confirmed="yes">org.junit.runner.Description</outbound>
                <inbound type="feature" confirmed="yes">org.junit.internal.runners.ClassRoadie.ClassRoadie(org.junit.runner.notification.RunNotifier, org.junit.internal.runners.TestClass, org.junit.runner.Description, java.lang.Runnable)</inbound>
                <inbound type="feature" confirmed="yes">org.junit.internal.runners.ClassRoadie.addFailure(java.lang.Throwable)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.junit.internal.runners.ClassRoadie.fNotifier</name>
                <outbound type="class" confirmed="yes">org.junit.runner.notification.RunNotifier</outbound>
                <inbound type="feature" confirmed="yes">org.junit.internal.runners.ClassRoadie.ClassRoadie(org.junit.runner.notification.RunNotifier, org.junit.internal.runners.TestClass, org.junit.runner.Description, java.lang.Runnable)</inbound>
                <inbound type="feature" confirmed="yes">org.junit.internal.runners.ClassRoadie.addFailure(java.lang.Throwable)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.junit.internal.runners.ClassRoadie.fRunnable</name>
                <outbound type="class" confirmed="no">java.lang.Runnable</outbound>
                <inbound type="feature" confirmed="yes">org.junit.internal.runners.ClassRoadie.ClassRoadie(org.junit.runner.notification.RunNotifier, org.junit.internal.runners.TestClass, org.junit.runner.Description, java.lang.Runnable)</inbound>
                <inbound type="feature" confirmed="yes">org.junit.internal.runners.ClassRoadie.runUnprotected()</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.junit.internal.runners.ClassRoadie.fTestClass</name>
                <outbound type="class" confirmed="yes">org.junit.internal.runners.TestClass</outbound>
                <inbound type="feature" confirmed="yes">org.junit.internal.runners.ClassRoadie.ClassRoadie(org.junit.runner.notification.RunNotifier, org.junit.internal.runners.TestClass, org.junit.runner.Description, java.lang.Runnable)</inbound>
                <inbound type="feature" confirmed="yes">org.junit.internal.runners.ClassRoadie.runAfters()</inbound>
                <inbound type="feature" confirmed="yes">org.junit.internal.runners.ClassRoadie.runBefores()</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.junit.internal.runners.ClassRoadie.runAfters()</name>
                <outbound type="class" confirmed="no">java.lang.Object</outbound>
                <outbound type="class" confirmed="no">java.lang.Throwable</outbound>
                <outbound type="class" confirmed="no">java.lang.reflect.InvocationTargetException</outbound>
                <outbound type="feature" confirmed="no">java.lang.reflect.InvocationTargetException.getTargetException()</outbound>
                <outbound type="class" confirmed="no">java.lang.reflect.Method</outbound>
                <outbound type="feature" confirmed="no">java.lang.reflect.Method.invoke(java.lang.Object, java.lang.Object[])</outbound>
                <outbound type="class" confirmed="no">java.util.Iterator</outbound>
                <outbound type="feature" confirmed="no">java.util.Iterator.hasNext()</outbound>
                <outbound type="feature" confirmed="no">java.util.Iterator.next()</outbound>
                <outbound type="class" confirmed="no">java.util.List</outbound>
                <outbound type="feature" confirmed="no">java.util.List.iterator()</outbound>
                <outbound type="feature" confirmed="yes">org.junit.internal.runners.ClassRoadie.addFailure(java.lang.Throwable)</outbound>
                <outbound type="feature" confirmed="yes">org.junit.internal.runners.ClassRoadie.fTestClass</outbound>
                <outbound type="class" confirmed="yes">org.junit.internal.runners.TestClass</outbound>
                <outbound type="feature" confirmed="yes">org.junit.internal.runners.TestClass.getAfters()</outbound>
                <inbound type="feature" confirmed="yes">org.junit.internal.runners.ClassRoadie.runProtected()</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.junit.internal.runners.ClassRoadie.runBefores()</name>
                <outbound type="class" confirmed="no">java.lang.Object</outbound>
                <outbound type="class" confirmed="no">java.lang.Throwable</outbound>
                <outbound type="class" confirmed="no">java.lang.reflect.InvocationTargetException</outbound>
                <outbound type="feature" confirmed="no">java.lang.reflect.InvocationTargetException.getTargetException()</outbound>
                <outbound type="class" confirmed="no">java.lang.reflect.Method</outbound>
                <outbound type="feature" confirmed="no">java.lang.reflect.Method.invoke(java.lang.Object, java.lang.Object[])</outbound>
                <outbound type="class" confirmed="no">java.util.Iterator</outbound>
                <outbound type="feature" confirmed="no">java.util.Iterator.hasNext()</outbound>
                <outbound type="feature" confirmed="no">java.util.Iterator.next()</outbound>
                <outbound type="class" confirmed="no">java.util.List</outbound>
                <outbound type="feature" confirmed="no">java.util.List.iterator()</outbound>
                <outbound type="class" confirmed="yes">org.junit.internal.AssumptionViolatedException</outbound>
                <outbound type="feature" confirmed="yes">org.junit.internal.runners.ClassRoadie.addFailure(java.lang.Throwable)</outbound>
                <outbound type="feature" confirmed="yes">org.junit.internal.runners.ClassRoadie.fTestClass</outbound>
                <outbound type="class" confirmed="yes">org.junit.internal.runners.FailedBefore</outbound>
                <outbound type="feature" confirmed="yes">org.junit.internal.runners.FailedBefore.FailedBefore()</outbound>
                <outbound type="class" confirmed="yes">org.junit.internal.runners.TestClass</outbound>
                <outbound type="feature" confirmed="yes">org.junit.internal.runners.TestClass.getBefores()</outbound>
                <inbound type="feature" confirmed="yes">org.junit.internal.runners.ClassRoadie.runProtected()</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.junit.internal.runners.ClassRoadie.runProtected()</name>
                <outbound type="feature" confirmed="yes">org.junit.internal.runners.ClassRoadie.runAfters()</outbound>
                <outbound type="feature" confirmed="yes">org.junit.internal.runners.ClassRoadie.runBefores()</outbound>
                <outbound type="feature" confirmed="yes">org.junit.internal.runners.ClassRoadie.runUnprotected()</outbound>
                <outbound type="class" confirmed="yes">org.junit.internal.runners.FailedBefore</outbound>
                <inbound type="feature" confirmed="yes">org.junit.internal.runners.JUnit4ClassRunner.run(org.junit.runner.notification.RunNotifier)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.junit.internal.runners.ClassRoadie.runUnprotected()</name>
                <outbound type="class" confirmed="no">java.lang.Runnable</outbound>
                <outbound type="feature" confirmed="no">java.lang.Runnable.run()</outbound>
                <outbound type="feature" confirmed="yes">org.junit.internal.runners.ClassRoadie.fRunnable</outbound>
                <inbound type="feature" confirmed="yes">org.junit.internal.runners.ClassRoadie.runProtected()</inbound>
            </feature>
        </class>
        <class confirmed="yes">
            <name>org.junit.internal.runners.ErrorReportingRunner</name>
            <outbound type="class" confirmed="yes">org.junit.runner.Runner</outbound>
            <feature confirmed="yes">
                <name>org.junit.internal.runners.ErrorReportingRunner.ErrorReportingRunner(java.lang.Class, java.lang.Throwable)</name>
                <outbound type="class" confirmed="no">java.lang.Class</outbound>
                <outbound type="class" confirmed="no">java.lang.Throwable</outbound>
                <outbound type="class" confirmed="no">java.util.List</outbound>
                <outbound type="feature" confirmed="yes">org.junit.internal.runners.ErrorReportingRunner.fCauses</outbound>
                <outbound type="feature" confirmed="yes">org.junit.internal.runners.ErrorReportingRunner.fTestClass</outbound>
                <outbound type="feature" confirmed="yes">org.junit.internal.runners.ErrorReportingRunner.getCauses(java.lang.Throwable)</outbound>
                <outbound type="feature" confirmed="yes">org.junit.runner.Runner.Runner()</outbound>
                <inbound type="feature" confirmed="yes">org.junit.experimental.max.MaxCore$1.getRunner()</inbound>
                <inbound type="feature" confirmed="yes">org.junit.internal.requests.FilterRequest.getRunner()</inbound>
                <inbound type="feature" confirmed="yes">org.junit.runner.Request.errorReport(java.lang.Class, java.lang.Throwable)</inbound>
                <inbound type="feature" confirmed="yes">org.junit.runners.model.RunnerBuilder.safeRunnerForClass(java.lang.Class)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.junit.internal.runners.ErrorReportingRunner.describeCause(java.lang.Throwable)</name>
                <outbound type="class" confirmed="no">java.lang.Class</outbound>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="class" confirmed="no">java.lang.Throwable</outbound>
                <outbound type="feature" confirmed="yes">org.junit.internal.runners.ErrorReportingRunner.fTestClass</outbound>
                <outbound type="class" confirmed="yes">org.junit.runner.Description</outbound>
                <outbound type="feature" confirmed="yes">org.junit.runner.Description.createTestDescription(java.lang.Class, java.lang.String)</outbound>
                <inbound type="feature" confirmed="yes">org.junit.internal.runners.ErrorReportingRunner.getDescription()</inbound>
                <inbound type="feature" confirmed="yes">org.junit.internal.runners.ErrorReportingRunner.runCause(java.lang.Throwable, org.junit.runner.notification.RunNotifier)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.junit.internal.runners.ErrorReportingRunner.fCauses</name>
                <outbound type="class" confirmed="no">java.util.List</outbound>
                <inbound type="feature" confirmed="yes">org.junit.internal.runners.ErrorReportingRunner.ErrorReportingRunner(java.lang.Class, java.lang.Throwable)</inbound>
                <inbound type="feature" confirmed="yes">org.junit.internal.runners.ErrorReportingRunner.getDescription()</inbound>
                <inbound type="feature" confirmed="yes">org.junit.internal.runners.ErrorReportingRunner.run(org.junit.runner.notification.RunNotifier)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.junit.internal.runners.ErrorReportingRunner.fTestClass</name>
                <outbound type="class" confirmed="no">java.lang.Class</outbound>
                <inbound type="feature" confirmed="yes">org.junit.internal.runners.ErrorReportingRunner.ErrorReportingRunner(java.lang.Class, java.lang.Throwable)</inbound>
                <inbound type="feature" confirmed="yes">org.junit.internal.runners.ErrorReportingRunner.describeCause(java.lang.Throwable)</inbound>
                <inbound type="feature" confirmed="yes">org.junit.internal.runners.ErrorReportingRunner.getDescription()</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.junit.internal.runners.ErrorReportingRunner.getCauses(java.lang.Throwable)</name>
                <outbound type="class" confirmed="no">java.lang.Object</outbound>
                <outbound type="class" confirmed="no">java.lang.Throwable</outbound>
                <outbound type="feature" confirmed="no">java.lang.Throwable.getCause()</outbound>
                <outbound type="class" confirmed="no">java.lang.reflect.InvocationTargetException</outbound>
                <outbound type="feature" confirmed="no">java.util.Arrays.asList(java.lang.Object[])</outbound>
                <outbound type="class" confirmed="no">java.util.List</outbound>
                <outbound type="class" confirmed="yes">org.junit.internal.runners.InitializationError</outbound>
                <outbound type="feature" confirmed="yes">org.junit.internal.runners.InitializationError.getCauses()</outbound>
                <outbound type="class" confirmed="yes">org.junit.runners.model.InitializationError</outbound>
                <outbound type="feature" confirmed="yes">org.junit.runners.model.InitializationError.getCauses()</outbound>
                <inbound type="feature" confirmed="yes">org.junit.internal.runners.ErrorReportingRunner.ErrorReportingRunner(java.lang.Class, java.lang.Throwable)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.junit.internal.runners.ErrorReportingRunner.getDescription()</name>
                <outbound type="class" confirmed="no">java.lang.Class</outbound>
                <outbound type="class" confirmed="no">java.lang.Object</outbound>
                <outbound type="class" confirmed="no">java.lang.Throwable</outbound>
                <outbound type="class" confirmed="no">java.util.Iterator</outbound>
                <outbound type="feature" confirmed="no">java.util.Iterator.hasNext()</outbound>
                <outbound type="feature" confirmed="no">java.util.Iterator.next()</outbound>
                <outbound type="class" confirmed="no">java.util.List</outbound>
                <outbound type="feature" confirmed="no">java.util.List.iterator()</outbound>
                <outbound type="feature" confirmed="yes">org.junit.internal.runners.ErrorReportingRunner.describeCause(java.lang.Throwable)</outbound>
                <outbound type="feature" confirmed="yes">org.junit.internal.runners.ErrorReportingRunner.fCauses</outbound>
                <outbound type="feature" confirmed="yes">org.junit.internal.runners.ErrorReportingRunner.fTestClass</outbound>
                <outbound type="class" confirmed="yes">org.junit.runner.Description</outbound>
                <outbound type="feature" confirmed="yes">org.junit.runner.Description.addChild(org.junit.runner.Description)</outbound>
                <outbound type="feature" confirmed="yes">org.junit.runner.Description.createSuiteDescription(java.lang.Class)</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.junit.internal.runners.ErrorReportingRunner.run(org.junit.runner.notification.RunNotifier)</name>
                <outbound type="class" confirmed="no">java.lang.Object</outbound>
                <outbound type="class" confirmed="no">java.lang.Throwable</outbound>
                <outbound type="class" confirmed="no">java.util.Iterator</outbound>
                <outbound type="feature" confirmed="no">java.util.Iterator.hasNext()</outbound>
                <outbound type="feature" confirmed="no">java.util.Iterator.next()</outbound>
                <outbound type="class" confirmed="no">java.util.List</outbound>
                <outbound type="feature" confirmed="no">java.util.List.iterator()</outbound>
                <outbound type="feature" confirmed="yes">org.junit.internal.runners.ErrorReportingRunner.fCauses</outbound>
                <outbound type="feature" confirmed="yes">org.junit.internal.runners.ErrorReportingRunner.runCause(java.lang.Throwable, org.junit.runner.notification.RunNotifier)</outbound>
                <outbound type="class" confirmed="yes">org.junit.runner.notification.RunNotifier</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.junit.internal.runners.ErrorReportingRunner.runCause(java.lang.Throwable, org.junit.runner.notification.RunNotifier)</name>
                <outbound type="class" confirmed="no">java.lang.Throwable</outbound>
                <outbound type="feature" confirmed="yes">org.junit.internal.runners.ErrorReportingRunner.describeCause(java.lang.Throwable)</outbound>
                <outbound type="class" confirmed="yes">org.junit.runner.Description</outbound>
                <outbound type="class" confirmed="yes">org.junit.runner.notification.Failure</outbound>
                <outbound type="feature" confirmed="yes">org.junit.runner.notification.Failure.Failure(org.junit.runner.Description, java.lang.Throwable)</outbound>
                <outbound type="class" confirmed="yes">org.junit.runner.notification.RunNotifier</outbound>
                <outbound type="feature" confirmed="yes">org.junit.runner.notification.RunNotifier.fireTestFailure(org.junit.runner.notification.Failure)</outbound>
                <outbound type="feature" confirmed="yes">org.junit.runner.notification.RunNotifier.fireTestFinished(org.junit.runner.Description)</outbound>
                <outbound type="feature" confirmed="yes">org.junit.runner.notification.RunNotifier.fireTestStarted(org.junit.runner.Description)</outbound>
                <inbound type="feature" confirmed="yes">org.junit.internal.runners.ErrorReportingRunner.run(org.junit.runner.notification.RunNotifier)</inbound>
            </feature>
        </class>
        <class confirmed="yes">
            <name>org.junit.internal.runners.FailedBefore</name>
            <outbound type="class" confirmed="no">java.lang.Exception</outbound>
            <inbound type="feature" confirmed="yes">org.junit.internal.runners.ClassRoadie.runBefores()</inbound>
            <inbound type="feature" confirmed="yes">org.junit.internal.runners.ClassRoadie.runProtected()</inbound>
            <inbound type="feature" confirmed="yes">org.junit.internal.runners.MethodRoadie.runBefores()</inbound>
            <inbound type="feature" confirmed="yes">org.junit.internal.runners.MethodRoadie.runBeforesThenTestThenAfters(java.lang.Runnable)</inbound>
            <feature confirmed="yes">
                <name>org.junit.internal.runners.FailedBefore.FailedBefore()</name>
                <outbound type="feature" confirmed="no">java.lang.Exception.Exception()</outbound>
                <inbound type="feature" confirmed="yes">org.junit.internal.runners.ClassRoadie.runBefores()</inbound>
                <inbound type="feature" confirmed="yes">org.junit.internal.runners.MethodRoadie.runBefores()</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.junit.internal.runners.FailedBefore.serialVersionUID</name>
            </feature>
        </class>
        <class confirmed="yes">
            <name>org.junit.internal.runners.InitializationError</name>
            <outbound type="class" confirmed="no">java.lang.Exception</outbound>
            <inbound type="feature" confirmed="yes">org.junit.internal.runners.ErrorReportingRunner.getCauses(java.lang.Throwable)</inbound>
            <inbound type="feature" confirmed="yes">org.junit.internal.runners.JUnit4ClassRunner.JUnit4ClassRunner(java.lang.Class)</inbound>
            <inbound type="feature" confirmed="yes">org.junit.internal.runners.JUnit4ClassRunner.validate()</inbound>
            <inbound type="feature" confirmed="yes">org.junit.internal.runners.MethodValidator.assertValid()</inbound>
            <feature confirmed="yes">
                <name>org.junit.internal.runners.InitializationError.InitializationError(java.lang.String)</name>
                <outbound type="feature" confirmed="no">java.lang.Exception.Exception(java.lang.String)</outbound>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="class" confirmed="no">java.lang.Throwable</outbound>
                <outbound type="feature" confirmed="yes">org.junit.internal.runners.InitializationError.InitializationError(java.lang.Throwable[])</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.junit.internal.runners.InitializationError.InitializationError(java.lang.Throwable[])</name>
                <outbound type="class" confirmed="no">java.lang.Object</outbound>
                <outbound type="class" confirmed="no">java.lang.Throwable</outbound>
                <outbound type="feature" confirmed="no">java.util.Arrays.asList(java.lang.Object[])</outbound>
                <outbound type="class" confirmed="no">java.util.List</outbound>
                <outbound type="feature" confirmed="yes">org.junit.internal.runners.InitializationError.InitializationError(java.util.List)</outbound>
                <inbound type="feature" confirmed="yes">org.junit.internal.runners.InitializationError.InitializationError(java.lang.String)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.junit.internal.runners.InitializationError.InitializationError(java.util.List)</name>
                <outbound type="feature" confirmed="no">java.lang.Exception.Exception()</outbound>
                <outbound type="class" confirmed="no">java.util.List</outbound>
                <outbound type="feature" confirmed="yes">org.junit.internal.runners.InitializationError.fErrors</outbound>
                <inbound type="feature" confirmed="yes">org.junit.internal.runners.InitializationError.InitializationError(java.lang.Throwable[])</inbound>
                <inbound type="feature" confirmed="yes">org.junit.internal.runners.MethodValidator.assertValid()</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.junit.internal.runners.InitializationError.fErrors</name>
                <outbound type="class" confirmed="no">java.util.List</outbound>
                <inbound type="feature" confirmed="yes">org.junit.internal.runners.InitializationError.InitializationError(java.util.List)</inbound>
                <inbound type="feature" confirmed="yes">org.junit.internal.runners.InitializationError.getCauses()</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.junit.internal.runners.InitializationError.getCauses()</name>
                <outbound type="class" confirmed="no">java.util.List</outbound>
                <outbound type="feature" confirmed="yes">org.junit.internal.runners.InitializationError.fErrors</outbound>
                <inbound type="feature" confirmed="yes">org.junit.internal.runners.ErrorReportingRunner.getCauses(java.lang.Throwable)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.junit.internal.runners.InitializationError.serialVersionUID</name>
            </feature>
        </class>
        <class confirmed="yes">
            <name>org.junit.internal.runners.JUnit38ClassRunner</name>
            <outbound type="class" confirmed="yes">org.junit.runner.Runner</outbound>
            <outbound type="class" confirmed="yes">org.junit.runner.manipulation.Filterable</outbound>
            <outbound type="class" confirmed="yes">org.junit.runner.manipulation.Sortable</outbound>
            <inbound type="feature" confirmed="yes">org.junit.internal.runners.JUnit38ClassRunner$OldTestClassAdaptingListener.JUnit38ClassRunner$OldTestClassAdaptingListener(org.junit.internal.runners.JUnit38ClassRunner, org.junit.runner.notification.RunNotifier)</inbound>
            <inbound type="feature" confirmed="yes">org.junit.internal.runners.JUnit38ClassRunner$OldTestClassAdaptingListener.JUnit38ClassRunner$OldTestClassAdaptingListener(org.junit.internal.runners.JUnit38ClassRunner, org.junit.runner.notification.RunNotifier, org.junit.internal.runners.JUnit38ClassRunner$1)</inbound>
            <inbound type="feature" confirmed="yes">org.junit.internal.runners.JUnit38ClassRunner$OldTestClassAdaptingListener.this$0</inbound>
            <inbound type="class" confirmed="yes">org.junit.internal.runners.SuiteMethod</inbound>
            <feature confirmed="yes">
                <name>org.junit.internal.runners.JUnit38ClassRunner.JUnit38ClassRunner(java.lang.Class)</name>
                <outbound type="class" confirmed="no">java.lang.Class</outbound>
                <outbound type="feature" confirmed="no">java.lang.Class.asSubclass(java.lang.Class)</outbound>
                <outbound type="class" confirmed="yes">junit.framework.Test</outbound>
                <outbound type="class" confirmed="yes">junit.framework.TestCase</outbound>
                <outbound type="feature" confirmed="yes">junit.framework.TestSuite.TestSuite(java.lang.Class)</outbound>
                <outbound type="feature" confirmed="yes">org.junit.internal.runners.JUnit38ClassRunner.JUnit38ClassRunner(junit.framework.Test)</outbound>
                <inbound type="feature" confirmed="yes">org.junit.internal.builders.JUnit3Builder.runnerForClass(java.lang.Class)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.junit.internal.runners.JUnit38ClassRunner.JUnit38ClassRunner(junit.framework.Test)</name>
                <outbound type="class" confirmed="yes">junit.framework.Test</outbound>
                <outbound type="feature" confirmed="yes">org.junit.internal.runners.JUnit38ClassRunner.setTest(junit.framework.Test)</outbound>
                <outbound type="feature" confirmed="yes">org.junit.runner.Runner.Runner()</outbound>
                <inbound type="feature" confirmed="yes">org.junit.experimental.max.MaxCore.buildRunner(org.junit.runner.Description)</inbound>
                <inbound type="feature" confirmed="yes">org.junit.internal.runners.JUnit38ClassRunner.JUnit38ClassRunner(java.lang.Class)</inbound>
                <inbound type="feature" confirmed="yes">org.junit.internal.runners.SuiteMethod.SuiteMethod(java.lang.Class)</inbound>
                <inbound type="feature" confirmed="yes">org.junit.runner.JUnitCore.run(junit.framework.Test)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.junit.internal.runners.JUnit38ClassRunner.createAdaptingListener(org.junit.runner.notification.RunNotifier)</name>
                <outbound type="class" confirmed="yes">junit.framework.TestListener</outbound>
                <outbound type="class" confirmed="yes">org.junit.internal.runners.JUnit38ClassRunner$1</outbound>
                <outbound type="feature" confirmed="yes">org.junit.internal.runners.JUnit38ClassRunner$OldTestClassAdaptingListener.JUnit38ClassRunner$OldTestClassAdaptingListener(org.junit.internal.runners.JUnit38ClassRunner, org.junit.runner.notification.RunNotifier, org.junit.internal.runners.JUnit38ClassRunner$1)</outbound>
                <outbound type="class" confirmed="yes">org.junit.runner.notification.RunNotifier</outbound>
                <inbound type="feature" confirmed="yes">org.junit.internal.runners.JUnit38ClassRunner.run(org.junit.runner.notification.RunNotifier)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.junit.internal.runners.JUnit38ClassRunner.createSuiteDescription(junit.framework.TestSuite)</name>
                <outbound type="class" confirmed="no">java.lang.Integer</outbound>
                <outbound type="feature" confirmed="no">java.lang.Integer.valueOf(int)</outbound>
                <outbound type="class" confirmed="no">java.lang.Object</outbound>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="feature" confirmed="no">java.lang.String.format(java.lang.String, java.lang.Object[])</outbound>
                <outbound type="class" confirmed="yes">junit.framework.Test</outbound>
                <outbound type="class" confirmed="yes">junit.framework.TestSuite</outbound>
                <outbound type="feature" confirmed="yes">junit.framework.TestSuite.countTestCases()</outbound>
                <outbound type="feature" confirmed="yes">junit.framework.TestSuite.testAt(int)</outbound>
                <inbound type="feature" confirmed="yes">org.junit.internal.runners.JUnit38ClassRunner.makeDescription(junit.framework.Test)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.junit.internal.runners.JUnit38ClassRunner.fTest</name>
                <outbound type="class" confirmed="yes">junit.framework.Test</outbound>
                <inbound type="feature" confirmed="yes">org.junit.internal.runners.JUnit38ClassRunner.getTest()</inbound>
                <inbound type="feature" confirmed="yes">org.junit.internal.runners.JUnit38ClassRunner.setTest(junit.framework.Test)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.junit.internal.runners.JUnit38ClassRunner.filter(org.junit.runner.manipulation.Filter)</name>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="class" confirmed="yes">junit.framework.Test</outbound>
                <outbound type="class" confirmed="yes">junit.framework.TestSuite</outbound>
                <outbound type="feature" confirmed="yes">junit.framework.TestSuite.TestSuite(java.lang.String)</outbound>
                <outbound type="feature" confirmed="yes">junit.framework.TestSuite.addTest(junit.framework.Test)</outbound>
                <outbound type="feature" confirmed="yes">junit.framework.TestSuite.getName()</outbound>
                <outbound type="feature" confirmed="yes">junit.framework.TestSuite.testAt(int)</outbound>
                <outbound type="feature" confirmed="yes">junit.framework.TestSuite.testCount()</outbound>
                <outbound type="feature" confirmed="yes">org.junit.internal.runners.JUnit38ClassRunner.getTest()</outbound>
                <outbound type="feature" confirmed="yes">org.junit.internal.runners.JUnit38ClassRunner.makeDescription(junit.framework.Test)</outbound>
                <outbound type="feature" confirmed="yes">org.junit.internal.runners.JUnit38ClassRunner.setTest(junit.framework.Test)</outbound>
                <outbound type="class" confirmed="yes">org.junit.runner.Description</outbound>
                <outbound type="class" confirmed="yes">org.junit.runner.manipulation.Filter</outbound>
                <outbound type="feature" confirmed="yes">org.junit.runner.manipulation.Filter.shouldRun(org.junit.runner.Description)</outbound>
                <outbound type="class" confirmed="yes">org.junit.runner.manipulation.Filterable</outbound>
                <outbound type="feature" confirmed="yes">org.junit.runner.manipulation.Filterable.filter(org.junit.runner.manipulation.Filter)</outbound>
                <outbound type="class" confirmed="yes">org.junit.runner.manipulation.NoTestsRemainException</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.junit.internal.runners.JUnit38ClassRunner.getDescription()</name>
                <outbound type="class" confirmed="yes">junit.framework.Test</outbound>
                <outbound type="feature" confirmed="yes">org.junit.internal.runners.JUnit38ClassRunner.getTest()</outbound>
                <outbound type="feature" confirmed="yes">org.junit.internal.runners.JUnit38ClassRunner.makeDescription(junit.framework.Test)</outbound>
                <outbound type="class" confirmed="yes">org.junit.runner.Description</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.junit.internal.runners.JUnit38ClassRunner.getTest()</name>
                <outbound type="class" confirmed="yes">junit.framework.Test</outbound>
                <outbound type="feature" confirmed="yes">org.junit.internal.runners.JUnit38ClassRunner.fTest</outbound>
                <inbound type="feature" confirmed="yes">org.junit.internal.runners.JUnit38ClassRunner.filter(org.junit.runner.manipulation.Filter)</inbound>
                <inbound type="feature" confirmed="yes">org.junit.internal.runners.JUnit38ClassRunner.getDescription()</inbound>
                <inbound type="feature" confirmed="yes">org.junit.internal.runners.JUnit38ClassRunner.run(org.junit.runner.notification.RunNotifier)</inbound>
                <inbound type="feature" confirmed="yes">org.junit.internal.runners.JUnit38ClassRunner.sort(org.junit.runner.manipulation.Sorter)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.junit.internal.runners.JUnit38ClassRunner.makeDescription(junit.framework.Test)</name>
                <outbound type="class" confirmed="no">java.lang.Class</outbound>
                <outbound type="feature" confirmed="no">java.lang.Object.getClass()</outbound>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="class" confirmed="no">java.lang.annotation.Annotation</outbound>
                <outbound type="class" confirmed="yes">junit.extensions.TestDecorator</outbound>
                <outbound type="feature" confirmed="yes">junit.extensions.TestDecorator.getTest()</outbound>
                <outbound type="class" confirmed="yes">junit.framework.Test</outbound>
                <outbound type="class" confirmed="yes">junit.framework.TestCase</outbound>
                <outbound type="feature" confirmed="yes">junit.framework.TestCase.getName()</outbound>
                <outbound type="class" confirmed="yes">junit.framework.TestSuite</outbound>
                <outbound type="feature" confirmed="yes">junit.framework.TestSuite.getName()</outbound>
                <outbound type="feature" confirmed="yes">junit.framework.TestSuite.testAt(int)</outbound>
                <outbound type="feature" confirmed="yes">junit.framework.TestSuite.testCount()</outbound>
                <outbound type="feature" confirmed="yes">org.junit.internal.runners.JUnit38ClassRunner.createSuiteDescription(junit.framework.TestSuite)</outbound>
                <outbound type="class" confirmed="yes">org.junit.runner.Describable</outbound>
                <outbound type="feature" confirmed="yes">org.junit.runner.Describable.getDescription()</outbound>
                <outbound type="class" confirmed="yes">org.junit.runner.Description</outbound>
                <outbound type="feature" confirmed="yes">org.junit.runner.Description.addChild(org.junit.runner.Description)</outbound>
                <outbound type="feature" confirmed="yes">org.junit.runner.Description.createSuiteDescription(java.lang.Class)</outbound>
                <outbound type="feature" confirmed="yes">org.junit.runner.Description.createSuiteDescription(java.lang.String, java.lang.annotation.Annotation[])</outbound>
                <outbound type="feature" confirmed="yes">org.junit.runner.Description.createTestDescription(java.lang.Class, java.lang.String)</outbound>
                <inbound type="feature" confirmed="yes">org.junit.internal.runners.JUnit38ClassRunner.filter(org.junit.runner.manipulation.Filter)</inbound>
                <inbound type="feature" confirmed="yes">org.junit.internal.runners.JUnit38ClassRunner.getDescription()</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.junit.internal.runners.JUnit38ClassRunner.run(org.junit.runner.notification.RunNotifier)</name>
                <outbound type="class" confirmed="yes">junit.framework.Test</outbound>
                <outbound type="feature" confirmed="yes">junit.framework.Test.run(junit.framework.TestResult)</outbound>
                <outbound type="class" confirmed="yes">junit.framework.TestListener</outbound>
                <outbound type="class" confirmed="yes">junit.framework.TestResult</outbound>
                <outbound type="feature" confirmed="yes">junit.framework.TestResult.TestResult()</outbound>
                <outbound type="feature" confirmed="yes">junit.framework.TestResult.addListener(junit.framework.TestListener)</outbound>
                <outbound type="feature" confirmed="yes">org.junit.internal.runners.JUnit38ClassRunner.createAdaptingListener(org.junit.runner.notification.RunNotifier)</outbound>
                <outbound type="feature" confirmed="yes">org.junit.internal.runners.JUnit38ClassRunner.getTest()</outbound>
                <outbound type="class" confirmed="yes">org.junit.runner.notification.RunNotifier</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.junit.internal.runners.JUnit38ClassRunner.setTest(junit.framework.Test)</name>
                <outbound type="class" confirmed="yes">junit.framework.Test</outbound>
                <outbound type="feature" confirmed="yes">org.junit.internal.runners.JUnit38ClassRunner.fTest</outbound>
                <inbound type="feature" confirmed="yes">org.junit.internal.runners.JUnit38ClassRunner.JUnit38ClassRunner(junit.framework.Test)</inbound>
                <inbound type="feature" confirmed="yes">org.junit.internal.runners.JUnit38ClassRunner.filter(org.junit.runner.manipulation.Filter)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.junit.internal.runners.JUnit38ClassRunner.sort(org.junit.runner.manipulation.Sorter)</name>
                <outbound type="class" confirmed="yes">junit.framework.Test</outbound>
                <outbound type="feature" confirmed="yes">org.junit.internal.runners.JUnit38ClassRunner.getTest()</outbound>
                <outbound type="class" confirmed="yes">org.junit.runner.manipulation.Sortable</outbound>
                <outbound type="feature" confirmed="yes">org.junit.runner.manipulation.Sortable.sort(org.junit.runner.manipulation.Sorter)</outbound>
                <outbound type="class" confirmed="yes">org.junit.runner.manipulation.Sorter</outbound>
            </feature>
        </class>
        <class confirmed="yes">
            <name>org.junit.internal.runners.JUnit38ClassRunner$1</name>
            <outbound type="class" confirmed="no">java.lang.Object</outbound>
            <inbound type="feature" confirmed="yes">org.junit.internal.runners.JUnit38ClassRunner$OldTestClassAdaptingListener.JUnit38ClassRunner$OldTestClassAdaptingListener(org.junit.internal.runners.JUnit38ClassRunner, org.junit.runner.notification.RunNotifier, org.junit.internal.runners.JUnit38ClassRunner$1)</inbound>
            <inbound type="feature" confirmed="yes">org.junit.internal.runners.JUnit38ClassRunner.createAdaptingListener(org.junit.runner.notification.RunNotifier)</inbound>
        </class>
        <class confirmed="yes">
            <name>org.junit.internal.runners.JUnit38ClassRunner$OldTestClassAdaptingListener</name>
            <outbound type="class" confirmed="no">java.lang.Object</outbound>
            <outbound type="class" confirmed="yes">junit.framework.TestListener</outbound>
            <feature confirmed="yes">
                <name>org.junit.internal.runners.JUnit38ClassRunner$OldTestClassAdaptingListener.JUnit38ClassRunner$OldTestClassAdaptingListener(org.junit.internal.runners.JUnit38ClassRunner, org.junit.runner.notification.RunNotifier)</name>
                <outbound type="feature" confirmed="no">java.lang.Object.Object()</outbound>
                <outbound type="class" confirmed="yes">org.junit.internal.runners.JUnit38ClassRunner</outbound>
                <outbound type="feature" confirmed="yes">org.junit.internal.runners.JUnit38ClassRunner$OldTestClassAdaptingListener.fNotifier</outbound>
                <outbound type="feature" confirmed="yes">org.junit.internal.runners.JUnit38ClassRunner$OldTestClassAdaptingListener.this$0</outbound>
                <outbound type="class" confirmed="yes">org.junit.runner.notification.RunNotifier</outbound>
                <inbound type="feature" confirmed="yes">org.junit.internal.runners.JUnit38ClassRunner$OldTestClassAdaptingListener.JUnit38ClassRunner$OldTestClassAdaptingListener(org.junit.internal.runners.JUnit38ClassRunner, org.junit.runner.notification.RunNotifier, org.junit.internal.runners.JUnit38ClassRunner$1)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.junit.internal.runners.JUnit38ClassRunner$OldTestClassAdaptingListener.JUnit38ClassRunner$OldTestClassAdaptingListener(org.junit.internal.runners.JUnit38ClassRunner, org.junit.runner.notification.RunNotifier, org.junit.internal.runners.JUnit38ClassRunner$1)</name>
                <outbound type="class" confirmed="yes">org.junit.internal.runners.JUnit38ClassRunner</outbound>
                <outbound type="class" confirmed="yes">org.junit.internal.runners.JUnit38ClassRunner$1</outbound>
                <outbound type="feature" confirmed="yes">org.junit.internal.runners.JUnit38ClassRunner$OldTestClassAdaptingListener.JUnit38ClassRunner$OldTestClassAdaptingListener(org.junit.internal.runners.JUnit38ClassRunner, org.junit.runner.notification.RunNotifier)</outbound>
                <outbound type="class" confirmed="yes">org.junit.runner.notification.RunNotifier</outbound>
                <inbound type="feature" confirmed="yes">org.junit.internal.runners.JUnit38ClassRunner.createAdaptingListener(org.junit.runner.notification.RunNotifier)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.junit.internal.runners.JUnit38ClassRunner$OldTestClassAdaptingListener.addError(junit.framework.Test, java.lang.Throwable)</name>
                <outbound type="class" confirmed="no">java.lang.Throwable</outbound>
                <outbound type="class" confirmed="yes">junit.framework.Test</outbound>
                <outbound type="feature" confirmed="yes">org.junit.internal.runners.JUnit38ClassRunner$OldTestClassAdaptingListener.asDescription(junit.framework.Test)</outbound>
                <outbound type="feature" confirmed="yes">org.junit.internal.runners.JUnit38ClassRunner$OldTestClassAdaptingListener.fNotifier</outbound>
                <outbound type="class" confirmed="yes">org.junit.runner.Description</outbound>
                <outbound type="class" confirmed="yes">org.junit.runner.notification.Failure</outbound>
                <outbound type="feature" confirmed="yes">org.junit.runner.notification.Failure.Failure(org.junit.runner.Description, java.lang.Throwable)</outbound>
                <outbound type="class" confirmed="yes">org.junit.runner.notification.RunNotifier</outbound>
                <outbound type="feature" confirmed="yes">org.junit.runner.notification.RunNotifier.fireTestFailure(org.junit.runner.notification.Failure)</outbound>
                <inbound type="feature" confirmed="yes">org.junit.internal.runners.JUnit38ClassRunner$OldTestClassAdaptingListener.addFailure(junit.framework.Test, junit.framework.AssertionFailedError)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.junit.internal.runners.JUnit38ClassRunner$OldTestClassAdaptingListener.addFailure(junit.framework.Test, junit.framework.AssertionFailedError)</name>
                <outbound type="class" confirmed="no">java.lang.Throwable</outbound>
                <outbound type="class" confirmed="yes">junit.framework.AssertionFailedError</outbound>
                <outbound type="class" confirmed="yes">junit.framework.Test</outbound>
                <outbound type="feature" confirmed="yes">org.junit.internal.runners.JUnit38ClassRunner$OldTestClassAdaptingListener.addError(junit.framework.Test, java.lang.Throwable)</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.junit.internal.runners.JUnit38ClassRunner$OldTestClassAdaptingListener.asDescription(junit.framework.Test)</name>
                <outbound type="class" confirmed="no">java.lang.Class</outbound>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="class" confirmed="yes">junit.framework.Test</outbound>
                <outbound type="feature" confirmed="yes">org.junit.internal.runners.JUnit38ClassRunner$OldTestClassAdaptingListener.getEffectiveClass(junit.framework.Test)</outbound>
                <outbound type="feature" confirmed="yes">org.junit.internal.runners.JUnit38ClassRunner$OldTestClassAdaptingListener.getName(junit.framework.Test)</outbound>
                <outbound type="class" confirmed="yes">org.junit.runner.Describable</outbound>
                <outbound type="feature" confirmed="yes">org.junit.runner.Describable.getDescription()</outbound>
                <outbound type="class" confirmed="yes">org.junit.runner.Description</outbound>
                <outbound type="feature" confirmed="yes">org.junit.runner.Description.createTestDescription(java.lang.Class, java.lang.String)</outbound>
                <inbound type="feature" confirmed="yes">org.junit.internal.runners.JUnit38ClassRunner$OldTestClassAdaptingListener.addError(junit.framework.Test, java.lang.Throwable)</inbound>
                <inbound type="feature" confirmed="yes">org.junit.internal.runners.JUnit38ClassRunner$OldTestClassAdaptingListener.endTest(junit.framework.Test)</inbound>
                <inbound type="feature" confirmed="yes">org.junit.internal.runners.JUnit38ClassRunner$OldTestClassAdaptingListener.startTest(junit.framework.Test)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.junit.internal.runners.JUnit38ClassRunner$OldTestClassAdaptingListener.endTest(junit.framework.Test)</name>
                <outbound type="class" confirmed="yes">junit.framework.Test</outbound>
                <outbound type="feature" confirmed="yes">org.junit.internal.runners.JUnit38ClassRunner$OldTestClassAdaptingListener.asDescription(junit.framework.Test)</outbound>
                <outbound type="feature" confirmed="yes">org.junit.internal.runners.JUnit38ClassRunner$OldTestClassAdaptingListener.fNotifier</outbound>
                <outbound type="class" confirmed="yes">org.junit.runner.Description</outbound>
                <outbound type="class" confirmed="yes">org.junit.runner.notification.RunNotifier</outbound>
                <outbound type="feature" confirmed="yes">org.junit.runner.notification.RunNotifier.fireTestFinished(org.junit.runner.Description)</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.junit.internal.runners.JUnit38ClassRunner$OldTestClassAdaptingListener.fNotifier</name>
                <outbound type="class" confirmed="yes">org.junit.runner.notification.RunNotifier</outbound>
                <inbound type="feature" confirmed="yes">org.junit.internal.runners.JUnit38ClassRunner$OldTestClassAdaptingListener.JUnit38ClassRunner$OldTestClassAdaptingListener(org.junit.internal.runners.JUnit38ClassRunner, org.junit.runner.notification.RunNotifier)</inbound>
                <inbound type="feature" confirmed="yes">org.junit.internal.runners.JUnit38ClassRunner$OldTestClassAdaptingListener.addError(junit.framework.Test, java.lang.Throwable)</inbound>
                <inbound type="feature" confirmed="yes">org.junit.internal.runners.JUnit38ClassRunner$OldTestClassAdaptingListener.endTest(junit.framework.Test)</inbound>
                <inbound type="feature" confirmed="yes">org.junit.internal.runners.JUnit38ClassRunner$OldTestClassAdaptingListener.startTest(junit.framework.Test)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.junit.internal.runners.JUnit38ClassRunner$OldTestClassAdaptingListener.getEffectiveClass(junit.framework.Test)</name>
                <outbound type="class" confirmed="no">java.lang.Class</outbound>
                <outbound type="feature" confirmed="no">java.lang.Object.getClass()</outbound>
                <outbound type="class" confirmed="yes">junit.framework.Test</outbound>
                <inbound type="feature" confirmed="yes">org.junit.internal.runners.JUnit38ClassRunner$OldTestClassAdaptingListener.asDescription(junit.framework.Test)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.junit.internal.runners.JUnit38ClassRunner$OldTestClassAdaptingListener.getName(junit.framework.Test)</name>
                <outbound type="feature" confirmed="no">java.lang.Object.toString()</outbound>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="class" confirmed="yes">junit.framework.Test</outbound>
                <outbound type="class" confirmed="yes">junit.framework.TestCase</outbound>
                <outbound type="feature" confirmed="yes">junit.framework.TestCase.getName()</outbound>
                <inbound type="feature" confirmed="yes">org.junit.internal.runners.JUnit38ClassRunner$OldTestClassAdaptingListener.asDescription(junit.framework.Test)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.junit.internal.runners.JUnit38ClassRunner$OldTestClassAdaptingListener.startTest(junit.framework.Test)</name>
                <outbound type="class" confirmed="yes">junit.framework.Test</outbound>
                <outbound type="feature" confirmed="yes">org.junit.internal.runners.JUnit38ClassRunner$OldTestClassAdaptingListener.asDescription(junit.framework.Test)</outbound>
                <outbound type="feature" confirmed="yes">org.junit.internal.runners.JUnit38ClassRunner$OldTestClassAdaptingListener.fNotifier</outbound>
                <outbound type="class" confirmed="yes">org.junit.runner.Description</outbound>
                <outbound type="class" confirmed="yes">org.junit.runner.notification.RunNotifier</outbound>
                <outbound type="feature" confirmed="yes">org.junit.runner.notification.RunNotifier.fireTestStarted(org.junit.runner.Description)</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.junit.internal.runners.JUnit38ClassRunner$OldTestClassAdaptingListener.this$0</name>
                <outbound type="class" confirmed="yes">org.junit.internal.runners.JUnit38ClassRunner</outbound>
                <inbound type="feature" confirmed="yes">org.junit.internal.runners.JUnit38ClassRunner$OldTestClassAdaptingListener.JUnit38ClassRunner$OldTestClassAdaptingListener(org.junit.internal.runners.JUnit38ClassRunner, org.junit.runner.notification.RunNotifier)</inbound>
            </feature>
        </class>
        <class confirmed="yes">
            <name>org.junit.internal.runners.JUnit4ClassRunner</name>
            <outbound type="class" confirmed="yes">org.junit.runner.Runner</outbound>
            <outbound type="class" confirmed="yes">org.junit.runner.manipulation.Filterable</outbound>
            <outbound type="class" confirmed="yes">org.junit.runner.manipulation.Sortable</outbound>
            <inbound type="feature" confirmed="yes">org.junit.internal.runners.JUnit4ClassRunner$1.JUnit4ClassRunner$1(org.junit.internal.runners.JUnit4ClassRunner, org.junit.runner.notification.RunNotifier)</inbound>
            <inbound type="feature" confirmed="yes">org.junit.internal.runners.JUnit4ClassRunner$1.run()</inbound>
            <inbound type="feature" confirmed="yes">org.junit.internal.runners.JUnit4ClassRunner$1.this$0</inbound>
            <inbound type="feature" confirmed="yes">org.junit.internal.runners.JUnit4ClassRunner$2.JUnit4ClassRunner$2(org.junit.internal.runners.JUnit4ClassRunner, org.junit.runner.manipulation.Sorter)</inbound>
            <inbound type="feature" confirmed="yes">org.junit.internal.runners.JUnit4ClassRunner$2.compare(java.lang.reflect.Method, java.lang.reflect.Method)</inbound>
            <inbound type="feature" confirmed="yes">org.junit.internal.runners.JUnit4ClassRunner$2.this$0</inbound>
            <feature confirmed="yes">
                <name>org.junit.internal.runners.JUnit4ClassRunner.JUnit4ClassRunner(java.lang.Class)</name>
                <outbound type="class" confirmed="no">java.lang.Class</outbound>
                <outbound type="class" confirmed="no">java.util.List</outbound>
                <outbound type="class" confirmed="yes">org.junit.internal.runners.InitializationError</outbound>
                <outbound type="feature" confirmed="yes">org.junit.internal.runners.JUnit4ClassRunner.fTestClass</outbound>
                <outbound type="feature" confirmed="yes">org.junit.internal.runners.JUnit4ClassRunner.fTestMethods</outbound>
                <outbound type="feature" confirmed="yes">org.junit.internal.runners.JUnit4ClassRunner.getTestMethods()</outbound>
                <outbound type="feature" confirmed="yes">org.junit.internal.runners.JUnit4ClassRunner.validate()</outbound>
                <outbound type="class" confirmed="yes">org.junit.internal.runners.TestClass</outbound>
                <outbound type="feature" confirmed="yes">org.junit.internal.runners.TestClass.TestClass(java.lang.Class)</outbound>
                <outbound type="feature" confirmed="yes">org.junit.runner.Runner.Runner()</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.junit.internal.runners.JUnit4ClassRunner.classAnnotations()</name>
                <outbound type="class" confirmed="no">java.lang.Class</outbound>
                <outbound type="feature" confirmed="no">java.lang.Class.getAnnotations()</outbound>
                <outbound type="class" confirmed="no">java.lang.annotation.Annotation</outbound>
                <outbound type="feature" confirmed="yes">org.junit.internal.runners.JUnit4ClassRunner.fTestClass</outbound>
                <outbound type="class" confirmed="yes">org.junit.internal.runners.TestClass</outbound>
                <outbound type="feature" confirmed="yes">org.junit.internal.runners.TestClass.getJavaClass()</outbound>
                <inbound type="feature" confirmed="yes">org.junit.internal.runners.JUnit4ClassRunner.getDescription()</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.junit.internal.runners.JUnit4ClassRunner.createTest()</name>
                <outbound type="class" confirmed="no">java.lang.Exception</outbound>
                <outbound type="class" confirmed="no">java.lang.Object</outbound>
                <outbound type="class" confirmed="no">java.lang.reflect.Constructor</outbound>
                <outbound type="feature" confirmed="no">java.lang.reflect.Constructor.newInstance(java.lang.Object[])</outbound>
                <outbound type="feature" confirmed="yes">org.junit.internal.runners.JUnit4ClassRunner.getTestClass()</outbound>
                <outbound type="class" confirmed="yes">org.junit.internal.runners.TestClass</outbound>
                <outbound type="feature" confirmed="yes">org.junit.internal.runners.TestClass.getConstructor()</outbound>
                <inbound type="feature" confirmed="yes">org.junit.internal.runners.JUnit4ClassRunner.invokeTestMethod(java.lang.reflect.Method, org.junit.runner.notification.RunNotifier)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.junit.internal.runners.JUnit4ClassRunner.fTestClass</name>
                <outbound type="class" confirmed="yes">org.junit.internal.runners.TestClass</outbound>
                <inbound type="feature" confirmed="yes">org.junit.internal.runners.JUnit4ClassRunner.JUnit4ClassRunner(java.lang.Class)</inbound>
                <inbound type="feature" confirmed="yes">org.junit.internal.runners.JUnit4ClassRunner.classAnnotations()</inbound>
                <inbound type="feature" confirmed="yes">org.junit.internal.runners.JUnit4ClassRunner.getTestClass()</inbound>
                <inbound type="feature" confirmed="yes">org.junit.internal.runners.JUnit4ClassRunner.getTestMethods()</inbound>
                <inbound type="feature" confirmed="yes">org.junit.internal.runners.JUnit4ClassRunner.run(org.junit.runner.notification.RunNotifier)</inbound>
                <inbound type="feature" confirmed="yes">org.junit.internal.runners.JUnit4ClassRunner.validate()</inbound>
                <inbound type="feature" confirmed="yes">org.junit.internal.runners.JUnit4ClassRunner.wrapMethod(java.lang.reflect.Method)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.junit.internal.runners.JUnit4ClassRunner.fTestMethods</name>
                <outbound type="class" confirmed="no">java.util.List</outbound>
                <inbound type="feature" confirmed="yes">org.junit.internal.runners.JUnit4ClassRunner.JUnit4ClassRunner(java.lang.Class)</inbound>
                <inbound type="feature" confirmed="yes">org.junit.internal.runners.JUnit4ClassRunner.filter(org.junit.runner.manipulation.Filter)</inbound>
                <inbound type="feature" confirmed="yes">org.junit.internal.runners.JUnit4ClassRunner.getDescription()</inbound>
                <inbound type="feature" confirmed="yes">org.junit.internal.runners.JUnit4ClassRunner.runMethods(org.junit.runner.notification.RunNotifier)</inbound>
                <inbound type="feature" confirmed="yes">org.junit.internal.runners.JUnit4ClassRunner.sort(org.junit.runner.manipulation.Sorter)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.junit.internal.runners.JUnit4ClassRunner.filter(org.junit.runner.manipulation.Filter)</name>
                <outbound type="class" confirmed="no">java.lang.Object</outbound>
                <outbound type="class" confirmed="no">java.lang.reflect.Method</outbound>
                <outbound type="class" confirmed="no">java.util.Iterator</outbound>
                <outbound type="feature" confirmed="no">java.util.Iterator.hasNext()</outbound>
                <outbound type="feature" confirmed="no">java.util.Iterator.next()</outbound>
                <outbound type="feature" confirmed="no">java.util.Iterator.remove()</outbound>
                <outbound type="class" confirmed="no">java.util.List</outbound>
                <outbound type="feature" confirmed="no">java.util.List.isEmpty()</outbound>
                <outbound type="feature" confirmed="no">java.util.List.iterator()</outbound>
                <outbound type="feature" confirmed="yes">org.junit.internal.runners.JUnit4ClassRunner.fTestMethods</outbound>
                <outbound type="feature" confirmed="yes">org.junit.internal.runners.JUnit4ClassRunner.methodDescription(java.lang.reflect.Method)</outbound>
                <outbound type="class" confirmed="yes">org.junit.runner.Description</outbound>
                <outbound type="class" confirmed="yes">org.junit.runner.manipulation.Filter</outbound>
                <outbound type="feature" confirmed="yes">org.junit.runner.manipulation.Filter.shouldRun(org.junit.runner.Description)</outbound>
                <outbound type="class" confirmed="yes">org.junit.runner.manipulation.NoTestsRemainException</outbound>
                <outbound type="feature" confirmed="yes">org.junit.runner.manipulation.NoTestsRemainException.NoTestsRemainException()</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.junit.internal.runners.JUnit4ClassRunner.getDescription()</name>
                <outbound type="class" confirmed="no">java.lang.Object</outbound>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="class" confirmed="no">java.lang.annotation.Annotation</outbound>
                <outbound type="class" confirmed="no">java.lang.reflect.Method</outbound>
                <outbound type="class" confirmed="no">java.util.Iterator</outbound>
                <outbound type="feature" confirmed="no">java.util.Iterator.hasNext()</outbound>
                <outbound type="feature" confirmed="no">java.util.Iterator.next()</outbound>
                <outbound type="class" confirmed="no">java.util.List</outbound>
                <outbound type="feature" confirmed="no">java.util.List.iterator()</outbound>
                <outbound type="feature" confirmed="yes">org.junit.internal.runners.JUnit4ClassRunner.classAnnotations()</outbound>
                <outbound type="feature" confirmed="yes">org.junit.internal.runners.JUnit4ClassRunner.fTestMethods</outbound>
                <outbound type="feature" confirmed="yes">org.junit.internal.runners.JUnit4ClassRunner.getName()</outbound>
                <outbound type="feature" confirmed="yes">org.junit.internal.runners.JUnit4ClassRunner.methodDescription(java.lang.reflect.Method)</outbound>
                <outbound type="class" confirmed="yes">org.junit.runner.Description</outbound>
                <outbound type="feature" confirmed="yes">org.junit.runner.Description.addChild(org.junit.runner.Description)</outbound>
                <outbound type="feature" confirmed="yes">org.junit.runner.Description.createSuiteDescription(java.lang.String, java.lang.annotation.Annotation[])</outbound>
                <inbound type="feature" confirmed="yes">org.junit.internal.runners.JUnit4ClassRunner.run(org.junit.runner.notification.RunNotifier)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.junit.internal.runners.JUnit4ClassRunner.getName()</name>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="feature" confirmed="yes">org.junit.internal.runners.JUnit4ClassRunner.getTestClass()</outbound>
                <outbound type="class" confirmed="yes">org.junit.internal.runners.TestClass</outbound>
                <outbound type="feature" confirmed="yes">org.junit.internal.runners.TestClass.getName()</outbound>
                <inbound type="feature" confirmed="yes">org.junit.internal.runners.JUnit4ClassRunner.getDescription()</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.junit.internal.runners.JUnit4ClassRunner.getTestClass()</name>
                <outbound type="feature" confirmed="yes">org.junit.internal.runners.JUnit4ClassRunner.fTestClass</outbound>
                <outbound type="class" confirmed="yes">org.junit.internal.runners.TestClass</outbound>
                <inbound type="feature" confirmed="yes">org.junit.internal.runners.JUnit4ClassRunner.createTest()</inbound>
                <inbound type="feature" confirmed="yes">org.junit.internal.runners.JUnit4ClassRunner.getName()</inbound>
                <inbound type="feature" confirmed="yes">org.junit.internal.runners.JUnit4ClassRunner.methodDescription(java.lang.reflect.Method)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.junit.internal.runners.JUnit4ClassRunner.getTestMethods()</name>
                <outbound type="class" confirmed="no">java.util.List</outbound>
                <outbound type="feature" confirmed="yes">org.junit.internal.runners.JUnit4ClassRunner.fTestClass</outbound>
                <outbound type="class" confirmed="yes">org.junit.internal.runners.TestClass</outbound>
                <outbound type="feature" confirmed="yes">org.junit.internal.runners.TestClass.getTestMethods()</outbound>
                <inbound type="feature" confirmed="yes">org.junit.internal.runners.JUnit4ClassRunner.JUnit4ClassRunner(java.lang.Class)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.junit.internal.runners.JUnit4ClassRunner.invokeTestMethod(java.lang.reflect.Method, org.junit.runner.notification.RunNotifier)</name>
                <outbound type="class" confirmed="no">java.lang.Exception</outbound>
                <outbound type="class" confirmed="no">java.lang.Object</outbound>
                <outbound type="class" confirmed="no">java.lang.Throwable</outbound>
                <outbound type="class" confirmed="no">java.lang.reflect.InvocationTargetException</outbound>
                <outbound type="feature" confirmed="no">java.lang.reflect.InvocationTargetException.getCause()</outbound>
                <outbound type="class" confirmed="no">java.lang.reflect.Method</outbound>
                <outbound type="feature" confirmed="yes">org.junit.internal.runners.JUnit4ClassRunner.createTest()</outbound>
                <outbound type="feature" confirmed="yes">org.junit.internal.runners.JUnit4ClassRunner.methodDescription(java.lang.reflect.Method)</outbound>
                <outbound type="feature" confirmed="yes">org.junit.internal.runners.JUnit4ClassRunner.testAborted(org.junit.runner.notification.RunNotifier, org.junit.runner.Description, java.lang.Throwable)</outbound>
                <outbound type="feature" confirmed="yes">org.junit.internal.runners.JUnit4ClassRunner.wrapMethod(java.lang.reflect.Method)</outbound>
                <outbound type="feature" confirmed="yes">org.junit.internal.runners.MethodRoadie.MethodRoadie(java.lang.Object, org.junit.internal.runners.TestMethod, org.junit.runner.notification.RunNotifier, org.junit.runner.Description)</outbound>
                <outbound type="feature" confirmed="yes">org.junit.internal.runners.MethodRoadie.run()</outbound>
                <outbound type="class" confirmed="yes">org.junit.internal.runners.TestMethod</outbound>
                <outbound type="class" confirmed="yes">org.junit.runner.Description</outbound>
                <outbound type="class" confirmed="yes">org.junit.runner.notification.RunNotifier</outbound>
                <inbound type="feature" confirmed="yes">org.junit.internal.runners.JUnit4ClassRunner.runMethods(org.junit.runner.notification.RunNotifier)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.junit.internal.runners.JUnit4ClassRunner.methodDescription(java.lang.reflect.Method)</name>
                <outbound type="class" confirmed="no">java.lang.Class</outbound>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="class" confirmed="no">java.lang.annotation.Annotation</outbound>
                <outbound type="class" confirmed="no">java.lang.reflect.Method</outbound>
                <outbound type="feature" confirmed="yes">org.junit.internal.runners.JUnit4ClassRunner.getTestClass()</outbound>
                <outbound type="feature" confirmed="yes">org.junit.internal.runners.JUnit4ClassRunner.testAnnotations(java.lang.reflect.Method)</outbound>
                <outbound type="feature" confirmed="yes">org.junit.internal.runners.JUnit4ClassRunner.testName(java.lang.reflect.Method)</outbound>
                <outbound type="class" confirmed="yes">org.junit.internal.runners.TestClass</outbound>
                <outbound type="feature" confirmed="yes">org.junit.internal.runners.TestClass.getJavaClass()</outbound>
                <outbound type="class" confirmed="yes">org.junit.runner.Description</outbound>
                <outbound type="feature" confirmed="yes">org.junit.runner.Description.createTestDescription(java.lang.Class, java.lang.String, java.lang.annotation.Annotation[])</outbound>
                <inbound type="feature" confirmed="yes">org.junit.internal.runners.JUnit4ClassRunner$2.compare(java.lang.reflect.Method, java.lang.reflect.Method)</inbound>
                <inbound type="feature" confirmed="yes">org.junit.internal.runners.JUnit4ClassRunner.filter(org.junit.runner.manipulation.Filter)</inbound>
                <inbound type="feature" confirmed="yes">org.junit.internal.runners.JUnit4ClassRunner.getDescription()</inbound>
                <inbound type="feature" confirmed="yes">org.junit.internal.runners.JUnit4ClassRunner.invokeTestMethod(java.lang.reflect.Method, org.junit.runner.notification.RunNotifier)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.junit.internal.runners.JUnit4ClassRunner.run(org.junit.runner.notification.RunNotifier)</name>
                <outbound type="class" confirmed="no">java.lang.Runnable</outbound>
                <outbound type="feature" confirmed="yes">org.junit.internal.runners.ClassRoadie.ClassRoadie(org.junit.runner.notification.RunNotifier, org.junit.internal.runners.TestClass, org.junit.runner.Description, java.lang.Runnable)</outbound>
                <outbound type="feature" confirmed="yes">org.junit.internal.runners.ClassRoadie.runProtected()</outbound>
                <outbound type="feature" confirmed="yes">org.junit.internal.runners.JUnit4ClassRunner$1.JUnit4ClassRunner$1(org.junit.internal.runners.JUnit4ClassRunner, org.junit.runner.notification.RunNotifier)</outbound>
                <outbound type="feature" confirmed="yes">org.junit.internal.runners.JUnit4ClassRunner.fTestClass</outbound>
                <outbound type="feature" confirmed="yes">org.junit.internal.runners.JUnit4ClassRunner.getDescription()</outbound>
                <outbound type="class" confirmed="yes">org.junit.internal.runners.TestClass</outbound>
                <outbound type="class" confirmed="yes">org.junit.runner.Description</outbound>
                <outbound type="class" confirmed="yes">org.junit.runner.notification.RunNotifier</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.junit.internal.runners.JUnit4ClassRunner.runMethods(org.junit.runner.notification.RunNotifier)</name>
                <outbound type="class" confirmed="no">java.lang.Object</outbound>
                <outbound type="class" confirmed="no">java.lang.reflect.Method</outbound>
                <outbound type="class" confirmed="no">java.util.Iterator</outbound>
                <outbound type="feature" confirmed="no">java.util.Iterator.hasNext()</outbound>
                <outbound type="feature" confirmed="no">java.util.Iterator.next()</outbound>
                <outbound type="class" confirmed="no">java.util.List</outbound>
                <outbound type="feature" confirmed="no">java.util.List.iterator()</outbound>
                <outbound type="feature" confirmed="yes">org.junit.internal.runners.JUnit4ClassRunner.fTestMethods</outbound>
                <outbound type="feature" confirmed="yes">org.junit.internal.runners.JUnit4ClassRunner.invokeTestMethod(java.lang.reflect.Method, org.junit.runner.notification.RunNotifier)</outbound>
                <outbound type="class" confirmed="yes">org.junit.runner.notification.RunNotifier</outbound>
                <inbound type="feature" confirmed="yes">org.junit.internal.runners.JUnit4ClassRunner$1.run()</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.junit.internal.runners.JUnit4ClassRunner.sort(org.junit.runner.manipulation.Sorter)</name>
                <outbound type="feature" confirmed="no">java.util.Collections.sort(java.util.List, java.util.Comparator)</outbound>
                <outbound type="class" confirmed="no">java.util.Comparator</outbound>
                <outbound type="class" confirmed="no">java.util.List</outbound>
                <outbound type="feature" confirmed="yes">org.junit.internal.runners.JUnit4ClassRunner$2.JUnit4ClassRunner$2(org.junit.internal.runners.JUnit4ClassRunner, org.junit.runner.manipulation.Sorter)</outbound>
                <outbound type="feature" confirmed="yes">org.junit.internal.runners.JUnit4ClassRunner.fTestMethods</outbound>
                <outbound type="class" confirmed="yes">org.junit.runner.manipulation.Sorter</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.junit.internal.runners.JUnit4ClassRunner.testAborted(org.junit.runner.notification.RunNotifier, org.junit.runner.Description, java.lang.Throwable)</name>
                <outbound type="class" confirmed="no">java.lang.Throwable</outbound>
                <outbound type="class" confirmed="yes">org.junit.runner.Description</outbound>
                <outbound type="class" confirmed="yes">org.junit.runner.notification.Failure</outbound>
                <outbound type="feature" confirmed="yes">org.junit.runner.notification.Failure.Failure(org.junit.runner.Description, java.lang.Throwable)</outbound>
                <outbound type="class" confirmed="yes">org.junit.runner.notification.RunNotifier</outbound>
                <outbound type="feature" confirmed="yes">org.junit.runner.notification.RunNotifier.fireTestFailure(org.junit.runner.notification.Failure)</outbound>
                <outbound type="feature" confirmed="yes">org.junit.runner.notification.RunNotifier.fireTestFinished(org.junit.runner.Description)</outbound>
                <outbound type="feature" confirmed="yes">org.junit.runner.notification.RunNotifier.fireTestStarted(org.junit.runner.Description)</outbound>
                <inbound type="feature" confirmed="yes">org.junit.internal.runners.JUnit4ClassRunner.invokeTestMethod(java.lang.reflect.Method, org.junit.runner.notification.RunNotifier)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.junit.internal.runners.JUnit4ClassRunner.testAnnotations(java.lang.reflect.Method)</name>
                <outbound type="class" confirmed="no">java.lang.annotation.Annotation</outbound>
                <outbound type="class" confirmed="no">java.lang.reflect.Method</outbound>
                <outbound type="feature" confirmed="no">java.lang.reflect.Method.getAnnotations()</outbound>
                <inbound type="feature" confirmed="yes">org.junit.internal.runners.JUnit4ClassRunner.methodDescription(java.lang.reflect.Method)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.junit.internal.runners.JUnit4ClassRunner.testName(java.lang.reflect.Method)</name>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="class" confirmed="no">java.lang.reflect.Method</outbound>
                <outbound type="feature" confirmed="no">java.lang.reflect.Method.getName()</outbound>
                <inbound type="feature" confirmed="yes">org.junit.internal.runners.JUnit4ClassRunner.methodDescription(java.lang.reflect.Method)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.junit.internal.runners.JUnit4ClassRunner.validate()</name>
                <outbound type="class" confirmed="no">java.util.List</outbound>
                <outbound type="class" confirmed="yes">org.junit.internal.runners.InitializationError</outbound>
                <outbound type="feature" confirmed="yes">org.junit.internal.runners.JUnit4ClassRunner.fTestClass</outbound>
                <outbound type="feature" confirmed="yes">org.junit.internal.runners.MethodValidator.MethodValidator(org.junit.internal.runners.TestClass)</outbound>
                <outbound type="feature" confirmed="yes">org.junit.internal.runners.MethodValidator.assertValid()</outbound>
                <outbound type="feature" confirmed="yes">org.junit.internal.runners.MethodValidator.validateMethodsForDefaultRunner()</outbound>
                <outbound type="class" confirmed="yes">org.junit.internal.runners.TestClass</outbound>
                <inbound type="feature" confirmed="yes">org.junit.internal.runners.JUnit4ClassRunner.JUnit4ClassRunner(java.lang.Class)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.junit.internal.runners.JUnit4ClassRunner.wrapMethod(java.lang.reflect.Method)</name>
                <outbound type="class" confirmed="no">java.lang.reflect.Method</outbound>
                <outbound type="feature" confirmed="yes">org.junit.internal.runners.JUnit4ClassRunner.fTestClass</outbound>
                <outbound type="class" confirmed="yes">org.junit.internal.runners.TestClass</outbound>
                <outbound type="class" confirmed="yes">org.junit.internal.runners.TestMethod</outbound>
                <outbound type="feature" confirmed="yes">org.junit.internal.runners.TestMethod.TestMethod(java.lang.reflect.Method, org.junit.internal.runners.TestClass)</outbound>
                <inbound type="feature" confirmed="yes">org.junit.internal.runners.JUnit4ClassRunner.invokeTestMethod(java.lang.reflect.Method, org.junit.runner.notification.RunNotifier)</inbound>
            </feature>
        </class>
        <class confirmed="yes">
            <name>org.junit.internal.runners.JUnit4ClassRunner$1</name>
            <outbound type="class" confirmed="no">java.lang.Object</outbound>
            <outbound type="class" confirmed="no">java.lang.Runnable</outbound>
            <feature confirmed="yes">
                <name>org.junit.internal.runners.JUnit4ClassRunner$1.JUnit4ClassRunner$1(org.junit.internal.runners.JUnit4ClassRunner, org.junit.runner.notification.RunNotifier)</name>
                <outbound type="feature" confirmed="no">java.lang.Object.Object()</outbound>
                <outbound type="class" confirmed="yes">org.junit.internal.runners.JUnit4ClassRunner</outbound>
                <outbound type="feature" confirmed="yes">org.junit.internal.runners.JUnit4ClassRunner$1.this$0</outbound>
                <outbound type="feature" confirmed="yes">org.junit.internal.runners.JUnit4ClassRunner$1.val$notifier</outbound>
                <outbound type="class" confirmed="yes">org.junit.runner.notification.RunNotifier</outbound>
                <inbound type="feature" confirmed="yes">org.junit.internal.runners.JUnit4ClassRunner.run(org.junit.runner.notification.RunNotifier)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.junit.internal.runners.JUnit4ClassRunner$1.run()</name>
                <outbound type="class" confirmed="yes">org.junit.internal.runners.JUnit4ClassRunner</outbound>
                <outbound type="feature" confirmed="yes">org.junit.internal.runners.JUnit4ClassRunner$1.this$0</outbound>
                <outbound type="feature" confirmed="yes">org.junit.internal.runners.JUnit4ClassRunner$1.val$notifier</outbound>
                <outbound type="feature" confirmed="yes">org.junit.internal.runners.JUnit4ClassRunner.runMethods(org.junit.runner.notification.RunNotifier)</outbound>
                <outbound type="class" confirmed="yes">org.junit.runner.notification.RunNotifier</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.junit.internal.runners.JUnit4ClassRunner$1.this$0</name>
                <outbound type="class" confirmed="yes">org.junit.internal.runners.JUnit4ClassRunner</outbound>
                <inbound type="feature" confirmed="yes">org.junit.internal.runners.JUnit4ClassRunner$1.JUnit4ClassRunner$1(org.junit.internal.runners.JUnit4ClassRunner, org.junit.runner.notification.RunNotifier)</inbound>
                <inbound type="feature" confirmed="yes">org.junit.internal.runners.JUnit4ClassRunner$1.run()</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.junit.internal.runners.JUnit4ClassRunner$1.val$notifier</name>
                <outbound type="class" confirmed="yes">org.junit.runner.notification.RunNotifier</outbound>
                <inbound type="feature" confirmed="yes">org.junit.internal.runners.JUnit4ClassRunner$1.JUnit4ClassRunner$1(org.junit.internal.runners.JUnit4ClassRunner, org.junit.runner.notification.RunNotifier)</inbound>
                <inbound type="feature" confirmed="yes">org.junit.internal.runners.JUnit4ClassRunner$1.run()</inbound>
            </feature>
        </class>
        <class confirmed="yes">
            <name>org.junit.internal.runners.JUnit4ClassRunner$2</name>
            <outbound type="class" confirmed="no">java.lang.Object</outbound>
            <outbound type="class" confirmed="no">java.util.Comparator</outbound>
            <feature confirmed="yes">
                <name>org.junit.internal.runners.JUnit4ClassRunner$2.JUnit4ClassRunner$2(org.junit.internal.runners.JUnit4ClassRunner, org.junit.runner.manipulation.Sorter)</name>
                <outbound type="feature" confirmed="no">java.lang.Object.Object()</outbound>
                <outbound type="class" confirmed="yes">org.junit.internal.runners.JUnit4ClassRunner</outbound>
                <outbound type="feature" confirmed="yes">org.junit.internal.runners.JUnit4ClassRunner$2.this$0</outbound>
                <outbound type="feature" confirmed="yes">org.junit.internal.runners.JUnit4ClassRunner$2.val$sorter</outbound>
                <outbound type="class" confirmed="yes">org.junit.runner.manipulation.Sorter</outbound>
                <inbound type="feature" confirmed="yes">org.junit.internal.runners.JUnit4ClassRunner.sort(org.junit.runner.manipulation.Sorter)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.junit.internal.runners.JUnit4ClassRunner$2.compare(java.lang.Object, java.lang.Object)</name>
                <outbound type="class" confirmed="no">java.lang.Object</outbound>
                <outbound type="class" confirmed="no">java.lang.reflect.Method</outbound>
                <outbound type="feature" confirmed="yes">org.junit.internal.runners.JUnit4ClassRunner$2.compare(java.lang.reflect.Method, java.lang.reflect.Method)</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.junit.internal.runners.JUnit4ClassRunner$2.compare(java.lang.reflect.Method, java.lang.reflect.Method)</name>
                <outbound type="class" confirmed="no">java.lang.reflect.Method</outbound>
                <outbound type="class" confirmed="yes">org.junit.internal.runners.JUnit4ClassRunner</outbound>
                <outbound type="feature" confirmed="yes">org.junit.internal.runners.JUnit4ClassRunner$2.this$0</outbound>
                <outbound type="feature" confirmed="yes">org.junit.internal.runners.JUnit4ClassRunner$2.val$sorter</outbound>
                <outbound type="feature" confirmed="yes">org.junit.internal.runners.JUnit4ClassRunner.methodDescription(java.lang.reflect.Method)</outbound>
                <outbound type="class" confirmed="yes">org.junit.runner.Description</outbound>
                <outbound type="class" confirmed="yes">org.junit.runner.manipulation.Sorter</outbound>
                <outbound type="feature" confirmed="yes">org.junit.runner.manipulation.Sorter.compare(org.junit.runner.Description, org.junit.runner.Description)</outbound>
                <inbound type="feature" confirmed="yes">org.junit.internal.runners.JUnit4ClassRunner$2.compare(java.lang.Object, java.lang.Object)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.junit.internal.runners.JUnit4ClassRunner$2.this$0</name>
                <outbound type="class" confirmed="yes">org.junit.internal.runners.JUnit4ClassRunner</outbound>
                <inbound type="feature" confirmed="yes">org.junit.internal.runners.JUnit4ClassRunner$2.JUnit4ClassRunner$2(org.junit.internal.runners.JUnit4ClassRunner, org.junit.runner.manipulation.Sorter)</inbound>
                <inbound type="feature" confirmed="yes">org.junit.internal.runners.JUnit4ClassRunner$2.compare(java.lang.reflect.Method, java.lang.reflect.Method)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.junit.internal.runners.JUnit4ClassRunner$2.val$sorter</name>
                <outbound type="class" confirmed="yes">org.junit.runner.manipulation.Sorter</outbound>
                <inbound type="feature" confirmed="yes">org.junit.internal.runners.JUnit4ClassRunner$2.JUnit4ClassRunner$2(org.junit.internal.runners.JUnit4ClassRunner, org.junit.runner.manipulation.Sorter)</inbound>
                <inbound type="feature" confirmed="yes">org.junit.internal.runners.JUnit4ClassRunner$2.compare(java.lang.reflect.Method, java.lang.reflect.Method)</inbound>
            </feature>
        </class>
        <class confirmed="yes">
            <name>org.junit.internal.runners.MethodRoadie</name>
            <outbound type="class" confirmed="no">java.lang.Object</outbound>
            <inbound type="feature" confirmed="yes">org.junit.internal.runners.MethodRoadie$1$1.call()</inbound>
            <inbound type="feature" confirmed="yes">org.junit.internal.runners.MethodRoadie$1.MethodRoadie$1(org.junit.internal.runners.MethodRoadie, long)</inbound>
            <inbound type="feature" confirmed="yes">org.junit.internal.runners.MethodRoadie$1.run()</inbound>
            <inbound type="feature" confirmed="yes">org.junit.internal.runners.MethodRoadie$1.this$0</inbound>
            <inbound type="feature" confirmed="yes">org.junit.internal.runners.MethodRoadie$2.MethodRoadie$2(org.junit.internal.runners.MethodRoadie)</inbound>
            <inbound type="feature" confirmed="yes">org.junit.internal.runners.MethodRoadie$2.run()</inbound>
            <inbound type="feature" confirmed="yes">org.junit.internal.runners.MethodRoadie$2.this$0</inbound>
            <feature confirmed="yes">
                <name>org.junit.internal.runners.MethodRoadie.MethodRoadie(java.lang.Object, org.junit.internal.runners.TestMethod, org.junit.runner.notification.RunNotifier, org.junit.runner.Description)</name>
                <outbound type="class" confirmed="no">java.lang.Object</outbound>
                <outbound type="feature" confirmed="no">java.lang.Object.Object()</outbound>
                <outbound type="feature" confirmed="yes">org.junit.internal.runners.MethodRoadie.fDescription</outbound>
                <outbound type="feature" confirmed="yes">org.junit.internal.runners.MethodRoadie.fNotifier</outbound>
                <outbound type="feature" confirmed="yes">org.junit.internal.runners.MethodRoadie.fTest</outbound>
                <outbound type="feature" confirmed="yes">org.junit.internal.runners.MethodRoadie.fTestMethod</outbound>
                <outbound type="class" confirmed="yes">org.junit.internal.runners.TestMethod</outbound>
                <outbound type="class" confirmed="yes">org.junit.runner.Description</outbound>
                <outbound type="class" confirmed="yes">org.junit.runner.notification.RunNotifier</outbound>
                <inbound type="feature" confirmed="yes">org.junit.internal.runners.JUnit4ClassRunner.invokeTestMethod(java.lang.reflect.Method, org.junit.runner.notification.RunNotifier)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.junit.internal.runners.MethodRoadie.addFailure(java.lang.Throwable)</name>
                <outbound type="class" confirmed="no">java.lang.Throwable</outbound>
                <outbound type="feature" confirmed="yes">org.junit.internal.runners.MethodRoadie.fDescription</outbound>
                <outbound type="feature" confirmed="yes">org.junit.internal.runners.MethodRoadie.fNotifier</outbound>
                <outbound type="class" confirmed="yes">org.junit.runner.Description</outbound>
                <outbound type="class" confirmed="yes">org.junit.runner.notification.Failure</outbound>
                <outbound type="feature" confirmed="yes">org.junit.runner.notification.Failure.Failure(org.junit.runner.Description, java.lang.Throwable)</outbound>
                <outbound type="class" confirmed="yes">org.junit.runner.notification.RunNotifier</outbound>
                <outbound type="feature" confirmed="yes">org.junit.runner.notification.RunNotifier.fireTestFailure(org.junit.runner.notification.Failure)</outbound>
                <inbound type="feature" confirmed="yes">org.junit.internal.runners.MethodRoadie$1.run()</inbound>
                <inbound type="feature" confirmed="yes">org.junit.internal.runners.MethodRoadie.runAfters()</inbound>
                <inbound type="feature" confirmed="yes">org.junit.internal.runners.MethodRoadie.runBefores()</inbound>
                <inbound type="feature" confirmed="yes">org.junit.internal.runners.MethodRoadie.runTestMethod()</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.junit.internal.runners.MethodRoadie.fDescription</name>
                <outbound type="class" confirmed="yes">org.junit.runner.Description</outbound>
                <inbound type="feature" confirmed="yes">org.junit.internal.runners.MethodRoadie.MethodRoadie(java.lang.Object, org.junit.internal.runners.TestMethod, org.junit.runner.notification.RunNotifier, org.junit.runner.Description)</inbound>
                <inbound type="feature" confirmed="yes">org.junit.internal.runners.MethodRoadie.addFailure(java.lang.Throwable)</inbound>
                <inbound type="feature" confirmed="yes">org.junit.internal.runners.MethodRoadie.run()</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.junit.internal.runners.MethodRoadie.fNotifier</name>
                <outbound type="class" confirmed="yes">org.junit.runner.notification.RunNotifier</outbound>
                <inbound type="feature" confirmed="yes">org.junit.internal.runners.MethodRoadie.MethodRoadie(java.lang.Object, org.junit.internal.runners.TestMethod, org.junit.runner.notification.RunNotifier, org.junit.runner.Description)</inbound>
                <inbound type="feature" confirmed="yes">org.junit.internal.runners.MethodRoadie.addFailure(java.lang.Throwable)</inbound>
                <inbound type="feature" confirmed="yes">org.junit.internal.runners.MethodRoadie.run()</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.junit.internal.runners.MethodRoadie.fTest</name>
                <outbound type="class" confirmed="no">java.lang.Object</outbound>
                <inbound type="feature" confirmed="yes">org.junit.internal.runners.MethodRoadie.MethodRoadie(java.lang.Object, org.junit.internal.runners.TestMethod, org.junit.runner.notification.RunNotifier, org.junit.runner.Description)</inbound>
                <inbound type="feature" confirmed="yes">org.junit.internal.runners.MethodRoadie.runAfters()</inbound>
                <inbound type="feature" confirmed="yes">org.junit.internal.runners.MethodRoadie.runBefores()</inbound>
                <inbound type="feature" confirmed="yes">org.junit.internal.runners.MethodRoadie.runTestMethod()</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.junit.internal.runners.MethodRoadie.fTestMethod</name>
                <outbound type="class" confirmed="yes">org.junit.internal.runners.TestMethod</outbound>
                <inbound type="feature" confirmed="yes">org.junit.internal.runners.MethodRoadie.MethodRoadie(java.lang.Object, org.junit.internal.runners.TestMethod, org.junit.runner.notification.RunNotifier, org.junit.runner.Description)</inbound>
                <inbound type="feature" confirmed="yes">org.junit.internal.runners.MethodRoadie.run()</inbound>
                <inbound type="feature" confirmed="yes">org.junit.internal.runners.MethodRoadie.runAfters()</inbound>
                <inbound type="feature" confirmed="yes">org.junit.internal.runners.MethodRoadie.runBefores()</inbound>
                <inbound type="feature" confirmed="yes">org.junit.internal.runners.MethodRoadie.runTestMethod()</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.junit.internal.runners.MethodRoadie.run()</name>
                <outbound type="feature" confirmed="yes">org.junit.internal.runners.MethodRoadie.fDescription</outbound>
                <outbound type="feature" confirmed="yes">org.junit.internal.runners.MethodRoadie.fNotifier</outbound>
                <outbound type="feature" confirmed="yes">org.junit.internal.runners.MethodRoadie.fTestMethod</outbound>
                <outbound type="feature" confirmed="yes">org.junit.internal.runners.MethodRoadie.runTest()</outbound>
                <outbound type="feature" confirmed="yes">org.junit.internal.runners.MethodRoadie.runWithTimeout(long)</outbound>
                <outbound type="class" confirmed="yes">org.junit.internal.runners.TestMethod</outbound>
                <outbound type="feature" confirmed="yes">org.junit.internal.runners.TestMethod.getTimeout()</outbound>
                <outbound type="feature" confirmed="yes">org.junit.internal.runners.TestMethod.isIgnored()</outbound>
                <outbound type="class" confirmed="yes">org.junit.runner.Description</outbound>
                <outbound type="class" confirmed="yes">org.junit.runner.notification.RunNotifier</outbound>
                <outbound type="feature" confirmed="yes">org.junit.runner.notification.RunNotifier.fireTestFinished(org.junit.runner.Description)</outbound>
                <outbound type="feature" confirmed="yes">org.junit.runner.notification.RunNotifier.fireTestIgnored(org.junit.runner.Description)</outbound>
                <outbound type="feature" confirmed="yes">org.junit.runner.notification.RunNotifier.fireTestStarted(org.junit.runner.Description)</outbound>
                <inbound type="feature" confirmed="yes">org.junit.internal.runners.JUnit4ClassRunner.invokeTestMethod(java.lang.reflect.Method, org.junit.runner.notification.RunNotifier)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.junit.internal.runners.MethodRoadie.runAfters()</name>
                <outbound type="class" confirmed="no">java.lang.Object</outbound>
                <outbound type="class" confirmed="no">java.lang.Throwable</outbound>
                <outbound type="class" confirmed="no">java.lang.reflect.InvocationTargetException</outbound>
                <outbound type="feature" confirmed="no">java.lang.reflect.InvocationTargetException.getTargetException()</outbound>
                <outbound type="class" confirmed="no">java.lang.reflect.Method</outbound>
                <outbound type="feature" confirmed="no">java.lang.reflect.Method.invoke(java.lang.Object, java.lang.Object[])</outbound>
                <outbound type="class" confirmed="no">java.util.Iterator</outbound>
                <outbound type="feature" confirmed="no">java.util.Iterator.hasNext()</outbound>
                <outbound type="feature" confirmed="no">java.util.Iterator.next()</outbound>
                <outbound type="class" confirmed="no">java.util.List</outbound>
                <outbound type="feature" confirmed="no">java.util.List.iterator()</outbound>
                <outbound type="feature" confirmed="yes">org.junit.internal.runners.MethodRoadie.addFailure(java.lang.Throwable)</outbound>
                <outbound type="feature" confirmed="yes">org.junit.internal.runners.MethodRoadie.fTest</outbound>
                <outbound type="feature" confirmed="yes">org.junit.internal.runners.MethodRoadie.fTestMethod</outbound>
                <outbound type="class" confirmed="yes">org.junit.internal.runners.TestMethod</outbound>
                <outbound type="feature" confirmed="yes">org.junit.internal.runners.TestMethod.getAfters()</outbound>
                <inbound type="feature" confirmed="yes">org.junit.internal.runners.MethodRoadie.runBeforesThenTestThenAfters(java.lang.Runnable)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.junit.internal.runners.MethodRoadie.runBefores()</name>
                <outbound type="class" confirmed="no">java.lang.Object</outbound>
                <outbound type="class" confirmed="no">java.lang.Throwable</outbound>
                <outbound type="class" confirmed="no">java.lang.reflect.InvocationTargetException</outbound>
                <outbound type="feature" confirmed="no">java.lang.reflect.InvocationTargetException.getTargetException()</outbound>
                <outbound type="class" confirmed="no">java.lang.reflect.Method</outbound>
                <outbound type="feature" confirmed="no">java.lang.reflect.Method.invoke(java.lang.Object, java.lang.Object[])</outbound>
                <outbound type="class" confirmed="no">java.util.Iterator</outbound>
                <outbound type="feature" confirmed="no">java.util.Iterator.hasNext()</outbound>
                <outbound type="feature" confirmed="no">java.util.Iterator.next()</outbound>
                <outbound type="class" confirmed="no">java.util.List</outbound>
                <outbound type="feature" confirmed="no">java.util.List.iterator()</outbound>
                <outbound type="class" confirmed="yes">org.junit.internal.AssumptionViolatedException</outbound>
                <outbound type="class" confirmed="yes">org.junit.internal.runners.FailedBefore</outbound>
                <outbound type="feature" confirmed="yes">org.junit.internal.runners.FailedBefore.FailedBefore()</outbound>
                <outbound type="feature" confirmed="yes">org.junit.internal.runners.MethodRoadie.addFailure(java.lang.Throwable)</outbound>
                <outbound type="feature" confirmed="yes">org.junit.internal.runners.MethodRoadie.fTest</outbound>
                <outbound type="feature" confirmed="yes">org.junit.internal.runners.MethodRoadie.fTestMethod</outbound>
                <outbound type="class" confirmed="yes">org.junit.internal.runners.TestMethod</outbound>
                <outbound type="feature" confirmed="yes">org.junit.internal.runners.TestMethod.getBefores()</outbound>
                <inbound type="feature" confirmed="yes">org.junit.internal.runners.MethodRoadie.runBeforesThenTestThenAfters(java.lang.Runnable)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.junit.internal.runners.MethodRoadie.runBeforesThenTestThenAfters(java.lang.Runnable)</name>
                <outbound type="class" confirmed="no">java.lang.Exception</outbound>
                <outbound type="class" confirmed="no">java.lang.Runnable</outbound>
                <outbound type="feature" confirmed="no">java.lang.Runnable.run()</outbound>
                <outbound type="feature" confirmed="no">java.lang.RuntimeException.RuntimeException(java.lang.String)</outbound>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="class" confirmed="yes">org.junit.internal.runners.FailedBefore</outbound>
                <outbound type="feature" confirmed="yes">org.junit.internal.runners.MethodRoadie.runAfters()</outbound>
                <outbound type="feature" confirmed="yes">org.junit.internal.runners.MethodRoadie.runBefores()</outbound>
                <inbound type="feature" confirmed="yes">org.junit.internal.runners.MethodRoadie.runTest()</inbound>
                <inbound type="feature" confirmed="yes">org.junit.internal.runners.MethodRoadie.runWithTimeout(long)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.junit.internal.runners.MethodRoadie.runTest()</name>
                <outbound type="class" confirmed="no">java.lang.Runnable</outbound>
                <outbound type="feature" confirmed="yes">org.junit.internal.runners.MethodRoadie$2.MethodRoadie$2(org.junit.internal.runners.MethodRoadie)</outbound>
                <outbound type="feature" confirmed="yes">org.junit.internal.runners.MethodRoadie.runBeforesThenTestThenAfters(java.lang.Runnable)</outbound>
                <inbound type="feature" confirmed="yes">org.junit.internal.runners.MethodRoadie.run()</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.junit.internal.runners.MethodRoadie.runTestMethod()</name>
                <outbound type="feature" confirmed="no">java.lang.AssertionError.AssertionError(java.lang.Object)</outbound>
                <outbound type="class" confirmed="no">java.lang.Class</outbound>
                <outbound type="feature" confirmed="no">java.lang.Class.getName()</outbound>
                <outbound type="feature" confirmed="no">java.lang.Exception.Exception(java.lang.String, java.lang.Throwable)</outbound>
                <outbound type="class" confirmed="no">java.lang.Object</outbound>
                <outbound type="feature" confirmed="no">java.lang.Object.getClass()</outbound>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="class" confirmed="no">java.lang.StringBuilder</outbound>
                <outbound type="feature" confirmed="no">java.lang.StringBuilder.StringBuilder()</outbound>
                <outbound type="feature" confirmed="no">java.lang.StringBuilder.append(java.lang.String)</outbound>
                <outbound type="feature" confirmed="no">java.lang.StringBuilder.toString()</outbound>
                <outbound type="class" confirmed="no">java.lang.Throwable</outbound>
                <outbound type="class" confirmed="no">java.lang.reflect.InvocationTargetException</outbound>
                <outbound type="feature" confirmed="no">java.lang.reflect.InvocationTargetException.getTargetException()</outbound>
                <outbound type="class" confirmed="yes">org.junit.internal.AssumptionViolatedException</outbound>
                <outbound type="feature" confirmed="yes">org.junit.internal.runners.MethodRoadie.addFailure(java.lang.Throwable)</outbound>
                <outbound type="feature" confirmed="yes">org.junit.internal.runners.MethodRoadie.fTest</outbound>
                <outbound type="feature" confirmed="yes">org.junit.internal.runners.MethodRoadie.fTestMethod</outbound>
                <outbound type="class" confirmed="yes">org.junit.internal.runners.TestMethod</outbound>
                <outbound type="feature" confirmed="yes">org.junit.internal.runners.TestMethod.expectsException()</outbound>
                <outbound type="feature" confirmed="yes">org.junit.internal.runners.TestMethod.getExpectedException()</outbound>
                <outbound type="feature" confirmed="yes">org.junit.internal.runners.TestMethod.invoke(java.lang.Object)</outbound>
                <outbound type="feature" confirmed="yes">org.junit.internal.runners.TestMethod.isUnexpected(java.lang.Throwable)</outbound>
                <inbound type="feature" confirmed="yes">org.junit.internal.runners.MethodRoadie$1$1.call()</inbound>
                <inbound type="feature" confirmed="yes">org.junit.internal.runners.MethodRoadie$2.run()</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.junit.internal.runners.MethodRoadie.runWithTimeout(long)</name>
                <outbound type="class" confirmed="no">java.lang.Runnable</outbound>
                <outbound type="feature" confirmed="yes">org.junit.internal.runners.MethodRoadie$1.MethodRoadie$1(org.junit.internal.runners.MethodRoadie, long)</outbound>
                <outbound type="feature" confirmed="yes">org.junit.internal.runners.MethodRoadie.runBeforesThenTestThenAfters(java.lang.Runnable)</outbound>
                <inbound type="feature" confirmed="yes">org.junit.internal.runners.MethodRoadie.run()</inbound>
            </feature>
        </class>
        <class confirmed="yes">
            <name>org.junit.internal.runners.MethodRoadie$1</name>
            <outbound type="class" confirmed="no">java.lang.Object</outbound>
            <outbound type="class" confirmed="no">java.lang.Runnable</outbound>
            <inbound type="feature" confirmed="yes">org.junit.internal.runners.MethodRoadie$1$1.MethodRoadie$1$1(org.junit.internal.runners.MethodRoadie$1)</inbound>
            <inbound type="feature" confirmed="yes">org.junit.internal.runners.MethodRoadie$1$1.call()</inbound>
            <inbound type="feature" confirmed="yes">org.junit.internal.runners.MethodRoadie$1$1.this$1</inbound>
            <feature confirmed="yes">
                <name>org.junit.internal.runners.MethodRoadie$1.MethodRoadie$1(org.junit.internal.runners.MethodRoadie, long)</name>
                <outbound type="feature" confirmed="no">java.lang.Object.Object()</outbound>
                <outbound type="class" confirmed="yes">org.junit.internal.runners.MethodRoadie</outbound>
                <outbound type="feature" confirmed="yes">org.junit.internal.runners.MethodRoadie$1.this$0</outbound>
                <outbound type="feature" confirmed="yes">org.junit.internal.runners.MethodRoadie$1.val$timeout</outbound>
                <inbound type="feature" confirmed="yes">org.junit.internal.runners.MethodRoadie.runWithTimeout(long)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.junit.internal.runners.MethodRoadie$1.run()</name>
                <outbound type="class" confirmed="no">java.lang.Exception</outbound>
                <outbound type="feature" confirmed="no">java.lang.Exception.Exception(java.lang.String)</outbound>
                <outbound type="class" confirmed="no">java.lang.Long</outbound>
                <outbound type="feature" confirmed="no">java.lang.Long.valueOf(long)</outbound>
                <outbound type="class" confirmed="no">java.lang.Object</outbound>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="feature" confirmed="no">java.lang.String.format(java.lang.String, java.lang.Object[])</outbound>
                <outbound type="class" confirmed="no">java.lang.Throwable</outbound>
                <outbound type="class" confirmed="no">java.util.List</outbound>
                <outbound type="class" confirmed="no">java.util.concurrent.Callable</outbound>
                <outbound type="class" confirmed="no">java.util.concurrent.ExecutorService</outbound>
                <outbound type="feature" confirmed="no">java.util.concurrent.ExecutorService.awaitTermination(long, java.util.concurrent.TimeUnit)</outbound>
                <outbound type="feature" confirmed="no">java.util.concurrent.ExecutorService.shutdown()</outbound>
                <outbound type="feature" confirmed="no">java.util.concurrent.ExecutorService.shutdownNow()</outbound>
                <outbound type="feature" confirmed="no">java.util.concurrent.ExecutorService.submit(java.util.concurrent.Callable)</outbound>
                <outbound type="feature" confirmed="no">java.util.concurrent.Executors.newSingleThreadExecutor()</outbound>
                <outbound type="class" confirmed="no">java.util.concurrent.Future</outbound>
                <outbound type="feature" confirmed="no">java.util.concurrent.Future.get(long, java.util.concurrent.TimeUnit)</outbound>
                <outbound type="class" confirmed="no">java.util.concurrent.TimeUnit</outbound>
                <outbound type="feature" confirmed="no">java.util.concurrent.TimeUnit.MILLISECONDS</outbound>
                <outbound type="class" confirmed="no">java.util.concurrent.TimeoutException</outbound>
                <outbound type="class" confirmed="yes">org.junit.internal.runners.MethodRoadie</outbound>
                <outbound type="feature" confirmed="yes">org.junit.internal.runners.MethodRoadie$1$1.MethodRoadie$1$1(org.junit.internal.runners.MethodRoadie$1)</outbound>
                <outbound type="feature" confirmed="yes">org.junit.internal.runners.MethodRoadie$1.this$0</outbound>
                <outbound type="feature" confirmed="yes">org.junit.internal.runners.MethodRoadie$1.val$timeout</outbound>
                <outbound type="feature" confirmed="yes">org.junit.internal.runners.MethodRoadie.addFailure(java.lang.Throwable)</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.junit.internal.runners.MethodRoadie$1.this$0</name>
                <outbound type="class" confirmed="yes">org.junit.internal.runners.MethodRoadie</outbound>
                <inbound type="feature" confirmed="yes">org.junit.internal.runners.MethodRoadie$1$1.call()</inbound>
                <inbound type="feature" confirmed="yes">org.junit.internal.runners.MethodRoadie$1.MethodRoadie$1(org.junit.internal.runners.MethodRoadie, long)</inbound>
                <inbound type="feature" confirmed="yes">org.junit.internal.runners.MethodRoadie$1.run()</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.junit.internal.runners.MethodRoadie$1.val$timeout</name>
                <inbound type="feature" confirmed="yes">org.junit.internal.runners.MethodRoadie$1.MethodRoadie$1(org.junit.internal.runners.MethodRoadie, long)</inbound>
                <inbound type="feature" confirmed="yes">org.junit.internal.runners.MethodRoadie$1.run()</inbound>
            </feature>
        </class>
        <class confirmed="yes">
            <name>org.junit.internal.runners.MethodRoadie$1$1</name>
            <outbound type="class" confirmed="no">java.lang.Object</outbound>
            <outbound type="class" confirmed="no">java.util.concurrent.Callable</outbound>
            <feature confirmed="yes">
                <name>org.junit.internal.runners.MethodRoadie$1$1.MethodRoadie$1$1(org.junit.internal.runners.MethodRoadie$1)</name>
                <outbound type="feature" confirmed="no">java.lang.Object.Object()</outbound>
                <outbound type="class" confirmed="yes">org.junit.internal.runners.MethodRoadie$1</outbound>
                <outbound type="feature" confirmed="yes">org.junit.internal.runners.MethodRoadie$1$1.this$1</outbound>
                <inbound type="feature" confirmed="yes">org.junit.internal.runners.MethodRoadie$1.run()</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.junit.internal.runners.MethodRoadie$1$1.call()</name>
                <outbound type="class" confirmed="no">java.lang.Exception</outbound>
                <outbound type="class" confirmed="no">java.lang.Object</outbound>
                <outbound type="class" confirmed="yes">org.junit.internal.runners.MethodRoadie</outbound>
                <outbound type="class" confirmed="yes">org.junit.internal.runners.MethodRoadie$1</outbound>
                <outbound type="feature" confirmed="yes">org.junit.internal.runners.MethodRoadie$1$1.this$1</outbound>
                <outbound type="feature" confirmed="yes">org.junit.internal.runners.MethodRoadie$1.this$0</outbound>
                <outbound type="feature" confirmed="yes">org.junit.internal.runners.MethodRoadie.runTestMethod()</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.junit.internal.runners.MethodRoadie$1$1.this$1</name>
                <outbound type="class" confirmed="yes">org.junit.internal.runners.MethodRoadie$1</outbound>
                <inbound type="feature" confirmed="yes">org.junit.internal.runners.MethodRoadie$1$1.MethodRoadie$1$1(org.junit.internal.runners.MethodRoadie$1)</inbound>
                <inbound type="feature" confirmed="yes">org.junit.internal.runners.MethodRoadie$1$1.call()</inbound>
            </feature>
        </class>
        <class confirmed="yes">
            <name>org.junit.internal.runners.MethodRoadie$2</name>
            <outbound type="class" confirmed="no">java.lang.Object</outbound>
            <outbound type="class" confirmed="no">java.lang.Runnable</outbound>
            <feature confirmed="yes">
                <name>org.junit.internal.runners.MethodRoadie$2.MethodRoadie$2(org.junit.internal.runners.MethodRoadie)</name>
                <outbound type="feature" confirmed="no">java.lang.Object.Object()</outbound>
                <outbound type="class" confirmed="yes">org.junit.internal.runners.MethodRoadie</outbound>
                <outbound type="feature" confirmed="yes">org.junit.internal.runners.MethodRoadie$2.this$0</outbound>
                <inbound type="feature" confirmed="yes">org.junit.internal.runners.MethodRoadie.runTest()</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.junit.internal.runners.MethodRoadie$2.run()</name>
                <outbound type="class" confirmed="yes">org.junit.internal.runners.MethodRoadie</outbound>
                <outbound type="feature" confirmed="yes">org.junit.internal.runners.MethodRoadie$2.this$0</outbound>
                <outbound type="feature" confirmed="yes">org.junit.internal.runners.MethodRoadie.runTestMethod()</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.junit.internal.runners.MethodRoadie$2.this$0</name>
                <outbound type="class" confirmed="yes">org.junit.internal.runners.MethodRoadie</outbound>
                <inbound type="feature" confirmed="yes">org.junit.internal.runners.MethodRoadie$2.MethodRoadie$2(org.junit.internal.runners.MethodRoadie)</inbound>
                <inbound type="feature" confirmed="yes">org.junit.internal.runners.MethodRoadie$2.run()</inbound>
            </feature>
        </class>
        <class confirmed="yes">
            <name>org.junit.internal.runners.MethodValidator</name>
            <outbound type="class" confirmed="no">java.lang.Object</outbound>
            <feature confirmed="yes">
                <name>org.junit.internal.runners.MethodValidator.MethodValidator(org.junit.internal.runners.TestClass)</name>
                <outbound type="feature" confirmed="no">java.lang.Object.Object()</outbound>
                <outbound type="feature" confirmed="no">java.util.ArrayList.ArrayList()</outbound>
                <outbound type="class" confirmed="no">java.util.List</outbound>
                <outbound type="feature" confirmed="yes">org.junit.internal.runners.MethodValidator.fErrors</outbound>
                <outbound type="feature" confirmed="yes">org.junit.internal.runners.MethodValidator.fTestClass</outbound>
                <outbound type="class" confirmed="yes">org.junit.internal.runners.TestClass</outbound>
                <inbound type="feature" confirmed="yes">org.junit.internal.runners.JUnit4ClassRunner.validate()</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.junit.internal.runners.MethodValidator.assertValid()</name>
                <outbound type="class" confirmed="no">java.util.List</outbound>
                <outbound type="feature" confirmed="no">java.util.List.isEmpty()</outbound>
                <outbound type="class" confirmed="yes">org.junit.internal.runners.InitializationError</outbound>
                <outbound type="feature" confirmed="yes">org.junit.internal.runners.InitializationError.InitializationError(java.util.List)</outbound>
                <outbound type="feature" confirmed="yes">org.junit.internal.runners.MethodValidator.fErrors</outbound>
                <inbound type="feature" confirmed="yes">org.junit.internal.runners.JUnit4ClassRunner.validate()</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.junit.internal.runners.MethodValidator.fErrors</name>
                <outbound type="class" confirmed="no">java.util.List</outbound>
                <inbound type="feature" confirmed="yes">org.junit.internal.runners.MethodValidator.MethodValidator(org.junit.internal.runners.TestClass)</inbound>
                <inbound type="feature" confirmed="yes">org.junit.internal.runners.MethodValidator.assertValid()</inbound>
                <inbound type="feature" confirmed="yes">org.junit.internal.runners.MethodValidator.validateInstanceMethods()</inbound>
                <inbound type="feature" confirmed="yes">org.junit.internal.runners.MethodValidator.validateMethodsForDefaultRunner()</inbound>
                <inbound type="feature" confirmed="yes">org.junit.internal.runners.MethodValidator.validateNoArgConstructor()</inbound>
                <inbound type="feature" confirmed="yes">org.junit.internal.runners.MethodValidator.validateTestMethods(java.lang.Class, boolean)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.junit.internal.runners.MethodValidator.fTestClass</name>
                <outbound type="class" confirmed="yes">org.junit.internal.runners.TestClass</outbound>
                <inbound type="feature" confirmed="yes">org.junit.internal.runners.MethodValidator.MethodValidator(org.junit.internal.runners.TestClass)</inbound>
                <inbound type="feature" confirmed="yes">org.junit.internal.runners.MethodValidator.validateInstanceMethods()</inbound>
                <inbound type="feature" confirmed="yes">org.junit.internal.runners.MethodValidator.validateNoArgConstructor()</inbound>
                <inbound type="feature" confirmed="yes">org.junit.internal.runners.MethodValidator.validateTestMethods(java.lang.Class, boolean)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.junit.internal.runners.MethodValidator.validateInstanceMethods()</name>
                <outbound type="class" confirmed="no">java.lang.Class</outbound>
                <outbound type="feature" confirmed="no">java.lang.Exception.Exception(java.lang.String)</outbound>
                <outbound type="class" confirmed="no">java.lang.Object</outbound>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="class" confirmed="no">java.util.List</outbound>
                <outbound type="feature" confirmed="no">java.util.List.add(java.lang.Object)</outbound>
                <outbound type="feature" confirmed="no">java.util.List.size()</outbound>
                <outbound type="class" confirmed="yes">org.junit.After</outbound>
                <outbound type="class" confirmed="yes">org.junit.Before</outbound>
                <outbound type="class" confirmed="yes">org.junit.Test</outbound>
                <outbound type="feature" confirmed="yes">org.junit.internal.runners.MethodValidator.fErrors</outbound>
                <outbound type="feature" confirmed="yes">org.junit.internal.runners.MethodValidator.fTestClass</outbound>
                <outbound type="feature" confirmed="yes">org.junit.internal.runners.MethodValidator.validateTestMethods(java.lang.Class, boolean)</outbound>
                <outbound type="class" confirmed="yes">org.junit.internal.runners.TestClass</outbound>
                <outbound type="feature" confirmed="yes">org.junit.internal.runners.TestClass.getAnnotatedMethods(java.lang.Class)</outbound>
                <inbound type="feature" confirmed="yes">org.junit.internal.runners.MethodValidator.validateMethodsForDefaultRunner()</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.junit.internal.runners.MethodValidator.validateMethodsForDefaultRunner()</name>
                <outbound type="class" confirmed="no">java.util.List</outbound>
                <outbound type="feature" confirmed="yes">org.junit.internal.runners.MethodValidator.fErrors</outbound>
                <outbound type="feature" confirmed="yes">org.junit.internal.runners.MethodValidator.validateInstanceMethods()</outbound>
                <outbound type="feature" confirmed="yes">org.junit.internal.runners.MethodValidator.validateNoArgConstructor()</outbound>
                <outbound type="feature" confirmed="yes">org.junit.internal.runners.MethodValidator.validateStaticMethods()</outbound>
                <inbound type="feature" confirmed="yes">org.junit.internal.runners.JUnit4ClassRunner.validate()</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.junit.internal.runners.MethodValidator.validateNoArgConstructor()</name>
                <outbound type="class" confirmed="no">java.lang.Exception</outbound>
                <outbound type="feature" confirmed="no">java.lang.Exception.Exception(java.lang.String, java.lang.Throwable)</outbound>
                <outbound type="class" confirmed="no">java.lang.Object</outbound>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="class" confirmed="no">java.lang.Throwable</outbound>
                <outbound type="class" confirmed="no">java.lang.reflect.Constructor</outbound>
                <outbound type="class" confirmed="no">java.util.List</outbound>
                <outbound type="feature" confirmed="no">java.util.List.add(java.lang.Object)</outbound>
                <outbound type="feature" confirmed="yes">org.junit.internal.runners.MethodValidator.fErrors</outbound>
                <outbound type="feature" confirmed="yes">org.junit.internal.runners.MethodValidator.fTestClass</outbound>
                <outbound type="class" confirmed="yes">org.junit.internal.runners.TestClass</outbound>
                <outbound type="feature" confirmed="yes">org.junit.internal.runners.TestClass.getConstructor()</outbound>
                <inbound type="feature" confirmed="yes">org.junit.internal.runners.MethodValidator.validateMethodsForDefaultRunner()</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.junit.internal.runners.MethodValidator.validateStaticMethods()</name>
                <outbound type="class" confirmed="no">java.lang.Class</outbound>
                <outbound type="class" confirmed="yes">org.junit.AfterClass</outbound>
                <outbound type="class" confirmed="yes">org.junit.BeforeClass</outbound>
                <outbound type="feature" confirmed="yes">org.junit.internal.runners.MethodValidator.validateTestMethods(java.lang.Class, boolean)</outbound>
                <inbound type="feature" confirmed="yes">org.junit.internal.runners.MethodValidator.validateMethodsForDefaultRunner()</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.junit.internal.runners.MethodValidator.validateTestMethods(java.lang.Class, boolean)</name>
                <outbound type="class" confirmed="no">java.lang.Class</outbound>
                <outbound type="feature" confirmed="no">java.lang.Class.getModifiers()</outbound>
                <outbound type="feature" confirmed="no">java.lang.Class.getName()</outbound>
                <outbound type="feature" confirmed="no">java.lang.Exception.Exception(java.lang.String)</outbound>
                <outbound type="class" confirmed="no">java.lang.Object</outbound>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="class" confirmed="no">java.lang.StringBuilder</outbound>
                <outbound type="feature" confirmed="no">java.lang.StringBuilder.StringBuilder()</outbound>
                <outbound type="feature" confirmed="no">java.lang.StringBuilder.append(java.lang.String)</outbound>
                <outbound type="feature" confirmed="no">java.lang.StringBuilder.toString()</outbound>
                <outbound type="feature" confirmed="no">java.lang.Void.TYPE</outbound>
                <outbound type="class" confirmed="no">java.lang.reflect.Method</outbound>
                <outbound type="feature" confirmed="no">java.lang.reflect.Method.getDeclaringClass()</outbound>
                <outbound type="feature" confirmed="no">java.lang.reflect.Method.getModifiers()</outbound>
                <outbound type="feature" confirmed="no">java.lang.reflect.Method.getName()</outbound>
                <outbound type="feature" confirmed="no">java.lang.reflect.Method.getParameterTypes()</outbound>
                <outbound type="feature" confirmed="no">java.lang.reflect.Method.getReturnType()</outbound>
                <outbound type="feature" confirmed="no">java.lang.reflect.Modifier.isPublic(int)</outbound>
                <outbound type="feature" confirmed="no">java.lang.reflect.Modifier.isStatic(int)</outbound>
                <outbound type="class" confirmed="no">java.util.Iterator</outbound>
                <outbound type="feature" confirmed="no">java.util.Iterator.hasNext()</outbound>
                <outbound type="feature" confirmed="no">java.util.Iterator.next()</outbound>
                <outbound type="class" confirmed="no">java.util.List</outbound>
                <outbound type="feature" confirmed="no">java.util.List.add(java.lang.Object)</outbound>
                <outbound type="feature" confirmed="no">java.util.List.iterator()</outbound>
                <outbound type="feature" confirmed="yes">org.junit.internal.runners.MethodValidator.fErrors</outbound>
                <outbound type="feature" confirmed="yes">org.junit.internal.runners.MethodValidator.fTestClass</outbound>
                <outbound type="class" confirmed="yes">org.junit.internal.runners.TestClass</outbound>
                <outbound type="feature" confirmed="yes">org.junit.internal.runners.TestClass.getAnnotatedMethods(java.lang.Class)</outbound>
                <inbound type="feature" confirmed="yes">org.junit.internal.runners.MethodValidator.validateInstanceMethods()</inbound>
                <inbound type="feature" confirmed="yes">org.junit.internal.runners.MethodValidator.validateStaticMethods()</inbound>
            </feature>
        </class>
        <class confirmed="yes">
            <name>org.junit.internal.runners.SuiteMethod</name>
            <outbound type="class" confirmed="yes">org.junit.internal.runners.JUnit38ClassRunner</outbound>
            <inbound type="class" confirmed="yes">org.junit.runners.AllTests</inbound>
            <feature confirmed="yes">
                <name>org.junit.internal.runners.SuiteMethod.SuiteMethod(java.lang.Class)</name>
                <outbound type="class" confirmed="no">java.lang.Class</outbound>
                <outbound type="class" confirmed="no">java.lang.Throwable</outbound>
                <outbound type="class" confirmed="yes">junit.framework.Test</outbound>
                <outbound type="feature" confirmed="yes">org.junit.internal.runners.JUnit38ClassRunner.JUnit38ClassRunner(junit.framework.Test)</outbound>
                <outbound type="feature" confirmed="yes">org.junit.internal.runners.SuiteMethod.testFromSuiteMethod(java.lang.Class)</outbound>
                <inbound type="feature" confirmed="yes">org.junit.internal.builders.SuiteMethodBuilder.runnerForClass(java.lang.Class)</inbound>
                <inbound type="feature" confirmed="yes">org.junit.runners.AllTests.AllTests(java.lang.Class)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.junit.internal.runners.SuiteMethod.testFromSuiteMethod(java.lang.Class)</name>
                <outbound type="class" confirmed="no">java.lang.Class</outbound>
                <outbound type="feature" confirmed="no">java.lang.Class.getMethod(java.lang.String, java.lang.Class[])</outbound>
                <outbound type="feature" confirmed="no">java.lang.Class.getName()</outbound>
                <outbound type="feature" confirmed="no">java.lang.Exception.Exception(java.lang.String)</outbound>
                <outbound type="class" confirmed="no">java.lang.Object</outbound>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="class" confirmed="no">java.lang.StringBuilder</outbound>
                <outbound type="feature" confirmed="no">java.lang.StringBuilder.StringBuilder()</outbound>
                <outbound type="feature" confirmed="no">java.lang.StringBuilder.append(java.lang.String)</outbound>
                <outbound type="feature" confirmed="no">java.lang.StringBuilder.toString()</outbound>
                <outbound type="class" confirmed="no">java.lang.Throwable</outbound>
                <outbound type="class" confirmed="no">java.lang.reflect.InvocationTargetException</outbound>
                <outbound type="feature" confirmed="no">java.lang.reflect.InvocationTargetException.getCause()</outbound>
                <outbound type="class" confirmed="no">java.lang.reflect.Method</outbound>
                <outbound type="feature" confirmed="no">java.lang.reflect.Method.getModifiers()</outbound>
                <outbound type="feature" confirmed="no">java.lang.reflect.Method.invoke(java.lang.Object, java.lang.Object[])</outbound>
                <outbound type="feature" confirmed="no">java.lang.reflect.Modifier.isStatic(int)</outbound>
                <outbound type="class" confirmed="yes">junit.framework.Test</outbound>
                <inbound type="feature" confirmed="yes">org.junit.internal.runners.SuiteMethod.SuiteMethod(java.lang.Class)</inbound>
            </feature>
        </class>
        <class confirmed="yes">
            <name>org.junit.internal.runners.TestClass</name>
            <outbound type="class" confirmed="no">java.lang.Object</outbound>
            <inbound type="feature" confirmed="yes">org.junit.internal.runners.ClassRoadie.ClassRoadie(org.junit.runner.notification.RunNotifier, org.junit.internal.runners.TestClass, org.junit.runner.Description, java.lang.Runnable)</inbound>
            <inbound type="feature" confirmed="yes">org.junit.internal.runners.ClassRoadie.fTestClass</inbound>
            <inbound type="feature" confirmed="yes">org.junit.internal.runners.ClassRoadie.runAfters()</inbound>
            <inbound type="feature" confirmed="yes">org.junit.internal.runners.ClassRoadie.runBefores()</inbound>
            <inbound type="feature" confirmed="yes">org.junit.internal.runners.JUnit4ClassRunner.JUnit4ClassRunner(java.lang.Class)</inbound>
            <inbound type="feature" confirmed="yes">org.junit.internal.runners.JUnit4ClassRunner.classAnnotations()</inbound>
            <inbound type="feature" confirmed="yes">org.junit.internal.runners.JUnit4ClassRunner.createTest()</inbound>
            <inbound type="feature" confirmed="yes">org.junit.internal.runners.JUnit4ClassRunner.fTestClass</inbound>
            <inbound type="feature" confirmed="yes">org.junit.internal.runners.JUnit4ClassRunner.getName()</inbound>
            <inbound type="feature" confirmed="yes">org.junit.internal.runners.JUnit4ClassRunner.getTestClass()</inbound>
            <inbound type="feature" confirmed="yes">org.junit.internal.runners.JUnit4ClassRunner.getTestMethods()</inbound>
            <inbound type="feature" confirmed="yes">org.junit.internal.runners.JUnit4ClassRunner.methodDescription(java.lang.reflect.Method)</inbound>
            <inbound type="feature" confirmed="yes">org.junit.internal.runners.JUnit4ClassRunner.run(org.junit.runner.notification.RunNotifier)</inbound>
            <inbound type="feature" confirmed="yes">org.junit.internal.runners.JUnit4ClassRunner.validate()</inbound>
            <inbound type="feature" confirmed="yes">org.junit.internal.runners.JUnit4ClassRunner.wrapMethod(java.lang.reflect.Method)</inbound>
            <inbound type="feature" confirmed="yes">org.junit.internal.runners.MethodValidator.MethodValidator(org.junit.internal.runners.TestClass)</inbound>
            <inbound type="feature" confirmed="yes">org.junit.internal.runners.MethodValidator.fTestClass</inbound>
            <inbound type="feature" confirmed="yes">org.junit.internal.runners.MethodValidator.validateInstanceMethods()</inbound>
            <inbound type="feature" confirmed="yes">org.junit.internal.runners.MethodValidator.validateNoArgConstructor()</inbound>
            <inbound type="feature" confirmed="yes">org.junit.internal.runners.MethodValidator.validateTestMethods(java.lang.Class, boolean)</inbound>
            <inbound type="feature" confirmed="yes">org.junit.internal.runners.TestMethod.TestMethod(java.lang.reflect.Method, org.junit.internal.runners.TestClass)</inbound>
            <inbound type="feature" confirmed="yes">org.junit.internal.runners.TestMethod.fTestClass</inbound>
            <inbound type="feature" confirmed="yes">org.junit.internal.runners.TestMethod.getAfters()</inbound>
            <inbound type="feature" confirmed="yes">org.junit.internal.runners.TestMethod.getBefores()</inbound>
            <feature confirmed="yes">
                <name>org.junit.internal.runners.TestClass.TestClass(java.lang.Class)</name>
                <outbound type="class" confirmed="no">java.lang.Class</outbound>
                <outbound type="feature" confirmed="no">java.lang.Object.Object()</outbound>
                <outbound type="feature" confirmed="yes">org.junit.internal.runners.TestClass.fClass</outbound>
                <inbound type="feature" confirmed="yes">org.junit.internal.runners.JUnit4ClassRunner.JUnit4ClassRunner(java.lang.Class)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.junit.internal.runners.TestClass.fClass</name>
                <outbound type="class" confirmed="no">java.lang.Class</outbound>
                <inbound type="feature" confirmed="yes">org.junit.internal.runners.TestClass.TestClass(java.lang.Class)</inbound>
                <inbound type="feature" confirmed="yes">org.junit.internal.runners.TestClass.getAnnotatedMethods(java.lang.Class)</inbound>
                <inbound type="feature" confirmed="yes">org.junit.internal.runners.TestClass.getConstructor()</inbound>
                <inbound type="feature" confirmed="yes">org.junit.internal.runners.TestClass.getJavaClass()</inbound>
                <inbound type="feature" confirmed="yes">org.junit.internal.runners.TestClass.getName()</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.junit.internal.runners.TestClass.getAfters()</name>
                <outbound type="class" confirmed="no">java.lang.Class</outbound>
                <outbound type="class" confirmed="no">java.util.List</outbound>
                <outbound type="class" confirmed="yes">org.junit.AfterClass</outbound>
                <outbound type="feature" confirmed="yes">org.junit.internal.runners.TestClass.getAnnotatedMethods(java.lang.Class)</outbound>
                <inbound type="feature" confirmed="yes">org.junit.internal.runners.ClassRoadie.runAfters()</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.junit.internal.runners.TestClass.getAnnotatedMethods(java.lang.Class)</name>
                <outbound type="class" confirmed="no">java.lang.Class</outbound>
                <outbound type="feature" confirmed="no">java.lang.Class.getDeclaredMethods()</outbound>
                <outbound type="class" confirmed="no">java.lang.Object</outbound>
                <outbound type="class" confirmed="no">java.lang.annotation.Annotation</outbound>
                <outbound type="class" confirmed="no">java.lang.reflect.Method</outbound>
                <outbound type="feature" confirmed="no">java.lang.reflect.Method.getAnnotation(java.lang.Class)</outbound>
                <outbound type="feature" confirmed="no">java.util.ArrayList.ArrayList()</outbound>
                <outbound type="feature" confirmed="no">java.util.Collections.reverse(java.util.List)</outbound>
                <outbound type="class" confirmed="no">java.util.Iterator</outbound>
                <outbound type="feature" confirmed="no">java.util.Iterator.hasNext()</outbound>
                <outbound type="feature" confirmed="no">java.util.Iterator.next()</outbound>
                <outbound type="class" confirmed="no">java.util.List</outbound>
                <outbound type="feature" confirmed="no">java.util.List.add(java.lang.Object)</outbound>
                <outbound type="feature" confirmed="no">java.util.List.iterator()</outbound>
                <outbound type="feature" confirmed="yes">org.junit.internal.runners.TestClass.fClass</outbound>
                <outbound type="feature" confirmed="yes">org.junit.internal.runners.TestClass.getSuperClasses(java.lang.Class)</outbound>
                <outbound type="feature" confirmed="yes">org.junit.internal.runners.TestClass.isShadowed(java.lang.reflect.Method, java.util.List)</outbound>
                <outbound type="feature" confirmed="yes">org.junit.internal.runners.TestClass.runsTopToBottom(java.lang.Class)</outbound>
                <inbound type="feature" confirmed="yes">org.junit.internal.runners.MethodValidator.validateInstanceMethods()</inbound>
                <inbound type="feature" confirmed="yes">org.junit.internal.runners.MethodValidator.validateTestMethods(java.lang.Class, boolean)</inbound>
                <inbound type="feature" confirmed="yes">org.junit.internal.runners.TestClass.getAfters()</inbound>
                <inbound type="feature" confirmed="yes">org.junit.internal.runners.TestClass.getBefores()</inbound>
                <inbound type="feature" confirmed="yes">org.junit.internal.runners.TestClass.getTestMethods()</inbound>
                <inbound type="feature" confirmed="yes">org.junit.internal.runners.TestMethod.getAfters()</inbound>
                <inbound type="feature" confirmed="yes">org.junit.internal.runners.TestMethod.getBefores()</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.junit.internal.runners.TestClass.getBefores()</name>
                <outbound type="class" confirmed="no">java.lang.Class</outbound>
                <outbound type="class" confirmed="no">java.util.List</outbound>
                <outbound type="class" confirmed="yes">org.junit.BeforeClass</outbound>
                <outbound type="feature" confirmed="yes">org.junit.internal.runners.TestClass.getAnnotatedMethods(java.lang.Class)</outbound>
                <inbound type="feature" confirmed="yes">org.junit.internal.runners.ClassRoadie.runBefores()</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.junit.internal.runners.TestClass.getConstructor()</name>
                <outbound type="class" confirmed="no">java.lang.Class</outbound>
                <outbound type="feature" confirmed="no">java.lang.Class.getConstructor(java.lang.Class[])</outbound>
                <outbound type="class" confirmed="no">java.lang.NoSuchMethodException</outbound>
                <outbound type="class" confirmed="no">java.lang.SecurityException</outbound>
                <outbound type="class" confirmed="no">java.lang.reflect.Constructor</outbound>
                <outbound type="feature" confirmed="yes">org.junit.internal.runners.TestClass.fClass</outbound>
                <inbound type="feature" confirmed="yes">org.junit.internal.runners.JUnit4ClassRunner.createTest()</inbound>
                <inbound type="feature" confirmed="yes">org.junit.internal.runners.MethodValidator.validateNoArgConstructor()</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.junit.internal.runners.TestClass.getJavaClass()</name>
                <outbound type="class" confirmed="no">java.lang.Class</outbound>
                <outbound type="feature" confirmed="yes">org.junit.internal.runners.TestClass.fClass</outbound>
                <inbound type="feature" confirmed="yes">org.junit.internal.runners.JUnit4ClassRunner.classAnnotations()</inbound>
                <inbound type="feature" confirmed="yes">org.junit.internal.runners.JUnit4ClassRunner.methodDescription(java.lang.reflect.Method)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.junit.internal.runners.TestClass.getName()</name>
                <outbound type="class" confirmed="no">java.lang.Class</outbound>
                <outbound type="feature" confirmed="no">java.lang.Class.getName()</outbound>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="feature" confirmed="yes">org.junit.internal.runners.TestClass.fClass</outbound>
                <inbound type="feature" confirmed="yes">org.junit.internal.runners.JUnit4ClassRunner.getName()</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.junit.internal.runners.TestClass.getSuperClasses(java.lang.Class)</name>
                <outbound type="class" confirmed="no">java.lang.Class</outbound>
                <outbound type="feature" confirmed="no">java.lang.Class.getSuperclass()</outbound>
                <outbound type="class" confirmed="no">java.lang.Object</outbound>
                <outbound type="feature" confirmed="no">java.util.ArrayList.ArrayList()</outbound>
                <outbound type="feature" confirmed="no">java.util.ArrayList.add(java.lang.Object)</outbound>
                <outbound type="class" confirmed="no">java.util.List</outbound>
                <inbound type="feature" confirmed="yes">org.junit.internal.runners.TestClass.getAnnotatedMethods(java.lang.Class)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.junit.internal.runners.TestClass.getTestMethods()</name>
                <outbound type="class" confirmed="no">java.lang.Class</outbound>
                <outbound type="class" confirmed="no">java.util.List</outbound>
                <outbound type="class" confirmed="yes">org.junit.Test</outbound>
                <outbound type="feature" confirmed="yes">org.junit.internal.runners.TestClass.getAnnotatedMethods(java.lang.Class)</outbound>
                <inbound type="feature" confirmed="yes">org.junit.internal.runners.JUnit4ClassRunner.getTestMethods()</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.junit.internal.runners.TestClass.isShadowed(java.lang.reflect.Method, java.lang.reflect.Method)</name>
                <outbound type="class" confirmed="no">java.lang.Class</outbound>
                <outbound type="class" confirmed="no">java.lang.Object</outbound>
                <outbound type="feature" confirmed="no">java.lang.Object.equals(java.lang.Object)</outbound>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="feature" confirmed="no">java.lang.String.equals(java.lang.Object)</outbound>
                <outbound type="class" confirmed="no">java.lang.reflect.Method</outbound>
                <outbound type="feature" confirmed="no">java.lang.reflect.Method.getName()</outbound>
                <outbound type="feature" confirmed="no">java.lang.reflect.Method.getParameterTypes()</outbound>
                <inbound type="feature" confirmed="yes">org.junit.internal.runners.TestClass.isShadowed(java.lang.reflect.Method, java.util.List)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.junit.internal.runners.TestClass.isShadowed(java.lang.reflect.Method, java.util.List)</name>
                <outbound type="class" confirmed="no">java.lang.Object</outbound>
                <outbound type="class" confirmed="no">java.lang.reflect.Method</outbound>
                <outbound type="class" confirmed="no">java.util.Iterator</outbound>
                <outbound type="feature" confirmed="no">java.util.Iterator.hasNext()</outbound>
                <outbound type="feature" confirmed="no">java.util.Iterator.next()</outbound>
                <outbound type="class" confirmed="no">java.util.List</outbound>
                <outbound type="feature" confirmed="no">java.util.List.iterator()</outbound>
                <outbound type="feature" confirmed="yes">org.junit.internal.runners.TestClass.isShadowed(java.lang.reflect.Method, java.lang.reflect.Method)</outbound>
                <inbound type="feature" confirmed="yes">org.junit.internal.runners.TestClass.getAnnotatedMethods(java.lang.Class)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.junit.internal.runners.TestClass.runsTopToBottom(java.lang.Class)</name>
                <outbound type="class" confirmed="no">java.lang.Class</outbound>
                <outbound type="class" confirmed="no">java.lang.Object</outbound>
                <outbound type="feature" confirmed="no">java.lang.Object.equals(java.lang.Object)</outbound>
                <outbound type="class" confirmed="yes">org.junit.Before</outbound>
                <outbound type="class" confirmed="yes">org.junit.BeforeClass</outbound>
                <inbound type="feature" confirmed="yes">org.junit.internal.runners.TestClass.getAnnotatedMethods(java.lang.Class)</inbound>
            </feature>
        </class>
        <class confirmed="yes">
            <name>org.junit.internal.runners.TestMethod</name>
            <outbound type="class" confirmed="no">java.lang.Object</outbound>
            <inbound type="feature" confirmed="yes">org.junit.internal.runners.JUnit4ClassRunner.invokeTestMethod(java.lang.reflect.Method, org.junit.runner.notification.RunNotifier)</inbound>
            <inbound type="feature" confirmed="yes">org.junit.internal.runners.JUnit4ClassRunner.wrapMethod(java.lang.reflect.Method)</inbound>
            <inbound type="feature" confirmed="yes">org.junit.internal.runners.MethodRoadie.MethodRoadie(java.lang.Object, org.junit.internal.runners.TestMethod, org.junit.runner.notification.RunNotifier, org.junit.runner.Description)</inbound>
            <inbound type="feature" confirmed="yes">org.junit.internal.runners.MethodRoadie.fTestMethod</inbound>
            <inbound type="feature" confirmed="yes">org.junit.internal.runners.MethodRoadie.run()</inbound>
            <inbound type="feature" confirmed="yes">org.junit.internal.runners.MethodRoadie.runAfters()</inbound>
            <inbound type="feature" confirmed="yes">org.junit.internal.runners.MethodRoadie.runBefores()</inbound>
            <inbound type="feature" confirmed="yes">org.junit.internal.runners.MethodRoadie.runTestMethod()</inbound>
            <feature confirmed="yes">
                <name>org.junit.internal.runners.TestMethod.TestMethod(java.lang.reflect.Method, org.junit.internal.runners.TestClass)</name>
                <outbound type="feature" confirmed="no">java.lang.Object.Object()</outbound>
                <outbound type="class" confirmed="no">java.lang.reflect.Method</outbound>
                <outbound type="class" confirmed="yes">org.junit.internal.runners.TestClass</outbound>
                <outbound type="feature" confirmed="yes">org.junit.internal.runners.TestMethod.fMethod</outbound>
                <outbound type="feature" confirmed="yes">org.junit.internal.runners.TestMethod.fTestClass</outbound>
                <inbound type="feature" confirmed="yes">org.junit.internal.runners.JUnit4ClassRunner.wrapMethod(java.lang.reflect.Method)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.junit.internal.runners.TestMethod.expectsException()</name>
                <outbound type="class" confirmed="no">java.lang.Class</outbound>
                <outbound type="feature" confirmed="yes">org.junit.internal.runners.TestMethod.getExpectedException()</outbound>
                <inbound type="feature" confirmed="yes">org.junit.internal.runners.MethodRoadie.runTestMethod()</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.junit.internal.runners.TestMethod.fMethod</name>
                <outbound type="class" confirmed="no">java.lang.reflect.Method</outbound>
                <inbound type="feature" confirmed="yes">org.junit.internal.runners.TestMethod.TestMethod(java.lang.reflect.Method, org.junit.internal.runners.TestClass)</inbound>
                <inbound type="feature" confirmed="yes">org.junit.internal.runners.TestMethod.getExpectedException()</inbound>
                <inbound type="feature" confirmed="yes">org.junit.internal.runners.TestMethod.getTimeout()</inbound>
                <inbound type="feature" confirmed="yes">org.junit.internal.runners.TestMethod.invoke(java.lang.Object)</inbound>
                <inbound type="feature" confirmed="yes">org.junit.internal.runners.TestMethod.isIgnored()</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.junit.internal.runners.TestMethod.fTestClass</name>
                <outbound type="class" confirmed="yes">org.junit.internal.runners.TestClass</outbound>
                <inbound type="feature" confirmed="yes">org.junit.internal.runners.TestMethod.TestMethod(java.lang.reflect.Method, org.junit.internal.runners.TestClass)</inbound>
                <inbound type="feature" confirmed="yes">org.junit.internal.runners.TestMethod.getAfters()</inbound>
                <inbound type="feature" confirmed="yes">org.junit.internal.runners.TestMethod.getBefores()</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.junit.internal.runners.TestMethod.getAfters()</name>
                <outbound type="class" confirmed="no">java.lang.Class</outbound>
                <outbound type="class" confirmed="no">java.util.List</outbound>
                <outbound type="class" confirmed="yes">org.junit.After</outbound>
                <outbound type="class" confirmed="yes">org.junit.internal.runners.TestClass</outbound>
                <outbound type="feature" confirmed="yes">org.junit.internal.runners.TestClass.getAnnotatedMethods(java.lang.Class)</outbound>
                <outbound type="feature" confirmed="yes">org.junit.internal.runners.TestMethod.fTestClass</outbound>
                <inbound type="feature" confirmed="yes">org.junit.internal.runners.MethodRoadie.runAfters()</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.junit.internal.runners.TestMethod.getBefores()</name>
                <outbound type="class" confirmed="no">java.lang.Class</outbound>
                <outbound type="class" confirmed="no">java.util.List</outbound>
                <outbound type="class" confirmed="yes">org.junit.Before</outbound>
                <outbound type="class" confirmed="yes">org.junit.internal.runners.TestClass</outbound>
                <outbound type="feature" confirmed="yes">org.junit.internal.runners.TestClass.getAnnotatedMethods(java.lang.Class)</outbound>
                <outbound type="feature" confirmed="yes">org.junit.internal.runners.TestMethod.fTestClass</outbound>
                <inbound type="feature" confirmed="yes">org.junit.internal.runners.MethodRoadie.runBefores()</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.junit.internal.runners.TestMethod.getExpectedException()</name>
                <outbound type="class" confirmed="no">java.lang.Class</outbound>
                <outbound type="class" confirmed="no">java.lang.annotation.Annotation</outbound>
                <outbound type="class" confirmed="no">java.lang.reflect.Method</outbound>
                <outbound type="feature" confirmed="no">java.lang.reflect.Method.getAnnotation(java.lang.Class)</outbound>
                <outbound type="class" confirmed="yes">org.junit.Test</outbound>
                <outbound type="class" confirmed="yes">org.junit.Test$None</outbound>
                <outbound type="feature" confirmed="yes">org.junit.Test.expected()</outbound>
                <outbound type="feature" confirmed="yes">org.junit.internal.runners.TestMethod.fMethod</outbound>
                <inbound type="feature" confirmed="yes">org.junit.internal.runners.MethodRoadie.runTestMethod()</inbound>
                <inbound type="feature" confirmed="yes">org.junit.internal.runners.TestMethod.expectsException()</inbound>
                <inbound type="feature" confirmed="yes">org.junit.internal.runners.TestMethod.isUnexpected(java.lang.Throwable)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.junit.internal.runners.TestMethod.getTimeout()</name>
                <outbound type="class" confirmed="no">java.lang.Class</outbound>
                <outbound type="class" confirmed="no">java.lang.annotation.Annotation</outbound>
                <outbound type="class" confirmed="no">java.lang.reflect.Method</outbound>
                <outbound type="feature" confirmed="no">java.lang.reflect.Method.getAnnotation(java.lang.Class)</outbound>
                <outbound type="class" confirmed="yes">org.junit.Test</outbound>
                <outbound type="feature" confirmed="yes">org.junit.Test.timeout()</outbound>
                <outbound type="feature" confirmed="yes">org.junit.internal.runners.TestMethod.fMethod</outbound>
                <inbound type="feature" confirmed="yes">org.junit.internal.runners.MethodRoadie.run()</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.junit.internal.runners.TestMethod.invoke(java.lang.Object)</name>
                <outbound type="class" confirmed="no">java.lang.IllegalAccessException</outbound>
                <outbound type="class" confirmed="no">java.lang.IllegalArgumentException</outbound>
                <outbound type="class" confirmed="no">java.lang.Object</outbound>
                <outbound type="class" confirmed="no">java.lang.reflect.InvocationTargetException</outbound>
                <outbound type="class" confirmed="no">java.lang.reflect.Method</outbound>
                <outbound type="feature" confirmed="no">java.lang.reflect.Method.invoke(java.lang.Object, java.lang.Object[])</outbound>
                <outbound type="feature" confirmed="yes">org.junit.internal.runners.TestMethod.fMethod</outbound>
                <inbound type="feature" confirmed="yes">org.junit.internal.runners.MethodRoadie.runTestMethod()</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.junit.internal.runners.TestMethod.isIgnored()</name>
                <outbound type="class" confirmed="no">java.lang.Class</outbound>
                <outbound type="class" confirmed="no">java.lang.annotation.Annotation</outbound>
                <outbound type="class" confirmed="no">java.lang.reflect.Method</outbound>
                <outbound type="feature" confirmed="no">java.lang.reflect.Method.getAnnotation(java.lang.Class)</outbound>
                <outbound type="class" confirmed="yes">org.junit.Ignore</outbound>
                <outbound type="feature" confirmed="yes">org.junit.internal.runners.TestMethod.fMethod</outbound>
                <inbound type="feature" confirmed="yes">org.junit.internal.runners.MethodRoadie.run()</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.junit.internal.runners.TestMethod.isUnexpected(java.lang.Throwable)</name>
                <outbound type="class" confirmed="no">java.lang.Class</outbound>
                <outbound type="feature" confirmed="no">java.lang.Class.isAssignableFrom(java.lang.Class)</outbound>
                <outbound type="feature" confirmed="no">java.lang.Object.getClass()</outbound>
                <outbound type="class" confirmed="no">java.lang.Throwable</outbound>
                <outbound type="feature" confirmed="yes">org.junit.internal.runners.TestMethod.getExpectedException()</outbound>
                <inbound type="feature" confirmed="yes">org.junit.internal.runners.MethodRoadie.runTestMethod()</inbound>
            </feature>
        </class>
        <class confirmed="yes">
            <name>org.junit.internal.runners.package-info</name>
            <outbound type="class" confirmed="no">java.lang.Object</outbound>
        </class>
    </package>
    <package confirmed="yes">
        <name>org.junit.internal.runners.model</name>
        <class confirmed="yes">
            <name>org.junit.internal.runners.model.EachTestNotifier</name>
            <outbound type="class" confirmed="no">java.lang.Object</outbound>
            <feature confirmed="yes">
                <name>org.junit.internal.runners.model.EachTestNotifier.EachTestNotifier(org.junit.runner.notification.RunNotifier, org.junit.runner.Description)</name>
                <outbound type="feature" confirmed="no">java.lang.Object.Object()</outbound>
                <outbound type="feature" confirmed="yes">org.junit.internal.runners.model.EachTestNotifier.fDescription</outbound>
                <outbound type="feature" confirmed="yes">org.junit.internal.runners.model.EachTestNotifier.fNotifier</outbound>
                <outbound type="class" confirmed="yes">org.junit.runner.Description</outbound>
                <outbound type="class" confirmed="yes">org.junit.runner.notification.RunNotifier</outbound>
                <inbound type="feature" confirmed="yes">org.junit.runners.ParentRunner.run(org.junit.runner.notification.RunNotifier)</inbound>
                <inbound type="feature" confirmed="yes">org.junit.runners.ParentRunner.runLeaf(org.junit.runners.model.Statement, org.junit.runner.Description, org.junit.runner.notification.RunNotifier)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.junit.internal.runners.model.EachTestNotifier.addFailedAssumption(org.junit.internal.AssumptionViolatedException)</name>
                <outbound type="class" confirmed="no">java.lang.Throwable</outbound>
                <outbound type="class" confirmed="yes">org.junit.internal.AssumptionViolatedException</outbound>
                <outbound type="feature" confirmed="yes">org.junit.internal.runners.model.EachTestNotifier.fDescription</outbound>
                <outbound type="feature" confirmed="yes">org.junit.internal.runners.model.EachTestNotifier.fNotifier</outbound>
                <outbound type="class" confirmed="yes">org.junit.runner.Description</outbound>
                <outbound type="class" confirmed="yes">org.junit.runner.notification.Failure</outbound>
                <outbound type="feature" confirmed="yes">org.junit.runner.notification.Failure.Failure(org.junit.runner.Description, java.lang.Throwable)</outbound>
                <outbound type="class" confirmed="yes">org.junit.runner.notification.RunNotifier</outbound>
                <outbound type="feature" confirmed="yes">org.junit.runner.notification.RunNotifier.fireTestAssumptionFailed(org.junit.runner.notification.Failure)</outbound>
                <inbound type="feature" confirmed="yes">org.junit.runners.ParentRunner.runLeaf(org.junit.runners.model.Statement, org.junit.runner.Description, org.junit.runner.notification.RunNotifier)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.junit.internal.runners.model.EachTestNotifier.addFailure(java.lang.Throwable)</name>
                <outbound type="class" confirmed="no">java.lang.Throwable</outbound>
                <outbound type="feature" confirmed="yes">org.junit.internal.runners.model.EachTestNotifier.addMultipleFailureException(org.junit.runners.model.MultipleFailureException)</outbound>
                <outbound type="feature" confirmed="yes">org.junit.internal.runners.model.EachTestNotifier.fDescription</outbound>
                <outbound type="feature" confirmed="yes">org.junit.internal.runners.model.EachTestNotifier.fNotifier</outbound>
                <outbound type="class" confirmed="yes">org.junit.runner.Description</outbound>
                <outbound type="class" confirmed="yes">org.junit.runner.notification.Failure</outbound>
                <outbound type="feature" confirmed="yes">org.junit.runner.notification.Failure.Failure(org.junit.runner.Description, java.lang.Throwable)</outbound>
                <outbound type="class" confirmed="yes">org.junit.runner.notification.RunNotifier</outbound>
                <outbound type="feature" confirmed="yes">org.junit.runner.notification.RunNotifier.fireTestFailure(org.junit.runner.notification.Failure)</outbound>
                <outbound type="class" confirmed="yes">org.junit.runners.model.MultipleFailureException</outbound>
                <inbound type="feature" confirmed="yes">org.junit.internal.runners.model.EachTestNotifier.addMultipleFailureException(org.junit.runners.model.MultipleFailureException)</inbound>
                <inbound type="feature" confirmed="yes">org.junit.runners.ParentRunner.run(org.junit.runner.notification.RunNotifier)</inbound>
                <inbound type="feature" confirmed="yes">org.junit.runners.ParentRunner.runLeaf(org.junit.runners.model.Statement, org.junit.runner.Description, org.junit.runner.notification.RunNotifier)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.junit.internal.runners.model.EachTestNotifier.addMultipleFailureException(org.junit.runners.model.MultipleFailureException)</name>
                <outbound type="class" confirmed="no">java.lang.Object</outbound>
                <outbound type="class" confirmed="no">java.lang.Throwable</outbound>
                <outbound type="class" confirmed="no">java.util.Iterator</outbound>
                <outbound type="feature" confirmed="no">java.util.Iterator.hasNext()</outbound>
                <outbound type="feature" confirmed="no">java.util.Iterator.next()</outbound>
                <outbound type="class" confirmed="no">java.util.List</outbound>
                <outbound type="feature" confirmed="no">java.util.List.iterator()</outbound>
                <outbound type="feature" confirmed="yes">org.junit.internal.runners.model.EachTestNotifier.addFailure(java.lang.Throwable)</outbound>
                <outbound type="class" confirmed="yes">org.junit.runners.model.MultipleFailureException</outbound>
                <outbound type="feature" confirmed="yes">org.junit.runners.model.MultipleFailureException.getFailures()</outbound>
                <inbound type="feature" confirmed="yes">org.junit.internal.runners.model.EachTestNotifier.addFailure(java.lang.Throwable)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.junit.internal.runners.model.EachTestNotifier.fDescription</name>
                <outbound type="class" confirmed="yes">org.junit.runner.Description</outbound>
                <inbound type="feature" confirmed="yes">org.junit.internal.runners.model.EachTestNotifier.EachTestNotifier(org.junit.runner.notification.RunNotifier, org.junit.runner.Description)</inbound>
                <inbound type="feature" confirmed="yes">org.junit.internal.runners.model.EachTestNotifier.addFailedAssumption(org.junit.internal.AssumptionViolatedException)</inbound>
                <inbound type="feature" confirmed="yes">org.junit.internal.runners.model.EachTestNotifier.addFailure(java.lang.Throwable)</inbound>
                <inbound type="feature" confirmed="yes">org.junit.internal.runners.model.EachTestNotifier.fireTestFinished()</inbound>
                <inbound type="feature" confirmed="yes">org.junit.internal.runners.model.EachTestNotifier.fireTestIgnored()</inbound>
                <inbound type="feature" confirmed="yes">org.junit.internal.runners.model.EachTestNotifier.fireTestStarted()</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.junit.internal.runners.model.EachTestNotifier.fNotifier</name>
                <outbound type="class" confirmed="yes">org.junit.runner.notification.RunNotifier</outbound>
                <inbound type="feature" confirmed="yes">org.junit.internal.runners.model.EachTestNotifier.EachTestNotifier(org.junit.runner.notification.RunNotifier, org.junit.runner.Description)</inbound>
                <inbound type="feature" confirmed="yes">org.junit.internal.runners.model.EachTestNotifier.addFailedAssumption(org.junit.internal.AssumptionViolatedException)</inbound>
                <inbound type="feature" confirmed="yes">org.junit.internal.runners.model.EachTestNotifier.addFailure(java.lang.Throwable)</inbound>
                <inbound type="feature" confirmed="yes">org.junit.internal.runners.model.EachTestNotifier.fireTestFinished()</inbound>
                <inbound type="feature" confirmed="yes">org.junit.internal.runners.model.EachTestNotifier.fireTestIgnored()</inbound>
                <inbound type="feature" confirmed="yes">org.junit.internal.runners.model.EachTestNotifier.fireTestStarted()</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.junit.internal.runners.model.EachTestNotifier.fireTestFinished()</name>
                <outbound type="feature" confirmed="yes">org.junit.internal.runners.model.EachTestNotifier.fDescription</outbound>
                <outbound type="feature" confirmed="yes">org.junit.internal.runners.model.EachTestNotifier.fNotifier</outbound>
                <outbound type="class" confirmed="yes">org.junit.runner.Description</outbound>
                <outbound type="class" confirmed="yes">org.junit.runner.notification.RunNotifier</outbound>
                <outbound type="feature" confirmed="yes">org.junit.runner.notification.RunNotifier.fireTestFinished(org.junit.runner.Description)</outbound>
                <inbound type="feature" confirmed="yes">org.junit.runners.ParentRunner.runLeaf(org.junit.runners.model.Statement, org.junit.runner.Description, org.junit.runner.notification.RunNotifier)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.junit.internal.runners.model.EachTestNotifier.fireTestIgnored()</name>
                <outbound type="feature" confirmed="yes">org.junit.internal.runners.model.EachTestNotifier.fDescription</outbound>
                <outbound type="feature" confirmed="yes">org.junit.internal.runners.model.EachTestNotifier.fNotifier</outbound>
                <outbound type="class" confirmed="yes">org.junit.runner.Description</outbound>
                <outbound type="class" confirmed="yes">org.junit.runner.notification.RunNotifier</outbound>
                <outbound type="feature" confirmed="yes">org.junit.runner.notification.RunNotifier.fireTestIgnored(org.junit.runner.Description)</outbound>
                <inbound type="feature" confirmed="yes">org.junit.runners.ParentRunner.run(org.junit.runner.notification.RunNotifier)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.junit.internal.runners.model.EachTestNotifier.fireTestStarted()</name>
                <outbound type="feature" confirmed="yes">org.junit.internal.runners.model.EachTestNotifier.fDescription</outbound>
                <outbound type="feature" confirmed="yes">org.junit.internal.runners.model.EachTestNotifier.fNotifier</outbound>
                <outbound type="class" confirmed="yes">org.junit.runner.Description</outbound>
                <outbound type="class" confirmed="yes">org.junit.runner.notification.RunNotifier</outbound>
                <outbound type="feature" confirmed="yes">org.junit.runner.notification.RunNotifier.fireTestStarted(org.junit.runner.Description)</outbound>
                <inbound type="feature" confirmed="yes">org.junit.runners.ParentRunner.runLeaf(org.junit.runners.model.Statement, org.junit.runner.Description, org.junit.runner.notification.RunNotifier)</inbound>
            </feature>
        </class>
        <class confirmed="yes">
            <name>org.junit.internal.runners.model.MultipleFailureException</name>
            <outbound type="class" confirmed="yes">org.junit.runners.model.MultipleFailureException</outbound>
            <feature confirmed="yes">
                <name>org.junit.internal.runners.model.MultipleFailureException.MultipleFailureException(java.util.List)</name>
                <outbound type="class" confirmed="no">java.util.List</outbound>
                <outbound type="feature" confirmed="yes">org.junit.runners.model.MultipleFailureException.MultipleFailureException(java.util.List)</outbound>
                <inbound type="feature" confirmed="yes">org.junit.runners.model.MultipleFailureException.assertEmpty(java.util.List)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.junit.internal.runners.model.MultipleFailureException.serialVersionUID</name>
            </feature>
        </class>
        <class confirmed="yes">
            <name>org.junit.internal.runners.model.ReflectiveCallable</name>
            <outbound type="class" confirmed="no">java.lang.Object</outbound>
            <inbound type="class" confirmed="yes">org.junit.runners.BlockJUnit4ClassRunner$1</inbound>
            <inbound type="class" confirmed="yes">org.junit.runners.model.FrameworkMethod$1</inbound>
            <feature confirmed="yes">
                <name>org.junit.internal.runners.model.ReflectiveCallable.ReflectiveCallable()</name>
                <outbound type="feature" confirmed="no">java.lang.Object.Object()</outbound>
                <inbound type="feature" confirmed="yes">org.junit.runners.BlockJUnit4ClassRunner$1.BlockJUnit4ClassRunner$1(org.junit.runners.BlockJUnit4ClassRunner)</inbound>
                <inbound type="feature" confirmed="yes">org.junit.runners.model.FrameworkMethod$1.FrameworkMethod$1(org.junit.runners.model.FrameworkMethod, java.lang.Object, java.lang.Object[])</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.junit.internal.runners.model.ReflectiveCallable.run()</name>
                <outbound type="class" confirmed="no">java.lang.Object</outbound>
                <outbound type="class" confirmed="no">java.lang.Throwable</outbound>
                <outbound type="class" confirmed="no">java.lang.reflect.InvocationTargetException</outbound>
                <outbound type="feature" confirmed="no">java.lang.reflect.InvocationTargetException.getTargetException()</outbound>
                <outbound type="feature" confirmed="yes">org.junit.internal.runners.model.ReflectiveCallable.runReflectiveCall()</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.junit.internal.runners.model.ReflectiveCallable.runReflectiveCall()</name>
                <outbound type="class" confirmed="no">java.lang.Object</outbound>
                <outbound type="class" confirmed="no">java.lang.Throwable</outbound>
                <inbound type="feature" confirmed="yes">org.junit.internal.runners.model.ReflectiveCallable.run()</inbound>
            </feature>
        </class>
    </package>
    <package confirmed="yes">
        <name>org.junit.internal.runners.rules</name>
        <class confirmed="yes">
            <name>org.junit.internal.runners.rules.RuleFieldValidator</name>
            <outbound type="class" confirmed="no">java.lang.Enum</outbound>
            <inbound type="feature" confirmed="yes">org.junit.runners.BlockJUnit4ClassRunner.validateFields(java.util.List)</inbound>
            <inbound type="feature" confirmed="yes">org.junit.runners.ParentRunner.validateClassRules(java.util.List)</inbound>
            <feature confirmed="yes">
                <name>org.junit.internal.runners.rules.RuleFieldValidator.$VALUES</name>
                <inbound type="feature" confirmed="yes">org.junit.internal.runners.rules.RuleFieldValidator.static {}</inbound>
                <inbound type="feature" confirmed="yes">org.junit.internal.runners.rules.RuleFieldValidator.values()</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.junit.internal.runners.rules.RuleFieldValidator.CLASS_RULE_VALIDATOR</name>
                <inbound type="feature" confirmed="yes">org.junit.internal.runners.rules.RuleFieldValidator.static {}</inbound>
                <inbound type="feature" confirmed="yes">org.junit.runners.ParentRunner.validateClassRules(java.util.List)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.junit.internal.runners.rules.RuleFieldValidator.RULE_VALIDATOR</name>
                <inbound type="feature" confirmed="yes">org.junit.internal.runners.rules.RuleFieldValidator.static {}</inbound>
                <inbound type="feature" confirmed="yes">org.junit.runners.BlockJUnit4ClassRunner.validateFields(java.util.List)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.junit.internal.runners.rules.RuleFieldValidator.RuleFieldValidator(java.lang.String, int, java.lang.Class, boolean)</name>
                <outbound type="class" confirmed="no">java.lang.Class</outbound>
                <outbound type="feature" confirmed="no">java.lang.Enum.Enum(java.lang.String, int)</outbound>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="feature" confirmed="yes">org.junit.internal.runners.rules.RuleFieldValidator.fAnnotation</outbound>
                <outbound type="feature" confirmed="yes">org.junit.internal.runners.rules.RuleFieldValidator.fOnlyStaticFields</outbound>
                <inbound type="feature" confirmed="yes">org.junit.internal.runners.rules.RuleFieldValidator.static {}</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.junit.internal.runners.rules.RuleFieldValidator.addError(java.util.List, org.junit.runners.model.FrameworkField, java.lang.String)</name>
                <outbound type="class" confirmed="no">java.lang.Class</outbound>
                <outbound type="feature" confirmed="no">java.lang.Class.getSimpleName()</outbound>
                <outbound type="feature" confirmed="no">java.lang.Exception.Exception(java.lang.String)</outbound>
                <outbound type="class" confirmed="no">java.lang.Object</outbound>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="class" confirmed="no">java.lang.StringBuilder</outbound>
                <outbound type="feature" confirmed="no">java.lang.StringBuilder.StringBuilder()</outbound>
                <outbound type="feature" confirmed="no">java.lang.StringBuilder.append(java.lang.String)</outbound>
                <outbound type="feature" confirmed="no">java.lang.StringBuilder.toString()</outbound>
                <outbound type="class" confirmed="no">java.util.List</outbound>
                <outbound type="feature" confirmed="no">java.util.List.add(java.lang.Object)</outbound>
                <outbound type="feature" confirmed="yes">org.junit.internal.runners.rules.RuleFieldValidator.fAnnotation</outbound>
                <outbound type="class" confirmed="yes">org.junit.runners.model.FrameworkField</outbound>
                <outbound type="feature" confirmed="yes">org.junit.runners.model.FrameworkField.getName()</outbound>
                <inbound type="feature" confirmed="yes">org.junit.internal.runners.rules.RuleFieldValidator.optionallyValidateStatic(org.junit.runners.model.FrameworkField, java.util.List)</inbound>
                <inbound type="feature" confirmed="yes">org.junit.internal.runners.rules.RuleFieldValidator.validatePublic(org.junit.runners.model.FrameworkField, java.util.List)</inbound>
                <inbound type="feature" confirmed="yes">org.junit.internal.runners.rules.RuleFieldValidator.validateTestRuleOrMethodRule(org.junit.runners.model.FrameworkField, java.util.List)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.junit.internal.runners.rules.RuleFieldValidator.fAnnotation</name>
                <outbound type="class" confirmed="no">java.lang.Class</outbound>
                <inbound type="feature" confirmed="yes">org.junit.internal.runners.rules.RuleFieldValidator.RuleFieldValidator(java.lang.String, int, java.lang.Class, boolean)</inbound>
                <inbound type="feature" confirmed="yes">org.junit.internal.runners.rules.RuleFieldValidator.addError(java.util.List, org.junit.runners.model.FrameworkField, java.lang.String)</inbound>
                <inbound type="feature" confirmed="yes">org.junit.internal.runners.rules.RuleFieldValidator.validate(org.junit.runners.model.TestClass, java.util.List)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.junit.internal.runners.rules.RuleFieldValidator.fOnlyStaticFields</name>
                <inbound type="feature" confirmed="yes">org.junit.internal.runners.rules.RuleFieldValidator.RuleFieldValidator(java.lang.String, int, java.lang.Class, boolean)</inbound>
                <inbound type="feature" confirmed="yes">org.junit.internal.runners.rules.RuleFieldValidator.optionallyValidateStatic(org.junit.runners.model.FrameworkField, java.util.List)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.junit.internal.runners.rules.RuleFieldValidator.isMethodRule(org.junit.runners.model.FrameworkField)</name>
                <outbound type="class" confirmed="no">java.lang.Class</outbound>
                <outbound type="feature" confirmed="no">java.lang.Class.isAssignableFrom(java.lang.Class)</outbound>
                <outbound type="class" confirmed="yes">org.junit.rules.MethodRule</outbound>
                <outbound type="class" confirmed="yes">org.junit.runners.model.FrameworkField</outbound>
                <outbound type="feature" confirmed="yes">org.junit.runners.model.FrameworkField.getType()</outbound>
                <inbound type="feature" confirmed="yes">org.junit.internal.runners.rules.RuleFieldValidator.validateTestRuleOrMethodRule(org.junit.runners.model.FrameworkField, java.util.List)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.junit.internal.runners.rules.RuleFieldValidator.isTestRule(org.junit.runners.model.FrameworkField)</name>
                <outbound type="class" confirmed="no">java.lang.Class</outbound>
                <outbound type="feature" confirmed="no">java.lang.Class.isAssignableFrom(java.lang.Class)</outbound>
                <outbound type="class" confirmed="yes">org.junit.rules.TestRule</outbound>
                <outbound type="class" confirmed="yes">org.junit.runners.model.FrameworkField</outbound>
                <outbound type="feature" confirmed="yes">org.junit.runners.model.FrameworkField.getType()</outbound>
                <inbound type="feature" confirmed="yes">org.junit.internal.runners.rules.RuleFieldValidator.validateTestRuleOrMethodRule(org.junit.runners.model.FrameworkField, java.util.List)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.junit.internal.runners.rules.RuleFieldValidator.optionallyValidateStatic(org.junit.runners.model.FrameworkField, java.util.List)</name>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="class" confirmed="no">java.util.List</outbound>
                <outbound type="feature" confirmed="yes">org.junit.internal.runners.rules.RuleFieldValidator.addError(java.util.List, org.junit.runners.model.FrameworkField, java.lang.String)</outbound>
                <outbound type="feature" confirmed="yes">org.junit.internal.runners.rules.RuleFieldValidator.fOnlyStaticFields</outbound>
                <outbound type="class" confirmed="yes">org.junit.runners.model.FrameworkField</outbound>
                <outbound type="feature" confirmed="yes">org.junit.runners.model.FrameworkField.isStatic()</outbound>
                <inbound type="feature" confirmed="yes">org.junit.internal.runners.rules.RuleFieldValidator.validateField(org.junit.runners.model.FrameworkField, java.util.List)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.junit.internal.runners.rules.RuleFieldValidator.static {}</name>
                <outbound type="class" confirmed="no">java.lang.Class</outbound>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="class" confirmed="yes">org.junit.ClassRule</outbound>
                <outbound type="class" confirmed="yes">org.junit.Rule</outbound>
                <outbound type="feature" confirmed="yes">org.junit.internal.runners.rules.RuleFieldValidator.$VALUES</outbound>
                <outbound type="feature" confirmed="yes">org.junit.internal.runners.rules.RuleFieldValidator.CLASS_RULE_VALIDATOR</outbound>
                <outbound type="feature" confirmed="yes">org.junit.internal.runners.rules.RuleFieldValidator.RULE_VALIDATOR</outbound>
                <outbound type="feature" confirmed="yes">org.junit.internal.runners.rules.RuleFieldValidator.RuleFieldValidator(java.lang.String, int, java.lang.Class, boolean)</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.junit.internal.runners.rules.RuleFieldValidator.validate(org.junit.runners.model.TestClass, java.util.List)</name>
                <outbound type="class" confirmed="no">java.lang.Class</outbound>
                <outbound type="class" confirmed="no">java.lang.Object</outbound>
                <outbound type="class" confirmed="no">java.util.Iterator</outbound>
                <outbound type="feature" confirmed="no">java.util.Iterator.hasNext()</outbound>
                <outbound type="feature" confirmed="no">java.util.Iterator.next()</outbound>
                <outbound type="class" confirmed="no">java.util.List</outbound>
                <outbound type="feature" confirmed="no">java.util.List.iterator()</outbound>
                <outbound type="feature" confirmed="yes">org.junit.internal.runners.rules.RuleFieldValidator.fAnnotation</outbound>
                <outbound type="feature" confirmed="yes">org.junit.internal.runners.rules.RuleFieldValidator.validateField(org.junit.runners.model.FrameworkField, java.util.List)</outbound>
                <outbound type="class" confirmed="yes">org.junit.runners.model.FrameworkField</outbound>
                <outbound type="class" confirmed="yes">org.junit.runners.model.TestClass</outbound>
                <outbound type="feature" confirmed="yes">org.junit.runners.model.TestClass.getAnnotatedFields(java.lang.Class)</outbound>
                <inbound type="feature" confirmed="yes">org.junit.runners.BlockJUnit4ClassRunner.validateFields(java.util.List)</inbound>
                <inbound type="feature" confirmed="yes">org.junit.runners.ParentRunner.validateClassRules(java.util.List)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.junit.internal.runners.rules.RuleFieldValidator.validateField(org.junit.runners.model.FrameworkField, java.util.List)</name>
                <outbound type="class" confirmed="no">java.util.List</outbound>
                <outbound type="feature" confirmed="yes">org.junit.internal.runners.rules.RuleFieldValidator.optionallyValidateStatic(org.junit.runners.model.FrameworkField, java.util.List)</outbound>
                <outbound type="feature" confirmed="yes">org.junit.internal.runners.rules.RuleFieldValidator.validatePublic(org.junit.runners.model.FrameworkField, java.util.List)</outbound>
                <outbound type="feature" confirmed="yes">org.junit.internal.runners.rules.RuleFieldValidator.validateTestRuleOrMethodRule(org.junit.runners.model.FrameworkField, java.util.List)</outbound>
                <outbound type="class" confirmed="yes">org.junit.runners.model.FrameworkField</outbound>
                <inbound type="feature" confirmed="yes">org.junit.internal.runners.rules.RuleFieldValidator.validate(org.junit.runners.model.TestClass, java.util.List)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.junit.internal.runners.rules.RuleFieldValidator.validatePublic(org.junit.runners.model.FrameworkField, java.util.List)</name>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="class" confirmed="no">java.util.List</outbound>
                <outbound type="feature" confirmed="yes">org.junit.internal.runners.rules.RuleFieldValidator.addError(java.util.List, org.junit.runners.model.FrameworkField, java.lang.String)</outbound>
                <outbound type="class" confirmed="yes">org.junit.runners.model.FrameworkField</outbound>
                <outbound type="feature" confirmed="yes">org.junit.runners.model.FrameworkField.isPublic()</outbound>
                <inbound type="feature" confirmed="yes">org.junit.internal.runners.rules.RuleFieldValidator.validateField(org.junit.runners.model.FrameworkField, java.util.List)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.junit.internal.runners.rules.RuleFieldValidator.validateTestRuleOrMethodRule(org.junit.runners.model.FrameworkField, java.util.List)</name>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="class" confirmed="no">java.util.List</outbound>
                <outbound type="feature" confirmed="yes">org.junit.internal.runners.rules.RuleFieldValidator.addError(java.util.List, org.junit.runners.model.FrameworkField, java.lang.String)</outbound>
                <outbound type="feature" confirmed="yes">org.junit.internal.runners.rules.RuleFieldValidator.isMethodRule(org.junit.runners.model.FrameworkField)</outbound>
                <outbound type="feature" confirmed="yes">org.junit.internal.runners.rules.RuleFieldValidator.isTestRule(org.junit.runners.model.FrameworkField)</outbound>
                <outbound type="class" confirmed="yes">org.junit.runners.model.FrameworkField</outbound>
                <inbound type="feature" confirmed="yes">org.junit.internal.runners.rules.RuleFieldValidator.validateField(org.junit.runners.model.FrameworkField, java.util.List)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.junit.internal.runners.rules.RuleFieldValidator.valueOf(java.lang.String)</name>
                <outbound type="class" confirmed="no">java.lang.Class</outbound>
                <outbound type="class" confirmed="no">java.lang.Enum</outbound>
                <outbound type="feature" confirmed="no">java.lang.Enum.valueOf(java.lang.Class, java.lang.String)</outbound>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.junit.internal.runners.rules.RuleFieldValidator.values()</name>
                <outbound type="class" confirmed="no">java.lang.Object</outbound>
                <outbound type="feature" confirmed="yes">org.junit.internal.runners.rules.RuleFieldValidator.$VALUES</outbound>
                <outbound type="class" confirmed="no">org.junit.internal.runners.rules.RuleFieldValidator[]</outbound>
                <outbound type="feature" confirmed="no">org.junit.internal.runners.rules.RuleFieldValidator[].clone()</outbound>
            </feature>
        </class>
        <class confirmed="no">
            <name>org.junit.internal.runners.rules.RuleFieldValidator[]</name>
            <inbound type="feature" confirmed="yes">org.junit.internal.runners.rules.RuleFieldValidator.values()</inbound>
            <feature confirmed="no">
                <name>org.junit.internal.runners.rules.RuleFieldValidator[].clone()</name>
                <inbound type="feature" confirmed="yes">org.junit.internal.runners.rules.RuleFieldValidator.values()</inbound>
            </feature>
        </class>
    </package>
    <package confirmed="yes">
        <name>org.junit.internal.runners.statements</name>
        <class confirmed="yes">
            <name>org.junit.internal.runners.statements.ExpectException</name>
            <outbound type="class" confirmed="yes">org.junit.runners.model.Statement</outbound>
            <feature confirmed="yes">
                <name>org.junit.internal.runners.statements.ExpectException.ExpectException(org.junit.runners.model.Statement, java.lang.Class)</name>
                <outbound type="class" confirmed="no">java.lang.Class</outbound>
                <outbound type="feature" confirmed="yes">org.junit.internal.runners.statements.ExpectException.fExpected</outbound>
                <outbound type="feature" confirmed="yes">org.junit.internal.runners.statements.ExpectException.fNext</outbound>
                <outbound type="class" confirmed="yes">org.junit.runners.model.Statement</outbound>
                <outbound type="feature" confirmed="yes">org.junit.runners.model.Statement.Statement()</outbound>
                <inbound type="feature" confirmed="yes">org.junit.runners.BlockJUnit4ClassRunner.possiblyExpectingExceptions(org.junit.runners.model.FrameworkMethod, java.lang.Object, org.junit.runners.model.Statement)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.junit.internal.runners.statements.ExpectException.evaluate()</name>
                <outbound type="feature" confirmed="no">java.lang.AssertionError.AssertionError(java.lang.Object)</outbound>
                <outbound type="class" confirmed="no">java.lang.Class</outbound>
                <outbound type="feature" confirmed="no">java.lang.Class.getName()</outbound>
                <outbound type="feature" confirmed="no">java.lang.Class.isAssignableFrom(java.lang.Class)</outbound>
                <outbound type="class" confirmed="no">java.lang.Exception</outbound>
                <outbound type="feature" confirmed="no">java.lang.Exception.Exception(java.lang.String, java.lang.Throwable)</outbound>
                <outbound type="class" confirmed="no">java.lang.Object</outbound>
                <outbound type="feature" confirmed="no">java.lang.Object.getClass()</outbound>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="class" confirmed="no">java.lang.StringBuilder</outbound>
                <outbound type="feature" confirmed="no">java.lang.StringBuilder.StringBuilder()</outbound>
                <outbound type="feature" confirmed="no">java.lang.StringBuilder.append(java.lang.String)</outbound>
                <outbound type="feature" confirmed="no">java.lang.StringBuilder.toString()</outbound>
                <outbound type="class" confirmed="no">java.lang.Throwable</outbound>
                <outbound type="class" confirmed="yes">org.junit.internal.AssumptionViolatedException</outbound>
                <outbound type="feature" confirmed="yes">org.junit.internal.runners.statements.ExpectException.fExpected</outbound>
                <outbound type="feature" confirmed="yes">org.junit.internal.runners.statements.ExpectException.fNext</outbound>
                <outbound type="class" confirmed="yes">org.junit.runners.model.Statement</outbound>
                <outbound type="feature" confirmed="yes">org.junit.runners.model.Statement.evaluate()</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.junit.internal.runners.statements.ExpectException.fExpected</name>
                <outbound type="class" confirmed="no">java.lang.Class</outbound>
                <inbound type="feature" confirmed="yes">org.junit.internal.runners.statements.ExpectException.ExpectException(org.junit.runners.model.Statement, java.lang.Class)</inbound>
                <inbound type="feature" confirmed="yes">org.junit.internal.runners.statements.ExpectException.evaluate()</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.junit.internal.runners.statements.ExpectException.fNext</name>
                <outbound type="class" confirmed="yes">org.junit.runners.model.Statement</outbound>
                <inbound type="feature" confirmed="yes">org.junit.internal.runners.statements.ExpectException.ExpectException(org.junit.runners.model.Statement, java.lang.Class)</inbound>
                <inbound type="feature" confirmed="yes">org.junit.internal.runners.statements.ExpectException.evaluate()</inbound>
            </feature>
        </class>
        <class confirmed="yes">
            <name>org.junit.internal.runners.statements.Fail</name>
            <outbound type="class" confirmed="yes">org.junit.runners.model.Statement</outbound>
            <feature confirmed="yes">
                <name>org.junit.internal.runners.statements.Fail.Fail(java.lang.Throwable)</name>
                <outbound type="class" confirmed="no">java.lang.Throwable</outbound>
                <outbound type="feature" confirmed="yes">org.junit.internal.runners.statements.Fail.fError</outbound>
                <outbound type="feature" confirmed="yes">org.junit.runners.model.Statement.Statement()</outbound>
                <inbound type="feature" confirmed="yes">org.junit.runners.BlockJUnit4ClassRunner.methodBlock(org.junit.runners.model.FrameworkMethod)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.junit.internal.runners.statements.Fail.evaluate()</name>
                <outbound type="class" confirmed="no">java.lang.Throwable</outbound>
                <outbound type="feature" confirmed="yes">org.junit.internal.runners.statements.Fail.fError</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.junit.internal.runners.statements.Fail.fError</name>
                <outbound type="class" confirmed="no">java.lang.Throwable</outbound>
                <inbound type="feature" confirmed="yes">org.junit.internal.runners.statements.Fail.Fail(java.lang.Throwable)</inbound>
                <inbound type="feature" confirmed="yes">org.junit.internal.runners.statements.Fail.evaluate()</inbound>
            </feature>
        </class>
        <class confirmed="yes">
            <name>org.junit.internal.runners.statements.FailOnTimeout</name>
            <outbound type="class" confirmed="yes">org.junit.runners.model.Statement</outbound>
            <inbound type="feature" confirmed="yes">org.junit.internal.runners.statements.FailOnTimeout$1.FailOnTimeout$1(org.junit.internal.runners.statements.FailOnTimeout)</inbound>
            <inbound type="feature" confirmed="yes">org.junit.internal.runners.statements.FailOnTimeout$1.run()</inbound>
            <inbound type="feature" confirmed="yes">org.junit.internal.runners.statements.FailOnTimeout$1.this$0</inbound>
            <feature confirmed="yes">
                <name>org.junit.internal.runners.statements.FailOnTimeout.FailOnTimeout(org.junit.runners.model.Statement, long)</name>
                <outbound type="class" confirmed="no">java.lang.Throwable</outbound>
                <outbound type="feature" confirmed="yes">org.junit.internal.runners.statements.FailOnTimeout.fFinished</outbound>
                <outbound type="feature" confirmed="yes">org.junit.internal.runners.statements.FailOnTimeout.fNext</outbound>
                <outbound type="feature" confirmed="yes">org.junit.internal.runners.statements.FailOnTimeout.fThrown</outbound>
                <outbound type="feature" confirmed="yes">org.junit.internal.runners.statements.FailOnTimeout.fTimeout</outbound>
                <outbound type="class" confirmed="yes">org.junit.runners.model.Statement</outbound>
                <outbound type="feature" confirmed="yes">org.junit.runners.model.Statement.Statement()</outbound>
                <inbound type="feature" confirmed="yes">org.junit.rules.Timeout.apply(org.junit.runners.model.Statement, org.junit.runner.Description)</inbound>
                <inbound type="feature" confirmed="yes">org.junit.runners.BlockJUnit4ClassRunner.withPotentialTimeout(org.junit.runners.model.FrameworkMethod, java.lang.Object, org.junit.runners.model.Statement)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.junit.internal.runners.statements.FailOnTimeout.access$000(org.junit.internal.runners.statements.FailOnTimeout)</name>
                <outbound type="feature" confirmed="yes">org.junit.internal.runners.statements.FailOnTimeout.fNext</outbound>
                <outbound type="class" confirmed="yes">org.junit.runners.model.Statement</outbound>
                <inbound type="feature" confirmed="yes">org.junit.internal.runners.statements.FailOnTimeout$1.run()</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.junit.internal.runners.statements.FailOnTimeout.access$102(org.junit.internal.runners.statements.FailOnTimeout, boolean)</name>
                <outbound type="feature" confirmed="yes">org.junit.internal.runners.statements.FailOnTimeout.fFinished</outbound>
                <inbound type="feature" confirmed="yes">org.junit.internal.runners.statements.FailOnTimeout$1.run()</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.junit.internal.runners.statements.FailOnTimeout.access$202(org.junit.internal.runners.statements.FailOnTimeout, java.lang.Throwable)</name>
                <outbound type="class" confirmed="no">java.lang.Throwable</outbound>
                <outbound type="feature" confirmed="yes">org.junit.internal.runners.statements.FailOnTimeout.fThrown</outbound>
                <inbound type="feature" confirmed="yes">org.junit.internal.runners.statements.FailOnTimeout$1.run()</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.junit.internal.runners.statements.FailOnTimeout.evaluate()</name>
                <outbound type="feature" confirmed="no">java.lang.Exception.Exception(java.lang.String)</outbound>
                <outbound type="feature" confirmed="no">java.lang.Exception.setStackTrace(java.lang.StackTraceElement[])</outbound>
                <outbound type="class" confirmed="no">java.lang.Long</outbound>
                <outbound type="feature" confirmed="no">java.lang.Long.valueOf(long)</outbound>
                <outbound type="class" confirmed="no">java.lang.Object</outbound>
                <outbound type="class" confirmed="no">java.lang.StackTraceElement</outbound>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="feature" confirmed="no">java.lang.String.format(java.lang.String, java.lang.Object[])</outbound>
                <outbound type="feature" confirmed="no">java.lang.Thread.getStackTrace()</outbound>
                <outbound type="feature" confirmed="no">java.lang.Thread.join(long)</outbound>
                <outbound type="feature" confirmed="no">java.lang.Thread.start()</outbound>
                <outbound type="class" confirmed="no">java.lang.Throwable</outbound>
                <outbound type="feature" confirmed="yes">org.junit.internal.runners.statements.FailOnTimeout$1.FailOnTimeout$1(org.junit.internal.runners.statements.FailOnTimeout)</outbound>
                <outbound type="feature" confirmed="yes">org.junit.internal.runners.statements.FailOnTimeout.fFinished</outbound>
                <outbound type="feature" confirmed="yes">org.junit.internal.runners.statements.FailOnTimeout.fThrown</outbound>
                <outbound type="feature" confirmed="yes">org.junit.internal.runners.statements.FailOnTimeout.fTimeout</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.junit.internal.runners.statements.FailOnTimeout.fFinished</name>
                <inbound type="feature" confirmed="yes">org.junit.internal.runners.statements.FailOnTimeout.FailOnTimeout(org.junit.runners.model.Statement, long)</inbound>
                <inbound type="feature" confirmed="yes">org.junit.internal.runners.statements.FailOnTimeout.access$102(org.junit.internal.runners.statements.FailOnTimeout, boolean)</inbound>
                <inbound type="feature" confirmed="yes">org.junit.internal.runners.statements.FailOnTimeout.evaluate()</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.junit.internal.runners.statements.FailOnTimeout.fNext</name>
                <outbound type="class" confirmed="yes">org.junit.runners.model.Statement</outbound>
                <inbound type="feature" confirmed="yes">org.junit.internal.runners.statements.FailOnTimeout.FailOnTimeout(org.junit.runners.model.Statement, long)</inbound>
                <inbound type="feature" confirmed="yes">org.junit.internal.runners.statements.FailOnTimeout.access$000(org.junit.internal.runners.statements.FailOnTimeout)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.junit.internal.runners.statements.FailOnTimeout.fThrown</name>
                <outbound type="class" confirmed="no">java.lang.Throwable</outbound>
                <inbound type="feature" confirmed="yes">org.junit.internal.runners.statements.FailOnTimeout.FailOnTimeout(org.junit.runners.model.Statement, long)</inbound>
                <inbound type="feature" confirmed="yes">org.junit.internal.runners.statements.FailOnTimeout.access$202(org.junit.internal.runners.statements.FailOnTimeout, java.lang.Throwable)</inbound>
                <inbound type="feature" confirmed="yes">org.junit.internal.runners.statements.FailOnTimeout.evaluate()</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.junit.internal.runners.statements.FailOnTimeout.fTimeout</name>
                <inbound type="feature" confirmed="yes">org.junit.internal.runners.statements.FailOnTimeout.FailOnTimeout(org.junit.runners.model.Statement, long)</inbound>
                <inbound type="feature" confirmed="yes">org.junit.internal.runners.statements.FailOnTimeout.evaluate()</inbound>
            </feature>
        </class>
        <class confirmed="yes">
            <name>org.junit.internal.runners.statements.FailOnTimeout$1</name>
            <outbound type="class" confirmed="no">java.lang.Thread</outbound>
            <feature confirmed="yes">
                <name>org.junit.internal.runners.statements.FailOnTimeout$1.FailOnTimeout$1(org.junit.internal.runners.statements.FailOnTimeout)</name>
                <outbound type="feature" confirmed="no">java.lang.Thread.Thread()</outbound>
                <outbound type="class" confirmed="yes">org.junit.internal.runners.statements.FailOnTimeout</outbound>
                <outbound type="feature" confirmed="yes">org.junit.internal.runners.statements.FailOnTimeout$1.this$0</outbound>
                <inbound type="feature" confirmed="yes">org.junit.internal.runners.statements.FailOnTimeout.evaluate()</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.junit.internal.runners.statements.FailOnTimeout$1.run()</name>
                <outbound type="class" confirmed="no">java.lang.Throwable</outbound>
                <outbound type="class" confirmed="yes">org.junit.internal.runners.statements.FailOnTimeout</outbound>
                <outbound type="feature" confirmed="yes">org.junit.internal.runners.statements.FailOnTimeout$1.this$0</outbound>
                <outbound type="feature" confirmed="yes">org.junit.internal.runners.statements.FailOnTimeout.access$000(org.junit.internal.runners.statements.FailOnTimeout)</outbound>
                <outbound type="feature" confirmed="yes">org.junit.internal.runners.statements.FailOnTimeout.access$102(org.junit.internal.runners.statements.FailOnTimeout, boolean)</outbound>
                <outbound type="feature" confirmed="yes">org.junit.internal.runners.statements.FailOnTimeout.access$202(org.junit.internal.runners.statements.FailOnTimeout, java.lang.Throwable)</outbound>
                <outbound type="class" confirmed="yes">org.junit.runners.model.Statement</outbound>
                <outbound type="feature" confirmed="yes">org.junit.runners.model.Statement.evaluate()</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.junit.internal.runners.statements.FailOnTimeout$1.this$0</name>
                <outbound type="class" confirmed="yes">org.junit.internal.runners.statements.FailOnTimeout</outbound>
                <inbound type="feature" confirmed="yes">org.junit.internal.runners.statements.FailOnTimeout$1.FailOnTimeout$1(org.junit.internal.runners.statements.FailOnTimeout)</inbound>
                <inbound type="feature" confirmed="yes">org.junit.internal.runners.statements.FailOnTimeout$1.run()</inbound>
            </feature>
        </class>
        <class confirmed="yes">
            <name>org.junit.internal.runners.statements.InvokeMethod</name>
            <outbound type="class" confirmed="yes">org.junit.runners.model.Statement</outbound>
            <feature confirmed="yes">
                <name>org.junit.internal.runners.statements.InvokeMethod.InvokeMethod(org.junit.runners.model.FrameworkMethod, java.lang.Object)</name>
                <outbound type="class" confirmed="no">java.lang.Object</outbound>
                <outbound type="feature" confirmed="yes">org.junit.internal.runners.statements.InvokeMethod.fTarget</outbound>
                <outbound type="feature" confirmed="yes">org.junit.internal.runners.statements.InvokeMethod.fTestMethod</outbound>
                <outbound type="class" confirmed="yes">org.junit.runners.model.FrameworkMethod</outbound>
                <outbound type="feature" confirmed="yes">org.junit.runners.model.Statement.Statement()</outbound>
                <inbound type="feature" confirmed="yes">org.junit.runners.BlockJUnit4ClassRunner.methodInvoker(org.junit.runners.model.FrameworkMethod, java.lang.Object)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.junit.internal.runners.statements.InvokeMethod.evaluate()</name>
                <outbound type="class" confirmed="no">java.lang.Object</outbound>
                <outbound type="class" confirmed="no">java.lang.Throwable</outbound>
                <outbound type="feature" confirmed="yes">org.junit.internal.runners.statements.InvokeMethod.fTarget</outbound>
                <outbound type="feature" confirmed="yes">org.junit.internal.runners.statements.InvokeMethod.fTestMethod</outbound>
                <outbound type="class" confirmed="yes">org.junit.runners.model.FrameworkMethod</outbound>
                <outbound type="feature" confirmed="yes">org.junit.runners.model.FrameworkMethod.invokeExplosively(java.lang.Object, java.lang.Object[])</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.junit.internal.runners.statements.InvokeMethod.fTarget</name>
                <outbound type="class" confirmed="no">java.lang.Object</outbound>
                <inbound type="feature" confirmed="yes">org.junit.internal.runners.statements.InvokeMethod.InvokeMethod(org.junit.runners.model.FrameworkMethod, java.lang.Object)</inbound>
                <inbound type="feature" confirmed="yes">org.junit.internal.runners.statements.InvokeMethod.evaluate()</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.junit.internal.runners.statements.InvokeMethod.fTestMethod</name>
                <outbound type="class" confirmed="yes">org.junit.runners.model.FrameworkMethod</outbound>
                <inbound type="feature" confirmed="yes">org.junit.internal.runners.statements.InvokeMethod.InvokeMethod(org.junit.runners.model.FrameworkMethod, java.lang.Object)</inbound>
                <inbound type="feature" confirmed="yes">org.junit.internal.runners.statements.InvokeMethod.evaluate()</inbound>
            </feature>
        </class>
        <class confirmed="yes">
            <name>org.junit.internal.runners.statements.RunAfters</name>
            <outbound type="class" confirmed="yes">org.junit.runners.model.Statement</outbound>
            <feature confirmed="yes">
                <name>org.junit.internal.runners.statements.RunAfters.RunAfters(org.junit.runners.model.Statement, java.util.List, java.lang.Object)</name>
                <outbound type="class" confirmed="no">java.lang.Object</outbound>
                <outbound type="class" confirmed="no">java.util.List</outbound>
                <outbound type="feature" confirmed="yes">org.junit.internal.runners.statements.RunAfters.fAfters</outbound>
                <outbound type="feature" confirmed="yes">org.junit.internal.runners.statements.RunAfters.fNext</outbound>
                <outbound type="feature" confirmed="yes">org.junit.internal.runners.statements.RunAfters.fTarget</outbound>
                <outbound type="class" confirmed="yes">org.junit.runners.model.Statement</outbound>
                <outbound type="feature" confirmed="yes">org.junit.runners.model.Statement.Statement()</outbound>
                <inbound type="feature" confirmed="yes">org.junit.runners.BlockJUnit4ClassRunner.withAfters(org.junit.runners.model.FrameworkMethod, java.lang.Object, org.junit.runners.model.Statement)</inbound>
                <inbound type="feature" confirmed="yes">org.junit.runners.ParentRunner.withAfterClasses(org.junit.runners.model.Statement)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.junit.internal.runners.statements.RunAfters.evaluate()</name>
                <outbound type="class" confirmed="no">java.lang.Object</outbound>
                <outbound type="class" confirmed="no">java.lang.Throwable</outbound>
                <outbound type="feature" confirmed="no">java.util.ArrayList.ArrayList()</outbound>
                <outbound type="class" confirmed="no">java.util.Iterator</outbound>
                <outbound type="feature" confirmed="no">java.util.Iterator.hasNext()</outbound>
                <outbound type="feature" confirmed="no">java.util.Iterator.next()</outbound>
                <outbound type="class" confirmed="no">java.util.List</outbound>
                <outbound type="feature" confirmed="no">java.util.List.add(java.lang.Object)</outbound>
                <outbound type="feature" confirmed="no">java.util.List.clear()</outbound>
                <outbound type="feature" confirmed="no">java.util.List.iterator()</outbound>
                <outbound type="feature" confirmed="yes">org.junit.internal.runners.statements.RunAfters.fAfters</outbound>
                <outbound type="feature" confirmed="yes">org.junit.internal.runners.statements.RunAfters.fNext</outbound>
                <outbound type="feature" confirmed="yes">org.junit.internal.runners.statements.RunAfters.fTarget</outbound>
                <outbound type="class" confirmed="yes">org.junit.runners.model.FrameworkMethod</outbound>
                <outbound type="feature" confirmed="yes">org.junit.runners.model.FrameworkMethod.invokeExplosively(java.lang.Object, java.lang.Object[])</outbound>
                <outbound type="feature" confirmed="yes">org.junit.runners.model.MultipleFailureException.assertEmpty(java.util.List)</outbound>
                <outbound type="class" confirmed="yes">org.junit.runners.model.Statement</outbound>
                <outbound type="feature" confirmed="yes">org.junit.runners.model.Statement.evaluate()</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.junit.internal.runners.statements.RunAfters.fAfters</name>
                <outbound type="class" confirmed="no">java.util.List</outbound>
                <inbound type="feature" confirmed="yes">org.junit.internal.runners.statements.RunAfters.RunAfters(org.junit.runners.model.Statement, java.util.List, java.lang.Object)</inbound>
                <inbound type="feature" confirmed="yes">org.junit.internal.runners.statements.RunAfters.evaluate()</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.junit.internal.runners.statements.RunAfters.fNext</name>
                <outbound type="class" confirmed="yes">org.junit.runners.model.Statement</outbound>
                <inbound type="feature" confirmed="yes">org.junit.internal.runners.statements.RunAfters.RunAfters(org.junit.runners.model.Statement, java.util.List, java.lang.Object)</inbound>
                <inbound type="feature" confirmed="yes">org.junit.internal.runners.statements.RunAfters.evaluate()</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.junit.internal.runners.statements.RunAfters.fTarget</name>
                <outbound type="class" confirmed="no">java.lang.Object</outbound>
                <inbound type="feature" confirmed="yes">org.junit.internal.runners.statements.RunAfters.RunAfters(org.junit.runners.model.Statement, java.util.List, java.lang.Object)</inbound>
                <inbound type="feature" confirmed="yes">org.junit.internal.runners.statements.RunAfters.evaluate()</inbound>
            </feature>
        </class>
        <class confirmed="yes">
            <name>org.junit.internal.runners.statements.RunBefores</name>
            <outbound type="class" confirmed="yes">org.junit.runners.model.Statement</outbound>
            <feature confirmed="yes">
                <name>org.junit.internal.runners.statements.RunBefores.RunBefores(org.junit.runners.model.Statement, java.util.List, java.lang.Object)</name>
                <outbound type="class" confirmed="no">java.lang.Object</outbound>
                <outbound type="class" confirmed="no">java.util.List</outbound>
                <outbound type="feature" confirmed="yes">org.junit.internal.runners.statements.RunBefores.fBefores</outbound>
                <outbound type="feature" confirmed="yes">org.junit.internal.runners.statements.RunBefores.fNext</outbound>
                <outbound type="feature" confirmed="yes">org.junit.internal.runners.statements.RunBefores.fTarget</outbound>
                <outbound type="class" confirmed="yes">org.junit.runners.model.Statement</outbound>
                <outbound type="feature" confirmed="yes">org.junit.runners.model.Statement.Statement()</outbound>
                <inbound type="feature" confirmed="yes">org.junit.runners.BlockJUnit4ClassRunner.withBefores(org.junit.runners.model.FrameworkMethod, java.lang.Object, org.junit.runners.model.Statement)</inbound>
                <inbound type="feature" confirmed="yes">org.junit.runners.ParentRunner.withBeforeClasses(org.junit.runners.model.Statement)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.junit.internal.runners.statements.RunBefores.evaluate()</name>
                <outbound type="class" confirmed="no">java.lang.Object</outbound>
                <outbound type="class" confirmed="no">java.lang.Throwable</outbound>
                <outbound type="class" confirmed="no">java.util.Iterator</outbound>
                <outbound type="feature" confirmed="no">java.util.Iterator.hasNext()</outbound>
                <outbound type="feature" confirmed="no">java.util.Iterator.next()</outbound>
                <outbound type="class" confirmed="no">java.util.List</outbound>
                <outbound type="feature" confirmed="no">java.util.List.iterator()</outbound>
                <outbound type="feature" confirmed="yes">org.junit.internal.runners.statements.RunBefores.fBefores</outbound>
                <outbound type="feature" confirmed="yes">org.junit.internal.runners.statements.RunBefores.fNext</outbound>
                <outbound type="feature" confirmed="yes">org.junit.internal.runners.statements.RunBefores.fTarget</outbound>
                <outbound type="class" confirmed="yes">org.junit.runners.model.FrameworkMethod</outbound>
                <outbound type="feature" confirmed="yes">org.junit.runners.model.FrameworkMethod.invokeExplosively(java.lang.Object, java.lang.Object[])</outbound>
                <outbound type="class" confirmed="yes">org.junit.runners.model.Statement</outbound>
                <outbound type="feature" confirmed="yes">org.junit.runners.model.Statement.evaluate()</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.junit.internal.runners.statements.RunBefores.fBefores</name>
                <outbound type="class" confirmed="no">java.util.List</outbound>
                <inbound type="feature" confirmed="yes">org.junit.internal.runners.statements.RunBefores.RunBefores(org.junit.runners.model.Statement, java.util.List, java.lang.Object)</inbound>
                <inbound type="feature" confirmed="yes">org.junit.internal.runners.statements.RunBefores.evaluate()</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.junit.internal.runners.statements.RunBefores.fNext</name>
                <outbound type="class" confirmed="yes">org.junit.runners.model.Statement</outbound>
                <inbound type="feature" confirmed="yes">org.junit.internal.runners.statements.RunBefores.RunBefores(org.junit.runners.model.Statement, java.util.List, java.lang.Object)</inbound>
                <inbound type="feature" confirmed="yes">org.junit.internal.runners.statements.RunBefores.evaluate()</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.junit.internal.runners.statements.RunBefores.fTarget</name>
                <outbound type="class" confirmed="no">java.lang.Object</outbound>
                <inbound type="feature" confirmed="yes">org.junit.internal.runners.statements.RunBefores.RunBefores(org.junit.runners.model.Statement, java.util.List, java.lang.Object)</inbound>
                <inbound type="feature" confirmed="yes">org.junit.internal.runners.statements.RunBefores.evaluate()</inbound>
            </feature>
        </class>
    </package>
    <package confirmed="yes">
        <name>org.junit.matchers</name>
        <class confirmed="yes">
            <name>org.junit.matchers.JUnitMatchers</name>
            <outbound type="class" confirmed="no">java.lang.Object</outbound>
            <feature confirmed="yes">
                <name>org.junit.matchers.JUnitMatchers.JUnitMatchers()</name>
                <outbound type="feature" confirmed="no">java.lang.Object.Object()</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.junit.matchers.JUnitMatchers.both(org.hamcrest.Matcher)</name>
                <outbound type="class" confirmed="yes">org.hamcrest.Matcher</outbound>
                <outbound type="class" confirmed="yes">org.junit.internal.matchers.CombinableMatcher</outbound>
                <outbound type="feature" confirmed="yes">org.junit.internal.matchers.CombinableMatcher.CombinableMatcher(org.hamcrest.Matcher)</outbound>
                <inbound type="feature" confirmed="yes">org.junit.rules.ExpectedException.expect(org.hamcrest.Matcher)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.junit.matchers.JUnitMatchers.containsString(java.lang.String)</name>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="class" confirmed="yes">org.hamcrest.Matcher</outbound>
                <outbound type="feature" confirmed="yes">org.junit.internal.matchers.StringContains.containsString(java.lang.String)</outbound>
                <inbound type="feature" confirmed="yes">org.junit.rules.ExpectedException.expectMessage(java.lang.String)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.junit.matchers.JUnitMatchers.either(org.hamcrest.Matcher)</name>
                <outbound type="class" confirmed="yes">org.hamcrest.Matcher</outbound>
                <outbound type="class" confirmed="yes">org.junit.internal.matchers.CombinableMatcher</outbound>
                <outbound type="feature" confirmed="yes">org.junit.internal.matchers.CombinableMatcher.CombinableMatcher(org.hamcrest.Matcher)</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.junit.matchers.JUnitMatchers.everyItem(org.hamcrest.Matcher)</name>
                <outbound type="class" confirmed="yes">org.hamcrest.Matcher</outbound>
                <outbound type="feature" confirmed="yes">org.junit.internal.matchers.Each.each(org.hamcrest.Matcher)</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.junit.matchers.JUnitMatchers.hasItem(java.lang.Object)</name>
                <outbound type="class" confirmed="no">java.lang.Object</outbound>
                <outbound type="class" confirmed="yes">org.hamcrest.Matcher</outbound>
                <outbound type="feature" confirmed="yes">org.junit.internal.matchers.IsCollectionContaining.hasItem(java.lang.Object)</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.junit.matchers.JUnitMatchers.hasItem(org.hamcrest.Matcher)</name>
                <outbound type="class" confirmed="yes">org.hamcrest.Matcher</outbound>
                <outbound type="feature" confirmed="yes">org.junit.internal.matchers.IsCollectionContaining.hasItem(org.hamcrest.Matcher)</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.junit.matchers.JUnitMatchers.hasItems(java.lang.Object[])</name>
                <outbound type="class" confirmed="no">java.lang.Object</outbound>
                <outbound type="class" confirmed="yes">org.hamcrest.Matcher</outbound>
                <outbound type="feature" confirmed="yes">org.junit.internal.matchers.IsCollectionContaining.hasItems(java.lang.Object[])</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.junit.matchers.JUnitMatchers.hasItems(org.hamcrest.Matcher[])</name>
                <outbound type="class" confirmed="yes">org.hamcrest.Matcher</outbound>
                <outbound type="feature" confirmed="yes">org.junit.internal.matchers.IsCollectionContaining.hasItems(org.hamcrest.Matcher[])</outbound>
            </feature>
        </class>
        <class confirmed="yes">
            <name>org.junit.matchers.package-info</name>
            <outbound type="class" confirmed="no">java.lang.Object</outbound>
        </class>
    </package>
    <package confirmed="yes">
        <name>org.junit.rules</name>
        <class confirmed="yes">
            <name>org.junit.rules.ErrorCollector</name>
            <outbound type="class" confirmed="yes">org.junit.rules.Verifier</outbound>
            <inbound type="feature" confirmed="yes">org.junit.rules.ErrorCollector$1.ErrorCollector$1(org.junit.rules.ErrorCollector, java.lang.Object, org.hamcrest.Matcher)</inbound>
            <inbound type="feature" confirmed="yes">org.junit.rules.ErrorCollector$1.this$0</inbound>
            <feature confirmed="yes">
                <name>org.junit.rules.ErrorCollector.ErrorCollector()</name>
                <outbound type="feature" confirmed="no">java.util.ArrayList.ArrayList()</outbound>
                <outbound type="class" confirmed="no">java.util.List</outbound>
                <outbound type="feature" confirmed="yes">org.junit.rules.ErrorCollector.errors</outbound>
                <outbound type="feature" confirmed="yes">org.junit.rules.Verifier.Verifier()</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.junit.rules.ErrorCollector.addError(java.lang.Throwable)</name>
                <outbound type="class" confirmed="no">java.lang.Object</outbound>
                <outbound type="class" confirmed="no">java.lang.Throwable</outbound>
                <outbound type="class" confirmed="no">java.util.List</outbound>
                <outbound type="feature" confirmed="no">java.util.List.add(java.lang.Object)</outbound>
                <outbound type="feature" confirmed="yes">org.junit.rules.ErrorCollector.errors</outbound>
                <inbound type="feature" confirmed="yes">org.junit.rules.ErrorCollector.checkSucceeds(java.util.concurrent.Callable)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.junit.rules.ErrorCollector.checkSucceeds(java.util.concurrent.Callable)</name>
                <outbound type="class" confirmed="no">java.lang.Object</outbound>
                <outbound type="class" confirmed="no">java.lang.Throwable</outbound>
                <outbound type="class" confirmed="no">java.util.concurrent.Callable</outbound>
                <outbound type="feature" confirmed="no">java.util.concurrent.Callable.call()</outbound>
                <outbound type="feature" confirmed="yes">org.junit.rules.ErrorCollector.addError(java.lang.Throwable)</outbound>
                <inbound type="feature" confirmed="yes">org.junit.rules.ErrorCollector.checkThat(java.lang.Object, org.hamcrest.Matcher)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.junit.rules.ErrorCollector.checkThat(java.lang.Object, org.hamcrest.Matcher)</name>
                <outbound type="class" confirmed="no">java.lang.Object</outbound>
                <outbound type="class" confirmed="no">java.util.concurrent.Callable</outbound>
                <outbound type="class" confirmed="yes">org.hamcrest.Matcher</outbound>
                <outbound type="feature" confirmed="yes">org.junit.rules.ErrorCollector$1.ErrorCollector$1(org.junit.rules.ErrorCollector, java.lang.Object, org.hamcrest.Matcher)</outbound>
                <outbound type="feature" confirmed="yes">org.junit.rules.ErrorCollector.checkSucceeds(java.util.concurrent.Callable)</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.junit.rules.ErrorCollector.errors</name>
                <outbound type="class" confirmed="no">java.util.List</outbound>
                <inbound type="feature" confirmed="yes">org.junit.rules.ErrorCollector.ErrorCollector()</inbound>
                <inbound type="feature" confirmed="yes">org.junit.rules.ErrorCollector.addError(java.lang.Throwable)</inbound>
                <inbound type="feature" confirmed="yes">org.junit.rules.ErrorCollector.verify()</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.junit.rules.ErrorCollector.verify()</name>
                <outbound type="class" confirmed="no">java.lang.Throwable</outbound>
                <outbound type="class" confirmed="no">java.util.List</outbound>
                <outbound type="feature" confirmed="yes">org.junit.rules.ErrorCollector.errors</outbound>
                <outbound type="feature" confirmed="yes">org.junit.runners.model.MultipleFailureException.assertEmpty(java.util.List)</outbound>
            </feature>
        </class>
        <class confirmed="yes">
            <name>org.junit.rules.ErrorCollector$1</name>
            <outbound type="class" confirmed="no">java.lang.Object</outbound>
            <outbound type="class" confirmed="no">java.util.concurrent.Callable</outbound>
            <feature confirmed="yes">
                <name>org.junit.rules.ErrorCollector$1.ErrorCollector$1(org.junit.rules.ErrorCollector, java.lang.Object, org.hamcrest.Matcher)</name>
                <outbound type="class" confirmed="no">java.lang.Object</outbound>
                <outbound type="feature" confirmed="no">java.lang.Object.Object()</outbound>
                <outbound type="class" confirmed="yes">org.hamcrest.Matcher</outbound>
                <outbound type="class" confirmed="yes">org.junit.rules.ErrorCollector</outbound>
                <outbound type="feature" confirmed="yes">org.junit.rules.ErrorCollector$1.this$0</outbound>
                <outbound type="feature" confirmed="yes">org.junit.rules.ErrorCollector$1.val$matcher</outbound>
                <outbound type="feature" confirmed="yes">org.junit.rules.ErrorCollector$1.val$value</outbound>
                <inbound type="feature" confirmed="yes">org.junit.rules.ErrorCollector.checkThat(java.lang.Object, org.hamcrest.Matcher)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.junit.rules.ErrorCollector$1.call()</name>
                <outbound type="class" confirmed="no">java.lang.Exception</outbound>
                <outbound type="class" confirmed="no">java.lang.Object</outbound>
                <outbound type="class" confirmed="yes">org.hamcrest.Matcher</outbound>
                <outbound type="feature" confirmed="yes">org.junit.Assert.assertThat(java.lang.Object, org.hamcrest.Matcher)</outbound>
                <outbound type="feature" confirmed="yes">org.junit.rules.ErrorCollector$1.val$matcher</outbound>
                <outbound type="feature" confirmed="yes">org.junit.rules.ErrorCollector$1.val$value</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.junit.rules.ErrorCollector$1.this$0</name>
                <outbound type="class" confirmed="yes">org.junit.rules.ErrorCollector</outbound>
                <inbound type="feature" confirmed="yes">org.junit.rules.ErrorCollector$1.ErrorCollector$1(org.junit.rules.ErrorCollector, java.lang.Object, org.hamcrest.Matcher)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.junit.rules.ErrorCollector$1.val$matcher</name>
                <outbound type="class" confirmed="yes">org.hamcrest.Matcher</outbound>
                <inbound type="feature" confirmed="yes">org.junit.rules.ErrorCollector$1.ErrorCollector$1(org.junit.rules.ErrorCollector, java.lang.Object, org.hamcrest.Matcher)</inbound>
                <inbound type="feature" confirmed="yes">org.junit.rules.ErrorCollector$1.call()</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.junit.rules.ErrorCollector$1.val$value</name>
                <outbound type="class" confirmed="no">java.lang.Object</outbound>
                <inbound type="feature" confirmed="yes">org.junit.rules.ErrorCollector$1.ErrorCollector$1(org.junit.rules.ErrorCollector, java.lang.Object, org.hamcrest.Matcher)</inbound>
                <inbound type="feature" confirmed="yes">org.junit.rules.ErrorCollector$1.call()</inbound>
            </feature>
        </class>
        <class confirmed="yes">
            <name>org.junit.rules.ExpectedException</name>
            <outbound type="class" confirmed="no">java.lang.Object</outbound>
            <outbound type="class" confirmed="yes">org.junit.rules.TestRule</outbound>
            <inbound type="feature" confirmed="yes">org.junit.rules.ExpectedException$1.ExpectedException$1(org.junit.rules.ExpectedException, org.hamcrest.Matcher)</inbound>
            <inbound type="feature" confirmed="yes">org.junit.rules.ExpectedException$1.this$0</inbound>
            <inbound type="feature" confirmed="yes">org.junit.rules.ExpectedException$ExpectedExceptionStatement.ExpectedException$ExpectedExceptionStatement(org.junit.rules.ExpectedException, org.junit.runners.model.Statement)</inbound>
            <inbound type="feature" confirmed="yes">org.junit.rules.ExpectedException$ExpectedExceptionStatement.evaluate()</inbound>
            <inbound type="feature" confirmed="yes">org.junit.rules.ExpectedException$ExpectedExceptionStatement.this$0</inbound>
            <feature confirmed="yes">
                <name>org.junit.rules.ExpectedException.ExpectedException()</name>
                <outbound type="feature" confirmed="no">java.lang.Object.Object()</outbound>
                <outbound type="class" confirmed="yes">org.hamcrest.Matcher</outbound>
                <outbound type="feature" confirmed="yes">org.junit.rules.ExpectedException.fMatcher</outbound>
                <inbound type="feature" confirmed="yes">org.junit.rules.ExpectedException.none()</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.junit.rules.ExpectedException.access$000(org.junit.rules.ExpectedException)</name>
                <outbound type="class" confirmed="yes">org.hamcrest.Matcher</outbound>
                <outbound type="feature" confirmed="yes">org.junit.rules.ExpectedException.fMatcher</outbound>
                <inbound type="feature" confirmed="yes">org.junit.rules.ExpectedException$ExpectedExceptionStatement.evaluate()</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.junit.rules.ExpectedException.apply(org.junit.runners.model.Statement, org.junit.runner.Description)</name>
                <outbound type="feature" confirmed="yes">org.junit.rules.ExpectedException$ExpectedExceptionStatement.ExpectedException$ExpectedExceptionStatement(org.junit.rules.ExpectedException, org.junit.runners.model.Statement)</outbound>
                <outbound type="class" confirmed="yes">org.junit.runner.Description</outbound>
                <outbound type="class" confirmed="yes">org.junit.runners.model.Statement</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.junit.rules.ExpectedException.expect(java.lang.Class)</name>
                <outbound type="class" confirmed="no">java.lang.Class</outbound>
                <outbound type="feature" confirmed="yes">org.hamcrest.CoreMatchers.instanceOf(java.lang.Class)</outbound>
                <outbound type="class" confirmed="yes">org.hamcrest.Matcher</outbound>
                <outbound type="feature" confirmed="yes">org.junit.rules.ExpectedException.expect(org.hamcrest.Matcher)</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.junit.rules.ExpectedException.expect(org.hamcrest.Matcher)</name>
                <outbound type="class" confirmed="yes">org.hamcrest.Matcher</outbound>
                <outbound type="class" confirmed="yes">org.junit.internal.matchers.CombinableMatcher</outbound>
                <outbound type="feature" confirmed="yes">org.junit.internal.matchers.CombinableMatcher.and(org.hamcrest.Matcher)</outbound>
                <outbound type="feature" confirmed="yes">org.junit.matchers.JUnitMatchers.both(org.hamcrest.Matcher)</outbound>
                <outbound type="feature" confirmed="yes">org.junit.rules.ExpectedException.fMatcher</outbound>
                <inbound type="feature" confirmed="yes">org.junit.rules.ExpectedException.expect(java.lang.Class)</inbound>
                <inbound type="feature" confirmed="yes">org.junit.rules.ExpectedException.expectMessage(org.hamcrest.Matcher)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.junit.rules.ExpectedException.expectMessage(java.lang.String)</name>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="class" confirmed="yes">org.hamcrest.Matcher</outbound>
                <outbound type="feature" confirmed="yes">org.junit.matchers.JUnitMatchers.containsString(java.lang.String)</outbound>
                <outbound type="feature" confirmed="yes">org.junit.rules.ExpectedException.expectMessage(org.hamcrest.Matcher)</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.junit.rules.ExpectedException.expectMessage(org.hamcrest.Matcher)</name>
                <outbound type="class" confirmed="yes">org.hamcrest.Matcher</outbound>
                <outbound type="feature" confirmed="yes">org.junit.rules.ExpectedException.expect(org.hamcrest.Matcher)</outbound>
                <outbound type="feature" confirmed="yes">org.junit.rules.ExpectedException.hasMessage(org.hamcrest.Matcher)</outbound>
                <inbound type="feature" confirmed="yes">org.junit.rules.ExpectedException.expectMessage(java.lang.String)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.junit.rules.ExpectedException.fMatcher</name>
                <outbound type="class" confirmed="yes">org.hamcrest.Matcher</outbound>
                <inbound type="feature" confirmed="yes">org.junit.rules.ExpectedException.ExpectedException()</inbound>
                <inbound type="feature" confirmed="yes">org.junit.rules.ExpectedException.access$000(org.junit.rules.ExpectedException)</inbound>
                <inbound type="feature" confirmed="yes">org.junit.rules.ExpectedException.expect(org.hamcrest.Matcher)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.junit.rules.ExpectedException.hasMessage(org.hamcrest.Matcher)</name>
                <outbound type="class" confirmed="yes">org.hamcrest.Matcher</outbound>
                <outbound type="feature" confirmed="yes">org.junit.rules.ExpectedException$1.ExpectedException$1(org.junit.rules.ExpectedException, org.hamcrest.Matcher)</outbound>
                <inbound type="feature" confirmed="yes">org.junit.rules.ExpectedException.expectMessage(org.hamcrest.Matcher)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.junit.rules.ExpectedException.none()</name>
                <outbound type="feature" confirmed="yes">org.junit.rules.ExpectedException.ExpectedException()</outbound>
            </feature>
        </class>
        <class confirmed="yes">
            <name>org.junit.rules.ExpectedException$1</name>
            <outbound type="class" confirmed="yes">org.junit.internal.matchers.TypeSafeMatcher</outbound>
            <feature confirmed="yes">
                <name>org.junit.rules.ExpectedException$1.ExpectedException$1(org.junit.rules.ExpectedException, org.hamcrest.Matcher)</name>
                <outbound type="class" confirmed="yes">org.hamcrest.Matcher</outbound>
                <outbound type="feature" confirmed="yes">org.junit.internal.matchers.TypeSafeMatcher.TypeSafeMatcher()</outbound>
                <outbound type="class" confirmed="yes">org.junit.rules.ExpectedException</outbound>
                <outbound type="feature" confirmed="yes">org.junit.rules.ExpectedException$1.this$0</outbound>
                <outbound type="feature" confirmed="yes">org.junit.rules.ExpectedException$1.val$matcher</outbound>
                <inbound type="feature" confirmed="yes">org.junit.rules.ExpectedException.hasMessage(org.hamcrest.Matcher)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.junit.rules.ExpectedException$1.describeTo(org.hamcrest.Description)</name>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="class" confirmed="yes">org.hamcrest.Description</outbound>
                <outbound type="feature" confirmed="yes">org.hamcrest.Description.appendDescriptionOf(org.hamcrest.SelfDescribing)</outbound>
                <outbound type="feature" confirmed="yes">org.hamcrest.Description.appendText(java.lang.String)</outbound>
                <outbound type="class" confirmed="yes">org.hamcrest.Matcher</outbound>
                <outbound type="class" confirmed="yes">org.hamcrest.SelfDescribing</outbound>
                <outbound type="feature" confirmed="yes">org.junit.rules.ExpectedException$1.val$matcher</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.junit.rules.ExpectedException$1.matchesSafely(java.lang.Object)</name>
                <outbound type="class" confirmed="no">java.lang.Object</outbound>
                <outbound type="class" confirmed="no">java.lang.Throwable</outbound>
                <outbound type="feature" confirmed="yes">org.junit.rules.ExpectedException$1.matchesSafely(java.lang.Throwable)</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.junit.rules.ExpectedException$1.matchesSafely(java.lang.Throwable)</name>
                <outbound type="class" confirmed="no">java.lang.Object</outbound>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="class" confirmed="no">java.lang.Throwable</outbound>
                <outbound type="feature" confirmed="no">java.lang.Throwable.getMessage()</outbound>
                <outbound type="class" confirmed="yes">org.hamcrest.Matcher</outbound>
                <outbound type="feature" confirmed="yes">org.hamcrest.Matcher.matches(java.lang.Object)</outbound>
                <outbound type="feature" confirmed="yes">org.junit.rules.ExpectedException$1.val$matcher</outbound>
                <inbound type="feature" confirmed="yes">org.junit.rules.ExpectedException$1.matchesSafely(java.lang.Object)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.junit.rules.ExpectedException$1.this$0</name>
                <outbound type="class" confirmed="yes">org.junit.rules.ExpectedException</outbound>
                <inbound type="feature" confirmed="yes">org.junit.rules.ExpectedException$1.ExpectedException$1(org.junit.rules.ExpectedException, org.hamcrest.Matcher)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.junit.rules.ExpectedException$1.val$matcher</name>
                <outbound type="class" confirmed="yes">org.hamcrest.Matcher</outbound>
                <inbound type="feature" confirmed="yes">org.junit.rules.ExpectedException$1.ExpectedException$1(org.junit.rules.ExpectedException, org.hamcrest.Matcher)</inbound>
                <inbound type="feature" confirmed="yes">org.junit.rules.ExpectedException$1.describeTo(org.hamcrest.Description)</inbound>
                <inbound type="feature" confirmed="yes">org.junit.rules.ExpectedException$1.matchesSafely(java.lang.Throwable)</inbound>
            </feature>
        </class>
        <class confirmed="yes">
            <name>org.junit.rules.ExpectedException$ExpectedExceptionStatement</name>
            <outbound type="class" confirmed="yes">org.junit.runners.model.Statement</outbound>
            <feature confirmed="yes">
                <name>org.junit.rules.ExpectedException$ExpectedExceptionStatement.ExpectedException$ExpectedExceptionStatement(org.junit.rules.ExpectedException, org.junit.runners.model.Statement)</name>
                <outbound type="class" confirmed="yes">org.junit.rules.ExpectedException</outbound>
                <outbound type="feature" confirmed="yes">org.junit.rules.ExpectedException$ExpectedExceptionStatement.fNext</outbound>
                <outbound type="feature" confirmed="yes">org.junit.rules.ExpectedException$ExpectedExceptionStatement.this$0</outbound>
                <outbound type="class" confirmed="yes">org.junit.runners.model.Statement</outbound>
                <outbound type="feature" confirmed="yes">org.junit.runners.model.Statement.Statement()</outbound>
                <inbound type="feature" confirmed="yes">org.junit.rules.ExpectedException.apply(org.junit.runners.model.Statement, org.junit.runner.Description)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.junit.rules.ExpectedException$ExpectedExceptionStatement.evaluate()</name>
                <outbound type="feature" confirmed="no">java.lang.AssertionError.AssertionError(java.lang.Object)</outbound>
                <outbound type="class" confirmed="no">java.lang.Object</outbound>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="class" confirmed="no">java.lang.StringBuilder</outbound>
                <outbound type="feature" confirmed="no">java.lang.StringBuilder.StringBuilder()</outbound>
                <outbound type="feature" confirmed="no">java.lang.StringBuilder.append(java.lang.String)</outbound>
                <outbound type="feature" confirmed="no">java.lang.StringBuilder.toString()</outbound>
                <outbound type="class" confirmed="no">java.lang.Throwable</outbound>
                <outbound type="class" confirmed="yes">org.hamcrest.Matcher</outbound>
                <outbound type="class" confirmed="yes">org.hamcrest.SelfDescribing</outbound>
                <outbound type="feature" confirmed="yes">org.hamcrest.StringDescription.toString(org.hamcrest.SelfDescribing)</outbound>
                <outbound type="feature" confirmed="yes">org.junit.Assert.assertThat(java.lang.Object, org.hamcrest.Matcher)</outbound>
                <outbound type="class" confirmed="yes">org.junit.rules.ExpectedException</outbound>
                <outbound type="feature" confirmed="yes">org.junit.rules.ExpectedException$ExpectedExceptionStatement.fNext</outbound>
                <outbound type="feature" confirmed="yes">org.junit.rules.ExpectedException$ExpectedExceptionStatement.this$0</outbound>
                <outbound type="feature" confirmed="yes">org.junit.rules.ExpectedException.access$000(org.junit.rules.ExpectedException)</outbound>
                <outbound type="class" confirmed="yes">org.junit.runners.model.Statement</outbound>
                <outbound type="feature" confirmed="yes">org.junit.runners.model.Statement.evaluate()</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.junit.rules.ExpectedException$ExpectedExceptionStatement.fNext</name>
                <outbound type="class" confirmed="yes">org.junit.runners.model.Statement</outbound>
                <inbound type="feature" confirmed="yes">org.junit.rules.ExpectedException$ExpectedExceptionStatement.ExpectedException$ExpectedExceptionStatement(org.junit.rules.ExpectedException, org.junit.runners.model.Statement)</inbound>
                <inbound type="feature" confirmed="yes">org.junit.rules.ExpectedException$ExpectedExceptionStatement.evaluate()</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.junit.rules.ExpectedException$ExpectedExceptionStatement.this$0</name>
                <outbound type="class" confirmed="yes">org.junit.rules.ExpectedException</outbound>
                <inbound type="feature" confirmed="yes">org.junit.rules.ExpectedException$ExpectedExceptionStatement.ExpectedException$ExpectedExceptionStatement(org.junit.rules.ExpectedException, org.junit.runners.model.Statement)</inbound>
                <inbound type="feature" confirmed="yes">org.junit.rules.ExpectedException$ExpectedExceptionStatement.evaluate()</inbound>
            </feature>
        </class>
        <class confirmed="yes">
            <name>org.junit.rules.ExternalResource</name>
            <outbound type="class" confirmed="no">java.lang.Object</outbound>
            <outbound type="class" confirmed="yes">org.junit.rules.TestRule</outbound>
            <inbound type="feature" confirmed="yes">org.junit.rules.ExternalResource$1.ExternalResource$1(org.junit.rules.ExternalResource, org.junit.runners.model.Statement)</inbound>
            <inbound type="feature" confirmed="yes">org.junit.rules.ExternalResource$1.evaluate()</inbound>
            <inbound type="feature" confirmed="yes">org.junit.rules.ExternalResource$1.this$0</inbound>
            <inbound type="class" confirmed="yes">org.junit.rules.TemporaryFolder</inbound>
            <feature confirmed="yes">
                <name>org.junit.rules.ExternalResource.ExternalResource()</name>
                <outbound type="feature" confirmed="no">java.lang.Object.Object()</outbound>
                <inbound type="feature" confirmed="yes">org.junit.rules.TemporaryFolder.TemporaryFolder()</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.junit.rules.ExternalResource.after()</name>
                <inbound type="feature" confirmed="yes">org.junit.rules.ExternalResource$1.evaluate()</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.junit.rules.ExternalResource.apply(org.junit.runners.model.Statement, org.junit.runner.Description)</name>
                <outbound type="feature" confirmed="yes">org.junit.rules.ExternalResource.statement(org.junit.runners.model.Statement)</outbound>
                <outbound type="class" confirmed="yes">org.junit.runner.Description</outbound>
                <outbound type="class" confirmed="yes">org.junit.runners.model.Statement</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.junit.rules.ExternalResource.before()</name>
                <outbound type="class" confirmed="no">java.lang.Throwable</outbound>
                <inbound type="feature" confirmed="yes">org.junit.rules.ExternalResource$1.evaluate()</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.junit.rules.ExternalResource.statement(org.junit.runners.model.Statement)</name>
                <outbound type="feature" confirmed="yes">org.junit.rules.ExternalResource$1.ExternalResource$1(org.junit.rules.ExternalResource, org.junit.runners.model.Statement)</outbound>
                <outbound type="class" confirmed="yes">org.junit.runners.model.Statement</outbound>
                <inbound type="feature" confirmed="yes">org.junit.rules.ExternalResource.apply(org.junit.runners.model.Statement, org.junit.runner.Description)</inbound>
            </feature>
        </class>
        <class confirmed="yes">
            <name>org.junit.rules.ExternalResource$1</name>
            <outbound type="class" confirmed="yes">org.junit.runners.model.Statement</outbound>
            <feature confirmed="yes">
                <name>org.junit.rules.ExternalResource$1.ExternalResource$1(org.junit.rules.ExternalResource, org.junit.runners.model.Statement)</name>
                <outbound type="class" confirmed="yes">org.junit.rules.ExternalResource</outbound>
                <outbound type="feature" confirmed="yes">org.junit.rules.ExternalResource$1.this$0</outbound>
                <outbound type="feature" confirmed="yes">org.junit.rules.ExternalResource$1.val$base</outbound>
                <outbound type="class" confirmed="yes">org.junit.runners.model.Statement</outbound>
                <outbound type="feature" confirmed="yes">org.junit.runners.model.Statement.Statement()</outbound>
                <inbound type="feature" confirmed="yes">org.junit.rules.ExternalResource.statement(org.junit.runners.model.Statement)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.junit.rules.ExternalResource$1.evaluate()</name>
                <outbound type="class" confirmed="no">java.lang.Throwable</outbound>
                <outbound type="class" confirmed="yes">org.junit.rules.ExternalResource</outbound>
                <outbound type="feature" confirmed="yes">org.junit.rules.ExternalResource$1.this$0</outbound>
                <outbound type="feature" confirmed="yes">org.junit.rules.ExternalResource$1.val$base</outbound>
                <outbound type="feature" confirmed="yes">org.junit.rules.ExternalResource.after()</outbound>
                <outbound type="feature" confirmed="yes">org.junit.rules.ExternalResource.before()</outbound>
                <outbound type="class" confirmed="yes">org.junit.runners.model.Statement</outbound>
                <outbound type="feature" confirmed="yes">org.junit.runners.model.Statement.evaluate()</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.junit.rules.ExternalResource$1.this$0</name>
                <outbound type="class" confirmed="yes">org.junit.rules.ExternalResource</outbound>
                <inbound type="feature" confirmed="yes">org.junit.rules.ExternalResource$1.ExternalResource$1(org.junit.rules.ExternalResource, org.junit.runners.model.Statement)</inbound>
                <inbound type="feature" confirmed="yes">org.junit.rules.ExternalResource$1.evaluate()</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.junit.rules.ExternalResource$1.val$base</name>
                <outbound type="class" confirmed="yes">org.junit.runners.model.Statement</outbound>
                <inbound type="feature" confirmed="yes">org.junit.rules.ExternalResource$1.ExternalResource$1(org.junit.rules.ExternalResource, org.junit.runners.model.Statement)</inbound>
                <inbound type="feature" confirmed="yes">org.junit.rules.ExternalResource$1.evaluate()</inbound>
            </feature>
        </class>
        <class confirmed="yes">
            <name>org.junit.rules.MethodRule</name>
            <outbound type="class" confirmed="no">java.lang.Object</outbound>
            <inbound type="feature" confirmed="yes">org.junit.internal.runners.rules.RuleFieldValidator.isMethodRule(org.junit.runners.model.FrameworkField)</inbound>
            <inbound type="class" confirmed="yes">org.junit.rules.TestWatchman</inbound>
            <inbound type="feature" confirmed="yes">org.junit.runners.BlockJUnit4ClassRunner.rules(java.lang.Object)</inbound>
            <inbound type="feature" confirmed="yes">org.junit.runners.BlockJUnit4ClassRunner.withMethodRules(org.junit.runners.model.FrameworkMethod, java.lang.Object, org.junit.runners.model.Statement)</inbound>
            <feature confirmed="yes">
                <name>org.junit.rules.MethodRule.apply(org.junit.runners.model.Statement, org.junit.runners.model.FrameworkMethod, java.lang.Object)</name>
                <outbound type="class" confirmed="no">java.lang.Object</outbound>
                <outbound type="class" confirmed="yes">org.junit.runners.model.FrameworkMethod</outbound>
                <outbound type="class" confirmed="yes">org.junit.runners.model.Statement</outbound>
                <inbound type="feature" confirmed="yes">org.junit.runners.BlockJUnit4ClassRunner.withMethodRules(org.junit.runners.model.FrameworkMethod, java.lang.Object, org.junit.runners.model.Statement)</inbound>
            </feature>
        </class>
        <class confirmed="yes">
            <name>org.junit.rules.RunRules</name>
            <outbound type="class" confirmed="yes">org.junit.runners.model.Statement</outbound>
            <feature confirmed="yes">
                <name>org.junit.rules.RunRules.RunRules(org.junit.runners.model.Statement, java.lang.Iterable, org.junit.runner.Description)</name>
                <outbound type="class" confirmed="no">java.lang.Iterable</outbound>
                <outbound type="feature" confirmed="yes">org.junit.rules.RunRules.applyAll(org.junit.runners.model.Statement, java.lang.Iterable, org.junit.runner.Description)</outbound>
                <outbound type="feature" confirmed="yes">org.junit.rules.RunRules.statement</outbound>
                <outbound type="class" confirmed="yes">org.junit.runner.Description</outbound>
                <outbound type="class" confirmed="yes">org.junit.runners.model.Statement</outbound>
                <outbound type="feature" confirmed="yes">org.junit.runners.model.Statement.Statement()</outbound>
                <inbound type="feature" confirmed="yes">org.junit.runners.BlockJUnit4ClassRunner.withTestRules(org.junit.runners.model.FrameworkMethod, java.lang.Object, org.junit.runners.model.Statement)</inbound>
                <inbound type="feature" confirmed="yes">org.junit.runners.ParentRunner.withClassRules(org.junit.runners.model.Statement)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.junit.rules.RunRules.applyAll(org.junit.runners.model.Statement, java.lang.Iterable, org.junit.runner.Description)</name>
                <outbound type="class" confirmed="no">java.lang.Iterable</outbound>
                <outbound type="feature" confirmed="no">java.lang.Iterable.iterator()</outbound>
                <outbound type="class" confirmed="no">java.lang.Object</outbound>
                <outbound type="class" confirmed="no">java.util.Iterator</outbound>
                <outbound type="feature" confirmed="no">java.util.Iterator.hasNext()</outbound>
                <outbound type="feature" confirmed="no">java.util.Iterator.next()</outbound>
                <outbound type="class" confirmed="yes">org.junit.rules.TestRule</outbound>
                <outbound type="feature" confirmed="yes">org.junit.rules.TestRule.apply(org.junit.runners.model.Statement, org.junit.runner.Description)</outbound>
                <outbound type="class" confirmed="yes">org.junit.runner.Description</outbound>
                <outbound type="class" confirmed="yes">org.junit.runners.model.Statement</outbound>
                <inbound type="feature" confirmed="yes">org.junit.rules.RunRules.RunRules(org.junit.runners.model.Statement, java.lang.Iterable, org.junit.runner.Description)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.junit.rules.RunRules.evaluate()</name>
                <outbound type="class" confirmed="no">java.lang.Throwable</outbound>
                <outbound type="feature" confirmed="yes">org.junit.rules.RunRules.statement</outbound>
                <outbound type="class" confirmed="yes">org.junit.runners.model.Statement</outbound>
                <outbound type="feature" confirmed="yes">org.junit.runners.model.Statement.evaluate()</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.junit.rules.RunRules.statement</name>
                <outbound type="class" confirmed="yes">org.junit.runners.model.Statement</outbound>
                <inbound type="feature" confirmed="yes">org.junit.rules.RunRules.RunRules(org.junit.runners.model.Statement, java.lang.Iterable, org.junit.runner.Description)</inbound>
                <inbound type="feature" confirmed="yes">org.junit.rules.RunRules.evaluate()</inbound>
            </feature>
        </class>
        <class confirmed="yes">
            <name>org.junit.rules.TemporaryFolder</name>
            <outbound type="class" confirmed="yes">org.junit.rules.ExternalResource</outbound>
            <feature confirmed="yes">
                <name>org.junit.rules.TemporaryFolder.TemporaryFolder()</name>
                <outbound type="feature" confirmed="yes">org.junit.rules.ExternalResource.ExternalResource()</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.junit.rules.TemporaryFolder.after()</name>
                <outbound type="feature" confirmed="yes">org.junit.rules.TemporaryFolder.delete()</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.junit.rules.TemporaryFolder.before()</name>
                <outbound type="class" confirmed="no">java.lang.Throwable</outbound>
                <outbound type="feature" confirmed="yes">org.junit.rules.TemporaryFolder.create()</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.junit.rules.TemporaryFolder.create()</name>
                <outbound type="class" confirmed="no">java.io.File</outbound>
                <outbound type="feature" confirmed="no">java.io.File.createTempFile(java.lang.String, java.lang.String)</outbound>
                <outbound type="feature" confirmed="no">java.io.File.delete()</outbound>
                <outbound type="feature" confirmed="no">java.io.File.mkdir()</outbound>
                <outbound type="class" confirmed="no">java.io.IOException</outbound>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="feature" confirmed="yes">org.junit.rules.TemporaryFolder.folder</outbound>
                <inbound type="feature" confirmed="yes">org.junit.rules.TemporaryFolder.before()</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.junit.rules.TemporaryFolder.delete()</name>
                <outbound type="class" confirmed="no">java.io.File</outbound>
                <outbound type="feature" confirmed="yes">org.junit.rules.TemporaryFolder.folder</outbound>
                <outbound type="feature" confirmed="yes">org.junit.rules.TemporaryFolder.recursiveDelete(java.io.File)</outbound>
                <inbound type="feature" confirmed="yes">org.junit.rules.TemporaryFolder.after()</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.junit.rules.TemporaryFolder.folder</name>
                <outbound type="class" confirmed="no">java.io.File</outbound>
                <inbound type="feature" confirmed="yes">org.junit.rules.TemporaryFolder.create()</inbound>
                <inbound type="feature" confirmed="yes">org.junit.rules.TemporaryFolder.delete()</inbound>
                <inbound type="feature" confirmed="yes">org.junit.rules.TemporaryFolder.getRoot()</inbound>
                <inbound type="feature" confirmed="yes">org.junit.rules.TemporaryFolder.newFile(java.lang.String)</inbound>
                <inbound type="feature" confirmed="yes">org.junit.rules.TemporaryFolder.newFolder(java.lang.String)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.junit.rules.TemporaryFolder.getRoot()</name>
                <outbound type="class" confirmed="no">java.io.File</outbound>
                <outbound type="feature" confirmed="yes">org.junit.rules.TemporaryFolder.folder</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.junit.rules.TemporaryFolder.newFile(java.lang.String)</name>
                <outbound type="class" confirmed="no">java.io.File</outbound>
                <outbound type="feature" confirmed="no">java.io.File.File(java.io.File, java.lang.String)</outbound>
                <outbound type="feature" confirmed="no">java.io.File.createNewFile()</outbound>
                <outbound type="class" confirmed="no">java.io.IOException</outbound>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="feature" confirmed="yes">org.junit.rules.TemporaryFolder.folder</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.junit.rules.TemporaryFolder.newFolder(java.lang.String)</name>
                <outbound type="class" confirmed="no">java.io.File</outbound>
                <outbound type="feature" confirmed="no">java.io.File.File(java.io.File, java.lang.String)</outbound>
                <outbound type="feature" confirmed="no">java.io.File.mkdir()</outbound>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="feature" confirmed="yes">org.junit.rules.TemporaryFolder.folder</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.junit.rules.TemporaryFolder.recursiveDelete(java.io.File)</name>
                <outbound type="class" confirmed="no">java.io.File</outbound>
                <outbound type="feature" confirmed="no">java.io.File.delete()</outbound>
                <outbound type="feature" confirmed="no">java.io.File.listFiles()</outbound>
                <inbound type="feature" confirmed="yes">org.junit.rules.TemporaryFolder.delete()</inbound>
            </feature>
        </class>
        <class confirmed="yes">
            <name>org.junit.rules.TestName</name>
            <outbound type="class" confirmed="yes">org.junit.rules.TestWatcher</outbound>
            <feature confirmed="yes">
                <name>org.junit.rules.TestName.TestName()</name>
                <outbound type="feature" confirmed="yes">org.junit.rules.TestWatcher.TestWatcher()</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.junit.rules.TestName.fName</name>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <inbound type="feature" confirmed="yes">org.junit.rules.TestName.getMethodName()</inbound>
                <inbound type="feature" confirmed="yes">org.junit.rules.TestName.starting(org.junit.runner.Description)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.junit.rules.TestName.getMethodName()</name>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="feature" confirmed="yes">org.junit.rules.TestName.fName</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.junit.rules.TestName.starting(org.junit.runner.Description)</name>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="feature" confirmed="yes">org.junit.rules.TestName.fName</outbound>
                <outbound type="class" confirmed="yes">org.junit.runner.Description</outbound>
                <outbound type="feature" confirmed="yes">org.junit.runner.Description.getMethodName()</outbound>
            </feature>
        </class>
        <class confirmed="yes">
            <name>org.junit.rules.TestRule</name>
            <outbound type="class" confirmed="no">java.lang.Object</outbound>
            <inbound type="feature" confirmed="yes">org.junit.internal.runners.rules.RuleFieldValidator.isTestRule(org.junit.runners.model.FrameworkField)</inbound>
            <inbound type="class" confirmed="yes">org.junit.rules.ExpectedException</inbound>
            <inbound type="class" confirmed="yes">org.junit.rules.ExternalResource</inbound>
            <inbound type="feature" confirmed="yes">org.junit.rules.RunRules.applyAll(org.junit.runners.model.Statement, java.lang.Iterable, org.junit.runner.Description)</inbound>
            <inbound type="class" confirmed="yes">org.junit.rules.TestWatcher</inbound>
            <inbound type="class" confirmed="yes">org.junit.rules.Timeout</inbound>
            <inbound type="class" confirmed="yes">org.junit.rules.Verifier</inbound>
            <inbound type="feature" confirmed="yes">org.junit.runners.BlockJUnit4ClassRunner.getTestRules(java.lang.Object)</inbound>
            <inbound type="feature" confirmed="yes">org.junit.runners.ParentRunner.classRules()</inbound>
            <feature confirmed="yes">
                <name>org.junit.rules.TestRule.apply(org.junit.runners.model.Statement, org.junit.runner.Description)</name>
                <outbound type="class" confirmed="yes">org.junit.runner.Description</outbound>
                <outbound type="class" confirmed="yes">org.junit.runners.model.Statement</outbound>
                <inbound type="feature" confirmed="yes">org.junit.rules.RunRules.applyAll(org.junit.runners.model.Statement, java.lang.Iterable, org.junit.runner.Description)</inbound>
            </feature>
        </class>
        <class confirmed="yes">
            <name>org.junit.rules.TestWatcher</name>
            <outbound type="class" confirmed="no">java.lang.Object</outbound>
            <outbound type="class" confirmed="yes">org.junit.rules.TestRule</outbound>
            <inbound type="class" confirmed="yes">org.junit.rules.TestName</inbound>
            <inbound type="feature" confirmed="yes">org.junit.rules.TestWatcher$1.TestWatcher$1(org.junit.rules.TestWatcher, org.junit.runner.Description, org.junit.runners.model.Statement)</inbound>
            <inbound type="feature" confirmed="yes">org.junit.rules.TestWatcher$1.evaluate()</inbound>
            <inbound type="feature" confirmed="yes">org.junit.rules.TestWatcher$1.this$0</inbound>
            <feature confirmed="yes">
                <name>org.junit.rules.TestWatcher.TestWatcher()</name>
                <outbound type="feature" confirmed="no">java.lang.Object.Object()</outbound>
                <inbound type="feature" confirmed="yes">org.junit.rules.TestName.TestName()</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.junit.rules.TestWatcher.apply(org.junit.runners.model.Statement, org.junit.runner.Description)</name>
                <outbound type="feature" confirmed="yes">org.junit.rules.TestWatcher$1.TestWatcher$1(org.junit.rules.TestWatcher, org.junit.runner.Description, org.junit.runners.model.Statement)</outbound>
                <outbound type="class" confirmed="yes">org.junit.runner.Description</outbound>
                <outbound type="class" confirmed="yes">org.junit.runners.model.Statement</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.junit.rules.TestWatcher.failed(java.lang.Throwable, org.junit.runner.Description)</name>
                <outbound type="class" confirmed="no">java.lang.Throwable</outbound>
                <outbound type="class" confirmed="yes">org.junit.runner.Description</outbound>
                <inbound type="feature" confirmed="yes">org.junit.rules.TestWatcher$1.evaluate()</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.junit.rules.TestWatcher.finished(org.junit.runner.Description)</name>
                <outbound type="class" confirmed="yes">org.junit.runner.Description</outbound>
                <inbound type="feature" confirmed="yes">org.junit.rules.TestWatcher$1.evaluate()</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.junit.rules.TestWatcher.starting(org.junit.runner.Description)</name>
                <outbound type="class" confirmed="yes">org.junit.runner.Description</outbound>
                <inbound type="feature" confirmed="yes">org.junit.rules.TestWatcher$1.evaluate()</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.junit.rules.TestWatcher.succeeded(org.junit.runner.Description)</name>
                <outbound type="class" confirmed="yes">org.junit.runner.Description</outbound>
                <inbound type="feature" confirmed="yes">org.junit.rules.TestWatcher$1.evaluate()</inbound>
            </feature>
        </class>
        <class confirmed="yes">
            <name>org.junit.rules.TestWatcher$1</name>
            <outbound type="class" confirmed="yes">org.junit.runners.model.Statement</outbound>
            <feature confirmed="yes">
                <name>org.junit.rules.TestWatcher$1.TestWatcher$1(org.junit.rules.TestWatcher, org.junit.runner.Description, org.junit.runners.model.Statement)</name>
                <outbound type="class" confirmed="yes">org.junit.rules.TestWatcher</outbound>
                <outbound type="feature" confirmed="yes">org.junit.rules.TestWatcher$1.this$0</outbound>
                <outbound type="feature" confirmed="yes">org.junit.rules.TestWatcher$1.val$base</outbound>
                <outbound type="feature" confirmed="yes">org.junit.rules.TestWatcher$1.val$description</outbound>
                <outbound type="class" confirmed="yes">org.junit.runner.Description</outbound>
                <outbound type="class" confirmed="yes">org.junit.runners.model.Statement</outbound>
                <outbound type="feature" confirmed="yes">org.junit.runners.model.Statement.Statement()</outbound>
                <inbound type="feature" confirmed="yes">org.junit.rules.TestWatcher.apply(org.junit.runners.model.Statement, org.junit.runner.Description)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.junit.rules.TestWatcher$1.evaluate()</name>
                <outbound type="class" confirmed="no">java.lang.Throwable</outbound>
                <outbound type="class" confirmed="yes">org.junit.rules.TestWatcher</outbound>
                <outbound type="feature" confirmed="yes">org.junit.rules.TestWatcher$1.this$0</outbound>
                <outbound type="feature" confirmed="yes">org.junit.rules.TestWatcher$1.val$base</outbound>
                <outbound type="feature" confirmed="yes">org.junit.rules.TestWatcher$1.val$description</outbound>
                <outbound type="feature" confirmed="yes">org.junit.rules.TestWatcher.failed(java.lang.Throwable, org.junit.runner.Description)</outbound>
                <outbound type="feature" confirmed="yes">org.junit.rules.TestWatcher.finished(org.junit.runner.Description)</outbound>
                <outbound type="feature" confirmed="yes">org.junit.rules.TestWatcher.starting(org.junit.runner.Description)</outbound>
                <outbound type="feature" confirmed="yes">org.junit.rules.TestWatcher.succeeded(org.junit.runner.Description)</outbound>
                <outbound type="class" confirmed="yes">org.junit.runner.Description</outbound>
                <outbound type="class" confirmed="yes">org.junit.runners.model.Statement</outbound>
                <outbound type="feature" confirmed="yes">org.junit.runners.model.Statement.evaluate()</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.junit.rules.TestWatcher$1.this$0</name>
                <outbound type="class" confirmed="yes">org.junit.rules.TestWatcher</outbound>
                <inbound type="feature" confirmed="yes">org.junit.rules.TestWatcher$1.TestWatcher$1(org.junit.rules.TestWatcher, org.junit.runner.Description, org.junit.runners.model.Statement)</inbound>
                <inbound type="feature" confirmed="yes">org.junit.rules.TestWatcher$1.evaluate()</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.junit.rules.TestWatcher$1.val$base</name>
                <outbound type="class" confirmed="yes">org.junit.runners.model.Statement</outbound>
                <inbound type="feature" confirmed="yes">org.junit.rules.TestWatcher$1.TestWatcher$1(org.junit.rules.TestWatcher, org.junit.runner.Description, org.junit.runners.model.Statement)</inbound>
                <inbound type="feature" confirmed="yes">org.junit.rules.TestWatcher$1.evaluate()</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.junit.rules.TestWatcher$1.val$description</name>
                <outbound type="class" confirmed="yes">org.junit.runner.Description</outbound>
                <inbound type="feature" confirmed="yes">org.junit.rules.TestWatcher$1.TestWatcher$1(org.junit.rules.TestWatcher, org.junit.runner.Description, org.junit.runners.model.Statement)</inbound>
                <inbound type="feature" confirmed="yes">org.junit.rules.TestWatcher$1.evaluate()</inbound>
            </feature>
        </class>
        <class confirmed="yes">
            <name>org.junit.rules.TestWatchman</name>
            <outbound type="class" confirmed="no">java.lang.Object</outbound>
            <outbound type="class" confirmed="yes">org.junit.rules.MethodRule</outbound>
            <inbound type="feature" confirmed="yes">org.junit.rules.TestWatchman$1.TestWatchman$1(org.junit.rules.TestWatchman, org.junit.runners.model.FrameworkMethod, org.junit.runners.model.Statement)</inbound>
            <inbound type="feature" confirmed="yes">org.junit.rules.TestWatchman$1.evaluate()</inbound>
            <inbound type="feature" confirmed="yes">org.junit.rules.TestWatchman$1.this$0</inbound>
            <feature confirmed="yes">
                <name>org.junit.rules.TestWatchman.TestWatchman()</name>
                <outbound type="feature" confirmed="no">java.lang.Object.Object()</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.junit.rules.TestWatchman.apply(org.junit.runners.model.Statement, org.junit.runners.model.FrameworkMethod, java.lang.Object)</name>
                <outbound type="class" confirmed="no">java.lang.Object</outbound>
                <outbound type="feature" confirmed="yes">org.junit.rules.TestWatchman$1.TestWatchman$1(org.junit.rules.TestWatchman, org.junit.runners.model.FrameworkMethod, org.junit.runners.model.Statement)</outbound>
                <outbound type="class" confirmed="yes">org.junit.runners.model.FrameworkMethod</outbound>
                <outbound type="class" confirmed="yes">org.junit.runners.model.Statement</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.junit.rules.TestWatchman.failed(java.lang.Throwable, org.junit.runners.model.FrameworkMethod)</name>
                <outbound type="class" confirmed="no">java.lang.Throwable</outbound>
                <outbound type="class" confirmed="yes">org.junit.runners.model.FrameworkMethod</outbound>
                <inbound type="feature" confirmed="yes">org.junit.rules.TestWatchman$1.evaluate()</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.junit.rules.TestWatchman.finished(org.junit.runners.model.FrameworkMethod)</name>
                <outbound type="class" confirmed="yes">org.junit.runners.model.FrameworkMethod</outbound>
                <inbound type="feature" confirmed="yes">org.junit.rules.TestWatchman$1.evaluate()</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.junit.rules.TestWatchman.starting(org.junit.runners.model.FrameworkMethod)</name>
                <outbound type="class" confirmed="yes">org.junit.runners.model.FrameworkMethod</outbound>
                <inbound type="feature" confirmed="yes">org.junit.rules.TestWatchman$1.evaluate()</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.junit.rules.TestWatchman.succeeded(org.junit.runners.model.FrameworkMethod)</name>
                <outbound type="class" confirmed="yes">org.junit.runners.model.FrameworkMethod</outbound>
                <inbound type="feature" confirmed="yes">org.junit.rules.TestWatchman$1.evaluate()</inbound>
            </feature>
        </class>
        <class confirmed="yes">
            <name>org.junit.rules.TestWatchman$1</name>
            <outbound type="class" confirmed="yes">org.junit.runners.model.Statement</outbound>
            <feature confirmed="yes">
                <name>org.junit.rules.TestWatchman$1.TestWatchman$1(org.junit.rules.TestWatchman, org.junit.runners.model.FrameworkMethod, org.junit.runners.model.Statement)</name>
                <outbound type="class" confirmed="yes">org.junit.rules.TestWatchman</outbound>
                <outbound type="feature" confirmed="yes">org.junit.rules.TestWatchman$1.this$0</outbound>
                <outbound type="feature" confirmed="yes">org.junit.rules.TestWatchman$1.val$base</outbound>
                <outbound type="feature" confirmed="yes">org.junit.rules.TestWatchman$1.val$method</outbound>
                <outbound type="class" confirmed="yes">org.junit.runners.model.FrameworkMethod</outbound>
                <outbound type="class" confirmed="yes">org.junit.runners.model.Statement</outbound>
                <outbound type="feature" confirmed="yes">org.junit.runners.model.Statement.Statement()</outbound>
                <inbound type="feature" confirmed="yes">org.junit.rules.TestWatchman.apply(org.junit.runners.model.Statement, org.junit.runners.model.FrameworkMethod, java.lang.Object)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.junit.rules.TestWatchman$1.evaluate()</name>
                <outbound type="class" confirmed="no">java.lang.Throwable</outbound>
                <outbound type="class" confirmed="yes">org.junit.rules.TestWatchman</outbound>
                <outbound type="feature" confirmed="yes">org.junit.rules.TestWatchman$1.this$0</outbound>
                <outbound type="feature" confirmed="yes">org.junit.rules.TestWatchman$1.val$base</outbound>
                <outbound type="feature" confirmed="yes">org.junit.rules.TestWatchman$1.val$method</outbound>
                <outbound type="feature" confirmed="yes">org.junit.rules.TestWatchman.failed(java.lang.Throwable, org.junit.runners.model.FrameworkMethod)</outbound>
                <outbound type="feature" confirmed="yes">org.junit.rules.TestWatchman.finished(org.junit.runners.model.FrameworkMethod)</outbound>
                <outbound type="feature" confirmed="yes">org.junit.rules.TestWatchman.starting(org.junit.runners.model.FrameworkMethod)</outbound>
                <outbound type="feature" confirmed="yes">org.junit.rules.TestWatchman.succeeded(org.junit.runners.model.FrameworkMethod)</outbound>
                <outbound type="class" confirmed="yes">org.junit.runners.model.FrameworkMethod</outbound>
                <outbound type="class" confirmed="yes">org.junit.runners.model.Statement</outbound>
                <outbound type="feature" confirmed="yes">org.junit.runners.model.Statement.evaluate()</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.junit.rules.TestWatchman$1.this$0</name>
                <outbound type="class" confirmed="yes">org.junit.rules.TestWatchman</outbound>
                <inbound type="feature" confirmed="yes">org.junit.rules.TestWatchman$1.TestWatchman$1(org.junit.rules.TestWatchman, org.junit.runners.model.FrameworkMethod, org.junit.runners.model.Statement)</inbound>
                <inbound type="feature" confirmed="yes">org.junit.rules.TestWatchman$1.evaluate()</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.junit.rules.TestWatchman$1.val$base</name>
                <outbound type="class" confirmed="yes">org.junit.runners.model.Statement</outbound>
                <inbound type="feature" confirmed="yes">org.junit.rules.TestWatchman$1.TestWatchman$1(org.junit.rules.TestWatchman, org.junit.runners.model.FrameworkMethod, org.junit.runners.model.Statement)</inbound>
                <inbound type="feature" confirmed="yes">org.junit.rules.TestWatchman$1.evaluate()</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.junit.rules.TestWatchman$1.val$method</name>
                <outbound type="class" confirmed="yes">org.junit.runners.model.FrameworkMethod</outbound>
                <inbound type="feature" confirmed="yes">org.junit.rules.TestWatchman$1.TestWatchman$1(org.junit.rules.TestWatchman, org.junit.runners.model.FrameworkMethod, org.junit.runners.model.Statement)</inbound>
                <inbound type="feature" confirmed="yes">org.junit.rules.TestWatchman$1.evaluate()</inbound>
            </feature>
        </class>
        <class confirmed="yes">
            <name>org.junit.rules.Timeout</name>
            <outbound type="class" confirmed="no">java.lang.Object</outbound>
            <outbound type="class" confirmed="yes">org.junit.rules.TestRule</outbound>
            <feature confirmed="yes">
                <name>org.junit.rules.Timeout.Timeout(int)</name>
                <outbound type="feature" confirmed="no">java.lang.Object.Object()</outbound>
                <outbound type="feature" confirmed="yes">org.junit.rules.Timeout.fMillis</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.junit.rules.Timeout.apply(org.junit.runners.model.Statement, org.junit.runner.Description)</name>
                <outbound type="feature" confirmed="yes">org.junit.internal.runners.statements.FailOnTimeout.FailOnTimeout(org.junit.runners.model.Statement, long)</outbound>
                <outbound type="feature" confirmed="yes">org.junit.rules.Timeout.fMillis</outbound>
                <outbound type="class" confirmed="yes">org.junit.runner.Description</outbound>
                <outbound type="class" confirmed="yes">org.junit.runners.model.Statement</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.junit.rules.Timeout.fMillis</name>
                <inbound type="feature" confirmed="yes">org.junit.rules.Timeout.Timeout(int)</inbound>
                <inbound type="feature" confirmed="yes">org.junit.rules.Timeout.apply(org.junit.runners.model.Statement, org.junit.runner.Description)</inbound>
            </feature>
        </class>
        <class confirmed="yes">
            <name>org.junit.rules.Verifier</name>
            <outbound type="class" confirmed="no">java.lang.Object</outbound>
            <outbound type="class" confirmed="yes">org.junit.rules.TestRule</outbound>
            <inbound type="class" confirmed="yes">org.junit.rules.ErrorCollector</inbound>
            <inbound type="feature" confirmed="yes">org.junit.rules.Verifier$1.Verifier$1(org.junit.rules.Verifier, org.junit.runners.model.Statement)</inbound>
            <inbound type="feature" confirmed="yes">org.junit.rules.Verifier$1.evaluate()</inbound>
            <inbound type="feature" confirmed="yes">org.junit.rules.Verifier$1.this$0</inbound>
            <feature confirmed="yes">
                <name>org.junit.rules.Verifier.Verifier()</name>
                <outbound type="feature" confirmed="no">java.lang.Object.Object()</outbound>
                <inbound type="feature" confirmed="yes">org.junit.rules.ErrorCollector.ErrorCollector()</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.junit.rules.Verifier.apply(org.junit.runners.model.Statement, org.junit.runner.Description)</name>
                <outbound type="feature" confirmed="yes">org.junit.rules.Verifier$1.Verifier$1(org.junit.rules.Verifier, org.junit.runners.model.Statement)</outbound>
                <outbound type="class" confirmed="yes">org.junit.runner.Description</outbound>
                <outbound type="class" confirmed="yes">org.junit.runners.model.Statement</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.junit.rules.Verifier.verify()</name>
                <outbound type="class" confirmed="no">java.lang.Throwable</outbound>
                <inbound type="feature" confirmed="yes">org.junit.rules.Verifier$1.evaluate()</inbound>
            </feature>
        </class>
        <class confirmed="yes">
            <name>org.junit.rules.Verifier$1</name>
            <outbound type="class" confirmed="yes">org.junit.runners.model.Statement</outbound>
            <feature confirmed="yes">
                <name>org.junit.rules.Verifier$1.Verifier$1(org.junit.rules.Verifier, org.junit.runners.model.Statement)</name>
                <outbound type="class" confirmed="yes">org.junit.rules.Verifier</outbound>
                <outbound type="feature" confirmed="yes">org.junit.rules.Verifier$1.this$0</outbound>
                <outbound type="feature" confirmed="yes">org.junit.rules.Verifier$1.val$base</outbound>
                <outbound type="class" confirmed="yes">org.junit.runners.model.Statement</outbound>
                <outbound type="feature" confirmed="yes">org.junit.runners.model.Statement.Statement()</outbound>
                <inbound type="feature" confirmed="yes">org.junit.rules.Verifier.apply(org.junit.runners.model.Statement, org.junit.runner.Description)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.junit.rules.Verifier$1.evaluate()</name>
                <outbound type="class" confirmed="no">java.lang.Throwable</outbound>
                <outbound type="class" confirmed="yes">org.junit.rules.Verifier</outbound>
                <outbound type="feature" confirmed="yes">org.junit.rules.Verifier$1.this$0</outbound>
                <outbound type="feature" confirmed="yes">org.junit.rules.Verifier$1.val$base</outbound>
                <outbound type="feature" confirmed="yes">org.junit.rules.Verifier.verify()</outbound>
                <outbound type="class" confirmed="yes">org.junit.runners.model.Statement</outbound>
                <outbound type="feature" confirmed="yes">org.junit.runners.model.Statement.evaluate()</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.junit.rules.Verifier$1.this$0</name>
                <outbound type="class" confirmed="yes">org.junit.rules.Verifier</outbound>
                <inbound type="feature" confirmed="yes">org.junit.rules.Verifier$1.Verifier$1(org.junit.rules.Verifier, org.junit.runners.model.Statement)</inbound>
                <inbound type="feature" confirmed="yes">org.junit.rules.Verifier$1.evaluate()</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.junit.rules.Verifier$1.val$base</name>
                <outbound type="class" confirmed="yes">org.junit.runners.model.Statement</outbound>
                <inbound type="feature" confirmed="yes">org.junit.rules.Verifier$1.Verifier$1(org.junit.rules.Verifier, org.junit.runners.model.Statement)</inbound>
                <inbound type="feature" confirmed="yes">org.junit.rules.Verifier$1.evaluate()</inbound>
            </feature>
        </class>
    </package>
    <package confirmed="yes">
        <name>org.junit.runner</name>
        <class confirmed="yes">
            <name>org.junit.runner.Computer</name>
            <outbound type="class" confirmed="no">java.lang.Object</outbound>
            <inbound type="class" confirmed="yes">org.junit.experimental.ParallelComputer</inbound>
            <inbound type="feature" confirmed="yes">org.junit.experimental.ParallelComputer.classes()</inbound>
            <inbound type="feature" confirmed="yes">org.junit.experimental.ParallelComputer.methods()</inbound>
            <inbound type="feature" confirmed="yes">org.junit.runner.Computer$1.Computer$1(org.junit.runner.Computer, org.junit.runners.model.RunnerBuilder)</inbound>
            <inbound type="feature" confirmed="yes">org.junit.runner.Computer$1.runnerForClass(java.lang.Class)</inbound>
            <inbound type="feature" confirmed="yes">org.junit.runner.Computer$1.this$0</inbound>
            <inbound type="feature" confirmed="yes">org.junit.runner.JUnitCore.defaultComputer()</inbound>
            <inbound type="feature" confirmed="yes">org.junit.runner.JUnitCore.run(java.lang.Class[])</inbound>
            <inbound type="feature" confirmed="yes">org.junit.runner.JUnitCore.run(org.junit.runner.Computer, java.lang.Class[])</inbound>
            <inbound type="feature" confirmed="yes">org.junit.runner.JUnitCore.runClasses(java.lang.Class[])</inbound>
            <inbound type="feature" confirmed="yes">org.junit.runner.JUnitCore.runClasses(org.junit.runner.Computer, java.lang.Class[])</inbound>
            <inbound type="feature" confirmed="yes">org.junit.runner.Request.classes(java.lang.Class[])</inbound>
            <inbound type="feature" confirmed="yes">org.junit.runner.Request.classes(org.junit.runner.Computer, java.lang.Class[])</inbound>
            <feature confirmed="yes">
                <name>org.junit.runner.Computer.Computer()</name>
                <outbound type="feature" confirmed="no">java.lang.Object.Object()</outbound>
                <inbound type="feature" confirmed="yes">org.junit.experimental.ParallelComputer.ParallelComputer(boolean, boolean)</inbound>
                <inbound type="feature" confirmed="yes">org.junit.runner.Computer.serial()</inbound>
                <inbound type="feature" confirmed="yes">org.junit.runner.JUnitCore.defaultComputer()</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.junit.runner.Computer.getRunner(org.junit.runners.model.RunnerBuilder, java.lang.Class)</name>
                <outbound type="class" confirmed="no">java.lang.Class</outbound>
                <outbound type="class" confirmed="no">java.lang.Throwable</outbound>
                <outbound type="class" confirmed="yes">org.junit.runner.Runner</outbound>
                <outbound type="class" confirmed="yes">org.junit.runners.model.RunnerBuilder</outbound>
                <outbound type="feature" confirmed="yes">org.junit.runners.model.RunnerBuilder.runnerForClass(java.lang.Class)</outbound>
                <inbound type="feature" confirmed="yes">org.junit.experimental.ParallelComputer.getRunner(org.junit.runners.model.RunnerBuilder, java.lang.Class)</inbound>
                <inbound type="feature" confirmed="yes">org.junit.runner.Computer$1.runnerForClass(java.lang.Class)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.junit.runner.Computer.getSuite(org.junit.runners.model.RunnerBuilder, java.lang.Class[])</name>
                <outbound type="class" confirmed="no">java.lang.Class</outbound>
                <outbound type="feature" confirmed="yes">org.junit.runner.Computer$1.Computer$1(org.junit.runner.Computer, org.junit.runners.model.RunnerBuilder)</outbound>
                <outbound type="class" confirmed="yes">org.junit.runner.Runner</outbound>
                <outbound type="feature" confirmed="yes">org.junit.runners.Suite.Suite(org.junit.runners.model.RunnerBuilder, java.lang.Class[])</outbound>
                <outbound type="class" confirmed="yes">org.junit.runners.model.InitializationError</outbound>
                <outbound type="class" confirmed="yes">org.junit.runners.model.RunnerBuilder</outbound>
                <inbound type="feature" confirmed="yes">org.junit.experimental.ParallelComputer.getSuite(org.junit.runners.model.RunnerBuilder, java.lang.Class[])</inbound>
                <inbound type="feature" confirmed="yes">org.junit.runner.Request.classes(org.junit.runner.Computer, java.lang.Class[])</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.junit.runner.Computer.serial()</name>
                <outbound type="feature" confirmed="yes">org.junit.runner.Computer.Computer()</outbound>
            </feature>
        </class>
        <class confirmed="yes">
            <name>org.junit.runner.Computer$1</name>
            <outbound type="class" confirmed="yes">org.junit.runners.model.RunnerBuilder</outbound>
            <feature confirmed="yes">
                <name>org.junit.runner.Computer$1.Computer$1(org.junit.runner.Computer, org.junit.runners.model.RunnerBuilder)</name>
                <outbound type="class" confirmed="yes">org.junit.runner.Computer</outbound>
                <outbound type="feature" confirmed="yes">org.junit.runner.Computer$1.this$0</outbound>
                <outbound type="feature" confirmed="yes">org.junit.runner.Computer$1.val$builder</outbound>
                <outbound type="class" confirmed="yes">org.junit.runners.model.RunnerBuilder</outbound>
                <outbound type="feature" confirmed="yes">org.junit.runners.model.RunnerBuilder.RunnerBuilder()</outbound>
                <inbound type="feature" confirmed="yes">org.junit.runner.Computer.getSuite(org.junit.runners.model.RunnerBuilder, java.lang.Class[])</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.junit.runner.Computer$1.runnerForClass(java.lang.Class)</name>
                <outbound type="class" confirmed="no">java.lang.Class</outbound>
                <outbound type="class" confirmed="no">java.lang.Throwable</outbound>
                <outbound type="class" confirmed="yes">org.junit.runner.Computer</outbound>
                <outbound type="feature" confirmed="yes">org.junit.runner.Computer$1.this$0</outbound>
                <outbound type="feature" confirmed="yes">org.junit.runner.Computer$1.val$builder</outbound>
                <outbound type="feature" confirmed="yes">org.junit.runner.Computer.getRunner(org.junit.runners.model.RunnerBuilder, java.lang.Class)</outbound>
                <outbound type="class" confirmed="yes">org.junit.runner.Runner</outbound>
                <outbound type="class" confirmed="yes">org.junit.runners.model.RunnerBuilder</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.junit.runner.Computer$1.this$0</name>
                <outbound type="class" confirmed="yes">org.junit.runner.Computer</outbound>
                <inbound type="feature" confirmed="yes">org.junit.runner.Computer$1.Computer$1(org.junit.runner.Computer, org.junit.runners.model.RunnerBuilder)</inbound>
                <inbound type="feature" confirmed="yes">org.junit.runner.Computer$1.runnerForClass(java.lang.Class)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.junit.runner.Computer$1.val$builder</name>
                <outbound type="class" confirmed="yes">org.junit.runners.model.RunnerBuilder</outbound>
                <inbound type="feature" confirmed="yes">org.junit.runner.Computer$1.Computer$1(org.junit.runner.Computer, org.junit.runners.model.RunnerBuilder)</inbound>
                <inbound type="feature" confirmed="yes">org.junit.runner.Computer$1.runnerForClass(java.lang.Class)</inbound>
            </feature>
        </class>
        <class confirmed="yes">
            <name>org.junit.runner.Describable</name>
            <outbound type="class" confirmed="no">java.lang.Object</outbound>
            <inbound type="class" confirmed="yes">junit.framework.JUnit4TestAdapter</inbound>
            <inbound type="class" confirmed="yes">junit.framework.JUnit4TestCaseFacade</inbound>
            <inbound type="feature" confirmed="yes">org.junit.internal.runners.JUnit38ClassRunner$OldTestClassAdaptingListener.asDescription(junit.framework.Test)</inbound>
            <inbound type="feature" confirmed="yes">org.junit.internal.runners.JUnit38ClassRunner.makeDescription(junit.framework.Test)</inbound>
            <inbound type="class" confirmed="yes">org.junit.runner.Runner</inbound>
            <feature confirmed="yes">
                <name>org.junit.runner.Describable.getDescription()</name>
                <outbound type="class" confirmed="yes">org.junit.runner.Description</outbound>
                <inbound type="feature" confirmed="yes">org.junit.internal.runners.JUnit38ClassRunner$OldTestClassAdaptingListener.asDescription(junit.framework.Test)</inbound>
                <inbound type="feature" confirmed="yes">org.junit.internal.runners.JUnit38ClassRunner.makeDescription(junit.framework.Test)</inbound>
            </feature>
        </class>
        <class confirmed="yes">
            <name>org.junit.runner.Description</name>
            <outbound type="class" confirmed="no">java.lang.Object</outbound>
            <inbound type="feature" confirmed="yes">junit.framework.JUnit4TestAdapter.getDescription()</inbound>
            <inbound type="feature" confirmed="yes">junit.framework.JUnit4TestAdapter.getTests()</inbound>
            <inbound type="feature" confirmed="yes">junit.framework.JUnit4TestAdapter.isIgnored(org.junit.runner.Description)</inbound>
            <inbound type="feature" confirmed="yes">junit.framework.JUnit4TestAdapter.removeIgnored(org.junit.runner.Description)</inbound>
            <inbound type="feature" confirmed="yes">junit.framework.JUnit4TestAdapterCache$1.testFailure(org.junit.runner.notification.Failure)</inbound>
            <inbound type="feature" confirmed="yes">junit.framework.JUnit4TestAdapterCache$1.testFinished(org.junit.runner.Description)</inbound>
            <inbound type="feature" confirmed="yes">junit.framework.JUnit4TestAdapterCache$1.testStarted(org.junit.runner.Description)</inbound>
            <inbound type="feature" confirmed="yes">junit.framework.JUnit4TestAdapterCache.asTest(org.junit.runner.Description)</inbound>
            <inbound type="feature" confirmed="yes">junit.framework.JUnit4TestAdapterCache.asTestList(org.junit.runner.Description)</inbound>
            <inbound type="feature" confirmed="yes">junit.framework.JUnit4TestAdapterCache.createTest(org.junit.runner.Description)</inbound>
            <inbound type="feature" confirmed="yes">junit.framework.JUnit4TestCaseFacade.JUnit4TestCaseFacade(org.junit.runner.Description)</inbound>
            <inbound type="feature" confirmed="yes">junit.framework.JUnit4TestCaseFacade.fDescription</inbound>
            <inbound type="feature" confirmed="yes">junit.framework.JUnit4TestCaseFacade.getDescription()</inbound>
            <inbound type="feature" confirmed="yes">junit.framework.JUnit4TestCaseFacade.toString()</inbound>
            <inbound type="feature" confirmed="yes">org.junit.experimental.categories.Categories$CategoryFilter.categories(org.junit.runner.Description)</inbound>
            <inbound type="feature" confirmed="yes">org.junit.experimental.categories.Categories$CategoryFilter.directCategories(org.junit.runner.Description)</inbound>
            <inbound type="feature" confirmed="yes">org.junit.experimental.categories.Categories$CategoryFilter.hasCorrectCategoryAnnotation(org.junit.runner.Description)</inbound>
            <inbound type="feature" confirmed="yes">org.junit.experimental.categories.Categories$CategoryFilter.parentDescription(org.junit.runner.Description)</inbound>
            <inbound type="feature" confirmed="yes">org.junit.experimental.categories.Categories$CategoryFilter.shouldRun(org.junit.runner.Description)</inbound>
            <inbound type="feature" confirmed="yes">org.junit.experimental.categories.Categories.Categories(java.lang.Class, org.junit.runners.model.RunnerBuilder)</inbound>
            <inbound type="feature" confirmed="yes">org.junit.experimental.categories.Categories.assertNoCategorizedDescendentsOfUncategorizeableParents(org.junit.runner.Description)</inbound>
            <inbound type="feature" confirmed="yes">org.junit.experimental.categories.Categories.assertNoDescendantsHaveCategoryAnnotations(org.junit.runner.Description)</inbound>
            <inbound type="feature" confirmed="yes">org.junit.experimental.categories.Categories.canHaveCategorizedChildren(org.junit.runner.Description)</inbound>
            <inbound type="feature" confirmed="yes">org.junit.experimental.max.MaxCore.buildRunner(org.junit.runner.Description)</inbound>
            <inbound type="feature" confirmed="yes">org.junit.experimental.max.MaxCore.constructLeafRequest(java.util.List)</inbound>
            <inbound type="feature" confirmed="yes">org.junit.experimental.max.MaxCore.findLeaves(org.junit.runner.Description, org.junit.runner.Description, java.util.List)</inbound>
            <inbound type="feature" confirmed="yes">org.junit.experimental.max.MaxCore.findLeaves(org.junit.runner.Request)</inbound>
            <inbound type="feature" confirmed="yes">org.junit.experimental.max.MaxCore.getMalformedTestClass(org.junit.runner.Description)</inbound>
            <inbound type="feature" confirmed="yes">org.junit.experimental.max.MaxHistory$RememberingListener.testFailure(org.junit.runner.notification.Failure)</inbound>
            <inbound type="feature" confirmed="yes">org.junit.experimental.max.MaxHistory$RememberingListener.testFinished(org.junit.runner.Description)</inbound>
            <inbound type="feature" confirmed="yes">org.junit.experimental.max.MaxHistory$RememberingListener.testStarted(org.junit.runner.Description)</inbound>
            <inbound type="feature" confirmed="yes">org.junit.experimental.max.MaxHistory$TestComparator.compare(java.lang.Object, java.lang.Object)</inbound>
            <inbound type="feature" confirmed="yes">org.junit.experimental.max.MaxHistory$TestComparator.compare(org.junit.runner.Description, org.junit.runner.Description)</inbound>
            <inbound type="feature" confirmed="yes">org.junit.experimental.max.MaxHistory$TestComparator.getFailure(org.junit.runner.Description)</inbound>
            <inbound type="feature" confirmed="yes">org.junit.experimental.max.MaxHistory.getFailureTimestamp(org.junit.runner.Description)</inbound>
            <inbound type="feature" confirmed="yes">org.junit.experimental.max.MaxHistory.getTestDuration(org.junit.runner.Description)</inbound>
            <inbound type="feature" confirmed="yes">org.junit.experimental.max.MaxHistory.isNewTest(org.junit.runner.Description)</inbound>
            <inbound type="feature" confirmed="yes">org.junit.experimental.max.MaxHistory.putTestDuration(org.junit.runner.Description, long)</inbound>
            <inbound type="feature" confirmed="yes">org.junit.experimental.max.MaxHistory.putTestFailureTimestamp(org.junit.runner.Description, long)</inbound>
            <inbound type="feature" confirmed="yes">org.junit.internal.TextListener.testIgnored(org.junit.runner.Description)</inbound>
            <inbound type="feature" confirmed="yes">org.junit.internal.TextListener.testStarted(org.junit.runner.Description)</inbound>
            <inbound type="feature" confirmed="yes">org.junit.internal.builders.IgnoredClassRunner.getDescription()</inbound>
            <inbound type="feature" confirmed="yes">org.junit.internal.builders.IgnoredClassRunner.run(org.junit.runner.notification.RunNotifier)</inbound>
            <inbound type="feature" confirmed="yes">org.junit.internal.runners.ClassRoadie.ClassRoadie(org.junit.runner.notification.RunNotifier, org.junit.internal.runners.TestClass, org.junit.runner.Description, java.lang.Runnable)</inbound>
            <inbound type="feature" confirmed="yes">org.junit.internal.runners.ClassRoadie.addFailure(java.lang.Throwable)</inbound>
            <inbound type="feature" confirmed="yes">org.junit.internal.runners.ClassRoadie.fDescription</inbound>
            <inbound type="feature" confirmed="yes">org.junit.internal.runners.ErrorReportingRunner.describeCause(java.lang.Throwable)</inbound>
            <inbound type="feature" confirmed="yes">org.junit.internal.runners.ErrorReportingRunner.getDescription()</inbound>
            <inbound type="feature" confirmed="yes">org.junit.internal.runners.ErrorReportingRunner.runCause(java.lang.Throwable, org.junit.runner.notification.RunNotifier)</inbound>
            <inbound type="feature" confirmed="yes">org.junit.internal.runners.JUnit38ClassRunner$OldTestClassAdaptingListener.addError(junit.framework.Test, java.lang.Throwable)</inbound>
            <inbound type="feature" confirmed="yes">org.junit.internal.runners.JUnit38ClassRunner$OldTestClassAdaptingListener.asDescription(junit.framework.Test)</inbound>
            <inbound type="feature" confirmed="yes">org.junit.internal.runners.JUnit38ClassRunner$OldTestClassAdaptingListener.endTest(junit.framework.Test)</inbound>
            <inbound type="feature" confirmed="yes">org.junit.internal.runners.JUnit38ClassRunner$OldTestClassAdaptingListener.startTest(junit.framework.Test)</inbound>
            <inbound type="feature" confirmed="yes">org.junit.internal.runners.JUnit38ClassRunner.filter(org.junit.runner.manipulation.Filter)</inbound>
            <inbound type="feature" confirmed="yes">org.junit.internal.runners.JUnit38ClassRunner.getDescription()</inbound>
            <inbound type="feature" confirmed="yes">org.junit.internal.runners.JUnit38ClassRunner.makeDescription(junit.framework.Test)</inbound>
            <inbound type="feature" confirmed="yes">org.junit.internal.runners.JUnit4ClassRunner$2.compare(java.lang.reflect.Method, java.lang.reflect.Method)</inbound>
            <inbound type="feature" confirmed="yes">org.junit.internal.runners.JUnit4ClassRunner.filter(org.junit.runner.manipulation.Filter)</inbound>
            <inbound type="feature" confirmed="yes">org.junit.internal.runners.JUnit4ClassRunner.getDescription()</inbound>
            <inbound type="feature" confirmed="yes">org.junit.internal.runners.JUnit4ClassRunner.invokeTestMethod(java.lang.reflect.Method, org.junit.runner.notification.RunNotifier)</inbound>
            <inbound type="feature" confirmed="yes">org.junit.internal.runners.JUnit4ClassRunner.methodDescription(java.lang.reflect.Method)</inbound>
            <inbound type="feature" confirmed="yes">org.junit.internal.runners.JUnit4ClassRunner.run(org.junit.runner.notification.RunNotifier)</inbound>
            <inbound type="feature" confirmed="yes">org.junit.internal.runners.JUnit4ClassRunner.testAborted(org.junit.runner.notification.RunNotifier, org.junit.runner.Description, java.lang.Throwable)</inbound>
            <inbound type="feature" confirmed="yes">org.junit.internal.runners.MethodRoadie.MethodRoadie(java.lang.Object, org.junit.internal.runners.TestMethod, org.junit.runner.notification.RunNotifier, org.junit.runner.Description)</inbound>
            <inbound type="feature" confirmed="yes">org.junit.internal.runners.MethodRoadie.addFailure(java.lang.Throwable)</inbound>
            <inbound type="feature" confirmed="yes">org.junit.internal.runners.MethodRoadie.fDescription</inbound>
            <inbound type="feature" confirmed="yes">org.junit.internal.runners.MethodRoadie.run()</inbound>
            <inbound type="feature" confirmed="yes">org.junit.internal.runners.model.EachTestNotifier.EachTestNotifier(org.junit.runner.notification.RunNotifier, org.junit.runner.Description)</inbound>
            <inbound type="feature" confirmed="yes">org.junit.internal.runners.model.EachTestNotifier.addFailedAssumption(org.junit.internal.AssumptionViolatedException)</inbound>
            <inbound type="feature" confirmed="yes">org.junit.internal.runners.model.EachTestNotifier.addFailure(java.lang.Throwable)</inbound>
            <inbound type="feature" confirmed="yes">org.junit.internal.runners.model.EachTestNotifier.fDescription</inbound>
            <inbound type="feature" confirmed="yes">org.junit.internal.runners.model.EachTestNotifier.fireTestFinished()</inbound>
            <inbound type="feature" confirmed="yes">org.junit.internal.runners.model.EachTestNotifier.fireTestIgnored()</inbound>
            <inbound type="feature" confirmed="yes">org.junit.internal.runners.model.EachTestNotifier.fireTestStarted()</inbound>
            <inbound type="feature" confirmed="yes">org.junit.rules.ExpectedException.apply(org.junit.runners.model.Statement, org.junit.runner.Description)</inbound>
            <inbound type="feature" confirmed="yes">org.junit.rules.ExternalResource.apply(org.junit.runners.model.Statement, org.junit.runner.Description)</inbound>
            <inbound type="feature" confirmed="yes">org.junit.rules.RunRules.RunRules(org.junit.runners.model.Statement, java.lang.Iterable, org.junit.runner.Description)</inbound>
            <inbound type="feature" confirmed="yes">org.junit.rules.RunRules.applyAll(org.junit.runners.model.Statement, java.lang.Iterable, org.junit.runner.Description)</inbound>
            <inbound type="feature" confirmed="yes">org.junit.rules.TestName.starting(org.junit.runner.Description)</inbound>
            <inbound type="feature" confirmed="yes">org.junit.rules.TestRule.apply(org.junit.runners.model.Statement, org.junit.runner.Description)</inbound>
            <inbound type="feature" confirmed="yes">org.junit.rules.TestWatcher$1.TestWatcher$1(org.junit.rules.TestWatcher, org.junit.runner.Description, org.junit.runners.model.Statement)</inbound>
            <inbound type="feature" confirmed="yes">org.junit.rules.TestWatcher$1.evaluate()</inbound>
            <inbound type="feature" confirmed="yes">org.junit.rules.TestWatcher$1.val$description</inbound>
            <inbound type="feature" confirmed="yes">org.junit.rules.TestWatcher.apply(org.junit.runners.model.Statement, org.junit.runner.Description)</inbound>
            <inbound type="feature" confirmed="yes">org.junit.rules.TestWatcher.failed(java.lang.Throwable, org.junit.runner.Description)</inbound>
            <inbound type="feature" confirmed="yes">org.junit.rules.TestWatcher.finished(org.junit.runner.Description)</inbound>
            <inbound type="feature" confirmed="yes">org.junit.rules.TestWatcher.starting(org.junit.runner.Description)</inbound>
            <inbound type="feature" confirmed="yes">org.junit.rules.TestWatcher.succeeded(org.junit.runner.Description)</inbound>
            <inbound type="feature" confirmed="yes">org.junit.rules.Timeout.apply(org.junit.runners.model.Statement, org.junit.runner.Description)</inbound>
            <inbound type="feature" confirmed="yes">org.junit.rules.Verifier.apply(org.junit.runners.model.Statement, org.junit.runner.Description)</inbound>
            <inbound type="feature" confirmed="yes">org.junit.runner.Describable.getDescription()</inbound>
            <inbound type="feature" confirmed="yes">org.junit.runner.JUnitCore.run(org.junit.runner.Runner)</inbound>
            <inbound type="feature" confirmed="yes">org.junit.runner.JUnitCore.runMain(org.junit.internal.JUnitSystem, java.lang.String[])</inbound>
            <inbound type="feature" confirmed="yes">org.junit.runner.Request.filterWith(org.junit.runner.Description)</inbound>
            <inbound type="feature" confirmed="yes">org.junit.runner.Request.method(java.lang.Class, java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">org.junit.runner.Result$Listener.testFinished(org.junit.runner.Description)</inbound>
            <inbound type="feature" confirmed="yes">org.junit.runner.Result$Listener.testIgnored(org.junit.runner.Description)</inbound>
            <inbound type="feature" confirmed="yes">org.junit.runner.Result$Listener.testRunStarted(org.junit.runner.Description)</inbound>
            <inbound type="feature" confirmed="yes">org.junit.runner.Runner.getDescription()</inbound>
            <inbound type="feature" confirmed="yes">org.junit.runner.Runner.testCount()</inbound>
            <inbound type="feature" confirmed="yes">org.junit.runner.manipulation.Filter$1.shouldRun(org.junit.runner.Description)</inbound>
            <inbound type="feature" confirmed="yes">org.junit.runner.manipulation.Filter$2.Filter$2(org.junit.runner.Description)</inbound>
            <inbound type="feature" confirmed="yes">org.junit.runner.manipulation.Filter$2.describe()</inbound>
            <inbound type="feature" confirmed="yes">org.junit.runner.manipulation.Filter$2.shouldRun(org.junit.runner.Description)</inbound>
            <inbound type="feature" confirmed="yes">org.junit.runner.manipulation.Filter$2.val$desiredDescription</inbound>
            <inbound type="feature" confirmed="yes">org.junit.runner.manipulation.Filter$3.shouldRun(org.junit.runner.Description)</inbound>
            <inbound type="feature" confirmed="yes">org.junit.runner.manipulation.Filter.matchMethodDescription(org.junit.runner.Description)</inbound>
            <inbound type="feature" confirmed="yes">org.junit.runner.manipulation.Filter.shouldRun(org.junit.runner.Description)</inbound>
            <inbound type="feature" confirmed="yes">org.junit.runner.manipulation.Sorter$1.compare(java.lang.Object, java.lang.Object)</inbound>
            <inbound type="feature" confirmed="yes">org.junit.runner.manipulation.Sorter$1.compare(org.junit.runner.Description, org.junit.runner.Description)</inbound>
            <inbound type="feature" confirmed="yes">org.junit.runner.manipulation.Sorter.compare(java.lang.Object, java.lang.Object)</inbound>
            <inbound type="feature" confirmed="yes">org.junit.runner.manipulation.Sorter.compare(org.junit.runner.Description, org.junit.runner.Description)</inbound>
            <inbound type="feature" confirmed="yes">org.junit.runner.notification.Failure.Failure(org.junit.runner.Description, java.lang.Throwable)</inbound>
            <inbound type="feature" confirmed="yes">org.junit.runner.notification.Failure.fDescription</inbound>
            <inbound type="feature" confirmed="yes">org.junit.runner.notification.Failure.getDescription()</inbound>
            <inbound type="feature" confirmed="yes">org.junit.runner.notification.Failure.getTestHeader()</inbound>
            <inbound type="feature" confirmed="yes">org.junit.runner.notification.RunListener.testFinished(org.junit.runner.Description)</inbound>
            <inbound type="feature" confirmed="yes">org.junit.runner.notification.RunListener.testIgnored(org.junit.runner.Description)</inbound>
            <inbound type="feature" confirmed="yes">org.junit.runner.notification.RunListener.testRunStarted(org.junit.runner.Description)</inbound>
            <inbound type="feature" confirmed="yes">org.junit.runner.notification.RunListener.testStarted(org.junit.runner.Description)</inbound>
            <inbound type="feature" confirmed="yes">org.junit.runner.notification.RunNotifier$1.RunNotifier$1(org.junit.runner.notification.RunNotifier, org.junit.runner.Description)</inbound>
            <inbound type="feature" confirmed="yes">org.junit.runner.notification.RunNotifier$1.notifyListener(org.junit.runner.notification.RunListener)</inbound>
            <inbound type="feature" confirmed="yes">org.junit.runner.notification.RunNotifier$1.val$description</inbound>
            <inbound type="feature" confirmed="yes">org.junit.runner.notification.RunNotifier$3.RunNotifier$3(org.junit.runner.notification.RunNotifier, org.junit.runner.Description)</inbound>
            <inbound type="feature" confirmed="yes">org.junit.runner.notification.RunNotifier$3.notifyListener(org.junit.runner.notification.RunListener)</inbound>
            <inbound type="feature" confirmed="yes">org.junit.runner.notification.RunNotifier$3.val$description</inbound>
            <inbound type="feature" confirmed="yes">org.junit.runner.notification.RunNotifier$6.RunNotifier$6(org.junit.runner.notification.RunNotifier, org.junit.runner.Description)</inbound>
            <inbound type="feature" confirmed="yes">org.junit.runner.notification.RunNotifier$6.notifyListener(org.junit.runner.notification.RunListener)</inbound>
            <inbound type="feature" confirmed="yes">org.junit.runner.notification.RunNotifier$6.val$description</inbound>
            <inbound type="feature" confirmed="yes">org.junit.runner.notification.RunNotifier$7.RunNotifier$7(org.junit.runner.notification.RunNotifier, org.junit.runner.Description)</inbound>
            <inbound type="feature" confirmed="yes">org.junit.runner.notification.RunNotifier$7.notifyListener(org.junit.runner.notification.RunListener)</inbound>
            <inbound type="feature" confirmed="yes">org.junit.runner.notification.RunNotifier$7.val$description</inbound>
            <inbound type="feature" confirmed="yes">org.junit.runner.notification.RunNotifier$SafeNotifier.run()</inbound>
            <inbound type="feature" confirmed="yes">org.junit.runner.notification.RunNotifier.fireTestFinished(org.junit.runner.Description)</inbound>
            <inbound type="feature" confirmed="yes">org.junit.runner.notification.RunNotifier.fireTestIgnored(org.junit.runner.Description)</inbound>
            <inbound type="feature" confirmed="yes">org.junit.runner.notification.RunNotifier.fireTestRunStarted(org.junit.runner.Description)</inbound>
            <inbound type="feature" confirmed="yes">org.junit.runner.notification.RunNotifier.fireTestStarted(org.junit.runner.Description)</inbound>
            <inbound type="feature" confirmed="yes">org.junit.runners.BlockJUnit4ClassRunner.describeChild(java.lang.Object)</inbound>
            <inbound type="feature" confirmed="yes">org.junit.runners.BlockJUnit4ClassRunner.describeChild(org.junit.runners.model.FrameworkMethod)</inbound>
            <inbound type="feature" confirmed="yes">org.junit.runners.BlockJUnit4ClassRunner.runChild(org.junit.runners.model.FrameworkMethod, org.junit.runner.notification.RunNotifier)</inbound>
            <inbound type="feature" confirmed="yes">org.junit.runners.BlockJUnit4ClassRunner.withTestRules(org.junit.runners.model.FrameworkMethod, java.lang.Object, org.junit.runners.model.Statement)</inbound>
            <inbound type="feature" confirmed="yes">org.junit.runners.ParentRunner$4.compare(java.lang.Object, java.lang.Object)</inbound>
            <inbound type="feature" confirmed="yes">org.junit.runners.ParentRunner.describeChild(java.lang.Object)</inbound>
            <inbound type="feature" confirmed="yes">org.junit.runners.ParentRunner.getDescription()</inbound>
            <inbound type="feature" confirmed="yes">org.junit.runners.ParentRunner.run(org.junit.runner.notification.RunNotifier)</inbound>
            <inbound type="feature" confirmed="yes">org.junit.runners.ParentRunner.runLeaf(org.junit.runners.model.Statement, org.junit.runner.Description, org.junit.runner.notification.RunNotifier)</inbound>
            <inbound type="feature" confirmed="yes">org.junit.runners.ParentRunner.shouldRun(org.junit.runner.manipulation.Filter, java.lang.Object)</inbound>
            <inbound type="feature" confirmed="yes">org.junit.runners.ParentRunner.withClassRules(org.junit.runners.model.Statement)</inbound>
            <inbound type="feature" confirmed="yes">org.junit.runners.Suite.describeChild(java.lang.Object)</inbound>
            <inbound type="feature" confirmed="yes">org.junit.runners.Suite.describeChild(org.junit.runner.Runner)</inbound>
            <feature confirmed="yes">
                <name>org.junit.runner.Description.Description(java.lang.String, java.lang.annotation.Annotation[])</name>
                <outbound type="feature" confirmed="no">java.lang.Object.Object()</outbound>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="class" confirmed="no">java.lang.annotation.Annotation</outbound>
                <outbound type="class" confirmed="no">java.util.ArrayList</outbound>
                <outbound type="feature" confirmed="no">java.util.ArrayList.ArrayList()</outbound>
                <outbound type="feature" confirmed="yes">org.junit.runner.Description.fAnnotations</outbound>
                <outbound type="feature" confirmed="yes">org.junit.runner.Description.fChildren</outbound>
                <outbound type="feature" confirmed="yes">org.junit.runner.Description.fDisplayName</outbound>
                <inbound type="feature" confirmed="yes">org.junit.runner.Description.childlessCopy()</inbound>
                <inbound type="feature" confirmed="yes">org.junit.runner.Description.createSuiteDescription(java.lang.Class)</inbound>
                <inbound type="feature" confirmed="yes">org.junit.runner.Description.createSuiteDescription(java.lang.String, java.lang.annotation.Annotation[])</inbound>
                <inbound type="feature" confirmed="yes">org.junit.runner.Description.createTestDescription(java.lang.Class, java.lang.String, java.lang.annotation.Annotation[])</inbound>
                <inbound type="feature" confirmed="yes">org.junit.runner.Description.static {}</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.junit.runner.Description.EMPTY</name>
                <inbound type="feature" confirmed="yes">junit.framework.JUnit4TestAdapter.removeIgnored(org.junit.runner.Description)</inbound>
                <inbound type="feature" confirmed="yes">org.junit.runner.Description.isEmpty()</inbound>
                <inbound type="feature" confirmed="yes">org.junit.runner.Description.static {}</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.junit.runner.Description.TEST_MECHANISM</name>
                <inbound type="feature" confirmed="yes">org.junit.runner.Description.static {}</inbound>
                <inbound type="feature" confirmed="yes">org.junit.runner.notification.RunNotifier$SafeNotifier.run()</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.junit.runner.Description.addChild(org.junit.runner.Description)</name>
                <outbound type="class" confirmed="no">java.lang.Object</outbound>
                <outbound type="class" confirmed="no">java.util.ArrayList</outbound>
                <outbound type="feature" confirmed="no">java.util.ArrayList.add(java.lang.Object)</outbound>
                <outbound type="feature" confirmed="yes">org.junit.runner.Description.getChildren()</outbound>
                <inbound type="feature" confirmed="yes">junit.framework.JUnit4TestAdapter.removeIgnored(org.junit.runner.Description)</inbound>
                <inbound type="feature" confirmed="yes">org.junit.internal.runners.ErrorReportingRunner.getDescription()</inbound>
                <inbound type="feature" confirmed="yes">org.junit.internal.runners.JUnit38ClassRunner.makeDescription(junit.framework.Test)</inbound>
                <inbound type="feature" confirmed="yes">org.junit.internal.runners.JUnit4ClassRunner.getDescription()</inbound>
                <inbound type="feature" confirmed="yes">org.junit.runners.ParentRunner.getDescription()</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.junit.runner.Description.childlessCopy()</name>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="class" confirmed="no">java.lang.annotation.Annotation</outbound>
                <outbound type="feature" confirmed="yes">org.junit.runner.Description.Description(java.lang.String, java.lang.annotation.Annotation[])</outbound>
                <outbound type="feature" confirmed="yes">org.junit.runner.Description.fAnnotations</outbound>
                <outbound type="feature" confirmed="yes">org.junit.runner.Description.fDisplayName</outbound>
                <inbound type="feature" confirmed="yes">junit.framework.JUnit4TestAdapter.removeIgnored(org.junit.runner.Description)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.junit.runner.Description.createSuiteDescription(java.lang.Class)</name>
                <outbound type="class" confirmed="no">java.lang.Class</outbound>
                <outbound type="feature" confirmed="no">java.lang.Class.getAnnotations()</outbound>
                <outbound type="feature" confirmed="no">java.lang.Class.getName()</outbound>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="class" confirmed="no">java.lang.annotation.Annotation</outbound>
                <outbound type="feature" confirmed="yes">org.junit.runner.Description.Description(java.lang.String, java.lang.annotation.Annotation[])</outbound>
                <inbound type="feature" confirmed="yes">org.junit.experimental.categories.Categories$CategoryFilter.parentDescription(org.junit.runner.Description)</inbound>
                <inbound type="feature" confirmed="yes">org.junit.internal.builders.IgnoredClassRunner.getDescription()</inbound>
                <inbound type="feature" confirmed="yes">org.junit.internal.runners.ErrorReportingRunner.getDescription()</inbound>
                <inbound type="feature" confirmed="yes">org.junit.internal.runners.JUnit38ClassRunner.makeDescription(junit.framework.Test)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.junit.runner.Description.createSuiteDescription(java.lang.String, java.lang.annotation.Annotation[])</name>
                <outbound type="feature" confirmed="no">java.lang.IllegalArgumentException.IllegalArgumentException(java.lang.String)</outbound>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="feature" confirmed="no">java.lang.String.length()</outbound>
                <outbound type="class" confirmed="no">java.lang.annotation.Annotation</outbound>
                <outbound type="feature" confirmed="yes">org.junit.runner.Description.Description(java.lang.String, java.lang.annotation.Annotation[])</outbound>
                <inbound type="feature" confirmed="yes">org.junit.experimental.max.MaxCore.findLeaves(org.junit.runner.Description, org.junit.runner.Description, java.util.List)</inbound>
                <inbound type="feature" confirmed="yes">org.junit.internal.runners.JUnit38ClassRunner.makeDescription(junit.framework.Test)</inbound>
                <inbound type="feature" confirmed="yes">org.junit.internal.runners.JUnit4ClassRunner.getDescription()</inbound>
                <inbound type="feature" confirmed="yes">org.junit.runner.JUnitCore.runMain(org.junit.internal.JUnitSystem, java.lang.String[])</inbound>
                <inbound type="feature" confirmed="yes">org.junit.runners.ParentRunner.getDescription()</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.junit.runner.Description.createTestDescription(java.lang.Class, java.lang.String)</name>
                <outbound type="class" confirmed="no">java.lang.Class</outbound>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="class" confirmed="no">java.lang.annotation.Annotation</outbound>
                <outbound type="feature" confirmed="yes">org.junit.runner.Description.createTestDescription(java.lang.Class, java.lang.String, java.lang.annotation.Annotation[])</outbound>
                <inbound type="feature" confirmed="yes">org.junit.internal.runners.ErrorReportingRunner.describeCause(java.lang.Throwable)</inbound>
                <inbound type="feature" confirmed="yes">org.junit.internal.runners.JUnit38ClassRunner$OldTestClassAdaptingListener.asDescription(junit.framework.Test)</inbound>
                <inbound type="feature" confirmed="yes">org.junit.internal.runners.JUnit38ClassRunner.makeDescription(junit.framework.Test)</inbound>
                <inbound type="feature" confirmed="yes">org.junit.runner.Request.method(java.lang.Class, java.lang.String)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.junit.runner.Description.createTestDescription(java.lang.Class, java.lang.String, java.lang.annotation.Annotation[])</name>
                <outbound type="class" confirmed="no">java.lang.Class</outbound>
                <outbound type="feature" confirmed="no">java.lang.Class.getName()</outbound>
                <outbound type="class" confirmed="no">java.lang.Object</outbound>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="feature" confirmed="no">java.lang.String.format(java.lang.String, java.lang.Object[])</outbound>
                <outbound type="class" confirmed="no">java.lang.annotation.Annotation</outbound>
                <outbound type="feature" confirmed="yes">org.junit.runner.Description.Description(java.lang.String, java.lang.annotation.Annotation[])</outbound>
                <inbound type="feature" confirmed="yes">org.junit.internal.runners.JUnit4ClassRunner.methodDescription(java.lang.reflect.Method)</inbound>
                <inbound type="feature" confirmed="yes">org.junit.runner.Description.createTestDescription(java.lang.Class, java.lang.String)</inbound>
                <inbound type="feature" confirmed="yes">org.junit.runners.BlockJUnit4ClassRunner.describeChild(org.junit.runners.model.FrameworkMethod)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.junit.runner.Description.equals(java.lang.Object)</name>
                <outbound type="class" confirmed="no">java.lang.Object</outbound>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="feature" confirmed="no">java.lang.String.equals(java.lang.Object)</outbound>
                <outbound type="feature" confirmed="yes">org.junit.runner.Description.getDisplayName()</outbound>
                <inbound type="feature" confirmed="yes">org.junit.runner.Description.isEmpty()</inbound>
                <inbound type="feature" confirmed="yes">org.junit.runner.manipulation.Filter$2.shouldRun(org.junit.runner.Description)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.junit.runner.Description.fAnnotations</name>
                <outbound type="class" confirmed="no">java.lang.annotation.Annotation</outbound>
                <inbound type="feature" confirmed="yes">org.junit.runner.Description.Description(java.lang.String, java.lang.annotation.Annotation[])</inbound>
                <inbound type="feature" confirmed="yes">org.junit.runner.Description.childlessCopy()</inbound>
                <inbound type="feature" confirmed="yes">org.junit.runner.Description.getAnnotation(java.lang.Class)</inbound>
                <inbound type="feature" confirmed="yes">org.junit.runner.Description.getAnnotations()</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.junit.runner.Description.fChildren</name>
                <outbound type="class" confirmed="no">java.util.ArrayList</outbound>
                <inbound type="feature" confirmed="yes">org.junit.runner.Description.Description(java.lang.String, java.lang.annotation.Annotation[])</inbound>
                <inbound type="feature" confirmed="yes">org.junit.runner.Description.getChildren()</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.junit.runner.Description.fDisplayName</name>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <inbound type="feature" confirmed="yes">org.junit.runner.Description.Description(java.lang.String, java.lang.annotation.Annotation[])</inbound>
                <inbound type="feature" confirmed="yes">org.junit.runner.Description.childlessCopy()</inbound>
                <inbound type="feature" confirmed="yes">org.junit.runner.Description.getDisplayName()</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.junit.runner.Description.getAnnotation(java.lang.Class)</name>
                <outbound type="class" confirmed="no">java.lang.Class</outbound>
                <outbound type="feature" confirmed="no">java.lang.Class.cast(java.lang.Object)</outbound>
                <outbound type="class" confirmed="no">java.lang.Object</outbound>
                <outbound type="feature" confirmed="no">java.lang.Object.equals(java.lang.Object)</outbound>
                <outbound type="class" confirmed="no">java.lang.annotation.Annotation</outbound>
                <outbound type="feature" confirmed="no">java.lang.annotation.Annotation.annotationType()</outbound>
                <outbound type="feature" confirmed="yes">org.junit.runner.Description.fAnnotations</outbound>
                <inbound type="feature" confirmed="yes">junit.framework.JUnit4TestAdapter.isIgnored(org.junit.runner.Description)</inbound>
                <inbound type="feature" confirmed="yes">org.junit.experimental.categories.Categories$CategoryFilter.directCategories(org.junit.runner.Description)</inbound>
                <inbound type="feature" confirmed="yes">org.junit.experimental.categories.Categories.assertNoDescendantsHaveCategoryAnnotations(org.junit.runner.Description)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.junit.runner.Description.getAnnotations()</name>
                <outbound type="class" confirmed="no">java.lang.Object</outbound>
                <outbound type="class" confirmed="no">java.lang.annotation.Annotation</outbound>
                <outbound type="feature" confirmed="no">java.util.Arrays.asList(java.lang.Object[])</outbound>
                <outbound type="class" confirmed="no">java.util.Collection</outbound>
                <outbound type="class" confirmed="no">java.util.List</outbound>
                <outbound type="feature" confirmed="yes">org.junit.runner.Description.fAnnotations</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.junit.runner.Description.getChildren()</name>
                <outbound type="class" confirmed="no">java.util.ArrayList</outbound>
                <outbound type="feature" confirmed="yes">org.junit.runner.Description.fChildren</outbound>
                <inbound type="feature" confirmed="yes">junit.framework.JUnit4TestAdapter.removeIgnored(org.junit.runner.Description)</inbound>
                <inbound type="feature" confirmed="yes">junit.framework.JUnit4TestAdapterCache.asTestList(org.junit.runner.Description)</inbound>
                <inbound type="feature" confirmed="yes">junit.framework.JUnit4TestAdapterCache.createTest(org.junit.runner.Description)</inbound>
                <inbound type="feature" confirmed="yes">org.junit.experimental.categories.Categories$CategoryFilter.shouldRun(org.junit.runner.Description)</inbound>
                <inbound type="feature" confirmed="yes">org.junit.experimental.categories.Categories.assertNoCategorizedDescendentsOfUncategorizeableParents(org.junit.runner.Description)</inbound>
                <inbound type="feature" confirmed="yes">org.junit.experimental.categories.Categories.assertNoDescendantsHaveCategoryAnnotations(org.junit.runner.Description)</inbound>
                <inbound type="feature" confirmed="yes">org.junit.experimental.categories.Categories.canHaveCategorizedChildren(org.junit.runner.Description)</inbound>
                <inbound type="feature" confirmed="yes">org.junit.experimental.max.MaxCore.findLeaves(org.junit.runner.Description, org.junit.runner.Description, java.util.List)</inbound>
                <inbound type="feature" confirmed="yes">org.junit.runner.Description.addChild(org.junit.runner.Description)</inbound>
                <inbound type="feature" confirmed="yes">org.junit.runner.Description.isTest()</inbound>
                <inbound type="feature" confirmed="yes">org.junit.runner.Description.testCount()</inbound>
                <inbound type="feature" confirmed="yes">org.junit.runner.manipulation.Filter$2.shouldRun(org.junit.runner.Description)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.junit.runner.Description.getClassName()</name>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="class" confirmed="no">java.util.regex.Matcher</outbound>
                <outbound type="feature" confirmed="no">java.util.regex.Matcher.group(int)</outbound>
                <outbound type="feature" confirmed="no">java.util.regex.Matcher.matches()</outbound>
                <outbound type="feature" confirmed="yes">org.junit.runner.Description.methodStringMatcher()</outbound>
                <outbound type="feature" confirmed="yes">org.junit.runner.Description.toString()</outbound>
                <inbound type="feature" confirmed="yes">org.junit.runner.Description.getTestClass()</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.junit.runner.Description.getDisplayName()</name>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="feature" confirmed="yes">org.junit.runner.Description.fDisplayName</outbound>
                <inbound type="feature" confirmed="yes">junit.framework.JUnit4TestAdapterCache.createTest(org.junit.runner.Description)</inbound>
                <inbound type="feature" confirmed="yes">org.junit.runner.Description.equals(java.lang.Object)</inbound>
                <inbound type="feature" confirmed="yes">org.junit.runner.Description.hashCode()</inbound>
                <inbound type="feature" confirmed="yes">org.junit.runner.Description.toString()</inbound>
                <inbound type="feature" confirmed="yes">org.junit.runner.manipulation.Filter$2.describe()</inbound>
                <inbound type="feature" confirmed="yes">org.junit.runner.notification.Failure.getTestHeader()</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.junit.runner.Description.getMethodName()</name>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="feature" confirmed="yes">org.junit.runner.Description.parseMethod()</outbound>
                <inbound type="feature" confirmed="yes">org.junit.experimental.max.MaxCore.buildRunner(org.junit.runner.Description)</inbound>
                <inbound type="feature" confirmed="yes">org.junit.rules.TestName.starting(org.junit.runner.Description)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.junit.runner.Description.getTestClass()</name>
                <outbound type="class" confirmed="no">java.lang.Class</outbound>
                <outbound type="feature" confirmed="no">java.lang.Class.forName(java.lang.String)</outbound>
                <outbound type="class" confirmed="no">java.lang.ClassNotFoundException</outbound>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="feature" confirmed="yes">org.junit.runner.Description.getClassName()</outbound>
                <inbound type="feature" confirmed="yes">org.junit.experimental.categories.Categories$CategoryFilter.parentDescription(org.junit.runner.Description)</inbound>
                <inbound type="feature" confirmed="yes">org.junit.experimental.categories.Categories.canHaveCategorizedChildren(org.junit.runner.Description)</inbound>
                <inbound type="feature" confirmed="yes">org.junit.experimental.max.MaxCore.buildRunner(org.junit.runner.Description)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.junit.runner.Description.hashCode()</name>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="feature" confirmed="no">java.lang.String.hashCode()</outbound>
                <outbound type="feature" confirmed="yes">org.junit.runner.Description.getDisplayName()</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.junit.runner.Description.isEmpty()</name>
                <outbound type="class" confirmed="no">java.lang.Object</outbound>
                <outbound type="feature" confirmed="yes">org.junit.runner.Description.EMPTY</outbound>
                <outbound type="feature" confirmed="yes">org.junit.runner.Description.equals(java.lang.Object)</outbound>
                <inbound type="feature" confirmed="yes">junit.framework.JUnit4TestAdapter.removeIgnored(org.junit.runner.Description)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.junit.runner.Description.isSuite()</name>
                <outbound type="feature" confirmed="yes">org.junit.runner.Description.isTest()</outbound>
                <inbound type="feature" confirmed="yes">junit.framework.JUnit4TestAdapterCache.asTest(org.junit.runner.Description)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.junit.runner.Description.isTest()</name>
                <outbound type="class" confirmed="no">java.util.ArrayList</outbound>
                <outbound type="feature" confirmed="no">java.util.ArrayList.isEmpty()</outbound>
                <outbound type="feature" confirmed="yes">org.junit.runner.Description.getChildren()</outbound>
                <inbound type="feature" confirmed="yes">junit.framework.JUnit4TestAdapterCache.asTestList(org.junit.runner.Description)</inbound>
                <inbound type="feature" confirmed="yes">junit.framework.JUnit4TestAdapterCache.createTest(org.junit.runner.Description)</inbound>
                <inbound type="feature" confirmed="yes">org.junit.runner.Description.isSuite()</inbound>
                <inbound type="feature" confirmed="yes">org.junit.runner.Description.testCount()</inbound>
                <inbound type="feature" confirmed="yes">org.junit.runner.manipulation.Filter$2.shouldRun(org.junit.runner.Description)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.junit.runner.Description.methodStringMatcher()</name>
                <outbound type="class" confirmed="no">java.lang.CharSequence</outbound>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="class" confirmed="no">java.util.regex.Matcher</outbound>
                <outbound type="class" confirmed="no">java.util.regex.Pattern</outbound>
                <outbound type="feature" confirmed="no">java.util.regex.Pattern.compile(java.lang.String)</outbound>
                <outbound type="feature" confirmed="no">java.util.regex.Pattern.matcher(java.lang.CharSequence)</outbound>
                <outbound type="feature" confirmed="yes">org.junit.runner.Description.toString()</outbound>
                <inbound type="feature" confirmed="yes">org.junit.runner.Description.getClassName()</inbound>
                <inbound type="feature" confirmed="yes">org.junit.runner.Description.parseMethod()</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.junit.runner.Description.parseMethod()</name>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="class" confirmed="no">java.util.regex.Matcher</outbound>
                <outbound type="feature" confirmed="no">java.util.regex.Matcher.group(int)</outbound>
                <outbound type="feature" confirmed="no">java.util.regex.Matcher.matches()</outbound>
                <outbound type="feature" confirmed="yes">org.junit.runner.Description.methodStringMatcher()</outbound>
                <inbound type="feature" confirmed="yes">org.junit.runner.Description.getMethodName()</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.junit.runner.Description.static {}</name>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="class" confirmed="no">java.lang.annotation.Annotation</outbound>
                <outbound type="feature" confirmed="yes">org.junit.runner.Description.Description(java.lang.String, java.lang.annotation.Annotation[])</outbound>
                <outbound type="feature" confirmed="yes">org.junit.runner.Description.EMPTY</outbound>
                <outbound type="feature" confirmed="yes">org.junit.runner.Description.TEST_MECHANISM</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.junit.runner.Description.testCount()</name>
                <outbound type="class" confirmed="no">java.lang.Object</outbound>
                <outbound type="class" confirmed="no">java.util.ArrayList</outbound>
                <outbound type="feature" confirmed="no">java.util.ArrayList.iterator()</outbound>
                <outbound type="class" confirmed="no">java.util.Iterator</outbound>
                <outbound type="feature" confirmed="no">java.util.Iterator.hasNext()</outbound>
                <outbound type="feature" confirmed="no">java.util.Iterator.next()</outbound>
                <outbound type="feature" confirmed="yes">org.junit.runner.Description.getChildren()</outbound>
                <outbound type="feature" confirmed="yes">org.junit.runner.Description.isTest()</outbound>
                <inbound type="feature" confirmed="yes">org.junit.runner.Runner.testCount()</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.junit.runner.Description.toString()</name>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="feature" confirmed="yes">org.junit.runner.Description.getDisplayName()</outbound>
                <inbound type="feature" confirmed="yes">junit.framework.JUnit4TestCaseFacade.toString()</inbound>
                <inbound type="feature" confirmed="yes">org.junit.experimental.max.MaxCore.buildRunner(org.junit.runner.Description)</inbound>
                <inbound type="feature" confirmed="yes">org.junit.experimental.max.MaxCore.findLeaves(org.junit.runner.Description, org.junit.runner.Description, java.util.List)</inbound>
                <inbound type="feature" confirmed="yes">org.junit.experimental.max.MaxCore.getMalformedTestClass(org.junit.runner.Description)</inbound>
                <inbound type="feature" confirmed="yes">org.junit.experimental.max.MaxHistory.getFailureTimestamp(org.junit.runner.Description)</inbound>
                <inbound type="feature" confirmed="yes">org.junit.experimental.max.MaxHistory.getTestDuration(org.junit.runner.Description)</inbound>
                <inbound type="feature" confirmed="yes">org.junit.experimental.max.MaxHistory.isNewTest(org.junit.runner.Description)</inbound>
                <inbound type="feature" confirmed="yes">org.junit.experimental.max.MaxHistory.putTestDuration(org.junit.runner.Description, long)</inbound>
                <inbound type="feature" confirmed="yes">org.junit.experimental.max.MaxHistory.putTestFailureTimestamp(org.junit.runner.Description, long)</inbound>
                <inbound type="feature" confirmed="yes">org.junit.runner.Description.getClassName()</inbound>
                <inbound type="feature" confirmed="yes">org.junit.runner.Description.methodStringMatcher()</inbound>
            </feature>
        </class>
        <class confirmed="yes">
            <name>org.junit.runner.JUnitCore</name>
            <outbound type="class" confirmed="no">java.lang.Object</outbound>
            <inbound type="feature" confirmed="yes">org.junit.experimental.max.MaxCore.run(org.junit.runner.Request)</inbound>
            <inbound type="feature" confirmed="yes">org.junit.experimental.max.MaxCore.run(org.junit.runner.Request, org.junit.runner.JUnitCore)</inbound>
            <feature confirmed="yes">
                <name>org.junit.runner.JUnitCore.JUnitCore()</name>
                <outbound type="feature" confirmed="no">java.lang.Object.Object()</outbound>
                <outbound type="feature" confirmed="yes">org.junit.runner.JUnitCore.fNotifier</outbound>
                <outbound type="class" confirmed="yes">org.junit.runner.notification.RunNotifier</outbound>
                <outbound type="feature" confirmed="yes">org.junit.runner.notification.RunNotifier.RunNotifier()</outbound>
                <inbound type="feature" confirmed="yes">org.junit.experimental.max.MaxCore.run(org.junit.runner.Request)</inbound>
                <inbound type="feature" confirmed="yes">org.junit.experimental.results.PrintableResult.testResult(org.junit.runner.Request)</inbound>
                <inbound type="feature" confirmed="yes">org.junit.runner.JUnitCore.runClasses(java.lang.Class[])</inbound>
                <inbound type="feature" confirmed="yes">org.junit.runner.JUnitCore.runClasses(org.junit.runner.Computer, java.lang.Class[])</inbound>
                <inbound type="feature" confirmed="yes">org.junit.runner.JUnitCore.runMainAndExit(org.junit.internal.JUnitSystem, java.lang.String[])</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.junit.runner.JUnitCore.addListener(org.junit.runner.notification.RunListener)</name>
                <outbound type="feature" confirmed="yes">org.junit.runner.JUnitCore.fNotifier</outbound>
                <outbound type="class" confirmed="yes">org.junit.runner.notification.RunListener</outbound>
                <outbound type="class" confirmed="yes">org.junit.runner.notification.RunNotifier</outbound>
                <outbound type="feature" confirmed="yes">org.junit.runner.notification.RunNotifier.addListener(org.junit.runner.notification.RunListener)</outbound>
                <inbound type="feature" confirmed="yes">org.junit.experimental.max.MaxCore.run(org.junit.runner.Request, org.junit.runner.JUnitCore)</inbound>
                <inbound type="feature" confirmed="yes">org.junit.runner.JUnitCore.runMain(org.junit.internal.JUnitSystem, java.lang.String[])</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.junit.runner.JUnitCore.defaultComputer()</name>
                <outbound type="class" confirmed="yes">org.junit.runner.Computer</outbound>
                <outbound type="feature" confirmed="yes">org.junit.runner.Computer.Computer()</outbound>
                <inbound type="feature" confirmed="yes">org.junit.runner.JUnitCore.run(java.lang.Class[])</inbound>
                <inbound type="feature" confirmed="yes">org.junit.runner.JUnitCore.runClasses(java.lang.Class[])</inbound>
                <inbound type="feature" confirmed="yes">org.junit.runner.Request.classes(java.lang.Class[])</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.junit.runner.JUnitCore.fNotifier</name>
                <outbound type="class" confirmed="yes">org.junit.runner.notification.RunNotifier</outbound>
                <inbound type="feature" confirmed="yes">org.junit.runner.JUnitCore.JUnitCore()</inbound>
                <inbound type="feature" confirmed="yes">org.junit.runner.JUnitCore.addListener(org.junit.runner.notification.RunListener)</inbound>
                <inbound type="feature" confirmed="yes">org.junit.runner.JUnitCore.removeListener(org.junit.runner.notification.RunListener)</inbound>
                <inbound type="feature" confirmed="yes">org.junit.runner.JUnitCore.run(org.junit.runner.Runner)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.junit.runner.JUnitCore.getVersion()</name>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="feature" confirmed="yes">junit.runner.Version.id()</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.junit.runner.JUnitCore.main(java.lang.String[])</name>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="class" confirmed="yes">org.junit.internal.JUnitSystem</outbound>
                <outbound type="feature" confirmed="yes">org.junit.internal.RealSystem.RealSystem()</outbound>
                <outbound type="feature" confirmed="yes">org.junit.runner.JUnitCore.runMainAndExit(org.junit.internal.JUnitSystem, java.lang.String[])</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.junit.runner.JUnitCore.removeListener(org.junit.runner.notification.RunListener)</name>
                <outbound type="feature" confirmed="yes">org.junit.runner.JUnitCore.fNotifier</outbound>
                <outbound type="class" confirmed="yes">org.junit.runner.notification.RunListener</outbound>
                <outbound type="class" confirmed="yes">org.junit.runner.notification.RunNotifier</outbound>
                <outbound type="feature" confirmed="yes">org.junit.runner.notification.RunNotifier.removeListener(org.junit.runner.notification.RunListener)</outbound>
                <inbound type="feature" confirmed="yes">org.junit.runner.JUnitCore.run(org.junit.runner.Runner)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.junit.runner.JUnitCore.run(java.lang.Class[])</name>
                <outbound type="class" confirmed="no">java.lang.Class</outbound>
                <outbound type="class" confirmed="yes">org.junit.runner.Computer</outbound>
                <outbound type="feature" confirmed="yes">org.junit.runner.JUnitCore.defaultComputer()</outbound>
                <outbound type="feature" confirmed="yes">org.junit.runner.JUnitCore.run(org.junit.runner.Request)</outbound>
                <outbound type="class" confirmed="yes">org.junit.runner.Request</outbound>
                <outbound type="feature" confirmed="yes">org.junit.runner.Request.classes(org.junit.runner.Computer, java.lang.Class[])</outbound>
                <outbound type="class" confirmed="yes">org.junit.runner.Result</outbound>
                <inbound type="feature" confirmed="yes">org.junit.runner.JUnitCore.runMain(org.junit.internal.JUnitSystem, java.lang.String[])</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.junit.runner.JUnitCore.run(junit.framework.Test)</name>
                <outbound type="class" confirmed="yes">junit.framework.Test</outbound>
                <outbound type="feature" confirmed="yes">org.junit.internal.runners.JUnit38ClassRunner.JUnit38ClassRunner(junit.framework.Test)</outbound>
                <outbound type="feature" confirmed="yes">org.junit.runner.JUnitCore.run(org.junit.runner.Runner)</outbound>
                <outbound type="class" confirmed="yes">org.junit.runner.Result</outbound>
                <outbound type="class" confirmed="yes">org.junit.runner.Runner</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.junit.runner.JUnitCore.run(org.junit.runner.Computer, java.lang.Class[])</name>
                <outbound type="class" confirmed="no">java.lang.Class</outbound>
                <outbound type="class" confirmed="yes">org.junit.runner.Computer</outbound>
                <outbound type="feature" confirmed="yes">org.junit.runner.JUnitCore.run(org.junit.runner.Request)</outbound>
                <outbound type="class" confirmed="yes">org.junit.runner.Request</outbound>
                <outbound type="feature" confirmed="yes">org.junit.runner.Request.classes(org.junit.runner.Computer, java.lang.Class[])</outbound>
                <outbound type="class" confirmed="yes">org.junit.runner.Result</outbound>
                <inbound type="feature" confirmed="yes">org.junit.runner.JUnitCore.runClasses(java.lang.Class[])</inbound>
                <inbound type="feature" confirmed="yes">org.junit.runner.JUnitCore.runClasses(org.junit.runner.Computer, java.lang.Class[])</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.junit.runner.JUnitCore.run(org.junit.runner.Request)</name>
                <outbound type="feature" confirmed="yes">org.junit.runner.JUnitCore.run(org.junit.runner.Runner)</outbound>
                <outbound type="class" confirmed="yes">org.junit.runner.Request</outbound>
                <outbound type="feature" confirmed="yes">org.junit.runner.Request.getRunner()</outbound>
                <outbound type="class" confirmed="yes">org.junit.runner.Result</outbound>
                <outbound type="class" confirmed="yes">org.junit.runner.Runner</outbound>
                <inbound type="feature" confirmed="yes">org.junit.experimental.results.PrintableResult.testResult(org.junit.runner.Request)</inbound>
                <inbound type="feature" confirmed="yes">org.junit.runner.JUnitCore.run(java.lang.Class[])</inbound>
                <inbound type="feature" confirmed="yes">org.junit.runner.JUnitCore.run(org.junit.runner.Computer, java.lang.Class[])</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.junit.runner.JUnitCore.run(org.junit.runner.Runner)</name>
                <outbound type="class" confirmed="yes">org.junit.runner.Description</outbound>
                <outbound type="feature" confirmed="yes">org.junit.runner.JUnitCore.fNotifier</outbound>
                <outbound type="feature" confirmed="yes">org.junit.runner.JUnitCore.removeListener(org.junit.runner.notification.RunListener)</outbound>
                <outbound type="class" confirmed="yes">org.junit.runner.Result</outbound>
                <outbound type="feature" confirmed="yes">org.junit.runner.Result.Result()</outbound>
                <outbound type="feature" confirmed="yes">org.junit.runner.Result.createListener()</outbound>
                <outbound type="class" confirmed="yes">org.junit.runner.Runner</outbound>
                <outbound type="feature" confirmed="yes">org.junit.runner.Runner.getDescription()</outbound>
                <outbound type="feature" confirmed="yes">org.junit.runner.Runner.run(org.junit.runner.notification.RunNotifier)</outbound>
                <outbound type="class" confirmed="yes">org.junit.runner.notification.RunListener</outbound>
                <outbound type="class" confirmed="yes">org.junit.runner.notification.RunNotifier</outbound>
                <outbound type="feature" confirmed="yes">org.junit.runner.notification.RunNotifier.addFirstListener(org.junit.runner.notification.RunListener)</outbound>
                <outbound type="feature" confirmed="yes">org.junit.runner.notification.RunNotifier.fireTestRunFinished(org.junit.runner.Result)</outbound>
                <outbound type="feature" confirmed="yes">org.junit.runner.notification.RunNotifier.fireTestRunStarted(org.junit.runner.Description)</outbound>
                <inbound type="feature" confirmed="yes">org.junit.experimental.max.MaxCore.run(org.junit.runner.Request, org.junit.runner.JUnitCore)</inbound>
                <inbound type="feature" confirmed="yes">org.junit.runner.JUnitCore.run(junit.framework.Test)</inbound>
                <inbound type="feature" confirmed="yes">org.junit.runner.JUnitCore.run(org.junit.runner.Request)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.junit.runner.JUnitCore.runClasses(java.lang.Class[])</name>
                <outbound type="class" confirmed="no">java.lang.Class</outbound>
                <outbound type="class" confirmed="yes">org.junit.runner.Computer</outbound>
                <outbound type="feature" confirmed="yes">org.junit.runner.JUnitCore.JUnitCore()</outbound>
                <outbound type="feature" confirmed="yes">org.junit.runner.JUnitCore.defaultComputer()</outbound>
                <outbound type="feature" confirmed="yes">org.junit.runner.JUnitCore.run(org.junit.runner.Computer, java.lang.Class[])</outbound>
                <outbound type="class" confirmed="yes">org.junit.runner.Result</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.junit.runner.JUnitCore.runClasses(org.junit.runner.Computer, java.lang.Class[])</name>
                <outbound type="class" confirmed="no">java.lang.Class</outbound>
                <outbound type="class" confirmed="yes">org.junit.runner.Computer</outbound>
                <outbound type="feature" confirmed="yes">org.junit.runner.JUnitCore.JUnitCore()</outbound>
                <outbound type="feature" confirmed="yes">org.junit.runner.JUnitCore.run(org.junit.runner.Computer, java.lang.Class[])</outbound>
                <outbound type="class" confirmed="yes">org.junit.runner.Result</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.junit.runner.JUnitCore.runMain(org.junit.internal.JUnitSystem, java.lang.String[])</name>
                <outbound type="class" confirmed="no">java.io.PrintStream</outbound>
                <outbound type="feature" confirmed="no">java.io.PrintStream.println(java.lang.String)</outbound>
                <outbound type="class" confirmed="no">java.lang.Class</outbound>
                <outbound type="feature" confirmed="no">java.lang.Class.forName(java.lang.String)</outbound>
                <outbound type="class" confirmed="no">java.lang.ClassNotFoundException</outbound>
                <outbound type="class" confirmed="no">java.lang.Class[]</outbound>
                <outbound type="class" confirmed="no">java.lang.Object</outbound>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="class" confirmed="no">java.lang.StringBuilder</outbound>
                <outbound type="feature" confirmed="no">java.lang.StringBuilder.StringBuilder()</outbound>
                <outbound type="feature" confirmed="no">java.lang.StringBuilder.append(java.lang.String)</outbound>
                <outbound type="feature" confirmed="no">java.lang.StringBuilder.toString()</outbound>
                <outbound type="class" confirmed="no">java.lang.Throwable</outbound>
                <outbound type="class" confirmed="no">java.lang.annotation.Annotation</outbound>
                <outbound type="feature" confirmed="no">java.util.ArrayList.ArrayList()</outbound>
                <outbound type="class" confirmed="no">java.util.Iterator</outbound>
                <outbound type="feature" confirmed="no">java.util.Iterator.hasNext()</outbound>
                <outbound type="feature" confirmed="no">java.util.Iterator.next()</outbound>
                <outbound type="class" confirmed="no">java.util.List</outbound>
                <outbound type="feature" confirmed="no">java.util.List.add(java.lang.Object)</outbound>
                <outbound type="feature" confirmed="no">java.util.List.iterator()</outbound>
                <outbound type="feature" confirmed="no">java.util.List.toArray(java.lang.Object[])</outbound>
                <outbound type="feature" confirmed="yes">junit.runner.Version.id()</outbound>
                <outbound type="class" confirmed="yes">org.junit.internal.JUnitSystem</outbound>
                <outbound type="feature" confirmed="yes">org.junit.internal.JUnitSystem.out()</outbound>
                <outbound type="feature" confirmed="yes">org.junit.internal.TextListener.TextListener(org.junit.internal.JUnitSystem)</outbound>
                <outbound type="class" confirmed="yes">org.junit.runner.Description</outbound>
                <outbound type="feature" confirmed="yes">org.junit.runner.Description.createSuiteDescription(java.lang.String, java.lang.annotation.Annotation[])</outbound>
                <outbound type="feature" confirmed="yes">org.junit.runner.JUnitCore.addListener(org.junit.runner.notification.RunListener)</outbound>
                <outbound type="feature" confirmed="yes">org.junit.runner.JUnitCore.run(java.lang.Class[])</outbound>
                <outbound type="class" confirmed="yes">org.junit.runner.Result</outbound>
                <outbound type="feature" confirmed="yes">org.junit.runner.Result.getFailures()</outbound>
                <outbound type="class" confirmed="yes">org.junit.runner.notification.Failure</outbound>
                <outbound type="feature" confirmed="yes">org.junit.runner.notification.Failure.Failure(org.junit.runner.Description, java.lang.Throwable)</outbound>
                <outbound type="class" confirmed="yes">org.junit.runner.notification.RunListener</outbound>
                <inbound type="feature" confirmed="yes">org.junit.runner.JUnitCore.runMainAndExit(org.junit.internal.JUnitSystem, java.lang.String[])</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.junit.runner.JUnitCore.runMainAndExit(org.junit.internal.JUnitSystem, java.lang.String[])</name>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="class" confirmed="yes">org.junit.internal.JUnitSystem</outbound>
                <outbound type="feature" confirmed="yes">org.junit.internal.JUnitSystem.exit(int)</outbound>
                <outbound type="feature" confirmed="yes">org.junit.runner.JUnitCore.JUnitCore()</outbound>
                <outbound type="feature" confirmed="yes">org.junit.runner.JUnitCore.runMain(org.junit.internal.JUnitSystem, java.lang.String[])</outbound>
                <outbound type="class" confirmed="yes">org.junit.runner.Result</outbound>
                <outbound type="feature" confirmed="yes">org.junit.runner.Result.wasSuccessful()</outbound>
                <inbound type="feature" confirmed="yes">org.junit.runner.JUnitCore.main(java.lang.String[])</inbound>
            </feature>
        </class>
        <class confirmed="yes">
            <name>org.junit.runner.Request</name>
            <outbound type="class" confirmed="no">java.lang.Object</outbound>
            <inbound type="feature" confirmed="yes">junit.framework.JUnit4TestAdapter.JUnit4TestAdapter(java.lang.Class, junit.framework.JUnit4TestAdapterCache)</inbound>
            <inbound type="class" confirmed="yes">org.junit.experimental.max.MaxCore$1</inbound>
            <inbound type="feature" confirmed="yes">org.junit.experimental.max.MaxCore.buildRunner(org.junit.runner.Description)</inbound>
            <inbound type="feature" confirmed="yes">org.junit.experimental.max.MaxCore.constructLeafRequest(java.util.List)</inbound>
            <inbound type="feature" confirmed="yes">org.junit.experimental.max.MaxCore.findLeaves(org.junit.runner.Request)</inbound>
            <inbound type="feature" confirmed="yes">org.junit.experimental.max.MaxCore.run(java.lang.Class)</inbound>
            <inbound type="feature" confirmed="yes">org.junit.experimental.max.MaxCore.run(org.junit.runner.Request)</inbound>
            <inbound type="feature" confirmed="yes">org.junit.experimental.max.MaxCore.run(org.junit.runner.Request, org.junit.runner.JUnitCore)</inbound>
            <inbound type="feature" confirmed="yes">org.junit.experimental.max.MaxCore.sortRequest(org.junit.runner.Request)</inbound>
            <inbound type="feature" confirmed="yes">org.junit.experimental.max.MaxCore.sortedLeavesForTest(org.junit.runner.Request)</inbound>
            <inbound type="feature" confirmed="yes">org.junit.experimental.results.PrintableResult.testResult(java.lang.Class)</inbound>
            <inbound type="feature" confirmed="yes">org.junit.experimental.results.PrintableResult.testResult(org.junit.runner.Request)</inbound>
            <inbound type="class" confirmed="yes">org.junit.internal.requests.ClassRequest</inbound>
            <inbound type="class" confirmed="yes">org.junit.internal.requests.FilterRequest</inbound>
            <inbound type="feature" confirmed="yes">org.junit.internal.requests.FilterRequest.FilterRequest(org.junit.runner.Request, org.junit.runner.manipulation.Filter)</inbound>
            <inbound type="feature" confirmed="yes">org.junit.internal.requests.FilterRequest.fRequest</inbound>
            <inbound type="feature" confirmed="yes">org.junit.internal.requests.FilterRequest.getRunner()</inbound>
            <inbound type="class" confirmed="yes">org.junit.internal.requests.SortingRequest</inbound>
            <inbound type="feature" confirmed="yes">org.junit.internal.requests.SortingRequest.SortingRequest(org.junit.runner.Request, java.util.Comparator)</inbound>
            <inbound type="feature" confirmed="yes">org.junit.internal.requests.SortingRequest.fRequest</inbound>
            <inbound type="feature" confirmed="yes">org.junit.internal.requests.SortingRequest.getRunner()</inbound>
            <inbound type="feature" confirmed="yes">org.junit.runner.JUnitCore.run(java.lang.Class[])</inbound>
            <inbound type="feature" confirmed="yes">org.junit.runner.JUnitCore.run(org.junit.runner.Computer, java.lang.Class[])</inbound>
            <inbound type="feature" confirmed="yes">org.junit.runner.JUnitCore.run(org.junit.runner.Request)</inbound>
            <inbound type="class" confirmed="yes">org.junit.runner.Request$1</inbound>
            <feature confirmed="yes">
                <name>org.junit.runner.Request.Request()</name>
                <outbound type="feature" confirmed="no">java.lang.Object.Object()</outbound>
                <inbound type="feature" confirmed="yes">org.junit.experimental.max.MaxCore$1.MaxCore$1(org.junit.experimental.max.MaxCore, java.util.List)</inbound>
                <inbound type="feature" confirmed="yes">org.junit.internal.requests.ClassRequest.ClassRequest(java.lang.Class, boolean)</inbound>
                <inbound type="feature" confirmed="yes">org.junit.internal.requests.FilterRequest.FilterRequest(org.junit.runner.Request, org.junit.runner.manipulation.Filter)</inbound>
                <inbound type="feature" confirmed="yes">org.junit.internal.requests.SortingRequest.SortingRequest(org.junit.runner.Request, java.util.Comparator)</inbound>
                <inbound type="feature" confirmed="yes">org.junit.runner.Request$1.Request$1(org.junit.runner.Runner)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.junit.runner.Request.aClass(java.lang.Class)</name>
                <outbound type="class" confirmed="no">java.lang.Class</outbound>
                <outbound type="feature" confirmed="yes">org.junit.internal.requests.ClassRequest.ClassRequest(java.lang.Class)</outbound>
                <inbound type="feature" confirmed="yes">org.junit.experimental.max.MaxCore.buildRunner(org.junit.runner.Description)</inbound>
                <inbound type="feature" confirmed="yes">org.junit.experimental.max.MaxCore.run(java.lang.Class)</inbound>
                <inbound type="feature" confirmed="yes">org.junit.experimental.results.PrintableResult.testResult(java.lang.Class)</inbound>
                <inbound type="feature" confirmed="yes">org.junit.runner.Request.method(java.lang.Class, java.lang.String)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.junit.runner.Request.classWithoutSuiteMethod(java.lang.Class)</name>
                <outbound type="class" confirmed="no">java.lang.Class</outbound>
                <outbound type="feature" confirmed="yes">org.junit.internal.requests.ClassRequest.ClassRequest(java.lang.Class, boolean)</outbound>
                <inbound type="feature" confirmed="yes">junit.framework.JUnit4TestAdapter.JUnit4TestAdapter(java.lang.Class, junit.framework.JUnit4TestAdapterCache)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.junit.runner.Request.classes(java.lang.Class[])</name>
                <outbound type="class" confirmed="no">java.lang.Class</outbound>
                <outbound type="class" confirmed="yes">org.junit.runner.Computer</outbound>
                <outbound type="feature" confirmed="yes">org.junit.runner.JUnitCore.defaultComputer()</outbound>
                <outbound type="feature" confirmed="yes">org.junit.runner.Request.classes(org.junit.runner.Computer, java.lang.Class[])</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.junit.runner.Request.classes(org.junit.runner.Computer, java.lang.Class[])</name>
                <outbound type="class" confirmed="no">java.lang.Class</outbound>
                <outbound type="feature" confirmed="no">java.lang.RuntimeException.RuntimeException(java.lang.String)</outbound>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="feature" confirmed="yes">org.junit.internal.builders.AllDefaultPossibilitiesBuilder.AllDefaultPossibilitiesBuilder(boolean)</outbound>
                <outbound type="class" confirmed="yes">org.junit.runner.Computer</outbound>
                <outbound type="feature" confirmed="yes">org.junit.runner.Computer.getSuite(org.junit.runners.model.RunnerBuilder, java.lang.Class[])</outbound>
                <outbound type="feature" confirmed="yes">org.junit.runner.Request.runner(org.junit.runner.Runner)</outbound>
                <outbound type="class" confirmed="yes">org.junit.runner.Runner</outbound>
                <outbound type="class" confirmed="yes">org.junit.runners.model.InitializationError</outbound>
                <outbound type="class" confirmed="yes">org.junit.runners.model.RunnerBuilder</outbound>
                <inbound type="feature" confirmed="yes">org.junit.runner.JUnitCore.run(java.lang.Class[])</inbound>
                <inbound type="feature" confirmed="yes">org.junit.runner.JUnitCore.run(org.junit.runner.Computer, java.lang.Class[])</inbound>
                <inbound type="feature" confirmed="yes">org.junit.runner.Request.classes(java.lang.Class[])</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.junit.runner.Request.errorReport(java.lang.Class, java.lang.Throwable)</name>
                <outbound type="class" confirmed="no">java.lang.Class</outbound>
                <outbound type="class" confirmed="no">java.lang.Throwable</outbound>
                <outbound type="feature" confirmed="yes">org.junit.internal.runners.ErrorReportingRunner.ErrorReportingRunner(java.lang.Class, java.lang.Throwable)</outbound>
                <outbound type="feature" confirmed="yes">org.junit.runner.Request.runner(org.junit.runner.Runner)</outbound>
                <outbound type="class" confirmed="yes">org.junit.runner.Runner</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.junit.runner.Request.filterWith(org.junit.runner.Description)</name>
                <outbound type="class" confirmed="yes">org.junit.runner.Description</outbound>
                <outbound type="feature" confirmed="yes">org.junit.runner.Request.filterWith(org.junit.runner.manipulation.Filter)</outbound>
                <outbound type="class" confirmed="yes">org.junit.runner.manipulation.Filter</outbound>
                <outbound type="feature" confirmed="yes">org.junit.runner.manipulation.Filter.matchMethodDescription(org.junit.runner.Description)</outbound>
                <inbound type="feature" confirmed="yes">org.junit.runner.Request.method(java.lang.Class, java.lang.String)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.junit.runner.Request.filterWith(org.junit.runner.manipulation.Filter)</name>
                <outbound type="feature" confirmed="yes">org.junit.internal.requests.FilterRequest.FilterRequest(org.junit.runner.Request, org.junit.runner.manipulation.Filter)</outbound>
                <outbound type="class" confirmed="yes">org.junit.runner.manipulation.Filter</outbound>
                <inbound type="feature" confirmed="yes">org.junit.runner.Request.filterWith(org.junit.runner.Description)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.junit.runner.Request.getRunner()</name>
                <outbound type="class" confirmed="yes">org.junit.runner.Runner</outbound>
                <inbound type="feature" confirmed="yes">junit.framework.JUnit4TestAdapter.JUnit4TestAdapter(java.lang.Class, junit.framework.JUnit4TestAdapterCache)</inbound>
                <inbound type="feature" confirmed="yes">org.junit.experimental.max.MaxCore.buildRunner(org.junit.runner.Description)</inbound>
                <inbound type="feature" confirmed="yes">org.junit.experimental.max.MaxCore.findLeaves(org.junit.runner.Request)</inbound>
                <inbound type="feature" confirmed="yes">org.junit.experimental.max.MaxCore.run(org.junit.runner.Request, org.junit.runner.JUnitCore)</inbound>
                <inbound type="feature" confirmed="yes">org.junit.internal.requests.FilterRequest.getRunner()</inbound>
                <inbound type="feature" confirmed="yes">org.junit.internal.requests.SortingRequest.getRunner()</inbound>
                <inbound type="feature" confirmed="yes">org.junit.runner.JUnitCore.run(org.junit.runner.Request)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.junit.runner.Request.method(java.lang.Class, java.lang.String)</name>
                <outbound type="class" confirmed="no">java.lang.Class</outbound>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="class" confirmed="yes">org.junit.runner.Description</outbound>
                <outbound type="feature" confirmed="yes">org.junit.runner.Description.createTestDescription(java.lang.Class, java.lang.String)</outbound>
                <outbound type="feature" confirmed="yes">org.junit.runner.Request.aClass(java.lang.Class)</outbound>
                <outbound type="feature" confirmed="yes">org.junit.runner.Request.filterWith(org.junit.runner.Description)</outbound>
                <inbound type="feature" confirmed="yes">org.junit.experimental.max.MaxCore.buildRunner(org.junit.runner.Description)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.junit.runner.Request.runner(org.junit.runner.Runner)</name>
                <outbound type="feature" confirmed="yes">org.junit.runner.Request$1.Request$1(org.junit.runner.Runner)</outbound>
                <outbound type="class" confirmed="yes">org.junit.runner.Runner</outbound>
                <inbound type="feature" confirmed="yes">org.junit.runner.Request.classes(org.junit.runner.Computer, java.lang.Class[])</inbound>
                <inbound type="feature" confirmed="yes">org.junit.runner.Request.errorReport(java.lang.Class, java.lang.Throwable)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.junit.runner.Request.sortWith(java.util.Comparator)</name>
                <outbound type="class" confirmed="no">java.util.Comparator</outbound>
                <outbound type="feature" confirmed="yes">org.junit.internal.requests.SortingRequest.SortingRequest(org.junit.runner.Request, java.util.Comparator)</outbound>
            </feature>
        </class>
        <class confirmed="yes">
            <name>org.junit.runner.Request$1</name>
            <outbound type="class" confirmed="yes">org.junit.runner.Request</outbound>
            <feature confirmed="yes">
                <name>org.junit.runner.Request$1.Request$1(org.junit.runner.Runner)</name>
                <outbound type="feature" confirmed="yes">org.junit.runner.Request$1.val$runner</outbound>
                <outbound type="feature" confirmed="yes">org.junit.runner.Request.Request()</outbound>
                <outbound type="class" confirmed="yes">org.junit.runner.Runner</outbound>
                <inbound type="feature" confirmed="yes">org.junit.runner.Request.runner(org.junit.runner.Runner)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.junit.runner.Request$1.getRunner()</name>
                <outbound type="feature" confirmed="yes">org.junit.runner.Request$1.val$runner</outbound>
                <outbound type="class" confirmed="yes">org.junit.runner.Runner</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.junit.runner.Request$1.val$runner</name>
                <outbound type="class" confirmed="yes">org.junit.runner.Runner</outbound>
                <inbound type="feature" confirmed="yes">org.junit.runner.Request$1.Request$1(org.junit.runner.Runner)</inbound>
                <inbound type="feature" confirmed="yes">org.junit.runner.Request$1.getRunner()</inbound>
            </feature>
        </class>
        <class confirmed="yes">
            <name>org.junit.runner.Result</name>
            <outbound type="class" confirmed="no">java.lang.Object</outbound>
            <inbound type="feature" confirmed="yes">org.junit.experimental.max.MaxCore.run(java.lang.Class)</inbound>
            <inbound type="feature" confirmed="yes">org.junit.experimental.max.MaxCore.run(org.junit.runner.Request)</inbound>
            <inbound type="feature" confirmed="yes">org.junit.experimental.max.MaxCore.run(org.junit.runner.Request, org.junit.runner.JUnitCore)</inbound>
            <inbound type="feature" confirmed="yes">org.junit.experimental.max.MaxHistory$RememberingListener.testRunFinished(org.junit.runner.Result)</inbound>
            <inbound type="feature" confirmed="yes">org.junit.experimental.results.FailureList.result()</inbound>
            <inbound type="feature" confirmed="yes">org.junit.experimental.results.PrintableResult.PrintableResult(java.util.List)</inbound>
            <inbound type="feature" confirmed="yes">org.junit.experimental.results.PrintableResult.PrintableResult(org.junit.runner.Result)</inbound>
            <inbound type="feature" confirmed="yes">org.junit.experimental.results.PrintableResult.failureCount()</inbound>
            <inbound type="feature" confirmed="yes">org.junit.experimental.results.PrintableResult.result</inbound>
            <inbound type="feature" confirmed="yes">org.junit.experimental.results.PrintableResult.testResult(org.junit.runner.Request)</inbound>
            <inbound type="feature" confirmed="yes">org.junit.experimental.results.PrintableResult.toString()</inbound>
            <inbound type="feature" confirmed="yes">org.junit.internal.TextListener.printFailures(org.junit.runner.Result)</inbound>
            <inbound type="feature" confirmed="yes">org.junit.internal.TextListener.printFooter(org.junit.runner.Result)</inbound>
            <inbound type="feature" confirmed="yes">org.junit.internal.TextListener.testRunFinished(org.junit.runner.Result)</inbound>
            <inbound type="feature" confirmed="yes">org.junit.runner.JUnitCore.run(java.lang.Class[])</inbound>
            <inbound type="feature" confirmed="yes">org.junit.runner.JUnitCore.run(junit.framework.Test)</inbound>
            <inbound type="feature" confirmed="yes">org.junit.runner.JUnitCore.run(org.junit.runner.Computer, java.lang.Class[])</inbound>
            <inbound type="feature" confirmed="yes">org.junit.runner.JUnitCore.run(org.junit.runner.Request)</inbound>
            <inbound type="feature" confirmed="yes">org.junit.runner.JUnitCore.run(org.junit.runner.Runner)</inbound>
            <inbound type="feature" confirmed="yes">org.junit.runner.JUnitCore.runClasses(java.lang.Class[])</inbound>
            <inbound type="feature" confirmed="yes">org.junit.runner.JUnitCore.runClasses(org.junit.runner.Computer, java.lang.Class[])</inbound>
            <inbound type="feature" confirmed="yes">org.junit.runner.JUnitCore.runMain(org.junit.internal.JUnitSystem, java.lang.String[])</inbound>
            <inbound type="feature" confirmed="yes">org.junit.runner.JUnitCore.runMainAndExit(org.junit.internal.JUnitSystem, java.lang.String[])</inbound>
            <inbound type="feature" confirmed="yes">org.junit.runner.Result$Listener.Result$Listener(org.junit.runner.Result)</inbound>
            <inbound type="feature" confirmed="yes">org.junit.runner.Result$Listener.Result$Listener(org.junit.runner.Result, org.junit.runner.Result$1)</inbound>
            <inbound type="feature" confirmed="yes">org.junit.runner.Result$Listener.testFailure(org.junit.runner.notification.Failure)</inbound>
            <inbound type="feature" confirmed="yes">org.junit.runner.Result$Listener.testFinished(org.junit.runner.Description)</inbound>
            <inbound type="feature" confirmed="yes">org.junit.runner.Result$Listener.testIgnored(org.junit.runner.Description)</inbound>
            <inbound type="feature" confirmed="yes">org.junit.runner.Result$Listener.testRunFinished(org.junit.runner.Result)</inbound>
            <inbound type="feature" confirmed="yes">org.junit.runner.Result$Listener.testRunStarted(org.junit.runner.Description)</inbound>
            <inbound type="feature" confirmed="yes">org.junit.runner.Result$Listener.this$0</inbound>
            <inbound type="feature" confirmed="yes">org.junit.runner.notification.RunListener.testRunFinished(org.junit.runner.Result)</inbound>
            <inbound type="feature" confirmed="yes">org.junit.runner.notification.RunNotifier$2.RunNotifier$2(org.junit.runner.notification.RunNotifier, org.junit.runner.Result)</inbound>
            <inbound type="feature" confirmed="yes">org.junit.runner.notification.RunNotifier$2.notifyListener(org.junit.runner.notification.RunListener)</inbound>
            <inbound type="feature" confirmed="yes">org.junit.runner.notification.RunNotifier$2.val$result</inbound>
            <inbound type="feature" confirmed="yes">org.junit.runner.notification.RunNotifier.fireTestRunFinished(org.junit.runner.Result)</inbound>
            <feature confirmed="yes">
                <name>org.junit.runner.Result.Result()</name>
                <outbound type="feature" confirmed="no">java.lang.Object.Object()</outbound>
                <outbound type="feature" confirmed="no">java.util.ArrayList.ArrayList()</outbound>
                <outbound type="feature" confirmed="no">java.util.Collections.synchronizedList(java.util.List)</outbound>
                <outbound type="class" confirmed="no">java.util.List</outbound>
                <outbound type="class" confirmed="no">java.util.concurrent.atomic.AtomicInteger</outbound>
                <outbound type="feature" confirmed="no">java.util.concurrent.atomic.AtomicInteger.AtomicInteger()</outbound>
                <outbound type="feature" confirmed="yes">org.junit.runner.Result.fCount</outbound>
                <outbound type="feature" confirmed="yes">org.junit.runner.Result.fFailures</outbound>
                <outbound type="feature" confirmed="yes">org.junit.runner.Result.fIgnoreCount</outbound>
                <outbound type="feature" confirmed="yes">org.junit.runner.Result.fRunTime</outbound>
                <inbound type="feature" confirmed="yes">org.junit.experimental.results.FailureList.result()</inbound>
                <inbound type="feature" confirmed="yes">org.junit.runner.JUnitCore.run(org.junit.runner.Runner)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.junit.runner.Result.access$000(org.junit.runner.Result)</name>
                <outbound type="feature" confirmed="yes">org.junit.runner.Result.fStartTime</outbound>
                <inbound type="feature" confirmed="yes">org.junit.runner.Result$Listener.testRunFinished(org.junit.runner.Result)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.junit.runner.Result.access$002(org.junit.runner.Result, long)</name>
                <outbound type="feature" confirmed="yes">org.junit.runner.Result.fStartTime</outbound>
                <inbound type="feature" confirmed="yes">org.junit.runner.Result$Listener.testRunStarted(org.junit.runner.Description)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.junit.runner.Result.access$114(org.junit.runner.Result, long)</name>
                <outbound type="feature" confirmed="yes">org.junit.runner.Result.fRunTime</outbound>
                <inbound type="feature" confirmed="yes">org.junit.runner.Result$Listener.testRunFinished(org.junit.runner.Result)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.junit.runner.Result.access$200(org.junit.runner.Result)</name>
                <outbound type="class" confirmed="no">java.util.concurrent.atomic.AtomicInteger</outbound>
                <outbound type="feature" confirmed="yes">org.junit.runner.Result.fCount</outbound>
                <inbound type="feature" confirmed="yes">org.junit.runner.Result$Listener.testFinished(org.junit.runner.Description)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.junit.runner.Result.access$300(org.junit.runner.Result)</name>
                <outbound type="class" confirmed="no">java.util.List</outbound>
                <outbound type="feature" confirmed="yes">org.junit.runner.Result.fFailures</outbound>
                <inbound type="feature" confirmed="yes">org.junit.runner.Result$Listener.testFailure(org.junit.runner.notification.Failure)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.junit.runner.Result.access$400(org.junit.runner.Result)</name>
                <outbound type="class" confirmed="no">java.util.concurrent.atomic.AtomicInteger</outbound>
                <outbound type="feature" confirmed="yes">org.junit.runner.Result.fIgnoreCount</outbound>
                <inbound type="feature" confirmed="yes">org.junit.runner.Result$Listener.testIgnored(org.junit.runner.Description)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.junit.runner.Result.createListener()</name>
                <outbound type="class" confirmed="yes">org.junit.runner.Result$1</outbound>
                <outbound type="feature" confirmed="yes">org.junit.runner.Result$Listener.Result$Listener(org.junit.runner.Result, org.junit.runner.Result$1)</outbound>
                <outbound type="class" confirmed="yes">org.junit.runner.notification.RunListener</outbound>
                <inbound type="feature" confirmed="yes">org.junit.experimental.results.FailureList.result()</inbound>
                <inbound type="feature" confirmed="yes">org.junit.runner.JUnitCore.run(org.junit.runner.Runner)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.junit.runner.Result.fCount</name>
                <outbound type="class" confirmed="no">java.util.concurrent.atomic.AtomicInteger</outbound>
                <inbound type="feature" confirmed="yes">org.junit.runner.Result.Result()</inbound>
                <inbound type="feature" confirmed="yes">org.junit.runner.Result.access$200(org.junit.runner.Result)</inbound>
                <inbound type="feature" confirmed="yes">org.junit.runner.Result.getRunCount()</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.junit.runner.Result.fFailures</name>
                <outbound type="class" confirmed="no">java.util.List</outbound>
                <inbound type="feature" confirmed="yes">org.junit.runner.Result.Result()</inbound>
                <inbound type="feature" confirmed="yes">org.junit.runner.Result.access$300(org.junit.runner.Result)</inbound>
                <inbound type="feature" confirmed="yes">org.junit.runner.Result.getFailureCount()</inbound>
                <inbound type="feature" confirmed="yes">org.junit.runner.Result.getFailures()</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.junit.runner.Result.fIgnoreCount</name>
                <outbound type="class" confirmed="no">java.util.concurrent.atomic.AtomicInteger</outbound>
                <inbound type="feature" confirmed="yes">org.junit.runner.Result.Result()</inbound>
                <inbound type="feature" confirmed="yes">org.junit.runner.Result.access$400(org.junit.runner.Result)</inbound>
                <inbound type="feature" confirmed="yes">org.junit.runner.Result.getIgnoreCount()</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.junit.runner.Result.fRunTime</name>
                <inbound type="feature" confirmed="yes">org.junit.runner.Result.Result()</inbound>
                <inbound type="feature" confirmed="yes">org.junit.runner.Result.access$114(org.junit.runner.Result, long)</inbound>
                <inbound type="feature" confirmed="yes">org.junit.runner.Result.getRunTime()</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.junit.runner.Result.fStartTime</name>
                <inbound type="feature" confirmed="yes">org.junit.runner.Result.access$000(org.junit.runner.Result)</inbound>
                <inbound type="feature" confirmed="yes">org.junit.runner.Result.access$002(org.junit.runner.Result, long)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.junit.runner.Result.getFailureCount()</name>
                <outbound type="class" confirmed="no">java.util.List</outbound>
                <outbound type="feature" confirmed="no">java.util.List.size()</outbound>
                <outbound type="feature" confirmed="yes">org.junit.runner.Result.fFailures</outbound>
                <inbound type="feature" confirmed="yes">org.junit.internal.TextListener.printFooter(org.junit.runner.Result)</inbound>
                <inbound type="feature" confirmed="yes">org.junit.runner.Result.wasSuccessful()</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.junit.runner.Result.getFailures()</name>
                <outbound type="class" confirmed="no">java.util.List</outbound>
                <outbound type="feature" confirmed="yes">org.junit.runner.Result.fFailures</outbound>
                <inbound type="feature" confirmed="yes">org.junit.experimental.results.PrintableResult.failureCount()</inbound>
                <inbound type="feature" confirmed="yes">org.junit.internal.TextListener.printFailures(org.junit.runner.Result)</inbound>
                <inbound type="feature" confirmed="yes">org.junit.runner.JUnitCore.runMain(org.junit.internal.JUnitSystem, java.lang.String[])</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.junit.runner.Result.getIgnoreCount()</name>
                <outbound type="class" confirmed="no">java.util.concurrent.atomic.AtomicInteger</outbound>
                <outbound type="feature" confirmed="no">java.util.concurrent.atomic.AtomicInteger.get()</outbound>
                <outbound type="feature" confirmed="yes">org.junit.runner.Result.fIgnoreCount</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.junit.runner.Result.getRunCount()</name>
                <outbound type="class" confirmed="no">java.util.concurrent.atomic.AtomicInteger</outbound>
                <outbound type="feature" confirmed="no">java.util.concurrent.atomic.AtomicInteger.get()</outbound>
                <outbound type="feature" confirmed="yes">org.junit.runner.Result.fCount</outbound>
                <inbound type="feature" confirmed="yes">org.junit.internal.TextListener.printFooter(org.junit.runner.Result)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.junit.runner.Result.getRunTime()</name>
                <outbound type="feature" confirmed="yes">org.junit.runner.Result.fRunTime</outbound>
                <inbound type="feature" confirmed="yes">org.junit.internal.TextListener.testRunFinished(org.junit.runner.Result)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.junit.runner.Result.wasSuccessful()</name>
                <outbound type="feature" confirmed="yes">org.junit.runner.Result.getFailureCount()</outbound>
                <inbound type="feature" confirmed="yes">org.junit.internal.TextListener.printFooter(org.junit.runner.Result)</inbound>
                <inbound type="feature" confirmed="yes">org.junit.runner.JUnitCore.runMainAndExit(org.junit.internal.JUnitSystem, java.lang.String[])</inbound>
            </feature>
        </class>
        <class confirmed="yes">
            <name>org.junit.runner.Result$1</name>
            <outbound type="class" confirmed="no">java.lang.Object</outbound>
            <inbound type="feature" confirmed="yes">org.junit.runner.Result$Listener.Result$Listener(org.junit.runner.Result, org.junit.runner.Result$1)</inbound>
            <inbound type="feature" confirmed="yes">org.junit.runner.Result.createListener()</inbound>
        </class>
        <class confirmed="yes">
            <name>org.junit.runner.Result$Listener</name>
            <outbound type="class" confirmed="yes">org.junit.runner.notification.RunListener</outbound>
            <feature confirmed="yes">
                <name>org.junit.runner.Result$Listener.Result$Listener(org.junit.runner.Result)</name>
                <outbound type="class" confirmed="yes">org.junit.runner.Result</outbound>
                <outbound type="feature" confirmed="yes">org.junit.runner.Result$Listener.this$0</outbound>
                <outbound type="feature" confirmed="yes">org.junit.runner.notification.RunListener.RunListener()</outbound>
                <inbound type="feature" confirmed="yes">org.junit.runner.Result$Listener.Result$Listener(org.junit.runner.Result, org.junit.runner.Result$1)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.junit.runner.Result$Listener.Result$Listener(org.junit.runner.Result, org.junit.runner.Result$1)</name>
                <outbound type="class" confirmed="yes">org.junit.runner.Result</outbound>
                <outbound type="class" confirmed="yes">org.junit.runner.Result$1</outbound>
                <outbound type="feature" confirmed="yes">org.junit.runner.Result$Listener.Result$Listener(org.junit.runner.Result)</outbound>
                <inbound type="feature" confirmed="yes">org.junit.runner.Result.createListener()</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.junit.runner.Result$Listener.testAssumptionFailure(org.junit.runner.notification.Failure)</name>
                <outbound type="class" confirmed="yes">org.junit.runner.notification.Failure</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.junit.runner.Result$Listener.testFailure(org.junit.runner.notification.Failure)</name>
                <outbound type="class" confirmed="no">java.lang.Exception</outbound>
                <outbound type="class" confirmed="no">java.lang.Object</outbound>
                <outbound type="class" confirmed="no">java.util.List</outbound>
                <outbound type="feature" confirmed="no">java.util.List.add(java.lang.Object)</outbound>
                <outbound type="class" confirmed="yes">org.junit.runner.Result</outbound>
                <outbound type="feature" confirmed="yes">org.junit.runner.Result$Listener.this$0</outbound>
                <outbound type="feature" confirmed="yes">org.junit.runner.Result.access$300(org.junit.runner.Result)</outbound>
                <outbound type="class" confirmed="yes">org.junit.runner.notification.Failure</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.junit.runner.Result$Listener.testFinished(org.junit.runner.Description)</name>
                <outbound type="class" confirmed="no">java.lang.Exception</outbound>
                <outbound type="class" confirmed="no">java.util.concurrent.atomic.AtomicInteger</outbound>
                <outbound type="feature" confirmed="no">java.util.concurrent.atomic.AtomicInteger.getAndIncrement()</outbound>
                <outbound type="class" confirmed="yes">org.junit.runner.Description</outbound>
                <outbound type="class" confirmed="yes">org.junit.runner.Result</outbound>
                <outbound type="feature" confirmed="yes">org.junit.runner.Result$Listener.this$0</outbound>
                <outbound type="feature" confirmed="yes">org.junit.runner.Result.access$200(org.junit.runner.Result)</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.junit.runner.Result$Listener.testIgnored(org.junit.runner.Description)</name>
                <outbound type="class" confirmed="no">java.lang.Exception</outbound>
                <outbound type="class" confirmed="no">java.util.concurrent.atomic.AtomicInteger</outbound>
                <outbound type="feature" confirmed="no">java.util.concurrent.atomic.AtomicInteger.getAndIncrement()</outbound>
                <outbound type="class" confirmed="yes">org.junit.runner.Description</outbound>
                <outbound type="class" confirmed="yes">org.junit.runner.Result</outbound>
                <outbound type="feature" confirmed="yes">org.junit.runner.Result$Listener.this$0</outbound>
                <outbound type="feature" confirmed="yes">org.junit.runner.Result.access$400(org.junit.runner.Result)</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.junit.runner.Result$Listener.testRunFinished(org.junit.runner.Result)</name>
                <outbound type="class" confirmed="no">java.lang.Exception</outbound>
                <outbound type="feature" confirmed="no">java.lang.System.currentTimeMillis()</outbound>
                <outbound type="class" confirmed="yes">org.junit.runner.Result</outbound>
                <outbound type="feature" confirmed="yes">org.junit.runner.Result$Listener.this$0</outbound>
                <outbound type="feature" confirmed="yes">org.junit.runner.Result.access$000(org.junit.runner.Result)</outbound>
                <outbound type="feature" confirmed="yes">org.junit.runner.Result.access$114(org.junit.runner.Result, long)</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.junit.runner.Result$Listener.testRunStarted(org.junit.runner.Description)</name>
                <outbound type="class" confirmed="no">java.lang.Exception</outbound>
                <outbound type="feature" confirmed="no">java.lang.System.currentTimeMillis()</outbound>
                <outbound type="class" confirmed="yes">org.junit.runner.Description</outbound>
                <outbound type="class" confirmed="yes">org.junit.runner.Result</outbound>
                <outbound type="feature" confirmed="yes">org.junit.runner.Result$Listener.this$0</outbound>
                <outbound type="feature" confirmed="yes">org.junit.runner.Result.access$002(org.junit.runner.Result, long)</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.junit.runner.Result$Listener.this$0</name>
                <outbound type="class" confirmed="yes">org.junit.runner.Result</outbound>
                <inbound type="feature" confirmed="yes">org.junit.runner.Result$Listener.Result$Listener(org.junit.runner.Result)</inbound>
                <inbound type="feature" confirmed="yes">org.junit.runner.Result$Listener.testFailure(org.junit.runner.notification.Failure)</inbound>
                <inbound type="feature" confirmed="yes">org.junit.runner.Result$Listener.testFinished(org.junit.runner.Description)</inbound>
                <inbound type="feature" confirmed="yes">org.junit.runner.Result$Listener.testIgnored(org.junit.runner.Description)</inbound>
                <inbound type="feature" confirmed="yes">org.junit.runner.Result$Listener.testRunFinished(org.junit.runner.Result)</inbound>
                <inbound type="feature" confirmed="yes">org.junit.runner.Result$Listener.testRunStarted(org.junit.runner.Description)</inbound>
            </feature>
        </class>
        <class confirmed="yes">
            <name>org.junit.runner.RunWith</name>
            <outbound type="class" confirmed="no">java.lang.Object</outbound>
            <outbound type="class" confirmed="no">java.lang.annotation.Annotation</outbound>
            <inbound type="feature" confirmed="yes">org.junit.internal.builders.AnnotatedBuilder.runnerForClass(java.lang.Class)</inbound>
            <feature confirmed="yes">
                <name>org.junit.runner.RunWith.value()</name>
                <outbound type="class" confirmed="no">java.lang.Class</outbound>
                <inbound type="feature" confirmed="yes">org.junit.internal.builders.AnnotatedBuilder.runnerForClass(java.lang.Class)</inbound>
            </feature>
        </class>
        <class confirmed="yes">
            <name>org.junit.runner.Runner</name>
            <outbound type="class" confirmed="no">java.lang.Object</outbound>
            <outbound type="class" confirmed="yes">org.junit.runner.Describable</outbound>
            <inbound type="feature" confirmed="yes">junit.framework.JUnit4TestAdapter.JUnit4TestAdapter(java.lang.Class, junit.framework.JUnit4TestAdapterCache)</inbound>
            <inbound type="feature" confirmed="yes">junit.framework.JUnit4TestAdapter.countTestCases()</inbound>
            <inbound type="feature" confirmed="yes">junit.framework.JUnit4TestAdapter.fRunner</inbound>
            <inbound type="feature" confirmed="yes">junit.framework.JUnit4TestAdapter.filter(org.junit.runner.manipulation.Filter)</inbound>
            <inbound type="feature" confirmed="yes">junit.framework.JUnit4TestAdapter.getDescription()</inbound>
            <inbound type="feature" confirmed="yes">junit.framework.JUnit4TestAdapter.run(junit.framework.TestResult)</inbound>
            <inbound type="feature" confirmed="yes">junit.framework.JUnit4TestAdapter.sort(org.junit.runner.manipulation.Sorter)</inbound>
            <inbound type="feature" confirmed="yes">org.junit.experimental.ParallelComputer.getRunner(org.junit.runners.model.RunnerBuilder, java.lang.Class)</inbound>
            <inbound type="feature" confirmed="yes">org.junit.experimental.ParallelComputer.getSuite(org.junit.runners.model.RunnerBuilder, java.lang.Class[])</inbound>
            <inbound type="feature" confirmed="yes">org.junit.experimental.ParallelComputer.parallelize(org.junit.runner.Runner)</inbound>
            <inbound type="feature" confirmed="yes">org.junit.experimental.max.MaxCore$1.getRunner()</inbound>
            <inbound type="feature" confirmed="yes">org.junit.experimental.max.MaxCore.buildRunner(org.junit.runner.Description)</inbound>
            <inbound type="feature" confirmed="yes">org.junit.experimental.max.MaxCore.constructLeafRequest(java.util.List)</inbound>
            <inbound type="feature" confirmed="yes">org.junit.experimental.max.MaxCore.findLeaves(org.junit.runner.Request)</inbound>
            <inbound type="feature" confirmed="yes">org.junit.experimental.max.MaxCore.run(org.junit.runner.Request, org.junit.runner.JUnitCore)</inbound>
            <inbound type="feature" confirmed="yes">org.junit.internal.builders.AllDefaultPossibilitiesBuilder.runnerForClass(java.lang.Class)</inbound>
            <inbound type="feature" confirmed="yes">org.junit.internal.builders.AnnotatedBuilder.buildRunner(java.lang.Class, java.lang.Class)</inbound>
            <inbound type="feature" confirmed="yes">org.junit.internal.builders.AnnotatedBuilder.runnerForClass(java.lang.Class)</inbound>
            <inbound type="feature" confirmed="yes">org.junit.internal.builders.IgnoredBuilder.runnerForClass(java.lang.Class)</inbound>
            <inbound type="class" confirmed="yes">org.junit.internal.builders.IgnoredClassRunner</inbound>
            <inbound type="feature" confirmed="yes">org.junit.internal.builders.JUnit3Builder.runnerForClass(java.lang.Class)</inbound>
            <inbound type="feature" confirmed="yes">org.junit.internal.builders.JUnit4Builder.runnerForClass(java.lang.Class)</inbound>
            <inbound type="feature" confirmed="yes">org.junit.internal.builders.NullBuilder.runnerForClass(java.lang.Class)</inbound>
            <inbound type="feature" confirmed="yes">org.junit.internal.builders.SuiteMethodBuilder.runnerForClass(java.lang.Class)</inbound>
            <inbound type="feature" confirmed="yes">org.junit.internal.requests.ClassRequest.getRunner()</inbound>
            <inbound type="feature" confirmed="yes">org.junit.internal.requests.FilterRequest.getRunner()</inbound>
            <inbound type="feature" confirmed="yes">org.junit.internal.requests.SortingRequest.getRunner()</inbound>
            <inbound type="class" confirmed="yes">org.junit.internal.runners.ErrorReportingRunner</inbound>
            <inbound type="class" confirmed="yes">org.junit.internal.runners.JUnit38ClassRunner</inbound>
            <inbound type="class" confirmed="yes">org.junit.internal.runners.JUnit4ClassRunner</inbound>
            <inbound type="feature" confirmed="yes">org.junit.runner.Computer$1.runnerForClass(java.lang.Class)</inbound>
            <inbound type="feature" confirmed="yes">org.junit.runner.Computer.getRunner(org.junit.runners.model.RunnerBuilder, java.lang.Class)</inbound>
            <inbound type="feature" confirmed="yes">org.junit.runner.Computer.getSuite(org.junit.runners.model.RunnerBuilder, java.lang.Class[])</inbound>
            <inbound type="feature" confirmed="yes">org.junit.runner.JUnitCore.run(junit.framework.Test)</inbound>
            <inbound type="feature" confirmed="yes">org.junit.runner.JUnitCore.run(org.junit.runner.Request)</inbound>
            <inbound type="feature" confirmed="yes">org.junit.runner.JUnitCore.run(org.junit.runner.Runner)</inbound>
            <inbound type="feature" confirmed="yes">org.junit.runner.Request$1.Request$1(org.junit.runner.Runner)</inbound>
            <inbound type="feature" confirmed="yes">org.junit.runner.Request$1.getRunner()</inbound>
            <inbound type="feature" confirmed="yes">org.junit.runner.Request$1.val$runner</inbound>
            <inbound type="feature" confirmed="yes">org.junit.runner.Request.classes(org.junit.runner.Computer, java.lang.Class[])</inbound>
            <inbound type="feature" confirmed="yes">org.junit.runner.Request.errorReport(java.lang.Class, java.lang.Throwable)</inbound>
            <inbound type="feature" confirmed="yes">org.junit.runner.Request.getRunner()</inbound>
            <inbound type="feature" confirmed="yes">org.junit.runner.Request.runner(org.junit.runner.Runner)</inbound>
            <inbound type="class" confirmed="yes">org.junit.runners.ParentRunner</inbound>
            <inbound type="feature" confirmed="yes">org.junit.runners.Suite.describeChild(java.lang.Object)</inbound>
            <inbound type="feature" confirmed="yes">org.junit.runners.Suite.describeChild(org.junit.runner.Runner)</inbound>
            <inbound type="feature" confirmed="yes">org.junit.runners.Suite.emptySuite()</inbound>
            <inbound type="feature" confirmed="yes">org.junit.runners.Suite.runChild(java.lang.Object, org.junit.runner.notification.RunNotifier)</inbound>
            <inbound type="feature" confirmed="yes">org.junit.runners.Suite.runChild(org.junit.runner.Runner, org.junit.runner.notification.RunNotifier)</inbound>
            <inbound type="feature" confirmed="yes">org.junit.runners.model.RunnerBuilder.runnerForClass(java.lang.Class)</inbound>
            <inbound type="feature" confirmed="yes">org.junit.runners.model.RunnerBuilder.runners(java.lang.Class[])</inbound>
            <inbound type="feature" confirmed="yes">org.junit.runners.model.RunnerBuilder.safeRunnerForClass(java.lang.Class)</inbound>
            <feature confirmed="yes">
                <name>org.junit.runner.Runner.Runner()</name>
                <outbound type="feature" confirmed="no">java.lang.Object.Object()</outbound>
                <inbound type="feature" confirmed="yes">org.junit.internal.builders.IgnoredClassRunner.IgnoredClassRunner(java.lang.Class)</inbound>
                <inbound type="feature" confirmed="yes">org.junit.internal.runners.ErrorReportingRunner.ErrorReportingRunner(java.lang.Class, java.lang.Throwable)</inbound>
                <inbound type="feature" confirmed="yes">org.junit.internal.runners.JUnit38ClassRunner.JUnit38ClassRunner(junit.framework.Test)</inbound>
                <inbound type="feature" confirmed="yes">org.junit.internal.runners.JUnit4ClassRunner.JUnit4ClassRunner(java.lang.Class)</inbound>
                <inbound type="feature" confirmed="yes">org.junit.runners.ParentRunner.ParentRunner(java.lang.Class)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.junit.runner.Runner.getDescription()</name>
                <outbound type="class" confirmed="yes">org.junit.runner.Description</outbound>
                <inbound type="feature" confirmed="yes">junit.framework.JUnit4TestAdapter.getDescription()</inbound>
                <inbound type="feature" confirmed="yes">org.junit.experimental.max.MaxCore.findLeaves(org.junit.runner.Request)</inbound>
                <inbound type="feature" confirmed="yes">org.junit.runner.JUnitCore.run(org.junit.runner.Runner)</inbound>
                <inbound type="feature" confirmed="yes">org.junit.runner.Runner.testCount()</inbound>
                <inbound type="feature" confirmed="yes">org.junit.runners.Suite.describeChild(org.junit.runner.Runner)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.junit.runner.Runner.run(org.junit.runner.notification.RunNotifier)</name>
                <outbound type="class" confirmed="yes">org.junit.runner.notification.RunNotifier</outbound>
                <inbound type="feature" confirmed="yes">junit.framework.JUnit4TestAdapter.run(junit.framework.TestResult)</inbound>
                <inbound type="feature" confirmed="yes">org.junit.runner.JUnitCore.run(org.junit.runner.Runner)</inbound>
                <inbound type="feature" confirmed="yes">org.junit.runners.Suite.runChild(org.junit.runner.Runner, org.junit.runner.notification.RunNotifier)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.junit.runner.Runner.testCount()</name>
                <outbound type="class" confirmed="yes">org.junit.runner.Description</outbound>
                <outbound type="feature" confirmed="yes">org.junit.runner.Description.testCount()</outbound>
                <outbound type="feature" confirmed="yes">org.junit.runner.Runner.getDescription()</outbound>
                <inbound type="feature" confirmed="yes">junit.framework.JUnit4TestAdapter.countTestCases()</inbound>
            </feature>
        </class>
        <class confirmed="yes">
            <name>org.junit.runner.package-info</name>
            <outbound type="class" confirmed="no">java.lang.Object</outbound>
        </class>
    </package>
    <package confirmed="yes">
        <name>org.junit.runner.manipulation</name>
        <class confirmed="yes">
            <name>org.junit.runner.manipulation.Filter</name>
            <outbound type="class" confirmed="no">java.lang.Object</outbound>
            <inbound type="feature" confirmed="yes">junit.framework.JUnit4TestAdapter.filter(org.junit.runner.manipulation.Filter)</inbound>
            <inbound type="class" confirmed="yes">org.junit.experimental.categories.Categories$CategoryFilter</inbound>
            <inbound type="feature" confirmed="yes">org.junit.experimental.categories.Categories.Categories(java.lang.Class, org.junit.runners.model.RunnerBuilder)</inbound>
            <inbound type="feature" confirmed="yes">org.junit.internal.requests.FilterRequest.FilterRequest(org.junit.runner.Request, org.junit.runner.manipulation.Filter)</inbound>
            <inbound type="feature" confirmed="yes">org.junit.internal.requests.FilterRequest.fFilter</inbound>
            <inbound type="feature" confirmed="yes">org.junit.internal.requests.FilterRequest.getRunner()</inbound>
            <inbound type="feature" confirmed="yes">org.junit.internal.runners.JUnit38ClassRunner.filter(org.junit.runner.manipulation.Filter)</inbound>
            <inbound type="feature" confirmed="yes">org.junit.internal.runners.JUnit4ClassRunner.filter(org.junit.runner.manipulation.Filter)</inbound>
            <inbound type="feature" confirmed="yes">org.junit.runner.Request.filterWith(org.junit.runner.Description)</inbound>
            <inbound type="feature" confirmed="yes">org.junit.runner.Request.filterWith(org.junit.runner.manipulation.Filter)</inbound>
            <inbound type="class" confirmed="yes">org.junit.runner.manipulation.Filter$1</inbound>
            <inbound type="feature" confirmed="yes">org.junit.runner.manipulation.Filter$1.intersect(org.junit.runner.manipulation.Filter)</inbound>
            <inbound type="class" confirmed="yes">org.junit.runner.manipulation.Filter$2</inbound>
            <inbound type="class" confirmed="yes">org.junit.runner.manipulation.Filter$3</inbound>
            <inbound type="feature" confirmed="yes">org.junit.runner.manipulation.Filter$3.Filter$3(org.junit.runner.manipulation.Filter, org.junit.runner.manipulation.Filter, org.junit.runner.manipulation.Filter)</inbound>
            <inbound type="feature" confirmed="yes">org.junit.runner.manipulation.Filter$3.describe()</inbound>
            <inbound type="feature" confirmed="yes">org.junit.runner.manipulation.Filter$3.shouldRun(org.junit.runner.Description)</inbound>
            <inbound type="feature" confirmed="yes">org.junit.runner.manipulation.Filter$3.this$0</inbound>
            <inbound type="feature" confirmed="yes">org.junit.runner.manipulation.Filter$3.val$first</inbound>
            <inbound type="feature" confirmed="yes">org.junit.runner.manipulation.Filter$3.val$second</inbound>
            <inbound type="feature" confirmed="yes">org.junit.runner.manipulation.Filterable.filter(org.junit.runner.manipulation.Filter)</inbound>
            <inbound type="feature" confirmed="yes">org.junit.runners.ParentRunner.filter(org.junit.runner.manipulation.Filter)</inbound>
            <inbound type="feature" confirmed="yes">org.junit.runners.ParentRunner.shouldRun(org.junit.runner.manipulation.Filter, java.lang.Object)</inbound>
            <feature confirmed="yes">
                <name>org.junit.runner.manipulation.Filter.ALL</name>
                <inbound type="feature" confirmed="yes">org.junit.runner.manipulation.Filter.intersect(org.junit.runner.manipulation.Filter)</inbound>
                <inbound type="feature" confirmed="yes">org.junit.runner.manipulation.Filter.static {}</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.junit.runner.manipulation.Filter.Filter()</name>
                <outbound type="feature" confirmed="no">java.lang.Object.Object()</outbound>
                <inbound type="feature" confirmed="yes">org.junit.experimental.categories.Categories$CategoryFilter.Categories$CategoryFilter(java.lang.Class, java.lang.Class)</inbound>
                <inbound type="feature" confirmed="yes">org.junit.runner.manipulation.Filter$1.Filter$1()</inbound>
                <inbound type="feature" confirmed="yes">org.junit.runner.manipulation.Filter$2.Filter$2(org.junit.runner.Description)</inbound>
                <inbound type="feature" confirmed="yes">org.junit.runner.manipulation.Filter$3.Filter$3(org.junit.runner.manipulation.Filter, org.junit.runner.manipulation.Filter, org.junit.runner.manipulation.Filter)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.junit.runner.manipulation.Filter.apply(java.lang.Object)</name>
                <outbound type="class" confirmed="no">java.lang.Object</outbound>
                <outbound type="class" confirmed="yes">org.junit.runner.manipulation.Filterable</outbound>
                <outbound type="feature" confirmed="yes">org.junit.runner.manipulation.Filterable.filter(org.junit.runner.manipulation.Filter)</outbound>
                <outbound type="class" confirmed="yes">org.junit.runner.manipulation.NoTestsRemainException</outbound>
                <inbound type="feature" confirmed="yes">junit.framework.JUnit4TestAdapter.filter(org.junit.runner.manipulation.Filter)</inbound>
                <inbound type="feature" confirmed="yes">org.junit.internal.requests.FilterRequest.getRunner()</inbound>
                <inbound type="feature" confirmed="yes">org.junit.runners.ParentRunner.filter(org.junit.runner.manipulation.Filter)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.junit.runner.manipulation.Filter.describe()</name>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <inbound type="feature" confirmed="yes">org.junit.internal.requests.FilterRequest.getRunner()</inbound>
                <inbound type="feature" confirmed="yes">org.junit.runner.manipulation.Filter$3.describe()</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.junit.runner.manipulation.Filter.intersect(org.junit.runner.manipulation.Filter)</name>
                <outbound type="feature" confirmed="yes">org.junit.runner.manipulation.Filter$3.Filter$3(org.junit.runner.manipulation.Filter, org.junit.runner.manipulation.Filter, org.junit.runner.manipulation.Filter)</outbound>
                <outbound type="feature" confirmed="yes">org.junit.runner.manipulation.Filter.ALL</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.junit.runner.manipulation.Filter.matchMethodDescription(org.junit.runner.Description)</name>
                <outbound type="class" confirmed="yes">org.junit.runner.Description</outbound>
                <outbound type="feature" confirmed="yes">org.junit.runner.manipulation.Filter$2.Filter$2(org.junit.runner.Description)</outbound>
                <inbound type="feature" confirmed="yes">org.junit.runner.Request.filterWith(org.junit.runner.Description)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.junit.runner.manipulation.Filter.shouldRun(org.junit.runner.Description)</name>
                <outbound type="class" confirmed="yes">org.junit.runner.Description</outbound>
                <inbound type="feature" confirmed="yes">org.junit.internal.runners.JUnit38ClassRunner.filter(org.junit.runner.manipulation.Filter)</inbound>
                <inbound type="feature" confirmed="yes">org.junit.internal.runners.JUnit4ClassRunner.filter(org.junit.runner.manipulation.Filter)</inbound>
                <inbound type="feature" confirmed="yes">org.junit.runner.manipulation.Filter$3.shouldRun(org.junit.runner.Description)</inbound>
                <inbound type="feature" confirmed="yes">org.junit.runners.ParentRunner.shouldRun(org.junit.runner.manipulation.Filter, java.lang.Object)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.junit.runner.manipulation.Filter.static {}</name>
                <outbound type="feature" confirmed="yes">org.junit.runner.manipulation.Filter$1.Filter$1()</outbound>
                <outbound type="feature" confirmed="yes">org.junit.runner.manipulation.Filter.ALL</outbound>
            </feature>
        </class>
        <class confirmed="yes">
            <name>org.junit.runner.manipulation.Filter$1</name>
            <outbound type="class" confirmed="yes">org.junit.runner.manipulation.Filter</outbound>
            <feature confirmed="yes">
                <name>org.junit.runner.manipulation.Filter$1.Filter$1()</name>
                <outbound type="feature" confirmed="yes">org.junit.runner.manipulation.Filter.Filter()</outbound>
                <inbound type="feature" confirmed="yes">org.junit.runner.manipulation.Filter.static {}</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.junit.runner.manipulation.Filter$1.apply(java.lang.Object)</name>
                <outbound type="class" confirmed="no">java.lang.Object</outbound>
                <outbound type="class" confirmed="yes">org.junit.runner.manipulation.NoTestsRemainException</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.junit.runner.manipulation.Filter$1.describe()</name>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.junit.runner.manipulation.Filter$1.intersect(org.junit.runner.manipulation.Filter)</name>
                <outbound type="class" confirmed="yes">org.junit.runner.manipulation.Filter</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.junit.runner.manipulation.Filter$1.shouldRun(org.junit.runner.Description)</name>
                <outbound type="class" confirmed="yes">org.junit.runner.Description</outbound>
            </feature>
        </class>
        <class confirmed="yes">
            <name>org.junit.runner.manipulation.Filter$2</name>
            <outbound type="class" confirmed="yes">org.junit.runner.manipulation.Filter</outbound>
            <feature confirmed="yes">
                <name>org.junit.runner.manipulation.Filter$2.Filter$2(org.junit.runner.Description)</name>
                <outbound type="class" confirmed="yes">org.junit.runner.Description</outbound>
                <outbound type="feature" confirmed="yes">org.junit.runner.manipulation.Filter$2.val$desiredDescription</outbound>
                <outbound type="feature" confirmed="yes">org.junit.runner.manipulation.Filter.Filter()</outbound>
                <inbound type="feature" confirmed="yes">org.junit.runner.manipulation.Filter.matchMethodDescription(org.junit.runner.Description)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.junit.runner.manipulation.Filter$2.describe()</name>
                <outbound type="class" confirmed="no">java.lang.Object</outbound>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="feature" confirmed="no">java.lang.String.format(java.lang.String, java.lang.Object[])</outbound>
                <outbound type="class" confirmed="yes">org.junit.runner.Description</outbound>
                <outbound type="feature" confirmed="yes">org.junit.runner.Description.getDisplayName()</outbound>
                <outbound type="feature" confirmed="yes">org.junit.runner.manipulation.Filter$2.val$desiredDescription</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.junit.runner.manipulation.Filter$2.shouldRun(org.junit.runner.Description)</name>
                <outbound type="class" confirmed="no">java.lang.Object</outbound>
                <outbound type="class" confirmed="no">java.util.ArrayList</outbound>
                <outbound type="feature" confirmed="no">java.util.ArrayList.iterator()</outbound>
                <outbound type="class" confirmed="no">java.util.Iterator</outbound>
                <outbound type="feature" confirmed="no">java.util.Iterator.hasNext()</outbound>
                <outbound type="feature" confirmed="no">java.util.Iterator.next()</outbound>
                <outbound type="class" confirmed="yes">org.junit.runner.Description</outbound>
                <outbound type="feature" confirmed="yes">org.junit.runner.Description.equals(java.lang.Object)</outbound>
                <outbound type="feature" confirmed="yes">org.junit.runner.Description.getChildren()</outbound>
                <outbound type="feature" confirmed="yes">org.junit.runner.Description.isTest()</outbound>
                <outbound type="feature" confirmed="yes">org.junit.runner.manipulation.Filter$2.val$desiredDescription</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.junit.runner.manipulation.Filter$2.val$desiredDescription</name>
                <outbound type="class" confirmed="yes">org.junit.runner.Description</outbound>
                <inbound type="feature" confirmed="yes">org.junit.runner.manipulation.Filter$2.Filter$2(org.junit.runner.Description)</inbound>
                <inbound type="feature" confirmed="yes">org.junit.runner.manipulation.Filter$2.describe()</inbound>
                <inbound type="feature" confirmed="yes">org.junit.runner.manipulation.Filter$2.shouldRun(org.junit.runner.Description)</inbound>
            </feature>
        </class>
        <class confirmed="yes">
            <name>org.junit.runner.manipulation.Filter$3</name>
            <outbound type="class" confirmed="yes">org.junit.runner.manipulation.Filter</outbound>
            <feature confirmed="yes">
                <name>org.junit.runner.manipulation.Filter$3.Filter$3(org.junit.runner.manipulation.Filter, org.junit.runner.manipulation.Filter, org.junit.runner.manipulation.Filter)</name>
                <outbound type="class" confirmed="yes">org.junit.runner.manipulation.Filter</outbound>
                <outbound type="feature" confirmed="yes">org.junit.runner.manipulation.Filter$3.this$0</outbound>
                <outbound type="feature" confirmed="yes">org.junit.runner.manipulation.Filter$3.val$first</outbound>
                <outbound type="feature" confirmed="yes">org.junit.runner.manipulation.Filter$3.val$second</outbound>
                <outbound type="feature" confirmed="yes">org.junit.runner.manipulation.Filter.Filter()</outbound>
                <inbound type="feature" confirmed="yes">org.junit.runner.manipulation.Filter.intersect(org.junit.runner.manipulation.Filter)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.junit.runner.manipulation.Filter$3.describe()</name>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="class" confirmed="no">java.lang.StringBuilder</outbound>
                <outbound type="feature" confirmed="no">java.lang.StringBuilder.StringBuilder()</outbound>
                <outbound type="feature" confirmed="no">java.lang.StringBuilder.append(java.lang.String)</outbound>
                <outbound type="feature" confirmed="no">java.lang.StringBuilder.toString()</outbound>
                <outbound type="class" confirmed="yes">org.junit.runner.manipulation.Filter</outbound>
                <outbound type="feature" confirmed="yes">org.junit.runner.manipulation.Filter$3.val$first</outbound>
                <outbound type="feature" confirmed="yes">org.junit.runner.manipulation.Filter$3.val$second</outbound>
                <outbound type="feature" confirmed="yes">org.junit.runner.manipulation.Filter.describe()</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.junit.runner.manipulation.Filter$3.shouldRun(org.junit.runner.Description)</name>
                <outbound type="class" confirmed="yes">org.junit.runner.Description</outbound>
                <outbound type="class" confirmed="yes">org.junit.runner.manipulation.Filter</outbound>
                <outbound type="feature" confirmed="yes">org.junit.runner.manipulation.Filter$3.val$first</outbound>
                <outbound type="feature" confirmed="yes">org.junit.runner.manipulation.Filter$3.val$second</outbound>
                <outbound type="feature" confirmed="yes">org.junit.runner.manipulation.Filter.shouldRun(org.junit.runner.Description)</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.junit.runner.manipulation.Filter$3.this$0</name>
                <outbound type="class" confirmed="yes">org.junit.runner.manipulation.Filter</outbound>
                <inbound type="feature" confirmed="yes">org.junit.runner.manipulation.Filter$3.Filter$3(org.junit.runner.manipulation.Filter, org.junit.runner.manipulation.Filter, org.junit.runner.manipulation.Filter)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.junit.runner.manipulation.Filter$3.val$first</name>
                <outbound type="class" confirmed="yes">org.junit.runner.manipulation.Filter</outbound>
                <inbound type="feature" confirmed="yes">org.junit.runner.manipulation.Filter$3.Filter$3(org.junit.runner.manipulation.Filter, org.junit.runner.manipulation.Filter, org.junit.runner.manipulation.Filter)</inbound>
                <inbound type="feature" confirmed="yes">org.junit.runner.manipulation.Filter$3.describe()</inbound>
                <inbound type="feature" confirmed="yes">org.junit.runner.manipulation.Filter$3.shouldRun(org.junit.runner.Description)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.junit.runner.manipulation.Filter$3.val$second</name>
                <outbound type="class" confirmed="yes">org.junit.runner.manipulation.Filter</outbound>
                <inbound type="feature" confirmed="yes">org.junit.runner.manipulation.Filter$3.Filter$3(org.junit.runner.manipulation.Filter, org.junit.runner.manipulation.Filter, org.junit.runner.manipulation.Filter)</inbound>
                <inbound type="feature" confirmed="yes">org.junit.runner.manipulation.Filter$3.describe()</inbound>
                <inbound type="feature" confirmed="yes">org.junit.runner.manipulation.Filter$3.shouldRun(org.junit.runner.Description)</inbound>
            </feature>
        </class>
        <class confirmed="yes">
            <name>org.junit.runner.manipulation.Filterable</name>
            <outbound type="class" confirmed="no">java.lang.Object</outbound>
            <inbound type="class" confirmed="yes">junit.framework.JUnit4TestAdapter</inbound>
            <inbound type="class" confirmed="yes">org.junit.internal.runners.JUnit38ClassRunner</inbound>
            <inbound type="feature" confirmed="yes">org.junit.internal.runners.JUnit38ClassRunner.filter(org.junit.runner.manipulation.Filter)</inbound>
            <inbound type="class" confirmed="yes">org.junit.internal.runners.JUnit4ClassRunner</inbound>
            <inbound type="feature" confirmed="yes">org.junit.runner.manipulation.Filter.apply(java.lang.Object)</inbound>
            <inbound type="class" confirmed="yes">org.junit.runners.ParentRunner</inbound>
            <feature confirmed="yes">
                <name>org.junit.runner.manipulation.Filterable.filter(org.junit.runner.manipulation.Filter)</name>
                <outbound type="class" confirmed="yes">org.junit.runner.manipulation.Filter</outbound>
                <outbound type="class" confirmed="yes">org.junit.runner.manipulation.NoTestsRemainException</outbound>
                <inbound type="feature" confirmed="yes">org.junit.internal.runners.JUnit38ClassRunner.filter(org.junit.runner.manipulation.Filter)</inbound>
                <inbound type="feature" confirmed="yes">org.junit.runner.manipulation.Filter.apply(java.lang.Object)</inbound>
            </feature>
        </class>
        <class confirmed="yes">
            <name>org.junit.runner.manipulation.NoTestsRemainException</name>
            <outbound type="class" confirmed="no">java.lang.Exception</outbound>
            <inbound type="feature" confirmed="yes">junit.framework.JUnit4TestAdapter.filter(org.junit.runner.manipulation.Filter)</inbound>
            <inbound type="feature" confirmed="yes">org.junit.experimental.categories.Categories.Categories(java.lang.Class, org.junit.runners.model.RunnerBuilder)</inbound>
            <inbound type="feature" confirmed="yes">org.junit.internal.requests.FilterRequest.getRunner()</inbound>
            <inbound type="feature" confirmed="yes">org.junit.internal.runners.JUnit38ClassRunner.filter(org.junit.runner.manipulation.Filter)</inbound>
            <inbound type="feature" confirmed="yes">org.junit.internal.runners.JUnit4ClassRunner.filter(org.junit.runner.manipulation.Filter)</inbound>
            <inbound type="feature" confirmed="yes">org.junit.runner.manipulation.Filter$1.apply(java.lang.Object)</inbound>
            <inbound type="feature" confirmed="yes">org.junit.runner.manipulation.Filter.apply(java.lang.Object)</inbound>
            <inbound type="feature" confirmed="yes">org.junit.runner.manipulation.Filterable.filter(org.junit.runner.manipulation.Filter)</inbound>
            <inbound type="feature" confirmed="yes">org.junit.runners.ParentRunner.filter(org.junit.runner.manipulation.Filter)</inbound>
            <feature confirmed="yes">
                <name>org.junit.runner.manipulation.NoTestsRemainException.NoTestsRemainException()</name>
                <outbound type="feature" confirmed="no">java.lang.Exception.Exception()</outbound>
                <inbound type="feature" confirmed="yes">org.junit.internal.runners.JUnit4ClassRunner.filter(org.junit.runner.manipulation.Filter)</inbound>
                <inbound type="feature" confirmed="yes">org.junit.runners.ParentRunner.filter(org.junit.runner.manipulation.Filter)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.junit.runner.manipulation.NoTestsRemainException.serialVersionUID</name>
            </feature>
        </class>
        <class confirmed="yes">
            <name>org.junit.runner.manipulation.Sortable</name>
            <outbound type="class" confirmed="no">java.lang.Object</outbound>
            <inbound type="class" confirmed="yes">junit.framework.JUnit4TestAdapter</inbound>
            <inbound type="class" confirmed="yes">org.junit.internal.runners.JUnit38ClassRunner</inbound>
            <inbound type="feature" confirmed="yes">org.junit.internal.runners.JUnit38ClassRunner.sort(org.junit.runner.manipulation.Sorter)</inbound>
            <inbound type="class" confirmed="yes">org.junit.internal.runners.JUnit4ClassRunner</inbound>
            <inbound type="feature" confirmed="yes">org.junit.runner.manipulation.Sorter.apply(java.lang.Object)</inbound>
            <inbound type="class" confirmed="yes">org.junit.runners.ParentRunner</inbound>
            <feature confirmed="yes">
                <name>org.junit.runner.manipulation.Sortable.sort(org.junit.runner.manipulation.Sorter)</name>
                <outbound type="class" confirmed="yes">org.junit.runner.manipulation.Sorter</outbound>
                <inbound type="feature" confirmed="yes">org.junit.internal.runners.JUnit38ClassRunner.sort(org.junit.runner.manipulation.Sorter)</inbound>
                <inbound type="feature" confirmed="yes">org.junit.runner.manipulation.Sorter.apply(java.lang.Object)</inbound>
            </feature>
        </class>
        <class confirmed="yes">
            <name>org.junit.runner.manipulation.Sorter</name>
            <outbound type="class" confirmed="no">java.lang.Object</outbound>
            <outbound type="class" confirmed="no">java.util.Comparator</outbound>
            <inbound type="feature" confirmed="yes">junit.framework.JUnit4TestAdapter.sort(org.junit.runner.manipulation.Sorter)</inbound>
            <inbound type="feature" confirmed="yes">org.junit.internal.runners.JUnit38ClassRunner.sort(org.junit.runner.manipulation.Sorter)</inbound>
            <inbound type="feature" confirmed="yes">org.junit.internal.runners.JUnit4ClassRunner$2.JUnit4ClassRunner$2(org.junit.internal.runners.JUnit4ClassRunner, org.junit.runner.manipulation.Sorter)</inbound>
            <inbound type="feature" confirmed="yes">org.junit.internal.runners.JUnit4ClassRunner$2.compare(java.lang.reflect.Method, java.lang.reflect.Method)</inbound>
            <inbound type="feature" confirmed="yes">org.junit.internal.runners.JUnit4ClassRunner$2.val$sorter</inbound>
            <inbound type="feature" confirmed="yes">org.junit.internal.runners.JUnit4ClassRunner.sort(org.junit.runner.manipulation.Sorter)</inbound>
            <inbound type="feature" confirmed="yes">org.junit.runner.manipulation.Sortable.sort(org.junit.runner.manipulation.Sorter)</inbound>
            <inbound type="feature" confirmed="yes">org.junit.runners.ParentRunner$4.compare(java.lang.Object, java.lang.Object)</inbound>
            <inbound type="feature" confirmed="yes">org.junit.runners.ParentRunner.ParentRunner(java.lang.Class)</inbound>
            <inbound type="feature" confirmed="yes">org.junit.runners.ParentRunner.access$100(org.junit.runners.ParentRunner)</inbound>
            <inbound type="feature" confirmed="yes">org.junit.runners.ParentRunner.fSorter</inbound>
            <inbound type="feature" confirmed="yes">org.junit.runners.ParentRunner.sort(org.junit.runner.manipulation.Sorter)</inbound>
            <inbound type="feature" confirmed="yes">org.junit.runners.ParentRunner.sortChild(java.lang.Object)</inbound>
            <feature confirmed="yes">
                <name>org.junit.runner.manipulation.Sorter.NULL</name>
                <inbound type="feature" confirmed="yes">org.junit.runner.manipulation.Sorter.static {}</inbound>
                <inbound type="feature" confirmed="yes">org.junit.runners.ParentRunner.ParentRunner(java.lang.Class)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.junit.runner.manipulation.Sorter.Sorter(java.util.Comparator)</name>
                <outbound type="feature" confirmed="no">java.lang.Object.Object()</outbound>
                <outbound type="class" confirmed="no">java.util.Comparator</outbound>
                <outbound type="feature" confirmed="yes">org.junit.runner.manipulation.Sorter.fComparator</outbound>
                <inbound type="feature" confirmed="yes">org.junit.internal.requests.SortingRequest.getRunner()</inbound>
                <inbound type="feature" confirmed="yes">org.junit.runner.manipulation.Sorter.static {}</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.junit.runner.manipulation.Sorter.apply(java.lang.Object)</name>
                <outbound type="class" confirmed="no">java.lang.Object</outbound>
                <outbound type="class" confirmed="yes">org.junit.runner.manipulation.Sortable</outbound>
                <outbound type="feature" confirmed="yes">org.junit.runner.manipulation.Sortable.sort(org.junit.runner.manipulation.Sorter)</outbound>
                <inbound type="feature" confirmed="yes">junit.framework.JUnit4TestAdapter.sort(org.junit.runner.manipulation.Sorter)</inbound>
                <inbound type="feature" confirmed="yes">org.junit.internal.requests.SortingRequest.getRunner()</inbound>
                <inbound type="feature" confirmed="yes">org.junit.runners.ParentRunner.sortChild(java.lang.Object)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.junit.runner.manipulation.Sorter.compare(java.lang.Object, java.lang.Object)</name>
                <outbound type="class" confirmed="no">java.lang.Object</outbound>
                <outbound type="class" confirmed="yes">org.junit.runner.Description</outbound>
                <outbound type="feature" confirmed="yes">org.junit.runner.manipulation.Sorter.compare(org.junit.runner.Description, org.junit.runner.Description)</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.junit.runner.manipulation.Sorter.compare(org.junit.runner.Description, org.junit.runner.Description)</name>
                <outbound type="class" confirmed="no">java.lang.Object</outbound>
                <outbound type="class" confirmed="no">java.util.Comparator</outbound>
                <outbound type="feature" confirmed="no">java.util.Comparator.compare(java.lang.Object, java.lang.Object)</outbound>
                <outbound type="class" confirmed="yes">org.junit.runner.Description</outbound>
                <outbound type="feature" confirmed="yes">org.junit.runner.manipulation.Sorter.fComparator</outbound>
                <inbound type="feature" confirmed="yes">org.junit.internal.runners.JUnit4ClassRunner$2.compare(java.lang.reflect.Method, java.lang.reflect.Method)</inbound>
                <inbound type="feature" confirmed="yes">org.junit.runner.manipulation.Sorter.compare(java.lang.Object, java.lang.Object)</inbound>
                <inbound type="feature" confirmed="yes">org.junit.runners.ParentRunner$4.compare(java.lang.Object, java.lang.Object)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.junit.runner.manipulation.Sorter.fComparator</name>
                <outbound type="class" confirmed="no">java.util.Comparator</outbound>
                <inbound type="feature" confirmed="yes">org.junit.runner.manipulation.Sorter.Sorter(java.util.Comparator)</inbound>
                <inbound type="feature" confirmed="yes">org.junit.runner.manipulation.Sorter.compare(org.junit.runner.Description, org.junit.runner.Description)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.junit.runner.manipulation.Sorter.static {}</name>
                <outbound type="class" confirmed="no">java.util.Comparator</outbound>
                <outbound type="feature" confirmed="yes">org.junit.runner.manipulation.Sorter$1.Sorter$1()</outbound>
                <outbound type="feature" confirmed="yes">org.junit.runner.manipulation.Sorter.NULL</outbound>
                <outbound type="feature" confirmed="yes">org.junit.runner.manipulation.Sorter.Sorter(java.util.Comparator)</outbound>
            </feature>
        </class>
        <class confirmed="yes">
            <name>org.junit.runner.manipulation.Sorter$1</name>
            <outbound type="class" confirmed="no">java.lang.Object</outbound>
            <outbound type="class" confirmed="no">java.util.Comparator</outbound>
            <feature confirmed="yes">
                <name>org.junit.runner.manipulation.Sorter$1.Sorter$1()</name>
                <outbound type="feature" confirmed="no">java.lang.Object.Object()</outbound>
                <inbound type="feature" confirmed="yes">org.junit.runner.manipulation.Sorter.static {}</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.junit.runner.manipulation.Sorter$1.compare(java.lang.Object, java.lang.Object)</name>
                <outbound type="class" confirmed="no">java.lang.Object</outbound>
                <outbound type="class" confirmed="yes">org.junit.runner.Description</outbound>
                <outbound type="feature" confirmed="yes">org.junit.runner.manipulation.Sorter$1.compare(org.junit.runner.Description, org.junit.runner.Description)</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.junit.runner.manipulation.Sorter$1.compare(org.junit.runner.Description, org.junit.runner.Description)</name>
                <outbound type="class" confirmed="yes">org.junit.runner.Description</outbound>
                <inbound type="feature" confirmed="yes">org.junit.runner.manipulation.Sorter$1.compare(java.lang.Object, java.lang.Object)</inbound>
            </feature>
        </class>
        <class confirmed="yes">
            <name>org.junit.runner.manipulation.package-info</name>
            <outbound type="class" confirmed="no">java.lang.Object</outbound>
        </class>
    </package>
    <package confirmed="yes">
        <name>org.junit.runner.notification</name>
        <class confirmed="yes">
            <name>org.junit.runner.notification.Failure</name>
            <outbound type="class" confirmed="no">java.lang.Object</outbound>
            <inbound type="feature" confirmed="yes">junit.framework.JUnit4TestAdapterCache$1.testFailure(org.junit.runner.notification.Failure)</inbound>
            <inbound type="feature" confirmed="yes">org.junit.experimental.max.MaxHistory$RememberingListener.testFailure(org.junit.runner.notification.Failure)</inbound>
            <inbound type="feature" confirmed="yes">org.junit.experimental.results.FailureList.result()</inbound>
            <inbound type="feature" confirmed="yes">org.junit.internal.TextListener.printFailure(org.junit.runner.notification.Failure, java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">org.junit.internal.TextListener.printFailures(org.junit.runner.Result)</inbound>
            <inbound type="feature" confirmed="yes">org.junit.internal.TextListener.testFailure(org.junit.runner.notification.Failure)</inbound>
            <inbound type="feature" confirmed="yes">org.junit.internal.runners.ClassRoadie.addFailure(java.lang.Throwable)</inbound>
            <inbound type="feature" confirmed="yes">org.junit.internal.runners.ErrorReportingRunner.runCause(java.lang.Throwable, org.junit.runner.notification.RunNotifier)</inbound>
            <inbound type="feature" confirmed="yes">org.junit.internal.runners.JUnit38ClassRunner$OldTestClassAdaptingListener.addError(junit.framework.Test, java.lang.Throwable)</inbound>
            <inbound type="feature" confirmed="yes">org.junit.internal.runners.JUnit4ClassRunner.testAborted(org.junit.runner.notification.RunNotifier, org.junit.runner.Description, java.lang.Throwable)</inbound>
            <inbound type="feature" confirmed="yes">org.junit.internal.runners.MethodRoadie.addFailure(java.lang.Throwable)</inbound>
            <inbound type="feature" confirmed="yes">org.junit.internal.runners.model.EachTestNotifier.addFailedAssumption(org.junit.internal.AssumptionViolatedException)</inbound>
            <inbound type="feature" confirmed="yes">org.junit.internal.runners.model.EachTestNotifier.addFailure(java.lang.Throwable)</inbound>
            <inbound type="feature" confirmed="yes">org.junit.runner.JUnitCore.runMain(org.junit.internal.JUnitSystem, java.lang.String[])</inbound>
            <inbound type="feature" confirmed="yes">org.junit.runner.Result$Listener.testAssumptionFailure(org.junit.runner.notification.Failure)</inbound>
            <inbound type="feature" confirmed="yes">org.junit.runner.Result$Listener.testFailure(org.junit.runner.notification.Failure)</inbound>
            <inbound type="feature" confirmed="yes">org.junit.runner.notification.RunListener.testAssumptionFailure(org.junit.runner.notification.Failure)</inbound>
            <inbound type="feature" confirmed="yes">org.junit.runner.notification.RunListener.testFailure(org.junit.runner.notification.Failure)</inbound>
            <inbound type="feature" confirmed="yes">org.junit.runner.notification.RunNotifier$4.RunNotifier$4(org.junit.runner.notification.RunNotifier, org.junit.runner.notification.Failure)</inbound>
            <inbound type="feature" confirmed="yes">org.junit.runner.notification.RunNotifier$4.notifyListener(org.junit.runner.notification.RunListener)</inbound>
            <inbound type="feature" confirmed="yes">org.junit.runner.notification.RunNotifier$4.val$failure</inbound>
            <inbound type="feature" confirmed="yes">org.junit.runner.notification.RunNotifier$5.RunNotifier$5(org.junit.runner.notification.RunNotifier, org.junit.runner.notification.Failure)</inbound>
            <inbound type="feature" confirmed="yes">org.junit.runner.notification.RunNotifier$5.notifyListener(org.junit.runner.notification.RunListener)</inbound>
            <inbound type="feature" confirmed="yes">org.junit.runner.notification.RunNotifier$5.val$failure</inbound>
            <inbound type="feature" confirmed="yes">org.junit.runner.notification.RunNotifier$SafeNotifier.run()</inbound>
            <inbound type="feature" confirmed="yes">org.junit.runner.notification.RunNotifier.fireTestAssumptionFailed(org.junit.runner.notification.Failure)</inbound>
            <inbound type="feature" confirmed="yes">org.junit.runner.notification.RunNotifier.fireTestFailure(org.junit.runner.notification.Failure)</inbound>
            <feature confirmed="yes">
                <name>org.junit.runner.notification.Failure.Failure(org.junit.runner.Description, java.lang.Throwable)</name>
                <outbound type="feature" confirmed="no">java.lang.Object.Object()</outbound>
                <outbound type="class" confirmed="no">java.lang.Throwable</outbound>
                <outbound type="class" confirmed="yes">org.junit.runner.Description</outbound>
                <outbound type="feature" confirmed="yes">org.junit.runner.notification.Failure.fDescription</outbound>
                <outbound type="feature" confirmed="yes">org.junit.runner.notification.Failure.fThrownException</outbound>
                <inbound type="feature" confirmed="yes">org.junit.internal.runners.ClassRoadie.addFailure(java.lang.Throwable)</inbound>
                <inbound type="feature" confirmed="yes">org.junit.internal.runners.ErrorReportingRunner.runCause(java.lang.Throwable, org.junit.runner.notification.RunNotifier)</inbound>
                <inbound type="feature" confirmed="yes">org.junit.internal.runners.JUnit38ClassRunner$OldTestClassAdaptingListener.addError(junit.framework.Test, java.lang.Throwable)</inbound>
                <inbound type="feature" confirmed="yes">org.junit.internal.runners.JUnit4ClassRunner.testAborted(org.junit.runner.notification.RunNotifier, org.junit.runner.Description, java.lang.Throwable)</inbound>
                <inbound type="feature" confirmed="yes">org.junit.internal.runners.MethodRoadie.addFailure(java.lang.Throwable)</inbound>
                <inbound type="feature" confirmed="yes">org.junit.internal.runners.model.EachTestNotifier.addFailedAssumption(org.junit.internal.AssumptionViolatedException)</inbound>
                <inbound type="feature" confirmed="yes">org.junit.internal.runners.model.EachTestNotifier.addFailure(java.lang.Throwable)</inbound>
                <inbound type="feature" confirmed="yes">org.junit.runner.JUnitCore.runMain(org.junit.internal.JUnitSystem, java.lang.String[])</inbound>
                <inbound type="feature" confirmed="yes">org.junit.runner.notification.RunNotifier$SafeNotifier.run()</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.junit.runner.notification.Failure.fDescription</name>
                <outbound type="class" confirmed="yes">org.junit.runner.Description</outbound>
                <inbound type="feature" confirmed="yes">org.junit.runner.notification.Failure.Failure(org.junit.runner.Description, java.lang.Throwable)</inbound>
                <inbound type="feature" confirmed="yes">org.junit.runner.notification.Failure.getDescription()</inbound>
                <inbound type="feature" confirmed="yes">org.junit.runner.notification.Failure.getTestHeader()</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.junit.runner.notification.Failure.fThrownException</name>
                <outbound type="class" confirmed="no">java.lang.Throwable</outbound>
                <inbound type="feature" confirmed="yes">org.junit.runner.notification.Failure.Failure(org.junit.runner.Description, java.lang.Throwable)</inbound>
                <inbound type="feature" confirmed="yes">org.junit.runner.notification.Failure.getException()</inbound>
                <inbound type="feature" confirmed="yes">org.junit.runner.notification.Failure.toString()</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.junit.runner.notification.Failure.getDescription()</name>
                <outbound type="class" confirmed="yes">org.junit.runner.Description</outbound>
                <outbound type="feature" confirmed="yes">org.junit.runner.notification.Failure.fDescription</outbound>
                <inbound type="feature" confirmed="yes">junit.framework.JUnit4TestAdapterCache$1.testFailure(org.junit.runner.notification.Failure)</inbound>
                <inbound type="feature" confirmed="yes">org.junit.experimental.max.MaxHistory$RememberingListener.testFailure(org.junit.runner.notification.Failure)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.junit.runner.notification.Failure.getException()</name>
                <outbound type="class" confirmed="no">java.lang.Throwable</outbound>
                <outbound type="feature" confirmed="yes">org.junit.runner.notification.Failure.fThrownException</outbound>
                <inbound type="feature" confirmed="yes">junit.framework.JUnit4TestAdapterCache$1.testFailure(org.junit.runner.notification.Failure)</inbound>
                <inbound type="feature" confirmed="yes">org.junit.runner.notification.Failure.getMessage()</inbound>
                <inbound type="feature" confirmed="yes">org.junit.runner.notification.Failure.getTrace()</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.junit.runner.notification.Failure.getMessage()</name>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="class" confirmed="no">java.lang.Throwable</outbound>
                <outbound type="feature" confirmed="no">java.lang.Throwable.getMessage()</outbound>
                <outbound type="feature" confirmed="yes">org.junit.runner.notification.Failure.getException()</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.junit.runner.notification.Failure.getTestHeader()</name>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="class" confirmed="yes">org.junit.runner.Description</outbound>
                <outbound type="feature" confirmed="yes">org.junit.runner.Description.getDisplayName()</outbound>
                <outbound type="feature" confirmed="yes">org.junit.runner.notification.Failure.fDescription</outbound>
                <inbound type="feature" confirmed="yes">org.junit.internal.TextListener.printFailure(org.junit.runner.notification.Failure, java.lang.String)</inbound>
                <inbound type="feature" confirmed="yes">org.junit.runner.notification.Failure.toString()</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.junit.runner.notification.Failure.getTrace()</name>
                <outbound type="class" confirmed="no">java.io.PrintWriter</outbound>
                <outbound type="feature" confirmed="no">java.io.PrintWriter.PrintWriter(java.io.Writer)</outbound>
                <outbound type="feature" confirmed="no">java.io.StringWriter.StringWriter()</outbound>
                <outbound type="feature" confirmed="no">java.io.StringWriter.getBuffer()</outbound>
                <outbound type="class" confirmed="no">java.io.Writer</outbound>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="class" confirmed="no">java.lang.StringBuffer</outbound>
                <outbound type="feature" confirmed="no">java.lang.StringBuffer.toString()</outbound>
                <outbound type="class" confirmed="no">java.lang.Throwable</outbound>
                <outbound type="feature" confirmed="no">java.lang.Throwable.printStackTrace(java.io.PrintWriter)</outbound>
                <outbound type="feature" confirmed="yes">org.junit.runner.notification.Failure.getException()</outbound>
                <inbound type="feature" confirmed="yes">org.junit.internal.TextListener.printFailure(org.junit.runner.notification.Failure, java.lang.String)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.junit.runner.notification.Failure.toString()</name>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="class" confirmed="no">java.lang.StringBuffer</outbound>
                <outbound type="feature" confirmed="no">java.lang.StringBuffer.StringBuffer()</outbound>
                <outbound type="feature" confirmed="no">java.lang.StringBuffer.append(java.lang.String)</outbound>
                <outbound type="feature" confirmed="no">java.lang.StringBuffer.toString()</outbound>
                <outbound type="class" confirmed="no">java.lang.StringBuilder</outbound>
                <outbound type="feature" confirmed="no">java.lang.StringBuilder.StringBuilder()</outbound>
                <outbound type="feature" confirmed="no">java.lang.StringBuilder.append(java.lang.String)</outbound>
                <outbound type="feature" confirmed="no">java.lang.StringBuilder.toString()</outbound>
                <outbound type="class" confirmed="no">java.lang.Throwable</outbound>
                <outbound type="feature" confirmed="no">java.lang.Throwable.getMessage()</outbound>
                <outbound type="feature" confirmed="yes">org.junit.runner.notification.Failure.fThrownException</outbound>
                <outbound type="feature" confirmed="yes">org.junit.runner.notification.Failure.getTestHeader()</outbound>
            </feature>
        </class>
        <class confirmed="yes">
            <name>org.junit.runner.notification.RunListener</name>
            <outbound type="class" confirmed="no">java.lang.Object</outbound>
            <inbound type="class" confirmed="yes">junit.framework.JUnit4TestAdapterCache$1</inbound>
            <inbound type="feature" confirmed="yes">junit.framework.JUnit4TestAdapterCache.getNotifier(junit.framework.TestResult, junit.framework.JUnit4TestAdapter)</inbound>
            <inbound type="feature" confirmed="yes">org.junit.experimental.max.MaxCore.run(org.junit.runner.Request, org.junit.runner.JUnitCore)</inbound>
            <inbound type="class" confirmed="yes">org.junit.experimental.max.MaxHistory$RememberingListener</inbound>
            <inbound type="feature" confirmed="yes">org.junit.experimental.max.MaxHistory.listener()</inbound>
            <inbound type="feature" confirmed="yes">org.junit.experimental.results.FailureList.result()</inbound>
            <inbound type="class" confirmed="yes">org.junit.internal.TextListener</inbound>
            <inbound type="feature" confirmed="yes">org.junit.runner.JUnitCore.addListener(org.junit.runner.notification.RunListener)</inbound>
            <inbound type="feature" confirmed="yes">org.junit.runner.JUnitCore.removeListener(org.junit.runner.notification.RunListener)</inbound>
            <inbound type="feature" confirmed="yes">org.junit.runner.JUnitCore.run(org.junit.runner.Runner)</inbound>
            <inbound type="feature" confirmed="yes">org.junit.runner.JUnitCore.runMain(org.junit.internal.JUnitSystem, java.lang.String[])</inbound>
            <inbound type="class" confirmed="yes">org.junit.runner.Result$Listener</inbound>
            <inbound type="feature" confirmed="yes">org.junit.runner.Result.createListener()</inbound>
            <inbound type="feature" confirmed="yes">org.junit.runner.notification.RunNotifier$1.notifyListener(org.junit.runner.notification.RunListener)</inbound>
            <inbound type="feature" confirmed="yes">org.junit.runner.notification.RunNotifier$2.notifyListener(org.junit.runner.notification.RunListener)</inbound>
            <inbound type="feature" confirmed="yes">org.junit.runner.notification.RunNotifier$3.notifyListener(org.junit.runner.notification.RunListener)</inbound>
            <inbound type="feature" confirmed="yes">org.junit.runner.notification.RunNotifier$4.notifyListener(org.junit.runner.notification.RunListener)</inbound>
            <inbound type="feature" confirmed="yes">org.junit.runner.notification.RunNotifier$5.notifyListener(org.junit.runner.notification.RunListener)</inbound>
            <inbound type="feature" confirmed="yes">org.junit.runner.notification.RunNotifier$6.notifyListener(org.junit.runner.notification.RunListener)</inbound>
            <inbound type="feature" confirmed="yes">org.junit.runner.notification.RunNotifier$7.notifyListener(org.junit.runner.notification.RunListener)</inbound>
            <inbound type="feature" confirmed="yes">org.junit.runner.notification.RunNotifier$SafeNotifier.notifyListener(org.junit.runner.notification.RunListener)</inbound>
            <inbound type="feature" confirmed="yes">org.junit.runner.notification.RunNotifier$SafeNotifier.run()</inbound>
            <inbound type="feature" confirmed="yes">org.junit.runner.notification.RunNotifier.addFirstListener(org.junit.runner.notification.RunListener)</inbound>
            <inbound type="feature" confirmed="yes">org.junit.runner.notification.RunNotifier.addListener(org.junit.runner.notification.RunListener)</inbound>
            <inbound type="feature" confirmed="yes">org.junit.runner.notification.RunNotifier.removeListener(org.junit.runner.notification.RunListener)</inbound>
            <feature confirmed="yes">
                <name>org.junit.runner.notification.RunListener.RunListener()</name>
                <outbound type="feature" confirmed="no">java.lang.Object.Object()</outbound>
                <inbound type="feature" confirmed="yes">junit.framework.JUnit4TestAdapterCache$1.JUnit4TestAdapterCache$1(junit.framework.JUnit4TestAdapterCache, junit.framework.TestResult)</inbound>
                <inbound type="feature" confirmed="yes">org.junit.experimental.max.MaxHistory$RememberingListener.MaxHistory$RememberingListener(org.junit.experimental.max.MaxHistory)</inbound>
                <inbound type="feature" confirmed="yes">org.junit.internal.TextListener.TextListener(java.io.PrintStream)</inbound>
                <inbound type="feature" confirmed="yes">org.junit.runner.Result$Listener.Result$Listener(org.junit.runner.Result)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.junit.runner.notification.RunListener.testAssumptionFailure(org.junit.runner.notification.Failure)</name>
                <outbound type="class" confirmed="yes">org.junit.runner.notification.Failure</outbound>
                <inbound type="feature" confirmed="yes">org.junit.runner.notification.RunNotifier$5.notifyListener(org.junit.runner.notification.RunListener)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.junit.runner.notification.RunListener.testFailure(org.junit.runner.notification.Failure)</name>
                <outbound type="class" confirmed="no">java.lang.Exception</outbound>
                <outbound type="class" confirmed="yes">org.junit.runner.notification.Failure</outbound>
                <inbound type="feature" confirmed="yes">org.junit.experimental.results.FailureList.result()</inbound>
                <inbound type="feature" confirmed="yes">org.junit.runner.notification.RunNotifier$4.notifyListener(org.junit.runner.notification.RunListener)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.junit.runner.notification.RunListener.testFinished(org.junit.runner.Description)</name>
                <outbound type="class" confirmed="no">java.lang.Exception</outbound>
                <outbound type="class" confirmed="yes">org.junit.runner.Description</outbound>
                <inbound type="feature" confirmed="yes">org.junit.runner.notification.RunNotifier$7.notifyListener(org.junit.runner.notification.RunListener)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.junit.runner.notification.RunListener.testIgnored(org.junit.runner.Description)</name>
                <outbound type="class" confirmed="no">java.lang.Exception</outbound>
                <outbound type="class" confirmed="yes">org.junit.runner.Description</outbound>
                <inbound type="feature" confirmed="yes">org.junit.runner.notification.RunNotifier$6.notifyListener(org.junit.runner.notification.RunListener)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.junit.runner.notification.RunListener.testRunFinished(org.junit.runner.Result)</name>
                <outbound type="class" confirmed="no">java.lang.Exception</outbound>
                <outbound type="class" confirmed="yes">org.junit.runner.Result</outbound>
                <inbound type="feature" confirmed="yes">org.junit.runner.notification.RunNotifier$2.notifyListener(org.junit.runner.notification.RunListener)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.junit.runner.notification.RunListener.testRunStarted(org.junit.runner.Description)</name>
                <outbound type="class" confirmed="no">java.lang.Exception</outbound>
                <outbound type="class" confirmed="yes">org.junit.runner.Description</outbound>
                <inbound type="feature" confirmed="yes">org.junit.runner.notification.RunNotifier$1.notifyListener(org.junit.runner.notification.RunListener)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.junit.runner.notification.RunListener.testStarted(org.junit.runner.Description)</name>
                <outbound type="class" confirmed="no">java.lang.Exception</outbound>
                <outbound type="class" confirmed="yes">org.junit.runner.Description</outbound>
                <inbound type="feature" confirmed="yes">org.junit.runner.notification.RunNotifier$3.notifyListener(org.junit.runner.notification.RunListener)</inbound>
            </feature>
        </class>
        <class confirmed="yes">
            <name>org.junit.runner.notification.RunNotifier</name>
            <outbound type="class" confirmed="no">java.lang.Object</outbound>
            <inbound type="feature" confirmed="yes">junit.framework.JUnit4TestAdapter.run(junit.framework.TestResult)</inbound>
            <inbound type="feature" confirmed="yes">junit.framework.JUnit4TestAdapterCache.getNotifier(junit.framework.TestResult, junit.framework.JUnit4TestAdapter)</inbound>
            <inbound type="feature" confirmed="yes">org.junit.internal.builders.IgnoredClassRunner.run(org.junit.runner.notification.RunNotifier)</inbound>
            <inbound type="feature" confirmed="yes">org.junit.internal.runners.ClassRoadie.ClassRoadie(org.junit.runner.notification.RunNotifier, org.junit.internal.runners.TestClass, org.junit.runner.Description, java.lang.Runnable)</inbound>
            <inbound type="feature" confirmed="yes">org.junit.internal.runners.ClassRoadie.addFailure(java.lang.Throwable)</inbound>
            <inbound type="feature" confirmed="yes">org.junit.internal.runners.ClassRoadie.fNotifier</inbound>
            <inbound type="feature" confirmed="yes">org.junit.internal.runners.ErrorReportingRunner.run(org.junit.runner.notification.RunNotifier)</inbound>
            <inbound type="feature" confirmed="yes">org.junit.internal.runners.ErrorReportingRunner.runCause(java.lang.Throwable, org.junit.runner.notification.RunNotifier)</inbound>
            <inbound type="feature" confirmed="yes">org.junit.internal.runners.JUnit38ClassRunner$OldTestClassAdaptingListener.JUnit38ClassRunner$OldTestClassAdaptingListener(org.junit.internal.runners.JUnit38ClassRunner, org.junit.runner.notification.RunNotifier)</inbound>
            <inbound type="feature" confirmed="yes">org.junit.internal.runners.JUnit38ClassRunner$OldTestClassAdaptingListener.JUnit38ClassRunner$OldTestClassAdaptingListener(org.junit.internal.runners.JUnit38ClassRunner, org.junit.runner.notification.RunNotifier, org.junit.internal.runners.JUnit38ClassRunner$1)</inbound>
            <inbound type="feature" confirmed="yes">org.junit.internal.runners.JUnit38ClassRunner$OldTestClassAdaptingListener.addError(junit.framework.Test, java.lang.Throwable)</inbound>
            <inbound type="feature" confirmed="yes">org.junit.internal.runners.JUnit38ClassRunner$OldTestClassAdaptingListener.endTest(junit.framework.Test)</inbound>
            <inbound type="feature" confirmed="yes">org.junit.internal.runners.JUnit38ClassRunner$OldTestClassAdaptingListener.fNotifier</inbound>
            <inbound type="feature" confirmed="yes">org.junit.internal.runners.JUnit38ClassRunner$OldTestClassAdaptingListener.startTest(junit.framework.Test)</inbound>
            <inbound type="feature" confirmed="yes">org.junit.internal.runners.JUnit38ClassRunner.createAdaptingListener(org.junit.runner.notification.RunNotifier)</inbound>
            <inbound type="feature" confirmed="yes">org.junit.internal.runners.JUnit38ClassRunner.run(org.junit.runner.notification.RunNotifier)</inbound>
            <inbound type="feature" confirmed="yes">org.junit.internal.runners.JUnit4ClassRunner$1.JUnit4ClassRunner$1(org.junit.internal.runners.JUnit4ClassRunner, org.junit.runner.notification.RunNotifier)</inbound>
            <inbound type="feature" confirmed="yes">org.junit.internal.runners.JUnit4ClassRunner$1.run()</inbound>
            <inbound type="feature" confirmed="yes">org.junit.internal.runners.JUnit4ClassRunner$1.val$notifier</inbound>
            <inbound type="feature" confirmed="yes">org.junit.internal.runners.JUnit4ClassRunner.invokeTestMethod(java.lang.reflect.Method, org.junit.runner.notification.RunNotifier)</inbound>
            <inbound type="feature" confirmed="yes">org.junit.internal.runners.JUnit4ClassRunner.run(org.junit.runner.notification.RunNotifier)</inbound>
            <inbound type="feature" confirmed="yes">org.junit.internal.runners.JUnit4ClassRunner.runMethods(org.junit.runner.notification.RunNotifier)</inbound>
            <inbound type="feature" confirmed="yes">org.junit.internal.runners.JUnit4ClassRunner.testAborted(org.junit.runner.notification.RunNotifier, org.junit.runner.Description, java.lang.Throwable)</inbound>
            <inbound type="feature" confirmed="yes">org.junit.internal.runners.MethodRoadie.MethodRoadie(java.lang.Object, org.junit.internal.runners.TestMethod, org.junit.runner.notification.RunNotifier, org.junit.runner.Description)</inbound>
            <inbound type="feature" confirmed="yes">org.junit.internal.runners.MethodRoadie.addFailure(java.lang.Throwable)</inbound>
            <inbound type="feature" confirmed="yes">org.junit.internal.runners.MethodRoadie.fNotifier</inbound>
            <inbound type="feature" confirmed="yes">org.junit.internal.runners.MethodRoadie.run()</inbound>
            <inbound type="feature" confirmed="yes">org.junit.internal.runners.model.EachTestNotifier.EachTestNotifier(org.junit.runner.notification.RunNotifier, org.junit.runner.Description)</inbound>
            <inbound type="feature" confirmed="yes">org.junit.internal.runners.model.EachTestNotifier.addFailedAssumption(org.junit.internal.AssumptionViolatedException)</inbound>
            <inbound type="feature" confirmed="yes">org.junit.internal.runners.model.EachTestNotifier.addFailure(java.lang.Throwable)</inbound>
            <inbound type="feature" confirmed="yes">org.junit.internal.runners.model.EachTestNotifier.fNotifier</inbound>
            <inbound type="feature" confirmed="yes">org.junit.internal.runners.model.EachTestNotifier.fireTestFinished()</inbound>
            <inbound type="feature" confirmed="yes">org.junit.internal.runners.model.EachTestNotifier.fireTestIgnored()</inbound>
            <inbound type="feature" confirmed="yes">org.junit.internal.runners.model.EachTestNotifier.fireTestStarted()</inbound>
            <inbound type="feature" confirmed="yes">org.junit.runner.JUnitCore.JUnitCore()</inbound>
            <inbound type="feature" confirmed="yes">org.junit.runner.JUnitCore.addListener(org.junit.runner.notification.RunListener)</inbound>
            <inbound type="feature" confirmed="yes">org.junit.runner.JUnitCore.fNotifier</inbound>
            <inbound type="feature" confirmed="yes">org.junit.runner.JUnitCore.removeListener(org.junit.runner.notification.RunListener)</inbound>
            <inbound type="feature" confirmed="yes">org.junit.runner.JUnitCore.run(org.junit.runner.Runner)</inbound>
            <inbound type="feature" confirmed="yes">org.junit.runner.Runner.run(org.junit.runner.notification.RunNotifier)</inbound>
            <inbound type="feature" confirmed="yes">org.junit.runner.notification.RunNotifier$1.RunNotifier$1(org.junit.runner.notification.RunNotifier, org.junit.runner.Description)</inbound>
            <inbound type="feature" confirmed="yes">org.junit.runner.notification.RunNotifier$1.this$0</inbound>
            <inbound type="feature" confirmed="yes">org.junit.runner.notification.RunNotifier$2.RunNotifier$2(org.junit.runner.notification.RunNotifier, org.junit.runner.Result)</inbound>
            <inbound type="feature" confirmed="yes">org.junit.runner.notification.RunNotifier$2.this$0</inbound>
            <inbound type="feature" confirmed="yes">org.junit.runner.notification.RunNotifier$3.RunNotifier$3(org.junit.runner.notification.RunNotifier, org.junit.runner.Description)</inbound>
            <inbound type="feature" confirmed="yes">org.junit.runner.notification.RunNotifier$3.this$0</inbound>
            <inbound type="feature" confirmed="yes">org.junit.runner.notification.RunNotifier$4.RunNotifier$4(org.junit.runner.notification.RunNotifier, org.junit.runner.notification.Failure)</inbound>
            <inbound type="feature" confirmed="yes">org.junit.runner.notification.RunNotifier$4.this$0</inbound>
            <inbound type="feature" confirmed="yes">org.junit.runner.notification.RunNotifier$5.RunNotifier$5(org.junit.runner.notification.RunNotifier, org.junit.runner.notification.Failure)</inbound>
            <inbound type="feature" confirmed="yes">org.junit.runner.notification.RunNotifier$5.this$0</inbound>
            <inbound type="feature" confirmed="yes">org.junit.runner.notification.RunNotifier$6.RunNotifier$6(org.junit.runner.notification.RunNotifier, org.junit.runner.Description)</inbound>
            <inbound type="feature" confirmed="yes">org.junit.runner.notification.RunNotifier$6.this$0</inbound>
            <inbound type="feature" confirmed="yes">org.junit.runner.notification.RunNotifier$7.RunNotifier$7(org.junit.runner.notification.RunNotifier, org.junit.runner.Description)</inbound>
            <inbound type="feature" confirmed="yes">org.junit.runner.notification.RunNotifier$7.this$0</inbound>
            <inbound type="feature" confirmed="yes">org.junit.runner.notification.RunNotifier$SafeNotifier.RunNotifier$SafeNotifier(org.junit.runner.notification.RunNotifier)</inbound>
            <inbound type="feature" confirmed="yes">org.junit.runner.notification.RunNotifier$SafeNotifier.RunNotifier$SafeNotifier(org.junit.runner.notification.RunNotifier, org.junit.runner.notification.RunNotifier$1)</inbound>
            <inbound type="feature" confirmed="yes">org.junit.runner.notification.RunNotifier$SafeNotifier.run()</inbound>
            <inbound type="feature" confirmed="yes">org.junit.runner.notification.RunNotifier$SafeNotifier.this$0</inbound>
            <inbound type="feature" confirmed="yes">org.junit.runners.BlockJUnit4ClassRunner.runChild(java.lang.Object, org.junit.runner.notification.RunNotifier)</inbound>
            <inbound type="feature" confirmed="yes">org.junit.runners.BlockJUnit4ClassRunner.runChild(org.junit.runners.model.FrameworkMethod, org.junit.runner.notification.RunNotifier)</inbound>
            <inbound type="feature" confirmed="yes">org.junit.runners.Parameterized$TestClassRunnerForParameters.classBlock(org.junit.runner.notification.RunNotifier)</inbound>
            <inbound type="feature" confirmed="yes">org.junit.runners.ParentRunner$2.ParentRunner$2(org.junit.runners.ParentRunner, org.junit.runner.notification.RunNotifier)</inbound>
            <inbound type="feature" confirmed="yes">org.junit.runners.ParentRunner$2.evaluate()</inbound>
            <inbound type="feature" confirmed="yes">org.junit.runners.ParentRunner$2.val$notifier</inbound>
            <inbound type="feature" confirmed="yes">org.junit.runners.ParentRunner$3.ParentRunner$3(org.junit.runners.ParentRunner, java.lang.Object, org.junit.runner.notification.RunNotifier)</inbound>
            <inbound type="feature" confirmed="yes">org.junit.runners.ParentRunner$3.run()</inbound>
            <inbound type="feature" confirmed="yes">org.junit.runners.ParentRunner$3.val$notifier</inbound>
            <inbound type="feature" confirmed="yes">org.junit.runners.ParentRunner.access$000(org.junit.runners.ParentRunner, org.junit.runner.notification.RunNotifier)</inbound>
            <inbound type="feature" confirmed="yes">org.junit.runners.ParentRunner.childrenInvoker(org.junit.runner.notification.RunNotifier)</inbound>
            <inbound type="feature" confirmed="yes">org.junit.runners.ParentRunner.classBlock(org.junit.runner.notification.RunNotifier)</inbound>
            <inbound type="feature" confirmed="yes">org.junit.runners.ParentRunner.run(org.junit.runner.notification.RunNotifier)</inbound>
            <inbound type="feature" confirmed="yes">org.junit.runners.ParentRunner.runChild(java.lang.Object, org.junit.runner.notification.RunNotifier)</inbound>
            <inbound type="feature" confirmed="yes">org.junit.runners.ParentRunner.runChildren(org.junit.runner.notification.RunNotifier)</inbound>
            <inbound type="feature" confirmed="yes">org.junit.runners.ParentRunner.runLeaf(org.junit.runners.model.Statement, org.junit.runner.Description, org.junit.runner.notification.RunNotifier)</inbound>
            <inbound type="feature" confirmed="yes">org.junit.runners.Suite.runChild(java.lang.Object, org.junit.runner.notification.RunNotifier)</inbound>
            <inbound type="feature" confirmed="yes">org.junit.runners.Suite.runChild(org.junit.runner.Runner, org.junit.runner.notification.RunNotifier)</inbound>
            <feature confirmed="yes">
                <name>org.junit.runner.notification.RunNotifier.RunNotifier()</name>
                <outbound type="feature" confirmed="no">java.lang.Object.Object()</outbound>
                <outbound type="feature" confirmed="no">java.util.ArrayList.ArrayList()</outbound>
                <outbound type="feature" confirmed="no">java.util.Collections.synchronizedList(java.util.List)</outbound>
                <outbound type="class" confirmed="no">java.util.List</outbound>
                <outbound type="feature" confirmed="yes">org.junit.runner.notification.RunNotifier.fListeners</outbound>
                <outbound type="feature" confirmed="yes">org.junit.runner.notification.RunNotifier.fPleaseStop</outbound>
                <inbound type="feature" confirmed="yes">junit.framework.JUnit4TestAdapterCache.getNotifier(junit.framework.TestResult, junit.framework.JUnit4TestAdapter)</inbound>
                <inbound type="feature" confirmed="yes">org.junit.runner.JUnitCore.JUnitCore()</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.junit.runner.notification.RunNotifier.access$000(org.junit.runner.notification.RunNotifier)</name>
                <outbound type="class" confirmed="no">java.util.List</outbound>
                <outbound type="feature" confirmed="yes">org.junit.runner.notification.RunNotifier.fListeners</outbound>
                <inbound type="feature" confirmed="yes">org.junit.runner.notification.RunNotifier$SafeNotifier.run()</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.junit.runner.notification.RunNotifier.addFirstListener(org.junit.runner.notification.RunListener)</name>
                <outbound type="class" confirmed="no">java.lang.Object</outbound>
                <outbound type="class" confirmed="no">java.util.List</outbound>
                <outbound type="feature" confirmed="no">java.util.List.add(int, java.lang.Object)</outbound>
                <outbound type="class" confirmed="yes">org.junit.runner.notification.RunListener</outbound>
                <outbound type="feature" confirmed="yes">org.junit.runner.notification.RunNotifier.fListeners</outbound>
                <inbound type="feature" confirmed="yes">org.junit.runner.JUnitCore.run(org.junit.runner.Runner)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.junit.runner.notification.RunNotifier.addListener(org.junit.runner.notification.RunListener)</name>
                <outbound type="class" confirmed="no">java.lang.Object</outbound>
                <outbound type="class" confirmed="no">java.util.List</outbound>
                <outbound type="feature" confirmed="no">java.util.List.add(java.lang.Object)</outbound>
                <outbound type="class" confirmed="yes">org.junit.runner.notification.RunListener</outbound>
                <outbound type="feature" confirmed="yes">org.junit.runner.notification.RunNotifier.fListeners</outbound>
                <inbound type="feature" confirmed="yes">junit.framework.JUnit4TestAdapterCache.getNotifier(junit.framework.TestResult, junit.framework.JUnit4TestAdapter)</inbound>
                <inbound type="feature" confirmed="yes">org.junit.runner.JUnitCore.addListener(org.junit.runner.notification.RunListener)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.junit.runner.notification.RunNotifier.fListeners</name>
                <outbound type="class" confirmed="no">java.util.List</outbound>
                <inbound type="feature" confirmed="yes">org.junit.runner.notification.RunNotifier.RunNotifier()</inbound>
                <inbound type="feature" confirmed="yes">org.junit.runner.notification.RunNotifier.access$000(org.junit.runner.notification.RunNotifier)</inbound>
                <inbound type="feature" confirmed="yes">org.junit.runner.notification.RunNotifier.addFirstListener(org.junit.runner.notification.RunListener)</inbound>
                <inbound type="feature" confirmed="yes">org.junit.runner.notification.RunNotifier.addListener(org.junit.runner.notification.RunListener)</inbound>
                <inbound type="feature" confirmed="yes">org.junit.runner.notification.RunNotifier.removeListener(org.junit.runner.notification.RunListener)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.junit.runner.notification.RunNotifier.fPleaseStop</name>
                <inbound type="feature" confirmed="yes">org.junit.runner.notification.RunNotifier.RunNotifier()</inbound>
                <inbound type="feature" confirmed="yes">org.junit.runner.notification.RunNotifier.fireTestStarted(org.junit.runner.Description)</inbound>
                <inbound type="feature" confirmed="yes">org.junit.runner.notification.RunNotifier.pleaseStop()</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.junit.runner.notification.RunNotifier.fireTestAssumptionFailed(org.junit.runner.notification.Failure)</name>
                <outbound type="class" confirmed="yes">org.junit.runner.notification.Failure</outbound>
                <outbound type="feature" confirmed="yes">org.junit.runner.notification.RunNotifier$5.RunNotifier$5(org.junit.runner.notification.RunNotifier, org.junit.runner.notification.Failure)</outbound>
                <outbound type="feature" confirmed="no">org.junit.runner.notification.RunNotifier$5.run()</outbound>
                <inbound type="feature" confirmed="yes">org.junit.internal.runners.model.EachTestNotifier.addFailedAssumption(org.junit.internal.AssumptionViolatedException)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.junit.runner.notification.RunNotifier.fireTestFailure(org.junit.runner.notification.Failure)</name>
                <outbound type="class" confirmed="yes">org.junit.runner.notification.Failure</outbound>
                <outbound type="feature" confirmed="yes">org.junit.runner.notification.RunNotifier$4.RunNotifier$4(org.junit.runner.notification.RunNotifier, org.junit.runner.notification.Failure)</outbound>
                <outbound type="feature" confirmed="no">org.junit.runner.notification.RunNotifier$4.run()</outbound>
                <inbound type="feature" confirmed="yes">org.junit.internal.runners.ClassRoadie.addFailure(java.lang.Throwable)</inbound>
                <inbound type="feature" confirmed="yes">org.junit.internal.runners.ErrorReportingRunner.runCause(java.lang.Throwable, org.junit.runner.notification.RunNotifier)</inbound>
                <inbound type="feature" confirmed="yes">org.junit.internal.runners.JUnit38ClassRunner$OldTestClassAdaptingListener.addError(junit.framework.Test, java.lang.Throwable)</inbound>
                <inbound type="feature" confirmed="yes">org.junit.internal.runners.JUnit4ClassRunner.testAborted(org.junit.runner.notification.RunNotifier, org.junit.runner.Description, java.lang.Throwable)</inbound>
                <inbound type="feature" confirmed="yes">org.junit.internal.runners.MethodRoadie.addFailure(java.lang.Throwable)</inbound>
                <inbound type="feature" confirmed="yes">org.junit.internal.runners.model.EachTestNotifier.addFailure(java.lang.Throwable)</inbound>
                <inbound type="feature" confirmed="yes">org.junit.runner.notification.RunNotifier$SafeNotifier.run()</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.junit.runner.notification.RunNotifier.fireTestFinished(org.junit.runner.Description)</name>
                <outbound type="class" confirmed="yes">org.junit.runner.Description</outbound>
                <outbound type="feature" confirmed="yes">org.junit.runner.notification.RunNotifier$7.RunNotifier$7(org.junit.runner.notification.RunNotifier, org.junit.runner.Description)</outbound>
                <outbound type="feature" confirmed="no">org.junit.runner.notification.RunNotifier$7.run()</outbound>
                <inbound type="feature" confirmed="yes">org.junit.internal.runners.ErrorReportingRunner.runCause(java.lang.Throwable, org.junit.runner.notification.RunNotifier)</inbound>
                <inbound type="feature" confirmed="yes">org.junit.internal.runners.JUnit38ClassRunner$OldTestClassAdaptingListener.endTest(junit.framework.Test)</inbound>
                <inbound type="feature" confirmed="yes">org.junit.internal.runners.JUnit4ClassRunner.testAborted(org.junit.runner.notification.RunNotifier, org.junit.runner.Description, java.lang.Throwable)</inbound>
                <inbound type="feature" confirmed="yes">org.junit.internal.runners.MethodRoadie.run()</inbound>
                <inbound type="feature" confirmed="yes">org.junit.internal.runners.model.EachTestNotifier.fireTestFinished()</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.junit.runner.notification.RunNotifier.fireTestIgnored(org.junit.runner.Description)</name>
                <outbound type="class" confirmed="yes">org.junit.runner.Description</outbound>
                <outbound type="feature" confirmed="yes">org.junit.runner.notification.RunNotifier$6.RunNotifier$6(org.junit.runner.notification.RunNotifier, org.junit.runner.Description)</outbound>
                <outbound type="feature" confirmed="no">org.junit.runner.notification.RunNotifier$6.run()</outbound>
                <inbound type="feature" confirmed="yes">org.junit.internal.builders.IgnoredClassRunner.run(org.junit.runner.notification.RunNotifier)</inbound>
                <inbound type="feature" confirmed="yes">org.junit.internal.runners.MethodRoadie.run()</inbound>
                <inbound type="feature" confirmed="yes">org.junit.internal.runners.model.EachTestNotifier.fireTestIgnored()</inbound>
                <inbound type="feature" confirmed="yes">org.junit.runners.BlockJUnit4ClassRunner.runChild(org.junit.runners.model.FrameworkMethod, org.junit.runner.notification.RunNotifier)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.junit.runner.notification.RunNotifier.fireTestRunFinished(org.junit.runner.Result)</name>
                <outbound type="class" confirmed="yes">org.junit.runner.Result</outbound>
                <outbound type="feature" confirmed="yes">org.junit.runner.notification.RunNotifier$2.RunNotifier$2(org.junit.runner.notification.RunNotifier, org.junit.runner.Result)</outbound>
                <outbound type="feature" confirmed="no">org.junit.runner.notification.RunNotifier$2.run()</outbound>
                <inbound type="feature" confirmed="yes">org.junit.runner.JUnitCore.run(org.junit.runner.Runner)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.junit.runner.notification.RunNotifier.fireTestRunStarted(org.junit.runner.Description)</name>
                <outbound type="class" confirmed="yes">org.junit.runner.Description</outbound>
                <outbound type="feature" confirmed="yes">org.junit.runner.notification.RunNotifier$1.RunNotifier$1(org.junit.runner.notification.RunNotifier, org.junit.runner.Description)</outbound>
                <outbound type="feature" confirmed="no">org.junit.runner.notification.RunNotifier$1.run()</outbound>
                <inbound type="feature" confirmed="yes">org.junit.runner.JUnitCore.run(org.junit.runner.Runner)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.junit.runner.notification.RunNotifier.fireTestStarted(org.junit.runner.Description)</name>
                <outbound type="class" confirmed="yes">org.junit.runner.Description</outbound>
                <outbound type="feature" confirmed="yes">org.junit.runner.notification.RunNotifier$3.RunNotifier$3(org.junit.runner.notification.RunNotifier, org.junit.runner.Description)</outbound>
                <outbound type="feature" confirmed="no">org.junit.runner.notification.RunNotifier$3.run()</outbound>
                <outbound type="feature" confirmed="yes">org.junit.runner.notification.RunNotifier.fPleaseStop</outbound>
                <outbound type="class" confirmed="yes">org.junit.runner.notification.StoppedByUserException</outbound>
                <outbound type="feature" confirmed="yes">org.junit.runner.notification.StoppedByUserException.StoppedByUserException()</outbound>
                <inbound type="feature" confirmed="yes">org.junit.internal.runners.ErrorReportingRunner.runCause(java.lang.Throwable, org.junit.runner.notification.RunNotifier)</inbound>
                <inbound type="feature" confirmed="yes">org.junit.internal.runners.JUnit38ClassRunner$OldTestClassAdaptingListener.startTest(junit.framework.Test)</inbound>
                <inbound type="feature" confirmed="yes">org.junit.internal.runners.JUnit4ClassRunner.testAborted(org.junit.runner.notification.RunNotifier, org.junit.runner.Description, java.lang.Throwable)</inbound>
                <inbound type="feature" confirmed="yes">org.junit.internal.runners.MethodRoadie.run()</inbound>
                <inbound type="feature" confirmed="yes">org.junit.internal.runners.model.EachTestNotifier.fireTestStarted()</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.junit.runner.notification.RunNotifier.pleaseStop()</name>
                <outbound type="feature" confirmed="yes">org.junit.runner.notification.RunNotifier.fPleaseStop</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.junit.runner.notification.RunNotifier.removeListener(org.junit.runner.notification.RunListener)</name>
                <outbound type="class" confirmed="no">java.lang.Object</outbound>
                <outbound type="class" confirmed="no">java.util.List</outbound>
                <outbound type="feature" confirmed="no">java.util.List.remove(java.lang.Object)</outbound>
                <outbound type="class" confirmed="yes">org.junit.runner.notification.RunListener</outbound>
                <outbound type="feature" confirmed="yes">org.junit.runner.notification.RunNotifier.fListeners</outbound>
                <inbound type="feature" confirmed="yes">org.junit.runner.JUnitCore.removeListener(org.junit.runner.notification.RunListener)</inbound>
            </feature>
        </class>
        <class confirmed="yes">
            <name>org.junit.runner.notification.RunNotifier$1</name>
            <outbound type="class" confirmed="yes">org.junit.runner.notification.RunNotifier$SafeNotifier</outbound>
            <inbound type="feature" confirmed="yes">org.junit.runner.notification.RunNotifier$2.RunNotifier$2(org.junit.runner.notification.RunNotifier, org.junit.runner.Result)</inbound>
            <inbound type="feature" confirmed="yes">org.junit.runner.notification.RunNotifier$3.RunNotifier$3(org.junit.runner.notification.RunNotifier, org.junit.runner.Description)</inbound>
            <inbound type="feature" confirmed="yes">org.junit.runner.notification.RunNotifier$4.RunNotifier$4(org.junit.runner.notification.RunNotifier, org.junit.runner.notification.Failure)</inbound>
            <inbound type="feature" confirmed="yes">org.junit.runner.notification.RunNotifier$5.RunNotifier$5(org.junit.runner.notification.RunNotifier, org.junit.runner.notification.Failure)</inbound>
            <inbound type="feature" confirmed="yes">org.junit.runner.notification.RunNotifier$6.RunNotifier$6(org.junit.runner.notification.RunNotifier, org.junit.runner.Description)</inbound>
            <inbound type="feature" confirmed="yes">org.junit.runner.notification.RunNotifier$7.RunNotifier$7(org.junit.runner.notification.RunNotifier, org.junit.runner.Description)</inbound>
            <inbound type="feature" confirmed="yes">org.junit.runner.notification.RunNotifier$SafeNotifier.RunNotifier$SafeNotifier(org.junit.runner.notification.RunNotifier, org.junit.runner.notification.RunNotifier$1)</inbound>
            <feature confirmed="yes">
                <name>org.junit.runner.notification.RunNotifier$1.RunNotifier$1(org.junit.runner.notification.RunNotifier, org.junit.runner.Description)</name>
                <outbound type="class" confirmed="yes">org.junit.runner.Description</outbound>
                <outbound type="class" confirmed="yes">org.junit.runner.notification.RunNotifier</outbound>
                <outbound type="feature" confirmed="yes">org.junit.runner.notification.RunNotifier$1.this$0</outbound>
                <outbound type="feature" confirmed="yes">org.junit.runner.notification.RunNotifier$1.val$description</outbound>
                <outbound type="feature" confirmed="yes">org.junit.runner.notification.RunNotifier$SafeNotifier.RunNotifier$SafeNotifier(org.junit.runner.notification.RunNotifier, org.junit.runner.notification.RunNotifier$1)</outbound>
                <inbound type="feature" confirmed="yes">org.junit.runner.notification.RunNotifier.fireTestRunStarted(org.junit.runner.Description)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.junit.runner.notification.RunNotifier$1.notifyListener(org.junit.runner.notification.RunListener)</name>
                <outbound type="class" confirmed="no">java.lang.Exception</outbound>
                <outbound type="class" confirmed="yes">org.junit.runner.Description</outbound>
                <outbound type="class" confirmed="yes">org.junit.runner.notification.RunListener</outbound>
                <outbound type="feature" confirmed="yes">org.junit.runner.notification.RunListener.testRunStarted(org.junit.runner.Description)</outbound>
                <outbound type="feature" confirmed="yes">org.junit.runner.notification.RunNotifier$1.val$description</outbound>
            </feature>
            <feature confirmed="no">
                <name>org.junit.runner.notification.RunNotifier$1.run()</name>
                <inbound type="feature" confirmed="yes">org.junit.runner.notification.RunNotifier.fireTestRunStarted(org.junit.runner.Description)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.junit.runner.notification.RunNotifier$1.this$0</name>
                <outbound type="class" confirmed="yes">org.junit.runner.notification.RunNotifier</outbound>
                <inbound type="feature" confirmed="yes">org.junit.runner.notification.RunNotifier$1.RunNotifier$1(org.junit.runner.notification.RunNotifier, org.junit.runner.Description)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.junit.runner.notification.RunNotifier$1.val$description</name>
                <outbound type="class" confirmed="yes">org.junit.runner.Description</outbound>
                <inbound type="feature" confirmed="yes">org.junit.runner.notification.RunNotifier$1.RunNotifier$1(org.junit.runner.notification.RunNotifier, org.junit.runner.Description)</inbound>
                <inbound type="feature" confirmed="yes">org.junit.runner.notification.RunNotifier$1.notifyListener(org.junit.runner.notification.RunListener)</inbound>
            </feature>
        </class>
        <class confirmed="yes">
            <name>org.junit.runner.notification.RunNotifier$2</name>
            <outbound type="class" confirmed="yes">org.junit.runner.notification.RunNotifier$SafeNotifier</outbound>
            <feature confirmed="yes">
                <name>org.junit.runner.notification.RunNotifier$2.RunNotifier$2(org.junit.runner.notification.RunNotifier, org.junit.runner.Result)</name>
                <outbound type="class" confirmed="yes">org.junit.runner.Result</outbound>
                <outbound type="class" confirmed="yes">org.junit.runner.notification.RunNotifier</outbound>
                <outbound type="class" confirmed="yes">org.junit.runner.notification.RunNotifier$1</outbound>
                <outbound type="feature" confirmed="yes">org.junit.runner.notification.RunNotifier$2.this$0</outbound>
                <outbound type="feature" confirmed="yes">org.junit.runner.notification.RunNotifier$2.val$result</outbound>
                <outbound type="feature" confirmed="yes">org.junit.runner.notification.RunNotifier$SafeNotifier.RunNotifier$SafeNotifier(org.junit.runner.notification.RunNotifier, org.junit.runner.notification.RunNotifier$1)</outbound>
                <inbound type="feature" confirmed="yes">org.junit.runner.notification.RunNotifier.fireTestRunFinished(org.junit.runner.Result)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.junit.runner.notification.RunNotifier$2.notifyListener(org.junit.runner.notification.RunListener)</name>
                <outbound type="class" confirmed="no">java.lang.Exception</outbound>
                <outbound type="class" confirmed="yes">org.junit.runner.Result</outbound>
                <outbound type="class" confirmed="yes">org.junit.runner.notification.RunListener</outbound>
                <outbound type="feature" confirmed="yes">org.junit.runner.notification.RunListener.testRunFinished(org.junit.runner.Result)</outbound>
                <outbound type="feature" confirmed="yes">org.junit.runner.notification.RunNotifier$2.val$result</outbound>
            </feature>
            <feature confirmed="no">
                <name>org.junit.runner.notification.RunNotifier$2.run()</name>
                <inbound type="feature" confirmed="yes">org.junit.runner.notification.RunNotifier.fireTestRunFinished(org.junit.runner.Result)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.junit.runner.notification.RunNotifier$2.this$0</name>
                <outbound type="class" confirmed="yes">org.junit.runner.notification.RunNotifier</outbound>
                <inbound type="feature" confirmed="yes">org.junit.runner.notification.RunNotifier$2.RunNotifier$2(org.junit.runner.notification.RunNotifier, org.junit.runner.Result)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.junit.runner.notification.RunNotifier$2.val$result</name>
                <outbound type="class" confirmed="yes">org.junit.runner.Result</outbound>
                <inbound type="feature" confirmed="yes">org.junit.runner.notification.RunNotifier$2.RunNotifier$2(org.junit.runner.notification.RunNotifier, org.junit.runner.Result)</inbound>
                <inbound type="feature" confirmed="yes">org.junit.runner.notification.RunNotifier$2.notifyListener(org.junit.runner.notification.RunListener)</inbound>
            </feature>
        </class>
        <class confirmed="yes">
            <name>org.junit.runner.notification.RunNotifier$3</name>
            <outbound type="class" confirmed="yes">org.junit.runner.notification.RunNotifier$SafeNotifier</outbound>
            <feature confirmed="yes">
                <name>org.junit.runner.notification.RunNotifier$3.RunNotifier$3(org.junit.runner.notification.RunNotifier, org.junit.runner.Description)</name>
                <outbound type="class" confirmed="yes">org.junit.runner.Description</outbound>
                <outbound type="class" confirmed="yes">org.junit.runner.notification.RunNotifier</outbound>
                <outbound type="class" confirmed="yes">org.junit.runner.notification.RunNotifier$1</outbound>
                <outbound type="feature" confirmed="yes">org.junit.runner.notification.RunNotifier$3.this$0</outbound>
                <outbound type="feature" confirmed="yes">org.junit.runner.notification.RunNotifier$3.val$description</outbound>
                <outbound type="feature" confirmed="yes">org.junit.runner.notification.RunNotifier$SafeNotifier.RunNotifier$SafeNotifier(org.junit.runner.notification.RunNotifier, org.junit.runner.notification.RunNotifier$1)</outbound>
                <inbound type="feature" confirmed="yes">org.junit.runner.notification.RunNotifier.fireTestStarted(org.junit.runner.Description)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.junit.runner.notification.RunNotifier$3.notifyListener(org.junit.runner.notification.RunListener)</name>
                <outbound type="class" confirmed="no">java.lang.Exception</outbound>
                <outbound type="class" confirmed="yes">org.junit.runner.Description</outbound>
                <outbound type="class" confirmed="yes">org.junit.runner.notification.RunListener</outbound>
                <outbound type="feature" confirmed="yes">org.junit.runner.notification.RunListener.testStarted(org.junit.runner.Description)</outbound>
                <outbound type="feature" confirmed="yes">org.junit.runner.notification.RunNotifier$3.val$description</outbound>
            </feature>
            <feature confirmed="no">
                <name>org.junit.runner.notification.RunNotifier$3.run()</name>
                <inbound type="feature" confirmed="yes">org.junit.runner.notification.RunNotifier.fireTestStarted(org.junit.runner.Description)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.junit.runner.notification.RunNotifier$3.this$0</name>
                <outbound type="class" confirmed="yes">org.junit.runner.notification.RunNotifier</outbound>
                <inbound type="feature" confirmed="yes">org.junit.runner.notification.RunNotifier$3.RunNotifier$3(org.junit.runner.notification.RunNotifier, org.junit.runner.Description)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.junit.runner.notification.RunNotifier$3.val$description</name>
                <outbound type="class" confirmed="yes">org.junit.runner.Description</outbound>
                <inbound type="feature" confirmed="yes">org.junit.runner.notification.RunNotifier$3.RunNotifier$3(org.junit.runner.notification.RunNotifier, org.junit.runner.Description)</inbound>
                <inbound type="feature" confirmed="yes">org.junit.runner.notification.RunNotifier$3.notifyListener(org.junit.runner.notification.RunListener)</inbound>
            </feature>
        </class>
        <class confirmed="yes">
            <name>org.junit.runner.notification.RunNotifier$4</name>
            <outbound type="class" confirmed="yes">org.junit.runner.notification.RunNotifier$SafeNotifier</outbound>
            <feature confirmed="yes">
                <name>org.junit.runner.notification.RunNotifier$4.RunNotifier$4(org.junit.runner.notification.RunNotifier, org.junit.runner.notification.Failure)</name>
                <outbound type="class" confirmed="yes">org.junit.runner.notification.Failure</outbound>
                <outbound type="class" confirmed="yes">org.junit.runner.notification.RunNotifier</outbound>
                <outbound type="class" confirmed="yes">org.junit.runner.notification.RunNotifier$1</outbound>
                <outbound type="feature" confirmed="yes">org.junit.runner.notification.RunNotifier$4.this$0</outbound>
                <outbound type="feature" confirmed="yes">org.junit.runner.notification.RunNotifier$4.val$failure</outbound>
                <outbound type="feature" confirmed="yes">org.junit.runner.notification.RunNotifier$SafeNotifier.RunNotifier$SafeNotifier(org.junit.runner.notification.RunNotifier, org.junit.runner.notification.RunNotifier$1)</outbound>
                <inbound type="feature" confirmed="yes">org.junit.runner.notification.RunNotifier.fireTestFailure(org.junit.runner.notification.Failure)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.junit.runner.notification.RunNotifier$4.notifyListener(org.junit.runner.notification.RunListener)</name>
                <outbound type="class" confirmed="no">java.lang.Exception</outbound>
                <outbound type="class" confirmed="yes">org.junit.runner.notification.Failure</outbound>
                <outbound type="class" confirmed="yes">org.junit.runner.notification.RunListener</outbound>
                <outbound type="feature" confirmed="yes">org.junit.runner.notification.RunListener.testFailure(org.junit.runner.notification.Failure)</outbound>
                <outbound type="feature" confirmed="yes">org.junit.runner.notification.RunNotifier$4.val$failure</outbound>
            </feature>
            <feature confirmed="no">
                <name>org.junit.runner.notification.RunNotifier$4.run()</name>
                <inbound type="feature" confirmed="yes">org.junit.runner.notification.RunNotifier.fireTestFailure(org.junit.runner.notification.Failure)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.junit.runner.notification.RunNotifier$4.this$0</name>
                <outbound type="class" confirmed="yes">org.junit.runner.notification.RunNotifier</outbound>
                <inbound type="feature" confirmed="yes">org.junit.runner.notification.RunNotifier$4.RunNotifier$4(org.junit.runner.notification.RunNotifier, org.junit.runner.notification.Failure)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.junit.runner.notification.RunNotifier$4.val$failure</name>
                <outbound type="class" confirmed="yes">org.junit.runner.notification.Failure</outbound>
                <inbound type="feature" confirmed="yes">org.junit.runner.notification.RunNotifier$4.RunNotifier$4(org.junit.runner.notification.RunNotifier, org.junit.runner.notification.Failure)</inbound>
                <inbound type="feature" confirmed="yes">org.junit.runner.notification.RunNotifier$4.notifyListener(org.junit.runner.notification.RunListener)</inbound>
            </feature>
        </class>
        <class confirmed="yes">
            <name>org.junit.runner.notification.RunNotifier$5</name>
            <outbound type="class" confirmed="yes">org.junit.runner.notification.RunNotifier$SafeNotifier</outbound>
            <feature confirmed="yes">
                <name>org.junit.runner.notification.RunNotifier$5.RunNotifier$5(org.junit.runner.notification.RunNotifier, org.junit.runner.notification.Failure)</name>
                <outbound type="class" confirmed="yes">org.junit.runner.notification.Failure</outbound>
                <outbound type="class" confirmed="yes">org.junit.runner.notification.RunNotifier</outbound>
                <outbound type="class" confirmed="yes">org.junit.runner.notification.RunNotifier$1</outbound>
                <outbound type="feature" confirmed="yes">org.junit.runner.notification.RunNotifier$5.this$0</outbound>
                <outbound type="feature" confirmed="yes">org.junit.runner.notification.RunNotifier$5.val$failure</outbound>
                <outbound type="feature" confirmed="yes">org.junit.runner.notification.RunNotifier$SafeNotifier.RunNotifier$SafeNotifier(org.junit.runner.notification.RunNotifier, org.junit.runner.notification.RunNotifier$1)</outbound>
                <inbound type="feature" confirmed="yes">org.junit.runner.notification.RunNotifier.fireTestAssumptionFailed(org.junit.runner.notification.Failure)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.junit.runner.notification.RunNotifier$5.notifyListener(org.junit.runner.notification.RunListener)</name>
                <outbound type="class" confirmed="no">java.lang.Exception</outbound>
                <outbound type="class" confirmed="yes">org.junit.runner.notification.Failure</outbound>
                <outbound type="class" confirmed="yes">org.junit.runner.notification.RunListener</outbound>
                <outbound type="feature" confirmed="yes">org.junit.runner.notification.RunListener.testAssumptionFailure(org.junit.runner.notification.Failure)</outbound>
                <outbound type="feature" confirmed="yes">org.junit.runner.notification.RunNotifier$5.val$failure</outbound>
            </feature>
            <feature confirmed="no">
                <name>org.junit.runner.notification.RunNotifier$5.run()</name>
                <inbound type="feature" confirmed="yes">org.junit.runner.notification.RunNotifier.fireTestAssumptionFailed(org.junit.runner.notification.Failure)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.junit.runner.notification.RunNotifier$5.this$0</name>
                <outbound type="class" confirmed="yes">org.junit.runner.notification.RunNotifier</outbound>
                <inbound type="feature" confirmed="yes">org.junit.runner.notification.RunNotifier$5.RunNotifier$5(org.junit.runner.notification.RunNotifier, org.junit.runner.notification.Failure)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.junit.runner.notification.RunNotifier$5.val$failure</name>
                <outbound type="class" confirmed="yes">org.junit.runner.notification.Failure</outbound>
                <inbound type="feature" confirmed="yes">org.junit.runner.notification.RunNotifier$5.RunNotifier$5(org.junit.runner.notification.RunNotifier, org.junit.runner.notification.Failure)</inbound>
                <inbound type="feature" confirmed="yes">org.junit.runner.notification.RunNotifier$5.notifyListener(org.junit.runner.notification.RunListener)</inbound>
            </feature>
        </class>
        <class confirmed="yes">
            <name>org.junit.runner.notification.RunNotifier$6</name>
            <outbound type="class" confirmed="yes">org.junit.runner.notification.RunNotifier$SafeNotifier</outbound>
            <feature confirmed="yes">
                <name>org.junit.runner.notification.RunNotifier$6.RunNotifier$6(org.junit.runner.notification.RunNotifier, org.junit.runner.Description)</name>
                <outbound type="class" confirmed="yes">org.junit.runner.Description</outbound>
                <outbound type="class" confirmed="yes">org.junit.runner.notification.RunNotifier</outbound>
                <outbound type="class" confirmed="yes">org.junit.runner.notification.RunNotifier$1</outbound>
                <outbound type="feature" confirmed="yes">org.junit.runner.notification.RunNotifier$6.this$0</outbound>
                <outbound type="feature" confirmed="yes">org.junit.runner.notification.RunNotifier$6.val$description</outbound>
                <outbound type="feature" confirmed="yes">org.junit.runner.notification.RunNotifier$SafeNotifier.RunNotifier$SafeNotifier(org.junit.runner.notification.RunNotifier, org.junit.runner.notification.RunNotifier$1)</outbound>
                <inbound type="feature" confirmed="yes">org.junit.runner.notification.RunNotifier.fireTestIgnored(org.junit.runner.Description)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.junit.runner.notification.RunNotifier$6.notifyListener(org.junit.runner.notification.RunListener)</name>
                <outbound type="class" confirmed="no">java.lang.Exception</outbound>
                <outbound type="class" confirmed="yes">org.junit.runner.Description</outbound>
                <outbound type="class" confirmed="yes">org.junit.runner.notification.RunListener</outbound>
                <outbound type="feature" confirmed="yes">org.junit.runner.notification.RunListener.testIgnored(org.junit.runner.Description)</outbound>
                <outbound type="feature" confirmed="yes">org.junit.runner.notification.RunNotifier$6.val$description</outbound>
            </feature>
            <feature confirmed="no">
                <name>org.junit.runner.notification.RunNotifier$6.run()</name>
                <inbound type="feature" confirmed="yes">org.junit.runner.notification.RunNotifier.fireTestIgnored(org.junit.runner.Description)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.junit.runner.notification.RunNotifier$6.this$0</name>
                <outbound type="class" confirmed="yes">org.junit.runner.notification.RunNotifier</outbound>
                <inbound type="feature" confirmed="yes">org.junit.runner.notification.RunNotifier$6.RunNotifier$6(org.junit.runner.notification.RunNotifier, org.junit.runner.Description)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.junit.runner.notification.RunNotifier$6.val$description</name>
                <outbound type="class" confirmed="yes">org.junit.runner.Description</outbound>
                <inbound type="feature" confirmed="yes">org.junit.runner.notification.RunNotifier$6.RunNotifier$6(org.junit.runner.notification.RunNotifier, org.junit.runner.Description)</inbound>
                <inbound type="feature" confirmed="yes">org.junit.runner.notification.RunNotifier$6.notifyListener(org.junit.runner.notification.RunListener)</inbound>
            </feature>
        </class>
        <class confirmed="yes">
            <name>org.junit.runner.notification.RunNotifier$7</name>
            <outbound type="class" confirmed="yes">org.junit.runner.notification.RunNotifier$SafeNotifier</outbound>
            <feature confirmed="yes">
                <name>org.junit.runner.notification.RunNotifier$7.RunNotifier$7(org.junit.runner.notification.RunNotifier, org.junit.runner.Description)</name>
                <outbound type="class" confirmed="yes">org.junit.runner.Description</outbound>
                <outbound type="class" confirmed="yes">org.junit.runner.notification.RunNotifier</outbound>
                <outbound type="class" confirmed="yes">org.junit.runner.notification.RunNotifier$1</outbound>
                <outbound type="feature" confirmed="yes">org.junit.runner.notification.RunNotifier$7.this$0</outbound>
                <outbound type="feature" confirmed="yes">org.junit.runner.notification.RunNotifier$7.val$description</outbound>
                <outbound type="feature" confirmed="yes">org.junit.runner.notification.RunNotifier$SafeNotifier.RunNotifier$SafeNotifier(org.junit.runner.notification.RunNotifier, org.junit.runner.notification.RunNotifier$1)</outbound>
                <inbound type="feature" confirmed="yes">org.junit.runner.notification.RunNotifier.fireTestFinished(org.junit.runner.Description)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.junit.runner.notification.RunNotifier$7.notifyListener(org.junit.runner.notification.RunListener)</name>
                <outbound type="class" confirmed="no">java.lang.Exception</outbound>
                <outbound type="class" confirmed="yes">org.junit.runner.Description</outbound>
                <outbound type="class" confirmed="yes">org.junit.runner.notification.RunListener</outbound>
                <outbound type="feature" confirmed="yes">org.junit.runner.notification.RunListener.testFinished(org.junit.runner.Description)</outbound>
                <outbound type="feature" confirmed="yes">org.junit.runner.notification.RunNotifier$7.val$description</outbound>
            </feature>
            <feature confirmed="no">
                <name>org.junit.runner.notification.RunNotifier$7.run()</name>
                <inbound type="feature" confirmed="yes">org.junit.runner.notification.RunNotifier.fireTestFinished(org.junit.runner.Description)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.junit.runner.notification.RunNotifier$7.this$0</name>
                <outbound type="class" confirmed="yes">org.junit.runner.notification.RunNotifier</outbound>
                <inbound type="feature" confirmed="yes">org.junit.runner.notification.RunNotifier$7.RunNotifier$7(org.junit.runner.notification.RunNotifier, org.junit.runner.Description)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.junit.runner.notification.RunNotifier$7.val$description</name>
                <outbound type="class" confirmed="yes">org.junit.runner.Description</outbound>
                <inbound type="feature" confirmed="yes">org.junit.runner.notification.RunNotifier$7.RunNotifier$7(org.junit.runner.notification.RunNotifier, org.junit.runner.Description)</inbound>
                <inbound type="feature" confirmed="yes">org.junit.runner.notification.RunNotifier$7.notifyListener(org.junit.runner.notification.RunListener)</inbound>
            </feature>
        </class>
        <class confirmed="yes">
            <name>org.junit.runner.notification.RunNotifier$SafeNotifier</name>
            <outbound type="class" confirmed="no">java.lang.Object</outbound>
            <inbound type="class" confirmed="yes">org.junit.runner.notification.RunNotifier$1</inbound>
            <inbound type="class" confirmed="yes">org.junit.runner.notification.RunNotifier$2</inbound>
            <inbound type="class" confirmed="yes">org.junit.runner.notification.RunNotifier$3</inbound>
            <inbound type="class" confirmed="yes">org.junit.runner.notification.RunNotifier$4</inbound>
            <inbound type="class" confirmed="yes">org.junit.runner.notification.RunNotifier$5</inbound>
            <inbound type="class" confirmed="yes">org.junit.runner.notification.RunNotifier$6</inbound>
            <inbound type="class" confirmed="yes">org.junit.runner.notification.RunNotifier$7</inbound>
            <feature confirmed="yes">
                <name>org.junit.runner.notification.RunNotifier$SafeNotifier.RunNotifier$SafeNotifier(org.junit.runner.notification.RunNotifier)</name>
                <outbound type="feature" confirmed="no">java.lang.Object.Object()</outbound>
                <outbound type="class" confirmed="yes">org.junit.runner.notification.RunNotifier</outbound>
                <outbound type="feature" confirmed="yes">org.junit.runner.notification.RunNotifier$SafeNotifier.this$0</outbound>
                <inbound type="feature" confirmed="yes">org.junit.runner.notification.RunNotifier$SafeNotifier.RunNotifier$SafeNotifier(org.junit.runner.notification.RunNotifier, org.junit.runner.notification.RunNotifier$1)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.junit.runner.notification.RunNotifier$SafeNotifier.RunNotifier$SafeNotifier(org.junit.runner.notification.RunNotifier, org.junit.runner.notification.RunNotifier$1)</name>
                <outbound type="class" confirmed="yes">org.junit.runner.notification.RunNotifier</outbound>
                <outbound type="class" confirmed="yes">org.junit.runner.notification.RunNotifier$1</outbound>
                <outbound type="feature" confirmed="yes">org.junit.runner.notification.RunNotifier$SafeNotifier.RunNotifier$SafeNotifier(org.junit.runner.notification.RunNotifier)</outbound>
                <inbound type="feature" confirmed="yes">org.junit.runner.notification.RunNotifier$1.RunNotifier$1(org.junit.runner.notification.RunNotifier, org.junit.runner.Description)</inbound>
                <inbound type="feature" confirmed="yes">org.junit.runner.notification.RunNotifier$2.RunNotifier$2(org.junit.runner.notification.RunNotifier, org.junit.runner.Result)</inbound>
                <inbound type="feature" confirmed="yes">org.junit.runner.notification.RunNotifier$3.RunNotifier$3(org.junit.runner.notification.RunNotifier, org.junit.runner.Description)</inbound>
                <inbound type="feature" confirmed="yes">org.junit.runner.notification.RunNotifier$4.RunNotifier$4(org.junit.runner.notification.RunNotifier, org.junit.runner.notification.Failure)</inbound>
                <inbound type="feature" confirmed="yes">org.junit.runner.notification.RunNotifier$5.RunNotifier$5(org.junit.runner.notification.RunNotifier, org.junit.runner.notification.Failure)</inbound>
                <inbound type="feature" confirmed="yes">org.junit.runner.notification.RunNotifier$6.RunNotifier$6(org.junit.runner.notification.RunNotifier, org.junit.runner.Description)</inbound>
                <inbound type="feature" confirmed="yes">org.junit.runner.notification.RunNotifier$7.RunNotifier$7(org.junit.runner.notification.RunNotifier, org.junit.runner.Description)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.junit.runner.notification.RunNotifier$SafeNotifier.notifyListener(org.junit.runner.notification.RunListener)</name>
                <outbound type="class" confirmed="no">java.lang.Exception</outbound>
                <outbound type="class" confirmed="yes">org.junit.runner.notification.RunListener</outbound>
                <inbound type="feature" confirmed="yes">org.junit.runner.notification.RunNotifier$SafeNotifier.run()</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.junit.runner.notification.RunNotifier$SafeNotifier.run()</name>
                <outbound type="class" confirmed="no">java.lang.Exception</outbound>
                <outbound type="class" confirmed="no">java.lang.Object</outbound>
                <outbound type="class" confirmed="no">java.lang.Throwable</outbound>
                <outbound type="class" confirmed="no">java.util.Iterator</outbound>
                <outbound type="feature" confirmed="no">java.util.Iterator.hasNext()</outbound>
                <outbound type="feature" confirmed="no">java.util.Iterator.next()</outbound>
                <outbound type="feature" confirmed="no">java.util.Iterator.remove()</outbound>
                <outbound type="class" confirmed="no">java.util.List</outbound>
                <outbound type="feature" confirmed="no">java.util.List.iterator()</outbound>
                <outbound type="class" confirmed="yes">org.junit.runner.Description</outbound>
                <outbound type="feature" confirmed="yes">org.junit.runner.Description.TEST_MECHANISM</outbound>
                <outbound type="class" confirmed="yes">org.junit.runner.notification.Failure</outbound>
                <outbound type="feature" confirmed="yes">org.junit.runner.notification.Failure.Failure(org.junit.runner.Description, java.lang.Throwable)</outbound>
                <outbound type="class" confirmed="yes">org.junit.runner.notification.RunListener</outbound>
                <outbound type="class" confirmed="yes">org.junit.runner.notification.RunNotifier</outbound>
                <outbound type="feature" confirmed="yes">org.junit.runner.notification.RunNotifier$SafeNotifier.notifyListener(org.junit.runner.notification.RunListener)</outbound>
                <outbound type="feature" confirmed="yes">org.junit.runner.notification.RunNotifier$SafeNotifier.this$0</outbound>
                <outbound type="feature" confirmed="yes">org.junit.runner.notification.RunNotifier.access$000(org.junit.runner.notification.RunNotifier)</outbound>
                <outbound type="feature" confirmed="yes">org.junit.runner.notification.RunNotifier.fireTestFailure(org.junit.runner.notification.Failure)</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.junit.runner.notification.RunNotifier$SafeNotifier.this$0</name>
                <outbound type="class" confirmed="yes">org.junit.runner.notification.RunNotifier</outbound>
                <inbound type="feature" confirmed="yes">org.junit.runner.notification.RunNotifier$SafeNotifier.RunNotifier$SafeNotifier(org.junit.runner.notification.RunNotifier)</inbound>
                <inbound type="feature" confirmed="yes">org.junit.runner.notification.RunNotifier$SafeNotifier.run()</inbound>
            </feature>
        </class>
        <class confirmed="yes">
            <name>org.junit.runner.notification.StoppedByUserException</name>
            <outbound type="class" confirmed="no">java.lang.RuntimeException</outbound>
            <inbound type="feature" confirmed="yes">org.junit.runner.notification.RunNotifier.fireTestStarted(org.junit.runner.Description)</inbound>
            <inbound type="feature" confirmed="yes">org.junit.runners.ParentRunner.run(org.junit.runner.notification.RunNotifier)</inbound>
            <feature confirmed="yes">
                <name>org.junit.runner.notification.StoppedByUserException.StoppedByUserException()</name>
                <outbound type="feature" confirmed="no">java.lang.RuntimeException.RuntimeException()</outbound>
                <inbound type="feature" confirmed="yes">org.junit.runner.notification.RunNotifier.fireTestStarted(org.junit.runner.Description)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.junit.runner.notification.StoppedByUserException.serialVersionUID</name>
            </feature>
        </class>
        <class confirmed="yes">
            <name>org.junit.runner.notification.package-info</name>
            <outbound type="class" confirmed="no">java.lang.Object</outbound>
        </class>
    </package>
    <package confirmed="yes">
        <name>org.junit.runners</name>
        <class confirmed="yes">
            <name>org.junit.runners.AllTests</name>
            <outbound type="class" confirmed="yes">org.junit.internal.runners.SuiteMethod</outbound>
            <feature confirmed="yes">
                <name>org.junit.runners.AllTests.AllTests(java.lang.Class)</name>
                <outbound type="class" confirmed="no">java.lang.Class</outbound>
                <outbound type="class" confirmed="no">java.lang.Throwable</outbound>
                <outbound type="feature" confirmed="yes">org.junit.internal.runners.SuiteMethod.SuiteMethod(java.lang.Class)</outbound>
            </feature>
        </class>
        <class confirmed="yes">
            <name>org.junit.runners.BlockJUnit4ClassRunner</name>
            <outbound type="class" confirmed="yes">org.junit.runners.ParentRunner</outbound>
            <inbound type="class" confirmed="yes">org.junit.experimental.theories.Theories</inbound>
            <inbound type="class" confirmed="yes">org.junit.experimental.theories.Theories$TheoryAnchor$1</inbound>
            <inbound type="feature" confirmed="yes">org.junit.runners.BlockJUnit4ClassRunner$1.BlockJUnit4ClassRunner$1(org.junit.runners.BlockJUnit4ClassRunner)</inbound>
            <inbound type="feature" confirmed="yes">org.junit.runners.BlockJUnit4ClassRunner$1.runReflectiveCall()</inbound>
            <inbound type="feature" confirmed="yes">org.junit.runners.BlockJUnit4ClassRunner$1.this$0</inbound>
            <inbound type="class" confirmed="yes">org.junit.runners.JUnit4</inbound>
            <inbound type="class" confirmed="yes">org.junit.runners.Parameterized$TestClassRunnerForParameters</inbound>
            <feature confirmed="yes">
                <name>org.junit.runners.BlockJUnit4ClassRunner.BlockJUnit4ClassRunner(java.lang.Class)</name>
                <outbound type="class" confirmed="no">java.lang.Class</outbound>
                <outbound type="feature" confirmed="yes">org.junit.runners.ParentRunner.ParentRunner(java.lang.Class)</outbound>
                <outbound type="class" confirmed="yes">org.junit.runners.model.InitializationError</outbound>
                <inbound type="feature" confirmed="yes">org.junit.experimental.theories.Theories$TheoryAnchor$1.Theories$TheoryAnchor$1(org.junit.experimental.theories.Theories$TheoryAnchor, java.lang.Class, org.junit.experimental.theories.internal.Assignments)</inbound>
                <inbound type="feature" confirmed="yes">org.junit.experimental.theories.Theories.Theories(java.lang.Class)</inbound>
                <inbound type="feature" confirmed="yes">org.junit.internal.builders.JUnit4Builder.runnerForClass(java.lang.Class)</inbound>
                <inbound type="feature" confirmed="yes">org.junit.runners.JUnit4.JUnit4(java.lang.Class)</inbound>
                <inbound type="feature" confirmed="yes">org.junit.runners.Parameterized$TestClassRunnerForParameters.Parameterized$TestClassRunnerForParameters(org.junit.runners.Parameterized, java.lang.Class, java.util.List, int)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.junit.runners.BlockJUnit4ClassRunner.collectInitializationErrors(java.util.List)</name>
                <outbound type="class" confirmed="no">java.util.List</outbound>
                <outbound type="feature" confirmed="yes">org.junit.runners.BlockJUnit4ClassRunner.validateConstructor(java.util.List)</outbound>
                <outbound type="feature" confirmed="yes">org.junit.runners.BlockJUnit4ClassRunner.validateFields(java.util.List)</outbound>
                <outbound type="feature" confirmed="yes">org.junit.runners.BlockJUnit4ClassRunner.validateInstanceMethods(java.util.List)</outbound>
                <outbound type="feature" confirmed="yes">org.junit.runners.ParentRunner.collectInitializationErrors(java.util.List)</outbound>
                <inbound type="feature" confirmed="yes">org.junit.experimental.theories.Theories.collectInitializationErrors(java.util.List)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.junit.runners.BlockJUnit4ClassRunner.computeTestMethods()</name>
                <outbound type="class" confirmed="no">java.lang.Class</outbound>
                <outbound type="class" confirmed="no">java.util.List</outbound>
                <outbound type="class" confirmed="yes">org.junit.Test</outbound>
                <outbound type="feature" confirmed="no">org.junit.runners.BlockJUnit4ClassRunner.getTestClass()</outbound>
                <outbound type="class" confirmed="yes">org.junit.runners.model.TestClass</outbound>
                <outbound type="feature" confirmed="yes">org.junit.runners.model.TestClass.getAnnotatedMethods(java.lang.Class)</outbound>
                <inbound type="feature" confirmed="yes">org.junit.experimental.theories.Theories.computeTestMethods()</inbound>
                <inbound type="feature" confirmed="yes">org.junit.runners.BlockJUnit4ClassRunner.getChildren()</inbound>
                <inbound type="feature" confirmed="yes">org.junit.runners.BlockJUnit4ClassRunner.validateInstanceMethods(java.util.List)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.junit.runners.BlockJUnit4ClassRunner.createTest()</name>
                <outbound type="class" confirmed="no">java.lang.Exception</outbound>
                <outbound type="class" confirmed="no">java.lang.Object</outbound>
                <outbound type="class" confirmed="no">java.lang.reflect.Constructor</outbound>
                <outbound type="feature" confirmed="no">java.lang.reflect.Constructor.newInstance(java.lang.Object[])</outbound>
                <outbound type="feature" confirmed="no">org.junit.runners.BlockJUnit4ClassRunner.getTestClass()</outbound>
                <outbound type="class" confirmed="yes">org.junit.runners.model.TestClass</outbound>
                <outbound type="feature" confirmed="yes">org.junit.runners.model.TestClass.getOnlyConstructor()</outbound>
                <inbound type="feature" confirmed="yes">org.junit.runners.BlockJUnit4ClassRunner$1.runReflectiveCall()</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.junit.runners.BlockJUnit4ClassRunner.describeChild(java.lang.Object)</name>
                <outbound type="class" confirmed="no">java.lang.Object</outbound>
                <outbound type="class" confirmed="yes">org.junit.runner.Description</outbound>
                <outbound type="feature" confirmed="yes">org.junit.runners.BlockJUnit4ClassRunner.describeChild(org.junit.runners.model.FrameworkMethod)</outbound>
                <outbound type="class" confirmed="yes">org.junit.runners.model.FrameworkMethod</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.junit.runners.BlockJUnit4ClassRunner.describeChild(org.junit.runners.model.FrameworkMethod)</name>
                <outbound type="class" confirmed="no">java.lang.Class</outbound>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="class" confirmed="no">java.lang.annotation.Annotation</outbound>
                <outbound type="class" confirmed="yes">org.junit.runner.Description</outbound>
                <outbound type="feature" confirmed="yes">org.junit.runner.Description.createTestDescription(java.lang.Class, java.lang.String, java.lang.annotation.Annotation[])</outbound>
                <outbound type="feature" confirmed="no">org.junit.runners.BlockJUnit4ClassRunner.getTestClass()</outbound>
                <outbound type="feature" confirmed="yes">org.junit.runners.BlockJUnit4ClassRunner.testName(org.junit.runners.model.FrameworkMethod)</outbound>
                <outbound type="class" confirmed="yes">org.junit.runners.model.FrameworkMethod</outbound>
                <outbound type="feature" confirmed="yes">org.junit.runners.model.FrameworkMethod.getAnnotations()</outbound>
                <outbound type="class" confirmed="yes">org.junit.runners.model.TestClass</outbound>
                <outbound type="feature" confirmed="yes">org.junit.runners.model.TestClass.getJavaClass()</outbound>
                <inbound type="feature" confirmed="yes">org.junit.runners.BlockJUnit4ClassRunner.describeChild(java.lang.Object)</inbound>
                <inbound type="feature" confirmed="yes">org.junit.runners.BlockJUnit4ClassRunner.runChild(org.junit.runners.model.FrameworkMethod, org.junit.runner.notification.RunNotifier)</inbound>
                <inbound type="feature" confirmed="yes">org.junit.runners.BlockJUnit4ClassRunner.withTestRules(org.junit.runners.model.FrameworkMethod, java.lang.Object, org.junit.runners.model.Statement)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.junit.runners.BlockJUnit4ClassRunner.expectsException(org.junit.Test)</name>
                <outbound type="class" confirmed="no">java.lang.Class</outbound>
                <outbound type="class" confirmed="yes">org.junit.Test</outbound>
                <outbound type="feature" confirmed="yes">org.junit.runners.BlockJUnit4ClassRunner.getExpectedException(org.junit.Test)</outbound>
                <inbound type="feature" confirmed="yes">org.junit.runners.BlockJUnit4ClassRunner.possiblyExpectingExceptions(org.junit.runners.model.FrameworkMethod, java.lang.Object, org.junit.runners.model.Statement)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.junit.runners.BlockJUnit4ClassRunner.getChildren()</name>
                <outbound type="class" confirmed="no">java.util.List</outbound>
                <outbound type="feature" confirmed="yes">org.junit.runners.BlockJUnit4ClassRunner.computeTestMethods()</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.junit.runners.BlockJUnit4ClassRunner.getExpectedException(org.junit.Test)</name>
                <outbound type="class" confirmed="no">java.lang.Class</outbound>
                <outbound type="class" confirmed="yes">org.junit.Test</outbound>
                <outbound type="class" confirmed="yes">org.junit.Test$None</outbound>
                <outbound type="feature" confirmed="yes">org.junit.Test.expected()</outbound>
                <inbound type="feature" confirmed="yes">org.junit.runners.BlockJUnit4ClassRunner.expectsException(org.junit.Test)</inbound>
                <inbound type="feature" confirmed="yes">org.junit.runners.BlockJUnit4ClassRunner.possiblyExpectingExceptions(org.junit.runners.model.FrameworkMethod, java.lang.Object, org.junit.runners.model.Statement)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.junit.runners.BlockJUnit4ClassRunner.getMethodRules(java.lang.Object)</name>
                <outbound type="class" confirmed="no">java.lang.Object</outbound>
                <outbound type="class" confirmed="no">java.util.List</outbound>
                <outbound type="feature" confirmed="yes">org.junit.runners.BlockJUnit4ClassRunner.rules(java.lang.Object)</outbound>
                <inbound type="feature" confirmed="yes">org.junit.runners.BlockJUnit4ClassRunner.withMethodRules(org.junit.runners.model.FrameworkMethod, java.lang.Object, org.junit.runners.model.Statement)</inbound>
            </feature>
            <feature confirmed="no">
                <name>org.junit.runners.BlockJUnit4ClassRunner.getTestClass()</name>
                <inbound type="feature" confirmed="yes">org.junit.runners.BlockJUnit4ClassRunner.computeTestMethods()</inbound>
                <inbound type="feature" confirmed="yes">org.junit.runners.BlockJUnit4ClassRunner.createTest()</inbound>
                <inbound type="feature" confirmed="yes">org.junit.runners.BlockJUnit4ClassRunner.describeChild(org.junit.runners.model.FrameworkMethod)</inbound>
                <inbound type="feature" confirmed="yes">org.junit.runners.BlockJUnit4ClassRunner.getTestRules(java.lang.Object)</inbound>
                <inbound type="feature" confirmed="yes">org.junit.runners.BlockJUnit4ClassRunner.hasOneConstructor()</inbound>
                <inbound type="feature" confirmed="yes">org.junit.runners.BlockJUnit4ClassRunner.rules(java.lang.Object)</inbound>
                <inbound type="feature" confirmed="yes">org.junit.runners.BlockJUnit4ClassRunner.validateFields(java.util.List)</inbound>
                <inbound type="feature" confirmed="yes">org.junit.runners.BlockJUnit4ClassRunner.validateZeroArgConstructor(java.util.List)</inbound>
                <inbound type="feature" confirmed="yes">org.junit.runners.BlockJUnit4ClassRunner.withAfters(org.junit.runners.model.FrameworkMethod, java.lang.Object, org.junit.runners.model.Statement)</inbound>
                <inbound type="feature" confirmed="yes">org.junit.runners.BlockJUnit4ClassRunner.withBefores(org.junit.runners.model.FrameworkMethod, java.lang.Object, org.junit.runners.model.Statement)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.junit.runners.BlockJUnit4ClassRunner.getTestRules(java.lang.Object)</name>
                <outbound type="class" confirmed="no">java.lang.Class</outbound>
                <outbound type="class" confirmed="no">java.lang.Object</outbound>
                <outbound type="class" confirmed="no">java.util.List</outbound>
                <outbound type="class" confirmed="yes">org.junit.Rule</outbound>
                <outbound type="class" confirmed="yes">org.junit.rules.TestRule</outbound>
                <outbound type="feature" confirmed="no">org.junit.runners.BlockJUnit4ClassRunner.getTestClass()</outbound>
                <outbound type="class" confirmed="yes">org.junit.runners.model.TestClass</outbound>
                <outbound type="feature" confirmed="yes">org.junit.runners.model.TestClass.getAnnotatedFieldValues(java.lang.Object, java.lang.Class, java.lang.Class)</outbound>
                <inbound type="feature" confirmed="yes">org.junit.runners.BlockJUnit4ClassRunner.withMethodRules(org.junit.runners.model.FrameworkMethod, java.lang.Object, org.junit.runners.model.Statement)</inbound>
                <inbound type="feature" confirmed="yes">org.junit.runners.BlockJUnit4ClassRunner.withTestRules(org.junit.runners.model.FrameworkMethod, java.lang.Object, org.junit.runners.model.Statement)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.junit.runners.BlockJUnit4ClassRunner.getTimeout(org.junit.Test)</name>
                <outbound type="class" confirmed="yes">org.junit.Test</outbound>
                <outbound type="feature" confirmed="yes">org.junit.Test.timeout()</outbound>
                <inbound type="feature" confirmed="yes">org.junit.runners.BlockJUnit4ClassRunner.withPotentialTimeout(org.junit.runners.model.FrameworkMethod, java.lang.Object, org.junit.runners.model.Statement)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.junit.runners.BlockJUnit4ClassRunner.hasOneConstructor()</name>
                <outbound type="class" confirmed="no">java.lang.Class</outbound>
                <outbound type="feature" confirmed="no">java.lang.Class.getConstructors()</outbound>
                <outbound type="class" confirmed="no">java.lang.reflect.Constructor</outbound>
                <outbound type="feature" confirmed="no">org.junit.runners.BlockJUnit4ClassRunner.getTestClass()</outbound>
                <outbound type="class" confirmed="yes">org.junit.runners.model.TestClass</outbound>
                <outbound type="feature" confirmed="yes">org.junit.runners.model.TestClass.getJavaClass()</outbound>
                <inbound type="feature" confirmed="yes">org.junit.runners.BlockJUnit4ClassRunner.validateOnlyOneConstructor(java.util.List)</inbound>
                <inbound type="feature" confirmed="yes">org.junit.runners.BlockJUnit4ClassRunner.validateZeroArgConstructor(java.util.List)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.junit.runners.BlockJUnit4ClassRunner.methodBlock(org.junit.runners.model.FrameworkMethod)</name>
                <outbound type="class" confirmed="no">java.lang.Object</outbound>
                <outbound type="class" confirmed="no">java.lang.Throwable</outbound>
                <outbound type="feature" confirmed="yes">org.junit.internal.runners.statements.Fail.Fail(java.lang.Throwable)</outbound>
                <outbound type="feature" confirmed="yes">org.junit.runners.BlockJUnit4ClassRunner$1.BlockJUnit4ClassRunner$1(org.junit.runners.BlockJUnit4ClassRunner)</outbound>
                <outbound type="feature" confirmed="no">org.junit.runners.BlockJUnit4ClassRunner$1.run()</outbound>
                <outbound type="feature" confirmed="yes">org.junit.runners.BlockJUnit4ClassRunner.methodInvoker(org.junit.runners.model.FrameworkMethod, java.lang.Object)</outbound>
                <outbound type="feature" confirmed="yes">org.junit.runners.BlockJUnit4ClassRunner.possiblyExpectingExceptions(org.junit.runners.model.FrameworkMethod, java.lang.Object, org.junit.runners.model.Statement)</outbound>
                <outbound type="feature" confirmed="yes">org.junit.runners.BlockJUnit4ClassRunner.withAfters(org.junit.runners.model.FrameworkMethod, java.lang.Object, org.junit.runners.model.Statement)</outbound>
                <outbound type="feature" confirmed="yes">org.junit.runners.BlockJUnit4ClassRunner.withBefores(org.junit.runners.model.FrameworkMethod, java.lang.Object, org.junit.runners.model.Statement)</outbound>
                <outbound type="feature" confirmed="yes">org.junit.runners.BlockJUnit4ClassRunner.withPotentialTimeout(org.junit.runners.model.FrameworkMethod, java.lang.Object, org.junit.runners.model.Statement)</outbound>
                <outbound type="feature" confirmed="yes">org.junit.runners.BlockJUnit4ClassRunner.withRules(org.junit.runners.model.FrameworkMethod, java.lang.Object, org.junit.runners.model.Statement)</outbound>
                <outbound type="class" confirmed="yes">org.junit.runners.model.FrameworkMethod</outbound>
                <outbound type="class" confirmed="yes">org.junit.runners.model.Statement</outbound>
                <inbound type="feature" confirmed="yes">org.junit.experimental.theories.Theories$TheoryAnchor$1.methodBlock(org.junit.runners.model.FrameworkMethod)</inbound>
                <inbound type="feature" confirmed="yes">org.junit.runners.BlockJUnit4ClassRunner.runChild(org.junit.runners.model.FrameworkMethod, org.junit.runner.notification.RunNotifier)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.junit.runners.BlockJUnit4ClassRunner.methodInvoker(org.junit.runners.model.FrameworkMethod, java.lang.Object)</name>
                <outbound type="class" confirmed="no">java.lang.Object</outbound>
                <outbound type="feature" confirmed="yes">org.junit.internal.runners.statements.InvokeMethod.InvokeMethod(org.junit.runners.model.FrameworkMethod, java.lang.Object)</outbound>
                <outbound type="class" confirmed="yes">org.junit.runners.model.FrameworkMethod</outbound>
                <outbound type="class" confirmed="yes">org.junit.runners.model.Statement</outbound>
                <inbound type="feature" confirmed="yes">org.junit.runners.BlockJUnit4ClassRunner.methodBlock(org.junit.runners.model.FrameworkMethod)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.junit.runners.BlockJUnit4ClassRunner.possiblyExpectingExceptions(org.junit.runners.model.FrameworkMethod, java.lang.Object, org.junit.runners.model.Statement)</name>
                <outbound type="class" confirmed="no">java.lang.Class</outbound>
                <outbound type="class" confirmed="no">java.lang.Object</outbound>
                <outbound type="class" confirmed="no">java.lang.annotation.Annotation</outbound>
                <outbound type="class" confirmed="yes">org.junit.Test</outbound>
                <outbound type="feature" confirmed="yes">org.junit.internal.runners.statements.ExpectException.ExpectException(org.junit.runners.model.Statement, java.lang.Class)</outbound>
                <outbound type="feature" confirmed="yes">org.junit.runners.BlockJUnit4ClassRunner.expectsException(org.junit.Test)</outbound>
                <outbound type="feature" confirmed="yes">org.junit.runners.BlockJUnit4ClassRunner.getExpectedException(org.junit.Test)</outbound>
                <outbound type="class" confirmed="yes">org.junit.runners.model.FrameworkMethod</outbound>
                <outbound type="feature" confirmed="yes">org.junit.runners.model.FrameworkMethod.getAnnotation(java.lang.Class)</outbound>
                <outbound type="class" confirmed="yes">org.junit.runners.model.Statement</outbound>
                <inbound type="feature" confirmed="yes">org.junit.runners.BlockJUnit4ClassRunner.methodBlock(org.junit.runners.model.FrameworkMethod)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.junit.runners.BlockJUnit4ClassRunner.rules(java.lang.Object)</name>
                <outbound type="class" confirmed="no">java.lang.Class</outbound>
                <outbound type="class" confirmed="no">java.lang.Object</outbound>
                <outbound type="class" confirmed="no">java.util.List</outbound>
                <outbound type="class" confirmed="yes">org.junit.Rule</outbound>
                <outbound type="class" confirmed="yes">org.junit.rules.MethodRule</outbound>
                <outbound type="feature" confirmed="no">org.junit.runners.BlockJUnit4ClassRunner.getTestClass()</outbound>
                <outbound type="class" confirmed="yes">org.junit.runners.model.TestClass</outbound>
                <outbound type="feature" confirmed="yes">org.junit.runners.model.TestClass.getAnnotatedFieldValues(java.lang.Object, java.lang.Class, java.lang.Class)</outbound>
                <inbound type="feature" confirmed="yes">org.junit.runners.BlockJUnit4ClassRunner.getMethodRules(java.lang.Object)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.junit.runners.BlockJUnit4ClassRunner.runChild(java.lang.Object, org.junit.runner.notification.RunNotifier)</name>
                <outbound type="class" confirmed="no">java.lang.Object</outbound>
                <outbound type="class" confirmed="yes">org.junit.runner.notification.RunNotifier</outbound>
                <outbound type="feature" confirmed="yes">org.junit.runners.BlockJUnit4ClassRunner.runChild(org.junit.runners.model.FrameworkMethod, org.junit.runner.notification.RunNotifier)</outbound>
                <outbound type="class" confirmed="yes">org.junit.runners.model.FrameworkMethod</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.junit.runners.BlockJUnit4ClassRunner.runChild(org.junit.runners.model.FrameworkMethod, org.junit.runner.notification.RunNotifier)</name>
                <outbound type="class" confirmed="no">java.lang.Class</outbound>
                <outbound type="class" confirmed="no">java.lang.annotation.Annotation</outbound>
                <outbound type="class" confirmed="yes">org.junit.Ignore</outbound>
                <outbound type="class" confirmed="yes">org.junit.runner.Description</outbound>
                <outbound type="class" confirmed="yes">org.junit.runner.notification.RunNotifier</outbound>
                <outbound type="feature" confirmed="yes">org.junit.runner.notification.RunNotifier.fireTestIgnored(org.junit.runner.Description)</outbound>
                <outbound type="feature" confirmed="yes">org.junit.runners.BlockJUnit4ClassRunner.describeChild(org.junit.runners.model.FrameworkMethod)</outbound>
                <outbound type="feature" confirmed="yes">org.junit.runners.BlockJUnit4ClassRunner.methodBlock(org.junit.runners.model.FrameworkMethod)</outbound>
                <outbound type="feature" confirmed="no">org.junit.runners.BlockJUnit4ClassRunner.runLeaf(org.junit.runners.model.Statement, org.junit.runner.Description, org.junit.runner.notification.RunNotifier)</outbound>
                <outbound type="class" confirmed="yes">org.junit.runners.model.FrameworkMethod</outbound>
                <outbound type="feature" confirmed="yes">org.junit.runners.model.FrameworkMethod.getAnnotation(java.lang.Class)</outbound>
                <outbound type="class" confirmed="yes">org.junit.runners.model.Statement</outbound>
                <inbound type="feature" confirmed="yes">org.junit.runners.BlockJUnit4ClassRunner.runChild(java.lang.Object, org.junit.runner.notification.RunNotifier)</inbound>
            </feature>
            <feature confirmed="no">
                <name>org.junit.runners.BlockJUnit4ClassRunner.runLeaf(org.junit.runners.model.Statement, org.junit.runner.Description, org.junit.runner.notification.RunNotifier)</name>
                <inbound type="feature" confirmed="yes">org.junit.runners.BlockJUnit4ClassRunner.runChild(org.junit.runners.model.FrameworkMethod, org.junit.runner.notification.RunNotifier)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.junit.runners.BlockJUnit4ClassRunner.testName(org.junit.runners.model.FrameworkMethod)</name>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="class" confirmed="yes">org.junit.runners.model.FrameworkMethod</outbound>
                <outbound type="feature" confirmed="yes">org.junit.runners.model.FrameworkMethod.getName()</outbound>
                <inbound type="feature" confirmed="yes">org.junit.runners.BlockJUnit4ClassRunner.describeChild(org.junit.runners.model.FrameworkMethod)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.junit.runners.BlockJUnit4ClassRunner.validateConstructor(java.util.List)</name>
                <outbound type="class" confirmed="no">java.util.List</outbound>
                <outbound type="feature" confirmed="yes">org.junit.runners.BlockJUnit4ClassRunner.validateOnlyOneConstructor(java.util.List)</outbound>
                <outbound type="feature" confirmed="yes">org.junit.runners.BlockJUnit4ClassRunner.validateZeroArgConstructor(java.util.List)</outbound>
                <inbound type="feature" confirmed="yes">org.junit.runners.BlockJUnit4ClassRunner.collectInitializationErrors(java.util.List)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.junit.runners.BlockJUnit4ClassRunner.validateFields(java.util.List)</name>
                <outbound type="class" confirmed="no">java.util.List</outbound>
                <outbound type="class" confirmed="yes">org.junit.internal.runners.rules.RuleFieldValidator</outbound>
                <outbound type="feature" confirmed="yes">org.junit.internal.runners.rules.RuleFieldValidator.RULE_VALIDATOR</outbound>
                <outbound type="feature" confirmed="yes">org.junit.internal.runners.rules.RuleFieldValidator.validate(org.junit.runners.model.TestClass, java.util.List)</outbound>
                <outbound type="feature" confirmed="no">org.junit.runners.BlockJUnit4ClassRunner.getTestClass()</outbound>
                <outbound type="class" confirmed="yes">org.junit.runners.model.TestClass</outbound>
                <inbound type="feature" confirmed="yes">org.junit.runners.BlockJUnit4ClassRunner.collectInitializationErrors(java.util.List)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.junit.runners.BlockJUnit4ClassRunner.validateInstanceMethods(java.util.List)</name>
                <outbound type="class" confirmed="no">java.lang.Class</outbound>
                <outbound type="feature" confirmed="no">java.lang.Exception.Exception(java.lang.String)</outbound>
                <outbound type="class" confirmed="no">java.lang.Object</outbound>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="class" confirmed="no">java.util.List</outbound>
                <outbound type="feature" confirmed="no">java.util.List.add(java.lang.Object)</outbound>
                <outbound type="feature" confirmed="no">java.util.List.size()</outbound>
                <outbound type="class" confirmed="yes">org.junit.After</outbound>
                <outbound type="class" confirmed="yes">org.junit.Before</outbound>
                <outbound type="feature" confirmed="yes">org.junit.runners.BlockJUnit4ClassRunner.computeTestMethods()</outbound>
                <outbound type="feature" confirmed="no">org.junit.runners.BlockJUnit4ClassRunner.validatePublicVoidNoArgMethods(java.lang.Class, boolean, java.util.List)</outbound>
                <outbound type="feature" confirmed="yes">org.junit.runners.BlockJUnit4ClassRunner.validateTestMethods(java.util.List)</outbound>
                <inbound type="feature" confirmed="yes">org.junit.runners.BlockJUnit4ClassRunner.collectInitializationErrors(java.util.List)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.junit.runners.BlockJUnit4ClassRunner.validateOnlyOneConstructor(java.util.List)</name>
                <outbound type="feature" confirmed="no">java.lang.Exception.Exception(java.lang.String)</outbound>
                <outbound type="class" confirmed="no">java.lang.Object</outbound>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="class" confirmed="no">java.util.List</outbound>
                <outbound type="feature" confirmed="no">java.util.List.add(java.lang.Object)</outbound>
                <outbound type="feature" confirmed="yes">org.junit.runners.BlockJUnit4ClassRunner.hasOneConstructor()</outbound>
                <inbound type="feature" confirmed="yes">org.junit.runners.BlockJUnit4ClassRunner.validateConstructor(java.util.List)</inbound>
            </feature>
            <feature confirmed="no">
                <name>org.junit.runners.BlockJUnit4ClassRunner.validatePublicVoidNoArgMethods(java.lang.Class, boolean, java.util.List)</name>
                <inbound type="feature" confirmed="yes">org.junit.runners.BlockJUnit4ClassRunner.validateInstanceMethods(java.util.List)</inbound>
                <inbound type="feature" confirmed="yes">org.junit.runners.BlockJUnit4ClassRunner.validateTestMethods(java.util.List)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.junit.runners.BlockJUnit4ClassRunner.validateTestMethods(java.util.List)</name>
                <outbound type="class" confirmed="no">java.lang.Class</outbound>
                <outbound type="class" confirmed="no">java.util.List</outbound>
                <outbound type="class" confirmed="yes">org.junit.Test</outbound>
                <outbound type="feature" confirmed="no">org.junit.runners.BlockJUnit4ClassRunner.validatePublicVoidNoArgMethods(java.lang.Class, boolean, java.util.List)</outbound>
                <inbound type="feature" confirmed="yes">org.junit.runners.BlockJUnit4ClassRunner.validateInstanceMethods(java.util.List)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.junit.runners.BlockJUnit4ClassRunner.validateZeroArgConstructor(java.util.List)</name>
                <outbound type="class" confirmed="no">java.lang.Class</outbound>
                <outbound type="feature" confirmed="no">java.lang.Exception.Exception(java.lang.String)</outbound>
                <outbound type="class" confirmed="no">java.lang.Object</outbound>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="class" confirmed="no">java.lang.reflect.Constructor</outbound>
                <outbound type="feature" confirmed="no">java.lang.reflect.Constructor.getParameterTypes()</outbound>
                <outbound type="class" confirmed="no">java.util.List</outbound>
                <outbound type="feature" confirmed="no">java.util.List.add(java.lang.Object)</outbound>
                <outbound type="feature" confirmed="no">org.junit.runners.BlockJUnit4ClassRunner.getTestClass()</outbound>
                <outbound type="feature" confirmed="yes">org.junit.runners.BlockJUnit4ClassRunner.hasOneConstructor()</outbound>
                <outbound type="class" confirmed="yes">org.junit.runners.model.TestClass</outbound>
                <outbound type="feature" confirmed="yes">org.junit.runners.model.TestClass.getOnlyConstructor()</outbound>
                <inbound type="feature" confirmed="yes">org.junit.runners.BlockJUnit4ClassRunner.validateConstructor(java.util.List)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.junit.runners.BlockJUnit4ClassRunner.withAfters(org.junit.runners.model.FrameworkMethod, java.lang.Object, org.junit.runners.model.Statement)</name>
                <outbound type="class" confirmed="no">java.lang.Class</outbound>
                <outbound type="class" confirmed="no">java.lang.Object</outbound>
                <outbound type="class" confirmed="no">java.util.List</outbound>
                <outbound type="feature" confirmed="no">java.util.List.isEmpty()</outbound>
                <outbound type="class" confirmed="yes">org.junit.After</outbound>
                <outbound type="feature" confirmed="yes">org.junit.internal.runners.statements.RunAfters.RunAfters(org.junit.runners.model.Statement, java.util.List, java.lang.Object)</outbound>
                <outbound type="feature" confirmed="no">org.junit.runners.BlockJUnit4ClassRunner.getTestClass()</outbound>
                <outbound type="class" confirmed="yes">org.junit.runners.model.FrameworkMethod</outbound>
                <outbound type="class" confirmed="yes">org.junit.runners.model.Statement</outbound>
                <outbound type="class" confirmed="yes">org.junit.runners.model.TestClass</outbound>
                <outbound type="feature" confirmed="yes">org.junit.runners.model.TestClass.getAnnotatedMethods(java.lang.Class)</outbound>
                <inbound type="feature" confirmed="yes">org.junit.runners.BlockJUnit4ClassRunner.methodBlock(org.junit.runners.model.FrameworkMethod)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.junit.runners.BlockJUnit4ClassRunner.withBefores(org.junit.runners.model.FrameworkMethod, java.lang.Object, org.junit.runners.model.Statement)</name>
                <outbound type="class" confirmed="no">java.lang.Class</outbound>
                <outbound type="class" confirmed="no">java.lang.Object</outbound>
                <outbound type="class" confirmed="no">java.util.List</outbound>
                <outbound type="feature" confirmed="no">java.util.List.isEmpty()</outbound>
                <outbound type="class" confirmed="yes">org.junit.Before</outbound>
                <outbound type="feature" confirmed="yes">org.junit.internal.runners.statements.RunBefores.RunBefores(org.junit.runners.model.Statement, java.util.List, java.lang.Object)</outbound>
                <outbound type="feature" confirmed="no">org.junit.runners.BlockJUnit4ClassRunner.getTestClass()</outbound>
                <outbound type="class" confirmed="yes">org.junit.runners.model.FrameworkMethod</outbound>
                <outbound type="class" confirmed="yes">org.junit.runners.model.Statement</outbound>
                <outbound type="class" confirmed="yes">org.junit.runners.model.TestClass</outbound>
                <outbound type="feature" confirmed="yes">org.junit.runners.model.TestClass.getAnnotatedMethods(java.lang.Class)</outbound>
                <inbound type="feature" confirmed="yes">org.junit.runners.BlockJUnit4ClassRunner.methodBlock(org.junit.runners.model.FrameworkMethod)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.junit.runners.BlockJUnit4ClassRunner.withMethodRules(org.junit.runners.model.FrameworkMethod, java.lang.Object, org.junit.runners.model.Statement)</name>
                <outbound type="class" confirmed="no">java.lang.Object</outbound>
                <outbound type="class" confirmed="no">java.util.Iterator</outbound>
                <outbound type="feature" confirmed="no">java.util.Iterator.hasNext()</outbound>
                <outbound type="feature" confirmed="no">java.util.Iterator.next()</outbound>
                <outbound type="class" confirmed="no">java.util.List</outbound>
                <outbound type="feature" confirmed="no">java.util.List.contains(java.lang.Object)</outbound>
                <outbound type="feature" confirmed="no">java.util.List.iterator()</outbound>
                <outbound type="class" confirmed="yes">org.junit.rules.MethodRule</outbound>
                <outbound type="feature" confirmed="yes">org.junit.rules.MethodRule.apply(org.junit.runners.model.Statement, org.junit.runners.model.FrameworkMethod, java.lang.Object)</outbound>
                <outbound type="feature" confirmed="yes">org.junit.runners.BlockJUnit4ClassRunner.getMethodRules(java.lang.Object)</outbound>
                <outbound type="feature" confirmed="yes">org.junit.runners.BlockJUnit4ClassRunner.getTestRules(java.lang.Object)</outbound>
                <outbound type="class" confirmed="yes">org.junit.runners.model.FrameworkMethod</outbound>
                <outbound type="class" confirmed="yes">org.junit.runners.model.Statement</outbound>
                <inbound type="feature" confirmed="yes">org.junit.runners.BlockJUnit4ClassRunner.withRules(org.junit.runners.model.FrameworkMethod, java.lang.Object, org.junit.runners.model.Statement)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.junit.runners.BlockJUnit4ClassRunner.withPotentialTimeout(org.junit.runners.model.FrameworkMethod, java.lang.Object, org.junit.runners.model.Statement)</name>
                <outbound type="class" confirmed="no">java.lang.Class</outbound>
                <outbound type="class" confirmed="no">java.lang.Object</outbound>
                <outbound type="class" confirmed="no">java.lang.annotation.Annotation</outbound>
                <outbound type="class" confirmed="yes">org.junit.Test</outbound>
                <outbound type="feature" confirmed="yes">org.junit.internal.runners.statements.FailOnTimeout.FailOnTimeout(org.junit.runners.model.Statement, long)</outbound>
                <outbound type="feature" confirmed="yes">org.junit.runners.BlockJUnit4ClassRunner.getTimeout(org.junit.Test)</outbound>
                <outbound type="class" confirmed="yes">org.junit.runners.model.FrameworkMethod</outbound>
                <outbound type="feature" confirmed="yes">org.junit.runners.model.FrameworkMethod.getAnnotation(java.lang.Class)</outbound>
                <outbound type="class" confirmed="yes">org.junit.runners.model.Statement</outbound>
                <inbound type="feature" confirmed="yes">org.junit.runners.BlockJUnit4ClassRunner.methodBlock(org.junit.runners.model.FrameworkMethod)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.junit.runners.BlockJUnit4ClassRunner.withRules(org.junit.runners.model.FrameworkMethod, java.lang.Object, org.junit.runners.model.Statement)</name>
                <outbound type="class" confirmed="no">java.lang.Object</outbound>
                <outbound type="feature" confirmed="yes">org.junit.runners.BlockJUnit4ClassRunner.withMethodRules(org.junit.runners.model.FrameworkMethod, java.lang.Object, org.junit.runners.model.Statement)</outbound>
                <outbound type="feature" confirmed="yes">org.junit.runners.BlockJUnit4ClassRunner.withTestRules(org.junit.runners.model.FrameworkMethod, java.lang.Object, org.junit.runners.model.Statement)</outbound>
                <outbound type="class" confirmed="yes">org.junit.runners.model.FrameworkMethod</outbound>
                <outbound type="class" confirmed="yes">org.junit.runners.model.Statement</outbound>
                <inbound type="feature" confirmed="yes">org.junit.runners.BlockJUnit4ClassRunner.methodBlock(org.junit.runners.model.FrameworkMethod)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.junit.runners.BlockJUnit4ClassRunner.withTestRules(org.junit.runners.model.FrameworkMethod, java.lang.Object, org.junit.runners.model.Statement)</name>
                <outbound type="class" confirmed="no">java.lang.Iterable</outbound>
                <outbound type="class" confirmed="no">java.lang.Object</outbound>
                <outbound type="class" confirmed="no">java.util.List</outbound>
                <outbound type="feature" confirmed="no">java.util.List.isEmpty()</outbound>
                <outbound type="feature" confirmed="yes">org.junit.rules.RunRules.RunRules(org.junit.runners.model.Statement, java.lang.Iterable, org.junit.runner.Description)</outbound>
                <outbound type="class" confirmed="yes">org.junit.runner.Description</outbound>
                <outbound type="feature" confirmed="yes">org.junit.runners.BlockJUnit4ClassRunner.describeChild(org.junit.runners.model.FrameworkMethod)</outbound>
                <outbound type="feature" confirmed="yes">org.junit.runners.BlockJUnit4ClassRunner.getTestRules(java.lang.Object)</outbound>
                <outbound type="class" confirmed="yes">org.junit.runners.model.FrameworkMethod</outbound>
                <outbound type="class" confirmed="yes">org.junit.runners.model.Statement</outbound>
                <inbound type="feature" confirmed="yes">org.junit.runners.BlockJUnit4ClassRunner.withRules(org.junit.runners.model.FrameworkMethod, java.lang.Object, org.junit.runners.model.Statement)</inbound>
            </feature>
        </class>
        <class confirmed="yes">
            <name>org.junit.runners.BlockJUnit4ClassRunner$1</name>
            <outbound type="class" confirmed="yes">org.junit.internal.runners.model.ReflectiveCallable</outbound>
            <feature confirmed="yes">
                <name>org.junit.runners.BlockJUnit4ClassRunner$1.BlockJUnit4ClassRunner$1(org.junit.runners.BlockJUnit4ClassRunner)</name>
                <outbound type="feature" confirmed="yes">org.junit.internal.runners.model.ReflectiveCallable.ReflectiveCallable()</outbound>
                <outbound type="class" confirmed="yes">org.junit.runners.BlockJUnit4ClassRunner</outbound>
                <outbound type="feature" confirmed="yes">org.junit.runners.BlockJUnit4ClassRunner$1.this$0</outbound>
                <inbound type="feature" confirmed="yes">org.junit.runners.BlockJUnit4ClassRunner.methodBlock(org.junit.runners.model.FrameworkMethod)</inbound>
            </feature>
            <feature confirmed="no">
                <name>org.junit.runners.BlockJUnit4ClassRunner$1.run()</name>
                <inbound type="feature" confirmed="yes">org.junit.runners.BlockJUnit4ClassRunner.methodBlock(org.junit.runners.model.FrameworkMethod)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.junit.runners.BlockJUnit4ClassRunner$1.runReflectiveCall()</name>
                <outbound type="class" confirmed="no">java.lang.Object</outbound>
                <outbound type="class" confirmed="no">java.lang.Throwable</outbound>
                <outbound type="class" confirmed="yes">org.junit.runners.BlockJUnit4ClassRunner</outbound>
                <outbound type="feature" confirmed="yes">org.junit.runners.BlockJUnit4ClassRunner$1.this$0</outbound>
                <outbound type="feature" confirmed="yes">org.junit.runners.BlockJUnit4ClassRunner.createTest()</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.junit.runners.BlockJUnit4ClassRunner$1.this$0</name>
                <outbound type="class" confirmed="yes">org.junit.runners.BlockJUnit4ClassRunner</outbound>
                <inbound type="feature" confirmed="yes">org.junit.runners.BlockJUnit4ClassRunner$1.BlockJUnit4ClassRunner$1(org.junit.runners.BlockJUnit4ClassRunner)</inbound>
                <inbound type="feature" confirmed="yes">org.junit.runners.BlockJUnit4ClassRunner$1.runReflectiveCall()</inbound>
            </feature>
        </class>
        <class confirmed="yes">
            <name>org.junit.runners.JUnit4</name>
            <outbound type="class" confirmed="yes">org.junit.runners.BlockJUnit4ClassRunner</outbound>
            <feature confirmed="yes">
                <name>org.junit.runners.JUnit4.JUnit4(java.lang.Class)</name>
                <outbound type="class" confirmed="no">java.lang.Class</outbound>
                <outbound type="feature" confirmed="yes">org.junit.runners.BlockJUnit4ClassRunner.BlockJUnit4ClassRunner(java.lang.Class)</outbound>
                <outbound type="class" confirmed="yes">org.junit.runners.model.InitializationError</outbound>
            </feature>
        </class>
        <class confirmed="yes">
            <name>org.junit.runners.Parameterized</name>
            <outbound type="class" confirmed="yes">org.junit.runners.Suite</outbound>
            <inbound type="feature" confirmed="yes">org.junit.runners.Parameterized$TestClassRunnerForParameters.Parameterized$TestClassRunnerForParameters(org.junit.runners.Parameterized, java.lang.Class, java.util.List, int)</inbound>
            <inbound type="feature" confirmed="yes">org.junit.runners.Parameterized$TestClassRunnerForParameters.computeParams()</inbound>
            <inbound type="feature" confirmed="yes">org.junit.runners.Parameterized$TestClassRunnerForParameters.this$0</inbound>
            <feature confirmed="yes">
                <name>org.junit.runners.Parameterized.Parameterized(java.lang.Class)</name>
                <outbound type="class" confirmed="no">java.lang.Class</outbound>
                <outbound type="class" confirmed="no">java.lang.Object</outbound>
                <outbound type="class" confirmed="no">java.lang.Throwable</outbound>
                <outbound type="class" confirmed="no">java.util.ArrayList</outbound>
                <outbound type="feature" confirmed="no">java.util.ArrayList.ArrayList()</outbound>
                <outbound type="feature" confirmed="no">java.util.ArrayList.add(java.lang.Object)</outbound>
                <outbound type="feature" confirmed="no">java.util.Collections.emptyList()</outbound>
                <outbound type="class" confirmed="no">java.util.List</outbound>
                <outbound type="feature" confirmed="no">java.util.List.size()</outbound>
                <outbound type="feature" confirmed="yes">org.junit.runners.Parameterized$TestClassRunnerForParameters.Parameterized$TestClassRunnerForParameters(org.junit.runners.Parameterized, java.lang.Class, java.util.List, int)</outbound>
                <outbound type="feature" confirmed="yes">org.junit.runners.Parameterized.getParametersList(org.junit.runners.model.TestClass)</outbound>
                <outbound type="feature" confirmed="no">org.junit.runners.Parameterized.getTestClass()</outbound>
                <outbound type="feature" confirmed="yes">org.junit.runners.Parameterized.runners</outbound>
                <outbound type="feature" confirmed="yes">org.junit.runners.Suite.Suite(java.lang.Class, java.util.List)</outbound>
                <outbound type="class" confirmed="yes">org.junit.runners.model.TestClass</outbound>
                <outbound type="feature" confirmed="yes">org.junit.runners.model.TestClass.getJavaClass()</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.junit.runners.Parameterized.access$000(org.junit.runners.Parameterized, org.junit.runners.model.TestClass)</name>
                <outbound type="class" confirmed="no">java.lang.Exception</outbound>
                <outbound type="feature" confirmed="yes">org.junit.runners.Parameterized.getParametersMethod(org.junit.runners.model.TestClass)</outbound>
                <outbound type="class" confirmed="yes">org.junit.runners.model.FrameworkMethod</outbound>
                <outbound type="class" confirmed="yes">org.junit.runners.model.TestClass</outbound>
                <inbound type="feature" confirmed="yes">org.junit.runners.Parameterized$TestClassRunnerForParameters.computeParams()</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.junit.runners.Parameterized.getChildren()</name>
                <outbound type="class" confirmed="no">java.util.ArrayList</outbound>
                <outbound type="class" confirmed="no">java.util.List</outbound>
                <outbound type="feature" confirmed="yes">org.junit.runners.Parameterized.runners</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.junit.runners.Parameterized.getParametersList(org.junit.runners.model.TestClass)</name>
                <outbound type="class" confirmed="no">java.lang.Object</outbound>
                <outbound type="class" confirmed="no">java.lang.Throwable</outbound>
                <outbound type="class" confirmed="no">java.util.List</outbound>
                <outbound type="feature" confirmed="yes">org.junit.runners.Parameterized.getParametersMethod(org.junit.runners.model.TestClass)</outbound>
                <outbound type="class" confirmed="yes">org.junit.runners.model.FrameworkMethod</outbound>
                <outbound type="feature" confirmed="yes">org.junit.runners.model.FrameworkMethod.invokeExplosively(java.lang.Object, java.lang.Object[])</outbound>
                <outbound type="class" confirmed="yes">org.junit.runners.model.TestClass</outbound>
                <inbound type="feature" confirmed="yes">org.junit.runners.Parameterized.Parameterized(java.lang.Class)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.junit.runners.Parameterized.getParametersMethod(org.junit.runners.model.TestClass)</name>
                <outbound type="class" confirmed="no">java.lang.Class</outbound>
                <outbound type="class" confirmed="no">java.lang.Exception</outbound>
                <outbound type="feature" confirmed="no">java.lang.Exception.Exception(java.lang.String)</outbound>
                <outbound type="class" confirmed="no">java.lang.Object</outbound>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="class" confirmed="no">java.lang.StringBuilder</outbound>
                <outbound type="feature" confirmed="no">java.lang.StringBuilder.StringBuilder()</outbound>
                <outbound type="feature" confirmed="no">java.lang.StringBuilder.append(java.lang.String)</outbound>
                <outbound type="feature" confirmed="no">java.lang.StringBuilder.toString()</outbound>
                <outbound type="class" confirmed="no">java.lang.reflect.Method</outbound>
                <outbound type="feature" confirmed="no">java.lang.reflect.Method.getModifiers()</outbound>
                <outbound type="feature" confirmed="no">java.lang.reflect.Modifier.isPublic(int)</outbound>
                <outbound type="feature" confirmed="no">java.lang.reflect.Modifier.isStatic(int)</outbound>
                <outbound type="class" confirmed="no">java.util.Iterator</outbound>
                <outbound type="feature" confirmed="no">java.util.Iterator.hasNext()</outbound>
                <outbound type="feature" confirmed="no">java.util.Iterator.next()</outbound>
                <outbound type="class" confirmed="no">java.util.List</outbound>
                <outbound type="feature" confirmed="no">java.util.List.iterator()</outbound>
                <outbound type="class" confirmed="yes">org.junit.runners.Parameterized$Parameters</outbound>
                <outbound type="class" confirmed="yes">org.junit.runners.model.FrameworkMethod</outbound>
                <outbound type="feature" confirmed="yes">org.junit.runners.model.FrameworkMethod.getMethod()</outbound>
                <outbound type="class" confirmed="yes">org.junit.runners.model.TestClass</outbound>
                <outbound type="feature" confirmed="yes">org.junit.runners.model.TestClass.getAnnotatedMethods(java.lang.Class)</outbound>
                <outbound type="feature" confirmed="yes">org.junit.runners.model.TestClass.getName()</outbound>
                <inbound type="feature" confirmed="yes">org.junit.runners.Parameterized.access$000(org.junit.runners.Parameterized, org.junit.runners.model.TestClass)</inbound>
                <inbound type="feature" confirmed="yes">org.junit.runners.Parameterized.getParametersList(org.junit.runners.model.TestClass)</inbound>
            </feature>
            <feature confirmed="no">
                <name>org.junit.runners.Parameterized.getTestClass()</name>
                <inbound type="feature" confirmed="yes">org.junit.runners.Parameterized.Parameterized(java.lang.Class)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.junit.runners.Parameterized.runners</name>
                <outbound type="class" confirmed="no">java.util.ArrayList</outbound>
                <inbound type="feature" confirmed="yes">org.junit.runners.Parameterized.Parameterized(java.lang.Class)</inbound>
                <inbound type="feature" confirmed="yes">org.junit.runners.Parameterized.getChildren()</inbound>
            </feature>
        </class>
        <class confirmed="yes">
            <name>org.junit.runners.Parameterized$Parameters</name>
            <outbound type="class" confirmed="no">java.lang.Object</outbound>
            <outbound type="class" confirmed="no">java.lang.annotation.Annotation</outbound>
            <inbound type="feature" confirmed="yes">org.junit.runners.Parameterized.getParametersMethod(org.junit.runners.model.TestClass)</inbound>
        </class>
        <class confirmed="yes">
            <name>org.junit.runners.Parameterized$TestClassRunnerForParameters</name>
            <outbound type="class" confirmed="yes">org.junit.runners.BlockJUnit4ClassRunner</outbound>
            <feature confirmed="yes">
                <name>org.junit.runners.Parameterized$TestClassRunnerForParameters.Parameterized$TestClassRunnerForParameters(org.junit.runners.Parameterized, java.lang.Class, java.util.List, int)</name>
                <outbound type="class" confirmed="no">java.lang.Class</outbound>
                <outbound type="class" confirmed="no">java.util.List</outbound>
                <outbound type="feature" confirmed="yes">org.junit.runners.BlockJUnit4ClassRunner.BlockJUnit4ClassRunner(java.lang.Class)</outbound>
                <outbound type="class" confirmed="yes">org.junit.runners.Parameterized</outbound>
                <outbound type="feature" confirmed="yes">org.junit.runners.Parameterized$TestClassRunnerForParameters.fParameterList</outbound>
                <outbound type="feature" confirmed="yes">org.junit.runners.Parameterized$TestClassRunnerForParameters.fParameterSetNumber</outbound>
                <outbound type="feature" confirmed="yes">org.junit.runners.Parameterized$TestClassRunnerForParameters.this$0</outbound>
                <outbound type="class" confirmed="yes">org.junit.runners.model.InitializationError</outbound>
                <inbound type="feature" confirmed="yes">org.junit.runners.Parameterized.Parameterized(java.lang.Class)</inbound>
            </feature>
            <feature confirmed="no">
                <name>org.junit.runners.Parameterized$TestClassRunnerForParameters.childrenInvoker(org.junit.runner.notification.RunNotifier)</name>
                <inbound type="feature" confirmed="yes">org.junit.runners.Parameterized$TestClassRunnerForParameters.classBlock(org.junit.runner.notification.RunNotifier)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.junit.runners.Parameterized$TestClassRunnerForParameters.classBlock(org.junit.runner.notification.RunNotifier)</name>
                <outbound type="class" confirmed="yes">org.junit.runner.notification.RunNotifier</outbound>
                <outbound type="feature" confirmed="no">org.junit.runners.Parameterized$TestClassRunnerForParameters.childrenInvoker(org.junit.runner.notification.RunNotifier)</outbound>
                <outbound type="class" confirmed="yes">org.junit.runners.model.Statement</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.junit.runners.Parameterized$TestClassRunnerForParameters.computeParams()</name>
                <outbound type="class" confirmed="no">java.lang.ClassCastException</outbound>
                <outbound type="class" confirmed="no">java.lang.Exception</outbound>
                <outbound type="feature" confirmed="no">java.lang.Exception.Exception(java.lang.String)</outbound>
                <outbound type="class" confirmed="no">java.lang.Object</outbound>
                <outbound type="class" confirmed="no">java.lang.Object[]</outbound>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="feature" confirmed="no">java.lang.String.format(java.lang.String, java.lang.Object[])</outbound>
                <outbound type="class" confirmed="no">java.util.List</outbound>
                <outbound type="feature" confirmed="no">java.util.List.get(int)</outbound>
                <outbound type="class" confirmed="yes">org.junit.runners.Parameterized</outbound>
                <outbound type="feature" confirmed="yes">org.junit.runners.Parameterized$TestClassRunnerForParameters.fParameterList</outbound>
                <outbound type="feature" confirmed="yes">org.junit.runners.Parameterized$TestClassRunnerForParameters.fParameterSetNumber</outbound>
                <outbound type="feature" confirmed="no">org.junit.runners.Parameterized$TestClassRunnerForParameters.getTestClass()</outbound>
                <outbound type="feature" confirmed="yes">org.junit.runners.Parameterized$TestClassRunnerForParameters.this$0</outbound>
                <outbound type="feature" confirmed="yes">org.junit.runners.Parameterized.access$000(org.junit.runners.Parameterized, org.junit.runners.model.TestClass)</outbound>
                <outbound type="class" confirmed="yes">org.junit.runners.model.FrameworkMethod</outbound>
                <outbound type="feature" confirmed="yes">org.junit.runners.model.FrameworkMethod.getName()</outbound>
                <outbound type="class" confirmed="yes">org.junit.runners.model.TestClass</outbound>
                <outbound type="feature" confirmed="yes">org.junit.runners.model.TestClass.getName()</outbound>
                <inbound type="feature" confirmed="yes">org.junit.runners.Parameterized$TestClassRunnerForParameters.createTest()</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.junit.runners.Parameterized$TestClassRunnerForParameters.createTest()</name>
                <outbound type="class" confirmed="no">java.lang.Exception</outbound>
                <outbound type="class" confirmed="no">java.lang.Object</outbound>
                <outbound type="class" confirmed="no">java.lang.reflect.Constructor</outbound>
                <outbound type="feature" confirmed="no">java.lang.reflect.Constructor.newInstance(java.lang.Object[])</outbound>
                <outbound type="feature" confirmed="yes">org.junit.runners.Parameterized$TestClassRunnerForParameters.computeParams()</outbound>
                <outbound type="feature" confirmed="no">org.junit.runners.Parameterized$TestClassRunnerForParameters.getTestClass()</outbound>
                <outbound type="class" confirmed="yes">org.junit.runners.model.TestClass</outbound>
                <outbound type="feature" confirmed="yes">org.junit.runners.model.TestClass.getOnlyConstructor()</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.junit.runners.Parameterized$TestClassRunnerForParameters.fParameterList</name>
                <outbound type="class" confirmed="no">java.util.List</outbound>
                <inbound type="feature" confirmed="yes">org.junit.runners.Parameterized$TestClassRunnerForParameters.Parameterized$TestClassRunnerForParameters(org.junit.runners.Parameterized, java.lang.Class, java.util.List, int)</inbound>
                <inbound type="feature" confirmed="yes">org.junit.runners.Parameterized$TestClassRunnerForParameters.computeParams()</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.junit.runners.Parameterized$TestClassRunnerForParameters.fParameterSetNumber</name>
                <inbound type="feature" confirmed="yes">org.junit.runners.Parameterized$TestClassRunnerForParameters.Parameterized$TestClassRunnerForParameters(org.junit.runners.Parameterized, java.lang.Class, java.util.List, int)</inbound>
                <inbound type="feature" confirmed="yes">org.junit.runners.Parameterized$TestClassRunnerForParameters.computeParams()</inbound>
                <inbound type="feature" confirmed="yes">org.junit.runners.Parameterized$TestClassRunnerForParameters.getName()</inbound>
                <inbound type="feature" confirmed="yes">org.junit.runners.Parameterized$TestClassRunnerForParameters.testName(org.junit.runners.model.FrameworkMethod)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.junit.runners.Parameterized$TestClassRunnerForParameters.getName()</name>
                <outbound type="class" confirmed="no">java.lang.Integer</outbound>
                <outbound type="feature" confirmed="no">java.lang.Integer.valueOf(int)</outbound>
                <outbound type="class" confirmed="no">java.lang.Object</outbound>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="feature" confirmed="no">java.lang.String.format(java.lang.String, java.lang.Object[])</outbound>
                <outbound type="feature" confirmed="yes">org.junit.runners.Parameterized$TestClassRunnerForParameters.fParameterSetNumber</outbound>
            </feature>
            <feature confirmed="no">
                <name>org.junit.runners.Parameterized$TestClassRunnerForParameters.getTestClass()</name>
                <inbound type="feature" confirmed="yes">org.junit.runners.Parameterized$TestClassRunnerForParameters.computeParams()</inbound>
                <inbound type="feature" confirmed="yes">org.junit.runners.Parameterized$TestClassRunnerForParameters.createTest()</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.junit.runners.Parameterized$TestClassRunnerForParameters.testName(org.junit.runners.model.FrameworkMethod)</name>
                <outbound type="class" confirmed="no">java.lang.Integer</outbound>
                <outbound type="feature" confirmed="no">java.lang.Integer.valueOf(int)</outbound>
                <outbound type="class" confirmed="no">java.lang.Object</outbound>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="feature" confirmed="no">java.lang.String.format(java.lang.String, java.lang.Object[])</outbound>
                <outbound type="feature" confirmed="yes">org.junit.runners.Parameterized$TestClassRunnerForParameters.fParameterSetNumber</outbound>
                <outbound type="class" confirmed="yes">org.junit.runners.model.FrameworkMethod</outbound>
                <outbound type="feature" confirmed="yes">org.junit.runners.model.FrameworkMethod.getName()</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.junit.runners.Parameterized$TestClassRunnerForParameters.this$0</name>
                <outbound type="class" confirmed="yes">org.junit.runners.Parameterized</outbound>
                <inbound type="feature" confirmed="yes">org.junit.runners.Parameterized$TestClassRunnerForParameters.Parameterized$TestClassRunnerForParameters(org.junit.runners.Parameterized, java.lang.Class, java.util.List, int)</inbound>
                <inbound type="feature" confirmed="yes">org.junit.runners.Parameterized$TestClassRunnerForParameters.computeParams()</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.junit.runners.Parameterized$TestClassRunnerForParameters.validateConstructor(java.util.List)</name>
                <outbound type="class" confirmed="no">java.util.List</outbound>
                <outbound type="feature" confirmed="no">org.junit.runners.Parameterized$TestClassRunnerForParameters.validateOnlyOneConstructor(java.util.List)</outbound>
            </feature>
            <feature confirmed="no">
                <name>org.junit.runners.Parameterized$TestClassRunnerForParameters.validateOnlyOneConstructor(java.util.List)</name>
                <inbound type="feature" confirmed="yes">org.junit.runners.Parameterized$TestClassRunnerForParameters.validateConstructor(java.util.List)</inbound>
            </feature>
        </class>
        <class confirmed="yes">
            <name>org.junit.runners.ParentRunner</name>
            <outbound type="class" confirmed="yes">org.junit.runner.Runner</outbound>
            <outbound type="class" confirmed="yes">org.junit.runner.manipulation.Filterable</outbound>
            <outbound type="class" confirmed="yes">org.junit.runner.manipulation.Sortable</outbound>
            <inbound type="feature" confirmed="yes">org.junit.experimental.ParallelComputer.parallelize(org.junit.runner.Runner)</inbound>
            <inbound type="class" confirmed="yes">org.junit.runners.BlockJUnit4ClassRunner</inbound>
            <inbound type="feature" confirmed="yes">org.junit.runners.ParentRunner$1.ParentRunner$1(org.junit.runners.ParentRunner)</inbound>
            <inbound type="feature" confirmed="yes">org.junit.runners.ParentRunner$1.this$0</inbound>
            <inbound type="feature" confirmed="yes">org.junit.runners.ParentRunner$2.ParentRunner$2(org.junit.runners.ParentRunner, org.junit.runner.notification.RunNotifier)</inbound>
            <inbound type="feature" confirmed="yes">org.junit.runners.ParentRunner$2.evaluate()</inbound>
            <inbound type="feature" confirmed="yes">org.junit.runners.ParentRunner$2.this$0</inbound>
            <inbound type="feature" confirmed="yes">org.junit.runners.ParentRunner$3.ParentRunner$3(org.junit.runners.ParentRunner, java.lang.Object, org.junit.runner.notification.RunNotifier)</inbound>
            <inbound type="feature" confirmed="yes">org.junit.runners.ParentRunner$3.run()</inbound>
            <inbound type="feature" confirmed="yes">org.junit.runners.ParentRunner$3.this$0</inbound>
            <inbound type="feature" confirmed="yes">org.junit.runners.ParentRunner$4.ParentRunner$4(org.junit.runners.ParentRunner)</inbound>
            <inbound type="feature" confirmed="yes">org.junit.runners.ParentRunner$4.compare(java.lang.Object, java.lang.Object)</inbound>
            <inbound type="feature" confirmed="yes">org.junit.runners.ParentRunner$4.this$0</inbound>
            <inbound type="class" confirmed="yes">org.junit.runners.Suite</inbound>
            <feature confirmed="yes">
                <name>org.junit.runners.ParentRunner.ParentRunner(java.lang.Class)</name>
                <outbound type="class" confirmed="no">java.lang.Class</outbound>
                <outbound type="class" confirmed="no">java.util.List</outbound>
                <outbound type="feature" confirmed="yes">org.junit.runner.Runner.Runner()</outbound>
                <outbound type="class" confirmed="yes">org.junit.runner.manipulation.Sorter</outbound>
                <outbound type="feature" confirmed="yes">org.junit.runner.manipulation.Sorter.NULL</outbound>
                <outbound type="feature" confirmed="yes">org.junit.runners.ParentRunner$1.ParentRunner$1(org.junit.runners.ParentRunner)</outbound>
                <outbound type="feature" confirmed="yes">org.junit.runners.ParentRunner.fFilteredChildren</outbound>
                <outbound type="feature" confirmed="yes">org.junit.runners.ParentRunner.fScheduler</outbound>
                <outbound type="feature" confirmed="yes">org.junit.runners.ParentRunner.fSorter</outbound>
                <outbound type="feature" confirmed="yes">org.junit.runners.ParentRunner.fTestClass</outbound>
                <outbound type="feature" confirmed="yes">org.junit.runners.ParentRunner.validate()</outbound>
                <outbound type="class" confirmed="yes">org.junit.runners.model.InitializationError</outbound>
                <outbound type="class" confirmed="yes">org.junit.runners.model.RunnerScheduler</outbound>
                <outbound type="class" confirmed="yes">org.junit.runners.model.TestClass</outbound>
                <outbound type="feature" confirmed="yes">org.junit.runners.model.TestClass.TestClass(java.lang.Class)</outbound>
                <inbound type="feature" confirmed="yes">org.junit.runners.BlockJUnit4ClassRunner.BlockJUnit4ClassRunner(java.lang.Class)</inbound>
                <inbound type="feature" confirmed="yes">org.junit.runners.Suite.Suite(java.lang.Class, java.util.List)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.junit.runners.ParentRunner.access$000(org.junit.runners.ParentRunner, org.junit.runner.notification.RunNotifier)</name>
                <outbound type="class" confirmed="yes">org.junit.runner.notification.RunNotifier</outbound>
                <outbound type="feature" confirmed="yes">org.junit.runners.ParentRunner.runChildren(org.junit.runner.notification.RunNotifier)</outbound>
                <inbound type="feature" confirmed="yes">org.junit.runners.ParentRunner$2.evaluate()</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.junit.runners.ParentRunner.access$100(org.junit.runners.ParentRunner)</name>
                <outbound type="class" confirmed="yes">org.junit.runner.manipulation.Sorter</outbound>
                <outbound type="feature" confirmed="yes">org.junit.runners.ParentRunner.fSorter</outbound>
                <inbound type="feature" confirmed="yes">org.junit.runners.ParentRunner$4.compare(java.lang.Object, java.lang.Object)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.junit.runners.ParentRunner.childrenInvoker(org.junit.runner.notification.RunNotifier)</name>
                <outbound type="class" confirmed="yes">org.junit.runner.notification.RunNotifier</outbound>
                <outbound type="feature" confirmed="yes">org.junit.runners.ParentRunner$2.ParentRunner$2(org.junit.runners.ParentRunner, org.junit.runner.notification.RunNotifier)</outbound>
                <outbound type="class" confirmed="yes">org.junit.runners.model.Statement</outbound>
                <inbound type="feature" confirmed="yes">org.junit.runners.ParentRunner.classBlock(org.junit.runner.notification.RunNotifier)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.junit.runners.ParentRunner.classBlock(org.junit.runner.notification.RunNotifier)</name>
                <outbound type="class" confirmed="yes">org.junit.runner.notification.RunNotifier</outbound>
                <outbound type="feature" confirmed="yes">org.junit.runners.ParentRunner.childrenInvoker(org.junit.runner.notification.RunNotifier)</outbound>
                <outbound type="feature" confirmed="yes">org.junit.runners.ParentRunner.withAfterClasses(org.junit.runners.model.Statement)</outbound>
                <outbound type="feature" confirmed="yes">org.junit.runners.ParentRunner.withBeforeClasses(org.junit.runners.model.Statement)</outbound>
                <outbound type="feature" confirmed="yes">org.junit.runners.ParentRunner.withClassRules(org.junit.runners.model.Statement)</outbound>
                <outbound type="class" confirmed="yes">org.junit.runners.model.Statement</outbound>
                <inbound type="feature" confirmed="yes">org.junit.runners.ParentRunner.run(org.junit.runner.notification.RunNotifier)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.junit.runners.ParentRunner.classRules()</name>
                <outbound type="class" confirmed="no">java.lang.Class</outbound>
                <outbound type="class" confirmed="no">java.lang.Object</outbound>
                <outbound type="class" confirmed="no">java.util.List</outbound>
                <outbound type="class" confirmed="yes">org.junit.ClassRule</outbound>
                <outbound type="class" confirmed="yes">org.junit.rules.TestRule</outbound>
                <outbound type="feature" confirmed="yes">org.junit.runners.ParentRunner.fTestClass</outbound>
                <outbound type="class" confirmed="yes">org.junit.runners.model.TestClass</outbound>
                <outbound type="feature" confirmed="yes">org.junit.runners.model.TestClass.getAnnotatedFieldValues(java.lang.Object, java.lang.Class, java.lang.Class)</outbound>
                <inbound type="feature" confirmed="yes">org.junit.runners.ParentRunner.withClassRules(org.junit.runners.model.Statement)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.junit.runners.ParentRunner.collectInitializationErrors(java.util.List)</name>
                <outbound type="class" confirmed="no">java.lang.Class</outbound>
                <outbound type="class" confirmed="no">java.util.List</outbound>
                <outbound type="class" confirmed="yes">org.junit.AfterClass</outbound>
                <outbound type="class" confirmed="yes">org.junit.BeforeClass</outbound>
                <outbound type="feature" confirmed="yes">org.junit.runners.ParentRunner.validateClassRules(java.util.List)</outbound>
                <outbound type="feature" confirmed="yes">org.junit.runners.ParentRunner.validatePublicVoidNoArgMethods(java.lang.Class, boolean, java.util.List)</outbound>
                <inbound type="feature" confirmed="yes">org.junit.runners.BlockJUnit4ClassRunner.collectInitializationErrors(java.util.List)</inbound>
                <inbound type="feature" confirmed="yes">org.junit.runners.ParentRunner.validate()</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.junit.runners.ParentRunner.comparator()</name>
                <outbound type="class" confirmed="no">java.util.Comparator</outbound>
                <outbound type="feature" confirmed="yes">org.junit.runners.ParentRunner$4.ParentRunner$4(org.junit.runners.ParentRunner)</outbound>
                <inbound type="feature" confirmed="yes">org.junit.runners.ParentRunner.sort(org.junit.runner.manipulation.Sorter)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.junit.runners.ParentRunner.describeChild(java.lang.Object)</name>
                <outbound type="class" confirmed="no">java.lang.Object</outbound>
                <outbound type="class" confirmed="yes">org.junit.runner.Description</outbound>
                <inbound type="feature" confirmed="yes">org.junit.runners.ParentRunner$4.compare(java.lang.Object, java.lang.Object)</inbound>
                <inbound type="feature" confirmed="yes">org.junit.runners.ParentRunner.getDescription()</inbound>
                <inbound type="feature" confirmed="yes">org.junit.runners.ParentRunner.shouldRun(org.junit.runner.manipulation.Filter, java.lang.Object)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.junit.runners.ParentRunner.fFilteredChildren</name>
                <outbound type="class" confirmed="no">java.util.List</outbound>
                <inbound type="feature" confirmed="yes">org.junit.runners.ParentRunner.ParentRunner(java.lang.Class)</inbound>
                <inbound type="feature" confirmed="yes">org.junit.runners.ParentRunner.getFilteredChildren()</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.junit.runners.ParentRunner.fScheduler</name>
                <outbound type="class" confirmed="yes">org.junit.runners.model.RunnerScheduler</outbound>
                <inbound type="feature" confirmed="yes">org.junit.runners.ParentRunner.ParentRunner(java.lang.Class)</inbound>
                <inbound type="feature" confirmed="yes">org.junit.runners.ParentRunner.runChildren(org.junit.runner.notification.RunNotifier)</inbound>
                <inbound type="feature" confirmed="yes">org.junit.runners.ParentRunner.setScheduler(org.junit.runners.model.RunnerScheduler)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.junit.runners.ParentRunner.fSorter</name>
                <outbound type="class" confirmed="yes">org.junit.runner.manipulation.Sorter</outbound>
                <inbound type="feature" confirmed="yes">org.junit.runners.ParentRunner.ParentRunner(java.lang.Class)</inbound>
                <inbound type="feature" confirmed="yes">org.junit.runners.ParentRunner.access$100(org.junit.runners.ParentRunner)</inbound>
                <inbound type="feature" confirmed="yes">org.junit.runners.ParentRunner.sort(org.junit.runner.manipulation.Sorter)</inbound>
                <inbound type="feature" confirmed="yes">org.junit.runners.ParentRunner.sortChild(java.lang.Object)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.junit.runners.ParentRunner.fTestClass</name>
                <outbound type="class" confirmed="yes">org.junit.runners.model.TestClass</outbound>
                <inbound type="feature" confirmed="yes">org.junit.runners.ParentRunner.ParentRunner(java.lang.Class)</inbound>
                <inbound type="feature" confirmed="yes">org.junit.runners.ParentRunner.classRules()</inbound>
                <inbound type="feature" confirmed="yes">org.junit.runners.ParentRunner.getDescription()</inbound>
                <inbound type="feature" confirmed="yes">org.junit.runners.ParentRunner.getName()</inbound>
                <inbound type="feature" confirmed="yes">org.junit.runners.ParentRunner.getTestClass()</inbound>
                <inbound type="feature" confirmed="yes">org.junit.runners.ParentRunner.withAfterClasses(org.junit.runners.model.Statement)</inbound>
                <inbound type="feature" confirmed="yes">org.junit.runners.ParentRunner.withBeforeClasses(org.junit.runners.model.Statement)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.junit.runners.ParentRunner.filter(org.junit.runner.manipulation.Filter)</name>
                <outbound type="class" confirmed="no">java.lang.Object</outbound>
                <outbound type="class" confirmed="no">java.util.Iterator</outbound>
                <outbound type="feature" confirmed="no">java.util.Iterator.hasNext()</outbound>
                <outbound type="feature" confirmed="no">java.util.Iterator.next()</outbound>
                <outbound type="feature" confirmed="no">java.util.Iterator.remove()</outbound>
                <outbound type="class" confirmed="no">java.util.List</outbound>
                <outbound type="feature" confirmed="no">java.util.List.isEmpty()</outbound>
                <outbound type="feature" confirmed="no">java.util.List.iterator()</outbound>
                <outbound type="class" confirmed="yes">org.junit.runner.manipulation.Filter</outbound>
                <outbound type="feature" confirmed="yes">org.junit.runner.manipulation.Filter.apply(java.lang.Object)</outbound>
                <outbound type="class" confirmed="yes">org.junit.runner.manipulation.NoTestsRemainException</outbound>
                <outbound type="feature" confirmed="yes">org.junit.runner.manipulation.NoTestsRemainException.NoTestsRemainException()</outbound>
                <outbound type="feature" confirmed="yes">org.junit.runners.ParentRunner.getFilteredChildren()</outbound>
                <outbound type="feature" confirmed="yes">org.junit.runners.ParentRunner.shouldRun(org.junit.runner.manipulation.Filter, java.lang.Object)</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.junit.runners.ParentRunner.getChildren()</name>
                <outbound type="class" confirmed="no">java.util.List</outbound>
                <inbound type="feature" confirmed="yes">org.junit.runners.ParentRunner.getFilteredChildren()</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.junit.runners.ParentRunner.getDescription()</name>
                <outbound type="class" confirmed="no">java.lang.Object</outbound>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="class" confirmed="no">java.lang.annotation.Annotation</outbound>
                <outbound type="class" confirmed="no">java.util.Iterator</outbound>
                <outbound type="feature" confirmed="no">java.util.Iterator.hasNext()</outbound>
                <outbound type="feature" confirmed="no">java.util.Iterator.next()</outbound>
                <outbound type="class" confirmed="no">java.util.List</outbound>
                <outbound type="feature" confirmed="no">java.util.List.iterator()</outbound>
                <outbound type="class" confirmed="yes">org.junit.runner.Description</outbound>
                <outbound type="feature" confirmed="yes">org.junit.runner.Description.addChild(org.junit.runner.Description)</outbound>
                <outbound type="feature" confirmed="yes">org.junit.runner.Description.createSuiteDescription(java.lang.String, java.lang.annotation.Annotation[])</outbound>
                <outbound type="feature" confirmed="yes">org.junit.runners.ParentRunner.describeChild(java.lang.Object)</outbound>
                <outbound type="feature" confirmed="yes">org.junit.runners.ParentRunner.fTestClass</outbound>
                <outbound type="feature" confirmed="yes">org.junit.runners.ParentRunner.getFilteredChildren()</outbound>
                <outbound type="feature" confirmed="yes">org.junit.runners.ParentRunner.getName()</outbound>
                <outbound type="class" confirmed="yes">org.junit.runners.model.TestClass</outbound>
                <outbound type="feature" confirmed="yes">org.junit.runners.model.TestClass.getAnnotations()</outbound>
                <inbound type="feature" confirmed="yes">org.junit.runners.ParentRunner.run(org.junit.runner.notification.RunNotifier)</inbound>
                <inbound type="feature" confirmed="yes">org.junit.runners.ParentRunner.withClassRules(org.junit.runners.model.Statement)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.junit.runners.ParentRunner.getFilteredChildren()</name>
                <outbound type="feature" confirmed="no">java.util.ArrayList.ArrayList(java.util.Collection)</outbound>
                <outbound type="class" confirmed="no">java.util.Collection</outbound>
                <outbound type="class" confirmed="no">java.util.List</outbound>
                <outbound type="feature" confirmed="yes">org.junit.runners.ParentRunner.fFilteredChildren</outbound>
                <outbound type="feature" confirmed="yes">org.junit.runners.ParentRunner.getChildren()</outbound>
                <inbound type="feature" confirmed="yes">org.junit.runners.ParentRunner.filter(org.junit.runner.manipulation.Filter)</inbound>
                <inbound type="feature" confirmed="yes">org.junit.runners.ParentRunner.getDescription()</inbound>
                <inbound type="feature" confirmed="yes">org.junit.runners.ParentRunner.runChildren(org.junit.runner.notification.RunNotifier)</inbound>
                <inbound type="feature" confirmed="yes">org.junit.runners.ParentRunner.sort(org.junit.runner.manipulation.Sorter)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.junit.runners.ParentRunner.getName()</name>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="feature" confirmed="yes">org.junit.runners.ParentRunner.fTestClass</outbound>
                <outbound type="class" confirmed="yes">org.junit.runners.model.TestClass</outbound>
                <outbound type="feature" confirmed="yes">org.junit.runners.model.TestClass.getName()</outbound>
                <inbound type="feature" confirmed="yes">org.junit.runners.ParentRunner.getDescription()</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.junit.runners.ParentRunner.getTestClass()</name>
                <outbound type="feature" confirmed="yes">org.junit.runners.ParentRunner.fTestClass</outbound>
                <outbound type="class" confirmed="yes">org.junit.runners.model.TestClass</outbound>
                <inbound type="feature" confirmed="yes">org.junit.runners.ParentRunner.validateClassRules(java.util.List)</inbound>
                <inbound type="feature" confirmed="yes">org.junit.runners.ParentRunner.validatePublicVoidNoArgMethods(java.lang.Class, boolean, java.util.List)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.junit.runners.ParentRunner.run(org.junit.runner.notification.RunNotifier)</name>
                <outbound type="class" confirmed="no">java.lang.Throwable</outbound>
                <outbound type="class" confirmed="yes">org.junit.internal.AssumptionViolatedException</outbound>
                <outbound type="feature" confirmed="yes">org.junit.internal.runners.model.EachTestNotifier.EachTestNotifier(org.junit.runner.notification.RunNotifier, org.junit.runner.Description)</outbound>
                <outbound type="feature" confirmed="yes">org.junit.internal.runners.model.EachTestNotifier.addFailure(java.lang.Throwable)</outbound>
                <outbound type="feature" confirmed="yes">org.junit.internal.runners.model.EachTestNotifier.fireTestIgnored()</outbound>
                <outbound type="class" confirmed="yes">org.junit.runner.Description</outbound>
                <outbound type="class" confirmed="yes">org.junit.runner.notification.RunNotifier</outbound>
                <outbound type="class" confirmed="yes">org.junit.runner.notification.StoppedByUserException</outbound>
                <outbound type="feature" confirmed="yes">org.junit.runners.ParentRunner.classBlock(org.junit.runner.notification.RunNotifier)</outbound>
                <outbound type="feature" confirmed="yes">org.junit.runners.ParentRunner.getDescription()</outbound>
                <outbound type="class" confirmed="yes">org.junit.runners.model.Statement</outbound>
                <outbound type="feature" confirmed="yes">org.junit.runners.model.Statement.evaluate()</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.junit.runners.ParentRunner.runChild(java.lang.Object, org.junit.runner.notification.RunNotifier)</name>
                <outbound type="class" confirmed="no">java.lang.Object</outbound>
                <outbound type="class" confirmed="yes">org.junit.runner.notification.RunNotifier</outbound>
                <inbound type="feature" confirmed="yes">org.junit.runners.ParentRunner$3.run()</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.junit.runners.ParentRunner.runChildren(org.junit.runner.notification.RunNotifier)</name>
                <outbound type="class" confirmed="no">java.lang.Object</outbound>
                <outbound type="class" confirmed="no">java.lang.Runnable</outbound>
                <outbound type="class" confirmed="no">java.util.Iterator</outbound>
                <outbound type="feature" confirmed="no">java.util.Iterator.hasNext()</outbound>
                <outbound type="feature" confirmed="no">java.util.Iterator.next()</outbound>
                <outbound type="class" confirmed="no">java.util.List</outbound>
                <outbound type="feature" confirmed="no">java.util.List.iterator()</outbound>
                <outbound type="class" confirmed="yes">org.junit.runner.notification.RunNotifier</outbound>
                <outbound type="feature" confirmed="yes">org.junit.runners.ParentRunner$3.ParentRunner$3(org.junit.runners.ParentRunner, java.lang.Object, org.junit.runner.notification.RunNotifier)</outbound>
                <outbound type="feature" confirmed="yes">org.junit.runners.ParentRunner.fScheduler</outbound>
                <outbound type="feature" confirmed="yes">org.junit.runners.ParentRunner.getFilteredChildren()</outbound>
                <outbound type="class" confirmed="yes">org.junit.runners.model.RunnerScheduler</outbound>
                <outbound type="feature" confirmed="yes">org.junit.runners.model.RunnerScheduler.finished()</outbound>
                <outbound type="feature" confirmed="yes">org.junit.runners.model.RunnerScheduler.schedule(java.lang.Runnable)</outbound>
                <inbound type="feature" confirmed="yes">org.junit.runners.ParentRunner.access$000(org.junit.runners.ParentRunner, org.junit.runner.notification.RunNotifier)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.junit.runners.ParentRunner.runLeaf(org.junit.runners.model.Statement, org.junit.runner.Description, org.junit.runner.notification.RunNotifier)</name>
                <outbound type="class" confirmed="no">java.lang.Throwable</outbound>
                <outbound type="class" confirmed="yes">org.junit.internal.AssumptionViolatedException</outbound>
                <outbound type="feature" confirmed="yes">org.junit.internal.runners.model.EachTestNotifier.EachTestNotifier(org.junit.runner.notification.RunNotifier, org.junit.runner.Description)</outbound>
                <outbound type="feature" confirmed="yes">org.junit.internal.runners.model.EachTestNotifier.addFailedAssumption(org.junit.internal.AssumptionViolatedException)</outbound>
                <outbound type="feature" confirmed="yes">org.junit.internal.runners.model.EachTestNotifier.addFailure(java.lang.Throwable)</outbound>
                <outbound type="feature" confirmed="yes">org.junit.internal.runners.model.EachTestNotifier.fireTestFinished()</outbound>
                <outbound type="feature" confirmed="yes">org.junit.internal.runners.model.EachTestNotifier.fireTestStarted()</outbound>
                <outbound type="class" confirmed="yes">org.junit.runner.Description</outbound>
                <outbound type="class" confirmed="yes">org.junit.runner.notification.RunNotifier</outbound>
                <outbound type="class" confirmed="yes">org.junit.runners.model.Statement</outbound>
                <outbound type="feature" confirmed="yes">org.junit.runners.model.Statement.evaluate()</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.junit.runners.ParentRunner.setScheduler(org.junit.runners.model.RunnerScheduler)</name>
                <outbound type="feature" confirmed="yes">org.junit.runners.ParentRunner.fScheduler</outbound>
                <outbound type="class" confirmed="yes">org.junit.runners.model.RunnerScheduler</outbound>
                <inbound type="feature" confirmed="yes">org.junit.experimental.ParallelComputer.parallelize(org.junit.runner.Runner)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.junit.runners.ParentRunner.shouldRun(org.junit.runner.manipulation.Filter, java.lang.Object)</name>
                <outbound type="class" confirmed="no">java.lang.Object</outbound>
                <outbound type="class" confirmed="yes">org.junit.runner.Description</outbound>
                <outbound type="class" confirmed="yes">org.junit.runner.manipulation.Filter</outbound>
                <outbound type="feature" confirmed="yes">org.junit.runner.manipulation.Filter.shouldRun(org.junit.runner.Description)</outbound>
                <outbound type="feature" confirmed="yes">org.junit.runners.ParentRunner.describeChild(java.lang.Object)</outbound>
                <inbound type="feature" confirmed="yes">org.junit.runners.ParentRunner.filter(org.junit.runner.manipulation.Filter)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.junit.runners.ParentRunner.sort(org.junit.runner.manipulation.Sorter)</name>
                <outbound type="class" confirmed="no">java.lang.Object</outbound>
                <outbound type="feature" confirmed="no">java.util.Collections.sort(java.util.List, java.util.Comparator)</outbound>
                <outbound type="class" confirmed="no">java.util.Comparator</outbound>
                <outbound type="class" confirmed="no">java.util.Iterator</outbound>
                <outbound type="feature" confirmed="no">java.util.Iterator.hasNext()</outbound>
                <outbound type="feature" confirmed="no">java.util.Iterator.next()</outbound>
                <outbound type="class" confirmed="no">java.util.List</outbound>
                <outbound type="feature" confirmed="no">java.util.List.iterator()</outbound>
                <outbound type="class" confirmed="yes">org.junit.runner.manipulation.Sorter</outbound>
                <outbound type="feature" confirmed="yes">org.junit.runners.ParentRunner.comparator()</outbound>
                <outbound type="feature" confirmed="yes">org.junit.runners.ParentRunner.fSorter</outbound>
                <outbound type="feature" confirmed="yes">org.junit.runners.ParentRunner.getFilteredChildren()</outbound>
                <outbound type="feature" confirmed="yes">org.junit.runners.ParentRunner.sortChild(java.lang.Object)</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.junit.runners.ParentRunner.sortChild(java.lang.Object)</name>
                <outbound type="class" confirmed="no">java.lang.Object</outbound>
                <outbound type="class" confirmed="yes">org.junit.runner.manipulation.Sorter</outbound>
                <outbound type="feature" confirmed="yes">org.junit.runner.manipulation.Sorter.apply(java.lang.Object)</outbound>
                <outbound type="feature" confirmed="yes">org.junit.runners.ParentRunner.fSorter</outbound>
                <inbound type="feature" confirmed="yes">org.junit.runners.ParentRunner.sort(org.junit.runner.manipulation.Sorter)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.junit.runners.ParentRunner.validate()</name>
                <outbound type="feature" confirmed="no">java.util.ArrayList.ArrayList()</outbound>
                <outbound type="class" confirmed="no">java.util.List</outbound>
                <outbound type="feature" confirmed="no">java.util.List.isEmpty()</outbound>
                <outbound type="feature" confirmed="yes">org.junit.runners.ParentRunner.collectInitializationErrors(java.util.List)</outbound>
                <outbound type="class" confirmed="yes">org.junit.runners.model.InitializationError</outbound>
                <outbound type="feature" confirmed="yes">org.junit.runners.model.InitializationError.InitializationError(java.util.List)</outbound>
                <inbound type="feature" confirmed="yes">org.junit.runners.ParentRunner.ParentRunner(java.lang.Class)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.junit.runners.ParentRunner.validateClassRules(java.util.List)</name>
                <outbound type="class" confirmed="no">java.util.List</outbound>
                <outbound type="class" confirmed="yes">org.junit.internal.runners.rules.RuleFieldValidator</outbound>
                <outbound type="feature" confirmed="yes">org.junit.internal.runners.rules.RuleFieldValidator.CLASS_RULE_VALIDATOR</outbound>
                <outbound type="feature" confirmed="yes">org.junit.internal.runners.rules.RuleFieldValidator.validate(org.junit.runners.model.TestClass, java.util.List)</outbound>
                <outbound type="feature" confirmed="yes">org.junit.runners.ParentRunner.getTestClass()</outbound>
                <outbound type="class" confirmed="yes">org.junit.runners.model.TestClass</outbound>
                <inbound type="feature" confirmed="yes">org.junit.runners.ParentRunner.collectInitializationErrors(java.util.List)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.junit.runners.ParentRunner.validatePublicVoidNoArgMethods(java.lang.Class, boolean, java.util.List)</name>
                <outbound type="class" confirmed="no">java.lang.Class</outbound>
                <outbound type="class" confirmed="no">java.lang.Object</outbound>
                <outbound type="class" confirmed="no">java.util.Iterator</outbound>
                <outbound type="feature" confirmed="no">java.util.Iterator.hasNext()</outbound>
                <outbound type="feature" confirmed="no">java.util.Iterator.next()</outbound>
                <outbound type="class" confirmed="no">java.util.List</outbound>
                <outbound type="feature" confirmed="no">java.util.List.iterator()</outbound>
                <outbound type="feature" confirmed="yes">org.junit.runners.ParentRunner.getTestClass()</outbound>
                <outbound type="class" confirmed="yes">org.junit.runners.model.FrameworkMethod</outbound>
                <outbound type="feature" confirmed="yes">org.junit.runners.model.FrameworkMethod.validatePublicVoidNoArg(boolean, java.util.List)</outbound>
                <outbound type="class" confirmed="yes">org.junit.runners.model.TestClass</outbound>
                <outbound type="feature" confirmed="yes">org.junit.runners.model.TestClass.getAnnotatedMethods(java.lang.Class)</outbound>
                <inbound type="feature" confirmed="yes">org.junit.runners.ParentRunner.collectInitializationErrors(java.util.List)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.junit.runners.ParentRunner.withAfterClasses(org.junit.runners.model.Statement)</name>
                <outbound type="class" confirmed="no">java.lang.Class</outbound>
                <outbound type="class" confirmed="no">java.lang.Object</outbound>
                <outbound type="class" confirmed="no">java.util.List</outbound>
                <outbound type="feature" confirmed="no">java.util.List.isEmpty()</outbound>
                <outbound type="class" confirmed="yes">org.junit.AfterClass</outbound>
                <outbound type="feature" confirmed="yes">org.junit.internal.runners.statements.RunAfters.RunAfters(org.junit.runners.model.Statement, java.util.List, java.lang.Object)</outbound>
                <outbound type="feature" confirmed="yes">org.junit.runners.ParentRunner.fTestClass</outbound>
                <outbound type="class" confirmed="yes">org.junit.runners.model.Statement</outbound>
                <outbound type="class" confirmed="yes">org.junit.runners.model.TestClass</outbound>
                <outbound type="feature" confirmed="yes">org.junit.runners.model.TestClass.getAnnotatedMethods(java.lang.Class)</outbound>
                <inbound type="feature" confirmed="yes">org.junit.runners.ParentRunner.classBlock(org.junit.runner.notification.RunNotifier)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.junit.runners.ParentRunner.withBeforeClasses(org.junit.runners.model.Statement)</name>
                <outbound type="class" confirmed="no">java.lang.Class</outbound>
                <outbound type="class" confirmed="no">java.lang.Object</outbound>
                <outbound type="class" confirmed="no">java.util.List</outbound>
                <outbound type="feature" confirmed="no">java.util.List.isEmpty()</outbound>
                <outbound type="class" confirmed="yes">org.junit.BeforeClass</outbound>
                <outbound type="feature" confirmed="yes">org.junit.internal.runners.statements.RunBefores.RunBefores(org.junit.runners.model.Statement, java.util.List, java.lang.Object)</outbound>
                <outbound type="feature" confirmed="yes">org.junit.runners.ParentRunner.fTestClass</outbound>
                <outbound type="class" confirmed="yes">org.junit.runners.model.Statement</outbound>
                <outbound type="class" confirmed="yes">org.junit.runners.model.TestClass</outbound>
                <outbound type="feature" confirmed="yes">org.junit.runners.model.TestClass.getAnnotatedMethods(java.lang.Class)</outbound>
                <inbound type="feature" confirmed="yes">org.junit.runners.ParentRunner.classBlock(org.junit.runner.notification.RunNotifier)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.junit.runners.ParentRunner.withClassRules(org.junit.runners.model.Statement)</name>
                <outbound type="class" confirmed="no">java.lang.Iterable</outbound>
                <outbound type="class" confirmed="no">java.util.List</outbound>
                <outbound type="feature" confirmed="no">java.util.List.isEmpty()</outbound>
                <outbound type="feature" confirmed="yes">org.junit.rules.RunRules.RunRules(org.junit.runners.model.Statement, java.lang.Iterable, org.junit.runner.Description)</outbound>
                <outbound type="class" confirmed="yes">org.junit.runner.Description</outbound>
                <outbound type="feature" confirmed="yes">org.junit.runners.ParentRunner.classRules()</outbound>
                <outbound type="feature" confirmed="yes">org.junit.runners.ParentRunner.getDescription()</outbound>
                <outbound type="class" confirmed="yes">org.junit.runners.model.Statement</outbound>
                <inbound type="feature" confirmed="yes">org.junit.runners.ParentRunner.classBlock(org.junit.runner.notification.RunNotifier)</inbound>
            </feature>
        </class>
        <class confirmed="yes">
            <name>org.junit.runners.ParentRunner$1</name>
            <outbound type="class" confirmed="no">java.lang.Object</outbound>
            <outbound type="class" confirmed="yes">org.junit.runners.model.RunnerScheduler</outbound>
            <feature confirmed="yes">
                <name>org.junit.runners.ParentRunner$1.ParentRunner$1(org.junit.runners.ParentRunner)</name>
                <outbound type="feature" confirmed="no">java.lang.Object.Object()</outbound>
                <outbound type="class" confirmed="yes">org.junit.runners.ParentRunner</outbound>
                <outbound type="feature" confirmed="yes">org.junit.runners.ParentRunner$1.this$0</outbound>
                <inbound type="feature" confirmed="yes">org.junit.runners.ParentRunner.ParentRunner(java.lang.Class)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.junit.runners.ParentRunner$1.finished()</name>
            </feature>
            <feature confirmed="yes">
                <name>org.junit.runners.ParentRunner$1.schedule(java.lang.Runnable)</name>
                <outbound type="class" confirmed="no">java.lang.Runnable</outbound>
                <outbound type="feature" confirmed="no">java.lang.Runnable.run()</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.junit.runners.ParentRunner$1.this$0</name>
                <outbound type="class" confirmed="yes">org.junit.runners.ParentRunner</outbound>
                <inbound type="feature" confirmed="yes">org.junit.runners.ParentRunner$1.ParentRunner$1(org.junit.runners.ParentRunner)</inbound>
            </feature>
        </class>
        <class confirmed="yes">
            <name>org.junit.runners.ParentRunner$2</name>
            <outbound type="class" confirmed="yes">org.junit.runners.model.Statement</outbound>
            <feature confirmed="yes">
                <name>org.junit.runners.ParentRunner$2.ParentRunner$2(org.junit.runners.ParentRunner, org.junit.runner.notification.RunNotifier)</name>
                <outbound type="class" confirmed="yes">org.junit.runner.notification.RunNotifier</outbound>
                <outbound type="class" confirmed="yes">org.junit.runners.ParentRunner</outbound>
                <outbound type="feature" confirmed="yes">org.junit.runners.ParentRunner$2.this$0</outbound>
                <outbound type="feature" confirmed="yes">org.junit.runners.ParentRunner$2.val$notifier</outbound>
                <outbound type="feature" confirmed="yes">org.junit.runners.model.Statement.Statement()</outbound>
                <inbound type="feature" confirmed="yes">org.junit.runners.ParentRunner.childrenInvoker(org.junit.runner.notification.RunNotifier)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.junit.runners.ParentRunner$2.evaluate()</name>
                <outbound type="class" confirmed="yes">org.junit.runner.notification.RunNotifier</outbound>
                <outbound type="class" confirmed="yes">org.junit.runners.ParentRunner</outbound>
                <outbound type="feature" confirmed="yes">org.junit.runners.ParentRunner$2.this$0</outbound>
                <outbound type="feature" confirmed="yes">org.junit.runners.ParentRunner$2.val$notifier</outbound>
                <outbound type="feature" confirmed="yes">org.junit.runners.ParentRunner.access$000(org.junit.runners.ParentRunner, org.junit.runner.notification.RunNotifier)</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.junit.runners.ParentRunner$2.this$0</name>
                <outbound type="class" confirmed="yes">org.junit.runners.ParentRunner</outbound>
                <inbound type="feature" confirmed="yes">org.junit.runners.ParentRunner$2.ParentRunner$2(org.junit.runners.ParentRunner, org.junit.runner.notification.RunNotifier)</inbound>
                <inbound type="feature" confirmed="yes">org.junit.runners.ParentRunner$2.evaluate()</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.junit.runners.ParentRunner$2.val$notifier</name>
                <outbound type="class" confirmed="yes">org.junit.runner.notification.RunNotifier</outbound>
                <inbound type="feature" confirmed="yes">org.junit.runners.ParentRunner$2.ParentRunner$2(org.junit.runners.ParentRunner, org.junit.runner.notification.RunNotifier)</inbound>
                <inbound type="feature" confirmed="yes">org.junit.runners.ParentRunner$2.evaluate()</inbound>
            </feature>
        </class>
        <class confirmed="yes">
            <name>org.junit.runners.ParentRunner$3</name>
            <outbound type="class" confirmed="no">java.lang.Object</outbound>
            <outbound type="class" confirmed="no">java.lang.Runnable</outbound>
            <feature confirmed="yes">
                <name>org.junit.runners.ParentRunner$3.ParentRunner$3(org.junit.runners.ParentRunner, java.lang.Object, org.junit.runner.notification.RunNotifier)</name>
                <outbound type="class" confirmed="no">java.lang.Object</outbound>
                <outbound type="feature" confirmed="no">java.lang.Object.Object()</outbound>
                <outbound type="class" confirmed="yes">org.junit.runner.notification.RunNotifier</outbound>
                <outbound type="class" confirmed="yes">org.junit.runners.ParentRunner</outbound>
                <outbound type="feature" confirmed="yes">org.junit.runners.ParentRunner$3.this$0</outbound>
                <outbound type="feature" confirmed="yes">org.junit.runners.ParentRunner$3.val$each</outbound>
                <outbound type="feature" confirmed="yes">org.junit.runners.ParentRunner$3.val$notifier</outbound>
                <inbound type="feature" confirmed="yes">org.junit.runners.ParentRunner.runChildren(org.junit.runner.notification.RunNotifier)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.junit.runners.ParentRunner$3.run()</name>
                <outbound type="class" confirmed="no">java.lang.Object</outbound>
                <outbound type="class" confirmed="yes">org.junit.runner.notification.RunNotifier</outbound>
                <outbound type="class" confirmed="yes">org.junit.runners.ParentRunner</outbound>
                <outbound type="feature" confirmed="yes">org.junit.runners.ParentRunner$3.this$0</outbound>
                <outbound type="feature" confirmed="yes">org.junit.runners.ParentRunner$3.val$each</outbound>
                <outbound type="feature" confirmed="yes">org.junit.runners.ParentRunner$3.val$notifier</outbound>
                <outbound type="feature" confirmed="yes">org.junit.runners.ParentRunner.runChild(java.lang.Object, org.junit.runner.notification.RunNotifier)</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.junit.runners.ParentRunner$3.this$0</name>
                <outbound type="class" confirmed="yes">org.junit.runners.ParentRunner</outbound>
                <inbound type="feature" confirmed="yes">org.junit.runners.ParentRunner$3.ParentRunner$3(org.junit.runners.ParentRunner, java.lang.Object, org.junit.runner.notification.RunNotifier)</inbound>
                <inbound type="feature" confirmed="yes">org.junit.runners.ParentRunner$3.run()</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.junit.runners.ParentRunner$3.val$each</name>
                <outbound type="class" confirmed="no">java.lang.Object</outbound>
                <inbound type="feature" confirmed="yes">org.junit.runners.ParentRunner$3.ParentRunner$3(org.junit.runners.ParentRunner, java.lang.Object, org.junit.runner.notification.RunNotifier)</inbound>
                <inbound type="feature" confirmed="yes">org.junit.runners.ParentRunner$3.run()</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.junit.runners.ParentRunner$3.val$notifier</name>
                <outbound type="class" confirmed="yes">org.junit.runner.notification.RunNotifier</outbound>
                <inbound type="feature" confirmed="yes">org.junit.runners.ParentRunner$3.ParentRunner$3(org.junit.runners.ParentRunner, java.lang.Object, org.junit.runner.notification.RunNotifier)</inbound>
                <inbound type="feature" confirmed="yes">org.junit.runners.ParentRunner$3.run()</inbound>
            </feature>
        </class>
        <class confirmed="yes">
            <name>org.junit.runners.ParentRunner$4</name>
            <outbound type="class" confirmed="no">java.lang.Object</outbound>
            <outbound type="class" confirmed="no">java.util.Comparator</outbound>
            <feature confirmed="yes">
                <name>org.junit.runners.ParentRunner$4.ParentRunner$4(org.junit.runners.ParentRunner)</name>
                <outbound type="feature" confirmed="no">java.lang.Object.Object()</outbound>
                <outbound type="class" confirmed="yes">org.junit.runners.ParentRunner</outbound>
                <outbound type="feature" confirmed="yes">org.junit.runners.ParentRunner$4.this$0</outbound>
                <inbound type="feature" confirmed="yes">org.junit.runners.ParentRunner.comparator()</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.junit.runners.ParentRunner$4.compare(java.lang.Object, java.lang.Object)</name>
                <outbound type="class" confirmed="no">java.lang.Object</outbound>
                <outbound type="class" confirmed="yes">org.junit.runner.Description</outbound>
                <outbound type="class" confirmed="yes">org.junit.runner.manipulation.Sorter</outbound>
                <outbound type="feature" confirmed="yes">org.junit.runner.manipulation.Sorter.compare(org.junit.runner.Description, org.junit.runner.Description)</outbound>
                <outbound type="class" confirmed="yes">org.junit.runners.ParentRunner</outbound>
                <outbound type="feature" confirmed="yes">org.junit.runners.ParentRunner$4.this$0</outbound>
                <outbound type="feature" confirmed="yes">org.junit.runners.ParentRunner.access$100(org.junit.runners.ParentRunner)</outbound>
                <outbound type="feature" confirmed="yes">org.junit.runners.ParentRunner.describeChild(java.lang.Object)</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.junit.runners.ParentRunner$4.this$0</name>
                <outbound type="class" confirmed="yes">org.junit.runners.ParentRunner</outbound>
                <inbound type="feature" confirmed="yes">org.junit.runners.ParentRunner$4.ParentRunner$4(org.junit.runners.ParentRunner)</inbound>
                <inbound type="feature" confirmed="yes">org.junit.runners.ParentRunner$4.compare(java.lang.Object, java.lang.Object)</inbound>
            </feature>
        </class>
        <class confirmed="yes">
            <name>org.junit.runners.Suite</name>
            <outbound type="class" confirmed="yes">org.junit.runners.ParentRunner</outbound>
            <inbound type="class" confirmed="yes">org.junit.experimental.categories.Categories</inbound>
            <inbound type="class" confirmed="yes">org.junit.experimental.max.MaxCore$1$1</inbound>
            <inbound type="class" confirmed="yes">org.junit.experimental.runners.Enclosed</inbound>
            <inbound type="class" confirmed="yes">org.junit.runners.Parameterized</inbound>
            <feature confirmed="yes">
                <name>org.junit.runners.Suite.Suite(java.lang.Class, java.lang.Class[])</name>
                <outbound type="class" confirmed="no">java.lang.Class</outbound>
                <outbound type="feature" confirmed="yes">org.junit.internal.builders.AllDefaultPossibilitiesBuilder.AllDefaultPossibilitiesBuilder(boolean)</outbound>
                <outbound type="feature" confirmed="yes">org.junit.runners.Suite.Suite(org.junit.runners.model.RunnerBuilder, java.lang.Class, java.lang.Class[])</outbound>
                <outbound type="class" confirmed="yes">org.junit.runners.model.InitializationError</outbound>
                <outbound type="class" confirmed="yes">org.junit.runners.model.RunnerBuilder</outbound>
                <inbound type="feature" confirmed="yes">org.junit.runners.Suite.emptySuite()</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.junit.runners.Suite.Suite(java.lang.Class, java.util.List)</name>
                <outbound type="class" confirmed="no">java.lang.Class</outbound>
                <outbound type="class" confirmed="no">java.util.List</outbound>
                <outbound type="feature" confirmed="yes">org.junit.runners.ParentRunner.ParentRunner(java.lang.Class)</outbound>
                <outbound type="feature" confirmed="yes">org.junit.runners.Suite.fRunners</outbound>
                <outbound type="class" confirmed="yes">org.junit.runners.model.InitializationError</outbound>
                <inbound type="feature" confirmed="yes">org.junit.experimental.max.MaxCore$1$1.MaxCore$1$1(org.junit.experimental.max.MaxCore$1, java.lang.Class, java.util.List)</inbound>
                <inbound type="feature" confirmed="yes">org.junit.runners.Parameterized.Parameterized(java.lang.Class)</inbound>
                <inbound type="feature" confirmed="yes">org.junit.runners.Suite.Suite(org.junit.runners.model.RunnerBuilder, java.lang.Class, java.lang.Class[])</inbound>
                <inbound type="feature" confirmed="yes">org.junit.runners.Suite.Suite(org.junit.runners.model.RunnerBuilder, java.lang.Class[])</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.junit.runners.Suite.Suite(java.lang.Class, org.junit.runners.model.RunnerBuilder)</name>
                <outbound type="class" confirmed="no">java.lang.Class</outbound>
                <outbound type="feature" confirmed="yes">org.junit.runners.Suite.Suite(org.junit.runners.model.RunnerBuilder, java.lang.Class, java.lang.Class[])</outbound>
                <outbound type="feature" confirmed="yes">org.junit.runners.Suite.getAnnotatedClasses(java.lang.Class)</outbound>
                <outbound type="class" confirmed="yes">org.junit.runners.model.InitializationError</outbound>
                <outbound type="class" confirmed="yes">org.junit.runners.model.RunnerBuilder</outbound>
                <inbound type="feature" confirmed="yes">org.junit.experimental.categories.Categories.Categories(java.lang.Class, org.junit.runners.model.RunnerBuilder)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.junit.runners.Suite.Suite(org.junit.runners.model.RunnerBuilder, java.lang.Class, java.lang.Class[])</name>
                <outbound type="class" confirmed="no">java.lang.Class</outbound>
                <outbound type="class" confirmed="no">java.util.List</outbound>
                <outbound type="feature" confirmed="yes">org.junit.runners.Suite.Suite(java.lang.Class, java.util.List)</outbound>
                <outbound type="class" confirmed="yes">org.junit.runners.model.InitializationError</outbound>
                <outbound type="class" confirmed="yes">org.junit.runners.model.RunnerBuilder</outbound>
                <outbound type="feature" confirmed="yes">org.junit.runners.model.RunnerBuilder.runners(java.lang.Class, java.lang.Class[])</outbound>
                <inbound type="feature" confirmed="yes">org.junit.experimental.runners.Enclosed.Enclosed(java.lang.Class, org.junit.runners.model.RunnerBuilder)</inbound>
                <inbound type="feature" confirmed="yes">org.junit.runners.Suite.Suite(java.lang.Class, java.lang.Class[])</inbound>
                <inbound type="feature" confirmed="yes">org.junit.runners.Suite.Suite(java.lang.Class, org.junit.runners.model.RunnerBuilder)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.junit.runners.Suite.Suite(org.junit.runners.model.RunnerBuilder, java.lang.Class[])</name>
                <outbound type="class" confirmed="no">java.lang.Class</outbound>
                <outbound type="class" confirmed="no">java.util.List</outbound>
                <outbound type="feature" confirmed="yes">org.junit.runners.Suite.Suite(java.lang.Class, java.util.List)</outbound>
                <outbound type="class" confirmed="yes">org.junit.runners.model.InitializationError</outbound>
                <outbound type="class" confirmed="yes">org.junit.runners.model.RunnerBuilder</outbound>
                <outbound type="feature" confirmed="yes">org.junit.runners.model.RunnerBuilder.runners(java.lang.Class, java.lang.Class[])</outbound>
                <inbound type="feature" confirmed="yes">org.junit.runner.Computer.getSuite(org.junit.runners.model.RunnerBuilder, java.lang.Class[])</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.junit.runners.Suite.describeChild(java.lang.Object)</name>
                <outbound type="class" confirmed="no">java.lang.Object</outbound>
                <outbound type="class" confirmed="yes">org.junit.runner.Description</outbound>
                <outbound type="class" confirmed="yes">org.junit.runner.Runner</outbound>
                <outbound type="feature" confirmed="yes">org.junit.runners.Suite.describeChild(org.junit.runner.Runner)</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.junit.runners.Suite.describeChild(org.junit.runner.Runner)</name>
                <outbound type="class" confirmed="yes">org.junit.runner.Description</outbound>
                <outbound type="class" confirmed="yes">org.junit.runner.Runner</outbound>
                <outbound type="feature" confirmed="yes">org.junit.runner.Runner.getDescription()</outbound>
                <inbound type="feature" confirmed="yes">org.junit.runners.Suite.describeChild(java.lang.Object)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.junit.runners.Suite.emptySuite()</name>
                <outbound type="class" confirmed="no">java.lang.Class</outbound>
                <outbound type="feature" confirmed="no">java.lang.RuntimeException.RuntimeException(java.lang.String)</outbound>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="class" confirmed="yes">org.junit.runner.Runner</outbound>
                <outbound type="feature" confirmed="yes">org.junit.runners.Suite.Suite(java.lang.Class, java.lang.Class[])</outbound>
                <outbound type="class" confirmed="yes">org.junit.runners.model.InitializationError</outbound>
                <inbound type="feature" confirmed="yes">org.junit.experimental.max.MaxCore.buildRunner(org.junit.runner.Description)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.junit.runners.Suite.fRunners</name>
                <outbound type="class" confirmed="no">java.util.List</outbound>
                <inbound type="feature" confirmed="yes">org.junit.runners.Suite.Suite(java.lang.Class, java.util.List)</inbound>
                <inbound type="feature" confirmed="yes">org.junit.runners.Suite.getChildren()</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.junit.runners.Suite.getAnnotatedClasses(java.lang.Class)</name>
                <outbound type="class" confirmed="no">java.lang.Class</outbound>
                <outbound type="feature" confirmed="no">java.lang.Class.getAnnotation(java.lang.Class)</outbound>
                <outbound type="feature" confirmed="no">java.lang.Class.getName()</outbound>
                <outbound type="class" confirmed="no">java.lang.Object</outbound>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="feature" confirmed="no">java.lang.String.format(java.lang.String, java.lang.Object[])</outbound>
                <outbound type="class" confirmed="no">java.lang.annotation.Annotation</outbound>
                <outbound type="class" confirmed="yes">org.junit.runners.Suite$SuiteClasses</outbound>
                <outbound type="feature" confirmed="yes">org.junit.runners.Suite$SuiteClasses.value()</outbound>
                <outbound type="class" confirmed="yes">org.junit.runners.model.InitializationError</outbound>
                <outbound type="feature" confirmed="yes">org.junit.runners.model.InitializationError.InitializationError(java.lang.String)</outbound>
                <inbound type="feature" confirmed="yes">org.junit.runners.Suite.Suite(java.lang.Class, org.junit.runners.model.RunnerBuilder)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.junit.runners.Suite.getChildren()</name>
                <outbound type="class" confirmed="no">java.util.List</outbound>
                <outbound type="feature" confirmed="yes">org.junit.runners.Suite.fRunners</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.junit.runners.Suite.runChild(java.lang.Object, org.junit.runner.notification.RunNotifier)</name>
                <outbound type="class" confirmed="no">java.lang.Object</outbound>
                <outbound type="class" confirmed="yes">org.junit.runner.Runner</outbound>
                <outbound type="class" confirmed="yes">org.junit.runner.notification.RunNotifier</outbound>
                <outbound type="feature" confirmed="yes">org.junit.runners.Suite.runChild(org.junit.runner.Runner, org.junit.runner.notification.RunNotifier)</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.junit.runners.Suite.runChild(org.junit.runner.Runner, org.junit.runner.notification.RunNotifier)</name>
                <outbound type="class" confirmed="yes">org.junit.runner.Runner</outbound>
                <outbound type="feature" confirmed="yes">org.junit.runner.Runner.run(org.junit.runner.notification.RunNotifier)</outbound>
                <outbound type="class" confirmed="yes">org.junit.runner.notification.RunNotifier</outbound>
                <inbound type="feature" confirmed="yes">org.junit.runners.Suite.runChild(java.lang.Object, org.junit.runner.notification.RunNotifier)</inbound>
            </feature>
        </class>
        <class confirmed="yes">
            <name>org.junit.runners.Suite$SuiteClasses</name>
            <outbound type="class" confirmed="no">java.lang.Object</outbound>
            <outbound type="class" confirmed="no">java.lang.annotation.Annotation</outbound>
            <inbound type="feature" confirmed="yes">org.junit.runners.Suite.getAnnotatedClasses(java.lang.Class)</inbound>
            <feature confirmed="yes">
                <name>org.junit.runners.Suite$SuiteClasses.value()</name>
                <outbound type="class" confirmed="no">java.lang.Class</outbound>
                <inbound type="feature" confirmed="yes">org.junit.runners.Suite.getAnnotatedClasses(java.lang.Class)</inbound>
            </feature>
        </class>
        <class confirmed="yes">
            <name>org.junit.runners.package-info</name>
            <outbound type="class" confirmed="no">java.lang.Object</outbound>
        </class>
    </package>
    <package confirmed="yes">
        <name>org.junit.runners.model</name>
        <class confirmed="yes">
            <name>org.junit.runners.model.FrameworkField</name>
            <outbound type="class" confirmed="yes">org.junit.runners.model.FrameworkMember</outbound>
            <inbound type="feature" confirmed="yes">org.junit.internal.runners.rules.RuleFieldValidator.addError(java.util.List, org.junit.runners.model.FrameworkField, java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">org.junit.internal.runners.rules.RuleFieldValidator.isMethodRule(org.junit.runners.model.FrameworkField)</inbound>
            <inbound type="feature" confirmed="yes">org.junit.internal.runners.rules.RuleFieldValidator.isTestRule(org.junit.runners.model.FrameworkField)</inbound>
            <inbound type="feature" confirmed="yes">org.junit.internal.runners.rules.RuleFieldValidator.optionallyValidateStatic(org.junit.runners.model.FrameworkField, java.util.List)</inbound>
            <inbound type="feature" confirmed="yes">org.junit.internal.runners.rules.RuleFieldValidator.validate(org.junit.runners.model.TestClass, java.util.List)</inbound>
            <inbound type="feature" confirmed="yes">org.junit.internal.runners.rules.RuleFieldValidator.validateField(org.junit.runners.model.FrameworkField, java.util.List)</inbound>
            <inbound type="feature" confirmed="yes">org.junit.internal.runners.rules.RuleFieldValidator.validatePublic(org.junit.runners.model.FrameworkField, java.util.List)</inbound>
            <inbound type="feature" confirmed="yes">org.junit.internal.runners.rules.RuleFieldValidator.validateTestRuleOrMethodRule(org.junit.runners.model.FrameworkField, java.util.List)</inbound>
            <inbound type="feature" confirmed="yes">org.junit.runners.model.TestClass.getAnnotatedFieldValues(java.lang.Object, java.lang.Class, java.lang.Class)</inbound>
            <feature confirmed="yes">
                <name>org.junit.runners.model.FrameworkField.FrameworkField(java.lang.reflect.Field)</name>
                <outbound type="class" confirmed="no">java.lang.reflect.Field</outbound>
                <outbound type="feature" confirmed="yes">org.junit.runners.model.FrameworkField.fField</outbound>
                <outbound type="feature" confirmed="yes">org.junit.runners.model.FrameworkMember.FrameworkMember()</outbound>
                <inbound type="feature" confirmed="yes">org.junit.runners.model.TestClass.TestClass(java.lang.Class)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.junit.runners.model.FrameworkField.fField</name>
                <outbound type="class" confirmed="no">java.lang.reflect.Field</outbound>
                <inbound type="feature" confirmed="yes">org.junit.runners.model.FrameworkField.FrameworkField(java.lang.reflect.Field)</inbound>
                <inbound type="feature" confirmed="yes">org.junit.runners.model.FrameworkField.get(java.lang.Object)</inbound>
                <inbound type="feature" confirmed="yes">org.junit.runners.model.FrameworkField.getAnnotations()</inbound>
                <inbound type="feature" confirmed="yes">org.junit.runners.model.FrameworkField.getField()</inbound>
                <inbound type="feature" confirmed="yes">org.junit.runners.model.FrameworkField.getType()</inbound>
                <inbound type="feature" confirmed="yes">org.junit.runners.model.FrameworkField.isPublic()</inbound>
                <inbound type="feature" confirmed="yes">org.junit.runners.model.FrameworkField.isStatic()</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.junit.runners.model.FrameworkField.get(java.lang.Object)</name>
                <outbound type="class" confirmed="no">java.lang.IllegalAccessException</outbound>
                <outbound type="class" confirmed="no">java.lang.IllegalArgumentException</outbound>
                <outbound type="class" confirmed="no">java.lang.Object</outbound>
                <outbound type="class" confirmed="no">java.lang.reflect.Field</outbound>
                <outbound type="feature" confirmed="no">java.lang.reflect.Field.get(java.lang.Object)</outbound>
                <outbound type="feature" confirmed="yes">org.junit.runners.model.FrameworkField.fField</outbound>
                <inbound type="feature" confirmed="yes">org.junit.runners.model.TestClass.getAnnotatedFieldValues(java.lang.Object, java.lang.Class, java.lang.Class)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.junit.runners.model.FrameworkField.getAnnotations()</name>
                <outbound type="class" confirmed="no">java.lang.annotation.Annotation</outbound>
                <outbound type="class" confirmed="no">java.lang.reflect.Field</outbound>
                <outbound type="feature" confirmed="no">java.lang.reflect.Field.getAnnotations()</outbound>
                <outbound type="feature" confirmed="yes">org.junit.runners.model.FrameworkField.fField</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.junit.runners.model.FrameworkField.getField()</name>
                <outbound type="class" confirmed="no">java.lang.reflect.Field</outbound>
                <outbound type="feature" confirmed="yes">org.junit.runners.model.FrameworkField.fField</outbound>
                <inbound type="feature" confirmed="yes">org.junit.runners.model.FrameworkField.getName()</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.junit.runners.model.FrameworkField.getName()</name>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="class" confirmed="no">java.lang.reflect.Field</outbound>
                <outbound type="feature" confirmed="no">java.lang.reflect.Field.getName()</outbound>
                <outbound type="feature" confirmed="yes">org.junit.runners.model.FrameworkField.getField()</outbound>
                <inbound type="feature" confirmed="yes">org.junit.internal.runners.rules.RuleFieldValidator.addError(java.util.List, org.junit.runners.model.FrameworkField, java.lang.String)</inbound>
                <inbound type="feature" confirmed="yes">org.junit.runners.model.FrameworkField.isShadowedBy(org.junit.runners.model.FrameworkField)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.junit.runners.model.FrameworkField.getType()</name>
                <outbound type="class" confirmed="no">java.lang.Class</outbound>
                <outbound type="class" confirmed="no">java.lang.reflect.Field</outbound>
                <outbound type="feature" confirmed="no">java.lang.reflect.Field.getType()</outbound>
                <outbound type="feature" confirmed="yes">org.junit.runners.model.FrameworkField.fField</outbound>
                <inbound type="feature" confirmed="yes">org.junit.internal.runners.rules.RuleFieldValidator.isMethodRule(org.junit.runners.model.FrameworkField)</inbound>
                <inbound type="feature" confirmed="yes">org.junit.internal.runners.rules.RuleFieldValidator.isTestRule(org.junit.runners.model.FrameworkField)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.junit.runners.model.FrameworkField.isPublic()</name>
                <outbound type="class" confirmed="no">java.lang.reflect.Field</outbound>
                <outbound type="feature" confirmed="no">java.lang.reflect.Field.getModifiers()</outbound>
                <outbound type="feature" confirmed="no">java.lang.reflect.Modifier.isPublic(int)</outbound>
                <outbound type="feature" confirmed="yes">org.junit.runners.model.FrameworkField.fField</outbound>
                <inbound type="feature" confirmed="yes">org.junit.internal.runners.rules.RuleFieldValidator.validatePublic(org.junit.runners.model.FrameworkField, java.util.List)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.junit.runners.model.FrameworkField.isShadowedBy(org.junit.runners.model.FrameworkField)</name>
                <outbound type="class" confirmed="no">java.lang.Object</outbound>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="feature" confirmed="no">java.lang.String.equals(java.lang.Object)</outbound>
                <outbound type="feature" confirmed="yes">org.junit.runners.model.FrameworkField.getName()</outbound>
                <inbound type="feature" confirmed="yes">org.junit.runners.model.FrameworkField.isShadowedBy(org.junit.runners.model.FrameworkMember)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.junit.runners.model.FrameworkField.isShadowedBy(org.junit.runners.model.FrameworkMember)</name>
                <outbound type="feature" confirmed="yes">org.junit.runners.model.FrameworkField.isShadowedBy(org.junit.runners.model.FrameworkField)</outbound>
                <outbound type="class" confirmed="yes">org.junit.runners.model.FrameworkMember</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.junit.runners.model.FrameworkField.isStatic()</name>
                <outbound type="class" confirmed="no">java.lang.reflect.Field</outbound>
                <outbound type="feature" confirmed="no">java.lang.reflect.Field.getModifiers()</outbound>
                <outbound type="feature" confirmed="no">java.lang.reflect.Modifier.isStatic(int)</outbound>
                <outbound type="feature" confirmed="yes">org.junit.runners.model.FrameworkField.fField</outbound>
                <inbound type="feature" confirmed="yes">org.junit.internal.runners.rules.RuleFieldValidator.optionallyValidateStatic(org.junit.runners.model.FrameworkField, java.util.List)</inbound>
            </feature>
        </class>
        <class confirmed="yes">
            <name>org.junit.runners.model.FrameworkMember</name>
            <outbound type="class" confirmed="no">java.lang.Object</outbound>
            <inbound type="class" confirmed="yes">org.junit.runners.model.FrameworkField</inbound>
            <inbound type="feature" confirmed="yes">org.junit.runners.model.FrameworkField.isShadowedBy(org.junit.runners.model.FrameworkMember)</inbound>
            <inbound type="class" confirmed="yes">org.junit.runners.model.FrameworkMethod</inbound>
            <inbound type="feature" confirmed="yes">org.junit.runners.model.FrameworkMethod.isShadowedBy(org.junit.runners.model.FrameworkMember)</inbound>
            <inbound type="feature" confirmed="yes">org.junit.runners.model.TestClass.TestClass(java.lang.Class)</inbound>
            <inbound type="feature" confirmed="yes">org.junit.runners.model.TestClass.addToAnnotationLists(org.junit.runners.model.FrameworkMember, java.util.Map)</inbound>
            <feature confirmed="yes">
                <name>org.junit.runners.model.FrameworkMember.FrameworkMember()</name>
                <outbound type="feature" confirmed="no">java.lang.Object.Object()</outbound>
                <inbound type="feature" confirmed="yes">org.junit.runners.model.FrameworkField.FrameworkField(java.lang.reflect.Field)</inbound>
                <inbound type="feature" confirmed="yes">org.junit.runners.model.FrameworkMethod.FrameworkMethod(java.lang.reflect.Method)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.junit.runners.model.FrameworkMember.getAnnotations()</name>
                <outbound type="class" confirmed="no">java.lang.annotation.Annotation</outbound>
                <inbound type="feature" confirmed="yes">org.junit.runners.model.TestClass.addToAnnotationLists(org.junit.runners.model.FrameworkMember, java.util.Map)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.junit.runners.model.FrameworkMember.isShadowedBy(java.util.List)</name>
                <outbound type="class" confirmed="no">java.lang.Object</outbound>
                <outbound type="class" confirmed="no">java.util.Iterator</outbound>
                <outbound type="feature" confirmed="no">java.util.Iterator.hasNext()</outbound>
                <outbound type="feature" confirmed="no">java.util.Iterator.next()</outbound>
                <outbound type="class" confirmed="no">java.util.List</outbound>
                <outbound type="feature" confirmed="no">java.util.List.iterator()</outbound>
                <outbound type="feature" confirmed="yes">org.junit.runners.model.FrameworkMember.isShadowedBy(org.junit.runners.model.FrameworkMember)</outbound>
                <inbound type="feature" confirmed="yes">org.junit.runners.model.TestClass.addToAnnotationLists(org.junit.runners.model.FrameworkMember, java.util.Map)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.junit.runners.model.FrameworkMember.isShadowedBy(org.junit.runners.model.FrameworkMember)</name>
                <inbound type="feature" confirmed="yes">org.junit.runners.model.FrameworkMember.isShadowedBy(java.util.List)</inbound>
            </feature>
        </class>
        <class confirmed="yes">
            <name>org.junit.runners.model.FrameworkMethod</name>
            <outbound type="class" confirmed="yes">org.junit.runners.model.FrameworkMember</outbound>
            <inbound type="feature" confirmed="yes">org.junit.experimental.theories.Theories$TheoryAnchor$1.methodBlock(org.junit.runners.model.FrameworkMethod)</inbound>
            <inbound type="feature" confirmed="yes">org.junit.experimental.theories.Theories$TheoryAnchor$1.methodInvoker(org.junit.runners.model.FrameworkMethod, java.lang.Object)</inbound>
            <inbound type="feature" confirmed="yes">org.junit.experimental.theories.Theories$TheoryAnchor$2.Theories$TheoryAnchor$2(org.junit.experimental.theories.Theories$TheoryAnchor, org.junit.experimental.theories.internal.Assignments, org.junit.runners.model.FrameworkMethod, java.lang.Object)</inbound>
            <inbound type="feature" confirmed="yes">org.junit.experimental.theories.Theories$TheoryAnchor$2.evaluate()</inbound>
            <inbound type="feature" confirmed="yes">org.junit.experimental.theories.Theories$TheoryAnchor$2.val$method</inbound>
            <inbound type="feature" confirmed="yes">org.junit.experimental.theories.Theories$TheoryAnchor.Theories$TheoryAnchor(org.junit.runners.model.FrameworkMethod, org.junit.runners.model.TestClass)</inbound>
            <inbound type="feature" confirmed="yes">org.junit.experimental.theories.Theories$TheoryAnchor.access$100(org.junit.experimental.theories.Theories$TheoryAnchor, org.junit.runners.model.FrameworkMethod, org.junit.experimental.theories.internal.Assignments, java.lang.Object)</inbound>
            <inbound type="feature" confirmed="yes">org.junit.experimental.theories.Theories$TheoryAnchor.evaluate()</inbound>
            <inbound type="feature" confirmed="yes">org.junit.experimental.theories.Theories$TheoryAnchor.fTestMethod</inbound>
            <inbound type="feature" confirmed="yes">org.junit.experimental.theories.Theories$TheoryAnchor.methodCompletesWithParameters(org.junit.runners.model.FrameworkMethod, org.junit.experimental.theories.internal.Assignments, java.lang.Object)</inbound>
            <inbound type="feature" confirmed="yes">org.junit.experimental.theories.Theories$TheoryAnchor.nullsOk()</inbound>
            <inbound type="feature" confirmed="yes">org.junit.experimental.theories.Theories$TheoryAnchor.reportParameterizedError(java.lang.Throwable, java.lang.Object[])</inbound>
            <inbound type="feature" confirmed="yes">org.junit.experimental.theories.Theories$TheoryAnchor.runWithCompleteAssignment(org.junit.experimental.theories.internal.Assignments)</inbound>
            <inbound type="feature" confirmed="yes">org.junit.experimental.theories.Theories.methodBlock(org.junit.runners.model.FrameworkMethod)</inbound>
            <inbound type="feature" confirmed="yes">org.junit.experimental.theories.Theories.validateTestMethods(java.util.List)</inbound>
            <inbound type="feature" confirmed="yes">org.junit.experimental.theories.internal.AllMembersSupplier$MethodParameterValue.AllMembersSupplier$MethodParameterValue(org.junit.runners.model.FrameworkMethod)</inbound>
            <inbound type="feature" confirmed="yes">org.junit.experimental.theories.internal.AllMembersSupplier$MethodParameterValue.AllMembersSupplier$MethodParameterValue(org.junit.runners.model.FrameworkMethod, org.junit.experimental.theories.internal.AllMembersSupplier$1)</inbound>
            <inbound type="feature" confirmed="yes">org.junit.experimental.theories.internal.AllMembersSupplier$MethodParameterValue.fMethod</inbound>
            <inbound type="feature" confirmed="yes">org.junit.experimental.theories.internal.AllMembersSupplier$MethodParameterValue.getDescription()</inbound>
            <inbound type="feature" confirmed="yes">org.junit.experimental.theories.internal.AllMembersSupplier$MethodParameterValue.getValue()</inbound>
            <inbound type="feature" confirmed="yes">org.junit.experimental.theories.internal.AllMembersSupplier.addMultiPointMethods(java.util.List)</inbound>
            <inbound type="feature" confirmed="yes">org.junit.experimental.theories.internal.AllMembersSupplier.addSinglePointMethods(org.junit.experimental.theories.ParameterSignature, java.util.List)</inbound>
            <inbound type="feature" confirmed="yes">org.junit.internal.runners.statements.InvokeMethod.InvokeMethod(org.junit.runners.model.FrameworkMethod, java.lang.Object)</inbound>
            <inbound type="feature" confirmed="yes">org.junit.internal.runners.statements.InvokeMethod.evaluate()</inbound>
            <inbound type="feature" confirmed="yes">org.junit.internal.runners.statements.InvokeMethod.fTestMethod</inbound>
            <inbound type="feature" confirmed="yes">org.junit.internal.runners.statements.RunAfters.evaluate()</inbound>
            <inbound type="feature" confirmed="yes">org.junit.internal.runners.statements.RunBefores.evaluate()</inbound>
            <inbound type="feature" confirmed="yes">org.junit.rules.MethodRule.apply(org.junit.runners.model.Statement, org.junit.runners.model.FrameworkMethod, java.lang.Object)</inbound>
            <inbound type="feature" confirmed="yes">org.junit.rules.TestWatchman$1.TestWatchman$1(org.junit.rules.TestWatchman, org.junit.runners.model.FrameworkMethod, org.junit.runners.model.Statement)</inbound>
            <inbound type="feature" confirmed="yes">org.junit.rules.TestWatchman$1.evaluate()</inbound>
            <inbound type="feature" confirmed="yes">org.junit.rules.TestWatchman$1.val$method</inbound>
            <inbound type="feature" confirmed="yes">org.junit.rules.TestWatchman.apply(org.junit.runners.model.Statement, org.junit.runners.model.FrameworkMethod, java.lang.Object)</inbound>
            <inbound type="feature" confirmed="yes">org.junit.rules.TestWatchman.failed(java.lang.Throwable, org.junit.runners.model.FrameworkMethod)</inbound>
            <inbound type="feature" confirmed="yes">org.junit.rules.TestWatchman.finished(org.junit.runners.model.FrameworkMethod)</inbound>
            <inbound type="feature" confirmed="yes">org.junit.rules.TestWatchman.starting(org.junit.runners.model.FrameworkMethod)</inbound>
            <inbound type="feature" confirmed="yes">org.junit.rules.TestWatchman.succeeded(org.junit.runners.model.FrameworkMethod)</inbound>
            <inbound type="feature" confirmed="yes">org.junit.runners.BlockJUnit4ClassRunner.describeChild(java.lang.Object)</inbound>
            <inbound type="feature" confirmed="yes">org.junit.runners.BlockJUnit4ClassRunner.describeChild(org.junit.runners.model.FrameworkMethod)</inbound>
            <inbound type="feature" confirmed="yes">org.junit.runners.BlockJUnit4ClassRunner.methodBlock(org.junit.runners.model.FrameworkMethod)</inbound>
            <inbound type="feature" confirmed="yes">org.junit.runners.BlockJUnit4ClassRunner.methodInvoker(org.junit.runners.model.FrameworkMethod, java.lang.Object)</inbound>
            <inbound type="feature" confirmed="yes">org.junit.runners.BlockJUnit4ClassRunner.possiblyExpectingExceptions(org.junit.runners.model.FrameworkMethod, java.lang.Object, org.junit.runners.model.Statement)</inbound>
            <inbound type="feature" confirmed="yes">org.junit.runners.BlockJUnit4ClassRunner.runChild(java.lang.Object, org.junit.runner.notification.RunNotifier)</inbound>
            <inbound type="feature" confirmed="yes">org.junit.runners.BlockJUnit4ClassRunner.runChild(org.junit.runners.model.FrameworkMethod, org.junit.runner.notification.RunNotifier)</inbound>
            <inbound type="feature" confirmed="yes">org.junit.runners.BlockJUnit4ClassRunner.testName(org.junit.runners.model.FrameworkMethod)</inbound>
            <inbound type="feature" confirmed="yes">org.junit.runners.BlockJUnit4ClassRunner.withAfters(org.junit.runners.model.FrameworkMethod, java.lang.Object, org.junit.runners.model.Statement)</inbound>
            <inbound type="feature" confirmed="yes">org.junit.runners.BlockJUnit4ClassRunner.withBefores(org.junit.runners.model.FrameworkMethod, java.lang.Object, org.junit.runners.model.Statement)</inbound>
            <inbound type="feature" confirmed="yes">org.junit.runners.BlockJUnit4ClassRunner.withMethodRules(org.junit.runners.model.FrameworkMethod, java.lang.Object, org.junit.runners.model.Statement)</inbound>
            <inbound type="feature" confirmed="yes">org.junit.runners.BlockJUnit4ClassRunner.withPotentialTimeout(org.junit.runners.model.FrameworkMethod, java.lang.Object, org.junit.runners.model.Statement)</inbound>
            <inbound type="feature" confirmed="yes">org.junit.runners.BlockJUnit4ClassRunner.withRules(org.junit.runners.model.FrameworkMethod, java.lang.Object, org.junit.runners.model.Statement)</inbound>
            <inbound type="feature" confirmed="yes">org.junit.runners.BlockJUnit4ClassRunner.withTestRules(org.junit.runners.model.FrameworkMethod, java.lang.Object, org.junit.runners.model.Statement)</inbound>
            <inbound type="feature" confirmed="yes">org.junit.runners.Parameterized$TestClassRunnerForParameters.computeParams()</inbound>
            <inbound type="feature" confirmed="yes">org.junit.runners.Parameterized$TestClassRunnerForParameters.testName(org.junit.runners.model.FrameworkMethod)</inbound>
            <inbound type="feature" confirmed="yes">org.junit.runners.Parameterized.access$000(org.junit.runners.Parameterized, org.junit.runners.model.TestClass)</inbound>
            <inbound type="feature" confirmed="yes">org.junit.runners.Parameterized.getParametersList(org.junit.runners.model.TestClass)</inbound>
            <inbound type="feature" confirmed="yes">org.junit.runners.Parameterized.getParametersMethod(org.junit.runners.model.TestClass)</inbound>
            <inbound type="feature" confirmed="yes">org.junit.runners.ParentRunner.validatePublicVoidNoArgMethods(java.lang.Class, boolean, java.util.List)</inbound>
            <inbound type="feature" confirmed="yes">org.junit.runners.model.FrameworkMethod$1.FrameworkMethod$1(org.junit.runners.model.FrameworkMethod, java.lang.Object, java.lang.Object[])</inbound>
            <inbound type="feature" confirmed="yes">org.junit.runners.model.FrameworkMethod$1.runReflectiveCall()</inbound>
            <inbound type="feature" confirmed="yes">org.junit.runners.model.FrameworkMethod$1.this$0</inbound>
            <feature confirmed="yes">
                <name>org.junit.runners.model.FrameworkMethod.FrameworkMethod(java.lang.reflect.Method)</name>
                <outbound type="class" confirmed="no">java.lang.reflect.Method</outbound>
                <outbound type="feature" confirmed="yes">org.junit.runners.model.FrameworkMember.FrameworkMember()</outbound>
                <outbound type="feature" confirmed="yes">org.junit.runners.model.FrameworkMethod.fMethod</outbound>
                <inbound type="feature" confirmed="yes">org.junit.runners.model.TestClass.TestClass(java.lang.Class)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.junit.runners.model.FrameworkMethod.equals(java.lang.Object)</name>
                <outbound type="feature" confirmed="no">java.lang.Class.isInstance(java.lang.Object)</outbound>
                <outbound type="class" confirmed="no">java.lang.Object</outbound>
                <outbound type="class" confirmed="no">java.lang.reflect.Method</outbound>
                <outbound type="feature" confirmed="no">java.lang.reflect.Method.equals(java.lang.Object)</outbound>
                <outbound type="feature" confirmed="yes">org.junit.runners.model.FrameworkMethod.fMethod</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.junit.runners.model.FrameworkMethod.fMethod</name>
                <outbound type="class" confirmed="no">java.lang.reflect.Method</outbound>
                <inbound type="feature" confirmed="yes">org.junit.runners.model.FrameworkMethod$1.runReflectiveCall()</inbound>
                <inbound type="feature" confirmed="yes">org.junit.runners.model.FrameworkMethod.FrameworkMethod(java.lang.reflect.Method)</inbound>
                <inbound type="feature" confirmed="yes">org.junit.runners.model.FrameworkMethod.equals(java.lang.Object)</inbound>
                <inbound type="feature" confirmed="yes">org.junit.runners.model.FrameworkMethod.getAnnotation(java.lang.Class)</inbound>
                <inbound type="feature" confirmed="yes">org.junit.runners.model.FrameworkMethod.getAnnotations()</inbound>
                <inbound type="feature" confirmed="yes">org.junit.runners.model.FrameworkMethod.getMethod()</inbound>
                <inbound type="feature" confirmed="yes">org.junit.runners.model.FrameworkMethod.getName()</inbound>
                <inbound type="feature" confirmed="yes">org.junit.runners.model.FrameworkMethod.getParameterTypes()</inbound>
                <inbound type="feature" confirmed="yes">org.junit.runners.model.FrameworkMethod.hashCode()</inbound>
                <inbound type="feature" confirmed="yes">org.junit.runners.model.FrameworkMethod.producesType(java.lang.Class)</inbound>
                <inbound type="feature" confirmed="yes">org.junit.runners.model.FrameworkMethod.validatePublicVoid(boolean, java.util.List)</inbound>
                <inbound type="feature" confirmed="yes">org.junit.runners.model.FrameworkMethod.validatePublicVoidNoArg(boolean, java.util.List)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.junit.runners.model.FrameworkMethod.getAnnotation(java.lang.Class)</name>
                <outbound type="class" confirmed="no">java.lang.Class</outbound>
                <outbound type="class" confirmed="no">java.lang.annotation.Annotation</outbound>
                <outbound type="class" confirmed="no">java.lang.reflect.Method</outbound>
                <outbound type="feature" confirmed="no">java.lang.reflect.Method.getAnnotation(java.lang.Class)</outbound>
                <outbound type="feature" confirmed="yes">org.junit.runners.model.FrameworkMethod.fMethod</outbound>
                <inbound type="feature" confirmed="yes">org.junit.experimental.theories.Theories.validateTestMethods(java.util.List)</inbound>
                <inbound type="feature" confirmed="yes">org.junit.runners.BlockJUnit4ClassRunner.possiblyExpectingExceptions(org.junit.runners.model.FrameworkMethod, java.lang.Object, org.junit.runners.model.Statement)</inbound>
                <inbound type="feature" confirmed="yes">org.junit.runners.BlockJUnit4ClassRunner.runChild(org.junit.runners.model.FrameworkMethod, org.junit.runner.notification.RunNotifier)</inbound>
                <inbound type="feature" confirmed="yes">org.junit.runners.BlockJUnit4ClassRunner.withPotentialTimeout(org.junit.runners.model.FrameworkMethod, java.lang.Object, org.junit.runners.model.Statement)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.junit.runners.model.FrameworkMethod.getAnnotations()</name>
                <outbound type="class" confirmed="no">java.lang.annotation.Annotation</outbound>
                <outbound type="class" confirmed="no">java.lang.reflect.Method</outbound>
                <outbound type="feature" confirmed="no">java.lang.reflect.Method.getAnnotations()</outbound>
                <outbound type="feature" confirmed="yes">org.junit.runners.model.FrameworkMethod.fMethod</outbound>
                <inbound type="feature" confirmed="yes">org.junit.runners.BlockJUnit4ClassRunner.describeChild(org.junit.runners.model.FrameworkMethod)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.junit.runners.model.FrameworkMethod.getMethod()</name>
                <outbound type="class" confirmed="no">java.lang.reflect.Method</outbound>
                <outbound type="feature" confirmed="yes">org.junit.runners.model.FrameworkMethod.fMethod</outbound>
                <inbound type="feature" confirmed="yes">org.junit.experimental.theories.Theories$TheoryAnchor.evaluate()</inbound>
                <inbound type="feature" confirmed="yes">org.junit.experimental.theories.Theories$TheoryAnchor.nullsOk()</inbound>
                <inbound type="feature" confirmed="yes">org.junit.runners.Parameterized.getParametersMethod(org.junit.runners.model.TestClass)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.junit.runners.model.FrameworkMethod.getName()</name>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="class" confirmed="no">java.lang.reflect.Method</outbound>
                <outbound type="feature" confirmed="no">java.lang.reflect.Method.getName()</outbound>
                <outbound type="feature" confirmed="yes">org.junit.runners.model.FrameworkMethod.fMethod</outbound>
                <inbound type="feature" confirmed="yes">org.junit.experimental.theories.Theories$TheoryAnchor.reportParameterizedError(java.lang.Throwable, java.lang.Object[])</inbound>
                <inbound type="feature" confirmed="yes">org.junit.experimental.theories.internal.AllMembersSupplier$MethodParameterValue.getDescription()</inbound>
                <inbound type="feature" confirmed="yes">org.junit.experimental.theories.internal.AllMembersSupplier.addMultiPointMethods(java.util.List)</inbound>
                <inbound type="feature" confirmed="yes">org.junit.runners.BlockJUnit4ClassRunner.testName(org.junit.runners.model.FrameworkMethod)</inbound>
                <inbound type="feature" confirmed="yes">org.junit.runners.Parameterized$TestClassRunnerForParameters.computeParams()</inbound>
                <inbound type="feature" confirmed="yes">org.junit.runners.Parameterized$TestClassRunnerForParameters.testName(org.junit.runners.model.FrameworkMethod)</inbound>
                <inbound type="feature" confirmed="yes">org.junit.runners.model.FrameworkMethod.isShadowedBy(org.junit.runners.model.FrameworkMethod)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.junit.runners.model.FrameworkMethod.getParameterTypes()</name>
                <outbound type="class" confirmed="no">java.lang.Class</outbound>
                <outbound type="class" confirmed="no">java.lang.reflect.Method</outbound>
                <outbound type="feature" confirmed="no">java.lang.reflect.Method.getParameterTypes()</outbound>
                <outbound type="feature" confirmed="yes">org.junit.runners.model.FrameworkMethod.fMethod</outbound>
                <inbound type="feature" confirmed="yes">org.junit.runners.model.FrameworkMethod.isShadowedBy(org.junit.runners.model.FrameworkMethod)</inbound>
                <inbound type="feature" confirmed="yes">org.junit.runners.model.FrameworkMethod.producesType(java.lang.Class)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.junit.runners.model.FrameworkMethod.hashCode()</name>
                <outbound type="class" confirmed="no">java.lang.reflect.Method</outbound>
                <outbound type="feature" confirmed="no">java.lang.reflect.Method.hashCode()</outbound>
                <outbound type="feature" confirmed="yes">org.junit.runners.model.FrameworkMethod.fMethod</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.junit.runners.model.FrameworkMethod.invokeExplosively(java.lang.Object, java.lang.Object[])</name>
                <outbound type="class" confirmed="no">java.lang.Object</outbound>
                <outbound type="class" confirmed="no">java.lang.Throwable</outbound>
                <outbound type="feature" confirmed="yes">org.junit.runners.model.FrameworkMethod$1.FrameworkMethod$1(org.junit.runners.model.FrameworkMethod, java.lang.Object, java.lang.Object[])</outbound>
                <outbound type="feature" confirmed="no">org.junit.runners.model.FrameworkMethod$1.run()</outbound>
                <inbound type="feature" confirmed="yes">org.junit.experimental.theories.Theories$TheoryAnchor$2.evaluate()</inbound>
                <inbound type="feature" confirmed="yes">org.junit.experimental.theories.internal.AllMembersSupplier$MethodParameterValue.getValue()</inbound>
                <inbound type="feature" confirmed="yes">org.junit.experimental.theories.internal.AllMembersSupplier.addMultiPointMethods(java.util.List)</inbound>
                <inbound type="feature" confirmed="yes">org.junit.internal.runners.statements.InvokeMethod.evaluate()</inbound>
                <inbound type="feature" confirmed="yes">org.junit.internal.runners.statements.RunAfters.evaluate()</inbound>
                <inbound type="feature" confirmed="yes">org.junit.internal.runners.statements.RunBefores.evaluate()</inbound>
                <inbound type="feature" confirmed="yes">org.junit.runners.Parameterized.getParametersList(org.junit.runners.model.TestClass)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.junit.runners.model.FrameworkMethod.isShadowedBy(org.junit.runners.model.FrameworkMember)</name>
                <outbound type="class" confirmed="yes">org.junit.runners.model.FrameworkMember</outbound>
                <outbound type="feature" confirmed="yes">org.junit.runners.model.FrameworkMethod.isShadowedBy(org.junit.runners.model.FrameworkMethod)</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.junit.runners.model.FrameworkMethod.isShadowedBy(org.junit.runners.model.FrameworkMethod)</name>
                <outbound type="class" confirmed="no">java.lang.Class</outbound>
                <outbound type="class" confirmed="no">java.lang.Object</outbound>
                <outbound type="feature" confirmed="no">java.lang.Object.equals(java.lang.Object)</outbound>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="feature" confirmed="no">java.lang.String.equals(java.lang.Object)</outbound>
                <outbound type="feature" confirmed="yes">org.junit.runners.model.FrameworkMethod.getName()</outbound>
                <outbound type="feature" confirmed="yes">org.junit.runners.model.FrameworkMethod.getParameterTypes()</outbound>
                <inbound type="feature" confirmed="yes">org.junit.runners.model.FrameworkMethod.isShadowedBy(org.junit.runners.model.FrameworkMember)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.junit.runners.model.FrameworkMethod.producesType(java.lang.Class)</name>
                <outbound type="class" confirmed="no">java.lang.Class</outbound>
                <outbound type="feature" confirmed="no">java.lang.Class.isAssignableFrom(java.lang.Class)</outbound>
                <outbound type="class" confirmed="no">java.lang.reflect.Method</outbound>
                <outbound type="feature" confirmed="no">java.lang.reflect.Method.getReturnType()</outbound>
                <outbound type="feature" confirmed="yes">org.junit.runners.model.FrameworkMethod.fMethod</outbound>
                <outbound type="feature" confirmed="yes">org.junit.runners.model.FrameworkMethod.getParameterTypes()</outbound>
                <inbound type="feature" confirmed="yes">org.junit.experimental.theories.internal.AllMembersSupplier.addSinglePointMethods(org.junit.experimental.theories.ParameterSignature, java.util.List)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.junit.runners.model.FrameworkMethod.validatePublicVoid(boolean, java.util.List)</name>
                <outbound type="class" confirmed="no">java.lang.Class</outbound>
                <outbound type="feature" confirmed="no">java.lang.Class.getModifiers()</outbound>
                <outbound type="feature" confirmed="no">java.lang.Class.getName()</outbound>
                <outbound type="feature" confirmed="no">java.lang.Exception.Exception(java.lang.String)</outbound>
                <outbound type="class" confirmed="no">java.lang.Object</outbound>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="class" confirmed="no">java.lang.StringBuilder</outbound>
                <outbound type="feature" confirmed="no">java.lang.StringBuilder.StringBuilder()</outbound>
                <outbound type="feature" confirmed="no">java.lang.StringBuilder.append(java.lang.String)</outbound>
                <outbound type="feature" confirmed="no">java.lang.StringBuilder.toString()</outbound>
                <outbound type="feature" confirmed="no">java.lang.Void.TYPE</outbound>
                <outbound type="class" confirmed="no">java.lang.reflect.Method</outbound>
                <outbound type="feature" confirmed="no">java.lang.reflect.Method.getDeclaringClass()</outbound>
                <outbound type="feature" confirmed="no">java.lang.reflect.Method.getModifiers()</outbound>
                <outbound type="feature" confirmed="no">java.lang.reflect.Method.getName()</outbound>
                <outbound type="feature" confirmed="no">java.lang.reflect.Method.getReturnType()</outbound>
                <outbound type="feature" confirmed="no">java.lang.reflect.Modifier.isPublic(int)</outbound>
                <outbound type="feature" confirmed="no">java.lang.reflect.Modifier.isStatic(int)</outbound>
                <outbound type="class" confirmed="no">java.util.List</outbound>
                <outbound type="feature" confirmed="no">java.util.List.add(java.lang.Object)</outbound>
                <outbound type="feature" confirmed="yes">org.junit.runners.model.FrameworkMethod.fMethod</outbound>
                <inbound type="feature" confirmed="yes">org.junit.experimental.theories.Theories.validateTestMethods(java.util.List)</inbound>
                <inbound type="feature" confirmed="yes">org.junit.runners.model.FrameworkMethod.validatePublicVoidNoArg(boolean, java.util.List)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.junit.runners.model.FrameworkMethod.validatePublicVoidNoArg(boolean, java.util.List)</name>
                <outbound type="class" confirmed="no">java.lang.Class</outbound>
                <outbound type="feature" confirmed="no">java.lang.Exception.Exception(java.lang.String)</outbound>
                <outbound type="class" confirmed="no">java.lang.Object</outbound>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="class" confirmed="no">java.lang.StringBuilder</outbound>
                <outbound type="feature" confirmed="no">java.lang.StringBuilder.StringBuilder()</outbound>
                <outbound type="feature" confirmed="no">java.lang.StringBuilder.append(java.lang.String)</outbound>
                <outbound type="feature" confirmed="no">java.lang.StringBuilder.toString()</outbound>
                <outbound type="class" confirmed="no">java.lang.reflect.Method</outbound>
                <outbound type="feature" confirmed="no">java.lang.reflect.Method.getName()</outbound>
                <outbound type="feature" confirmed="no">java.lang.reflect.Method.getParameterTypes()</outbound>
                <outbound type="class" confirmed="no">java.util.List</outbound>
                <outbound type="feature" confirmed="no">java.util.List.add(java.lang.Object)</outbound>
                <outbound type="feature" confirmed="yes">org.junit.runners.model.FrameworkMethod.fMethod</outbound>
                <outbound type="feature" confirmed="yes">org.junit.runners.model.FrameworkMethod.validatePublicVoid(boolean, java.util.List)</outbound>
                <inbound type="feature" confirmed="yes">org.junit.experimental.theories.Theories.validateTestMethods(java.util.List)</inbound>
                <inbound type="feature" confirmed="yes">org.junit.runners.ParentRunner.validatePublicVoidNoArgMethods(java.lang.Class, boolean, java.util.List)</inbound>
            </feature>
        </class>
        <class confirmed="yes">
            <name>org.junit.runners.model.FrameworkMethod$1</name>
            <outbound type="class" confirmed="yes">org.junit.internal.runners.model.ReflectiveCallable</outbound>
            <feature confirmed="yes">
                <name>org.junit.runners.model.FrameworkMethod$1.FrameworkMethod$1(org.junit.runners.model.FrameworkMethod, java.lang.Object, java.lang.Object[])</name>
                <outbound type="class" confirmed="no">java.lang.Object</outbound>
                <outbound type="feature" confirmed="yes">org.junit.internal.runners.model.ReflectiveCallable.ReflectiveCallable()</outbound>
                <outbound type="class" confirmed="yes">org.junit.runners.model.FrameworkMethod</outbound>
                <outbound type="feature" confirmed="yes">org.junit.runners.model.FrameworkMethod$1.this$0</outbound>
                <outbound type="feature" confirmed="yes">org.junit.runners.model.FrameworkMethod$1.val$params</outbound>
                <outbound type="feature" confirmed="yes">org.junit.runners.model.FrameworkMethod$1.val$target</outbound>
                <inbound type="feature" confirmed="yes">org.junit.runners.model.FrameworkMethod.invokeExplosively(java.lang.Object, java.lang.Object[])</inbound>
            </feature>
            <feature confirmed="no">
                <name>org.junit.runners.model.FrameworkMethod$1.run()</name>
                <inbound type="feature" confirmed="yes">org.junit.runners.model.FrameworkMethod.invokeExplosively(java.lang.Object, java.lang.Object[])</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.junit.runners.model.FrameworkMethod$1.runReflectiveCall()</name>
                <outbound type="class" confirmed="no">java.lang.Object</outbound>
                <outbound type="class" confirmed="no">java.lang.Throwable</outbound>
                <outbound type="class" confirmed="no">java.lang.reflect.Method</outbound>
                <outbound type="feature" confirmed="no">java.lang.reflect.Method.invoke(java.lang.Object, java.lang.Object[])</outbound>
                <outbound type="class" confirmed="yes">org.junit.runners.model.FrameworkMethod</outbound>
                <outbound type="feature" confirmed="yes">org.junit.runners.model.FrameworkMethod$1.this$0</outbound>
                <outbound type="feature" confirmed="yes">org.junit.runners.model.FrameworkMethod$1.val$params</outbound>
                <outbound type="feature" confirmed="yes">org.junit.runners.model.FrameworkMethod$1.val$target</outbound>
                <outbound type="feature" confirmed="yes">org.junit.runners.model.FrameworkMethod.fMethod</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.junit.runners.model.FrameworkMethod$1.this$0</name>
                <outbound type="class" confirmed="yes">org.junit.runners.model.FrameworkMethod</outbound>
                <inbound type="feature" confirmed="yes">org.junit.runners.model.FrameworkMethod$1.FrameworkMethod$1(org.junit.runners.model.FrameworkMethod, java.lang.Object, java.lang.Object[])</inbound>
                <inbound type="feature" confirmed="yes">org.junit.runners.model.FrameworkMethod$1.runReflectiveCall()</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.junit.runners.model.FrameworkMethod$1.val$params</name>
                <outbound type="class" confirmed="no">java.lang.Object</outbound>
                <inbound type="feature" confirmed="yes">org.junit.runners.model.FrameworkMethod$1.FrameworkMethod$1(org.junit.runners.model.FrameworkMethod, java.lang.Object, java.lang.Object[])</inbound>
                <inbound type="feature" confirmed="yes">org.junit.runners.model.FrameworkMethod$1.runReflectiveCall()</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.junit.runners.model.FrameworkMethod$1.val$target</name>
                <outbound type="class" confirmed="no">java.lang.Object</outbound>
                <inbound type="feature" confirmed="yes">org.junit.runners.model.FrameworkMethod$1.FrameworkMethod$1(org.junit.runners.model.FrameworkMethod, java.lang.Object, java.lang.Object[])</inbound>
                <inbound type="feature" confirmed="yes">org.junit.runners.model.FrameworkMethod$1.runReflectiveCall()</inbound>
            </feature>
        </class>
        <class confirmed="yes">
            <name>org.junit.runners.model.InitializationError</name>
            <outbound type="class" confirmed="no">java.lang.Exception</outbound>
            <inbound type="feature" confirmed="yes">org.junit.experimental.ParallelComputer.getSuite(org.junit.runners.model.RunnerBuilder, java.lang.Class[])</inbound>
            <inbound type="feature" confirmed="yes">org.junit.experimental.categories.Categories.Categories(java.lang.Class, org.junit.runners.model.RunnerBuilder)</inbound>
            <inbound type="feature" confirmed="yes">org.junit.experimental.categories.Categories.assertNoCategorizedDescendentsOfUncategorizeableParents(org.junit.runner.Description)</inbound>
            <inbound type="feature" confirmed="yes">org.junit.experimental.categories.Categories.assertNoDescendantsHaveCategoryAnnotations(org.junit.runner.Description)</inbound>
            <inbound type="feature" confirmed="yes">org.junit.experimental.max.MaxCore$1.getRunner()</inbound>
            <inbound type="feature" confirmed="yes">org.junit.experimental.theories.Theories.Theories(java.lang.Class)</inbound>
            <inbound type="feature" confirmed="yes">org.junit.internal.runners.ErrorReportingRunner.getCauses(java.lang.Throwable)</inbound>
            <inbound type="feature" confirmed="yes">org.junit.runner.Computer.getSuite(org.junit.runners.model.RunnerBuilder, java.lang.Class[])</inbound>
            <inbound type="feature" confirmed="yes">org.junit.runner.Request.classes(org.junit.runner.Computer, java.lang.Class[])</inbound>
            <inbound type="feature" confirmed="yes">org.junit.runners.BlockJUnit4ClassRunner.BlockJUnit4ClassRunner(java.lang.Class)</inbound>
            <inbound type="feature" confirmed="yes">org.junit.runners.JUnit4.JUnit4(java.lang.Class)</inbound>
            <inbound type="feature" confirmed="yes">org.junit.runners.Parameterized$TestClassRunnerForParameters.Parameterized$TestClassRunnerForParameters(org.junit.runners.Parameterized, java.lang.Class, java.util.List, int)</inbound>
            <inbound type="feature" confirmed="yes">org.junit.runners.ParentRunner.ParentRunner(java.lang.Class)</inbound>
            <inbound type="feature" confirmed="yes">org.junit.runners.ParentRunner.validate()</inbound>
            <inbound type="feature" confirmed="yes">org.junit.runners.Suite.Suite(java.lang.Class, java.lang.Class[])</inbound>
            <inbound type="feature" confirmed="yes">org.junit.runners.Suite.Suite(java.lang.Class, java.util.List)</inbound>
            <inbound type="feature" confirmed="yes">org.junit.runners.Suite.Suite(java.lang.Class, org.junit.runners.model.RunnerBuilder)</inbound>
            <inbound type="feature" confirmed="yes">org.junit.runners.Suite.Suite(org.junit.runners.model.RunnerBuilder, java.lang.Class, java.lang.Class[])</inbound>
            <inbound type="feature" confirmed="yes">org.junit.runners.Suite.Suite(org.junit.runners.model.RunnerBuilder, java.lang.Class[])</inbound>
            <inbound type="feature" confirmed="yes">org.junit.runners.Suite.emptySuite()</inbound>
            <inbound type="feature" confirmed="yes">org.junit.runners.Suite.getAnnotatedClasses(java.lang.Class)</inbound>
            <inbound type="feature" confirmed="yes">org.junit.runners.model.RunnerBuilder.addParent(java.lang.Class)</inbound>
            <inbound type="feature" confirmed="yes">org.junit.runners.model.RunnerBuilder.runners(java.lang.Class, java.lang.Class[])</inbound>
            <inbound type="feature" confirmed="yes">org.junit.runners.model.RunnerBuilder.runners(java.lang.Class, java.util.List)</inbound>
            <feature confirmed="yes">
                <name>org.junit.runners.model.InitializationError.InitializationError(java.lang.String)</name>
                <outbound type="feature" confirmed="no">java.lang.Exception.Exception(java.lang.String)</outbound>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="class" confirmed="no">java.lang.Throwable</outbound>
                <outbound type="feature" confirmed="yes">org.junit.runners.model.InitializationError.InitializationError(java.lang.Throwable)</outbound>
                <inbound type="feature" confirmed="yes">org.junit.experimental.categories.Categories.assertNoDescendantsHaveCategoryAnnotations(org.junit.runner.Description)</inbound>
                <inbound type="feature" confirmed="yes">org.junit.internal.builders.AnnotatedBuilder.buildRunner(java.lang.Class, java.lang.Class)</inbound>
                <inbound type="feature" confirmed="yes">org.junit.runners.Suite.getAnnotatedClasses(java.lang.Class)</inbound>
                <inbound type="feature" confirmed="yes">org.junit.runners.model.RunnerBuilder.addParent(java.lang.Class)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.junit.runners.model.InitializationError.InitializationError(java.lang.Throwable)</name>
                <outbound type="class" confirmed="no">java.lang.Object</outbound>
                <outbound type="class" confirmed="no">java.lang.Throwable</outbound>
                <outbound type="feature" confirmed="no">java.util.Arrays.asList(java.lang.Object[])</outbound>
                <outbound type="class" confirmed="no">java.util.List</outbound>
                <outbound type="feature" confirmed="yes">org.junit.runners.model.InitializationError.InitializationError(java.util.List)</outbound>
                <inbound type="feature" confirmed="yes">org.junit.experimental.categories.Categories.Categories(java.lang.Class, org.junit.runners.model.RunnerBuilder)</inbound>
                <inbound type="feature" confirmed="yes">org.junit.runners.model.InitializationError.InitializationError(java.lang.String)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.junit.runners.model.InitializationError.InitializationError(java.util.List)</name>
                <outbound type="feature" confirmed="no">java.lang.Exception.Exception()</outbound>
                <outbound type="class" confirmed="no">java.util.List</outbound>
                <outbound type="feature" confirmed="yes">org.junit.runners.model.InitializationError.fErrors</outbound>
                <inbound type="feature" confirmed="yes">org.junit.runners.ParentRunner.validate()</inbound>
                <inbound type="feature" confirmed="yes">org.junit.runners.model.InitializationError.InitializationError(java.lang.Throwable)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.junit.runners.model.InitializationError.fErrors</name>
                <outbound type="class" confirmed="no">java.util.List</outbound>
                <inbound type="feature" confirmed="yes">org.junit.runners.model.InitializationError.InitializationError(java.util.List)</inbound>
                <inbound type="feature" confirmed="yes">org.junit.runners.model.InitializationError.getCauses()</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.junit.runners.model.InitializationError.getCauses()</name>
                <outbound type="class" confirmed="no">java.util.List</outbound>
                <outbound type="feature" confirmed="yes">org.junit.runners.model.InitializationError.fErrors</outbound>
                <inbound type="feature" confirmed="yes">org.junit.internal.runners.ErrorReportingRunner.getCauses(java.lang.Throwable)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.junit.runners.model.InitializationError.serialVersionUID</name>
            </feature>
        </class>
        <class confirmed="yes">
            <name>org.junit.runners.model.MultipleFailureException</name>
            <outbound type="class" confirmed="no">java.lang.Exception</outbound>
            <inbound type="feature" confirmed="yes">org.junit.internal.runners.model.EachTestNotifier.addFailure(java.lang.Throwable)</inbound>
            <inbound type="feature" confirmed="yes">org.junit.internal.runners.model.EachTestNotifier.addMultipleFailureException(org.junit.runners.model.MultipleFailureException)</inbound>
            <inbound type="class" confirmed="yes">org.junit.internal.runners.model.MultipleFailureException</inbound>
            <feature confirmed="yes">
                <name>org.junit.runners.model.MultipleFailureException.MultipleFailureException(java.util.List)</name>
                <outbound type="feature" confirmed="no">java.lang.Exception.Exception()</outbound>
                <outbound type="feature" confirmed="no">java.util.ArrayList.ArrayList(java.util.Collection)</outbound>
                <outbound type="class" confirmed="no">java.util.Collection</outbound>
                <outbound type="class" confirmed="no">java.util.List</outbound>
                <outbound type="feature" confirmed="yes">org.junit.runners.model.MultipleFailureException.fErrors</outbound>
                <inbound type="feature" confirmed="yes">org.junit.internal.runners.model.MultipleFailureException.MultipleFailureException(java.util.List)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.junit.runners.model.MultipleFailureException.assertEmpty(java.util.List)</name>
                <outbound type="class" confirmed="no">java.lang.Object</outbound>
                <outbound type="class" confirmed="no">java.lang.Throwable</outbound>
                <outbound type="class" confirmed="no">java.util.List</outbound>
                <outbound type="feature" confirmed="no">java.util.List.get(int)</outbound>
                <outbound type="feature" confirmed="no">java.util.List.isEmpty()</outbound>
                <outbound type="feature" confirmed="no">java.util.List.size()</outbound>
                <outbound type="feature" confirmed="yes">org.junit.internal.runners.model.MultipleFailureException.MultipleFailureException(java.util.List)</outbound>
                <inbound type="feature" confirmed="yes">org.junit.internal.runners.statements.RunAfters.evaluate()</inbound>
                <inbound type="feature" confirmed="yes">org.junit.rules.ErrorCollector.verify()</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.junit.runners.model.MultipleFailureException.fErrors</name>
                <outbound type="class" confirmed="no">java.util.List</outbound>
                <inbound type="feature" confirmed="yes">org.junit.runners.model.MultipleFailureException.MultipleFailureException(java.util.List)</inbound>
                <inbound type="feature" confirmed="yes">org.junit.runners.model.MultipleFailureException.getFailures()</inbound>
                <inbound type="feature" confirmed="yes">org.junit.runners.model.MultipleFailureException.getMessage()</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.junit.runners.model.MultipleFailureException.getFailures()</name>
                <outbound type="feature" confirmed="no">java.util.Collections.unmodifiableList(java.util.List)</outbound>
                <outbound type="class" confirmed="no">java.util.List</outbound>
                <outbound type="feature" confirmed="yes">org.junit.runners.model.MultipleFailureException.fErrors</outbound>
                <inbound type="feature" confirmed="yes">org.junit.internal.runners.model.EachTestNotifier.addMultipleFailureException(org.junit.runners.model.MultipleFailureException)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.junit.runners.model.MultipleFailureException.getMessage()</name>
                <outbound type="class" confirmed="no">java.lang.Class</outbound>
                <outbound type="feature" confirmed="no">java.lang.Class.getName()</outbound>
                <outbound type="class" confirmed="no">java.lang.Integer</outbound>
                <outbound type="feature" confirmed="no">java.lang.Integer.valueOf(int)</outbound>
                <outbound type="class" confirmed="no">java.lang.Object</outbound>
                <outbound type="feature" confirmed="no">java.lang.Object.getClass()</outbound>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="feature" confirmed="no">java.lang.String.format(java.lang.String, java.lang.Object[])</outbound>
                <outbound type="class" confirmed="no">java.lang.StringBuilder</outbound>
                <outbound type="feature" confirmed="no">java.lang.StringBuilder.StringBuilder(java.lang.String)</outbound>
                <outbound type="feature" confirmed="no">java.lang.StringBuilder.append(java.lang.String)</outbound>
                <outbound type="feature" confirmed="no">java.lang.StringBuilder.toString()</outbound>
                <outbound type="class" confirmed="no">java.lang.Throwable</outbound>
                <outbound type="feature" confirmed="no">java.lang.Throwable.getMessage()</outbound>
                <outbound type="class" confirmed="no">java.util.Iterator</outbound>
                <outbound type="feature" confirmed="no">java.util.Iterator.hasNext()</outbound>
                <outbound type="feature" confirmed="no">java.util.Iterator.next()</outbound>
                <outbound type="class" confirmed="no">java.util.List</outbound>
                <outbound type="feature" confirmed="no">java.util.List.iterator()</outbound>
                <outbound type="feature" confirmed="no">java.util.List.size()</outbound>
                <outbound type="feature" confirmed="yes">org.junit.runners.model.MultipleFailureException.fErrors</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.junit.runners.model.MultipleFailureException.serialVersionUID</name>
            </feature>
        </class>
        <class confirmed="yes">
            <name>org.junit.runners.model.RunnerBuilder</name>
            <outbound type="class" confirmed="no">java.lang.Object</outbound>
            <inbound type="feature" confirmed="yes">org.junit.experimental.ParallelComputer.getRunner(org.junit.runners.model.RunnerBuilder, java.lang.Class)</inbound>
            <inbound type="feature" confirmed="yes">org.junit.experimental.ParallelComputer.getSuite(org.junit.runners.model.RunnerBuilder, java.lang.Class[])</inbound>
            <inbound type="feature" confirmed="yes">org.junit.experimental.categories.Categories.Categories(java.lang.Class, org.junit.runners.model.RunnerBuilder)</inbound>
            <inbound type="feature" confirmed="yes">org.junit.experimental.runners.Enclosed.Enclosed(java.lang.Class, org.junit.runners.model.RunnerBuilder)</inbound>
            <inbound type="class" confirmed="yes">org.junit.internal.builders.AllDefaultPossibilitiesBuilder</inbound>
            <inbound type="feature" confirmed="yes">org.junit.internal.builders.AllDefaultPossibilitiesBuilder.annotatedBuilder()</inbound>
            <inbound type="feature" confirmed="yes">org.junit.internal.builders.AllDefaultPossibilitiesBuilder.runnerForClass(java.lang.Class)</inbound>
            <inbound type="feature" confirmed="yes">org.junit.internal.builders.AllDefaultPossibilitiesBuilder.suiteMethodBuilder()</inbound>
            <inbound type="class" confirmed="yes">org.junit.internal.builders.AnnotatedBuilder</inbound>
            <inbound type="feature" confirmed="yes">org.junit.internal.builders.AnnotatedBuilder.AnnotatedBuilder(org.junit.runners.model.RunnerBuilder)</inbound>
            <inbound type="feature" confirmed="yes">org.junit.internal.builders.AnnotatedBuilder.buildRunner(java.lang.Class, java.lang.Class)</inbound>
            <inbound type="feature" confirmed="yes">org.junit.internal.builders.AnnotatedBuilder.fSuiteBuilder</inbound>
            <inbound type="class" confirmed="yes">org.junit.internal.builders.IgnoredBuilder</inbound>
            <inbound type="class" confirmed="yes">org.junit.internal.builders.JUnit3Builder</inbound>
            <inbound type="class" confirmed="yes">org.junit.internal.builders.JUnit4Builder</inbound>
            <inbound type="class" confirmed="yes">org.junit.internal.builders.NullBuilder</inbound>
            <inbound type="class" confirmed="yes">org.junit.internal.builders.SuiteMethodBuilder</inbound>
            <inbound type="class" confirmed="yes">org.junit.runner.Computer$1</inbound>
            <inbound type="feature" confirmed="yes">org.junit.runner.Computer$1.Computer$1(org.junit.runner.Computer, org.junit.runners.model.RunnerBuilder)</inbound>
            <inbound type="feature" confirmed="yes">org.junit.runner.Computer$1.runnerForClass(java.lang.Class)</inbound>
            <inbound type="feature" confirmed="yes">org.junit.runner.Computer$1.val$builder</inbound>
            <inbound type="feature" confirmed="yes">org.junit.runner.Computer.getRunner(org.junit.runners.model.RunnerBuilder, java.lang.Class)</inbound>
            <inbound type="feature" confirmed="yes">org.junit.runner.Computer.getSuite(org.junit.runners.model.RunnerBuilder, java.lang.Class[])</inbound>
            <inbound type="feature" confirmed="yes">org.junit.runner.Request.classes(org.junit.runner.Computer, java.lang.Class[])</inbound>
            <inbound type="feature" confirmed="yes">org.junit.runners.Suite.Suite(java.lang.Class, java.lang.Class[])</inbound>
            <inbound type="feature" confirmed="yes">org.junit.runners.Suite.Suite(java.lang.Class, org.junit.runners.model.RunnerBuilder)</inbound>
            <inbound type="feature" confirmed="yes">org.junit.runners.Suite.Suite(org.junit.runners.model.RunnerBuilder, java.lang.Class, java.lang.Class[])</inbound>
            <inbound type="feature" confirmed="yes">org.junit.runners.Suite.Suite(org.junit.runners.model.RunnerBuilder, java.lang.Class[])</inbound>
            <feature confirmed="yes">
                <name>org.junit.runners.model.RunnerBuilder.RunnerBuilder()</name>
                <outbound type="feature" confirmed="no">java.lang.Object.Object()</outbound>
                <outbound type="feature" confirmed="no">java.util.HashSet.HashSet()</outbound>
                <outbound type="class" confirmed="no">java.util.Set</outbound>
                <outbound type="feature" confirmed="yes">org.junit.runners.model.RunnerBuilder.parents</outbound>
                <inbound type="feature" confirmed="yes">org.junit.internal.builders.AllDefaultPossibilitiesBuilder.AllDefaultPossibilitiesBuilder(boolean)</inbound>
                <inbound type="feature" confirmed="yes">org.junit.internal.builders.AnnotatedBuilder.AnnotatedBuilder(org.junit.runners.model.RunnerBuilder)</inbound>
                <inbound type="feature" confirmed="yes">org.junit.internal.builders.IgnoredBuilder.IgnoredBuilder()</inbound>
                <inbound type="feature" confirmed="yes">org.junit.internal.builders.JUnit3Builder.JUnit3Builder()</inbound>
                <inbound type="feature" confirmed="yes">org.junit.internal.builders.JUnit4Builder.JUnit4Builder()</inbound>
                <inbound type="feature" confirmed="yes">org.junit.internal.builders.NullBuilder.NullBuilder()</inbound>
                <inbound type="feature" confirmed="yes">org.junit.internal.builders.SuiteMethodBuilder.SuiteMethodBuilder()</inbound>
                <inbound type="feature" confirmed="yes">org.junit.runner.Computer$1.Computer$1(org.junit.runner.Computer, org.junit.runners.model.RunnerBuilder)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.junit.runners.model.RunnerBuilder.addParent(java.lang.Class)</name>
                <outbound type="class" confirmed="no">java.lang.Class</outbound>
                <outbound type="feature" confirmed="no">java.lang.Class.getName()</outbound>
                <outbound type="class" confirmed="no">java.lang.Object</outbound>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="feature" confirmed="no">java.lang.String.format(java.lang.String, java.lang.Object[])</outbound>
                <outbound type="class" confirmed="no">java.util.Set</outbound>
                <outbound type="feature" confirmed="no">java.util.Set.add(java.lang.Object)</outbound>
                <outbound type="class" confirmed="yes">org.junit.runners.model.InitializationError</outbound>
                <outbound type="feature" confirmed="yes">org.junit.runners.model.InitializationError.InitializationError(java.lang.String)</outbound>
                <outbound type="feature" confirmed="yes">org.junit.runners.model.RunnerBuilder.parents</outbound>
                <inbound type="feature" confirmed="yes">org.junit.runners.model.RunnerBuilder.runners(java.lang.Class, java.lang.Class[])</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.junit.runners.model.RunnerBuilder.parents</name>
                <outbound type="class" confirmed="no">java.util.Set</outbound>
                <inbound type="feature" confirmed="yes">org.junit.runners.model.RunnerBuilder.RunnerBuilder()</inbound>
                <inbound type="feature" confirmed="yes">org.junit.runners.model.RunnerBuilder.addParent(java.lang.Class)</inbound>
                <inbound type="feature" confirmed="yes">org.junit.runners.model.RunnerBuilder.removeParent(java.lang.Class)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.junit.runners.model.RunnerBuilder.removeParent(java.lang.Class)</name>
                <outbound type="class" confirmed="no">java.lang.Class</outbound>
                <outbound type="class" confirmed="no">java.lang.Object</outbound>
                <outbound type="class" confirmed="no">java.util.Set</outbound>
                <outbound type="feature" confirmed="no">java.util.Set.remove(java.lang.Object)</outbound>
                <outbound type="feature" confirmed="yes">org.junit.runners.model.RunnerBuilder.parents</outbound>
                <inbound type="feature" confirmed="yes">org.junit.runners.model.RunnerBuilder.runners(java.lang.Class, java.lang.Class[])</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.junit.runners.model.RunnerBuilder.runnerForClass(java.lang.Class)</name>
                <outbound type="class" confirmed="no">java.lang.Class</outbound>
                <outbound type="class" confirmed="no">java.lang.Throwable</outbound>
                <outbound type="class" confirmed="yes">org.junit.runner.Runner</outbound>
                <inbound type="feature" confirmed="yes">org.junit.runner.Computer.getRunner(org.junit.runners.model.RunnerBuilder, java.lang.Class)</inbound>
                <inbound type="feature" confirmed="yes">org.junit.runners.model.RunnerBuilder.safeRunnerForClass(java.lang.Class)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.junit.runners.model.RunnerBuilder.runners(java.lang.Class, java.lang.Class[])</name>
                <outbound type="class" confirmed="no">java.lang.Class</outbound>
                <outbound type="class" confirmed="no">java.util.List</outbound>
                <outbound type="class" confirmed="yes">org.junit.runners.model.InitializationError</outbound>
                <outbound type="feature" confirmed="yes">org.junit.runners.model.RunnerBuilder.addParent(java.lang.Class)</outbound>
                <outbound type="feature" confirmed="yes">org.junit.runners.model.RunnerBuilder.removeParent(java.lang.Class)</outbound>
                <outbound type="feature" confirmed="yes">org.junit.runners.model.RunnerBuilder.runners(java.lang.Class[])</outbound>
                <inbound type="feature" confirmed="yes">org.junit.runners.Suite.Suite(org.junit.runners.model.RunnerBuilder, java.lang.Class, java.lang.Class[])</inbound>
                <inbound type="feature" confirmed="yes">org.junit.runners.Suite.Suite(org.junit.runners.model.RunnerBuilder, java.lang.Class[])</inbound>
                <inbound type="feature" confirmed="yes">org.junit.runners.model.RunnerBuilder.runners(java.lang.Class, java.util.List)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.junit.runners.model.RunnerBuilder.runners(java.lang.Class, java.util.List)</name>
                <outbound type="class" confirmed="no">java.lang.Class</outbound>
                <outbound type="class" confirmed="no">java.lang.Class[]</outbound>
                <outbound type="class" confirmed="no">java.lang.Object</outbound>
                <outbound type="class" confirmed="no">java.util.List</outbound>
                <outbound type="feature" confirmed="no">java.util.List.toArray(java.lang.Object[])</outbound>
                <outbound type="class" confirmed="yes">org.junit.runners.model.InitializationError</outbound>
                <outbound type="feature" confirmed="yes">org.junit.runners.model.RunnerBuilder.runners(java.lang.Class, java.lang.Class[])</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.junit.runners.model.RunnerBuilder.runners(java.lang.Class[])</name>
                <outbound type="class" confirmed="no">java.lang.Class</outbound>
                <outbound type="class" confirmed="no">java.lang.Object</outbound>
                <outbound type="feature" confirmed="no">java.util.ArrayList.ArrayList()</outbound>
                <outbound type="feature" confirmed="no">java.util.ArrayList.add(java.lang.Object)</outbound>
                <outbound type="class" confirmed="no">java.util.List</outbound>
                <outbound type="class" confirmed="yes">org.junit.runner.Runner</outbound>
                <outbound type="feature" confirmed="yes">org.junit.runners.model.RunnerBuilder.safeRunnerForClass(java.lang.Class)</outbound>
                <inbound type="feature" confirmed="yes">org.junit.runners.model.RunnerBuilder.runners(java.lang.Class, java.lang.Class[])</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.junit.runners.model.RunnerBuilder.safeRunnerForClass(java.lang.Class)</name>
                <outbound type="class" confirmed="no">java.lang.Class</outbound>
                <outbound type="class" confirmed="no">java.lang.Throwable</outbound>
                <outbound type="feature" confirmed="yes">org.junit.internal.runners.ErrorReportingRunner.ErrorReportingRunner(java.lang.Class, java.lang.Throwable)</outbound>
                <outbound type="class" confirmed="yes">org.junit.runner.Runner</outbound>
                <outbound type="feature" confirmed="yes">org.junit.runners.model.RunnerBuilder.runnerForClass(java.lang.Class)</outbound>
                <inbound type="feature" confirmed="yes">org.junit.internal.builders.AllDefaultPossibilitiesBuilder.runnerForClass(java.lang.Class)</inbound>
                <inbound type="feature" confirmed="yes">org.junit.runners.model.RunnerBuilder.runners(java.lang.Class[])</inbound>
            </feature>
        </class>
        <class confirmed="yes">
            <name>org.junit.runners.model.RunnerScheduler</name>
            <outbound type="class" confirmed="no">java.lang.Object</outbound>
            <inbound type="class" confirmed="yes">org.junit.experimental.ParallelComputer$1</inbound>
            <inbound type="feature" confirmed="yes">org.junit.experimental.ParallelComputer.parallelize(org.junit.runner.Runner)</inbound>
            <inbound type="class" confirmed="yes">org.junit.runners.ParentRunner$1</inbound>
            <inbound type="feature" confirmed="yes">org.junit.runners.ParentRunner.ParentRunner(java.lang.Class)</inbound>
            <inbound type="feature" confirmed="yes">org.junit.runners.ParentRunner.fScheduler</inbound>
            <inbound type="feature" confirmed="yes">org.junit.runners.ParentRunner.runChildren(org.junit.runner.notification.RunNotifier)</inbound>
            <inbound type="feature" confirmed="yes">org.junit.runners.ParentRunner.setScheduler(org.junit.runners.model.RunnerScheduler)</inbound>
            <feature confirmed="yes">
                <name>org.junit.runners.model.RunnerScheduler.finished()</name>
                <inbound type="feature" confirmed="yes">org.junit.runners.ParentRunner.runChildren(org.junit.runner.notification.RunNotifier)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.junit.runners.model.RunnerScheduler.schedule(java.lang.Runnable)</name>
                <outbound type="class" confirmed="no">java.lang.Runnable</outbound>
                <inbound type="feature" confirmed="yes">org.junit.runners.ParentRunner.runChildren(org.junit.runner.notification.RunNotifier)</inbound>
            </feature>
        </class>
        <class confirmed="yes">
            <name>org.junit.runners.model.Statement</name>
            <outbound type="class" confirmed="no">java.lang.Object</outbound>
            <inbound type="class" confirmed="yes">org.junit.experimental.theories.Theories$TheoryAnchor</inbound>
            <inbound type="class" confirmed="yes">org.junit.experimental.theories.Theories$TheoryAnchor$1$1</inbound>
            <inbound type="feature" confirmed="yes">org.junit.experimental.theories.Theories$TheoryAnchor$1$1.Theories$TheoryAnchor$1$1(org.junit.experimental.theories.Theories$TheoryAnchor$1, org.junit.runners.model.Statement)</inbound>
            <inbound type="feature" confirmed="yes">org.junit.experimental.theories.Theories$TheoryAnchor$1$1.evaluate()</inbound>
            <inbound type="feature" confirmed="yes">org.junit.experimental.theories.Theories$TheoryAnchor$1$1.val$statement</inbound>
            <inbound type="feature" confirmed="yes">org.junit.experimental.theories.Theories$TheoryAnchor$1.methodBlock(org.junit.runners.model.FrameworkMethod)</inbound>
            <inbound type="feature" confirmed="yes">org.junit.experimental.theories.Theories$TheoryAnchor$1.methodInvoker(org.junit.runners.model.FrameworkMethod, java.lang.Object)</inbound>
            <inbound type="class" confirmed="yes">org.junit.experimental.theories.Theories$TheoryAnchor$2</inbound>
            <inbound type="feature" confirmed="yes">org.junit.experimental.theories.Theories$TheoryAnchor.access$100(org.junit.experimental.theories.Theories$TheoryAnchor, org.junit.runners.model.FrameworkMethod, org.junit.experimental.theories.internal.Assignments, java.lang.Object)</inbound>
            <inbound type="feature" confirmed="yes">org.junit.experimental.theories.Theories$TheoryAnchor.methodCompletesWithParameters(org.junit.runners.model.FrameworkMethod, org.junit.experimental.theories.internal.Assignments, java.lang.Object)</inbound>
            <inbound type="feature" confirmed="yes">org.junit.experimental.theories.Theories$TheoryAnchor.runWithCompleteAssignment(org.junit.experimental.theories.internal.Assignments)</inbound>
            <inbound type="feature" confirmed="yes">org.junit.experimental.theories.Theories.methodBlock(org.junit.runners.model.FrameworkMethod)</inbound>
            <inbound type="class" confirmed="yes">org.junit.internal.runners.statements.ExpectException</inbound>
            <inbound type="feature" confirmed="yes">org.junit.internal.runners.statements.ExpectException.ExpectException(org.junit.runners.model.Statement, java.lang.Class)</inbound>
            <inbound type="feature" confirmed="yes">org.junit.internal.runners.statements.ExpectException.evaluate()</inbound>
            <inbound type="feature" confirmed="yes">org.junit.internal.runners.statements.ExpectException.fNext</inbound>
            <inbound type="class" confirmed="yes">org.junit.internal.runners.statements.Fail</inbound>
            <inbound type="class" confirmed="yes">org.junit.internal.runners.statements.FailOnTimeout</inbound>
            <inbound type="feature" confirmed="yes">org.junit.internal.runners.statements.FailOnTimeout$1.run()</inbound>
            <inbound type="feature" confirmed="yes">org.junit.internal.runners.statements.FailOnTimeout.FailOnTimeout(org.junit.runners.model.Statement, long)</inbound>
            <inbound type="feature" confirmed="yes">org.junit.internal.runners.statements.FailOnTimeout.access$000(org.junit.internal.runners.statements.FailOnTimeout)</inbound>
            <inbound type="feature" confirmed="yes">org.junit.internal.runners.statements.FailOnTimeout.fNext</inbound>
            <inbound type="class" confirmed="yes">org.junit.internal.runners.statements.InvokeMethod</inbound>
            <inbound type="class" confirmed="yes">org.junit.internal.runners.statements.RunAfters</inbound>
            <inbound type="feature" confirmed="yes">org.junit.internal.runners.statements.RunAfters.RunAfters(org.junit.runners.model.Statement, java.util.List, java.lang.Object)</inbound>
            <inbound type="feature" confirmed="yes">org.junit.internal.runners.statements.RunAfters.evaluate()</inbound>
            <inbound type="feature" confirmed="yes">org.junit.internal.runners.statements.RunAfters.fNext</inbound>
            <inbound type="class" confirmed="yes">org.junit.internal.runners.statements.RunBefores</inbound>
            <inbound type="feature" confirmed="yes">org.junit.internal.runners.statements.RunBefores.RunBefores(org.junit.runners.model.Statement, java.util.List, java.lang.Object)</inbound>
            <inbound type="feature" confirmed="yes">org.junit.internal.runners.statements.RunBefores.evaluate()</inbound>
            <inbound type="feature" confirmed="yes">org.junit.internal.runners.statements.RunBefores.fNext</inbound>
            <inbound type="class" confirmed="yes">org.junit.rules.ExpectedException$ExpectedExceptionStatement</inbound>
            <inbound type="feature" confirmed="yes">org.junit.rules.ExpectedException$ExpectedExceptionStatement.ExpectedException$ExpectedExceptionStatement(org.junit.rules.ExpectedException, org.junit.runners.model.Statement)</inbound>
            <inbound type="feature" confirmed="yes">org.junit.rules.ExpectedException$ExpectedExceptionStatement.evaluate()</inbound>
            <inbound type="feature" confirmed="yes">org.junit.rules.ExpectedException$ExpectedExceptionStatement.fNext</inbound>
            <inbound type="feature" confirmed="yes">org.junit.rules.ExpectedException.apply(org.junit.runners.model.Statement, org.junit.runner.Description)</inbound>
            <inbound type="class" confirmed="yes">org.junit.rules.ExternalResource$1</inbound>
            <inbound type="feature" confirmed="yes">org.junit.rules.ExternalResource$1.ExternalResource$1(org.junit.rules.ExternalResource, org.junit.runners.model.Statement)</inbound>
            <inbound type="feature" confirmed="yes">org.junit.rules.ExternalResource$1.evaluate()</inbound>
            <inbound type="feature" confirmed="yes">org.junit.rules.ExternalResource$1.val$base</inbound>
            <inbound type="feature" confirmed="yes">org.junit.rules.ExternalResource.apply(org.junit.runners.model.Statement, org.junit.runner.Description)</inbound>
            <inbound type="feature" confirmed="yes">org.junit.rules.ExternalResource.statement(org.junit.runners.model.Statement)</inbound>
            <inbound type="feature" confirmed="yes">org.junit.rules.MethodRule.apply(org.junit.runners.model.Statement, org.junit.runners.model.FrameworkMethod, java.lang.Object)</inbound>
            <inbound type="class" confirmed="yes">org.junit.rules.RunRules</inbound>
            <inbound type="feature" confirmed="yes">org.junit.rules.RunRules.RunRules(org.junit.runners.model.Statement, java.lang.Iterable, org.junit.runner.Description)</inbound>
            <inbound type="feature" confirmed="yes">org.junit.rules.RunRules.applyAll(org.junit.runners.model.Statement, java.lang.Iterable, org.junit.runner.Description)</inbound>
            <inbound type="feature" confirmed="yes">org.junit.rules.RunRules.evaluate()</inbound>
            <inbound type="feature" confirmed="yes">org.junit.rules.RunRules.statement</inbound>
            <inbound type="feature" confirmed="yes">org.junit.rules.TestRule.apply(org.junit.runners.model.Statement, org.junit.runner.Description)</inbound>
            <inbound type="class" confirmed="yes">org.junit.rules.TestWatcher$1</inbound>
            <inbound type="feature" confirmed="yes">org.junit.rules.TestWatcher$1.TestWatcher$1(org.junit.rules.TestWatcher, org.junit.runner.Description, org.junit.runners.model.Statement)</inbound>
            <inbound type="feature" confirmed="yes">org.junit.rules.TestWatcher$1.evaluate()</inbound>
            <inbound type="feature" confirmed="yes">org.junit.rules.TestWatcher$1.val$base</inbound>
            <inbound type="feature" confirmed="yes">org.junit.rules.TestWatcher.apply(org.junit.runners.model.Statement, org.junit.runner.Description)</inbound>
            <inbound type="class" confirmed="yes">org.junit.rules.TestWatchman$1</inbound>
            <inbound type="feature" confirmed="yes">org.junit.rules.TestWatchman$1.TestWatchman$1(org.junit.rules.TestWatchman, org.junit.runners.model.FrameworkMethod, org.junit.runners.model.Statement)</inbound>
            <inbound type="feature" confirmed="yes">org.junit.rules.TestWatchman$1.evaluate()</inbound>
            <inbound type="feature" confirmed="yes">org.junit.rules.TestWatchman$1.val$base</inbound>
            <inbound type="feature" confirmed="yes">org.junit.rules.TestWatchman.apply(org.junit.runners.model.Statement, org.junit.runners.model.FrameworkMethod, java.lang.Object)</inbound>
            <inbound type="feature" confirmed="yes">org.junit.rules.Timeout.apply(org.junit.runners.model.Statement, org.junit.runner.Description)</inbound>
            <inbound type="class" confirmed="yes">org.junit.rules.Verifier$1</inbound>
            <inbound type="feature" confirmed="yes">org.junit.rules.Verifier$1.Verifier$1(org.junit.rules.Verifier, org.junit.runners.model.Statement)</inbound>
            <inbound type="feature" confirmed="yes">org.junit.rules.Verifier$1.evaluate()</inbound>
            <inbound type="feature" confirmed="yes">org.junit.rules.Verifier$1.val$base</inbound>
            <inbound type="feature" confirmed="yes">org.junit.rules.Verifier.apply(org.junit.runners.model.Statement, org.junit.runner.Description)</inbound>
            <inbound type="feature" confirmed="yes">org.junit.runners.BlockJUnit4ClassRunner.methodBlock(org.junit.runners.model.FrameworkMethod)</inbound>
            <inbound type="feature" confirmed="yes">org.junit.runners.BlockJUnit4ClassRunner.methodInvoker(org.junit.runners.model.FrameworkMethod, java.lang.Object)</inbound>
            <inbound type="feature" confirmed="yes">org.junit.runners.BlockJUnit4ClassRunner.possiblyExpectingExceptions(org.junit.runners.model.FrameworkMethod, java.lang.Object, org.junit.runners.model.Statement)</inbound>
            <inbound type="feature" confirmed="yes">org.junit.runners.BlockJUnit4ClassRunner.runChild(org.junit.runners.model.FrameworkMethod, org.junit.runner.notification.RunNotifier)</inbound>
            <inbound type="feature" confirmed="yes">org.junit.runners.BlockJUnit4ClassRunner.withAfters(org.junit.runners.model.FrameworkMethod, java.lang.Object, org.junit.runners.model.Statement)</inbound>
            <inbound type="feature" confirmed="yes">org.junit.runners.BlockJUnit4ClassRunner.withBefores(org.junit.runners.model.FrameworkMethod, java.lang.Object, org.junit.runners.model.Statement)</inbound>
            <inbound type="feature" confirmed="yes">org.junit.runners.BlockJUnit4ClassRunner.withMethodRules(org.junit.runners.model.FrameworkMethod, java.lang.Object, org.junit.runners.model.Statement)</inbound>
            <inbound type="feature" confirmed="yes">org.junit.runners.BlockJUnit4ClassRunner.withPotentialTimeout(org.junit.runners.model.FrameworkMethod, java.lang.Object, org.junit.runners.model.Statement)</inbound>
            <inbound type="feature" confirmed="yes">org.junit.runners.BlockJUnit4ClassRunner.withRules(org.junit.runners.model.FrameworkMethod, java.lang.Object, org.junit.runners.model.Statement)</inbound>
            <inbound type="feature" confirmed="yes">org.junit.runners.BlockJUnit4ClassRunner.withTestRules(org.junit.runners.model.FrameworkMethod, java.lang.Object, org.junit.runners.model.Statement)</inbound>
            <inbound type="feature" confirmed="yes">org.junit.runners.Parameterized$TestClassRunnerForParameters.classBlock(org.junit.runner.notification.RunNotifier)</inbound>
            <inbound type="class" confirmed="yes">org.junit.runners.ParentRunner$2</inbound>
            <inbound type="feature" confirmed="yes">org.junit.runners.ParentRunner.childrenInvoker(org.junit.runner.notification.RunNotifier)</inbound>
            <inbound type="feature" confirmed="yes">org.junit.runners.ParentRunner.classBlock(org.junit.runner.notification.RunNotifier)</inbound>
            <inbound type="feature" confirmed="yes">org.junit.runners.ParentRunner.run(org.junit.runner.notification.RunNotifier)</inbound>
            <inbound type="feature" confirmed="yes">org.junit.runners.ParentRunner.runLeaf(org.junit.runners.model.Statement, org.junit.runner.Description, org.junit.runner.notification.RunNotifier)</inbound>
            <inbound type="feature" confirmed="yes">org.junit.runners.ParentRunner.withAfterClasses(org.junit.runners.model.Statement)</inbound>
            <inbound type="feature" confirmed="yes">org.junit.runners.ParentRunner.withBeforeClasses(org.junit.runners.model.Statement)</inbound>
            <inbound type="feature" confirmed="yes">org.junit.runners.ParentRunner.withClassRules(org.junit.runners.model.Statement)</inbound>
            <feature confirmed="yes">
                <name>org.junit.runners.model.Statement.Statement()</name>
                <outbound type="feature" confirmed="no">java.lang.Object.Object()</outbound>
                <inbound type="feature" confirmed="yes">org.junit.experimental.theories.Theories$TheoryAnchor$1$1.Theories$TheoryAnchor$1$1(org.junit.experimental.theories.Theories$TheoryAnchor$1, org.junit.runners.model.Statement)</inbound>
                <inbound type="feature" confirmed="yes">org.junit.experimental.theories.Theories$TheoryAnchor$2.Theories$TheoryAnchor$2(org.junit.experimental.theories.Theories$TheoryAnchor, org.junit.experimental.theories.internal.Assignments, org.junit.runners.model.FrameworkMethod, java.lang.Object)</inbound>
                <inbound type="feature" confirmed="yes">org.junit.experimental.theories.Theories$TheoryAnchor.Theories$TheoryAnchor(org.junit.runners.model.FrameworkMethod, org.junit.runners.model.TestClass)</inbound>
                <inbound type="feature" confirmed="yes">org.junit.internal.runners.statements.ExpectException.ExpectException(org.junit.runners.model.Statement, java.lang.Class)</inbound>
                <inbound type="feature" confirmed="yes">org.junit.internal.runners.statements.Fail.Fail(java.lang.Throwable)</inbound>
                <inbound type="feature" confirmed="yes">org.junit.internal.runners.statements.FailOnTimeout.FailOnTimeout(org.junit.runners.model.Statement, long)</inbound>
                <inbound type="feature" confirmed="yes">org.junit.internal.runners.statements.InvokeMethod.InvokeMethod(org.junit.runners.model.FrameworkMethod, java.lang.Object)</inbound>
                <inbound type="feature" confirmed="yes">org.junit.internal.runners.statements.RunAfters.RunAfters(org.junit.runners.model.Statement, java.util.List, java.lang.Object)</inbound>
                <inbound type="feature" confirmed="yes">org.junit.internal.runners.statements.RunBefores.RunBefores(org.junit.runners.model.Statement, java.util.List, java.lang.Object)</inbound>
                <inbound type="feature" confirmed="yes">org.junit.rules.ExpectedException$ExpectedExceptionStatement.ExpectedException$ExpectedExceptionStatement(org.junit.rules.ExpectedException, org.junit.runners.model.Statement)</inbound>
                <inbound type="feature" confirmed="yes">org.junit.rules.ExternalResource$1.ExternalResource$1(org.junit.rules.ExternalResource, org.junit.runners.model.Statement)</inbound>
                <inbound type="feature" confirmed="yes">org.junit.rules.RunRules.RunRules(org.junit.runners.model.Statement, java.lang.Iterable, org.junit.runner.Description)</inbound>
                <inbound type="feature" confirmed="yes">org.junit.rules.TestWatcher$1.TestWatcher$1(org.junit.rules.TestWatcher, org.junit.runner.Description, org.junit.runners.model.Statement)</inbound>
                <inbound type="feature" confirmed="yes">org.junit.rules.TestWatchman$1.TestWatchman$1(org.junit.rules.TestWatchman, org.junit.runners.model.FrameworkMethod, org.junit.runners.model.Statement)</inbound>
                <inbound type="feature" confirmed="yes">org.junit.rules.Verifier$1.Verifier$1(org.junit.rules.Verifier, org.junit.runners.model.Statement)</inbound>
                <inbound type="feature" confirmed="yes">org.junit.runners.ParentRunner$2.ParentRunner$2(org.junit.runners.ParentRunner, org.junit.runner.notification.RunNotifier)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.junit.runners.model.Statement.evaluate()</name>
                <outbound type="class" confirmed="no">java.lang.Throwable</outbound>
                <inbound type="feature" confirmed="yes">org.junit.experimental.theories.Theories$TheoryAnchor$1$1.evaluate()</inbound>
                <inbound type="feature" confirmed="yes">org.junit.experimental.theories.Theories$TheoryAnchor.runWithCompleteAssignment(org.junit.experimental.theories.internal.Assignments)</inbound>
                <inbound type="feature" confirmed="yes">org.junit.internal.runners.statements.ExpectException.evaluate()</inbound>
                <inbound type="feature" confirmed="yes">org.junit.internal.runners.statements.FailOnTimeout$1.run()</inbound>
                <inbound type="feature" confirmed="yes">org.junit.internal.runners.statements.RunAfters.evaluate()</inbound>
                <inbound type="feature" confirmed="yes">org.junit.internal.runners.statements.RunBefores.evaluate()</inbound>
                <inbound type="feature" confirmed="yes">org.junit.rules.ExpectedException$ExpectedExceptionStatement.evaluate()</inbound>
                <inbound type="feature" confirmed="yes">org.junit.rules.ExternalResource$1.evaluate()</inbound>
                <inbound type="feature" confirmed="yes">org.junit.rules.RunRules.evaluate()</inbound>
                <inbound type="feature" confirmed="yes">org.junit.rules.TestWatcher$1.evaluate()</inbound>
                <inbound type="feature" confirmed="yes">org.junit.rules.TestWatchman$1.evaluate()</inbound>
                <inbound type="feature" confirmed="yes">org.junit.rules.Verifier$1.evaluate()</inbound>
                <inbound type="feature" confirmed="yes">org.junit.runners.ParentRunner.run(org.junit.runner.notification.RunNotifier)</inbound>
                <inbound type="feature" confirmed="yes">org.junit.runners.ParentRunner.runLeaf(org.junit.runners.model.Statement, org.junit.runner.Description, org.junit.runner.notification.RunNotifier)</inbound>
            </feature>
        </class>
        <class confirmed="yes">
            <name>org.junit.runners.model.TestClass</name>
            <outbound type="class" confirmed="no">java.lang.Object</outbound>
            <inbound type="feature" confirmed="yes">org.junit.experimental.theories.Theories$TheoryAnchor$1.createTest()</inbound>
            <inbound type="feature" confirmed="yes">org.junit.experimental.theories.Theories$TheoryAnchor.Theories$TheoryAnchor(org.junit.runners.model.FrameworkMethod, org.junit.runners.model.TestClass)</inbound>
            <inbound type="feature" confirmed="yes">org.junit.experimental.theories.Theories$TheoryAnchor.evaluate()</inbound>
            <inbound type="feature" confirmed="yes">org.junit.experimental.theories.Theories$TheoryAnchor.fTestClass</inbound>
            <inbound type="feature" confirmed="yes">org.junit.experimental.theories.Theories$TheoryAnchor.getTestClass()</inbound>
            <inbound type="feature" confirmed="yes">org.junit.experimental.theories.Theories$TheoryAnchor.runWithCompleteAssignment(org.junit.experimental.theories.internal.Assignments)</inbound>
            <inbound type="feature" confirmed="yes">org.junit.experimental.theories.Theories.computeTestMethods()</inbound>
            <inbound type="feature" confirmed="yes">org.junit.experimental.theories.Theories.methodBlock(org.junit.runners.model.FrameworkMethod)</inbound>
            <inbound type="feature" confirmed="yes">org.junit.experimental.theories.Theories.validateDataPointFields(java.util.List)</inbound>
            <inbound type="feature" confirmed="yes">org.junit.experimental.theories.internal.AllMembersSupplier.AllMembersSupplier(org.junit.runners.model.TestClass)</inbound>
            <inbound type="feature" confirmed="yes">org.junit.experimental.theories.internal.AllMembersSupplier.addFields(org.junit.experimental.theories.ParameterSignature, java.util.List)</inbound>
            <inbound type="feature" confirmed="yes">org.junit.experimental.theories.internal.AllMembersSupplier.addMultiPointMethods(java.util.List)</inbound>
            <inbound type="feature" confirmed="yes">org.junit.experimental.theories.internal.AllMembersSupplier.addSinglePointMethods(org.junit.experimental.theories.ParameterSignature, java.util.List)</inbound>
            <inbound type="feature" confirmed="yes">org.junit.experimental.theories.internal.AllMembersSupplier.fClass</inbound>
            <inbound type="feature" confirmed="yes">org.junit.experimental.theories.internal.Assignments.Assignments(java.util.List, java.util.List, org.junit.runners.model.TestClass)</inbound>
            <inbound type="feature" confirmed="yes">org.junit.experimental.theories.internal.Assignments.allUnassigned(java.lang.reflect.Method, org.junit.runners.model.TestClass)</inbound>
            <inbound type="feature" confirmed="yes">org.junit.experimental.theories.internal.Assignments.assignNext(org.junit.experimental.theories.PotentialAssignment)</inbound>
            <inbound type="feature" confirmed="yes">org.junit.experimental.theories.internal.Assignments.fClass</inbound>
            <inbound type="feature" confirmed="yes">org.junit.experimental.theories.internal.Assignments.getConstructorParameterCount()</inbound>
            <inbound type="feature" confirmed="yes">org.junit.experimental.theories.internal.Assignments.getSupplier(org.junit.experimental.theories.ParameterSignature)</inbound>
            <inbound type="feature" confirmed="yes">org.junit.internal.runners.rules.RuleFieldValidator.validate(org.junit.runners.model.TestClass, java.util.List)</inbound>
            <inbound type="feature" confirmed="yes">org.junit.runners.BlockJUnit4ClassRunner.computeTestMethods()</inbound>
            <inbound type="feature" confirmed="yes">org.junit.runners.BlockJUnit4ClassRunner.createTest()</inbound>
            <inbound type="feature" confirmed="yes">org.junit.runners.BlockJUnit4ClassRunner.describeChild(org.junit.runners.model.FrameworkMethod)</inbound>
            <inbound type="feature" confirmed="yes">org.junit.runners.BlockJUnit4ClassRunner.getTestRules(java.lang.Object)</inbound>
            <inbound type="feature" confirmed="yes">org.junit.runners.BlockJUnit4ClassRunner.hasOneConstructor()</inbound>
            <inbound type="feature" confirmed="yes">org.junit.runners.BlockJUnit4ClassRunner.rules(java.lang.Object)</inbound>
            <inbound type="feature" confirmed="yes">org.junit.runners.BlockJUnit4ClassRunner.validateFields(java.util.List)</inbound>
            <inbound type="feature" confirmed="yes">org.junit.runners.BlockJUnit4ClassRunner.validateZeroArgConstructor(java.util.List)</inbound>
            <inbound type="feature" confirmed="yes">org.junit.runners.BlockJUnit4ClassRunner.withAfters(org.junit.runners.model.FrameworkMethod, java.lang.Object, org.junit.runners.model.Statement)</inbound>
            <inbound type="feature" confirmed="yes">org.junit.runners.BlockJUnit4ClassRunner.withBefores(org.junit.runners.model.FrameworkMethod, java.lang.Object, org.junit.runners.model.Statement)</inbound>
            <inbound type="feature" confirmed="yes">org.junit.runners.Parameterized$TestClassRunnerForParameters.computeParams()</inbound>
            <inbound type="feature" confirmed="yes">org.junit.runners.Parameterized$TestClassRunnerForParameters.createTest()</inbound>
            <inbound type="feature" confirmed="yes">org.junit.runners.Parameterized.Parameterized(java.lang.Class)</inbound>
            <inbound type="feature" confirmed="yes">org.junit.runners.Parameterized.access$000(org.junit.runners.Parameterized, org.junit.runners.model.TestClass)</inbound>
            <inbound type="feature" confirmed="yes">org.junit.runners.Parameterized.getParametersList(org.junit.runners.model.TestClass)</inbound>
            <inbound type="feature" confirmed="yes">org.junit.runners.Parameterized.getParametersMethod(org.junit.runners.model.TestClass)</inbound>
            <inbound type="feature" confirmed="yes">org.junit.runners.ParentRunner.ParentRunner(java.lang.Class)</inbound>
            <inbound type="feature" confirmed="yes">org.junit.runners.ParentRunner.classRules()</inbound>
            <inbound type="feature" confirmed="yes">org.junit.runners.ParentRunner.fTestClass</inbound>
            <inbound type="feature" confirmed="yes">org.junit.runners.ParentRunner.getDescription()</inbound>
            <inbound type="feature" confirmed="yes">org.junit.runners.ParentRunner.getName()</inbound>
            <inbound type="feature" confirmed="yes">org.junit.runners.ParentRunner.getTestClass()</inbound>
            <inbound type="feature" confirmed="yes">org.junit.runners.ParentRunner.validateClassRules(java.util.List)</inbound>
            <inbound type="feature" confirmed="yes">org.junit.runners.ParentRunner.validatePublicVoidNoArgMethods(java.lang.Class, boolean, java.util.List)</inbound>
            <inbound type="feature" confirmed="yes">org.junit.runners.ParentRunner.withAfterClasses(org.junit.runners.model.Statement)</inbound>
            <inbound type="feature" confirmed="yes">org.junit.runners.ParentRunner.withBeforeClasses(org.junit.runners.model.Statement)</inbound>
            <feature confirmed="yes">
                <name>org.junit.runners.model.TestClass.TestClass(java.lang.Class)</name>
                <outbound type="class" confirmed="no">java.lang.Class</outbound>
                <outbound type="feature" confirmed="no">java.lang.Class.getConstructors()</outbound>
                <outbound type="feature" confirmed="no">java.lang.Class.getDeclaredFields()</outbound>
                <outbound type="feature" confirmed="no">java.lang.Class.getDeclaredMethods()</outbound>
                <outbound type="feature" confirmed="no">java.lang.IllegalArgumentException.IllegalArgumentException(java.lang.String)</outbound>
                <outbound type="class" confirmed="no">java.lang.Object</outbound>
                <outbound type="feature" confirmed="no">java.lang.Object.Object()</outbound>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="class" confirmed="no">java.lang.reflect.Constructor</outbound>
                <outbound type="class" confirmed="no">java.lang.reflect.Field</outbound>
                <outbound type="class" confirmed="no">java.lang.reflect.Method</outbound>
                <outbound type="feature" confirmed="no">java.util.HashMap.HashMap()</outbound>
                <outbound type="class" confirmed="no">java.util.Iterator</outbound>
                <outbound type="feature" confirmed="no">java.util.Iterator.hasNext()</outbound>
                <outbound type="feature" confirmed="no">java.util.Iterator.next()</outbound>
                <outbound type="class" confirmed="no">java.util.List</outbound>
                <outbound type="feature" confirmed="no">java.util.List.iterator()</outbound>
                <outbound type="class" confirmed="no">java.util.Map</outbound>
                <outbound type="feature" confirmed="yes">org.junit.runners.model.FrameworkField.FrameworkField(java.lang.reflect.Field)</outbound>
                <outbound type="class" confirmed="yes">org.junit.runners.model.FrameworkMember</outbound>
                <outbound type="feature" confirmed="yes">org.junit.runners.model.FrameworkMethod.FrameworkMethod(java.lang.reflect.Method)</outbound>
                <outbound type="feature" confirmed="yes">org.junit.runners.model.TestClass.addToAnnotationLists(org.junit.runners.model.FrameworkMember, java.util.Map)</outbound>
                <outbound type="feature" confirmed="yes">org.junit.runners.model.TestClass.fClass</outbound>
                <outbound type="feature" confirmed="yes">org.junit.runners.model.TestClass.fFieldsForAnnotations</outbound>
                <outbound type="feature" confirmed="yes">org.junit.runners.model.TestClass.fMethodsForAnnotations</outbound>
                <outbound type="feature" confirmed="yes">org.junit.runners.model.TestClass.getSuperClasses(java.lang.Class)</outbound>
                <inbound type="feature" confirmed="yes">org.junit.runners.ParentRunner.ParentRunner(java.lang.Class)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.junit.runners.model.TestClass.addToAnnotationLists(org.junit.runners.model.FrameworkMember, java.util.Map)</name>
                <outbound type="class" confirmed="no">java.lang.Class</outbound>
                <outbound type="class" confirmed="no">java.lang.Object</outbound>
                <outbound type="class" confirmed="no">java.lang.annotation.Annotation</outbound>
                <outbound type="feature" confirmed="no">java.lang.annotation.Annotation.annotationType()</outbound>
                <outbound type="class" confirmed="no">java.util.List</outbound>
                <outbound type="feature" confirmed="no">java.util.List.add(int, java.lang.Object)</outbound>
                <outbound type="feature" confirmed="no">java.util.List.add(java.lang.Object)</outbound>
                <outbound type="class" confirmed="no">java.util.Map</outbound>
                <outbound type="class" confirmed="yes">org.junit.runners.model.FrameworkMember</outbound>
                <outbound type="feature" confirmed="yes">org.junit.runners.model.FrameworkMember.getAnnotations()</outbound>
                <outbound type="feature" confirmed="yes">org.junit.runners.model.FrameworkMember.isShadowedBy(java.util.List)</outbound>
                <outbound type="feature" confirmed="yes">org.junit.runners.model.TestClass.getAnnotatedMembers(java.util.Map, java.lang.Class)</outbound>
                <outbound type="feature" confirmed="yes">org.junit.runners.model.TestClass.runsTopToBottom(java.lang.Class)</outbound>
                <inbound type="feature" confirmed="yes">org.junit.runners.model.TestClass.TestClass(java.lang.Class)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.junit.runners.model.TestClass.fClass</name>
                <outbound type="class" confirmed="no">java.lang.Class</outbound>
                <inbound type="feature" confirmed="yes">org.junit.runners.model.TestClass.TestClass(java.lang.Class)</inbound>
                <inbound type="feature" confirmed="yes">org.junit.runners.model.TestClass.getAnnotations()</inbound>
                <inbound type="feature" confirmed="yes">org.junit.runners.model.TestClass.getJavaClass()</inbound>
                <inbound type="feature" confirmed="yes">org.junit.runners.model.TestClass.getName()</inbound>
                <inbound type="feature" confirmed="yes">org.junit.runners.model.TestClass.getOnlyConstructor()</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.junit.runners.model.TestClass.fFieldsForAnnotations</name>
                <outbound type="class" confirmed="no">java.util.Map</outbound>
                <inbound type="feature" confirmed="yes">org.junit.runners.model.TestClass.TestClass(java.lang.Class)</inbound>
                <inbound type="feature" confirmed="yes">org.junit.runners.model.TestClass.getAnnotatedFields(java.lang.Class)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.junit.runners.model.TestClass.fMethodsForAnnotations</name>
                <outbound type="class" confirmed="no">java.util.Map</outbound>
                <inbound type="feature" confirmed="yes">org.junit.runners.model.TestClass.TestClass(java.lang.Class)</inbound>
                <inbound type="feature" confirmed="yes">org.junit.runners.model.TestClass.getAnnotatedMethods(java.lang.Class)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.junit.runners.model.TestClass.getAnnotatedFieldValues(java.lang.Object, java.lang.Class, java.lang.Class)</name>
                <outbound type="class" confirmed="no">java.lang.Class</outbound>
                <outbound type="feature" confirmed="no">java.lang.Class.cast(java.lang.Object)</outbound>
                <outbound type="feature" confirmed="no">java.lang.Class.isInstance(java.lang.Object)</outbound>
                <outbound type="class" confirmed="no">java.lang.IllegalAccessException</outbound>
                <outbound type="class" confirmed="no">java.lang.Object</outbound>
                <outbound type="feature" confirmed="no">java.lang.RuntimeException.RuntimeException(java.lang.String, java.lang.Throwable)</outbound>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="class" confirmed="no">java.lang.Throwable</outbound>
                <outbound type="feature" confirmed="no">java.util.ArrayList.ArrayList()</outbound>
                <outbound type="class" confirmed="no">java.util.Iterator</outbound>
                <outbound type="feature" confirmed="no">java.util.Iterator.hasNext()</outbound>
                <outbound type="feature" confirmed="no">java.util.Iterator.next()</outbound>
                <outbound type="class" confirmed="no">java.util.List</outbound>
                <outbound type="feature" confirmed="no">java.util.List.add(java.lang.Object)</outbound>
                <outbound type="feature" confirmed="no">java.util.List.iterator()</outbound>
                <outbound type="class" confirmed="yes">org.junit.runners.model.FrameworkField</outbound>
                <outbound type="feature" confirmed="yes">org.junit.runners.model.FrameworkField.get(java.lang.Object)</outbound>
                <outbound type="feature" confirmed="yes">org.junit.runners.model.TestClass.getAnnotatedFields(java.lang.Class)</outbound>
                <inbound type="feature" confirmed="yes">org.junit.runners.BlockJUnit4ClassRunner.getTestRules(java.lang.Object)</inbound>
                <inbound type="feature" confirmed="yes">org.junit.runners.BlockJUnit4ClassRunner.rules(java.lang.Object)</inbound>
                <inbound type="feature" confirmed="yes">org.junit.runners.ParentRunner.classRules()</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.junit.runners.model.TestClass.getAnnotatedFields(java.lang.Class)</name>
                <outbound type="class" confirmed="no">java.lang.Class</outbound>
                <outbound type="class" confirmed="no">java.util.List</outbound>
                <outbound type="class" confirmed="no">java.util.Map</outbound>
                <outbound type="feature" confirmed="yes">org.junit.runners.model.TestClass.fFieldsForAnnotations</outbound>
                <outbound type="feature" confirmed="yes">org.junit.runners.model.TestClass.getAnnotatedMembers(java.util.Map, java.lang.Class)</outbound>
                <inbound type="feature" confirmed="yes">org.junit.internal.runners.rules.RuleFieldValidator.validate(org.junit.runners.model.TestClass, java.util.List)</inbound>
                <inbound type="feature" confirmed="yes">org.junit.runners.model.TestClass.getAnnotatedFieldValues(java.lang.Object, java.lang.Class, java.lang.Class)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.junit.runners.model.TestClass.getAnnotatedMembers(java.util.Map, java.lang.Class)</name>
                <outbound type="class" confirmed="no">java.lang.Class</outbound>
                <outbound type="class" confirmed="no">java.lang.Object</outbound>
                <outbound type="feature" confirmed="no">java.util.ArrayList.ArrayList()</outbound>
                <outbound type="class" confirmed="no">java.util.List</outbound>
                <outbound type="class" confirmed="no">java.util.Map</outbound>
                <outbound type="feature" confirmed="no">java.util.Map.containsKey(java.lang.Object)</outbound>
                <outbound type="feature" confirmed="no">java.util.Map.get(java.lang.Object)</outbound>
                <outbound type="feature" confirmed="no">java.util.Map.put(java.lang.Object, java.lang.Object)</outbound>
                <inbound type="feature" confirmed="yes">org.junit.runners.model.TestClass.addToAnnotationLists(org.junit.runners.model.FrameworkMember, java.util.Map)</inbound>
                <inbound type="feature" confirmed="yes">org.junit.runners.model.TestClass.getAnnotatedFields(java.lang.Class)</inbound>
                <inbound type="feature" confirmed="yes">org.junit.runners.model.TestClass.getAnnotatedMethods(java.lang.Class)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.junit.runners.model.TestClass.getAnnotatedMethods(java.lang.Class)</name>
                <outbound type="class" confirmed="no">java.lang.Class</outbound>
                <outbound type="class" confirmed="no">java.util.List</outbound>
                <outbound type="class" confirmed="no">java.util.Map</outbound>
                <outbound type="feature" confirmed="yes">org.junit.runners.model.TestClass.fMethodsForAnnotations</outbound>
                <outbound type="feature" confirmed="yes">org.junit.runners.model.TestClass.getAnnotatedMembers(java.util.Map, java.lang.Class)</outbound>
                <inbound type="feature" confirmed="yes">org.junit.experimental.theories.Theories.computeTestMethods()</inbound>
                <inbound type="feature" confirmed="yes">org.junit.experimental.theories.internal.AllMembersSupplier.addMultiPointMethods(java.util.List)</inbound>
                <inbound type="feature" confirmed="yes">org.junit.experimental.theories.internal.AllMembersSupplier.addSinglePointMethods(org.junit.experimental.theories.ParameterSignature, java.util.List)</inbound>
                <inbound type="feature" confirmed="yes">org.junit.runners.BlockJUnit4ClassRunner.computeTestMethods()</inbound>
                <inbound type="feature" confirmed="yes">org.junit.runners.BlockJUnit4ClassRunner.withAfters(org.junit.runners.model.FrameworkMethod, java.lang.Object, org.junit.runners.model.Statement)</inbound>
                <inbound type="feature" confirmed="yes">org.junit.runners.BlockJUnit4ClassRunner.withBefores(org.junit.runners.model.FrameworkMethod, java.lang.Object, org.junit.runners.model.Statement)</inbound>
                <inbound type="feature" confirmed="yes">org.junit.runners.Parameterized.getParametersMethod(org.junit.runners.model.TestClass)</inbound>
                <inbound type="feature" confirmed="yes">org.junit.runners.ParentRunner.validatePublicVoidNoArgMethods(java.lang.Class, boolean, java.util.List)</inbound>
                <inbound type="feature" confirmed="yes">org.junit.runners.ParentRunner.withAfterClasses(org.junit.runners.model.Statement)</inbound>
                <inbound type="feature" confirmed="yes">org.junit.runners.ParentRunner.withBeforeClasses(org.junit.runners.model.Statement)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.junit.runners.model.TestClass.getAnnotations()</name>
                <outbound type="class" confirmed="no">java.lang.Class</outbound>
                <outbound type="feature" confirmed="no">java.lang.Class.getAnnotations()</outbound>
                <outbound type="class" confirmed="no">java.lang.annotation.Annotation</outbound>
                <outbound type="feature" confirmed="yes">org.junit.runners.model.TestClass.fClass</outbound>
                <inbound type="feature" confirmed="yes">org.junit.runners.ParentRunner.getDescription()</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.junit.runners.model.TestClass.getJavaClass()</name>
                <outbound type="class" confirmed="no">java.lang.Class</outbound>
                <outbound type="feature" confirmed="yes">org.junit.runners.model.TestClass.fClass</outbound>
                <inbound type="feature" confirmed="yes">org.junit.experimental.theories.Theories$TheoryAnchor.runWithCompleteAssignment(org.junit.experimental.theories.internal.Assignments)</inbound>
                <inbound type="feature" confirmed="yes">org.junit.experimental.theories.Theories.validateDataPointFields(java.util.List)</inbound>
                <inbound type="feature" confirmed="yes">org.junit.experimental.theories.internal.AllMembersSupplier.addFields(org.junit.experimental.theories.ParameterSignature, java.util.List)</inbound>
                <inbound type="feature" confirmed="yes">org.junit.runners.BlockJUnit4ClassRunner.describeChild(org.junit.runners.model.FrameworkMethod)</inbound>
                <inbound type="feature" confirmed="yes">org.junit.runners.BlockJUnit4ClassRunner.hasOneConstructor()</inbound>
                <inbound type="feature" confirmed="yes">org.junit.runners.Parameterized.Parameterized(java.lang.Class)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.junit.runners.model.TestClass.getName()</name>
                <outbound type="class" confirmed="no">java.lang.Class</outbound>
                <outbound type="feature" confirmed="no">java.lang.Class.getName()</outbound>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="feature" confirmed="yes">org.junit.runners.model.TestClass.fClass</outbound>
                <inbound type="feature" confirmed="yes">org.junit.runners.Parameterized$TestClassRunnerForParameters.computeParams()</inbound>
                <inbound type="feature" confirmed="yes">org.junit.runners.Parameterized.getParametersMethod(org.junit.runners.model.TestClass)</inbound>
                <inbound type="feature" confirmed="yes">org.junit.runners.ParentRunner.getName()</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.junit.runners.model.TestClass.getOnlyConstructor()</name>
                <outbound type="class" confirmed="no">java.lang.Class</outbound>
                <outbound type="feature" confirmed="no">java.lang.Class.getConstructors()</outbound>
                <outbound type="class" confirmed="no">java.lang.reflect.Constructor</outbound>
                <outbound type="feature" confirmed="yes">org.junit.Assert.assertEquals(long, long)</outbound>
                <outbound type="feature" confirmed="yes">org.junit.runners.model.TestClass.fClass</outbound>
                <inbound type="feature" confirmed="yes">org.junit.experimental.theories.Theories$TheoryAnchor$1.createTest()</inbound>
                <inbound type="feature" confirmed="yes">org.junit.experimental.theories.internal.Assignments.allUnassigned(java.lang.reflect.Method, org.junit.runners.model.TestClass)</inbound>
                <inbound type="feature" confirmed="yes">org.junit.experimental.theories.internal.Assignments.getConstructorParameterCount()</inbound>
                <inbound type="feature" confirmed="yes">org.junit.runners.BlockJUnit4ClassRunner.createTest()</inbound>
                <inbound type="feature" confirmed="yes">org.junit.runners.BlockJUnit4ClassRunner.validateZeroArgConstructor(java.util.List)</inbound>
                <inbound type="feature" confirmed="yes">org.junit.runners.Parameterized$TestClassRunnerForParameters.createTest()</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.junit.runners.model.TestClass.getSuperClasses(java.lang.Class)</name>
                <outbound type="class" confirmed="no">java.lang.Class</outbound>
                <outbound type="feature" confirmed="no">java.lang.Class.getSuperclass()</outbound>
                <outbound type="class" confirmed="no">java.lang.Object</outbound>
                <outbound type="feature" confirmed="no">java.util.ArrayList.ArrayList()</outbound>
                <outbound type="feature" confirmed="no">java.util.ArrayList.add(java.lang.Object)</outbound>
                <outbound type="class" confirmed="no">java.util.List</outbound>
                <inbound type="feature" confirmed="yes">org.junit.runners.model.TestClass.TestClass(java.lang.Class)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.junit.runners.model.TestClass.runsTopToBottom(java.lang.Class)</name>
                <outbound type="class" confirmed="no">java.lang.Class</outbound>
                <outbound type="class" confirmed="no">java.lang.Object</outbound>
                <outbound type="feature" confirmed="no">java.lang.Object.equals(java.lang.Object)</outbound>
                <outbound type="class" confirmed="yes">org.junit.Before</outbound>
                <outbound type="class" confirmed="yes">org.junit.BeforeClass</outbound>
                <inbound type="feature" confirmed="yes">org.junit.runners.model.TestClass.addToAnnotationLists(org.junit.runners.model.FrameworkMember, java.util.Map)</inbound>
            </feature>
        </class>
    </package>
</dependencies>
