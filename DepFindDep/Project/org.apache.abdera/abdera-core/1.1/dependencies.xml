<?xml version="1.0" encoding="utf-8" ?>

<!DOCTYPE dependencies SYSTEM "http://depfind.sourceforge.net/dtd/dependencies.dtd">

<dependencies>
    <package confirmed="no">
        <name>java.io</name>
        <class confirmed="no">
            <name>java.io.BufferedReader</name>
            <inbound type="feature" confirmed="yes">org.apache.abdera.util.Discover$LineReaderLoaderIterator.Discover$LineReaderLoaderIterator(java.lang.ClassLoader, java.io.InputStream, boolean, java.lang.Object[])</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.util.Discover$LineReaderLoaderIterator.buf</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.util.Discover$LineReaderLoaderIterator.readNext()</inbound>
            <feature confirmed="no">
                <name>java.io.BufferedReader.BufferedReader(java.io.Reader)</name>
                <inbound type="feature" confirmed="yes">org.apache.abdera.util.Discover$LineReaderLoaderIterator.Discover$LineReaderLoaderIterator(java.lang.ClassLoader, java.io.InputStream, boolean, java.lang.Object[])</inbound>
            </feature>
            <feature confirmed="no">
                <name>java.io.BufferedReader.readLine()</name>
                <inbound type="feature" confirmed="yes">org.apache.abdera.util.Discover$LineReaderLoaderIterator.readNext()</inbound>
            </feature>
        </class>
        <class confirmed="no">
            <name>java.io.ByteArrayInputStream</name>
            <feature confirmed="no">
                <name>java.io.ByteArrayInputStream.ByteArrayInputStream(byte[])</name>
                <inbound type="feature" confirmed="yes">org.apache.abdera.util.AbderaDataSource.getInputStream()</inbound>
            </feature>
        </class>
        <class confirmed="no">
            <name>java.io.ByteArrayOutputStream</name>
            <feature confirmed="no">
                <name>java.io.ByteArrayOutputStream.ByteArrayOutputStream()</name>
                <inbound type="feature" confirmed="yes">org.apache.abdera.util.AbderaDataSource.read(org.apache.abdera.model.Base)</inbound>
                <inbound type="feature" confirmed="yes">org.apache.abdera.util.AbstractStreamWriter.writeElementText(java.io.InputStream)</inbound>
            </feature>
            <feature confirmed="no">
                <name>java.io.ByteArrayOutputStream.toByteArray()</name>
                <inbound type="feature" confirmed="yes">org.apache.abdera.util.AbderaDataSource.read(org.apache.abdera.model.Base)</inbound>
                <inbound type="feature" confirmed="yes">org.apache.abdera.util.AbstractStreamWriter.writeElementText(java.io.InputStream)</inbound>
            </feature>
            <feature confirmed="no">
                <name>java.io.ByteArrayOutputStream.write(byte[], int, int)</name>
                <inbound type="feature" confirmed="yes">org.apache.abdera.util.AbstractStreamWriter.writeElementText(java.io.InputStream)</inbound>
            </feature>
        </class>
        <class confirmed="no">
            <name>java.io.Closeable</name>
            <inbound type="class" confirmed="yes">org.apache.abdera.writer.StreamWriter</inbound>
        </class>
        <class confirmed="no">
            <name>java.io.IOException</name>
            <inbound type="feature" confirmed="yes">org.apache.abdera.factory.StreamBuilder.close()</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.factory.StreamBuilder.writeContent(org.apache.abdera.model.Content$Type, java.io.InputStream)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.factory.StreamBuilder.writeContent(org.apache.abdera.model.Content$Type, javax.activation.DataHandler)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.factory.StreamBuilder.writeElementText(java.io.InputStream)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.factory.StreamBuilder.writeElementText(javax.activation.DataHandler)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.model.Base.writeTo(java.io.OutputStream)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.model.Base.writeTo(java.io.OutputStream, org.apache.abdera.writer.WriterOptions)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.model.Base.writeTo(java.io.Writer)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.model.Base.writeTo(java.io.Writer, org.apache.abdera.writer.WriterOptions)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.model.Base.writeTo(java.lang.String, java.io.OutputStream)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.model.Base.writeTo(java.lang.String, java.io.OutputStream, org.apache.abdera.writer.WriterOptions)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.model.Base.writeTo(java.lang.String, java.io.Writer)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.model.Base.writeTo(java.lang.String, java.io.Writer, org.apache.abdera.writer.WriterOptions)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.model.Base.writeTo(org.apache.abdera.writer.Writer, java.io.OutputStream)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.model.Base.writeTo(org.apache.abdera.writer.Writer, java.io.OutputStream, org.apache.abdera.writer.WriterOptions)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.model.Base.writeTo(org.apache.abdera.writer.Writer, java.io.Writer)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.model.Base.writeTo(org.apache.abdera.writer.Writer, java.io.Writer, org.apache.abdera.writer.WriterOptions)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.model.ElementWrapper.writeTo(java.io.OutputStream)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.model.ElementWrapper.writeTo(java.io.OutputStream, org.apache.abdera.writer.WriterOptions)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.model.ElementWrapper.writeTo(java.io.Writer)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.model.ElementWrapper.writeTo(java.io.Writer, org.apache.abdera.writer.WriterOptions)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.model.ElementWrapper.writeTo(java.lang.String, java.io.OutputStream)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.model.ElementWrapper.writeTo(java.lang.String, java.io.OutputStream, org.apache.abdera.writer.WriterOptions)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.model.ElementWrapper.writeTo(java.lang.String, java.io.Writer)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.model.ElementWrapper.writeTo(java.lang.String, java.io.Writer, org.apache.abdera.writer.WriterOptions)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.model.ElementWrapper.writeTo(org.apache.abdera.writer.Writer, java.io.OutputStream)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.model.ElementWrapper.writeTo(org.apache.abdera.writer.Writer, java.io.OutputStream, org.apache.abdera.writer.WriterOptions)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.model.ElementWrapper.writeTo(org.apache.abdera.writer.Writer, java.io.Writer)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.model.ElementWrapper.writeTo(org.apache.abdera.writer.Writer, java.io.Writer, org.apache.abdera.writer.WriterOptions)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.model.Entry.getContentStream()</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.util.AbderaDataSource.getInputStream()</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.util.AbderaDataSource.getOutputStream()</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.util.AbderaDataSource.read(org.apache.abdera.model.Base)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.util.AbderaResult.getOutputStream()</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.util.AbderaSource.getInputStream()</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.util.AbstractStreamWriter.append(char)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.util.AbstractStreamWriter.append(java.lang.CharSequence)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.util.AbstractStreamWriter.append(java.lang.CharSequence, int, int)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.util.AbstractStreamWriter.writeContent(org.apache.abdera.model.Content$Type, java.io.InputStream)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.util.AbstractStreamWriter.writeContent(org.apache.abdera.model.Content$Type, javax.activation.DataHandler)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.util.AbstractStreamWriter.writeElementText(java.io.InputStream)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.util.AbstractStreamWriter.writeElementText(javax.activation.DataHandler)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.util.AbstractWriter.finishCompressedOutputStream(java.io.OutputStream, org.apache.abdera.writer.WriterOptions)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.util.AbstractWriter.getCompressedOutputStream(java.io.OutputStream, org.apache.abdera.writer.WriterOptions)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.util.AbstractWriter.write(org.apache.abdera.model.Base)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.util.AbstractWriter.writeTo(org.apache.abdera.model.Base, java.io.OutputStream)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.util.AbstractWriter.writeTo(org.apache.abdera.model.Base, java.io.Writer)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.util.AbstractWriter.writeTo(org.apache.abdera.model.Base, java.nio.channels.WritableByteChannel)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.util.AbstractWriter.writeTo(org.apache.abdera.model.Base, java.nio.channels.WritableByteChannel, org.apache.abdera.writer.WriterOptions)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.util.Discover.locateResourceAsStream(java.lang.String, java.lang.ClassLoader, java.lang.Class)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.util.Discover.locateResources(java.lang.String, java.lang.ClassLoader, java.lang.Class)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.util.filter.AbstractListParseFilter.readObject(java.io.ObjectInputStream)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.util.filter.AbstractListParseFilter.writeObject(java.io.ObjectOutputStream)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.writer.StreamWriter.writeContent(org.apache.abdera.model.Content$Type, java.io.InputStream)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.writer.StreamWriter.writeContent(org.apache.abdera.model.Content$Type, javax.activation.DataHandler)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.writer.StreamWriter.writeElementText(java.io.InputStream)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.writer.StreamWriter.writeElementText(javax.activation.DataHandler)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.writer.Writer.write(org.apache.abdera.model.Base)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.writer.Writer.write(org.apache.abdera.model.Base, org.apache.abdera.writer.WriterOptions)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.writer.Writer.writeTo(org.apache.abdera.model.Base, java.io.OutputStream)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.writer.Writer.writeTo(org.apache.abdera.model.Base, java.io.OutputStream, org.apache.abdera.writer.WriterOptions)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.writer.Writer.writeTo(org.apache.abdera.model.Base, java.io.Writer)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.writer.Writer.writeTo(org.apache.abdera.model.Base, java.io.Writer, org.apache.abdera.writer.WriterOptions)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.writer.Writer.writeTo(org.apache.abdera.model.Base, java.nio.channels.WritableByteChannel)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.writer.Writer.writeTo(org.apache.abdera.model.Base, java.nio.channels.WritableByteChannel, org.apache.abdera.writer.WriterOptions)</inbound>
        </class>
        <class confirmed="no">
            <name>java.io.InputStream</name>
            <inbound type="feature" confirmed="yes">org.apache.abdera.factory.StreamBuilder.writeContent(org.apache.abdera.model.Content$Type, java.io.InputStream)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.factory.StreamBuilder.writeElementText(java.io.InputStream)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.model.Entry.getContentStream()</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.model.Entry.setContent(java.io.InputStream)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.model.Entry.setContent(java.io.InputStream, java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.model.TextValue.getInputStream()</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.parser.Parser.parse(java.io.InputStream)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.parser.Parser.parse(java.io.InputStream, java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.parser.Parser.parse(java.io.InputStream, java.lang.String, org.apache.abdera.parser.ParserOptions)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.parser.Parser.parse(java.io.InputStream, org.apache.abdera.parser.ParserOptions)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.util.AbderaDataSource.getInputStream()</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.util.AbderaResult.getDocument()</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.util.AbderaSource.getInputStream()</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.util.AbderaSource.getReader()</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.util.AbderaSource.setInputStream(java.io.InputStream)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.util.AbstractParser.parse(java.io.InputStream)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.util.AbstractParser.parse(java.io.InputStream, java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.util.AbstractParser.parse(java.io.InputStream, java.lang.String, org.apache.abdera.parser.ParserOptions)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.util.AbstractParser.parse(java.io.InputStream, org.apache.abdera.parser.ParserOptions)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.util.AbstractStreamWriter.writeContent(org.apache.abdera.model.Content$Type, java.io.InputStream)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.util.AbstractStreamWriter.writeElementText(java.io.InputStream)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.util.AbstractStreamWriter.writeElementText(javax.activation.DataHandler)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.util.Discover$DefaultLoader.init(boolean)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.util.Discover$DefaultLoaderIterator.Discover$DefaultLoaderIterator(java.lang.ClassLoader, java.io.InputStream, boolean, java.lang.Object[])</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.util.Discover$LineReaderLoaderIterator.Discover$LineReaderLoaderIterator(java.lang.ClassLoader, java.io.InputStream, boolean, java.lang.Object[])</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.util.Discover.locateResourceAsStream(java.lang.String, java.lang.ClassLoader, java.lang.Class)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.util.XmlRestrictedCharReader.XmlRestrictedCharReader(java.io.InputStream)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.util.XmlRestrictedCharReader.XmlRestrictedCharReader(java.io.InputStream, char)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.util.XmlRestrictedCharReader.XmlRestrictedCharReader(java.io.InputStream, java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.util.XmlRestrictedCharReader.XmlRestrictedCharReader(java.io.InputStream, java.lang.String, char)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.util.XmlRestrictedCharReader.XmlRestrictedCharReader(java.io.InputStream, java.lang.String, org.apache.abdera.util.XmlUtil$XMLVersion)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.util.XmlRestrictedCharReader.XmlRestrictedCharReader(java.io.InputStream, java.lang.String, org.apache.abdera.util.XmlUtil$XMLVersion, char)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.util.XmlRestrictedCharReader.XmlRestrictedCharReader(java.io.InputStream, org.apache.abdera.util.XmlUtil$XMLVersion)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.util.XmlRestrictedCharReader.XmlRestrictedCharReader(java.io.InputStream, org.apache.abdera.util.XmlUtil$XMLVersion, char)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.writer.StreamWriter.writeContent(org.apache.abdera.model.Content$Type, java.io.InputStream)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.writer.StreamWriter.writeElementText(java.io.InputStream)</inbound>
            <feature confirmed="no">
                <name>java.io.InputStream.read(byte[])</name>
                <inbound type="feature" confirmed="yes">org.apache.abdera.util.AbstractStreamWriter.writeElementText(java.io.InputStream)</inbound>
            </feature>
        </class>
        <class confirmed="no">
            <name>java.io.InputStreamReader</name>
            <feature confirmed="no">
                <name>java.io.InputStreamReader.InputStreamReader(java.io.InputStream)</name>
                <inbound type="feature" confirmed="yes">org.apache.abdera.util.AbderaSource.getReader()</inbound>
                <inbound type="feature" confirmed="yes">org.apache.abdera.util.AbstractParser.parse(java.io.InputStream, java.lang.String, org.apache.abdera.parser.ParserOptions)</inbound>
                <inbound type="feature" confirmed="yes">org.apache.abdera.util.XmlRestrictedCharReader.XmlRestrictedCharReader(java.io.InputStream)</inbound>
                <inbound type="feature" confirmed="yes">org.apache.abdera.util.XmlRestrictedCharReader.XmlRestrictedCharReader(java.io.InputStream, char)</inbound>
                <inbound type="feature" confirmed="yes">org.apache.abdera.util.XmlRestrictedCharReader.XmlRestrictedCharReader(java.io.InputStream, org.apache.abdera.util.XmlUtil$XMLVersion)</inbound>
                <inbound type="feature" confirmed="yes">org.apache.abdera.util.XmlRestrictedCharReader.XmlRestrictedCharReader(java.io.InputStream, org.apache.abdera.util.XmlUtil$XMLVersion, char)</inbound>
            </feature>
            <feature confirmed="no">
                <name>java.io.InputStreamReader.InputStreamReader(java.io.InputStream, java.lang.String)</name>
                <inbound type="feature" confirmed="yes">org.apache.abdera.util.Discover$LineReaderLoaderIterator.Discover$LineReaderLoaderIterator(java.lang.ClassLoader, java.io.InputStream, boolean, java.lang.Object[])</inbound>
                <inbound type="feature" confirmed="yes">org.apache.abdera.util.XmlRestrictedCharReader.XmlRestrictedCharReader(java.io.InputStream, java.lang.String)</inbound>
                <inbound type="feature" confirmed="yes">org.apache.abdera.util.XmlRestrictedCharReader.XmlRestrictedCharReader(java.io.InputStream, java.lang.String, char)</inbound>
                <inbound type="feature" confirmed="yes">org.apache.abdera.util.XmlRestrictedCharReader.XmlRestrictedCharReader(java.io.InputStream, java.lang.String, org.apache.abdera.util.XmlUtil$XMLVersion)</inbound>
                <inbound type="feature" confirmed="yes">org.apache.abdera.util.XmlRestrictedCharReader.XmlRestrictedCharReader(java.io.InputStream, java.lang.String, org.apache.abdera.util.XmlUtil$XMLVersion, char)</inbound>
            </feature>
        </class>
        <class confirmed="no">
            <name>java.io.ObjectInputStream</name>
            <inbound type="feature" confirmed="yes">org.apache.abdera.util.filter.AbstractListParseFilter.readObject(java.io.ObjectInputStream)</inbound>
            <feature confirmed="no">
                <name>java.io.ObjectInputStream.defaultReadObject()</name>
                <inbound type="feature" confirmed="yes">org.apache.abdera.util.filter.AbstractListParseFilter.readObject(java.io.ObjectInputStream)</inbound>
            </feature>
            <feature confirmed="no">
                <name>java.io.ObjectInputStream.readInt()</name>
                <inbound type="feature" confirmed="yes">org.apache.abdera.util.filter.AbstractListParseFilter.readObject(java.io.ObjectInputStream)</inbound>
            </feature>
            <feature confirmed="no">
                <name>java.io.ObjectInputStream.readObject()</name>
                <inbound type="feature" confirmed="yes">org.apache.abdera.util.filter.AbstractListParseFilter.readObject(java.io.ObjectInputStream)</inbound>
            </feature>
        </class>
        <class confirmed="no">
            <name>java.io.ObjectOutputStream</name>
            <inbound type="feature" confirmed="yes">org.apache.abdera.util.filter.AbstractListParseFilter.writeObject(java.io.ObjectOutputStream)</inbound>
            <feature confirmed="no">
                <name>java.io.ObjectOutputStream.defaultWriteObject()</name>
                <inbound type="feature" confirmed="yes">org.apache.abdera.util.filter.AbstractListParseFilter.writeObject(java.io.ObjectOutputStream)</inbound>
            </feature>
            <feature confirmed="no">
                <name>java.io.ObjectOutputStream.writeInt(int)</name>
                <inbound type="feature" confirmed="yes">org.apache.abdera.util.filter.AbstractListParseFilter.writeObject(java.io.ObjectOutputStream)</inbound>
            </feature>
            <feature confirmed="no">
                <name>java.io.ObjectOutputStream.writeObject(java.lang.Object)</name>
                <inbound type="feature" confirmed="yes">org.apache.abdera.util.filter.AbstractListParseFilter.writeObject(java.io.ObjectOutputStream)</inbound>
            </feature>
        </class>
        <class confirmed="no">
            <name>java.io.OutputStream</name>
            <inbound type="feature" confirmed="yes">org.apache.abdera.factory.StreamBuilder.setOutputStream(java.io.OutputStream)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.factory.StreamBuilder.setOutputStream(java.io.OutputStream, java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.model.Base.writeTo(java.io.OutputStream)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.model.Base.writeTo(java.io.OutputStream, org.apache.abdera.writer.WriterOptions)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.model.Base.writeTo(java.lang.String, java.io.OutputStream)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.model.Base.writeTo(java.lang.String, java.io.OutputStream, org.apache.abdera.writer.WriterOptions)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.model.Base.writeTo(org.apache.abdera.writer.Writer, java.io.OutputStream)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.model.Base.writeTo(org.apache.abdera.writer.Writer, java.io.OutputStream, org.apache.abdera.writer.WriterOptions)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.model.ElementWrapper.writeTo(java.io.OutputStream)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.model.ElementWrapper.writeTo(java.io.OutputStream, org.apache.abdera.writer.WriterOptions)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.model.ElementWrapper.writeTo(java.lang.String, java.io.OutputStream)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.model.ElementWrapper.writeTo(java.lang.String, java.io.OutputStream, org.apache.abdera.writer.WriterOptions)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.model.ElementWrapper.writeTo(org.apache.abdera.writer.Writer, java.io.OutputStream)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.model.ElementWrapper.writeTo(org.apache.abdera.writer.Writer, java.io.OutputStream, org.apache.abdera.writer.WriterOptions)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.util.AbderaDataSource.getOutputStream()</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.util.AbderaDataSource.read(org.apache.abdera.model.Base)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.util.AbderaResult.getOutputStream()</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.util.AbderaResult.getWriter()</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.util.AbderaResult.setOutputStream(java.io.OutputStream)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.util.AbderaSource.getInputStream()</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.util.AbstractStreamWriter.setChannel(java.nio.channels.WritableByteChannel)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.util.AbstractWriter.finishCompressedOutputStream(java.io.OutputStream, org.apache.abdera.writer.WriterOptions)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.util.AbstractWriter.getCompressedOutputStream(java.io.OutputStream, org.apache.abdera.writer.WriterOptions)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.util.AbstractWriter.writeTo(org.apache.abdera.model.Base, java.io.OutputStream)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.writer.StreamWriter.setOutputStream(java.io.OutputStream)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.writer.StreamWriter.setOutputStream(java.io.OutputStream, java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.writer.Writer.writeTo(org.apache.abdera.model.Base, java.io.OutputStream)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.writer.Writer.writeTo(org.apache.abdera.model.Base, java.io.OutputStream, org.apache.abdera.writer.WriterOptions)</inbound>
        </class>
        <class confirmed="no">
            <name>java.io.OutputStreamWriter</name>
            <feature confirmed="no">
                <name>java.io.OutputStreamWriter.OutputStreamWriter(java.io.OutputStream)</name>
                <inbound type="feature" confirmed="yes">org.apache.abdera.util.AbderaResult.getWriter()</inbound>
            </feature>
        </class>
        <class confirmed="no">
            <name>java.io.PipedInputStream</name>
            <inbound type="feature" confirmed="yes">org.apache.abdera.util.AbderaResult.getDocument()</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.util.AbderaResult.getOutputStream()</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.util.AbderaResult.pipein</inbound>
            <feature confirmed="no">
                <name>java.io.PipedInputStream.PipedInputStream(java.io.PipedOutputStream)</name>
                <inbound type="feature" confirmed="yes">org.apache.abdera.util.AbderaResult.getOutputStream()</inbound>
                <inbound type="feature" confirmed="yes">org.apache.abdera.util.AbderaSource.getInputStream()</inbound>
            </feature>
        </class>
        <class confirmed="no">
            <name>java.io.PipedOutputStream</name>
            <inbound type="feature" confirmed="yes">org.apache.abdera.util.AbderaResult.getOutputStream()</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.util.AbderaResult.pipeout</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.util.AbderaSource.getInputStream()</inbound>
            <feature confirmed="no">
                <name>java.io.PipedOutputStream.PipedOutputStream()</name>
                <inbound type="feature" confirmed="yes">org.apache.abdera.util.AbderaResult.getOutputStream()</inbound>
                <inbound type="feature" confirmed="yes">org.apache.abdera.util.AbderaSource.getInputStream()</inbound>
            </feature>
            <feature confirmed="no">
                <name>java.io.PipedOutputStream.close()</name>
                <inbound type="feature" confirmed="yes">org.apache.abdera.util.AbderaSource.getInputStream()</inbound>
            </feature>
            <feature confirmed="no">
                <name>java.io.PipedOutputStream.flush()</name>
                <inbound type="feature" confirmed="yes">org.apache.abdera.util.AbderaSource.getInputStream()</inbound>
            </feature>
        </class>
        <class confirmed="no">
            <name>java.io.Reader</name>
            <inbound type="feature" confirmed="yes">org.apache.abdera.parser.Parser.parse(java.io.Reader)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.parser.Parser.parse(java.io.Reader, java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.parser.Parser.parse(java.io.Reader, java.lang.String, org.apache.abdera.parser.ParserOptions)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.parser.Parser.parse(java.io.Reader, org.apache.abdera.parser.ParserOptions)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.util.AbderaSource.getReader()</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.util.AbderaSource.setReader(java.io.Reader)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.util.AbstractParser.parse(java.io.InputStream, java.lang.String, org.apache.abdera.parser.ParserOptions)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.util.AbstractParser.parse(java.io.Reader)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.util.AbstractParser.parse(java.io.Reader, java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.util.AbstractParser.parse(java.io.Reader, org.apache.abdera.parser.ParserOptions)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.util.AbstractParser.parse(java.nio.channels.ReadableByteChannel, java.lang.String, org.apache.abdera.parser.ParserOptions)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.util.Discover$LineReaderLoaderIterator.Discover$LineReaderLoaderIterator(java.lang.ClassLoader, java.io.InputStream, boolean, java.lang.Object[])</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.util.XmlRestrictedCharReader.XmlRestrictedCharReader(java.io.InputStream)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.util.XmlRestrictedCharReader.XmlRestrictedCharReader(java.io.InputStream, char)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.util.XmlRestrictedCharReader.XmlRestrictedCharReader(java.io.InputStream, java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.util.XmlRestrictedCharReader.XmlRestrictedCharReader(java.io.InputStream, java.lang.String, char)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.util.XmlRestrictedCharReader.XmlRestrictedCharReader(java.io.InputStream, java.lang.String, org.apache.abdera.util.XmlUtil$XMLVersion)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.util.XmlRestrictedCharReader.XmlRestrictedCharReader(java.io.InputStream, java.lang.String, org.apache.abdera.util.XmlUtil$XMLVersion, char)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.util.XmlRestrictedCharReader.XmlRestrictedCharReader(java.io.InputStream, org.apache.abdera.util.XmlUtil$XMLVersion)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.util.XmlRestrictedCharReader.XmlRestrictedCharReader(java.io.InputStream, org.apache.abdera.util.XmlUtil$XMLVersion, char)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.util.XmlRestrictedCharReader.XmlRestrictedCharReader(java.io.Reader)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.util.XmlRestrictedCharReader.XmlRestrictedCharReader(java.io.Reader, char)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.util.XmlRestrictedCharReader.XmlRestrictedCharReader(java.io.Reader, org.apache.abdera.util.XmlUtil$XMLVersion)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.util.XmlRestrictedCharReader.XmlRestrictedCharReader(java.io.Reader, org.apache.abdera.util.XmlUtil$XMLVersion, char)</inbound>
        </class>
        <class confirmed="no">
            <name>java.io.Serializable</name>
            <inbound type="class" confirmed="yes">org.apache.abdera.filter.ParseFilter</inbound>
            <inbound type="class" confirmed="yes">org.apache.abdera.model.AtomDate</inbound>
            <inbound type="class" confirmed="yes">org.apache.abdera.model.Document</inbound>
            <inbound type="class" confirmed="yes">org.apache.abdera.util.Configuration</inbound>
            <inbound type="class" confirmed="yes">org.apache.abdera.util.EntityTag</inbound>
        </class>
        <class confirmed="no">
            <name>java.io.UnsupportedEncodingException</name>
            <inbound type="feature" confirmed="yes">org.apache.abdera.util.EntityTag.generate(java.lang.String[])</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.util.XmlRestrictedCharReader.XmlRestrictedCharReader(java.io.InputStream, java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.util.XmlRestrictedCharReader.XmlRestrictedCharReader(java.io.InputStream, java.lang.String, char)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.util.XmlRestrictedCharReader.XmlRestrictedCharReader(java.io.InputStream, java.lang.String, org.apache.abdera.util.XmlUtil$XMLVersion)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.util.XmlRestrictedCharReader.XmlRestrictedCharReader(java.io.InputStream, java.lang.String, org.apache.abdera.util.XmlUtil$XMLVersion, char)</inbound>
        </class>
        <class confirmed="no">
            <name>java.io.Writer</name>
            <inbound type="feature" confirmed="yes">org.apache.abdera.factory.StreamBuilder.setWriter(java.io.Writer)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.model.Base.writeTo(java.io.Writer)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.model.Base.writeTo(java.io.Writer, org.apache.abdera.writer.WriterOptions)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.model.Base.writeTo(java.lang.String, java.io.Writer)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.model.Base.writeTo(java.lang.String, java.io.Writer, org.apache.abdera.writer.WriterOptions)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.model.Base.writeTo(org.apache.abdera.writer.Writer, java.io.Writer)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.model.Base.writeTo(org.apache.abdera.writer.Writer, java.io.Writer, org.apache.abdera.writer.WriterOptions)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.model.ElementWrapper.writeTo(java.io.Writer)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.model.ElementWrapper.writeTo(java.io.Writer, org.apache.abdera.writer.WriterOptions)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.model.ElementWrapper.writeTo(java.lang.String, java.io.Writer)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.model.ElementWrapper.writeTo(java.lang.String, java.io.Writer, org.apache.abdera.writer.WriterOptions)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.model.ElementWrapper.writeTo(org.apache.abdera.writer.Writer, java.io.Writer)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.model.ElementWrapper.writeTo(org.apache.abdera.writer.Writer, java.io.Writer, org.apache.abdera.writer.WriterOptions)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.util.AbderaResult.getWriter()</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.util.AbderaResult.setWriter(java.io.Writer)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.util.AbstractStreamWriter.setChannel(java.nio.channels.WritableByteChannel, java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.util.AbstractWriter.writeTo(org.apache.abdera.model.Base, java.io.Writer)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.util.AbstractWriter.writeTo(org.apache.abdera.model.Base, java.nio.channels.WritableByteChannel, org.apache.abdera.writer.WriterOptions)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.writer.StreamWriter.setWriter(java.io.Writer)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.writer.Writer.writeTo(org.apache.abdera.model.Base, java.io.Writer)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.writer.Writer.writeTo(org.apache.abdera.model.Base, java.io.Writer, org.apache.abdera.writer.WriterOptions)</inbound>
        </class>
    </package>
    <package confirmed="no">
        <name>java.lang</name>
        <class confirmed="no">
            <name>java.lang.Appendable</name>
            <inbound type="feature" confirmed="yes">org.apache.abdera.util.AbstractStreamWriter.append(char)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.util.AbstractStreamWriter.append(java.lang.CharSequence)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.util.AbstractStreamWriter.append(java.lang.CharSequence, int, int)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.util.AbstractStreamWriter.writeElementText(java.lang.String, java.lang.Object[])</inbound>
            <inbound type="class" confirmed="yes">org.apache.abdera.writer.StreamWriter</inbound>
        </class>
        <class confirmed="no">
            <name>java.lang.AssertionError</name>
            <feature confirmed="no">
                <name>java.lang.AssertionError.AssertionError()</name>
                <inbound type="feature" confirmed="yes">org.apache.abdera.util.filter.AbstractListParseFilter.writeObject(java.io.ObjectOutputStream)</inbound>
            </feature>
            <feature confirmed="no">
                <name>java.lang.AssertionError.AssertionError(java.lang.Object)</name>
                <inbound type="feature" confirmed="yes">org.apache.abdera.model.AtomDate.clone()</inbound>
            </feature>
        </class>
        <class confirmed="no">
            <name>java.lang.CharSequence</name>
            <inbound type="feature" confirmed="yes">org.apache.abdera.model.AtomDate.parse(java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.protocol.util.CacheControlUtil$CacheControlParser.CacheControlUtil$CacheControlParser(java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.util.AbstractStreamWriter.append(java.lang.CharSequence)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.util.AbstractStreamWriter.append(java.lang.CharSequence, int, int)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.util.EntityTag.parse(java.lang.String)</inbound>
            <feature confirmed="no">
                <name>java.lang.CharSequence.subSequence(int, int)</name>
                <inbound type="feature" confirmed="yes">org.apache.abdera.util.AbstractStreamWriter.append(java.lang.CharSequence, int, int)</inbound>
            </feature>
        </class>
        <class confirmed="no">
            <name>java.lang.Class</name>
            <inbound type="feature" confirmed="yes">org.apache.abdera.factory.ExtensionFactoryMap.listExtensionFactories()</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.model.Content$Type.valueOf(java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.model.ExtensibleElement.getExtension(java.lang.Class)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.model.ExtensibleElementWrapper.getExtension(java.lang.Class)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.model.Text$Type.valueOf(java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.protocol.Response$ResponseType.valueOf(java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.protocol.error.ErrorExtensionFactory.ErrorExtensionFactory()</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.protocol.error.ProtocolException.equals(java.lang.Object)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.protocol.util.CacheControlUtil$Directive.valueOf(java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.protocol.util.CacheControlUtil$Idempotent.valueOf(java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.util.AbderaConfiguration.addStreamWriter(java.lang.Class)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.util.AbderaConfiguration.getName(java.lang.Class)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.util.AbderaConfiguration.initStreamWriters()</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.util.AbderaConfiguration.static {}</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.util.AbderaDataSource.AbderaDataSource(org.apache.abdera.model.Base)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.util.AbstractExtensionFactory.addImpl(javax.xml.namespace.QName, java.lang.Class)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.util.AbstractExtensionFactory.getElementWrapper(org.apache.abdera.model.Element)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.util.Configuration.addStreamWriter(java.lang.Class)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.util.Discover$DefaultLoader.init(boolean)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.util.Discover.getClass(java.lang.ClassLoader, java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.util.Discover.load(java.lang.ClassLoader, java.lang.String, boolean, java.lang.Object[])</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.util.Discover.locateResource(java.lang.String, java.lang.ClassLoader, java.lang.Class)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.util.Discover.locateResourceAsStream(java.lang.String, java.lang.ClassLoader, java.lang.Class)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.util.Discover.locateResources(java.lang.String, java.lang.ClassLoader, java.lang.Class)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.util.EntityTag.equals(java.lang.Object)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.util.XmlUtil$XMLVersion.valueOf(java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.util.filter.CompoundParseFilter$Condition.valueOf(java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.util.filter.SafeContentWhiteListParseFilter$xhtml_attributes.valueOf(java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.util.filter.SafeContentWhiteListParseFilter$xhtml_elements.valueOf(java.lang.String)</inbound>
            <feature confirmed="no">
                <name>java.lang.Class.desiredAssertionStatus()</name>
                <inbound type="feature" confirmed="yes">org.apache.abdera.util.filter.AbstractListParseFilter.static {}</inbound>
            </feature>
            <feature confirmed="no">
                <name>java.lang.Class.getClassLoader()</name>
                <inbound type="feature" confirmed="yes">org.apache.abdera.util.Discover.getClass(java.lang.ClassLoader, java.lang.String)</inbound>
                <inbound type="feature" confirmed="yes">org.apache.abdera.util.Discover.locateResource(java.lang.String, java.lang.ClassLoader, java.lang.Class)</inbound>
                <inbound type="feature" confirmed="yes">org.apache.abdera.util.Discover.locateResources(java.lang.String, java.lang.ClassLoader, java.lang.Class)</inbound>
            </feature>
            <feature confirmed="no">
                <name>java.lang.Class.getConstructor(java.lang.Class[])</name>
                <inbound type="feature" confirmed="yes">org.apache.abdera.util.AbstractExtensionFactory.getElementWrapper(org.apache.abdera.model.Element)</inbound>
                <inbound type="feature" confirmed="yes">org.apache.abdera.util.Discover.load(java.lang.ClassLoader, java.lang.String, boolean, java.lang.Object[])</inbound>
            </feature>
            <feature confirmed="no">
                <name>java.lang.Class.getField(java.lang.String)</name>
                <inbound type="feature" confirmed="yes">org.apache.abdera.util.AbderaConfiguration.getName(java.lang.Class)</inbound>
            </feature>
            <feature confirmed="no">
                <name>java.lang.Class.getName()</name>
                <inbound type="feature" confirmed="yes">org.apache.abdera.factory.ExtensionFactoryMap.listExtensionFactories()</inbound>
                <inbound type="feature" confirmed="yes">org.apache.abdera.util.AbderaDataSource.AbderaDataSource(org.apache.abdera.model.Base)</inbound>
            </feature>
            <feature confirmed="no">
                <name>java.lang.Class.getResource(java.lang.String)</name>
                <inbound type="feature" confirmed="yes">org.apache.abdera.util.Discover.locateResource(java.lang.String, java.lang.ClassLoader, java.lang.Class)</inbound>
            </feature>
            <feature confirmed="no">
                <name>java.lang.Class.newInstance()</name>
                <inbound type="feature" confirmed="yes">org.apache.abdera.util.Discover.load(java.lang.ClassLoader, java.lang.String, boolean, java.lang.Object[])</inbound>
            </feature>
        </class>
        <class confirmed="no">
            <name>java.lang.ClassLoader</name>
            <inbound type="feature" confirmed="yes">org.apache.abdera.util.AbderaConfiguration.getBundle(java.util.Locale)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.util.Discover$DefaultLoader.Discover$DefaultLoader(java.lang.String, boolean, java.lang.Object[])</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.util.Discover$DefaultLoader.Discover$DefaultLoader(java.lang.String, boolean, java.lang.Object[], java.lang.ClassLoader)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.util.Discover$DefaultLoader.init(boolean)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.util.Discover$DefaultLoader.loader</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.util.Discover$DefaultLoaderIterator.Discover$DefaultLoaderIterator(java.lang.ClassLoader, java.io.InputStream, boolean, java.lang.Object[])</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.util.Discover$DefaultLoaderIterator.create(java.lang.String, java.lang.Object[])</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.util.Discover$LineReaderLoaderIterator.Discover$LineReaderLoaderIterator(java.lang.ClassLoader, java.io.InputStream, boolean, java.lang.Object[])</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.util.Discover$LoaderIterator.Discover$LoaderIterator(java.lang.ClassLoader)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.util.Discover$LoaderIterator.cl</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.util.Discover.access$000()</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.util.Discover.access$100(java.lang.ClassLoader, java.lang.String, boolean, java.lang.Object[])</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.util.Discover.getClass(java.lang.ClassLoader, java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.util.Discover.getLoader()</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.util.Discover.load(java.lang.ClassLoader, java.lang.String, boolean, java.lang.Object[])</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.util.Discover.locate(java.lang.String, boolean, java.lang.ClassLoader, java.lang.Object[])</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.util.Discover.locate(java.lang.String, java.lang.ClassLoader, java.lang.Object[])</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.util.Discover.locate(java.lang.String, java.lang.String, java.lang.ClassLoader, java.lang.Object[])</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.util.Discover.locate(java.lang.String, java.lang.String, java.lang.Object[])</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.util.Discover.locateResource(java.lang.String, java.lang.ClassLoader, java.lang.Class)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.util.Discover.locateResourceAsStream(java.lang.String, java.lang.ClassLoader, java.lang.Class)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.util.Discover.locateResources(java.lang.String, java.lang.ClassLoader, java.lang.Class)</inbound>
            <feature confirmed="no">
                <name>java.lang.ClassLoader.getResource(java.lang.String)</name>
                <inbound type="feature" confirmed="yes">org.apache.abdera.util.Discover.locateResource(java.lang.String, java.lang.ClassLoader, java.lang.Class)</inbound>
            </feature>
            <feature confirmed="no">
                <name>java.lang.ClassLoader.getResources(java.lang.String)</name>
                <inbound type="feature" confirmed="yes">org.apache.abdera.util.Discover.locateResources(java.lang.String, java.lang.ClassLoader, java.lang.Class)</inbound>
            </feature>
            <feature confirmed="no">
                <name>java.lang.ClassLoader.loadClass(java.lang.String)</name>
                <inbound type="feature" confirmed="yes">org.apache.abdera.util.Discover.getClass(java.lang.ClassLoader, java.lang.String)</inbound>
            </feature>
        </class>
        <class confirmed="no">
            <name>java.lang.ClassNotFoundException</name>
            <inbound type="feature" confirmed="yes">org.apache.abdera.util.Discover.getClass(java.lang.ClassLoader, java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.util.filter.AbstractListParseFilter.readObject(java.io.ObjectInputStream)</inbound>
        </class>
        <class confirmed="no">
            <name>java.lang.CloneNotSupportedException</name>
            <inbound type="feature" confirmed="yes">org.apache.abdera.filter.ParseFilter.clone()</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.model.AtomDate.clone()</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.model.ElementWrapper.clone()</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.parser.ParserOptions.clone()</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.util.AbderaConfiguration.clone()</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.util.AbstractParser.getDefaultParserOptions()</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.util.AbstractParser.setDefaultParserOptions(org.apache.abdera.parser.ParserOptions)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.util.AbstractParserOptions.clone()</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.util.AbstractWriter.getDefaultWriterOptions()</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.util.AbstractWriter.setDefaultWriterOptions(org.apache.abdera.writer.WriterOptions)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.util.AbstractWriterOptions.clone()</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.util.EntityTag.clone()</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.util.filter.AbstractListParseFilter.clone()</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.util.filter.AbstractParseFilter.clone()</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.util.filter.CompoundParseFilter.clone()</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.util.filter.SafeContentWhiteListParseFilter.clone()</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.writer.WriterOptions.clone()</inbound>
        </class>
        <class confirmed="no">
            <name>java.lang.Cloneable</name>
            <inbound type="class" confirmed="yes">org.apache.abdera.filter.ParseFilter</inbound>
            <inbound type="class" confirmed="yes">org.apache.abdera.model.AtomDate</inbound>
            <inbound type="class" confirmed="yes">org.apache.abdera.model.Base</inbound>
            <inbound type="class" confirmed="yes">org.apache.abdera.parser.ParserOptions</inbound>
            <inbound type="class" confirmed="yes">org.apache.abdera.util.AbstractParserOptions</inbound>
            <inbound type="class" confirmed="yes">org.apache.abdera.util.Configuration</inbound>
            <inbound type="class" confirmed="yes">org.apache.abdera.util.EntityTag</inbound>
            <inbound type="class" confirmed="yes">org.apache.abdera.util.filter.AbstractListParseFilter</inbound>
            <inbound type="class" confirmed="yes">org.apache.abdera.writer.WriterOptions</inbound>
        </class>
        <class confirmed="no">
            <name>java.lang.Comparable</name>
            <inbound type="class" confirmed="yes">org.apache.abdera.util.EntityTag</inbound>
        </class>
        <class confirmed="no">
            <name>java.lang.Double</name>
            <feature confirmed="no">
                <name>java.lang.Double.toString(double)</name>
                <inbound type="feature" confirmed="yes">org.apache.abdera.util.AbstractStreamWriter.writeAttribute(java.lang.String, java.lang.String, java.lang.String, double)</inbound>
                <inbound type="feature" confirmed="yes">org.apache.abdera.util.AbstractStreamWriter.writeElementText(double)</inbound>
            </feature>
        </class>
        <class confirmed="no">
            <name>java.lang.Enum</name>
            <inbound type="class" confirmed="yes">org.apache.abdera.model.Content$Type</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.model.Content$Type.valueOf(java.lang.String)</inbound>
            <inbound type="class" confirmed="yes">org.apache.abdera.model.Text$Type</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.model.Text$Type.valueOf(java.lang.String)</inbound>
            <inbound type="class" confirmed="yes">org.apache.abdera.protocol.Response$ResponseType</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.protocol.Response$ResponseType.valueOf(java.lang.String)</inbound>
            <inbound type="class" confirmed="yes">org.apache.abdera.protocol.util.CacheControlUtil$Directive</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.protocol.util.CacheControlUtil$Directive.valueOf(java.lang.String)</inbound>
            <inbound type="class" confirmed="yes">org.apache.abdera.protocol.util.CacheControlUtil$Idempotent</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.protocol.util.CacheControlUtil$Idempotent.valueOf(java.lang.String)</inbound>
            <inbound type="class" confirmed="yes">org.apache.abdera.util.XmlUtil$XMLVersion</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.util.XmlUtil$XMLVersion.valueOf(java.lang.String)</inbound>
            <inbound type="class" confirmed="yes">org.apache.abdera.util.filter.CompoundParseFilter$Condition</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.util.filter.CompoundParseFilter$Condition.valueOf(java.lang.String)</inbound>
            <inbound type="class" confirmed="yes">org.apache.abdera.util.filter.SafeContentWhiteListParseFilter$xhtml_attributes</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.util.filter.SafeContentWhiteListParseFilter$xhtml_attributes.valueOf(java.lang.String)</inbound>
            <inbound type="class" confirmed="yes">org.apache.abdera.util.filter.SafeContentWhiteListParseFilter$xhtml_elements</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.util.filter.SafeContentWhiteListParseFilter$xhtml_elements.valueOf(java.lang.String)</inbound>
            <feature confirmed="no">
                <name>java.lang.Enum.Enum(java.lang.String, int)</name>
                <inbound type="feature" confirmed="yes">org.apache.abdera.model.Content$Type.Content$Type(java.lang.String, int)</inbound>
                <inbound type="feature" confirmed="yes">org.apache.abdera.model.Text$Type.Text$Type(java.lang.String, int)</inbound>
                <inbound type="feature" confirmed="yes">org.apache.abdera.protocol.Response$ResponseType.Response$ResponseType(java.lang.String, int)</inbound>
                <inbound type="feature" confirmed="yes">org.apache.abdera.protocol.util.CacheControlUtil$Directive.CacheControlUtil$Directive(java.lang.String, int)</inbound>
                <inbound type="feature" confirmed="yes">org.apache.abdera.protocol.util.CacheControlUtil$Idempotent.CacheControlUtil$Idempotent(java.lang.String, int)</inbound>
                <inbound type="feature" confirmed="yes">org.apache.abdera.util.XmlUtil$XMLVersion.XmlUtil$XMLVersion(java.lang.String, int)</inbound>
                <inbound type="feature" confirmed="yes">org.apache.abdera.util.filter.CompoundParseFilter$Condition.CompoundParseFilter$Condition(java.lang.String, int)</inbound>
                <inbound type="feature" confirmed="yes">org.apache.abdera.util.filter.SafeContentWhiteListParseFilter$xhtml_attributes.SafeContentWhiteListParseFilter$xhtml_attributes(java.lang.String, int)</inbound>
                <inbound type="feature" confirmed="yes">org.apache.abdera.util.filter.SafeContentWhiteListParseFilter$xhtml_elements.SafeContentWhiteListParseFilter$xhtml_elements(java.lang.String, int)</inbound>
            </feature>
            <feature confirmed="no">
                <name>java.lang.Enum.valueOf(java.lang.Class, java.lang.String)</name>
                <inbound type="feature" confirmed="yes">org.apache.abdera.model.Content$Type.valueOf(java.lang.String)</inbound>
                <inbound type="feature" confirmed="yes">org.apache.abdera.model.Text$Type.valueOf(java.lang.String)</inbound>
                <inbound type="feature" confirmed="yes">org.apache.abdera.protocol.Response$ResponseType.valueOf(java.lang.String)</inbound>
                <inbound type="feature" confirmed="yes">org.apache.abdera.protocol.util.CacheControlUtil$Directive.valueOf(java.lang.String)</inbound>
                <inbound type="feature" confirmed="yes">org.apache.abdera.protocol.util.CacheControlUtil$Idempotent.valueOf(java.lang.String)</inbound>
                <inbound type="feature" confirmed="yes">org.apache.abdera.util.XmlUtil$XMLVersion.valueOf(java.lang.String)</inbound>
                <inbound type="feature" confirmed="yes">org.apache.abdera.util.filter.CompoundParseFilter$Condition.valueOf(java.lang.String)</inbound>
                <inbound type="feature" confirmed="yes">org.apache.abdera.util.filter.SafeContentWhiteListParseFilter$xhtml_attributes.valueOf(java.lang.String)</inbound>
                <inbound type="feature" confirmed="yes">org.apache.abdera.util.filter.SafeContentWhiteListParseFilter$xhtml_elements.valueOf(java.lang.String)</inbound>
            </feature>
        </class>
        <class confirmed="no">
            <name>java.lang.Exception</name>
            <inbound type="feature" confirmed="yes">org.apache.abdera.protocol.util.CacheControlUtil$Directive.select(java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.protocol.util.CacheControlUtil.isIdempotent(java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.util.AbderaConfiguration.getBundle(java.util.Locale)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.util.AbderaConfiguration.getConfigurationOption(java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.util.AbderaConfiguration.getDefault()</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.util.AbderaConfiguration.getName(java.lang.Class)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.util.AbstractExtensionFactory.getElementWrapper(org.apache.abdera.model.Element)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.util.Discover.access$100(java.lang.ClassLoader, java.lang.String, boolean, java.lang.Object[])</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.util.Discover.load(java.lang.ClassLoader, java.lang.String, boolean, java.lang.Object[])</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.util.EntityTag.attemptParse(java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.util.MimeTypeHelper.compare(java.lang.String, java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.util.MimeTypeHelper.createWildcard()</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.util.MimeTypeHelper.getCharset(java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.util.MimeTypeHelper.isEntry(java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.util.MimeTypeHelper.isFeed(java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.util.MimeTypeHelper.isMatch(java.lang.String, java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.util.MimeTypeHelper.isMatch(javax.activation.MimeType, javax.activation.MimeType, boolean)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.util.MimeTypeHelper.isXml(java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.util.filter.SafeContentWhiteListParseFilter.acceptable(javax.xml.namespace.QName)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.util.filter.SafeContentWhiteListParseFilter.acceptable(javax.xml.namespace.QName, javax.xml.namespace.QName)</inbound>
        </class>
        <class confirmed="no">
            <name>java.lang.IllegalArgumentException</name>
            <feature confirmed="no">
                <name>java.lang.IllegalArgumentException.IllegalArgumentException(java.lang.String)</name>
                <inbound type="feature" confirmed="yes">org.apache.abdera.model.AtomDate.parse(java.lang.String)</inbound>
                <inbound type="feature" confirmed="yes">org.apache.abdera.util.EntityTag.EntityTag(java.lang.String, boolean)</inbound>
                <inbound type="feature" confirmed="yes">org.apache.abdera.util.EntityTag.parse(java.lang.String)</inbound>
            </feature>
        </class>
        <class confirmed="no">
            <name>java.lang.Integer</name>
            <feature confirmed="no">
                <name>java.lang.Integer.parseInt(java.lang.String)</name>
                <inbound type="feature" confirmed="yes">org.apache.abdera.model.AtomDate.parse(java.lang.String)</inbound>
                <inbound type="feature" confirmed="yes">org.apache.abdera.protocol.error.Error.getCode()</inbound>
            </feature>
            <feature confirmed="no">
                <name>java.lang.Integer.toString(int)</name>
                <inbound type="feature" confirmed="yes">org.apache.abdera.protocol.error.Error.setCode(int)</inbound>
                <inbound type="feature" confirmed="yes">org.apache.abdera.util.AbstractStreamWriter.writeAttribute(java.lang.String, java.lang.String, java.lang.String, int)</inbound>
                <inbound type="feature" confirmed="yes">org.apache.abdera.util.AbstractStreamWriter.writeElementText(int)</inbound>
            </feature>
        </class>
        <class confirmed="no">
            <name>java.lang.Iterable</name>
            <inbound type="class" confirmed="yes">org.apache.abdera.model.Element</inbound>
            <inbound type="class" confirmed="yes">org.apache.abdera.protocol.util.CacheControlUtil$CacheControlParser</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.util.AbderaConfiguration.initNamedParsers()</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.util.AbderaConfiguration.initNamedWriters()</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.util.AbderaConfiguration.initStreamWriters()</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.util.AbderaConfiguration.loadExtensionFactories()</inbound>
            <inbound type="class" confirmed="yes">org.apache.abdera.util.Discover$DefaultLoader</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.util.Discover$DefaultLoader.init(boolean)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.util.Discover.locate(java.lang.String, boolean, java.lang.ClassLoader, java.lang.Object[])</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.util.Discover.locate(java.lang.String, boolean, java.lang.Object[])</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.util.Discover.locate(java.lang.String, java.lang.ClassLoader, java.lang.Object[])</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.util.Discover.locate(java.lang.String, java.lang.Iterable)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.util.Discover.locate(java.lang.String, java.lang.Object[])</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.util.Discover.locate(java.lang.String, java.lang.String, java.lang.ClassLoader, java.lang.Object[])</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.util.MultiIterator.MultiIterator(java.lang.Iterable)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.util.ServiceUtil.loadExtensionFactories()</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.util.ServiceUtil.loadimpls(java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.util.ServiceUtil.loadimpls(java.lang.String, boolean)</inbound>
            <feature confirmed="no">
                <name>java.lang.Iterable.iterator()</name>
                <inbound type="feature" confirmed="yes">org.apache.abdera.util.AbderaConfiguration.initNamedParsers()</inbound>
                <inbound type="feature" confirmed="yes">org.apache.abdera.util.AbderaConfiguration.initNamedWriters()</inbound>
                <inbound type="feature" confirmed="yes">org.apache.abdera.util.AbderaConfiguration.initStreamWriters()</inbound>
                <inbound type="feature" confirmed="yes">org.apache.abdera.util.AbderaConfiguration.loadExtensionFactories()</inbound>
                <inbound type="feature" confirmed="yes">org.apache.abdera.util.Discover.locate(java.lang.String, java.lang.Iterable)</inbound>
                <inbound type="feature" confirmed="yes">org.apache.abdera.util.Discover.locate(java.lang.String, java.lang.String, java.lang.ClassLoader, java.lang.Object[])</inbound>
                <inbound type="feature" confirmed="yes">org.apache.abdera.util.MultiIterator.MultiIterator(java.lang.Iterable)</inbound>
                <inbound type="feature" confirmed="yes">org.apache.abdera.util.ServiceUtil.loadExtensionFactories()</inbound>
            </feature>
        </class>
        <class confirmed="no">
            <name>java.lang.Long</name>
            <inbound type="feature" confirmed="yes">org.apache.abdera.model.DateTimeWrapper.getTime()</inbound>
            <feature confirmed="no">
                <name>java.lang.Long.longValue()</name>
                <inbound type="feature" confirmed="yes">org.apache.abdera.model.DateTimeWrapper.getTime()</inbound>
            </feature>
            <feature confirmed="no">
                <name>java.lang.Long.parseLong(java.lang.String)</name>
                <inbound type="feature" confirmed="yes">org.apache.abdera.protocol.util.AbstractResponse.getAge()</inbound>
                <inbound type="feature" confirmed="yes">org.apache.abdera.protocol.util.AbstractResponse.getContentLength()</inbound>
                <inbound type="feature" confirmed="yes">org.apache.abdera.protocol.util.CacheControlUtil.value(java.lang.String)</inbound>
            </feature>
            <feature confirmed="no">
                <name>java.lang.Long.toString(long)</name>
                <inbound type="feature" confirmed="yes">org.apache.abdera.util.AbstractStreamWriter.writeAttribute(java.lang.String, java.lang.String, java.lang.String, long)</inbound>
                <inbound type="feature" confirmed="yes">org.apache.abdera.util.AbstractStreamWriter.writeElementText(long)</inbound>
            </feature>
            <feature confirmed="no">
                <name>java.lang.Long.valueOf(long)</name>
                <inbound type="feature" confirmed="yes">org.apache.abdera.model.DateTimeWrapper.getTime()</inbound>
            </feature>
        </class>
        <class confirmed="no">
            <name>java.lang.NoSuchFieldError</name>
            <inbound type="feature" confirmed="yes">org.apache.abdera.protocol.util.CacheControlUtil$1.static {}</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.util.filter.CompoundParseFilter$1.static {}</inbound>
        </class>
        <class confirmed="no">
            <name>java.lang.Number</name>
            <inbound type="feature" confirmed="yes">org.apache.abdera.util.AbstractXPath.numericValueOf(java.lang.String, org.apache.abdera.model.Base)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.xpath.XPath.numericValueOf(java.lang.String, org.apache.abdera.model.Base)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.xpath.XPath.numericValueOf(java.lang.String, org.apache.abdera.model.Base, java.util.Map)</inbound>
        </class>
        <class confirmed="no">
            <name>java.lang.NumberFormatException</name>
            <inbound type="feature" confirmed="yes">org.apache.abdera.protocol.util.AbstractResponse.getAge()</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.protocol.util.AbstractResponse.getContentLength()</inbound>
        </class>
        <class confirmed="no">
            <name>java.lang.Object</name>
            <inbound type="class" confirmed="yes">org.apache.abdera.Abdera</inbound>
            <inbound type="class" confirmed="yes">org.apache.abdera.factory.ExtensionFactory</inbound>
            <inbound type="class" confirmed="yes">org.apache.abdera.factory.ExtensionFactoryMap</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.factory.ExtensionFactoryMap.addFactory(org.apache.abdera.factory.ExtensionFactory)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.factory.ExtensionFactoryMap.getElementWrapper(org.apache.abdera.model.Element)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.factory.ExtensionFactoryMap.getMimeType(org.apache.abdera.model.Base)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.factory.ExtensionFactoryMap.getNamespaces()</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.factory.ExtensionFactoryMap.handlesNamespace(java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.factory.ExtensionFactoryMap.listExtensionFactories()</inbound>
            <inbound type="class" confirmed="yes">org.apache.abdera.factory.Factory</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.factory.StreamBuilder.writeElementText(java.lang.String, java.lang.Object[])</inbound>
            <inbound type="class" confirmed="yes">org.apache.abdera.filter.ListParseFilter</inbound>
            <inbound type="class" confirmed="yes">org.apache.abdera.filter.ParseFilter</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.filter.ParseFilter.clone()</inbound>
            <inbound type="class" confirmed="yes">org.apache.abdera.model.AtomDate</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.model.AtomDate.AtomDate(java.util.Date)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.model.AtomDate.clone()</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.model.AtomDate.equals(java.lang.Object)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.model.AtomDate.getDate()</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.model.AtomDate.parse(java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.model.AtomDate.setValue(java.util.Date)</inbound>
            <inbound type="class" confirmed="yes">org.apache.abdera.model.Attribute</inbound>
            <inbound type="class" confirmed="yes">org.apache.abdera.model.Base</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.model.Base.clone()</inbound>
            <inbound type="class" confirmed="yes">org.apache.abdera.model.Categories</inbound>
            <inbound type="class" confirmed="yes">org.apache.abdera.model.Category</inbound>
            <inbound type="class" confirmed="yes">org.apache.abdera.model.Collection</inbound>
            <inbound type="class" confirmed="yes">org.apache.abdera.model.Comment</inbound>
            <inbound type="class" confirmed="yes">org.apache.abdera.model.Content</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.model.Content$Type.values()</inbound>
            <inbound type="class" confirmed="yes">org.apache.abdera.model.Control</inbound>
            <inbound type="class" confirmed="yes">org.apache.abdera.model.DateTime</inbound>
            <inbound type="class" confirmed="yes">org.apache.abdera.model.Div</inbound>
            <inbound type="class" confirmed="yes">org.apache.abdera.model.Document</inbound>
            <inbound type="class" confirmed="yes">org.apache.abdera.model.Element</inbound>
            <inbound type="class" confirmed="yes">org.apache.abdera.model.ElementWrapper</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.model.ElementWrapper.clone()</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.model.ElementWrapper.equals(java.lang.Object)</inbound>
            <inbound type="class" confirmed="yes">org.apache.abdera.model.Entry</inbound>
            <inbound type="class" confirmed="yes">org.apache.abdera.model.ExtensibleElement</inbound>
            <inbound type="class" confirmed="yes">org.apache.abdera.model.Feed</inbound>
            <inbound type="class" confirmed="yes">org.apache.abdera.model.Generator</inbound>
            <inbound type="class" confirmed="yes">org.apache.abdera.model.IRIElement</inbound>
            <inbound type="class" confirmed="yes">org.apache.abdera.model.Link</inbound>
            <inbound type="class" confirmed="yes">org.apache.abdera.model.Person</inbound>
            <inbound type="class" confirmed="yes">org.apache.abdera.model.ProcessingInstruction</inbound>
            <inbound type="class" confirmed="yes">org.apache.abdera.model.Service</inbound>
            <inbound type="class" confirmed="yes">org.apache.abdera.model.Source</inbound>
            <inbound type="class" confirmed="yes">org.apache.abdera.model.Text</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.model.Text$Type.values()</inbound>
            <inbound type="class" confirmed="yes">org.apache.abdera.model.TextValue</inbound>
            <inbound type="class" confirmed="yes">org.apache.abdera.model.Workspace</inbound>
            <inbound type="class" confirmed="yes">org.apache.abdera.parser.NamedParser</inbound>
            <inbound type="class" confirmed="yes">org.apache.abdera.parser.Parser</inbound>
            <inbound type="class" confirmed="yes">org.apache.abdera.parser.ParserFactory</inbound>
            <inbound type="class" confirmed="yes">org.apache.abdera.parser.ParserOptions</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.parser.ParserOptions.clone()</inbound>
            <inbound type="class" confirmed="yes">org.apache.abdera.protocol.EntityProvider</inbound>
            <inbound type="class" confirmed="yes">org.apache.abdera.protocol.ItemManager</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.protocol.ItemManager.get(org.apache.abdera.protocol.Request)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.protocol.ItemManager.release(java.lang.Object)</inbound>
            <inbound type="class" confirmed="yes">org.apache.abdera.protocol.Message</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.protocol.Message.getHeaders(java.lang.String)</inbound>
            <inbound type="class" confirmed="yes">org.apache.abdera.protocol.Request</inbound>
            <inbound type="class" confirmed="yes">org.apache.abdera.protocol.Resolver</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.protocol.Resolver.resolve(org.apache.abdera.protocol.Request)</inbound>
            <inbound type="class" confirmed="yes">org.apache.abdera.protocol.Response</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.protocol.Response$ResponseType.values()</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.protocol.error.ProtocolException.equals(java.lang.Object)</inbound>
            <inbound type="class" confirmed="yes">org.apache.abdera.protocol.util.AbstractEntityProvider</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.protocol.util.AbstractItemManager.get(org.apache.abdera.protocol.Request)</inbound>
            <inbound type="class" confirmed="yes">org.apache.abdera.protocol.util.AbstractMessage</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.protocol.util.AbstractMessage.getDecodedHeaders(java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.protocol.util.AbstractMessage.isNoCache()</inbound>
            <inbound type="class" confirmed="yes">org.apache.abdera.protocol.util.CacheControlUtil</inbound>
            <inbound type="class" confirmed="yes">org.apache.abdera.protocol.util.CacheControlUtil$1</inbound>
            <inbound type="class" confirmed="yes">org.apache.abdera.protocol.util.CacheControlUtil$CacheControlParser</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.protocol.util.CacheControlUtil$CacheControlParser.CacheControlUtil$CacheControlParser(java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.protocol.util.CacheControlUtil$CacheControlParser.getValue(org.apache.abdera.protocol.util.CacheControlUtil$Directive)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.protocol.util.CacheControlUtil$Directive.values()</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.protocol.util.CacheControlUtil$Idempotent.values()</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.protocol.util.CacheControlUtil.parseCacheControl(java.lang.String, org.apache.abdera.protocol.util.AbstractRequest)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.protocol.util.CacheControlUtil.parseCacheControl(java.lang.String, org.apache.abdera.protocol.util.AbstractResponse)</inbound>
            <inbound type="class" confirmed="yes">org.apache.abdera.protocol.util.PoolManager</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.protocol.util.PoolManager$1.push(java.lang.Object)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.protocol.util.PoolManager.getInstance()</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.protocol.util.PoolManager.internalNewInstance()</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.protocol.util.PoolManager.release(java.lang.Object)</inbound>
            <inbound type="class" confirmed="yes">org.apache.abdera.protocol.util.ProtocolConstants</inbound>
            <inbound type="class" confirmed="yes">org.apache.abdera.util.AbderaConfiguration</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.util.AbderaConfiguration.clone()</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.util.AbderaConfiguration.getName(java.lang.Class)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.util.AbderaConfiguration.initNamedParsers()</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.util.AbderaConfiguration.initNamedWriters()</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.util.AbderaConfiguration.initStreamWriters()</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.util.AbderaConfiguration.loadExtensionFactories()</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.util.AbderaConfiguration.newFactoryInstance(org.apache.abdera.Abdera)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.util.AbderaConfiguration.newParserFactoryInstance(org.apache.abdera.Abdera)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.util.AbderaConfiguration.newParserInstance(org.apache.abdera.Abdera)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.util.AbderaConfiguration.newStreamWriterInstance(org.apache.abdera.Abdera)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.util.AbderaConfiguration.newWriterFactoryInstance(org.apache.abdera.Abdera)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.util.AbderaConfiguration.newWriterInstance(org.apache.abdera.Abdera)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.util.AbderaConfiguration.newXPathInstance(org.apache.abdera.Abdera)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.util.AbderaConfiguration.throwex(java.lang.String, java.lang.String, java.lang.Throwable)</inbound>
            <inbound type="class" confirmed="yes">org.apache.abdera.util.AbderaDataSource</inbound>
            <inbound type="class" confirmed="yes">org.apache.abdera.util.AbstractExtensionFactory</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.util.AbstractExtensionFactory.AbstractExtensionFactory(java.lang.String[])</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.util.AbstractExtensionFactory.addImpl(javax.xml.namespace.QName, java.lang.Class)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.util.AbstractExtensionFactory.addMimeType(javax.xml.namespace.QName, java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.util.AbstractExtensionFactory.getElementWrapper(org.apache.abdera.model.Element)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.util.AbstractExtensionFactory.getMimeType(org.apache.abdera.model.Base)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.util.AbstractExtensionFactory.getNamespaces()</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.util.AbstractExtensionFactory.handlesNamespace(java.lang.String)</inbound>
            <inbound type="class" confirmed="yes">org.apache.abdera.util.AbstractParser</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.util.AbstractParser.getDefaultParserOptions()</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.util.AbstractParser.setDefaultParserOptions(org.apache.abdera.parser.ParserOptions)</inbound>
            <inbound type="class" confirmed="yes">org.apache.abdera.util.AbstractParserOptions</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.util.AbstractParserOptions.clone()</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.util.AbstractParserOptions.registerEntity(java.lang.String, java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.util.AbstractParserOptions.resolveEntity(java.lang.String)</inbound>
            <inbound type="class" confirmed="yes">org.apache.abdera.util.AbstractStreamWriter</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.util.AbstractStreamWriter.writeElementText(java.lang.String, java.lang.Object[])</inbound>
            <inbound type="class" confirmed="yes">org.apache.abdera.util.AbstractWriter</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.util.AbstractWriter.getDefaultWriterOptions()</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.util.AbstractWriter.setDefaultWriterOptions(org.apache.abdera.writer.WriterOptions)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.util.AbstractWriter.write(org.apache.abdera.model.Base)</inbound>
            <inbound type="class" confirmed="yes">org.apache.abdera.util.AbstractWriterOptions</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.util.AbstractWriterOptions.clone()</inbound>
            <inbound type="class" confirmed="yes">org.apache.abdera.util.AbstractXPath</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.util.AbstractXPath.evaluate(java.lang.String, org.apache.abdera.model.Base)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.util.AbstractXPath.initDefaultNamespaces()</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.util.AbstractXPath.selectSingleNode(java.lang.String, org.apache.abdera.model.Base)</inbound>
            <inbound type="class" confirmed="yes">org.apache.abdera.util.Configuration</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.util.Configuration.clone()</inbound>
            <inbound type="class" confirmed="yes">org.apache.abdera.util.Constants</inbound>
            <inbound type="class" confirmed="yes">org.apache.abdera.util.Discover</inbound>
            <inbound type="class" confirmed="yes">org.apache.abdera.util.Discover$DefaultLoader</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.util.Discover$DefaultLoader.Discover$DefaultLoader(java.lang.String, boolean, java.lang.Object[])</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.util.Discover$DefaultLoader.Discover$DefaultLoader(java.lang.String, boolean, java.lang.Object[], java.lang.ClassLoader)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.util.Discover$DefaultLoader.args</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.util.Discover$DefaultLoader.init(boolean)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.util.Discover$DefaultLoaderIterator.Discover$DefaultLoaderIterator(java.lang.ClassLoader, java.io.InputStream, boolean, java.lang.Object[])</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.util.Discover$DefaultLoaderIterator.create(java.lang.String, java.lang.Object[])</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.util.Discover$DefaultLoaderIterator.next()</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.util.Discover$LineReaderLoaderIterator.Discover$LineReaderLoaderIterator(java.lang.ClassLoader, java.io.InputStream, boolean, java.lang.Object[])</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.util.Discover$LineReaderLoaderIterator.args</inbound>
            <inbound type="class" confirmed="yes">org.apache.abdera.util.Discover$LoaderIterator</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.util.Discover.access$100(java.lang.ClassLoader, java.lang.String, boolean, java.lang.Object[])</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.util.Discover.load(java.lang.ClassLoader, java.lang.String, boolean, java.lang.Object[])</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.util.Discover.locate(java.lang.String, boolean, java.lang.ClassLoader, java.lang.Object[])</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.util.Discover.locate(java.lang.String, boolean, java.lang.Object[])</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.util.Discover.locate(java.lang.String, java.lang.ClassLoader, java.lang.Object[])</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.util.Discover.locate(java.lang.String, java.lang.Iterable)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.util.Discover.locate(java.lang.String, java.lang.Object[])</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.util.Discover.locate(java.lang.String, java.lang.String, java.lang.ClassLoader, java.lang.Object[])</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.util.Discover.locate(java.lang.String, java.lang.String, java.lang.Object[])</inbound>
            <inbound type="class" confirmed="yes">org.apache.abdera.util.EntityTag</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.util.EntityTag.EntityTag(java.lang.String, boolean)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.util.EntityTag.clone()</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.util.EntityTag.compareTo(java.lang.Object)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.util.EntityTag.equals(java.lang.Object)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.util.EntityTag.matches(java.lang.String, java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.util.EntityTag.matches(org.apache.abdera.util.EntityTag, java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.util.EntityTag.matches(org.apache.abdera.util.EntityTag, org.apache.abdera.util.EntityTag)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.util.EntityTag.matchesAny(org.apache.abdera.util.EntityTag, org.apache.abdera.util.EntityTag[], boolean)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.util.EntityTag.parseTags(java.lang.String)</inbound>
            <inbound type="class" confirmed="yes">org.apache.abdera.util.MimeTypeHelper</inbound>
            <inbound type="class" confirmed="yes">org.apache.abdera.util.MimeTypeHelper$1</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.util.MimeTypeHelper$1.compare(java.lang.Object, java.lang.Object)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.util.MimeTypeHelper.compare(javax.activation.MimeType, javax.activation.MimeType)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.util.MimeTypeHelper.condense(java.lang.String[])</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.util.MimeTypeHelper.contains(java.lang.String, java.util.List, boolean)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.util.MimeTypeHelper.isMatch(javax.activation.MimeType, javax.activation.MimeType, boolean)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.util.MimeTypeHelper.isXml(java.lang.String)</inbound>
            <inbound type="class" confirmed="yes">org.apache.abdera.util.MultiIterator</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.util.MultiIterator.MultiIterator(java.util.Iterator[])</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.util.MultiIterator.next()</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.util.MultiIterator.selectCurrent()</inbound>
            <inbound type="class" confirmed="yes">org.apache.abdera.util.NamedItem</inbound>
            <inbound type="class" confirmed="yes">org.apache.abdera.util.ServiceUtil</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.util.ServiceUtil.loadExtensionFactories()</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.util.ServiceUtil.loadimpls(java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.util.ServiceUtil.loadimpls(java.lang.String, boolean)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.util.ServiceUtil.newFactoryInstance(org.apache.abdera.Abdera)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.util.ServiceUtil.newInstance(java.lang.String, java.lang.String, java.lang.Object[])</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.util.ServiceUtil.newInstance(java.lang.String, java.lang.String, org.apache.abdera.Abdera)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.util.ServiceUtil.newParserFactoryInstance(org.apache.abdera.Abdera)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.util.ServiceUtil.newParserInstance(org.apache.abdera.Abdera)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.util.ServiceUtil.newStreamWriterInstance(org.apache.abdera.Abdera)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.util.ServiceUtil.newWriterFactoryInstance(org.apache.abdera.Abdera)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.util.ServiceUtil.newWriterInstance(org.apache.abdera.Abdera)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.util.ServiceUtil.newXPathInstance(org.apache.abdera.Abdera)</inbound>
            <inbound type="class" confirmed="yes">org.apache.abdera.util.Version</inbound>
            <inbound type="class" confirmed="yes">org.apache.abdera.util.XmlUtil</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.util.XmlUtil$XMLVersion.values()</inbound>
            <inbound type="class" confirmed="yes">org.apache.abdera.util.XmlUtil$XmlFilter</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.util.XmlUtil.getVersion(java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.util.filter.AbstractListParseFilter.add(javax.xml.namespace.QName)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.util.filter.AbstractListParseFilter.add(javax.xml.namespace.QName, javax.xml.namespace.QName)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.util.filter.AbstractListParseFilter.clone()</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.util.filter.AbstractListParseFilter.contains(javax.xml.namespace.QName)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.util.filter.AbstractListParseFilter.contains(javax.xml.namespace.QName, javax.xml.namespace.QName)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.util.filter.AbstractListParseFilter.readObject(java.io.ObjectInputStream)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.util.filter.AbstractListParseFilter.writeObject(java.io.ObjectOutputStream)</inbound>
            <inbound type="class" confirmed="yes">org.apache.abdera.util.filter.AbstractParseFilter</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.util.filter.AbstractParseFilter.clone()</inbound>
            <inbound type="class" confirmed="yes">org.apache.abdera.util.filter.CompoundParseFilter$1</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.util.filter.CompoundParseFilter$Condition.values()</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.util.filter.CompoundParseFilter.clone()</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.util.filter.SafeContentWhiteListParseFilter$xhtml_attributes.values()</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.util.filter.SafeContentWhiteListParseFilter$xhtml_elements.values()</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.util.filter.SafeContentWhiteListParseFilter.acceptable(javax.xml.namespace.QName)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.util.filter.SafeContentWhiteListParseFilter.acceptable(javax.xml.namespace.QName, javax.xml.namespace.QName)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.util.filter.SafeContentWhiteListParseFilter.clone()</inbound>
            <inbound type="class" confirmed="yes">org.apache.abdera.writer.NamedWriter</inbound>
            <inbound type="class" confirmed="yes">org.apache.abdera.writer.StreamWriter</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.writer.StreamWriter.writeElementText(java.lang.String, java.lang.Object[])</inbound>
            <inbound type="class" confirmed="yes">org.apache.abdera.writer.Writer</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.writer.Writer.write(org.apache.abdera.model.Base)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.writer.Writer.write(org.apache.abdera.model.Base, org.apache.abdera.writer.WriterOptions)</inbound>
            <inbound type="class" confirmed="yes">org.apache.abdera.writer.WriterFactory</inbound>
            <inbound type="class" confirmed="yes">org.apache.abdera.writer.WriterOptions</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.writer.WriterOptions.clone()</inbound>
            <inbound type="class" confirmed="yes">org.apache.abdera.xpath.XPath</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.xpath.XPath.evaluate(java.lang.String, org.apache.abdera.model.Base)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.xpath.XPath.evaluate(java.lang.String, org.apache.abdera.model.Base, java.util.Map)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.xpath.XPath.selectSingleNode(java.lang.String, org.apache.abdera.model.Base)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.xpath.XPath.selectSingleNode(java.lang.String, org.apache.abdera.model.Base, java.util.Map)</inbound>
            <feature confirmed="no">
                <name>java.lang.Object.Object()</name>
                <inbound type="feature" confirmed="yes">org.apache.abdera.Abdera.Abdera(org.apache.abdera.util.Configuration)</inbound>
                <inbound type="feature" confirmed="yes">org.apache.abdera.factory.ExtensionFactoryMap.ExtensionFactoryMap(java.util.List)</inbound>
                <inbound type="feature" confirmed="yes">org.apache.abdera.model.AtomDate.AtomDate(java.util.Date)</inbound>
                <inbound type="feature" confirmed="yes">org.apache.abdera.model.ElementWrapper.ElementWrapper(org.apache.abdera.factory.Factory, javax.xml.namespace.QName)</inbound>
                <inbound type="feature" confirmed="yes">org.apache.abdera.model.ElementWrapper.ElementWrapper(org.apache.abdera.model.Element)</inbound>
                <inbound type="feature" confirmed="yes">org.apache.abdera.protocol.util.AbstractEntityProvider.AbstractEntityProvider()</inbound>
                <inbound type="feature" confirmed="yes">org.apache.abdera.protocol.util.AbstractMessage.AbstractMessage()</inbound>
                <inbound type="feature" confirmed="yes">org.apache.abdera.protocol.util.CacheControlUtil$CacheControlParser.CacheControlUtil$CacheControlParser(java.lang.String)</inbound>
                <inbound type="feature" confirmed="yes">org.apache.abdera.protocol.util.CacheControlUtil.CacheControlUtil()</inbound>
                <inbound type="feature" confirmed="yes">org.apache.abdera.protocol.util.PoolManager.PoolManager(int)</inbound>
                <inbound type="feature" confirmed="yes">org.apache.abdera.util.AbderaConfiguration.AbderaConfiguration(java.util.ResourceBundle)</inbound>
                <inbound type="feature" confirmed="yes">org.apache.abdera.util.AbderaDataSource.AbderaDataSource(org.apache.abdera.model.Base)</inbound>
                <inbound type="feature" confirmed="yes">org.apache.abdera.util.AbstractExtensionFactory.AbstractExtensionFactory(java.lang.String[])</inbound>
                <inbound type="feature" confirmed="yes">org.apache.abdera.util.AbstractParser.AbstractParser(org.apache.abdera.Abdera)</inbound>
                <inbound type="feature" confirmed="yes">org.apache.abdera.util.AbstractParserOptions.AbstractParserOptions()</inbound>
                <inbound type="feature" confirmed="yes">org.apache.abdera.util.AbstractStreamWriter.AbstractStreamWriter(org.apache.abdera.Abdera, java.lang.String)</inbound>
                <inbound type="feature" confirmed="yes">org.apache.abdera.util.AbstractWriter.AbstractWriter()</inbound>
                <inbound type="feature" confirmed="yes">org.apache.abdera.util.AbstractWriterOptions.AbstractWriterOptions()</inbound>
                <inbound type="feature" confirmed="yes">org.apache.abdera.util.AbstractXPath.AbstractXPath(java.util.Map)</inbound>
                <inbound type="feature" confirmed="yes">org.apache.abdera.util.Discover$DefaultLoader.Discover$DefaultLoader(java.lang.String, boolean, java.lang.Object[], java.lang.ClassLoader)</inbound>
                <inbound type="feature" confirmed="yes">org.apache.abdera.util.Discover$LoaderIterator.Discover$LoaderIterator(java.lang.ClassLoader)</inbound>
                <inbound type="feature" confirmed="yes">org.apache.abdera.util.Discover.Discover()</inbound>
                <inbound type="feature" confirmed="yes">org.apache.abdera.util.EntityTag.EntityTag(java.lang.String, boolean)</inbound>
                <inbound type="feature" confirmed="yes">org.apache.abdera.util.EntityTag.EntityTag(java.lang.String, boolean, boolean)</inbound>
                <inbound type="feature" confirmed="yes">org.apache.abdera.util.MimeTypeHelper$1.MimeTypeHelper$1()</inbound>
                <inbound type="feature" confirmed="yes">org.apache.abdera.util.MimeTypeHelper.MimeTypeHelper()</inbound>
                <inbound type="feature" confirmed="yes">org.apache.abdera.util.MultiIterator.MultiIterator(java.util.Iterator)</inbound>
                <inbound type="feature" confirmed="yes">org.apache.abdera.util.ServiceUtil.ServiceUtil()</inbound>
                <inbound type="feature" confirmed="yes">org.apache.abdera.util.XmlUtil$XmlFilter.XmlUtil$XmlFilter(org.apache.abdera.util.XmlUtil$XMLVersion)</inbound>
                <inbound type="feature" confirmed="yes">org.apache.abdera.util.XmlUtil.XmlUtil()</inbound>
                <inbound type="feature" confirmed="yes">org.apache.abdera.util.filter.AbstractParseFilter.AbstractParseFilter()</inbound>
            </feature>
            <feature confirmed="no">
                <name>java.lang.Object.clone()</name>
                <inbound type="feature" confirmed="yes">org.apache.abdera.model.AtomDate.clone()</inbound>
                <inbound type="feature" confirmed="yes">org.apache.abdera.model.ElementWrapper.clone()</inbound>
                <inbound type="feature" confirmed="yes">org.apache.abdera.util.AbderaConfiguration.clone()</inbound>
                <inbound type="feature" confirmed="yes">org.apache.abdera.util.AbstractParserOptions.clone()</inbound>
                <inbound type="feature" confirmed="yes">org.apache.abdera.util.AbstractWriterOptions.clone()</inbound>
                <inbound type="feature" confirmed="yes">org.apache.abdera.util.filter.AbstractParseFilter.clone()</inbound>
            </feature>
            <feature confirmed="no">
                <name>java.lang.Object.equals(java.lang.Object)</name>
                <inbound type="feature" confirmed="yes">org.apache.abdera.model.ElementWrapper.equals(java.lang.Object)</inbound>
                <inbound type="feature" confirmed="yes">org.apache.abdera.util.MimeTypeHelper.isMatch(javax.activation.MimeType, javax.activation.MimeType, boolean)</inbound>
            </feature>
            <feature confirmed="no">
                <name>java.lang.Object.getClass()</name>
                <inbound type="feature" confirmed="yes">org.apache.abdera.factory.ExtensionFactoryMap.listExtensionFactories()</inbound>
                <inbound type="feature" confirmed="yes">org.apache.abdera.protocol.error.ProtocolException.equals(java.lang.Object)</inbound>
                <inbound type="feature" confirmed="yes">org.apache.abdera.util.AbderaDataSource.AbderaDataSource(org.apache.abdera.model.Base)</inbound>
                <inbound type="feature" confirmed="yes">org.apache.abdera.util.Discover.load(java.lang.ClassLoader, java.lang.String, boolean, java.lang.Object[])</inbound>
                <inbound type="feature" confirmed="yes">org.apache.abdera.util.EntityTag.equals(java.lang.Object)</inbound>
            </feature>
            <feature confirmed="no">
                <name>java.lang.Object.hashCode()</name>
                <inbound type="feature" confirmed="yes">org.apache.abdera.model.ElementWrapper.hashCode()</inbound>
            </feature>
            <feature confirmed="no">
                <name>java.lang.Object.toString()</name>
                <inbound type="feature" confirmed="yes">org.apache.abdera.model.ElementWrapper.toString()</inbound>
                <inbound type="feature" confirmed="yes">org.apache.abdera.protocol.util.AbstractMessage.getDecodedHeaders(java.lang.String)</inbound>
                <inbound type="feature" confirmed="yes">org.apache.abdera.util.AbstractStreamWriter.append(java.lang.CharSequence)</inbound>
            </feature>
        </class>
        <class confirmed="no">
            <name>java.lang.RuntimeException</name>
            <inbound type="class" confirmed="yes">org.apache.abdera.parser.ParseException</inbound>
            <inbound type="class" confirmed="yes">org.apache.abdera.protocol.error.ProtocolException</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.util.AbderaConfiguration.newParserFactoryInstance(org.apache.abdera.Abdera)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.util.AbderaConfiguration.newStreamWriterInstance(org.apache.abdera.Abdera)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.util.AbderaConfiguration.newWriterFactoryInstance(org.apache.abdera.Abdera)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.util.AbderaConfiguration.newWriterInstance(org.apache.abdera.Abdera)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.util.AbderaConfiguration.newXPathInstance(org.apache.abdera.Abdera)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.util.AbderaConfiguration.throwex(java.lang.String, java.lang.String, java.lang.Throwable)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.util.Discover$DefaultLoaderIterator.create(java.lang.String, java.lang.Object[])</inbound>
            <inbound type="class" confirmed="yes">org.apache.abdera.util.MimeTypeParseException</inbound>
            <inbound type="class" confirmed="yes">org.apache.abdera.xpath.XPathException</inbound>
            <feature confirmed="no">
                <name>java.lang.RuntimeException.RuntimeException()</name>
                <inbound type="feature" confirmed="yes">org.apache.abdera.parser.ParseException.ParseException()</inbound>
                <inbound type="feature" confirmed="yes">org.apache.abdera.xpath.XPathException.XPathException()</inbound>
            </feature>
            <feature confirmed="no">
                <name>java.lang.RuntimeException.RuntimeException(java.lang.String)</name>
                <inbound type="feature" confirmed="yes">org.apache.abdera.parser.ParseException.ParseException(java.lang.String)</inbound>
                <inbound type="feature" confirmed="yes">org.apache.abdera.protocol.error.ProtocolException.ProtocolException(org.apache.abdera.Abdera, int, java.lang.String)</inbound>
                <inbound type="feature" confirmed="yes">org.apache.abdera.protocol.error.ProtocolException.ProtocolException(org.apache.abdera.protocol.error.Error)</inbound>
                <inbound type="feature" confirmed="yes">org.apache.abdera.xpath.XPathException.XPathException(java.lang.String)</inbound>
            </feature>
            <feature confirmed="no">
                <name>java.lang.RuntimeException.RuntimeException(java.lang.String, java.lang.Throwable)</name>
                <inbound type="feature" confirmed="yes">org.apache.abdera.parser.ParseException.ParseException(java.lang.String, java.lang.Throwable)</inbound>
                <inbound type="feature" confirmed="yes">org.apache.abdera.util.AbderaConfiguration.throwex(java.lang.String, java.lang.String, java.lang.Throwable)</inbound>
                <inbound type="feature" confirmed="yes">org.apache.abdera.util.EntityTag.generate(java.lang.String[])</inbound>
                <inbound type="feature" confirmed="yes">org.apache.abdera.xpath.XPathException.XPathException(java.lang.String, java.lang.Throwable)</inbound>
            </feature>
            <feature confirmed="no">
                <name>java.lang.RuntimeException.RuntimeException(java.lang.Throwable)</name>
                <inbound type="feature" confirmed="yes">org.apache.abdera.parser.ParseException.ParseException(java.lang.Throwable)</inbound>
                <inbound type="feature" confirmed="yes">org.apache.abdera.util.AbderaConfiguration.clone()</inbound>
                <inbound type="feature" confirmed="yes">org.apache.abdera.util.AbstractParser.getDefaultParserOptions()</inbound>
                <inbound type="feature" confirmed="yes">org.apache.abdera.util.AbstractParser.setDefaultParserOptions(org.apache.abdera.parser.ParserOptions)</inbound>
                <inbound type="feature" confirmed="yes">org.apache.abdera.util.AbstractWriter.getDefaultWriterOptions()</inbound>
                <inbound type="feature" confirmed="yes">org.apache.abdera.util.AbstractWriter.setDefaultWriterOptions(org.apache.abdera.writer.WriterOptions)</inbound>
                <inbound type="feature" confirmed="yes">org.apache.abdera.util.Discover$DefaultLoader.init(boolean)</inbound>
                <inbound type="feature" confirmed="yes">org.apache.abdera.util.Discover$DefaultLoaderIterator.create(java.lang.String, java.lang.Object[])</inbound>
                <inbound type="feature" confirmed="yes">org.apache.abdera.util.Discover$LineReaderLoaderIterator.Discover$LineReaderLoaderIterator(java.lang.ClassLoader, java.io.InputStream, boolean, java.lang.Object[])</inbound>
                <inbound type="feature" confirmed="yes">org.apache.abdera.util.Discover$LineReaderLoaderIterator.readNext()</inbound>
                <inbound type="feature" confirmed="yes">org.apache.abdera.util.Discover.getClass(java.lang.ClassLoader, java.lang.String)</inbound>
                <inbound type="feature" confirmed="yes">org.apache.abdera.util.Discover.locate(java.lang.String, java.lang.String, java.lang.ClassLoader, java.lang.Object[])</inbound>
                <inbound type="feature" confirmed="yes">org.apache.abdera.util.MimeTypeParseException.MimeTypeParseException(javax.activation.MimeTypeParseException)</inbound>
                <inbound type="feature" confirmed="yes">org.apache.abdera.xpath.XPathException.XPathException(java.lang.Throwable)</inbound>
            </feature>
        </class>
        <class confirmed="no">
            <name>java.lang.String</name>
            <inbound type="feature" confirmed="yes">org.apache.abdera.factory.ExtensionFactory.getMimeType(org.apache.abdera.model.Base)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.factory.ExtensionFactory.getNamespaces()</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.factory.ExtensionFactory.handlesNamespace(java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.factory.ExtensionFactoryMap.getMimeType(org.apache.abdera.model.Base)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.factory.ExtensionFactoryMap.getNamespaces()</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.factory.ExtensionFactoryMap.handlesNamespace(java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.factory.ExtensionFactoryMap.listExtensionFactories()</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.factory.Factory.getMimeType(org.apache.abdera.model.Base)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.factory.Factory.listExtensionFactories()</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.factory.Factory.newUuidUri()</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.factory.StreamBuilder.StreamBuilder(org.apache.abdera.Abdera)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.factory.StreamBuilder.getQName(java.lang.String, java.lang.String, java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.factory.StreamBuilder.setChannel(java.nio.channels.WritableByteChannel, java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.factory.StreamBuilder.setOutputStream(java.io.OutputStream, java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.factory.StreamBuilder.setPrefix(java.lang.String, java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.factory.StreamBuilder.startCategories(boolean, java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.factory.StreamBuilder.startCategory(java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.factory.StreamBuilder.startCategory(java.lang.String, java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.factory.StreamBuilder.startCategory(java.lang.String, java.lang.String, java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.factory.StreamBuilder.startCollection(java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.factory.StreamBuilder.startContent(java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.factory.StreamBuilder.startContent(java.lang.String, java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.factory.StreamBuilder.startContent(org.apache.abdera.model.Content$Type, java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.factory.StreamBuilder.startDocument(java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.factory.StreamBuilder.startDocument(java.lang.String, java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.factory.StreamBuilder.startElement(java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.factory.StreamBuilder.startElement(java.lang.String, java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.factory.StreamBuilder.startElement(java.lang.String, java.lang.String, java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.factory.StreamBuilder.startGenerator(java.lang.String, java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.factory.StreamBuilder.startLink(java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.factory.StreamBuilder.startLink(java.lang.String, java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.factory.StreamBuilder.startLink(java.lang.String, java.lang.String, java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.factory.StreamBuilder.startLink(java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, long)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.factory.StreamBuilder.startPerson(java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.factory.StreamBuilder.startPerson(java.lang.String, java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.factory.StreamBuilder.startPerson(java.lang.String, java.lang.String, java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.factory.StreamBuilder.startText(java.lang.String, java.lang.String, java.lang.String, org.apache.abdera.model.Text$Type)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.factory.StreamBuilder.startText(java.lang.String, java.lang.String, org.apache.abdera.model.Text$Type)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.factory.StreamBuilder.startText(java.lang.String, org.apache.abdera.model.Text$Type)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.factory.StreamBuilder.writeAccepts(java.lang.String[])</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.factory.StreamBuilder.writeAttribute(java.lang.String, double)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.factory.StreamBuilder.writeAttribute(java.lang.String, int)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.factory.StreamBuilder.writeAttribute(java.lang.String, java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.factory.StreamBuilder.writeAttribute(java.lang.String, java.lang.String, double)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.factory.StreamBuilder.writeAttribute(java.lang.String, java.lang.String, int)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.factory.StreamBuilder.writeAttribute(java.lang.String, java.lang.String, java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.factory.StreamBuilder.writeAttribute(java.lang.String, java.lang.String, java.lang.String, double)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.factory.StreamBuilder.writeAttribute(java.lang.String, java.lang.String, java.lang.String, int)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.factory.StreamBuilder.writeAttribute(java.lang.String, java.lang.String, java.lang.String, java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.factory.StreamBuilder.writeAttribute(java.lang.String, java.lang.String, java.lang.String, java.util.Date)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.factory.StreamBuilder.writeAttribute(java.lang.String, java.lang.String, java.lang.String, long)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.factory.StreamBuilder.writeAttribute(java.lang.String, java.lang.String, java.util.Date)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.factory.StreamBuilder.writeAttribute(java.lang.String, java.lang.String, long)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.factory.StreamBuilder.writeAttribute(java.lang.String, java.util.Date)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.factory.StreamBuilder.writeAttribute(java.lang.String, long)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.factory.StreamBuilder.writeAttribute(javax.xml.namespace.QName, java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.factory.StreamBuilder.writeAuthor(java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.factory.StreamBuilder.writeAuthor(java.lang.String, java.lang.String, java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.factory.StreamBuilder.writeBase(java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.factory.StreamBuilder.writeCategory(java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.factory.StreamBuilder.writeCategory(java.lang.String, java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.factory.StreamBuilder.writeCategory(java.lang.String, java.lang.String, java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.factory.StreamBuilder.writeComment(java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.factory.StreamBuilder.writeContent(java.lang.String, java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.factory.StreamBuilder.writeContent(org.apache.abdera.model.Content$Type, java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.factory.StreamBuilder.writeContributor(java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.factory.StreamBuilder.writeContributor(java.lang.String, java.lang.String, java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.factory.StreamBuilder.writeDate(java.lang.String, java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.factory.StreamBuilder.writeDate(java.lang.String, java.lang.String, java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.factory.StreamBuilder.writeDate(java.lang.String, java.lang.String, java.lang.String, java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.factory.StreamBuilder.writeDate(java.lang.String, java.lang.String, java.lang.String, java.util.Date)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.factory.StreamBuilder.writeDate(java.lang.String, java.lang.String, java.util.Date)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.factory.StreamBuilder.writeDate(java.lang.String, java.util.Date)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.factory.StreamBuilder.writeDate(javax.xml.namespace.QName, java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.factory.StreamBuilder.writeEdited(java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.factory.StreamBuilder.writeElementText(java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.factory.StreamBuilder.writeElementText(java.lang.String, java.lang.Object[])</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.factory.StreamBuilder.writeGenerator(java.lang.String, java.lang.String, java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.factory.StreamBuilder.writeIRIElement(java.lang.String, java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.factory.StreamBuilder.writeIRIElement(java.lang.String, java.lang.String, java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.factory.StreamBuilder.writeIRIElement(java.lang.String, java.lang.String, java.lang.String, java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.factory.StreamBuilder.writeIRIElement(java.lang.String, java.lang.String, java.lang.String, org.apache.abdera.i18n.iri.IRI)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.factory.StreamBuilder.writeIRIElement(java.lang.String, java.lang.String, org.apache.abdera.i18n.iri.IRI)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.factory.StreamBuilder.writeIRIElement(java.lang.String, org.apache.abdera.i18n.iri.IRI)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.factory.StreamBuilder.writeIRIElement(javax.xml.namespace.QName, java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.factory.StreamBuilder.writeIcon(java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.factory.StreamBuilder.writeId(java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.factory.StreamBuilder.writeLanguage(java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.factory.StreamBuilder.writeLink(java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.factory.StreamBuilder.writeLink(java.lang.String, java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.factory.StreamBuilder.writeLink(java.lang.String, java.lang.String, java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.factory.StreamBuilder.writeLink(java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, long)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.factory.StreamBuilder.writeLogo(java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.factory.StreamBuilder.writeNamespace(java.lang.String, java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.factory.StreamBuilder.writePI(java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.factory.StreamBuilder.writePI(java.lang.String, java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.factory.StreamBuilder.writePerson(java.lang.String, java.lang.String, java.lang.String, java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.factory.StreamBuilder.writePerson(java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.factory.StreamBuilder.writePerson(java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.factory.StreamBuilder.writePerson(javax.xml.namespace.QName, java.lang.String, java.lang.String, java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.factory.StreamBuilder.writePersonEmail(java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.factory.StreamBuilder.writePersonName(java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.factory.StreamBuilder.writePersonUri(java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.factory.StreamBuilder.writePublished(java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.factory.StreamBuilder.writeRights(java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.factory.StreamBuilder.writeRights(org.apache.abdera.model.Text$Type, java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.factory.StreamBuilder.writeSubtitle(java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.factory.StreamBuilder.writeSubtitle(org.apache.abdera.model.Text$Type, java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.factory.StreamBuilder.writeSummary(java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.factory.StreamBuilder.writeSummary(org.apache.abdera.model.Text$Type, java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.factory.StreamBuilder.writeText(java.lang.String, java.lang.String, java.lang.String, org.apache.abdera.model.Text$Type, java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.factory.StreamBuilder.writeText(java.lang.String, java.lang.String, org.apache.abdera.model.Text$Type, java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.factory.StreamBuilder.writeText(java.lang.String, org.apache.abdera.model.Text$Type, java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.factory.StreamBuilder.writeText(javax.xml.namespace.QName, org.apache.abdera.model.Text$Type, java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.factory.StreamBuilder.writeTitle(java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.factory.StreamBuilder.writeTitle(org.apache.abdera.model.Text$Type, java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.factory.StreamBuilder.writeUpdated(java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.model.AtomDate.AtomDate(java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.model.AtomDate.equals(java.lang.Object)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.model.AtomDate.format(java.util.Date)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.model.AtomDate.getValue()</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.model.AtomDate.parse(java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.model.AtomDate.setValue(java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.model.AtomDate.static {}</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.model.AtomDate.toString()</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.model.AtomDate.valueOf(java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.model.Attribute.getText()</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.model.Attribute.setText(java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.model.Base.addComment(java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.model.Base.writeTo(java.lang.String, java.io.OutputStream)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.model.Base.writeTo(java.lang.String, java.io.OutputStream, org.apache.abdera.writer.WriterOptions)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.model.Base.writeTo(java.lang.String, java.io.Writer)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.model.Base.writeTo(java.lang.String, java.io.Writer, org.apache.abdera.writer.WriterOptions)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.model.Categories.addCategory(java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.model.Categories.addCategory(java.lang.String, java.lang.String, java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.model.Categories.contains(java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.model.Categories.contains(java.lang.String, java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.model.Categories.getCategories(java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.model.Categories.getCategoriesWithScheme(java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.model.Categories.setHref(java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.model.Categories.setScheme(java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.model.Category.getLabel()</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.model.Category.getTerm()</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.model.Category.setLabel(java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.model.Category.setScheme(java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.model.Category.setTerm(java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.model.Collection.accepts(java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.model.Collection.addAccepts(java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.model.Collection.addAccepts(java.lang.String[])</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.model.Collection.addCategories(java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.model.Collection.addCategories(java.util.List, boolean, java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.model.Collection.getAccept()</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.model.Collection.getTitle()</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.model.Collection.setAccept(java.lang.String[])</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.model.Collection.setHref(java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.model.Collection.setTitle(java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.model.Collection.setTitleAsHtml(java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.model.Collection.setTitleAsXHtml(java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.model.Comment.getText()</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.model.Comment.setText(java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.model.Content$Type.Content$Type(java.lang.String, int)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.model.Content$Type.static {}</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.model.Content$Type.typeFromString(java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.model.Content$Type.valueOf(java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.model.Content.getValue()</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.model.Content.getWrappedValue()</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.model.Content.setMimeType(java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.model.Content.setSrc(java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.model.Content.setValue(java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.model.Content.setWrappedValue(java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.model.DateTime.getString()</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.model.DateTime.setString(java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.model.DateTimeWrapper.getString()</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.model.DateTimeWrapper.getValue()</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.model.DateTimeWrapper.setCalendar(java.util.Calendar)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.model.DateTimeWrapper.setDate(java.util.Date)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.model.DateTimeWrapper.setString(java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.model.DateTimeWrapper.setTime(long)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.model.DateTimeWrapper.setValue(org.apache.abdera.model.AtomDate)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.model.Div.getId()</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.model.Div.getTitle()</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.model.Div.getValue()</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.model.Div.getXhtmlClass()</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.model.Div.setId(java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.model.Div.setTitle(java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.model.Div.setValue(java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.model.Div.setXhtmlClass(java.lang.String[])</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.model.Document.addProcessingInstruction(java.lang.String, java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.model.Document.addStylesheet(java.lang.String, java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.model.Document.getCharset()</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.model.Document.getLanguage()</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.model.Document.getProcessingInstruction(java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.model.Document.getSlug()</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.model.Document.setBaseUri(java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.model.Document.setCharset(java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.model.Document.setContentType(java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.model.Document.setEntityTag(java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.model.Document.setLanguage(java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.model.Document.setSlug(java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.model.Element.declareNS(java.lang.String, java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.model.Element.getAttributeValue(java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.model.Element.getAttributeValue(javax.xml.namespace.QName)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.model.Element.getLanguage()</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.model.Element.getText()</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.model.Element.removeAttribute(java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.model.Element.setAttributeValue(java.lang.String, java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.model.Element.setAttributeValue(javax.xml.namespace.QName, java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.model.Element.setBaseUri(java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.model.Element.setLanguage(java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.model.Element.setText(java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.model.ElementWrapper.addComment(java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.model.ElementWrapper.declareNS(java.lang.String, java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.model.ElementWrapper.getAttributeValue(java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.model.ElementWrapper.getAttributeValue(javax.xml.namespace.QName)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.model.ElementWrapper.getLanguage()</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.model.ElementWrapper.getText()</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.model.ElementWrapper.removeAttribute(java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.model.ElementWrapper.setAttributeValue(java.lang.String, java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.model.ElementWrapper.setAttributeValue(javax.xml.namespace.QName, java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.model.ElementWrapper.setBaseUri(java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.model.ElementWrapper.setLanguage(java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.model.ElementWrapper.setText(java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.model.ElementWrapper.toString()</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.model.ElementWrapper.writeTo(java.lang.String, java.io.OutputStream)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.model.ElementWrapper.writeTo(java.lang.String, java.io.OutputStream, org.apache.abdera.writer.WriterOptions)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.model.ElementWrapper.writeTo(java.lang.String, java.io.Writer)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.model.ElementWrapper.writeTo(java.lang.String, java.io.Writer, org.apache.abdera.writer.WriterOptions)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.model.Entry.addAuthor(java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.model.Entry.addAuthor(java.lang.String, java.lang.String, java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.model.Entry.addCategory(java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.model.Entry.addCategory(java.lang.String, java.lang.String, java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.model.Entry.addContributor(java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.model.Entry.addContributor(java.lang.String, java.lang.String, java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.model.Entry.addLink(java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.model.Entry.addLink(java.lang.String, java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.model.Entry.addLink(java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, long)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.model.Entry.getAlternateLink(java.lang.String, java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.model.Entry.getAlternateLinkResolvedHref(java.lang.String, java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.model.Entry.getCategories(java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.model.Entry.getContent()</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.model.Entry.getEditMediaLink(java.lang.String, java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.model.Entry.getEditMediaLinkResolvedHref(java.lang.String, java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.model.Entry.getLink(java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.model.Entry.getLinkResolvedHref(java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.model.Entry.getLinks(java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.model.Entry.getLinks(java.lang.String[])</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.model.Entry.getRights()</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.model.Entry.getSummary()</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.model.Entry.getTitle()</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.model.Entry.setContent(java.io.InputStream, java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.model.Entry.setContent(java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.model.Entry.setContent(java.lang.String, java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.model.Entry.setContent(java.lang.String, org.apache.abdera.model.Content$Type)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.model.Entry.setContent(javax.activation.DataHandler, java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.model.Entry.setContent(org.apache.abdera.i18n.iri.IRI, java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.model.Entry.setContent(org.apache.abdera.model.Element, java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.model.Entry.setContentAsHtml(java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.model.Entry.setContentAsXhtml(java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.model.Entry.setEdited(java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.model.Entry.setId(java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.model.Entry.setId(java.lang.String, boolean)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.model.Entry.setPublished(java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.model.Entry.setRights(java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.model.Entry.setRights(java.lang.String, org.apache.abdera.model.Text$Type)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.model.Entry.setRightsAsHtml(java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.model.Entry.setRightsAsXhtml(java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.model.Entry.setSummary(java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.model.Entry.setSummary(java.lang.String, org.apache.abdera.model.Text$Type)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.model.Entry.setSummaryAsHtml(java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.model.Entry.setSummaryAsXhtml(java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.model.Entry.setTitle(java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.model.Entry.setTitle(java.lang.String, org.apache.abdera.model.Text$Type)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.model.Entry.setTitleAsHtml(java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.model.Entry.setTitleAsXhtml(java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.model.Entry.setUpdated(java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.model.ExtensibleElement.addExtension(java.lang.String, java.lang.String, java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.model.ExtensibleElement.addSimpleExtension(java.lang.String, java.lang.String, java.lang.String, java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.model.ExtensibleElement.addSimpleExtension(javax.xml.namespace.QName, java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.model.ExtensibleElement.getExtensions(java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.model.ExtensibleElement.getSimpleExtension(java.lang.String, java.lang.String, java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.model.ExtensibleElement.getSimpleExtension(javax.xml.namespace.QName)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.model.ExtensibleElementWrapper.addExtension(java.lang.String, java.lang.String, java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.model.ExtensibleElementWrapper.addSimpleExtension(java.lang.String, java.lang.String, java.lang.String, java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.model.ExtensibleElementWrapper.addSimpleExtension(javax.xml.namespace.QName, java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.model.ExtensibleElementWrapper.getExtensions(java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.model.ExtensibleElementWrapper.getSimpleExtension(java.lang.String, java.lang.String, java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.model.ExtensibleElementWrapper.getSimpleExtension(javax.xml.namespace.QName)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.model.Feed.getEntry(java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.model.Generator.getVersion()</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.model.Generator.setUri(java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.model.Generator.setVersion(java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.model.IRIElement.setNormalizedValue(java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.model.IRIElement.setValue(java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.model.Link.IANA_BASE</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.model.Link.REL_ALTERNATE</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.model.Link.REL_ALTERNATE_IANA</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.model.Link.REL_CURRENT</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.model.Link.REL_CURRENT_IANA</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.model.Link.REL_EDIT</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.model.Link.REL_EDIT_IANA</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.model.Link.REL_EDIT_MEDIA</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.model.Link.REL_EDIT_MEDIA_IANA</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.model.Link.REL_ENCLOSURE</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.model.Link.REL_ENCLOSURE_IANA</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.model.Link.REL_FIRST</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.model.Link.REL_FIRST_IANA</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.model.Link.REL_LAST</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.model.Link.REL_LAST_IANA</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.model.Link.REL_LICENSE</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.model.Link.REL_LICENSE_IANA</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.model.Link.REL_NEXT</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.model.Link.REL_NEXT_IANA</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.model.Link.REL_PAYMENT</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.model.Link.REL_PAYMENT_IANA</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.model.Link.REL_PREVIOUS</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.model.Link.REL_PREVIOUS_IANA</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.model.Link.REL_RELATED</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.model.Link.REL_RELATED_IANA</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.model.Link.REL_REPLIES</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.model.Link.REL_REPLIES_IANA</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.model.Link.REL_SELF</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.model.Link.REL_SELF_IANA</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.model.Link.REL_SERVICE</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.model.Link.REL_SERVICE_IANA</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.model.Link.REL_VIA</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.model.Link.REL_VIA_IANA</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.model.Link.getHrefLang()</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.model.Link.getRel()</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.model.Link.getTitle()</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.model.Link.setHref(java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.model.Link.setHrefLang(java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.model.Link.setMimeType(java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.model.Link.setRel(java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.model.Link.setTitle(java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.model.Person.getEmail()</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.model.Person.getName()</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.model.Person.setEmail(java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.model.Person.setName(java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.model.Person.setUri(java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.model.PersonWrapper.getEmail()</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.model.PersonWrapper.getName()</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.model.PersonWrapper.setEmail(java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.model.PersonWrapper.setName(java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.model.PersonWrapper.setUri(java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.model.ProcessingInstruction.getTarget()</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.model.ProcessingInstruction.getText()</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.model.ProcessingInstruction.setTarget(java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.model.ProcessingInstruction.setText(java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.model.Service.addWorkspace(java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.model.Service.getCollection(java.lang.String, java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.model.Service.getCollectionThatAccepts(java.lang.String[])</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.model.Service.getCollectionsThatAccept(java.lang.String[])</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.model.Service.getWorkspace(java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.model.Source.addAuthor(java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.model.Source.addAuthor(java.lang.String, java.lang.String, java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.model.Source.addCategory(java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.model.Source.addCategory(java.lang.String, java.lang.String, java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.model.Source.addContributor(java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.model.Source.addContributor(java.lang.String, java.lang.String, java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.model.Source.addLink(java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.model.Source.addLink(java.lang.String, java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.model.Source.addLink(java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, long)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.model.Source.getAlternateLink(java.lang.String, java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.model.Source.getAlternateLinkResolvedHref(java.lang.String, java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.model.Source.getCategories(java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.model.Source.getLink(java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.model.Source.getLinkResolvedHref(java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.model.Source.getLinks(java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.model.Source.getLinks(java.lang.String[])</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.model.Source.getRights()</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.model.Source.getSubtitle()</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.model.Source.getTitle()</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.model.Source.getUpdatedString()</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.model.Source.setGenerator(java.lang.String, java.lang.String, java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.model.Source.setIcon(java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.model.Source.setId(java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.model.Source.setId(java.lang.String, boolean)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.model.Source.setLogo(java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.model.Source.setRights(java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.model.Source.setRights(java.lang.String, org.apache.abdera.model.Text$Type)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.model.Source.setRightsAsHtml(java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.model.Source.setRightsAsXhtml(java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.model.Source.setSubtitle(java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.model.Source.setSubtitle(java.lang.String, org.apache.abdera.model.Text$Type)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.model.Source.setSubtitleAsHtml(java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.model.Source.setSubtitleAsXhtml(java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.model.Source.setTitle(java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.model.Source.setTitle(java.lang.String, org.apache.abdera.model.Text$Type)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.model.Source.setTitleAsHtml(java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.model.Source.setTitleAsXhtml(java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.model.Source.setUpdated(java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.model.Text$Type.Text$Type(java.lang.String, int)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.model.Text$Type.static {}</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.model.Text$Type.typeFromString(java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.model.Text$Type.valueOf(java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.model.Text.getValue()</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.model.Text.getWrappedValue()</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.model.Text.setValue(java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.model.Text.setWrappedValue(java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.model.TextValue.getText()</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.model.Workspace.addCollection(java.lang.String, java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.model.Workspace.addMultipartCollection(java.lang.String, java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.model.Workspace.getCollection(java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.model.Workspace.getCollectionThatAccepts(java.lang.String[])</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.model.Workspace.getCollectionsThatAccept(java.lang.String[])</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.model.Workspace.getTitle()</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.model.Workspace.setTitle(java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.model.Workspace.setTitleAsHtml(java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.model.Workspace.setTitleAsXHtml(java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.parser.NamedParser.getInputFormats()</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.parser.NamedParser.parsesFormat(java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.parser.ParseException.ParseException(java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.parser.ParseException.ParseException(java.lang.String, java.lang.Throwable)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.parser.Parser.parse(java.io.InputStream, java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.parser.Parser.parse(java.io.InputStream, java.lang.String, org.apache.abdera.parser.ParserOptions)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.parser.Parser.parse(java.io.Reader, java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.parser.Parser.parse(java.io.Reader, java.lang.String, org.apache.abdera.parser.ParserOptions)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.parser.Parser.parse(java.nio.channels.ReadableByteChannel, java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.parser.Parser.parse(java.nio.channels.ReadableByteChannel, java.lang.String, org.apache.abdera.parser.ParserOptions)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.parser.Parser.parse(javax.xml.stream.XMLStreamReader, java.lang.String, org.apache.abdera.parser.ParserOptions)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.parser.ParserFactory.getParser(java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.parser.ParserOptions.getCharset()</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.parser.ParserOptions.registerEntity(java.lang.String, java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.parser.ParserOptions.resolveEntity(java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.parser.ParserOptions.setCharset(java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.protocol.EntityProvider.getContentType()</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.protocol.Message.getCacheControl()</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.protocol.Message.getContentLanguage()</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.protocol.Message.getDateHeader(java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.protocol.Message.getDecodedHeader(java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.protocol.Message.getDecodedHeaders(java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.protocol.Message.getHeader(java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.protocol.Message.getHeaderNames()</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.protocol.Message.getHeaders(java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.protocol.Message.getSlug()</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.protocol.Request.getAccept()</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.protocol.Request.getAcceptCharset()</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.protocol.Request.getAcceptEncoding()</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.protocol.Request.getAcceptLanguage()</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.protocol.Request.getAuthorization()</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.protocol.Response$ResponseType.Response$ResponseType(java.lang.String, int)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.protocol.Response$ResponseType.static {}</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.protocol.Response$ResponseType.valueOf(java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.protocol.Response.getAllow()</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.protocol.Response.getNoCacheHeaders()</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.protocol.Response.getPrivateHeaders()</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.protocol.Response.getStatusText()</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.protocol.error.Error.NS</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.protocol.error.Error.create(org.apache.abdera.Abdera, int, java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.protocol.error.Error.create(org.apache.abdera.Abdera, int, java.lang.String, java.lang.Throwable)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.protocol.error.Error.create(org.apache.abdera.writer.StreamWriter, int, java.lang.String, java.lang.Throwable)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.protocol.error.Error.getCode()</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.protocol.error.Error.getMessage()</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.protocol.error.Error.setCode(int)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.protocol.error.Error.setMessage(java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.protocol.error.Error.static {}</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.protocol.error.ErrorExtensionFactory.ErrorExtensionFactory()</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.protocol.error.ProtocolException.ProtocolException(org.apache.abdera.Abdera, int, java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.protocol.error.ProtocolException.ProtocolException(org.apache.abdera.protocol.error.Error)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.protocol.error.ProtocolException.equals(java.lang.Object)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.protocol.error.ProtocolException.hashCode()</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.protocol.util.AbstractEntityProvider.getContentType()</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.protocol.util.AbstractMessage.getCacheControl()</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.protocol.util.AbstractMessage.getContentLanguage()</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.protocol.util.AbstractMessage.getContentLocation()</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.protocol.util.AbstractMessage.getContentType()</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.protocol.util.AbstractMessage.getDecodedHeader(java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.protocol.util.AbstractMessage.getDecodedHeaders(java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.protocol.util.AbstractMessage.getSlug()</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.protocol.util.AbstractMessage.isNoCache()</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.protocol.util.AbstractRequest.getAccept()</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.protocol.util.AbstractRequest.getAcceptCharset()</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.protocol.util.AbstractRequest.getAcceptEncoding()</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.protocol.util.AbstractRequest.getAcceptLanguage()</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.protocol.util.AbstractRequest.getAuthorization()</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.protocol.util.AbstractRequest.getIfMatch()</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.protocol.util.AbstractRequest.getIfModifiedSince()</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.protocol.util.AbstractRequest.getIfNoneMatch()</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.protocol.util.AbstractRequest.getIfUnmodifiedSince()</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.protocol.util.AbstractResponse.AbstractResponse()</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.protocol.util.AbstractResponse.getAge()</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.protocol.util.AbstractResponse.getAllow()</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.protocol.util.AbstractResponse.getContentLength()</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.protocol.util.AbstractResponse.getEntityTag()</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.protocol.util.AbstractResponse.getExpires()</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.protocol.util.AbstractResponse.getLastModified()</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.protocol.util.AbstractResponse.getLocation()</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.protocol.util.AbstractResponse.getNoCacheHeaders()</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.protocol.util.AbstractResponse.getPrivateHeaders()</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.protocol.util.AbstractResponse.nocache_headers</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.protocol.util.AbstractResponse.private_headers</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.protocol.util.AbstractResponse.setNoCacheHeaders(java.lang.String[])</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.protocol.util.AbstractResponse.setPrivateHeaders(java.lang.String[])</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.protocol.util.CacheControlUtil$CacheControlParser.CacheControlUtil$CacheControlParser(java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.protocol.util.CacheControlUtil$CacheControlParser.REGEX</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.protocol.util.CacheControlUtil$CacheControlParser.getValue(org.apache.abdera.protocol.util.CacheControlUtil$Directive)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.protocol.util.CacheControlUtil$CacheControlParser.getValues(org.apache.abdera.protocol.util.CacheControlUtil$Directive)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.protocol.util.CacheControlUtil$CacheControlParser.static {}</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.protocol.util.CacheControlUtil$Directive.CacheControlUtil$Directive(java.lang.String, int)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.protocol.util.CacheControlUtil$Directive.select(java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.protocol.util.CacheControlUtil$Directive.static {}</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.protocol.util.CacheControlUtil$Directive.valueOf(java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.protocol.util.CacheControlUtil$Idempotent.CacheControlUtil$Idempotent(java.lang.String, int)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.protocol.util.CacheControlUtil$Idempotent.static {}</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.protocol.util.CacheControlUtil$Idempotent.valueOf(java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.protocol.util.CacheControlUtil.append(java.lang.StringBuilder, java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.protocol.util.CacheControlUtil.buildCacheControl(org.apache.abdera.protocol.util.AbstractRequest)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.protocol.util.CacheControlUtil.isIdempotent(java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.protocol.util.CacheControlUtil.parseCacheControl(java.lang.String, org.apache.abdera.protocol.util.AbstractRequest)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.protocol.util.CacheControlUtil.parseCacheControl(java.lang.String, org.apache.abdera.protocol.util.AbstractResponse)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.protocol.util.CacheControlUtil.value(java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.util.AbderaConfiguration.getBundle(java.util.Locale)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.util.AbderaConfiguration.getConfigurationOption(java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.util.AbderaConfiguration.getConfigurationOption(java.lang.String, java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.util.AbderaConfiguration.getDefault()</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.util.AbderaConfiguration.getName(java.lang.Class)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.util.AbderaConfiguration.initNamedParsers()</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.util.AbderaConfiguration.initNamedWriters()</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.util.AbderaConfiguration.initStreamWriters()</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.util.AbderaConfiguration.loadExtensionFactories()</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.util.AbderaConfiguration.newFactoryInstance(org.apache.abdera.Abdera)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.util.AbderaConfiguration.newParserFactoryInstance(org.apache.abdera.Abdera)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.util.AbderaConfiguration.newParserInstance(org.apache.abdera.Abdera)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.util.AbderaConfiguration.newStreamWriterInstance(org.apache.abdera.Abdera)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.util.AbderaConfiguration.newWriterFactoryInstance(org.apache.abdera.Abdera)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.util.AbderaConfiguration.newWriterInstance(org.apache.abdera.Abdera)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.util.AbderaConfiguration.newXPathInstance(org.apache.abdera.Abdera)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.util.AbderaConfiguration.throwex(java.lang.String, java.lang.String, java.lang.Throwable)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.util.AbderaDataSource.AbderaDataSource(org.apache.abdera.model.Base)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.util.AbderaDataSource.getContentType()</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.util.AbderaDataSource.getName()</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.util.AbderaDataSource.mimetype</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.util.AbderaDataSource.name</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.util.AbstractExtensionFactory.AbstractExtensionFactory(java.lang.String[])</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.util.AbstractExtensionFactory.addMimeType(javax.xml.namespace.QName, java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.util.AbstractExtensionFactory.getMimeType(org.apache.abdera.model.Base)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.util.AbstractExtensionFactory.getNamespaces()</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.util.AbstractExtensionFactory.handlesNamespace(java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.util.AbstractNamedParser.AbstractNamedParser(org.apache.abdera.Abdera, java.lang.String, java.lang.String[])</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.util.AbstractNamedParser.formats</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.util.AbstractNamedParser.getInputFormats()</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.util.AbstractNamedParser.getName()</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.util.AbstractNamedParser.name</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.util.AbstractNamedParser.parsesFormat(java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.util.AbstractNamedWriter.AbstractNamedWriter(java.lang.String, java.lang.String[])</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.util.AbstractNamedWriter.formats</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.util.AbstractNamedWriter.getName()</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.util.AbstractNamedWriter.getOutputFormats()</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.util.AbstractNamedWriter.name</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.util.AbstractNamedWriter.outputsFormat(java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.util.AbstractParser.parse(java.io.InputStream)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.util.AbstractParser.parse(java.io.InputStream, java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.util.AbstractParser.parse(java.io.InputStream, java.lang.String, org.apache.abdera.parser.ParserOptions)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.util.AbstractParser.parse(java.io.InputStream, org.apache.abdera.parser.ParserOptions)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.util.AbstractParser.parse(java.io.Reader)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.util.AbstractParser.parse(java.io.Reader, java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.util.AbstractParser.parse(java.io.Reader, org.apache.abdera.parser.ParserOptions)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.util.AbstractParser.parse(java.nio.channels.ReadableByteChannel)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.util.AbstractParser.parse(java.nio.channels.ReadableByteChannel, java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.util.AbstractParser.parse(java.nio.channels.ReadableByteChannel, java.lang.String, org.apache.abdera.parser.ParserOptions)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.util.AbstractParser.parse(java.nio.channels.ReadableByteChannel, org.apache.abdera.parser.ParserOptions)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.util.AbstractParser.parse(javax.xml.stream.XMLStreamReader)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.util.AbstractParserOptions.AbstractParserOptions()</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.util.AbstractParserOptions.charset</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.util.AbstractParserOptions.getCharset()</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.util.AbstractParserOptions.initDefaultEntities()</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.util.AbstractParserOptions.registerEntity(java.lang.String, java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.util.AbstractParserOptions.resolveEntity(java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.util.AbstractParserOptions.setCharset(java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.util.AbstractStreamWriter.AbstractStreamWriter(org.apache.abdera.Abdera, java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.util.AbstractStreamWriter.append(char)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.util.AbstractStreamWriter.append(java.lang.CharSequence)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.util.AbstractStreamWriter.getName()</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.util.AbstractStreamWriter.name</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.util.AbstractStreamWriter.setChannel(java.nio.channels.WritableByteChannel, java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.util.AbstractStreamWriter.startCategories()</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.util.AbstractStreamWriter.startCategories(boolean)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.util.AbstractStreamWriter.startCategories(boolean, java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.util.AbstractStreamWriter.startCategory(java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.util.AbstractStreamWriter.startCategory(java.lang.String, java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.util.AbstractStreamWriter.startCategory(java.lang.String, java.lang.String, java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.util.AbstractStreamWriter.startCollection(java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.util.AbstractStreamWriter.startContent(java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.util.AbstractStreamWriter.startContent(java.lang.String, java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.util.AbstractStreamWriter.startContent(org.apache.abdera.model.Content$Type)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.util.AbstractStreamWriter.startContent(org.apache.abdera.model.Content$Type, java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.util.AbstractStreamWriter.startDocument()</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.util.AbstractStreamWriter.startElement(java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.util.AbstractStreamWriter.startElement(java.lang.String, java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.util.AbstractStreamWriter.startElement(javax.xml.namespace.QName)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.util.AbstractStreamWriter.startGenerator(java.lang.String, java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.util.AbstractStreamWriter.startLink(java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.util.AbstractStreamWriter.startLink(java.lang.String, java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.util.AbstractStreamWriter.startLink(java.lang.String, java.lang.String, java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.util.AbstractStreamWriter.startLink(java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, long)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.util.AbstractStreamWriter.startPerson(java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.util.AbstractStreamWriter.startPerson(java.lang.String, java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.util.AbstractStreamWriter.startPerson(java.lang.String, java.lang.String, java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.util.AbstractStreamWriter.startText(java.lang.String, java.lang.String, java.lang.String, org.apache.abdera.model.Text$Type)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.util.AbstractStreamWriter.startText(java.lang.String, java.lang.String, org.apache.abdera.model.Text$Type)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.util.AbstractStreamWriter.startText(java.lang.String, org.apache.abdera.model.Text$Type)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.util.AbstractStreamWriter.startText(javax.xml.namespace.QName, org.apache.abdera.model.Text$Type)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.util.AbstractStreamWriter.writeAccepts(java.lang.String[])</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.util.AbstractStreamWriter.writeAcceptsEntry()</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.util.AbstractStreamWriter.writeAcceptsNothing()</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.util.AbstractStreamWriter.writeAttribute(java.lang.String, double)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.util.AbstractStreamWriter.writeAttribute(java.lang.String, int)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.util.AbstractStreamWriter.writeAttribute(java.lang.String, java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.util.AbstractStreamWriter.writeAttribute(java.lang.String, java.lang.String, double)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.util.AbstractStreamWriter.writeAttribute(java.lang.String, java.lang.String, int)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.util.AbstractStreamWriter.writeAttribute(java.lang.String, java.lang.String, java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.util.AbstractStreamWriter.writeAttribute(java.lang.String, java.lang.String, java.lang.String, double)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.util.AbstractStreamWriter.writeAttribute(java.lang.String, java.lang.String, java.lang.String, int)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.util.AbstractStreamWriter.writeAttribute(java.lang.String, java.lang.String, java.lang.String, java.util.Date)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.util.AbstractStreamWriter.writeAttribute(java.lang.String, java.lang.String, java.lang.String, long)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.util.AbstractStreamWriter.writeAttribute(java.lang.String, java.lang.String, java.util.Date)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.util.AbstractStreamWriter.writeAttribute(java.lang.String, java.lang.String, long)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.util.AbstractStreamWriter.writeAttribute(java.lang.String, java.util.Date)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.util.AbstractStreamWriter.writeAttribute(java.lang.String, long)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.util.AbstractStreamWriter.writeAttribute(javax.xml.namespace.QName, double)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.util.AbstractStreamWriter.writeAttribute(javax.xml.namespace.QName, int)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.util.AbstractStreamWriter.writeAttribute(javax.xml.namespace.QName, java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.util.AbstractStreamWriter.writeAttribute(javax.xml.namespace.QName, java.util.Date)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.util.AbstractStreamWriter.writeAttribute(javax.xml.namespace.QName, long)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.util.AbstractStreamWriter.writeAuthor(java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.util.AbstractStreamWriter.writeAuthor(java.lang.String, java.lang.String, java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.util.AbstractStreamWriter.writeBase(java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.util.AbstractStreamWriter.writeBase(org.apache.abdera.i18n.iri.IRI)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.util.AbstractStreamWriter.writeCategory(java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.util.AbstractStreamWriter.writeCategory(java.lang.String, java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.util.AbstractStreamWriter.writeCategory(java.lang.String, java.lang.String, java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.util.AbstractStreamWriter.writeContent(java.lang.String, java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.util.AbstractStreamWriter.writeContent(org.apache.abdera.model.Content$Type, java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.util.AbstractStreamWriter.writeContributor(java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.util.AbstractStreamWriter.writeContributor(java.lang.String, java.lang.String, java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.util.AbstractStreamWriter.writeDate(java.lang.String, java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.util.AbstractStreamWriter.writeDate(java.lang.String, java.lang.String, java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.util.AbstractStreamWriter.writeDate(java.lang.String, java.lang.String, java.lang.String, java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.util.AbstractStreamWriter.writeDate(java.lang.String, java.lang.String, java.lang.String, java.util.Date)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.util.AbstractStreamWriter.writeDate(java.lang.String, java.lang.String, java.util.Date)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.util.AbstractStreamWriter.writeDate(java.lang.String, java.util.Date)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.util.AbstractStreamWriter.writeDate(javax.xml.namespace.QName, java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.util.AbstractStreamWriter.writeDate(javax.xml.namespace.QName, java.util.Date)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.util.AbstractStreamWriter.writeDraft(boolean)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.util.AbstractStreamWriter.writeEdited(java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.util.AbstractStreamWriter.writeElementText(double)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.util.AbstractStreamWriter.writeElementText(int)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.util.AbstractStreamWriter.writeElementText(java.io.InputStream)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.util.AbstractStreamWriter.writeElementText(java.lang.String, java.lang.Object[])</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.util.AbstractStreamWriter.writeElementText(java.util.Date)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.util.AbstractStreamWriter.writeElementText(long)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.util.AbstractStreamWriter.writeGenerator(java.lang.String, java.lang.String, java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.util.AbstractStreamWriter.writeIRIElement(java.lang.String, java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.util.AbstractStreamWriter.writeIRIElement(java.lang.String, java.lang.String, java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.util.AbstractStreamWriter.writeIRIElement(java.lang.String, java.lang.String, java.lang.String, java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.util.AbstractStreamWriter.writeIRIElement(java.lang.String, java.lang.String, java.lang.String, org.apache.abdera.i18n.iri.IRI)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.util.AbstractStreamWriter.writeIRIElement(java.lang.String, java.lang.String, org.apache.abdera.i18n.iri.IRI)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.util.AbstractStreamWriter.writeIRIElement(java.lang.String, org.apache.abdera.i18n.iri.IRI)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.util.AbstractStreamWriter.writeIRIElement(javax.xml.namespace.QName, java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.util.AbstractStreamWriter.writeIRIElement(javax.xml.namespace.QName, org.apache.abdera.i18n.iri.IRI)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.util.AbstractStreamWriter.writeIcon(java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.util.AbstractStreamWriter.writeId(java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.util.AbstractStreamWriter.writeLanguage(java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.util.AbstractStreamWriter.writeLanguage(org.apache.abdera.i18n.rfc4646.Lang)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.util.AbstractStreamWriter.writeLink(java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.util.AbstractStreamWriter.writeLink(java.lang.String, java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.util.AbstractStreamWriter.writeLink(java.lang.String, java.lang.String, java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.util.AbstractStreamWriter.writeLink(java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, long)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.util.AbstractStreamWriter.writeLogo(java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.util.AbstractStreamWriter.writePerson(java.lang.String, java.lang.String, java.lang.String, java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.util.AbstractStreamWriter.writePerson(java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.util.AbstractStreamWriter.writePerson(java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.util.AbstractStreamWriter.writePerson(javax.xml.namespace.QName, java.lang.String, java.lang.String, java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.util.AbstractStreamWriter.writePersonEmail(java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.util.AbstractStreamWriter.writePersonName(java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.util.AbstractStreamWriter.writePersonUri(java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.util.AbstractStreamWriter.writePublished(java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.util.AbstractStreamWriter.writeRights(java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.util.AbstractStreamWriter.writeRights(org.apache.abdera.model.Text$Type, java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.util.AbstractStreamWriter.writeSubtitle(java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.util.AbstractStreamWriter.writeSubtitle(org.apache.abdera.model.Text$Type, java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.util.AbstractStreamWriter.writeSummary(java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.util.AbstractStreamWriter.writeSummary(org.apache.abdera.model.Text$Type, java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.util.AbstractStreamWriter.writeText(java.lang.String, java.lang.String, java.lang.String, org.apache.abdera.model.Text$Type, java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.util.AbstractStreamWriter.writeText(java.lang.String, java.lang.String, org.apache.abdera.model.Text$Type, java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.util.AbstractStreamWriter.writeText(java.lang.String, org.apache.abdera.model.Text$Type, java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.util.AbstractStreamWriter.writeText(javax.xml.namespace.QName, org.apache.abdera.model.Text$Type, java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.util.AbstractStreamWriter.writeTitle(java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.util.AbstractStreamWriter.writeTitle(org.apache.abdera.model.Text$Type, java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.util.AbstractStreamWriter.writeUpdated(java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.util.AbstractWriter.writeTo(org.apache.abdera.model.Base, java.nio.channels.WritableByteChannel, org.apache.abdera.writer.WriterOptions)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.util.AbstractWriterOptions.AbstractWriterOptions()</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.util.AbstractWriterOptions.charset</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.util.AbstractWriterOptions.getCharset()</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.util.AbstractWriterOptions.setCharset(java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.util.AbstractXPath.booleanValueOf(java.lang.String, org.apache.abdera.model.Base)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.util.AbstractXPath.evaluate(java.lang.String, org.apache.abdera.model.Base)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.util.AbstractXPath.numericValueOf(java.lang.String, org.apache.abdera.model.Base)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.util.AbstractXPath.selectNodes(java.lang.String, org.apache.abdera.model.Base)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.util.AbstractXPath.selectSingleNode(java.lang.String, org.apache.abdera.model.Base)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.util.AbstractXPath.valueOf(java.lang.String, org.apache.abdera.model.Base)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.util.Configuration.getConfigurationOption(java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.util.Configuration.getConfigurationOption(java.lang.String, java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.util.Constants.APP_MEDIA_TYPE</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.util.Constants.APP_NS</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.util.Constants.APP_NS_PRE_RFC</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.util.Constants.APP_PREFIX</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.util.Constants.ATOM_MEDIA_TYPE</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.util.Constants.ATOM_NS</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.util.Constants.CAT_MEDIA_TYPE</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.util.Constants.CONFIG_FACTORY</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.util.Constants.CONFIG_PARSER</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.util.Constants.CONFIG_PARSERFACTORY</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.util.Constants.CONFIG_STREAMWRITER</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.util.Constants.CONFIG_WRITER</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.util.Constants.CONFIG_WRITERFACTORY</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.util.Constants.CONFIG_XPATH</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.util.Constants.CONTROL_NS</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.util.Constants.CONTROL_PREFIX</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.util.Constants.DEFAULT_FACTORY</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.util.Constants.DEFAULT_PARSER</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.util.Constants.DEFAULT_PARSERFACTORY</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.util.Constants.DEFAULT_STREAMWRITER</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.util.Constants.DEFAULT_WRITER</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.util.Constants.DEFAULT_WRITERFACTORY</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.util.Constants.DEFAULT_XPATH</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.util.Constants.ENTRY_MEDIA_TYPE</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.util.Constants.FEED_MEDIA_TYPE</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.util.Constants.HTML</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.util.Constants.LN_ACCEPT</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.util.Constants.LN_ALTERNATE</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.util.Constants.LN_ALTERNATE_MULTIPART_RELATED</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.util.Constants.LN_AUTHOR</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.util.Constants.LN_BASE</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.util.Constants.LN_CATEGORIES</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.util.Constants.LN_CATEGORY</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.util.Constants.LN_CLASS</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.util.Constants.LN_COLLECTION</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.util.Constants.LN_CONTENT</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.util.Constants.LN_CONTRIBUTOR</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.util.Constants.LN_CONTROL</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.util.Constants.LN_DIV</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.util.Constants.LN_DRAFT</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.util.Constants.LN_EDITED</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.util.Constants.LN_EMAIL</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.util.Constants.LN_ENTRY</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.util.Constants.LN_FEED</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.util.Constants.LN_FIXED</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.util.Constants.LN_GENERATOR</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.util.Constants.LN_HREF</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.util.Constants.LN_HREFLANG</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.util.Constants.LN_ICON</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.util.Constants.LN_ID</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.util.Constants.LN_LABEL</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.util.Constants.LN_LANG</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.util.Constants.LN_LENGTH</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.util.Constants.LN_LINK</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.util.Constants.LN_LOGO</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.util.Constants.LN_NAME</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.util.Constants.LN_PUBLISHED</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.util.Constants.LN_REL</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.util.Constants.LN_RIGHTS</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.util.Constants.LN_SCHEME</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.util.Constants.LN_SERVICE</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.util.Constants.LN_SOURCE</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.util.Constants.LN_SPACE</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.util.Constants.LN_SRC</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.util.Constants.LN_SUBTITLE</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.util.Constants.LN_SUMMARY</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.util.Constants.LN_TERM</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.util.Constants.LN_TITLE</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.util.Constants.LN_TYPE</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.util.Constants.LN_UPDATED</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.util.Constants.LN_URI</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.util.Constants.LN_VERSION</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.util.Constants.LN_WORKSPACE</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.util.Constants.MULTIPART_RELATED_TYPE</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.util.Constants.NAMED_PARSER</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.util.Constants.NAMED_WRITER</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.util.Constants.NO</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.util.Constants.PREFIX</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.util.Constants.STREAM_WRITER</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.util.Constants.TEXT</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.util.Constants.XHTML</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.util.Constants.XHTML_NS</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.util.Constants.XML</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.util.Constants.XML_MEDIA_TYPE</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.util.Constants.XML_NS</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.util.Constants.YES</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.util.Constants.static {}</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.util.Discover$DefaultLoader.Discover$DefaultLoader(java.lang.String, boolean, java.lang.Object[])</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.util.Discover$DefaultLoader.Discover$DefaultLoader(java.lang.String, boolean, java.lang.Object[], java.lang.ClassLoader)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.util.Discover$DefaultLoader.id</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.util.Discover$DefaultLoader.init(boolean)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.util.Discover$DefaultLoaderIterator.create(java.lang.String, java.lang.Object[])</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.util.Discover$DefaultLoaderIterator.next()</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.util.Discover$LineReaderLoaderIterator.Discover$LineReaderLoaderIterator(java.lang.ClassLoader, java.io.InputStream, boolean, java.lang.Object[])</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.util.Discover$LineReaderLoaderIterator.hasNext()</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.util.Discover$LineReaderLoaderIterator.line</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.util.Discover$LineReaderLoaderIterator.read()</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.util.Discover$LineReaderLoaderIterator.readNext()</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.util.Discover.access$100(java.lang.ClassLoader, java.lang.String, boolean, java.lang.Object[])</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.util.Discover.getClass(java.lang.ClassLoader, java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.util.Discover.load(java.lang.ClassLoader, java.lang.String, boolean, java.lang.Object[])</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.util.Discover.locate(java.lang.String, boolean, java.lang.ClassLoader, java.lang.Object[])</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.util.Discover.locate(java.lang.String, boolean, java.lang.Object[])</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.util.Discover.locate(java.lang.String, java.lang.ClassLoader, java.lang.Object[])</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.util.Discover.locate(java.lang.String, java.lang.Iterable)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.util.Discover.locate(java.lang.String, java.lang.Object[])</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.util.Discover.locate(java.lang.String, java.lang.String, java.lang.ClassLoader, java.lang.Object[])</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.util.Discover.locate(java.lang.String, java.lang.String, java.lang.Object[])</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.util.Discover.locateResource(java.lang.String, java.lang.ClassLoader, java.lang.Class)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.util.Discover.locateResourceAsStream(java.lang.String, java.lang.ClassLoader, java.lang.Class)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.util.Discover.locateResources(java.lang.String, java.lang.ClassLoader, java.lang.Class)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.util.EntityTag.EntityTag(java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.util.EntityTag.EntityTag(java.lang.String, boolean)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.util.EntityTag.EntityTag(java.lang.String, boolean, boolean)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.util.EntityTag.INVALID_ENTITY_TAG</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.util.EntityTag.attemptParse(java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.util.EntityTag.compareTo(org.apache.abdera.util.EntityTag)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.util.EntityTag.equals(java.lang.Object)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.util.EntityTag.generate(java.lang.String[])</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.util.EntityTag.getTag()</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.util.EntityTag.hashCode()</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.util.EntityTag.matches(java.lang.String, java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.util.EntityTag.matches(org.apache.abdera.util.EntityTag, java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.util.EntityTag.matches(org.apache.abdera.util.EntityTag, java.lang.String[])</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.util.EntityTag.matchesAny(java.lang.String, java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.util.EntityTag.matchesAny(java.lang.String, java.lang.String, boolean)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.util.EntityTag.matchesAny(org.apache.abdera.util.EntityTag, java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.util.EntityTag.matchesAny(org.apache.abdera.util.EntityTag, java.lang.String, boolean)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.util.EntityTag.parse(java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.util.EntityTag.parseTags(java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.util.EntityTag.static {}</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.util.EntityTag.tag</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.util.EntityTag.toString()</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.util.EntityTag.toString(java.lang.String[])</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.util.EntityTag.toString(org.apache.abdera.util.EntityTag[])</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.util.MimeTypeHelper$1.compare(java.lang.Object, java.lang.Object)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.util.MimeTypeHelper$1.compare(java.lang.String, java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.util.MimeTypeHelper.compare(java.lang.String, java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.util.MimeTypeHelper.compare(javax.activation.MimeType, javax.activation.MimeType)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.util.MimeTypeHelper.condense(java.lang.String[])</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.util.MimeTypeHelper.contains(java.lang.String, java.util.List, boolean)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.util.MimeTypeHelper.createWildcard()</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.util.MimeTypeHelper.getCharset(java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.util.MimeTypeHelper.getMimeType(org.apache.abdera.model.Base)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.util.MimeTypeHelper.isApp(java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.util.MimeTypeHelper.isAtom(java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.util.MimeTypeHelper.isEntry(java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.util.MimeTypeHelper.isFeed(java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.util.MimeTypeHelper.isMatch(java.lang.String, java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.util.MimeTypeHelper.isMatch(javax.activation.MimeType, javax.activation.MimeType, boolean)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.util.MimeTypeHelper.isMatchType(java.lang.String, java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.util.MimeTypeHelper.isMimeType(java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.util.MimeTypeHelper.isMultipart(java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.util.MimeTypeHelper.isText(java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.util.MimeTypeHelper.isXml(java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.util.NamedItem.getName()</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.util.ServiceUtil.loadExtensionFactories()</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.util.ServiceUtil.loadimpls(java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.util.ServiceUtil.loadimpls(java.lang.String, boolean)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.util.ServiceUtil.newFactoryInstance(org.apache.abdera.Abdera)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.util.ServiceUtil.newInstance(java.lang.String, java.lang.String, java.lang.Object[])</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.util.ServiceUtil.newInstance(java.lang.String, java.lang.String, org.apache.abdera.Abdera)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.util.ServiceUtil.newParserFactoryInstance(org.apache.abdera.Abdera)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.util.ServiceUtil.newParserInstance(org.apache.abdera.Abdera)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.util.ServiceUtil.newStreamWriterInstance(org.apache.abdera.Abdera)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.util.ServiceUtil.newWriterFactoryInstance(org.apache.abdera.Abdera)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.util.ServiceUtil.newWriterInstance(org.apache.abdera.Abdera)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.util.ServiceUtil.newXPathInstance(org.apache.abdera.Abdera)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.util.Version.APP_NAME</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.util.Version.URI</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.util.Version.VERSION</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.util.XmlRestrictedCharReader.XmlRestrictedCharReader(java.io.InputStream, java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.util.XmlRestrictedCharReader.XmlRestrictedCharReader(java.io.InputStream, java.lang.String, char)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.util.XmlRestrictedCharReader.XmlRestrictedCharReader(java.io.InputStream, java.lang.String, org.apache.abdera.util.XmlUtil$XMLVersion)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.util.XmlRestrictedCharReader.XmlRestrictedCharReader(java.io.InputStream, java.lang.String, org.apache.abdera.util.XmlUtil$XMLVersion, char)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.util.XmlUtil$XMLVersion.XmlUtil$XMLVersion(java.lang.String, int)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.util.XmlUtil$XMLVersion.static {}</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.util.XmlUtil$XMLVersion.valueOf(java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.util.XmlUtil.getVersion(java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.util.filter.CompoundParseFilter$Condition.CompoundParseFilter$Condition(java.lang.String, int)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.util.filter.CompoundParseFilter$Condition.static {}</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.util.filter.CompoundParseFilter$Condition.valueOf(java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.util.filter.SafeContentWhiteListParseFilter$xhtml_attributes.SafeContentWhiteListParseFilter$xhtml_attributes(java.lang.String, int)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.util.filter.SafeContentWhiteListParseFilter$xhtml_attributes.fix(java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.util.filter.SafeContentWhiteListParseFilter$xhtml_attributes.static {}</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.util.filter.SafeContentWhiteListParseFilter$xhtml_attributes.valueOf(java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.util.filter.SafeContentWhiteListParseFilter$xhtml_elements.SafeContentWhiteListParseFilter$xhtml_elements(java.lang.String, int)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.util.filter.SafeContentWhiteListParseFilter$xhtml_elements.static {}</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.util.filter.SafeContentWhiteListParseFilter$xhtml_elements.valueOf(java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.util.filter.SafeContentWhiteListParseFilter.acceptable(javax.xml.namespace.QName)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.util.filter.SafeContentWhiteListParseFilter.acceptable(javax.xml.namespace.QName, javax.xml.namespace.QName)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.writer.NamedWriter.getOutputFormats()</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.writer.NamedWriter.outputsFormat(java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.writer.StreamWriter.setChannel(java.nio.channels.WritableByteChannel, java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.writer.StreamWriter.setOutputStream(java.io.OutputStream, java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.writer.StreamWriter.setPrefix(java.lang.String, java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.writer.StreamWriter.startCategories(boolean, java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.writer.StreamWriter.startCategory(java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.writer.StreamWriter.startCategory(java.lang.String, java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.writer.StreamWriter.startCategory(java.lang.String, java.lang.String, java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.writer.StreamWriter.startCollection(java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.writer.StreamWriter.startContent(java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.writer.StreamWriter.startContent(java.lang.String, java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.writer.StreamWriter.startContent(org.apache.abdera.model.Content$Type, java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.writer.StreamWriter.startDocument(java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.writer.StreamWriter.startDocument(java.lang.String, java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.writer.StreamWriter.startElement(java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.writer.StreamWriter.startElement(java.lang.String, java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.writer.StreamWriter.startElement(java.lang.String, java.lang.String, java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.writer.StreamWriter.startGenerator(java.lang.String, java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.writer.StreamWriter.startLink(java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.writer.StreamWriter.startLink(java.lang.String, java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.writer.StreamWriter.startLink(java.lang.String, java.lang.String, java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.writer.StreamWriter.startLink(java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, long)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.writer.StreamWriter.startPerson(java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.writer.StreamWriter.startPerson(java.lang.String, java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.writer.StreamWriter.startPerson(java.lang.String, java.lang.String, java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.writer.StreamWriter.startText(java.lang.String, java.lang.String, java.lang.String, org.apache.abdera.model.Text$Type)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.writer.StreamWriter.startText(java.lang.String, java.lang.String, org.apache.abdera.model.Text$Type)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.writer.StreamWriter.startText(java.lang.String, org.apache.abdera.model.Text$Type)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.writer.StreamWriter.writeAccepts(java.lang.String[])</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.writer.StreamWriter.writeAttribute(java.lang.String, double)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.writer.StreamWriter.writeAttribute(java.lang.String, int)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.writer.StreamWriter.writeAttribute(java.lang.String, java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.writer.StreamWriter.writeAttribute(java.lang.String, java.lang.String, double)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.writer.StreamWriter.writeAttribute(java.lang.String, java.lang.String, int)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.writer.StreamWriter.writeAttribute(java.lang.String, java.lang.String, java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.writer.StreamWriter.writeAttribute(java.lang.String, java.lang.String, java.lang.String, double)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.writer.StreamWriter.writeAttribute(java.lang.String, java.lang.String, java.lang.String, int)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.writer.StreamWriter.writeAttribute(java.lang.String, java.lang.String, java.lang.String, java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.writer.StreamWriter.writeAttribute(java.lang.String, java.lang.String, java.lang.String, java.util.Date)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.writer.StreamWriter.writeAttribute(java.lang.String, java.lang.String, java.lang.String, long)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.writer.StreamWriter.writeAttribute(java.lang.String, java.lang.String, java.util.Date)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.writer.StreamWriter.writeAttribute(java.lang.String, java.lang.String, long)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.writer.StreamWriter.writeAttribute(java.lang.String, java.util.Date)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.writer.StreamWriter.writeAttribute(java.lang.String, long)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.writer.StreamWriter.writeAttribute(javax.xml.namespace.QName, java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.writer.StreamWriter.writeAuthor(java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.writer.StreamWriter.writeAuthor(java.lang.String, java.lang.String, java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.writer.StreamWriter.writeBase(java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.writer.StreamWriter.writeCategory(java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.writer.StreamWriter.writeCategory(java.lang.String, java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.writer.StreamWriter.writeCategory(java.lang.String, java.lang.String, java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.writer.StreamWriter.writeComment(java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.writer.StreamWriter.writeContent(java.lang.String, java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.writer.StreamWriter.writeContent(org.apache.abdera.model.Content$Type, java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.writer.StreamWriter.writeContributor(java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.writer.StreamWriter.writeContributor(java.lang.String, java.lang.String, java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.writer.StreamWriter.writeDate(java.lang.String, java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.writer.StreamWriter.writeDate(java.lang.String, java.lang.String, java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.writer.StreamWriter.writeDate(java.lang.String, java.lang.String, java.lang.String, java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.writer.StreamWriter.writeDate(java.lang.String, java.lang.String, java.lang.String, java.util.Date)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.writer.StreamWriter.writeDate(java.lang.String, java.lang.String, java.util.Date)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.writer.StreamWriter.writeDate(java.lang.String, java.util.Date)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.writer.StreamWriter.writeDate(javax.xml.namespace.QName, java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.writer.StreamWriter.writeEdited(java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.writer.StreamWriter.writeElementText(java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.writer.StreamWriter.writeElementText(java.lang.String, java.lang.Object[])</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.writer.StreamWriter.writeGenerator(java.lang.String, java.lang.String, java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.writer.StreamWriter.writeIRIElement(java.lang.String, java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.writer.StreamWriter.writeIRIElement(java.lang.String, java.lang.String, java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.writer.StreamWriter.writeIRIElement(java.lang.String, java.lang.String, java.lang.String, java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.writer.StreamWriter.writeIRIElement(java.lang.String, java.lang.String, java.lang.String, org.apache.abdera.i18n.iri.IRI)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.writer.StreamWriter.writeIRIElement(java.lang.String, java.lang.String, org.apache.abdera.i18n.iri.IRI)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.writer.StreamWriter.writeIRIElement(java.lang.String, org.apache.abdera.i18n.iri.IRI)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.writer.StreamWriter.writeIRIElement(javax.xml.namespace.QName, java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.writer.StreamWriter.writeIcon(java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.writer.StreamWriter.writeId(java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.writer.StreamWriter.writeLanguage(java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.writer.StreamWriter.writeLink(java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.writer.StreamWriter.writeLink(java.lang.String, java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.writer.StreamWriter.writeLink(java.lang.String, java.lang.String, java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.writer.StreamWriter.writeLink(java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, long)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.writer.StreamWriter.writeLogo(java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.writer.StreamWriter.writeNamespace(java.lang.String, java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.writer.StreamWriter.writePI(java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.writer.StreamWriter.writePI(java.lang.String, java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.writer.StreamWriter.writePerson(java.lang.String, java.lang.String, java.lang.String, java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.writer.StreamWriter.writePerson(java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.writer.StreamWriter.writePerson(java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.writer.StreamWriter.writePerson(javax.xml.namespace.QName, java.lang.String, java.lang.String, java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.writer.StreamWriter.writePersonEmail(java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.writer.StreamWriter.writePersonName(java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.writer.StreamWriter.writePersonUri(java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.writer.StreamWriter.writePublished(java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.writer.StreamWriter.writeRights(java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.writer.StreamWriter.writeRights(org.apache.abdera.model.Text$Type, java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.writer.StreamWriter.writeSubtitle(java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.writer.StreamWriter.writeSubtitle(org.apache.abdera.model.Text$Type, java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.writer.StreamWriter.writeSummary(java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.writer.StreamWriter.writeSummary(org.apache.abdera.model.Text$Type, java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.writer.StreamWriter.writeText(java.lang.String, java.lang.String, java.lang.String, org.apache.abdera.model.Text$Type, java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.writer.StreamWriter.writeText(java.lang.String, java.lang.String, org.apache.abdera.model.Text$Type, java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.writer.StreamWriter.writeText(java.lang.String, org.apache.abdera.model.Text$Type, java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.writer.StreamWriter.writeText(javax.xml.namespace.QName, org.apache.abdera.model.Text$Type, java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.writer.StreamWriter.writeTitle(java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.writer.StreamWriter.writeTitle(org.apache.abdera.model.Text$Type, java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.writer.StreamWriter.writeUpdated(java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.writer.WriterFactory.getWriter(java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.writer.WriterFactory.getWriterByMediaType(java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.writer.WriterFactory.newStreamWriter(java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.writer.WriterOptions.getCharset()</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.writer.WriterOptions.setCharset(java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.xpath.XPath.booleanValueOf(java.lang.String, org.apache.abdera.model.Base)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.xpath.XPath.booleanValueOf(java.lang.String, org.apache.abdera.model.Base, java.util.Map)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.xpath.XPath.evaluate(java.lang.String, org.apache.abdera.model.Base)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.xpath.XPath.evaluate(java.lang.String, org.apache.abdera.model.Base, java.util.Map)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.xpath.XPath.numericValueOf(java.lang.String, org.apache.abdera.model.Base)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.xpath.XPath.numericValueOf(java.lang.String, org.apache.abdera.model.Base, java.util.Map)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.xpath.XPath.selectNodes(java.lang.String, org.apache.abdera.model.Base)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.xpath.XPath.selectNodes(java.lang.String, org.apache.abdera.model.Base, java.util.Map)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.xpath.XPath.selectSingleNode(java.lang.String, org.apache.abdera.model.Base)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.xpath.XPath.selectSingleNode(java.lang.String, org.apache.abdera.model.Base, java.util.Map)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.xpath.XPath.valueOf(java.lang.String, org.apache.abdera.model.Base)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.xpath.XPath.valueOf(java.lang.String, org.apache.abdera.model.Base, java.util.Map)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.xpath.XPathException.XPathException(java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.xpath.XPathException.XPathException(java.lang.String, java.lang.Throwable)</inbound>
            <feature confirmed="no">
                <name>java.lang.String.String(byte[], java.lang.String)</name>
                <inbound type="feature" confirmed="yes">org.apache.abdera.util.AbstractStreamWriter.writeElementText(java.io.InputStream)</inbound>
            </feature>
            <feature confirmed="no">
                <name>java.lang.String.String(char[])</name>
                <inbound type="feature" confirmed="yes">org.apache.abdera.util.EntityTag.generate(java.lang.String[])</inbound>
            </feature>
            <feature confirmed="no">
                <name>java.lang.String.compareTo(java.lang.String)</name>
                <inbound type="feature" confirmed="yes">org.apache.abdera.util.EntityTag.compareTo(org.apache.abdera.util.EntityTag)</inbound>
            </feature>
            <feature confirmed="no">
                <name>java.lang.String.endsWith(java.lang.String)</name>
                <inbound type="feature" confirmed="yes">org.apache.abdera.util.MimeTypeHelper.isXml(java.lang.String)</inbound>
            </feature>
            <feature confirmed="no">
                <name>java.lang.String.equals(java.lang.Object)</name>
                <inbound type="feature" confirmed="yes">org.apache.abdera.model.AtomDate.parse(java.lang.String)</inbound>
                <inbound type="feature" confirmed="yes">org.apache.abdera.protocol.error.ProtocolException.equals(java.lang.Object)</inbound>
                <inbound type="feature" confirmed="yes">org.apache.abdera.util.EntityTag.EntityTag(java.lang.String, boolean)</inbound>
                <inbound type="feature" confirmed="yes">org.apache.abdera.util.EntityTag.equals(java.lang.Object)</inbound>
                <inbound type="feature" confirmed="yes">org.apache.abdera.util.MimeTypeHelper.compare(javax.activation.MimeType, javax.activation.MimeType)</inbound>
                <inbound type="feature" confirmed="yes">org.apache.abdera.util.MimeTypeHelper.isMatch(javax.activation.MimeType, javax.activation.MimeType, boolean)</inbound>
                <inbound type="feature" confirmed="yes">org.apache.abdera.util.MimeTypeHelper.isXml(java.lang.String)</inbound>
                <inbound type="feature" confirmed="yes">org.apache.abdera.util.XmlUtil.getVersion(java.lang.String)</inbound>
                <inbound type="feature" confirmed="yes">org.apache.abdera.util.filter.SafeContentWhiteListParseFilter.acceptable(javax.xml.namespace.QName)</inbound>
                <inbound type="feature" confirmed="yes">org.apache.abdera.util.filter.SafeContentWhiteListParseFilter.acceptable(javax.xml.namespace.QName, javax.xml.namespace.QName)</inbound>
            </feature>
            <feature confirmed="no">
                <name>java.lang.String.equalsIgnoreCase(java.lang.String)</name>
                <inbound type="feature" confirmed="yes">org.apache.abdera.model.Content$Type.typeFromString(java.lang.String)</inbound>
                <inbound type="feature" confirmed="yes">org.apache.abdera.model.Text$Type.typeFromString(java.lang.String)</inbound>
                <inbound type="feature" confirmed="yes">org.apache.abdera.protocol.util.AbstractMessage.isNoCache()</inbound>
                <inbound type="feature" confirmed="yes">org.apache.abdera.util.MimeTypeHelper.isMatchType(java.lang.String, java.lang.String)</inbound>
                <inbound type="feature" confirmed="yes">org.apache.abdera.util.MimeTypeHelper.isXml(java.lang.String)</inbound>
                <inbound type="feature" confirmed="yes">org.apache.abdera.util.filter.SafeContentWhiteListParseFilter$xhtml_attributes.fix(java.lang.String)</inbound>
            </feature>
            <feature confirmed="no">
                <name>java.lang.String.getBytes(java.lang.String)</name>
                <inbound type="feature" confirmed="yes">org.apache.abdera.util.EntityTag.generate(java.lang.String[])</inbound>
            </feature>
            <feature confirmed="no">
                <name>java.lang.String.hashCode()</name>
                <inbound type="feature" confirmed="yes">org.apache.abdera.protocol.error.ProtocolException.hashCode()</inbound>
                <inbound type="feature" confirmed="yes">org.apache.abdera.util.EntityTag.hashCode()</inbound>
            </feature>
            <feature confirmed="no">
                <name>java.lang.String.indexOf(int)</name>
                <inbound type="feature" confirmed="yes">org.apache.abdera.util.EntityTag.EntityTag(java.lang.String, boolean)</inbound>
            </feature>
            <feature confirmed="no">
                <name>java.lang.String.length()</name>
                <inbound type="feature" confirmed="yes">org.apache.abdera.protocol.util.CacheControlUtil.parseCacheControl(java.lang.String, org.apache.abdera.protocol.util.AbstractRequest)</inbound>
                <inbound type="feature" confirmed="yes">org.apache.abdera.util.AbstractStreamWriter.startCategories(boolean, java.lang.String)</inbound>
                <inbound type="feature" confirmed="yes">org.apache.abdera.util.EntityTag.parse(java.lang.String)</inbound>
                <inbound type="feature" confirmed="yes">org.apache.abdera.util.EntityTag.parseTags(java.lang.String)</inbound>
                <inbound type="feature" confirmed="yes">org.apache.abdera.util.MimeTypeHelper.isMatch(java.lang.String, java.lang.String)</inbound>
            </feature>
            <feature confirmed="no">
                <name>java.lang.String.replaceAll(java.lang.String, java.lang.String)</name>
                <inbound type="feature" confirmed="yes">org.apache.abdera.protocol.util.CacheControlUtil$Directive.select(java.lang.String)</inbound>
            </feature>
            <feature confirmed="no">
                <name>java.lang.String.split(java.lang.String)</name>
                <inbound type="feature" confirmed="yes">org.apache.abdera.util.EntityTag.parseTags(java.lang.String)</inbound>
            </feature>
            <feature confirmed="no">
                <name>java.lang.String.startsWith(java.lang.String)</name>
                <inbound type="feature" confirmed="yes">org.apache.abdera.util.Discover$LineReaderLoaderIterator.readNext()</inbound>
                <inbound type="feature" confirmed="yes">org.apache.abdera.util.Discover.locateResource(java.lang.String, java.lang.ClassLoader, java.lang.Class)</inbound>
                <inbound type="feature" confirmed="yes">org.apache.abdera.util.Discover.locateResources(java.lang.String, java.lang.ClassLoader, java.lang.Class)</inbound>
            </feature>
            <feature confirmed="no">
                <name>java.lang.String.substring(int)</name>
                <inbound type="feature" confirmed="yes">org.apache.abdera.util.Discover.locateResource(java.lang.String, java.lang.ClassLoader, java.lang.Class)</inbound>
                <inbound type="feature" confirmed="yes">org.apache.abdera.util.Discover.locateResources(java.lang.String, java.lang.ClassLoader, java.lang.Class)</inbound>
            </feature>
            <feature confirmed="no">
                <name>java.lang.String.toLowerCase()</name>
                <inbound type="feature" confirmed="yes">org.apache.abdera.util.AbderaConfiguration.initNamedParsers()</inbound>
                <inbound type="feature" confirmed="yes">org.apache.abdera.util.AbderaConfiguration.initNamedWriters()</inbound>
                <inbound type="feature" confirmed="yes">org.apache.abdera.util.AbderaConfiguration.initStreamWriters()</inbound>
                <inbound type="feature" confirmed="yes">org.apache.abdera.util.AbstractStreamWriter.startContent(org.apache.abdera.model.Content$Type, java.lang.String)</inbound>
                <inbound type="feature" confirmed="yes">org.apache.abdera.util.AbstractStreamWriter.startText(java.lang.String, java.lang.String, java.lang.String, org.apache.abdera.model.Text$Type)</inbound>
                <inbound type="feature" confirmed="yes">org.apache.abdera.util.AbstractStreamWriter.startText(java.lang.String, java.lang.String, org.apache.abdera.model.Text$Type)</inbound>
                <inbound type="feature" confirmed="yes">org.apache.abdera.util.AbstractStreamWriter.startText(java.lang.String, org.apache.abdera.model.Text$Type)</inbound>
                <inbound type="feature" confirmed="yes">org.apache.abdera.util.AbstractStreamWriter.startText(javax.xml.namespace.QName, org.apache.abdera.model.Text$Type)</inbound>
                <inbound type="feature" confirmed="yes">org.apache.abdera.util.MimeTypeHelper.isEntry(java.lang.String)</inbound>
                <inbound type="feature" confirmed="yes">org.apache.abdera.util.MimeTypeHelper.isFeed(java.lang.String)</inbound>
                <inbound type="feature" confirmed="yes">org.apache.abdera.util.MimeTypeHelper.isMatch(java.lang.String, java.lang.String)</inbound>
                <inbound type="feature" confirmed="yes">org.apache.abdera.util.filter.SafeContentWhiteListParseFilter$xhtml_attributes.fix(java.lang.String)</inbound>
                <inbound type="feature" confirmed="yes">org.apache.abdera.util.filter.SafeContentWhiteListParseFilter.acceptable(javax.xml.namespace.QName)</inbound>
                <inbound type="feature" confirmed="yes">org.apache.abdera.util.filter.SafeContentWhiteListParseFilter.acceptable(javax.xml.namespace.QName, javax.xml.namespace.QName)</inbound>
            </feature>
            <feature confirmed="no">
                <name>java.lang.String.toString()</name>
                <inbound type="feature" confirmed="yes">org.apache.abdera.model.PersonWrapper.setUri(java.lang.String)</inbound>
            </feature>
            <feature confirmed="no">
                <name>java.lang.String.toUpperCase()</name>
                <inbound type="feature" confirmed="yes">org.apache.abdera.protocol.util.CacheControlUtil$Directive.select(java.lang.String)</inbound>
                <inbound type="feature" confirmed="yes">org.apache.abdera.protocol.util.CacheControlUtil.isIdempotent(java.lang.String)</inbound>
            </feature>
            <feature confirmed="no">
                <name>java.lang.String.trim()</name>
                <inbound type="feature" confirmed="yes">org.apache.abdera.util.Discover$LineReaderLoaderIterator.readNext()</inbound>
                <inbound type="feature" confirmed="yes">org.apache.abdera.util.EntityTag.parseTags(java.lang.String)</inbound>
            </feature>
            <feature confirmed="no">
                <name>java.lang.String.valueOf(char)</name>
                <inbound type="feature" confirmed="yes">org.apache.abdera.util.AbstractStreamWriter.append(char)</inbound>
            </feature>
            <feature confirmed="no">
                <name>java.lang.String.valueOf(long)</name>
                <inbound type="feature" confirmed="yes">org.apache.abdera.util.AbstractStreamWriter.startLink(java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, long)</inbound>
            </feature>
        </class>
        <class confirmed="no">
            <name>java.lang.StringBuilder</name>
            <inbound type="feature" confirmed="yes">org.apache.abdera.model.AtomDate.format(java.util.Date)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.protocol.error.ProtocolException.ProtocolException(org.apache.abdera.Abdera, int, java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.protocol.error.ProtocolException.ProtocolException(org.apache.abdera.protocol.error.Error)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.protocol.util.CacheControlUtil.append(java.lang.StringBuilder, java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.protocol.util.CacheControlUtil.buildCacheControl(org.apache.abdera.protocol.util.AbstractRequest)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.util.AbderaDataSource.getName()</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.util.Discover$DefaultLoader.init(boolean)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.util.EntityTag.toString()</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.util.EntityTag.toString(java.lang.String[])</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.util.EntityTag.toString(org.apache.abdera.util.EntityTag[])</inbound>
            <feature confirmed="no">
                <name>java.lang.StringBuilder.StringBuilder()</name>
                <inbound type="feature" confirmed="yes">org.apache.abdera.model.AtomDate.format(java.util.Date)</inbound>
                <inbound type="feature" confirmed="yes">org.apache.abdera.protocol.error.ProtocolException.ProtocolException(org.apache.abdera.Abdera, int, java.lang.String)</inbound>
                <inbound type="feature" confirmed="yes">org.apache.abdera.protocol.error.ProtocolException.ProtocolException(org.apache.abdera.protocol.error.Error)</inbound>
                <inbound type="feature" confirmed="yes">org.apache.abdera.protocol.util.CacheControlUtil.buildCacheControl(org.apache.abdera.protocol.util.AbstractRequest)</inbound>
                <inbound type="feature" confirmed="yes">org.apache.abdera.util.AbderaDataSource.getName()</inbound>
                <inbound type="feature" confirmed="yes">org.apache.abdera.util.Discover$DefaultLoader.init(boolean)</inbound>
                <inbound type="feature" confirmed="yes">org.apache.abdera.util.EntityTag.toString()</inbound>
                <inbound type="feature" confirmed="yes">org.apache.abdera.util.EntityTag.toString(java.lang.String[])</inbound>
                <inbound type="feature" confirmed="yes">org.apache.abdera.util.EntityTag.toString(org.apache.abdera.util.EntityTag[])</inbound>
            </feature>
            <feature confirmed="no">
                <name>java.lang.StringBuilder.append(char)</name>
                <inbound type="feature" confirmed="yes">org.apache.abdera.model.AtomDate.format(java.util.Date)</inbound>
                <inbound type="feature" confirmed="yes">org.apache.abdera.util.EntityTag.toString()</inbound>
            </feature>
            <feature confirmed="no">
                <name>java.lang.StringBuilder.append(int)</name>
                <inbound type="feature" confirmed="yes">org.apache.abdera.model.AtomDate.format(java.util.Date)</inbound>
                <inbound type="feature" confirmed="yes">org.apache.abdera.protocol.error.ProtocolException.ProtocolException(org.apache.abdera.Abdera, int, java.lang.String)</inbound>
                <inbound type="feature" confirmed="yes">org.apache.abdera.protocol.error.ProtocolException.ProtocolException(org.apache.abdera.protocol.error.Error)</inbound>
            </feature>
            <feature confirmed="no">
                <name>java.lang.StringBuilder.append(java.lang.String)</name>
                <inbound type="feature" confirmed="yes">org.apache.abdera.protocol.error.ProtocolException.ProtocolException(org.apache.abdera.Abdera, int, java.lang.String)</inbound>
                <inbound type="feature" confirmed="yes">org.apache.abdera.protocol.error.ProtocolException.ProtocolException(org.apache.abdera.protocol.error.Error)</inbound>
                <inbound type="feature" confirmed="yes">org.apache.abdera.protocol.util.CacheControlUtil.append(java.lang.StringBuilder, java.lang.String)</inbound>
                <inbound type="feature" confirmed="yes">org.apache.abdera.protocol.util.CacheControlUtil.buildCacheControl(org.apache.abdera.protocol.util.AbstractRequest)</inbound>
                <inbound type="feature" confirmed="yes">org.apache.abdera.util.AbderaDataSource.getName()</inbound>
                <inbound type="feature" confirmed="yes">org.apache.abdera.util.Discover$DefaultLoader.init(boolean)</inbound>
                <inbound type="feature" confirmed="yes">org.apache.abdera.util.EntityTag.toString()</inbound>
                <inbound type="feature" confirmed="yes">org.apache.abdera.util.EntityTag.toString(java.lang.String[])</inbound>
                <inbound type="feature" confirmed="yes">org.apache.abdera.util.EntityTag.toString(org.apache.abdera.util.EntityTag[])</inbound>
            </feature>
            <feature confirmed="no">
                <name>java.lang.StringBuilder.append(long)</name>
                <inbound type="feature" confirmed="yes">org.apache.abdera.protocol.util.CacheControlUtil.buildCacheControl(org.apache.abdera.protocol.util.AbstractRequest)</inbound>
            </feature>
            <feature confirmed="no">
                <name>java.lang.StringBuilder.length()</name>
                <inbound type="feature" confirmed="yes">org.apache.abdera.protocol.util.CacheControlUtil.append(java.lang.StringBuilder, java.lang.String)</inbound>
                <inbound type="feature" confirmed="yes">org.apache.abdera.util.EntityTag.toString(java.lang.String[])</inbound>
                <inbound type="feature" confirmed="yes">org.apache.abdera.util.EntityTag.toString(org.apache.abdera.util.EntityTag[])</inbound>
            </feature>
            <feature confirmed="no">
                <name>java.lang.StringBuilder.toString()</name>
                <inbound type="feature" confirmed="yes">org.apache.abdera.model.AtomDate.format(java.util.Date)</inbound>
                <inbound type="feature" confirmed="yes">org.apache.abdera.protocol.error.ProtocolException.ProtocolException(org.apache.abdera.Abdera, int, java.lang.String)</inbound>
                <inbound type="feature" confirmed="yes">org.apache.abdera.protocol.error.ProtocolException.ProtocolException(org.apache.abdera.protocol.error.Error)</inbound>
                <inbound type="feature" confirmed="yes">org.apache.abdera.protocol.util.CacheControlUtil.buildCacheControl(org.apache.abdera.protocol.util.AbstractRequest)</inbound>
                <inbound type="feature" confirmed="yes">org.apache.abdera.util.AbderaDataSource.getName()</inbound>
                <inbound type="feature" confirmed="yes">org.apache.abdera.util.Discover$DefaultLoader.init(boolean)</inbound>
                <inbound type="feature" confirmed="yes">org.apache.abdera.util.EntityTag.toString()</inbound>
                <inbound type="feature" confirmed="yes">org.apache.abdera.util.EntityTag.toString(java.lang.String[])</inbound>
                <inbound type="feature" confirmed="yes">org.apache.abdera.util.EntityTag.toString(org.apache.abdera.util.EntityTag[])</inbound>
            </feature>
        </class>
        <class confirmed="no">
            <name>java.lang.String[]</name>
            <inbound type="feature" confirmed="yes">org.apache.abdera.factory.ExtensionFactoryMap.getNamespaces()</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.factory.ExtensionFactoryMap.listExtensionFactories()</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.protocol.util.AbstractMessage.getDecodedHeaders(java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.util.AbstractExtensionFactory.getNamespaces()</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.util.MimeTypeHelper.condense(java.lang.String[])</inbound>
        </class>
        <class confirmed="no">
            <name>java.lang.System</name>
            <feature confirmed="no">
                <name>java.lang.System.getProperty(java.lang.String)</name>
                <inbound type="feature" confirmed="yes">org.apache.abdera.util.AbderaConfiguration.getConfigurationOption(java.lang.String)</inbound>
            </feature>
        </class>
        <class confirmed="no">
            <name>java.lang.Thread</name>
            <inbound type="feature" confirmed="yes">org.apache.abdera.util.AbderaConfiguration.getBundle(java.util.Locale)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.util.Discover.getLoader()</inbound>
            <feature confirmed="no">
                <name>java.lang.Thread.currentThread()</name>
                <inbound type="feature" confirmed="yes">org.apache.abdera.util.AbderaConfiguration.getBundle(java.util.Locale)</inbound>
                <inbound type="feature" confirmed="yes">org.apache.abdera.util.Discover.getLoader()</inbound>
            </feature>
            <feature confirmed="no">
                <name>java.lang.Thread.getContextClassLoader()</name>
                <inbound type="feature" confirmed="yes">org.apache.abdera.util.AbderaConfiguration.getBundle(java.util.Locale)</inbound>
                <inbound type="feature" confirmed="yes">org.apache.abdera.util.Discover.getLoader()</inbound>
            </feature>
        </class>
        <class confirmed="no">
            <name>java.lang.Throwable</name>
            <inbound type="feature" confirmed="yes">org.apache.abdera.parser.ParseException.ParseException(java.lang.String, java.lang.Throwable)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.parser.ParseException.ParseException(java.lang.Throwable)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.protocol.error.Error.create(org.apache.abdera.Abdera, int, java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.protocol.error.Error.create(org.apache.abdera.Abdera, int, java.lang.String, java.lang.Throwable)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.protocol.error.Error.create(org.apache.abdera.writer.StreamWriter, int, java.lang.String, java.lang.Throwable)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.util.AbderaConfiguration.clone()</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.util.AbderaConfiguration.newParserFactoryInstance(org.apache.abdera.Abdera)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.util.AbderaConfiguration.newStreamWriterInstance(org.apache.abdera.Abdera)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.util.AbderaConfiguration.newWriterFactoryInstance(org.apache.abdera.Abdera)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.util.AbderaConfiguration.newWriterInstance(org.apache.abdera.Abdera)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.util.AbderaConfiguration.newXPathInstance(org.apache.abdera.Abdera)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.util.AbderaConfiguration.throwex(java.lang.String, java.lang.String, java.lang.Throwable)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.util.AbstractParser.getDefaultParserOptions()</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.util.AbstractParser.setDefaultParserOptions(org.apache.abdera.parser.ParserOptions)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.util.AbstractWriter.getDefaultWriterOptions()</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.util.AbstractWriter.setDefaultWriterOptions(org.apache.abdera.writer.WriterOptions)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.util.Discover$DefaultLoader.init(boolean)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.util.Discover$DefaultLoaderIterator.create(java.lang.String, java.lang.Object[])</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.util.Discover$DefaultLoaderIterator.next()</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.util.Discover$LineReaderLoaderIterator.Discover$LineReaderLoaderIterator(java.lang.ClassLoader, java.io.InputStream, boolean, java.lang.Object[])</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.util.Discover$LineReaderLoaderIterator.readNext()</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.util.Discover.getClass(java.lang.ClassLoader, java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.util.Discover.locate(java.lang.String, java.lang.Iterable)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.util.Discover.locate(java.lang.String, java.lang.String, java.lang.ClassLoader, java.lang.Object[])</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.util.EntityTag.generate(java.lang.String[])</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.util.MimeTypeParseException.MimeTypeParseException(javax.activation.MimeTypeParseException)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.xpath.XPathException.XPathException(java.lang.String, java.lang.Throwable)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.xpath.XPathException.XPathException(java.lang.Throwable)</inbound>
            <feature confirmed="no">
                <name>java.lang.Throwable.printStackTrace()</name>
                <inbound type="feature" confirmed="yes">org.apache.abdera.util.Discover.locate(java.lang.String, java.lang.Iterable)</inbound>
            </feature>
        </class>
        <class confirmed="no">
            <name>java.lang.UnsupportedOperationException</name>
            <feature confirmed="no">
                <name>java.lang.UnsupportedOperationException.UnsupportedOperationException()</name>
                <inbound type="feature" confirmed="yes">org.apache.abdera.util.AbderaDataSource.getOutputStream()</inbound>
                <inbound type="feature" confirmed="yes">org.apache.abdera.util.AbderaResult.setOutputStream(java.io.OutputStream)</inbound>
                <inbound type="feature" confirmed="yes">org.apache.abdera.util.AbderaResult.setWriter(java.io.Writer)</inbound>
                <inbound type="feature" confirmed="yes">org.apache.abdera.util.AbderaSource.setInputStream(java.io.InputStream)</inbound>
                <inbound type="feature" confirmed="yes">org.apache.abdera.util.AbderaSource.setReader(java.io.Reader)</inbound>
                <inbound type="feature" confirmed="yes">org.apache.abdera.util.MultiIterator.remove()</inbound>
            </feature>
            <feature confirmed="no">
                <name>java.lang.UnsupportedOperationException.UnsupportedOperationException(java.lang.String)</name>
                <inbound type="feature" confirmed="yes">org.apache.abdera.util.EntityTag.generate(java.lang.String[])</inbound>
            </feature>
        </class>
    </package>
    <package confirmed="no">
        <name>java.lang.reflect</name>
        <class confirmed="no">
            <name>java.lang.reflect.Constructor</name>
            <inbound type="feature" confirmed="yes">org.apache.abdera.util.AbstractExtensionFactory.getElementWrapper(org.apache.abdera.model.Element)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.util.Discover.load(java.lang.ClassLoader, java.lang.String, boolean, java.lang.Object[])</inbound>
            <feature confirmed="no">
                <name>java.lang.reflect.Constructor.newInstance(java.lang.Object[])</name>
                <inbound type="feature" confirmed="yes">org.apache.abdera.util.AbstractExtensionFactory.getElementWrapper(org.apache.abdera.model.Element)</inbound>
                <inbound type="feature" confirmed="yes">org.apache.abdera.util.Discover.load(java.lang.ClassLoader, java.lang.String, boolean, java.lang.Object[])</inbound>
            </feature>
        </class>
        <class confirmed="no">
            <name>java.lang.reflect.Field</name>
            <inbound type="feature" confirmed="yes">org.apache.abdera.util.AbderaConfiguration.getName(java.lang.Class)</inbound>
            <feature confirmed="no">
                <name>java.lang.reflect.Field.get(java.lang.Object)</name>
                <inbound type="feature" confirmed="yes">org.apache.abdera.util.AbderaConfiguration.getName(java.lang.Class)</inbound>
            </feature>
            <feature confirmed="no">
                <name>java.lang.reflect.Field.getModifiers()</name>
                <inbound type="feature" confirmed="yes">org.apache.abdera.util.AbderaConfiguration.getName(java.lang.Class)</inbound>
            </feature>
        </class>
        <class confirmed="no">
            <name>java.lang.reflect.Modifier</name>
            <feature confirmed="no">
                <name>java.lang.reflect.Modifier.isStatic(int)</name>
                <inbound type="feature" confirmed="yes">org.apache.abdera.util.AbderaConfiguration.getName(java.lang.Class)</inbound>
            </feature>
        </class>
    </package>
    <package confirmed="no">
        <name>java.net</name>
        <class confirmed="no">
            <name>java.net.URL</name>
            <inbound type="feature" confirmed="yes">org.apache.abdera.util.Discover$DefaultLoader.init(boolean)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.util.Discover.locateResource(java.lang.String, java.lang.ClassLoader, java.lang.Class)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.util.Discover.locateResourceAsStream(java.lang.String, java.lang.ClassLoader, java.lang.Class)</inbound>
            <feature confirmed="no">
                <name>java.net.URL.openStream()</name>
                <inbound type="feature" confirmed="yes">org.apache.abdera.util.Discover$DefaultLoader.init(boolean)</inbound>
                <inbound type="feature" confirmed="yes">org.apache.abdera.util.Discover.locateResourceAsStream(java.lang.String, java.lang.ClassLoader, java.lang.Class)</inbound>
            </feature>
        </class>
    </package>
    <package confirmed="no">
        <name>java.nio.channels</name>
        <class confirmed="no">
            <name>java.nio.channels.Channels</name>
            <feature confirmed="no">
                <name>java.nio.channels.Channels.newOutputStream(java.nio.channels.WritableByteChannel)</name>
                <inbound type="feature" confirmed="yes">org.apache.abdera.util.AbstractStreamWriter.setChannel(java.nio.channels.WritableByteChannel)</inbound>
            </feature>
            <feature confirmed="no">
                <name>java.nio.channels.Channels.newReader(java.nio.channels.ReadableByteChannel, java.lang.String)</name>
                <inbound type="feature" confirmed="yes">org.apache.abdera.util.AbstractParser.parse(java.nio.channels.ReadableByteChannel, java.lang.String, org.apache.abdera.parser.ParserOptions)</inbound>
            </feature>
            <feature confirmed="no">
                <name>java.nio.channels.Channels.newWriter(java.nio.channels.WritableByteChannel, java.lang.String)</name>
                <inbound type="feature" confirmed="yes">org.apache.abdera.util.AbstractStreamWriter.setChannel(java.nio.channels.WritableByteChannel, java.lang.String)</inbound>
                <inbound type="feature" confirmed="yes">org.apache.abdera.util.AbstractWriter.writeTo(org.apache.abdera.model.Base, java.nio.channels.WritableByteChannel, org.apache.abdera.writer.WriterOptions)</inbound>
            </feature>
        </class>
        <class confirmed="no">
            <name>java.nio.channels.ReadableByteChannel</name>
            <inbound type="feature" confirmed="yes">org.apache.abdera.parser.Parser.parse(java.nio.channels.ReadableByteChannel)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.parser.Parser.parse(java.nio.channels.ReadableByteChannel, java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.parser.Parser.parse(java.nio.channels.ReadableByteChannel, java.lang.String, org.apache.abdera.parser.ParserOptions)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.parser.Parser.parse(java.nio.channels.ReadableByteChannel, org.apache.abdera.parser.ParserOptions)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.util.AbstractParser.parse(java.nio.channels.ReadableByteChannel)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.util.AbstractParser.parse(java.nio.channels.ReadableByteChannel, java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.util.AbstractParser.parse(java.nio.channels.ReadableByteChannel, java.lang.String, org.apache.abdera.parser.ParserOptions)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.util.AbstractParser.parse(java.nio.channels.ReadableByteChannel, org.apache.abdera.parser.ParserOptions)</inbound>
        </class>
        <class confirmed="no">
            <name>java.nio.channels.WritableByteChannel</name>
            <inbound type="feature" confirmed="yes">org.apache.abdera.factory.StreamBuilder.setChannel(java.nio.channels.WritableByteChannel)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.factory.StreamBuilder.setChannel(java.nio.channels.WritableByteChannel, java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.util.AbstractStreamWriter.setChannel(java.nio.channels.WritableByteChannel)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.util.AbstractStreamWriter.setChannel(java.nio.channels.WritableByteChannel, java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.util.AbstractWriter.writeTo(org.apache.abdera.model.Base, java.nio.channels.WritableByteChannel)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.util.AbstractWriter.writeTo(org.apache.abdera.model.Base, java.nio.channels.WritableByteChannel, org.apache.abdera.writer.WriterOptions)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.writer.StreamWriter.setChannel(java.nio.channels.WritableByteChannel)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.writer.StreamWriter.setChannel(java.nio.channels.WritableByteChannel, java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.writer.Writer.writeTo(org.apache.abdera.model.Base, java.nio.channels.WritableByteChannel)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.writer.Writer.writeTo(org.apache.abdera.model.Base, java.nio.channels.WritableByteChannel, org.apache.abdera.writer.WriterOptions)</inbound>
        </class>
    </package>
    <package confirmed="no">
        <name>java.security</name>
        <class confirmed="no">
            <name>java.security.MessageDigest</name>
            <inbound type="feature" confirmed="yes">org.apache.abdera.util.EntityTag.generate(java.lang.String[])</inbound>
            <feature confirmed="no">
                <name>java.security.MessageDigest.digest()</name>
                <inbound type="feature" confirmed="yes">org.apache.abdera.util.EntityTag.generate(java.lang.String[])</inbound>
            </feature>
            <feature confirmed="no">
                <name>java.security.MessageDigest.getInstance(java.lang.String)</name>
                <inbound type="feature" confirmed="yes">org.apache.abdera.util.EntityTag.generate(java.lang.String[])</inbound>
            </feature>
            <feature confirmed="no">
                <name>java.security.MessageDigest.update(byte[])</name>
                <inbound type="feature" confirmed="yes">org.apache.abdera.util.EntityTag.generate(java.lang.String[])</inbound>
            </feature>
        </class>
        <class confirmed="no">
            <name>java.security.NoSuchAlgorithmException</name>
            <inbound type="feature" confirmed="yes">org.apache.abdera.util.EntityTag.generate(java.lang.String[])</inbound>
        </class>
    </package>
    <package confirmed="no">
        <name>java.util</name>
        <class confirmed="no">
            <name>java.util.ArrayList</name>
            <feature confirmed="no">
                <name>java.util.ArrayList.ArrayList()</name>
                <inbound type="feature" confirmed="yes">org.apache.abdera.factory.ExtensionFactoryMap.getNamespaces()</inbound>
                <inbound type="feature" confirmed="yes">org.apache.abdera.factory.ExtensionFactoryMap.listExtensionFactories()</inbound>
                <inbound type="feature" confirmed="yes">org.apache.abdera.util.AbderaConfiguration.loadExtensionFactories()</inbound>
                <inbound type="feature" confirmed="yes">org.apache.abdera.util.AbstractExtensionFactory.AbstractExtensionFactory(java.lang.String[])</inbound>
                <inbound type="feature" confirmed="yes">org.apache.abdera.util.Discover$DefaultLoader.init(boolean)</inbound>
                <inbound type="feature" confirmed="yes">org.apache.abdera.util.Discover.locate(java.lang.String, java.lang.Iterable)</inbound>
                <inbound type="feature" confirmed="yes">org.apache.abdera.util.EntityTag.parseTags(java.lang.String)</inbound>
                <inbound type="feature" confirmed="yes">org.apache.abdera.util.MimeTypeHelper.condense(java.lang.String[])</inbound>
                <inbound type="feature" confirmed="yes">org.apache.abdera.util.ServiceUtil.loadExtensionFactories()</inbound>
                <inbound type="feature" confirmed="yes">org.apache.abdera.util.filter.AbstractListParseFilter.AbstractListParseFilter()</inbound>
                <inbound type="feature" confirmed="yes">org.apache.abdera.util.filter.AbstractListParseFilter.add(javax.xml.namespace.QName, javax.xml.namespace.QName)</inbound>
            </feature>
            <feature confirmed="no">
                <name>java.util.ArrayList.ArrayList(int)</name>
                <inbound type="feature" confirmed="yes">org.apache.abdera.util.filter.AbstractListParseFilter.readObject(java.io.ObjectInputStream)</inbound>
            </feature>
        </class>
        <class confirmed="no">
            <name>java.util.Arrays</name>
            <feature confirmed="no">
                <name>java.util.Arrays.asList(java.lang.Object[])</name>
                <inbound type="feature" confirmed="yes">org.apache.abdera.util.MultiIterator.MultiIterator(java.util.Iterator[])</inbound>
            </feature>
            <feature confirmed="no">
                <name>java.util.Arrays.sort(java.lang.Object[], java.util.Comparator)</name>
                <inbound type="feature" confirmed="yes">org.apache.abdera.util.MimeTypeHelper.condense(java.lang.String[])</inbound>
            </feature>
        </class>
        <class confirmed="no">
            <name>java.util.Calendar</name>
            <inbound type="feature" confirmed="yes">org.apache.abdera.model.AtomDate.AtomDate(java.util.Calendar)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.model.AtomDate.equals(java.lang.Object)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.model.AtomDate.format(java.util.Date)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.model.AtomDate.getCalendar()</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.model.AtomDate.parse(java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.model.AtomDate.setValue(java.util.Calendar)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.model.AtomDate.valueOf(java.util.Calendar)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.model.DateTime.getCalendar()</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.model.DateTime.setCalendar(java.util.Calendar)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.model.DateTimeWrapper.getCalendar()</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.model.DateTimeWrapper.setCalendar(java.util.Calendar)</inbound>
            <feature confirmed="no">
                <name>java.util.Calendar.get(int)</name>
                <inbound type="feature" confirmed="yes">org.apache.abdera.model.AtomDate.format(java.util.Date)</inbound>
            </feature>
            <feature confirmed="no">
                <name>java.util.Calendar.getInstance()</name>
                <inbound type="feature" confirmed="yes">org.apache.abdera.model.AtomDate.getCalendar()</inbound>
            </feature>
            <feature confirmed="no">
                <name>java.util.Calendar.getInstance(java.util.TimeZone)</name>
                <inbound type="feature" confirmed="yes">org.apache.abdera.model.AtomDate.format(java.util.Date)</inbound>
                <inbound type="feature" confirmed="yes">org.apache.abdera.model.AtomDate.parse(java.lang.String)</inbound>
            </feature>
            <feature confirmed="no">
                <name>java.util.Calendar.getTime()</name>
                <inbound type="feature" confirmed="yes">org.apache.abdera.model.AtomDate.AtomDate(java.util.Calendar)</inbound>
                <inbound type="feature" confirmed="yes">org.apache.abdera.model.AtomDate.equals(java.lang.Object)</inbound>
                <inbound type="feature" confirmed="yes">org.apache.abdera.model.AtomDate.parse(java.lang.String)</inbound>
                <inbound type="feature" confirmed="yes">org.apache.abdera.model.AtomDate.setValue(java.util.Calendar)</inbound>
            </feature>
            <feature confirmed="no">
                <name>java.util.Calendar.set(int, int)</name>
                <inbound type="feature" confirmed="yes">org.apache.abdera.model.AtomDate.parse(java.lang.String)</inbound>
            </feature>
            <feature confirmed="no">
                <name>java.util.Calendar.setTime(java.util.Date)</name>
                <inbound type="feature" confirmed="yes">org.apache.abdera.model.AtomDate.format(java.util.Date)</inbound>
                <inbound type="feature" confirmed="yes">org.apache.abdera.model.AtomDate.getCalendar()</inbound>
            </feature>
        </class>
        <class confirmed="no">
            <name>java.util.Collections</name>
            <feature confirmed="no">
                <name>java.util.Collections.synchronizedList(java.util.List)</name>
                <inbound type="feature" confirmed="yes">org.apache.abdera.factory.ExtensionFactoryMap.ExtensionFactoryMap(java.util.List)</inbound>
                <inbound type="feature" confirmed="yes">org.apache.abdera.util.Discover.locate(java.lang.String, java.lang.Iterable)</inbound>
            </feature>
            <feature confirmed="no">
                <name>java.util.Collections.synchronizedMap(java.util.Map)</name>
                <inbound type="feature" confirmed="yes">org.apache.abdera.util.AbderaConfiguration.initNamedParsers()</inbound>
                <inbound type="feature" confirmed="yes">org.apache.abdera.util.AbderaConfiguration.initNamedWriters()</inbound>
                <inbound type="feature" confirmed="yes">org.apache.abdera.util.AbderaConfiguration.initStreamWriters()</inbound>
            </feature>
        </class>
        <class confirmed="no">
            <name>java.util.Comparator</name>
            <inbound type="feature" confirmed="yes">org.apache.abdera.model.Feed.sortEntries(java.util.Comparator)</inbound>
            <inbound type="class" confirmed="yes">org.apache.abdera.util.MimeTypeHelper$1</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.util.MimeTypeHelper.condense(java.lang.String[])</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.util.MimeTypeHelper.getComparator()</inbound>
        </class>
        <class confirmed="no">
            <name>java.util.Date</name>
            <inbound type="feature" confirmed="yes">org.apache.abdera.factory.StreamBuilder.writeAttribute(java.lang.String, java.lang.String, java.lang.String, java.util.Date)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.factory.StreamBuilder.writeAttribute(java.lang.String, java.lang.String, java.util.Date)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.factory.StreamBuilder.writeAttribute(java.lang.String, java.util.Date)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.factory.StreamBuilder.writeAttribute(javax.xml.namespace.QName, java.util.Date)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.factory.StreamBuilder.writeDate(java.lang.String, java.lang.String, java.lang.String, java.util.Date)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.factory.StreamBuilder.writeDate(java.lang.String, java.lang.String, java.util.Date)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.factory.StreamBuilder.writeDate(java.lang.String, java.util.Date)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.factory.StreamBuilder.writeDate(javax.xml.namespace.QName, java.util.Date)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.factory.StreamBuilder.writeEdited(java.util.Date)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.factory.StreamBuilder.writeElementText(java.util.Date)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.factory.StreamBuilder.writePublished(java.util.Date)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.factory.StreamBuilder.writeUpdated(java.util.Date)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.model.AtomDate.AtomDate()</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.model.AtomDate.AtomDate(java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.model.AtomDate.AtomDate(java.util.Calendar)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.model.AtomDate.AtomDate(java.util.Date)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.model.AtomDate.AtomDate(long)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.model.AtomDate.equals(java.lang.Object)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.model.AtomDate.format(java.util.Date)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.model.AtomDate.getCalendar()</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.model.AtomDate.getDate()</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.model.AtomDate.getTime()</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.model.AtomDate.getValue()</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.model.AtomDate.hashCode()</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.model.AtomDate.parse(java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.model.AtomDate.setValue(java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.model.AtomDate.setValue(java.util.Calendar)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.model.AtomDate.setValue(java.util.Date)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.model.AtomDate.setValue(long)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.model.AtomDate.value</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.model.AtomDate.valueOf(java.util.Date)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.model.DateTime.getDate()</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.model.DateTime.setDate(java.util.Date)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.model.DateTimeWrapper.getDate()</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.model.DateTimeWrapper.setDate(java.util.Date)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.model.Document.getLastModified()</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.model.Document.setLastModified(java.util.Date)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.model.Entry.getEdited()</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.model.Entry.getPublished()</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.model.Entry.getUpdated()</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.model.Entry.setEdited(java.util.Date)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.model.Entry.setPublished(java.util.Date)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.model.Entry.setUpdated(java.util.Date)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.model.Source.getUpdated()</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.model.Source.setUpdated(java.util.Date)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.protocol.EntityProvider.getLastModified()</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.protocol.Message.getDateHeader(java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.protocol.Request.getIfModifiedSince()</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.protocol.Request.getIfUnmodifiedSince()</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.protocol.Response.getExpires()</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.protocol.Response.getLastModified()</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.protocol.util.AbstractEntityProvider.getLastModified()</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.protocol.util.AbstractRequest.getIfModifiedSince()</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.protocol.util.AbstractRequest.getIfUnmodifiedSince()</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.protocol.util.AbstractResponse.getExpires()</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.protocol.util.AbstractResponse.getLastModified()</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.util.AbstractStreamWriter.writeAttribute(java.lang.String, java.lang.String, java.lang.String, java.util.Date)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.util.AbstractStreamWriter.writeAttribute(java.lang.String, java.lang.String, java.util.Date)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.util.AbstractStreamWriter.writeAttribute(java.lang.String, java.util.Date)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.util.AbstractStreamWriter.writeAttribute(javax.xml.namespace.QName, java.util.Date)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.util.AbstractStreamWriter.writeDate(java.lang.String, java.lang.String, java.lang.String, java.util.Date)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.util.AbstractStreamWriter.writeDate(java.lang.String, java.lang.String, java.util.Date)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.util.AbstractStreamWriter.writeDate(java.lang.String, java.util.Date)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.util.AbstractStreamWriter.writeDate(javax.xml.namespace.QName, java.util.Date)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.util.AbstractStreamWriter.writeEdited(java.util.Date)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.util.AbstractStreamWriter.writeElementText(java.util.Date)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.util.AbstractStreamWriter.writePublished(java.util.Date)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.util.AbstractStreamWriter.writeUpdated(java.util.Date)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.writer.StreamWriter.writeAttribute(java.lang.String, java.lang.String, java.lang.String, java.util.Date)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.writer.StreamWriter.writeAttribute(java.lang.String, java.lang.String, java.util.Date)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.writer.StreamWriter.writeAttribute(java.lang.String, java.util.Date)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.writer.StreamWriter.writeAttribute(javax.xml.namespace.QName, java.util.Date)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.writer.StreamWriter.writeDate(java.lang.String, java.lang.String, java.lang.String, java.util.Date)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.writer.StreamWriter.writeDate(java.lang.String, java.lang.String, java.util.Date)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.writer.StreamWriter.writeDate(java.lang.String, java.util.Date)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.writer.StreamWriter.writeDate(javax.xml.namespace.QName, java.util.Date)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.writer.StreamWriter.writeEdited(java.util.Date)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.writer.StreamWriter.writeElementText(java.util.Date)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.writer.StreamWriter.writePublished(java.util.Date)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.writer.StreamWriter.writeUpdated(java.util.Date)</inbound>
            <feature confirmed="no">
                <name>java.util.Date.Date()</name>
                <inbound type="feature" confirmed="yes">org.apache.abdera.model.AtomDate.AtomDate()</inbound>
            </feature>
            <feature confirmed="no">
                <name>java.util.Date.Date(long)</name>
                <inbound type="feature" confirmed="yes">org.apache.abdera.model.AtomDate.AtomDate(long)</inbound>
                <inbound type="feature" confirmed="yes">org.apache.abdera.model.AtomDate.setValue(long)</inbound>
            </feature>
            <feature confirmed="no">
                <name>java.util.Date.clone()</name>
                <inbound type="feature" confirmed="yes">org.apache.abdera.model.AtomDate.AtomDate(java.util.Date)</inbound>
                <inbound type="feature" confirmed="yes">org.apache.abdera.model.AtomDate.getDate()</inbound>
                <inbound type="feature" confirmed="yes">org.apache.abdera.model.AtomDate.setValue(java.util.Date)</inbound>
            </feature>
            <feature confirmed="no">
                <name>java.util.Date.equals(java.lang.Object)</name>
                <inbound type="feature" confirmed="yes">org.apache.abdera.model.AtomDate.equals(java.lang.Object)</inbound>
            </feature>
            <feature confirmed="no">
                <name>java.util.Date.getTime()</name>
                <inbound type="feature" confirmed="yes">org.apache.abdera.model.AtomDate.getTime()</inbound>
            </feature>
            <feature confirmed="no">
                <name>java.util.Date.hashCode()</name>
                <inbound type="feature" confirmed="yes">org.apache.abdera.model.AtomDate.hashCode()</inbound>
            </feature>
        </class>
        <class confirmed="no">
            <name>java.util.Enumeration</name>
            <inbound type="feature" confirmed="yes">org.apache.abdera.util.Discover$DefaultLoader.init(boolean)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.util.Discover.locateResources(java.lang.String, java.lang.ClassLoader, java.lang.Class)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.util.MimeTypeHelper.isMatch(javax.activation.MimeType, javax.activation.MimeType, boolean)</inbound>
            <feature confirmed="no">
                <name>java.util.Enumeration.hasMoreElements()</name>
                <inbound type="feature" confirmed="yes">org.apache.abdera.util.Discover$DefaultLoader.init(boolean)</inbound>
                <inbound type="feature" confirmed="yes">org.apache.abdera.util.MimeTypeHelper.isMatch(javax.activation.MimeType, javax.activation.MimeType, boolean)</inbound>
            </feature>
            <feature confirmed="no">
                <name>java.util.Enumeration.nextElement()</name>
                <inbound type="feature" confirmed="yes">org.apache.abdera.util.Discover$DefaultLoader.init(boolean)</inbound>
                <inbound type="feature" confirmed="yes">org.apache.abdera.util.MimeTypeHelper.isMatch(javax.activation.MimeType, javax.activation.MimeType, boolean)</inbound>
            </feature>
        </class>
        <class confirmed="no">
            <name>java.util.Formatter</name>
            <inbound type="feature" confirmed="yes">org.apache.abdera.util.AbstractStreamWriter.writeElementText(java.lang.String, java.lang.Object[])</inbound>
            <feature confirmed="no">
                <name>java.util.Formatter.Formatter(java.lang.Appendable)</name>
                <inbound type="feature" confirmed="yes">org.apache.abdera.util.AbstractStreamWriter.writeElementText(java.lang.String, java.lang.Object[])</inbound>
            </feature>
            <feature confirmed="no">
                <name>java.util.Formatter.format(java.lang.String, java.lang.Object[])</name>
                <inbound type="feature" confirmed="yes">org.apache.abdera.util.AbstractStreamWriter.writeElementText(java.lang.String, java.lang.Object[])</inbound>
            </feature>
        </class>
        <class confirmed="no">
            <name>java.util.HashMap</name>
            <inbound type="feature" confirmed="yes">org.apache.abdera.protocol.util.CacheControlUtil$CacheControlParser.CacheControlUtil$CacheControlParser(java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.protocol.util.CacheControlUtil$CacheControlParser.getValue(org.apache.abdera.protocol.util.CacheControlUtil$Directive)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.protocol.util.CacheControlUtil$CacheControlParser.getValues()</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.protocol.util.CacheControlUtil$CacheControlParser.iterator()</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.protocol.util.CacheControlUtil$CacheControlParser.values</inbound>
            <feature confirmed="no">
                <name>java.util.HashMap.HashMap()</name>
                <inbound type="feature" confirmed="yes">org.apache.abdera.protocol.util.CacheControlUtil$CacheControlParser.CacheControlUtil$CacheControlParser(java.lang.String)</inbound>
                <inbound type="feature" confirmed="yes">org.apache.abdera.util.AbderaConfiguration.initNamedParsers()</inbound>
                <inbound type="feature" confirmed="yes">org.apache.abdera.util.AbderaConfiguration.initNamedWriters()</inbound>
                <inbound type="feature" confirmed="yes">org.apache.abdera.util.AbderaConfiguration.initStreamWriters()</inbound>
                <inbound type="feature" confirmed="yes">org.apache.abdera.util.AbstractExtensionFactory.AbstractExtensionFactory(java.lang.String[])</inbound>
                <inbound type="feature" confirmed="yes">org.apache.abdera.util.AbstractParserOptions.AbstractParserOptions()</inbound>
                <inbound type="feature" confirmed="yes">org.apache.abdera.util.AbstractXPath.initDefaultNamespaces()</inbound>
                <inbound type="feature" confirmed="yes">org.apache.abdera.util.filter.AbstractListParseFilter.AbstractListParseFilter()</inbound>
            </feature>
            <feature confirmed="no">
                <name>java.util.HashMap.HashMap(int)</name>
                <inbound type="feature" confirmed="yes">org.apache.abdera.util.filter.AbstractListParseFilter.readObject(java.io.ObjectInputStream)</inbound>
            </feature>
            <feature confirmed="no">
                <name>java.util.HashMap.HashMap(java.util.Map)</name>
                <inbound type="feature" confirmed="yes">org.apache.abdera.util.AbstractXPath.getDefaultNamespaces()</inbound>
            </feature>
            <feature confirmed="no">
                <name>java.util.HashMap.get(java.lang.Object)</name>
                <inbound type="feature" confirmed="yes">org.apache.abdera.protocol.util.CacheControlUtil$CacheControlParser.getValue(org.apache.abdera.protocol.util.CacheControlUtil$Directive)</inbound>
            </feature>
            <feature confirmed="no">
                <name>java.util.HashMap.keySet()</name>
                <inbound type="feature" confirmed="yes">org.apache.abdera.protocol.util.CacheControlUtil$CacheControlParser.iterator()</inbound>
            </feature>
            <feature confirmed="no">
                <name>java.util.HashMap.put(java.lang.Object, java.lang.Object)</name>
                <inbound type="feature" confirmed="yes">org.apache.abdera.protocol.util.CacheControlUtil$CacheControlParser.CacheControlUtil$CacheControlParser(java.lang.String)</inbound>
            </feature>
        </class>
        <class confirmed="no">
            <name>java.util.Iterator</name>
            <inbound type="feature" confirmed="yes">org.apache.abdera.factory.ExtensionFactoryMap.getElementWrapper(org.apache.abdera.model.Element)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.factory.ExtensionFactoryMap.getMimeType(org.apache.abdera.model.Base)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.factory.ExtensionFactoryMap.getNamespaces()</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.factory.ExtensionFactoryMap.handlesNamespace(java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.factory.ExtensionFactoryMap.listExtensionFactories()</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.model.ElementWrapper.iterator()</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.protocol.util.CacheControlUtil$CacheControlParser.iterator()</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.protocol.util.CacheControlUtil.parseCacheControl(java.lang.String, org.apache.abdera.protocol.util.AbstractRequest)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.protocol.util.CacheControlUtil.parseCacheControl(java.lang.String, org.apache.abdera.protocol.util.AbstractResponse)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.util.AbderaConfiguration.initNamedParsers()</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.util.AbderaConfiguration.initNamedWriters()</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.util.AbderaConfiguration.initStreamWriters()</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.util.AbderaConfiguration.loadExtensionFactories()</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.util.Discover$DefaultLoader.Discover$DefaultLoader(java.lang.String, boolean, java.lang.Object[], java.lang.ClassLoader)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.util.Discover$DefaultLoader.init(boolean)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.util.Discover$DefaultLoader.iterator</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.util.Discover$DefaultLoader.iterator()</inbound>
            <inbound type="class" confirmed="yes">org.apache.abdera.util.Discover$LoaderIterator</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.util.Discover.locate(java.lang.String, java.lang.Iterable)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.util.Discover.locate(java.lang.String, java.lang.String, java.lang.ClassLoader, java.lang.Object[])</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.util.MimeTypeHelper.contains(java.lang.String, java.util.List, boolean)</inbound>
            <inbound type="class" confirmed="yes">org.apache.abdera.util.MultiIterator</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.util.MultiIterator.MultiIterator(java.lang.Iterable)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.util.MultiIterator.MultiIterator(java.util.Iterator)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.util.MultiIterator.MultiIterator(java.util.Iterator[])</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.util.MultiIterator.current</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.util.MultiIterator.hasNext()</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.util.MultiIterator.iterators</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.util.MultiIterator.next()</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.util.MultiIterator.selectCurrent()</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.util.ServiceUtil.loadExtensionFactories()</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.util.filter.AbstractListParseFilter.writeObject(java.io.ObjectOutputStream)</inbound>
            <feature confirmed="no">
                <name>java.util.Iterator.hasNext()</name>
                <inbound type="feature" confirmed="yes">org.apache.abdera.factory.ExtensionFactoryMap.getElementWrapper(org.apache.abdera.model.Element)</inbound>
                <inbound type="feature" confirmed="yes">org.apache.abdera.factory.ExtensionFactoryMap.getMimeType(org.apache.abdera.model.Base)</inbound>
                <inbound type="feature" confirmed="yes">org.apache.abdera.factory.ExtensionFactoryMap.getNamespaces()</inbound>
                <inbound type="feature" confirmed="yes">org.apache.abdera.factory.ExtensionFactoryMap.handlesNamespace(java.lang.String)</inbound>
                <inbound type="feature" confirmed="yes">org.apache.abdera.factory.ExtensionFactoryMap.listExtensionFactories()</inbound>
                <inbound type="feature" confirmed="yes">org.apache.abdera.protocol.util.CacheControlUtil.parseCacheControl(java.lang.String, org.apache.abdera.protocol.util.AbstractRequest)</inbound>
                <inbound type="feature" confirmed="yes">org.apache.abdera.protocol.util.CacheControlUtil.parseCacheControl(java.lang.String, org.apache.abdera.protocol.util.AbstractResponse)</inbound>
                <inbound type="feature" confirmed="yes">org.apache.abdera.util.AbderaConfiguration.initNamedParsers()</inbound>
                <inbound type="feature" confirmed="yes">org.apache.abdera.util.AbderaConfiguration.initNamedWriters()</inbound>
                <inbound type="feature" confirmed="yes">org.apache.abdera.util.AbderaConfiguration.initStreamWriters()</inbound>
                <inbound type="feature" confirmed="yes">org.apache.abdera.util.AbderaConfiguration.loadExtensionFactories()</inbound>
                <inbound type="feature" confirmed="yes">org.apache.abdera.util.Discover.locate(java.lang.String, java.lang.Iterable)</inbound>
                <inbound type="feature" confirmed="yes">org.apache.abdera.util.Discover.locate(java.lang.String, java.lang.String, java.lang.ClassLoader, java.lang.Object[])</inbound>
                <inbound type="feature" confirmed="yes">org.apache.abdera.util.MimeTypeHelper.contains(java.lang.String, java.util.List, boolean)</inbound>
                <inbound type="feature" confirmed="yes">org.apache.abdera.util.MultiIterator.hasNext()</inbound>
                <inbound type="feature" confirmed="yes">org.apache.abdera.util.MultiIterator.selectCurrent()</inbound>
                <inbound type="feature" confirmed="yes">org.apache.abdera.util.ServiceUtil.loadExtensionFactories()</inbound>
                <inbound type="feature" confirmed="yes">org.apache.abdera.util.filter.AbstractListParseFilter.writeObject(java.io.ObjectOutputStream)</inbound>
            </feature>
            <feature confirmed="no">
                <name>java.util.Iterator.next()</name>
                <inbound type="feature" confirmed="yes">org.apache.abdera.factory.ExtensionFactoryMap.getElementWrapper(org.apache.abdera.model.Element)</inbound>
                <inbound type="feature" confirmed="yes">org.apache.abdera.factory.ExtensionFactoryMap.getMimeType(org.apache.abdera.model.Base)</inbound>
                <inbound type="feature" confirmed="yes">org.apache.abdera.factory.ExtensionFactoryMap.getNamespaces()</inbound>
                <inbound type="feature" confirmed="yes">org.apache.abdera.factory.ExtensionFactoryMap.handlesNamespace(java.lang.String)</inbound>
                <inbound type="feature" confirmed="yes">org.apache.abdera.factory.ExtensionFactoryMap.listExtensionFactories()</inbound>
                <inbound type="feature" confirmed="yes">org.apache.abdera.protocol.util.CacheControlUtil.parseCacheControl(java.lang.String, org.apache.abdera.protocol.util.AbstractRequest)</inbound>
                <inbound type="feature" confirmed="yes">org.apache.abdera.protocol.util.CacheControlUtil.parseCacheControl(java.lang.String, org.apache.abdera.protocol.util.AbstractResponse)</inbound>
                <inbound type="feature" confirmed="yes">org.apache.abdera.util.AbderaConfiguration.initNamedParsers()</inbound>
                <inbound type="feature" confirmed="yes">org.apache.abdera.util.AbderaConfiguration.initNamedWriters()</inbound>
                <inbound type="feature" confirmed="yes">org.apache.abdera.util.AbderaConfiguration.initStreamWriters()</inbound>
                <inbound type="feature" confirmed="yes">org.apache.abdera.util.AbderaConfiguration.loadExtensionFactories()</inbound>
                <inbound type="feature" confirmed="yes">org.apache.abdera.util.Discover.locate(java.lang.String, java.lang.Iterable)</inbound>
                <inbound type="feature" confirmed="yes">org.apache.abdera.util.Discover.locate(java.lang.String, java.lang.String, java.lang.ClassLoader, java.lang.Object[])</inbound>
                <inbound type="feature" confirmed="yes">org.apache.abdera.util.MimeTypeHelper.contains(java.lang.String, java.util.List, boolean)</inbound>
                <inbound type="feature" confirmed="yes">org.apache.abdera.util.MultiIterator.next()</inbound>
                <inbound type="feature" confirmed="yes">org.apache.abdera.util.MultiIterator.selectCurrent()</inbound>
                <inbound type="feature" confirmed="yes">org.apache.abdera.util.ServiceUtil.loadExtensionFactories()</inbound>
                <inbound type="feature" confirmed="yes">org.apache.abdera.util.filter.AbstractListParseFilter.writeObject(java.io.ObjectOutputStream)</inbound>
            </feature>
        </class>
        <class confirmed="no">
            <name>java.util.List</name>
            <inbound type="feature" confirmed="yes">org.apache.abdera.factory.ExtensionFactoryMap.ExtensionFactoryMap(java.util.List)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.factory.ExtensionFactoryMap.addFactory(org.apache.abdera.factory.ExtensionFactory)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.factory.ExtensionFactoryMap.factories</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.factory.ExtensionFactoryMap.getElementWrapper(org.apache.abdera.model.Element)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.factory.ExtensionFactoryMap.getMimeType(org.apache.abdera.model.Base)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.factory.ExtensionFactoryMap.getNamespaces()</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.factory.ExtensionFactoryMap.handlesNamespace(java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.factory.ExtensionFactoryMap.listExtensionFactories()</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.model.Categories.getCategories()</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.model.Categories.getCategories(java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.model.Categories.getCategoriesWithScheme()</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.model.Categories.getCategoriesWithScheme(java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.model.Collection.addCategories(java.util.List, boolean, java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.model.Collection.getCategories()</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.model.Element.getAttributes()</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.model.Element.getElements()</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.model.Element.getExtensionAttributes()</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.model.ElementWrapper.getAttributes()</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.model.ElementWrapper.getElements()</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.model.ElementWrapper.getExtensionAttributes()</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.model.Entry.getAuthors()</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.model.Entry.getCategories()</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.model.Entry.getCategories(java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.model.Entry.getContributors()</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.model.Entry.getLinks()</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.model.Entry.getLinks(java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.model.Entry.getLinks(java.lang.String[])</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.model.ExtensibleElement.getExtensions()</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.model.ExtensibleElement.getExtensions(java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.model.ExtensibleElement.getExtensions(javax.xml.namespace.QName)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.model.ExtensibleElementWrapper.getExtensions()</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.model.ExtensibleElementWrapper.getExtensions(java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.model.ExtensibleElementWrapper.getExtensions(javax.xml.namespace.QName)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.model.Feed.getEntries()</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.model.Service.getCollectionsThatAccept(java.lang.String[])</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.model.Service.getCollectionsThatAccept(javax.activation.MimeType[])</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.model.Service.getWorkspaces()</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.model.Source.getAuthors()</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.model.Source.getCategories()</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.model.Source.getCategories(java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.model.Source.getContributors()</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.model.Source.getLinks()</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.model.Source.getLinks(java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.model.Source.getLinks(java.lang.String[])</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.model.Workspace.getCollections()</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.model.Workspace.getCollectionsThatAccept(java.lang.String[])</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.model.Workspace.getCollectionsThatAccept(javax.activation.MimeType[])</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.util.AbderaConfiguration.AbderaConfiguration(java.util.ResourceBundle)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.util.AbderaConfiguration.factories</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.util.AbderaConfiguration.getExtensionFactories()</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.util.AbderaConfiguration.loadExtensionFactories()</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.util.AbstractExtensionFactory.AbstractExtensionFactory(java.lang.String[])</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.util.AbstractExtensionFactory.getNamespaces()</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.util.AbstractExtensionFactory.handlesNamespace(java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.util.AbstractExtensionFactory.namespaces</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.util.AbstractXPath.selectNodes(java.lang.String, org.apache.abdera.model.Base)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.util.Configuration.getExtensionFactories()</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.util.Discover.locate(java.lang.String, java.lang.Iterable)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.util.MimeTypeHelper.condense(java.lang.String[])</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.util.MimeTypeHelper.contains(java.lang.String, java.util.List, boolean)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.util.MultiIterator.MultiIterator(java.util.Iterator[])</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.util.ServiceUtil.loadExtensionFactories()</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.util.filter.AbstractListParseFilter.AbstractListParseFilter()</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.util.filter.AbstractListParseFilter.add(javax.xml.namespace.QName)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.util.filter.AbstractListParseFilter.add(javax.xml.namespace.QName, javax.xml.namespace.QName)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.util.filter.AbstractListParseFilter.contains(javax.xml.namespace.QName)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.util.filter.AbstractListParseFilter.contains(javax.xml.namespace.QName, javax.xml.namespace.QName)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.util.filter.AbstractListParseFilter.qnames</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.util.filter.AbstractListParseFilter.readObject(java.io.ObjectInputStream)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.util.filter.AbstractListParseFilter.writeObject(java.io.ObjectOutputStream)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.xpath.XPath.selectNodes(java.lang.String, org.apache.abdera.model.Base)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.xpath.XPath.selectNodes(java.lang.String, org.apache.abdera.model.Base, java.util.Map)</inbound>
            <feature confirmed="no">
                <name>java.util.List.add(java.lang.Object)</name>
                <inbound type="feature" confirmed="yes">org.apache.abdera.factory.ExtensionFactoryMap.addFactory(org.apache.abdera.factory.ExtensionFactory)</inbound>
                <inbound type="feature" confirmed="yes">org.apache.abdera.factory.ExtensionFactoryMap.getNamespaces()</inbound>
                <inbound type="feature" confirmed="yes">org.apache.abdera.factory.ExtensionFactoryMap.listExtensionFactories()</inbound>
                <inbound type="feature" confirmed="yes">org.apache.abdera.util.AbderaConfiguration.loadExtensionFactories()</inbound>
                <inbound type="feature" confirmed="yes">org.apache.abdera.util.AbstractExtensionFactory.AbstractExtensionFactory(java.lang.String[])</inbound>
                <inbound type="feature" confirmed="yes">org.apache.abdera.util.Discover$DefaultLoader.init(boolean)</inbound>
                <inbound type="feature" confirmed="yes">org.apache.abdera.util.Discover.locate(java.lang.String, java.lang.Iterable)</inbound>
                <inbound type="feature" confirmed="yes">org.apache.abdera.util.EntityTag.parseTags(java.lang.String)</inbound>
                <inbound type="feature" confirmed="yes">org.apache.abdera.util.MimeTypeHelper.condense(java.lang.String[])</inbound>
                <inbound type="feature" confirmed="yes">org.apache.abdera.util.ServiceUtil.loadExtensionFactories()</inbound>
                <inbound type="feature" confirmed="yes">org.apache.abdera.util.filter.AbstractListParseFilter.add(javax.xml.namespace.QName)</inbound>
                <inbound type="feature" confirmed="yes">org.apache.abdera.util.filter.AbstractListParseFilter.add(javax.xml.namespace.QName, javax.xml.namespace.QName)</inbound>
                <inbound type="feature" confirmed="yes">org.apache.abdera.util.filter.AbstractListParseFilter.readObject(java.io.ObjectInputStream)</inbound>
            </feature>
            <feature confirmed="no">
                <name>java.util.List.contains(java.lang.Object)</name>
                <inbound type="feature" confirmed="yes">org.apache.abdera.factory.ExtensionFactoryMap.addFactory(org.apache.abdera.factory.ExtensionFactory)</inbound>
                <inbound type="feature" confirmed="yes">org.apache.abdera.factory.ExtensionFactoryMap.getNamespaces()</inbound>
                <inbound type="feature" confirmed="yes">org.apache.abdera.factory.ExtensionFactoryMap.listExtensionFactories()</inbound>
                <inbound type="feature" confirmed="yes">org.apache.abdera.util.AbstractExtensionFactory.handlesNamespace(java.lang.String)</inbound>
                <inbound type="feature" confirmed="yes">org.apache.abdera.util.MimeTypeHelper.contains(java.lang.String, java.util.List, boolean)</inbound>
                <inbound type="feature" confirmed="yes">org.apache.abdera.util.filter.AbstractListParseFilter.add(javax.xml.namespace.QName, javax.xml.namespace.QName)</inbound>
                <inbound type="feature" confirmed="yes">org.apache.abdera.util.filter.AbstractListParseFilter.contains(javax.xml.namespace.QName)</inbound>
                <inbound type="feature" confirmed="yes">org.apache.abdera.util.filter.AbstractListParseFilter.contains(javax.xml.namespace.QName, javax.xml.namespace.QName)</inbound>
            </feature>
            <feature confirmed="no">
                <name>java.util.List.get(int)</name>
                <inbound type="feature" confirmed="yes">org.apache.abdera.util.MimeTypeHelper.condense(java.lang.String[])</inbound>
            </feature>
            <feature confirmed="no">
                <name>java.util.List.iterator()</name>
                <inbound type="feature" confirmed="yes">org.apache.abdera.factory.ExtensionFactoryMap.getElementWrapper(org.apache.abdera.model.Element)</inbound>
                <inbound type="feature" confirmed="yes">org.apache.abdera.factory.ExtensionFactoryMap.getMimeType(org.apache.abdera.model.Base)</inbound>
                <inbound type="feature" confirmed="yes">org.apache.abdera.factory.ExtensionFactoryMap.getNamespaces()</inbound>
                <inbound type="feature" confirmed="yes">org.apache.abdera.factory.ExtensionFactoryMap.handlesNamespace(java.lang.String)</inbound>
                <inbound type="feature" confirmed="yes">org.apache.abdera.factory.ExtensionFactoryMap.listExtensionFactories()</inbound>
                <inbound type="feature" confirmed="yes">org.apache.abdera.util.MimeTypeHelper.contains(java.lang.String, java.util.List, boolean)</inbound>
                <inbound type="feature" confirmed="yes">org.apache.abdera.util.MultiIterator.MultiIterator(java.util.Iterator[])</inbound>
                <inbound type="feature" confirmed="yes">org.apache.abdera.util.filter.AbstractListParseFilter.writeObject(java.io.ObjectOutputStream)</inbound>
            </feature>
            <feature confirmed="no">
                <name>java.util.List.remove(java.lang.Object)</name>
                <inbound type="feature" confirmed="yes">org.apache.abdera.util.MimeTypeHelper.condense(java.lang.String[])</inbound>
            </feature>
            <feature confirmed="no">
                <name>java.util.List.size()</name>
                <inbound type="feature" confirmed="yes">org.apache.abdera.factory.ExtensionFactoryMap.getNamespaces()</inbound>
                <inbound type="feature" confirmed="yes">org.apache.abdera.factory.ExtensionFactoryMap.listExtensionFactories()</inbound>
                <inbound type="feature" confirmed="yes">org.apache.abdera.util.AbstractExtensionFactory.getNamespaces()</inbound>
                <inbound type="feature" confirmed="yes">org.apache.abdera.util.EntityTag.parseTags(java.lang.String)</inbound>
                <inbound type="feature" confirmed="yes">org.apache.abdera.util.MimeTypeHelper.condense(java.lang.String[])</inbound>
                <inbound type="feature" confirmed="yes">org.apache.abdera.util.filter.AbstractListParseFilter.writeObject(java.io.ObjectOutputStream)</inbound>
            </feature>
            <feature confirmed="no">
                <name>java.util.List.toArray(java.lang.Object[])</name>
                <inbound type="feature" confirmed="yes">org.apache.abdera.factory.ExtensionFactoryMap.getNamespaces()</inbound>
                <inbound type="feature" confirmed="yes">org.apache.abdera.factory.ExtensionFactoryMap.listExtensionFactories()</inbound>
                <inbound type="feature" confirmed="yes">org.apache.abdera.util.AbstractExtensionFactory.getNamespaces()</inbound>
                <inbound type="feature" confirmed="yes">org.apache.abdera.util.EntityTag.parseTags(java.lang.String)</inbound>
                <inbound type="feature" confirmed="yes">org.apache.abdera.util.MimeTypeHelper.condense(java.lang.String[])</inbound>
            </feature>
        </class>
        <class confirmed="no">
            <name>java.util.Locale</name>
            <inbound type="feature" confirmed="yes">org.apache.abdera.factory.StreamBuilder.writeLanguage(java.util.Locale)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.model.Element.getLocale()</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.model.ElementWrapper.getLocale()</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.util.AbderaConfiguration.AbderaConfiguration(java.util.ResourceBundle)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.util.AbderaConfiguration.getBundle(java.util.Locale)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.util.AbstractStreamWriter.writeLanguage(java.util.Locale)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.writer.StreamWriter.writeLanguage(java.util.Locale)</inbound>
            <feature confirmed="no">
                <name>java.util.Locale.getDefault()</name>
                <inbound type="feature" confirmed="yes">org.apache.abdera.util.AbderaConfiguration.AbderaConfiguration(java.util.ResourceBundle)</inbound>
            </feature>
        </class>
        <class confirmed="no">
            <name>java.util.Map</name>
            <inbound type="feature" confirmed="yes">org.apache.abdera.model.Element.getNamespaces()</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.model.ElementWrapper.getNamespaces()</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.parser.ParserOptions.getQNameAliasMap()</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.parser.ParserOptions.setQNameAliasMap(java.util.Map)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.protocol.util.CacheControlUtil$CacheControlParser.getValues()</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.util.AbderaConfiguration.AbderaConfiguration(java.util.ResourceBundle)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.util.AbderaConfiguration.getNamedParsers()</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.util.AbderaConfiguration.getNamedWriters()</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.util.AbderaConfiguration.getStreamWriters()</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.util.AbderaConfiguration.initNamedParsers()</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.util.AbderaConfiguration.initNamedWriters()</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.util.AbderaConfiguration.initStreamWriters()</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.util.AbderaConfiguration.parsers</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.util.AbderaConfiguration.streamwriters</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.util.AbderaConfiguration.writers</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.util.AbstractExtensionFactory.AbstractExtensionFactory(java.lang.String[])</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.util.AbstractExtensionFactory.addImpl(javax.xml.namespace.QName, java.lang.Class)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.util.AbstractExtensionFactory.addMimeType(javax.xml.namespace.QName, java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.util.AbstractExtensionFactory.getElementWrapper(org.apache.abdera.model.Element)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.util.AbstractExtensionFactory.getMimeType(org.apache.abdera.model.Base)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.util.AbstractExtensionFactory.impls</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.util.AbstractExtensionFactory.mimetypes</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.util.AbstractParserOptions.AbstractParserOptions()</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.util.AbstractParserOptions.aliases</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.util.AbstractParserOptions.entities</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.util.AbstractParserOptions.getQNameAliasMap()</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.util.AbstractParserOptions.registerEntity(java.lang.String, java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.util.AbstractParserOptions.resolveEntity(java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.util.AbstractParserOptions.setQNameAliasMap(java.util.Map)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.util.AbstractXPath.AbstractXPath()</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.util.AbstractXPath.AbstractXPath(java.util.Map)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.util.AbstractXPath.booleanValueOf(java.lang.String, org.apache.abdera.model.Base)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.util.AbstractXPath.evaluate(java.lang.String, org.apache.abdera.model.Base)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.util.AbstractXPath.getDefaultNamespaces()</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.util.AbstractXPath.initDefaultNamespaces()</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.util.AbstractXPath.namespaces</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.util.AbstractXPath.numericValueOf(java.lang.String, org.apache.abdera.model.Base)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.util.AbstractXPath.selectNodes(java.lang.String, org.apache.abdera.model.Base)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.util.AbstractXPath.selectSingleNode(java.lang.String, org.apache.abdera.model.Base)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.util.AbstractXPath.valueOf(java.lang.String, org.apache.abdera.model.Base)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.util.Configuration.getNamedParsers()</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.util.Configuration.getNamedWriters()</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.util.Configuration.getStreamWriters()</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.util.filter.AbstractListParseFilter.AbstractListParseFilter()</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.util.filter.AbstractListParseFilter.add(javax.xml.namespace.QName, javax.xml.namespace.QName)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.util.filter.AbstractListParseFilter.attributes</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.util.filter.AbstractListParseFilter.contains(javax.xml.namespace.QName, javax.xml.namespace.QName)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.util.filter.AbstractListParseFilter.readObject(java.io.ObjectInputStream)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.util.filter.AbstractListParseFilter.writeObject(java.io.ObjectOutputStream)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.xpath.XPath.booleanValueOf(java.lang.String, org.apache.abdera.model.Base, java.util.Map)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.xpath.XPath.evaluate(java.lang.String, org.apache.abdera.model.Base, java.util.Map)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.xpath.XPath.getDefaultNamespaces()</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.xpath.XPath.numericValueOf(java.lang.String, org.apache.abdera.model.Base, java.util.Map)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.xpath.XPath.selectNodes(java.lang.String, org.apache.abdera.model.Base, java.util.Map)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.xpath.XPath.selectSingleNode(java.lang.String, org.apache.abdera.model.Base, java.util.Map)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.xpath.XPath.valueOf(java.lang.String, org.apache.abdera.model.Base, java.util.Map)</inbound>
            <feature confirmed="no">
                <name>java.util.Map.containsKey(java.lang.Object)</name>
                <inbound type="feature" confirmed="yes">org.apache.abdera.util.filter.AbstractListParseFilter.add(javax.xml.namespace.QName, javax.xml.namespace.QName)</inbound>
                <inbound type="feature" confirmed="yes">org.apache.abdera.util.filter.AbstractListParseFilter.contains(javax.xml.namespace.QName, javax.xml.namespace.QName)</inbound>
            </feature>
            <feature confirmed="no">
                <name>java.util.Map.entrySet()</name>
                <inbound type="feature" confirmed="yes">org.apache.abdera.util.filter.AbstractListParseFilter.writeObject(java.io.ObjectOutputStream)</inbound>
            </feature>
            <feature confirmed="no">
                <name>java.util.Map.get(java.lang.Object)</name>
                <inbound type="feature" confirmed="yes">org.apache.abdera.util.AbstractExtensionFactory.getElementWrapper(org.apache.abdera.model.Element)</inbound>
                <inbound type="feature" confirmed="yes">org.apache.abdera.util.AbstractExtensionFactory.getMimeType(org.apache.abdera.model.Base)</inbound>
                <inbound type="feature" confirmed="yes">org.apache.abdera.util.AbstractParserOptions.resolveEntity(java.lang.String)</inbound>
                <inbound type="feature" confirmed="yes">org.apache.abdera.util.filter.AbstractListParseFilter.add(javax.xml.namespace.QName, javax.xml.namespace.QName)</inbound>
                <inbound type="feature" confirmed="yes">org.apache.abdera.util.filter.AbstractListParseFilter.contains(javax.xml.namespace.QName, javax.xml.namespace.QName)</inbound>
            </feature>
            <feature confirmed="no">
                <name>java.util.Map.put(java.lang.Object, java.lang.Object)</name>
                <inbound type="feature" confirmed="yes">org.apache.abdera.util.AbderaConfiguration.initNamedParsers()</inbound>
                <inbound type="feature" confirmed="yes">org.apache.abdera.util.AbderaConfiguration.initNamedWriters()</inbound>
                <inbound type="feature" confirmed="yes">org.apache.abdera.util.AbderaConfiguration.initStreamWriters()</inbound>
                <inbound type="feature" confirmed="yes">org.apache.abdera.util.AbstractExtensionFactory.addImpl(javax.xml.namespace.QName, java.lang.Class)</inbound>
                <inbound type="feature" confirmed="yes">org.apache.abdera.util.AbstractExtensionFactory.addMimeType(javax.xml.namespace.QName, java.lang.String)</inbound>
                <inbound type="feature" confirmed="yes">org.apache.abdera.util.AbstractParserOptions.registerEntity(java.lang.String, java.lang.String)</inbound>
                <inbound type="feature" confirmed="yes">org.apache.abdera.util.AbstractXPath.initDefaultNamespaces()</inbound>
                <inbound type="feature" confirmed="yes">org.apache.abdera.util.filter.AbstractListParseFilter.add(javax.xml.namespace.QName, javax.xml.namespace.QName)</inbound>
                <inbound type="feature" confirmed="yes">org.apache.abdera.util.filter.AbstractListParseFilter.readObject(java.io.ObjectInputStream)</inbound>
            </feature>
            <feature confirmed="no">
                <name>java.util.Map.size()</name>
                <inbound type="feature" confirmed="yes">org.apache.abdera.util.filter.AbstractListParseFilter.writeObject(java.io.ObjectOutputStream)</inbound>
            </feature>
        </class>
        <class confirmed="no">
            <name>java.util.Map$Entry</name>
            <inbound type="feature" confirmed="yes">org.apache.abdera.util.filter.AbstractListParseFilter.writeObject(java.io.ObjectOutputStream)</inbound>
            <feature confirmed="no">
                <name>java.util.Map$Entry.getKey()</name>
                <inbound type="feature" confirmed="yes">org.apache.abdera.util.filter.AbstractListParseFilter.writeObject(java.io.ObjectOutputStream)</inbound>
            </feature>
            <feature confirmed="no">
                <name>java.util.Map$Entry.getValue()</name>
                <inbound type="feature" confirmed="yes">org.apache.abdera.util.filter.AbstractListParseFilter.writeObject(java.io.ObjectOutputStream)</inbound>
            </feature>
        </class>
        <class confirmed="no">
            <name>java.util.ResourceBundle</name>
            <inbound type="feature" confirmed="yes">org.apache.abdera.util.AbderaConfiguration.AbderaConfiguration()</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.util.AbderaConfiguration.AbderaConfiguration(java.util.ResourceBundle)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.util.AbderaConfiguration.bundle</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.util.AbderaConfiguration.getBundle()</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.util.AbderaConfiguration.getBundle(java.util.Locale)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.util.AbderaConfiguration.getConfigurationOption(java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.util.AbderaConfiguration.getDefault()</inbound>
            <feature confirmed="no">
                <name>java.util.ResourceBundle.getBundle(java.lang.String)</name>
                <inbound type="feature" confirmed="yes">org.apache.abdera.util.AbderaConfiguration.getDefault()</inbound>
            </feature>
            <feature confirmed="no">
                <name>java.util.ResourceBundle.getBundle(java.lang.String, java.util.Locale, java.lang.ClassLoader)</name>
                <inbound type="feature" confirmed="yes">org.apache.abdera.util.AbderaConfiguration.getBundle(java.util.Locale)</inbound>
            </feature>
            <feature confirmed="no">
                <name>java.util.ResourceBundle.getString(java.lang.String)</name>
                <inbound type="feature" confirmed="yes">org.apache.abdera.util.AbderaConfiguration.getConfigurationOption(java.lang.String)</inbound>
            </feature>
        </class>
        <class confirmed="no">
            <name>java.util.Set</name>
            <inbound type="feature" confirmed="yes">org.apache.abdera.protocol.util.CacheControlUtil$CacheControlParser.iterator()</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.util.filter.AbstractListParseFilter.writeObject(java.io.ObjectOutputStream)</inbound>
            <feature confirmed="no">
                <name>java.util.Set.iterator()</name>
                <inbound type="feature" confirmed="yes">org.apache.abdera.protocol.util.CacheControlUtil$CacheControlParser.iterator()</inbound>
                <inbound type="feature" confirmed="yes">org.apache.abdera.util.filter.AbstractListParseFilter.writeObject(java.io.ObjectOutputStream)</inbound>
            </feature>
        </class>
        <class confirmed="no">
            <name>java.util.Stack</name>
            <inbound type="class" confirmed="yes">org.apache.abdera.protocol.util.PoolManager$1</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.protocol.util.PoolManager.PoolManager(int)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.protocol.util.PoolManager.getInstance()</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.protocol.util.PoolManager.initStack(int)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.protocol.util.PoolManager.pool</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.protocol.util.PoolManager.release(java.lang.Object)</inbound>
            <feature confirmed="no">
                <name>java.util.Stack.Stack()</name>
                <inbound type="feature" confirmed="yes">org.apache.abdera.protocol.util.PoolManager$1.PoolManager$1(org.apache.abdera.protocol.util.PoolManager, int)</inbound>
            </feature>
            <feature confirmed="no">
                <name>java.util.Stack.contains(java.lang.Object)</name>
                <inbound type="feature" confirmed="yes">org.apache.abdera.protocol.util.PoolManager.release(java.lang.Object)</inbound>
            </feature>
            <feature confirmed="no">
                <name>java.util.Stack.empty()</name>
                <inbound type="feature" confirmed="yes">org.apache.abdera.protocol.util.PoolManager.getInstance()</inbound>
            </feature>
            <feature confirmed="no">
                <name>java.util.Stack.pop()</name>
                <inbound type="feature" confirmed="yes">org.apache.abdera.protocol.util.PoolManager.getInstance()</inbound>
            </feature>
            <feature confirmed="no">
                <name>java.util.Stack.push(java.lang.Object)</name>
                <inbound type="feature" confirmed="yes">org.apache.abdera.protocol.util.PoolManager$1.push(java.lang.Object)</inbound>
                <inbound type="feature" confirmed="yes">org.apache.abdera.protocol.util.PoolManager.release(java.lang.Object)</inbound>
            </feature>
        </class>
        <class confirmed="no">
            <name>java.util.TimeZone</name>
            <inbound type="feature" confirmed="yes">org.apache.abdera.model.AtomDate.format(java.util.Date)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.model.AtomDate.parse(java.lang.String)</inbound>
            <feature confirmed="no">
                <name>java.util.TimeZone.getTimeZone(java.lang.String)</name>
                <inbound type="feature" confirmed="yes">org.apache.abdera.model.AtomDate.format(java.util.Date)</inbound>
                <inbound type="feature" confirmed="yes">org.apache.abdera.model.AtomDate.parse(java.lang.String)</inbound>
            </feature>
        </class>
    </package>
    <package confirmed="no">
        <name>java.util.regex</name>
        <class confirmed="no">
            <name>java.util.regex.Matcher</name>
            <inbound type="feature" confirmed="yes">org.apache.abdera.model.AtomDate.parse(java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.protocol.util.CacheControlUtil$CacheControlParser.CacheControlUtil$CacheControlParser(java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.util.EntityTag.parse(java.lang.String)</inbound>
            <feature confirmed="no">
                <name>java.util.regex.Matcher.find()</name>
                <inbound type="feature" confirmed="yes">org.apache.abdera.model.AtomDate.parse(java.lang.String)</inbound>
                <inbound type="feature" confirmed="yes">org.apache.abdera.protocol.util.CacheControlUtil$CacheControlParser.CacheControlUtil$CacheControlParser(java.lang.String)</inbound>
                <inbound type="feature" confirmed="yes">org.apache.abdera.util.EntityTag.parse(java.lang.String)</inbound>
            </feature>
            <feature confirmed="no">
                <name>java.util.regex.Matcher.group(int)</name>
                <inbound type="feature" confirmed="yes">org.apache.abdera.model.AtomDate.parse(java.lang.String)</inbound>
                <inbound type="feature" confirmed="yes">org.apache.abdera.protocol.util.CacheControlUtil$CacheControlParser.CacheControlUtil$CacheControlParser(java.lang.String)</inbound>
                <inbound type="feature" confirmed="yes">org.apache.abdera.util.EntityTag.parse(java.lang.String)</inbound>
            </feature>
        </class>
        <class confirmed="no">
            <name>java.util.regex.Pattern</name>
            <inbound type="feature" confirmed="yes">org.apache.abdera.model.AtomDate.PATTERN</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.model.AtomDate.parse(java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.model.AtomDate.static {}</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.protocol.util.CacheControlUtil$CacheControlParser.CacheControlUtil$CacheControlParser(java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.protocol.util.CacheControlUtil$CacheControlParser.pattern</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.protocol.util.CacheControlUtil$CacheControlParser.static {}</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.util.EntityTag.PATTERN</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.util.EntityTag.parse(java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.util.EntityTag.static {}</inbound>
            <feature confirmed="no">
                <name>java.util.regex.Pattern.compile(java.lang.String)</name>
                <inbound type="feature" confirmed="yes">org.apache.abdera.model.AtomDate.static {}</inbound>
                <inbound type="feature" confirmed="yes">org.apache.abdera.protocol.util.CacheControlUtil$CacheControlParser.static {}</inbound>
                <inbound type="feature" confirmed="yes">org.apache.abdera.util.EntityTag.static {}</inbound>
            </feature>
            <feature confirmed="no">
                <name>java.util.regex.Pattern.matcher(java.lang.CharSequence)</name>
                <inbound type="feature" confirmed="yes">org.apache.abdera.model.AtomDate.parse(java.lang.String)</inbound>
                <inbound type="feature" confirmed="yes">org.apache.abdera.protocol.util.CacheControlUtil$CacheControlParser.CacheControlUtil$CacheControlParser(java.lang.String)</inbound>
                <inbound type="feature" confirmed="yes">org.apache.abdera.util.EntityTag.parse(java.lang.String)</inbound>
            </feature>
        </class>
    </package>
    <package confirmed="no">
        <name>java.util.zip</name>
        <class confirmed="no">
            <name>java.util.zip.DeflaterOutputStream</name>
            <inbound type="feature" confirmed="yes">org.apache.abdera.util.AbstractWriter.finishCompressedOutputStream(java.io.OutputStream, org.apache.abdera.writer.WriterOptions)</inbound>
            <feature confirmed="no">
                <name>java.util.zip.DeflaterOutputStream.finish()</name>
                <inbound type="feature" confirmed="yes">org.apache.abdera.util.AbstractWriter.finishCompressedOutputStream(java.io.OutputStream, org.apache.abdera.writer.WriterOptions)</inbound>
            </feature>
        </class>
    </package>
    <package confirmed="no">
        <name>javax.activation</name>
        <class confirmed="no">
            <name>javax.activation.DataHandler</name>
            <inbound type="feature" confirmed="yes">org.apache.abdera.factory.StreamBuilder.writeContent(org.apache.abdera.model.Content$Type, javax.activation.DataHandler)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.factory.StreamBuilder.writeElementText(javax.activation.DataHandler)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.model.Content.getDataHandler()</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.model.Content.setDataHandler(javax.activation.DataHandler)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.model.Element.setText(javax.activation.DataHandler)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.model.ElementWrapper.setText(javax.activation.DataHandler)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.model.Entry.setContent(javax.activation.DataHandler)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.model.Entry.setContent(javax.activation.DataHandler, java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.model.TextValue.getDataHandler()</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.util.AbstractStreamWriter.writeContent(org.apache.abdera.model.Content$Type, javax.activation.DataHandler)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.util.AbstractStreamWriter.writeElementText(javax.activation.DataHandler)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.writer.StreamWriter.writeContent(org.apache.abdera.model.Content$Type, javax.activation.DataHandler)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.writer.StreamWriter.writeElementText(javax.activation.DataHandler)</inbound>
            <feature confirmed="no">
                <name>javax.activation.DataHandler.getInputStream()</name>
                <inbound type="feature" confirmed="yes">org.apache.abdera.util.AbstractStreamWriter.writeElementText(javax.activation.DataHandler)</inbound>
            </feature>
        </class>
        <class confirmed="no">
            <name>javax.activation.DataSource</name>
            <inbound type="class" confirmed="yes">org.apache.abdera.util.AbderaDataSource</inbound>
        </class>
        <class confirmed="no">
            <name>javax.activation.MimeType</name>
            <inbound type="feature" confirmed="yes">org.apache.abdera.factory.Factory.newContent(javax.activation.MimeType)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.factory.Factory.newContent(javax.activation.MimeType, org.apache.abdera.model.Element)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.model.Collection.accepts(javax.activation.MimeType)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.model.Content.getMimeType()</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.model.Document.getContentType()</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.model.Entry.getContentMimeType()</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.model.Link.getMimeType()</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.model.Service.getCollectionThatAccepts(javax.activation.MimeType[])</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.model.Service.getCollectionsThatAccept(javax.activation.MimeType[])</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.model.Workspace.getCollectionThatAccepts(javax.activation.MimeType[])</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.model.Workspace.getCollectionsThatAccept(javax.activation.MimeType[])</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.protocol.Message.getContentType()</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.protocol.util.AbstractMessage.getContentType()</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.util.MimeTypeHelper.WILDCARD</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.util.MimeTypeHelper.compare(java.lang.String, java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.util.MimeTypeHelper.compare(javax.activation.MimeType, javax.activation.MimeType)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.util.MimeTypeHelper.createWildcard()</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.util.MimeTypeHelper.getMimeType(org.apache.abdera.model.Base)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.util.MimeTypeHelper.isEntry(java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.util.MimeTypeHelper.isFeed(java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.util.MimeTypeHelper.isMatch(java.lang.String, java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.util.MimeTypeHelper.isMatch(javax.activation.MimeType, javax.activation.MimeType)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.util.MimeTypeHelper.isMatch(javax.activation.MimeType, javax.activation.MimeType, boolean)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.util.MimeTypeHelper.static {}</inbound>
            <feature confirmed="no">
                <name>javax.activation.MimeType.MimeType(java.lang.String)</name>
                <inbound type="feature" confirmed="yes">org.apache.abdera.protocol.util.AbstractMessage.getContentType()</inbound>
                <inbound type="feature" confirmed="yes">org.apache.abdera.util.MimeTypeHelper.compare(java.lang.String, java.lang.String)</inbound>
                <inbound type="feature" confirmed="yes">org.apache.abdera.util.MimeTypeHelper.createWildcard()</inbound>
                <inbound type="feature" confirmed="yes">org.apache.abdera.util.MimeTypeHelper.getCharset(java.lang.String)</inbound>
                <inbound type="feature" confirmed="yes">org.apache.abdera.util.MimeTypeHelper.isEntry(java.lang.String)</inbound>
                <inbound type="feature" confirmed="yes">org.apache.abdera.util.MimeTypeHelper.isFeed(java.lang.String)</inbound>
                <inbound type="feature" confirmed="yes">org.apache.abdera.util.MimeTypeHelper.isMatch(java.lang.String, java.lang.String)</inbound>
                <inbound type="feature" confirmed="yes">org.apache.abdera.util.MimeTypeHelper.isMimeType(java.lang.String)</inbound>
                <inbound type="feature" confirmed="yes">org.apache.abdera.util.MimeTypeHelper.isXml(java.lang.String)</inbound>
            </feature>
            <feature confirmed="no">
                <name>javax.activation.MimeType.MimeType(java.lang.String, java.lang.String)</name>
                <inbound type="feature" confirmed="yes">org.apache.abdera.util.MimeTypeHelper.isMatch(javax.activation.MimeType, javax.activation.MimeType, boolean)</inbound>
            </feature>
            <feature confirmed="no">
                <name>javax.activation.MimeType.getParameter(java.lang.String)</name>
                <inbound type="feature" confirmed="yes">org.apache.abdera.util.MimeTypeHelper.getCharset(java.lang.String)</inbound>
                <inbound type="feature" confirmed="yes">org.apache.abdera.util.MimeTypeHelper.isEntry(java.lang.String)</inbound>
                <inbound type="feature" confirmed="yes">org.apache.abdera.util.MimeTypeHelper.isFeed(java.lang.String)</inbound>
            </feature>
            <feature confirmed="no">
                <name>javax.activation.MimeType.getParameters()</name>
                <inbound type="feature" confirmed="yes">org.apache.abdera.util.MimeTypeHelper.isMatch(javax.activation.MimeType, javax.activation.MimeType, boolean)</inbound>
            </feature>
            <feature confirmed="no">
                <name>javax.activation.MimeType.getPrimaryType()</name>
                <inbound type="feature" confirmed="yes">org.apache.abdera.util.MimeTypeHelper.isMatch(javax.activation.MimeType, javax.activation.MimeType, boolean)</inbound>
                <inbound type="feature" confirmed="yes">org.apache.abdera.util.MimeTypeHelper.isXml(java.lang.String)</inbound>
            </feature>
            <feature confirmed="no">
                <name>javax.activation.MimeType.getSubType()</name>
                <inbound type="feature" confirmed="yes">org.apache.abdera.util.MimeTypeHelper.compare(javax.activation.MimeType, javax.activation.MimeType)</inbound>
                <inbound type="feature" confirmed="yes">org.apache.abdera.util.MimeTypeHelper.isMatch(javax.activation.MimeType, javax.activation.MimeType, boolean)</inbound>
                <inbound type="feature" confirmed="yes">org.apache.abdera.util.MimeTypeHelper.isXml(java.lang.String)</inbound>
            </feature>
            <feature confirmed="no">
                <name>javax.activation.MimeType.match(javax.activation.MimeType)</name>
                <inbound type="feature" confirmed="yes">org.apache.abdera.util.MimeTypeHelper.isMatch(javax.activation.MimeType, javax.activation.MimeType, boolean)</inbound>
            </feature>
            <feature confirmed="no">
                <name>javax.activation.MimeType.toString()</name>
                <inbound type="feature" confirmed="yes">org.apache.abdera.util.MimeTypeHelper.getMimeType(org.apache.abdera.model.Base)</inbound>
            </feature>
        </class>
        <class confirmed="no">
            <name>javax.activation.MimeTypeParameterList</name>
            <inbound type="feature" confirmed="yes">org.apache.abdera.util.MimeTypeHelper.isMatch(javax.activation.MimeType, javax.activation.MimeType, boolean)</inbound>
            <feature confirmed="no">
                <name>javax.activation.MimeTypeParameterList.get(java.lang.String)</name>
                <inbound type="feature" confirmed="yes">org.apache.abdera.util.MimeTypeHelper.isMatch(javax.activation.MimeType, javax.activation.MimeType, boolean)</inbound>
            </feature>
            <feature confirmed="no">
                <name>javax.activation.MimeTypeParameterList.getNames()</name>
                <inbound type="feature" confirmed="yes">org.apache.abdera.util.MimeTypeHelper.isMatch(javax.activation.MimeType, javax.activation.MimeType, boolean)</inbound>
            </feature>
            <feature confirmed="no">
                <name>javax.activation.MimeTypeParameterList.isEmpty()</name>
                <inbound type="feature" confirmed="yes">org.apache.abdera.util.MimeTypeHelper.isMatch(javax.activation.MimeType, javax.activation.MimeType, boolean)</inbound>
            </feature>
        </class>
        <class confirmed="no">
            <name>javax.activation.MimeTypeParseException</name>
            <inbound type="feature" confirmed="yes">org.apache.abdera.protocol.util.AbstractMessage.getContentType()</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.util.MimeTypeHelper.isMimeType(java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.util.MimeTypeParseException.MimeTypeParseException(javax.activation.MimeTypeParseException)</inbound>
        </class>
    </package>
    <package confirmed="no">
        <name>javax.xml.namespace</name>
        <class confirmed="no">
            <name>javax.xml.namespace.QName</name>
            <inbound type="feature" confirmed="yes">org.apache.abdera.factory.ExtensionFactoryMap.getMimeType(org.apache.abdera.model.Base)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.factory.Factory.newDateTime(javax.xml.namespace.QName, org.apache.abdera.model.Element)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.factory.Factory.newElement(javax.xml.namespace.QName)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.factory.Factory.newElement(javax.xml.namespace.QName, org.apache.abdera.model.Base)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.factory.Factory.newExtensionElement(javax.xml.namespace.QName)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.factory.Factory.newExtensionElement(javax.xml.namespace.QName, org.apache.abdera.model.Base)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.factory.Factory.newIRIElement(javax.xml.namespace.QName, org.apache.abdera.model.Element)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.factory.Factory.newPerson(javax.xml.namespace.QName, org.apache.abdera.model.Element)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.factory.Factory.newText(javax.xml.namespace.QName, org.apache.abdera.model.Text$Type)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.factory.Factory.newText(javax.xml.namespace.QName, org.apache.abdera.model.Text$Type, org.apache.abdera.model.Element)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.factory.StreamBuilder.getQName(java.lang.String, java.lang.String, java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.factory.StreamBuilder.startElement(javax.xml.namespace.QName)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.factory.StreamBuilder.startPerson(javax.xml.namespace.QName)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.factory.StreamBuilder.startText(javax.xml.namespace.QName, org.apache.abdera.model.Text$Type)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.factory.StreamBuilder.writeAttribute(javax.xml.namespace.QName, double)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.factory.StreamBuilder.writeAttribute(javax.xml.namespace.QName, int)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.factory.StreamBuilder.writeAttribute(javax.xml.namespace.QName, java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.factory.StreamBuilder.writeAttribute(javax.xml.namespace.QName, java.util.Date)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.factory.StreamBuilder.writeAttribute(javax.xml.namespace.QName, long)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.factory.StreamBuilder.writeDate(javax.xml.namespace.QName, java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.factory.StreamBuilder.writeDate(javax.xml.namespace.QName, java.util.Date)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.factory.StreamBuilder.writeIRIElement(javax.xml.namespace.QName, java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.factory.StreamBuilder.writeIRIElement(javax.xml.namespace.QName, org.apache.abdera.i18n.iri.IRI)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.factory.StreamBuilder.writePerson(javax.xml.namespace.QName, java.lang.String, java.lang.String, java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.factory.StreamBuilder.writeText(javax.xml.namespace.QName, org.apache.abdera.model.Text$Type, java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.filter.ListParseFilter.add(javax.xml.namespace.QName)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.filter.ListParseFilter.add(javax.xml.namespace.QName, javax.xml.namespace.QName)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.filter.ListParseFilter.contains(javax.xml.namespace.QName)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.filter.ListParseFilter.contains(javax.xml.namespace.QName, javax.xml.namespace.QName)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.filter.ParseFilter.acceptable(javax.xml.namespace.QName)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.filter.ParseFilter.acceptable(javax.xml.namespace.QName, javax.xml.namespace.QName)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.model.Attribute.getQName()</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.model.DateTimeWrapper.DateTimeWrapper(org.apache.abdera.factory.Factory, javax.xml.namespace.QName)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.model.Element.getAttributeValue(javax.xml.namespace.QName)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.model.Element.getFirstChild(javax.xml.namespace.QName)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.model.Element.getNextSibling(javax.xml.namespace.QName)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.model.Element.getPreviousSibling(javax.xml.namespace.QName)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.model.Element.getQName()</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.model.Element.removeAttribute(javax.xml.namespace.QName)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.model.Element.setAttributeValue(javax.xml.namespace.QName, java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.model.ElementWrapper.ElementWrapper(org.apache.abdera.factory.Factory, javax.xml.namespace.QName)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.model.ElementWrapper.getAttributeValue(javax.xml.namespace.QName)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.model.ElementWrapper.getFirstChild(javax.xml.namespace.QName)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.model.ElementWrapper.getNextSibling(javax.xml.namespace.QName)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.model.ElementWrapper.getPreviousSibling(javax.xml.namespace.QName)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.model.ElementWrapper.getQName()</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.model.ElementWrapper.removeAttribute(javax.xml.namespace.QName)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.model.ElementWrapper.setAttributeValue(javax.xml.namespace.QName, java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.model.ExtensibleElement.addExtension(javax.xml.namespace.QName)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.model.ExtensibleElement.addExtension(javax.xml.namespace.QName, javax.xml.namespace.QName)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.model.ExtensibleElement.addSimpleExtension(javax.xml.namespace.QName, java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.model.ExtensibleElement.getExtension(javax.xml.namespace.QName)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.model.ExtensibleElement.getExtensions(javax.xml.namespace.QName)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.model.ExtensibleElement.getSimpleExtension(javax.xml.namespace.QName)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.model.ExtensibleElementWrapper.ExtensibleElementWrapper(org.apache.abdera.factory.Factory, javax.xml.namespace.QName)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.model.ExtensibleElementWrapper.addExtension(javax.xml.namespace.QName)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.model.ExtensibleElementWrapper.addExtension(javax.xml.namespace.QName, javax.xml.namespace.QName)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.model.ExtensibleElementWrapper.addSimpleExtension(javax.xml.namespace.QName, java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.model.ExtensibleElementWrapper.getExtension(javax.xml.namespace.QName)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.model.ExtensibleElementWrapper.getExtensions(javax.xml.namespace.QName)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.model.ExtensibleElementWrapper.getSimpleExtension(javax.xml.namespace.QName)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.model.PersonWrapper.PersonWrapper(org.apache.abdera.factory.Factory, javax.xml.namespace.QName)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.model.PersonWrapper.getEmailElement()</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.model.PersonWrapper.getNameElement()</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.model.PersonWrapper.getUriElement()</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.protocol.error.Error.CODE</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.protocol.error.Error.ERROR</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.protocol.error.Error.Error(org.apache.abdera.factory.Factory, javax.xml.namespace.QName)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.protocol.error.Error.MESSAGE</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.protocol.error.Error.create(org.apache.abdera.Abdera, int, java.lang.String, java.lang.Throwable)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.protocol.error.Error.create(org.apache.abdera.writer.StreamWriter, int, java.lang.String, java.lang.Throwable)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.protocol.error.Error.getCode()</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.protocol.error.Error.getMessage()</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.protocol.error.Error.setCode(int)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.protocol.error.Error.setMessage(java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.protocol.error.Error.static {}</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.protocol.error.ErrorExtensionFactory.ErrorExtensionFactory()</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.util.AbstractExtensionFactory.addImpl(javax.xml.namespace.QName, java.lang.Class)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.util.AbstractExtensionFactory.addMimeType(javax.xml.namespace.QName, java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.util.AbstractExtensionFactory.getElementWrapper(org.apache.abdera.model.Element)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.util.AbstractExtensionFactory.getMimeType(org.apache.abdera.model.Base)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.util.AbstractStreamWriter.startAuthor()</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.util.AbstractStreamWriter.startCategories(boolean, java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.util.AbstractStreamWriter.startCategory(java.lang.String, java.lang.String, java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.util.AbstractStreamWriter.startCollection(java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.util.AbstractStreamWriter.startContent(java.lang.String, java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.util.AbstractStreamWriter.startContributor()</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.util.AbstractStreamWriter.startControl()</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.util.AbstractStreamWriter.startElement(javax.xml.namespace.QName)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.util.AbstractStreamWriter.startEntry()</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.util.AbstractStreamWriter.startFeed()</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.util.AbstractStreamWriter.startGenerator(java.lang.String, java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.util.AbstractStreamWriter.startLink(java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, long)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.util.AbstractStreamWriter.startPerson(javax.xml.namespace.QName)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.util.AbstractStreamWriter.startService()</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.util.AbstractStreamWriter.startSource()</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.util.AbstractStreamWriter.startText(javax.xml.namespace.QName, org.apache.abdera.model.Text$Type)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.util.AbstractStreamWriter.startWorkspace()</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.util.AbstractStreamWriter.writeAccepts(java.lang.String[])</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.util.AbstractStreamWriter.writeAttribute(javax.xml.namespace.QName, double)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.util.AbstractStreamWriter.writeAttribute(javax.xml.namespace.QName, int)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.util.AbstractStreamWriter.writeAttribute(javax.xml.namespace.QName, java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.util.AbstractStreamWriter.writeAttribute(javax.xml.namespace.QName, java.util.Date)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.util.AbstractStreamWriter.writeAttribute(javax.xml.namespace.QName, long)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.util.AbstractStreamWriter.writeAuthor(java.lang.String, java.lang.String, java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.util.AbstractStreamWriter.writeBase(java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.util.AbstractStreamWriter.writeCategory(java.lang.String, java.lang.String, java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.util.AbstractStreamWriter.writeContributor(java.lang.String, java.lang.String, java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.util.AbstractStreamWriter.writeDate(javax.xml.namespace.QName, java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.util.AbstractStreamWriter.writeDate(javax.xml.namespace.QName, java.util.Date)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.util.AbstractStreamWriter.writeDraft(boolean)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.util.AbstractStreamWriter.writeEdited(java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.util.AbstractStreamWriter.writeEdited(java.util.Date)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.util.AbstractStreamWriter.writeGenerator(java.lang.String, java.lang.String, java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.util.AbstractStreamWriter.writeIRIElement(javax.xml.namespace.QName, java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.util.AbstractStreamWriter.writeIRIElement(javax.xml.namespace.QName, org.apache.abdera.i18n.iri.IRI)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.util.AbstractStreamWriter.writeIcon(java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.util.AbstractStreamWriter.writeIcon(org.apache.abdera.i18n.iri.IRI)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.util.AbstractStreamWriter.writeId(java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.util.AbstractStreamWriter.writeId(org.apache.abdera.i18n.iri.IRI)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.util.AbstractStreamWriter.writeLanguage(java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.util.AbstractStreamWriter.writeLogo(java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.util.AbstractStreamWriter.writeLogo(org.apache.abdera.i18n.iri.IRI)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.util.AbstractStreamWriter.writePerson(javax.xml.namespace.QName, java.lang.String, java.lang.String, java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.util.AbstractStreamWriter.writePersonEmail(java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.util.AbstractStreamWriter.writePersonName(java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.util.AbstractStreamWriter.writePersonUri(java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.util.AbstractStreamWriter.writePublished(java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.util.AbstractStreamWriter.writePublished(java.util.Date)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.util.AbstractStreamWriter.writeRights(java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.util.AbstractStreamWriter.writeRights(org.apache.abdera.model.Text$Type, java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.util.AbstractStreamWriter.writeSubtitle(java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.util.AbstractStreamWriter.writeSubtitle(org.apache.abdera.model.Text$Type, java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.util.AbstractStreamWriter.writeSummary(java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.util.AbstractStreamWriter.writeSummary(org.apache.abdera.model.Text$Type, java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.util.AbstractStreamWriter.writeText(javax.xml.namespace.QName, org.apache.abdera.model.Text$Type, java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.util.AbstractStreamWriter.writeTitle(java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.util.AbstractStreamWriter.writeTitle(org.apache.abdera.model.Text$Type, java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.util.AbstractStreamWriter.writeUpdated(java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.util.AbstractStreamWriter.writeUpdated(java.util.Date)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.util.Constants.ACCEPT</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.util.Constants.AID</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.util.Constants.ALTERNATE</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.util.Constants.ATITLE</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.util.Constants.AURI</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.util.Constants.AUTHOR</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.util.Constants.BASE</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.util.Constants.CATEGORIES</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.util.Constants.CATEGORY</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.util.Constants.CLASS</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.util.Constants.COLLECTION</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.util.Constants.CONTENT</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.util.Constants.CONTRIBUTOR</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.util.Constants.CONTROL</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.util.Constants.DIV</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.util.Constants.DRAFT</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.util.Constants.EDITED</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.util.Constants.EMAIL</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.util.Constants.ENTRY</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.util.Constants.FEED</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.util.Constants.FIXED</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.util.Constants.GENERATOR</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.util.Constants.HREF</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.util.Constants.HREFLANG</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.util.Constants.ICON</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.util.Constants.ID</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.util.Constants.LABEL</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.util.Constants.LANG</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.util.Constants.LENGTH</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.util.Constants.LINK</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.util.Constants.LOGO</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.util.Constants.NAME</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.util.Constants.PREFIXED_TITLE</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.util.Constants.PRE_RFC_ACCEPT</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.util.Constants.PRE_RFC_CATEGORIES</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.util.Constants.PRE_RFC_COLLECTION</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.util.Constants.PRE_RFC_CONTROL</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.util.Constants.PRE_RFC_DRAFT</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.util.Constants.PRE_RFC_EDITED</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.util.Constants.PRE_RFC_SERVICE</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.util.Constants.PRE_RFC_WORKSPACE</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.util.Constants.PUBLISHED</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.util.Constants.REL</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.util.Constants.RIGHTS</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.util.Constants.SCHEME</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.util.Constants.SERVICE</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.util.Constants.SOURCE</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.util.Constants.SPACE</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.util.Constants.SRC</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.util.Constants.SUBTITLE</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.util.Constants.SUMMARY</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.util.Constants.TERM</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.util.Constants.TITLE</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.util.Constants.TYPE</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.util.Constants.UPDATED</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.util.Constants.URI</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.util.Constants.VERSION</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.util.Constants.WORKSPACE</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.util.Constants.static {}</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.util.filter.AbstractListParseFilter.acceptable(javax.xml.namespace.QName)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.util.filter.AbstractListParseFilter.acceptable(javax.xml.namespace.QName, javax.xml.namespace.QName)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.util.filter.AbstractListParseFilter.add(javax.xml.namespace.QName)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.util.filter.AbstractListParseFilter.add(javax.xml.namespace.QName, javax.xml.namespace.QName)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.util.filter.AbstractListParseFilter.contains(javax.xml.namespace.QName)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.util.filter.AbstractListParseFilter.contains(javax.xml.namespace.QName, javax.xml.namespace.QName)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.util.filter.AbstractListParseFilter.readObject(java.io.ObjectInputStream)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.util.filter.AbstractListParseFilter.writeObject(java.io.ObjectOutputStream)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.util.filter.BlackListParseFilter.acceptable(javax.xml.namespace.QName)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.util.filter.BlackListParseFilter.acceptable(javax.xml.namespace.QName, javax.xml.namespace.QName)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.util.filter.CompoundParseFilter.acceptable(javax.xml.namespace.QName)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.util.filter.CompoundParseFilter.acceptable(javax.xml.namespace.QName, javax.xml.namespace.QName)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.util.filter.NonOpParseFilter.acceptable(javax.xml.namespace.QName)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.util.filter.NonOpParseFilter.acceptable(javax.xml.namespace.QName, javax.xml.namespace.QName)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.util.filter.SafeContentWhiteListParseFilter.acceptable(javax.xml.namespace.QName)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.util.filter.SafeContentWhiteListParseFilter.acceptable(javax.xml.namespace.QName, javax.xml.namespace.QName)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.util.filter.WhiteListParseFilter.acceptable(javax.xml.namespace.QName)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.util.filter.WhiteListParseFilter.acceptable(javax.xml.namespace.QName, javax.xml.namespace.QName)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.writer.StreamWriter.startElement(javax.xml.namespace.QName)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.writer.StreamWriter.startPerson(javax.xml.namespace.QName)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.writer.StreamWriter.startText(javax.xml.namespace.QName, org.apache.abdera.model.Text$Type)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.writer.StreamWriter.writeAttribute(javax.xml.namespace.QName, double)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.writer.StreamWriter.writeAttribute(javax.xml.namespace.QName, int)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.writer.StreamWriter.writeAttribute(javax.xml.namespace.QName, java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.writer.StreamWriter.writeAttribute(javax.xml.namespace.QName, java.util.Date)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.writer.StreamWriter.writeAttribute(javax.xml.namespace.QName, long)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.writer.StreamWriter.writeDate(javax.xml.namespace.QName, java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.writer.StreamWriter.writeDate(javax.xml.namespace.QName, java.util.Date)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.writer.StreamWriter.writeIRIElement(javax.xml.namespace.QName, java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.writer.StreamWriter.writeIRIElement(javax.xml.namespace.QName, org.apache.abdera.i18n.iri.IRI)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.writer.StreamWriter.writePerson(javax.xml.namespace.QName, java.lang.String, java.lang.String, java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.writer.StreamWriter.writeText(javax.xml.namespace.QName, org.apache.abdera.model.Text$Type, java.lang.String)</inbound>
            <feature confirmed="no">
                <name>javax.xml.namespace.QName.QName(java.lang.String)</name>
                <inbound type="feature" confirmed="yes">org.apache.abdera.factory.StreamBuilder.getQName(java.lang.String, java.lang.String, java.lang.String)</inbound>
                <inbound type="feature" confirmed="yes">org.apache.abdera.util.Constants.static {}</inbound>
            </feature>
            <feature confirmed="no">
                <name>javax.xml.namespace.QName.QName(java.lang.String, java.lang.String)</name>
                <inbound type="feature" confirmed="yes">org.apache.abdera.factory.StreamBuilder.getQName(java.lang.String, java.lang.String, java.lang.String)</inbound>
                <inbound type="feature" confirmed="yes">org.apache.abdera.protocol.error.Error.static {}</inbound>
            </feature>
            <feature confirmed="no">
                <name>javax.xml.namespace.QName.QName(java.lang.String, java.lang.String, java.lang.String)</name>
                <inbound type="feature" confirmed="yes">org.apache.abdera.factory.StreamBuilder.getQName(java.lang.String, java.lang.String, java.lang.String)</inbound>
                <inbound type="feature" confirmed="yes">org.apache.abdera.util.Constants.static {}</inbound>
            </feature>
            <feature confirmed="no">
                <name>javax.xml.namespace.QName.getLocalPart()</name>
                <inbound type="feature" confirmed="yes">org.apache.abdera.util.AbstractStreamWriter.startElement(javax.xml.namespace.QName)</inbound>
                <inbound type="feature" confirmed="yes">org.apache.abdera.util.AbstractStreamWriter.writeAttribute(javax.xml.namespace.QName, double)</inbound>
                <inbound type="feature" confirmed="yes">org.apache.abdera.util.AbstractStreamWriter.writeAttribute(javax.xml.namespace.QName, int)</inbound>
                <inbound type="feature" confirmed="yes">org.apache.abdera.util.AbstractStreamWriter.writeAttribute(javax.xml.namespace.QName, java.lang.String)</inbound>
                <inbound type="feature" confirmed="yes">org.apache.abdera.util.AbstractStreamWriter.writeAttribute(javax.xml.namespace.QName, java.util.Date)</inbound>
                <inbound type="feature" confirmed="yes">org.apache.abdera.util.AbstractStreamWriter.writeAttribute(javax.xml.namespace.QName, long)</inbound>
                <inbound type="feature" confirmed="yes">org.apache.abdera.util.filter.SafeContentWhiteListParseFilter.acceptable(javax.xml.namespace.QName)</inbound>
                <inbound type="feature" confirmed="yes">org.apache.abdera.util.filter.SafeContentWhiteListParseFilter.acceptable(javax.xml.namespace.QName, javax.xml.namespace.QName)</inbound>
            </feature>
            <feature confirmed="no">
                <name>javax.xml.namespace.QName.getNamespaceURI()</name>
                <inbound type="feature" confirmed="yes">org.apache.abdera.factory.ExtensionFactoryMap.getMimeType(org.apache.abdera.model.Base)</inbound>
                <inbound type="feature" confirmed="yes">org.apache.abdera.util.AbstractStreamWriter.startElement(javax.xml.namespace.QName)</inbound>
                <inbound type="feature" confirmed="yes">org.apache.abdera.util.AbstractStreamWriter.writeAttribute(javax.xml.namespace.QName, double)</inbound>
                <inbound type="feature" confirmed="yes">org.apache.abdera.util.AbstractStreamWriter.writeAttribute(javax.xml.namespace.QName, int)</inbound>
                <inbound type="feature" confirmed="yes">org.apache.abdera.util.AbstractStreamWriter.writeAttribute(javax.xml.namespace.QName, java.lang.String)</inbound>
                <inbound type="feature" confirmed="yes">org.apache.abdera.util.AbstractStreamWriter.writeAttribute(javax.xml.namespace.QName, java.util.Date)</inbound>
                <inbound type="feature" confirmed="yes">org.apache.abdera.util.AbstractStreamWriter.writeAttribute(javax.xml.namespace.QName, long)</inbound>
                <inbound type="feature" confirmed="yes">org.apache.abdera.util.filter.SafeContentWhiteListParseFilter.acceptable(javax.xml.namespace.QName)</inbound>
                <inbound type="feature" confirmed="yes">org.apache.abdera.util.filter.SafeContentWhiteListParseFilter.acceptable(javax.xml.namespace.QName, javax.xml.namespace.QName)</inbound>
            </feature>
            <feature confirmed="no">
                <name>javax.xml.namespace.QName.getPrefix()</name>
                <inbound type="feature" confirmed="yes">org.apache.abdera.util.AbstractStreamWriter.startElement(javax.xml.namespace.QName)</inbound>
                <inbound type="feature" confirmed="yes">org.apache.abdera.util.AbstractStreamWriter.writeAttribute(javax.xml.namespace.QName, double)</inbound>
                <inbound type="feature" confirmed="yes">org.apache.abdera.util.AbstractStreamWriter.writeAttribute(javax.xml.namespace.QName, int)</inbound>
                <inbound type="feature" confirmed="yes">org.apache.abdera.util.AbstractStreamWriter.writeAttribute(javax.xml.namespace.QName, java.lang.String)</inbound>
                <inbound type="feature" confirmed="yes">org.apache.abdera.util.AbstractStreamWriter.writeAttribute(javax.xml.namespace.QName, java.util.Date)</inbound>
                <inbound type="feature" confirmed="yes">org.apache.abdera.util.AbstractStreamWriter.writeAttribute(javax.xml.namespace.QName, long)</inbound>
            </feature>
        </class>
    </package>
    <package confirmed="no">
        <name>javax.xml.stream</name>
        <class confirmed="no">
            <name>javax.xml.stream.XMLStreamReader</name>
            <inbound type="feature" confirmed="yes">org.apache.abdera.parser.Parser.parse(javax.xml.stream.XMLStreamReader)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.parser.Parser.parse(javax.xml.stream.XMLStreamReader, java.lang.String, org.apache.abdera.parser.ParserOptions)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.util.AbstractParser.parse(javax.xml.stream.XMLStreamReader)</inbound>
        </class>
    </package>
    <package confirmed="no">
        <name>javax.xml.transform</name>
        <class confirmed="no">
            <name>javax.xml.transform.Result</name>
            <inbound type="class" confirmed="yes">org.apache.abdera.util.AbderaResult</inbound>
        </class>
        <class confirmed="no">
            <name>javax.xml.transform.Source</name>
            <inbound type="class" confirmed="yes">org.apache.abdera.util.AbderaSource</inbound>
        </class>
    </package>
    <package confirmed="no">
        <name>javax.xml.transform.stream</name>
        <class confirmed="no">
            <name>javax.xml.transform.stream.StreamResult</name>
            <inbound type="class" confirmed="yes">org.apache.abdera.util.AbderaResult</inbound>
            <feature confirmed="no">
                <name>javax.xml.transform.stream.StreamResult.StreamResult()</name>
                <inbound type="feature" confirmed="yes">org.apache.abdera.util.AbderaResult.AbderaResult(org.apache.abdera.Abdera)</inbound>
            </feature>
        </class>
        <class confirmed="no">
            <name>javax.xml.transform.stream.StreamSource</name>
            <inbound type="class" confirmed="yes">org.apache.abdera.util.AbderaSource</inbound>
            <feature confirmed="no">
                <name>javax.xml.transform.stream.StreamSource.StreamSource()</name>
                <inbound type="feature" confirmed="yes">org.apache.abdera.util.AbderaSource.AbderaSource(org.apache.abdera.model.Base)</inbound>
            </feature>
        </class>
    </package>
    <package confirmed="yes">
        <name>org.apache.abdera</name>
        <class confirmed="yes">
            <name>org.apache.abdera.Abdera</name>
            <outbound type="class" confirmed="no">java.lang.Object</outbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.factory.Factory.getAbdera()</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.factory.StreamBuilder.StreamBuilder()</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.factory.StreamBuilder.StreamBuilder(org.apache.abdera.Abdera)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.factory.StreamBuilder.abdera</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.protocol.error.Error.create(org.apache.abdera.Abdera, int, java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.protocol.error.Error.create(org.apache.abdera.Abdera, int, java.lang.String, java.lang.Throwable)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.protocol.error.ProtocolException.ProtocolException(org.apache.abdera.Abdera, int, java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.util.AbderaConfiguration.newFactoryInstance(org.apache.abdera.Abdera)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.util.AbderaConfiguration.newParserFactoryInstance(org.apache.abdera.Abdera)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.util.AbderaConfiguration.newParserInstance(org.apache.abdera.Abdera)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.util.AbderaConfiguration.newStreamWriterInstance(org.apache.abdera.Abdera)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.util.AbderaConfiguration.newWriterFactoryInstance(org.apache.abdera.Abdera)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.util.AbderaConfiguration.newWriterInstance(org.apache.abdera.Abdera)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.util.AbderaConfiguration.newXPathInstance(org.apache.abdera.Abdera)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.util.AbderaResult.AbderaResult()</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.util.AbderaResult.AbderaResult(org.apache.abdera.Abdera)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.util.AbderaResult.abdera</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.util.AbderaResult.getDocument()</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.util.AbstractNamedParser.AbstractNamedParser(org.apache.abdera.Abdera, java.lang.String, java.lang.String[])</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.util.AbstractParser.AbstractParser()</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.util.AbstractParser.AbstractParser(org.apache.abdera.Abdera)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.util.AbstractParser.abdera</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.util.AbstractParser.getAbdera()</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.util.AbstractParser.getFactory()</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.util.AbstractParser.setAbdera(org.apache.abdera.Abdera)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.util.AbstractStreamWriter.AbstractStreamWriter(org.apache.abdera.Abdera, java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.util.AbstractStreamWriter.abdera</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.util.Configuration.newFactoryInstance(org.apache.abdera.Abdera)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.util.Configuration.newParserFactoryInstance(org.apache.abdera.Abdera)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.util.Configuration.newParserInstance(org.apache.abdera.Abdera)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.util.Configuration.newStreamWriterInstance(org.apache.abdera.Abdera)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.util.Configuration.newWriterFactoryInstance(org.apache.abdera.Abdera)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.util.Configuration.newWriterInstance(org.apache.abdera.Abdera)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.util.Configuration.newXPathInstance(org.apache.abdera.Abdera)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.util.ServiceUtil.newFactoryInstance(org.apache.abdera.Abdera)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.util.ServiceUtil.newInstance(java.lang.String, java.lang.String, org.apache.abdera.Abdera)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.util.ServiceUtil.newParserFactoryInstance(org.apache.abdera.Abdera)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.util.ServiceUtil.newParserInstance(org.apache.abdera.Abdera)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.util.ServiceUtil.newStreamWriterInstance(org.apache.abdera.Abdera)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.util.ServiceUtil.newWriterFactoryInstance(org.apache.abdera.Abdera)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.util.ServiceUtil.newWriterInstance(org.apache.abdera.Abdera)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.util.ServiceUtil.newXPathInstance(org.apache.abdera.Abdera)</inbound>
            <feature confirmed="yes">
                <name>org.apache.abdera.Abdera.Abdera()</name>
                <outbound type="feature" confirmed="yes">org.apache.abdera.Abdera.Abdera(org.apache.abdera.util.Configuration)</outbound>
                <outbound type="feature" confirmed="yes">org.apache.abdera.util.AbderaConfiguration.getDefault()</outbound>
                <outbound type="class" confirmed="yes">org.apache.abdera.util.Configuration</outbound>
                <inbound type="feature" confirmed="yes">org.apache.abdera.Abdera.getInstance()</inbound>
                <inbound type="feature" confirmed="yes">org.apache.abdera.Abdera.getNewFactory()</inbound>
                <inbound type="feature" confirmed="yes">org.apache.abdera.Abdera.getNewParser()</inbound>
                <inbound type="feature" confirmed="yes">org.apache.abdera.Abdera.getNewParserFactory()</inbound>
                <inbound type="feature" confirmed="yes">org.apache.abdera.Abdera.getNewStreamWriter()</inbound>
                <inbound type="feature" confirmed="yes">org.apache.abdera.Abdera.getNewWriter()</inbound>
                <inbound type="feature" confirmed="yes">org.apache.abdera.Abdera.getNewWriterFactory()</inbound>
                <inbound type="feature" confirmed="yes">org.apache.abdera.Abdera.getNewXPath()</inbound>
                <inbound type="feature" confirmed="yes">org.apache.abdera.util.AbderaResult.AbderaResult()</inbound>
                <inbound type="feature" confirmed="yes">org.apache.abdera.util.AbstractParser.AbstractParser()</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.Abdera.Abdera(org.apache.abdera.util.Configuration)</name>
                <outbound type="feature" confirmed="no">java.lang.Object.Object()</outbound>
                <outbound type="feature" confirmed="yes">org.apache.abdera.Abdera.config</outbound>
                <outbound type="feature" confirmed="no">org.apache.abdera.i18n.iri.IRI.preinit()</outbound>
                <outbound type="class" confirmed="yes">org.apache.abdera.util.Configuration</outbound>
                <inbound type="feature" confirmed="yes">org.apache.abdera.Abdera.Abdera()</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.Abdera.config</name>
                <outbound type="class" confirmed="yes">org.apache.abdera.util.Configuration</outbound>
                <inbound type="feature" confirmed="yes">org.apache.abdera.Abdera.Abdera(org.apache.abdera.util.Configuration)</inbound>
                <inbound type="feature" confirmed="yes">org.apache.abdera.Abdera.getConfiguration()</inbound>
                <inbound type="feature" confirmed="yes">org.apache.abdera.Abdera.newFactory()</inbound>
                <inbound type="feature" confirmed="yes">org.apache.abdera.Abdera.newParser()</inbound>
                <inbound type="feature" confirmed="yes">org.apache.abdera.Abdera.newParserFactory()</inbound>
                <inbound type="feature" confirmed="yes">org.apache.abdera.Abdera.newStreamWriter()</inbound>
                <inbound type="feature" confirmed="yes">org.apache.abdera.Abdera.newWriter()</inbound>
                <inbound type="feature" confirmed="yes">org.apache.abdera.Abdera.newWriterFactory()</inbound>
                <inbound type="feature" confirmed="yes">org.apache.abdera.Abdera.newXPath()</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.Abdera.factory</name>
                <outbound type="class" confirmed="yes">org.apache.abdera.factory.Factory</outbound>
                <inbound type="feature" confirmed="yes">org.apache.abdera.Abdera.getFactory()</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.Abdera.getConfiguration()</name>
                <outbound type="feature" confirmed="yes">org.apache.abdera.Abdera.config</outbound>
                <outbound type="class" confirmed="yes">org.apache.abdera.util.Configuration</outbound>
                <inbound type="feature" confirmed="yes">org.apache.abdera.util.AbderaConfiguration.newFactoryInstance(org.apache.abdera.Abdera)</inbound>
                <inbound type="feature" confirmed="yes">org.apache.abdera.util.AbderaConfiguration.newParserFactoryInstance(org.apache.abdera.Abdera)</inbound>
                <inbound type="feature" confirmed="yes">org.apache.abdera.util.AbderaConfiguration.newParserInstance(org.apache.abdera.Abdera)</inbound>
                <inbound type="feature" confirmed="yes">org.apache.abdera.util.AbderaConfiguration.newStreamWriterInstance(org.apache.abdera.Abdera)</inbound>
                <inbound type="feature" confirmed="yes">org.apache.abdera.util.AbderaConfiguration.newWriterFactoryInstance(org.apache.abdera.Abdera)</inbound>
                <inbound type="feature" confirmed="yes">org.apache.abdera.util.AbderaConfiguration.newWriterInstance(org.apache.abdera.Abdera)</inbound>
                <inbound type="feature" confirmed="yes">org.apache.abdera.util.AbderaConfiguration.newXPathInstance(org.apache.abdera.Abdera)</inbound>
                <inbound type="feature" confirmed="yes">org.apache.abdera.util.ServiceUtil.newFactoryInstance(org.apache.abdera.Abdera)</inbound>
                <inbound type="feature" confirmed="yes">org.apache.abdera.util.ServiceUtil.newParserFactoryInstance(org.apache.abdera.Abdera)</inbound>
                <inbound type="feature" confirmed="yes">org.apache.abdera.util.ServiceUtil.newParserInstance(org.apache.abdera.Abdera)</inbound>
                <inbound type="feature" confirmed="yes">org.apache.abdera.util.ServiceUtil.newStreamWriterInstance(org.apache.abdera.Abdera)</inbound>
                <inbound type="feature" confirmed="yes">org.apache.abdera.util.ServiceUtil.newWriterFactoryInstance(org.apache.abdera.Abdera)</inbound>
                <inbound type="feature" confirmed="yes">org.apache.abdera.util.ServiceUtil.newWriterInstance(org.apache.abdera.Abdera)</inbound>
                <inbound type="feature" confirmed="yes">org.apache.abdera.util.ServiceUtil.newXPathInstance(org.apache.abdera.Abdera)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.Abdera.getFactory()</name>
                <outbound type="feature" confirmed="yes">org.apache.abdera.Abdera.factory</outbound>
                <outbound type="feature" confirmed="yes">org.apache.abdera.Abdera.newFactory()</outbound>
                <outbound type="class" confirmed="yes">org.apache.abdera.factory.Factory</outbound>
                <inbound type="feature" confirmed="yes">org.apache.abdera.Abdera.newCategories()</inbound>
                <inbound type="feature" confirmed="yes">org.apache.abdera.Abdera.newEntry()</inbound>
                <inbound type="feature" confirmed="yes">org.apache.abdera.Abdera.newFeed()</inbound>
                <inbound type="feature" confirmed="yes">org.apache.abdera.Abdera.newService()</inbound>
                <inbound type="feature" confirmed="yes">org.apache.abdera.protocol.error.Error.create(org.apache.abdera.Abdera, int, java.lang.String, java.lang.Throwable)</inbound>
                <inbound type="feature" confirmed="yes">org.apache.abdera.util.AbstractParser.getFactory()</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.Abdera.getInstance()</name>
                <outbound type="feature" confirmed="yes">org.apache.abdera.Abdera.Abdera()</outbound>
                <outbound type="feature" confirmed="yes">org.apache.abdera.Abdera.instance</outbound>
                <inbound type="feature" confirmed="yes">org.apache.abdera.factory.StreamBuilder.StreamBuilder()</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.Abdera.getNewFactory()</name>
                <outbound type="feature" confirmed="yes">org.apache.abdera.Abdera.Abdera()</outbound>
                <outbound type="feature" confirmed="yes">org.apache.abdera.Abdera.newFactory()</outbound>
                <outbound type="class" confirmed="yes">org.apache.abdera.factory.Factory</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.Abdera.getNewParser()</name>
                <outbound type="feature" confirmed="yes">org.apache.abdera.Abdera.Abdera()</outbound>
                <outbound type="feature" confirmed="yes">org.apache.abdera.Abdera.newParser()</outbound>
                <outbound type="class" confirmed="yes">org.apache.abdera.parser.Parser</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.Abdera.getNewParserFactory()</name>
                <outbound type="feature" confirmed="yes">org.apache.abdera.Abdera.Abdera()</outbound>
                <outbound type="feature" confirmed="yes">org.apache.abdera.Abdera.newParserFactory()</outbound>
                <outbound type="class" confirmed="yes">org.apache.abdera.parser.ParserFactory</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.Abdera.getNewStreamWriter()</name>
                <outbound type="feature" confirmed="yes">org.apache.abdera.Abdera.Abdera()</outbound>
                <outbound type="feature" confirmed="yes">org.apache.abdera.Abdera.newStreamWriter()</outbound>
                <outbound type="class" confirmed="yes">org.apache.abdera.writer.StreamWriter</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.Abdera.getNewWriter()</name>
                <outbound type="feature" confirmed="yes">org.apache.abdera.Abdera.Abdera()</outbound>
                <outbound type="feature" confirmed="yes">org.apache.abdera.Abdera.newWriter()</outbound>
                <outbound type="class" confirmed="yes">org.apache.abdera.writer.Writer</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.Abdera.getNewWriterFactory()</name>
                <outbound type="feature" confirmed="yes">org.apache.abdera.Abdera.Abdera()</outbound>
                <outbound type="feature" confirmed="yes">org.apache.abdera.Abdera.newWriterFactory()</outbound>
                <outbound type="class" confirmed="yes">org.apache.abdera.writer.WriterFactory</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.Abdera.getNewXPath()</name>
                <outbound type="feature" confirmed="yes">org.apache.abdera.Abdera.Abdera()</outbound>
                <outbound type="feature" confirmed="yes">org.apache.abdera.Abdera.newXPath()</outbound>
                <outbound type="class" confirmed="yes">org.apache.abdera.xpath.XPath</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.Abdera.getParser()</name>
                <outbound type="feature" confirmed="yes">org.apache.abdera.Abdera.newParser()</outbound>
                <outbound type="feature" confirmed="yes">org.apache.abdera.Abdera.parser</outbound>
                <outbound type="class" confirmed="yes">org.apache.abdera.parser.Parser</outbound>
                <inbound type="feature" confirmed="yes">org.apache.abdera.util.AbderaResult.getDocument()</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.Abdera.getParserFactory()</name>
                <outbound type="feature" confirmed="yes">org.apache.abdera.Abdera.newParserFactory()</outbound>
                <outbound type="feature" confirmed="yes">org.apache.abdera.Abdera.parserFactory</outbound>
                <outbound type="class" confirmed="yes">org.apache.abdera.parser.ParserFactory</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.Abdera.getWriter()</name>
                <outbound type="feature" confirmed="yes">org.apache.abdera.Abdera.newWriter()</outbound>
                <outbound type="feature" confirmed="yes">org.apache.abdera.Abdera.writer</outbound>
                <outbound type="class" confirmed="yes">org.apache.abdera.writer.Writer</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.Abdera.getWriterFactory()</name>
                <outbound type="feature" confirmed="yes">org.apache.abdera.Abdera.newWriterFactory()</outbound>
                <outbound type="feature" confirmed="yes">org.apache.abdera.Abdera.writerFactory</outbound>
                <outbound type="class" confirmed="yes">org.apache.abdera.writer.WriterFactory</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.Abdera.getXPath()</name>
                <outbound type="feature" confirmed="yes">org.apache.abdera.Abdera.newXPath()</outbound>
                <outbound type="feature" confirmed="yes">org.apache.abdera.Abdera.xpath</outbound>
                <outbound type="class" confirmed="yes">org.apache.abdera.xpath.XPath</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.Abdera.instance</name>
                <inbound type="feature" confirmed="yes">org.apache.abdera.Abdera.getInstance()</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.Abdera.newCategories()</name>
                <outbound type="feature" confirmed="yes">org.apache.abdera.Abdera.getFactory()</outbound>
                <outbound type="class" confirmed="yes">org.apache.abdera.factory.Factory</outbound>
                <outbound type="feature" confirmed="yes">org.apache.abdera.factory.Factory.newCategories()</outbound>
                <outbound type="class" confirmed="yes">org.apache.abdera.model.Categories</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.Abdera.newEntry()</name>
                <outbound type="feature" confirmed="yes">org.apache.abdera.Abdera.getFactory()</outbound>
                <outbound type="class" confirmed="yes">org.apache.abdera.factory.Factory</outbound>
                <outbound type="feature" confirmed="yes">org.apache.abdera.factory.Factory.newEntry()</outbound>
                <outbound type="class" confirmed="yes">org.apache.abdera.model.Entry</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.Abdera.newFactory()</name>
                <outbound type="feature" confirmed="yes">org.apache.abdera.Abdera.config</outbound>
                <outbound type="class" confirmed="yes">org.apache.abdera.factory.Factory</outbound>
                <outbound type="class" confirmed="yes">org.apache.abdera.util.Configuration</outbound>
                <outbound type="feature" confirmed="yes">org.apache.abdera.util.Configuration.newFactoryInstance(org.apache.abdera.Abdera)</outbound>
                <inbound type="feature" confirmed="yes">org.apache.abdera.Abdera.getFactory()</inbound>
                <inbound type="feature" confirmed="yes">org.apache.abdera.Abdera.getNewFactory()</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.Abdera.newFeed()</name>
                <outbound type="feature" confirmed="yes">org.apache.abdera.Abdera.getFactory()</outbound>
                <outbound type="class" confirmed="yes">org.apache.abdera.factory.Factory</outbound>
                <outbound type="feature" confirmed="yes">org.apache.abdera.factory.Factory.newFeed()</outbound>
                <outbound type="class" confirmed="yes">org.apache.abdera.model.Feed</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.Abdera.newParser()</name>
                <outbound type="feature" confirmed="yes">org.apache.abdera.Abdera.config</outbound>
                <outbound type="class" confirmed="yes">org.apache.abdera.parser.Parser</outbound>
                <outbound type="class" confirmed="yes">org.apache.abdera.util.Configuration</outbound>
                <outbound type="feature" confirmed="yes">org.apache.abdera.util.Configuration.newParserInstance(org.apache.abdera.Abdera)</outbound>
                <inbound type="feature" confirmed="yes">org.apache.abdera.Abdera.getNewParser()</inbound>
                <inbound type="feature" confirmed="yes">org.apache.abdera.Abdera.getParser()</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.Abdera.newParserFactory()</name>
                <outbound type="feature" confirmed="yes">org.apache.abdera.Abdera.config</outbound>
                <outbound type="class" confirmed="yes">org.apache.abdera.parser.ParserFactory</outbound>
                <outbound type="class" confirmed="yes">org.apache.abdera.util.Configuration</outbound>
                <outbound type="feature" confirmed="yes">org.apache.abdera.util.Configuration.newParserFactoryInstance(org.apache.abdera.Abdera)</outbound>
                <inbound type="feature" confirmed="yes">org.apache.abdera.Abdera.getNewParserFactory()</inbound>
                <inbound type="feature" confirmed="yes">org.apache.abdera.Abdera.getParserFactory()</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.Abdera.newService()</name>
                <outbound type="feature" confirmed="yes">org.apache.abdera.Abdera.getFactory()</outbound>
                <outbound type="class" confirmed="yes">org.apache.abdera.factory.Factory</outbound>
                <outbound type="feature" confirmed="yes">org.apache.abdera.factory.Factory.newService()</outbound>
                <outbound type="class" confirmed="yes">org.apache.abdera.model.Service</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.Abdera.newStreamWriter()</name>
                <outbound type="feature" confirmed="yes">org.apache.abdera.Abdera.config</outbound>
                <outbound type="class" confirmed="yes">org.apache.abdera.util.Configuration</outbound>
                <outbound type="feature" confirmed="yes">org.apache.abdera.util.Configuration.newStreamWriterInstance(org.apache.abdera.Abdera)</outbound>
                <outbound type="class" confirmed="yes">org.apache.abdera.writer.StreamWriter</outbound>
                <inbound type="feature" confirmed="yes">org.apache.abdera.Abdera.getNewStreamWriter()</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.Abdera.newWriter()</name>
                <outbound type="feature" confirmed="yes">org.apache.abdera.Abdera.config</outbound>
                <outbound type="class" confirmed="yes">org.apache.abdera.util.Configuration</outbound>
                <outbound type="feature" confirmed="yes">org.apache.abdera.util.Configuration.newWriterInstance(org.apache.abdera.Abdera)</outbound>
                <outbound type="class" confirmed="yes">org.apache.abdera.writer.Writer</outbound>
                <inbound type="feature" confirmed="yes">org.apache.abdera.Abdera.getNewWriter()</inbound>
                <inbound type="feature" confirmed="yes">org.apache.abdera.Abdera.getWriter()</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.Abdera.newWriterFactory()</name>
                <outbound type="feature" confirmed="yes">org.apache.abdera.Abdera.config</outbound>
                <outbound type="class" confirmed="yes">org.apache.abdera.util.Configuration</outbound>
                <outbound type="feature" confirmed="yes">org.apache.abdera.util.Configuration.newWriterFactoryInstance(org.apache.abdera.Abdera)</outbound>
                <outbound type="class" confirmed="yes">org.apache.abdera.writer.WriterFactory</outbound>
                <inbound type="feature" confirmed="yes">org.apache.abdera.Abdera.getNewWriterFactory()</inbound>
                <inbound type="feature" confirmed="yes">org.apache.abdera.Abdera.getWriterFactory()</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.Abdera.newXPath()</name>
                <outbound type="feature" confirmed="yes">org.apache.abdera.Abdera.config</outbound>
                <outbound type="class" confirmed="yes">org.apache.abdera.util.Configuration</outbound>
                <outbound type="feature" confirmed="yes">org.apache.abdera.util.Configuration.newXPathInstance(org.apache.abdera.Abdera)</outbound>
                <outbound type="class" confirmed="yes">org.apache.abdera.xpath.XPath</outbound>
                <inbound type="feature" confirmed="yes">org.apache.abdera.Abdera.getNewXPath()</inbound>
                <inbound type="feature" confirmed="yes">org.apache.abdera.Abdera.getXPath()</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.Abdera.parser</name>
                <outbound type="class" confirmed="yes">org.apache.abdera.parser.Parser</outbound>
                <inbound type="feature" confirmed="yes">org.apache.abdera.Abdera.getParser()</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.Abdera.parserFactory</name>
                <outbound type="class" confirmed="yes">org.apache.abdera.parser.ParserFactory</outbound>
                <inbound type="feature" confirmed="yes">org.apache.abdera.Abdera.getParserFactory()</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.Abdera.writer</name>
                <outbound type="class" confirmed="yes">org.apache.abdera.writer.Writer</outbound>
                <inbound type="feature" confirmed="yes">org.apache.abdera.Abdera.getWriter()</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.Abdera.writerFactory</name>
                <outbound type="class" confirmed="yes">org.apache.abdera.writer.WriterFactory</outbound>
                <inbound type="feature" confirmed="yes">org.apache.abdera.Abdera.getWriterFactory()</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.Abdera.xpath</name>
                <outbound type="class" confirmed="yes">org.apache.abdera.xpath.XPath</outbound>
                <inbound type="feature" confirmed="yes">org.apache.abdera.Abdera.getXPath()</inbound>
            </feature>
        </class>
    </package>
    <package confirmed="yes">
        <name>org.apache.abdera.factory</name>
        <class confirmed="yes">
            <name>org.apache.abdera.factory.ExtensionFactory</name>
            <outbound type="class" confirmed="no">java.lang.Object</outbound>
            <inbound type="class" confirmed="yes">org.apache.abdera.factory.ExtensionFactoryMap</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.factory.ExtensionFactoryMap.addFactory(org.apache.abdera.factory.ExtensionFactory)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.factory.ExtensionFactoryMap.getElementWrapper(org.apache.abdera.model.Element)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.factory.ExtensionFactoryMap.getMimeType(org.apache.abdera.model.Base)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.factory.ExtensionFactoryMap.getNamespaces()</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.factory.ExtensionFactoryMap.handlesNamespace(java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.factory.ExtensionFactoryMap.listExtensionFactories()</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.factory.Factory.registerExtension(org.apache.abdera.factory.ExtensionFactory)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.util.AbderaConfiguration.addExtensionFactory(org.apache.abdera.factory.ExtensionFactory)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.util.AbderaConfiguration.loadExtensionFactories()</inbound>
            <inbound type="class" confirmed="yes">org.apache.abdera.util.AbstractExtensionFactory</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.util.Configuration.addExtensionFactory(org.apache.abdera.factory.ExtensionFactory)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.util.ServiceUtil.loadExtensionFactories()</inbound>
            <feature confirmed="yes">
                <name>org.apache.abdera.factory.ExtensionFactory.getElementWrapper(org.apache.abdera.model.Element)</name>
                <outbound type="class" confirmed="yes">org.apache.abdera.model.Element</outbound>
                <inbound type="feature" confirmed="yes">org.apache.abdera.factory.ExtensionFactoryMap.getElementWrapper(org.apache.abdera.model.Element)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.factory.ExtensionFactory.getMimeType(org.apache.abdera.model.Base)</name>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="class" confirmed="yes">org.apache.abdera.model.Base</outbound>
                <inbound type="feature" confirmed="yes">org.apache.abdera.factory.ExtensionFactoryMap.getMimeType(org.apache.abdera.model.Base)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.factory.ExtensionFactory.getNamespaces()</name>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <inbound type="feature" confirmed="yes">org.apache.abdera.factory.ExtensionFactoryMap.getNamespaces()</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.factory.ExtensionFactory.handlesNamespace(java.lang.String)</name>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <inbound type="feature" confirmed="yes">org.apache.abdera.factory.ExtensionFactoryMap.getMimeType(org.apache.abdera.model.Base)</inbound>
                <inbound type="feature" confirmed="yes">org.apache.abdera.factory.ExtensionFactoryMap.handlesNamespace(java.lang.String)</inbound>
            </feature>
        </class>
        <class confirmed="yes">
            <name>org.apache.abdera.factory.ExtensionFactoryMap</name>
            <outbound type="class" confirmed="no">java.lang.Object</outbound>
            <outbound type="class" confirmed="yes">org.apache.abdera.factory.ExtensionFactory</outbound>
            <feature confirmed="yes">
                <name>org.apache.abdera.factory.ExtensionFactoryMap.ExtensionFactoryMap(java.util.List)</name>
                <outbound type="feature" confirmed="no">java.lang.Object.Object()</outbound>
                <outbound type="feature" confirmed="no">java.util.Collections.synchronizedList(java.util.List)</outbound>
                <outbound type="class" confirmed="no">java.util.List</outbound>
                <outbound type="feature" confirmed="yes">org.apache.abdera.factory.ExtensionFactoryMap.factories</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.factory.ExtensionFactoryMap.addFactory(org.apache.abdera.factory.ExtensionFactory)</name>
                <outbound type="class" confirmed="no">java.lang.Object</outbound>
                <outbound type="class" confirmed="no">java.util.List</outbound>
                <outbound type="feature" confirmed="no">java.util.List.add(java.lang.Object)</outbound>
                <outbound type="feature" confirmed="no">java.util.List.contains(java.lang.Object)</outbound>
                <outbound type="class" confirmed="yes">org.apache.abdera.factory.ExtensionFactory</outbound>
                <outbound type="feature" confirmed="yes">org.apache.abdera.factory.ExtensionFactoryMap.factories</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.factory.ExtensionFactoryMap.factories</name>
                <outbound type="class" confirmed="no">java.util.List</outbound>
                <inbound type="feature" confirmed="yes">org.apache.abdera.factory.ExtensionFactoryMap.ExtensionFactoryMap(java.util.List)</inbound>
                <inbound type="feature" confirmed="yes">org.apache.abdera.factory.ExtensionFactoryMap.addFactory(org.apache.abdera.factory.ExtensionFactory)</inbound>
                <inbound type="feature" confirmed="yes">org.apache.abdera.factory.ExtensionFactoryMap.getElementWrapper(org.apache.abdera.model.Element)</inbound>
                <inbound type="feature" confirmed="yes">org.apache.abdera.factory.ExtensionFactoryMap.getMimeType(org.apache.abdera.model.Base)</inbound>
                <inbound type="feature" confirmed="yes">org.apache.abdera.factory.ExtensionFactoryMap.getNamespaces()</inbound>
                <inbound type="feature" confirmed="yes">org.apache.abdera.factory.ExtensionFactoryMap.handlesNamespace(java.lang.String)</inbound>
                <inbound type="feature" confirmed="yes">org.apache.abdera.factory.ExtensionFactoryMap.listExtensionFactories()</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.factory.ExtensionFactoryMap.getElementWrapper(org.apache.abdera.model.Element)</name>
                <outbound type="class" confirmed="no">java.lang.Object</outbound>
                <outbound type="class" confirmed="no">java.util.Iterator</outbound>
                <outbound type="feature" confirmed="no">java.util.Iterator.hasNext()</outbound>
                <outbound type="feature" confirmed="no">java.util.Iterator.next()</outbound>
                <outbound type="class" confirmed="no">java.util.List</outbound>
                <outbound type="feature" confirmed="no">java.util.List.iterator()</outbound>
                <outbound type="class" confirmed="yes">org.apache.abdera.factory.ExtensionFactory</outbound>
                <outbound type="feature" confirmed="yes">org.apache.abdera.factory.ExtensionFactory.getElementWrapper(org.apache.abdera.model.Element)</outbound>
                <outbound type="feature" confirmed="yes">org.apache.abdera.factory.ExtensionFactoryMap.factories</outbound>
                <outbound type="class" confirmed="yes">org.apache.abdera.model.Element</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.factory.ExtensionFactoryMap.getMimeType(org.apache.abdera.model.Base)</name>
                <outbound type="class" confirmed="no">java.lang.Object</outbound>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="class" confirmed="no">java.util.Iterator</outbound>
                <outbound type="feature" confirmed="no">java.util.Iterator.hasNext()</outbound>
                <outbound type="feature" confirmed="no">java.util.Iterator.next()</outbound>
                <outbound type="class" confirmed="no">java.util.List</outbound>
                <outbound type="feature" confirmed="no">java.util.List.iterator()</outbound>
                <outbound type="class" confirmed="no">javax.xml.namespace.QName</outbound>
                <outbound type="feature" confirmed="no">javax.xml.namespace.QName.getNamespaceURI()</outbound>
                <outbound type="class" confirmed="yes">org.apache.abdera.factory.ExtensionFactory</outbound>
                <outbound type="feature" confirmed="yes">org.apache.abdera.factory.ExtensionFactory.getMimeType(org.apache.abdera.model.Base)</outbound>
                <outbound type="feature" confirmed="yes">org.apache.abdera.factory.ExtensionFactory.handlesNamespace(java.lang.String)</outbound>
                <outbound type="feature" confirmed="yes">org.apache.abdera.factory.ExtensionFactoryMap.factories</outbound>
                <outbound type="class" confirmed="yes">org.apache.abdera.model.Base</outbound>
                <outbound type="class" confirmed="yes">org.apache.abdera.model.Document</outbound>
                <outbound type="feature" confirmed="yes">org.apache.abdera.model.Document.getRoot()</outbound>
                <outbound type="class" confirmed="yes">org.apache.abdera.model.Element</outbound>
                <outbound type="feature" confirmed="yes">org.apache.abdera.model.Element.getQName()</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.factory.ExtensionFactoryMap.getNamespaces()</name>
                <outbound type="class" confirmed="no">java.lang.Object</outbound>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="class" confirmed="no">java.lang.String[]</outbound>
                <outbound type="feature" confirmed="no">java.util.ArrayList.ArrayList()</outbound>
                <outbound type="class" confirmed="no">java.util.Iterator</outbound>
                <outbound type="feature" confirmed="no">java.util.Iterator.hasNext()</outbound>
                <outbound type="feature" confirmed="no">java.util.Iterator.next()</outbound>
                <outbound type="class" confirmed="no">java.util.List</outbound>
                <outbound type="feature" confirmed="no">java.util.List.add(java.lang.Object)</outbound>
                <outbound type="feature" confirmed="no">java.util.List.contains(java.lang.Object)</outbound>
                <outbound type="feature" confirmed="no">java.util.List.iterator()</outbound>
                <outbound type="feature" confirmed="no">java.util.List.size()</outbound>
                <outbound type="feature" confirmed="no">java.util.List.toArray(java.lang.Object[])</outbound>
                <outbound type="class" confirmed="yes">org.apache.abdera.factory.ExtensionFactory</outbound>
                <outbound type="feature" confirmed="yes">org.apache.abdera.factory.ExtensionFactory.getNamespaces()</outbound>
                <outbound type="feature" confirmed="yes">org.apache.abdera.factory.ExtensionFactoryMap.factories</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.factory.ExtensionFactoryMap.handlesNamespace(java.lang.String)</name>
                <outbound type="class" confirmed="no">java.lang.Object</outbound>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="class" confirmed="no">java.util.Iterator</outbound>
                <outbound type="feature" confirmed="no">java.util.Iterator.hasNext()</outbound>
                <outbound type="feature" confirmed="no">java.util.Iterator.next()</outbound>
                <outbound type="class" confirmed="no">java.util.List</outbound>
                <outbound type="feature" confirmed="no">java.util.List.iterator()</outbound>
                <outbound type="class" confirmed="yes">org.apache.abdera.factory.ExtensionFactory</outbound>
                <outbound type="feature" confirmed="yes">org.apache.abdera.factory.ExtensionFactory.handlesNamespace(java.lang.String)</outbound>
                <outbound type="feature" confirmed="yes">org.apache.abdera.factory.ExtensionFactoryMap.factories</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.factory.ExtensionFactoryMap.listExtensionFactories()</name>
                <outbound type="class" confirmed="no">java.lang.Class</outbound>
                <outbound type="feature" confirmed="no">java.lang.Class.getName()</outbound>
                <outbound type="class" confirmed="no">java.lang.Object</outbound>
                <outbound type="feature" confirmed="no">java.lang.Object.getClass()</outbound>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="class" confirmed="no">java.lang.String[]</outbound>
                <outbound type="feature" confirmed="no">java.util.ArrayList.ArrayList()</outbound>
                <outbound type="class" confirmed="no">java.util.Iterator</outbound>
                <outbound type="feature" confirmed="no">java.util.Iterator.hasNext()</outbound>
                <outbound type="feature" confirmed="no">java.util.Iterator.next()</outbound>
                <outbound type="class" confirmed="no">java.util.List</outbound>
                <outbound type="feature" confirmed="no">java.util.List.add(java.lang.Object)</outbound>
                <outbound type="feature" confirmed="no">java.util.List.contains(java.lang.Object)</outbound>
                <outbound type="feature" confirmed="no">java.util.List.iterator()</outbound>
                <outbound type="feature" confirmed="no">java.util.List.size()</outbound>
                <outbound type="feature" confirmed="no">java.util.List.toArray(java.lang.Object[])</outbound>
                <outbound type="class" confirmed="yes">org.apache.abdera.factory.ExtensionFactory</outbound>
                <outbound type="feature" confirmed="yes">org.apache.abdera.factory.ExtensionFactoryMap.factories</outbound>
            </feature>
        </class>
        <class confirmed="yes">
            <name>org.apache.abdera.factory.Factory</name>
            <outbound type="class" confirmed="no">java.lang.Object</outbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.Abdera.factory</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.Abdera.getFactory()</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.Abdera.getNewFactory()</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.Abdera.newCategories()</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.Abdera.newEntry()</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.Abdera.newFactory()</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.Abdera.newFeed()</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.Abdera.newService()</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.model.Attribute.getFactory()</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.model.Base.getFactory()</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.model.Comment.getFactory()</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.model.DateTimeWrapper.DateTimeWrapper(org.apache.abdera.factory.Factory, javax.xml.namespace.QName)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.model.ElementWrapper.ElementWrapper(org.apache.abdera.factory.Factory, javax.xml.namespace.QName)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.model.ElementWrapper.getFactory()</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.model.ExtensibleElementWrapper.ExtensibleElementWrapper(org.apache.abdera.factory.Factory, javax.xml.namespace.QName)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.model.PersonWrapper.PersonWrapper(org.apache.abdera.factory.Factory, javax.xml.namespace.QName)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.model.PersonWrapper.setEmail(java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.model.PersonWrapper.setName(java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.model.PersonWrapper.setUri(java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.model.ProcessingInstruction.getFactory()</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.parser.ParserOptions.getFactory()</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.parser.ParserOptions.setFactory(org.apache.abdera.factory.Factory)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.protocol.error.Error.Error(org.apache.abdera.factory.Factory, javax.xml.namespace.QName)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.protocol.error.Error.create(org.apache.abdera.Abdera, int, java.lang.String, java.lang.Throwable)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.util.AbderaConfiguration.newFactoryInstance(org.apache.abdera.Abdera)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.util.AbstractParser.getFactory()</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.util.AbstractParserOptions.AbstractParserOptions()</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.util.AbstractParserOptions.checkFactory(org.apache.abdera.factory.Factory)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.util.AbstractParserOptions.factory</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.util.AbstractParserOptions.getFactory()</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.util.AbstractParserOptions.setFactory(org.apache.abdera.factory.Factory)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.util.Configuration.newFactoryInstance(org.apache.abdera.Abdera)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.util.MimeTypeHelper.getMimeType(org.apache.abdera.model.Base)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.util.ServiceUtil.newFactoryInstance(org.apache.abdera.Abdera)</inbound>
            <feature confirmed="yes">
                <name>org.apache.abdera.factory.Factory.getAbdera()</name>
                <outbound type="class" confirmed="yes">org.apache.abdera.Abdera</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.factory.Factory.getMimeType(org.apache.abdera.model.Base)</name>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="class" confirmed="yes">org.apache.abdera.model.Base</outbound>
                <inbound type="feature" confirmed="yes">org.apache.abdera.util.MimeTypeHelper.getMimeType(org.apache.abdera.model.Base)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.factory.Factory.listExtensionFactories()</name>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.factory.Factory.newAuthor()</name>
                <outbound type="class" confirmed="yes">org.apache.abdera.model.Person</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.factory.Factory.newAuthor(org.apache.abdera.model.Element)</name>
                <outbound type="class" confirmed="yes">org.apache.abdera.model.Element</outbound>
                <outbound type="class" confirmed="yes">org.apache.abdera.model.Person</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.factory.Factory.newCategories()</name>
                <outbound type="class" confirmed="yes">org.apache.abdera.model.Categories</outbound>
                <inbound type="feature" confirmed="yes">org.apache.abdera.Abdera.newCategories()</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.factory.Factory.newCategories(org.apache.abdera.model.Base)</name>
                <outbound type="class" confirmed="yes">org.apache.abdera.model.Base</outbound>
                <outbound type="class" confirmed="yes">org.apache.abdera.model.Categories</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.factory.Factory.newCategory()</name>
                <outbound type="class" confirmed="yes">org.apache.abdera.model.Category</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.factory.Factory.newCategory(org.apache.abdera.model.Element)</name>
                <outbound type="class" confirmed="yes">org.apache.abdera.model.Category</outbound>
                <outbound type="class" confirmed="yes">org.apache.abdera.model.Element</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.factory.Factory.newCollection()</name>
                <outbound type="class" confirmed="yes">org.apache.abdera.model.Collection</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.factory.Factory.newCollection(org.apache.abdera.model.Element)</name>
                <outbound type="class" confirmed="yes">org.apache.abdera.model.Collection</outbound>
                <outbound type="class" confirmed="yes">org.apache.abdera.model.Element</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.factory.Factory.newContent()</name>
                <outbound type="class" confirmed="yes">org.apache.abdera.model.Content</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.factory.Factory.newContent(javax.activation.MimeType)</name>
                <outbound type="class" confirmed="no">javax.activation.MimeType</outbound>
                <outbound type="class" confirmed="yes">org.apache.abdera.model.Content</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.factory.Factory.newContent(javax.activation.MimeType, org.apache.abdera.model.Element)</name>
                <outbound type="class" confirmed="no">javax.activation.MimeType</outbound>
                <outbound type="class" confirmed="yes">org.apache.abdera.model.Content</outbound>
                <outbound type="class" confirmed="yes">org.apache.abdera.model.Element</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.factory.Factory.newContent(org.apache.abdera.model.Content$Type)</name>
                <outbound type="class" confirmed="yes">org.apache.abdera.model.Content</outbound>
                <outbound type="class" confirmed="yes">org.apache.abdera.model.Content$Type</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.factory.Factory.newContent(org.apache.abdera.model.Content$Type, org.apache.abdera.model.Element)</name>
                <outbound type="class" confirmed="yes">org.apache.abdera.model.Content</outbound>
                <outbound type="class" confirmed="yes">org.apache.abdera.model.Content$Type</outbound>
                <outbound type="class" confirmed="yes">org.apache.abdera.model.Element</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.factory.Factory.newContributor()</name>
                <outbound type="class" confirmed="yes">org.apache.abdera.model.Person</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.factory.Factory.newContributor(org.apache.abdera.model.Element)</name>
                <outbound type="class" confirmed="yes">org.apache.abdera.model.Element</outbound>
                <outbound type="class" confirmed="yes">org.apache.abdera.model.Person</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.factory.Factory.newControl()</name>
                <outbound type="class" confirmed="yes">org.apache.abdera.model.Control</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.factory.Factory.newControl(org.apache.abdera.model.Element)</name>
                <outbound type="class" confirmed="yes">org.apache.abdera.model.Control</outbound>
                <outbound type="class" confirmed="yes">org.apache.abdera.model.Element</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.factory.Factory.newDateTime(javax.xml.namespace.QName, org.apache.abdera.model.Element)</name>
                <outbound type="class" confirmed="no">javax.xml.namespace.QName</outbound>
                <outbound type="class" confirmed="yes">org.apache.abdera.model.DateTime</outbound>
                <outbound type="class" confirmed="yes">org.apache.abdera.model.Element</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.factory.Factory.newDefaultGenerator()</name>
                <outbound type="class" confirmed="yes">org.apache.abdera.model.Generator</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.factory.Factory.newDefaultGenerator(org.apache.abdera.model.Element)</name>
                <outbound type="class" confirmed="yes">org.apache.abdera.model.Element</outbound>
                <outbound type="class" confirmed="yes">org.apache.abdera.model.Generator</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.factory.Factory.newDiv()</name>
                <outbound type="class" confirmed="yes">org.apache.abdera.model.Div</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.factory.Factory.newDiv(org.apache.abdera.model.Base)</name>
                <outbound type="class" confirmed="yes">org.apache.abdera.model.Base</outbound>
                <outbound type="class" confirmed="yes">org.apache.abdera.model.Div</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.factory.Factory.newDocument()</name>
                <outbound type="class" confirmed="yes">org.apache.abdera.model.Document</outbound>
                <inbound type="feature" confirmed="yes">org.apache.abdera.protocol.error.Error.create(org.apache.abdera.Abdera, int, java.lang.String, java.lang.Throwable)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.factory.Factory.newEdited()</name>
                <outbound type="class" confirmed="yes">org.apache.abdera.model.DateTime</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.factory.Factory.newEdited(org.apache.abdera.model.Element)</name>
                <outbound type="class" confirmed="yes">org.apache.abdera.model.DateTime</outbound>
                <outbound type="class" confirmed="yes">org.apache.abdera.model.Element</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.factory.Factory.newElement(javax.xml.namespace.QName)</name>
                <outbound type="class" confirmed="no">javax.xml.namespace.QName</outbound>
                <outbound type="class" confirmed="yes">org.apache.abdera.model.Element</outbound>
                <inbound type="feature" confirmed="yes">org.apache.abdera.model.ElementWrapper.ElementWrapper(org.apache.abdera.factory.Factory, javax.xml.namespace.QName)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.factory.Factory.newElement(javax.xml.namespace.QName, org.apache.abdera.model.Base)</name>
                <outbound type="class" confirmed="no">javax.xml.namespace.QName</outbound>
                <outbound type="class" confirmed="yes">org.apache.abdera.model.Base</outbound>
                <outbound type="class" confirmed="yes">org.apache.abdera.model.Element</outbound>
                <inbound type="feature" confirmed="yes">org.apache.abdera.protocol.error.Error.create(org.apache.abdera.Abdera, int, java.lang.String, java.lang.Throwable)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.factory.Factory.newEmail()</name>
                <outbound type="class" confirmed="yes">org.apache.abdera.model.Element</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.factory.Factory.newEmail(org.apache.abdera.model.Element)</name>
                <outbound type="class" confirmed="yes">org.apache.abdera.model.Element</outbound>
                <inbound type="feature" confirmed="yes">org.apache.abdera.model.PersonWrapper.setEmail(java.lang.String)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.factory.Factory.newEntry()</name>
                <outbound type="class" confirmed="yes">org.apache.abdera.model.Entry</outbound>
                <inbound type="feature" confirmed="yes">org.apache.abdera.Abdera.newEntry()</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.factory.Factory.newEntry(org.apache.abdera.model.Base)</name>
                <outbound type="class" confirmed="yes">org.apache.abdera.model.Base</outbound>
                <outbound type="class" confirmed="yes">org.apache.abdera.model.Entry</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.factory.Factory.newExtensionElement(javax.xml.namespace.QName)</name>
                <outbound type="class" confirmed="no">javax.xml.namespace.QName</outbound>
                <outbound type="class" confirmed="yes">org.apache.abdera.model.Element</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.factory.Factory.newExtensionElement(javax.xml.namespace.QName, org.apache.abdera.model.Base)</name>
                <outbound type="class" confirmed="no">javax.xml.namespace.QName</outbound>
                <outbound type="class" confirmed="yes">org.apache.abdera.model.Base</outbound>
                <outbound type="class" confirmed="yes">org.apache.abdera.model.Element</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.factory.Factory.newFeed()</name>
                <outbound type="class" confirmed="yes">org.apache.abdera.model.Feed</outbound>
                <inbound type="feature" confirmed="yes">org.apache.abdera.Abdera.newFeed()</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.factory.Factory.newFeed(org.apache.abdera.model.Base)</name>
                <outbound type="class" confirmed="yes">org.apache.abdera.model.Base</outbound>
                <outbound type="class" confirmed="yes">org.apache.abdera.model.Feed</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.factory.Factory.newGenerator()</name>
                <outbound type="class" confirmed="yes">org.apache.abdera.model.Generator</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.factory.Factory.newGenerator(org.apache.abdera.model.Element)</name>
                <outbound type="class" confirmed="yes">org.apache.abdera.model.Element</outbound>
                <outbound type="class" confirmed="yes">org.apache.abdera.model.Generator</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.factory.Factory.newID()</name>
                <outbound type="class" confirmed="yes">org.apache.abdera.model.IRIElement</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.factory.Factory.newID(org.apache.abdera.model.Element)</name>
                <outbound type="class" confirmed="yes">org.apache.abdera.model.Element</outbound>
                <outbound type="class" confirmed="yes">org.apache.abdera.model.IRIElement</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.factory.Factory.newIRIElement(javax.xml.namespace.QName, org.apache.abdera.model.Element)</name>
                <outbound type="class" confirmed="no">javax.xml.namespace.QName</outbound>
                <outbound type="class" confirmed="yes">org.apache.abdera.model.Element</outbound>
                <outbound type="class" confirmed="yes">org.apache.abdera.model.IRIElement</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.factory.Factory.newIcon()</name>
                <outbound type="class" confirmed="yes">org.apache.abdera.model.IRIElement</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.factory.Factory.newIcon(org.apache.abdera.model.Element)</name>
                <outbound type="class" confirmed="yes">org.apache.abdera.model.Element</outbound>
                <outbound type="class" confirmed="yes">org.apache.abdera.model.IRIElement</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.factory.Factory.newLink()</name>
                <outbound type="class" confirmed="yes">org.apache.abdera.model.Link</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.factory.Factory.newLink(org.apache.abdera.model.Element)</name>
                <outbound type="class" confirmed="yes">org.apache.abdera.model.Element</outbound>
                <outbound type="class" confirmed="yes">org.apache.abdera.model.Link</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.factory.Factory.newLogo()</name>
                <outbound type="class" confirmed="yes">org.apache.abdera.model.IRIElement</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.factory.Factory.newLogo(org.apache.abdera.model.Element)</name>
                <outbound type="class" confirmed="yes">org.apache.abdera.model.Element</outbound>
                <outbound type="class" confirmed="yes">org.apache.abdera.model.IRIElement</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.factory.Factory.newName()</name>
                <outbound type="class" confirmed="yes">org.apache.abdera.model.Element</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.factory.Factory.newName(org.apache.abdera.model.Element)</name>
                <outbound type="class" confirmed="yes">org.apache.abdera.model.Element</outbound>
                <inbound type="feature" confirmed="yes">org.apache.abdera.model.PersonWrapper.setName(java.lang.String)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.factory.Factory.newParser()</name>
                <outbound type="class" confirmed="yes">org.apache.abdera.parser.Parser</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.factory.Factory.newPerson(javax.xml.namespace.QName, org.apache.abdera.model.Element)</name>
                <outbound type="class" confirmed="no">javax.xml.namespace.QName</outbound>
                <outbound type="class" confirmed="yes">org.apache.abdera.model.Element</outbound>
                <outbound type="class" confirmed="yes">org.apache.abdera.model.Person</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.factory.Factory.newPublished()</name>
                <outbound type="class" confirmed="yes">org.apache.abdera.model.DateTime</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.factory.Factory.newPublished(org.apache.abdera.model.Element)</name>
                <outbound type="class" confirmed="yes">org.apache.abdera.model.DateTime</outbound>
                <outbound type="class" confirmed="yes">org.apache.abdera.model.Element</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.factory.Factory.newRights()</name>
                <outbound type="class" confirmed="yes">org.apache.abdera.model.Text</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.factory.Factory.newRights(org.apache.abdera.model.Element)</name>
                <outbound type="class" confirmed="yes">org.apache.abdera.model.Element</outbound>
                <outbound type="class" confirmed="yes">org.apache.abdera.model.Text</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.factory.Factory.newRights(org.apache.abdera.model.Text$Type)</name>
                <outbound type="class" confirmed="yes">org.apache.abdera.model.Text</outbound>
                <outbound type="class" confirmed="yes">org.apache.abdera.model.Text$Type</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.factory.Factory.newRights(org.apache.abdera.model.Text$Type, org.apache.abdera.model.Element)</name>
                <outbound type="class" confirmed="yes">org.apache.abdera.model.Element</outbound>
                <outbound type="class" confirmed="yes">org.apache.abdera.model.Text</outbound>
                <outbound type="class" confirmed="yes">org.apache.abdera.model.Text$Type</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.factory.Factory.newService()</name>
                <outbound type="class" confirmed="yes">org.apache.abdera.model.Service</outbound>
                <inbound type="feature" confirmed="yes">org.apache.abdera.Abdera.newService()</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.factory.Factory.newService(org.apache.abdera.model.Base)</name>
                <outbound type="class" confirmed="yes">org.apache.abdera.model.Base</outbound>
                <outbound type="class" confirmed="yes">org.apache.abdera.model.Service</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.factory.Factory.newSource()</name>
                <outbound type="class" confirmed="yes">org.apache.abdera.model.Source</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.factory.Factory.newSource(org.apache.abdera.model.Element)</name>
                <outbound type="class" confirmed="yes">org.apache.abdera.model.Element</outbound>
                <outbound type="class" confirmed="yes">org.apache.abdera.model.Source</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.factory.Factory.newSubtitle()</name>
                <outbound type="class" confirmed="yes">org.apache.abdera.model.Text</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.factory.Factory.newSubtitle(org.apache.abdera.model.Element)</name>
                <outbound type="class" confirmed="yes">org.apache.abdera.model.Element</outbound>
                <outbound type="class" confirmed="yes">org.apache.abdera.model.Text</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.factory.Factory.newSubtitle(org.apache.abdera.model.Text$Type)</name>
                <outbound type="class" confirmed="yes">org.apache.abdera.model.Text</outbound>
                <outbound type="class" confirmed="yes">org.apache.abdera.model.Text$Type</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.factory.Factory.newSubtitle(org.apache.abdera.model.Text$Type, org.apache.abdera.model.Element)</name>
                <outbound type="class" confirmed="yes">org.apache.abdera.model.Element</outbound>
                <outbound type="class" confirmed="yes">org.apache.abdera.model.Text</outbound>
                <outbound type="class" confirmed="yes">org.apache.abdera.model.Text$Type</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.factory.Factory.newSummary()</name>
                <outbound type="class" confirmed="yes">org.apache.abdera.model.Text</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.factory.Factory.newSummary(org.apache.abdera.model.Element)</name>
                <outbound type="class" confirmed="yes">org.apache.abdera.model.Element</outbound>
                <outbound type="class" confirmed="yes">org.apache.abdera.model.Text</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.factory.Factory.newSummary(org.apache.abdera.model.Text$Type)</name>
                <outbound type="class" confirmed="yes">org.apache.abdera.model.Text</outbound>
                <outbound type="class" confirmed="yes">org.apache.abdera.model.Text$Type</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.factory.Factory.newSummary(org.apache.abdera.model.Text$Type, org.apache.abdera.model.Element)</name>
                <outbound type="class" confirmed="yes">org.apache.abdera.model.Element</outbound>
                <outbound type="class" confirmed="yes">org.apache.abdera.model.Text</outbound>
                <outbound type="class" confirmed="yes">org.apache.abdera.model.Text$Type</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.factory.Factory.newText(javax.xml.namespace.QName, org.apache.abdera.model.Text$Type)</name>
                <outbound type="class" confirmed="no">javax.xml.namespace.QName</outbound>
                <outbound type="class" confirmed="yes">org.apache.abdera.model.Text</outbound>
                <outbound type="class" confirmed="yes">org.apache.abdera.model.Text$Type</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.factory.Factory.newText(javax.xml.namespace.QName, org.apache.abdera.model.Text$Type, org.apache.abdera.model.Element)</name>
                <outbound type="class" confirmed="no">javax.xml.namespace.QName</outbound>
                <outbound type="class" confirmed="yes">org.apache.abdera.model.Element</outbound>
                <outbound type="class" confirmed="yes">org.apache.abdera.model.Text</outbound>
                <outbound type="class" confirmed="yes">org.apache.abdera.model.Text$Type</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.factory.Factory.newTitle()</name>
                <outbound type="class" confirmed="yes">org.apache.abdera.model.Text</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.factory.Factory.newTitle(org.apache.abdera.model.Element)</name>
                <outbound type="class" confirmed="yes">org.apache.abdera.model.Element</outbound>
                <outbound type="class" confirmed="yes">org.apache.abdera.model.Text</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.factory.Factory.newTitle(org.apache.abdera.model.Text$Type)</name>
                <outbound type="class" confirmed="yes">org.apache.abdera.model.Text</outbound>
                <outbound type="class" confirmed="yes">org.apache.abdera.model.Text$Type</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.factory.Factory.newTitle(org.apache.abdera.model.Text$Type, org.apache.abdera.model.Element)</name>
                <outbound type="class" confirmed="yes">org.apache.abdera.model.Element</outbound>
                <outbound type="class" confirmed="yes">org.apache.abdera.model.Text</outbound>
                <outbound type="class" confirmed="yes">org.apache.abdera.model.Text$Type</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.factory.Factory.newUpdated()</name>
                <outbound type="class" confirmed="yes">org.apache.abdera.model.DateTime</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.factory.Factory.newUpdated(org.apache.abdera.model.Element)</name>
                <outbound type="class" confirmed="yes">org.apache.abdera.model.DateTime</outbound>
                <outbound type="class" confirmed="yes">org.apache.abdera.model.Element</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.factory.Factory.newUri()</name>
                <outbound type="class" confirmed="yes">org.apache.abdera.model.IRIElement</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.factory.Factory.newUri(org.apache.abdera.model.Element)</name>
                <outbound type="class" confirmed="yes">org.apache.abdera.model.Element</outbound>
                <outbound type="class" confirmed="yes">org.apache.abdera.model.IRIElement</outbound>
                <inbound type="feature" confirmed="yes">org.apache.abdera.model.PersonWrapper.setUri(java.lang.String)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.factory.Factory.newUuidUri()</name>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.factory.Factory.newWorkspace()</name>
                <outbound type="class" confirmed="yes">org.apache.abdera.model.Workspace</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.factory.Factory.newWorkspace(org.apache.abdera.model.Element)</name>
                <outbound type="class" confirmed="yes">org.apache.abdera.model.Element</outbound>
                <outbound type="class" confirmed="yes">org.apache.abdera.model.Workspace</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.factory.Factory.registerExtension(org.apache.abdera.factory.ExtensionFactory)</name>
                <outbound type="class" confirmed="yes">org.apache.abdera.factory.ExtensionFactory</outbound>
            </feature>
        </class>
        <class confirmed="yes">
            <name>org.apache.abdera.factory.StreamBuilder</name>
            <outbound type="class" confirmed="yes">org.apache.abdera.util.AbstractStreamWriter</outbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.util.AbderaConfiguration.initStreamWriters()</inbound>
            <feature confirmed="yes">
                <name>org.apache.abdera.factory.StreamBuilder.StreamBuilder()</name>
                <outbound type="class" confirmed="yes">org.apache.abdera.Abdera</outbound>
                <outbound type="feature" confirmed="yes">org.apache.abdera.Abdera.getInstance()</outbound>
                <outbound type="feature" confirmed="yes">org.apache.abdera.factory.StreamBuilder.StreamBuilder(org.apache.abdera.Abdera)</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.factory.StreamBuilder.StreamBuilder(org.apache.abdera.Abdera)</name>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="class" confirmed="yes">org.apache.abdera.Abdera</outbound>
                <outbound type="feature" confirmed="yes">org.apache.abdera.factory.StreamBuilder.abdera</outbound>
                <outbound type="feature" confirmed="yes">org.apache.abdera.factory.StreamBuilder.current</outbound>
                <outbound type="feature" confirmed="yes">org.apache.abdera.factory.StreamBuilder.root</outbound>
                <outbound type="class" confirmed="yes">org.apache.abdera.model.Base</outbound>
                <outbound type="feature" confirmed="yes">org.apache.abdera.util.AbstractStreamWriter.AbstractStreamWriter(org.apache.abdera.Abdera, java.lang.String)</outbound>
                <inbound type="feature" confirmed="yes">org.apache.abdera.factory.StreamBuilder.StreamBuilder()</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.factory.StreamBuilder.abdera</name>
                <outbound type="class" confirmed="yes">org.apache.abdera.Abdera</outbound>
                <inbound type="feature" confirmed="yes">org.apache.abdera.factory.StreamBuilder.StreamBuilder(org.apache.abdera.Abdera)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.factory.StreamBuilder.close()</name>
                <outbound type="class" confirmed="no">java.io.IOException</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.factory.StreamBuilder.current</name>
                <outbound type="class" confirmed="yes">org.apache.abdera.model.Base</outbound>
                <inbound type="feature" confirmed="yes">org.apache.abdera.factory.StreamBuilder.StreamBuilder(org.apache.abdera.Abdera)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.factory.StreamBuilder.endAuthor()</name>
                <outbound type="class" confirmed="yes">org.apache.abdera.writer.StreamWriter</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.factory.StreamBuilder.endCategories()</name>
                <outbound type="class" confirmed="yes">org.apache.abdera.writer.StreamWriter</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.factory.StreamBuilder.endCategory()</name>
                <outbound type="class" confirmed="yes">org.apache.abdera.writer.StreamWriter</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.factory.StreamBuilder.endCollection()</name>
                <outbound type="class" confirmed="yes">org.apache.abdera.writer.StreamWriter</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.factory.StreamBuilder.endContent()</name>
                <outbound type="class" confirmed="yes">org.apache.abdera.writer.StreamWriter</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.factory.StreamBuilder.endContributor()</name>
                <outbound type="class" confirmed="yes">org.apache.abdera.writer.StreamWriter</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.factory.StreamBuilder.endControl()</name>
                <outbound type="class" confirmed="yes">org.apache.abdera.writer.StreamWriter</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.factory.StreamBuilder.endDocument()</name>
                <outbound type="class" confirmed="yes">org.apache.abdera.writer.StreamWriter</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.factory.StreamBuilder.endElement()</name>
                <outbound type="class" confirmed="yes">org.apache.abdera.writer.StreamWriter</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.factory.StreamBuilder.endEntry()</name>
                <outbound type="class" confirmed="yes">org.apache.abdera.writer.StreamWriter</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.factory.StreamBuilder.endFeed()</name>
                <outbound type="class" confirmed="yes">org.apache.abdera.writer.StreamWriter</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.factory.StreamBuilder.endGenerator()</name>
                <outbound type="class" confirmed="yes">org.apache.abdera.writer.StreamWriter</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.factory.StreamBuilder.endLink()</name>
                <outbound type="class" confirmed="yes">org.apache.abdera.writer.StreamWriter</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.factory.StreamBuilder.endPerson()</name>
                <outbound type="class" confirmed="yes">org.apache.abdera.writer.StreamWriter</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.factory.StreamBuilder.endService()</name>
                <outbound type="class" confirmed="yes">org.apache.abdera.writer.StreamWriter</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.factory.StreamBuilder.endSource()</name>
                <outbound type="class" confirmed="yes">org.apache.abdera.writer.StreamWriter</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.factory.StreamBuilder.endText()</name>
                <outbound type="class" confirmed="yes">org.apache.abdera.writer.StreamWriter</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.factory.StreamBuilder.endWorkspace()</name>
                <outbound type="class" confirmed="yes">org.apache.abdera.writer.StreamWriter</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.factory.StreamBuilder.flush()</name>
                <outbound type="class" confirmed="yes">org.apache.abdera.writer.StreamWriter</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.factory.StreamBuilder.getBase()</name>
                <outbound type="feature" confirmed="yes">org.apache.abdera.factory.StreamBuilder.root</outbound>
                <outbound type="class" confirmed="yes">org.apache.abdera.model.Base</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.factory.StreamBuilder.getQName(java.lang.String, java.lang.String, java.lang.String)</name>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="class" confirmed="no">javax.xml.namespace.QName</outbound>
                <outbound type="feature" confirmed="no">javax.xml.namespace.QName.QName(java.lang.String)</outbound>
                <outbound type="feature" confirmed="no">javax.xml.namespace.QName.QName(java.lang.String, java.lang.String)</outbound>
                <outbound type="feature" confirmed="no">javax.xml.namespace.QName.QName(java.lang.String, java.lang.String, java.lang.String)</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.factory.StreamBuilder.indent()</name>
                <outbound type="class" confirmed="yes">org.apache.abdera.writer.StreamWriter</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.factory.StreamBuilder.root</name>
                <outbound type="class" confirmed="yes">org.apache.abdera.model.Base</outbound>
                <inbound type="feature" confirmed="yes">org.apache.abdera.factory.StreamBuilder.StreamBuilder(org.apache.abdera.Abdera)</inbound>
                <inbound type="feature" confirmed="yes">org.apache.abdera.factory.StreamBuilder.getBase()</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.factory.StreamBuilder.setAutoIndent(boolean)</name>
                <outbound type="class" confirmed="yes">org.apache.abdera.writer.StreamWriter</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.factory.StreamBuilder.setAutoclose(boolean)</name>
                <outbound type="class" confirmed="yes">org.apache.abdera.writer.StreamWriter</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.factory.StreamBuilder.setAutoflush(boolean)</name>
                <outbound type="class" confirmed="yes">org.apache.abdera.writer.StreamWriter</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.factory.StreamBuilder.setChannel(java.nio.channels.WritableByteChannel)</name>
                <outbound type="class" confirmed="no">java.nio.channels.WritableByteChannel</outbound>
                <outbound type="class" confirmed="yes">org.apache.abdera.writer.StreamWriter</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.factory.StreamBuilder.setChannel(java.nio.channels.WritableByteChannel, java.lang.String)</name>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="class" confirmed="no">java.nio.channels.WritableByteChannel</outbound>
                <outbound type="class" confirmed="yes">org.apache.abdera.writer.StreamWriter</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.factory.StreamBuilder.setOutputStream(java.io.OutputStream)</name>
                <outbound type="class" confirmed="no">java.io.OutputStream</outbound>
                <outbound type="class" confirmed="yes">org.apache.abdera.writer.StreamWriter</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.factory.StreamBuilder.setOutputStream(java.io.OutputStream, java.lang.String)</name>
                <outbound type="class" confirmed="no">java.io.OutputStream</outbound>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="class" confirmed="yes">org.apache.abdera.writer.StreamWriter</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.factory.StreamBuilder.setPrefix(java.lang.String, java.lang.String)</name>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="class" confirmed="yes">org.apache.abdera.writer.StreamWriter</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.factory.StreamBuilder.setWriter(java.io.Writer)</name>
                <outbound type="class" confirmed="no">java.io.Writer</outbound>
                <outbound type="class" confirmed="yes">org.apache.abdera.writer.StreamWriter</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.factory.StreamBuilder.startAuthor()</name>
                <outbound type="class" confirmed="yes">org.apache.abdera.writer.StreamWriter</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.factory.StreamBuilder.startCategories()</name>
                <outbound type="class" confirmed="yes">org.apache.abdera.writer.StreamWriter</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.factory.StreamBuilder.startCategories(boolean)</name>
                <outbound type="class" confirmed="yes">org.apache.abdera.writer.StreamWriter</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.factory.StreamBuilder.startCategories(boolean, java.lang.String)</name>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="class" confirmed="yes">org.apache.abdera.writer.StreamWriter</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.factory.StreamBuilder.startCategory(java.lang.String)</name>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="class" confirmed="yes">org.apache.abdera.writer.StreamWriter</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.factory.StreamBuilder.startCategory(java.lang.String, java.lang.String)</name>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="class" confirmed="yes">org.apache.abdera.writer.StreamWriter</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.factory.StreamBuilder.startCategory(java.lang.String, java.lang.String, java.lang.String)</name>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="class" confirmed="yes">org.apache.abdera.writer.StreamWriter</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.factory.StreamBuilder.startCollection(java.lang.String)</name>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="class" confirmed="yes">org.apache.abdera.writer.StreamWriter</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.factory.StreamBuilder.startContent(java.lang.String)</name>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="class" confirmed="yes">org.apache.abdera.writer.StreamWriter</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.factory.StreamBuilder.startContent(java.lang.String, java.lang.String)</name>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="class" confirmed="yes">org.apache.abdera.writer.StreamWriter</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.factory.StreamBuilder.startContent(org.apache.abdera.model.Content$Type)</name>
                <outbound type="class" confirmed="yes">org.apache.abdera.model.Content$Type</outbound>
                <outbound type="class" confirmed="yes">org.apache.abdera.writer.StreamWriter</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.factory.StreamBuilder.startContent(org.apache.abdera.model.Content$Type, java.lang.String)</name>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="class" confirmed="yes">org.apache.abdera.model.Content$Type</outbound>
                <outbound type="class" confirmed="yes">org.apache.abdera.writer.StreamWriter</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.factory.StreamBuilder.startContributor()</name>
                <outbound type="class" confirmed="yes">org.apache.abdera.writer.StreamWriter</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.factory.StreamBuilder.startControl()</name>
                <outbound type="class" confirmed="yes">org.apache.abdera.writer.StreamWriter</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.factory.StreamBuilder.startDocument()</name>
                <outbound type="class" confirmed="yes">org.apache.abdera.writer.StreamWriter</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.factory.StreamBuilder.startDocument(java.lang.String)</name>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="class" confirmed="yes">org.apache.abdera.writer.StreamWriter</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.factory.StreamBuilder.startDocument(java.lang.String, java.lang.String)</name>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="class" confirmed="yes">org.apache.abdera.writer.StreamWriter</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.factory.StreamBuilder.startElement(java.lang.String)</name>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="class" confirmed="yes">org.apache.abdera.writer.StreamWriter</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.factory.StreamBuilder.startElement(java.lang.String, java.lang.String)</name>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="class" confirmed="yes">org.apache.abdera.writer.StreamWriter</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.factory.StreamBuilder.startElement(java.lang.String, java.lang.String, java.lang.String)</name>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="class" confirmed="yes">org.apache.abdera.writer.StreamWriter</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.factory.StreamBuilder.startElement(javax.xml.namespace.QName)</name>
                <outbound type="class" confirmed="no">javax.xml.namespace.QName</outbound>
                <outbound type="class" confirmed="yes">org.apache.abdera.writer.StreamWriter</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.factory.StreamBuilder.startEntry()</name>
                <outbound type="class" confirmed="yes">org.apache.abdera.writer.StreamWriter</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.factory.StreamBuilder.startFeed()</name>
                <outbound type="class" confirmed="yes">org.apache.abdera.writer.StreamWriter</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.factory.StreamBuilder.startGenerator(java.lang.String, java.lang.String)</name>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="class" confirmed="yes">org.apache.abdera.writer.StreamWriter</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.factory.StreamBuilder.startLink(java.lang.String)</name>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="class" confirmed="yes">org.apache.abdera.writer.StreamWriter</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.factory.StreamBuilder.startLink(java.lang.String, java.lang.String)</name>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="class" confirmed="yes">org.apache.abdera.writer.StreamWriter</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.factory.StreamBuilder.startLink(java.lang.String, java.lang.String, java.lang.String)</name>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="class" confirmed="yes">org.apache.abdera.writer.StreamWriter</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.factory.StreamBuilder.startLink(java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, long)</name>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="class" confirmed="yes">org.apache.abdera.writer.StreamWriter</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.factory.StreamBuilder.startPerson(java.lang.String)</name>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="class" confirmed="yes">org.apache.abdera.writer.StreamWriter</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.factory.StreamBuilder.startPerson(java.lang.String, java.lang.String)</name>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="class" confirmed="yes">org.apache.abdera.writer.StreamWriter</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.factory.StreamBuilder.startPerson(java.lang.String, java.lang.String, java.lang.String)</name>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="class" confirmed="yes">org.apache.abdera.writer.StreamWriter</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.factory.StreamBuilder.startPerson(javax.xml.namespace.QName)</name>
                <outbound type="class" confirmed="no">javax.xml.namespace.QName</outbound>
                <outbound type="class" confirmed="yes">org.apache.abdera.writer.StreamWriter</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.factory.StreamBuilder.startService()</name>
                <outbound type="class" confirmed="yes">org.apache.abdera.writer.StreamWriter</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.factory.StreamBuilder.startSource()</name>
                <outbound type="class" confirmed="yes">org.apache.abdera.writer.StreamWriter</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.factory.StreamBuilder.startText(java.lang.String, java.lang.String, java.lang.String, org.apache.abdera.model.Text$Type)</name>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="class" confirmed="yes">org.apache.abdera.model.Text$Type</outbound>
                <outbound type="class" confirmed="yes">org.apache.abdera.writer.StreamWriter</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.factory.StreamBuilder.startText(java.lang.String, java.lang.String, org.apache.abdera.model.Text$Type)</name>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="class" confirmed="yes">org.apache.abdera.model.Text$Type</outbound>
                <outbound type="class" confirmed="yes">org.apache.abdera.writer.StreamWriter</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.factory.StreamBuilder.startText(java.lang.String, org.apache.abdera.model.Text$Type)</name>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="class" confirmed="yes">org.apache.abdera.model.Text$Type</outbound>
                <outbound type="class" confirmed="yes">org.apache.abdera.writer.StreamWriter</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.factory.StreamBuilder.startText(javax.xml.namespace.QName, org.apache.abdera.model.Text$Type)</name>
                <outbound type="class" confirmed="no">javax.xml.namespace.QName</outbound>
                <outbound type="class" confirmed="yes">org.apache.abdera.model.Text$Type</outbound>
                <outbound type="class" confirmed="yes">org.apache.abdera.writer.StreamWriter</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.factory.StreamBuilder.startWorkspace()</name>
                <outbound type="class" confirmed="yes">org.apache.abdera.writer.StreamWriter</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.factory.StreamBuilder.writeAccepts(java.lang.String[])</name>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="class" confirmed="yes">org.apache.abdera.writer.StreamWriter</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.factory.StreamBuilder.writeAcceptsEntry()</name>
                <outbound type="class" confirmed="yes">org.apache.abdera.writer.StreamWriter</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.factory.StreamBuilder.writeAcceptsNothing()</name>
                <outbound type="class" confirmed="yes">org.apache.abdera.writer.StreamWriter</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.factory.StreamBuilder.writeAttribute(java.lang.String, double)</name>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="class" confirmed="yes">org.apache.abdera.writer.StreamWriter</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.factory.StreamBuilder.writeAttribute(java.lang.String, int)</name>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="class" confirmed="yes">org.apache.abdera.writer.StreamWriter</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.factory.StreamBuilder.writeAttribute(java.lang.String, java.lang.String)</name>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="class" confirmed="yes">org.apache.abdera.writer.StreamWriter</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.factory.StreamBuilder.writeAttribute(java.lang.String, java.lang.String, double)</name>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="class" confirmed="yes">org.apache.abdera.writer.StreamWriter</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.factory.StreamBuilder.writeAttribute(java.lang.String, java.lang.String, int)</name>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="class" confirmed="yes">org.apache.abdera.writer.StreamWriter</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.factory.StreamBuilder.writeAttribute(java.lang.String, java.lang.String, java.lang.String)</name>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="class" confirmed="yes">org.apache.abdera.writer.StreamWriter</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.factory.StreamBuilder.writeAttribute(java.lang.String, java.lang.String, java.lang.String, double)</name>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="class" confirmed="yes">org.apache.abdera.writer.StreamWriter</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.factory.StreamBuilder.writeAttribute(java.lang.String, java.lang.String, java.lang.String, int)</name>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="class" confirmed="yes">org.apache.abdera.writer.StreamWriter</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.factory.StreamBuilder.writeAttribute(java.lang.String, java.lang.String, java.lang.String, java.lang.String)</name>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="class" confirmed="yes">org.apache.abdera.writer.StreamWriter</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.factory.StreamBuilder.writeAttribute(java.lang.String, java.lang.String, java.lang.String, java.util.Date)</name>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="class" confirmed="no">java.util.Date</outbound>
                <outbound type="class" confirmed="yes">org.apache.abdera.writer.StreamWriter</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.factory.StreamBuilder.writeAttribute(java.lang.String, java.lang.String, java.lang.String, long)</name>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="class" confirmed="yes">org.apache.abdera.writer.StreamWriter</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.factory.StreamBuilder.writeAttribute(java.lang.String, java.lang.String, java.util.Date)</name>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="class" confirmed="no">java.util.Date</outbound>
                <outbound type="class" confirmed="yes">org.apache.abdera.writer.StreamWriter</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.factory.StreamBuilder.writeAttribute(java.lang.String, java.lang.String, long)</name>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="class" confirmed="yes">org.apache.abdera.writer.StreamWriter</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.factory.StreamBuilder.writeAttribute(java.lang.String, java.util.Date)</name>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="class" confirmed="no">java.util.Date</outbound>
                <outbound type="class" confirmed="yes">org.apache.abdera.writer.StreamWriter</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.factory.StreamBuilder.writeAttribute(java.lang.String, long)</name>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="class" confirmed="yes">org.apache.abdera.writer.StreamWriter</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.factory.StreamBuilder.writeAttribute(javax.xml.namespace.QName, double)</name>
                <outbound type="class" confirmed="no">javax.xml.namespace.QName</outbound>
                <outbound type="class" confirmed="yes">org.apache.abdera.writer.StreamWriter</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.factory.StreamBuilder.writeAttribute(javax.xml.namespace.QName, int)</name>
                <outbound type="class" confirmed="no">javax.xml.namespace.QName</outbound>
                <outbound type="class" confirmed="yes">org.apache.abdera.writer.StreamWriter</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.factory.StreamBuilder.writeAttribute(javax.xml.namespace.QName, java.lang.String)</name>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="class" confirmed="no">javax.xml.namespace.QName</outbound>
                <outbound type="class" confirmed="yes">org.apache.abdera.writer.StreamWriter</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.factory.StreamBuilder.writeAttribute(javax.xml.namespace.QName, java.util.Date)</name>
                <outbound type="class" confirmed="no">java.util.Date</outbound>
                <outbound type="class" confirmed="no">javax.xml.namespace.QName</outbound>
                <outbound type="class" confirmed="yes">org.apache.abdera.writer.StreamWriter</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.factory.StreamBuilder.writeAttribute(javax.xml.namespace.QName, long)</name>
                <outbound type="class" confirmed="no">javax.xml.namespace.QName</outbound>
                <outbound type="class" confirmed="yes">org.apache.abdera.writer.StreamWriter</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.factory.StreamBuilder.writeAuthor(java.lang.String)</name>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="class" confirmed="yes">org.apache.abdera.writer.StreamWriter</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.factory.StreamBuilder.writeAuthor(java.lang.String, java.lang.String, java.lang.String)</name>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="class" confirmed="yes">org.apache.abdera.writer.StreamWriter</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.factory.StreamBuilder.writeBase(java.lang.String)</name>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="class" confirmed="yes">org.apache.abdera.writer.StreamWriter</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.factory.StreamBuilder.writeBase(org.apache.abdera.i18n.iri.IRI)</name>
                <outbound type="class" confirmed="no">org.apache.abdera.i18n.iri.IRI</outbound>
                <outbound type="class" confirmed="yes">org.apache.abdera.writer.StreamWriter</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.factory.StreamBuilder.writeCategory(java.lang.String)</name>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="class" confirmed="yes">org.apache.abdera.writer.StreamWriter</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.factory.StreamBuilder.writeCategory(java.lang.String, java.lang.String)</name>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="class" confirmed="yes">org.apache.abdera.writer.StreamWriter</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.factory.StreamBuilder.writeCategory(java.lang.String, java.lang.String, java.lang.String)</name>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="class" confirmed="yes">org.apache.abdera.writer.StreamWriter</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.factory.StreamBuilder.writeComment(java.lang.String)</name>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="class" confirmed="yes">org.apache.abdera.writer.StreamWriter</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.factory.StreamBuilder.writeContent(java.lang.String, java.lang.String)</name>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="class" confirmed="yes">org.apache.abdera.writer.StreamWriter</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.factory.StreamBuilder.writeContent(org.apache.abdera.model.Content$Type, java.io.InputStream)</name>
                <outbound type="class" confirmed="no">java.io.IOException</outbound>
                <outbound type="class" confirmed="no">java.io.InputStream</outbound>
                <outbound type="class" confirmed="yes">org.apache.abdera.model.Content$Type</outbound>
                <outbound type="class" confirmed="yes">org.apache.abdera.writer.StreamWriter</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.factory.StreamBuilder.writeContent(org.apache.abdera.model.Content$Type, java.lang.String)</name>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="class" confirmed="yes">org.apache.abdera.model.Content$Type</outbound>
                <outbound type="class" confirmed="yes">org.apache.abdera.writer.StreamWriter</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.factory.StreamBuilder.writeContent(org.apache.abdera.model.Content$Type, javax.activation.DataHandler)</name>
                <outbound type="class" confirmed="no">java.io.IOException</outbound>
                <outbound type="class" confirmed="no">javax.activation.DataHandler</outbound>
                <outbound type="class" confirmed="yes">org.apache.abdera.model.Content$Type</outbound>
                <outbound type="class" confirmed="yes">org.apache.abdera.writer.StreamWriter</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.factory.StreamBuilder.writeContributor(java.lang.String)</name>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="class" confirmed="yes">org.apache.abdera.writer.StreamWriter</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.factory.StreamBuilder.writeContributor(java.lang.String, java.lang.String, java.lang.String)</name>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="class" confirmed="yes">org.apache.abdera.writer.StreamWriter</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.factory.StreamBuilder.writeDate(java.lang.String, java.lang.String)</name>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="class" confirmed="yes">org.apache.abdera.writer.StreamWriter</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.factory.StreamBuilder.writeDate(java.lang.String, java.lang.String, java.lang.String)</name>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="class" confirmed="yes">org.apache.abdera.writer.StreamWriter</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.factory.StreamBuilder.writeDate(java.lang.String, java.lang.String, java.lang.String, java.lang.String)</name>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="class" confirmed="yes">org.apache.abdera.writer.StreamWriter</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.factory.StreamBuilder.writeDate(java.lang.String, java.lang.String, java.lang.String, java.util.Date)</name>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="class" confirmed="no">java.util.Date</outbound>
                <outbound type="class" confirmed="yes">org.apache.abdera.writer.StreamWriter</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.factory.StreamBuilder.writeDate(java.lang.String, java.lang.String, java.util.Date)</name>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="class" confirmed="no">java.util.Date</outbound>
                <outbound type="class" confirmed="yes">org.apache.abdera.writer.StreamWriter</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.factory.StreamBuilder.writeDate(java.lang.String, java.util.Date)</name>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="class" confirmed="no">java.util.Date</outbound>
                <outbound type="class" confirmed="yes">org.apache.abdera.writer.StreamWriter</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.factory.StreamBuilder.writeDate(javax.xml.namespace.QName, java.lang.String)</name>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="class" confirmed="no">javax.xml.namespace.QName</outbound>
                <outbound type="class" confirmed="yes">org.apache.abdera.writer.StreamWriter</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.factory.StreamBuilder.writeDate(javax.xml.namespace.QName, java.util.Date)</name>
                <outbound type="class" confirmed="no">java.util.Date</outbound>
                <outbound type="class" confirmed="no">javax.xml.namespace.QName</outbound>
                <outbound type="class" confirmed="yes">org.apache.abdera.writer.StreamWriter</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.factory.StreamBuilder.writeDraft(boolean)</name>
                <outbound type="class" confirmed="yes">org.apache.abdera.writer.StreamWriter</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.factory.StreamBuilder.writeEdited(java.lang.String)</name>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="class" confirmed="yes">org.apache.abdera.writer.StreamWriter</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.factory.StreamBuilder.writeEdited(java.util.Date)</name>
                <outbound type="class" confirmed="no">java.util.Date</outbound>
                <outbound type="class" confirmed="yes">org.apache.abdera.writer.StreamWriter</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.factory.StreamBuilder.writeElementText(double)</name>
                <outbound type="class" confirmed="yes">org.apache.abdera.writer.StreamWriter</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.factory.StreamBuilder.writeElementText(int)</name>
                <outbound type="class" confirmed="yes">org.apache.abdera.writer.StreamWriter</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.factory.StreamBuilder.writeElementText(java.io.InputStream)</name>
                <outbound type="class" confirmed="no">java.io.IOException</outbound>
                <outbound type="class" confirmed="no">java.io.InputStream</outbound>
                <outbound type="class" confirmed="yes">org.apache.abdera.writer.StreamWriter</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.factory.StreamBuilder.writeElementText(java.lang.String)</name>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="class" confirmed="yes">org.apache.abdera.writer.StreamWriter</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.factory.StreamBuilder.writeElementText(java.lang.String, java.lang.Object[])</name>
                <outbound type="class" confirmed="no">java.lang.Object</outbound>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="class" confirmed="yes">org.apache.abdera.writer.StreamWriter</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.factory.StreamBuilder.writeElementText(java.util.Date)</name>
                <outbound type="class" confirmed="no">java.util.Date</outbound>
                <outbound type="class" confirmed="yes">org.apache.abdera.writer.StreamWriter</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.factory.StreamBuilder.writeElementText(javax.activation.DataHandler)</name>
                <outbound type="class" confirmed="no">java.io.IOException</outbound>
                <outbound type="class" confirmed="no">javax.activation.DataHandler</outbound>
                <outbound type="class" confirmed="yes">org.apache.abdera.writer.StreamWriter</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.factory.StreamBuilder.writeElementText(long)</name>
                <outbound type="class" confirmed="yes">org.apache.abdera.writer.StreamWriter</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.factory.StreamBuilder.writeGenerator(java.lang.String, java.lang.String, java.lang.String)</name>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="class" confirmed="yes">org.apache.abdera.writer.StreamWriter</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.factory.StreamBuilder.writeIRIElement(java.lang.String, java.lang.String)</name>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="class" confirmed="yes">org.apache.abdera.writer.StreamWriter</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.factory.StreamBuilder.writeIRIElement(java.lang.String, java.lang.String, java.lang.String)</name>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="class" confirmed="yes">org.apache.abdera.writer.StreamWriter</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.factory.StreamBuilder.writeIRIElement(java.lang.String, java.lang.String, java.lang.String, java.lang.String)</name>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="class" confirmed="yes">org.apache.abdera.writer.StreamWriter</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.factory.StreamBuilder.writeIRIElement(java.lang.String, java.lang.String, java.lang.String, org.apache.abdera.i18n.iri.IRI)</name>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="class" confirmed="no">org.apache.abdera.i18n.iri.IRI</outbound>
                <outbound type="class" confirmed="yes">org.apache.abdera.writer.StreamWriter</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.factory.StreamBuilder.writeIRIElement(java.lang.String, java.lang.String, org.apache.abdera.i18n.iri.IRI)</name>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="class" confirmed="no">org.apache.abdera.i18n.iri.IRI</outbound>
                <outbound type="class" confirmed="yes">org.apache.abdera.writer.StreamWriter</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.factory.StreamBuilder.writeIRIElement(java.lang.String, org.apache.abdera.i18n.iri.IRI)</name>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="class" confirmed="no">org.apache.abdera.i18n.iri.IRI</outbound>
                <outbound type="class" confirmed="yes">org.apache.abdera.writer.StreamWriter</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.factory.StreamBuilder.writeIRIElement(javax.xml.namespace.QName, java.lang.String)</name>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="class" confirmed="no">javax.xml.namespace.QName</outbound>
                <outbound type="class" confirmed="yes">org.apache.abdera.writer.StreamWriter</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.factory.StreamBuilder.writeIRIElement(javax.xml.namespace.QName, org.apache.abdera.i18n.iri.IRI)</name>
                <outbound type="class" confirmed="no">javax.xml.namespace.QName</outbound>
                <outbound type="class" confirmed="no">org.apache.abdera.i18n.iri.IRI</outbound>
                <outbound type="class" confirmed="yes">org.apache.abdera.writer.StreamWriter</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.factory.StreamBuilder.writeIcon(java.lang.String)</name>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="class" confirmed="yes">org.apache.abdera.writer.StreamWriter</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.factory.StreamBuilder.writeIcon(org.apache.abdera.i18n.iri.IRI)</name>
                <outbound type="class" confirmed="no">org.apache.abdera.i18n.iri.IRI</outbound>
                <outbound type="class" confirmed="yes">org.apache.abdera.writer.StreamWriter</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.factory.StreamBuilder.writeId()</name>
                <outbound type="class" confirmed="yes">org.apache.abdera.writer.StreamWriter</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.factory.StreamBuilder.writeId(java.lang.String)</name>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="class" confirmed="yes">org.apache.abdera.writer.StreamWriter</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.factory.StreamBuilder.writeId(org.apache.abdera.i18n.iri.IRI)</name>
                <outbound type="class" confirmed="no">org.apache.abdera.i18n.iri.IRI</outbound>
                <outbound type="class" confirmed="yes">org.apache.abdera.writer.StreamWriter</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.factory.StreamBuilder.writeLanguage(java.lang.String)</name>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="class" confirmed="yes">org.apache.abdera.writer.StreamWriter</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.factory.StreamBuilder.writeLanguage(java.util.Locale)</name>
                <outbound type="class" confirmed="no">java.util.Locale</outbound>
                <outbound type="class" confirmed="yes">org.apache.abdera.writer.StreamWriter</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.factory.StreamBuilder.writeLanguage(org.apache.abdera.i18n.rfc4646.Lang)</name>
                <outbound type="class" confirmed="no">org.apache.abdera.i18n.rfc4646.Lang</outbound>
                <outbound type="class" confirmed="yes">org.apache.abdera.writer.StreamWriter</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.factory.StreamBuilder.writeLink(java.lang.String)</name>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="class" confirmed="yes">org.apache.abdera.writer.StreamWriter</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.factory.StreamBuilder.writeLink(java.lang.String, java.lang.String)</name>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="class" confirmed="yes">org.apache.abdera.writer.StreamWriter</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.factory.StreamBuilder.writeLink(java.lang.String, java.lang.String, java.lang.String)</name>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="class" confirmed="yes">org.apache.abdera.writer.StreamWriter</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.factory.StreamBuilder.writeLink(java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, long)</name>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="class" confirmed="yes">org.apache.abdera.writer.StreamWriter</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.factory.StreamBuilder.writeLogo(java.lang.String)</name>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="class" confirmed="yes">org.apache.abdera.writer.StreamWriter</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.factory.StreamBuilder.writeLogo(org.apache.abdera.i18n.iri.IRI)</name>
                <outbound type="class" confirmed="no">org.apache.abdera.i18n.iri.IRI</outbound>
                <outbound type="class" confirmed="yes">org.apache.abdera.writer.StreamWriter</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.factory.StreamBuilder.writeNamespace(java.lang.String, java.lang.String)</name>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="class" confirmed="yes">org.apache.abdera.writer.StreamWriter</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.factory.StreamBuilder.writePI(java.lang.String)</name>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="class" confirmed="yes">org.apache.abdera.writer.StreamWriter</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.factory.StreamBuilder.writePI(java.lang.String, java.lang.String)</name>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="class" confirmed="yes">org.apache.abdera.writer.StreamWriter</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.factory.StreamBuilder.writePerson(java.lang.String, java.lang.String, java.lang.String, java.lang.String)</name>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="class" confirmed="yes">org.apache.abdera.writer.StreamWriter</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.factory.StreamBuilder.writePerson(java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String)</name>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="class" confirmed="yes">org.apache.abdera.writer.StreamWriter</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.factory.StreamBuilder.writePerson(java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String)</name>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="class" confirmed="yes">org.apache.abdera.writer.StreamWriter</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.factory.StreamBuilder.writePerson(javax.xml.namespace.QName, java.lang.String, java.lang.String, java.lang.String)</name>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="class" confirmed="no">javax.xml.namespace.QName</outbound>
                <outbound type="class" confirmed="yes">org.apache.abdera.writer.StreamWriter</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.factory.StreamBuilder.writePersonEmail(java.lang.String)</name>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="class" confirmed="yes">org.apache.abdera.writer.StreamWriter</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.factory.StreamBuilder.writePersonName(java.lang.String)</name>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="class" confirmed="yes">org.apache.abdera.writer.StreamWriter</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.factory.StreamBuilder.writePersonUri(java.lang.String)</name>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="class" confirmed="yes">org.apache.abdera.writer.StreamWriter</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.factory.StreamBuilder.writePublished(java.lang.String)</name>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="class" confirmed="yes">org.apache.abdera.writer.StreamWriter</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.factory.StreamBuilder.writePublished(java.util.Date)</name>
                <outbound type="class" confirmed="no">java.util.Date</outbound>
                <outbound type="class" confirmed="yes">org.apache.abdera.writer.StreamWriter</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.factory.StreamBuilder.writeRights(java.lang.String)</name>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="class" confirmed="yes">org.apache.abdera.writer.StreamWriter</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.factory.StreamBuilder.writeRights(org.apache.abdera.model.Text$Type, java.lang.String)</name>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="class" confirmed="yes">org.apache.abdera.model.Text$Type</outbound>
                <outbound type="class" confirmed="yes">org.apache.abdera.writer.StreamWriter</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.factory.StreamBuilder.writeSubtitle(java.lang.String)</name>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="class" confirmed="yes">org.apache.abdera.writer.StreamWriter</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.factory.StreamBuilder.writeSubtitle(org.apache.abdera.model.Text$Type, java.lang.String)</name>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="class" confirmed="yes">org.apache.abdera.model.Text$Type</outbound>
                <outbound type="class" confirmed="yes">org.apache.abdera.writer.StreamWriter</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.factory.StreamBuilder.writeSummary(java.lang.String)</name>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="class" confirmed="yes">org.apache.abdera.writer.StreamWriter</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.factory.StreamBuilder.writeSummary(org.apache.abdera.model.Text$Type, java.lang.String)</name>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="class" confirmed="yes">org.apache.abdera.model.Text$Type</outbound>
                <outbound type="class" confirmed="yes">org.apache.abdera.writer.StreamWriter</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.factory.StreamBuilder.writeText(java.lang.String, java.lang.String, java.lang.String, org.apache.abdera.model.Text$Type, java.lang.String)</name>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="class" confirmed="yes">org.apache.abdera.model.Text$Type</outbound>
                <outbound type="class" confirmed="yes">org.apache.abdera.writer.StreamWriter</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.factory.StreamBuilder.writeText(java.lang.String, java.lang.String, org.apache.abdera.model.Text$Type, java.lang.String)</name>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="class" confirmed="yes">org.apache.abdera.model.Text$Type</outbound>
                <outbound type="class" confirmed="yes">org.apache.abdera.writer.StreamWriter</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.factory.StreamBuilder.writeText(java.lang.String, org.apache.abdera.model.Text$Type, java.lang.String)</name>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="class" confirmed="yes">org.apache.abdera.model.Text$Type</outbound>
                <outbound type="class" confirmed="yes">org.apache.abdera.writer.StreamWriter</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.factory.StreamBuilder.writeText(javax.xml.namespace.QName, org.apache.abdera.model.Text$Type, java.lang.String)</name>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="class" confirmed="no">javax.xml.namespace.QName</outbound>
                <outbound type="class" confirmed="yes">org.apache.abdera.model.Text$Type</outbound>
                <outbound type="class" confirmed="yes">org.apache.abdera.writer.StreamWriter</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.factory.StreamBuilder.writeTitle(java.lang.String)</name>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="class" confirmed="yes">org.apache.abdera.writer.StreamWriter</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.factory.StreamBuilder.writeTitle(org.apache.abdera.model.Text$Type, java.lang.String)</name>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="class" confirmed="yes">org.apache.abdera.model.Text$Type</outbound>
                <outbound type="class" confirmed="yes">org.apache.abdera.writer.StreamWriter</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.factory.StreamBuilder.writeUpdated(java.lang.String)</name>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="class" confirmed="yes">org.apache.abdera.writer.StreamWriter</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.factory.StreamBuilder.writeUpdated(java.util.Date)</name>
                <outbound type="class" confirmed="no">java.util.Date</outbound>
                <outbound type="class" confirmed="yes">org.apache.abdera.writer.StreamWriter</outbound>
            </feature>
        </class>
    </package>
    <package confirmed="yes">
        <name>org.apache.abdera.filter</name>
        <class confirmed="yes">
            <name>org.apache.abdera.filter.ListParseFilter</name>
            <outbound type="class" confirmed="no">java.lang.Object</outbound>
            <outbound type="class" confirmed="yes">org.apache.abdera.filter.ParseFilter</outbound>
            <inbound type="class" confirmed="yes">org.apache.abdera.util.filter.AbstractListParseFilter</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.util.filter.AbstractListParseFilter.add(javax.xml.namespace.QName)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.util.filter.AbstractListParseFilter.add(javax.xml.namespace.QName, javax.xml.namespace.QName)</inbound>
            <feature confirmed="yes">
                <name>org.apache.abdera.filter.ListParseFilter.add(javax.xml.namespace.QName)</name>
                <outbound type="class" confirmed="no">javax.xml.namespace.QName</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.filter.ListParseFilter.add(javax.xml.namespace.QName, javax.xml.namespace.QName)</name>
                <outbound type="class" confirmed="no">javax.xml.namespace.QName</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.filter.ListParseFilter.contains(javax.xml.namespace.QName)</name>
                <outbound type="class" confirmed="no">javax.xml.namespace.QName</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.filter.ListParseFilter.contains(javax.xml.namespace.QName, javax.xml.namespace.QName)</name>
                <outbound type="class" confirmed="no">javax.xml.namespace.QName</outbound>
            </feature>
        </class>
        <class confirmed="yes">
            <name>org.apache.abdera.filter.ParseFilter</name>
            <outbound type="class" confirmed="no">java.io.Serializable</outbound>
            <outbound type="class" confirmed="no">java.lang.Cloneable</outbound>
            <outbound type="class" confirmed="no">java.lang.Object</outbound>
            <inbound type="class" confirmed="yes">org.apache.abdera.filter.ListParseFilter</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.parser.ParserOptions.getParseFilter()</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.parser.ParserOptions.setParseFilter(org.apache.abdera.filter.ParseFilter)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.util.AbstractParserOptions.AbstractParserOptions()</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.util.AbstractParserOptions.clone()</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.util.AbstractParserOptions.getParseFilter()</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.util.AbstractParserOptions.parseFilter</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.util.AbstractParserOptions.setParseFilter(org.apache.abdera.filter.ParseFilter)</inbound>
            <inbound type="class" confirmed="yes">org.apache.abdera.util.filter.AbstractParseFilter</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.util.filter.AbstractParseFilter.setIgnoreComments(boolean)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.util.filter.AbstractParseFilter.setIgnoreProcessingInstructions(boolean)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.util.filter.AbstractParseFilter.setIgnoreWhitespace(boolean)</inbound>
            <inbound type="class" confirmed="yes">org.apache.abdera.util.filter.CompoundParseFilter</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.util.filter.CompoundParseFilter.CompoundParseFilter(org.apache.abdera.filter.ParseFilter[])</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.util.filter.CompoundParseFilter.CompoundParseFilter(org.apache.abdera.util.filter.CompoundParseFilter$Condition, org.apache.abdera.filter.ParseFilter[])</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.util.filter.CompoundParseFilter.acceptable(javax.xml.namespace.QName)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.util.filter.CompoundParseFilter.acceptable(javax.xml.namespace.QName, javax.xml.namespace.QName)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.util.filter.CompoundParseFilter.filters</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.util.filter.CompoundParseFilter.getFilters()</inbound>
            <inbound type="class" confirmed="yes">org.apache.abdera.util.filter.SafeContentWhiteListParseFilter</inbound>
            <feature confirmed="yes">
                <name>org.apache.abdera.filter.ParseFilter.acceptable(javax.xml.namespace.QName)</name>
                <outbound type="class" confirmed="no">javax.xml.namespace.QName</outbound>
                <inbound type="feature" confirmed="yes">org.apache.abdera.util.filter.CompoundParseFilter.acceptable(javax.xml.namespace.QName)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.filter.ParseFilter.acceptable(javax.xml.namespace.QName, javax.xml.namespace.QName)</name>
                <outbound type="class" confirmed="no">javax.xml.namespace.QName</outbound>
                <inbound type="feature" confirmed="yes">org.apache.abdera.util.filter.CompoundParseFilter.acceptable(javax.xml.namespace.QName, javax.xml.namespace.QName)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.filter.ParseFilter.clone()</name>
                <outbound type="class" confirmed="no">java.lang.CloneNotSupportedException</outbound>
                <outbound type="class" confirmed="no">java.lang.Object</outbound>
                <inbound type="feature" confirmed="yes">org.apache.abdera.util.AbstractParserOptions.clone()</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.filter.ParseFilter.getIgnoreComments()</name>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.filter.ParseFilter.getIgnoreProcessingInstructions()</name>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.filter.ParseFilter.getIgnoreWhitespace()</name>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.filter.ParseFilter.setIgnoreComments(boolean)</name>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.filter.ParseFilter.setIgnoreProcessingInstructions(boolean)</name>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.filter.ParseFilter.setIgnoreWhitespace(boolean)</name>
            </feature>
        </class>
    </package>
    <package confirmed="no">
        <name>org.apache.abdera.i18n.iri</name>
        <class confirmed="no">
            <name>org.apache.abdera.i18n.iri.IRI</name>
            <inbound type="feature" confirmed="yes">org.apache.abdera.factory.StreamBuilder.writeBase(org.apache.abdera.i18n.iri.IRI)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.factory.StreamBuilder.writeIRIElement(java.lang.String, java.lang.String, java.lang.String, org.apache.abdera.i18n.iri.IRI)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.factory.StreamBuilder.writeIRIElement(java.lang.String, java.lang.String, org.apache.abdera.i18n.iri.IRI)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.factory.StreamBuilder.writeIRIElement(java.lang.String, org.apache.abdera.i18n.iri.IRI)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.factory.StreamBuilder.writeIRIElement(javax.xml.namespace.QName, org.apache.abdera.i18n.iri.IRI)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.factory.StreamBuilder.writeIcon(org.apache.abdera.i18n.iri.IRI)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.factory.StreamBuilder.writeId(org.apache.abdera.i18n.iri.IRI)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.factory.StreamBuilder.writeLogo(org.apache.abdera.i18n.iri.IRI)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.model.Categories.getHref()</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.model.Categories.getResolvedHref()</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.model.Categories.getScheme()</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.model.Category.getScheme()</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.model.Collection.getHref()</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.model.Collection.getResolvedHref()</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.model.Content.getResolvedSrc()</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.model.Content.getSrc()</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.model.Document.getBaseUri()</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.model.Element.getBaseUri()</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.model.Element.getResolvedBaseUri()</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.model.Element.setBaseUri(org.apache.abdera.i18n.iri.IRI)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.model.ElementWrapper.getBaseUri()</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.model.ElementWrapper.getResolvedBaseUri()</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.model.ElementWrapper.setBaseUri(org.apache.abdera.i18n.iri.IRI)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.model.Entry.getAlternateLinkResolvedHref()</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.model.Entry.getAlternateLinkResolvedHref(java.lang.String, java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.model.Entry.getContentSrc()</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.model.Entry.getEditLinkResolvedHref()</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.model.Entry.getEditMediaLinkResolvedHref()</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.model.Entry.getEditMediaLinkResolvedHref(java.lang.String, java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.model.Entry.getEnclosureLinkResolvedHref()</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.model.Entry.getId()</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.model.Entry.getLinkResolvedHref(java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.model.Entry.getSelfLinkResolvedHref()</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.model.Entry.setContent(org.apache.abdera.i18n.iri.IRI, java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.model.Generator.getResolvedUri()</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.model.Generator.getUri()</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.model.IRIElement.getResolvedValue()</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.model.IRIElement.getValue()</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.model.Link.getHref()</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.model.Link.getResolvedHref()</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.model.Person.getUri()</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.model.PersonWrapper.getUri()</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.model.Source.getAlternateLinkResolvedHref()</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.model.Source.getAlternateLinkResolvedHref(java.lang.String, java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.model.Source.getIcon()</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.model.Source.getId()</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.model.Source.getLinkResolvedHref(java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.model.Source.getLogo()</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.model.Source.getSelfLinkResolvedHref()</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.protocol.Message.getContentLocation()</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.protocol.Response.getLocation()</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.protocol.util.AbstractMessage.getContentLocation()</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.protocol.util.AbstractResponse.getLocation()</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.util.AbstractStreamWriter.writeBase(org.apache.abdera.i18n.iri.IRI)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.util.AbstractStreamWriter.writeIRIElement(java.lang.String, java.lang.String, java.lang.String, org.apache.abdera.i18n.iri.IRI)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.util.AbstractStreamWriter.writeIRIElement(java.lang.String, java.lang.String, org.apache.abdera.i18n.iri.IRI)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.util.AbstractStreamWriter.writeIRIElement(java.lang.String, org.apache.abdera.i18n.iri.IRI)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.util.AbstractStreamWriter.writeIRIElement(javax.xml.namespace.QName, org.apache.abdera.i18n.iri.IRI)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.util.AbstractStreamWriter.writeIcon(org.apache.abdera.i18n.iri.IRI)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.util.AbstractStreamWriter.writeId(org.apache.abdera.i18n.iri.IRI)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.util.AbstractStreamWriter.writeLogo(org.apache.abdera.i18n.iri.IRI)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.writer.StreamWriter.writeBase(org.apache.abdera.i18n.iri.IRI)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.writer.StreamWriter.writeIRIElement(java.lang.String, java.lang.String, java.lang.String, org.apache.abdera.i18n.iri.IRI)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.writer.StreamWriter.writeIRIElement(java.lang.String, java.lang.String, org.apache.abdera.i18n.iri.IRI)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.writer.StreamWriter.writeIRIElement(java.lang.String, org.apache.abdera.i18n.iri.IRI)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.writer.StreamWriter.writeIRIElement(javax.xml.namespace.QName, org.apache.abdera.i18n.iri.IRI)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.writer.StreamWriter.writeIcon(org.apache.abdera.i18n.iri.IRI)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.writer.StreamWriter.writeId(org.apache.abdera.i18n.iri.IRI)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.writer.StreamWriter.writeLogo(org.apache.abdera.i18n.iri.IRI)</inbound>
            <feature confirmed="no">
                <name>org.apache.abdera.i18n.iri.IRI.IRI(java.lang.String)</name>
                <inbound type="feature" confirmed="yes">org.apache.abdera.protocol.util.AbstractMessage.getContentLocation()</inbound>
                <inbound type="feature" confirmed="yes">org.apache.abdera.protocol.util.AbstractResponse.getLocation()</inbound>
            </feature>
            <feature confirmed="no">
                <name>org.apache.abdera.i18n.iri.IRI.preinit()</name>
                <inbound type="feature" confirmed="yes">org.apache.abdera.Abdera.Abdera(org.apache.abdera.util.Configuration)</inbound>
            </feature>
            <feature confirmed="no">
                <name>org.apache.abdera.i18n.iri.IRI.toString()</name>
                <inbound type="feature" confirmed="yes">org.apache.abdera.util.AbstractStreamWriter.writeBase(org.apache.abdera.i18n.iri.IRI)</inbound>
                <inbound type="feature" confirmed="yes">org.apache.abdera.util.AbstractStreamWriter.writeIRIElement(java.lang.String, java.lang.String, java.lang.String, org.apache.abdera.i18n.iri.IRI)</inbound>
                <inbound type="feature" confirmed="yes">org.apache.abdera.util.AbstractStreamWriter.writeIRIElement(java.lang.String, java.lang.String, org.apache.abdera.i18n.iri.IRI)</inbound>
                <inbound type="feature" confirmed="yes">org.apache.abdera.util.AbstractStreamWriter.writeIRIElement(java.lang.String, org.apache.abdera.i18n.iri.IRI)</inbound>
                <inbound type="feature" confirmed="yes">org.apache.abdera.util.AbstractStreamWriter.writeIRIElement(javax.xml.namespace.QName, org.apache.abdera.i18n.iri.IRI)</inbound>
            </feature>
        </class>
    </package>
    <package confirmed="no">
        <name>org.apache.abdera.i18n.rfc4646</name>
        <class confirmed="no">
            <name>org.apache.abdera.i18n.rfc4646.Lang</name>
            <inbound type="feature" confirmed="yes">org.apache.abdera.factory.StreamBuilder.writeLanguage(org.apache.abdera.i18n.rfc4646.Lang)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.model.Document.getLanguageTag()</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.model.Element.getLanguageTag()</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.model.ElementWrapper.getLanguageTag()</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.util.AbstractStreamWriter.writeLanguage(java.util.Locale)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.util.AbstractStreamWriter.writeLanguage(org.apache.abdera.i18n.rfc4646.Lang)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.writer.StreamWriter.writeLanguage(org.apache.abdera.i18n.rfc4646.Lang)</inbound>
            <feature confirmed="no">
                <name>org.apache.abdera.i18n.rfc4646.Lang.Lang(java.util.Locale)</name>
                <inbound type="feature" confirmed="yes">org.apache.abdera.util.AbstractStreamWriter.writeLanguage(java.util.Locale)</inbound>
            </feature>
            <feature confirmed="no">
                <name>org.apache.abdera.i18n.rfc4646.Lang.toString()</name>
                <inbound type="feature" confirmed="yes">org.apache.abdera.util.AbstractStreamWriter.writeLanguage(org.apache.abdera.i18n.rfc4646.Lang)</inbound>
            </feature>
        </class>
    </package>
    <package confirmed="no">
        <name>org.apache.abdera.i18n.text</name>
        <class confirmed="no">
            <name>org.apache.abdera.i18n.text.CharUtils</name>
            <feature confirmed="no">
                <name>org.apache.abdera.i18n.text.CharUtils.invset_contains(int[], int)</name>
                <inbound type="feature" confirmed="yes">org.apache.abdera.util.XmlUtil.restricted(org.apache.abdera.util.XmlUtil$XMLVersion, int)</inbound>
            </feature>
        </class>
        <class confirmed="no">
            <name>org.apache.abdera.i18n.text.Filter</name>
            <inbound type="feature" confirmed="yes">org.apache.abdera.util.XmlRestrictedCharReader.XmlRestrictedCharReader(java.io.Reader, org.apache.abdera.util.XmlUtil$XMLVersion, char)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.util.XmlUtil$XMLVersion.XmlUtil$XMLVersion(java.lang.String, int)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.util.XmlUtil$XMLVersion.filter</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.util.XmlUtil$XMLVersion.filter()</inbound>
            <inbound type="class" confirmed="yes">org.apache.abdera.util.XmlUtil$XmlFilter</inbound>
        </class>
        <class confirmed="no">
            <name>org.apache.abdera.i18n.text.Localizer</name>
            <feature confirmed="no">
                <name>org.apache.abdera.i18n.text.Localizer.get(java.lang.String)</name>
                <inbound type="feature" confirmed="yes">org.apache.abdera.util.EntityTag.generate(java.lang.String[])</inbound>
                <inbound type="feature" confirmed="yes">org.apache.abdera.util.EntityTag.static {}</inbound>
            </feature>
            <feature confirmed="no">
                <name>org.apache.abdera.i18n.text.Localizer.sprintf(java.lang.String, java.lang.Object[])</name>
                <inbound type="feature" confirmed="yes">org.apache.abdera.util.AbderaConfiguration.throwex(java.lang.String, java.lang.String, java.lang.Throwable)</inbound>
            </feature>
        </class>
        <class confirmed="no">
            <name>org.apache.abdera.i18n.text.Rfc2047Helper</name>
            <feature confirmed="no">
                <name>org.apache.abdera.i18n.text.Rfc2047Helper.decode(java.lang.String)</name>
                <inbound type="feature" confirmed="yes">org.apache.abdera.protocol.util.AbstractMessage.getDecodedHeader(java.lang.String)</inbound>
                <inbound type="feature" confirmed="yes">org.apache.abdera.protocol.util.AbstractMessage.getDecodedHeaders(java.lang.String)</inbound>
            </feature>
        </class>
        <class confirmed="no">
            <name>org.apache.abdera.i18n.text.UrlEncoding</name>
            <feature confirmed="no">
                <name>org.apache.abdera.i18n.text.UrlEncoding.decode(java.lang.String)</name>
                <inbound type="feature" confirmed="yes">org.apache.abdera.protocol.util.AbstractMessage.getDecodedHeader(java.lang.String)</inbound>
                <inbound type="feature" confirmed="yes">org.apache.abdera.protocol.util.AbstractMessage.getDecodedHeaders(java.lang.String)</inbound>
            </feature>
        </class>
    </package>
    <package confirmed="no">
        <name>org.apache.abdera.i18n.text.io</name>
        <class confirmed="no">
            <name>org.apache.abdera.i18n.text.io.CompressionUtil</name>
            <feature confirmed="no">
                <name>org.apache.abdera.i18n.text.io.CompressionUtil.getEncodedOutputStream(java.io.OutputStream, org.apache.abdera.i18n.text.io.CompressionUtil$CompressionCodec[])</name>
                <inbound type="feature" confirmed="yes">org.apache.abdera.util.AbstractWriter.getCompressedOutputStream(java.io.OutputStream, org.apache.abdera.writer.WriterOptions)</inbound>
            </feature>
            <feature confirmed="no">
                <name>org.apache.abdera.i18n.text.io.CompressionUtil.splitAndTrim(java.lang.String, java.lang.String, boolean)</name>
                <inbound type="feature" confirmed="yes">org.apache.abdera.protocol.util.CacheControlUtil$CacheControlParser.getValues(org.apache.abdera.protocol.util.CacheControlUtil$Directive)</inbound>
            </feature>
        </class>
        <class confirmed="no">
            <name>org.apache.abdera.i18n.text.io.CompressionUtil$CompressionCodec</name>
            <inbound type="feature" confirmed="yes">org.apache.abdera.parser.ParserOptions.getCompressionCodecs()</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.parser.ParserOptions.setCompressionCodecs(org.apache.abdera.i18n.text.io.CompressionUtil$CompressionCodec[])</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.util.AbstractParserOptions.AbstractParserOptions()</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.util.AbstractParserOptions.codecs</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.util.AbstractParserOptions.getCompressionCodecs()</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.util.AbstractParserOptions.setCompressionCodecs(org.apache.abdera.i18n.text.io.CompressionUtil$CompressionCodec[])</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.util.AbstractWriter.finishCompressedOutputStream(java.io.OutputStream, org.apache.abdera.writer.WriterOptions)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.util.AbstractWriter.getCompressedOutputStream(java.io.OutputStream, org.apache.abdera.writer.WriterOptions)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.util.AbstractWriterOptions.AbstractWriterOptions()</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.util.AbstractWriterOptions.codecs</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.util.AbstractWriterOptions.getCompressionCodecs()</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.util.AbstractWriterOptions.setCompressionCodecs(org.apache.abdera.i18n.text.io.CompressionUtil$CompressionCodec[])</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.writer.WriterOptions.getCompressionCodecs()</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.writer.WriterOptions.setCompressionCodecs(org.apache.abdera.i18n.text.io.CompressionUtil$CompressionCodec[])</inbound>
        </class>
        <class confirmed="no">
            <name>org.apache.abdera.i18n.text.io.FilteredCharReader</name>
            <inbound type="class" confirmed="yes">org.apache.abdera.util.XmlRestrictedCharReader</inbound>
            <feature confirmed="no">
                <name>org.apache.abdera.i18n.text.io.FilteredCharReader.FilteredCharReader(java.io.Reader, org.apache.abdera.i18n.text.Filter, char)</name>
                <inbound type="feature" confirmed="yes">org.apache.abdera.util.XmlRestrictedCharReader.XmlRestrictedCharReader(java.io.Reader, org.apache.abdera.util.XmlUtil$XMLVersion, char)</inbound>
            </feature>
        </class>
    </package>
    <package confirmed="yes">
        <name>org.apache.abdera.model</name>
        <class confirmed="yes">
            <name>org.apache.abdera.model.AtomDate</name>
            <outbound type="class" confirmed="no">java.io.Serializable</outbound>
            <outbound type="class" confirmed="no">java.lang.Cloneable</outbound>
            <outbound type="class" confirmed="no">java.lang.Object</outbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.model.DateTime.getValue()</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.model.DateTime.setValue(org.apache.abdera.model.AtomDate)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.model.DateTimeWrapper.getCalendar()</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.model.DateTimeWrapper.getDate()</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.model.DateTimeWrapper.getString()</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.model.DateTimeWrapper.getTime()</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.model.DateTimeWrapper.getValue()</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.model.DateTimeWrapper.setCalendar(java.util.Calendar)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.model.DateTimeWrapper.setDate(java.util.Date)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.model.DateTimeWrapper.setString(java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.model.DateTimeWrapper.setTime(long)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.model.DateTimeWrapper.setValue(org.apache.abdera.model.AtomDate)</inbound>
            <feature confirmed="yes">
                <name>org.apache.abdera.model.AtomDate.AtomDate()</name>
                <outbound type="class" confirmed="no">java.util.Date</outbound>
                <outbound type="feature" confirmed="no">java.util.Date.Date()</outbound>
                <outbound type="feature" confirmed="yes">org.apache.abdera.model.AtomDate.AtomDate(java.util.Date)</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.model.AtomDate.AtomDate(java.lang.String)</name>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="class" confirmed="no">java.util.Date</outbound>
                <outbound type="feature" confirmed="yes">org.apache.abdera.model.AtomDate.AtomDate(java.util.Date)</outbound>
                <outbound type="feature" confirmed="yes">org.apache.abdera.model.AtomDate.parse(java.lang.String)</outbound>
                <inbound type="feature" confirmed="yes">org.apache.abdera.model.AtomDate.valueOf(java.lang.String)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.model.AtomDate.AtomDate(java.util.Calendar)</name>
                <outbound type="class" confirmed="no">java.util.Calendar</outbound>
                <outbound type="feature" confirmed="no">java.util.Calendar.getTime()</outbound>
                <outbound type="class" confirmed="no">java.util.Date</outbound>
                <outbound type="feature" confirmed="yes">org.apache.abdera.model.AtomDate.AtomDate(java.util.Date)</outbound>
                <inbound type="feature" confirmed="yes">org.apache.abdera.model.AtomDate.valueOf(java.util.Calendar)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.model.AtomDate.AtomDate(java.util.Date)</name>
                <outbound type="class" confirmed="no">java.lang.Object</outbound>
                <outbound type="feature" confirmed="no">java.lang.Object.Object()</outbound>
                <outbound type="class" confirmed="no">java.util.Date</outbound>
                <outbound type="feature" confirmed="no">java.util.Date.clone()</outbound>
                <outbound type="feature" confirmed="yes">org.apache.abdera.model.AtomDate.value</outbound>
                <inbound type="feature" confirmed="yes">org.apache.abdera.model.AtomDate.AtomDate()</inbound>
                <inbound type="feature" confirmed="yes">org.apache.abdera.model.AtomDate.AtomDate(java.lang.String)</inbound>
                <inbound type="feature" confirmed="yes">org.apache.abdera.model.AtomDate.AtomDate(java.util.Calendar)</inbound>
                <inbound type="feature" confirmed="yes">org.apache.abdera.model.AtomDate.AtomDate(long)</inbound>
                <inbound type="feature" confirmed="yes">org.apache.abdera.model.AtomDate.valueOf(java.util.Date)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.model.AtomDate.AtomDate(long)</name>
                <outbound type="class" confirmed="no">java.util.Date</outbound>
                <outbound type="feature" confirmed="no">java.util.Date.Date(long)</outbound>
                <outbound type="feature" confirmed="yes">org.apache.abdera.model.AtomDate.AtomDate(java.util.Date)</outbound>
                <inbound type="feature" confirmed="yes">org.apache.abdera.model.AtomDate.valueOf(long)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.model.AtomDate.PATTERN</name>
                <outbound type="class" confirmed="no">java.util.regex.Pattern</outbound>
                <inbound type="feature" confirmed="yes">org.apache.abdera.model.AtomDate.parse(java.lang.String)</inbound>
                <inbound type="feature" confirmed="yes">org.apache.abdera.model.AtomDate.static {}</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.model.AtomDate.clone()</name>
                <outbound type="feature" confirmed="no">java.lang.AssertionError.AssertionError(java.lang.Object)</outbound>
                <outbound type="class" confirmed="no">java.lang.CloneNotSupportedException</outbound>
                <outbound type="class" confirmed="no">java.lang.Object</outbound>
                <outbound type="feature" confirmed="no">java.lang.Object.clone()</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.model.AtomDate.equals(java.lang.Object)</name>
                <outbound type="class" confirmed="no">java.lang.Object</outbound>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="class" confirmed="no">java.util.Calendar</outbound>
                <outbound type="feature" confirmed="no">java.util.Calendar.getTime()</outbound>
                <outbound type="class" confirmed="no">java.util.Date</outbound>
                <outbound type="feature" confirmed="no">java.util.Date.equals(java.lang.Object)</outbound>
                <outbound type="feature" confirmed="yes">org.apache.abdera.model.AtomDate.parse(java.lang.String)</outbound>
                <outbound type="feature" confirmed="yes">org.apache.abdera.model.AtomDate.value</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.model.AtomDate.format(java.util.Date)</name>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="class" confirmed="no">java.lang.StringBuilder</outbound>
                <outbound type="feature" confirmed="no">java.lang.StringBuilder.StringBuilder()</outbound>
                <outbound type="feature" confirmed="no">java.lang.StringBuilder.append(char)</outbound>
                <outbound type="feature" confirmed="no">java.lang.StringBuilder.append(int)</outbound>
                <outbound type="feature" confirmed="no">java.lang.StringBuilder.toString()</outbound>
                <outbound type="class" confirmed="no">java.util.Calendar</outbound>
                <outbound type="feature" confirmed="no">java.util.Calendar.get(int)</outbound>
                <outbound type="feature" confirmed="no">java.util.Calendar.getInstance(java.util.TimeZone)</outbound>
                <outbound type="feature" confirmed="no">java.util.Calendar.setTime(java.util.Date)</outbound>
                <outbound type="class" confirmed="no">java.util.Date</outbound>
                <outbound type="class" confirmed="no">java.util.TimeZone</outbound>
                <outbound type="feature" confirmed="no">java.util.TimeZone.getTimeZone(java.lang.String)</outbound>
                <inbound type="feature" confirmed="yes">org.apache.abdera.model.AtomDate.getValue()</inbound>
                <inbound type="feature" confirmed="yes">org.apache.abdera.util.AbstractStreamWriter.writeAttribute(java.lang.String, java.lang.String, java.lang.String, java.util.Date)</inbound>
                <inbound type="feature" confirmed="yes">org.apache.abdera.util.AbstractStreamWriter.writeDate(javax.xml.namespace.QName, java.util.Date)</inbound>
                <inbound type="feature" confirmed="yes">org.apache.abdera.util.AbstractStreamWriter.writeElementText(java.util.Date)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.model.AtomDate.getCalendar()</name>
                <outbound type="class" confirmed="no">java.util.Calendar</outbound>
                <outbound type="feature" confirmed="no">java.util.Calendar.getInstance()</outbound>
                <outbound type="feature" confirmed="no">java.util.Calendar.setTime(java.util.Date)</outbound>
                <outbound type="class" confirmed="no">java.util.Date</outbound>
                <outbound type="feature" confirmed="yes">org.apache.abdera.model.AtomDate.value</outbound>
                <inbound type="feature" confirmed="yes">org.apache.abdera.model.DateTimeWrapper.getCalendar()</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.model.AtomDate.getDate()</name>
                <outbound type="class" confirmed="no">java.lang.Object</outbound>
                <outbound type="class" confirmed="no">java.util.Date</outbound>
                <outbound type="feature" confirmed="no">java.util.Date.clone()</outbound>
                <outbound type="feature" confirmed="yes">org.apache.abdera.model.AtomDate.value</outbound>
                <inbound type="feature" confirmed="yes">org.apache.abdera.model.DateTimeWrapper.getDate()</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.model.AtomDate.getTime()</name>
                <outbound type="class" confirmed="no">java.util.Date</outbound>
                <outbound type="feature" confirmed="no">java.util.Date.getTime()</outbound>
                <outbound type="feature" confirmed="yes">org.apache.abdera.model.AtomDate.value</outbound>
                <inbound type="feature" confirmed="yes">org.apache.abdera.model.DateTimeWrapper.getTime()</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.model.AtomDate.getValue()</name>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="class" confirmed="no">java.util.Date</outbound>
                <outbound type="feature" confirmed="yes">org.apache.abdera.model.AtomDate.format(java.util.Date)</outbound>
                <outbound type="feature" confirmed="yes">org.apache.abdera.model.AtomDate.value</outbound>
                <inbound type="feature" confirmed="yes">org.apache.abdera.model.AtomDate.toString()</inbound>
                <inbound type="feature" confirmed="yes">org.apache.abdera.model.DateTimeWrapper.getString()</inbound>
                <inbound type="feature" confirmed="yes">org.apache.abdera.model.DateTimeWrapper.setCalendar(java.util.Calendar)</inbound>
                <inbound type="feature" confirmed="yes">org.apache.abdera.model.DateTimeWrapper.setDate(java.util.Date)</inbound>
                <inbound type="feature" confirmed="yes">org.apache.abdera.model.DateTimeWrapper.setString(java.lang.String)</inbound>
                <inbound type="feature" confirmed="yes">org.apache.abdera.model.DateTimeWrapper.setTime(long)</inbound>
                <inbound type="feature" confirmed="yes">org.apache.abdera.model.DateTimeWrapper.setValue(org.apache.abdera.model.AtomDate)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.model.AtomDate.hashCode()</name>
                <outbound type="class" confirmed="no">java.util.Date</outbound>
                <outbound type="feature" confirmed="no">java.util.Date.hashCode()</outbound>
                <outbound type="feature" confirmed="yes">org.apache.abdera.model.AtomDate.value</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.model.AtomDate.parse(java.lang.String)</name>
                <outbound type="class" confirmed="no">java.lang.CharSequence</outbound>
                <outbound type="feature" confirmed="no">java.lang.IllegalArgumentException.IllegalArgumentException(java.lang.String)</outbound>
                <outbound type="feature" confirmed="no">java.lang.Integer.parseInt(java.lang.String)</outbound>
                <outbound type="class" confirmed="no">java.lang.Object</outbound>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="feature" confirmed="no">java.lang.String.equals(java.lang.Object)</outbound>
                <outbound type="class" confirmed="no">java.util.Calendar</outbound>
                <outbound type="feature" confirmed="no">java.util.Calendar.getInstance(java.util.TimeZone)</outbound>
                <outbound type="feature" confirmed="no">java.util.Calendar.getTime()</outbound>
                <outbound type="feature" confirmed="no">java.util.Calendar.set(int, int)</outbound>
                <outbound type="class" confirmed="no">java.util.Date</outbound>
                <outbound type="class" confirmed="no">java.util.TimeZone</outbound>
                <outbound type="feature" confirmed="no">java.util.TimeZone.getTimeZone(java.lang.String)</outbound>
                <outbound type="class" confirmed="no">java.util.regex.Matcher</outbound>
                <outbound type="feature" confirmed="no">java.util.regex.Matcher.find()</outbound>
                <outbound type="feature" confirmed="no">java.util.regex.Matcher.group(int)</outbound>
                <outbound type="class" confirmed="no">java.util.regex.Pattern</outbound>
                <outbound type="feature" confirmed="no">java.util.regex.Pattern.matcher(java.lang.CharSequence)</outbound>
                <outbound type="feature" confirmed="yes">org.apache.abdera.model.AtomDate.PATTERN</outbound>
                <inbound type="feature" confirmed="yes">org.apache.abdera.model.AtomDate.AtomDate(java.lang.String)</inbound>
                <inbound type="feature" confirmed="yes">org.apache.abdera.model.AtomDate.equals(java.lang.Object)</inbound>
                <inbound type="feature" confirmed="yes">org.apache.abdera.model.AtomDate.setValue(java.lang.String)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.model.AtomDate.serialVersionUID</name>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.model.AtomDate.setValue(java.lang.String)</name>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="class" confirmed="no">java.util.Date</outbound>
                <outbound type="feature" confirmed="yes">org.apache.abdera.model.AtomDate.parse(java.lang.String)</outbound>
                <outbound type="feature" confirmed="yes">org.apache.abdera.model.AtomDate.value</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.model.AtomDate.setValue(java.util.Calendar)</name>
                <outbound type="class" confirmed="no">java.util.Calendar</outbound>
                <outbound type="feature" confirmed="no">java.util.Calendar.getTime()</outbound>
                <outbound type="class" confirmed="no">java.util.Date</outbound>
                <outbound type="feature" confirmed="yes">org.apache.abdera.model.AtomDate.value</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.model.AtomDate.setValue(java.util.Date)</name>
                <outbound type="class" confirmed="no">java.lang.Object</outbound>
                <outbound type="class" confirmed="no">java.util.Date</outbound>
                <outbound type="feature" confirmed="no">java.util.Date.clone()</outbound>
                <outbound type="feature" confirmed="yes">org.apache.abdera.model.AtomDate.value</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.model.AtomDate.setValue(long)</name>
                <outbound type="class" confirmed="no">java.util.Date</outbound>
                <outbound type="feature" confirmed="no">java.util.Date.Date(long)</outbound>
                <outbound type="feature" confirmed="yes">org.apache.abdera.model.AtomDate.value</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.model.AtomDate.static {}</name>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="class" confirmed="no">java.util.regex.Pattern</outbound>
                <outbound type="feature" confirmed="no">java.util.regex.Pattern.compile(java.lang.String)</outbound>
                <outbound type="feature" confirmed="yes">org.apache.abdera.model.AtomDate.PATTERN</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.model.AtomDate.toString()</name>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="feature" confirmed="yes">org.apache.abdera.model.AtomDate.getValue()</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.model.AtomDate.value</name>
                <outbound type="class" confirmed="no">java.util.Date</outbound>
                <inbound type="feature" confirmed="yes">org.apache.abdera.model.AtomDate.AtomDate(java.util.Date)</inbound>
                <inbound type="feature" confirmed="yes">org.apache.abdera.model.AtomDate.equals(java.lang.Object)</inbound>
                <inbound type="feature" confirmed="yes">org.apache.abdera.model.AtomDate.getCalendar()</inbound>
                <inbound type="feature" confirmed="yes">org.apache.abdera.model.AtomDate.getDate()</inbound>
                <inbound type="feature" confirmed="yes">org.apache.abdera.model.AtomDate.getTime()</inbound>
                <inbound type="feature" confirmed="yes">org.apache.abdera.model.AtomDate.getValue()</inbound>
                <inbound type="feature" confirmed="yes">org.apache.abdera.model.AtomDate.hashCode()</inbound>
                <inbound type="feature" confirmed="yes">org.apache.abdera.model.AtomDate.setValue(java.lang.String)</inbound>
                <inbound type="feature" confirmed="yes">org.apache.abdera.model.AtomDate.setValue(java.util.Calendar)</inbound>
                <inbound type="feature" confirmed="yes">org.apache.abdera.model.AtomDate.setValue(java.util.Date)</inbound>
                <inbound type="feature" confirmed="yes">org.apache.abdera.model.AtomDate.setValue(long)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.model.AtomDate.valueOf(java.lang.String)</name>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="feature" confirmed="yes">org.apache.abdera.model.AtomDate.AtomDate(java.lang.String)</outbound>
                <inbound type="feature" confirmed="yes">org.apache.abdera.model.DateTimeWrapper.getValue()</inbound>
                <inbound type="feature" confirmed="yes">org.apache.abdera.model.DateTimeWrapper.setString(java.lang.String)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.model.AtomDate.valueOf(java.util.Calendar)</name>
                <outbound type="class" confirmed="no">java.util.Calendar</outbound>
                <outbound type="feature" confirmed="yes">org.apache.abdera.model.AtomDate.AtomDate(java.util.Calendar)</outbound>
                <inbound type="feature" confirmed="yes">org.apache.abdera.model.DateTimeWrapper.setCalendar(java.util.Calendar)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.model.AtomDate.valueOf(java.util.Date)</name>
                <outbound type="class" confirmed="no">java.util.Date</outbound>
                <outbound type="feature" confirmed="yes">org.apache.abdera.model.AtomDate.AtomDate(java.util.Date)</outbound>
                <inbound type="feature" confirmed="yes">org.apache.abdera.model.DateTimeWrapper.setDate(java.util.Date)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.model.AtomDate.valueOf(long)</name>
                <outbound type="feature" confirmed="yes">org.apache.abdera.model.AtomDate.AtomDate(long)</outbound>
                <inbound type="feature" confirmed="yes">org.apache.abdera.model.DateTimeWrapper.setTime(long)</inbound>
            </feature>
        </class>
        <class confirmed="yes">
            <name>org.apache.abdera.model.Attribute</name>
            <outbound type="class" confirmed="no">java.lang.Object</outbound>
            <feature confirmed="yes">
                <name>org.apache.abdera.model.Attribute.getFactory()</name>
                <outbound type="class" confirmed="yes">org.apache.abdera.factory.Factory</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.model.Attribute.getQName()</name>
                <outbound type="class" confirmed="no">javax.xml.namespace.QName</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.model.Attribute.getText()</name>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.model.Attribute.setText(java.lang.String)</name>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
            </feature>
        </class>
        <class confirmed="yes">
            <name>org.apache.abdera.model.Base</name>
            <outbound type="class" confirmed="no">java.lang.Cloneable</outbound>
            <outbound type="class" confirmed="no">java.lang.Object</outbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.factory.ExtensionFactory.getMimeType(org.apache.abdera.model.Base)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.factory.ExtensionFactoryMap.getMimeType(org.apache.abdera.model.Base)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.factory.Factory.getMimeType(org.apache.abdera.model.Base)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.factory.Factory.newCategories(org.apache.abdera.model.Base)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.factory.Factory.newDiv(org.apache.abdera.model.Base)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.factory.Factory.newElement(javax.xml.namespace.QName, org.apache.abdera.model.Base)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.factory.Factory.newEntry(org.apache.abdera.model.Base)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.factory.Factory.newExtensionElement(javax.xml.namespace.QName, org.apache.abdera.model.Base)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.factory.Factory.newFeed(org.apache.abdera.model.Base)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.factory.Factory.newService(org.apache.abdera.model.Base)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.factory.StreamBuilder.StreamBuilder(org.apache.abdera.Abdera)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.factory.StreamBuilder.current</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.factory.StreamBuilder.getBase()</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.factory.StreamBuilder.root</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.model.Comment.getParentElement()</inbound>
            <inbound type="class" confirmed="yes">org.apache.abdera.model.Document</inbound>
            <inbound type="class" confirmed="yes">org.apache.abdera.model.Element</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.model.Element.getParentElement()</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.model.ElementWrapper.addComment(java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.model.ElementWrapper.complete()</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.model.ElementWrapper.getParentElement()</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.model.ProcessingInstruction.getParentElement()</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.model.TextValue.getParentElement()</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.protocol.error.Error.create(org.apache.abdera.Abdera, int, java.lang.String, java.lang.Throwable)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.util.AbderaDataSource.AbderaDataSource(org.apache.abdera.model.Base)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.util.AbderaDataSource.read(org.apache.abdera.model.Base)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.util.AbderaSource.AbderaSource(org.apache.abdera.model.Base)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.util.AbderaSource.base</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.util.AbderaSource.getInputStream()</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.util.AbstractExtensionFactory.getMimeType(org.apache.abdera.model.Base)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.util.AbstractWriter.write(org.apache.abdera.model.Base)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.util.AbstractWriter.writeTo(org.apache.abdera.model.Base, java.io.OutputStream)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.util.AbstractWriter.writeTo(org.apache.abdera.model.Base, java.io.Writer)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.util.AbstractWriter.writeTo(org.apache.abdera.model.Base, java.nio.channels.WritableByteChannel)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.util.AbstractWriter.writeTo(org.apache.abdera.model.Base, java.nio.channels.WritableByteChannel, org.apache.abdera.writer.WriterOptions)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.util.AbstractXPath.booleanValueOf(java.lang.String, org.apache.abdera.model.Base)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.util.AbstractXPath.evaluate(java.lang.String, org.apache.abdera.model.Base)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.util.AbstractXPath.numericValueOf(java.lang.String, org.apache.abdera.model.Base)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.util.AbstractXPath.selectNodes(java.lang.String, org.apache.abdera.model.Base)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.util.AbstractXPath.selectSingleNode(java.lang.String, org.apache.abdera.model.Base)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.util.AbstractXPath.valueOf(java.lang.String, org.apache.abdera.model.Base)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.util.MimeTypeHelper.getMimeType(org.apache.abdera.model.Base)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.writer.Writer.write(org.apache.abdera.model.Base)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.writer.Writer.write(org.apache.abdera.model.Base, org.apache.abdera.writer.WriterOptions)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.writer.Writer.writeTo(org.apache.abdera.model.Base, java.io.OutputStream)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.writer.Writer.writeTo(org.apache.abdera.model.Base, java.io.OutputStream, org.apache.abdera.writer.WriterOptions)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.writer.Writer.writeTo(org.apache.abdera.model.Base, java.io.Writer)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.writer.Writer.writeTo(org.apache.abdera.model.Base, java.io.Writer, org.apache.abdera.writer.WriterOptions)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.writer.Writer.writeTo(org.apache.abdera.model.Base, java.nio.channels.WritableByteChannel)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.writer.Writer.writeTo(org.apache.abdera.model.Base, java.nio.channels.WritableByteChannel, org.apache.abdera.writer.WriterOptions)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.xpath.XPath.booleanValueOf(java.lang.String, org.apache.abdera.model.Base)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.xpath.XPath.booleanValueOf(java.lang.String, org.apache.abdera.model.Base, java.util.Map)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.xpath.XPath.evaluate(java.lang.String, org.apache.abdera.model.Base)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.xpath.XPath.evaluate(java.lang.String, org.apache.abdera.model.Base, java.util.Map)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.xpath.XPath.numericValueOf(java.lang.String, org.apache.abdera.model.Base)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.xpath.XPath.numericValueOf(java.lang.String, org.apache.abdera.model.Base, java.util.Map)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.xpath.XPath.selectNodes(java.lang.String, org.apache.abdera.model.Base)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.xpath.XPath.selectNodes(java.lang.String, org.apache.abdera.model.Base, java.util.Map)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.xpath.XPath.selectSingleNode(java.lang.String, org.apache.abdera.model.Base)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.xpath.XPath.selectSingleNode(java.lang.String, org.apache.abdera.model.Base, java.util.Map)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.xpath.XPath.valueOf(java.lang.String, org.apache.abdera.model.Base)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.xpath.XPath.valueOf(java.lang.String, org.apache.abdera.model.Base, java.util.Map)</inbound>
            <feature confirmed="yes">
                <name>org.apache.abdera.model.Base.addComment(java.lang.String)</name>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.model.Base.clone()</name>
                <outbound type="class" confirmed="no">java.lang.Object</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.model.Base.complete()</name>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.model.Base.getDefaultWriterOptions()</name>
                <outbound type="class" confirmed="yes">org.apache.abdera.writer.WriterOptions</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.model.Base.getFactory()</name>
                <outbound type="class" confirmed="yes">org.apache.abdera.factory.Factory</outbound>
                <inbound type="feature" confirmed="yes">org.apache.abdera.util.MimeTypeHelper.getMimeType(org.apache.abdera.model.Base)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.model.Base.writeTo(java.io.OutputStream)</name>
                <outbound type="class" confirmed="no">java.io.IOException</outbound>
                <outbound type="class" confirmed="no">java.io.OutputStream</outbound>
                <inbound type="feature" confirmed="yes">org.apache.abdera.util.AbderaDataSource.read(org.apache.abdera.model.Base)</inbound>
                <inbound type="feature" confirmed="yes">org.apache.abdera.util.AbderaSource.getInputStream()</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.model.Base.writeTo(java.io.OutputStream, org.apache.abdera.writer.WriterOptions)</name>
                <outbound type="class" confirmed="no">java.io.IOException</outbound>
                <outbound type="class" confirmed="no">java.io.OutputStream</outbound>
                <outbound type="class" confirmed="yes">org.apache.abdera.writer.WriterOptions</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.model.Base.writeTo(java.io.Writer)</name>
                <outbound type="class" confirmed="no">java.io.IOException</outbound>
                <outbound type="class" confirmed="no">java.io.Writer</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.model.Base.writeTo(java.io.Writer, org.apache.abdera.writer.WriterOptions)</name>
                <outbound type="class" confirmed="no">java.io.IOException</outbound>
                <outbound type="class" confirmed="no">java.io.Writer</outbound>
                <outbound type="class" confirmed="yes">org.apache.abdera.writer.WriterOptions</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.model.Base.writeTo(java.lang.String, java.io.OutputStream)</name>
                <outbound type="class" confirmed="no">java.io.IOException</outbound>
                <outbound type="class" confirmed="no">java.io.OutputStream</outbound>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.model.Base.writeTo(java.lang.String, java.io.OutputStream, org.apache.abdera.writer.WriterOptions)</name>
                <outbound type="class" confirmed="no">java.io.IOException</outbound>
                <outbound type="class" confirmed="no">java.io.OutputStream</outbound>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="class" confirmed="yes">org.apache.abdera.writer.WriterOptions</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.model.Base.writeTo(java.lang.String, java.io.Writer)</name>
                <outbound type="class" confirmed="no">java.io.IOException</outbound>
                <outbound type="class" confirmed="no">java.io.Writer</outbound>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.model.Base.writeTo(java.lang.String, java.io.Writer, org.apache.abdera.writer.WriterOptions)</name>
                <outbound type="class" confirmed="no">java.io.IOException</outbound>
                <outbound type="class" confirmed="no">java.io.Writer</outbound>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="class" confirmed="yes">org.apache.abdera.writer.WriterOptions</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.model.Base.writeTo(org.apache.abdera.writer.Writer, java.io.OutputStream)</name>
                <outbound type="class" confirmed="no">java.io.IOException</outbound>
                <outbound type="class" confirmed="no">java.io.OutputStream</outbound>
                <outbound type="class" confirmed="yes">org.apache.abdera.writer.Writer</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.model.Base.writeTo(org.apache.abdera.writer.Writer, java.io.OutputStream, org.apache.abdera.writer.WriterOptions)</name>
                <outbound type="class" confirmed="no">java.io.IOException</outbound>
                <outbound type="class" confirmed="no">java.io.OutputStream</outbound>
                <outbound type="class" confirmed="yes">org.apache.abdera.writer.Writer</outbound>
                <outbound type="class" confirmed="yes">org.apache.abdera.writer.WriterOptions</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.model.Base.writeTo(org.apache.abdera.writer.Writer, java.io.Writer)</name>
                <outbound type="class" confirmed="no">java.io.IOException</outbound>
                <outbound type="class" confirmed="no">java.io.Writer</outbound>
                <outbound type="class" confirmed="yes">org.apache.abdera.writer.Writer</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.model.Base.writeTo(org.apache.abdera.writer.Writer, java.io.Writer, org.apache.abdera.writer.WriterOptions)</name>
                <outbound type="class" confirmed="no">java.io.IOException</outbound>
                <outbound type="class" confirmed="no">java.io.Writer</outbound>
                <outbound type="class" confirmed="yes">org.apache.abdera.writer.Writer</outbound>
                <outbound type="class" confirmed="yes">org.apache.abdera.writer.WriterOptions</outbound>
            </feature>
        </class>
        <class confirmed="yes">
            <name>org.apache.abdera.model.Categories</name>
            <outbound type="class" confirmed="no">java.lang.Object</outbound>
            <outbound type="class" confirmed="yes">org.apache.abdera.model.ExtensibleElement</outbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.Abdera.newCategories()</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.factory.Factory.newCategories()</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.factory.Factory.newCategories(org.apache.abdera.model.Base)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.model.Collection.addCategories()</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.model.Collection.addCategories(java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.model.Collection.addCategories(java.util.List, boolean, java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.model.Collection.addCategories(org.apache.abdera.model.Categories)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.util.MimeTypeHelper.getMimeType(org.apache.abdera.model.Base)</inbound>
            <feature confirmed="yes">
                <name>org.apache.abdera.model.Categories.addCategory(java.lang.String)</name>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="class" confirmed="yes">org.apache.abdera.model.Category</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.model.Categories.addCategory(java.lang.String, java.lang.String, java.lang.String)</name>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="class" confirmed="yes">org.apache.abdera.model.Category</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.model.Categories.addCategory(org.apache.abdera.model.Category)</name>
                <outbound type="class" confirmed="yes">org.apache.abdera.model.Category</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.model.Categories.contains(java.lang.String)</name>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.model.Categories.contains(java.lang.String, java.lang.String)</name>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.model.Categories.getCategories()</name>
                <outbound type="class" confirmed="no">java.util.List</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.model.Categories.getCategories(java.lang.String)</name>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="class" confirmed="no">java.util.List</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.model.Categories.getCategoriesWithScheme()</name>
                <outbound type="class" confirmed="no">java.util.List</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.model.Categories.getCategoriesWithScheme(java.lang.String)</name>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="class" confirmed="no">java.util.List</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.model.Categories.getHref()</name>
                <outbound type="class" confirmed="no">org.apache.abdera.i18n.iri.IRI</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.model.Categories.getResolvedHref()</name>
                <outbound type="class" confirmed="no">org.apache.abdera.i18n.iri.IRI</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.model.Categories.getScheme()</name>
                <outbound type="class" confirmed="no">org.apache.abdera.i18n.iri.IRI</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.model.Categories.isFixed()</name>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.model.Categories.isOutOfLine()</name>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.model.Categories.setFixed(boolean)</name>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.model.Categories.setHref(java.lang.String)</name>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.model.Categories.setScheme(java.lang.String)</name>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
            </feature>
        </class>
        <class confirmed="yes">
            <name>org.apache.abdera.model.Category</name>
            <outbound type="class" confirmed="no">java.lang.Object</outbound>
            <outbound type="class" confirmed="yes">org.apache.abdera.model.ExtensibleElement</outbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.factory.Factory.newCategory()</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.factory.Factory.newCategory(org.apache.abdera.model.Element)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.model.Categories.addCategory(java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.model.Categories.addCategory(java.lang.String, java.lang.String, java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.model.Categories.addCategory(org.apache.abdera.model.Category)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.model.Entry.addCategory(java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.model.Entry.addCategory(java.lang.String, java.lang.String, java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.model.Entry.addCategory(org.apache.abdera.model.Category)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.model.Source.addCategory(java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.model.Source.addCategory(java.lang.String, java.lang.String, java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.model.Source.addCategory(org.apache.abdera.model.Category)</inbound>
            <feature confirmed="yes">
                <name>org.apache.abdera.model.Category.getLabel()</name>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.model.Category.getScheme()</name>
                <outbound type="class" confirmed="no">org.apache.abdera.i18n.iri.IRI</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.model.Category.getTerm()</name>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.model.Category.setLabel(java.lang.String)</name>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.model.Category.setScheme(java.lang.String)</name>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.model.Category.setTerm(java.lang.String)</name>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
            </feature>
        </class>
        <class confirmed="yes">
            <name>org.apache.abdera.model.Collection</name>
            <outbound type="class" confirmed="no">java.lang.Object</outbound>
            <outbound type="class" confirmed="yes">org.apache.abdera.model.ExtensibleElement</outbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.factory.Factory.newCollection()</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.factory.Factory.newCollection(org.apache.abdera.model.Element)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.model.Service.getCollection(java.lang.String, java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.model.Service.getCollectionThatAccepts(java.lang.String[])</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.model.Service.getCollectionThatAccepts(javax.activation.MimeType[])</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.model.Source.getCollection()</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.model.Source.setCollection(org.apache.abdera.model.Collection)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.model.Workspace.addCollection(java.lang.String, java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.model.Workspace.addCollection(org.apache.abdera.model.Collection)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.model.Workspace.addMultipartCollection(java.lang.String, java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.model.Workspace.getCollection(java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.model.Workspace.getCollectionThatAccepts(java.lang.String[])</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.model.Workspace.getCollectionThatAccepts(javax.activation.MimeType[])</inbound>
            <feature confirmed="yes">
                <name>org.apache.abdera.model.Collection.accepts(java.lang.String)</name>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.model.Collection.accepts(javax.activation.MimeType)</name>
                <outbound type="class" confirmed="no">javax.activation.MimeType</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.model.Collection.acceptsEntry()</name>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.model.Collection.acceptsNothing()</name>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.model.Collection.addAccepts(java.lang.String)</name>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.model.Collection.addAccepts(java.lang.String[])</name>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.model.Collection.addAcceptsEntry()</name>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.model.Collection.addCategories()</name>
                <outbound type="class" confirmed="yes">org.apache.abdera.model.Categories</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.model.Collection.addCategories(java.lang.String)</name>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="class" confirmed="yes">org.apache.abdera.model.Categories</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.model.Collection.addCategories(java.util.List, boolean, java.lang.String)</name>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="class" confirmed="no">java.util.List</outbound>
                <outbound type="class" confirmed="yes">org.apache.abdera.model.Categories</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.model.Collection.addCategories(org.apache.abdera.model.Categories)</name>
                <outbound type="class" confirmed="yes">org.apache.abdera.model.Categories</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.model.Collection.getAccept()</name>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.model.Collection.getCategories()</name>
                <outbound type="class" confirmed="no">java.util.List</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.model.Collection.getHref()</name>
                <outbound type="class" confirmed="no">org.apache.abdera.i18n.iri.IRI</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.model.Collection.getResolvedHref()</name>
                <outbound type="class" confirmed="no">org.apache.abdera.i18n.iri.IRI</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.model.Collection.getTitle()</name>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.model.Collection.getTitleElement()</name>
                <outbound type="class" confirmed="yes">org.apache.abdera.model.Text</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.model.Collection.setAccept(java.lang.String[])</name>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.model.Collection.setAcceptsEntry()</name>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.model.Collection.setAcceptsNothing()</name>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.model.Collection.setHref(java.lang.String)</name>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.model.Collection.setTitle(java.lang.String)</name>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="class" confirmed="yes">org.apache.abdera.model.Text</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.model.Collection.setTitleAsHtml(java.lang.String)</name>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="class" confirmed="yes">org.apache.abdera.model.Text</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.model.Collection.setTitleAsXHtml(java.lang.String)</name>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="class" confirmed="yes">org.apache.abdera.model.Text</outbound>
            </feature>
        </class>
        <class confirmed="yes">
            <name>org.apache.abdera.model.Comment</name>
            <outbound type="class" confirmed="no">java.lang.Object</outbound>
            <feature confirmed="yes">
                <name>org.apache.abdera.model.Comment.discard()</name>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.model.Comment.getFactory()</name>
                <outbound type="class" confirmed="yes">org.apache.abdera.factory.Factory</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.model.Comment.getParentElement()</name>
                <outbound type="class" confirmed="yes">org.apache.abdera.model.Base</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.model.Comment.getText()</name>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.model.Comment.setText(java.lang.String)</name>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
            </feature>
        </class>
        <class confirmed="yes">
            <name>org.apache.abdera.model.Content</name>
            <outbound type="class" confirmed="no">java.lang.Object</outbound>
            <outbound type="class" confirmed="yes">org.apache.abdera.model.Element</outbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.factory.Factory.newContent()</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.factory.Factory.newContent(javax.activation.MimeType)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.factory.Factory.newContent(javax.activation.MimeType, org.apache.abdera.model.Element)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.factory.Factory.newContent(org.apache.abdera.model.Content$Type)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.factory.Factory.newContent(org.apache.abdera.model.Content$Type, org.apache.abdera.model.Element)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.model.Entry.getContentElement()</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.model.Entry.setContent(java.io.InputStream)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.model.Entry.setContent(java.io.InputStream, java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.model.Entry.setContent(java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.model.Entry.setContent(java.lang.String, java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.model.Entry.setContent(java.lang.String, org.apache.abdera.model.Content$Type)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.model.Entry.setContent(javax.activation.DataHandler)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.model.Entry.setContent(javax.activation.DataHandler, java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.model.Entry.setContent(org.apache.abdera.i18n.iri.IRI, java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.model.Entry.setContent(org.apache.abdera.model.Element)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.model.Entry.setContent(org.apache.abdera.model.Element, java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.model.Entry.setContentAsHtml(java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.model.Entry.setContentAsXhtml(java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.model.Entry.setContentElement(org.apache.abdera.model.Content)</inbound>
            <feature confirmed="yes">
                <name>org.apache.abdera.model.Content.getContentType()</name>
                <outbound type="class" confirmed="yes">org.apache.abdera.model.Content$Type</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.model.Content.getDataHandler()</name>
                <outbound type="class" confirmed="no">javax.activation.DataHandler</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.model.Content.getMimeType()</name>
                <outbound type="class" confirmed="no">javax.activation.MimeType</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.model.Content.getResolvedSrc()</name>
                <outbound type="class" confirmed="no">org.apache.abdera.i18n.iri.IRI</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.model.Content.getSrc()</name>
                <outbound type="class" confirmed="no">org.apache.abdera.i18n.iri.IRI</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.model.Content.getValue()</name>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.model.Content.getValueElement()</name>
                <outbound type="class" confirmed="yes">org.apache.abdera.model.Element</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.model.Content.getWrappedValue()</name>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.model.Content.setContentType(org.apache.abdera.model.Content$Type)</name>
                <outbound type="class" confirmed="yes">org.apache.abdera.model.Content$Type</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.model.Content.setDataHandler(javax.activation.DataHandler)</name>
                <outbound type="class" confirmed="no">javax.activation.DataHandler</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.model.Content.setMimeType(java.lang.String)</name>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.model.Content.setSrc(java.lang.String)</name>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.model.Content.setValue(java.lang.String)</name>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.model.Content.setValueElement(org.apache.abdera.model.Element)</name>
                <outbound type="class" confirmed="yes">org.apache.abdera.model.Element</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.model.Content.setWrappedValue(java.lang.String)</name>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
            </feature>
        </class>
        <class confirmed="yes">
            <name>org.apache.abdera.model.Content$Type</name>
            <outbound type="class" confirmed="no">java.lang.Enum</outbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.factory.Factory.newContent(org.apache.abdera.model.Content$Type)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.factory.Factory.newContent(org.apache.abdera.model.Content$Type, org.apache.abdera.model.Element)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.factory.StreamBuilder.startContent(org.apache.abdera.model.Content$Type)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.factory.StreamBuilder.startContent(org.apache.abdera.model.Content$Type, java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.factory.StreamBuilder.writeContent(org.apache.abdera.model.Content$Type, java.io.InputStream)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.factory.StreamBuilder.writeContent(org.apache.abdera.model.Content$Type, java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.factory.StreamBuilder.writeContent(org.apache.abdera.model.Content$Type, javax.activation.DataHandler)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.model.Content.getContentType()</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.model.Content.setContentType(org.apache.abdera.model.Content$Type)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.model.Entry.getContentType()</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.model.Entry.setContent(java.lang.String, org.apache.abdera.model.Content$Type)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.util.AbstractStreamWriter.startContent(org.apache.abdera.model.Content$Type)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.util.AbstractStreamWriter.startContent(org.apache.abdera.model.Content$Type, java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.util.AbstractStreamWriter.writeContent(org.apache.abdera.model.Content$Type, java.io.InputStream)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.util.AbstractStreamWriter.writeContent(org.apache.abdera.model.Content$Type, java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.util.AbstractStreamWriter.writeContent(org.apache.abdera.model.Content$Type, javax.activation.DataHandler)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.writer.StreamWriter.startContent(org.apache.abdera.model.Content$Type)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.writer.StreamWriter.startContent(org.apache.abdera.model.Content$Type, java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.writer.StreamWriter.writeContent(org.apache.abdera.model.Content$Type, java.io.InputStream)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.writer.StreamWriter.writeContent(org.apache.abdera.model.Content$Type, java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.writer.StreamWriter.writeContent(org.apache.abdera.model.Content$Type, javax.activation.DataHandler)</inbound>
            <feature confirmed="yes">
                <name>org.apache.abdera.model.Content$Type.$VALUES</name>
                <inbound type="feature" confirmed="yes">org.apache.abdera.model.Content$Type.static {}</inbound>
                <inbound type="feature" confirmed="yes">org.apache.abdera.model.Content$Type.values()</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.model.Content$Type.Content$Type(java.lang.String, int)</name>
                <outbound type="feature" confirmed="no">java.lang.Enum.Enum(java.lang.String, int)</outbound>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <inbound type="feature" confirmed="yes">org.apache.abdera.model.Content$Type.static {}</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.model.Content$Type.HTML</name>
                <inbound type="feature" confirmed="yes">org.apache.abdera.model.Content$Type.static {}</inbound>
                <inbound type="feature" confirmed="yes">org.apache.abdera.model.Content$Type.typeFromString(java.lang.String)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.model.Content$Type.MEDIA</name>
                <inbound type="feature" confirmed="yes">org.apache.abdera.model.Content$Type.static {}</inbound>
                <inbound type="feature" confirmed="yes">org.apache.abdera.model.Content$Type.typeFromString(java.lang.String)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.model.Content$Type.TEXT</name>
                <inbound type="feature" confirmed="yes">org.apache.abdera.model.Content$Type.static {}</inbound>
                <inbound type="feature" confirmed="yes">org.apache.abdera.model.Content$Type.typeFromString(java.lang.String)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.model.Content$Type.XHTML</name>
                <inbound type="feature" confirmed="yes">org.apache.abdera.model.Content$Type.static {}</inbound>
                <inbound type="feature" confirmed="yes">org.apache.abdera.model.Content$Type.typeFromString(java.lang.String)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.model.Content$Type.XML</name>
                <inbound type="feature" confirmed="yes">org.apache.abdera.model.Content$Type.static {}</inbound>
                <inbound type="feature" confirmed="yes">org.apache.abdera.model.Content$Type.typeFromString(java.lang.String)</inbound>
            </feature>
            <feature confirmed="no">
                <name>org.apache.abdera.model.Content$Type.name()</name>
                <inbound type="feature" confirmed="yes">org.apache.abdera.util.AbstractStreamWriter.startContent(org.apache.abdera.model.Content$Type, java.lang.String)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.model.Content$Type.static {}</name>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="feature" confirmed="yes">org.apache.abdera.model.Content$Type.$VALUES</outbound>
                <outbound type="feature" confirmed="yes">org.apache.abdera.model.Content$Type.Content$Type(java.lang.String, int)</outbound>
                <outbound type="feature" confirmed="yes">org.apache.abdera.model.Content$Type.HTML</outbound>
                <outbound type="feature" confirmed="yes">org.apache.abdera.model.Content$Type.MEDIA</outbound>
                <outbound type="feature" confirmed="yes">org.apache.abdera.model.Content$Type.TEXT</outbound>
                <outbound type="feature" confirmed="yes">org.apache.abdera.model.Content$Type.XHTML</outbound>
                <outbound type="feature" confirmed="yes">org.apache.abdera.model.Content$Type.XML</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.model.Content$Type.typeFromString(java.lang.String)</name>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="feature" confirmed="no">java.lang.String.equalsIgnoreCase(java.lang.String)</outbound>
                <outbound type="feature" confirmed="yes">org.apache.abdera.model.Content$Type.HTML</outbound>
                <outbound type="feature" confirmed="yes">org.apache.abdera.model.Content$Type.MEDIA</outbound>
                <outbound type="feature" confirmed="yes">org.apache.abdera.model.Content$Type.TEXT</outbound>
                <outbound type="feature" confirmed="yes">org.apache.abdera.model.Content$Type.XHTML</outbound>
                <outbound type="feature" confirmed="yes">org.apache.abdera.model.Content$Type.XML</outbound>
                <outbound type="feature" confirmed="yes">org.apache.abdera.util.MimeTypeHelper.isMimeType(java.lang.String)</outbound>
                <outbound type="feature" confirmed="yes">org.apache.abdera.util.MimeTypeHelper.isXml(java.lang.String)</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.model.Content$Type.valueOf(java.lang.String)</name>
                <outbound type="class" confirmed="no">java.lang.Class</outbound>
                <outbound type="class" confirmed="no">java.lang.Enum</outbound>
                <outbound type="feature" confirmed="no">java.lang.Enum.valueOf(java.lang.Class, java.lang.String)</outbound>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.model.Content$Type.values()</name>
                <outbound type="class" confirmed="no">java.lang.Object</outbound>
                <outbound type="feature" confirmed="yes">org.apache.abdera.model.Content$Type.$VALUES</outbound>
                <outbound type="class" confirmed="no">org.apache.abdera.model.Content$Type[]</outbound>
                <outbound type="feature" confirmed="no">org.apache.abdera.model.Content$Type[].clone()</outbound>
            </feature>
        </class>
        <class confirmed="no">
            <name>org.apache.abdera.model.Content$Type[]</name>
            <inbound type="feature" confirmed="yes">org.apache.abdera.model.Content$Type.values()</inbound>
            <feature confirmed="no">
                <name>org.apache.abdera.model.Content$Type[].clone()</name>
                <inbound type="feature" confirmed="yes">org.apache.abdera.model.Content$Type.values()</inbound>
            </feature>
        </class>
        <class confirmed="yes">
            <name>org.apache.abdera.model.Control</name>
            <outbound type="class" confirmed="no">java.lang.Object</outbound>
            <outbound type="class" confirmed="yes">org.apache.abdera.model.ExtensibleElement</outbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.factory.Factory.newControl()</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.factory.Factory.newControl(org.apache.abdera.model.Element)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.model.Entry.addControl()</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.model.Entry.getControl()</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.model.Entry.getControl(boolean)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.model.Entry.setControl(org.apache.abdera.model.Control)</inbound>
            <feature confirmed="yes">
                <name>org.apache.abdera.model.Control.isDraft()</name>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.model.Control.setDraft(boolean)</name>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.model.Control.unsetDraft()</name>
            </feature>
        </class>
        <class confirmed="yes">
            <name>org.apache.abdera.model.DateTime</name>
            <outbound type="class" confirmed="no">java.lang.Object</outbound>
            <outbound type="class" confirmed="yes">org.apache.abdera.model.Element</outbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.factory.Factory.newDateTime(javax.xml.namespace.QName, org.apache.abdera.model.Element)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.factory.Factory.newEdited()</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.factory.Factory.newEdited(org.apache.abdera.model.Element)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.factory.Factory.newPublished()</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.factory.Factory.newPublished(org.apache.abdera.model.Element)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.factory.Factory.newUpdated()</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.factory.Factory.newUpdated(org.apache.abdera.model.Element)</inbound>
            <inbound type="class" confirmed="yes">org.apache.abdera.model.DateTimeWrapper</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.model.DateTimeWrapper.setCalendar(java.util.Calendar)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.model.DateTimeWrapper.setDate(java.util.Date)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.model.DateTimeWrapper.setString(java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.model.DateTimeWrapper.setTime(long)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.model.DateTimeWrapper.setValue(org.apache.abdera.model.AtomDate)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.model.Entry.getEditedElement()</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.model.Entry.getPublishedElement()</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.model.Entry.getUpdatedElement()</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.model.Entry.setEdited(java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.model.Entry.setEdited(java.util.Date)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.model.Entry.setEditedElement(org.apache.abdera.model.DateTime)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.model.Entry.setPublished(java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.model.Entry.setPublished(java.util.Date)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.model.Entry.setPublishedElement(org.apache.abdera.model.DateTime)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.model.Entry.setUpdated(java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.model.Entry.setUpdated(java.util.Date)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.model.Entry.setUpdatedElement(org.apache.abdera.model.DateTime)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.model.Source.getUpdatedElement()</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.model.Source.setUpdated(java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.model.Source.setUpdated(java.util.Date)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.model.Source.setUpdatedElement(org.apache.abdera.model.DateTime)</inbound>
            <feature confirmed="yes">
                <name>org.apache.abdera.model.DateTime.getCalendar()</name>
                <outbound type="class" confirmed="no">java.util.Calendar</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.model.DateTime.getDate()</name>
                <outbound type="class" confirmed="no">java.util.Date</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.model.DateTime.getString()</name>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.model.DateTime.getTime()</name>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.model.DateTime.getValue()</name>
                <outbound type="class" confirmed="yes">org.apache.abdera.model.AtomDate</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.model.DateTime.setCalendar(java.util.Calendar)</name>
                <outbound type="class" confirmed="no">java.util.Calendar</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.model.DateTime.setDate(java.util.Date)</name>
                <outbound type="class" confirmed="no">java.util.Date</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.model.DateTime.setString(java.lang.String)</name>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.model.DateTime.setTime(long)</name>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.model.DateTime.setValue(org.apache.abdera.model.AtomDate)</name>
                <outbound type="class" confirmed="yes">org.apache.abdera.model.AtomDate</outbound>
            </feature>
        </class>
        <class confirmed="yes">
            <name>org.apache.abdera.model.DateTimeWrapper</name>
            <outbound type="class" confirmed="yes">org.apache.abdera.model.DateTime</outbound>
            <outbound type="class" confirmed="yes">org.apache.abdera.model.ElementWrapper</outbound>
            <feature confirmed="yes">
                <name>org.apache.abdera.model.DateTimeWrapper.DateTimeWrapper(org.apache.abdera.factory.Factory, javax.xml.namespace.QName)</name>
                <outbound type="class" confirmed="no">javax.xml.namespace.QName</outbound>
                <outbound type="class" confirmed="yes">org.apache.abdera.factory.Factory</outbound>
                <outbound type="feature" confirmed="yes">org.apache.abdera.model.ElementWrapper.ElementWrapper(org.apache.abdera.factory.Factory, javax.xml.namespace.QName)</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.model.DateTimeWrapper.DateTimeWrapper(org.apache.abdera.model.Element)</name>
                <outbound type="class" confirmed="yes">org.apache.abdera.model.Element</outbound>
                <outbound type="feature" confirmed="yes">org.apache.abdera.model.ElementWrapper.ElementWrapper(org.apache.abdera.model.Element)</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.model.DateTimeWrapper.getCalendar()</name>
                <outbound type="class" confirmed="no">java.util.Calendar</outbound>
                <outbound type="class" confirmed="yes">org.apache.abdera.model.AtomDate</outbound>
                <outbound type="feature" confirmed="yes">org.apache.abdera.model.AtomDate.getCalendar()</outbound>
                <outbound type="feature" confirmed="yes">org.apache.abdera.model.DateTimeWrapper.getValue()</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.model.DateTimeWrapper.getDate()</name>
                <outbound type="class" confirmed="no">java.util.Date</outbound>
                <outbound type="class" confirmed="yes">org.apache.abdera.model.AtomDate</outbound>
                <outbound type="feature" confirmed="yes">org.apache.abdera.model.AtomDate.getDate()</outbound>
                <outbound type="feature" confirmed="yes">org.apache.abdera.model.DateTimeWrapper.getValue()</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.model.DateTimeWrapper.getString()</name>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="class" confirmed="yes">org.apache.abdera.model.AtomDate</outbound>
                <outbound type="feature" confirmed="yes">org.apache.abdera.model.AtomDate.getValue()</outbound>
                <outbound type="feature" confirmed="yes">org.apache.abdera.model.DateTimeWrapper.getValue()</outbound>
            </feature>
            <feature confirmed="no">
                <name>org.apache.abdera.model.DateTimeWrapper.getText()</name>
                <inbound type="feature" confirmed="yes">org.apache.abdera.model.DateTimeWrapper.getValue()</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.model.DateTimeWrapper.getTime()</name>
                <outbound type="class" confirmed="no">java.lang.Long</outbound>
                <outbound type="feature" confirmed="no">java.lang.Long.longValue()</outbound>
                <outbound type="feature" confirmed="no">java.lang.Long.valueOf(long)</outbound>
                <outbound type="class" confirmed="yes">org.apache.abdera.model.AtomDate</outbound>
                <outbound type="feature" confirmed="yes">org.apache.abdera.model.AtomDate.getTime()</outbound>
                <outbound type="feature" confirmed="yes">org.apache.abdera.model.DateTimeWrapper.getValue()</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.model.DateTimeWrapper.getValue()</name>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="class" confirmed="yes">org.apache.abdera.model.AtomDate</outbound>
                <outbound type="feature" confirmed="yes">org.apache.abdera.model.AtomDate.valueOf(java.lang.String)</outbound>
                <outbound type="feature" confirmed="no">org.apache.abdera.model.DateTimeWrapper.getText()</outbound>
                <inbound type="feature" confirmed="yes">org.apache.abdera.model.DateTimeWrapper.getCalendar()</inbound>
                <inbound type="feature" confirmed="yes">org.apache.abdera.model.DateTimeWrapper.getDate()</inbound>
                <inbound type="feature" confirmed="yes">org.apache.abdera.model.DateTimeWrapper.getString()</inbound>
                <inbound type="feature" confirmed="yes">org.apache.abdera.model.DateTimeWrapper.getTime()</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.model.DateTimeWrapper.setCalendar(java.util.Calendar)</name>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="class" confirmed="no">java.util.Calendar</outbound>
                <outbound type="class" confirmed="yes">org.apache.abdera.model.AtomDate</outbound>
                <outbound type="feature" confirmed="yes">org.apache.abdera.model.AtomDate.getValue()</outbound>
                <outbound type="feature" confirmed="yes">org.apache.abdera.model.AtomDate.valueOf(java.util.Calendar)</outbound>
                <outbound type="class" confirmed="yes">org.apache.abdera.model.DateTime</outbound>
                <outbound type="feature" confirmed="no">org.apache.abdera.model.DateTimeWrapper.setText(java.lang.String)</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.model.DateTimeWrapper.setDate(java.util.Date)</name>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="class" confirmed="no">java.util.Date</outbound>
                <outbound type="class" confirmed="yes">org.apache.abdera.model.AtomDate</outbound>
                <outbound type="feature" confirmed="yes">org.apache.abdera.model.AtomDate.getValue()</outbound>
                <outbound type="feature" confirmed="yes">org.apache.abdera.model.AtomDate.valueOf(java.util.Date)</outbound>
                <outbound type="class" confirmed="yes">org.apache.abdera.model.DateTime</outbound>
                <outbound type="feature" confirmed="no">org.apache.abdera.model.DateTimeWrapper.setText(java.lang.String)</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.model.DateTimeWrapper.setString(java.lang.String)</name>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="class" confirmed="yes">org.apache.abdera.model.AtomDate</outbound>
                <outbound type="feature" confirmed="yes">org.apache.abdera.model.AtomDate.getValue()</outbound>
                <outbound type="feature" confirmed="yes">org.apache.abdera.model.AtomDate.valueOf(java.lang.String)</outbound>
                <outbound type="class" confirmed="yes">org.apache.abdera.model.DateTime</outbound>
                <outbound type="feature" confirmed="no">org.apache.abdera.model.DateTimeWrapper.setText(java.lang.String)</outbound>
            </feature>
            <feature confirmed="no">
                <name>org.apache.abdera.model.DateTimeWrapper.setText(java.lang.String)</name>
                <inbound type="feature" confirmed="yes">org.apache.abdera.model.DateTimeWrapper.setCalendar(java.util.Calendar)</inbound>
                <inbound type="feature" confirmed="yes">org.apache.abdera.model.DateTimeWrapper.setDate(java.util.Date)</inbound>
                <inbound type="feature" confirmed="yes">org.apache.abdera.model.DateTimeWrapper.setString(java.lang.String)</inbound>
                <inbound type="feature" confirmed="yes">org.apache.abdera.model.DateTimeWrapper.setTime(long)</inbound>
                <inbound type="feature" confirmed="yes">org.apache.abdera.model.DateTimeWrapper.setValue(org.apache.abdera.model.AtomDate)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.model.DateTimeWrapper.setTime(long)</name>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="class" confirmed="yes">org.apache.abdera.model.AtomDate</outbound>
                <outbound type="feature" confirmed="yes">org.apache.abdera.model.AtomDate.getValue()</outbound>
                <outbound type="feature" confirmed="yes">org.apache.abdera.model.AtomDate.valueOf(long)</outbound>
                <outbound type="class" confirmed="yes">org.apache.abdera.model.DateTime</outbound>
                <outbound type="feature" confirmed="no">org.apache.abdera.model.DateTimeWrapper.setText(java.lang.String)</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.model.DateTimeWrapper.setValue(org.apache.abdera.model.AtomDate)</name>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="class" confirmed="yes">org.apache.abdera.model.AtomDate</outbound>
                <outbound type="feature" confirmed="yes">org.apache.abdera.model.AtomDate.getValue()</outbound>
                <outbound type="class" confirmed="yes">org.apache.abdera.model.DateTime</outbound>
                <outbound type="feature" confirmed="no">org.apache.abdera.model.DateTimeWrapper.setText(java.lang.String)</outbound>
            </feature>
        </class>
        <class confirmed="yes">
            <name>org.apache.abdera.model.Div</name>
            <outbound type="class" confirmed="no">java.lang.Object</outbound>
            <outbound type="class" confirmed="yes">org.apache.abdera.model.ExtensibleElement</outbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.factory.Factory.newDiv()</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.factory.Factory.newDiv(org.apache.abdera.model.Base)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.model.Entry.setRights(org.apache.abdera.model.Div)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.model.Entry.setSummary(org.apache.abdera.model.Div)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.model.Entry.setTitle(org.apache.abdera.model.Div)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.model.Source.setRights(org.apache.abdera.model.Div)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.model.Source.setSubtitle(org.apache.abdera.model.Div)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.model.Source.setTitle(org.apache.abdera.model.Div)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.model.Text.getValueElement()</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.model.Text.setValueElement(org.apache.abdera.model.Div)</inbound>
            <feature confirmed="yes">
                <name>org.apache.abdera.model.Div.getId()</name>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.model.Div.getTitle()</name>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.model.Div.getValue()</name>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.model.Div.getXhtmlClass()</name>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.model.Div.setId(java.lang.String)</name>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.model.Div.setTitle(java.lang.String)</name>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.model.Div.setValue(java.lang.String)</name>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.model.Div.setXhtmlClass(java.lang.String[])</name>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
            </feature>
        </class>
        <class confirmed="yes">
            <name>org.apache.abdera.model.Document</name>
            <outbound type="class" confirmed="no">java.io.Serializable</outbound>
            <outbound type="class" confirmed="no">java.lang.Object</outbound>
            <outbound type="class" confirmed="yes">org.apache.abdera.model.Base</outbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.factory.ExtensionFactoryMap.getMimeType(org.apache.abdera.model.Base)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.factory.Factory.newDocument()</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.model.Element.getDocument()</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.model.ElementWrapper.getDocument()</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.parser.Parser.parse(java.io.InputStream)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.parser.Parser.parse(java.io.InputStream, java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.parser.Parser.parse(java.io.InputStream, java.lang.String, org.apache.abdera.parser.ParserOptions)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.parser.Parser.parse(java.io.InputStream, org.apache.abdera.parser.ParserOptions)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.parser.Parser.parse(java.io.Reader)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.parser.Parser.parse(java.io.Reader, java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.parser.Parser.parse(java.io.Reader, java.lang.String, org.apache.abdera.parser.ParserOptions)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.parser.Parser.parse(java.io.Reader, org.apache.abdera.parser.ParserOptions)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.parser.Parser.parse(java.nio.channels.ReadableByteChannel)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.parser.Parser.parse(java.nio.channels.ReadableByteChannel, java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.parser.Parser.parse(java.nio.channels.ReadableByteChannel, java.lang.String, org.apache.abdera.parser.ParserOptions)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.parser.Parser.parse(java.nio.channels.ReadableByteChannel, org.apache.abdera.parser.ParserOptions)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.parser.Parser.parse(javax.xml.stream.XMLStreamReader)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.parser.Parser.parse(javax.xml.stream.XMLStreamReader, java.lang.String, org.apache.abdera.parser.ParserOptions)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.protocol.error.Error.create(org.apache.abdera.Abdera, int, java.lang.String, java.lang.Throwable)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.util.AbderaResult.doc</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.util.AbderaResult.getDocument()</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.util.AbstractExtensionFactory.getMimeType(org.apache.abdera.model.Base)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.util.AbstractParser.parse(java.io.InputStream)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.util.AbstractParser.parse(java.io.InputStream, java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.util.AbstractParser.parse(java.io.InputStream, java.lang.String, org.apache.abdera.parser.ParserOptions)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.util.AbstractParser.parse(java.io.InputStream, org.apache.abdera.parser.ParserOptions)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.util.AbstractParser.parse(java.io.Reader)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.util.AbstractParser.parse(java.io.Reader, java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.util.AbstractParser.parse(java.io.Reader, org.apache.abdera.parser.ParserOptions)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.util.AbstractParser.parse(java.nio.channels.ReadableByteChannel)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.util.AbstractParser.parse(java.nio.channels.ReadableByteChannel, java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.util.AbstractParser.parse(java.nio.channels.ReadableByteChannel, java.lang.String, org.apache.abdera.parser.ParserOptions)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.util.AbstractParser.parse(java.nio.channels.ReadableByteChannel, org.apache.abdera.parser.ParserOptions)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.util.AbstractParser.parse(javax.xml.stream.XMLStreamReader)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.util.AbstractWriter.writeTo(org.apache.abdera.model.Base, java.nio.channels.WritableByteChannel, org.apache.abdera.writer.WriterOptions)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.util.MimeTypeHelper.getMimeType(org.apache.abdera.model.Base)</inbound>
            <feature confirmed="yes">
                <name>org.apache.abdera.model.Document.addProcessingInstruction(java.lang.String, java.lang.String)</name>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.model.Document.addStylesheet(java.lang.String, java.lang.String)</name>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.model.Document.getBaseUri()</name>
                <outbound type="class" confirmed="no">org.apache.abdera.i18n.iri.IRI</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.model.Document.getCharset()</name>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <inbound type="feature" confirmed="yes">org.apache.abdera.util.AbstractWriter.writeTo(org.apache.abdera.model.Base, java.nio.channels.WritableByteChannel, org.apache.abdera.writer.WriterOptions)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.model.Document.getContentType()</name>
                <outbound type="class" confirmed="no">javax.activation.MimeType</outbound>
                <inbound type="feature" confirmed="yes">org.apache.abdera.util.MimeTypeHelper.getMimeType(org.apache.abdera.model.Base)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.model.Document.getEntityTag()</name>
                <outbound type="class" confirmed="yes">org.apache.abdera.util.EntityTag</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.model.Document.getLanguage()</name>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.model.Document.getLanguageTag()</name>
                <outbound type="class" confirmed="no">org.apache.abdera.i18n.rfc4646.Lang</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.model.Document.getLastModified()</name>
                <outbound type="class" confirmed="no">java.util.Date</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.model.Document.getMustPreserveWhitespace()</name>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.model.Document.getProcessingInstruction(java.lang.String)</name>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.model.Document.getRoot()</name>
                <outbound type="class" confirmed="yes">org.apache.abdera.model.Element</outbound>
                <inbound type="feature" confirmed="yes">org.apache.abdera.factory.ExtensionFactoryMap.getMimeType(org.apache.abdera.model.Base)</inbound>
                <inbound type="feature" confirmed="yes">org.apache.abdera.util.AbstractExtensionFactory.getMimeType(org.apache.abdera.model.Base)</inbound>
                <inbound type="feature" confirmed="yes">org.apache.abdera.util.MimeTypeHelper.getMimeType(org.apache.abdera.model.Base)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.model.Document.getSlug()</name>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.model.Document.getXmlVersion()</name>
                <outbound type="class" confirmed="yes">org.apache.abdera.util.XmlUtil$XMLVersion</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.model.Document.setBaseUri(java.lang.String)</name>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.model.Document.setCharset(java.lang.String)</name>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.model.Document.setContentType(java.lang.String)</name>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.model.Document.setEntityTag(java.lang.String)</name>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.model.Document.setEntityTag(org.apache.abdera.util.EntityTag)</name>
                <outbound type="class" confirmed="yes">org.apache.abdera.util.EntityTag</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.model.Document.setLanguage(java.lang.String)</name>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.model.Document.setLastModified(java.util.Date)</name>
                <outbound type="class" confirmed="no">java.util.Date</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.model.Document.setMustPreserveWhitespace(boolean)</name>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.model.Document.setRoot(org.apache.abdera.model.Element)</name>
                <outbound type="class" confirmed="yes">org.apache.abdera.model.Element</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.model.Document.setSlug(java.lang.String)</name>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
            </feature>
        </class>
        <class confirmed="yes">
            <name>org.apache.abdera.model.Element</name>
            <outbound type="class" confirmed="no">java.lang.Iterable</outbound>
            <outbound type="class" confirmed="no">java.lang.Object</outbound>
            <outbound type="class" confirmed="yes">org.apache.abdera.model.Base</outbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.factory.ExtensionFactory.getElementWrapper(org.apache.abdera.model.Element)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.factory.ExtensionFactoryMap.getElementWrapper(org.apache.abdera.model.Element)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.factory.ExtensionFactoryMap.getMimeType(org.apache.abdera.model.Base)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.factory.Factory.newAuthor(org.apache.abdera.model.Element)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.factory.Factory.newCategory(org.apache.abdera.model.Element)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.factory.Factory.newCollection(org.apache.abdera.model.Element)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.factory.Factory.newContent(javax.activation.MimeType, org.apache.abdera.model.Element)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.factory.Factory.newContent(org.apache.abdera.model.Content$Type, org.apache.abdera.model.Element)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.factory.Factory.newContributor(org.apache.abdera.model.Element)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.factory.Factory.newControl(org.apache.abdera.model.Element)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.factory.Factory.newDateTime(javax.xml.namespace.QName, org.apache.abdera.model.Element)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.factory.Factory.newDefaultGenerator(org.apache.abdera.model.Element)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.factory.Factory.newEdited(org.apache.abdera.model.Element)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.factory.Factory.newElement(javax.xml.namespace.QName)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.factory.Factory.newElement(javax.xml.namespace.QName, org.apache.abdera.model.Base)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.factory.Factory.newEmail()</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.factory.Factory.newEmail(org.apache.abdera.model.Element)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.factory.Factory.newExtensionElement(javax.xml.namespace.QName)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.factory.Factory.newExtensionElement(javax.xml.namespace.QName, org.apache.abdera.model.Base)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.factory.Factory.newGenerator(org.apache.abdera.model.Element)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.factory.Factory.newID(org.apache.abdera.model.Element)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.factory.Factory.newIRIElement(javax.xml.namespace.QName, org.apache.abdera.model.Element)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.factory.Factory.newIcon(org.apache.abdera.model.Element)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.factory.Factory.newLink(org.apache.abdera.model.Element)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.factory.Factory.newLogo(org.apache.abdera.model.Element)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.factory.Factory.newName()</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.factory.Factory.newName(org.apache.abdera.model.Element)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.factory.Factory.newPerson(javax.xml.namespace.QName, org.apache.abdera.model.Element)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.factory.Factory.newPublished(org.apache.abdera.model.Element)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.factory.Factory.newRights(org.apache.abdera.model.Element)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.factory.Factory.newRights(org.apache.abdera.model.Text$Type, org.apache.abdera.model.Element)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.factory.Factory.newSource(org.apache.abdera.model.Element)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.factory.Factory.newSubtitle(org.apache.abdera.model.Element)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.factory.Factory.newSubtitle(org.apache.abdera.model.Text$Type, org.apache.abdera.model.Element)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.factory.Factory.newSummary(org.apache.abdera.model.Element)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.factory.Factory.newSummary(org.apache.abdera.model.Text$Type, org.apache.abdera.model.Element)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.factory.Factory.newText(javax.xml.namespace.QName, org.apache.abdera.model.Text$Type, org.apache.abdera.model.Element)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.factory.Factory.newTitle(org.apache.abdera.model.Element)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.factory.Factory.newTitle(org.apache.abdera.model.Text$Type, org.apache.abdera.model.Element)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.factory.Factory.newUpdated(org.apache.abdera.model.Element)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.factory.Factory.newUri(org.apache.abdera.model.Element)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.factory.Factory.newWorkspace(org.apache.abdera.model.Element)</inbound>
            <inbound type="class" confirmed="yes">org.apache.abdera.model.Content</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.model.Content.getValueElement()</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.model.Content.setValueElement(org.apache.abdera.model.Element)</inbound>
            <inbound type="class" confirmed="yes">org.apache.abdera.model.DateTime</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.model.DateTimeWrapper.DateTimeWrapper(org.apache.abdera.model.Element)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.model.Document.getRoot()</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.model.Document.setRoot(org.apache.abdera.model.Element)</inbound>
            <inbound type="class" confirmed="yes">org.apache.abdera.model.ElementWrapper</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.model.ElementWrapper.ElementWrapper(org.apache.abdera.factory.Factory, javax.xml.namespace.QName)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.model.ElementWrapper.ElementWrapper(org.apache.abdera.model.Element)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.model.ElementWrapper.addComment(java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.model.ElementWrapper.clone()</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.model.ElementWrapper.complete()</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.model.ElementWrapper.declareNS(java.lang.String, java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.model.ElementWrapper.discard()</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.model.ElementWrapper.equals(java.lang.Object)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.model.ElementWrapper.getAttributeValue(java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.model.ElementWrapper.getAttributeValue(javax.xml.namespace.QName)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.model.ElementWrapper.getAttributes()</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.model.ElementWrapper.getBaseUri()</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.model.ElementWrapper.getDefaultWriterOptions()</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.model.ElementWrapper.getDocument()</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.model.ElementWrapper.getElements()</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.model.ElementWrapper.getExtensionAttributes()</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.model.ElementWrapper.getFactory()</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.model.ElementWrapper.getFirstChild()</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.model.ElementWrapper.getFirstChild(javax.xml.namespace.QName)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.model.ElementWrapper.getInternal()</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.model.ElementWrapper.getLanguage()</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.model.ElementWrapper.getLanguageTag()</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.model.ElementWrapper.getLocale()</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.model.ElementWrapper.getMustPreserveWhitespace()</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.model.ElementWrapper.getNamespaces()</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.model.ElementWrapper.getNextSibling()</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.model.ElementWrapper.getNextSibling(javax.xml.namespace.QName)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.model.ElementWrapper.getParentElement()</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.model.ElementWrapper.getPreviousSibling()</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.model.ElementWrapper.getPreviousSibling(javax.xml.namespace.QName)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.model.ElementWrapper.getQName()</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.model.ElementWrapper.getResolvedBaseUri()</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.model.ElementWrapper.getText()</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.model.ElementWrapper.hashCode()</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.model.ElementWrapper.internal</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.model.ElementWrapper.iterator()</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.model.ElementWrapper.removeAttribute(java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.model.ElementWrapper.removeAttribute(javax.xml.namespace.QName)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.model.ElementWrapper.setAttributeValue(java.lang.String, java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.model.ElementWrapper.setAttributeValue(javax.xml.namespace.QName, java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.model.ElementWrapper.setBaseUri(java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.model.ElementWrapper.setBaseUri(org.apache.abdera.i18n.iri.IRI)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.model.ElementWrapper.setLanguage(java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.model.ElementWrapper.setMustPreserveWhitespace(boolean)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.model.ElementWrapper.setParentElement(org.apache.abdera.model.Element)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.model.ElementWrapper.setText(java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.model.ElementWrapper.setText(javax.activation.DataHandler)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.model.ElementWrapper.toString()</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.model.ElementWrapper.writeTo(java.io.OutputStream)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.model.ElementWrapper.writeTo(java.io.OutputStream, org.apache.abdera.writer.WriterOptions)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.model.ElementWrapper.writeTo(java.io.Writer)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.model.ElementWrapper.writeTo(java.io.Writer, org.apache.abdera.writer.WriterOptions)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.model.ElementWrapper.writeTo(java.lang.String, java.io.OutputStream)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.model.ElementWrapper.writeTo(java.lang.String, java.io.OutputStream, org.apache.abdera.writer.WriterOptions)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.model.ElementWrapper.writeTo(java.lang.String, java.io.Writer)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.model.ElementWrapper.writeTo(java.lang.String, java.io.Writer, org.apache.abdera.writer.WriterOptions)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.model.ElementWrapper.writeTo(org.apache.abdera.writer.Writer, java.io.OutputStream)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.model.ElementWrapper.writeTo(org.apache.abdera.writer.Writer, java.io.OutputStream, org.apache.abdera.writer.WriterOptions)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.model.ElementWrapper.writeTo(org.apache.abdera.writer.Writer, java.io.Writer)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.model.ElementWrapper.writeTo(org.apache.abdera.writer.Writer, java.io.Writer, org.apache.abdera.writer.WriterOptions)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.model.Entry.setContent(org.apache.abdera.model.Element)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.model.Entry.setContent(org.apache.abdera.model.Element, java.lang.String)</inbound>
            <inbound type="class" confirmed="yes">org.apache.abdera.model.ExtensibleElement</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.model.ExtensibleElement.addExtension(java.lang.String, java.lang.String, java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.model.ExtensibleElement.addExtension(javax.xml.namespace.QName)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.model.ExtensibleElement.addExtension(javax.xml.namespace.QName, javax.xml.namespace.QName)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.model.ExtensibleElement.addExtension(org.apache.abdera.model.Element)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.model.ExtensibleElement.addExtension(org.apache.abdera.model.Element, org.apache.abdera.model.Element)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.model.ExtensibleElement.addSimpleExtension(java.lang.String, java.lang.String, java.lang.String, java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.model.ExtensibleElement.addSimpleExtension(javax.xml.namespace.QName, java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.model.ExtensibleElement.getExtension(java.lang.Class)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.model.ExtensibleElement.getExtension(javax.xml.namespace.QName)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.model.ExtensibleElementWrapper.ExtensibleElementWrapper(org.apache.abdera.model.Element)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.model.ExtensibleElementWrapper.addExtension(java.lang.String, java.lang.String, java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.model.ExtensibleElementWrapper.addExtension(javax.xml.namespace.QName)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.model.ExtensibleElementWrapper.addExtension(javax.xml.namespace.QName, javax.xml.namespace.QName)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.model.ExtensibleElementWrapper.addExtension(org.apache.abdera.model.Element)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.model.ExtensibleElementWrapper.addExtension(org.apache.abdera.model.Element, org.apache.abdera.model.Element)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.model.ExtensibleElementWrapper.addSimpleExtension(java.lang.String, java.lang.String, java.lang.String, java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.model.ExtensibleElementWrapper.addSimpleExtension(javax.xml.namespace.QName, java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.model.ExtensibleElementWrapper.getExtInternal()</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.model.ExtensibleElementWrapper.getExtension(java.lang.Class)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.model.ExtensibleElementWrapper.getExtension(javax.xml.namespace.QName)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.model.ExtensibleElementWrapper.setMustPreserveWhitespace(boolean)</inbound>
            <inbound type="class" confirmed="yes">org.apache.abdera.model.Generator</inbound>
            <inbound type="class" confirmed="yes">org.apache.abdera.model.IRIElement</inbound>
            <inbound type="class" confirmed="yes">org.apache.abdera.model.Person</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.model.Person.getEmailElement()</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.model.Person.getNameElement()</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.model.Person.setEmail(java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.model.Person.setEmailElement(org.apache.abdera.model.Element)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.model.Person.setName(java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.model.Person.setNameElement(org.apache.abdera.model.Element)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.model.PersonWrapper.PersonWrapper(org.apache.abdera.model.Element)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.model.PersonWrapper.getEmail()</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.model.PersonWrapper.getEmailElement()</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.model.PersonWrapper.getName()</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.model.PersonWrapper.getNameElement()</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.model.PersonWrapper.getUriElement()</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.model.PersonWrapper.setEmail(java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.model.PersonWrapper.setEmailElement(org.apache.abdera.model.Element)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.model.PersonWrapper.setName(java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.model.PersonWrapper.setNameElement(org.apache.abdera.model.Element)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.model.PersonWrapper.setUri(java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.model.PersonWrapper.setUriElement(org.apache.abdera.model.IRIElement)</inbound>
            <inbound type="class" confirmed="yes">org.apache.abdera.model.Text</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.protocol.error.Error.Error(org.apache.abdera.model.Element)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.protocol.error.Error.create(org.apache.abdera.Abdera, int, java.lang.String, java.lang.Throwable)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.protocol.error.Error.setCode(int)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.protocol.error.Error.setMessage(java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.util.AbstractExtensionFactory.getElementWrapper(org.apache.abdera.model.Element)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.util.AbstractExtensionFactory.getMimeType(org.apache.abdera.model.Base)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.util.AbstractWriter.writeTo(org.apache.abdera.model.Base, java.nio.channels.WritableByteChannel, org.apache.abdera.writer.WriterOptions)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.util.MimeTypeHelper.getMimeType(org.apache.abdera.model.Base)</inbound>
            <feature confirmed="no">
                <name>org.apache.abdera.model.Element.addComment(java.lang.String)</name>
                <inbound type="feature" confirmed="yes">org.apache.abdera.model.ElementWrapper.addComment(java.lang.String)</inbound>
            </feature>
            <feature confirmed="no">
                <name>org.apache.abdera.model.Element.clone()</name>
                <inbound type="feature" confirmed="yes">org.apache.abdera.model.ElementWrapper.clone()</inbound>
            </feature>
            <feature confirmed="no">
                <name>org.apache.abdera.model.Element.complete()</name>
                <inbound type="feature" confirmed="yes">org.apache.abdera.model.ElementWrapper.complete()</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.model.Element.declareNS(java.lang.String, java.lang.String)</name>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <inbound type="feature" confirmed="yes">org.apache.abdera.model.ElementWrapper.declareNS(java.lang.String, java.lang.String)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.model.Element.discard()</name>
                <inbound type="feature" confirmed="yes">org.apache.abdera.model.ElementWrapper.discard()</inbound>
                <inbound type="feature" confirmed="yes">org.apache.abdera.model.PersonWrapper.setEmail(java.lang.String)</inbound>
                <inbound type="feature" confirmed="yes">org.apache.abdera.model.PersonWrapper.setEmailElement(org.apache.abdera.model.Element)</inbound>
                <inbound type="feature" confirmed="yes">org.apache.abdera.model.PersonWrapper.setName(java.lang.String)</inbound>
                <inbound type="feature" confirmed="yes">org.apache.abdera.model.PersonWrapper.setNameElement(org.apache.abdera.model.Element)</inbound>
                <inbound type="feature" confirmed="yes">org.apache.abdera.model.PersonWrapper.setUriElement(org.apache.abdera.model.IRIElement)</inbound>
                <inbound type="feature" confirmed="yes">org.apache.abdera.protocol.error.Error.setCode(int)</inbound>
                <inbound type="feature" confirmed="yes">org.apache.abdera.protocol.error.Error.setMessage(java.lang.String)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.model.Element.getAttributeValue(java.lang.String)</name>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <inbound type="feature" confirmed="yes">org.apache.abdera.model.ElementWrapper.getAttributeValue(java.lang.String)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.model.Element.getAttributeValue(javax.xml.namespace.QName)</name>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="class" confirmed="no">javax.xml.namespace.QName</outbound>
                <inbound type="feature" confirmed="yes">org.apache.abdera.model.ElementWrapper.getAttributeValue(javax.xml.namespace.QName)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.model.Element.getAttributes()</name>
                <outbound type="class" confirmed="no">java.util.List</outbound>
                <inbound type="feature" confirmed="yes">org.apache.abdera.model.ElementWrapper.getAttributes()</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.model.Element.getBaseUri()</name>
                <outbound type="class" confirmed="no">org.apache.abdera.i18n.iri.IRI</outbound>
                <inbound type="feature" confirmed="yes">org.apache.abdera.model.ElementWrapper.getBaseUri()</inbound>
            </feature>
            <feature confirmed="no">
                <name>org.apache.abdera.model.Element.getDefaultWriterOptions()</name>
                <inbound type="feature" confirmed="yes">org.apache.abdera.model.ElementWrapper.getDefaultWriterOptions()</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.model.Element.getDocument()</name>
                <outbound type="class" confirmed="yes">org.apache.abdera.model.Document</outbound>
                <inbound type="feature" confirmed="yes">org.apache.abdera.model.ElementWrapper.getDocument()</inbound>
                <inbound type="feature" confirmed="yes">org.apache.abdera.util.AbstractWriter.writeTo(org.apache.abdera.model.Base, java.nio.channels.WritableByteChannel, org.apache.abdera.writer.WriterOptions)</inbound>
                <inbound type="feature" confirmed="yes">org.apache.abdera.util.MimeTypeHelper.getMimeType(org.apache.abdera.model.Base)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.model.Element.getElements()</name>
                <outbound type="class" confirmed="no">java.util.List</outbound>
                <inbound type="feature" confirmed="yes">org.apache.abdera.model.ElementWrapper.getElements()</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.model.Element.getExtensionAttributes()</name>
                <outbound type="class" confirmed="no">java.util.List</outbound>
                <inbound type="feature" confirmed="yes">org.apache.abdera.model.ElementWrapper.getExtensionAttributes()</inbound>
            </feature>
            <feature confirmed="no">
                <name>org.apache.abdera.model.Element.getFactory()</name>
                <inbound type="feature" confirmed="yes">org.apache.abdera.model.ElementWrapper.getFactory()</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.model.Element.getFirstChild()</name>
                <inbound type="feature" confirmed="yes">org.apache.abdera.model.ElementWrapper.getFirstChild()</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.model.Element.getFirstChild(javax.xml.namespace.QName)</name>
                <outbound type="class" confirmed="no">javax.xml.namespace.QName</outbound>
                <inbound type="feature" confirmed="yes">org.apache.abdera.model.ElementWrapper.getFirstChild(javax.xml.namespace.QName)</inbound>
                <inbound type="feature" confirmed="yes">org.apache.abdera.model.PersonWrapper.getEmailElement()</inbound>
                <inbound type="feature" confirmed="yes">org.apache.abdera.model.PersonWrapper.getNameElement()</inbound>
                <inbound type="feature" confirmed="yes">org.apache.abdera.model.PersonWrapper.getUriElement()</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.model.Element.getLanguage()</name>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <inbound type="feature" confirmed="yes">org.apache.abdera.model.ElementWrapper.getLanguage()</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.model.Element.getLanguageTag()</name>
                <outbound type="class" confirmed="no">org.apache.abdera.i18n.rfc4646.Lang</outbound>
                <inbound type="feature" confirmed="yes">org.apache.abdera.model.ElementWrapper.getLanguageTag()</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.model.Element.getLocale()</name>
                <outbound type="class" confirmed="no">java.util.Locale</outbound>
                <inbound type="feature" confirmed="yes">org.apache.abdera.model.ElementWrapper.getLocale()</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.model.Element.getMustPreserveWhitespace()</name>
                <inbound type="feature" confirmed="yes">org.apache.abdera.model.ElementWrapper.getMustPreserveWhitespace()</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.model.Element.getNamespaces()</name>
                <outbound type="class" confirmed="no">java.util.Map</outbound>
                <inbound type="feature" confirmed="yes">org.apache.abdera.model.ElementWrapper.getNamespaces()</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.model.Element.getNextSibling()</name>
                <inbound type="feature" confirmed="yes">org.apache.abdera.model.ElementWrapper.getNextSibling()</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.model.Element.getNextSibling(javax.xml.namespace.QName)</name>
                <outbound type="class" confirmed="no">javax.xml.namespace.QName</outbound>
                <inbound type="feature" confirmed="yes">org.apache.abdera.model.ElementWrapper.getNextSibling(javax.xml.namespace.QName)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.model.Element.getParentElement()</name>
                <outbound type="class" confirmed="yes">org.apache.abdera.model.Base</outbound>
                <inbound type="feature" confirmed="yes">org.apache.abdera.model.ElementWrapper.getParentElement()</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.model.Element.getPreviousSibling()</name>
                <inbound type="feature" confirmed="yes">org.apache.abdera.model.ElementWrapper.getPreviousSibling()</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.model.Element.getPreviousSibling(javax.xml.namespace.QName)</name>
                <outbound type="class" confirmed="no">javax.xml.namespace.QName</outbound>
                <inbound type="feature" confirmed="yes">org.apache.abdera.model.ElementWrapper.getPreviousSibling(javax.xml.namespace.QName)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.model.Element.getQName()</name>
                <outbound type="class" confirmed="no">javax.xml.namespace.QName</outbound>
                <inbound type="feature" confirmed="yes">org.apache.abdera.factory.ExtensionFactoryMap.getMimeType(org.apache.abdera.model.Base)</inbound>
                <inbound type="feature" confirmed="yes">org.apache.abdera.model.ElementWrapper.getQName()</inbound>
                <inbound type="feature" confirmed="yes">org.apache.abdera.util.AbstractExtensionFactory.getElementWrapper(org.apache.abdera.model.Element)</inbound>
                <inbound type="feature" confirmed="yes">org.apache.abdera.util.AbstractExtensionFactory.getMimeType(org.apache.abdera.model.Base)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.model.Element.getResolvedBaseUri()</name>
                <outbound type="class" confirmed="no">org.apache.abdera.i18n.iri.IRI</outbound>
                <inbound type="feature" confirmed="yes">org.apache.abdera.model.ElementWrapper.getResolvedBaseUri()</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.model.Element.getText()</name>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <inbound type="feature" confirmed="yes">org.apache.abdera.model.ElementWrapper.getText()</inbound>
                <inbound type="feature" confirmed="yes">org.apache.abdera.model.PersonWrapper.getEmail()</inbound>
                <inbound type="feature" confirmed="yes">org.apache.abdera.model.PersonWrapper.getName()</inbound>
            </feature>
            <feature confirmed="no">
                <name>org.apache.abdera.model.Element.iterator()</name>
                <inbound type="feature" confirmed="yes">org.apache.abdera.model.ElementWrapper.iterator()</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.model.Element.removeAttribute(java.lang.String)</name>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <inbound type="feature" confirmed="yes">org.apache.abdera.model.ElementWrapper.removeAttribute(java.lang.String)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.model.Element.removeAttribute(javax.xml.namespace.QName)</name>
                <outbound type="class" confirmed="no">javax.xml.namespace.QName</outbound>
                <inbound type="feature" confirmed="yes">org.apache.abdera.model.ElementWrapper.removeAttribute(javax.xml.namespace.QName)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.model.Element.setAttributeValue(java.lang.String, java.lang.String)</name>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <inbound type="feature" confirmed="yes">org.apache.abdera.model.ElementWrapper.setAttributeValue(java.lang.String, java.lang.String)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.model.Element.setAttributeValue(javax.xml.namespace.QName, java.lang.String)</name>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="class" confirmed="no">javax.xml.namespace.QName</outbound>
                <inbound type="feature" confirmed="yes">org.apache.abdera.model.ElementWrapper.setAttributeValue(javax.xml.namespace.QName, java.lang.String)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.model.Element.setBaseUri(java.lang.String)</name>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <inbound type="feature" confirmed="yes">org.apache.abdera.model.ElementWrapper.setBaseUri(java.lang.String)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.model.Element.setBaseUri(org.apache.abdera.i18n.iri.IRI)</name>
                <outbound type="class" confirmed="no">org.apache.abdera.i18n.iri.IRI</outbound>
                <inbound type="feature" confirmed="yes">org.apache.abdera.model.ElementWrapper.setBaseUri(org.apache.abdera.i18n.iri.IRI)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.model.Element.setLanguage(java.lang.String)</name>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <inbound type="feature" confirmed="yes">org.apache.abdera.model.ElementWrapper.setLanguage(java.lang.String)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.model.Element.setMustPreserveWhitespace(boolean)</name>
                <inbound type="feature" confirmed="yes">org.apache.abdera.model.ElementWrapper.setMustPreserveWhitespace(boolean)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.model.Element.setParentElement(org.apache.abdera.model.Element)</name>
                <inbound type="feature" confirmed="yes">org.apache.abdera.model.ElementWrapper.setParentElement(org.apache.abdera.model.Element)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.model.Element.setText(java.lang.String)</name>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <inbound type="feature" confirmed="yes">org.apache.abdera.model.ElementWrapper.setText(java.lang.String)</inbound>
                <inbound type="feature" confirmed="yes">org.apache.abdera.model.PersonWrapper.setEmail(java.lang.String)</inbound>
                <inbound type="feature" confirmed="yes">org.apache.abdera.model.PersonWrapper.setName(java.lang.String)</inbound>
                <inbound type="feature" confirmed="yes">org.apache.abdera.protocol.error.Error.setCode(int)</inbound>
                <inbound type="feature" confirmed="yes">org.apache.abdera.protocol.error.Error.setMessage(java.lang.String)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.model.Element.setText(javax.activation.DataHandler)</name>
                <outbound type="class" confirmed="no">javax.activation.DataHandler</outbound>
                <inbound type="feature" confirmed="yes">org.apache.abdera.model.ElementWrapper.setText(javax.activation.DataHandler)</inbound>
            </feature>
            <feature confirmed="no">
                <name>org.apache.abdera.model.Element.writeTo(java.io.OutputStream)</name>
                <inbound type="feature" confirmed="yes">org.apache.abdera.model.ElementWrapper.writeTo(java.io.OutputStream)</inbound>
            </feature>
            <feature confirmed="no">
                <name>org.apache.abdera.model.Element.writeTo(java.io.OutputStream, org.apache.abdera.writer.WriterOptions)</name>
                <inbound type="feature" confirmed="yes">org.apache.abdera.model.ElementWrapper.writeTo(java.io.OutputStream, org.apache.abdera.writer.WriterOptions)</inbound>
            </feature>
            <feature confirmed="no">
                <name>org.apache.abdera.model.Element.writeTo(java.io.Writer)</name>
                <inbound type="feature" confirmed="yes">org.apache.abdera.model.ElementWrapper.writeTo(java.io.Writer)</inbound>
            </feature>
            <feature confirmed="no">
                <name>org.apache.abdera.model.Element.writeTo(java.io.Writer, org.apache.abdera.writer.WriterOptions)</name>
                <inbound type="feature" confirmed="yes">org.apache.abdera.model.ElementWrapper.writeTo(java.io.Writer, org.apache.abdera.writer.WriterOptions)</inbound>
            </feature>
            <feature confirmed="no">
                <name>org.apache.abdera.model.Element.writeTo(java.lang.String, java.io.OutputStream)</name>
                <inbound type="feature" confirmed="yes">org.apache.abdera.model.ElementWrapper.writeTo(java.lang.String, java.io.OutputStream)</inbound>
            </feature>
            <feature confirmed="no">
                <name>org.apache.abdera.model.Element.writeTo(java.lang.String, java.io.OutputStream, org.apache.abdera.writer.WriterOptions)</name>
                <inbound type="feature" confirmed="yes">org.apache.abdera.model.ElementWrapper.writeTo(java.lang.String, java.io.OutputStream, org.apache.abdera.writer.WriterOptions)</inbound>
            </feature>
            <feature confirmed="no">
                <name>org.apache.abdera.model.Element.writeTo(java.lang.String, java.io.Writer)</name>
                <inbound type="feature" confirmed="yes">org.apache.abdera.model.ElementWrapper.writeTo(java.lang.String, java.io.Writer)</inbound>
            </feature>
            <feature confirmed="no">
                <name>org.apache.abdera.model.Element.writeTo(java.lang.String, java.io.Writer, org.apache.abdera.writer.WriterOptions)</name>
                <inbound type="feature" confirmed="yes">org.apache.abdera.model.ElementWrapper.writeTo(java.lang.String, java.io.Writer, org.apache.abdera.writer.WriterOptions)</inbound>
            </feature>
            <feature confirmed="no">
                <name>org.apache.abdera.model.Element.writeTo(org.apache.abdera.writer.Writer, java.io.OutputStream)</name>
                <inbound type="feature" confirmed="yes">org.apache.abdera.model.ElementWrapper.writeTo(org.apache.abdera.writer.Writer, java.io.OutputStream)</inbound>
            </feature>
            <feature confirmed="no">
                <name>org.apache.abdera.model.Element.writeTo(org.apache.abdera.writer.Writer, java.io.OutputStream, org.apache.abdera.writer.WriterOptions)</name>
                <inbound type="feature" confirmed="yes">org.apache.abdera.model.ElementWrapper.writeTo(org.apache.abdera.writer.Writer, java.io.OutputStream, org.apache.abdera.writer.WriterOptions)</inbound>
            </feature>
            <feature confirmed="no">
                <name>org.apache.abdera.model.Element.writeTo(org.apache.abdera.writer.Writer, java.io.Writer)</name>
                <inbound type="feature" confirmed="yes">org.apache.abdera.model.ElementWrapper.writeTo(org.apache.abdera.writer.Writer, java.io.Writer)</inbound>
            </feature>
            <feature confirmed="no">
                <name>org.apache.abdera.model.Element.writeTo(org.apache.abdera.writer.Writer, java.io.Writer, org.apache.abdera.writer.WriterOptions)</name>
                <inbound type="feature" confirmed="yes">org.apache.abdera.model.ElementWrapper.writeTo(org.apache.abdera.writer.Writer, java.io.Writer, org.apache.abdera.writer.WriterOptions)</inbound>
            </feature>
        </class>
        <class confirmed="yes">
            <name>org.apache.abdera.model.ElementWrapper</name>
            <outbound type="class" confirmed="no">java.lang.Object</outbound>
            <outbound type="class" confirmed="yes">org.apache.abdera.model.Element</outbound>
            <inbound type="class" confirmed="yes">org.apache.abdera.model.DateTimeWrapper</inbound>
            <inbound type="class" confirmed="yes">org.apache.abdera.model.ExtensibleElementWrapper</inbound>
            <feature confirmed="yes">
                <name>org.apache.abdera.model.ElementWrapper.ElementWrapper(org.apache.abdera.factory.Factory, javax.xml.namespace.QName)</name>
                <outbound type="feature" confirmed="no">java.lang.Object.Object()</outbound>
                <outbound type="class" confirmed="no">javax.xml.namespace.QName</outbound>
                <outbound type="class" confirmed="yes">org.apache.abdera.factory.Factory</outbound>
                <outbound type="feature" confirmed="yes">org.apache.abdera.factory.Factory.newElement(javax.xml.namespace.QName)</outbound>
                <outbound type="class" confirmed="yes">org.apache.abdera.model.Element</outbound>
                <outbound type="feature" confirmed="yes">org.apache.abdera.model.ElementWrapper.getInternal()</outbound>
                <outbound type="feature" confirmed="yes">org.apache.abdera.model.ElementWrapper.internal</outbound>
                <inbound type="feature" confirmed="yes">org.apache.abdera.model.DateTimeWrapper.DateTimeWrapper(org.apache.abdera.factory.Factory, javax.xml.namespace.QName)</inbound>
                <inbound type="feature" confirmed="yes">org.apache.abdera.model.ExtensibleElementWrapper.ExtensibleElementWrapper(org.apache.abdera.factory.Factory, javax.xml.namespace.QName)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.model.ElementWrapper.ElementWrapper(org.apache.abdera.model.Element)</name>
                <outbound type="feature" confirmed="no">java.lang.Object.Object()</outbound>
                <outbound type="class" confirmed="yes">org.apache.abdera.model.Element</outbound>
                <outbound type="feature" confirmed="yes">org.apache.abdera.model.ElementWrapper.internal</outbound>
                <inbound type="feature" confirmed="yes">org.apache.abdera.model.DateTimeWrapper.DateTimeWrapper(org.apache.abdera.model.Element)</inbound>
                <inbound type="feature" confirmed="yes">org.apache.abdera.model.ExtensibleElementWrapper.ExtensibleElementWrapper(org.apache.abdera.model.Element)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.model.ElementWrapper.addComment(java.lang.String)</name>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="class" confirmed="yes">org.apache.abdera.model.Base</outbound>
                <outbound type="class" confirmed="yes">org.apache.abdera.model.Element</outbound>
                <outbound type="feature" confirmed="no">org.apache.abdera.model.Element.addComment(java.lang.String)</outbound>
                <outbound type="feature" confirmed="yes">org.apache.abdera.model.ElementWrapper.internal</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.model.ElementWrapper.clone()</name>
                <outbound type="class" confirmed="no">java.lang.CloneNotSupportedException</outbound>
                <outbound type="class" confirmed="no">java.lang.Object</outbound>
                <outbound type="feature" confirmed="no">java.lang.Object.clone()</outbound>
                <outbound type="class" confirmed="yes">org.apache.abdera.model.Element</outbound>
                <outbound type="feature" confirmed="no">org.apache.abdera.model.Element.clone()</outbound>
                <outbound type="feature" confirmed="yes">org.apache.abdera.model.ElementWrapper.internal</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.model.ElementWrapper.complete()</name>
                <outbound type="class" confirmed="yes">org.apache.abdera.model.Base</outbound>
                <outbound type="class" confirmed="yes">org.apache.abdera.model.Element</outbound>
                <outbound type="feature" confirmed="no">org.apache.abdera.model.Element.complete()</outbound>
                <outbound type="feature" confirmed="yes">org.apache.abdera.model.ElementWrapper.internal</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.model.ElementWrapper.declareNS(java.lang.String, java.lang.String)</name>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="class" confirmed="yes">org.apache.abdera.model.Element</outbound>
                <outbound type="feature" confirmed="yes">org.apache.abdera.model.Element.declareNS(java.lang.String, java.lang.String)</outbound>
                <outbound type="feature" confirmed="yes">org.apache.abdera.model.ElementWrapper.internal</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.model.ElementWrapper.discard()</name>
                <outbound type="class" confirmed="yes">org.apache.abdera.model.Element</outbound>
                <outbound type="feature" confirmed="yes">org.apache.abdera.model.Element.discard()</outbound>
                <outbound type="feature" confirmed="yes">org.apache.abdera.model.ElementWrapper.internal</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.model.ElementWrapper.equals(java.lang.Object)</name>
                <outbound type="class" confirmed="no">java.lang.Object</outbound>
                <outbound type="feature" confirmed="no">java.lang.Object.equals(java.lang.Object)</outbound>
                <outbound type="class" confirmed="yes">org.apache.abdera.model.Element</outbound>
                <outbound type="feature" confirmed="yes">org.apache.abdera.model.ElementWrapper.getInternal()</outbound>
                <outbound type="feature" confirmed="yes">org.apache.abdera.model.ElementWrapper.internal</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.model.ElementWrapper.getAttributeValue(java.lang.String)</name>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="class" confirmed="yes">org.apache.abdera.model.Element</outbound>
                <outbound type="feature" confirmed="yes">org.apache.abdera.model.Element.getAttributeValue(java.lang.String)</outbound>
                <outbound type="feature" confirmed="yes">org.apache.abdera.model.ElementWrapper.internal</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.model.ElementWrapper.getAttributeValue(javax.xml.namespace.QName)</name>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="class" confirmed="no">javax.xml.namespace.QName</outbound>
                <outbound type="class" confirmed="yes">org.apache.abdera.model.Element</outbound>
                <outbound type="feature" confirmed="yes">org.apache.abdera.model.Element.getAttributeValue(javax.xml.namespace.QName)</outbound>
                <outbound type="feature" confirmed="yes">org.apache.abdera.model.ElementWrapper.internal</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.model.ElementWrapper.getAttributes()</name>
                <outbound type="class" confirmed="no">java.util.List</outbound>
                <outbound type="class" confirmed="yes">org.apache.abdera.model.Element</outbound>
                <outbound type="feature" confirmed="yes">org.apache.abdera.model.Element.getAttributes()</outbound>
                <outbound type="feature" confirmed="yes">org.apache.abdera.model.ElementWrapper.internal</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.model.ElementWrapper.getBaseUri()</name>
                <outbound type="class" confirmed="no">org.apache.abdera.i18n.iri.IRI</outbound>
                <outbound type="class" confirmed="yes">org.apache.abdera.model.Element</outbound>
                <outbound type="feature" confirmed="yes">org.apache.abdera.model.Element.getBaseUri()</outbound>
                <outbound type="feature" confirmed="yes">org.apache.abdera.model.ElementWrapper.internal</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.model.ElementWrapper.getDefaultWriterOptions()</name>
                <outbound type="class" confirmed="yes">org.apache.abdera.model.Element</outbound>
                <outbound type="feature" confirmed="no">org.apache.abdera.model.Element.getDefaultWriterOptions()</outbound>
                <outbound type="feature" confirmed="yes">org.apache.abdera.model.ElementWrapper.internal</outbound>
                <outbound type="class" confirmed="yes">org.apache.abdera.writer.WriterOptions</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.model.ElementWrapper.getDocument()</name>
                <outbound type="class" confirmed="yes">org.apache.abdera.model.Document</outbound>
                <outbound type="class" confirmed="yes">org.apache.abdera.model.Element</outbound>
                <outbound type="feature" confirmed="yes">org.apache.abdera.model.Element.getDocument()</outbound>
                <outbound type="feature" confirmed="yes">org.apache.abdera.model.ElementWrapper.internal</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.model.ElementWrapper.getElements()</name>
                <outbound type="class" confirmed="no">java.util.List</outbound>
                <outbound type="class" confirmed="yes">org.apache.abdera.model.Element</outbound>
                <outbound type="feature" confirmed="yes">org.apache.abdera.model.Element.getElements()</outbound>
                <outbound type="feature" confirmed="yes">org.apache.abdera.model.ElementWrapper.internal</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.model.ElementWrapper.getExtensionAttributes()</name>
                <outbound type="class" confirmed="no">java.util.List</outbound>
                <outbound type="class" confirmed="yes">org.apache.abdera.model.Element</outbound>
                <outbound type="feature" confirmed="yes">org.apache.abdera.model.Element.getExtensionAttributes()</outbound>
                <outbound type="feature" confirmed="yes">org.apache.abdera.model.ElementWrapper.internal</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.model.ElementWrapper.getFactory()</name>
                <outbound type="class" confirmed="yes">org.apache.abdera.factory.Factory</outbound>
                <outbound type="class" confirmed="yes">org.apache.abdera.model.Element</outbound>
                <outbound type="feature" confirmed="no">org.apache.abdera.model.Element.getFactory()</outbound>
                <outbound type="feature" confirmed="yes">org.apache.abdera.model.ElementWrapper.internal</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.model.ElementWrapper.getFirstChild()</name>
                <outbound type="class" confirmed="yes">org.apache.abdera.model.Element</outbound>
                <outbound type="feature" confirmed="yes">org.apache.abdera.model.Element.getFirstChild()</outbound>
                <outbound type="feature" confirmed="yes">org.apache.abdera.model.ElementWrapper.internal</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.model.ElementWrapper.getFirstChild(javax.xml.namespace.QName)</name>
                <outbound type="class" confirmed="no">javax.xml.namespace.QName</outbound>
                <outbound type="class" confirmed="yes">org.apache.abdera.model.Element</outbound>
                <outbound type="feature" confirmed="yes">org.apache.abdera.model.Element.getFirstChild(javax.xml.namespace.QName)</outbound>
                <outbound type="feature" confirmed="yes">org.apache.abdera.model.ElementWrapper.internal</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.model.ElementWrapper.getInternal()</name>
                <outbound type="class" confirmed="yes">org.apache.abdera.model.Element</outbound>
                <outbound type="feature" confirmed="yes">org.apache.abdera.model.ElementWrapper.internal</outbound>
                <inbound type="feature" confirmed="yes">org.apache.abdera.model.ElementWrapper.ElementWrapper(org.apache.abdera.factory.Factory, javax.xml.namespace.QName)</inbound>
                <inbound type="feature" confirmed="yes">org.apache.abdera.model.ElementWrapper.equals(java.lang.Object)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.model.ElementWrapper.getLanguage()</name>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="class" confirmed="yes">org.apache.abdera.model.Element</outbound>
                <outbound type="feature" confirmed="yes">org.apache.abdera.model.Element.getLanguage()</outbound>
                <outbound type="feature" confirmed="yes">org.apache.abdera.model.ElementWrapper.internal</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.model.ElementWrapper.getLanguageTag()</name>
                <outbound type="class" confirmed="no">org.apache.abdera.i18n.rfc4646.Lang</outbound>
                <outbound type="class" confirmed="yes">org.apache.abdera.model.Element</outbound>
                <outbound type="feature" confirmed="yes">org.apache.abdera.model.Element.getLanguageTag()</outbound>
                <outbound type="feature" confirmed="yes">org.apache.abdera.model.ElementWrapper.internal</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.model.ElementWrapper.getLocale()</name>
                <outbound type="class" confirmed="no">java.util.Locale</outbound>
                <outbound type="class" confirmed="yes">org.apache.abdera.model.Element</outbound>
                <outbound type="feature" confirmed="yes">org.apache.abdera.model.Element.getLocale()</outbound>
                <outbound type="feature" confirmed="yes">org.apache.abdera.model.ElementWrapper.internal</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.model.ElementWrapper.getMustPreserveWhitespace()</name>
                <outbound type="class" confirmed="yes">org.apache.abdera.model.Element</outbound>
                <outbound type="feature" confirmed="yes">org.apache.abdera.model.Element.getMustPreserveWhitespace()</outbound>
                <outbound type="feature" confirmed="yes">org.apache.abdera.model.ElementWrapper.internal</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.model.ElementWrapper.getNamespaces()</name>
                <outbound type="class" confirmed="no">java.util.Map</outbound>
                <outbound type="class" confirmed="yes">org.apache.abdera.model.Element</outbound>
                <outbound type="feature" confirmed="yes">org.apache.abdera.model.Element.getNamespaces()</outbound>
                <outbound type="feature" confirmed="yes">org.apache.abdera.model.ElementWrapper.internal</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.model.ElementWrapper.getNextSibling()</name>
                <outbound type="class" confirmed="yes">org.apache.abdera.model.Element</outbound>
                <outbound type="feature" confirmed="yes">org.apache.abdera.model.Element.getNextSibling()</outbound>
                <outbound type="feature" confirmed="yes">org.apache.abdera.model.ElementWrapper.internal</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.model.ElementWrapper.getNextSibling(javax.xml.namespace.QName)</name>
                <outbound type="class" confirmed="no">javax.xml.namespace.QName</outbound>
                <outbound type="class" confirmed="yes">org.apache.abdera.model.Element</outbound>
                <outbound type="feature" confirmed="yes">org.apache.abdera.model.Element.getNextSibling(javax.xml.namespace.QName)</outbound>
                <outbound type="feature" confirmed="yes">org.apache.abdera.model.ElementWrapper.internal</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.model.ElementWrapper.getParentElement()</name>
                <outbound type="class" confirmed="yes">org.apache.abdera.model.Base</outbound>
                <outbound type="class" confirmed="yes">org.apache.abdera.model.Element</outbound>
                <outbound type="feature" confirmed="yes">org.apache.abdera.model.Element.getParentElement()</outbound>
                <outbound type="feature" confirmed="yes">org.apache.abdera.model.ElementWrapper.internal</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.model.ElementWrapper.getPreviousSibling()</name>
                <outbound type="class" confirmed="yes">org.apache.abdera.model.Element</outbound>
                <outbound type="feature" confirmed="yes">org.apache.abdera.model.Element.getPreviousSibling()</outbound>
                <outbound type="feature" confirmed="yes">org.apache.abdera.model.ElementWrapper.internal</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.model.ElementWrapper.getPreviousSibling(javax.xml.namespace.QName)</name>
                <outbound type="class" confirmed="no">javax.xml.namespace.QName</outbound>
                <outbound type="class" confirmed="yes">org.apache.abdera.model.Element</outbound>
                <outbound type="feature" confirmed="yes">org.apache.abdera.model.Element.getPreviousSibling(javax.xml.namespace.QName)</outbound>
                <outbound type="feature" confirmed="yes">org.apache.abdera.model.ElementWrapper.internal</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.model.ElementWrapper.getQName()</name>
                <outbound type="class" confirmed="no">javax.xml.namespace.QName</outbound>
                <outbound type="class" confirmed="yes">org.apache.abdera.model.Element</outbound>
                <outbound type="feature" confirmed="yes">org.apache.abdera.model.Element.getQName()</outbound>
                <outbound type="feature" confirmed="yes">org.apache.abdera.model.ElementWrapper.internal</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.model.ElementWrapper.getResolvedBaseUri()</name>
                <outbound type="class" confirmed="no">org.apache.abdera.i18n.iri.IRI</outbound>
                <outbound type="class" confirmed="yes">org.apache.abdera.model.Element</outbound>
                <outbound type="feature" confirmed="yes">org.apache.abdera.model.Element.getResolvedBaseUri()</outbound>
                <outbound type="feature" confirmed="yes">org.apache.abdera.model.ElementWrapper.internal</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.model.ElementWrapper.getText()</name>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="class" confirmed="yes">org.apache.abdera.model.Element</outbound>
                <outbound type="feature" confirmed="yes">org.apache.abdera.model.Element.getText()</outbound>
                <outbound type="feature" confirmed="yes">org.apache.abdera.model.ElementWrapper.internal</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.model.ElementWrapper.hashCode()</name>
                <outbound type="feature" confirmed="no">java.lang.Object.hashCode()</outbound>
                <outbound type="class" confirmed="yes">org.apache.abdera.model.Element</outbound>
                <outbound type="feature" confirmed="yes">org.apache.abdera.model.ElementWrapper.internal</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.model.ElementWrapper.internal</name>
                <outbound type="class" confirmed="yes">org.apache.abdera.model.Element</outbound>
                <inbound type="feature" confirmed="yes">org.apache.abdera.model.ElementWrapper.ElementWrapper(org.apache.abdera.factory.Factory, javax.xml.namespace.QName)</inbound>
                <inbound type="feature" confirmed="yes">org.apache.abdera.model.ElementWrapper.ElementWrapper(org.apache.abdera.model.Element)</inbound>
                <inbound type="feature" confirmed="yes">org.apache.abdera.model.ElementWrapper.addComment(java.lang.String)</inbound>
                <inbound type="feature" confirmed="yes">org.apache.abdera.model.ElementWrapper.clone()</inbound>
                <inbound type="feature" confirmed="yes">org.apache.abdera.model.ElementWrapper.complete()</inbound>
                <inbound type="feature" confirmed="yes">org.apache.abdera.model.ElementWrapper.declareNS(java.lang.String, java.lang.String)</inbound>
                <inbound type="feature" confirmed="yes">org.apache.abdera.model.ElementWrapper.discard()</inbound>
                <inbound type="feature" confirmed="yes">org.apache.abdera.model.ElementWrapper.equals(java.lang.Object)</inbound>
                <inbound type="feature" confirmed="yes">org.apache.abdera.model.ElementWrapper.getAttributeValue(java.lang.String)</inbound>
                <inbound type="feature" confirmed="yes">org.apache.abdera.model.ElementWrapper.getAttributeValue(javax.xml.namespace.QName)</inbound>
                <inbound type="feature" confirmed="yes">org.apache.abdera.model.ElementWrapper.getAttributes()</inbound>
                <inbound type="feature" confirmed="yes">org.apache.abdera.model.ElementWrapper.getBaseUri()</inbound>
                <inbound type="feature" confirmed="yes">org.apache.abdera.model.ElementWrapper.getDefaultWriterOptions()</inbound>
                <inbound type="feature" confirmed="yes">org.apache.abdera.model.ElementWrapper.getDocument()</inbound>
                <inbound type="feature" confirmed="yes">org.apache.abdera.model.ElementWrapper.getElements()</inbound>
                <inbound type="feature" confirmed="yes">org.apache.abdera.model.ElementWrapper.getExtensionAttributes()</inbound>
                <inbound type="feature" confirmed="yes">org.apache.abdera.model.ElementWrapper.getFactory()</inbound>
                <inbound type="feature" confirmed="yes">org.apache.abdera.model.ElementWrapper.getFirstChild()</inbound>
                <inbound type="feature" confirmed="yes">org.apache.abdera.model.ElementWrapper.getFirstChild(javax.xml.namespace.QName)</inbound>
                <inbound type="feature" confirmed="yes">org.apache.abdera.model.ElementWrapper.getInternal()</inbound>
                <inbound type="feature" confirmed="yes">org.apache.abdera.model.ElementWrapper.getLanguage()</inbound>
                <inbound type="feature" confirmed="yes">org.apache.abdera.model.ElementWrapper.getLanguageTag()</inbound>
                <inbound type="feature" confirmed="yes">org.apache.abdera.model.ElementWrapper.getLocale()</inbound>
                <inbound type="feature" confirmed="yes">org.apache.abdera.model.ElementWrapper.getMustPreserveWhitespace()</inbound>
                <inbound type="feature" confirmed="yes">org.apache.abdera.model.ElementWrapper.getNamespaces()</inbound>
                <inbound type="feature" confirmed="yes">org.apache.abdera.model.ElementWrapper.getNextSibling()</inbound>
                <inbound type="feature" confirmed="yes">org.apache.abdera.model.ElementWrapper.getNextSibling(javax.xml.namespace.QName)</inbound>
                <inbound type="feature" confirmed="yes">org.apache.abdera.model.ElementWrapper.getParentElement()</inbound>
                <inbound type="feature" confirmed="yes">org.apache.abdera.model.ElementWrapper.getPreviousSibling()</inbound>
                <inbound type="feature" confirmed="yes">org.apache.abdera.model.ElementWrapper.getPreviousSibling(javax.xml.namespace.QName)</inbound>
                <inbound type="feature" confirmed="yes">org.apache.abdera.model.ElementWrapper.getQName()</inbound>
                <inbound type="feature" confirmed="yes">org.apache.abdera.model.ElementWrapper.getResolvedBaseUri()</inbound>
                <inbound type="feature" confirmed="yes">org.apache.abdera.model.ElementWrapper.getText()</inbound>
                <inbound type="feature" confirmed="yes">org.apache.abdera.model.ElementWrapper.hashCode()</inbound>
                <inbound type="feature" confirmed="yes">org.apache.abdera.model.ElementWrapper.iterator()</inbound>
                <inbound type="feature" confirmed="yes">org.apache.abdera.model.ElementWrapper.removeAttribute(java.lang.String)</inbound>
                <inbound type="feature" confirmed="yes">org.apache.abdera.model.ElementWrapper.removeAttribute(javax.xml.namespace.QName)</inbound>
                <inbound type="feature" confirmed="yes">org.apache.abdera.model.ElementWrapper.setAttributeValue(java.lang.String, java.lang.String)</inbound>
                <inbound type="feature" confirmed="yes">org.apache.abdera.model.ElementWrapper.setAttributeValue(javax.xml.namespace.QName, java.lang.String)</inbound>
                <inbound type="feature" confirmed="yes">org.apache.abdera.model.ElementWrapper.setBaseUri(java.lang.String)</inbound>
                <inbound type="feature" confirmed="yes">org.apache.abdera.model.ElementWrapper.setBaseUri(org.apache.abdera.i18n.iri.IRI)</inbound>
                <inbound type="feature" confirmed="yes">org.apache.abdera.model.ElementWrapper.setLanguage(java.lang.String)</inbound>
                <inbound type="feature" confirmed="yes">org.apache.abdera.model.ElementWrapper.setMustPreserveWhitespace(boolean)</inbound>
                <inbound type="feature" confirmed="yes">org.apache.abdera.model.ElementWrapper.setParentElement(org.apache.abdera.model.Element)</inbound>
                <inbound type="feature" confirmed="yes">org.apache.abdera.model.ElementWrapper.setText(java.lang.String)</inbound>
                <inbound type="feature" confirmed="yes">org.apache.abdera.model.ElementWrapper.setText(javax.activation.DataHandler)</inbound>
                <inbound type="feature" confirmed="yes">org.apache.abdera.model.ElementWrapper.toString()</inbound>
                <inbound type="feature" confirmed="yes">org.apache.abdera.model.ElementWrapper.writeTo(java.io.OutputStream)</inbound>
                <inbound type="feature" confirmed="yes">org.apache.abdera.model.ElementWrapper.writeTo(java.io.OutputStream, org.apache.abdera.writer.WriterOptions)</inbound>
                <inbound type="feature" confirmed="yes">org.apache.abdera.model.ElementWrapper.writeTo(java.io.Writer)</inbound>
                <inbound type="feature" confirmed="yes">org.apache.abdera.model.ElementWrapper.writeTo(java.io.Writer, org.apache.abdera.writer.WriterOptions)</inbound>
                <inbound type="feature" confirmed="yes">org.apache.abdera.model.ElementWrapper.writeTo(java.lang.String, java.io.OutputStream)</inbound>
                <inbound type="feature" confirmed="yes">org.apache.abdera.model.ElementWrapper.writeTo(java.lang.String, java.io.OutputStream, org.apache.abdera.writer.WriterOptions)</inbound>
                <inbound type="feature" confirmed="yes">org.apache.abdera.model.ElementWrapper.writeTo(java.lang.String, java.io.Writer)</inbound>
                <inbound type="feature" confirmed="yes">org.apache.abdera.model.ElementWrapper.writeTo(java.lang.String, java.io.Writer, org.apache.abdera.writer.WriterOptions)</inbound>
                <inbound type="feature" confirmed="yes">org.apache.abdera.model.ElementWrapper.writeTo(org.apache.abdera.writer.Writer, java.io.OutputStream)</inbound>
                <inbound type="feature" confirmed="yes">org.apache.abdera.model.ElementWrapper.writeTo(org.apache.abdera.writer.Writer, java.io.OutputStream, org.apache.abdera.writer.WriterOptions)</inbound>
                <inbound type="feature" confirmed="yes">org.apache.abdera.model.ElementWrapper.writeTo(org.apache.abdera.writer.Writer, java.io.Writer)</inbound>
                <inbound type="feature" confirmed="yes">org.apache.abdera.model.ElementWrapper.writeTo(org.apache.abdera.writer.Writer, java.io.Writer, org.apache.abdera.writer.WriterOptions)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.model.ElementWrapper.iterator()</name>
                <outbound type="class" confirmed="no">java.util.Iterator</outbound>
                <outbound type="class" confirmed="yes">org.apache.abdera.model.Element</outbound>
                <outbound type="feature" confirmed="no">org.apache.abdera.model.Element.iterator()</outbound>
                <outbound type="feature" confirmed="yes">org.apache.abdera.model.ElementWrapper.internal</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.model.ElementWrapper.removeAttribute(java.lang.String)</name>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="class" confirmed="yes">org.apache.abdera.model.Element</outbound>
                <outbound type="feature" confirmed="yes">org.apache.abdera.model.Element.removeAttribute(java.lang.String)</outbound>
                <outbound type="feature" confirmed="yes">org.apache.abdera.model.ElementWrapper.internal</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.model.ElementWrapper.removeAttribute(javax.xml.namespace.QName)</name>
                <outbound type="class" confirmed="no">javax.xml.namespace.QName</outbound>
                <outbound type="class" confirmed="yes">org.apache.abdera.model.Element</outbound>
                <outbound type="feature" confirmed="yes">org.apache.abdera.model.Element.removeAttribute(javax.xml.namespace.QName)</outbound>
                <outbound type="feature" confirmed="yes">org.apache.abdera.model.ElementWrapper.internal</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.model.ElementWrapper.setAttributeValue(java.lang.String, java.lang.String)</name>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="class" confirmed="yes">org.apache.abdera.model.Element</outbound>
                <outbound type="feature" confirmed="yes">org.apache.abdera.model.Element.setAttributeValue(java.lang.String, java.lang.String)</outbound>
                <outbound type="feature" confirmed="yes">org.apache.abdera.model.ElementWrapper.internal</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.model.ElementWrapper.setAttributeValue(javax.xml.namespace.QName, java.lang.String)</name>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="class" confirmed="no">javax.xml.namespace.QName</outbound>
                <outbound type="class" confirmed="yes">org.apache.abdera.model.Element</outbound>
                <outbound type="feature" confirmed="yes">org.apache.abdera.model.Element.setAttributeValue(javax.xml.namespace.QName, java.lang.String)</outbound>
                <outbound type="feature" confirmed="yes">org.apache.abdera.model.ElementWrapper.internal</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.model.ElementWrapper.setBaseUri(java.lang.String)</name>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="class" confirmed="yes">org.apache.abdera.model.Element</outbound>
                <outbound type="feature" confirmed="yes">org.apache.abdera.model.Element.setBaseUri(java.lang.String)</outbound>
                <outbound type="feature" confirmed="yes">org.apache.abdera.model.ElementWrapper.internal</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.model.ElementWrapper.setBaseUri(org.apache.abdera.i18n.iri.IRI)</name>
                <outbound type="class" confirmed="no">org.apache.abdera.i18n.iri.IRI</outbound>
                <outbound type="class" confirmed="yes">org.apache.abdera.model.Element</outbound>
                <outbound type="feature" confirmed="yes">org.apache.abdera.model.Element.setBaseUri(org.apache.abdera.i18n.iri.IRI)</outbound>
                <outbound type="feature" confirmed="yes">org.apache.abdera.model.ElementWrapper.internal</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.model.ElementWrapper.setLanguage(java.lang.String)</name>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="class" confirmed="yes">org.apache.abdera.model.Element</outbound>
                <outbound type="feature" confirmed="yes">org.apache.abdera.model.Element.setLanguage(java.lang.String)</outbound>
                <outbound type="feature" confirmed="yes">org.apache.abdera.model.ElementWrapper.internal</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.model.ElementWrapper.setMustPreserveWhitespace(boolean)</name>
                <outbound type="class" confirmed="yes">org.apache.abdera.model.Element</outbound>
                <outbound type="feature" confirmed="yes">org.apache.abdera.model.Element.setMustPreserveWhitespace(boolean)</outbound>
                <outbound type="feature" confirmed="yes">org.apache.abdera.model.ElementWrapper.internal</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.model.ElementWrapper.setParentElement(org.apache.abdera.model.Element)</name>
                <outbound type="class" confirmed="yes">org.apache.abdera.model.Element</outbound>
                <outbound type="feature" confirmed="yes">org.apache.abdera.model.Element.setParentElement(org.apache.abdera.model.Element)</outbound>
                <outbound type="feature" confirmed="yes">org.apache.abdera.model.ElementWrapper.internal</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.model.ElementWrapper.setText(java.lang.String)</name>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="class" confirmed="yes">org.apache.abdera.model.Element</outbound>
                <outbound type="feature" confirmed="yes">org.apache.abdera.model.Element.setText(java.lang.String)</outbound>
                <outbound type="feature" confirmed="yes">org.apache.abdera.model.ElementWrapper.internal</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.model.ElementWrapper.setText(javax.activation.DataHandler)</name>
                <outbound type="class" confirmed="no">javax.activation.DataHandler</outbound>
                <outbound type="class" confirmed="yes">org.apache.abdera.model.Element</outbound>
                <outbound type="feature" confirmed="yes">org.apache.abdera.model.Element.setText(javax.activation.DataHandler)</outbound>
                <outbound type="feature" confirmed="yes">org.apache.abdera.model.ElementWrapper.internal</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.model.ElementWrapper.toString()</name>
                <outbound type="feature" confirmed="no">java.lang.Object.toString()</outbound>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="class" confirmed="yes">org.apache.abdera.model.Element</outbound>
                <outbound type="feature" confirmed="yes">org.apache.abdera.model.ElementWrapper.internal</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.model.ElementWrapper.writeTo(java.io.OutputStream)</name>
                <outbound type="class" confirmed="no">java.io.IOException</outbound>
                <outbound type="class" confirmed="no">java.io.OutputStream</outbound>
                <outbound type="class" confirmed="yes">org.apache.abdera.model.Element</outbound>
                <outbound type="feature" confirmed="no">org.apache.abdera.model.Element.writeTo(java.io.OutputStream)</outbound>
                <outbound type="feature" confirmed="yes">org.apache.abdera.model.ElementWrapper.internal</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.model.ElementWrapper.writeTo(java.io.OutputStream, org.apache.abdera.writer.WriterOptions)</name>
                <outbound type="class" confirmed="no">java.io.IOException</outbound>
                <outbound type="class" confirmed="no">java.io.OutputStream</outbound>
                <outbound type="class" confirmed="yes">org.apache.abdera.model.Element</outbound>
                <outbound type="feature" confirmed="no">org.apache.abdera.model.Element.writeTo(java.io.OutputStream, org.apache.abdera.writer.WriterOptions)</outbound>
                <outbound type="feature" confirmed="yes">org.apache.abdera.model.ElementWrapper.internal</outbound>
                <outbound type="class" confirmed="yes">org.apache.abdera.writer.WriterOptions</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.model.ElementWrapper.writeTo(java.io.Writer)</name>
                <outbound type="class" confirmed="no">java.io.IOException</outbound>
                <outbound type="class" confirmed="no">java.io.Writer</outbound>
                <outbound type="class" confirmed="yes">org.apache.abdera.model.Element</outbound>
                <outbound type="feature" confirmed="no">org.apache.abdera.model.Element.writeTo(java.io.Writer)</outbound>
                <outbound type="feature" confirmed="yes">org.apache.abdera.model.ElementWrapper.internal</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.model.ElementWrapper.writeTo(java.io.Writer, org.apache.abdera.writer.WriterOptions)</name>
                <outbound type="class" confirmed="no">java.io.IOException</outbound>
                <outbound type="class" confirmed="no">java.io.Writer</outbound>
                <outbound type="class" confirmed="yes">org.apache.abdera.model.Element</outbound>
                <outbound type="feature" confirmed="no">org.apache.abdera.model.Element.writeTo(java.io.Writer, org.apache.abdera.writer.WriterOptions)</outbound>
                <outbound type="feature" confirmed="yes">org.apache.abdera.model.ElementWrapper.internal</outbound>
                <outbound type="class" confirmed="yes">org.apache.abdera.writer.WriterOptions</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.model.ElementWrapper.writeTo(java.lang.String, java.io.OutputStream)</name>
                <outbound type="class" confirmed="no">java.io.IOException</outbound>
                <outbound type="class" confirmed="no">java.io.OutputStream</outbound>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="class" confirmed="yes">org.apache.abdera.model.Element</outbound>
                <outbound type="feature" confirmed="no">org.apache.abdera.model.Element.writeTo(java.lang.String, java.io.OutputStream)</outbound>
                <outbound type="feature" confirmed="yes">org.apache.abdera.model.ElementWrapper.internal</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.model.ElementWrapper.writeTo(java.lang.String, java.io.OutputStream, org.apache.abdera.writer.WriterOptions)</name>
                <outbound type="class" confirmed="no">java.io.IOException</outbound>
                <outbound type="class" confirmed="no">java.io.OutputStream</outbound>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="class" confirmed="yes">org.apache.abdera.model.Element</outbound>
                <outbound type="feature" confirmed="no">org.apache.abdera.model.Element.writeTo(java.lang.String, java.io.OutputStream, org.apache.abdera.writer.WriterOptions)</outbound>
                <outbound type="feature" confirmed="yes">org.apache.abdera.model.ElementWrapper.internal</outbound>
                <outbound type="class" confirmed="yes">org.apache.abdera.writer.WriterOptions</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.model.ElementWrapper.writeTo(java.lang.String, java.io.Writer)</name>
                <outbound type="class" confirmed="no">java.io.IOException</outbound>
                <outbound type="class" confirmed="no">java.io.Writer</outbound>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="class" confirmed="yes">org.apache.abdera.model.Element</outbound>
                <outbound type="feature" confirmed="no">org.apache.abdera.model.Element.writeTo(java.lang.String, java.io.Writer)</outbound>
                <outbound type="feature" confirmed="yes">org.apache.abdera.model.ElementWrapper.internal</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.model.ElementWrapper.writeTo(java.lang.String, java.io.Writer, org.apache.abdera.writer.WriterOptions)</name>
                <outbound type="class" confirmed="no">java.io.IOException</outbound>
                <outbound type="class" confirmed="no">java.io.Writer</outbound>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="class" confirmed="yes">org.apache.abdera.model.Element</outbound>
                <outbound type="feature" confirmed="no">org.apache.abdera.model.Element.writeTo(java.lang.String, java.io.Writer, org.apache.abdera.writer.WriterOptions)</outbound>
                <outbound type="feature" confirmed="yes">org.apache.abdera.model.ElementWrapper.internal</outbound>
                <outbound type="class" confirmed="yes">org.apache.abdera.writer.WriterOptions</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.model.ElementWrapper.writeTo(org.apache.abdera.writer.Writer, java.io.OutputStream)</name>
                <outbound type="class" confirmed="no">java.io.IOException</outbound>
                <outbound type="class" confirmed="no">java.io.OutputStream</outbound>
                <outbound type="class" confirmed="yes">org.apache.abdera.model.Element</outbound>
                <outbound type="feature" confirmed="no">org.apache.abdera.model.Element.writeTo(org.apache.abdera.writer.Writer, java.io.OutputStream)</outbound>
                <outbound type="feature" confirmed="yes">org.apache.abdera.model.ElementWrapper.internal</outbound>
                <outbound type="class" confirmed="yes">org.apache.abdera.writer.Writer</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.model.ElementWrapper.writeTo(org.apache.abdera.writer.Writer, java.io.OutputStream, org.apache.abdera.writer.WriterOptions)</name>
                <outbound type="class" confirmed="no">java.io.IOException</outbound>
                <outbound type="class" confirmed="no">java.io.OutputStream</outbound>
                <outbound type="class" confirmed="yes">org.apache.abdera.model.Element</outbound>
                <outbound type="feature" confirmed="no">org.apache.abdera.model.Element.writeTo(org.apache.abdera.writer.Writer, java.io.OutputStream, org.apache.abdera.writer.WriterOptions)</outbound>
                <outbound type="feature" confirmed="yes">org.apache.abdera.model.ElementWrapper.internal</outbound>
                <outbound type="class" confirmed="yes">org.apache.abdera.writer.Writer</outbound>
                <outbound type="class" confirmed="yes">org.apache.abdera.writer.WriterOptions</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.model.ElementWrapper.writeTo(org.apache.abdera.writer.Writer, java.io.Writer)</name>
                <outbound type="class" confirmed="no">java.io.IOException</outbound>
                <outbound type="class" confirmed="no">java.io.Writer</outbound>
                <outbound type="class" confirmed="yes">org.apache.abdera.model.Element</outbound>
                <outbound type="feature" confirmed="no">org.apache.abdera.model.Element.writeTo(org.apache.abdera.writer.Writer, java.io.Writer)</outbound>
                <outbound type="feature" confirmed="yes">org.apache.abdera.model.ElementWrapper.internal</outbound>
                <outbound type="class" confirmed="yes">org.apache.abdera.writer.Writer</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.model.ElementWrapper.writeTo(org.apache.abdera.writer.Writer, java.io.Writer, org.apache.abdera.writer.WriterOptions)</name>
                <outbound type="class" confirmed="no">java.io.IOException</outbound>
                <outbound type="class" confirmed="no">java.io.Writer</outbound>
                <outbound type="class" confirmed="yes">org.apache.abdera.model.Element</outbound>
                <outbound type="feature" confirmed="no">org.apache.abdera.model.Element.writeTo(org.apache.abdera.writer.Writer, java.io.Writer, org.apache.abdera.writer.WriterOptions)</outbound>
                <outbound type="feature" confirmed="yes">org.apache.abdera.model.ElementWrapper.internal</outbound>
                <outbound type="class" confirmed="yes">org.apache.abdera.writer.Writer</outbound>
                <outbound type="class" confirmed="yes">org.apache.abdera.writer.WriterOptions</outbound>
            </feature>
        </class>
        <class confirmed="yes">
            <name>org.apache.abdera.model.Entry</name>
            <outbound type="class" confirmed="no">java.lang.Object</outbound>
            <outbound type="class" confirmed="yes">org.apache.abdera.model.ExtensibleElement</outbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.Abdera.newEntry()</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.factory.Factory.newEntry()</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.factory.Factory.newEntry(org.apache.abdera.model.Base)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.model.Feed.addEntry()</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.model.Feed.addEntry(org.apache.abdera.model.Entry)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.model.Feed.getEntry(java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.model.Feed.insertEntry()</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.model.Feed.insertEntry(org.apache.abdera.model.Entry)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.util.MimeTypeHelper.getMimeType(org.apache.abdera.model.Base)</inbound>
            <feature confirmed="yes">
                <name>org.apache.abdera.model.Entry.addAuthor(java.lang.String)</name>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="class" confirmed="yes">org.apache.abdera.model.Person</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.model.Entry.addAuthor(java.lang.String, java.lang.String, java.lang.String)</name>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="class" confirmed="yes">org.apache.abdera.model.Person</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.model.Entry.addAuthor(org.apache.abdera.model.Person)</name>
                <outbound type="class" confirmed="yes">org.apache.abdera.model.Person</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.model.Entry.addCategory(java.lang.String)</name>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="class" confirmed="yes">org.apache.abdera.model.Category</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.model.Entry.addCategory(java.lang.String, java.lang.String, java.lang.String)</name>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="class" confirmed="yes">org.apache.abdera.model.Category</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.model.Entry.addCategory(org.apache.abdera.model.Category)</name>
                <outbound type="class" confirmed="yes">org.apache.abdera.model.Category</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.model.Entry.addContributor(java.lang.String)</name>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="class" confirmed="yes">org.apache.abdera.model.Person</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.model.Entry.addContributor(java.lang.String, java.lang.String, java.lang.String)</name>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="class" confirmed="yes">org.apache.abdera.model.Person</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.model.Entry.addContributor(org.apache.abdera.model.Person)</name>
                <outbound type="class" confirmed="yes">org.apache.abdera.model.Person</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.model.Entry.addControl()</name>
                <outbound type="class" confirmed="yes">org.apache.abdera.model.Control</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.model.Entry.addLink(java.lang.String)</name>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="class" confirmed="yes">org.apache.abdera.model.Link</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.model.Entry.addLink(java.lang.String, java.lang.String)</name>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="class" confirmed="yes">org.apache.abdera.model.Link</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.model.Entry.addLink(java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, long)</name>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="class" confirmed="yes">org.apache.abdera.model.Link</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.model.Entry.addLink(org.apache.abdera.model.Link)</name>
                <outbound type="class" confirmed="yes">org.apache.abdera.model.Link</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.model.Entry.getAlternateLink()</name>
                <outbound type="class" confirmed="yes">org.apache.abdera.model.Link</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.model.Entry.getAlternateLink(java.lang.String, java.lang.String)</name>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="class" confirmed="yes">org.apache.abdera.model.Link</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.model.Entry.getAlternateLinkResolvedHref()</name>
                <outbound type="class" confirmed="no">org.apache.abdera.i18n.iri.IRI</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.model.Entry.getAlternateLinkResolvedHref(java.lang.String, java.lang.String)</name>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="class" confirmed="no">org.apache.abdera.i18n.iri.IRI</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.model.Entry.getAuthor()</name>
                <outbound type="class" confirmed="yes">org.apache.abdera.model.Person</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.model.Entry.getAuthors()</name>
                <outbound type="class" confirmed="no">java.util.List</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.model.Entry.getCategories()</name>
                <outbound type="class" confirmed="no">java.util.List</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.model.Entry.getCategories(java.lang.String)</name>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="class" confirmed="no">java.util.List</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.model.Entry.getContent()</name>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.model.Entry.getContentElement()</name>
                <outbound type="class" confirmed="yes">org.apache.abdera.model.Content</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.model.Entry.getContentMimeType()</name>
                <outbound type="class" confirmed="no">javax.activation.MimeType</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.model.Entry.getContentSrc()</name>
                <outbound type="class" confirmed="no">org.apache.abdera.i18n.iri.IRI</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.model.Entry.getContentStream()</name>
                <outbound type="class" confirmed="no">java.io.IOException</outbound>
                <outbound type="class" confirmed="no">java.io.InputStream</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.model.Entry.getContentType()</name>
                <outbound type="class" confirmed="yes">org.apache.abdera.model.Content$Type</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.model.Entry.getContributors()</name>
                <outbound type="class" confirmed="no">java.util.List</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.model.Entry.getControl()</name>
                <outbound type="class" confirmed="yes">org.apache.abdera.model.Control</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.model.Entry.getControl(boolean)</name>
                <outbound type="class" confirmed="yes">org.apache.abdera.model.Control</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.model.Entry.getEditLink()</name>
                <outbound type="class" confirmed="yes">org.apache.abdera.model.Link</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.model.Entry.getEditLinkResolvedHref()</name>
                <outbound type="class" confirmed="no">org.apache.abdera.i18n.iri.IRI</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.model.Entry.getEditMediaLink()</name>
                <outbound type="class" confirmed="yes">org.apache.abdera.model.Link</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.model.Entry.getEditMediaLink(java.lang.String, java.lang.String)</name>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="class" confirmed="yes">org.apache.abdera.model.Link</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.model.Entry.getEditMediaLinkResolvedHref()</name>
                <outbound type="class" confirmed="no">org.apache.abdera.i18n.iri.IRI</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.model.Entry.getEditMediaLinkResolvedHref(java.lang.String, java.lang.String)</name>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="class" confirmed="no">org.apache.abdera.i18n.iri.IRI</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.model.Entry.getEdited()</name>
                <outbound type="class" confirmed="no">java.util.Date</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.model.Entry.getEditedElement()</name>
                <outbound type="class" confirmed="yes">org.apache.abdera.model.DateTime</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.model.Entry.getEnclosureLink()</name>
                <outbound type="class" confirmed="yes">org.apache.abdera.model.Link</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.model.Entry.getEnclosureLinkResolvedHref()</name>
                <outbound type="class" confirmed="no">org.apache.abdera.i18n.iri.IRI</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.model.Entry.getId()</name>
                <outbound type="class" confirmed="no">org.apache.abdera.i18n.iri.IRI</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.model.Entry.getIdElement()</name>
                <outbound type="class" confirmed="yes">org.apache.abdera.model.IRIElement</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.model.Entry.getLink(java.lang.String)</name>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="class" confirmed="yes">org.apache.abdera.model.Link</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.model.Entry.getLinkResolvedHref(java.lang.String)</name>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="class" confirmed="no">org.apache.abdera.i18n.iri.IRI</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.model.Entry.getLinks()</name>
                <outbound type="class" confirmed="no">java.util.List</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.model.Entry.getLinks(java.lang.String)</name>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="class" confirmed="no">java.util.List</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.model.Entry.getLinks(java.lang.String[])</name>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="class" confirmed="no">java.util.List</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.model.Entry.getPublished()</name>
                <outbound type="class" confirmed="no">java.util.Date</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.model.Entry.getPublishedElement()</name>
                <outbound type="class" confirmed="yes">org.apache.abdera.model.DateTime</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.model.Entry.getRights()</name>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.model.Entry.getRightsElement()</name>
                <outbound type="class" confirmed="yes">org.apache.abdera.model.Text</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.model.Entry.getRightsType()</name>
                <outbound type="class" confirmed="yes">org.apache.abdera.model.Text$Type</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.model.Entry.getSelfLink()</name>
                <outbound type="class" confirmed="yes">org.apache.abdera.model.Link</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.model.Entry.getSelfLinkResolvedHref()</name>
                <outbound type="class" confirmed="no">org.apache.abdera.i18n.iri.IRI</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.model.Entry.getSource()</name>
                <outbound type="class" confirmed="yes">org.apache.abdera.model.Source</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.model.Entry.getSummary()</name>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.model.Entry.getSummaryElement()</name>
                <outbound type="class" confirmed="yes">org.apache.abdera.model.Text</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.model.Entry.getSummaryType()</name>
                <outbound type="class" confirmed="yes">org.apache.abdera.model.Text$Type</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.model.Entry.getTitle()</name>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.model.Entry.getTitleElement()</name>
                <outbound type="class" confirmed="yes">org.apache.abdera.model.Text</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.model.Entry.getTitleType()</name>
                <outbound type="class" confirmed="yes">org.apache.abdera.model.Text$Type</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.model.Entry.getUpdated()</name>
                <outbound type="class" confirmed="no">java.util.Date</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.model.Entry.getUpdatedElement()</name>
                <outbound type="class" confirmed="yes">org.apache.abdera.model.DateTime</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.model.Entry.isDraft()</name>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.model.Entry.newId()</name>
                <outbound type="class" confirmed="yes">org.apache.abdera.model.IRIElement</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.model.Entry.setContent(java.io.InputStream)</name>
                <outbound type="class" confirmed="no">java.io.InputStream</outbound>
                <outbound type="class" confirmed="yes">org.apache.abdera.model.Content</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.model.Entry.setContent(java.io.InputStream, java.lang.String)</name>
                <outbound type="class" confirmed="no">java.io.InputStream</outbound>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="class" confirmed="yes">org.apache.abdera.model.Content</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.model.Entry.setContent(java.lang.String)</name>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="class" confirmed="yes">org.apache.abdera.model.Content</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.model.Entry.setContent(java.lang.String, java.lang.String)</name>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="class" confirmed="yes">org.apache.abdera.model.Content</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.model.Entry.setContent(java.lang.String, org.apache.abdera.model.Content$Type)</name>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="class" confirmed="yes">org.apache.abdera.model.Content</outbound>
                <outbound type="class" confirmed="yes">org.apache.abdera.model.Content$Type</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.model.Entry.setContent(javax.activation.DataHandler)</name>
                <outbound type="class" confirmed="no">javax.activation.DataHandler</outbound>
                <outbound type="class" confirmed="yes">org.apache.abdera.model.Content</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.model.Entry.setContent(javax.activation.DataHandler, java.lang.String)</name>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="class" confirmed="no">javax.activation.DataHandler</outbound>
                <outbound type="class" confirmed="yes">org.apache.abdera.model.Content</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.model.Entry.setContent(org.apache.abdera.i18n.iri.IRI, java.lang.String)</name>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="class" confirmed="no">org.apache.abdera.i18n.iri.IRI</outbound>
                <outbound type="class" confirmed="yes">org.apache.abdera.model.Content</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.model.Entry.setContent(org.apache.abdera.model.Element)</name>
                <outbound type="class" confirmed="yes">org.apache.abdera.model.Content</outbound>
                <outbound type="class" confirmed="yes">org.apache.abdera.model.Element</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.model.Entry.setContent(org.apache.abdera.model.Element, java.lang.String)</name>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="class" confirmed="yes">org.apache.abdera.model.Content</outbound>
                <outbound type="class" confirmed="yes">org.apache.abdera.model.Element</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.model.Entry.setContentAsHtml(java.lang.String)</name>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="class" confirmed="yes">org.apache.abdera.model.Content</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.model.Entry.setContentAsXhtml(java.lang.String)</name>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="class" confirmed="yes">org.apache.abdera.model.Content</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.model.Entry.setContentElement(org.apache.abdera.model.Content)</name>
                <outbound type="class" confirmed="yes">org.apache.abdera.model.Content</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.model.Entry.setControl(org.apache.abdera.model.Control)</name>
                <outbound type="class" confirmed="yes">org.apache.abdera.model.Control</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.model.Entry.setDraft(boolean)</name>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.model.Entry.setEdited(java.lang.String)</name>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="class" confirmed="yes">org.apache.abdera.model.DateTime</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.model.Entry.setEdited(java.util.Date)</name>
                <outbound type="class" confirmed="no">java.util.Date</outbound>
                <outbound type="class" confirmed="yes">org.apache.abdera.model.DateTime</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.model.Entry.setEditedElement(org.apache.abdera.model.DateTime)</name>
                <outbound type="class" confirmed="yes">org.apache.abdera.model.DateTime</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.model.Entry.setId(java.lang.String)</name>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="class" confirmed="yes">org.apache.abdera.model.IRIElement</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.model.Entry.setId(java.lang.String, boolean)</name>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="class" confirmed="yes">org.apache.abdera.model.IRIElement</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.model.Entry.setIdElement(org.apache.abdera.model.IRIElement)</name>
                <outbound type="class" confirmed="yes">org.apache.abdera.model.IRIElement</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.model.Entry.setPublished(java.lang.String)</name>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="class" confirmed="yes">org.apache.abdera.model.DateTime</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.model.Entry.setPublished(java.util.Date)</name>
                <outbound type="class" confirmed="no">java.util.Date</outbound>
                <outbound type="class" confirmed="yes">org.apache.abdera.model.DateTime</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.model.Entry.setPublishedElement(org.apache.abdera.model.DateTime)</name>
                <outbound type="class" confirmed="yes">org.apache.abdera.model.DateTime</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.model.Entry.setRights(java.lang.String)</name>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="class" confirmed="yes">org.apache.abdera.model.Text</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.model.Entry.setRights(java.lang.String, org.apache.abdera.model.Text$Type)</name>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="class" confirmed="yes">org.apache.abdera.model.Text</outbound>
                <outbound type="class" confirmed="yes">org.apache.abdera.model.Text$Type</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.model.Entry.setRights(org.apache.abdera.model.Div)</name>
                <outbound type="class" confirmed="yes">org.apache.abdera.model.Div</outbound>
                <outbound type="class" confirmed="yes">org.apache.abdera.model.Text</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.model.Entry.setRightsAsHtml(java.lang.String)</name>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="class" confirmed="yes">org.apache.abdera.model.Text</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.model.Entry.setRightsAsXhtml(java.lang.String)</name>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="class" confirmed="yes">org.apache.abdera.model.Text</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.model.Entry.setRightsElement(org.apache.abdera.model.Text)</name>
                <outbound type="class" confirmed="yes">org.apache.abdera.model.Text</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.model.Entry.setSource(org.apache.abdera.model.Source)</name>
                <outbound type="class" confirmed="yes">org.apache.abdera.model.Source</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.model.Entry.setSummary(java.lang.String)</name>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="class" confirmed="yes">org.apache.abdera.model.Text</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.model.Entry.setSummary(java.lang.String, org.apache.abdera.model.Text$Type)</name>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="class" confirmed="yes">org.apache.abdera.model.Text</outbound>
                <outbound type="class" confirmed="yes">org.apache.abdera.model.Text$Type</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.model.Entry.setSummary(org.apache.abdera.model.Div)</name>
                <outbound type="class" confirmed="yes">org.apache.abdera.model.Div</outbound>
                <outbound type="class" confirmed="yes">org.apache.abdera.model.Text</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.model.Entry.setSummaryAsHtml(java.lang.String)</name>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="class" confirmed="yes">org.apache.abdera.model.Text</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.model.Entry.setSummaryAsXhtml(java.lang.String)</name>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="class" confirmed="yes">org.apache.abdera.model.Text</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.model.Entry.setSummaryElement(org.apache.abdera.model.Text)</name>
                <outbound type="class" confirmed="yes">org.apache.abdera.model.Text</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.model.Entry.setTitle(java.lang.String)</name>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="class" confirmed="yes">org.apache.abdera.model.Text</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.model.Entry.setTitle(java.lang.String, org.apache.abdera.model.Text$Type)</name>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="class" confirmed="yes">org.apache.abdera.model.Text</outbound>
                <outbound type="class" confirmed="yes">org.apache.abdera.model.Text$Type</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.model.Entry.setTitle(org.apache.abdera.model.Div)</name>
                <outbound type="class" confirmed="yes">org.apache.abdera.model.Div</outbound>
                <outbound type="class" confirmed="yes">org.apache.abdera.model.Text</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.model.Entry.setTitleAsHtml(java.lang.String)</name>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="class" confirmed="yes">org.apache.abdera.model.Text</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.model.Entry.setTitleAsXhtml(java.lang.String)</name>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="class" confirmed="yes">org.apache.abdera.model.Text</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.model.Entry.setTitleElement(org.apache.abdera.model.Text)</name>
                <outbound type="class" confirmed="yes">org.apache.abdera.model.Text</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.model.Entry.setUpdated(java.lang.String)</name>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="class" confirmed="yes">org.apache.abdera.model.DateTime</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.model.Entry.setUpdated(java.util.Date)</name>
                <outbound type="class" confirmed="no">java.util.Date</outbound>
                <outbound type="class" confirmed="yes">org.apache.abdera.model.DateTime</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.model.Entry.setUpdatedElement(org.apache.abdera.model.DateTime)</name>
                <outbound type="class" confirmed="yes">org.apache.abdera.model.DateTime</outbound>
            </feature>
        </class>
        <class confirmed="yes">
            <name>org.apache.abdera.model.ExtensibleElement</name>
            <outbound type="class" confirmed="no">java.lang.Object</outbound>
            <outbound type="class" confirmed="yes">org.apache.abdera.model.Element</outbound>
            <inbound type="class" confirmed="yes">org.apache.abdera.model.Categories</inbound>
            <inbound type="class" confirmed="yes">org.apache.abdera.model.Category</inbound>
            <inbound type="class" confirmed="yes">org.apache.abdera.model.Collection</inbound>
            <inbound type="class" confirmed="yes">org.apache.abdera.model.Control</inbound>
            <inbound type="class" confirmed="yes">org.apache.abdera.model.Div</inbound>
            <inbound type="class" confirmed="yes">org.apache.abdera.model.Entry</inbound>
            <inbound type="class" confirmed="yes">org.apache.abdera.model.ExtensibleElementWrapper</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.model.ExtensibleElementWrapper.addExtension(java.lang.String, java.lang.String, java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.model.ExtensibleElementWrapper.addExtension(javax.xml.namespace.QName)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.model.ExtensibleElementWrapper.addExtension(javax.xml.namespace.QName, javax.xml.namespace.QName)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.model.ExtensibleElementWrapper.addExtension(org.apache.abdera.model.Element)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.model.ExtensibleElementWrapper.addExtension(org.apache.abdera.model.Element, org.apache.abdera.model.Element)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.model.ExtensibleElementWrapper.addSimpleExtension(java.lang.String, java.lang.String, java.lang.String, java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.model.ExtensibleElementWrapper.addSimpleExtension(javax.xml.namespace.QName, java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.model.ExtensibleElementWrapper.getExtInternal()</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.model.ExtensibleElementWrapper.getExtension(java.lang.Class)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.model.ExtensibleElementWrapper.getExtension(javax.xml.namespace.QName)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.model.ExtensibleElementWrapper.getExtensions()</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.model.ExtensibleElementWrapper.getExtensions(java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.model.ExtensibleElementWrapper.getExtensions(javax.xml.namespace.QName)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.model.ExtensibleElementWrapper.getMustPreserveWhitespace()</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.model.ExtensibleElementWrapper.getSimpleExtension(java.lang.String, java.lang.String, java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.model.ExtensibleElementWrapper.getSimpleExtension(javax.xml.namespace.QName)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.model.ExtensibleElementWrapper.setMustPreserveWhitespace(boolean)</inbound>
            <inbound type="class" confirmed="yes">org.apache.abdera.model.Link</inbound>
            <inbound type="class" confirmed="yes">org.apache.abdera.model.Person</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.model.PersonWrapper.setEmail(java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.model.PersonWrapper.setEmailElement(org.apache.abdera.model.Element)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.model.PersonWrapper.setName(java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.model.PersonWrapper.setNameElement(org.apache.abdera.model.Element)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.model.PersonWrapper.setUri(java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.model.PersonWrapper.setUriElement(org.apache.abdera.model.IRIElement)</inbound>
            <inbound type="class" confirmed="yes">org.apache.abdera.model.Service</inbound>
            <inbound type="class" confirmed="yes">org.apache.abdera.model.Source</inbound>
            <inbound type="class" confirmed="yes">org.apache.abdera.model.Workspace</inbound>
            <feature confirmed="yes">
                <name>org.apache.abdera.model.ExtensibleElement.addExtension(java.lang.String, java.lang.String, java.lang.String)</name>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="class" confirmed="yes">org.apache.abdera.model.Element</outbound>
                <inbound type="feature" confirmed="yes">org.apache.abdera.model.ExtensibleElementWrapper.addExtension(java.lang.String, java.lang.String, java.lang.String)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.model.ExtensibleElement.addExtension(javax.xml.namespace.QName)</name>
                <outbound type="class" confirmed="no">javax.xml.namespace.QName</outbound>
                <outbound type="class" confirmed="yes">org.apache.abdera.model.Element</outbound>
                <inbound type="feature" confirmed="yes">org.apache.abdera.model.ExtensibleElementWrapper.addExtension(javax.xml.namespace.QName)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.model.ExtensibleElement.addExtension(javax.xml.namespace.QName, javax.xml.namespace.QName)</name>
                <outbound type="class" confirmed="no">javax.xml.namespace.QName</outbound>
                <outbound type="class" confirmed="yes">org.apache.abdera.model.Element</outbound>
                <inbound type="feature" confirmed="yes">org.apache.abdera.model.ExtensibleElementWrapper.addExtension(javax.xml.namespace.QName, javax.xml.namespace.QName)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.model.ExtensibleElement.addExtension(org.apache.abdera.model.Element)</name>
                <outbound type="class" confirmed="yes">org.apache.abdera.model.Element</outbound>
                <inbound type="feature" confirmed="yes">org.apache.abdera.model.ExtensibleElementWrapper.addExtension(org.apache.abdera.model.Element)</inbound>
                <inbound type="feature" confirmed="yes">org.apache.abdera.model.PersonWrapper.setEmailElement(org.apache.abdera.model.Element)</inbound>
                <inbound type="feature" confirmed="yes">org.apache.abdera.model.PersonWrapper.setNameElement(org.apache.abdera.model.Element)</inbound>
                <inbound type="feature" confirmed="yes">org.apache.abdera.model.PersonWrapper.setUriElement(org.apache.abdera.model.IRIElement)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.model.ExtensibleElement.addExtension(org.apache.abdera.model.Element, org.apache.abdera.model.Element)</name>
                <outbound type="class" confirmed="yes">org.apache.abdera.model.Element</outbound>
                <inbound type="feature" confirmed="yes">org.apache.abdera.model.ExtensibleElementWrapper.addExtension(org.apache.abdera.model.Element, org.apache.abdera.model.Element)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.model.ExtensibleElement.addSimpleExtension(java.lang.String, java.lang.String, java.lang.String, java.lang.String)</name>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="class" confirmed="yes">org.apache.abdera.model.Element</outbound>
                <inbound type="feature" confirmed="yes">org.apache.abdera.model.ExtensibleElementWrapper.addSimpleExtension(java.lang.String, java.lang.String, java.lang.String, java.lang.String)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.model.ExtensibleElement.addSimpleExtension(javax.xml.namespace.QName, java.lang.String)</name>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="class" confirmed="no">javax.xml.namespace.QName</outbound>
                <outbound type="class" confirmed="yes">org.apache.abdera.model.Element</outbound>
                <inbound type="feature" confirmed="yes">org.apache.abdera.model.ExtensibleElementWrapper.addSimpleExtension(javax.xml.namespace.QName, java.lang.String)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.model.ExtensibleElement.getExtension(java.lang.Class)</name>
                <outbound type="class" confirmed="no">java.lang.Class</outbound>
                <outbound type="class" confirmed="yes">org.apache.abdera.model.Element</outbound>
                <inbound type="feature" confirmed="yes">org.apache.abdera.model.ExtensibleElementWrapper.getExtension(java.lang.Class)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.model.ExtensibleElement.getExtension(javax.xml.namespace.QName)</name>
                <outbound type="class" confirmed="no">javax.xml.namespace.QName</outbound>
                <outbound type="class" confirmed="yes">org.apache.abdera.model.Element</outbound>
                <inbound type="feature" confirmed="yes">org.apache.abdera.model.ExtensibleElementWrapper.getExtension(javax.xml.namespace.QName)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.model.ExtensibleElement.getExtensions()</name>
                <outbound type="class" confirmed="no">java.util.List</outbound>
                <inbound type="feature" confirmed="yes">org.apache.abdera.model.ExtensibleElementWrapper.getExtensions()</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.model.ExtensibleElement.getExtensions(java.lang.String)</name>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="class" confirmed="no">java.util.List</outbound>
                <inbound type="feature" confirmed="yes">org.apache.abdera.model.ExtensibleElementWrapper.getExtensions(java.lang.String)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.model.ExtensibleElement.getExtensions(javax.xml.namespace.QName)</name>
                <outbound type="class" confirmed="no">java.util.List</outbound>
                <outbound type="class" confirmed="no">javax.xml.namespace.QName</outbound>
                <inbound type="feature" confirmed="yes">org.apache.abdera.model.ExtensibleElementWrapper.getExtensions(javax.xml.namespace.QName)</inbound>
            </feature>
            <feature confirmed="no">
                <name>org.apache.abdera.model.ExtensibleElement.getFactory()</name>
                <inbound type="feature" confirmed="yes">org.apache.abdera.model.PersonWrapper.setEmail(java.lang.String)</inbound>
                <inbound type="feature" confirmed="yes">org.apache.abdera.model.PersonWrapper.setName(java.lang.String)</inbound>
                <inbound type="feature" confirmed="yes">org.apache.abdera.model.PersonWrapper.setUri(java.lang.String)</inbound>
            </feature>
            <feature confirmed="no">
                <name>org.apache.abdera.model.ExtensibleElement.getMustPreserveWhitespace()</name>
                <inbound type="feature" confirmed="yes">org.apache.abdera.model.ExtensibleElementWrapper.getMustPreserveWhitespace()</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.model.ExtensibleElement.getSimpleExtension(java.lang.String, java.lang.String, java.lang.String)</name>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <inbound type="feature" confirmed="yes">org.apache.abdera.model.ExtensibleElementWrapper.getSimpleExtension(java.lang.String, java.lang.String, java.lang.String)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.model.ExtensibleElement.getSimpleExtension(javax.xml.namespace.QName)</name>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="class" confirmed="no">javax.xml.namespace.QName</outbound>
                <inbound type="feature" confirmed="yes">org.apache.abdera.model.ExtensibleElementWrapper.getSimpleExtension(javax.xml.namespace.QName)</inbound>
            </feature>
            <feature confirmed="no">
                <name>org.apache.abdera.model.ExtensibleElement.setMustPreserveWhitespace(boolean)</name>
                <inbound type="feature" confirmed="yes">org.apache.abdera.model.ExtensibleElementWrapper.setMustPreserveWhitespace(boolean)</inbound>
            </feature>
        </class>
        <class confirmed="yes">
            <name>org.apache.abdera.model.ExtensibleElementWrapper</name>
            <outbound type="class" confirmed="yes">org.apache.abdera.model.ElementWrapper</outbound>
            <outbound type="class" confirmed="yes">org.apache.abdera.model.ExtensibleElement</outbound>
            <inbound type="class" confirmed="yes">org.apache.abdera.model.PersonWrapper</inbound>
            <inbound type="class" confirmed="yes">org.apache.abdera.protocol.error.Error</inbound>
            <feature confirmed="yes">
                <name>org.apache.abdera.model.ExtensibleElementWrapper.ExtensibleElementWrapper(org.apache.abdera.factory.Factory, javax.xml.namespace.QName)</name>
                <outbound type="class" confirmed="no">javax.xml.namespace.QName</outbound>
                <outbound type="class" confirmed="yes">org.apache.abdera.factory.Factory</outbound>
                <outbound type="feature" confirmed="yes">org.apache.abdera.model.ElementWrapper.ElementWrapper(org.apache.abdera.factory.Factory, javax.xml.namespace.QName)</outbound>
                <inbound type="feature" confirmed="yes">org.apache.abdera.model.PersonWrapper.PersonWrapper(org.apache.abdera.factory.Factory, javax.xml.namespace.QName)</inbound>
                <inbound type="feature" confirmed="yes">org.apache.abdera.protocol.error.Error.Error(org.apache.abdera.factory.Factory, javax.xml.namespace.QName)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.model.ExtensibleElementWrapper.ExtensibleElementWrapper(org.apache.abdera.model.Element)</name>
                <outbound type="class" confirmed="yes">org.apache.abdera.model.Element</outbound>
                <outbound type="feature" confirmed="yes">org.apache.abdera.model.ElementWrapper.ElementWrapper(org.apache.abdera.model.Element)</outbound>
                <inbound type="feature" confirmed="yes">org.apache.abdera.model.PersonWrapper.PersonWrapper(org.apache.abdera.model.Element)</inbound>
                <inbound type="feature" confirmed="yes">org.apache.abdera.protocol.error.Error.Error(org.apache.abdera.model.Element)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.model.ExtensibleElementWrapper.addExtension(java.lang.String, java.lang.String, java.lang.String)</name>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="class" confirmed="yes">org.apache.abdera.model.Element</outbound>
                <outbound type="class" confirmed="yes">org.apache.abdera.model.ExtensibleElement</outbound>
                <outbound type="feature" confirmed="yes">org.apache.abdera.model.ExtensibleElement.addExtension(java.lang.String, java.lang.String, java.lang.String)</outbound>
                <outbound type="feature" confirmed="yes">org.apache.abdera.model.ExtensibleElementWrapper.getExtInternal()</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.model.ExtensibleElementWrapper.addExtension(javax.xml.namespace.QName)</name>
                <outbound type="class" confirmed="no">javax.xml.namespace.QName</outbound>
                <outbound type="class" confirmed="yes">org.apache.abdera.model.Element</outbound>
                <outbound type="class" confirmed="yes">org.apache.abdera.model.ExtensibleElement</outbound>
                <outbound type="feature" confirmed="yes">org.apache.abdera.model.ExtensibleElement.addExtension(javax.xml.namespace.QName)</outbound>
                <outbound type="feature" confirmed="yes">org.apache.abdera.model.ExtensibleElementWrapper.getExtInternal()</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.model.ExtensibleElementWrapper.addExtension(javax.xml.namespace.QName, javax.xml.namespace.QName)</name>
                <outbound type="class" confirmed="no">javax.xml.namespace.QName</outbound>
                <outbound type="class" confirmed="yes">org.apache.abdera.model.Element</outbound>
                <outbound type="class" confirmed="yes">org.apache.abdera.model.ExtensibleElement</outbound>
                <outbound type="feature" confirmed="yes">org.apache.abdera.model.ExtensibleElement.addExtension(javax.xml.namespace.QName, javax.xml.namespace.QName)</outbound>
                <outbound type="feature" confirmed="yes">org.apache.abdera.model.ExtensibleElementWrapper.getExtInternal()</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.model.ExtensibleElementWrapper.addExtension(org.apache.abdera.model.Element)</name>
                <outbound type="class" confirmed="yes">org.apache.abdera.model.Element</outbound>
                <outbound type="class" confirmed="yes">org.apache.abdera.model.ExtensibleElement</outbound>
                <outbound type="feature" confirmed="yes">org.apache.abdera.model.ExtensibleElement.addExtension(org.apache.abdera.model.Element)</outbound>
                <outbound type="feature" confirmed="yes">org.apache.abdera.model.ExtensibleElementWrapper.getExtInternal()</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.model.ExtensibleElementWrapper.addExtension(org.apache.abdera.model.Element, org.apache.abdera.model.Element)</name>
                <outbound type="class" confirmed="yes">org.apache.abdera.model.Element</outbound>
                <outbound type="class" confirmed="yes">org.apache.abdera.model.ExtensibleElement</outbound>
                <outbound type="feature" confirmed="yes">org.apache.abdera.model.ExtensibleElement.addExtension(org.apache.abdera.model.Element, org.apache.abdera.model.Element)</outbound>
                <outbound type="feature" confirmed="yes">org.apache.abdera.model.ExtensibleElementWrapper.getExtInternal()</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.model.ExtensibleElementWrapper.addSimpleExtension(java.lang.String, java.lang.String, java.lang.String, java.lang.String)</name>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="class" confirmed="yes">org.apache.abdera.model.Element</outbound>
                <outbound type="class" confirmed="yes">org.apache.abdera.model.ExtensibleElement</outbound>
                <outbound type="feature" confirmed="yes">org.apache.abdera.model.ExtensibleElement.addSimpleExtension(java.lang.String, java.lang.String, java.lang.String, java.lang.String)</outbound>
                <outbound type="feature" confirmed="yes">org.apache.abdera.model.ExtensibleElementWrapper.getExtInternal()</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.model.ExtensibleElementWrapper.addSimpleExtension(javax.xml.namespace.QName, java.lang.String)</name>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="class" confirmed="no">javax.xml.namespace.QName</outbound>
                <outbound type="class" confirmed="yes">org.apache.abdera.model.Element</outbound>
                <outbound type="class" confirmed="yes">org.apache.abdera.model.ExtensibleElement</outbound>
                <outbound type="feature" confirmed="yes">org.apache.abdera.model.ExtensibleElement.addSimpleExtension(javax.xml.namespace.QName, java.lang.String)</outbound>
                <outbound type="feature" confirmed="yes">org.apache.abdera.model.ExtensibleElementWrapper.getExtInternal()</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.model.ExtensibleElementWrapper.getExtInternal()</name>
                <outbound type="class" confirmed="yes">org.apache.abdera.model.Element</outbound>
                <outbound type="class" confirmed="yes">org.apache.abdera.model.ExtensibleElement</outbound>
                <outbound type="feature" confirmed="no">org.apache.abdera.model.ExtensibleElementWrapper.getInternal()</outbound>
                <inbound type="feature" confirmed="yes">org.apache.abdera.model.ExtensibleElementWrapper.addExtension(java.lang.String, java.lang.String, java.lang.String)</inbound>
                <inbound type="feature" confirmed="yes">org.apache.abdera.model.ExtensibleElementWrapper.addExtension(javax.xml.namespace.QName)</inbound>
                <inbound type="feature" confirmed="yes">org.apache.abdera.model.ExtensibleElementWrapper.addExtension(javax.xml.namespace.QName, javax.xml.namespace.QName)</inbound>
                <inbound type="feature" confirmed="yes">org.apache.abdera.model.ExtensibleElementWrapper.addExtension(org.apache.abdera.model.Element)</inbound>
                <inbound type="feature" confirmed="yes">org.apache.abdera.model.ExtensibleElementWrapper.addExtension(org.apache.abdera.model.Element, org.apache.abdera.model.Element)</inbound>
                <inbound type="feature" confirmed="yes">org.apache.abdera.model.ExtensibleElementWrapper.addSimpleExtension(java.lang.String, java.lang.String, java.lang.String, java.lang.String)</inbound>
                <inbound type="feature" confirmed="yes">org.apache.abdera.model.ExtensibleElementWrapper.addSimpleExtension(javax.xml.namespace.QName, java.lang.String)</inbound>
                <inbound type="feature" confirmed="yes">org.apache.abdera.model.ExtensibleElementWrapper.getExtension(java.lang.Class)</inbound>
                <inbound type="feature" confirmed="yes">org.apache.abdera.model.ExtensibleElementWrapper.getExtension(javax.xml.namespace.QName)</inbound>
                <inbound type="feature" confirmed="yes">org.apache.abdera.model.ExtensibleElementWrapper.getExtensions()</inbound>
                <inbound type="feature" confirmed="yes">org.apache.abdera.model.ExtensibleElementWrapper.getExtensions(java.lang.String)</inbound>
                <inbound type="feature" confirmed="yes">org.apache.abdera.model.ExtensibleElementWrapper.getExtensions(javax.xml.namespace.QName)</inbound>
                <inbound type="feature" confirmed="yes">org.apache.abdera.model.ExtensibleElementWrapper.getMustPreserveWhitespace()</inbound>
                <inbound type="feature" confirmed="yes">org.apache.abdera.model.ExtensibleElementWrapper.getSimpleExtension(java.lang.String, java.lang.String, java.lang.String)</inbound>
                <inbound type="feature" confirmed="yes">org.apache.abdera.model.ExtensibleElementWrapper.getSimpleExtension(javax.xml.namespace.QName)</inbound>
                <inbound type="feature" confirmed="yes">org.apache.abdera.model.ExtensibleElementWrapper.setMustPreserveWhitespace(boolean)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.model.ExtensibleElementWrapper.getExtension(java.lang.Class)</name>
                <outbound type="class" confirmed="no">java.lang.Class</outbound>
                <outbound type="class" confirmed="yes">org.apache.abdera.model.Element</outbound>
                <outbound type="class" confirmed="yes">org.apache.abdera.model.ExtensibleElement</outbound>
                <outbound type="feature" confirmed="yes">org.apache.abdera.model.ExtensibleElement.getExtension(java.lang.Class)</outbound>
                <outbound type="feature" confirmed="yes">org.apache.abdera.model.ExtensibleElementWrapper.getExtInternal()</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.model.ExtensibleElementWrapper.getExtension(javax.xml.namespace.QName)</name>
                <outbound type="class" confirmed="no">javax.xml.namespace.QName</outbound>
                <outbound type="class" confirmed="yes">org.apache.abdera.model.Element</outbound>
                <outbound type="class" confirmed="yes">org.apache.abdera.model.ExtensibleElement</outbound>
                <outbound type="feature" confirmed="yes">org.apache.abdera.model.ExtensibleElement.getExtension(javax.xml.namespace.QName)</outbound>
                <outbound type="feature" confirmed="yes">org.apache.abdera.model.ExtensibleElementWrapper.getExtInternal()</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.model.ExtensibleElementWrapper.getExtensions()</name>
                <outbound type="class" confirmed="no">java.util.List</outbound>
                <outbound type="class" confirmed="yes">org.apache.abdera.model.ExtensibleElement</outbound>
                <outbound type="feature" confirmed="yes">org.apache.abdera.model.ExtensibleElement.getExtensions()</outbound>
                <outbound type="feature" confirmed="yes">org.apache.abdera.model.ExtensibleElementWrapper.getExtInternal()</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.model.ExtensibleElementWrapper.getExtensions(java.lang.String)</name>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="class" confirmed="no">java.util.List</outbound>
                <outbound type="class" confirmed="yes">org.apache.abdera.model.ExtensibleElement</outbound>
                <outbound type="feature" confirmed="yes">org.apache.abdera.model.ExtensibleElement.getExtensions(java.lang.String)</outbound>
                <outbound type="feature" confirmed="yes">org.apache.abdera.model.ExtensibleElementWrapper.getExtInternal()</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.model.ExtensibleElementWrapper.getExtensions(javax.xml.namespace.QName)</name>
                <outbound type="class" confirmed="no">java.util.List</outbound>
                <outbound type="class" confirmed="no">javax.xml.namespace.QName</outbound>
                <outbound type="class" confirmed="yes">org.apache.abdera.model.ExtensibleElement</outbound>
                <outbound type="feature" confirmed="yes">org.apache.abdera.model.ExtensibleElement.getExtensions(javax.xml.namespace.QName)</outbound>
                <outbound type="feature" confirmed="yes">org.apache.abdera.model.ExtensibleElementWrapper.getExtInternal()</outbound>
            </feature>
            <feature confirmed="no">
                <name>org.apache.abdera.model.ExtensibleElementWrapper.getInternal()</name>
                <inbound type="feature" confirmed="yes">org.apache.abdera.model.ExtensibleElementWrapper.getExtInternal()</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.model.ExtensibleElementWrapper.getMustPreserveWhitespace()</name>
                <outbound type="class" confirmed="yes">org.apache.abdera.model.ExtensibleElement</outbound>
                <outbound type="feature" confirmed="no">org.apache.abdera.model.ExtensibleElement.getMustPreserveWhitespace()</outbound>
                <outbound type="feature" confirmed="yes">org.apache.abdera.model.ExtensibleElementWrapper.getExtInternal()</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.model.ExtensibleElementWrapper.getSimpleExtension(java.lang.String, java.lang.String, java.lang.String)</name>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="class" confirmed="yes">org.apache.abdera.model.ExtensibleElement</outbound>
                <outbound type="feature" confirmed="yes">org.apache.abdera.model.ExtensibleElement.getSimpleExtension(java.lang.String, java.lang.String, java.lang.String)</outbound>
                <outbound type="feature" confirmed="yes">org.apache.abdera.model.ExtensibleElementWrapper.getExtInternal()</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.model.ExtensibleElementWrapper.getSimpleExtension(javax.xml.namespace.QName)</name>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="class" confirmed="no">javax.xml.namespace.QName</outbound>
                <outbound type="class" confirmed="yes">org.apache.abdera.model.ExtensibleElement</outbound>
                <outbound type="feature" confirmed="yes">org.apache.abdera.model.ExtensibleElement.getSimpleExtension(javax.xml.namespace.QName)</outbound>
                <outbound type="feature" confirmed="yes">org.apache.abdera.model.ExtensibleElementWrapper.getExtInternal()</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.model.ExtensibleElementWrapper.setMustPreserveWhitespace(boolean)</name>
                <outbound type="class" confirmed="yes">org.apache.abdera.model.Element</outbound>
                <outbound type="class" confirmed="yes">org.apache.abdera.model.ExtensibleElement</outbound>
                <outbound type="feature" confirmed="no">org.apache.abdera.model.ExtensibleElement.setMustPreserveWhitespace(boolean)</outbound>
                <outbound type="feature" confirmed="yes">org.apache.abdera.model.ExtensibleElementWrapper.getExtInternal()</outbound>
            </feature>
        </class>
        <class confirmed="yes">
            <name>org.apache.abdera.model.Feed</name>
            <outbound type="class" confirmed="no">java.lang.Object</outbound>
            <outbound type="class" confirmed="yes">org.apache.abdera.model.Source</outbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.Abdera.newFeed()</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.factory.Factory.newFeed()</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.factory.Factory.newFeed(org.apache.abdera.model.Base)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.model.Source.getAsFeed()</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.util.MimeTypeHelper.getMimeType(org.apache.abdera.model.Base)</inbound>
            <feature confirmed="yes">
                <name>org.apache.abdera.model.Feed.addEntry()</name>
                <outbound type="class" confirmed="yes">org.apache.abdera.model.Entry</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.model.Feed.addEntry(org.apache.abdera.model.Entry)</name>
                <outbound type="class" confirmed="yes">org.apache.abdera.model.Entry</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.model.Feed.getAsSource()</name>
                <outbound type="class" confirmed="yes">org.apache.abdera.model.Source</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.model.Feed.getEntries()</name>
                <outbound type="class" confirmed="no">java.util.List</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.model.Feed.getEntry(java.lang.String)</name>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="class" confirmed="yes">org.apache.abdera.model.Entry</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.model.Feed.insertEntry()</name>
                <outbound type="class" confirmed="yes">org.apache.abdera.model.Entry</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.model.Feed.insertEntry(org.apache.abdera.model.Entry)</name>
                <outbound type="class" confirmed="yes">org.apache.abdera.model.Entry</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.model.Feed.sortEntries(java.util.Comparator)</name>
                <outbound type="class" confirmed="no">java.util.Comparator</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.model.Feed.sortEntriesByEdited(boolean)</name>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.model.Feed.sortEntriesByUpdated(boolean)</name>
            </feature>
        </class>
        <class confirmed="yes">
            <name>org.apache.abdera.model.Generator</name>
            <outbound type="class" confirmed="no">java.lang.Object</outbound>
            <outbound type="class" confirmed="yes">org.apache.abdera.model.Element</outbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.factory.Factory.newDefaultGenerator()</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.factory.Factory.newDefaultGenerator(org.apache.abdera.model.Element)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.factory.Factory.newGenerator()</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.factory.Factory.newGenerator(org.apache.abdera.model.Element)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.model.Source.getGenerator()</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.model.Source.setGenerator(java.lang.String, java.lang.String, java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.model.Source.setGenerator(org.apache.abdera.model.Generator)</inbound>
            <feature confirmed="yes">
                <name>org.apache.abdera.model.Generator.getResolvedUri()</name>
                <outbound type="class" confirmed="no">org.apache.abdera.i18n.iri.IRI</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.model.Generator.getUri()</name>
                <outbound type="class" confirmed="no">org.apache.abdera.i18n.iri.IRI</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.model.Generator.getVersion()</name>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.model.Generator.setUri(java.lang.String)</name>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.model.Generator.setVersion(java.lang.String)</name>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
            </feature>
        </class>
        <class confirmed="yes">
            <name>org.apache.abdera.model.IRIElement</name>
            <outbound type="class" confirmed="no">java.lang.Object</outbound>
            <outbound type="class" confirmed="yes">org.apache.abdera.model.Element</outbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.factory.Factory.newID()</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.factory.Factory.newID(org.apache.abdera.model.Element)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.factory.Factory.newIRIElement(javax.xml.namespace.QName, org.apache.abdera.model.Element)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.factory.Factory.newIcon()</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.factory.Factory.newIcon(org.apache.abdera.model.Element)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.factory.Factory.newLogo()</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.factory.Factory.newLogo(org.apache.abdera.model.Element)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.factory.Factory.newUri()</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.factory.Factory.newUri(org.apache.abdera.model.Element)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.model.Entry.getIdElement()</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.model.Entry.newId()</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.model.Entry.setId(java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.model.Entry.setId(java.lang.String, boolean)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.model.Entry.setIdElement(org.apache.abdera.model.IRIElement)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.model.Person.getUriElement()</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.model.Person.setUri(java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.model.Person.setUriElement(org.apache.abdera.model.IRIElement)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.model.PersonWrapper.getUri()</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.model.PersonWrapper.getUriElement()</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.model.PersonWrapper.setUri(java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.model.PersonWrapper.setUriElement(org.apache.abdera.model.IRIElement)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.model.Source.getIconElement()</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.model.Source.getIdElement()</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.model.Source.getLogoElement()</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.model.Source.newId()</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.model.Source.setIcon(java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.model.Source.setIconElement(org.apache.abdera.model.IRIElement)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.model.Source.setId(java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.model.Source.setId(java.lang.String, boolean)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.model.Source.setIdElement(org.apache.abdera.model.IRIElement)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.model.Source.setLogo(java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.model.Source.setLogoElement(org.apache.abdera.model.IRIElement)</inbound>
            <feature confirmed="no">
                <name>org.apache.abdera.model.IRIElement.discard()</name>
                <inbound type="feature" confirmed="yes">org.apache.abdera.model.PersonWrapper.setUri(java.lang.String)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.model.IRIElement.getResolvedValue()</name>
                <outbound type="class" confirmed="no">org.apache.abdera.i18n.iri.IRI</outbound>
                <inbound type="feature" confirmed="yes">org.apache.abdera.model.PersonWrapper.getUri()</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.model.IRIElement.getValue()</name>
                <outbound type="class" confirmed="no">org.apache.abdera.i18n.iri.IRI</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.model.IRIElement.setNormalizedValue(java.lang.String)</name>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
            </feature>
            <feature confirmed="no">
                <name>org.apache.abdera.model.IRIElement.setText(java.lang.String)</name>
                <inbound type="feature" confirmed="yes">org.apache.abdera.model.PersonWrapper.setUri(java.lang.String)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.model.IRIElement.setValue(java.lang.String)</name>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
            </feature>
        </class>
        <class confirmed="yes">
            <name>org.apache.abdera.model.Link</name>
            <outbound type="class" confirmed="no">java.lang.Object</outbound>
            <outbound type="class" confirmed="yes">org.apache.abdera.model.ExtensibleElement</outbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.factory.Factory.newLink()</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.factory.Factory.newLink(org.apache.abdera.model.Element)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.model.Entry.addLink(java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.model.Entry.addLink(java.lang.String, java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.model.Entry.addLink(java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, long)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.model.Entry.addLink(org.apache.abdera.model.Link)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.model.Entry.getAlternateLink()</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.model.Entry.getAlternateLink(java.lang.String, java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.model.Entry.getEditLink()</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.model.Entry.getEditMediaLink()</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.model.Entry.getEditMediaLink(java.lang.String, java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.model.Entry.getEnclosureLink()</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.model.Entry.getLink(java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.model.Entry.getSelfLink()</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.model.Source.addLink(java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.model.Source.addLink(java.lang.String, java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.model.Source.addLink(java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, long)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.model.Source.addLink(org.apache.abdera.model.Link)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.model.Source.getAlternateLink()</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.model.Source.getAlternateLink(java.lang.String, java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.model.Source.getLink(java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.model.Source.getSelfLink()</inbound>
            <feature confirmed="yes">
                <name>org.apache.abdera.model.Link.IANA_BASE</name>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.model.Link.REL_ALTERNATE</name>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.model.Link.REL_ALTERNATE_IANA</name>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.model.Link.REL_CURRENT</name>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.model.Link.REL_CURRENT_IANA</name>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.model.Link.REL_EDIT</name>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.model.Link.REL_EDIT_IANA</name>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.model.Link.REL_EDIT_MEDIA</name>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.model.Link.REL_EDIT_MEDIA_IANA</name>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.model.Link.REL_ENCLOSURE</name>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.model.Link.REL_ENCLOSURE_IANA</name>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.model.Link.REL_FIRST</name>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.model.Link.REL_FIRST_IANA</name>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.model.Link.REL_LAST</name>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.model.Link.REL_LAST_IANA</name>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.model.Link.REL_LICENSE</name>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.model.Link.REL_LICENSE_IANA</name>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.model.Link.REL_NEXT</name>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.model.Link.REL_NEXT_IANA</name>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.model.Link.REL_PAYMENT</name>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.model.Link.REL_PAYMENT_IANA</name>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.model.Link.REL_PREVIOUS</name>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.model.Link.REL_PREVIOUS_IANA</name>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.model.Link.REL_RELATED</name>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.model.Link.REL_RELATED_IANA</name>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.model.Link.REL_REPLIES</name>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.model.Link.REL_REPLIES_IANA</name>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.model.Link.REL_SELF</name>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.model.Link.REL_SELF_IANA</name>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.model.Link.REL_SERVICE</name>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.model.Link.REL_SERVICE_IANA</name>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.model.Link.REL_VIA</name>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.model.Link.REL_VIA_IANA</name>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.model.Link.getHref()</name>
                <outbound type="class" confirmed="no">org.apache.abdera.i18n.iri.IRI</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.model.Link.getHrefLang()</name>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.model.Link.getLength()</name>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.model.Link.getMimeType()</name>
                <outbound type="class" confirmed="no">javax.activation.MimeType</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.model.Link.getRel()</name>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.model.Link.getResolvedHref()</name>
                <outbound type="class" confirmed="no">org.apache.abdera.i18n.iri.IRI</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.model.Link.getTitle()</name>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.model.Link.setHref(java.lang.String)</name>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.model.Link.setHrefLang(java.lang.String)</name>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.model.Link.setLength(long)</name>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.model.Link.setMimeType(java.lang.String)</name>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.model.Link.setRel(java.lang.String)</name>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.model.Link.setTitle(java.lang.String)</name>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
            </feature>
        </class>
        <class confirmed="yes">
            <name>org.apache.abdera.model.Person</name>
            <outbound type="class" confirmed="no">java.lang.Object</outbound>
            <outbound type="class" confirmed="yes">org.apache.abdera.model.Element</outbound>
            <outbound type="class" confirmed="yes">org.apache.abdera.model.ExtensibleElement</outbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.factory.Factory.newAuthor()</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.factory.Factory.newAuthor(org.apache.abdera.model.Element)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.factory.Factory.newContributor()</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.factory.Factory.newContributor(org.apache.abdera.model.Element)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.factory.Factory.newPerson(javax.xml.namespace.QName, org.apache.abdera.model.Element)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.model.Entry.addAuthor(java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.model.Entry.addAuthor(java.lang.String, java.lang.String, java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.model.Entry.addAuthor(org.apache.abdera.model.Person)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.model.Entry.addContributor(java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.model.Entry.addContributor(java.lang.String, java.lang.String, java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.model.Entry.addContributor(org.apache.abdera.model.Person)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.model.Entry.getAuthor()</inbound>
            <inbound type="class" confirmed="yes">org.apache.abdera.model.PersonWrapper</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.model.PersonWrapper.setEmailElement(org.apache.abdera.model.Element)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.model.PersonWrapper.setNameElement(org.apache.abdera.model.Element)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.model.PersonWrapper.setUriElement(org.apache.abdera.model.IRIElement)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.model.Source.addAuthor(java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.model.Source.addAuthor(java.lang.String, java.lang.String, java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.model.Source.addAuthor(org.apache.abdera.model.Person)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.model.Source.addContributor(java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.model.Source.addContributor(java.lang.String, java.lang.String, java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.model.Source.addContributor(org.apache.abdera.model.Person)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.model.Source.getAuthor()</inbound>
            <feature confirmed="yes">
                <name>org.apache.abdera.model.Person.getEmail()</name>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.model.Person.getEmailElement()</name>
                <outbound type="class" confirmed="yes">org.apache.abdera.model.Element</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.model.Person.getName()</name>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.model.Person.getNameElement()</name>
                <outbound type="class" confirmed="yes">org.apache.abdera.model.Element</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.model.Person.getUri()</name>
                <outbound type="class" confirmed="no">org.apache.abdera.i18n.iri.IRI</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.model.Person.getUriElement()</name>
                <outbound type="class" confirmed="yes">org.apache.abdera.model.IRIElement</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.model.Person.setEmail(java.lang.String)</name>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="class" confirmed="yes">org.apache.abdera.model.Element</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.model.Person.setEmailElement(org.apache.abdera.model.Element)</name>
                <outbound type="class" confirmed="yes">org.apache.abdera.model.Element</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.model.Person.setName(java.lang.String)</name>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="class" confirmed="yes">org.apache.abdera.model.Element</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.model.Person.setNameElement(org.apache.abdera.model.Element)</name>
                <outbound type="class" confirmed="yes">org.apache.abdera.model.Element</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.model.Person.setUri(java.lang.String)</name>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="class" confirmed="yes">org.apache.abdera.model.IRIElement</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.model.Person.setUriElement(org.apache.abdera.model.IRIElement)</name>
                <outbound type="class" confirmed="yes">org.apache.abdera.model.IRIElement</outbound>
            </feature>
        </class>
        <class confirmed="yes">
            <name>org.apache.abdera.model.PersonWrapper</name>
            <outbound type="class" confirmed="yes">org.apache.abdera.model.ExtensibleElementWrapper</outbound>
            <outbound type="class" confirmed="yes">org.apache.abdera.model.Person</outbound>
            <outbound type="class" confirmed="yes">org.apache.abdera.util.Constants</outbound>
            <feature confirmed="no">
                <name>org.apache.abdera.model.PersonWrapper.EMAIL</name>
                <inbound type="feature" confirmed="yes">org.apache.abdera.model.PersonWrapper.getEmailElement()</inbound>
            </feature>
            <feature confirmed="no">
                <name>org.apache.abdera.model.PersonWrapper.NAME</name>
                <inbound type="feature" confirmed="yes">org.apache.abdera.model.PersonWrapper.getNameElement()</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.model.PersonWrapper.PersonWrapper(org.apache.abdera.factory.Factory, javax.xml.namespace.QName)</name>
                <outbound type="class" confirmed="no">javax.xml.namespace.QName</outbound>
                <outbound type="class" confirmed="yes">org.apache.abdera.factory.Factory</outbound>
                <outbound type="feature" confirmed="yes">org.apache.abdera.model.ExtensibleElementWrapper.ExtensibleElementWrapper(org.apache.abdera.factory.Factory, javax.xml.namespace.QName)</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.model.PersonWrapper.PersonWrapper(org.apache.abdera.model.Element)</name>
                <outbound type="class" confirmed="yes">org.apache.abdera.model.Element</outbound>
                <outbound type="feature" confirmed="yes">org.apache.abdera.model.ExtensibleElementWrapper.ExtensibleElementWrapper(org.apache.abdera.model.Element)</outbound>
            </feature>
            <feature confirmed="no">
                <name>org.apache.abdera.model.PersonWrapper.URI</name>
                <inbound type="feature" confirmed="yes">org.apache.abdera.model.PersonWrapper.getUriElement()</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.model.PersonWrapper.getEmail()</name>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="class" confirmed="yes">org.apache.abdera.model.Element</outbound>
                <outbound type="feature" confirmed="yes">org.apache.abdera.model.Element.getText()</outbound>
                <outbound type="feature" confirmed="yes">org.apache.abdera.model.PersonWrapper.getEmailElement()</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.model.PersonWrapper.getEmailElement()</name>
                <outbound type="class" confirmed="no">javax.xml.namespace.QName</outbound>
                <outbound type="class" confirmed="yes">org.apache.abdera.model.Element</outbound>
                <outbound type="feature" confirmed="yes">org.apache.abdera.model.Element.getFirstChild(javax.xml.namespace.QName)</outbound>
                <outbound type="feature" confirmed="no">org.apache.abdera.model.PersonWrapper.EMAIL</outbound>
                <outbound type="feature" confirmed="no">org.apache.abdera.model.PersonWrapper.getInternal()</outbound>
                <inbound type="feature" confirmed="yes">org.apache.abdera.model.PersonWrapper.getEmail()</inbound>
                <inbound type="feature" confirmed="yes">org.apache.abdera.model.PersonWrapper.setEmail(java.lang.String)</inbound>
                <inbound type="feature" confirmed="yes">org.apache.abdera.model.PersonWrapper.setEmailElement(org.apache.abdera.model.Element)</inbound>
            </feature>
            <feature confirmed="no">
                <name>org.apache.abdera.model.PersonWrapper.getExtInternal()</name>
                <inbound type="feature" confirmed="yes">org.apache.abdera.model.PersonWrapper.setEmail(java.lang.String)</inbound>
                <inbound type="feature" confirmed="yes">org.apache.abdera.model.PersonWrapper.setEmailElement(org.apache.abdera.model.Element)</inbound>
                <inbound type="feature" confirmed="yes">org.apache.abdera.model.PersonWrapper.setName(java.lang.String)</inbound>
                <inbound type="feature" confirmed="yes">org.apache.abdera.model.PersonWrapper.setNameElement(org.apache.abdera.model.Element)</inbound>
                <inbound type="feature" confirmed="yes">org.apache.abdera.model.PersonWrapper.setUri(java.lang.String)</inbound>
                <inbound type="feature" confirmed="yes">org.apache.abdera.model.PersonWrapper.setUriElement(org.apache.abdera.model.IRIElement)</inbound>
            </feature>
            <feature confirmed="no">
                <name>org.apache.abdera.model.PersonWrapper.getInternal()</name>
                <inbound type="feature" confirmed="yes">org.apache.abdera.model.PersonWrapper.getEmailElement()</inbound>
                <inbound type="feature" confirmed="yes">org.apache.abdera.model.PersonWrapper.getNameElement()</inbound>
                <inbound type="feature" confirmed="yes">org.apache.abdera.model.PersonWrapper.getUriElement()</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.model.PersonWrapper.getName()</name>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="class" confirmed="yes">org.apache.abdera.model.Element</outbound>
                <outbound type="feature" confirmed="yes">org.apache.abdera.model.Element.getText()</outbound>
                <outbound type="feature" confirmed="yes">org.apache.abdera.model.PersonWrapper.getNameElement()</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.model.PersonWrapper.getNameElement()</name>
                <outbound type="class" confirmed="no">javax.xml.namespace.QName</outbound>
                <outbound type="class" confirmed="yes">org.apache.abdera.model.Element</outbound>
                <outbound type="feature" confirmed="yes">org.apache.abdera.model.Element.getFirstChild(javax.xml.namespace.QName)</outbound>
                <outbound type="feature" confirmed="no">org.apache.abdera.model.PersonWrapper.NAME</outbound>
                <outbound type="feature" confirmed="no">org.apache.abdera.model.PersonWrapper.getInternal()</outbound>
                <inbound type="feature" confirmed="yes">org.apache.abdera.model.PersonWrapper.getName()</inbound>
                <inbound type="feature" confirmed="yes">org.apache.abdera.model.PersonWrapper.setName(java.lang.String)</inbound>
                <inbound type="feature" confirmed="yes">org.apache.abdera.model.PersonWrapper.setNameElement(org.apache.abdera.model.Element)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.model.PersonWrapper.getUri()</name>
                <outbound type="class" confirmed="no">org.apache.abdera.i18n.iri.IRI</outbound>
                <outbound type="class" confirmed="yes">org.apache.abdera.model.IRIElement</outbound>
                <outbound type="feature" confirmed="yes">org.apache.abdera.model.IRIElement.getResolvedValue()</outbound>
                <outbound type="feature" confirmed="yes">org.apache.abdera.model.PersonWrapper.getUriElement()</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.model.PersonWrapper.getUriElement()</name>
                <outbound type="class" confirmed="no">javax.xml.namespace.QName</outbound>
                <outbound type="class" confirmed="yes">org.apache.abdera.model.Element</outbound>
                <outbound type="feature" confirmed="yes">org.apache.abdera.model.Element.getFirstChild(javax.xml.namespace.QName)</outbound>
                <outbound type="class" confirmed="yes">org.apache.abdera.model.IRIElement</outbound>
                <outbound type="feature" confirmed="no">org.apache.abdera.model.PersonWrapper.URI</outbound>
                <outbound type="feature" confirmed="no">org.apache.abdera.model.PersonWrapper.getInternal()</outbound>
                <inbound type="feature" confirmed="yes">org.apache.abdera.model.PersonWrapper.getUri()</inbound>
                <inbound type="feature" confirmed="yes">org.apache.abdera.model.PersonWrapper.setUri(java.lang.String)</inbound>
                <inbound type="feature" confirmed="yes">org.apache.abdera.model.PersonWrapper.setUriElement(org.apache.abdera.model.IRIElement)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.model.PersonWrapper.setEmail(java.lang.String)</name>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="class" confirmed="yes">org.apache.abdera.factory.Factory</outbound>
                <outbound type="feature" confirmed="yes">org.apache.abdera.factory.Factory.newEmail(org.apache.abdera.model.Element)</outbound>
                <outbound type="class" confirmed="yes">org.apache.abdera.model.Element</outbound>
                <outbound type="feature" confirmed="yes">org.apache.abdera.model.Element.discard()</outbound>
                <outbound type="feature" confirmed="yes">org.apache.abdera.model.Element.setText(java.lang.String)</outbound>
                <outbound type="class" confirmed="yes">org.apache.abdera.model.ExtensibleElement</outbound>
                <outbound type="feature" confirmed="no">org.apache.abdera.model.ExtensibleElement.getFactory()</outbound>
                <outbound type="feature" confirmed="yes">org.apache.abdera.model.PersonWrapper.getEmailElement()</outbound>
                <outbound type="feature" confirmed="no">org.apache.abdera.model.PersonWrapper.getExtInternal()</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.model.PersonWrapper.setEmailElement(org.apache.abdera.model.Element)</name>
                <outbound type="class" confirmed="yes">org.apache.abdera.model.Element</outbound>
                <outbound type="feature" confirmed="yes">org.apache.abdera.model.Element.discard()</outbound>
                <outbound type="class" confirmed="yes">org.apache.abdera.model.ExtensibleElement</outbound>
                <outbound type="feature" confirmed="yes">org.apache.abdera.model.ExtensibleElement.addExtension(org.apache.abdera.model.Element)</outbound>
                <outbound type="class" confirmed="yes">org.apache.abdera.model.Person</outbound>
                <outbound type="feature" confirmed="yes">org.apache.abdera.model.PersonWrapper.getEmailElement()</outbound>
                <outbound type="feature" confirmed="no">org.apache.abdera.model.PersonWrapper.getExtInternal()</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.model.PersonWrapper.setName(java.lang.String)</name>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="class" confirmed="yes">org.apache.abdera.factory.Factory</outbound>
                <outbound type="feature" confirmed="yes">org.apache.abdera.factory.Factory.newName(org.apache.abdera.model.Element)</outbound>
                <outbound type="class" confirmed="yes">org.apache.abdera.model.Element</outbound>
                <outbound type="feature" confirmed="yes">org.apache.abdera.model.Element.discard()</outbound>
                <outbound type="feature" confirmed="yes">org.apache.abdera.model.Element.setText(java.lang.String)</outbound>
                <outbound type="class" confirmed="yes">org.apache.abdera.model.ExtensibleElement</outbound>
                <outbound type="feature" confirmed="no">org.apache.abdera.model.ExtensibleElement.getFactory()</outbound>
                <outbound type="feature" confirmed="no">org.apache.abdera.model.PersonWrapper.getExtInternal()</outbound>
                <outbound type="feature" confirmed="yes">org.apache.abdera.model.PersonWrapper.getNameElement()</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.model.PersonWrapper.setNameElement(org.apache.abdera.model.Element)</name>
                <outbound type="class" confirmed="yes">org.apache.abdera.model.Element</outbound>
                <outbound type="feature" confirmed="yes">org.apache.abdera.model.Element.discard()</outbound>
                <outbound type="class" confirmed="yes">org.apache.abdera.model.ExtensibleElement</outbound>
                <outbound type="feature" confirmed="yes">org.apache.abdera.model.ExtensibleElement.addExtension(org.apache.abdera.model.Element)</outbound>
                <outbound type="class" confirmed="yes">org.apache.abdera.model.Person</outbound>
                <outbound type="feature" confirmed="no">org.apache.abdera.model.PersonWrapper.getExtInternal()</outbound>
                <outbound type="feature" confirmed="yes">org.apache.abdera.model.PersonWrapper.getNameElement()</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.model.PersonWrapper.setUri(java.lang.String)</name>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="feature" confirmed="no">java.lang.String.toString()</outbound>
                <outbound type="class" confirmed="yes">org.apache.abdera.factory.Factory</outbound>
                <outbound type="feature" confirmed="yes">org.apache.abdera.factory.Factory.newUri(org.apache.abdera.model.Element)</outbound>
                <outbound type="class" confirmed="yes">org.apache.abdera.model.Element</outbound>
                <outbound type="class" confirmed="yes">org.apache.abdera.model.ExtensibleElement</outbound>
                <outbound type="feature" confirmed="no">org.apache.abdera.model.ExtensibleElement.getFactory()</outbound>
                <outbound type="class" confirmed="yes">org.apache.abdera.model.IRIElement</outbound>
                <outbound type="feature" confirmed="no">org.apache.abdera.model.IRIElement.discard()</outbound>
                <outbound type="feature" confirmed="no">org.apache.abdera.model.IRIElement.setText(java.lang.String)</outbound>
                <outbound type="feature" confirmed="no">org.apache.abdera.model.PersonWrapper.getExtInternal()</outbound>
                <outbound type="feature" confirmed="yes">org.apache.abdera.model.PersonWrapper.getUriElement()</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.model.PersonWrapper.setUriElement(org.apache.abdera.model.IRIElement)</name>
                <outbound type="class" confirmed="yes">org.apache.abdera.model.Element</outbound>
                <outbound type="feature" confirmed="yes">org.apache.abdera.model.Element.discard()</outbound>
                <outbound type="class" confirmed="yes">org.apache.abdera.model.ExtensibleElement</outbound>
                <outbound type="feature" confirmed="yes">org.apache.abdera.model.ExtensibleElement.addExtension(org.apache.abdera.model.Element)</outbound>
                <outbound type="class" confirmed="yes">org.apache.abdera.model.IRIElement</outbound>
                <outbound type="class" confirmed="yes">org.apache.abdera.model.Person</outbound>
                <outbound type="feature" confirmed="no">org.apache.abdera.model.PersonWrapper.getExtInternal()</outbound>
                <outbound type="feature" confirmed="yes">org.apache.abdera.model.PersonWrapper.getUriElement()</outbound>
            </feature>
        </class>
        <class confirmed="yes">
            <name>org.apache.abdera.model.ProcessingInstruction</name>
            <outbound type="class" confirmed="no">java.lang.Object</outbound>
            <feature confirmed="yes">
                <name>org.apache.abdera.model.ProcessingInstruction.discard()</name>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.model.ProcessingInstruction.getFactory()</name>
                <outbound type="class" confirmed="yes">org.apache.abdera.factory.Factory</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.model.ProcessingInstruction.getParentElement()</name>
                <outbound type="class" confirmed="yes">org.apache.abdera.model.Base</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.model.ProcessingInstruction.getTarget()</name>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.model.ProcessingInstruction.getText()</name>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.model.ProcessingInstruction.setTarget(java.lang.String)</name>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.model.ProcessingInstruction.setText(java.lang.String)</name>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
            </feature>
        </class>
        <class confirmed="yes">
            <name>org.apache.abdera.model.Service</name>
            <outbound type="class" confirmed="no">java.lang.Object</outbound>
            <outbound type="class" confirmed="yes">org.apache.abdera.model.ExtensibleElement</outbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.Abdera.newService()</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.factory.Factory.newService()</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.factory.Factory.newService(org.apache.abdera.model.Base)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.util.MimeTypeHelper.getMimeType(org.apache.abdera.model.Base)</inbound>
            <feature confirmed="yes">
                <name>org.apache.abdera.model.Service.addWorkspace(java.lang.String)</name>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="class" confirmed="yes">org.apache.abdera.model.Workspace</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.model.Service.addWorkspace(org.apache.abdera.model.Workspace)</name>
                <outbound type="class" confirmed="yes">org.apache.abdera.model.Workspace</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.model.Service.getCollection(java.lang.String, java.lang.String)</name>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="class" confirmed="yes">org.apache.abdera.model.Collection</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.model.Service.getCollectionThatAccepts(java.lang.String[])</name>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="class" confirmed="yes">org.apache.abdera.model.Collection</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.model.Service.getCollectionThatAccepts(javax.activation.MimeType[])</name>
                <outbound type="class" confirmed="no">javax.activation.MimeType</outbound>
                <outbound type="class" confirmed="yes">org.apache.abdera.model.Collection</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.model.Service.getCollectionsThatAccept(java.lang.String[])</name>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="class" confirmed="no">java.util.List</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.model.Service.getCollectionsThatAccept(javax.activation.MimeType[])</name>
                <outbound type="class" confirmed="no">java.util.List</outbound>
                <outbound type="class" confirmed="no">javax.activation.MimeType</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.model.Service.getWorkspace(java.lang.String)</name>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="class" confirmed="yes">org.apache.abdera.model.Workspace</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.model.Service.getWorkspaces()</name>
                <outbound type="class" confirmed="no">java.util.List</outbound>
            </feature>
        </class>
        <class confirmed="yes">
            <name>org.apache.abdera.model.Source</name>
            <outbound type="class" confirmed="no">java.lang.Object</outbound>
            <outbound type="class" confirmed="yes">org.apache.abdera.model.ExtensibleElement</outbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.factory.Factory.newSource()</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.factory.Factory.newSource(org.apache.abdera.model.Element)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.model.Entry.getSource()</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.model.Entry.setSource(org.apache.abdera.model.Source)</inbound>
            <inbound type="class" confirmed="yes">org.apache.abdera.model.Feed</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.model.Feed.getAsSource()</inbound>
            <feature confirmed="yes">
                <name>org.apache.abdera.model.Source.addAuthor(java.lang.String)</name>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="class" confirmed="yes">org.apache.abdera.model.Person</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.model.Source.addAuthor(java.lang.String, java.lang.String, java.lang.String)</name>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="class" confirmed="yes">org.apache.abdera.model.Person</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.model.Source.addAuthor(org.apache.abdera.model.Person)</name>
                <outbound type="class" confirmed="yes">org.apache.abdera.model.Person</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.model.Source.addCategory(java.lang.String)</name>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="class" confirmed="yes">org.apache.abdera.model.Category</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.model.Source.addCategory(java.lang.String, java.lang.String, java.lang.String)</name>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="class" confirmed="yes">org.apache.abdera.model.Category</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.model.Source.addCategory(org.apache.abdera.model.Category)</name>
                <outbound type="class" confirmed="yes">org.apache.abdera.model.Category</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.model.Source.addContributor(java.lang.String)</name>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="class" confirmed="yes">org.apache.abdera.model.Person</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.model.Source.addContributor(java.lang.String, java.lang.String, java.lang.String)</name>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="class" confirmed="yes">org.apache.abdera.model.Person</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.model.Source.addContributor(org.apache.abdera.model.Person)</name>
                <outbound type="class" confirmed="yes">org.apache.abdera.model.Person</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.model.Source.addLink(java.lang.String)</name>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="class" confirmed="yes">org.apache.abdera.model.Link</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.model.Source.addLink(java.lang.String, java.lang.String)</name>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="class" confirmed="yes">org.apache.abdera.model.Link</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.model.Source.addLink(java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, long)</name>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="class" confirmed="yes">org.apache.abdera.model.Link</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.model.Source.addLink(org.apache.abdera.model.Link)</name>
                <outbound type="class" confirmed="yes">org.apache.abdera.model.Link</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.model.Source.getAlternateLink()</name>
                <outbound type="class" confirmed="yes">org.apache.abdera.model.Link</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.model.Source.getAlternateLink(java.lang.String, java.lang.String)</name>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="class" confirmed="yes">org.apache.abdera.model.Link</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.model.Source.getAlternateLinkResolvedHref()</name>
                <outbound type="class" confirmed="no">org.apache.abdera.i18n.iri.IRI</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.model.Source.getAlternateLinkResolvedHref(java.lang.String, java.lang.String)</name>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="class" confirmed="no">org.apache.abdera.i18n.iri.IRI</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.model.Source.getAsFeed()</name>
                <outbound type="class" confirmed="yes">org.apache.abdera.model.Feed</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.model.Source.getAuthor()</name>
                <outbound type="class" confirmed="yes">org.apache.abdera.model.Person</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.model.Source.getAuthors()</name>
                <outbound type="class" confirmed="no">java.util.List</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.model.Source.getCategories()</name>
                <outbound type="class" confirmed="no">java.util.List</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.model.Source.getCategories(java.lang.String)</name>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="class" confirmed="no">java.util.List</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.model.Source.getCollection()</name>
                <outbound type="class" confirmed="yes">org.apache.abdera.model.Collection</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.model.Source.getContributors()</name>
                <outbound type="class" confirmed="no">java.util.List</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.model.Source.getGenerator()</name>
                <outbound type="class" confirmed="yes">org.apache.abdera.model.Generator</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.model.Source.getIcon()</name>
                <outbound type="class" confirmed="no">org.apache.abdera.i18n.iri.IRI</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.model.Source.getIconElement()</name>
                <outbound type="class" confirmed="yes">org.apache.abdera.model.IRIElement</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.model.Source.getId()</name>
                <outbound type="class" confirmed="no">org.apache.abdera.i18n.iri.IRI</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.model.Source.getIdElement()</name>
                <outbound type="class" confirmed="yes">org.apache.abdera.model.IRIElement</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.model.Source.getLink(java.lang.String)</name>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="class" confirmed="yes">org.apache.abdera.model.Link</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.model.Source.getLinkResolvedHref(java.lang.String)</name>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="class" confirmed="no">org.apache.abdera.i18n.iri.IRI</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.model.Source.getLinks()</name>
                <outbound type="class" confirmed="no">java.util.List</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.model.Source.getLinks(java.lang.String)</name>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="class" confirmed="no">java.util.List</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.model.Source.getLinks(java.lang.String[])</name>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="class" confirmed="no">java.util.List</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.model.Source.getLogo()</name>
                <outbound type="class" confirmed="no">org.apache.abdera.i18n.iri.IRI</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.model.Source.getLogoElement()</name>
                <outbound type="class" confirmed="yes">org.apache.abdera.model.IRIElement</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.model.Source.getRights()</name>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.model.Source.getRightsElement()</name>
                <outbound type="class" confirmed="yes">org.apache.abdera.model.Text</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.model.Source.getRightsType()</name>
                <outbound type="class" confirmed="yes">org.apache.abdera.model.Text$Type</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.model.Source.getSelfLink()</name>
                <outbound type="class" confirmed="yes">org.apache.abdera.model.Link</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.model.Source.getSelfLinkResolvedHref()</name>
                <outbound type="class" confirmed="no">org.apache.abdera.i18n.iri.IRI</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.model.Source.getSubtitle()</name>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.model.Source.getSubtitleElement()</name>
                <outbound type="class" confirmed="yes">org.apache.abdera.model.Text</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.model.Source.getSubtitleType()</name>
                <outbound type="class" confirmed="yes">org.apache.abdera.model.Text$Type</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.model.Source.getTitle()</name>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.model.Source.getTitleElement()</name>
                <outbound type="class" confirmed="yes">org.apache.abdera.model.Text</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.model.Source.getTitleType()</name>
                <outbound type="class" confirmed="yes">org.apache.abdera.model.Text$Type</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.model.Source.getUpdated()</name>
                <outbound type="class" confirmed="no">java.util.Date</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.model.Source.getUpdatedElement()</name>
                <outbound type="class" confirmed="yes">org.apache.abdera.model.DateTime</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.model.Source.getUpdatedString()</name>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.model.Source.newId()</name>
                <outbound type="class" confirmed="yes">org.apache.abdera.model.IRIElement</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.model.Source.setCollection(org.apache.abdera.model.Collection)</name>
                <outbound type="class" confirmed="yes">org.apache.abdera.model.Collection</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.model.Source.setGenerator(java.lang.String, java.lang.String, java.lang.String)</name>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="class" confirmed="yes">org.apache.abdera.model.Generator</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.model.Source.setGenerator(org.apache.abdera.model.Generator)</name>
                <outbound type="class" confirmed="yes">org.apache.abdera.model.Generator</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.model.Source.setIcon(java.lang.String)</name>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="class" confirmed="yes">org.apache.abdera.model.IRIElement</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.model.Source.setIconElement(org.apache.abdera.model.IRIElement)</name>
                <outbound type="class" confirmed="yes">org.apache.abdera.model.IRIElement</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.model.Source.setId(java.lang.String)</name>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="class" confirmed="yes">org.apache.abdera.model.IRIElement</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.model.Source.setId(java.lang.String, boolean)</name>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="class" confirmed="yes">org.apache.abdera.model.IRIElement</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.model.Source.setIdElement(org.apache.abdera.model.IRIElement)</name>
                <outbound type="class" confirmed="yes">org.apache.abdera.model.IRIElement</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.model.Source.setLogo(java.lang.String)</name>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="class" confirmed="yes">org.apache.abdera.model.IRIElement</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.model.Source.setLogoElement(org.apache.abdera.model.IRIElement)</name>
                <outbound type="class" confirmed="yes">org.apache.abdera.model.IRIElement</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.model.Source.setRights(java.lang.String)</name>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="class" confirmed="yes">org.apache.abdera.model.Text</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.model.Source.setRights(java.lang.String, org.apache.abdera.model.Text$Type)</name>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="class" confirmed="yes">org.apache.abdera.model.Text</outbound>
                <outbound type="class" confirmed="yes">org.apache.abdera.model.Text$Type</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.model.Source.setRights(org.apache.abdera.model.Div)</name>
                <outbound type="class" confirmed="yes">org.apache.abdera.model.Div</outbound>
                <outbound type="class" confirmed="yes">org.apache.abdera.model.Text</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.model.Source.setRightsAsHtml(java.lang.String)</name>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="class" confirmed="yes">org.apache.abdera.model.Text</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.model.Source.setRightsAsXhtml(java.lang.String)</name>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="class" confirmed="yes">org.apache.abdera.model.Text</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.model.Source.setRightsElement(org.apache.abdera.model.Text)</name>
                <outbound type="class" confirmed="yes">org.apache.abdera.model.Text</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.model.Source.setSubtitle(java.lang.String)</name>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="class" confirmed="yes">org.apache.abdera.model.Text</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.model.Source.setSubtitle(java.lang.String, org.apache.abdera.model.Text$Type)</name>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="class" confirmed="yes">org.apache.abdera.model.Text</outbound>
                <outbound type="class" confirmed="yes">org.apache.abdera.model.Text$Type</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.model.Source.setSubtitle(org.apache.abdera.model.Div)</name>
                <outbound type="class" confirmed="yes">org.apache.abdera.model.Div</outbound>
                <outbound type="class" confirmed="yes">org.apache.abdera.model.Text</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.model.Source.setSubtitleAsHtml(java.lang.String)</name>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="class" confirmed="yes">org.apache.abdera.model.Text</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.model.Source.setSubtitleAsXhtml(java.lang.String)</name>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="class" confirmed="yes">org.apache.abdera.model.Text</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.model.Source.setSubtitleElement(org.apache.abdera.model.Text)</name>
                <outbound type="class" confirmed="yes">org.apache.abdera.model.Text</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.model.Source.setTitle(java.lang.String)</name>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="class" confirmed="yes">org.apache.abdera.model.Text</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.model.Source.setTitle(java.lang.String, org.apache.abdera.model.Text$Type)</name>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="class" confirmed="yes">org.apache.abdera.model.Text</outbound>
                <outbound type="class" confirmed="yes">org.apache.abdera.model.Text$Type</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.model.Source.setTitle(org.apache.abdera.model.Div)</name>
                <outbound type="class" confirmed="yes">org.apache.abdera.model.Div</outbound>
                <outbound type="class" confirmed="yes">org.apache.abdera.model.Text</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.model.Source.setTitleAsHtml(java.lang.String)</name>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="class" confirmed="yes">org.apache.abdera.model.Text</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.model.Source.setTitleAsXhtml(java.lang.String)</name>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="class" confirmed="yes">org.apache.abdera.model.Text</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.model.Source.setTitleElement(org.apache.abdera.model.Text)</name>
                <outbound type="class" confirmed="yes">org.apache.abdera.model.Text</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.model.Source.setUpdated(java.lang.String)</name>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="class" confirmed="yes">org.apache.abdera.model.DateTime</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.model.Source.setUpdated(java.util.Date)</name>
                <outbound type="class" confirmed="no">java.util.Date</outbound>
                <outbound type="class" confirmed="yes">org.apache.abdera.model.DateTime</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.model.Source.setUpdatedElement(org.apache.abdera.model.DateTime)</name>
                <outbound type="class" confirmed="yes">org.apache.abdera.model.DateTime</outbound>
            </feature>
        </class>
        <class confirmed="yes">
            <name>org.apache.abdera.model.Text</name>
            <outbound type="class" confirmed="no">java.lang.Object</outbound>
            <outbound type="class" confirmed="yes">org.apache.abdera.model.Element</outbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.factory.Factory.newRights()</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.factory.Factory.newRights(org.apache.abdera.model.Element)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.factory.Factory.newRights(org.apache.abdera.model.Text$Type)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.factory.Factory.newRights(org.apache.abdera.model.Text$Type, org.apache.abdera.model.Element)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.factory.Factory.newSubtitle()</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.factory.Factory.newSubtitle(org.apache.abdera.model.Element)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.factory.Factory.newSubtitle(org.apache.abdera.model.Text$Type)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.factory.Factory.newSubtitle(org.apache.abdera.model.Text$Type, org.apache.abdera.model.Element)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.factory.Factory.newSummary()</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.factory.Factory.newSummary(org.apache.abdera.model.Element)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.factory.Factory.newSummary(org.apache.abdera.model.Text$Type)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.factory.Factory.newSummary(org.apache.abdera.model.Text$Type, org.apache.abdera.model.Element)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.factory.Factory.newText(javax.xml.namespace.QName, org.apache.abdera.model.Text$Type)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.factory.Factory.newText(javax.xml.namespace.QName, org.apache.abdera.model.Text$Type, org.apache.abdera.model.Element)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.factory.Factory.newTitle()</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.factory.Factory.newTitle(org.apache.abdera.model.Element)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.factory.Factory.newTitle(org.apache.abdera.model.Text$Type)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.factory.Factory.newTitle(org.apache.abdera.model.Text$Type, org.apache.abdera.model.Element)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.model.Collection.getTitleElement()</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.model.Collection.setTitle(java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.model.Collection.setTitleAsHtml(java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.model.Collection.setTitleAsXHtml(java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.model.Entry.getRightsElement()</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.model.Entry.getSummaryElement()</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.model.Entry.getTitleElement()</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.model.Entry.setRights(java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.model.Entry.setRights(java.lang.String, org.apache.abdera.model.Text$Type)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.model.Entry.setRights(org.apache.abdera.model.Div)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.model.Entry.setRightsAsHtml(java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.model.Entry.setRightsAsXhtml(java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.model.Entry.setRightsElement(org.apache.abdera.model.Text)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.model.Entry.setSummary(java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.model.Entry.setSummary(java.lang.String, org.apache.abdera.model.Text$Type)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.model.Entry.setSummary(org.apache.abdera.model.Div)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.model.Entry.setSummaryAsHtml(java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.model.Entry.setSummaryAsXhtml(java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.model.Entry.setSummaryElement(org.apache.abdera.model.Text)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.model.Entry.setTitle(java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.model.Entry.setTitle(java.lang.String, org.apache.abdera.model.Text$Type)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.model.Entry.setTitle(org.apache.abdera.model.Div)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.model.Entry.setTitleAsHtml(java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.model.Entry.setTitleAsXhtml(java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.model.Entry.setTitleElement(org.apache.abdera.model.Text)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.model.Source.getRightsElement()</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.model.Source.getSubtitleElement()</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.model.Source.getTitleElement()</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.model.Source.setRights(java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.model.Source.setRights(java.lang.String, org.apache.abdera.model.Text$Type)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.model.Source.setRights(org.apache.abdera.model.Div)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.model.Source.setRightsAsHtml(java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.model.Source.setRightsAsXhtml(java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.model.Source.setRightsElement(org.apache.abdera.model.Text)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.model.Source.setSubtitle(java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.model.Source.setSubtitle(java.lang.String, org.apache.abdera.model.Text$Type)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.model.Source.setSubtitle(org.apache.abdera.model.Div)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.model.Source.setSubtitleAsHtml(java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.model.Source.setSubtitleAsXhtml(java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.model.Source.setSubtitleElement(org.apache.abdera.model.Text)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.model.Source.setTitle(java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.model.Source.setTitle(java.lang.String, org.apache.abdera.model.Text$Type)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.model.Source.setTitle(org.apache.abdera.model.Div)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.model.Source.setTitleAsHtml(java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.model.Source.setTitleAsXhtml(java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.model.Source.setTitleElement(org.apache.abdera.model.Text)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.model.Workspace.getTitleElement()</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.model.Workspace.setTitle(java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.model.Workspace.setTitleAsHtml(java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.model.Workspace.setTitleAsXHtml(java.lang.String)</inbound>
            <feature confirmed="yes">
                <name>org.apache.abdera.model.Text.getTextType()</name>
                <outbound type="class" confirmed="yes">org.apache.abdera.model.Text$Type</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.model.Text.getValue()</name>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.model.Text.getValueElement()</name>
                <outbound type="class" confirmed="yes">org.apache.abdera.model.Div</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.model.Text.getWrappedValue()</name>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.model.Text.setTextType(org.apache.abdera.model.Text$Type)</name>
                <outbound type="class" confirmed="yes">org.apache.abdera.model.Text$Type</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.model.Text.setValue(java.lang.String)</name>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.model.Text.setValueElement(org.apache.abdera.model.Div)</name>
                <outbound type="class" confirmed="yes">org.apache.abdera.model.Div</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.model.Text.setWrappedValue(java.lang.String)</name>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
            </feature>
        </class>
        <class confirmed="yes">
            <name>org.apache.abdera.model.Text$Type</name>
            <outbound type="class" confirmed="no">java.lang.Enum</outbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.factory.Factory.newRights(org.apache.abdera.model.Text$Type)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.factory.Factory.newRights(org.apache.abdera.model.Text$Type, org.apache.abdera.model.Element)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.factory.Factory.newSubtitle(org.apache.abdera.model.Text$Type)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.factory.Factory.newSubtitle(org.apache.abdera.model.Text$Type, org.apache.abdera.model.Element)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.factory.Factory.newSummary(org.apache.abdera.model.Text$Type)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.factory.Factory.newSummary(org.apache.abdera.model.Text$Type, org.apache.abdera.model.Element)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.factory.Factory.newText(javax.xml.namespace.QName, org.apache.abdera.model.Text$Type)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.factory.Factory.newText(javax.xml.namespace.QName, org.apache.abdera.model.Text$Type, org.apache.abdera.model.Element)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.factory.Factory.newTitle(org.apache.abdera.model.Text$Type)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.factory.Factory.newTitle(org.apache.abdera.model.Text$Type, org.apache.abdera.model.Element)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.factory.StreamBuilder.startText(java.lang.String, java.lang.String, java.lang.String, org.apache.abdera.model.Text$Type)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.factory.StreamBuilder.startText(java.lang.String, java.lang.String, org.apache.abdera.model.Text$Type)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.factory.StreamBuilder.startText(java.lang.String, org.apache.abdera.model.Text$Type)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.factory.StreamBuilder.startText(javax.xml.namespace.QName, org.apache.abdera.model.Text$Type)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.factory.StreamBuilder.writeRights(org.apache.abdera.model.Text$Type, java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.factory.StreamBuilder.writeSubtitle(org.apache.abdera.model.Text$Type, java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.factory.StreamBuilder.writeSummary(org.apache.abdera.model.Text$Type, java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.factory.StreamBuilder.writeText(java.lang.String, java.lang.String, java.lang.String, org.apache.abdera.model.Text$Type, java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.factory.StreamBuilder.writeText(java.lang.String, java.lang.String, org.apache.abdera.model.Text$Type, java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.factory.StreamBuilder.writeText(java.lang.String, org.apache.abdera.model.Text$Type, java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.factory.StreamBuilder.writeText(javax.xml.namespace.QName, org.apache.abdera.model.Text$Type, java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.factory.StreamBuilder.writeTitle(org.apache.abdera.model.Text$Type, java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.model.Entry.getRightsType()</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.model.Entry.getSummaryType()</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.model.Entry.getTitleType()</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.model.Entry.setRights(java.lang.String, org.apache.abdera.model.Text$Type)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.model.Entry.setSummary(java.lang.String, org.apache.abdera.model.Text$Type)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.model.Entry.setTitle(java.lang.String, org.apache.abdera.model.Text$Type)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.model.Source.getRightsType()</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.model.Source.getSubtitleType()</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.model.Source.getTitleType()</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.model.Source.setRights(java.lang.String, org.apache.abdera.model.Text$Type)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.model.Source.setSubtitle(java.lang.String, org.apache.abdera.model.Text$Type)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.model.Source.setTitle(java.lang.String, org.apache.abdera.model.Text$Type)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.model.Text.getTextType()</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.model.Text.setTextType(org.apache.abdera.model.Text$Type)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.util.AbstractStreamWriter.startText(java.lang.String, java.lang.String, java.lang.String, org.apache.abdera.model.Text$Type)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.util.AbstractStreamWriter.startText(java.lang.String, java.lang.String, org.apache.abdera.model.Text$Type)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.util.AbstractStreamWriter.startText(java.lang.String, org.apache.abdera.model.Text$Type)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.util.AbstractStreamWriter.startText(javax.xml.namespace.QName, org.apache.abdera.model.Text$Type)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.util.AbstractStreamWriter.writeRights(java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.util.AbstractStreamWriter.writeRights(org.apache.abdera.model.Text$Type, java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.util.AbstractStreamWriter.writeSubtitle(java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.util.AbstractStreamWriter.writeSubtitle(org.apache.abdera.model.Text$Type, java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.util.AbstractStreamWriter.writeSummary(java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.util.AbstractStreamWriter.writeSummary(org.apache.abdera.model.Text$Type, java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.util.AbstractStreamWriter.writeText(java.lang.String, java.lang.String, java.lang.String, org.apache.abdera.model.Text$Type, java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.util.AbstractStreamWriter.writeText(java.lang.String, java.lang.String, org.apache.abdera.model.Text$Type, java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.util.AbstractStreamWriter.writeText(java.lang.String, org.apache.abdera.model.Text$Type, java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.util.AbstractStreamWriter.writeText(javax.xml.namespace.QName, org.apache.abdera.model.Text$Type, java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.util.AbstractStreamWriter.writeTitle(java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.util.AbstractStreamWriter.writeTitle(org.apache.abdera.model.Text$Type, java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.writer.StreamWriter.startText(java.lang.String, java.lang.String, java.lang.String, org.apache.abdera.model.Text$Type)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.writer.StreamWriter.startText(java.lang.String, java.lang.String, org.apache.abdera.model.Text$Type)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.writer.StreamWriter.startText(java.lang.String, org.apache.abdera.model.Text$Type)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.writer.StreamWriter.startText(javax.xml.namespace.QName, org.apache.abdera.model.Text$Type)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.writer.StreamWriter.writeRights(org.apache.abdera.model.Text$Type, java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.writer.StreamWriter.writeSubtitle(org.apache.abdera.model.Text$Type, java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.writer.StreamWriter.writeSummary(org.apache.abdera.model.Text$Type, java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.writer.StreamWriter.writeText(java.lang.String, java.lang.String, java.lang.String, org.apache.abdera.model.Text$Type, java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.writer.StreamWriter.writeText(java.lang.String, java.lang.String, org.apache.abdera.model.Text$Type, java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.writer.StreamWriter.writeText(java.lang.String, org.apache.abdera.model.Text$Type, java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.writer.StreamWriter.writeText(javax.xml.namespace.QName, org.apache.abdera.model.Text$Type, java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.writer.StreamWriter.writeTitle(org.apache.abdera.model.Text$Type, java.lang.String)</inbound>
            <feature confirmed="yes">
                <name>org.apache.abdera.model.Text$Type.$VALUES</name>
                <inbound type="feature" confirmed="yes">org.apache.abdera.model.Text$Type.static {}</inbound>
                <inbound type="feature" confirmed="yes">org.apache.abdera.model.Text$Type.values()</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.model.Text$Type.HTML</name>
                <inbound type="feature" confirmed="yes">org.apache.abdera.model.Text$Type.static {}</inbound>
                <inbound type="feature" confirmed="yes">org.apache.abdera.model.Text$Type.typeFromString(java.lang.String)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.model.Text$Type.TEXT</name>
                <inbound type="feature" confirmed="yes">org.apache.abdera.model.Text$Type.static {}</inbound>
                <inbound type="feature" confirmed="yes">org.apache.abdera.model.Text$Type.typeFromString(java.lang.String)</inbound>
                <inbound type="feature" confirmed="yes">org.apache.abdera.util.AbstractStreamWriter.writeRights(java.lang.String)</inbound>
                <inbound type="feature" confirmed="yes">org.apache.abdera.util.AbstractStreamWriter.writeSubtitle(java.lang.String)</inbound>
                <inbound type="feature" confirmed="yes">org.apache.abdera.util.AbstractStreamWriter.writeSummary(java.lang.String)</inbound>
                <inbound type="feature" confirmed="yes">org.apache.abdera.util.AbstractStreamWriter.writeTitle(java.lang.String)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.model.Text$Type.Text$Type(java.lang.String, int)</name>
                <outbound type="feature" confirmed="no">java.lang.Enum.Enum(java.lang.String, int)</outbound>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <inbound type="feature" confirmed="yes">org.apache.abdera.model.Text$Type.static {}</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.model.Text$Type.XHTML</name>
                <inbound type="feature" confirmed="yes">org.apache.abdera.model.Text$Type.static {}</inbound>
                <inbound type="feature" confirmed="yes">org.apache.abdera.model.Text$Type.typeFromString(java.lang.String)</inbound>
            </feature>
            <feature confirmed="no">
                <name>org.apache.abdera.model.Text$Type.name()</name>
                <inbound type="feature" confirmed="yes">org.apache.abdera.util.AbstractStreamWriter.startText(java.lang.String, java.lang.String, java.lang.String, org.apache.abdera.model.Text$Type)</inbound>
                <inbound type="feature" confirmed="yes">org.apache.abdera.util.AbstractStreamWriter.startText(java.lang.String, java.lang.String, org.apache.abdera.model.Text$Type)</inbound>
                <inbound type="feature" confirmed="yes">org.apache.abdera.util.AbstractStreamWriter.startText(java.lang.String, org.apache.abdera.model.Text$Type)</inbound>
                <inbound type="feature" confirmed="yes">org.apache.abdera.util.AbstractStreamWriter.startText(javax.xml.namespace.QName, org.apache.abdera.model.Text$Type)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.model.Text$Type.static {}</name>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="feature" confirmed="yes">org.apache.abdera.model.Text$Type.$VALUES</outbound>
                <outbound type="feature" confirmed="yes">org.apache.abdera.model.Text$Type.HTML</outbound>
                <outbound type="feature" confirmed="yes">org.apache.abdera.model.Text$Type.TEXT</outbound>
                <outbound type="feature" confirmed="yes">org.apache.abdera.model.Text$Type.Text$Type(java.lang.String, int)</outbound>
                <outbound type="feature" confirmed="yes">org.apache.abdera.model.Text$Type.XHTML</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.model.Text$Type.typeFromString(java.lang.String)</name>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="feature" confirmed="no">java.lang.String.equalsIgnoreCase(java.lang.String)</outbound>
                <outbound type="feature" confirmed="yes">org.apache.abdera.model.Text$Type.HTML</outbound>
                <outbound type="feature" confirmed="yes">org.apache.abdera.model.Text$Type.TEXT</outbound>
                <outbound type="feature" confirmed="yes">org.apache.abdera.model.Text$Type.XHTML</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.model.Text$Type.valueOf(java.lang.String)</name>
                <outbound type="class" confirmed="no">java.lang.Class</outbound>
                <outbound type="class" confirmed="no">java.lang.Enum</outbound>
                <outbound type="feature" confirmed="no">java.lang.Enum.valueOf(java.lang.Class, java.lang.String)</outbound>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.model.Text$Type.values()</name>
                <outbound type="class" confirmed="no">java.lang.Object</outbound>
                <outbound type="feature" confirmed="yes">org.apache.abdera.model.Text$Type.$VALUES</outbound>
                <outbound type="class" confirmed="no">org.apache.abdera.model.Text$Type[]</outbound>
                <outbound type="feature" confirmed="no">org.apache.abdera.model.Text$Type[].clone()</outbound>
            </feature>
        </class>
        <class confirmed="no">
            <name>org.apache.abdera.model.Text$Type[]</name>
            <inbound type="feature" confirmed="yes">org.apache.abdera.model.Text$Type.values()</inbound>
            <feature confirmed="no">
                <name>org.apache.abdera.model.Text$Type[].clone()</name>
                <inbound type="feature" confirmed="yes">org.apache.abdera.model.Text$Type.values()</inbound>
            </feature>
        </class>
        <class confirmed="yes">
            <name>org.apache.abdera.model.TextValue</name>
            <outbound type="class" confirmed="no">java.lang.Object</outbound>
            <feature confirmed="yes">
                <name>org.apache.abdera.model.TextValue.discard()</name>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.model.TextValue.getDataHandler()</name>
                <outbound type="class" confirmed="no">javax.activation.DataHandler</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.model.TextValue.getInputStream()</name>
                <outbound type="class" confirmed="no">java.io.InputStream</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.model.TextValue.getParentElement()</name>
                <outbound type="class" confirmed="yes">org.apache.abdera.model.Base</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.model.TextValue.getText()</name>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
            </feature>
        </class>
        <class confirmed="yes">
            <name>org.apache.abdera.model.Workspace</name>
            <outbound type="class" confirmed="no">java.lang.Object</outbound>
            <outbound type="class" confirmed="yes">org.apache.abdera.model.ExtensibleElement</outbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.factory.Factory.newWorkspace()</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.factory.Factory.newWorkspace(org.apache.abdera.model.Element)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.model.Service.addWorkspace(java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.model.Service.addWorkspace(org.apache.abdera.model.Workspace)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.model.Service.getWorkspace(java.lang.String)</inbound>
            <feature confirmed="yes">
                <name>org.apache.abdera.model.Workspace.addCollection(java.lang.String, java.lang.String)</name>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="class" confirmed="yes">org.apache.abdera.model.Collection</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.model.Workspace.addCollection(org.apache.abdera.model.Collection)</name>
                <outbound type="class" confirmed="yes">org.apache.abdera.model.Collection</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.model.Workspace.addMultipartCollection(java.lang.String, java.lang.String)</name>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="class" confirmed="yes">org.apache.abdera.model.Collection</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.model.Workspace.getCollection(java.lang.String)</name>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="class" confirmed="yes">org.apache.abdera.model.Collection</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.model.Workspace.getCollectionThatAccepts(java.lang.String[])</name>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="class" confirmed="yes">org.apache.abdera.model.Collection</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.model.Workspace.getCollectionThatAccepts(javax.activation.MimeType[])</name>
                <outbound type="class" confirmed="no">javax.activation.MimeType</outbound>
                <outbound type="class" confirmed="yes">org.apache.abdera.model.Collection</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.model.Workspace.getCollections()</name>
                <outbound type="class" confirmed="no">java.util.List</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.model.Workspace.getCollectionsThatAccept(java.lang.String[])</name>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="class" confirmed="no">java.util.List</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.model.Workspace.getCollectionsThatAccept(javax.activation.MimeType[])</name>
                <outbound type="class" confirmed="no">java.util.List</outbound>
                <outbound type="class" confirmed="no">javax.activation.MimeType</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.model.Workspace.getTitle()</name>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.model.Workspace.getTitleElement()</name>
                <outbound type="class" confirmed="yes">org.apache.abdera.model.Text</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.model.Workspace.setTitle(java.lang.String)</name>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="class" confirmed="yes">org.apache.abdera.model.Text</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.model.Workspace.setTitleAsHtml(java.lang.String)</name>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="class" confirmed="yes">org.apache.abdera.model.Text</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.model.Workspace.setTitleAsXHtml(java.lang.String)</name>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="class" confirmed="yes">org.apache.abdera.model.Text</outbound>
            </feature>
        </class>
    </package>
    <package confirmed="yes">
        <name>org.apache.abdera.parser</name>
        <class confirmed="yes">
            <name>org.apache.abdera.parser.NamedParser</name>
            <outbound type="class" confirmed="no">java.lang.Object</outbound>
            <outbound type="class" confirmed="yes">org.apache.abdera.parser.Parser</outbound>
            <outbound type="class" confirmed="yes">org.apache.abdera.util.NamedItem</outbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.util.AbderaConfiguration.addNamedParser(org.apache.abdera.parser.NamedParser)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.util.AbderaConfiguration.initNamedParsers()</inbound>
            <inbound type="class" confirmed="yes">org.apache.abdera.util.AbstractNamedParser</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.util.Configuration.addNamedParser(org.apache.abdera.parser.NamedParser)</inbound>
            <feature confirmed="yes">
                <name>org.apache.abdera.parser.NamedParser.getInputFormats()</name>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
            </feature>
            <feature confirmed="no">
                <name>org.apache.abdera.parser.NamedParser.getName()</name>
                <inbound type="feature" confirmed="yes">org.apache.abdera.util.AbderaConfiguration.initNamedParsers()</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.parser.NamedParser.parsesFormat(java.lang.String)</name>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
            </feature>
        </class>
        <class confirmed="yes">
            <name>org.apache.abdera.parser.ParseException</name>
            <outbound type="class" confirmed="no">java.lang.RuntimeException</outbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.parser.Parser.parse(java.io.InputStream)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.parser.Parser.parse(java.io.InputStream, java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.parser.Parser.parse(java.io.InputStream, java.lang.String, org.apache.abdera.parser.ParserOptions)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.parser.Parser.parse(java.io.InputStream, org.apache.abdera.parser.ParserOptions)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.parser.Parser.parse(java.io.Reader)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.parser.Parser.parse(java.io.Reader, java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.parser.Parser.parse(java.io.Reader, java.lang.String, org.apache.abdera.parser.ParserOptions)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.parser.Parser.parse(java.io.Reader, org.apache.abdera.parser.ParserOptions)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.parser.Parser.parse(java.nio.channels.ReadableByteChannel)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.parser.Parser.parse(java.nio.channels.ReadableByteChannel, java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.parser.Parser.parse(java.nio.channels.ReadableByteChannel, java.lang.String, org.apache.abdera.parser.ParserOptions)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.parser.Parser.parse(java.nio.channels.ReadableByteChannel, org.apache.abdera.parser.ParserOptions)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.parser.Parser.parse(javax.xml.stream.XMLStreamReader)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.parser.Parser.parse(javax.xml.stream.XMLStreamReader, java.lang.String, org.apache.abdera.parser.ParserOptions)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.util.AbstractParser.parse(java.io.InputStream)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.util.AbstractParser.parse(java.io.InputStream, java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.util.AbstractParser.parse(java.io.InputStream, java.lang.String, org.apache.abdera.parser.ParserOptions)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.util.AbstractParser.parse(java.io.InputStream, org.apache.abdera.parser.ParserOptions)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.util.AbstractParser.parse(java.io.Reader)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.util.AbstractParser.parse(java.io.Reader, java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.util.AbstractParser.parse(java.io.Reader, org.apache.abdera.parser.ParserOptions)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.util.AbstractParser.parse(java.nio.channels.ReadableByteChannel)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.util.AbstractParser.parse(java.nio.channels.ReadableByteChannel, java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.util.AbstractParser.parse(java.nio.channels.ReadableByteChannel, java.lang.String, org.apache.abdera.parser.ParserOptions)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.util.AbstractParser.parse(java.nio.channels.ReadableByteChannel, org.apache.abdera.parser.ParserOptions)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.util.AbstractParser.parse(javax.xml.stream.XMLStreamReader)</inbound>
            <feature confirmed="yes">
                <name>org.apache.abdera.parser.ParseException.ParseException()</name>
                <outbound type="feature" confirmed="no">java.lang.RuntimeException.RuntimeException()</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.parser.ParseException.ParseException(java.lang.String)</name>
                <outbound type="feature" confirmed="no">java.lang.RuntimeException.RuntimeException(java.lang.String)</outbound>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.parser.ParseException.ParseException(java.lang.String, java.lang.Throwable)</name>
                <outbound type="feature" confirmed="no">java.lang.RuntimeException.RuntimeException(java.lang.String, java.lang.Throwable)</outbound>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="class" confirmed="no">java.lang.Throwable</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.parser.ParseException.ParseException(java.lang.Throwable)</name>
                <outbound type="feature" confirmed="no">java.lang.RuntimeException.RuntimeException(java.lang.Throwable)</outbound>
                <outbound type="class" confirmed="no">java.lang.Throwable</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.parser.ParseException.serialVersionUID</name>
            </feature>
        </class>
        <class confirmed="yes">
            <name>org.apache.abdera.parser.Parser</name>
            <outbound type="class" confirmed="no">java.lang.Object</outbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.Abdera.getNewParser()</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.Abdera.getParser()</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.Abdera.newParser()</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.Abdera.parser</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.factory.Factory.newParser()</inbound>
            <inbound type="class" confirmed="yes">org.apache.abdera.parser.NamedParser</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.parser.ParserFactory.getParser()</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.parser.ParserFactory.getParser(java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.util.AbderaConfiguration.newParserInstance(org.apache.abdera.Abdera)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.util.AbderaResult.getDocument()</inbound>
            <inbound type="class" confirmed="yes">org.apache.abdera.util.AbstractParser</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.util.AbstractParser.setDefaultParserOptions(org.apache.abdera.parser.ParserOptions)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.util.Configuration.newParserInstance(org.apache.abdera.Abdera)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.util.ServiceUtil.newParserInstance(org.apache.abdera.Abdera)</inbound>
            <feature confirmed="yes">
                <name>org.apache.abdera.parser.Parser.getDefaultParserOptions()</name>
                <outbound type="class" confirmed="yes">org.apache.abdera.parser.ParserOptions</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.parser.Parser.parse(java.io.InputStream)</name>
                <outbound type="class" confirmed="no">java.io.InputStream</outbound>
                <outbound type="class" confirmed="yes">org.apache.abdera.model.Document</outbound>
                <outbound type="class" confirmed="yes">org.apache.abdera.parser.ParseException</outbound>
                <inbound type="feature" confirmed="yes">org.apache.abdera.util.AbderaResult.getDocument()</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.parser.Parser.parse(java.io.InputStream, java.lang.String)</name>
                <outbound type="class" confirmed="no">java.io.InputStream</outbound>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="class" confirmed="yes">org.apache.abdera.model.Document</outbound>
                <outbound type="class" confirmed="yes">org.apache.abdera.parser.ParseException</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.parser.Parser.parse(java.io.InputStream, java.lang.String, org.apache.abdera.parser.ParserOptions)</name>
                <outbound type="class" confirmed="no">java.io.InputStream</outbound>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="class" confirmed="yes">org.apache.abdera.model.Document</outbound>
                <outbound type="class" confirmed="yes">org.apache.abdera.parser.ParseException</outbound>
                <outbound type="class" confirmed="yes">org.apache.abdera.parser.ParserOptions</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.parser.Parser.parse(java.io.InputStream, org.apache.abdera.parser.ParserOptions)</name>
                <outbound type="class" confirmed="no">java.io.InputStream</outbound>
                <outbound type="class" confirmed="yes">org.apache.abdera.model.Document</outbound>
                <outbound type="class" confirmed="yes">org.apache.abdera.parser.ParseException</outbound>
                <outbound type="class" confirmed="yes">org.apache.abdera.parser.ParserOptions</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.parser.Parser.parse(java.io.Reader)</name>
                <outbound type="class" confirmed="no">java.io.Reader</outbound>
                <outbound type="class" confirmed="yes">org.apache.abdera.model.Document</outbound>
                <outbound type="class" confirmed="yes">org.apache.abdera.parser.ParseException</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.parser.Parser.parse(java.io.Reader, java.lang.String)</name>
                <outbound type="class" confirmed="no">java.io.Reader</outbound>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="class" confirmed="yes">org.apache.abdera.model.Document</outbound>
                <outbound type="class" confirmed="yes">org.apache.abdera.parser.ParseException</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.parser.Parser.parse(java.io.Reader, java.lang.String, org.apache.abdera.parser.ParserOptions)</name>
                <outbound type="class" confirmed="no">java.io.Reader</outbound>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="class" confirmed="yes">org.apache.abdera.model.Document</outbound>
                <outbound type="class" confirmed="yes">org.apache.abdera.parser.ParseException</outbound>
                <outbound type="class" confirmed="yes">org.apache.abdera.parser.ParserOptions</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.parser.Parser.parse(java.io.Reader, org.apache.abdera.parser.ParserOptions)</name>
                <outbound type="class" confirmed="no">java.io.Reader</outbound>
                <outbound type="class" confirmed="yes">org.apache.abdera.model.Document</outbound>
                <outbound type="class" confirmed="yes">org.apache.abdera.parser.ParseException</outbound>
                <outbound type="class" confirmed="yes">org.apache.abdera.parser.ParserOptions</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.parser.Parser.parse(java.nio.channels.ReadableByteChannel)</name>
                <outbound type="class" confirmed="no">java.nio.channels.ReadableByteChannel</outbound>
                <outbound type="class" confirmed="yes">org.apache.abdera.model.Document</outbound>
                <outbound type="class" confirmed="yes">org.apache.abdera.parser.ParseException</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.parser.Parser.parse(java.nio.channels.ReadableByteChannel, java.lang.String)</name>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="class" confirmed="no">java.nio.channels.ReadableByteChannel</outbound>
                <outbound type="class" confirmed="yes">org.apache.abdera.model.Document</outbound>
                <outbound type="class" confirmed="yes">org.apache.abdera.parser.ParseException</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.parser.Parser.parse(java.nio.channels.ReadableByteChannel, java.lang.String, org.apache.abdera.parser.ParserOptions)</name>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="class" confirmed="no">java.nio.channels.ReadableByteChannel</outbound>
                <outbound type="class" confirmed="yes">org.apache.abdera.model.Document</outbound>
                <outbound type="class" confirmed="yes">org.apache.abdera.parser.ParseException</outbound>
                <outbound type="class" confirmed="yes">org.apache.abdera.parser.ParserOptions</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.parser.Parser.parse(java.nio.channels.ReadableByteChannel, org.apache.abdera.parser.ParserOptions)</name>
                <outbound type="class" confirmed="no">java.nio.channels.ReadableByteChannel</outbound>
                <outbound type="class" confirmed="yes">org.apache.abdera.model.Document</outbound>
                <outbound type="class" confirmed="yes">org.apache.abdera.parser.ParseException</outbound>
                <outbound type="class" confirmed="yes">org.apache.abdera.parser.ParserOptions</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.parser.Parser.parse(javax.xml.stream.XMLStreamReader)</name>
                <outbound type="class" confirmed="no">javax.xml.stream.XMLStreamReader</outbound>
                <outbound type="class" confirmed="yes">org.apache.abdera.model.Document</outbound>
                <outbound type="class" confirmed="yes">org.apache.abdera.parser.ParseException</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.parser.Parser.parse(javax.xml.stream.XMLStreamReader, java.lang.String, org.apache.abdera.parser.ParserOptions)</name>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="class" confirmed="no">javax.xml.stream.XMLStreamReader</outbound>
                <outbound type="class" confirmed="yes">org.apache.abdera.model.Document</outbound>
                <outbound type="class" confirmed="yes">org.apache.abdera.parser.ParseException</outbound>
                <outbound type="class" confirmed="yes">org.apache.abdera.parser.ParserOptions</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.parser.Parser.setDefaultParserOptions(org.apache.abdera.parser.ParserOptions)</name>
                <outbound type="class" confirmed="yes">org.apache.abdera.parser.ParserOptions</outbound>
            </feature>
        </class>
        <class confirmed="yes">
            <name>org.apache.abdera.parser.ParserFactory</name>
            <outbound type="class" confirmed="no">java.lang.Object</outbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.Abdera.getNewParserFactory()</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.Abdera.getParserFactory()</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.Abdera.newParserFactory()</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.Abdera.parserFactory</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.util.AbderaConfiguration.newParserFactoryInstance(org.apache.abdera.Abdera)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.util.Configuration.newParserFactoryInstance(org.apache.abdera.Abdera)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.util.ServiceUtil.newParserFactoryInstance(org.apache.abdera.Abdera)</inbound>
            <feature confirmed="yes">
                <name>org.apache.abdera.parser.ParserFactory.getParser()</name>
                <outbound type="class" confirmed="yes">org.apache.abdera.parser.Parser</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.parser.ParserFactory.getParser(java.lang.String)</name>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="class" confirmed="yes">org.apache.abdera.parser.Parser</outbound>
            </feature>
        </class>
        <class confirmed="yes">
            <name>org.apache.abdera.parser.ParserOptions</name>
            <outbound type="class" confirmed="no">java.lang.Cloneable</outbound>
            <outbound type="class" confirmed="no">java.lang.Object</outbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.parser.Parser.getDefaultParserOptions()</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.parser.Parser.parse(java.io.InputStream, java.lang.String, org.apache.abdera.parser.ParserOptions)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.parser.Parser.parse(java.io.InputStream, org.apache.abdera.parser.ParserOptions)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.parser.Parser.parse(java.io.Reader, java.lang.String, org.apache.abdera.parser.ParserOptions)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.parser.Parser.parse(java.io.Reader, org.apache.abdera.parser.ParserOptions)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.parser.Parser.parse(java.nio.channels.ReadableByteChannel, java.lang.String, org.apache.abdera.parser.ParserOptions)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.parser.Parser.parse(java.nio.channels.ReadableByteChannel, org.apache.abdera.parser.ParserOptions)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.parser.Parser.parse(javax.xml.stream.XMLStreamReader, java.lang.String, org.apache.abdera.parser.ParserOptions)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.parser.Parser.setDefaultParserOptions(org.apache.abdera.parser.ParserOptions)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.util.AbstractParser.getDefaultParserOptions()</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.util.AbstractParser.initDefaultParserOptions()</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.util.AbstractParser.options</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.util.AbstractParser.parse(java.io.InputStream)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.util.AbstractParser.parse(java.io.InputStream, java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.util.AbstractParser.parse(java.io.InputStream, java.lang.String, org.apache.abdera.parser.ParserOptions)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.util.AbstractParser.parse(java.io.InputStream, org.apache.abdera.parser.ParserOptions)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.util.AbstractParser.parse(java.io.Reader)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.util.AbstractParser.parse(java.io.Reader, java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.util.AbstractParser.parse(java.io.Reader, org.apache.abdera.parser.ParserOptions)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.util.AbstractParser.parse(java.nio.channels.ReadableByteChannel)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.util.AbstractParser.parse(java.nio.channels.ReadableByteChannel, java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.util.AbstractParser.parse(java.nio.channels.ReadableByteChannel, java.lang.String, org.apache.abdera.parser.ParserOptions)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.util.AbstractParser.parse(java.nio.channels.ReadableByteChannel, org.apache.abdera.parser.ParserOptions)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.util.AbstractParser.parse(javax.xml.stream.XMLStreamReader)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.util.AbstractParser.setDefaultParserOptions(org.apache.abdera.parser.ParserOptions)</inbound>
            <inbound type="class" confirmed="yes">org.apache.abdera.util.AbstractParserOptions</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.util.AbstractParserOptions.initDefaultEntities()</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.util.AbstractParserOptions.registerEntity(java.lang.String, java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.util.AbstractParserOptions.setAutodetectCharset(boolean)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.util.AbstractParserOptions.setCharset(java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.util.AbstractParserOptions.setCompressionCodecs(org.apache.abdera.i18n.text.io.CompressionUtil$CompressionCodec[])</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.util.AbstractParserOptions.setFactory(org.apache.abdera.factory.Factory)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.util.AbstractParserOptions.setFilterRestrictedCharacterReplacement(char)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.util.AbstractParserOptions.setFilterRestrictedCharacters(boolean)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.util.AbstractParserOptions.setMustPreserveWhitespace(boolean)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.util.AbstractParserOptions.setParseFilter(org.apache.abdera.filter.ParseFilter)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.util.AbstractParserOptions.setQNameAliasMap(java.util.Map)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.util.AbstractParserOptions.setQNameAliasMappingEnabled(boolean)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.util.AbstractParserOptions.setResolveEntities(boolean)</inbound>
            <feature confirmed="yes">
                <name>org.apache.abdera.parser.ParserOptions.clone()</name>
                <outbound type="class" confirmed="no">java.lang.CloneNotSupportedException</outbound>
                <outbound type="class" confirmed="no">java.lang.Object</outbound>
                <inbound type="feature" confirmed="yes">org.apache.abdera.util.AbstractParser.getDefaultParserOptions()</inbound>
                <inbound type="feature" confirmed="yes">org.apache.abdera.util.AbstractParser.setDefaultParserOptions(org.apache.abdera.parser.ParserOptions)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.parser.ParserOptions.getAutodetectCharset()</name>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.parser.ParserOptions.getCharset()</name>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <inbound type="feature" confirmed="yes">org.apache.abdera.util.AbstractParser.parse(java.nio.channels.ReadableByteChannel, java.lang.String, org.apache.abdera.parser.ParserOptions)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.parser.ParserOptions.getCompressionCodecs()</name>
                <outbound type="class" confirmed="no">org.apache.abdera.i18n.text.io.CompressionUtil$CompressionCodec</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.parser.ParserOptions.getFactory()</name>
                <outbound type="class" confirmed="yes">org.apache.abdera.factory.Factory</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.parser.ParserOptions.getFilterRestrictedCharacterReplacement()</name>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.parser.ParserOptions.getFilterRestrictedCharacters()</name>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.parser.ParserOptions.getMustPreserveWhitespace()</name>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.parser.ParserOptions.getParseFilter()</name>
                <outbound type="class" confirmed="yes">org.apache.abdera.filter.ParseFilter</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.parser.ParserOptions.getQNameAliasMap()</name>
                <outbound type="class" confirmed="no">java.util.Map</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.parser.ParserOptions.getResolveEntities()</name>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.parser.ParserOptions.isQNameAliasMappingEnabled()</name>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.parser.ParserOptions.registerEntity(java.lang.String, java.lang.String)</name>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.parser.ParserOptions.resolveEntity(java.lang.String)</name>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.parser.ParserOptions.setAutodetectCharset(boolean)</name>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.parser.ParserOptions.setCharset(java.lang.String)</name>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.parser.ParserOptions.setCompressionCodecs(org.apache.abdera.i18n.text.io.CompressionUtil$CompressionCodec[])</name>
                <outbound type="class" confirmed="no">org.apache.abdera.i18n.text.io.CompressionUtil$CompressionCodec</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.parser.ParserOptions.setFactory(org.apache.abdera.factory.Factory)</name>
                <outbound type="class" confirmed="yes">org.apache.abdera.factory.Factory</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.parser.ParserOptions.setFilterRestrictedCharacterReplacement(char)</name>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.parser.ParserOptions.setFilterRestrictedCharacters(boolean)</name>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.parser.ParserOptions.setMustPreserveWhitespace(boolean)</name>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.parser.ParserOptions.setParseFilter(org.apache.abdera.filter.ParseFilter)</name>
                <outbound type="class" confirmed="yes">org.apache.abdera.filter.ParseFilter</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.parser.ParserOptions.setQNameAliasMap(java.util.Map)</name>
                <outbound type="class" confirmed="no">java.util.Map</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.parser.ParserOptions.setQNameAliasMappingEnabled(boolean)</name>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.parser.ParserOptions.setResolveEntities(boolean)</name>
            </feature>
        </class>
    </package>
    <package confirmed="yes">
        <name>org.apache.abdera.protocol</name>
        <class confirmed="yes">
            <name>org.apache.abdera.protocol.EntityProvider</name>
            <outbound type="class" confirmed="no">java.lang.Object</outbound>
            <inbound type="class" confirmed="yes">org.apache.abdera.protocol.util.AbstractEntityProvider</inbound>
            <feature confirmed="yes">
                <name>org.apache.abdera.protocol.EntityProvider.getContentType()</name>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.protocol.EntityProvider.getEntityTag()</name>
                <outbound type="class" confirmed="yes">org.apache.abdera.util.EntityTag</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.protocol.EntityProvider.getLastModified()</name>
                <outbound type="class" confirmed="no">java.util.Date</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.protocol.EntityProvider.isRepeatable()</name>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.protocol.EntityProvider.writeTo(org.apache.abdera.writer.StreamWriter)</name>
                <outbound type="class" confirmed="yes">org.apache.abdera.writer.StreamWriter</outbound>
            </feature>
        </class>
        <class confirmed="yes">
            <name>org.apache.abdera.protocol.ItemManager</name>
            <outbound type="class" confirmed="no">java.lang.Object</outbound>
            <inbound type="class" confirmed="yes">org.apache.abdera.protocol.util.AbstractItemManager</inbound>
            <inbound type="class" confirmed="yes">org.apache.abdera.protocol.util.PoolManager</inbound>
            <feature confirmed="yes">
                <name>org.apache.abdera.protocol.ItemManager.get(org.apache.abdera.protocol.Request)</name>
                <outbound type="class" confirmed="no">java.lang.Object</outbound>
                <outbound type="class" confirmed="yes">org.apache.abdera.protocol.Request</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.protocol.ItemManager.release(java.lang.Object)</name>
                <outbound type="class" confirmed="no">java.lang.Object</outbound>
            </feature>
        </class>
        <class confirmed="yes">
            <name>org.apache.abdera.protocol.Message</name>
            <outbound type="class" confirmed="no">java.lang.Object</outbound>
            <outbound type="class" confirmed="yes">org.apache.abdera.protocol.util.ProtocolConstants</outbound>
            <inbound type="class" confirmed="yes">org.apache.abdera.protocol.Request</inbound>
            <inbound type="class" confirmed="yes">org.apache.abdera.protocol.Response</inbound>
            <inbound type="class" confirmed="yes">org.apache.abdera.protocol.util.AbstractMessage</inbound>
            <feature confirmed="yes">
                <name>org.apache.abdera.protocol.Message.getCacheControl()</name>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.protocol.Message.getContentLanguage()</name>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.protocol.Message.getContentLocation()</name>
                <outbound type="class" confirmed="no">org.apache.abdera.i18n.iri.IRI</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.protocol.Message.getContentType()</name>
                <outbound type="class" confirmed="no">javax.activation.MimeType</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.protocol.Message.getDateHeader(java.lang.String)</name>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="class" confirmed="no">java.util.Date</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.protocol.Message.getDecodedHeader(java.lang.String)</name>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.protocol.Message.getDecodedHeaders(java.lang.String)</name>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.protocol.Message.getHeader(java.lang.String)</name>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.protocol.Message.getHeaderNames()</name>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.protocol.Message.getHeaders(java.lang.String)</name>
                <outbound type="class" confirmed="no">java.lang.Object</outbound>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.protocol.Message.getMaxAge()</name>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.protocol.Message.getSlug()</name>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.protocol.Message.isNoCache()</name>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.protocol.Message.isNoStore()</name>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.protocol.Message.isNoTransform()</name>
            </feature>
        </class>
        <class confirmed="yes">
            <name>org.apache.abdera.protocol.Request</name>
            <outbound type="class" confirmed="no">java.lang.Object</outbound>
            <outbound type="class" confirmed="yes">org.apache.abdera.protocol.Message</outbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.protocol.ItemManager.get(org.apache.abdera.protocol.Request)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.protocol.Resolver.resolve(org.apache.abdera.protocol.Request)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.protocol.util.AbstractItemManager.get(org.apache.abdera.protocol.Request)</inbound>
            <inbound type="class" confirmed="yes">org.apache.abdera.protocol.util.AbstractRequest</inbound>
            <feature confirmed="yes">
                <name>org.apache.abdera.protocol.Request.getAccept()</name>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.protocol.Request.getAcceptCharset()</name>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.protocol.Request.getAcceptEncoding()</name>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.protocol.Request.getAcceptLanguage()</name>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.protocol.Request.getAuthorization()</name>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.protocol.Request.getIfMatch()</name>
                <outbound type="class" confirmed="yes">org.apache.abdera.util.EntityTag</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.protocol.Request.getIfModifiedSince()</name>
                <outbound type="class" confirmed="no">java.util.Date</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.protocol.Request.getIfNoneMatch()</name>
                <outbound type="class" confirmed="yes">org.apache.abdera.util.EntityTag</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.protocol.Request.getIfUnmodifiedSince()</name>
                <outbound type="class" confirmed="no">java.util.Date</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.protocol.Request.getMaxStale()</name>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.protocol.Request.getMinFresh()</name>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.protocol.Request.isOnlyIfCached()</name>
            </feature>
        </class>
        <class confirmed="yes">
            <name>org.apache.abdera.protocol.Resolver</name>
            <outbound type="class" confirmed="no">java.lang.Object</outbound>
            <feature confirmed="yes">
                <name>org.apache.abdera.protocol.Resolver.resolve(org.apache.abdera.protocol.Request)</name>
                <outbound type="class" confirmed="no">java.lang.Object</outbound>
                <outbound type="class" confirmed="yes">org.apache.abdera.protocol.Request</outbound>
            </feature>
        </class>
        <class confirmed="yes">
            <name>org.apache.abdera.protocol.Response</name>
            <outbound type="class" confirmed="no">java.lang.Object</outbound>
            <outbound type="class" confirmed="yes">org.apache.abdera.protocol.Message</outbound>
            <inbound type="class" confirmed="yes">org.apache.abdera.protocol.util.AbstractResponse</inbound>
            <feature confirmed="yes">
                <name>org.apache.abdera.protocol.Response.getAge()</name>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.protocol.Response.getAllow()</name>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.protocol.Response.getContentLength()</name>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.protocol.Response.getEntityTag()</name>
                <outbound type="class" confirmed="yes">org.apache.abdera.util.EntityTag</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.protocol.Response.getExpires()</name>
                <outbound type="class" confirmed="no">java.util.Date</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.protocol.Response.getLastModified()</name>
                <outbound type="class" confirmed="no">java.util.Date</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.protocol.Response.getLocation()</name>
                <outbound type="class" confirmed="no">org.apache.abdera.i18n.iri.IRI</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.protocol.Response.getNoCacheHeaders()</name>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.protocol.Response.getPrivateHeaders()</name>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.protocol.Response.getSMaxAge()</name>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.protocol.Response.getStatus()</name>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.protocol.Response.getStatusText()</name>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.protocol.Response.getType()</name>
                <outbound type="class" confirmed="yes">org.apache.abdera.protocol.Response$ResponseType</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.protocol.Response.isMustRevalidate()</name>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.protocol.Response.isPrivate()</name>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.protocol.Response.isProxyRevalidate()</name>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.protocol.Response.isPublic()</name>
            </feature>
        </class>
        <class confirmed="yes">
            <name>org.apache.abdera.protocol.Response$ResponseType</name>
            <outbound type="class" confirmed="no">java.lang.Enum</outbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.protocol.Response.getType()</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.protocol.util.AbstractResponse.getType()</inbound>
            <feature confirmed="yes">
                <name>org.apache.abdera.protocol.Response$ResponseType.$VALUES</name>
                <inbound type="feature" confirmed="yes">org.apache.abdera.protocol.Response$ResponseType.static {}</inbound>
                <inbound type="feature" confirmed="yes">org.apache.abdera.protocol.Response$ResponseType.values()</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.protocol.Response$ResponseType.CLIENT_ERROR</name>
                <inbound type="feature" confirmed="yes">org.apache.abdera.protocol.Response$ResponseType.select(int)</inbound>
                <inbound type="feature" confirmed="yes">org.apache.abdera.protocol.Response$ResponseType.static {}</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.protocol.Response$ResponseType.REDIRECTION</name>
                <inbound type="feature" confirmed="yes">org.apache.abdera.protocol.Response$ResponseType.select(int)</inbound>
                <inbound type="feature" confirmed="yes">org.apache.abdera.protocol.Response$ResponseType.static {}</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.protocol.Response$ResponseType.Response$ResponseType(java.lang.String, int)</name>
                <outbound type="feature" confirmed="no">java.lang.Enum.Enum(java.lang.String, int)</outbound>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <inbound type="feature" confirmed="yes">org.apache.abdera.protocol.Response$ResponseType.static {}</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.protocol.Response$ResponseType.SERVER_ERROR</name>
                <inbound type="feature" confirmed="yes">org.apache.abdera.protocol.Response$ResponseType.select(int)</inbound>
                <inbound type="feature" confirmed="yes">org.apache.abdera.protocol.Response$ResponseType.static {}</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.protocol.Response$ResponseType.SUCCESS</name>
                <inbound type="feature" confirmed="yes">org.apache.abdera.protocol.Response$ResponseType.select(int)</inbound>
                <inbound type="feature" confirmed="yes">org.apache.abdera.protocol.Response$ResponseType.static {}</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.protocol.Response$ResponseType.UNKNOWN</name>
                <inbound type="feature" confirmed="yes">org.apache.abdera.protocol.Response$ResponseType.select(int)</inbound>
                <inbound type="feature" confirmed="yes">org.apache.abdera.protocol.Response$ResponseType.static {}</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.protocol.Response$ResponseType.select(int)</name>
                <outbound type="feature" confirmed="yes">org.apache.abdera.protocol.Response$ResponseType.CLIENT_ERROR</outbound>
                <outbound type="feature" confirmed="yes">org.apache.abdera.protocol.Response$ResponseType.REDIRECTION</outbound>
                <outbound type="feature" confirmed="yes">org.apache.abdera.protocol.Response$ResponseType.SERVER_ERROR</outbound>
                <outbound type="feature" confirmed="yes">org.apache.abdera.protocol.Response$ResponseType.SUCCESS</outbound>
                <outbound type="feature" confirmed="yes">org.apache.abdera.protocol.Response$ResponseType.UNKNOWN</outbound>
                <inbound type="feature" confirmed="yes">org.apache.abdera.protocol.util.AbstractResponse.getType()</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.protocol.Response$ResponseType.static {}</name>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="feature" confirmed="yes">org.apache.abdera.protocol.Response$ResponseType.$VALUES</outbound>
                <outbound type="feature" confirmed="yes">org.apache.abdera.protocol.Response$ResponseType.CLIENT_ERROR</outbound>
                <outbound type="feature" confirmed="yes">org.apache.abdera.protocol.Response$ResponseType.REDIRECTION</outbound>
                <outbound type="feature" confirmed="yes">org.apache.abdera.protocol.Response$ResponseType.Response$ResponseType(java.lang.String, int)</outbound>
                <outbound type="feature" confirmed="yes">org.apache.abdera.protocol.Response$ResponseType.SERVER_ERROR</outbound>
                <outbound type="feature" confirmed="yes">org.apache.abdera.protocol.Response$ResponseType.SUCCESS</outbound>
                <outbound type="feature" confirmed="yes">org.apache.abdera.protocol.Response$ResponseType.UNKNOWN</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.protocol.Response$ResponseType.valueOf(java.lang.String)</name>
                <outbound type="class" confirmed="no">java.lang.Class</outbound>
                <outbound type="class" confirmed="no">java.lang.Enum</outbound>
                <outbound type="feature" confirmed="no">java.lang.Enum.valueOf(java.lang.Class, java.lang.String)</outbound>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.protocol.Response$ResponseType.values()</name>
                <outbound type="class" confirmed="no">java.lang.Object</outbound>
                <outbound type="feature" confirmed="yes">org.apache.abdera.protocol.Response$ResponseType.$VALUES</outbound>
                <outbound type="class" confirmed="no">org.apache.abdera.protocol.Response$ResponseType[]</outbound>
                <outbound type="feature" confirmed="no">org.apache.abdera.protocol.Response$ResponseType[].clone()</outbound>
            </feature>
        </class>
        <class confirmed="no">
            <name>org.apache.abdera.protocol.Response$ResponseType[]</name>
            <inbound type="feature" confirmed="yes">org.apache.abdera.protocol.Response$ResponseType.values()</inbound>
            <feature confirmed="no">
                <name>org.apache.abdera.protocol.Response$ResponseType[].clone()</name>
                <inbound type="feature" confirmed="yes">org.apache.abdera.protocol.Response$ResponseType.values()</inbound>
            </feature>
        </class>
    </package>
    <package confirmed="yes">
        <name>org.apache.abdera.protocol.error</name>
        <class confirmed="yes">
            <name>org.apache.abdera.protocol.error.Error</name>
            <outbound type="class" confirmed="yes">org.apache.abdera.model.ExtensibleElementWrapper</outbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.protocol.error.ErrorExtensionFactory.ErrorExtensionFactory()</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.protocol.error.ProtocolException.ProtocolException(org.apache.abdera.Abdera, int, java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.protocol.error.ProtocolException.ProtocolException(org.apache.abdera.protocol.error.Error)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.protocol.error.ProtocolException.equals(java.lang.Object)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.protocol.error.ProtocolException.error</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.protocol.error.ProtocolException.getError()</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.protocol.error.ProtocolException.hashCode()</inbound>
            <feature confirmed="yes">
                <name>org.apache.abdera.protocol.error.Error.CODE</name>
                <outbound type="class" confirmed="no">javax.xml.namespace.QName</outbound>
                <inbound type="feature" confirmed="yes">org.apache.abdera.protocol.error.Error.create(org.apache.abdera.writer.StreamWriter, int, java.lang.String, java.lang.Throwable)</inbound>
                <inbound type="feature" confirmed="yes">org.apache.abdera.protocol.error.Error.getCode()</inbound>
                <inbound type="feature" confirmed="yes">org.apache.abdera.protocol.error.Error.setCode(int)</inbound>
                <inbound type="feature" confirmed="yes">org.apache.abdera.protocol.error.Error.static {}</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.protocol.error.Error.ERROR</name>
                <outbound type="class" confirmed="no">javax.xml.namespace.QName</outbound>
                <inbound type="feature" confirmed="yes">org.apache.abdera.protocol.error.Error.create(org.apache.abdera.Abdera, int, java.lang.String, java.lang.Throwable)</inbound>
                <inbound type="feature" confirmed="yes">org.apache.abdera.protocol.error.Error.create(org.apache.abdera.writer.StreamWriter, int, java.lang.String, java.lang.Throwable)</inbound>
                <inbound type="feature" confirmed="yes">org.apache.abdera.protocol.error.Error.static {}</inbound>
                <inbound type="feature" confirmed="yes">org.apache.abdera.protocol.error.ErrorExtensionFactory.ErrorExtensionFactory()</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.protocol.error.Error.Error(org.apache.abdera.factory.Factory, javax.xml.namespace.QName)</name>
                <outbound type="class" confirmed="no">javax.xml.namespace.QName</outbound>
                <outbound type="class" confirmed="yes">org.apache.abdera.factory.Factory</outbound>
                <outbound type="feature" confirmed="yes">org.apache.abdera.model.ExtensibleElementWrapper.ExtensibleElementWrapper(org.apache.abdera.factory.Factory, javax.xml.namespace.QName)</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.protocol.error.Error.Error(org.apache.abdera.model.Element)</name>
                <outbound type="class" confirmed="yes">org.apache.abdera.model.Element</outbound>
                <outbound type="feature" confirmed="yes">org.apache.abdera.model.ExtensibleElementWrapper.ExtensibleElementWrapper(org.apache.abdera.model.Element)</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.protocol.error.Error.MESSAGE</name>
                <outbound type="class" confirmed="no">javax.xml.namespace.QName</outbound>
                <inbound type="feature" confirmed="yes">org.apache.abdera.protocol.error.Error.create(org.apache.abdera.writer.StreamWriter, int, java.lang.String, java.lang.Throwable)</inbound>
                <inbound type="feature" confirmed="yes">org.apache.abdera.protocol.error.Error.getMessage()</inbound>
                <inbound type="feature" confirmed="yes">org.apache.abdera.protocol.error.Error.setMessage(java.lang.String)</inbound>
                <inbound type="feature" confirmed="yes">org.apache.abdera.protocol.error.Error.static {}</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.protocol.error.Error.NS</name>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
            </feature>
            <feature confirmed="no">
                <name>org.apache.abdera.protocol.error.Error.addSimpleExtension(javax.xml.namespace.QName, java.lang.String)</name>
                <inbound type="feature" confirmed="yes">org.apache.abdera.protocol.error.Error.setCode(int)</inbound>
                <inbound type="feature" confirmed="yes">org.apache.abdera.protocol.error.Error.setMessage(java.lang.String)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.protocol.error.Error.create(org.apache.abdera.Abdera, int, java.lang.String)</name>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="class" confirmed="no">java.lang.Throwable</outbound>
                <outbound type="class" confirmed="yes">org.apache.abdera.Abdera</outbound>
                <outbound type="feature" confirmed="yes">org.apache.abdera.protocol.error.Error.create(org.apache.abdera.Abdera, int, java.lang.String, java.lang.Throwable)</outbound>
                <inbound type="feature" confirmed="yes">org.apache.abdera.protocol.error.ProtocolException.ProtocolException(org.apache.abdera.Abdera, int, java.lang.String)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.protocol.error.Error.create(org.apache.abdera.Abdera, int, java.lang.String, java.lang.Throwable)</name>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="class" confirmed="no">java.lang.Throwable</outbound>
                <outbound type="class" confirmed="no">javax.xml.namespace.QName</outbound>
                <outbound type="class" confirmed="yes">org.apache.abdera.Abdera</outbound>
                <outbound type="feature" confirmed="yes">org.apache.abdera.Abdera.getFactory()</outbound>
                <outbound type="class" confirmed="yes">org.apache.abdera.factory.Factory</outbound>
                <outbound type="feature" confirmed="yes">org.apache.abdera.factory.Factory.newDocument()</outbound>
                <outbound type="feature" confirmed="yes">org.apache.abdera.factory.Factory.newElement(javax.xml.namespace.QName, org.apache.abdera.model.Base)</outbound>
                <outbound type="class" confirmed="yes">org.apache.abdera.model.Base</outbound>
                <outbound type="class" confirmed="yes">org.apache.abdera.model.Document</outbound>
                <outbound type="class" confirmed="yes">org.apache.abdera.model.Element</outbound>
                <outbound type="feature" confirmed="yes">org.apache.abdera.protocol.error.Error.ERROR</outbound>
                <outbound type="feature" confirmed="yes">org.apache.abdera.protocol.error.Error.setCode(int)</outbound>
                <outbound type="feature" confirmed="yes">org.apache.abdera.protocol.error.Error.setMessage(java.lang.String)</outbound>
                <inbound type="feature" confirmed="yes">org.apache.abdera.protocol.error.Error.create(org.apache.abdera.Abdera, int, java.lang.String)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.protocol.error.Error.create(org.apache.abdera.writer.StreamWriter, int, java.lang.String, java.lang.Throwable)</name>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="class" confirmed="no">java.lang.Throwable</outbound>
                <outbound type="class" confirmed="no">javax.xml.namespace.QName</outbound>
                <outbound type="feature" confirmed="yes">org.apache.abdera.protocol.error.Error.CODE</outbound>
                <outbound type="feature" confirmed="yes">org.apache.abdera.protocol.error.Error.ERROR</outbound>
                <outbound type="feature" confirmed="yes">org.apache.abdera.protocol.error.Error.MESSAGE</outbound>
                <outbound type="class" confirmed="yes">org.apache.abdera.writer.StreamWriter</outbound>
                <outbound type="feature" confirmed="yes">org.apache.abdera.writer.StreamWriter.endDocument()</outbound>
                <outbound type="feature" confirmed="yes">org.apache.abdera.writer.StreamWriter.endElement()</outbound>
                <outbound type="feature" confirmed="yes">org.apache.abdera.writer.StreamWriter.startDocument()</outbound>
                <outbound type="feature" confirmed="yes">org.apache.abdera.writer.StreamWriter.startElement(javax.xml.namespace.QName)</outbound>
                <outbound type="feature" confirmed="yes">org.apache.abdera.writer.StreamWriter.writeElementText(int)</outbound>
                <outbound type="feature" confirmed="yes">org.apache.abdera.writer.StreamWriter.writeElementText(java.lang.String)</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.protocol.error.Error.getCode()</name>
                <outbound type="feature" confirmed="no">java.lang.Integer.parseInt(java.lang.String)</outbound>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="class" confirmed="no">javax.xml.namespace.QName</outbound>
                <outbound type="feature" confirmed="yes">org.apache.abdera.protocol.error.Error.CODE</outbound>
                <outbound type="feature" confirmed="no">org.apache.abdera.protocol.error.Error.getSimpleExtension(javax.xml.namespace.QName)</outbound>
                <inbound type="feature" confirmed="yes">org.apache.abdera.protocol.error.ProtocolException.ProtocolException(org.apache.abdera.protocol.error.Error)</inbound>
                <inbound type="feature" confirmed="yes">org.apache.abdera.protocol.error.ProtocolException.equals(java.lang.Object)</inbound>
                <inbound type="feature" confirmed="yes">org.apache.abdera.protocol.error.ProtocolException.hashCode()</inbound>
            </feature>
            <feature confirmed="no">
                <name>org.apache.abdera.protocol.error.Error.getExtension(javax.xml.namespace.QName)</name>
                <inbound type="feature" confirmed="yes">org.apache.abdera.protocol.error.Error.setCode(int)</inbound>
                <inbound type="feature" confirmed="yes">org.apache.abdera.protocol.error.Error.setMessage(java.lang.String)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.protocol.error.Error.getMessage()</name>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="class" confirmed="no">javax.xml.namespace.QName</outbound>
                <outbound type="feature" confirmed="yes">org.apache.abdera.protocol.error.Error.MESSAGE</outbound>
                <outbound type="feature" confirmed="no">org.apache.abdera.protocol.error.Error.getSimpleExtension(javax.xml.namespace.QName)</outbound>
                <inbound type="feature" confirmed="yes">org.apache.abdera.protocol.error.ProtocolException.ProtocolException(org.apache.abdera.protocol.error.Error)</inbound>
                <inbound type="feature" confirmed="yes">org.apache.abdera.protocol.error.ProtocolException.equals(java.lang.Object)</inbound>
                <inbound type="feature" confirmed="yes">org.apache.abdera.protocol.error.ProtocolException.hashCode()</inbound>
            </feature>
            <feature confirmed="no">
                <name>org.apache.abdera.protocol.error.Error.getSimpleExtension(javax.xml.namespace.QName)</name>
                <inbound type="feature" confirmed="yes">org.apache.abdera.protocol.error.Error.getCode()</inbound>
                <inbound type="feature" confirmed="yes">org.apache.abdera.protocol.error.Error.getMessage()</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.protocol.error.Error.setCode(int)</name>
                <outbound type="feature" confirmed="no">java.lang.Integer.toString(int)</outbound>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="class" confirmed="no">javax.xml.namespace.QName</outbound>
                <outbound type="class" confirmed="yes">org.apache.abdera.model.Element</outbound>
                <outbound type="feature" confirmed="yes">org.apache.abdera.model.Element.discard()</outbound>
                <outbound type="feature" confirmed="yes">org.apache.abdera.model.Element.setText(java.lang.String)</outbound>
                <outbound type="feature" confirmed="yes">org.apache.abdera.protocol.error.Error.CODE</outbound>
                <outbound type="feature" confirmed="no">org.apache.abdera.protocol.error.Error.addSimpleExtension(javax.xml.namespace.QName, java.lang.String)</outbound>
                <outbound type="feature" confirmed="no">org.apache.abdera.protocol.error.Error.getExtension(javax.xml.namespace.QName)</outbound>
                <inbound type="feature" confirmed="yes">org.apache.abdera.protocol.error.Error.create(org.apache.abdera.Abdera, int, java.lang.String, java.lang.Throwable)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.protocol.error.Error.setMessage(java.lang.String)</name>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="class" confirmed="no">javax.xml.namespace.QName</outbound>
                <outbound type="class" confirmed="yes">org.apache.abdera.model.Element</outbound>
                <outbound type="feature" confirmed="yes">org.apache.abdera.model.Element.discard()</outbound>
                <outbound type="feature" confirmed="yes">org.apache.abdera.model.Element.setText(java.lang.String)</outbound>
                <outbound type="feature" confirmed="yes">org.apache.abdera.protocol.error.Error.MESSAGE</outbound>
                <outbound type="feature" confirmed="no">org.apache.abdera.protocol.error.Error.addSimpleExtension(javax.xml.namespace.QName, java.lang.String)</outbound>
                <outbound type="feature" confirmed="no">org.apache.abdera.protocol.error.Error.getExtension(javax.xml.namespace.QName)</outbound>
                <inbound type="feature" confirmed="yes">org.apache.abdera.protocol.error.Error.create(org.apache.abdera.Abdera, int, java.lang.String, java.lang.Throwable)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.protocol.error.Error.static {}</name>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="class" confirmed="no">javax.xml.namespace.QName</outbound>
                <outbound type="feature" confirmed="no">javax.xml.namespace.QName.QName(java.lang.String, java.lang.String)</outbound>
                <outbound type="feature" confirmed="yes">org.apache.abdera.protocol.error.Error.CODE</outbound>
                <outbound type="feature" confirmed="yes">org.apache.abdera.protocol.error.Error.ERROR</outbound>
                <outbound type="feature" confirmed="yes">org.apache.abdera.protocol.error.Error.MESSAGE</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.protocol.error.Error.throwException()</name>
                <outbound type="feature" confirmed="yes">org.apache.abdera.protocol.error.ProtocolException.ProtocolException(org.apache.abdera.protocol.error.Error)</outbound>
            </feature>
        </class>
        <class confirmed="yes">
            <name>org.apache.abdera.protocol.error.ErrorExtensionFactory</name>
            <outbound type="class" confirmed="yes">org.apache.abdera.util.AbstractExtensionFactory</outbound>
            <feature confirmed="yes">
                <name>org.apache.abdera.protocol.error.ErrorExtensionFactory.ErrorExtensionFactory()</name>
                <outbound type="class" confirmed="no">java.lang.Class</outbound>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="class" confirmed="no">javax.xml.namespace.QName</outbound>
                <outbound type="class" confirmed="yes">org.apache.abdera.protocol.error.Error</outbound>
                <outbound type="feature" confirmed="yes">org.apache.abdera.protocol.error.Error.ERROR</outbound>
                <outbound type="feature" confirmed="no">org.apache.abdera.protocol.error.ErrorExtensionFactory.addImpl(javax.xml.namespace.QName, java.lang.Class)</outbound>
                <outbound type="class" confirmed="yes">org.apache.abdera.util.AbstractExtensionFactory</outbound>
                <outbound type="feature" confirmed="yes">org.apache.abdera.util.AbstractExtensionFactory.AbstractExtensionFactory(java.lang.String[])</outbound>
            </feature>
            <feature confirmed="no">
                <name>org.apache.abdera.protocol.error.ErrorExtensionFactory.addImpl(javax.xml.namespace.QName, java.lang.Class)</name>
                <inbound type="feature" confirmed="yes">org.apache.abdera.protocol.error.ErrorExtensionFactory.ErrorExtensionFactory()</inbound>
            </feature>
        </class>
        <class confirmed="yes">
            <name>org.apache.abdera.protocol.error.ProtocolException</name>
            <outbound type="class" confirmed="no">java.lang.RuntimeException</outbound>
            <feature confirmed="yes">
                <name>org.apache.abdera.protocol.error.ProtocolException.ProtocolException(org.apache.abdera.Abdera, int, java.lang.String)</name>
                <outbound type="feature" confirmed="no">java.lang.RuntimeException.RuntimeException(java.lang.String)</outbound>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="class" confirmed="no">java.lang.StringBuilder</outbound>
                <outbound type="feature" confirmed="no">java.lang.StringBuilder.StringBuilder()</outbound>
                <outbound type="feature" confirmed="no">java.lang.StringBuilder.append(int)</outbound>
                <outbound type="feature" confirmed="no">java.lang.StringBuilder.append(java.lang.String)</outbound>
                <outbound type="feature" confirmed="no">java.lang.StringBuilder.toString()</outbound>
                <outbound type="class" confirmed="yes">org.apache.abdera.Abdera</outbound>
                <outbound type="class" confirmed="yes">org.apache.abdera.protocol.error.Error</outbound>
                <outbound type="feature" confirmed="yes">org.apache.abdera.protocol.error.Error.create(org.apache.abdera.Abdera, int, java.lang.String)</outbound>
                <outbound type="feature" confirmed="yes">org.apache.abdera.protocol.error.ProtocolException.error</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.protocol.error.ProtocolException.ProtocolException(org.apache.abdera.protocol.error.Error)</name>
                <outbound type="feature" confirmed="no">java.lang.RuntimeException.RuntimeException(java.lang.String)</outbound>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="class" confirmed="no">java.lang.StringBuilder</outbound>
                <outbound type="feature" confirmed="no">java.lang.StringBuilder.StringBuilder()</outbound>
                <outbound type="feature" confirmed="no">java.lang.StringBuilder.append(int)</outbound>
                <outbound type="feature" confirmed="no">java.lang.StringBuilder.append(java.lang.String)</outbound>
                <outbound type="feature" confirmed="no">java.lang.StringBuilder.toString()</outbound>
                <outbound type="class" confirmed="yes">org.apache.abdera.protocol.error.Error</outbound>
                <outbound type="feature" confirmed="yes">org.apache.abdera.protocol.error.Error.getCode()</outbound>
                <outbound type="feature" confirmed="yes">org.apache.abdera.protocol.error.Error.getMessage()</outbound>
                <outbound type="feature" confirmed="yes">org.apache.abdera.protocol.error.ProtocolException.error</outbound>
                <inbound type="feature" confirmed="yes">org.apache.abdera.protocol.error.Error.throwException()</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.protocol.error.ProtocolException.equals(java.lang.Object)</name>
                <outbound type="class" confirmed="no">java.lang.Class</outbound>
                <outbound type="class" confirmed="no">java.lang.Object</outbound>
                <outbound type="feature" confirmed="no">java.lang.Object.getClass()</outbound>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="feature" confirmed="no">java.lang.String.equals(java.lang.Object)</outbound>
                <outbound type="class" confirmed="yes">org.apache.abdera.protocol.error.Error</outbound>
                <outbound type="feature" confirmed="yes">org.apache.abdera.protocol.error.Error.getCode()</outbound>
                <outbound type="feature" confirmed="yes">org.apache.abdera.protocol.error.Error.getMessage()</outbound>
                <outbound type="feature" confirmed="yes">org.apache.abdera.protocol.error.ProtocolException.error</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.protocol.error.ProtocolException.error</name>
                <outbound type="class" confirmed="yes">org.apache.abdera.protocol.error.Error</outbound>
                <inbound type="feature" confirmed="yes">org.apache.abdera.protocol.error.ProtocolException.ProtocolException(org.apache.abdera.Abdera, int, java.lang.String)</inbound>
                <inbound type="feature" confirmed="yes">org.apache.abdera.protocol.error.ProtocolException.ProtocolException(org.apache.abdera.protocol.error.Error)</inbound>
                <inbound type="feature" confirmed="yes">org.apache.abdera.protocol.error.ProtocolException.equals(java.lang.Object)</inbound>
                <inbound type="feature" confirmed="yes">org.apache.abdera.protocol.error.ProtocolException.getError()</inbound>
                <inbound type="feature" confirmed="yes">org.apache.abdera.protocol.error.ProtocolException.hashCode()</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.protocol.error.ProtocolException.getError()</name>
                <outbound type="class" confirmed="yes">org.apache.abdera.protocol.error.Error</outbound>
                <outbound type="feature" confirmed="yes">org.apache.abdera.protocol.error.ProtocolException.error</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.protocol.error.ProtocolException.hashCode()</name>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="feature" confirmed="no">java.lang.String.hashCode()</outbound>
                <outbound type="class" confirmed="yes">org.apache.abdera.protocol.error.Error</outbound>
                <outbound type="feature" confirmed="yes">org.apache.abdera.protocol.error.Error.getCode()</outbound>
                <outbound type="feature" confirmed="yes">org.apache.abdera.protocol.error.Error.getMessage()</outbound>
                <outbound type="feature" confirmed="yes">org.apache.abdera.protocol.error.ProtocolException.error</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.protocol.error.ProtocolException.serialVersionUID</name>
            </feature>
        </class>
    </package>
    <package confirmed="yes">
        <name>org.apache.abdera.protocol.util</name>
        <class confirmed="yes">
            <name>org.apache.abdera.protocol.util.AbstractEntityProvider</name>
            <outbound type="class" confirmed="no">java.lang.Object</outbound>
            <outbound type="class" confirmed="yes">org.apache.abdera.protocol.EntityProvider</outbound>
            <feature confirmed="yes">
                <name>org.apache.abdera.protocol.util.AbstractEntityProvider.AbstractEntityProvider()</name>
                <outbound type="feature" confirmed="no">java.lang.Object.Object()</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.protocol.util.AbstractEntityProvider.getContentType()</name>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.protocol.util.AbstractEntityProvider.getEntityTag()</name>
                <outbound type="class" confirmed="yes">org.apache.abdera.util.EntityTag</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.protocol.util.AbstractEntityProvider.getLastModified()</name>
                <outbound type="class" confirmed="no">java.util.Date</outbound>
            </feature>
        </class>
        <class confirmed="yes">
            <name>org.apache.abdera.protocol.util.AbstractItemManager</name>
            <outbound type="class" confirmed="yes">org.apache.abdera.protocol.ItemManager</outbound>
            <outbound type="class" confirmed="yes">org.apache.abdera.protocol.util.PoolManager</outbound>
            <feature confirmed="yes">
                <name>org.apache.abdera.protocol.util.AbstractItemManager.AbstractItemManager()</name>
                <outbound type="feature" confirmed="yes">org.apache.abdera.protocol.util.PoolManager.PoolManager()</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.protocol.util.AbstractItemManager.AbstractItemManager(int)</name>
                <outbound type="feature" confirmed="yes">org.apache.abdera.protocol.util.PoolManager.PoolManager(int)</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.protocol.util.AbstractItemManager.get(org.apache.abdera.protocol.Request)</name>
                <outbound type="class" confirmed="no">java.lang.Object</outbound>
                <outbound type="class" confirmed="yes">org.apache.abdera.protocol.Request</outbound>
                <outbound type="feature" confirmed="no">org.apache.abdera.protocol.util.AbstractItemManager.getInstance()</outbound>
            </feature>
            <feature confirmed="no">
                <name>org.apache.abdera.protocol.util.AbstractItemManager.getInstance()</name>
                <inbound type="feature" confirmed="yes">org.apache.abdera.protocol.util.AbstractItemManager.get(org.apache.abdera.protocol.Request)</inbound>
            </feature>
        </class>
        <class confirmed="yes">
            <name>org.apache.abdera.protocol.util.AbstractMessage</name>
            <outbound type="class" confirmed="no">java.lang.Object</outbound>
            <outbound type="class" confirmed="yes">org.apache.abdera.protocol.Message</outbound>
            <inbound type="class" confirmed="yes">org.apache.abdera.protocol.util.AbstractRequest</inbound>
            <inbound type="class" confirmed="yes">org.apache.abdera.protocol.util.AbstractResponse</inbound>
            <feature confirmed="yes">
                <name>org.apache.abdera.protocol.util.AbstractMessage.AbstractMessage()</name>
                <outbound type="feature" confirmed="no">java.lang.Object.Object()</outbound>
                <outbound type="feature" confirmed="yes">org.apache.abdera.protocol.util.AbstractMessage.flags</outbound>
                <outbound type="feature" confirmed="yes">org.apache.abdera.protocol.util.AbstractMessage.max_age</outbound>
                <inbound type="feature" confirmed="yes">org.apache.abdera.protocol.util.AbstractRequest.AbstractRequest()</inbound>
                <inbound type="feature" confirmed="yes">org.apache.abdera.protocol.util.AbstractResponse.AbstractResponse()</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.protocol.util.AbstractMessage.check(int)</name>
                <outbound type="feature" confirmed="yes">org.apache.abdera.protocol.util.AbstractMessage.flags</outbound>
                <inbound type="feature" confirmed="yes">org.apache.abdera.protocol.util.AbstractMessage.isNoCache()</inbound>
                <inbound type="feature" confirmed="yes">org.apache.abdera.protocol.util.AbstractMessage.isNoStore()</inbound>
                <inbound type="feature" confirmed="yes">org.apache.abdera.protocol.util.AbstractMessage.isNoTransform()</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.protocol.util.AbstractMessage.flags</name>
                <inbound type="feature" confirmed="yes">org.apache.abdera.protocol.util.AbstractMessage.AbstractMessage()</inbound>
                <inbound type="feature" confirmed="yes">org.apache.abdera.protocol.util.AbstractMessage.check(int)</inbound>
                <inbound type="feature" confirmed="yes">org.apache.abdera.protocol.util.AbstractMessage.toggle(boolean, int)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.protocol.util.AbstractMessage.getCacheControl()</name>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="feature" confirmed="no">org.apache.abdera.protocol.util.AbstractMessage.getHeader(java.lang.String)</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.protocol.util.AbstractMessage.getContentLanguage()</name>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="feature" confirmed="no">org.apache.abdera.protocol.util.AbstractMessage.getHeader(java.lang.String)</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.protocol.util.AbstractMessage.getContentLocation()</name>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="class" confirmed="no">org.apache.abdera.i18n.iri.IRI</outbound>
                <outbound type="feature" confirmed="no">org.apache.abdera.i18n.iri.IRI.IRI(java.lang.String)</outbound>
                <outbound type="feature" confirmed="no">org.apache.abdera.protocol.util.AbstractMessage.getHeader(java.lang.String)</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.protocol.util.AbstractMessage.getContentType()</name>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="class" confirmed="no">javax.activation.MimeType</outbound>
                <outbound type="feature" confirmed="no">javax.activation.MimeType.MimeType(java.lang.String)</outbound>
                <outbound type="class" confirmed="no">javax.activation.MimeTypeParseException</outbound>
                <outbound type="feature" confirmed="no">org.apache.abdera.protocol.util.AbstractMessage.getHeader(java.lang.String)</outbound>
                <outbound type="feature" confirmed="yes">org.apache.abdera.util.MimeTypeParseException.MimeTypeParseException(javax.activation.MimeTypeParseException)</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.protocol.util.AbstractMessage.getDecodedHeader(java.lang.String)</name>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="feature" confirmed="no">org.apache.abdera.i18n.text.Rfc2047Helper.decode(java.lang.String)</outbound>
                <outbound type="feature" confirmed="no">org.apache.abdera.i18n.text.UrlEncoding.decode(java.lang.String)</outbound>
                <outbound type="feature" confirmed="no">org.apache.abdera.protocol.util.AbstractMessage.getHeader(java.lang.String)</outbound>
                <inbound type="feature" confirmed="yes">org.apache.abdera.protocol.util.AbstractMessage.getSlug()</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.protocol.util.AbstractMessage.getDecodedHeaders(java.lang.String)</name>
                <outbound type="class" confirmed="no">java.lang.Object</outbound>
                <outbound type="feature" confirmed="no">java.lang.Object.toString()</outbound>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="class" confirmed="no">java.lang.String[]</outbound>
                <outbound type="feature" confirmed="no">org.apache.abdera.i18n.text.Rfc2047Helper.decode(java.lang.String)</outbound>
                <outbound type="feature" confirmed="no">org.apache.abdera.i18n.text.UrlEncoding.decode(java.lang.String)</outbound>
                <outbound type="feature" confirmed="no">org.apache.abdera.protocol.util.AbstractMessage.getHeaders(java.lang.String)</outbound>
            </feature>
            <feature confirmed="no">
                <name>org.apache.abdera.protocol.util.AbstractMessage.getHeader(java.lang.String)</name>
                <inbound type="feature" confirmed="yes">org.apache.abdera.protocol.util.AbstractMessage.getCacheControl()</inbound>
                <inbound type="feature" confirmed="yes">org.apache.abdera.protocol.util.AbstractMessage.getContentLanguage()</inbound>
                <inbound type="feature" confirmed="yes">org.apache.abdera.protocol.util.AbstractMessage.getContentLocation()</inbound>
                <inbound type="feature" confirmed="yes">org.apache.abdera.protocol.util.AbstractMessage.getContentType()</inbound>
                <inbound type="feature" confirmed="yes">org.apache.abdera.protocol.util.AbstractMessage.getDecodedHeader(java.lang.String)</inbound>
            </feature>
            <feature confirmed="no">
                <name>org.apache.abdera.protocol.util.AbstractMessage.getHeaders(java.lang.String)</name>
                <inbound type="feature" confirmed="yes">org.apache.abdera.protocol.util.AbstractMessage.getDecodedHeaders(java.lang.String)</inbound>
                <inbound type="feature" confirmed="yes">org.apache.abdera.protocol.util.AbstractMessage.isNoCache()</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.protocol.util.AbstractMessage.getMaxAge()</name>
                <outbound type="feature" confirmed="yes">org.apache.abdera.protocol.util.AbstractMessage.max_age</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.protocol.util.AbstractMessage.getSlug()</name>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="feature" confirmed="yes">org.apache.abdera.protocol.util.AbstractMessage.getDecodedHeader(java.lang.String)</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.protocol.util.AbstractMessage.isNoCache()</name>
                <outbound type="class" confirmed="no">java.lang.Object</outbound>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="feature" confirmed="no">java.lang.String.equalsIgnoreCase(java.lang.String)</outbound>
                <outbound type="feature" confirmed="yes">org.apache.abdera.protocol.util.AbstractMessage.check(int)</outbound>
                <outbound type="feature" confirmed="no">org.apache.abdera.protocol.util.AbstractMessage.getHeaders(java.lang.String)</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.protocol.util.AbstractMessage.isNoStore()</name>
                <outbound type="feature" confirmed="yes">org.apache.abdera.protocol.util.AbstractMessage.check(int)</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.protocol.util.AbstractMessage.isNoTransform()</name>
                <outbound type="feature" confirmed="yes">org.apache.abdera.protocol.util.AbstractMessage.check(int)</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.protocol.util.AbstractMessage.max_age</name>
                <inbound type="feature" confirmed="yes">org.apache.abdera.protocol.util.AbstractMessage.AbstractMessage()</inbound>
                <inbound type="feature" confirmed="yes">org.apache.abdera.protocol.util.AbstractMessage.getMaxAge()</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.protocol.util.AbstractMessage.toggle(boolean, int)</name>
                <outbound type="feature" confirmed="yes">org.apache.abdera.protocol.util.AbstractMessage.flags</outbound>
            </feature>
        </class>
        <class confirmed="yes">
            <name>org.apache.abdera.protocol.util.AbstractRequest</name>
            <outbound type="class" confirmed="yes">org.apache.abdera.protocol.Request</outbound>
            <outbound type="class" confirmed="yes">org.apache.abdera.protocol.util.AbstractMessage</outbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.protocol.util.CacheControlUtil.buildCacheControl(org.apache.abdera.protocol.util.AbstractRequest)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.protocol.util.CacheControlUtil.parseCacheControl(java.lang.String, org.apache.abdera.protocol.util.AbstractRequest)</inbound>
            <feature confirmed="yes">
                <name>org.apache.abdera.protocol.util.AbstractRequest.AbstractRequest()</name>
                <outbound type="feature" confirmed="yes">org.apache.abdera.protocol.util.AbstractMessage.AbstractMessage()</outbound>
                <outbound type="feature" confirmed="yes">org.apache.abdera.protocol.util.AbstractRequest.max_stale</outbound>
                <outbound type="feature" confirmed="yes">org.apache.abdera.protocol.util.AbstractRequest.min_fresh</outbound>
            </feature>
            <feature confirmed="no">
                <name>org.apache.abdera.protocol.util.AbstractRequest.check(int)</name>
                <inbound type="feature" confirmed="yes">org.apache.abdera.protocol.util.AbstractRequest.isOnlyIfCached()</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.protocol.util.AbstractRequest.getAccept()</name>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="feature" confirmed="no">org.apache.abdera.protocol.util.AbstractRequest.getHeader(java.lang.String)</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.protocol.util.AbstractRequest.getAcceptCharset()</name>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="feature" confirmed="no">org.apache.abdera.protocol.util.AbstractRequest.getHeader(java.lang.String)</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.protocol.util.AbstractRequest.getAcceptEncoding()</name>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="feature" confirmed="no">org.apache.abdera.protocol.util.AbstractRequest.getHeader(java.lang.String)</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.protocol.util.AbstractRequest.getAcceptLanguage()</name>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="feature" confirmed="no">org.apache.abdera.protocol.util.AbstractRequest.getHeader(java.lang.String)</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.protocol.util.AbstractRequest.getAuthorization()</name>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="feature" confirmed="no">org.apache.abdera.protocol.util.AbstractRequest.getHeader(java.lang.String)</outbound>
            </feature>
            <feature confirmed="no">
                <name>org.apache.abdera.protocol.util.AbstractRequest.getDateHeader(java.lang.String)</name>
                <inbound type="feature" confirmed="yes">org.apache.abdera.protocol.util.AbstractRequest.getIfModifiedSince()</inbound>
                <inbound type="feature" confirmed="yes">org.apache.abdera.protocol.util.AbstractRequest.getIfUnmodifiedSince()</inbound>
            </feature>
            <feature confirmed="no">
                <name>org.apache.abdera.protocol.util.AbstractRequest.getHeader(java.lang.String)</name>
                <inbound type="feature" confirmed="yes">org.apache.abdera.protocol.util.AbstractRequest.getAccept()</inbound>
                <inbound type="feature" confirmed="yes">org.apache.abdera.protocol.util.AbstractRequest.getAcceptCharset()</inbound>
                <inbound type="feature" confirmed="yes">org.apache.abdera.protocol.util.AbstractRequest.getAcceptEncoding()</inbound>
                <inbound type="feature" confirmed="yes">org.apache.abdera.protocol.util.AbstractRequest.getAcceptLanguage()</inbound>
                <inbound type="feature" confirmed="yes">org.apache.abdera.protocol.util.AbstractRequest.getAuthorization()</inbound>
                <inbound type="feature" confirmed="yes">org.apache.abdera.protocol.util.AbstractRequest.getIfMatch()</inbound>
                <inbound type="feature" confirmed="yes">org.apache.abdera.protocol.util.AbstractRequest.getIfNoneMatch()</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.protocol.util.AbstractRequest.getIfMatch()</name>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="feature" confirmed="no">org.apache.abdera.protocol.util.AbstractRequest.getHeader(java.lang.String)</outbound>
                <outbound type="class" confirmed="yes">org.apache.abdera.util.EntityTag</outbound>
                <outbound type="feature" confirmed="yes">org.apache.abdera.util.EntityTag.parseTags(java.lang.String)</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.protocol.util.AbstractRequest.getIfModifiedSince()</name>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="class" confirmed="no">java.util.Date</outbound>
                <outbound type="feature" confirmed="no">org.apache.abdera.protocol.util.AbstractRequest.getDateHeader(java.lang.String)</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.protocol.util.AbstractRequest.getIfNoneMatch()</name>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="feature" confirmed="no">org.apache.abdera.protocol.util.AbstractRequest.getHeader(java.lang.String)</outbound>
                <outbound type="class" confirmed="yes">org.apache.abdera.util.EntityTag</outbound>
                <outbound type="feature" confirmed="yes">org.apache.abdera.util.EntityTag.parseTags(java.lang.String)</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.protocol.util.AbstractRequest.getIfUnmodifiedSince()</name>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="class" confirmed="no">java.util.Date</outbound>
                <outbound type="feature" confirmed="no">org.apache.abdera.protocol.util.AbstractRequest.getDateHeader(java.lang.String)</outbound>
            </feature>
            <feature confirmed="no">
                <name>org.apache.abdera.protocol.util.AbstractRequest.getMaxAge()</name>
                <inbound type="feature" confirmed="yes">org.apache.abdera.protocol.util.CacheControlUtil.buildCacheControl(org.apache.abdera.protocol.util.AbstractRequest)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.protocol.util.AbstractRequest.getMaxStale()</name>
                <outbound type="feature" confirmed="yes">org.apache.abdera.protocol.util.AbstractRequest.max_stale</outbound>
                <inbound type="feature" confirmed="yes">org.apache.abdera.protocol.util.CacheControlUtil.buildCacheControl(org.apache.abdera.protocol.util.AbstractRequest)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.protocol.util.AbstractRequest.getMinFresh()</name>
                <outbound type="feature" confirmed="yes">org.apache.abdera.protocol.util.AbstractRequest.min_fresh</outbound>
                <inbound type="feature" confirmed="yes">org.apache.abdera.protocol.util.CacheControlUtil.buildCacheControl(org.apache.abdera.protocol.util.AbstractRequest)</inbound>
            </feature>
            <feature confirmed="no">
                <name>org.apache.abdera.protocol.util.AbstractRequest.isNoCache()</name>
                <inbound type="feature" confirmed="yes">org.apache.abdera.protocol.util.CacheControlUtil.buildCacheControl(org.apache.abdera.protocol.util.AbstractRequest)</inbound>
            </feature>
            <feature confirmed="no">
                <name>org.apache.abdera.protocol.util.AbstractRequest.isNoStore()</name>
                <inbound type="feature" confirmed="yes">org.apache.abdera.protocol.util.CacheControlUtil.buildCacheControl(org.apache.abdera.protocol.util.AbstractRequest)</inbound>
            </feature>
            <feature confirmed="no">
                <name>org.apache.abdera.protocol.util.AbstractRequest.isNoTransform()</name>
                <inbound type="feature" confirmed="yes">org.apache.abdera.protocol.util.CacheControlUtil.buildCacheControl(org.apache.abdera.protocol.util.AbstractRequest)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.protocol.util.AbstractRequest.isOnlyIfCached()</name>
                <outbound type="feature" confirmed="no">org.apache.abdera.protocol.util.AbstractRequest.check(int)</outbound>
                <inbound type="feature" confirmed="yes">org.apache.abdera.protocol.util.CacheControlUtil.buildCacheControl(org.apache.abdera.protocol.util.AbstractRequest)</inbound>
            </feature>
            <feature confirmed="no">
                <name>org.apache.abdera.protocol.util.AbstractRequest.max_age</name>
                <inbound type="feature" confirmed="yes">org.apache.abdera.protocol.util.AbstractRequest.setMaxAge(long)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.protocol.util.AbstractRequest.max_stale</name>
                <inbound type="feature" confirmed="yes">org.apache.abdera.protocol.util.AbstractRequest.AbstractRequest()</inbound>
                <inbound type="feature" confirmed="yes">org.apache.abdera.protocol.util.AbstractRequest.getMaxStale()</inbound>
                <inbound type="feature" confirmed="yes">org.apache.abdera.protocol.util.AbstractRequest.setMaxStale(long)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.protocol.util.AbstractRequest.min_fresh</name>
                <inbound type="feature" confirmed="yes">org.apache.abdera.protocol.util.AbstractRequest.AbstractRequest()</inbound>
                <inbound type="feature" confirmed="yes">org.apache.abdera.protocol.util.AbstractRequest.getMinFresh()</inbound>
                <inbound type="feature" confirmed="yes">org.apache.abdera.protocol.util.AbstractRequest.setMinFresh(long)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.protocol.util.AbstractRequest.setMaxAge(long)</name>
                <outbound type="feature" confirmed="no">org.apache.abdera.protocol.util.AbstractRequest.max_age</outbound>
                <inbound type="feature" confirmed="yes">org.apache.abdera.protocol.util.CacheControlUtil.parseCacheControl(java.lang.String, org.apache.abdera.protocol.util.AbstractRequest)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.protocol.util.AbstractRequest.setMaxStale(long)</name>
                <outbound type="feature" confirmed="yes">org.apache.abdera.protocol.util.AbstractRequest.max_stale</outbound>
                <inbound type="feature" confirmed="yes">org.apache.abdera.protocol.util.CacheControlUtil.parseCacheControl(java.lang.String, org.apache.abdera.protocol.util.AbstractRequest)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.protocol.util.AbstractRequest.setMinFresh(long)</name>
                <outbound type="feature" confirmed="yes">org.apache.abdera.protocol.util.AbstractRequest.min_fresh</outbound>
                <inbound type="feature" confirmed="yes">org.apache.abdera.protocol.util.CacheControlUtil.parseCacheControl(java.lang.String, org.apache.abdera.protocol.util.AbstractRequest)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.protocol.util.AbstractRequest.setNoCache(boolean)</name>
                <outbound type="feature" confirmed="no">org.apache.abdera.protocol.util.AbstractRequest.toggle(boolean, int)</outbound>
                <inbound type="feature" confirmed="yes">org.apache.abdera.protocol.util.CacheControlUtil.parseCacheControl(java.lang.String, org.apache.abdera.protocol.util.AbstractRequest)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.protocol.util.AbstractRequest.setNoStore(boolean)</name>
                <outbound type="feature" confirmed="no">org.apache.abdera.protocol.util.AbstractRequest.toggle(boolean, int)</outbound>
                <inbound type="feature" confirmed="yes">org.apache.abdera.protocol.util.CacheControlUtil.parseCacheControl(java.lang.String, org.apache.abdera.protocol.util.AbstractRequest)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.protocol.util.AbstractRequest.setNoTransform(boolean)</name>
                <outbound type="feature" confirmed="no">org.apache.abdera.protocol.util.AbstractRequest.toggle(boolean, int)</outbound>
                <inbound type="feature" confirmed="yes">org.apache.abdera.protocol.util.CacheControlUtil.parseCacheControl(java.lang.String, org.apache.abdera.protocol.util.AbstractRequest)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.protocol.util.AbstractRequest.setOnlyIfCached(boolean)</name>
                <outbound type="feature" confirmed="no">org.apache.abdera.protocol.util.AbstractRequest.toggle(boolean, int)</outbound>
                <inbound type="feature" confirmed="yes">org.apache.abdera.protocol.util.CacheControlUtil.parseCacheControl(java.lang.String, org.apache.abdera.protocol.util.AbstractRequest)</inbound>
            </feature>
            <feature confirmed="no">
                <name>org.apache.abdera.protocol.util.AbstractRequest.toggle(boolean, int)</name>
                <inbound type="feature" confirmed="yes">org.apache.abdera.protocol.util.AbstractRequest.setNoCache(boolean)</inbound>
                <inbound type="feature" confirmed="yes">org.apache.abdera.protocol.util.AbstractRequest.setNoStore(boolean)</inbound>
                <inbound type="feature" confirmed="yes">org.apache.abdera.protocol.util.AbstractRequest.setNoTransform(boolean)</inbound>
                <inbound type="feature" confirmed="yes">org.apache.abdera.protocol.util.AbstractRequest.setOnlyIfCached(boolean)</inbound>
            </feature>
        </class>
        <class confirmed="yes">
            <name>org.apache.abdera.protocol.util.AbstractResponse</name>
            <outbound type="class" confirmed="yes">org.apache.abdera.protocol.Response</outbound>
            <outbound type="class" confirmed="yes">org.apache.abdera.protocol.util.AbstractMessage</outbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.protocol.util.CacheControlUtil.parseCacheControl(java.lang.String, org.apache.abdera.protocol.util.AbstractResponse)</inbound>
            <feature confirmed="yes">
                <name>org.apache.abdera.protocol.util.AbstractResponse.AbstractResponse()</name>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="feature" confirmed="yes">org.apache.abdera.protocol.util.AbstractMessage.AbstractMessage()</outbound>
                <outbound type="feature" confirmed="yes">org.apache.abdera.protocol.util.AbstractResponse.nocache_headers</outbound>
                <outbound type="feature" confirmed="yes">org.apache.abdera.protocol.util.AbstractResponse.private_headers</outbound>
                <outbound type="feature" confirmed="yes">org.apache.abdera.protocol.util.AbstractResponse.smax_age</outbound>
            </feature>
            <feature confirmed="no">
                <name>org.apache.abdera.protocol.util.AbstractResponse.check(int)</name>
                <inbound type="feature" confirmed="yes">org.apache.abdera.protocol.util.AbstractResponse.isMustRevalidate()</inbound>
                <inbound type="feature" confirmed="yes">org.apache.abdera.protocol.util.AbstractResponse.isPrivate()</inbound>
                <inbound type="feature" confirmed="yes">org.apache.abdera.protocol.util.AbstractResponse.isProxyRevalidate()</inbound>
                <inbound type="feature" confirmed="yes">org.apache.abdera.protocol.util.AbstractResponse.isPublic()</inbound>
            </feature>
            <feature confirmed="no">
                <name>org.apache.abdera.protocol.util.AbstractResponse.flags</name>
                <inbound type="feature" confirmed="yes">org.apache.abdera.protocol.util.AbstractResponse.setPrivate(boolean)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.protocol.util.AbstractResponse.getAge()</name>
                <outbound type="feature" confirmed="no">java.lang.Long.parseLong(java.lang.String)</outbound>
                <outbound type="class" confirmed="no">java.lang.NumberFormatException</outbound>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="feature" confirmed="no">org.apache.abdera.protocol.util.AbstractResponse.getHeader(java.lang.String)</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.protocol.util.AbstractResponse.getAllow()</name>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="feature" confirmed="no">org.apache.abdera.protocol.util.AbstractResponse.getHeader(java.lang.String)</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.protocol.util.AbstractResponse.getContentLength()</name>
                <outbound type="feature" confirmed="no">java.lang.Long.parseLong(java.lang.String)</outbound>
                <outbound type="class" confirmed="no">java.lang.NumberFormatException</outbound>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="feature" confirmed="no">org.apache.abdera.protocol.util.AbstractResponse.getHeader(java.lang.String)</outbound>
            </feature>
            <feature confirmed="no">
                <name>org.apache.abdera.protocol.util.AbstractResponse.getDateHeader(java.lang.String)</name>
                <inbound type="feature" confirmed="yes">org.apache.abdera.protocol.util.AbstractResponse.getExpires()</inbound>
                <inbound type="feature" confirmed="yes">org.apache.abdera.protocol.util.AbstractResponse.getLastModified()</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.protocol.util.AbstractResponse.getEntityTag()</name>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="feature" confirmed="no">org.apache.abdera.protocol.util.AbstractResponse.getHeader(java.lang.String)</outbound>
                <outbound type="class" confirmed="yes">org.apache.abdera.util.EntityTag</outbound>
                <outbound type="feature" confirmed="yes">org.apache.abdera.util.EntityTag.parse(java.lang.String)</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.protocol.util.AbstractResponse.getExpires()</name>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="class" confirmed="no">java.util.Date</outbound>
                <outbound type="feature" confirmed="no">org.apache.abdera.protocol.util.AbstractResponse.getDateHeader(java.lang.String)</outbound>
            </feature>
            <feature confirmed="no">
                <name>org.apache.abdera.protocol.util.AbstractResponse.getHeader(java.lang.String)</name>
                <inbound type="feature" confirmed="yes">org.apache.abdera.protocol.util.AbstractResponse.getAge()</inbound>
                <inbound type="feature" confirmed="yes">org.apache.abdera.protocol.util.AbstractResponse.getAllow()</inbound>
                <inbound type="feature" confirmed="yes">org.apache.abdera.protocol.util.AbstractResponse.getContentLength()</inbound>
                <inbound type="feature" confirmed="yes">org.apache.abdera.protocol.util.AbstractResponse.getEntityTag()</inbound>
                <inbound type="feature" confirmed="yes">org.apache.abdera.protocol.util.AbstractResponse.getLocation()</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.protocol.util.AbstractResponse.getLastModified()</name>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="class" confirmed="no">java.util.Date</outbound>
                <outbound type="feature" confirmed="no">org.apache.abdera.protocol.util.AbstractResponse.getDateHeader(java.lang.String)</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.protocol.util.AbstractResponse.getLocation()</name>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="class" confirmed="no">org.apache.abdera.i18n.iri.IRI</outbound>
                <outbound type="feature" confirmed="no">org.apache.abdera.i18n.iri.IRI.IRI(java.lang.String)</outbound>
                <outbound type="feature" confirmed="no">org.apache.abdera.protocol.util.AbstractResponse.getHeader(java.lang.String)</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.protocol.util.AbstractResponse.getNoCacheHeaders()</name>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="feature" confirmed="yes">org.apache.abdera.protocol.util.AbstractResponse.nocache_headers</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.protocol.util.AbstractResponse.getPrivateHeaders()</name>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="feature" confirmed="yes">org.apache.abdera.protocol.util.AbstractResponse.private_headers</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.protocol.util.AbstractResponse.getSMaxAge()</name>
                <outbound type="feature" confirmed="yes">org.apache.abdera.protocol.util.AbstractResponse.smax_age</outbound>
            </feature>
            <feature confirmed="no">
                <name>org.apache.abdera.protocol.util.AbstractResponse.getStatus()</name>
                <inbound type="feature" confirmed="yes">org.apache.abdera.protocol.util.AbstractResponse.getType()</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.protocol.util.AbstractResponse.getType()</name>
                <outbound type="class" confirmed="yes">org.apache.abdera.protocol.Response$ResponseType</outbound>
                <outbound type="feature" confirmed="yes">org.apache.abdera.protocol.Response$ResponseType.select(int)</outbound>
                <outbound type="feature" confirmed="no">org.apache.abdera.protocol.util.AbstractResponse.getStatus()</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.protocol.util.AbstractResponse.isMustRevalidate()</name>
                <outbound type="feature" confirmed="no">org.apache.abdera.protocol.util.AbstractResponse.check(int)</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.protocol.util.AbstractResponse.isPrivate()</name>
                <outbound type="feature" confirmed="no">org.apache.abdera.protocol.util.AbstractResponse.check(int)</outbound>
                <inbound type="feature" confirmed="yes">org.apache.abdera.protocol.util.AbstractResponse.setPrivate(boolean)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.protocol.util.AbstractResponse.isProxyRevalidate()</name>
                <outbound type="feature" confirmed="no">org.apache.abdera.protocol.util.AbstractResponse.check(int)</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.protocol.util.AbstractResponse.isPublic()</name>
                <outbound type="feature" confirmed="no">org.apache.abdera.protocol.util.AbstractResponse.check(int)</outbound>
            </feature>
            <feature confirmed="no">
                <name>org.apache.abdera.protocol.util.AbstractResponse.max_age</name>
                <inbound type="feature" confirmed="yes">org.apache.abdera.protocol.util.AbstractResponse.setMaxAge(long)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.protocol.util.AbstractResponse.nocache_headers</name>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <inbound type="feature" confirmed="yes">org.apache.abdera.protocol.util.AbstractResponse.AbstractResponse()</inbound>
                <inbound type="feature" confirmed="yes">org.apache.abdera.protocol.util.AbstractResponse.getNoCacheHeaders()</inbound>
                <inbound type="feature" confirmed="yes">org.apache.abdera.protocol.util.AbstractResponse.setNoCacheHeaders(java.lang.String[])</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.protocol.util.AbstractResponse.private_headers</name>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <inbound type="feature" confirmed="yes">org.apache.abdera.protocol.util.AbstractResponse.AbstractResponse()</inbound>
                <inbound type="feature" confirmed="yes">org.apache.abdera.protocol.util.AbstractResponse.getPrivateHeaders()</inbound>
                <inbound type="feature" confirmed="yes">org.apache.abdera.protocol.util.AbstractResponse.setPrivateHeaders(java.lang.String[])</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.protocol.util.AbstractResponse.setMaxAge(long)</name>
                <outbound type="feature" confirmed="no">org.apache.abdera.protocol.util.AbstractResponse.max_age</outbound>
                <inbound type="feature" confirmed="yes">org.apache.abdera.protocol.util.CacheControlUtil.parseCacheControl(java.lang.String, org.apache.abdera.protocol.util.AbstractResponse)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.protocol.util.AbstractResponse.setMustRevalidate(boolean)</name>
                <outbound type="feature" confirmed="no">org.apache.abdera.protocol.util.AbstractResponse.toggle(boolean, int)</outbound>
                <inbound type="feature" confirmed="yes">org.apache.abdera.protocol.util.CacheControlUtil.parseCacheControl(java.lang.String, org.apache.abdera.protocol.util.AbstractResponse)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.protocol.util.AbstractResponse.setNoCache(boolean)</name>
                <outbound type="feature" confirmed="no">org.apache.abdera.protocol.util.AbstractResponse.toggle(boolean, int)</outbound>
                <inbound type="feature" confirmed="yes">org.apache.abdera.protocol.util.CacheControlUtil.parseCacheControl(java.lang.String, org.apache.abdera.protocol.util.AbstractResponse)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.protocol.util.AbstractResponse.setNoCacheHeaders(java.lang.String[])</name>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="feature" confirmed="yes">org.apache.abdera.protocol.util.AbstractResponse.nocache_headers</outbound>
                <inbound type="feature" confirmed="yes">org.apache.abdera.protocol.util.CacheControlUtil.parseCacheControl(java.lang.String, org.apache.abdera.protocol.util.AbstractResponse)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.protocol.util.AbstractResponse.setNoStore(boolean)</name>
                <outbound type="feature" confirmed="no">org.apache.abdera.protocol.util.AbstractResponse.toggle(boolean, int)</outbound>
                <inbound type="feature" confirmed="yes">org.apache.abdera.protocol.util.CacheControlUtil.parseCacheControl(java.lang.String, org.apache.abdera.protocol.util.AbstractResponse)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.protocol.util.AbstractResponse.setNoTransform(boolean)</name>
                <outbound type="feature" confirmed="no">org.apache.abdera.protocol.util.AbstractResponse.toggle(boolean, int)</outbound>
                <inbound type="feature" confirmed="yes">org.apache.abdera.protocol.util.CacheControlUtil.parseCacheControl(java.lang.String, org.apache.abdera.protocol.util.AbstractResponse)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.protocol.util.AbstractResponse.setPrivate(boolean)</name>
                <outbound type="feature" confirmed="no">org.apache.abdera.protocol.util.AbstractResponse.flags</outbound>
                <outbound type="feature" confirmed="yes">org.apache.abdera.protocol.util.AbstractResponse.isPrivate()</outbound>
                <inbound type="feature" confirmed="yes">org.apache.abdera.protocol.util.CacheControlUtil.parseCacheControl(java.lang.String, org.apache.abdera.protocol.util.AbstractResponse)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.protocol.util.AbstractResponse.setPrivateHeaders(java.lang.String[])</name>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="feature" confirmed="yes">org.apache.abdera.protocol.util.AbstractResponse.private_headers</outbound>
                <inbound type="feature" confirmed="yes">org.apache.abdera.protocol.util.CacheControlUtil.parseCacheControl(java.lang.String, org.apache.abdera.protocol.util.AbstractResponse)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.protocol.util.AbstractResponse.setProxyRevalidate(boolean)</name>
                <outbound type="feature" confirmed="no">org.apache.abdera.protocol.util.AbstractResponse.toggle(boolean, int)</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.protocol.util.AbstractResponse.setPublic(boolean)</name>
                <outbound type="feature" confirmed="no">org.apache.abdera.protocol.util.AbstractResponse.toggle(boolean, int)</outbound>
                <inbound type="feature" confirmed="yes">org.apache.abdera.protocol.util.CacheControlUtil.parseCacheControl(java.lang.String, org.apache.abdera.protocol.util.AbstractResponse)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.protocol.util.AbstractResponse.smax_age</name>
                <inbound type="feature" confirmed="yes">org.apache.abdera.protocol.util.AbstractResponse.AbstractResponse()</inbound>
                <inbound type="feature" confirmed="yes">org.apache.abdera.protocol.util.AbstractResponse.getSMaxAge()</inbound>
            </feature>
            <feature confirmed="no">
                <name>org.apache.abdera.protocol.util.AbstractResponse.toggle(boolean, int)</name>
                <inbound type="feature" confirmed="yes">org.apache.abdera.protocol.util.AbstractResponse.setMustRevalidate(boolean)</inbound>
                <inbound type="feature" confirmed="yes">org.apache.abdera.protocol.util.AbstractResponse.setNoCache(boolean)</inbound>
                <inbound type="feature" confirmed="yes">org.apache.abdera.protocol.util.AbstractResponse.setNoStore(boolean)</inbound>
                <inbound type="feature" confirmed="yes">org.apache.abdera.protocol.util.AbstractResponse.setNoTransform(boolean)</inbound>
                <inbound type="feature" confirmed="yes">org.apache.abdera.protocol.util.AbstractResponse.setProxyRevalidate(boolean)</inbound>
                <inbound type="feature" confirmed="yes">org.apache.abdera.protocol.util.AbstractResponse.setPublic(boolean)</inbound>
            </feature>
        </class>
        <class confirmed="yes">
            <name>org.apache.abdera.protocol.util.CacheControlUtil</name>
            <outbound type="class" confirmed="no">java.lang.Object</outbound>
            <feature confirmed="yes">
                <name>org.apache.abdera.protocol.util.CacheControlUtil.CacheControlUtil()</name>
                <outbound type="feature" confirmed="no">java.lang.Object.Object()</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.protocol.util.CacheControlUtil.append(java.lang.StringBuilder, java.lang.String)</name>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="class" confirmed="no">java.lang.StringBuilder</outbound>
                <outbound type="feature" confirmed="no">java.lang.StringBuilder.append(java.lang.String)</outbound>
                <outbound type="feature" confirmed="no">java.lang.StringBuilder.length()</outbound>
                <inbound type="feature" confirmed="yes">org.apache.abdera.protocol.util.CacheControlUtil.buildCacheControl(org.apache.abdera.protocol.util.AbstractRequest)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.protocol.util.CacheControlUtil.buildCacheControl(org.apache.abdera.protocol.util.AbstractRequest)</name>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="class" confirmed="no">java.lang.StringBuilder</outbound>
                <outbound type="feature" confirmed="no">java.lang.StringBuilder.StringBuilder()</outbound>
                <outbound type="feature" confirmed="no">java.lang.StringBuilder.append(java.lang.String)</outbound>
                <outbound type="feature" confirmed="no">java.lang.StringBuilder.append(long)</outbound>
                <outbound type="feature" confirmed="no">java.lang.StringBuilder.toString()</outbound>
                <outbound type="class" confirmed="yes">org.apache.abdera.protocol.util.AbstractRequest</outbound>
                <outbound type="feature" confirmed="no">org.apache.abdera.protocol.util.AbstractRequest.getMaxAge()</outbound>
                <outbound type="feature" confirmed="yes">org.apache.abdera.protocol.util.AbstractRequest.getMaxStale()</outbound>
                <outbound type="feature" confirmed="yes">org.apache.abdera.protocol.util.AbstractRequest.getMinFresh()</outbound>
                <outbound type="feature" confirmed="no">org.apache.abdera.protocol.util.AbstractRequest.isNoCache()</outbound>
                <outbound type="feature" confirmed="no">org.apache.abdera.protocol.util.AbstractRequest.isNoStore()</outbound>
                <outbound type="feature" confirmed="no">org.apache.abdera.protocol.util.AbstractRequest.isNoTransform()</outbound>
                <outbound type="feature" confirmed="yes">org.apache.abdera.protocol.util.AbstractRequest.isOnlyIfCached()</outbound>
                <outbound type="feature" confirmed="yes">org.apache.abdera.protocol.util.CacheControlUtil.append(java.lang.StringBuilder, java.lang.String)</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.protocol.util.CacheControlUtil.isIdempotent(java.lang.String)</name>
                <outbound type="class" confirmed="no">java.lang.Exception</outbound>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="feature" confirmed="no">java.lang.String.toUpperCase()</outbound>
                <outbound type="class" confirmed="yes">org.apache.abdera.protocol.util.CacheControlUtil$Idempotent</outbound>
                <outbound type="feature" confirmed="yes">org.apache.abdera.protocol.util.CacheControlUtil$Idempotent.valueOf(java.lang.String)</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.protocol.util.CacheControlUtil.parseCacheControl(java.lang.String, org.apache.abdera.protocol.util.AbstractRequest)</name>
                <outbound type="class" confirmed="no">java.lang.Object</outbound>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="feature" confirmed="no">java.lang.String.length()</outbound>
                <outbound type="class" confirmed="no">java.util.Iterator</outbound>
                <outbound type="feature" confirmed="no">java.util.Iterator.hasNext()</outbound>
                <outbound type="feature" confirmed="no">java.util.Iterator.next()</outbound>
                <outbound type="class" confirmed="yes">org.apache.abdera.protocol.util.AbstractRequest</outbound>
                <outbound type="feature" confirmed="yes">org.apache.abdera.protocol.util.AbstractRequest.setMaxAge(long)</outbound>
                <outbound type="feature" confirmed="yes">org.apache.abdera.protocol.util.AbstractRequest.setMaxStale(long)</outbound>
                <outbound type="feature" confirmed="yes">org.apache.abdera.protocol.util.AbstractRequest.setMinFresh(long)</outbound>
                <outbound type="feature" confirmed="yes">org.apache.abdera.protocol.util.AbstractRequest.setNoCache(boolean)</outbound>
                <outbound type="feature" confirmed="yes">org.apache.abdera.protocol.util.AbstractRequest.setNoStore(boolean)</outbound>
                <outbound type="feature" confirmed="yes">org.apache.abdera.protocol.util.AbstractRequest.setNoTransform(boolean)</outbound>
                <outbound type="feature" confirmed="yes">org.apache.abdera.protocol.util.AbstractRequest.setOnlyIfCached(boolean)</outbound>
                <outbound type="feature" confirmed="yes">org.apache.abdera.protocol.util.CacheControlUtil$1.$SwitchMap$org$apache$abdera$protocol$util$CacheControlUtil$Directive</outbound>
                <outbound type="feature" confirmed="yes">org.apache.abdera.protocol.util.CacheControlUtil$CacheControlParser.CacheControlUtil$CacheControlParser(java.lang.String)</outbound>
                <outbound type="feature" confirmed="yes">org.apache.abdera.protocol.util.CacheControlUtil$CacheControlParser.getValue(org.apache.abdera.protocol.util.CacheControlUtil$Directive)</outbound>
                <outbound type="feature" confirmed="yes">org.apache.abdera.protocol.util.CacheControlUtil$CacheControlParser.iterator()</outbound>
                <outbound type="class" confirmed="yes">org.apache.abdera.protocol.util.CacheControlUtil$Directive</outbound>
                <outbound type="feature" confirmed="no">org.apache.abdera.protocol.util.CacheControlUtil$Directive.ordinal()</outbound>
                <outbound type="feature" confirmed="yes">org.apache.abdera.protocol.util.CacheControlUtil.value(java.lang.String)</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.protocol.util.CacheControlUtil.parseCacheControl(java.lang.String, org.apache.abdera.protocol.util.AbstractResponse)</name>
                <outbound type="class" confirmed="no">java.lang.Object</outbound>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="class" confirmed="no">java.util.Iterator</outbound>
                <outbound type="feature" confirmed="no">java.util.Iterator.hasNext()</outbound>
                <outbound type="feature" confirmed="no">java.util.Iterator.next()</outbound>
                <outbound type="class" confirmed="yes">org.apache.abdera.protocol.util.AbstractResponse</outbound>
                <outbound type="feature" confirmed="yes">org.apache.abdera.protocol.util.AbstractResponse.setMaxAge(long)</outbound>
                <outbound type="feature" confirmed="yes">org.apache.abdera.protocol.util.AbstractResponse.setMustRevalidate(boolean)</outbound>
                <outbound type="feature" confirmed="yes">org.apache.abdera.protocol.util.AbstractResponse.setNoCache(boolean)</outbound>
                <outbound type="feature" confirmed="yes">org.apache.abdera.protocol.util.AbstractResponse.setNoCacheHeaders(java.lang.String[])</outbound>
                <outbound type="feature" confirmed="yes">org.apache.abdera.protocol.util.AbstractResponse.setNoStore(boolean)</outbound>
                <outbound type="feature" confirmed="yes">org.apache.abdera.protocol.util.AbstractResponse.setNoTransform(boolean)</outbound>
                <outbound type="feature" confirmed="yes">org.apache.abdera.protocol.util.AbstractResponse.setPrivate(boolean)</outbound>
                <outbound type="feature" confirmed="yes">org.apache.abdera.protocol.util.AbstractResponse.setPrivateHeaders(java.lang.String[])</outbound>
                <outbound type="feature" confirmed="yes">org.apache.abdera.protocol.util.AbstractResponse.setPublic(boolean)</outbound>
                <outbound type="feature" confirmed="yes">org.apache.abdera.protocol.util.CacheControlUtil$1.$SwitchMap$org$apache$abdera$protocol$util$CacheControlUtil$Directive</outbound>
                <outbound type="feature" confirmed="yes">org.apache.abdera.protocol.util.CacheControlUtil$CacheControlParser.CacheControlUtil$CacheControlParser(java.lang.String)</outbound>
                <outbound type="feature" confirmed="yes">org.apache.abdera.protocol.util.CacheControlUtil$CacheControlParser.getValue(org.apache.abdera.protocol.util.CacheControlUtil$Directive)</outbound>
                <outbound type="feature" confirmed="yes">org.apache.abdera.protocol.util.CacheControlUtil$CacheControlParser.getValues(org.apache.abdera.protocol.util.CacheControlUtil$Directive)</outbound>
                <outbound type="feature" confirmed="yes">org.apache.abdera.protocol.util.CacheControlUtil$CacheControlParser.iterator()</outbound>
                <outbound type="class" confirmed="yes">org.apache.abdera.protocol.util.CacheControlUtil$Directive</outbound>
                <outbound type="feature" confirmed="no">org.apache.abdera.protocol.util.CacheControlUtil$Directive.ordinal()</outbound>
                <outbound type="feature" confirmed="yes">org.apache.abdera.protocol.util.CacheControlUtil.value(java.lang.String)</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.protocol.util.CacheControlUtil.value(java.lang.String)</name>
                <outbound type="feature" confirmed="no">java.lang.Long.parseLong(java.lang.String)</outbound>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <inbound type="feature" confirmed="yes">org.apache.abdera.protocol.util.CacheControlUtil.parseCacheControl(java.lang.String, org.apache.abdera.protocol.util.AbstractRequest)</inbound>
                <inbound type="feature" confirmed="yes">org.apache.abdera.protocol.util.CacheControlUtil.parseCacheControl(java.lang.String, org.apache.abdera.protocol.util.AbstractResponse)</inbound>
            </feature>
        </class>
        <class confirmed="yes">
            <name>org.apache.abdera.protocol.util.CacheControlUtil$1</name>
            <outbound type="class" confirmed="no">java.lang.Object</outbound>
            <feature confirmed="yes">
                <name>org.apache.abdera.protocol.util.CacheControlUtil$1.$SwitchMap$org$apache$abdera$protocol$util$CacheControlUtil$Directive</name>
                <inbound type="feature" confirmed="yes">org.apache.abdera.protocol.util.CacheControlUtil$1.static {}</inbound>
                <inbound type="feature" confirmed="yes">org.apache.abdera.protocol.util.CacheControlUtil.parseCacheControl(java.lang.String, org.apache.abdera.protocol.util.AbstractRequest)</inbound>
                <inbound type="feature" confirmed="yes">org.apache.abdera.protocol.util.CacheControlUtil.parseCacheControl(java.lang.String, org.apache.abdera.protocol.util.AbstractResponse)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.protocol.util.CacheControlUtil$1.static {}</name>
                <outbound type="class" confirmed="no">java.lang.NoSuchFieldError</outbound>
                <outbound type="feature" confirmed="yes">org.apache.abdera.protocol.util.CacheControlUtil$1.$SwitchMap$org$apache$abdera$protocol$util$CacheControlUtil$Directive</outbound>
                <outbound type="class" confirmed="yes">org.apache.abdera.protocol.util.CacheControlUtil$Directive</outbound>
                <outbound type="feature" confirmed="yes">org.apache.abdera.protocol.util.CacheControlUtil$Directive.MAXAGE</outbound>
                <outbound type="feature" confirmed="yes">org.apache.abdera.protocol.util.CacheControlUtil$Directive.MAXSTALE</outbound>
                <outbound type="feature" confirmed="yes">org.apache.abdera.protocol.util.CacheControlUtil$Directive.MINFRESH</outbound>
                <outbound type="feature" confirmed="yes">org.apache.abdera.protocol.util.CacheControlUtil$Directive.MUSTREVALIDATE</outbound>
                <outbound type="feature" confirmed="yes">org.apache.abdera.protocol.util.CacheControlUtil$Directive.NOCACHE</outbound>
                <outbound type="feature" confirmed="yes">org.apache.abdera.protocol.util.CacheControlUtil$Directive.NOSTORE</outbound>
                <outbound type="feature" confirmed="yes">org.apache.abdera.protocol.util.CacheControlUtil$Directive.NOTRANSFORM</outbound>
                <outbound type="feature" confirmed="yes">org.apache.abdera.protocol.util.CacheControlUtil$Directive.ONLYIFCACHED</outbound>
                <outbound type="feature" confirmed="yes">org.apache.abdera.protocol.util.CacheControlUtil$Directive.PRIVATE</outbound>
                <outbound type="feature" confirmed="yes">org.apache.abdera.protocol.util.CacheControlUtil$Directive.PUBLIC</outbound>
                <outbound type="feature" confirmed="no">org.apache.abdera.protocol.util.CacheControlUtil$Directive.ordinal()</outbound>
                <outbound type="feature" confirmed="yes">org.apache.abdera.protocol.util.CacheControlUtil$Directive.values()</outbound>
            </feature>
        </class>
        <class confirmed="yes">
            <name>org.apache.abdera.protocol.util.CacheControlUtil$CacheControlParser</name>
            <outbound type="class" confirmed="no">java.lang.Iterable</outbound>
            <outbound type="class" confirmed="no">java.lang.Object</outbound>
            <feature confirmed="yes">
                <name>org.apache.abdera.protocol.util.CacheControlUtil$CacheControlParser.CacheControlUtil$CacheControlParser(java.lang.String)</name>
                <outbound type="class" confirmed="no">java.lang.CharSequence</outbound>
                <outbound type="class" confirmed="no">java.lang.Object</outbound>
                <outbound type="feature" confirmed="no">java.lang.Object.Object()</outbound>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="class" confirmed="no">java.util.HashMap</outbound>
                <outbound type="feature" confirmed="no">java.util.HashMap.HashMap()</outbound>
                <outbound type="feature" confirmed="no">java.util.HashMap.put(java.lang.Object, java.lang.Object)</outbound>
                <outbound type="class" confirmed="no">java.util.regex.Matcher</outbound>
                <outbound type="feature" confirmed="no">java.util.regex.Matcher.find()</outbound>
                <outbound type="feature" confirmed="no">java.util.regex.Matcher.group(int)</outbound>
                <outbound type="class" confirmed="no">java.util.regex.Pattern</outbound>
                <outbound type="feature" confirmed="no">java.util.regex.Pattern.matcher(java.lang.CharSequence)</outbound>
                <outbound type="feature" confirmed="yes">org.apache.abdera.protocol.util.CacheControlUtil$CacheControlParser.pattern</outbound>
                <outbound type="feature" confirmed="yes">org.apache.abdera.protocol.util.CacheControlUtil$CacheControlParser.values</outbound>
                <outbound type="class" confirmed="yes">org.apache.abdera.protocol.util.CacheControlUtil$Directive</outbound>
                <outbound type="feature" confirmed="yes">org.apache.abdera.protocol.util.CacheControlUtil$Directive.UNKNOWN</outbound>
                <outbound type="feature" confirmed="yes">org.apache.abdera.protocol.util.CacheControlUtil$Directive.select(java.lang.String)</outbound>
                <inbound type="feature" confirmed="yes">org.apache.abdera.protocol.util.CacheControlUtil.parseCacheControl(java.lang.String, org.apache.abdera.protocol.util.AbstractRequest)</inbound>
                <inbound type="feature" confirmed="yes">org.apache.abdera.protocol.util.CacheControlUtil.parseCacheControl(java.lang.String, org.apache.abdera.protocol.util.AbstractResponse)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.protocol.util.CacheControlUtil$CacheControlParser.REGEX</name>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.protocol.util.CacheControlUtil$CacheControlParser.getValue(org.apache.abdera.protocol.util.CacheControlUtil$Directive)</name>
                <outbound type="class" confirmed="no">java.lang.Object</outbound>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="class" confirmed="no">java.util.HashMap</outbound>
                <outbound type="feature" confirmed="no">java.util.HashMap.get(java.lang.Object)</outbound>
                <outbound type="feature" confirmed="yes">org.apache.abdera.protocol.util.CacheControlUtil$CacheControlParser.values</outbound>
                <outbound type="class" confirmed="yes">org.apache.abdera.protocol.util.CacheControlUtil$Directive</outbound>
                <inbound type="feature" confirmed="yes">org.apache.abdera.protocol.util.CacheControlUtil$CacheControlParser.getValues(org.apache.abdera.protocol.util.CacheControlUtil$Directive)</inbound>
                <inbound type="feature" confirmed="yes">org.apache.abdera.protocol.util.CacheControlUtil.parseCacheControl(java.lang.String, org.apache.abdera.protocol.util.AbstractRequest)</inbound>
                <inbound type="feature" confirmed="yes">org.apache.abdera.protocol.util.CacheControlUtil.parseCacheControl(java.lang.String, org.apache.abdera.protocol.util.AbstractResponse)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.protocol.util.CacheControlUtil$CacheControlParser.getValues()</name>
                <outbound type="class" confirmed="no">java.util.HashMap</outbound>
                <outbound type="class" confirmed="no">java.util.Map</outbound>
                <outbound type="feature" confirmed="yes">org.apache.abdera.protocol.util.CacheControlUtil$CacheControlParser.values</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.protocol.util.CacheControlUtil$CacheControlParser.getValues(org.apache.abdera.protocol.util.CacheControlUtil$Directive)</name>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="feature" confirmed="no">org.apache.abdera.i18n.text.io.CompressionUtil.splitAndTrim(java.lang.String, java.lang.String, boolean)</outbound>
                <outbound type="feature" confirmed="yes">org.apache.abdera.protocol.util.CacheControlUtil$CacheControlParser.getValue(org.apache.abdera.protocol.util.CacheControlUtil$Directive)</outbound>
                <outbound type="class" confirmed="yes">org.apache.abdera.protocol.util.CacheControlUtil$Directive</outbound>
                <inbound type="feature" confirmed="yes">org.apache.abdera.protocol.util.CacheControlUtil.parseCacheControl(java.lang.String, org.apache.abdera.protocol.util.AbstractResponse)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.protocol.util.CacheControlUtil$CacheControlParser.iterator()</name>
                <outbound type="class" confirmed="no">java.util.HashMap</outbound>
                <outbound type="feature" confirmed="no">java.util.HashMap.keySet()</outbound>
                <outbound type="class" confirmed="no">java.util.Iterator</outbound>
                <outbound type="class" confirmed="no">java.util.Set</outbound>
                <outbound type="feature" confirmed="no">java.util.Set.iterator()</outbound>
                <outbound type="feature" confirmed="yes">org.apache.abdera.protocol.util.CacheControlUtil$CacheControlParser.values</outbound>
                <inbound type="feature" confirmed="yes">org.apache.abdera.protocol.util.CacheControlUtil.parseCacheControl(java.lang.String, org.apache.abdera.protocol.util.AbstractRequest)</inbound>
                <inbound type="feature" confirmed="yes">org.apache.abdera.protocol.util.CacheControlUtil.parseCacheControl(java.lang.String, org.apache.abdera.protocol.util.AbstractResponse)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.protocol.util.CacheControlUtil$CacheControlParser.pattern</name>
                <outbound type="class" confirmed="no">java.util.regex.Pattern</outbound>
                <inbound type="feature" confirmed="yes">org.apache.abdera.protocol.util.CacheControlUtil$CacheControlParser.CacheControlUtil$CacheControlParser(java.lang.String)</inbound>
                <inbound type="feature" confirmed="yes">org.apache.abdera.protocol.util.CacheControlUtil$CacheControlParser.static {}</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.protocol.util.CacheControlUtil$CacheControlParser.static {}</name>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="class" confirmed="no">java.util.regex.Pattern</outbound>
                <outbound type="feature" confirmed="no">java.util.regex.Pattern.compile(java.lang.String)</outbound>
                <outbound type="feature" confirmed="yes">org.apache.abdera.protocol.util.CacheControlUtil$CacheControlParser.pattern</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.protocol.util.CacheControlUtil$CacheControlParser.values</name>
                <outbound type="class" confirmed="no">java.util.HashMap</outbound>
                <inbound type="feature" confirmed="yes">org.apache.abdera.protocol.util.CacheControlUtil$CacheControlParser.CacheControlUtil$CacheControlParser(java.lang.String)</inbound>
                <inbound type="feature" confirmed="yes">org.apache.abdera.protocol.util.CacheControlUtil$CacheControlParser.getValue(org.apache.abdera.protocol.util.CacheControlUtil$Directive)</inbound>
                <inbound type="feature" confirmed="yes">org.apache.abdera.protocol.util.CacheControlUtil$CacheControlParser.getValues()</inbound>
                <inbound type="feature" confirmed="yes">org.apache.abdera.protocol.util.CacheControlUtil$CacheControlParser.iterator()</inbound>
            </feature>
        </class>
        <class confirmed="yes">
            <name>org.apache.abdera.protocol.util.CacheControlUtil$Directive</name>
            <outbound type="class" confirmed="no">java.lang.Enum</outbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.protocol.util.CacheControlUtil$1.static {}</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.protocol.util.CacheControlUtil$CacheControlParser.CacheControlUtil$CacheControlParser(java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.protocol.util.CacheControlUtil$CacheControlParser.getValue(org.apache.abdera.protocol.util.CacheControlUtil$Directive)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.protocol.util.CacheControlUtil$CacheControlParser.getValues(org.apache.abdera.protocol.util.CacheControlUtil$Directive)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.protocol.util.CacheControlUtil.parseCacheControl(java.lang.String, org.apache.abdera.protocol.util.AbstractRequest)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.protocol.util.CacheControlUtil.parseCacheControl(java.lang.String, org.apache.abdera.protocol.util.AbstractResponse)</inbound>
            <feature confirmed="yes">
                <name>org.apache.abdera.protocol.util.CacheControlUtil$Directive.$VALUES</name>
                <inbound type="feature" confirmed="yes">org.apache.abdera.protocol.util.CacheControlUtil$Directive.static {}</inbound>
                <inbound type="feature" confirmed="yes">org.apache.abdera.protocol.util.CacheControlUtil$Directive.values()</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.protocol.util.CacheControlUtil$Directive.CacheControlUtil$Directive(java.lang.String, int)</name>
                <outbound type="feature" confirmed="no">java.lang.Enum.Enum(java.lang.String, int)</outbound>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <inbound type="feature" confirmed="yes">org.apache.abdera.protocol.util.CacheControlUtil$Directive.static {}</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.protocol.util.CacheControlUtil$Directive.MAXAGE</name>
                <inbound type="feature" confirmed="yes">org.apache.abdera.protocol.util.CacheControlUtil$1.static {}</inbound>
                <inbound type="feature" confirmed="yes">org.apache.abdera.protocol.util.CacheControlUtil$Directive.static {}</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.protocol.util.CacheControlUtil$Directive.MAXSTALE</name>
                <inbound type="feature" confirmed="yes">org.apache.abdera.protocol.util.CacheControlUtil$1.static {}</inbound>
                <inbound type="feature" confirmed="yes">org.apache.abdera.protocol.util.CacheControlUtil$Directive.static {}</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.protocol.util.CacheControlUtil$Directive.MINFRESH</name>
                <inbound type="feature" confirmed="yes">org.apache.abdera.protocol.util.CacheControlUtil$1.static {}</inbound>
                <inbound type="feature" confirmed="yes">org.apache.abdera.protocol.util.CacheControlUtil$Directive.static {}</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.protocol.util.CacheControlUtil$Directive.MUSTREVALIDATE</name>
                <inbound type="feature" confirmed="yes">org.apache.abdera.protocol.util.CacheControlUtil$1.static {}</inbound>
                <inbound type="feature" confirmed="yes">org.apache.abdera.protocol.util.CacheControlUtil$Directive.static {}</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.protocol.util.CacheControlUtil$Directive.NOCACHE</name>
                <inbound type="feature" confirmed="yes">org.apache.abdera.protocol.util.CacheControlUtil$1.static {}</inbound>
                <inbound type="feature" confirmed="yes">org.apache.abdera.protocol.util.CacheControlUtil$Directive.static {}</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.protocol.util.CacheControlUtil$Directive.NOSTORE</name>
                <inbound type="feature" confirmed="yes">org.apache.abdera.protocol.util.CacheControlUtil$1.static {}</inbound>
                <inbound type="feature" confirmed="yes">org.apache.abdera.protocol.util.CacheControlUtil$Directive.static {}</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.protocol.util.CacheControlUtil$Directive.NOTRANSFORM</name>
                <inbound type="feature" confirmed="yes">org.apache.abdera.protocol.util.CacheControlUtil$1.static {}</inbound>
                <inbound type="feature" confirmed="yes">org.apache.abdera.protocol.util.CacheControlUtil$Directive.static {}</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.protocol.util.CacheControlUtil$Directive.ONLYIFCACHED</name>
                <inbound type="feature" confirmed="yes">org.apache.abdera.protocol.util.CacheControlUtil$1.static {}</inbound>
                <inbound type="feature" confirmed="yes">org.apache.abdera.protocol.util.CacheControlUtil$Directive.static {}</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.protocol.util.CacheControlUtil$Directive.PRIVATE</name>
                <inbound type="feature" confirmed="yes">org.apache.abdera.protocol.util.CacheControlUtil$1.static {}</inbound>
                <inbound type="feature" confirmed="yes">org.apache.abdera.protocol.util.CacheControlUtil$Directive.static {}</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.protocol.util.CacheControlUtil$Directive.PROXYREVALIDATE</name>
                <inbound type="feature" confirmed="yes">org.apache.abdera.protocol.util.CacheControlUtil$Directive.static {}</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.protocol.util.CacheControlUtil$Directive.PUBLIC</name>
                <inbound type="feature" confirmed="yes">org.apache.abdera.protocol.util.CacheControlUtil$1.static {}</inbound>
                <inbound type="feature" confirmed="yes">org.apache.abdera.protocol.util.CacheControlUtil$Directive.static {}</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.protocol.util.CacheControlUtil$Directive.SMAXAGE</name>
                <inbound type="feature" confirmed="yes">org.apache.abdera.protocol.util.CacheControlUtil$Directive.static {}</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.protocol.util.CacheControlUtil$Directive.UNKNOWN</name>
                <inbound type="feature" confirmed="yes">org.apache.abdera.protocol.util.CacheControlUtil$CacheControlParser.CacheControlUtil$CacheControlParser(java.lang.String)</inbound>
                <inbound type="feature" confirmed="yes">org.apache.abdera.protocol.util.CacheControlUtil$Directive.select(java.lang.String)</inbound>
                <inbound type="feature" confirmed="yes">org.apache.abdera.protocol.util.CacheControlUtil$Directive.static {}</inbound>
            </feature>
            <feature confirmed="no">
                <name>org.apache.abdera.protocol.util.CacheControlUtil$Directive.ordinal()</name>
                <inbound type="feature" confirmed="yes">org.apache.abdera.protocol.util.CacheControlUtil$1.static {}</inbound>
                <inbound type="feature" confirmed="yes">org.apache.abdera.protocol.util.CacheControlUtil.parseCacheControl(java.lang.String, org.apache.abdera.protocol.util.AbstractRequest)</inbound>
                <inbound type="feature" confirmed="yes">org.apache.abdera.protocol.util.CacheControlUtil.parseCacheControl(java.lang.String, org.apache.abdera.protocol.util.AbstractResponse)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.protocol.util.CacheControlUtil$Directive.select(java.lang.String)</name>
                <outbound type="class" confirmed="no">java.lang.Exception</outbound>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="feature" confirmed="no">java.lang.String.replaceAll(java.lang.String, java.lang.String)</outbound>
                <outbound type="feature" confirmed="no">java.lang.String.toUpperCase()</outbound>
                <outbound type="feature" confirmed="yes">org.apache.abdera.protocol.util.CacheControlUtil$Directive.UNKNOWN</outbound>
                <outbound type="feature" confirmed="yes">org.apache.abdera.protocol.util.CacheControlUtil$Directive.valueOf(java.lang.String)</outbound>
                <inbound type="feature" confirmed="yes">org.apache.abdera.protocol.util.CacheControlUtil$CacheControlParser.CacheControlUtil$CacheControlParser(java.lang.String)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.protocol.util.CacheControlUtil$Directive.static {}</name>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="feature" confirmed="yes">org.apache.abdera.protocol.util.CacheControlUtil$Directive.$VALUES</outbound>
                <outbound type="feature" confirmed="yes">org.apache.abdera.protocol.util.CacheControlUtil$Directive.CacheControlUtil$Directive(java.lang.String, int)</outbound>
                <outbound type="feature" confirmed="yes">org.apache.abdera.protocol.util.CacheControlUtil$Directive.MAXAGE</outbound>
                <outbound type="feature" confirmed="yes">org.apache.abdera.protocol.util.CacheControlUtil$Directive.MAXSTALE</outbound>
                <outbound type="feature" confirmed="yes">org.apache.abdera.protocol.util.CacheControlUtil$Directive.MINFRESH</outbound>
                <outbound type="feature" confirmed="yes">org.apache.abdera.protocol.util.CacheControlUtil$Directive.MUSTREVALIDATE</outbound>
                <outbound type="feature" confirmed="yes">org.apache.abdera.protocol.util.CacheControlUtil$Directive.NOCACHE</outbound>
                <outbound type="feature" confirmed="yes">org.apache.abdera.protocol.util.CacheControlUtil$Directive.NOSTORE</outbound>
                <outbound type="feature" confirmed="yes">org.apache.abdera.protocol.util.CacheControlUtil$Directive.NOTRANSFORM</outbound>
                <outbound type="feature" confirmed="yes">org.apache.abdera.protocol.util.CacheControlUtil$Directive.ONLYIFCACHED</outbound>
                <outbound type="feature" confirmed="yes">org.apache.abdera.protocol.util.CacheControlUtil$Directive.PRIVATE</outbound>
                <outbound type="feature" confirmed="yes">org.apache.abdera.protocol.util.CacheControlUtil$Directive.PROXYREVALIDATE</outbound>
                <outbound type="feature" confirmed="yes">org.apache.abdera.protocol.util.CacheControlUtil$Directive.PUBLIC</outbound>
                <outbound type="feature" confirmed="yes">org.apache.abdera.protocol.util.CacheControlUtil$Directive.SMAXAGE</outbound>
                <outbound type="feature" confirmed="yes">org.apache.abdera.protocol.util.CacheControlUtil$Directive.UNKNOWN</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.protocol.util.CacheControlUtil$Directive.valueOf(java.lang.String)</name>
                <outbound type="class" confirmed="no">java.lang.Class</outbound>
                <outbound type="class" confirmed="no">java.lang.Enum</outbound>
                <outbound type="feature" confirmed="no">java.lang.Enum.valueOf(java.lang.Class, java.lang.String)</outbound>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <inbound type="feature" confirmed="yes">org.apache.abdera.protocol.util.CacheControlUtil$Directive.select(java.lang.String)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.protocol.util.CacheControlUtil$Directive.values()</name>
                <outbound type="class" confirmed="no">java.lang.Object</outbound>
                <outbound type="feature" confirmed="yes">org.apache.abdera.protocol.util.CacheControlUtil$Directive.$VALUES</outbound>
                <outbound type="class" confirmed="no">org.apache.abdera.protocol.util.CacheControlUtil$Directive[]</outbound>
                <outbound type="feature" confirmed="no">org.apache.abdera.protocol.util.CacheControlUtil$Directive[].clone()</outbound>
                <inbound type="feature" confirmed="yes">org.apache.abdera.protocol.util.CacheControlUtil$1.static {}</inbound>
            </feature>
        </class>
        <class confirmed="no">
            <name>org.apache.abdera.protocol.util.CacheControlUtil$Directive[]</name>
            <inbound type="feature" confirmed="yes">org.apache.abdera.protocol.util.CacheControlUtil$Directive.values()</inbound>
            <feature confirmed="no">
                <name>org.apache.abdera.protocol.util.CacheControlUtil$Directive[].clone()</name>
                <inbound type="feature" confirmed="yes">org.apache.abdera.protocol.util.CacheControlUtil$Directive.values()</inbound>
            </feature>
        </class>
        <class confirmed="yes">
            <name>org.apache.abdera.protocol.util.CacheControlUtil$Idempotent</name>
            <outbound type="class" confirmed="no">java.lang.Enum</outbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.protocol.util.CacheControlUtil.isIdempotent(java.lang.String)</inbound>
            <feature confirmed="yes">
                <name>org.apache.abdera.protocol.util.CacheControlUtil$Idempotent.$VALUES</name>
                <inbound type="feature" confirmed="yes">org.apache.abdera.protocol.util.CacheControlUtil$Idempotent.static {}</inbound>
                <inbound type="feature" confirmed="yes">org.apache.abdera.protocol.util.CacheControlUtil$Idempotent.values()</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.protocol.util.CacheControlUtil$Idempotent.CacheControlUtil$Idempotent(java.lang.String, int)</name>
                <outbound type="feature" confirmed="no">java.lang.Enum.Enum(java.lang.String, int)</outbound>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <inbound type="feature" confirmed="yes">org.apache.abdera.protocol.util.CacheControlUtil$Idempotent.static {}</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.protocol.util.CacheControlUtil$Idempotent.GET</name>
                <inbound type="feature" confirmed="yes">org.apache.abdera.protocol.util.CacheControlUtil$Idempotent.static {}</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.protocol.util.CacheControlUtil$Idempotent.HEAD</name>
                <inbound type="feature" confirmed="yes">org.apache.abdera.protocol.util.CacheControlUtil$Idempotent.static {}</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.protocol.util.CacheControlUtil$Idempotent.OPTIONS</name>
                <inbound type="feature" confirmed="yes">org.apache.abdera.protocol.util.CacheControlUtil$Idempotent.static {}</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.protocol.util.CacheControlUtil$Idempotent.static {}</name>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="feature" confirmed="yes">org.apache.abdera.protocol.util.CacheControlUtil$Idempotent.$VALUES</outbound>
                <outbound type="feature" confirmed="yes">org.apache.abdera.protocol.util.CacheControlUtil$Idempotent.CacheControlUtil$Idempotent(java.lang.String, int)</outbound>
                <outbound type="feature" confirmed="yes">org.apache.abdera.protocol.util.CacheControlUtil$Idempotent.GET</outbound>
                <outbound type="feature" confirmed="yes">org.apache.abdera.protocol.util.CacheControlUtil$Idempotent.HEAD</outbound>
                <outbound type="feature" confirmed="yes">org.apache.abdera.protocol.util.CacheControlUtil$Idempotent.OPTIONS</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.protocol.util.CacheControlUtil$Idempotent.valueOf(java.lang.String)</name>
                <outbound type="class" confirmed="no">java.lang.Class</outbound>
                <outbound type="class" confirmed="no">java.lang.Enum</outbound>
                <outbound type="feature" confirmed="no">java.lang.Enum.valueOf(java.lang.Class, java.lang.String)</outbound>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <inbound type="feature" confirmed="yes">org.apache.abdera.protocol.util.CacheControlUtil.isIdempotent(java.lang.String)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.protocol.util.CacheControlUtil$Idempotent.values()</name>
                <outbound type="class" confirmed="no">java.lang.Object</outbound>
                <outbound type="feature" confirmed="yes">org.apache.abdera.protocol.util.CacheControlUtil$Idempotent.$VALUES</outbound>
                <outbound type="class" confirmed="no">org.apache.abdera.protocol.util.CacheControlUtil$Idempotent[]</outbound>
                <outbound type="feature" confirmed="no">org.apache.abdera.protocol.util.CacheControlUtil$Idempotent[].clone()</outbound>
            </feature>
        </class>
        <class confirmed="no">
            <name>org.apache.abdera.protocol.util.CacheControlUtil$Idempotent[]</name>
            <inbound type="feature" confirmed="yes">org.apache.abdera.protocol.util.CacheControlUtil$Idempotent.values()</inbound>
            <feature confirmed="no">
                <name>org.apache.abdera.protocol.util.CacheControlUtil$Idempotent[].clone()</name>
                <inbound type="feature" confirmed="yes">org.apache.abdera.protocol.util.CacheControlUtil$Idempotent.values()</inbound>
            </feature>
        </class>
        <class confirmed="yes">
            <name>org.apache.abdera.protocol.util.PoolManager</name>
            <outbound type="class" confirmed="no">java.lang.Object</outbound>
            <outbound type="class" confirmed="yes">org.apache.abdera.protocol.ItemManager</outbound>
            <inbound type="class" confirmed="yes">org.apache.abdera.protocol.util.AbstractItemManager</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.protocol.util.PoolManager$1.PoolManager$1(org.apache.abdera.protocol.util.PoolManager, int)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.protocol.util.PoolManager$1.this$0</inbound>
            <feature confirmed="yes">
                <name>org.apache.abdera.protocol.util.PoolManager.DEFAULT_SIZE</name>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.protocol.util.PoolManager.PoolManager()</name>
                <outbound type="feature" confirmed="yes">org.apache.abdera.protocol.util.PoolManager.PoolManager(int)</outbound>
                <inbound type="feature" confirmed="yes">org.apache.abdera.protocol.util.AbstractItemManager.AbstractItemManager()</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.protocol.util.PoolManager.PoolManager(int)</name>
                <outbound type="feature" confirmed="no">java.lang.Object.Object()</outbound>
                <outbound type="class" confirmed="no">java.util.Stack</outbound>
                <outbound type="feature" confirmed="yes">org.apache.abdera.protocol.util.PoolManager.initStack(int)</outbound>
                <outbound type="feature" confirmed="yes">org.apache.abdera.protocol.util.PoolManager.pool</outbound>
                <inbound type="feature" confirmed="yes">org.apache.abdera.protocol.util.AbstractItemManager.AbstractItemManager(int)</inbound>
                <inbound type="feature" confirmed="yes">org.apache.abdera.protocol.util.PoolManager.PoolManager()</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.protocol.util.PoolManager.getInstance()</name>
                <outbound type="class" confirmed="no">java.lang.Object</outbound>
                <outbound type="class" confirmed="no">java.util.Stack</outbound>
                <outbound type="feature" confirmed="no">java.util.Stack.empty()</outbound>
                <outbound type="feature" confirmed="no">java.util.Stack.pop()</outbound>
                <outbound type="feature" confirmed="yes">org.apache.abdera.protocol.util.PoolManager.internalNewInstance()</outbound>
                <outbound type="feature" confirmed="yes">org.apache.abdera.protocol.util.PoolManager.pool</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.protocol.util.PoolManager.initStack(int)</name>
                <outbound type="class" confirmed="no">java.util.Stack</outbound>
                <outbound type="feature" confirmed="yes">org.apache.abdera.protocol.util.PoolManager$1.PoolManager$1(org.apache.abdera.protocol.util.PoolManager, int)</outbound>
                <inbound type="feature" confirmed="yes">org.apache.abdera.protocol.util.PoolManager.PoolManager(int)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.protocol.util.PoolManager.internalNewInstance()</name>
                <outbound type="class" confirmed="no">java.lang.Object</outbound>
                <inbound type="feature" confirmed="yes">org.apache.abdera.protocol.util.PoolManager.getInstance()</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.protocol.util.PoolManager.pool</name>
                <outbound type="class" confirmed="no">java.util.Stack</outbound>
                <inbound type="feature" confirmed="yes">org.apache.abdera.protocol.util.PoolManager.PoolManager(int)</inbound>
                <inbound type="feature" confirmed="yes">org.apache.abdera.protocol.util.PoolManager.getInstance()</inbound>
                <inbound type="feature" confirmed="yes">org.apache.abdera.protocol.util.PoolManager.release(java.lang.Object)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.protocol.util.PoolManager.release(java.lang.Object)</name>
                <outbound type="class" confirmed="no">java.lang.Object</outbound>
                <outbound type="class" confirmed="no">java.util.Stack</outbound>
                <outbound type="feature" confirmed="no">java.util.Stack.contains(java.lang.Object)</outbound>
                <outbound type="feature" confirmed="no">java.util.Stack.push(java.lang.Object)</outbound>
                <outbound type="feature" confirmed="yes">org.apache.abdera.protocol.util.PoolManager.pool</outbound>
            </feature>
        </class>
        <class confirmed="yes">
            <name>org.apache.abdera.protocol.util.PoolManager$1</name>
            <outbound type="class" confirmed="no">java.util.Stack</outbound>
            <feature confirmed="yes">
                <name>org.apache.abdera.protocol.util.PoolManager$1.PoolManager$1(org.apache.abdera.protocol.util.PoolManager, int)</name>
                <outbound type="feature" confirmed="no">java.util.Stack.Stack()</outbound>
                <outbound type="class" confirmed="yes">org.apache.abdera.protocol.util.PoolManager</outbound>
                <outbound type="feature" confirmed="yes">org.apache.abdera.protocol.util.PoolManager$1.this$0</outbound>
                <outbound type="feature" confirmed="yes">org.apache.abdera.protocol.util.PoolManager$1.val$max</outbound>
                <inbound type="feature" confirmed="yes">org.apache.abdera.protocol.util.PoolManager.initStack(int)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.protocol.util.PoolManager$1.push(java.lang.Object)</name>
                <outbound type="class" confirmed="no">java.lang.Object</outbound>
                <outbound type="feature" confirmed="no">java.util.Stack.push(java.lang.Object)</outbound>
                <outbound type="feature" confirmed="no">org.apache.abdera.protocol.util.PoolManager$1.removeElementAt(int)</outbound>
                <outbound type="feature" confirmed="no">org.apache.abdera.protocol.util.PoolManager$1.size()</outbound>
                <outbound type="feature" confirmed="yes">org.apache.abdera.protocol.util.PoolManager$1.val$max</outbound>
            </feature>
            <feature confirmed="no">
                <name>org.apache.abdera.protocol.util.PoolManager$1.removeElementAt(int)</name>
                <inbound type="feature" confirmed="yes">org.apache.abdera.protocol.util.PoolManager$1.push(java.lang.Object)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.protocol.util.PoolManager$1.serialVersionUID</name>
            </feature>
            <feature confirmed="no">
                <name>org.apache.abdera.protocol.util.PoolManager$1.size()</name>
                <inbound type="feature" confirmed="yes">org.apache.abdera.protocol.util.PoolManager$1.push(java.lang.Object)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.protocol.util.PoolManager$1.this$0</name>
                <outbound type="class" confirmed="yes">org.apache.abdera.protocol.util.PoolManager</outbound>
                <inbound type="feature" confirmed="yes">org.apache.abdera.protocol.util.PoolManager$1.PoolManager$1(org.apache.abdera.protocol.util.PoolManager, int)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.protocol.util.PoolManager$1.val$max</name>
                <inbound type="feature" confirmed="yes">org.apache.abdera.protocol.util.PoolManager$1.PoolManager$1(org.apache.abdera.protocol.util.PoolManager, int)</inbound>
                <inbound type="feature" confirmed="yes">org.apache.abdera.protocol.util.PoolManager$1.push(java.lang.Object)</inbound>
            </feature>
        </class>
        <class confirmed="yes">
            <name>org.apache.abdera.protocol.util.ProtocolConstants</name>
            <outbound type="class" confirmed="no">java.lang.Object</outbound>
            <inbound type="class" confirmed="yes">org.apache.abdera.protocol.Message</inbound>
            <feature confirmed="yes">
                <name>org.apache.abdera.protocol.util.ProtocolConstants.NOCACHE</name>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.protocol.util.ProtocolConstants.NOSTORE</name>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.protocol.util.ProtocolConstants.NOTRANSFORM</name>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.protocol.util.ProtocolConstants.ONLYIFCACHED</name>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.protocol.util.ProtocolConstants.PRIVATE</name>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.protocol.util.ProtocolConstants.PROXYREVALIDATE</name>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.protocol.util.ProtocolConstants.PUBLIC</name>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.protocol.util.ProtocolConstants.REVALIDATE</name>
            </feature>
        </class>
    </package>
    <package confirmed="yes">
        <name>org.apache.abdera.util</name>
        <class confirmed="yes">
            <name>org.apache.abdera.util.AbderaConfiguration</name>
            <outbound type="class" confirmed="no">java.lang.Object</outbound>
            <outbound type="class" confirmed="yes">org.apache.abdera.util.Configuration</outbound>
            <outbound type="class" confirmed="yes">org.apache.abdera.util.Constants</outbound>
            <feature confirmed="yes">
                <name>org.apache.abdera.util.AbderaConfiguration.AbderaConfiguration()</name>
                <outbound type="class" confirmed="no">java.util.ResourceBundle</outbound>
                <outbound type="feature" confirmed="yes">org.apache.abdera.util.AbderaConfiguration.AbderaConfiguration(java.util.ResourceBundle)</outbound>
                <inbound type="feature" confirmed="yes">org.apache.abdera.util.AbderaConfiguration.getDefault()</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.util.AbderaConfiguration.AbderaConfiguration(java.util.ResourceBundle)</name>
                <outbound type="feature" confirmed="no">java.lang.Object.Object()</outbound>
                <outbound type="class" confirmed="no">java.util.List</outbound>
                <outbound type="class" confirmed="no">java.util.Locale</outbound>
                <outbound type="feature" confirmed="no">java.util.Locale.getDefault()</outbound>
                <outbound type="class" confirmed="no">java.util.Map</outbound>
                <outbound type="class" confirmed="no">java.util.ResourceBundle</outbound>
                <outbound type="feature" confirmed="yes">org.apache.abdera.util.AbderaConfiguration.bundle</outbound>
                <outbound type="feature" confirmed="yes">org.apache.abdera.util.AbderaConfiguration.factories</outbound>
                <outbound type="feature" confirmed="yes">org.apache.abdera.util.AbderaConfiguration.getBundle(java.util.Locale)</outbound>
                <outbound type="feature" confirmed="yes">org.apache.abdera.util.AbderaConfiguration.initNamedParsers()</outbound>
                <outbound type="feature" confirmed="yes">org.apache.abdera.util.AbderaConfiguration.initNamedWriters()</outbound>
                <outbound type="feature" confirmed="yes">org.apache.abdera.util.AbderaConfiguration.initStreamWriters()</outbound>
                <outbound type="feature" confirmed="yes">org.apache.abdera.util.AbderaConfiguration.loadExtensionFactories()</outbound>
                <outbound type="feature" confirmed="yes">org.apache.abdera.util.AbderaConfiguration.parsers</outbound>
                <outbound type="feature" confirmed="yes">org.apache.abdera.util.AbderaConfiguration.streamwriters</outbound>
                <outbound type="feature" confirmed="yes">org.apache.abdera.util.AbderaConfiguration.writers</outbound>
                <inbound type="feature" confirmed="yes">org.apache.abdera.util.AbderaConfiguration.AbderaConfiguration()</inbound>
                <inbound type="feature" confirmed="yes">org.apache.abdera.util.AbderaConfiguration.getDefault()</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.util.AbderaConfiguration.addExtensionFactory(org.apache.abdera.factory.ExtensionFactory)</name>
                <outbound type="class" confirmed="yes">org.apache.abdera.factory.ExtensionFactory</outbound>
                <outbound type="class" confirmed="yes">org.apache.abdera.util.Configuration</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.util.AbderaConfiguration.addNamedParser(org.apache.abdera.parser.NamedParser)</name>
                <outbound type="class" confirmed="yes">org.apache.abdera.parser.NamedParser</outbound>
                <outbound type="class" confirmed="yes">org.apache.abdera.util.Configuration</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.util.AbderaConfiguration.addNamedWriter(org.apache.abdera.writer.NamedWriter)</name>
                <outbound type="class" confirmed="yes">org.apache.abdera.util.Configuration</outbound>
                <outbound type="class" confirmed="yes">org.apache.abdera.writer.NamedWriter</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.util.AbderaConfiguration.addStreamWriter(java.lang.Class)</name>
                <outbound type="class" confirmed="no">java.lang.Class</outbound>
                <outbound type="class" confirmed="yes">org.apache.abdera.util.Configuration</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.util.AbderaConfiguration.bundle</name>
                <outbound type="class" confirmed="no">java.util.ResourceBundle</outbound>
                <inbound type="feature" confirmed="yes">org.apache.abdera.util.AbderaConfiguration.AbderaConfiguration(java.util.ResourceBundle)</inbound>
                <inbound type="feature" confirmed="yes">org.apache.abdera.util.AbderaConfiguration.getBundle()</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.util.AbderaConfiguration.clone()</name>
                <outbound type="class" confirmed="no">java.lang.CloneNotSupportedException</outbound>
                <outbound type="class" confirmed="no">java.lang.Object</outbound>
                <outbound type="feature" confirmed="no">java.lang.Object.clone()</outbound>
                <outbound type="feature" confirmed="no">java.lang.RuntimeException.RuntimeException(java.lang.Throwable)</outbound>
                <outbound type="class" confirmed="no">java.lang.Throwable</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.util.AbderaConfiguration.factories</name>
                <outbound type="class" confirmed="no">java.util.List</outbound>
                <inbound type="feature" confirmed="yes">org.apache.abdera.util.AbderaConfiguration.AbderaConfiguration(java.util.ResourceBundle)</inbound>
                <inbound type="feature" confirmed="yes">org.apache.abdera.util.AbderaConfiguration.getExtensionFactories()</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.util.AbderaConfiguration.getBundle()</name>
                <outbound type="class" confirmed="no">java.util.ResourceBundle</outbound>
                <outbound type="feature" confirmed="yes">org.apache.abdera.util.AbderaConfiguration.bundle</outbound>
                <inbound type="feature" confirmed="yes">org.apache.abdera.util.AbderaConfiguration.getConfigurationOption(java.lang.String)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.util.AbderaConfiguration.getBundle(java.util.Locale)</name>
                <outbound type="class" confirmed="no">java.lang.ClassLoader</outbound>
                <outbound type="class" confirmed="no">java.lang.Exception</outbound>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="class" confirmed="no">java.lang.Thread</outbound>
                <outbound type="feature" confirmed="no">java.lang.Thread.currentThread()</outbound>
                <outbound type="feature" confirmed="no">java.lang.Thread.getContextClassLoader()</outbound>
                <outbound type="class" confirmed="no">java.util.Locale</outbound>
                <outbound type="class" confirmed="no">java.util.ResourceBundle</outbound>
                <outbound type="feature" confirmed="no">java.util.ResourceBundle.getBundle(java.lang.String, java.util.Locale, java.lang.ClassLoader)</outbound>
                <inbound type="feature" confirmed="yes">org.apache.abdera.util.AbderaConfiguration.AbderaConfiguration(java.util.ResourceBundle)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.util.AbderaConfiguration.getConfigurationOption(java.lang.String)</name>
                <outbound type="class" confirmed="no">java.lang.Exception</outbound>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="feature" confirmed="no">java.lang.System.getProperty(java.lang.String)</outbound>
                <outbound type="class" confirmed="no">java.util.ResourceBundle</outbound>
                <outbound type="feature" confirmed="no">java.util.ResourceBundle.getString(java.lang.String)</outbound>
                <outbound type="feature" confirmed="yes">org.apache.abdera.util.AbderaConfiguration.getBundle()</outbound>
                <inbound type="feature" confirmed="yes">org.apache.abdera.util.AbderaConfiguration.getConfigurationOption(java.lang.String, java.lang.String)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.util.AbderaConfiguration.getConfigurationOption(java.lang.String, java.lang.String)</name>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="feature" confirmed="yes">org.apache.abdera.util.AbderaConfiguration.getConfigurationOption(java.lang.String)</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.util.AbderaConfiguration.getDefault()</name>
                <outbound type="class" confirmed="no">java.lang.Exception</outbound>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="class" confirmed="no">java.util.ResourceBundle</outbound>
                <outbound type="feature" confirmed="no">java.util.ResourceBundle.getBundle(java.lang.String)</outbound>
                <outbound type="feature" confirmed="yes">org.apache.abdera.util.AbderaConfiguration.AbderaConfiguration()</outbound>
                <outbound type="feature" confirmed="yes">org.apache.abdera.util.AbderaConfiguration.AbderaConfiguration(java.util.ResourceBundle)</outbound>
                <outbound type="class" confirmed="yes">org.apache.abdera.util.Configuration</outbound>
                <inbound type="feature" confirmed="yes">org.apache.abdera.Abdera.Abdera()</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.util.AbderaConfiguration.getExtensionFactories()</name>
                <outbound type="class" confirmed="no">java.util.List</outbound>
                <outbound type="feature" confirmed="yes">org.apache.abdera.util.AbderaConfiguration.factories</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.util.AbderaConfiguration.getName(java.lang.Class)</name>
                <outbound type="class" confirmed="no">java.lang.Class</outbound>
                <outbound type="feature" confirmed="no">java.lang.Class.getField(java.lang.String)</outbound>
                <outbound type="class" confirmed="no">java.lang.Exception</outbound>
                <outbound type="class" confirmed="no">java.lang.Object</outbound>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="class" confirmed="no">java.lang.reflect.Field</outbound>
                <outbound type="feature" confirmed="no">java.lang.reflect.Field.get(java.lang.Object)</outbound>
                <outbound type="feature" confirmed="no">java.lang.reflect.Field.getModifiers()</outbound>
                <outbound type="feature" confirmed="no">java.lang.reflect.Modifier.isStatic(int)</outbound>
                <inbound type="feature" confirmed="yes">org.apache.abdera.util.AbderaConfiguration.initStreamWriters()</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.util.AbderaConfiguration.getNamedParsers()</name>
                <outbound type="class" confirmed="no">java.util.Map</outbound>
                <outbound type="feature" confirmed="yes">org.apache.abdera.util.AbderaConfiguration.parsers</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.util.AbderaConfiguration.getNamedWriters()</name>
                <outbound type="class" confirmed="no">java.util.Map</outbound>
                <outbound type="feature" confirmed="yes">org.apache.abdera.util.AbderaConfiguration.writers</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.util.AbderaConfiguration.getStreamWriters()</name>
                <outbound type="class" confirmed="no">java.util.Map</outbound>
                <outbound type="feature" confirmed="yes">org.apache.abdera.util.AbderaConfiguration.streamwriters</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.util.AbderaConfiguration.initNamedParsers()</name>
                <outbound type="class" confirmed="no">java.lang.Iterable</outbound>
                <outbound type="feature" confirmed="no">java.lang.Iterable.iterator()</outbound>
                <outbound type="class" confirmed="no">java.lang.Object</outbound>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="feature" confirmed="no">java.lang.String.toLowerCase()</outbound>
                <outbound type="feature" confirmed="no">java.util.Collections.synchronizedMap(java.util.Map)</outbound>
                <outbound type="feature" confirmed="no">java.util.HashMap.HashMap()</outbound>
                <outbound type="class" confirmed="no">java.util.Iterator</outbound>
                <outbound type="feature" confirmed="no">java.util.Iterator.hasNext()</outbound>
                <outbound type="feature" confirmed="no">java.util.Iterator.next()</outbound>
                <outbound type="class" confirmed="no">java.util.Map</outbound>
                <outbound type="feature" confirmed="no">java.util.Map.put(java.lang.Object, java.lang.Object)</outbound>
                <outbound type="class" confirmed="yes">org.apache.abdera.parser.NamedParser</outbound>
                <outbound type="feature" confirmed="no">org.apache.abdera.parser.NamedParser.getName()</outbound>
                <outbound type="feature" confirmed="yes">org.apache.abdera.util.Discover.locate(java.lang.String, java.lang.Object[])</outbound>
                <inbound type="feature" confirmed="yes">org.apache.abdera.util.AbderaConfiguration.AbderaConfiguration(java.util.ResourceBundle)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.util.AbderaConfiguration.initNamedWriters()</name>
                <outbound type="class" confirmed="no">java.lang.Iterable</outbound>
                <outbound type="feature" confirmed="no">java.lang.Iterable.iterator()</outbound>
                <outbound type="class" confirmed="no">java.lang.Object</outbound>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="feature" confirmed="no">java.lang.String.toLowerCase()</outbound>
                <outbound type="feature" confirmed="no">java.util.Collections.synchronizedMap(java.util.Map)</outbound>
                <outbound type="feature" confirmed="no">java.util.HashMap.HashMap()</outbound>
                <outbound type="class" confirmed="no">java.util.Iterator</outbound>
                <outbound type="feature" confirmed="no">java.util.Iterator.hasNext()</outbound>
                <outbound type="feature" confirmed="no">java.util.Iterator.next()</outbound>
                <outbound type="class" confirmed="no">java.util.Map</outbound>
                <outbound type="feature" confirmed="no">java.util.Map.put(java.lang.Object, java.lang.Object)</outbound>
                <outbound type="feature" confirmed="yes">org.apache.abdera.util.Discover.locate(java.lang.String, java.lang.Object[])</outbound>
                <outbound type="class" confirmed="yes">org.apache.abdera.writer.NamedWriter</outbound>
                <outbound type="feature" confirmed="no">org.apache.abdera.writer.NamedWriter.getName()</outbound>
                <inbound type="feature" confirmed="yes">org.apache.abdera.util.AbderaConfiguration.AbderaConfiguration(java.util.ResourceBundle)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.util.AbderaConfiguration.initStreamWriters()</name>
                <outbound type="class" confirmed="no">java.lang.Class</outbound>
                <outbound type="class" confirmed="no">java.lang.Iterable</outbound>
                <outbound type="feature" confirmed="no">java.lang.Iterable.iterator()</outbound>
                <outbound type="class" confirmed="no">java.lang.Object</outbound>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="feature" confirmed="no">java.lang.String.toLowerCase()</outbound>
                <outbound type="feature" confirmed="no">java.util.Collections.synchronizedMap(java.util.Map)</outbound>
                <outbound type="feature" confirmed="no">java.util.HashMap.HashMap()</outbound>
                <outbound type="class" confirmed="no">java.util.Iterator</outbound>
                <outbound type="feature" confirmed="no">java.util.Iterator.hasNext()</outbound>
                <outbound type="feature" confirmed="no">java.util.Iterator.next()</outbound>
                <outbound type="class" confirmed="no">java.util.Map</outbound>
                <outbound type="feature" confirmed="no">java.util.Map.put(java.lang.Object, java.lang.Object)</outbound>
                <outbound type="class" confirmed="yes">org.apache.abdera.factory.StreamBuilder</outbound>
                <outbound type="feature" confirmed="yes">org.apache.abdera.util.AbderaConfiguration.getName(java.lang.Class)</outbound>
                <outbound type="feature" confirmed="yes">org.apache.abdera.util.Discover.locate(java.lang.String, boolean, java.lang.Object[])</outbound>
                <inbound type="feature" confirmed="yes">org.apache.abdera.util.AbderaConfiguration.AbderaConfiguration(java.util.ResourceBundle)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.util.AbderaConfiguration.loadExtensionFactories()</name>
                <outbound type="class" confirmed="no">java.lang.Iterable</outbound>
                <outbound type="feature" confirmed="no">java.lang.Iterable.iterator()</outbound>
                <outbound type="class" confirmed="no">java.lang.Object</outbound>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="feature" confirmed="no">java.util.ArrayList.ArrayList()</outbound>
                <outbound type="class" confirmed="no">java.util.Iterator</outbound>
                <outbound type="feature" confirmed="no">java.util.Iterator.hasNext()</outbound>
                <outbound type="feature" confirmed="no">java.util.Iterator.next()</outbound>
                <outbound type="class" confirmed="no">java.util.List</outbound>
                <outbound type="feature" confirmed="no">java.util.List.add(java.lang.Object)</outbound>
                <outbound type="class" confirmed="yes">org.apache.abdera.factory.ExtensionFactory</outbound>
                <outbound type="feature" confirmed="yes">org.apache.abdera.util.Discover.locate(java.lang.String, java.lang.Object[])</outbound>
                <inbound type="feature" confirmed="yes">org.apache.abdera.util.AbderaConfiguration.AbderaConfiguration(java.util.ResourceBundle)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.util.AbderaConfiguration.log</name>
                <outbound type="class" confirmed="no">org.apache.commons.logging.Log</outbound>
                <inbound type="feature" confirmed="yes">org.apache.abdera.util.AbderaConfiguration.static {}</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.util.AbderaConfiguration.newFactoryInstance(org.apache.abdera.Abdera)</name>
                <outbound type="class" confirmed="no">java.lang.Object</outbound>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="class" confirmed="yes">org.apache.abdera.Abdera</outbound>
                <outbound type="feature" confirmed="yes">org.apache.abdera.Abdera.getConfiguration()</outbound>
                <outbound type="class" confirmed="yes">org.apache.abdera.factory.Factory</outbound>
                <outbound type="class" confirmed="yes">org.apache.abdera.util.Configuration</outbound>
                <outbound type="feature" confirmed="yes">org.apache.abdera.util.Configuration.getConfigurationOption(java.lang.String, java.lang.String)</outbound>
                <outbound type="feature" confirmed="yes">org.apache.abdera.util.Discover.locate(java.lang.String, java.lang.String, java.lang.Object[])</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.util.AbderaConfiguration.newParserFactoryInstance(org.apache.abdera.Abdera)</name>
                <outbound type="class" confirmed="no">java.lang.Object</outbound>
                <outbound type="class" confirmed="no">java.lang.RuntimeException</outbound>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="class" confirmed="no">java.lang.Throwable</outbound>
                <outbound type="class" confirmed="yes">org.apache.abdera.Abdera</outbound>
                <outbound type="feature" confirmed="yes">org.apache.abdera.Abdera.getConfiguration()</outbound>
                <outbound type="class" confirmed="yes">org.apache.abdera.parser.ParserFactory</outbound>
                <outbound type="feature" confirmed="yes">org.apache.abdera.util.AbderaConfiguration.throwex(java.lang.String, java.lang.String, java.lang.Throwable)</outbound>
                <outbound type="class" confirmed="yes">org.apache.abdera.util.Configuration</outbound>
                <outbound type="feature" confirmed="yes">org.apache.abdera.util.Configuration.getConfigurationOption(java.lang.String, java.lang.String)</outbound>
                <outbound type="feature" confirmed="yes">org.apache.abdera.util.Discover.locate(java.lang.String, java.lang.String, java.lang.Object[])</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.util.AbderaConfiguration.newParserInstance(org.apache.abdera.Abdera)</name>
                <outbound type="class" confirmed="no">java.lang.Object</outbound>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="class" confirmed="yes">org.apache.abdera.Abdera</outbound>
                <outbound type="feature" confirmed="yes">org.apache.abdera.Abdera.getConfiguration()</outbound>
                <outbound type="class" confirmed="yes">org.apache.abdera.parser.Parser</outbound>
                <outbound type="class" confirmed="yes">org.apache.abdera.util.Configuration</outbound>
                <outbound type="feature" confirmed="yes">org.apache.abdera.util.Configuration.getConfigurationOption(java.lang.String, java.lang.String)</outbound>
                <outbound type="feature" confirmed="yes">org.apache.abdera.util.Discover.locate(java.lang.String, java.lang.String, java.lang.Object[])</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.util.AbderaConfiguration.newStreamWriterInstance(org.apache.abdera.Abdera)</name>
                <outbound type="class" confirmed="no">java.lang.Object</outbound>
                <outbound type="class" confirmed="no">java.lang.RuntimeException</outbound>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="class" confirmed="no">java.lang.Throwable</outbound>
                <outbound type="class" confirmed="yes">org.apache.abdera.Abdera</outbound>
                <outbound type="feature" confirmed="yes">org.apache.abdera.Abdera.getConfiguration()</outbound>
                <outbound type="feature" confirmed="yes">org.apache.abdera.util.AbderaConfiguration.throwex(java.lang.String, java.lang.String, java.lang.Throwable)</outbound>
                <outbound type="class" confirmed="yes">org.apache.abdera.util.Configuration</outbound>
                <outbound type="feature" confirmed="yes">org.apache.abdera.util.Configuration.getConfigurationOption(java.lang.String, java.lang.String)</outbound>
                <outbound type="feature" confirmed="yes">org.apache.abdera.util.Discover.locate(java.lang.String, java.lang.String, java.lang.Object[])</outbound>
                <outbound type="class" confirmed="yes">org.apache.abdera.writer.StreamWriter</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.util.AbderaConfiguration.newWriterFactoryInstance(org.apache.abdera.Abdera)</name>
                <outbound type="class" confirmed="no">java.lang.Object</outbound>
                <outbound type="class" confirmed="no">java.lang.RuntimeException</outbound>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="class" confirmed="no">java.lang.Throwable</outbound>
                <outbound type="class" confirmed="yes">org.apache.abdera.Abdera</outbound>
                <outbound type="feature" confirmed="yes">org.apache.abdera.Abdera.getConfiguration()</outbound>
                <outbound type="feature" confirmed="yes">org.apache.abdera.util.AbderaConfiguration.throwex(java.lang.String, java.lang.String, java.lang.Throwable)</outbound>
                <outbound type="class" confirmed="yes">org.apache.abdera.util.Configuration</outbound>
                <outbound type="feature" confirmed="yes">org.apache.abdera.util.Configuration.getConfigurationOption(java.lang.String, java.lang.String)</outbound>
                <outbound type="feature" confirmed="yes">org.apache.abdera.util.Discover.locate(java.lang.String, java.lang.String, java.lang.Object[])</outbound>
                <outbound type="class" confirmed="yes">org.apache.abdera.writer.WriterFactory</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.util.AbderaConfiguration.newWriterInstance(org.apache.abdera.Abdera)</name>
                <outbound type="class" confirmed="no">java.lang.Object</outbound>
                <outbound type="class" confirmed="no">java.lang.RuntimeException</outbound>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="class" confirmed="no">java.lang.Throwable</outbound>
                <outbound type="class" confirmed="yes">org.apache.abdera.Abdera</outbound>
                <outbound type="feature" confirmed="yes">org.apache.abdera.Abdera.getConfiguration()</outbound>
                <outbound type="feature" confirmed="yes">org.apache.abdera.util.AbderaConfiguration.throwex(java.lang.String, java.lang.String, java.lang.Throwable)</outbound>
                <outbound type="class" confirmed="yes">org.apache.abdera.util.Configuration</outbound>
                <outbound type="feature" confirmed="yes">org.apache.abdera.util.Configuration.getConfigurationOption(java.lang.String, java.lang.String)</outbound>
                <outbound type="feature" confirmed="yes">org.apache.abdera.util.Discover.locate(java.lang.String, java.lang.String, java.lang.Object[])</outbound>
                <outbound type="class" confirmed="yes">org.apache.abdera.writer.Writer</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.util.AbderaConfiguration.newXPathInstance(org.apache.abdera.Abdera)</name>
                <outbound type="class" confirmed="no">java.lang.Object</outbound>
                <outbound type="class" confirmed="no">java.lang.RuntimeException</outbound>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="class" confirmed="no">java.lang.Throwable</outbound>
                <outbound type="class" confirmed="yes">org.apache.abdera.Abdera</outbound>
                <outbound type="feature" confirmed="yes">org.apache.abdera.Abdera.getConfiguration()</outbound>
                <outbound type="feature" confirmed="yes">org.apache.abdera.util.AbderaConfiguration.throwex(java.lang.String, java.lang.String, java.lang.Throwable)</outbound>
                <outbound type="class" confirmed="yes">org.apache.abdera.util.Configuration</outbound>
                <outbound type="feature" confirmed="yes">org.apache.abdera.util.Configuration.getConfigurationOption(java.lang.String, java.lang.String)</outbound>
                <outbound type="feature" confirmed="yes">org.apache.abdera.util.Discover.locate(java.lang.String, java.lang.String, java.lang.Object[])</outbound>
                <outbound type="class" confirmed="yes">org.apache.abdera.xpath.XPath</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.util.AbderaConfiguration.parsers</name>
                <outbound type="class" confirmed="no">java.util.Map</outbound>
                <inbound type="feature" confirmed="yes">org.apache.abdera.util.AbderaConfiguration.AbderaConfiguration(java.util.ResourceBundle)</inbound>
                <inbound type="feature" confirmed="yes">org.apache.abdera.util.AbderaConfiguration.getNamedParsers()</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.util.AbderaConfiguration.serialVersionUID</name>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.util.AbderaConfiguration.static {}</name>
                <outbound type="class" confirmed="no">java.lang.Class</outbound>
                <outbound type="feature" confirmed="yes">org.apache.abdera.util.AbderaConfiguration.log</outbound>
                <outbound type="class" confirmed="no">org.apache.commons.logging.Log</outbound>
                <outbound type="feature" confirmed="no">org.apache.commons.logging.LogFactory.getLog(java.lang.Class)</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.util.AbderaConfiguration.streamwriters</name>
                <outbound type="class" confirmed="no">java.util.Map</outbound>
                <inbound type="feature" confirmed="yes">org.apache.abdera.util.AbderaConfiguration.AbderaConfiguration(java.util.ResourceBundle)</inbound>
                <inbound type="feature" confirmed="yes">org.apache.abdera.util.AbderaConfiguration.getStreamWriters()</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.util.AbderaConfiguration.throwex(java.lang.String, java.lang.String, java.lang.Throwable)</name>
                <outbound type="class" confirmed="no">java.lang.Object</outbound>
                <outbound type="class" confirmed="no">java.lang.RuntimeException</outbound>
                <outbound type="feature" confirmed="no">java.lang.RuntimeException.RuntimeException(java.lang.String, java.lang.Throwable)</outbound>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="class" confirmed="no">java.lang.Throwable</outbound>
                <outbound type="feature" confirmed="no">org.apache.abdera.i18n.text.Localizer.sprintf(java.lang.String, java.lang.Object[])</outbound>
                <inbound type="feature" confirmed="yes">org.apache.abdera.util.AbderaConfiguration.newParserFactoryInstance(org.apache.abdera.Abdera)</inbound>
                <inbound type="feature" confirmed="yes">org.apache.abdera.util.AbderaConfiguration.newStreamWriterInstance(org.apache.abdera.Abdera)</inbound>
                <inbound type="feature" confirmed="yes">org.apache.abdera.util.AbderaConfiguration.newWriterFactoryInstance(org.apache.abdera.Abdera)</inbound>
                <inbound type="feature" confirmed="yes">org.apache.abdera.util.AbderaConfiguration.newWriterInstance(org.apache.abdera.Abdera)</inbound>
                <inbound type="feature" confirmed="yes">org.apache.abdera.util.AbderaConfiguration.newXPathInstance(org.apache.abdera.Abdera)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.util.AbderaConfiguration.writers</name>
                <outbound type="class" confirmed="no">java.util.Map</outbound>
                <inbound type="feature" confirmed="yes">org.apache.abdera.util.AbderaConfiguration.AbderaConfiguration(java.util.ResourceBundle)</inbound>
                <inbound type="feature" confirmed="yes">org.apache.abdera.util.AbderaConfiguration.getNamedWriters()</inbound>
            </feature>
        </class>
        <class confirmed="yes">
            <name>org.apache.abdera.util.AbderaDataSource</name>
            <outbound type="class" confirmed="no">java.lang.Object</outbound>
            <outbound type="class" confirmed="no">javax.activation.DataSource</outbound>
            <feature confirmed="yes">
                <name>org.apache.abdera.util.AbderaDataSource.AbderaDataSource(org.apache.abdera.model.Base)</name>
                <outbound type="class" confirmed="no">java.lang.Class</outbound>
                <outbound type="feature" confirmed="no">java.lang.Class.getName()</outbound>
                <outbound type="feature" confirmed="no">java.lang.Object.Object()</outbound>
                <outbound type="feature" confirmed="no">java.lang.Object.getClass()</outbound>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="class" confirmed="yes">org.apache.abdera.model.Base</outbound>
                <outbound type="feature" confirmed="yes">org.apache.abdera.util.AbderaDataSource.data</outbound>
                <outbound type="feature" confirmed="yes">org.apache.abdera.util.AbderaDataSource.mimetype</outbound>
                <outbound type="feature" confirmed="yes">org.apache.abdera.util.AbderaDataSource.name</outbound>
                <outbound type="feature" confirmed="yes">org.apache.abdera.util.AbderaDataSource.read(org.apache.abdera.model.Base)</outbound>
                <outbound type="feature" confirmed="yes">org.apache.abdera.util.MimeTypeHelper.getMimeType(org.apache.abdera.model.Base)</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.util.AbderaDataSource.data</name>
                <inbound type="feature" confirmed="yes">org.apache.abdera.util.AbderaDataSource.AbderaDataSource(org.apache.abdera.model.Base)</inbound>
                <inbound type="feature" confirmed="yes">org.apache.abdera.util.AbderaDataSource.getInputStream()</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.util.AbderaDataSource.getContentType()</name>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="feature" confirmed="yes">org.apache.abdera.util.AbderaDataSource.mimetype</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.util.AbderaDataSource.getInputStream()</name>
                <outbound type="feature" confirmed="no">java.io.ByteArrayInputStream.ByteArrayInputStream(byte[])</outbound>
                <outbound type="class" confirmed="no">java.io.IOException</outbound>
                <outbound type="class" confirmed="no">java.io.InputStream</outbound>
                <outbound type="feature" confirmed="yes">org.apache.abdera.util.AbderaDataSource.data</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.util.AbderaDataSource.getName()</name>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="class" confirmed="no">java.lang.StringBuilder</outbound>
                <outbound type="feature" confirmed="no">java.lang.StringBuilder.StringBuilder()</outbound>
                <outbound type="feature" confirmed="no">java.lang.StringBuilder.append(java.lang.String)</outbound>
                <outbound type="feature" confirmed="no">java.lang.StringBuilder.toString()</outbound>
                <outbound type="feature" confirmed="yes">org.apache.abdera.util.AbderaDataSource.name</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.util.AbderaDataSource.getOutputStream()</name>
                <outbound type="class" confirmed="no">java.io.IOException</outbound>
                <outbound type="class" confirmed="no">java.io.OutputStream</outbound>
                <outbound type="feature" confirmed="no">java.lang.UnsupportedOperationException.UnsupportedOperationException()</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.util.AbderaDataSource.mimetype</name>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <inbound type="feature" confirmed="yes">org.apache.abdera.util.AbderaDataSource.AbderaDataSource(org.apache.abdera.model.Base)</inbound>
                <inbound type="feature" confirmed="yes">org.apache.abdera.util.AbderaDataSource.getContentType()</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.util.AbderaDataSource.name</name>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <inbound type="feature" confirmed="yes">org.apache.abdera.util.AbderaDataSource.AbderaDataSource(org.apache.abdera.model.Base)</inbound>
                <inbound type="feature" confirmed="yes">org.apache.abdera.util.AbderaDataSource.getName()</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.util.AbderaDataSource.read(org.apache.abdera.model.Base)</name>
                <outbound type="feature" confirmed="no">java.io.ByteArrayOutputStream.ByteArrayOutputStream()</outbound>
                <outbound type="feature" confirmed="no">java.io.ByteArrayOutputStream.toByteArray()</outbound>
                <outbound type="class" confirmed="no">java.io.IOException</outbound>
                <outbound type="class" confirmed="no">java.io.OutputStream</outbound>
                <outbound type="class" confirmed="yes">org.apache.abdera.model.Base</outbound>
                <outbound type="feature" confirmed="yes">org.apache.abdera.model.Base.writeTo(java.io.OutputStream)</outbound>
                <inbound type="feature" confirmed="yes">org.apache.abdera.util.AbderaDataSource.AbderaDataSource(org.apache.abdera.model.Base)</inbound>
            </feature>
        </class>
        <class confirmed="yes">
            <name>org.apache.abdera.util.AbderaResult</name>
            <outbound type="class" confirmed="no">javax.xml.transform.Result</outbound>
            <outbound type="class" confirmed="no">javax.xml.transform.stream.StreamResult</outbound>
            <feature confirmed="yes">
                <name>org.apache.abdera.util.AbderaResult.AbderaResult()</name>
                <outbound type="class" confirmed="yes">org.apache.abdera.Abdera</outbound>
                <outbound type="feature" confirmed="yes">org.apache.abdera.Abdera.Abdera()</outbound>
                <outbound type="feature" confirmed="yes">org.apache.abdera.util.AbderaResult.AbderaResult(org.apache.abdera.Abdera)</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.util.AbderaResult.AbderaResult(org.apache.abdera.Abdera)</name>
                <outbound type="feature" confirmed="no">javax.xml.transform.stream.StreamResult.StreamResult()</outbound>
                <outbound type="class" confirmed="yes">org.apache.abdera.Abdera</outbound>
                <outbound type="feature" confirmed="yes">org.apache.abdera.util.AbderaResult.abdera</outbound>
                <inbound type="feature" confirmed="yes">org.apache.abdera.util.AbderaResult.AbderaResult()</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.util.AbderaResult.abdera</name>
                <outbound type="class" confirmed="yes">org.apache.abdera.Abdera</outbound>
                <inbound type="feature" confirmed="yes">org.apache.abdera.util.AbderaResult.AbderaResult(org.apache.abdera.Abdera)</inbound>
                <inbound type="feature" confirmed="yes">org.apache.abdera.util.AbderaResult.getDocument()</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.util.AbderaResult.doc</name>
                <outbound type="class" confirmed="yes">org.apache.abdera.model.Document</outbound>
                <inbound type="feature" confirmed="yes">org.apache.abdera.util.AbderaResult.getDocument()</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.util.AbderaResult.getDocument()</name>
                <outbound type="class" confirmed="no">java.io.InputStream</outbound>
                <outbound type="class" confirmed="no">java.io.PipedInputStream</outbound>
                <outbound type="class" confirmed="yes">org.apache.abdera.Abdera</outbound>
                <outbound type="feature" confirmed="yes">org.apache.abdera.Abdera.getParser()</outbound>
                <outbound type="class" confirmed="yes">org.apache.abdera.model.Document</outbound>
                <outbound type="class" confirmed="yes">org.apache.abdera.parser.Parser</outbound>
                <outbound type="feature" confirmed="yes">org.apache.abdera.parser.Parser.parse(java.io.InputStream)</outbound>
                <outbound type="feature" confirmed="yes">org.apache.abdera.util.AbderaResult.abdera</outbound>
                <outbound type="feature" confirmed="yes">org.apache.abdera.util.AbderaResult.doc</outbound>
                <outbound type="feature" confirmed="yes">org.apache.abdera.util.AbderaResult.pipein</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.util.AbderaResult.getOutputStream()</name>
                <outbound type="class" confirmed="no">java.io.IOException</outbound>
                <outbound type="class" confirmed="no">java.io.OutputStream</outbound>
                <outbound type="class" confirmed="no">java.io.PipedInputStream</outbound>
                <outbound type="feature" confirmed="no">java.io.PipedInputStream.PipedInputStream(java.io.PipedOutputStream)</outbound>
                <outbound type="class" confirmed="no">java.io.PipedOutputStream</outbound>
                <outbound type="feature" confirmed="no">java.io.PipedOutputStream.PipedOutputStream()</outbound>
                <outbound type="feature" confirmed="yes">org.apache.abdera.util.AbderaResult.pipein</outbound>
                <outbound type="feature" confirmed="yes">org.apache.abdera.util.AbderaResult.pipeout</outbound>
                <inbound type="feature" confirmed="yes">org.apache.abdera.util.AbderaResult.getWriter()</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.util.AbderaResult.getWriter()</name>
                <outbound type="class" confirmed="no">java.io.OutputStream</outbound>
                <outbound type="feature" confirmed="no">java.io.OutputStreamWriter.OutputStreamWriter(java.io.OutputStream)</outbound>
                <outbound type="class" confirmed="no">java.io.Writer</outbound>
                <outbound type="feature" confirmed="yes">org.apache.abdera.util.AbderaResult.getOutputStream()</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.util.AbderaResult.pipein</name>
                <outbound type="class" confirmed="no">java.io.PipedInputStream</outbound>
                <inbound type="feature" confirmed="yes">org.apache.abdera.util.AbderaResult.getDocument()</inbound>
                <inbound type="feature" confirmed="yes">org.apache.abdera.util.AbderaResult.getOutputStream()</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.util.AbderaResult.pipeout</name>
                <outbound type="class" confirmed="no">java.io.PipedOutputStream</outbound>
                <inbound type="feature" confirmed="yes">org.apache.abdera.util.AbderaResult.getOutputStream()</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.util.AbderaResult.setOutputStream(java.io.OutputStream)</name>
                <outbound type="class" confirmed="no">java.io.OutputStream</outbound>
                <outbound type="feature" confirmed="no">java.lang.UnsupportedOperationException.UnsupportedOperationException()</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.util.AbderaResult.setWriter(java.io.Writer)</name>
                <outbound type="class" confirmed="no">java.io.Writer</outbound>
                <outbound type="feature" confirmed="no">java.lang.UnsupportedOperationException.UnsupportedOperationException()</outbound>
            </feature>
        </class>
        <class confirmed="yes">
            <name>org.apache.abdera.util.AbderaSource</name>
            <outbound type="class" confirmed="no">javax.xml.transform.Source</outbound>
            <outbound type="class" confirmed="no">javax.xml.transform.stream.StreamSource</outbound>
            <feature confirmed="yes">
                <name>org.apache.abdera.util.AbderaSource.AbderaSource(org.apache.abdera.model.Base)</name>
                <outbound type="feature" confirmed="no">javax.xml.transform.stream.StreamSource.StreamSource()</outbound>
                <outbound type="class" confirmed="yes">org.apache.abdera.model.Base</outbound>
                <outbound type="feature" confirmed="yes">org.apache.abdera.util.AbderaSource.base</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.util.AbderaSource.base</name>
                <outbound type="class" confirmed="yes">org.apache.abdera.model.Base</outbound>
                <inbound type="feature" confirmed="yes">org.apache.abdera.util.AbderaSource.AbderaSource(org.apache.abdera.model.Base)</inbound>
                <inbound type="feature" confirmed="yes">org.apache.abdera.util.AbderaSource.getInputStream()</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.util.AbderaSource.getInputStream()</name>
                <outbound type="class" confirmed="no">java.io.IOException</outbound>
                <outbound type="class" confirmed="no">java.io.InputStream</outbound>
                <outbound type="class" confirmed="no">java.io.OutputStream</outbound>
                <outbound type="feature" confirmed="no">java.io.PipedInputStream.PipedInputStream(java.io.PipedOutputStream)</outbound>
                <outbound type="class" confirmed="no">java.io.PipedOutputStream</outbound>
                <outbound type="feature" confirmed="no">java.io.PipedOutputStream.PipedOutputStream()</outbound>
                <outbound type="feature" confirmed="no">java.io.PipedOutputStream.close()</outbound>
                <outbound type="feature" confirmed="no">java.io.PipedOutputStream.flush()</outbound>
                <outbound type="class" confirmed="yes">org.apache.abdera.model.Base</outbound>
                <outbound type="feature" confirmed="yes">org.apache.abdera.model.Base.writeTo(java.io.OutputStream)</outbound>
                <outbound type="feature" confirmed="yes">org.apache.abdera.util.AbderaSource.base</outbound>
                <inbound type="feature" confirmed="yes">org.apache.abdera.util.AbderaSource.getReader()</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.util.AbderaSource.getReader()</name>
                <outbound type="class" confirmed="no">java.io.InputStream</outbound>
                <outbound type="feature" confirmed="no">java.io.InputStreamReader.InputStreamReader(java.io.InputStream)</outbound>
                <outbound type="class" confirmed="no">java.io.Reader</outbound>
                <outbound type="feature" confirmed="yes">org.apache.abdera.util.AbderaSource.getInputStream()</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.util.AbderaSource.setInputStream(java.io.InputStream)</name>
                <outbound type="class" confirmed="no">java.io.InputStream</outbound>
                <outbound type="feature" confirmed="no">java.lang.UnsupportedOperationException.UnsupportedOperationException()</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.util.AbderaSource.setReader(java.io.Reader)</name>
                <outbound type="class" confirmed="no">java.io.Reader</outbound>
                <outbound type="feature" confirmed="no">java.lang.UnsupportedOperationException.UnsupportedOperationException()</outbound>
            </feature>
        </class>
        <class confirmed="yes">
            <name>org.apache.abdera.util.AbstractExtensionFactory</name>
            <outbound type="class" confirmed="no">java.lang.Object</outbound>
            <outbound type="class" confirmed="yes">org.apache.abdera.factory.ExtensionFactory</outbound>
            <inbound type="class" confirmed="yes">org.apache.abdera.protocol.error.ErrorExtensionFactory</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.protocol.error.ErrorExtensionFactory.ErrorExtensionFactory()</inbound>
            <feature confirmed="yes">
                <name>org.apache.abdera.util.AbstractExtensionFactory.AbstractExtensionFactory(java.lang.String[])</name>
                <outbound type="class" confirmed="no">java.lang.Object</outbound>
                <outbound type="feature" confirmed="no">java.lang.Object.Object()</outbound>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="feature" confirmed="no">java.util.ArrayList.ArrayList()</outbound>
                <outbound type="feature" confirmed="no">java.util.HashMap.HashMap()</outbound>
                <outbound type="class" confirmed="no">java.util.List</outbound>
                <outbound type="feature" confirmed="no">java.util.List.add(java.lang.Object)</outbound>
                <outbound type="class" confirmed="no">java.util.Map</outbound>
                <outbound type="feature" confirmed="yes">org.apache.abdera.util.AbstractExtensionFactory.impls</outbound>
                <outbound type="feature" confirmed="yes">org.apache.abdera.util.AbstractExtensionFactory.mimetypes</outbound>
                <outbound type="feature" confirmed="yes">org.apache.abdera.util.AbstractExtensionFactory.namespaces</outbound>
                <inbound type="feature" confirmed="yes">org.apache.abdera.protocol.error.ErrorExtensionFactory.ErrorExtensionFactory()</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.util.AbstractExtensionFactory.addImpl(javax.xml.namespace.QName, java.lang.Class)</name>
                <outbound type="class" confirmed="no">java.lang.Class</outbound>
                <outbound type="class" confirmed="no">java.lang.Object</outbound>
                <outbound type="class" confirmed="no">java.util.Map</outbound>
                <outbound type="feature" confirmed="no">java.util.Map.put(java.lang.Object, java.lang.Object)</outbound>
                <outbound type="class" confirmed="no">javax.xml.namespace.QName</outbound>
                <outbound type="feature" confirmed="yes">org.apache.abdera.util.AbstractExtensionFactory.impls</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.util.AbstractExtensionFactory.addMimeType(javax.xml.namespace.QName, java.lang.String)</name>
                <outbound type="class" confirmed="no">java.lang.Object</outbound>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="class" confirmed="no">java.util.Map</outbound>
                <outbound type="feature" confirmed="no">java.util.Map.put(java.lang.Object, java.lang.Object)</outbound>
                <outbound type="class" confirmed="no">javax.xml.namespace.QName</outbound>
                <outbound type="feature" confirmed="yes">org.apache.abdera.util.AbstractExtensionFactory.mimetypes</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.util.AbstractExtensionFactory.getElementWrapper(org.apache.abdera.model.Element)</name>
                <outbound type="class" confirmed="no">java.lang.Class</outbound>
                <outbound type="feature" confirmed="no">java.lang.Class.getConstructor(java.lang.Class[])</outbound>
                <outbound type="class" confirmed="no">java.lang.Exception</outbound>
                <outbound type="class" confirmed="no">java.lang.Object</outbound>
                <outbound type="class" confirmed="no">java.lang.reflect.Constructor</outbound>
                <outbound type="feature" confirmed="no">java.lang.reflect.Constructor.newInstance(java.lang.Object[])</outbound>
                <outbound type="class" confirmed="no">java.util.Map</outbound>
                <outbound type="feature" confirmed="no">java.util.Map.get(java.lang.Object)</outbound>
                <outbound type="class" confirmed="no">javax.xml.namespace.QName</outbound>
                <outbound type="class" confirmed="yes">org.apache.abdera.model.Element</outbound>
                <outbound type="feature" confirmed="yes">org.apache.abdera.model.Element.getQName()</outbound>
                <outbound type="feature" confirmed="yes">org.apache.abdera.util.AbstractExtensionFactory.impls</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.util.AbstractExtensionFactory.getMimeType(org.apache.abdera.model.Base)</name>
                <outbound type="class" confirmed="no">java.lang.Object</outbound>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="class" confirmed="no">java.util.Map</outbound>
                <outbound type="feature" confirmed="no">java.util.Map.get(java.lang.Object)</outbound>
                <outbound type="class" confirmed="no">javax.xml.namespace.QName</outbound>
                <outbound type="class" confirmed="yes">org.apache.abdera.model.Base</outbound>
                <outbound type="class" confirmed="yes">org.apache.abdera.model.Document</outbound>
                <outbound type="feature" confirmed="yes">org.apache.abdera.model.Document.getRoot()</outbound>
                <outbound type="class" confirmed="yes">org.apache.abdera.model.Element</outbound>
                <outbound type="feature" confirmed="yes">org.apache.abdera.model.Element.getQName()</outbound>
                <outbound type="feature" confirmed="yes">org.apache.abdera.util.AbstractExtensionFactory.mimetypes</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.util.AbstractExtensionFactory.getNamespaces()</name>
                <outbound type="class" confirmed="no">java.lang.Object</outbound>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="class" confirmed="no">java.lang.String[]</outbound>
                <outbound type="class" confirmed="no">java.util.List</outbound>
                <outbound type="feature" confirmed="no">java.util.List.size()</outbound>
                <outbound type="feature" confirmed="no">java.util.List.toArray(java.lang.Object[])</outbound>
                <outbound type="feature" confirmed="yes">org.apache.abdera.util.AbstractExtensionFactory.namespaces</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.util.AbstractExtensionFactory.handlesNamespace(java.lang.String)</name>
                <outbound type="class" confirmed="no">java.lang.Object</outbound>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="class" confirmed="no">java.util.List</outbound>
                <outbound type="feature" confirmed="no">java.util.List.contains(java.lang.Object)</outbound>
                <outbound type="feature" confirmed="yes">org.apache.abdera.util.AbstractExtensionFactory.namespaces</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.util.AbstractExtensionFactory.impls</name>
                <outbound type="class" confirmed="no">java.util.Map</outbound>
                <inbound type="feature" confirmed="yes">org.apache.abdera.util.AbstractExtensionFactory.AbstractExtensionFactory(java.lang.String[])</inbound>
                <inbound type="feature" confirmed="yes">org.apache.abdera.util.AbstractExtensionFactory.addImpl(javax.xml.namespace.QName, java.lang.Class)</inbound>
                <inbound type="feature" confirmed="yes">org.apache.abdera.util.AbstractExtensionFactory.getElementWrapper(org.apache.abdera.model.Element)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.util.AbstractExtensionFactory.mimetypes</name>
                <outbound type="class" confirmed="no">java.util.Map</outbound>
                <inbound type="feature" confirmed="yes">org.apache.abdera.util.AbstractExtensionFactory.AbstractExtensionFactory(java.lang.String[])</inbound>
                <inbound type="feature" confirmed="yes">org.apache.abdera.util.AbstractExtensionFactory.addMimeType(javax.xml.namespace.QName, java.lang.String)</inbound>
                <inbound type="feature" confirmed="yes">org.apache.abdera.util.AbstractExtensionFactory.getMimeType(org.apache.abdera.model.Base)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.util.AbstractExtensionFactory.namespaces</name>
                <outbound type="class" confirmed="no">java.util.List</outbound>
                <inbound type="feature" confirmed="yes">org.apache.abdera.util.AbstractExtensionFactory.AbstractExtensionFactory(java.lang.String[])</inbound>
                <inbound type="feature" confirmed="yes">org.apache.abdera.util.AbstractExtensionFactory.getNamespaces()</inbound>
                <inbound type="feature" confirmed="yes">org.apache.abdera.util.AbstractExtensionFactory.handlesNamespace(java.lang.String)</inbound>
            </feature>
        </class>
        <class confirmed="yes">
            <name>org.apache.abdera.util.AbstractNamedParser</name>
            <outbound type="class" confirmed="yes">org.apache.abdera.parser.NamedParser</outbound>
            <outbound type="class" confirmed="yes">org.apache.abdera.util.AbstractParser</outbound>
            <feature confirmed="yes">
                <name>org.apache.abdera.util.AbstractNamedParser.AbstractNamedParser(org.apache.abdera.Abdera, java.lang.String, java.lang.String[])</name>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="class" confirmed="yes">org.apache.abdera.Abdera</outbound>
                <outbound type="feature" confirmed="yes">org.apache.abdera.util.AbstractNamedParser.formats</outbound>
                <outbound type="feature" confirmed="yes">org.apache.abdera.util.AbstractNamedParser.name</outbound>
                <outbound type="feature" confirmed="yes">org.apache.abdera.util.AbstractParser.AbstractParser(org.apache.abdera.Abdera)</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.util.AbstractNamedParser.formats</name>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <inbound type="feature" confirmed="yes">org.apache.abdera.util.AbstractNamedParser.AbstractNamedParser(org.apache.abdera.Abdera, java.lang.String, java.lang.String[])</inbound>
                <inbound type="feature" confirmed="yes">org.apache.abdera.util.AbstractNamedParser.getInputFormats()</inbound>
                <inbound type="feature" confirmed="yes">org.apache.abdera.util.AbstractNamedParser.parsesFormat(java.lang.String)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.util.AbstractNamedParser.getInputFormats()</name>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="feature" confirmed="yes">org.apache.abdera.util.AbstractNamedParser.formats</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.util.AbstractNamedParser.getName()</name>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="feature" confirmed="yes">org.apache.abdera.util.AbstractNamedParser.name</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.util.AbstractNamedParser.name</name>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <inbound type="feature" confirmed="yes">org.apache.abdera.util.AbstractNamedParser.AbstractNamedParser(org.apache.abdera.Abdera, java.lang.String, java.lang.String[])</inbound>
                <inbound type="feature" confirmed="yes">org.apache.abdera.util.AbstractNamedParser.getName()</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.util.AbstractNamedParser.parsesFormat(java.lang.String)</name>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="feature" confirmed="yes">org.apache.abdera.util.AbstractNamedParser.formats</outbound>
                <outbound type="feature" confirmed="yes">org.apache.abdera.util.MimeTypeHelper.isMatch(java.lang.String, java.lang.String)</outbound>
            </feature>
        </class>
        <class confirmed="yes">
            <name>org.apache.abdera.util.AbstractNamedWriter</name>
            <outbound type="class" confirmed="yes">org.apache.abdera.util.AbstractWriter</outbound>
            <outbound type="class" confirmed="yes">org.apache.abdera.writer.NamedWriter</outbound>
            <feature confirmed="yes">
                <name>org.apache.abdera.util.AbstractNamedWriter.AbstractNamedWriter(java.lang.String, java.lang.String[])</name>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="feature" confirmed="yes">org.apache.abdera.util.AbstractNamedWriter.formats</outbound>
                <outbound type="feature" confirmed="yes">org.apache.abdera.util.AbstractNamedWriter.name</outbound>
                <outbound type="feature" confirmed="yes">org.apache.abdera.util.AbstractWriter.AbstractWriter()</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.util.AbstractNamedWriter.formats</name>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <inbound type="feature" confirmed="yes">org.apache.abdera.util.AbstractNamedWriter.AbstractNamedWriter(java.lang.String, java.lang.String[])</inbound>
                <inbound type="feature" confirmed="yes">org.apache.abdera.util.AbstractNamedWriter.getOutputFormats()</inbound>
                <inbound type="feature" confirmed="yes">org.apache.abdera.util.AbstractNamedWriter.outputsFormat(java.lang.String)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.util.AbstractNamedWriter.getName()</name>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="feature" confirmed="yes">org.apache.abdera.util.AbstractNamedWriter.name</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.util.AbstractNamedWriter.getOutputFormats()</name>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="feature" confirmed="yes">org.apache.abdera.util.AbstractNamedWriter.formats</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.util.AbstractNamedWriter.name</name>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <inbound type="feature" confirmed="yes">org.apache.abdera.util.AbstractNamedWriter.AbstractNamedWriter(java.lang.String, java.lang.String[])</inbound>
                <inbound type="feature" confirmed="yes">org.apache.abdera.util.AbstractNamedWriter.getName()</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.util.AbstractNamedWriter.outputsFormat(java.lang.String)</name>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="feature" confirmed="yes">org.apache.abdera.util.AbstractNamedWriter.formats</outbound>
                <outbound type="feature" confirmed="yes">org.apache.abdera.util.MimeTypeHelper.isMatch(java.lang.String, java.lang.String)</outbound>
            </feature>
        </class>
        <class confirmed="yes">
            <name>org.apache.abdera.util.AbstractParser</name>
            <outbound type="class" confirmed="no">java.lang.Object</outbound>
            <outbound type="class" confirmed="yes">org.apache.abdera.parser.Parser</outbound>
            <inbound type="class" confirmed="yes">org.apache.abdera.util.AbstractNamedParser</inbound>
            <feature confirmed="yes">
                <name>org.apache.abdera.util.AbstractParser.AbstractParser()</name>
                <outbound type="class" confirmed="yes">org.apache.abdera.Abdera</outbound>
                <outbound type="feature" confirmed="yes">org.apache.abdera.Abdera.Abdera()</outbound>
                <outbound type="feature" confirmed="yes">org.apache.abdera.util.AbstractParser.AbstractParser(org.apache.abdera.Abdera)</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.util.AbstractParser.AbstractParser(org.apache.abdera.Abdera)</name>
                <outbound type="feature" confirmed="no">java.lang.Object.Object()</outbound>
                <outbound type="class" confirmed="yes">org.apache.abdera.Abdera</outbound>
                <outbound type="feature" confirmed="yes">org.apache.abdera.util.AbstractParser.abdera</outbound>
                <inbound type="feature" confirmed="yes">org.apache.abdera.util.AbstractNamedParser.AbstractNamedParser(org.apache.abdera.Abdera, java.lang.String, java.lang.String[])</inbound>
                <inbound type="feature" confirmed="yes">org.apache.abdera.util.AbstractParser.AbstractParser()</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.util.AbstractParser.abdera</name>
                <outbound type="class" confirmed="yes">org.apache.abdera.Abdera</outbound>
                <inbound type="feature" confirmed="yes">org.apache.abdera.util.AbstractParser.AbstractParser(org.apache.abdera.Abdera)</inbound>
                <inbound type="feature" confirmed="yes">org.apache.abdera.util.AbstractParser.getAbdera()</inbound>
                <inbound type="feature" confirmed="yes">org.apache.abdera.util.AbstractParser.setAbdera(org.apache.abdera.Abdera)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.util.AbstractParser.getAbdera()</name>
                <outbound type="class" confirmed="yes">org.apache.abdera.Abdera</outbound>
                <outbound type="feature" confirmed="yes">org.apache.abdera.util.AbstractParser.abdera</outbound>
                <inbound type="feature" confirmed="yes">org.apache.abdera.util.AbstractParser.getFactory()</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.util.AbstractParser.getDefaultParserOptions()</name>
                <outbound type="class" confirmed="no">java.lang.CloneNotSupportedException</outbound>
                <outbound type="class" confirmed="no">java.lang.Object</outbound>
                <outbound type="feature" confirmed="no">java.lang.RuntimeException.RuntimeException(java.lang.Throwable)</outbound>
                <outbound type="class" confirmed="no">java.lang.Throwable</outbound>
                <outbound type="class" confirmed="yes">org.apache.abdera.parser.ParserOptions</outbound>
                <outbound type="feature" confirmed="yes">org.apache.abdera.parser.ParserOptions.clone()</outbound>
                <outbound type="feature" confirmed="yes">org.apache.abdera.util.AbstractParser.initDefaultParserOptions()</outbound>
                <outbound type="feature" confirmed="yes">org.apache.abdera.util.AbstractParser.options</outbound>
                <inbound type="feature" confirmed="yes">org.apache.abdera.util.AbstractParser.parse(java.io.InputStream)</inbound>
                <inbound type="feature" confirmed="yes">org.apache.abdera.util.AbstractParser.parse(java.io.InputStream, java.lang.String)</inbound>
                <inbound type="feature" confirmed="yes">org.apache.abdera.util.AbstractParser.parse(java.io.Reader)</inbound>
                <inbound type="feature" confirmed="yes">org.apache.abdera.util.AbstractParser.parse(java.io.Reader, java.lang.String)</inbound>
                <inbound type="feature" confirmed="yes">org.apache.abdera.util.AbstractParser.parse(java.nio.channels.ReadableByteChannel)</inbound>
                <inbound type="feature" confirmed="yes">org.apache.abdera.util.AbstractParser.parse(java.nio.channels.ReadableByteChannel, java.lang.String)</inbound>
                <inbound type="feature" confirmed="yes">org.apache.abdera.util.AbstractParser.parse(javax.xml.stream.XMLStreamReader)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.util.AbstractParser.getFactory()</name>
                <outbound type="class" confirmed="yes">org.apache.abdera.Abdera</outbound>
                <outbound type="feature" confirmed="yes">org.apache.abdera.Abdera.getFactory()</outbound>
                <outbound type="class" confirmed="yes">org.apache.abdera.factory.Factory</outbound>
                <outbound type="feature" confirmed="yes">org.apache.abdera.util.AbstractParser.getAbdera()</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.util.AbstractParser.initDefaultParserOptions()</name>
                <outbound type="class" confirmed="yes">org.apache.abdera.parser.ParserOptions</outbound>
                <inbound type="feature" confirmed="yes">org.apache.abdera.util.AbstractParser.getDefaultParserOptions()</inbound>
                <inbound type="feature" confirmed="yes">org.apache.abdera.util.AbstractParser.setDefaultParserOptions(org.apache.abdera.parser.ParserOptions)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.util.AbstractParser.options</name>
                <outbound type="class" confirmed="yes">org.apache.abdera.parser.ParserOptions</outbound>
                <inbound type="feature" confirmed="yes">org.apache.abdera.util.AbstractParser.getDefaultParserOptions()</inbound>
                <inbound type="feature" confirmed="yes">org.apache.abdera.util.AbstractParser.setDefaultParserOptions(org.apache.abdera.parser.ParserOptions)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.util.AbstractParser.parse(java.io.InputStream)</name>
                <outbound type="class" confirmed="no">java.io.InputStream</outbound>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="class" confirmed="yes">org.apache.abdera.model.Document</outbound>
                <outbound type="class" confirmed="yes">org.apache.abdera.parser.ParseException</outbound>
                <outbound type="class" confirmed="yes">org.apache.abdera.parser.ParserOptions</outbound>
                <outbound type="feature" confirmed="yes">org.apache.abdera.util.AbstractParser.getDefaultParserOptions()</outbound>
                <outbound type="feature" confirmed="yes">org.apache.abdera.util.AbstractParser.parse(java.io.InputStream, java.lang.String, org.apache.abdera.parser.ParserOptions)</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.util.AbstractParser.parse(java.io.InputStream, java.lang.String)</name>
                <outbound type="class" confirmed="no">java.io.InputStream</outbound>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="class" confirmed="yes">org.apache.abdera.model.Document</outbound>
                <outbound type="class" confirmed="yes">org.apache.abdera.parser.ParseException</outbound>
                <outbound type="class" confirmed="yes">org.apache.abdera.parser.ParserOptions</outbound>
                <outbound type="feature" confirmed="yes">org.apache.abdera.util.AbstractParser.getDefaultParserOptions()</outbound>
                <outbound type="feature" confirmed="yes">org.apache.abdera.util.AbstractParser.parse(java.io.InputStream, java.lang.String, org.apache.abdera.parser.ParserOptions)</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.util.AbstractParser.parse(java.io.InputStream, java.lang.String, org.apache.abdera.parser.ParserOptions)</name>
                <outbound type="class" confirmed="no">java.io.InputStream</outbound>
                <outbound type="feature" confirmed="no">java.io.InputStreamReader.InputStreamReader(java.io.InputStream)</outbound>
                <outbound type="class" confirmed="no">java.io.Reader</outbound>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="class" confirmed="yes">org.apache.abdera.model.Document</outbound>
                <outbound type="class" confirmed="yes">org.apache.abdera.parser.ParseException</outbound>
                <outbound type="class" confirmed="yes">org.apache.abdera.parser.ParserOptions</outbound>
                <outbound type="feature" confirmed="no">org.apache.abdera.util.AbstractParser.parse(java.io.Reader, java.lang.String, org.apache.abdera.parser.ParserOptions)</outbound>
                <inbound type="feature" confirmed="yes">org.apache.abdera.util.AbstractParser.parse(java.io.InputStream)</inbound>
                <inbound type="feature" confirmed="yes">org.apache.abdera.util.AbstractParser.parse(java.io.InputStream, java.lang.String)</inbound>
                <inbound type="feature" confirmed="yes">org.apache.abdera.util.AbstractParser.parse(java.io.InputStream, org.apache.abdera.parser.ParserOptions)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.util.AbstractParser.parse(java.io.InputStream, org.apache.abdera.parser.ParserOptions)</name>
                <outbound type="class" confirmed="no">java.io.InputStream</outbound>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="class" confirmed="yes">org.apache.abdera.model.Document</outbound>
                <outbound type="class" confirmed="yes">org.apache.abdera.parser.ParseException</outbound>
                <outbound type="class" confirmed="yes">org.apache.abdera.parser.ParserOptions</outbound>
                <outbound type="feature" confirmed="yes">org.apache.abdera.util.AbstractParser.parse(java.io.InputStream, java.lang.String, org.apache.abdera.parser.ParserOptions)</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.util.AbstractParser.parse(java.io.Reader)</name>
                <outbound type="class" confirmed="no">java.io.Reader</outbound>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="class" confirmed="yes">org.apache.abdera.model.Document</outbound>
                <outbound type="class" confirmed="yes">org.apache.abdera.parser.ParseException</outbound>
                <outbound type="class" confirmed="yes">org.apache.abdera.parser.ParserOptions</outbound>
                <outbound type="feature" confirmed="yes">org.apache.abdera.util.AbstractParser.getDefaultParserOptions()</outbound>
                <outbound type="feature" confirmed="no">org.apache.abdera.util.AbstractParser.parse(java.io.Reader, java.lang.String, org.apache.abdera.parser.ParserOptions)</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.util.AbstractParser.parse(java.io.Reader, java.lang.String)</name>
                <outbound type="class" confirmed="no">java.io.Reader</outbound>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="class" confirmed="yes">org.apache.abdera.model.Document</outbound>
                <outbound type="class" confirmed="yes">org.apache.abdera.parser.ParseException</outbound>
                <outbound type="class" confirmed="yes">org.apache.abdera.parser.ParserOptions</outbound>
                <outbound type="feature" confirmed="yes">org.apache.abdera.util.AbstractParser.getDefaultParserOptions()</outbound>
                <outbound type="feature" confirmed="no">org.apache.abdera.util.AbstractParser.parse(java.io.Reader, java.lang.String, org.apache.abdera.parser.ParserOptions)</outbound>
            </feature>
            <feature confirmed="no">
                <name>org.apache.abdera.util.AbstractParser.parse(java.io.Reader, java.lang.String, org.apache.abdera.parser.ParserOptions)</name>
                <inbound type="feature" confirmed="yes">org.apache.abdera.util.AbstractParser.parse(java.io.InputStream, java.lang.String, org.apache.abdera.parser.ParserOptions)</inbound>
                <inbound type="feature" confirmed="yes">org.apache.abdera.util.AbstractParser.parse(java.io.Reader)</inbound>
                <inbound type="feature" confirmed="yes">org.apache.abdera.util.AbstractParser.parse(java.io.Reader, java.lang.String)</inbound>
                <inbound type="feature" confirmed="yes">org.apache.abdera.util.AbstractParser.parse(java.io.Reader, org.apache.abdera.parser.ParserOptions)</inbound>
                <inbound type="feature" confirmed="yes">org.apache.abdera.util.AbstractParser.parse(java.nio.channels.ReadableByteChannel, java.lang.String, org.apache.abdera.parser.ParserOptions)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.util.AbstractParser.parse(java.io.Reader, org.apache.abdera.parser.ParserOptions)</name>
                <outbound type="class" confirmed="no">java.io.Reader</outbound>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="class" confirmed="yes">org.apache.abdera.model.Document</outbound>
                <outbound type="class" confirmed="yes">org.apache.abdera.parser.ParseException</outbound>
                <outbound type="class" confirmed="yes">org.apache.abdera.parser.ParserOptions</outbound>
                <outbound type="feature" confirmed="no">org.apache.abdera.util.AbstractParser.parse(java.io.Reader, java.lang.String, org.apache.abdera.parser.ParserOptions)</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.util.AbstractParser.parse(java.nio.channels.ReadableByteChannel)</name>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="class" confirmed="no">java.nio.channels.ReadableByteChannel</outbound>
                <outbound type="class" confirmed="yes">org.apache.abdera.model.Document</outbound>
                <outbound type="class" confirmed="yes">org.apache.abdera.parser.ParseException</outbound>
                <outbound type="class" confirmed="yes">org.apache.abdera.parser.ParserOptions</outbound>
                <outbound type="feature" confirmed="yes">org.apache.abdera.util.AbstractParser.getDefaultParserOptions()</outbound>
                <outbound type="feature" confirmed="yes">org.apache.abdera.util.AbstractParser.parse(java.nio.channels.ReadableByteChannel, java.lang.String, org.apache.abdera.parser.ParserOptions)</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.util.AbstractParser.parse(java.nio.channels.ReadableByteChannel, java.lang.String)</name>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="class" confirmed="no">java.nio.channels.ReadableByteChannel</outbound>
                <outbound type="class" confirmed="yes">org.apache.abdera.model.Document</outbound>
                <outbound type="class" confirmed="yes">org.apache.abdera.parser.ParseException</outbound>
                <outbound type="class" confirmed="yes">org.apache.abdera.parser.ParserOptions</outbound>
                <outbound type="feature" confirmed="yes">org.apache.abdera.util.AbstractParser.getDefaultParserOptions()</outbound>
                <outbound type="feature" confirmed="yes">org.apache.abdera.util.AbstractParser.parse(java.nio.channels.ReadableByteChannel, java.lang.String, org.apache.abdera.parser.ParserOptions)</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.util.AbstractParser.parse(java.nio.channels.ReadableByteChannel, java.lang.String, org.apache.abdera.parser.ParserOptions)</name>
                <outbound type="class" confirmed="no">java.io.Reader</outbound>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="feature" confirmed="no">java.nio.channels.Channels.newReader(java.nio.channels.ReadableByteChannel, java.lang.String)</outbound>
                <outbound type="class" confirmed="no">java.nio.channels.ReadableByteChannel</outbound>
                <outbound type="class" confirmed="yes">org.apache.abdera.model.Document</outbound>
                <outbound type="class" confirmed="yes">org.apache.abdera.parser.ParseException</outbound>
                <outbound type="class" confirmed="yes">org.apache.abdera.parser.ParserOptions</outbound>
                <outbound type="feature" confirmed="yes">org.apache.abdera.parser.ParserOptions.getCharset()</outbound>
                <outbound type="feature" confirmed="no">org.apache.abdera.util.AbstractParser.parse(java.io.Reader, java.lang.String, org.apache.abdera.parser.ParserOptions)</outbound>
                <inbound type="feature" confirmed="yes">org.apache.abdera.util.AbstractParser.parse(java.nio.channels.ReadableByteChannel)</inbound>
                <inbound type="feature" confirmed="yes">org.apache.abdera.util.AbstractParser.parse(java.nio.channels.ReadableByteChannel, java.lang.String)</inbound>
                <inbound type="feature" confirmed="yes">org.apache.abdera.util.AbstractParser.parse(java.nio.channels.ReadableByteChannel, org.apache.abdera.parser.ParserOptions)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.util.AbstractParser.parse(java.nio.channels.ReadableByteChannel, org.apache.abdera.parser.ParserOptions)</name>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="class" confirmed="no">java.nio.channels.ReadableByteChannel</outbound>
                <outbound type="class" confirmed="yes">org.apache.abdera.model.Document</outbound>
                <outbound type="class" confirmed="yes">org.apache.abdera.parser.ParseException</outbound>
                <outbound type="class" confirmed="yes">org.apache.abdera.parser.ParserOptions</outbound>
                <outbound type="feature" confirmed="yes">org.apache.abdera.util.AbstractParser.parse(java.nio.channels.ReadableByteChannel, java.lang.String, org.apache.abdera.parser.ParserOptions)</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.util.AbstractParser.parse(javax.xml.stream.XMLStreamReader)</name>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="class" confirmed="no">javax.xml.stream.XMLStreamReader</outbound>
                <outbound type="class" confirmed="yes">org.apache.abdera.model.Document</outbound>
                <outbound type="class" confirmed="yes">org.apache.abdera.parser.ParseException</outbound>
                <outbound type="class" confirmed="yes">org.apache.abdera.parser.ParserOptions</outbound>
                <outbound type="feature" confirmed="yes">org.apache.abdera.util.AbstractParser.getDefaultParserOptions()</outbound>
                <outbound type="feature" confirmed="no">org.apache.abdera.util.AbstractParser.parse(javax.xml.stream.XMLStreamReader, java.lang.String, org.apache.abdera.parser.ParserOptions)</outbound>
            </feature>
            <feature confirmed="no">
                <name>org.apache.abdera.util.AbstractParser.parse(javax.xml.stream.XMLStreamReader, java.lang.String, org.apache.abdera.parser.ParserOptions)</name>
                <inbound type="feature" confirmed="yes">org.apache.abdera.util.AbstractParser.parse(javax.xml.stream.XMLStreamReader)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.util.AbstractParser.setAbdera(org.apache.abdera.Abdera)</name>
                <outbound type="class" confirmed="yes">org.apache.abdera.Abdera</outbound>
                <outbound type="feature" confirmed="yes">org.apache.abdera.util.AbstractParser.abdera</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.util.AbstractParser.setDefaultParserOptions(org.apache.abdera.parser.ParserOptions)</name>
                <outbound type="class" confirmed="no">java.lang.CloneNotSupportedException</outbound>
                <outbound type="class" confirmed="no">java.lang.Object</outbound>
                <outbound type="feature" confirmed="no">java.lang.RuntimeException.RuntimeException(java.lang.Throwable)</outbound>
                <outbound type="class" confirmed="no">java.lang.Throwable</outbound>
                <outbound type="class" confirmed="yes">org.apache.abdera.parser.Parser</outbound>
                <outbound type="class" confirmed="yes">org.apache.abdera.parser.ParserOptions</outbound>
                <outbound type="feature" confirmed="yes">org.apache.abdera.parser.ParserOptions.clone()</outbound>
                <outbound type="feature" confirmed="yes">org.apache.abdera.util.AbstractParser.initDefaultParserOptions()</outbound>
                <outbound type="feature" confirmed="yes">org.apache.abdera.util.AbstractParser.options</outbound>
            </feature>
        </class>
        <class confirmed="yes">
            <name>org.apache.abdera.util.AbstractParserOptions</name>
            <outbound type="class" confirmed="no">java.lang.Cloneable</outbound>
            <outbound type="class" confirmed="no">java.lang.Object</outbound>
            <outbound type="class" confirmed="yes">org.apache.abdera.parser.ParserOptions</outbound>
            <feature confirmed="yes">
                <name>org.apache.abdera.util.AbstractParserOptions.AbstractParserOptions()</name>
                <outbound type="feature" confirmed="no">java.lang.Object.Object()</outbound>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="feature" confirmed="no">java.util.HashMap.HashMap()</outbound>
                <outbound type="class" confirmed="no">java.util.Map</outbound>
                <outbound type="class" confirmed="yes">org.apache.abdera.factory.Factory</outbound>
                <outbound type="class" confirmed="yes">org.apache.abdera.filter.ParseFilter</outbound>
                <outbound type="class" confirmed="no">org.apache.abdera.i18n.text.io.CompressionUtil$CompressionCodec</outbound>
                <outbound type="feature" confirmed="yes">org.apache.abdera.util.AbstractParserOptions.aliases</outbound>
                <outbound type="feature" confirmed="yes">org.apache.abdera.util.AbstractParserOptions.charset</outbound>
                <outbound type="feature" confirmed="yes">org.apache.abdera.util.AbstractParserOptions.codecs</outbound>
                <outbound type="feature" confirmed="yes">org.apache.abdera.util.AbstractParserOptions.detect</outbound>
                <outbound type="feature" confirmed="yes">org.apache.abdera.util.AbstractParserOptions.entities</outbound>
                <outbound type="feature" confirmed="yes">org.apache.abdera.util.AbstractParserOptions.factory</outbound>
                <outbound type="feature" confirmed="yes">org.apache.abdera.util.AbstractParserOptions.filterreserved</outbound>
                <outbound type="feature" confirmed="yes">org.apache.abdera.util.AbstractParserOptions.initDefaultEntities()</outbound>
                <outbound type="feature" confirmed="yes">org.apache.abdera.util.AbstractParserOptions.parseFilter</outbound>
                <outbound type="feature" confirmed="yes">org.apache.abdera.util.AbstractParserOptions.preserve</outbound>
                <outbound type="feature" confirmed="yes">org.apache.abdera.util.AbstractParserOptions.qnamealiasing</outbound>
                <outbound type="feature" confirmed="yes">org.apache.abdera.util.AbstractParserOptions.replacement</outbound>
                <outbound type="feature" confirmed="yes">org.apache.abdera.util.AbstractParserOptions.resolveentities</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.util.AbstractParserOptions.aliases</name>
                <outbound type="class" confirmed="no">java.util.Map</outbound>
                <inbound type="feature" confirmed="yes">org.apache.abdera.util.AbstractParserOptions.AbstractParserOptions()</inbound>
                <inbound type="feature" confirmed="yes">org.apache.abdera.util.AbstractParserOptions.getQNameAliasMap()</inbound>
                <inbound type="feature" confirmed="yes">org.apache.abdera.util.AbstractParserOptions.setQNameAliasMap(java.util.Map)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.util.AbstractParserOptions.charset</name>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <inbound type="feature" confirmed="yes">org.apache.abdera.util.AbstractParserOptions.AbstractParserOptions()</inbound>
                <inbound type="feature" confirmed="yes">org.apache.abdera.util.AbstractParserOptions.getCharset()</inbound>
                <inbound type="feature" confirmed="yes">org.apache.abdera.util.AbstractParserOptions.setCharset(java.lang.String)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.util.AbstractParserOptions.checkFactory(org.apache.abdera.factory.Factory)</name>
                <outbound type="class" confirmed="yes">org.apache.abdera.factory.Factory</outbound>
                <inbound type="feature" confirmed="yes">org.apache.abdera.util.AbstractParserOptions.setFactory(org.apache.abdera.factory.Factory)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.util.AbstractParserOptions.clone()</name>
                <outbound type="class" confirmed="no">java.lang.CloneNotSupportedException</outbound>
                <outbound type="class" confirmed="no">java.lang.Object</outbound>
                <outbound type="feature" confirmed="no">java.lang.Object.clone()</outbound>
                <outbound type="class" confirmed="yes">org.apache.abdera.filter.ParseFilter</outbound>
                <outbound type="feature" confirmed="yes">org.apache.abdera.filter.ParseFilter.clone()</outbound>
                <outbound type="feature" confirmed="yes">org.apache.abdera.util.AbstractParserOptions.parseFilter</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.util.AbstractParserOptions.codecs</name>
                <outbound type="class" confirmed="no">org.apache.abdera.i18n.text.io.CompressionUtil$CompressionCodec</outbound>
                <inbound type="feature" confirmed="yes">org.apache.abdera.util.AbstractParserOptions.AbstractParserOptions()</inbound>
                <inbound type="feature" confirmed="yes">org.apache.abdera.util.AbstractParserOptions.getCompressionCodecs()</inbound>
                <inbound type="feature" confirmed="yes">org.apache.abdera.util.AbstractParserOptions.setCompressionCodecs(org.apache.abdera.i18n.text.io.CompressionUtil$CompressionCodec[])</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.util.AbstractParserOptions.detect</name>
                <inbound type="feature" confirmed="yes">org.apache.abdera.util.AbstractParserOptions.AbstractParserOptions()</inbound>
                <inbound type="feature" confirmed="yes">org.apache.abdera.util.AbstractParserOptions.getAutodetectCharset()</inbound>
                <inbound type="feature" confirmed="yes">org.apache.abdera.util.AbstractParserOptions.setAutodetectCharset(boolean)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.util.AbstractParserOptions.entities</name>
                <outbound type="class" confirmed="no">java.util.Map</outbound>
                <inbound type="feature" confirmed="yes">org.apache.abdera.util.AbstractParserOptions.AbstractParserOptions()</inbound>
                <inbound type="feature" confirmed="yes">org.apache.abdera.util.AbstractParserOptions.registerEntity(java.lang.String, java.lang.String)</inbound>
                <inbound type="feature" confirmed="yes">org.apache.abdera.util.AbstractParserOptions.resolveEntity(java.lang.String)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.util.AbstractParserOptions.factory</name>
                <outbound type="class" confirmed="yes">org.apache.abdera.factory.Factory</outbound>
                <inbound type="feature" confirmed="yes">org.apache.abdera.util.AbstractParserOptions.AbstractParserOptions()</inbound>
                <inbound type="feature" confirmed="yes">org.apache.abdera.util.AbstractParserOptions.getFactory()</inbound>
                <inbound type="feature" confirmed="yes">org.apache.abdera.util.AbstractParserOptions.setFactory(org.apache.abdera.factory.Factory)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.util.AbstractParserOptions.filterreserved</name>
                <inbound type="feature" confirmed="yes">org.apache.abdera.util.AbstractParserOptions.AbstractParserOptions()</inbound>
                <inbound type="feature" confirmed="yes">org.apache.abdera.util.AbstractParserOptions.getFilterRestrictedCharacters()</inbound>
                <inbound type="feature" confirmed="yes">org.apache.abdera.util.AbstractParserOptions.setFilterRestrictedCharacters(boolean)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.util.AbstractParserOptions.getAutodetectCharset()</name>
                <outbound type="feature" confirmed="yes">org.apache.abdera.util.AbstractParserOptions.detect</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.util.AbstractParserOptions.getCharset()</name>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="feature" confirmed="yes">org.apache.abdera.util.AbstractParserOptions.charset</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.util.AbstractParserOptions.getCompressionCodecs()</name>
                <outbound type="class" confirmed="no">org.apache.abdera.i18n.text.io.CompressionUtil$CompressionCodec</outbound>
                <outbound type="feature" confirmed="yes">org.apache.abdera.util.AbstractParserOptions.codecs</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.util.AbstractParserOptions.getFactory()</name>
                <outbound type="class" confirmed="yes">org.apache.abdera.factory.Factory</outbound>
                <outbound type="feature" confirmed="yes">org.apache.abdera.util.AbstractParserOptions.factory</outbound>
                <outbound type="feature" confirmed="yes">org.apache.abdera.util.AbstractParserOptions.initFactory()</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.util.AbstractParserOptions.getFilterRestrictedCharacterReplacement()</name>
                <outbound type="feature" confirmed="yes">org.apache.abdera.util.AbstractParserOptions.replacement</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.util.AbstractParserOptions.getFilterRestrictedCharacters()</name>
                <outbound type="feature" confirmed="yes">org.apache.abdera.util.AbstractParserOptions.filterreserved</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.util.AbstractParserOptions.getMustPreserveWhitespace()</name>
                <outbound type="feature" confirmed="yes">org.apache.abdera.util.AbstractParserOptions.preserve</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.util.AbstractParserOptions.getParseFilter()</name>
                <outbound type="class" confirmed="yes">org.apache.abdera.filter.ParseFilter</outbound>
                <outbound type="feature" confirmed="yes">org.apache.abdera.util.AbstractParserOptions.parseFilter</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.util.AbstractParserOptions.getQNameAliasMap()</name>
                <outbound type="class" confirmed="no">java.util.Map</outbound>
                <outbound type="feature" confirmed="yes">org.apache.abdera.util.AbstractParserOptions.aliases</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.util.AbstractParserOptions.getResolveEntities()</name>
                <outbound type="feature" confirmed="yes">org.apache.abdera.util.AbstractParserOptions.resolveentities</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.util.AbstractParserOptions.initDefaultEntities()</name>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="class" confirmed="yes">org.apache.abdera.parser.ParserOptions</outbound>
                <outbound type="feature" confirmed="yes">org.apache.abdera.util.AbstractParserOptions.registerEntity(java.lang.String, java.lang.String)</outbound>
                <inbound type="feature" confirmed="yes">org.apache.abdera.util.AbstractParserOptions.AbstractParserOptions()</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.util.AbstractParserOptions.initFactory()</name>
                <inbound type="feature" confirmed="yes">org.apache.abdera.util.AbstractParserOptions.getFactory()</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.util.AbstractParserOptions.isQNameAliasMappingEnabled()</name>
                <outbound type="feature" confirmed="yes">org.apache.abdera.util.AbstractParserOptions.qnamealiasing</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.util.AbstractParserOptions.parseFilter</name>
                <outbound type="class" confirmed="yes">org.apache.abdera.filter.ParseFilter</outbound>
                <inbound type="feature" confirmed="yes">org.apache.abdera.util.AbstractParserOptions.AbstractParserOptions()</inbound>
                <inbound type="feature" confirmed="yes">org.apache.abdera.util.AbstractParserOptions.clone()</inbound>
                <inbound type="feature" confirmed="yes">org.apache.abdera.util.AbstractParserOptions.getParseFilter()</inbound>
                <inbound type="feature" confirmed="yes">org.apache.abdera.util.AbstractParserOptions.setParseFilter(org.apache.abdera.filter.ParseFilter)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.util.AbstractParserOptions.preserve</name>
                <inbound type="feature" confirmed="yes">org.apache.abdera.util.AbstractParserOptions.AbstractParserOptions()</inbound>
                <inbound type="feature" confirmed="yes">org.apache.abdera.util.AbstractParserOptions.getMustPreserveWhitespace()</inbound>
                <inbound type="feature" confirmed="yes">org.apache.abdera.util.AbstractParserOptions.setMustPreserveWhitespace(boolean)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.util.AbstractParserOptions.qnamealiasing</name>
                <inbound type="feature" confirmed="yes">org.apache.abdera.util.AbstractParserOptions.AbstractParserOptions()</inbound>
                <inbound type="feature" confirmed="yes">org.apache.abdera.util.AbstractParserOptions.isQNameAliasMappingEnabled()</inbound>
                <inbound type="feature" confirmed="yes">org.apache.abdera.util.AbstractParserOptions.setQNameAliasMappingEnabled(boolean)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.util.AbstractParserOptions.registerEntity(java.lang.String, java.lang.String)</name>
                <outbound type="class" confirmed="no">java.lang.Object</outbound>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="class" confirmed="no">java.util.Map</outbound>
                <outbound type="feature" confirmed="no">java.util.Map.put(java.lang.Object, java.lang.Object)</outbound>
                <outbound type="class" confirmed="yes">org.apache.abdera.parser.ParserOptions</outbound>
                <outbound type="feature" confirmed="yes">org.apache.abdera.util.AbstractParserOptions.entities</outbound>
                <inbound type="feature" confirmed="yes">org.apache.abdera.util.AbstractParserOptions.initDefaultEntities()</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.util.AbstractParserOptions.replacement</name>
                <inbound type="feature" confirmed="yes">org.apache.abdera.util.AbstractParserOptions.AbstractParserOptions()</inbound>
                <inbound type="feature" confirmed="yes">org.apache.abdera.util.AbstractParserOptions.getFilterRestrictedCharacterReplacement()</inbound>
                <inbound type="feature" confirmed="yes">org.apache.abdera.util.AbstractParserOptions.setFilterRestrictedCharacterReplacement(char)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.util.AbstractParserOptions.resolveEntity(java.lang.String)</name>
                <outbound type="class" confirmed="no">java.lang.Object</outbound>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="class" confirmed="no">java.util.Map</outbound>
                <outbound type="feature" confirmed="no">java.util.Map.get(java.lang.Object)</outbound>
                <outbound type="feature" confirmed="yes">org.apache.abdera.util.AbstractParserOptions.entities</outbound>
                <outbound type="feature" confirmed="yes">org.apache.abdera.util.AbstractParserOptions.resolveentities</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.util.AbstractParserOptions.resolveentities</name>
                <inbound type="feature" confirmed="yes">org.apache.abdera.util.AbstractParserOptions.AbstractParserOptions()</inbound>
                <inbound type="feature" confirmed="yes">org.apache.abdera.util.AbstractParserOptions.getResolveEntities()</inbound>
                <inbound type="feature" confirmed="yes">org.apache.abdera.util.AbstractParserOptions.resolveEntity(java.lang.String)</inbound>
                <inbound type="feature" confirmed="yes">org.apache.abdera.util.AbstractParserOptions.setResolveEntities(boolean)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.util.AbstractParserOptions.setAutodetectCharset(boolean)</name>
                <outbound type="class" confirmed="yes">org.apache.abdera.parser.ParserOptions</outbound>
                <outbound type="feature" confirmed="yes">org.apache.abdera.util.AbstractParserOptions.detect</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.util.AbstractParserOptions.setCharset(java.lang.String)</name>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="class" confirmed="yes">org.apache.abdera.parser.ParserOptions</outbound>
                <outbound type="feature" confirmed="yes">org.apache.abdera.util.AbstractParserOptions.charset</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.util.AbstractParserOptions.setCompressionCodecs(org.apache.abdera.i18n.text.io.CompressionUtil$CompressionCodec[])</name>
                <outbound type="class" confirmed="no">org.apache.abdera.i18n.text.io.CompressionUtil$CompressionCodec</outbound>
                <outbound type="class" confirmed="yes">org.apache.abdera.parser.ParserOptions</outbound>
                <outbound type="feature" confirmed="yes">org.apache.abdera.util.AbstractParserOptions.codecs</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.util.AbstractParserOptions.setFactory(org.apache.abdera.factory.Factory)</name>
                <outbound type="class" confirmed="yes">org.apache.abdera.factory.Factory</outbound>
                <outbound type="class" confirmed="yes">org.apache.abdera.parser.ParserOptions</outbound>
                <outbound type="feature" confirmed="yes">org.apache.abdera.util.AbstractParserOptions.checkFactory(org.apache.abdera.factory.Factory)</outbound>
                <outbound type="feature" confirmed="yes">org.apache.abdera.util.AbstractParserOptions.factory</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.util.AbstractParserOptions.setFilterRestrictedCharacterReplacement(char)</name>
                <outbound type="class" confirmed="yes">org.apache.abdera.parser.ParserOptions</outbound>
                <outbound type="feature" confirmed="yes">org.apache.abdera.util.AbstractParserOptions.replacement</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.util.AbstractParserOptions.setFilterRestrictedCharacters(boolean)</name>
                <outbound type="class" confirmed="yes">org.apache.abdera.parser.ParserOptions</outbound>
                <outbound type="feature" confirmed="yes">org.apache.abdera.util.AbstractParserOptions.filterreserved</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.util.AbstractParserOptions.setMustPreserveWhitespace(boolean)</name>
                <outbound type="class" confirmed="yes">org.apache.abdera.parser.ParserOptions</outbound>
                <outbound type="feature" confirmed="yes">org.apache.abdera.util.AbstractParserOptions.preserve</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.util.AbstractParserOptions.setParseFilter(org.apache.abdera.filter.ParseFilter)</name>
                <outbound type="class" confirmed="yes">org.apache.abdera.filter.ParseFilter</outbound>
                <outbound type="class" confirmed="yes">org.apache.abdera.parser.ParserOptions</outbound>
                <outbound type="feature" confirmed="yes">org.apache.abdera.util.AbstractParserOptions.parseFilter</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.util.AbstractParserOptions.setQNameAliasMap(java.util.Map)</name>
                <outbound type="class" confirmed="no">java.util.Map</outbound>
                <outbound type="class" confirmed="yes">org.apache.abdera.parser.ParserOptions</outbound>
                <outbound type="feature" confirmed="yes">org.apache.abdera.util.AbstractParserOptions.aliases</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.util.AbstractParserOptions.setQNameAliasMappingEnabled(boolean)</name>
                <outbound type="class" confirmed="yes">org.apache.abdera.parser.ParserOptions</outbound>
                <outbound type="feature" confirmed="yes">org.apache.abdera.util.AbstractParserOptions.qnamealiasing</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.util.AbstractParserOptions.setResolveEntities(boolean)</name>
                <outbound type="class" confirmed="yes">org.apache.abdera.parser.ParserOptions</outbound>
                <outbound type="feature" confirmed="yes">org.apache.abdera.util.AbstractParserOptions.resolveentities</outbound>
            </feature>
        </class>
        <class confirmed="yes">
            <name>org.apache.abdera.util.AbstractStreamWriter</name>
            <outbound type="class" confirmed="no">java.lang.Object</outbound>
            <outbound type="class" confirmed="yes">org.apache.abdera.writer.StreamWriter</outbound>
            <inbound type="class" confirmed="yes">org.apache.abdera.factory.StreamBuilder</inbound>
            <feature confirmed="yes">
                <name>org.apache.abdera.util.AbstractStreamWriter.AbstractStreamWriter(org.apache.abdera.Abdera, java.lang.String)</name>
                <outbound type="feature" confirmed="no">java.lang.Object.Object()</outbound>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="class" confirmed="yes">org.apache.abdera.Abdera</outbound>
                <outbound type="feature" confirmed="yes">org.apache.abdera.util.AbstractStreamWriter.abdera</outbound>
                <outbound type="feature" confirmed="yes">org.apache.abdera.util.AbstractStreamWriter.autoclose</outbound>
                <outbound type="feature" confirmed="yes">org.apache.abdera.util.AbstractStreamWriter.autoflush</outbound>
                <outbound type="feature" confirmed="yes">org.apache.abdera.util.AbstractStreamWriter.autoindent</outbound>
                <outbound type="feature" confirmed="yes">org.apache.abdera.util.AbstractStreamWriter.name</outbound>
                <inbound type="feature" confirmed="yes">org.apache.abdera.factory.StreamBuilder.StreamBuilder(org.apache.abdera.Abdera)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.util.AbstractStreamWriter.abdera</name>
                <outbound type="class" confirmed="yes">org.apache.abdera.Abdera</outbound>
                <inbound type="feature" confirmed="yes">org.apache.abdera.util.AbstractStreamWriter.AbstractStreamWriter(org.apache.abdera.Abdera, java.lang.String)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.util.AbstractStreamWriter.append(char)</name>
                <outbound type="class" confirmed="no">java.io.IOException</outbound>
                <outbound type="class" confirmed="no">java.lang.Appendable</outbound>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="feature" confirmed="no">java.lang.String.valueOf(char)</outbound>
                <outbound type="feature" confirmed="no">org.apache.abdera.util.AbstractStreamWriter.writeElementText(java.lang.String)</outbound>
                <outbound type="class" confirmed="yes">org.apache.abdera.writer.StreamWriter</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.util.AbstractStreamWriter.append(java.lang.CharSequence)</name>
                <outbound type="class" confirmed="no">java.io.IOException</outbound>
                <outbound type="class" confirmed="no">java.lang.Appendable</outbound>
                <outbound type="class" confirmed="no">java.lang.CharSequence</outbound>
                <outbound type="feature" confirmed="no">java.lang.Object.toString()</outbound>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="feature" confirmed="no">org.apache.abdera.util.AbstractStreamWriter.writeElementText(java.lang.String)</outbound>
                <outbound type="class" confirmed="yes">org.apache.abdera.writer.StreamWriter</outbound>
                <inbound type="feature" confirmed="yes">org.apache.abdera.util.AbstractStreamWriter.append(java.lang.CharSequence, int, int)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.util.AbstractStreamWriter.append(java.lang.CharSequence, int, int)</name>
                <outbound type="class" confirmed="no">java.io.IOException</outbound>
                <outbound type="class" confirmed="no">java.lang.Appendable</outbound>
                <outbound type="class" confirmed="no">java.lang.CharSequence</outbound>
                <outbound type="feature" confirmed="no">java.lang.CharSequence.subSequence(int, int)</outbound>
                <outbound type="feature" confirmed="yes">org.apache.abdera.util.AbstractStreamWriter.append(java.lang.CharSequence)</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.util.AbstractStreamWriter.autoclose</name>
                <inbound type="feature" confirmed="yes">org.apache.abdera.util.AbstractStreamWriter.AbstractStreamWriter(org.apache.abdera.Abdera, java.lang.String)</inbound>
                <inbound type="feature" confirmed="yes">org.apache.abdera.util.AbstractStreamWriter.setAutoclose(boolean)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.util.AbstractStreamWriter.autoflush</name>
                <inbound type="feature" confirmed="yes">org.apache.abdera.util.AbstractStreamWriter.AbstractStreamWriter(org.apache.abdera.Abdera, java.lang.String)</inbound>
                <inbound type="feature" confirmed="yes">org.apache.abdera.util.AbstractStreamWriter.setAutoflush(boolean)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.util.AbstractStreamWriter.autoindent</name>
                <inbound type="feature" confirmed="yes">org.apache.abdera.util.AbstractStreamWriter.AbstractStreamWriter(org.apache.abdera.Abdera, java.lang.String)</inbound>
                <inbound type="feature" confirmed="yes">org.apache.abdera.util.AbstractStreamWriter.setAutoIndent(boolean)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.util.AbstractStreamWriter.endAuthor()</name>
                <outbound type="feature" confirmed="no">org.apache.abdera.util.AbstractStreamWriter.endElement()</outbound>
                <outbound type="class" confirmed="yes">org.apache.abdera.writer.StreamWriter</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.util.AbstractStreamWriter.endCategories()</name>
                <outbound type="feature" confirmed="no">org.apache.abdera.util.AbstractStreamWriter.endElement()</outbound>
                <outbound type="class" confirmed="yes">org.apache.abdera.writer.StreamWriter</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.util.AbstractStreamWriter.endCategory()</name>
                <outbound type="feature" confirmed="no">org.apache.abdera.util.AbstractStreamWriter.endElement()</outbound>
                <outbound type="class" confirmed="yes">org.apache.abdera.writer.StreamWriter</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.util.AbstractStreamWriter.endCollection()</name>
                <outbound type="feature" confirmed="no">org.apache.abdera.util.AbstractStreamWriter.endElement()</outbound>
                <outbound type="class" confirmed="yes">org.apache.abdera.writer.StreamWriter</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.util.AbstractStreamWriter.endContent()</name>
                <outbound type="feature" confirmed="no">org.apache.abdera.util.AbstractStreamWriter.endElement()</outbound>
                <outbound type="class" confirmed="yes">org.apache.abdera.writer.StreamWriter</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.util.AbstractStreamWriter.endContributor()</name>
                <outbound type="feature" confirmed="no">org.apache.abdera.util.AbstractStreamWriter.endElement()</outbound>
                <outbound type="class" confirmed="yes">org.apache.abdera.writer.StreamWriter</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.util.AbstractStreamWriter.endControl()</name>
                <outbound type="feature" confirmed="no">org.apache.abdera.util.AbstractStreamWriter.endElement()</outbound>
                <outbound type="class" confirmed="yes">org.apache.abdera.writer.StreamWriter</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.util.AbstractStreamWriter.endDocument()</name>
                <outbound type="class" confirmed="yes">org.apache.abdera.writer.StreamWriter</outbound>
            </feature>
            <feature confirmed="no">
                <name>org.apache.abdera.util.AbstractStreamWriter.endElement()</name>
                <inbound type="feature" confirmed="yes">org.apache.abdera.util.AbstractStreamWriter.endAuthor()</inbound>
                <inbound type="feature" confirmed="yes">org.apache.abdera.util.AbstractStreamWriter.endCategories()</inbound>
                <inbound type="feature" confirmed="yes">org.apache.abdera.util.AbstractStreamWriter.endCategory()</inbound>
                <inbound type="feature" confirmed="yes">org.apache.abdera.util.AbstractStreamWriter.endCollection()</inbound>
                <inbound type="feature" confirmed="yes">org.apache.abdera.util.AbstractStreamWriter.endContent()</inbound>
                <inbound type="feature" confirmed="yes">org.apache.abdera.util.AbstractStreamWriter.endContributor()</inbound>
                <inbound type="feature" confirmed="yes">org.apache.abdera.util.AbstractStreamWriter.endControl()</inbound>
                <inbound type="feature" confirmed="yes">org.apache.abdera.util.AbstractStreamWriter.endEntry()</inbound>
                <inbound type="feature" confirmed="yes">org.apache.abdera.util.AbstractStreamWriter.endFeed()</inbound>
                <inbound type="feature" confirmed="yes">org.apache.abdera.util.AbstractStreamWriter.endGenerator()</inbound>
                <inbound type="feature" confirmed="yes">org.apache.abdera.util.AbstractStreamWriter.endLink()</inbound>
                <inbound type="feature" confirmed="yes">org.apache.abdera.util.AbstractStreamWriter.endPerson()</inbound>
                <inbound type="feature" confirmed="yes">org.apache.abdera.util.AbstractStreamWriter.endService()</inbound>
                <inbound type="feature" confirmed="yes">org.apache.abdera.util.AbstractStreamWriter.endSource()</inbound>
                <inbound type="feature" confirmed="yes">org.apache.abdera.util.AbstractStreamWriter.endText()</inbound>
                <inbound type="feature" confirmed="yes">org.apache.abdera.util.AbstractStreamWriter.endWorkspace()</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.util.AbstractStreamWriter.endEntry()</name>
                <outbound type="feature" confirmed="no">org.apache.abdera.util.AbstractStreamWriter.endElement()</outbound>
                <outbound type="class" confirmed="yes">org.apache.abdera.writer.StreamWriter</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.util.AbstractStreamWriter.endFeed()</name>
                <outbound type="feature" confirmed="no">org.apache.abdera.util.AbstractStreamWriter.endElement()</outbound>
                <outbound type="class" confirmed="yes">org.apache.abdera.writer.StreamWriter</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.util.AbstractStreamWriter.endGenerator()</name>
                <outbound type="feature" confirmed="no">org.apache.abdera.util.AbstractStreamWriter.endElement()</outbound>
                <outbound type="class" confirmed="yes">org.apache.abdera.writer.StreamWriter</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.util.AbstractStreamWriter.endLink()</name>
                <outbound type="feature" confirmed="no">org.apache.abdera.util.AbstractStreamWriter.endElement()</outbound>
                <outbound type="class" confirmed="yes">org.apache.abdera.writer.StreamWriter</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.util.AbstractStreamWriter.endPerson()</name>
                <outbound type="feature" confirmed="no">org.apache.abdera.util.AbstractStreamWriter.endElement()</outbound>
                <outbound type="class" confirmed="yes">org.apache.abdera.writer.StreamWriter</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.util.AbstractStreamWriter.endService()</name>
                <outbound type="feature" confirmed="no">org.apache.abdera.util.AbstractStreamWriter.endElement()</outbound>
                <outbound type="class" confirmed="yes">org.apache.abdera.writer.StreamWriter</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.util.AbstractStreamWriter.endSource()</name>
                <outbound type="feature" confirmed="no">org.apache.abdera.util.AbstractStreamWriter.endElement()</outbound>
                <outbound type="class" confirmed="yes">org.apache.abdera.writer.StreamWriter</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.util.AbstractStreamWriter.endText()</name>
                <outbound type="feature" confirmed="no">org.apache.abdera.util.AbstractStreamWriter.endElement()</outbound>
                <outbound type="class" confirmed="yes">org.apache.abdera.writer.StreamWriter</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.util.AbstractStreamWriter.endWorkspace()</name>
                <outbound type="feature" confirmed="no">org.apache.abdera.util.AbstractStreamWriter.endElement()</outbound>
                <outbound type="class" confirmed="yes">org.apache.abdera.writer.StreamWriter</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.util.AbstractStreamWriter.getName()</name>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="feature" confirmed="yes">org.apache.abdera.util.AbstractStreamWriter.name</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.util.AbstractStreamWriter.name</name>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <inbound type="feature" confirmed="yes">org.apache.abdera.util.AbstractStreamWriter.AbstractStreamWriter(org.apache.abdera.Abdera, java.lang.String)</inbound>
                <inbound type="feature" confirmed="yes">org.apache.abdera.util.AbstractStreamWriter.getName()</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.util.AbstractStreamWriter.setAutoIndent(boolean)</name>
                <outbound type="feature" confirmed="yes">org.apache.abdera.util.AbstractStreamWriter.autoindent</outbound>
                <outbound type="class" confirmed="yes">org.apache.abdera.writer.StreamWriter</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.util.AbstractStreamWriter.setAutoclose(boolean)</name>
                <outbound type="feature" confirmed="yes">org.apache.abdera.util.AbstractStreamWriter.autoclose</outbound>
                <outbound type="class" confirmed="yes">org.apache.abdera.writer.StreamWriter</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.util.AbstractStreamWriter.setAutoflush(boolean)</name>
                <outbound type="feature" confirmed="yes">org.apache.abdera.util.AbstractStreamWriter.autoflush</outbound>
                <outbound type="class" confirmed="yes">org.apache.abdera.writer.StreamWriter</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.util.AbstractStreamWriter.setChannel(java.nio.channels.WritableByteChannel)</name>
                <outbound type="class" confirmed="no">java.io.OutputStream</outbound>
                <outbound type="feature" confirmed="no">java.nio.channels.Channels.newOutputStream(java.nio.channels.WritableByteChannel)</outbound>
                <outbound type="class" confirmed="no">java.nio.channels.WritableByteChannel</outbound>
                <outbound type="feature" confirmed="no">org.apache.abdera.util.AbstractStreamWriter.setOutputStream(java.io.OutputStream)</outbound>
                <outbound type="class" confirmed="yes">org.apache.abdera.writer.StreamWriter</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.util.AbstractStreamWriter.setChannel(java.nio.channels.WritableByteChannel, java.lang.String)</name>
                <outbound type="class" confirmed="no">java.io.Writer</outbound>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="feature" confirmed="no">java.nio.channels.Channels.newWriter(java.nio.channels.WritableByteChannel, java.lang.String)</outbound>
                <outbound type="class" confirmed="no">java.nio.channels.WritableByteChannel</outbound>
                <outbound type="feature" confirmed="no">org.apache.abdera.util.AbstractStreamWriter.setWriter(java.io.Writer)</outbound>
                <outbound type="class" confirmed="yes">org.apache.abdera.writer.StreamWriter</outbound>
            </feature>
            <feature confirmed="no">
                <name>org.apache.abdera.util.AbstractStreamWriter.setOutputStream(java.io.OutputStream)</name>
                <inbound type="feature" confirmed="yes">org.apache.abdera.util.AbstractStreamWriter.setChannel(java.nio.channels.WritableByteChannel)</inbound>
            </feature>
            <feature confirmed="no">
                <name>org.apache.abdera.util.AbstractStreamWriter.setWriter(java.io.Writer)</name>
                <inbound type="feature" confirmed="yes">org.apache.abdera.util.AbstractStreamWriter.setChannel(java.nio.channels.WritableByteChannel, java.lang.String)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.util.AbstractStreamWriter.startAuthor()</name>
                <outbound type="class" confirmed="no">javax.xml.namespace.QName</outbound>
                <outbound type="feature" confirmed="yes">org.apache.abdera.util.AbstractStreamWriter.startElement(javax.xml.namespace.QName)</outbound>
                <outbound type="feature" confirmed="yes">org.apache.abdera.util.Constants.AUTHOR</outbound>
                <outbound type="class" confirmed="yes">org.apache.abdera.writer.StreamWriter</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.util.AbstractStreamWriter.startCategories()</name>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="feature" confirmed="yes">org.apache.abdera.util.AbstractStreamWriter.startCategories(boolean, java.lang.String)</outbound>
                <outbound type="class" confirmed="yes">org.apache.abdera.writer.StreamWriter</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.util.AbstractStreamWriter.startCategories(boolean)</name>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="feature" confirmed="yes">org.apache.abdera.util.AbstractStreamWriter.startCategories(boolean, java.lang.String)</outbound>
                <outbound type="class" confirmed="yes">org.apache.abdera.writer.StreamWriter</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.util.AbstractStreamWriter.startCategories(boolean, java.lang.String)</name>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="feature" confirmed="no">java.lang.String.length()</outbound>
                <outbound type="class" confirmed="no">javax.xml.namespace.QName</outbound>
                <outbound type="feature" confirmed="yes">org.apache.abdera.util.AbstractStreamWriter.startElement(javax.xml.namespace.QName)</outbound>
                <outbound type="feature" confirmed="yes">org.apache.abdera.util.AbstractStreamWriter.writeAttribute(java.lang.String, java.lang.String)</outbound>
                <outbound type="feature" confirmed="yes">org.apache.abdera.util.Constants.CATEGORIES</outbound>
                <outbound type="class" confirmed="yes">org.apache.abdera.writer.StreamWriter</outbound>
                <inbound type="feature" confirmed="yes">org.apache.abdera.util.AbstractStreamWriter.startCategories()</inbound>
                <inbound type="feature" confirmed="yes">org.apache.abdera.util.AbstractStreamWriter.startCategories(boolean)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.util.AbstractStreamWriter.startCategory(java.lang.String)</name>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="feature" confirmed="yes">org.apache.abdera.util.AbstractStreamWriter.startCategory(java.lang.String, java.lang.String, java.lang.String)</outbound>
                <outbound type="class" confirmed="yes">org.apache.abdera.writer.StreamWriter</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.util.AbstractStreamWriter.startCategory(java.lang.String, java.lang.String)</name>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="feature" confirmed="yes">org.apache.abdera.util.AbstractStreamWriter.startCategory(java.lang.String, java.lang.String, java.lang.String)</outbound>
                <outbound type="class" confirmed="yes">org.apache.abdera.writer.StreamWriter</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.util.AbstractStreamWriter.startCategory(java.lang.String, java.lang.String, java.lang.String)</name>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="class" confirmed="no">javax.xml.namespace.QName</outbound>
                <outbound type="feature" confirmed="yes">org.apache.abdera.util.AbstractStreamWriter.startElement(javax.xml.namespace.QName)</outbound>
                <outbound type="feature" confirmed="yes">org.apache.abdera.util.Constants.CATEGORY</outbound>
                <outbound type="class" confirmed="yes">org.apache.abdera.writer.StreamWriter</outbound>
                <outbound type="feature" confirmed="yes">org.apache.abdera.writer.StreamWriter.writeAttribute(java.lang.String, java.lang.String)</outbound>
                <inbound type="feature" confirmed="yes">org.apache.abdera.util.AbstractStreamWriter.startCategory(java.lang.String)</inbound>
                <inbound type="feature" confirmed="yes">org.apache.abdera.util.AbstractStreamWriter.startCategory(java.lang.String, java.lang.String)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.util.AbstractStreamWriter.startCollection(java.lang.String)</name>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="class" confirmed="no">javax.xml.namespace.QName</outbound>
                <outbound type="feature" confirmed="yes">org.apache.abdera.util.AbstractStreamWriter.startElement(javax.xml.namespace.QName)</outbound>
                <outbound type="feature" confirmed="yes">org.apache.abdera.util.Constants.COLLECTION</outbound>
                <outbound type="class" confirmed="yes">org.apache.abdera.writer.StreamWriter</outbound>
                <outbound type="feature" confirmed="yes">org.apache.abdera.writer.StreamWriter.writeAttribute(java.lang.String, java.lang.String)</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.util.AbstractStreamWriter.startContent(java.lang.String)</name>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="feature" confirmed="yes">org.apache.abdera.util.AbstractStreamWriter.startContent(java.lang.String, java.lang.String)</outbound>
                <outbound type="class" confirmed="yes">org.apache.abdera.writer.StreamWriter</outbound>
                <inbound type="feature" confirmed="yes">org.apache.abdera.util.AbstractStreamWriter.writeContent(java.lang.String, java.lang.String)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.util.AbstractStreamWriter.startContent(java.lang.String, java.lang.String)</name>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="class" confirmed="no">javax.xml.namespace.QName</outbound>
                <outbound type="feature" confirmed="yes">org.apache.abdera.util.AbstractStreamWriter.startElement(javax.xml.namespace.QName)</outbound>
                <outbound type="feature" confirmed="yes">org.apache.abdera.util.Constants.CONTENT</outbound>
                <outbound type="class" confirmed="yes">org.apache.abdera.writer.StreamWriter</outbound>
                <outbound type="feature" confirmed="yes">org.apache.abdera.writer.StreamWriter.writeAttribute(java.lang.String, java.lang.String)</outbound>
                <inbound type="feature" confirmed="yes">org.apache.abdera.util.AbstractStreamWriter.startContent(java.lang.String)</inbound>
                <inbound type="feature" confirmed="yes">org.apache.abdera.util.AbstractStreamWriter.startContent(org.apache.abdera.model.Content$Type, java.lang.String)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.util.AbstractStreamWriter.startContent(org.apache.abdera.model.Content$Type)</name>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="class" confirmed="yes">org.apache.abdera.model.Content$Type</outbound>
                <outbound type="feature" confirmed="yes">org.apache.abdera.util.AbstractStreamWriter.startContent(org.apache.abdera.model.Content$Type, java.lang.String)</outbound>
                <outbound type="class" confirmed="yes">org.apache.abdera.writer.StreamWriter</outbound>
                <inbound type="feature" confirmed="yes">org.apache.abdera.util.AbstractStreamWriter.writeContent(org.apache.abdera.model.Content$Type, java.io.InputStream)</inbound>
                <inbound type="feature" confirmed="yes">org.apache.abdera.util.AbstractStreamWriter.writeContent(org.apache.abdera.model.Content$Type, java.lang.String)</inbound>
                <inbound type="feature" confirmed="yes">org.apache.abdera.util.AbstractStreamWriter.writeContent(org.apache.abdera.model.Content$Type, javax.activation.DataHandler)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.util.AbstractStreamWriter.startContent(org.apache.abdera.model.Content$Type, java.lang.String)</name>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="feature" confirmed="no">java.lang.String.toLowerCase()</outbound>
                <outbound type="class" confirmed="yes">org.apache.abdera.model.Content$Type</outbound>
                <outbound type="feature" confirmed="no">org.apache.abdera.model.Content$Type.name()</outbound>
                <outbound type="feature" confirmed="yes">org.apache.abdera.util.AbstractStreamWriter.startContent(java.lang.String, java.lang.String)</outbound>
                <outbound type="class" confirmed="yes">org.apache.abdera.writer.StreamWriter</outbound>
                <inbound type="feature" confirmed="yes">org.apache.abdera.util.AbstractStreamWriter.startContent(org.apache.abdera.model.Content$Type)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.util.AbstractStreamWriter.startContributor()</name>
                <outbound type="class" confirmed="no">javax.xml.namespace.QName</outbound>
                <outbound type="feature" confirmed="yes">org.apache.abdera.util.AbstractStreamWriter.startElement(javax.xml.namespace.QName)</outbound>
                <outbound type="feature" confirmed="yes">org.apache.abdera.util.Constants.CONTRIBUTOR</outbound>
                <outbound type="class" confirmed="yes">org.apache.abdera.writer.StreamWriter</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.util.AbstractStreamWriter.startControl()</name>
                <outbound type="class" confirmed="no">javax.xml.namespace.QName</outbound>
                <outbound type="feature" confirmed="yes">org.apache.abdera.util.AbstractStreamWriter.startElement(javax.xml.namespace.QName)</outbound>
                <outbound type="feature" confirmed="yes">org.apache.abdera.util.Constants.CONTROL</outbound>
                <outbound type="class" confirmed="yes">org.apache.abdera.writer.StreamWriter</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.util.AbstractStreamWriter.startDocument()</name>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="feature" confirmed="no">org.apache.abdera.util.AbstractStreamWriter.startDocument(java.lang.String)</outbound>
                <outbound type="class" confirmed="yes">org.apache.abdera.writer.StreamWriter</outbound>
            </feature>
            <feature confirmed="no">
                <name>org.apache.abdera.util.AbstractStreamWriter.startDocument(java.lang.String)</name>
                <inbound type="feature" confirmed="yes">org.apache.abdera.util.AbstractStreamWriter.startDocument()</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.util.AbstractStreamWriter.startElement(java.lang.String)</name>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="feature" confirmed="no">org.apache.abdera.util.AbstractStreamWriter.startElement(java.lang.String, java.lang.String, java.lang.String)</outbound>
                <outbound type="class" confirmed="yes">org.apache.abdera.writer.StreamWriter</outbound>
                <inbound type="feature" confirmed="yes">org.apache.abdera.util.AbstractStreamWriter.startPerson(java.lang.String)</inbound>
                <inbound type="feature" confirmed="yes">org.apache.abdera.util.AbstractStreamWriter.startText(java.lang.String, org.apache.abdera.model.Text$Type)</inbound>
                <inbound type="feature" confirmed="yes">org.apache.abdera.util.AbstractStreamWriter.writeDate(java.lang.String, java.lang.String)</inbound>
                <inbound type="feature" confirmed="yes">org.apache.abdera.util.AbstractStreamWriter.writeDate(java.lang.String, java.util.Date)</inbound>
                <inbound type="feature" confirmed="yes">org.apache.abdera.util.AbstractStreamWriter.writeIRIElement(java.lang.String, java.lang.String)</inbound>
                <inbound type="feature" confirmed="yes">org.apache.abdera.util.AbstractStreamWriter.writeIRIElement(java.lang.String, org.apache.abdera.i18n.iri.IRI)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.util.AbstractStreamWriter.startElement(java.lang.String, java.lang.String)</name>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="feature" confirmed="no">org.apache.abdera.util.AbstractStreamWriter.startElement(java.lang.String, java.lang.String, java.lang.String)</outbound>
                <outbound type="class" confirmed="yes">org.apache.abdera.writer.StreamWriter</outbound>
                <inbound type="feature" confirmed="yes">org.apache.abdera.util.AbstractStreamWriter.startPerson(java.lang.String, java.lang.String)</inbound>
                <inbound type="feature" confirmed="yes">org.apache.abdera.util.AbstractStreamWriter.startText(java.lang.String, java.lang.String, org.apache.abdera.model.Text$Type)</inbound>
                <inbound type="feature" confirmed="yes">org.apache.abdera.util.AbstractStreamWriter.writeDate(java.lang.String, java.lang.String, java.lang.String)</inbound>
                <inbound type="feature" confirmed="yes">org.apache.abdera.util.AbstractStreamWriter.writeDate(java.lang.String, java.lang.String, java.util.Date)</inbound>
                <inbound type="feature" confirmed="yes">org.apache.abdera.util.AbstractStreamWriter.writeIRIElement(java.lang.String, java.lang.String, java.lang.String)</inbound>
                <inbound type="feature" confirmed="yes">org.apache.abdera.util.AbstractStreamWriter.writeIRIElement(java.lang.String, java.lang.String, org.apache.abdera.i18n.iri.IRI)</inbound>
            </feature>
            <feature confirmed="no">
                <name>org.apache.abdera.util.AbstractStreamWriter.startElement(java.lang.String, java.lang.String, java.lang.String)</name>
                <inbound type="feature" confirmed="yes">org.apache.abdera.util.AbstractStreamWriter.startElement(java.lang.String)</inbound>
                <inbound type="feature" confirmed="yes">org.apache.abdera.util.AbstractStreamWriter.startElement(java.lang.String, java.lang.String)</inbound>
                <inbound type="feature" confirmed="yes">org.apache.abdera.util.AbstractStreamWriter.startElement(javax.xml.namespace.QName)</inbound>
                <inbound type="feature" confirmed="yes">org.apache.abdera.util.AbstractStreamWriter.startPerson(java.lang.String, java.lang.String, java.lang.String)</inbound>
                <inbound type="feature" confirmed="yes">org.apache.abdera.util.AbstractStreamWriter.startText(java.lang.String, java.lang.String, java.lang.String, org.apache.abdera.model.Text$Type)</inbound>
                <inbound type="feature" confirmed="yes">org.apache.abdera.util.AbstractStreamWriter.writeDate(java.lang.String, java.lang.String, java.lang.String, java.lang.String)</inbound>
                <inbound type="feature" confirmed="yes">org.apache.abdera.util.AbstractStreamWriter.writeDate(java.lang.String, java.lang.String, java.lang.String, java.util.Date)</inbound>
                <inbound type="feature" confirmed="yes">org.apache.abdera.util.AbstractStreamWriter.writeIRIElement(java.lang.String, java.lang.String, java.lang.String, java.lang.String)</inbound>
                <inbound type="feature" confirmed="yes">org.apache.abdera.util.AbstractStreamWriter.writeIRIElement(java.lang.String, java.lang.String, java.lang.String, org.apache.abdera.i18n.iri.IRI)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.util.AbstractStreamWriter.startElement(javax.xml.namespace.QName)</name>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="class" confirmed="no">javax.xml.namespace.QName</outbound>
                <outbound type="feature" confirmed="no">javax.xml.namespace.QName.getLocalPart()</outbound>
                <outbound type="feature" confirmed="no">javax.xml.namespace.QName.getNamespaceURI()</outbound>
                <outbound type="feature" confirmed="no">javax.xml.namespace.QName.getPrefix()</outbound>
                <outbound type="feature" confirmed="no">org.apache.abdera.util.AbstractStreamWriter.startElement(java.lang.String, java.lang.String, java.lang.String)</outbound>
                <outbound type="class" confirmed="yes">org.apache.abdera.writer.StreamWriter</outbound>
                <inbound type="feature" confirmed="yes">org.apache.abdera.util.AbstractStreamWriter.startAuthor()</inbound>
                <inbound type="feature" confirmed="yes">org.apache.abdera.util.AbstractStreamWriter.startCategories(boolean, java.lang.String)</inbound>
                <inbound type="feature" confirmed="yes">org.apache.abdera.util.AbstractStreamWriter.startCategory(java.lang.String, java.lang.String, java.lang.String)</inbound>
                <inbound type="feature" confirmed="yes">org.apache.abdera.util.AbstractStreamWriter.startCollection(java.lang.String)</inbound>
                <inbound type="feature" confirmed="yes">org.apache.abdera.util.AbstractStreamWriter.startContent(java.lang.String, java.lang.String)</inbound>
                <inbound type="feature" confirmed="yes">org.apache.abdera.util.AbstractStreamWriter.startContributor()</inbound>
                <inbound type="feature" confirmed="yes">org.apache.abdera.util.AbstractStreamWriter.startControl()</inbound>
                <inbound type="feature" confirmed="yes">org.apache.abdera.util.AbstractStreamWriter.startEntry()</inbound>
                <inbound type="feature" confirmed="yes">org.apache.abdera.util.AbstractStreamWriter.startFeed()</inbound>
                <inbound type="feature" confirmed="yes">org.apache.abdera.util.AbstractStreamWriter.startGenerator(java.lang.String, java.lang.String)</inbound>
                <inbound type="feature" confirmed="yes">org.apache.abdera.util.AbstractStreamWriter.startLink(java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, long)</inbound>
                <inbound type="feature" confirmed="yes">org.apache.abdera.util.AbstractStreamWriter.startPerson(javax.xml.namespace.QName)</inbound>
                <inbound type="feature" confirmed="yes">org.apache.abdera.util.AbstractStreamWriter.startService()</inbound>
                <inbound type="feature" confirmed="yes">org.apache.abdera.util.AbstractStreamWriter.startSource()</inbound>
                <inbound type="feature" confirmed="yes">org.apache.abdera.util.AbstractStreamWriter.startText(javax.xml.namespace.QName, org.apache.abdera.model.Text$Type)</inbound>
                <inbound type="feature" confirmed="yes">org.apache.abdera.util.AbstractStreamWriter.startWorkspace()</inbound>
                <inbound type="feature" confirmed="yes">org.apache.abdera.util.AbstractStreamWriter.writeAccepts(java.lang.String[])</inbound>
                <inbound type="feature" confirmed="yes">org.apache.abdera.util.AbstractStreamWriter.writeCategory(java.lang.String, java.lang.String, java.lang.String)</inbound>
                <inbound type="feature" confirmed="yes">org.apache.abdera.util.AbstractStreamWriter.writeDate(javax.xml.namespace.QName, java.lang.String)</inbound>
                <inbound type="feature" confirmed="yes">org.apache.abdera.util.AbstractStreamWriter.writeDraft(boolean)</inbound>
                <inbound type="feature" confirmed="yes">org.apache.abdera.util.AbstractStreamWriter.writeGenerator(java.lang.String, java.lang.String, java.lang.String)</inbound>
                <inbound type="feature" confirmed="yes">org.apache.abdera.util.AbstractStreamWriter.writeIRIElement(javax.xml.namespace.QName, java.lang.String)</inbound>
                <inbound type="feature" confirmed="yes">org.apache.abdera.util.AbstractStreamWriter.writePersonEmail(java.lang.String)</inbound>
                <inbound type="feature" confirmed="yes">org.apache.abdera.util.AbstractStreamWriter.writePersonName(java.lang.String)</inbound>
                <inbound type="feature" confirmed="yes">org.apache.abdera.util.AbstractStreamWriter.writePersonUri(java.lang.String)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.util.AbstractStreamWriter.startEntry()</name>
                <outbound type="class" confirmed="no">javax.xml.namespace.QName</outbound>
                <outbound type="feature" confirmed="yes">org.apache.abdera.util.AbstractStreamWriter.startElement(javax.xml.namespace.QName)</outbound>
                <outbound type="feature" confirmed="yes">org.apache.abdera.util.Constants.ENTRY</outbound>
                <outbound type="class" confirmed="yes">org.apache.abdera.writer.StreamWriter</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.util.AbstractStreamWriter.startFeed()</name>
                <outbound type="class" confirmed="no">javax.xml.namespace.QName</outbound>
                <outbound type="feature" confirmed="yes">org.apache.abdera.util.AbstractStreamWriter.startElement(javax.xml.namespace.QName)</outbound>
                <outbound type="feature" confirmed="yes">org.apache.abdera.util.Constants.FEED</outbound>
                <outbound type="class" confirmed="yes">org.apache.abdera.writer.StreamWriter</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.util.AbstractStreamWriter.startGenerator(java.lang.String, java.lang.String)</name>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="class" confirmed="no">javax.xml.namespace.QName</outbound>
                <outbound type="feature" confirmed="yes">org.apache.abdera.util.AbstractStreamWriter.startElement(javax.xml.namespace.QName)</outbound>
                <outbound type="feature" confirmed="yes">org.apache.abdera.util.Constants.GENERATOR</outbound>
                <outbound type="class" confirmed="yes">org.apache.abdera.writer.StreamWriter</outbound>
                <outbound type="feature" confirmed="yes">org.apache.abdera.writer.StreamWriter.writeAttribute(java.lang.String, java.lang.String)</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.util.AbstractStreamWriter.startLink(java.lang.String)</name>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="feature" confirmed="yes">org.apache.abdera.util.AbstractStreamWriter.startLink(java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, long)</outbound>
                <outbound type="class" confirmed="yes">org.apache.abdera.writer.StreamWriter</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.util.AbstractStreamWriter.startLink(java.lang.String, java.lang.String)</name>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="feature" confirmed="yes">org.apache.abdera.util.AbstractStreamWriter.startLink(java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, long)</outbound>
                <outbound type="class" confirmed="yes">org.apache.abdera.writer.StreamWriter</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.util.AbstractStreamWriter.startLink(java.lang.String, java.lang.String, java.lang.String)</name>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="feature" confirmed="yes">org.apache.abdera.util.AbstractStreamWriter.startLink(java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, long)</outbound>
                <outbound type="class" confirmed="yes">org.apache.abdera.writer.StreamWriter</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.util.AbstractStreamWriter.startLink(java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, long)</name>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="feature" confirmed="no">java.lang.String.valueOf(long)</outbound>
                <outbound type="class" confirmed="no">javax.xml.namespace.QName</outbound>
                <outbound type="feature" confirmed="yes">org.apache.abdera.util.AbstractStreamWriter.startElement(javax.xml.namespace.QName)</outbound>
                <outbound type="feature" confirmed="yes">org.apache.abdera.util.Constants.LINK</outbound>
                <outbound type="class" confirmed="yes">org.apache.abdera.writer.StreamWriter</outbound>
                <outbound type="feature" confirmed="yes">org.apache.abdera.writer.StreamWriter.writeAttribute(java.lang.String, java.lang.String)</outbound>
                <inbound type="feature" confirmed="yes">org.apache.abdera.util.AbstractStreamWriter.startLink(java.lang.String)</inbound>
                <inbound type="feature" confirmed="yes">org.apache.abdera.util.AbstractStreamWriter.startLink(java.lang.String, java.lang.String)</inbound>
                <inbound type="feature" confirmed="yes">org.apache.abdera.util.AbstractStreamWriter.startLink(java.lang.String, java.lang.String, java.lang.String)</inbound>
                <inbound type="feature" confirmed="yes">org.apache.abdera.util.AbstractStreamWriter.writeLink(java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, long)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.util.AbstractStreamWriter.startPerson(java.lang.String)</name>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="feature" confirmed="yes">org.apache.abdera.util.AbstractStreamWriter.startElement(java.lang.String)</outbound>
                <outbound type="class" confirmed="yes">org.apache.abdera.writer.StreamWriter</outbound>
                <inbound type="feature" confirmed="yes">org.apache.abdera.util.AbstractStreamWriter.writePerson(java.lang.String, java.lang.String, java.lang.String, java.lang.String)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.util.AbstractStreamWriter.startPerson(java.lang.String, java.lang.String)</name>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="feature" confirmed="yes">org.apache.abdera.util.AbstractStreamWriter.startElement(java.lang.String, java.lang.String)</outbound>
                <outbound type="class" confirmed="yes">org.apache.abdera.writer.StreamWriter</outbound>
                <inbound type="feature" confirmed="yes">org.apache.abdera.util.AbstractStreamWriter.writePerson(java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.util.AbstractStreamWriter.startPerson(java.lang.String, java.lang.String, java.lang.String)</name>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="feature" confirmed="no">org.apache.abdera.util.AbstractStreamWriter.startElement(java.lang.String, java.lang.String, java.lang.String)</outbound>
                <outbound type="class" confirmed="yes">org.apache.abdera.writer.StreamWriter</outbound>
                <inbound type="feature" confirmed="yes">org.apache.abdera.util.AbstractStreamWriter.writePerson(java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.util.AbstractStreamWriter.startPerson(javax.xml.namespace.QName)</name>
                <outbound type="class" confirmed="no">javax.xml.namespace.QName</outbound>
                <outbound type="feature" confirmed="yes">org.apache.abdera.util.AbstractStreamWriter.startElement(javax.xml.namespace.QName)</outbound>
                <outbound type="class" confirmed="yes">org.apache.abdera.writer.StreamWriter</outbound>
                <inbound type="feature" confirmed="yes">org.apache.abdera.util.AbstractStreamWriter.writePerson(javax.xml.namespace.QName, java.lang.String, java.lang.String, java.lang.String)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.util.AbstractStreamWriter.startService()</name>
                <outbound type="class" confirmed="no">javax.xml.namespace.QName</outbound>
                <outbound type="feature" confirmed="yes">org.apache.abdera.util.AbstractStreamWriter.startElement(javax.xml.namespace.QName)</outbound>
                <outbound type="feature" confirmed="yes">org.apache.abdera.util.Constants.SERVICE</outbound>
                <outbound type="class" confirmed="yes">org.apache.abdera.writer.StreamWriter</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.util.AbstractStreamWriter.startSource()</name>
                <outbound type="class" confirmed="no">javax.xml.namespace.QName</outbound>
                <outbound type="feature" confirmed="yes">org.apache.abdera.util.AbstractStreamWriter.startElement(javax.xml.namespace.QName)</outbound>
                <outbound type="feature" confirmed="yes">org.apache.abdera.util.Constants.SOURCE</outbound>
                <outbound type="class" confirmed="yes">org.apache.abdera.writer.StreamWriter</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.util.AbstractStreamWriter.startText(java.lang.String, java.lang.String, java.lang.String, org.apache.abdera.model.Text$Type)</name>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="feature" confirmed="no">java.lang.String.toLowerCase()</outbound>
                <outbound type="class" confirmed="yes">org.apache.abdera.model.Text$Type</outbound>
                <outbound type="feature" confirmed="no">org.apache.abdera.model.Text$Type.name()</outbound>
                <outbound type="feature" confirmed="no">org.apache.abdera.util.AbstractStreamWriter.startElement(java.lang.String, java.lang.String, java.lang.String)</outbound>
                <outbound type="class" confirmed="yes">org.apache.abdera.writer.StreamWriter</outbound>
                <outbound type="feature" confirmed="yes">org.apache.abdera.writer.StreamWriter.writeAttribute(java.lang.String, java.lang.String)</outbound>
                <inbound type="feature" confirmed="yes">org.apache.abdera.util.AbstractStreamWriter.writeText(java.lang.String, java.lang.String, java.lang.String, org.apache.abdera.model.Text$Type, java.lang.String)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.util.AbstractStreamWriter.startText(java.lang.String, java.lang.String, org.apache.abdera.model.Text$Type)</name>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="feature" confirmed="no">java.lang.String.toLowerCase()</outbound>
                <outbound type="class" confirmed="yes">org.apache.abdera.model.Text$Type</outbound>
                <outbound type="feature" confirmed="no">org.apache.abdera.model.Text$Type.name()</outbound>
                <outbound type="feature" confirmed="yes">org.apache.abdera.util.AbstractStreamWriter.startElement(java.lang.String, java.lang.String)</outbound>
                <outbound type="class" confirmed="yes">org.apache.abdera.writer.StreamWriter</outbound>
                <outbound type="feature" confirmed="yes">org.apache.abdera.writer.StreamWriter.writeAttribute(java.lang.String, java.lang.String)</outbound>
                <inbound type="feature" confirmed="yes">org.apache.abdera.util.AbstractStreamWriter.writeText(java.lang.String, java.lang.String, org.apache.abdera.model.Text$Type, java.lang.String)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.util.AbstractStreamWriter.startText(java.lang.String, org.apache.abdera.model.Text$Type)</name>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="feature" confirmed="no">java.lang.String.toLowerCase()</outbound>
                <outbound type="class" confirmed="yes">org.apache.abdera.model.Text$Type</outbound>
                <outbound type="feature" confirmed="no">org.apache.abdera.model.Text$Type.name()</outbound>
                <outbound type="feature" confirmed="yes">org.apache.abdera.util.AbstractStreamWriter.startElement(java.lang.String)</outbound>
                <outbound type="class" confirmed="yes">org.apache.abdera.writer.StreamWriter</outbound>
                <outbound type="feature" confirmed="yes">org.apache.abdera.writer.StreamWriter.writeAttribute(java.lang.String, java.lang.String)</outbound>
                <inbound type="feature" confirmed="yes">org.apache.abdera.util.AbstractStreamWriter.writeText(java.lang.String, org.apache.abdera.model.Text$Type, java.lang.String)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.util.AbstractStreamWriter.startText(javax.xml.namespace.QName, org.apache.abdera.model.Text$Type)</name>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="feature" confirmed="no">java.lang.String.toLowerCase()</outbound>
                <outbound type="class" confirmed="no">javax.xml.namespace.QName</outbound>
                <outbound type="class" confirmed="yes">org.apache.abdera.model.Text$Type</outbound>
                <outbound type="feature" confirmed="no">org.apache.abdera.model.Text$Type.name()</outbound>
                <outbound type="feature" confirmed="yes">org.apache.abdera.util.AbstractStreamWriter.startElement(javax.xml.namespace.QName)</outbound>
                <outbound type="class" confirmed="yes">org.apache.abdera.writer.StreamWriter</outbound>
                <outbound type="feature" confirmed="yes">org.apache.abdera.writer.StreamWriter.writeAttribute(java.lang.String, java.lang.String)</outbound>
                <inbound type="feature" confirmed="yes">org.apache.abdera.util.AbstractStreamWriter.writeText(javax.xml.namespace.QName, org.apache.abdera.model.Text$Type, java.lang.String)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.util.AbstractStreamWriter.startWorkspace()</name>
                <outbound type="class" confirmed="no">javax.xml.namespace.QName</outbound>
                <outbound type="feature" confirmed="yes">org.apache.abdera.util.AbstractStreamWriter.startElement(javax.xml.namespace.QName)</outbound>
                <outbound type="feature" confirmed="yes">org.apache.abdera.util.Constants.WORKSPACE</outbound>
                <outbound type="class" confirmed="yes">org.apache.abdera.writer.StreamWriter</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.util.AbstractStreamWriter.writeAccepts(java.lang.String[])</name>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="class" confirmed="no">javax.xml.namespace.QName</outbound>
                <outbound type="feature" confirmed="yes">org.apache.abdera.util.AbstractStreamWriter.startElement(javax.xml.namespace.QName)</outbound>
                <outbound type="feature" confirmed="yes">org.apache.abdera.util.Constants.ACCEPT</outbound>
                <outbound type="class" confirmed="yes">org.apache.abdera.writer.StreamWriter</outbound>
                <outbound type="feature" confirmed="yes">org.apache.abdera.writer.StreamWriter.endElement()</outbound>
                <outbound type="feature" confirmed="yes">org.apache.abdera.writer.StreamWriter.writeElementText(java.lang.String)</outbound>
                <inbound type="feature" confirmed="yes">org.apache.abdera.util.AbstractStreamWriter.writeAcceptsEntry()</inbound>
                <inbound type="feature" confirmed="yes">org.apache.abdera.util.AbstractStreamWriter.writeAcceptsNothing()</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.util.AbstractStreamWriter.writeAcceptsEntry()</name>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="feature" confirmed="yes">org.apache.abdera.util.AbstractStreamWriter.writeAccepts(java.lang.String[])</outbound>
                <outbound type="class" confirmed="yes">org.apache.abdera.writer.StreamWriter</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.util.AbstractStreamWriter.writeAcceptsNothing()</name>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="feature" confirmed="yes">org.apache.abdera.util.AbstractStreamWriter.writeAccepts(java.lang.String[])</outbound>
                <outbound type="class" confirmed="yes">org.apache.abdera.writer.StreamWriter</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.util.AbstractStreamWriter.writeAttribute(java.lang.String, double)</name>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="feature" confirmed="yes">org.apache.abdera.util.AbstractStreamWriter.writeAttribute(java.lang.String, java.lang.String, java.lang.String, double)</outbound>
                <outbound type="class" confirmed="yes">org.apache.abdera.writer.StreamWriter</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.util.AbstractStreamWriter.writeAttribute(java.lang.String, int)</name>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="feature" confirmed="yes">org.apache.abdera.util.AbstractStreamWriter.writeAttribute(java.lang.String, java.lang.String, java.lang.String, int)</outbound>
                <outbound type="class" confirmed="yes">org.apache.abdera.writer.StreamWriter</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.util.AbstractStreamWriter.writeAttribute(java.lang.String, java.lang.String)</name>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="feature" confirmed="no">org.apache.abdera.util.AbstractStreamWriter.writeAttribute(java.lang.String, java.lang.String, java.lang.String, java.lang.String)</outbound>
                <outbound type="class" confirmed="yes">org.apache.abdera.writer.StreamWriter</outbound>
                <inbound type="feature" confirmed="yes">org.apache.abdera.util.AbstractStreamWriter.startCategories(boolean, java.lang.String)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.util.AbstractStreamWriter.writeAttribute(java.lang.String, java.lang.String, double)</name>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="feature" confirmed="yes">org.apache.abdera.util.AbstractStreamWriter.writeAttribute(java.lang.String, java.lang.String, java.lang.String, double)</outbound>
                <outbound type="class" confirmed="yes">org.apache.abdera.writer.StreamWriter</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.util.AbstractStreamWriter.writeAttribute(java.lang.String, java.lang.String, int)</name>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="feature" confirmed="yes">org.apache.abdera.util.AbstractStreamWriter.writeAttribute(java.lang.String, java.lang.String, java.lang.String, int)</outbound>
                <outbound type="class" confirmed="yes">org.apache.abdera.writer.StreamWriter</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.util.AbstractStreamWriter.writeAttribute(java.lang.String, java.lang.String, java.lang.String)</name>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="feature" confirmed="no">org.apache.abdera.util.AbstractStreamWriter.writeAttribute(java.lang.String, java.lang.String, java.lang.String, java.lang.String)</outbound>
                <outbound type="class" confirmed="yes">org.apache.abdera.writer.StreamWriter</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.util.AbstractStreamWriter.writeAttribute(java.lang.String, java.lang.String, java.lang.String, double)</name>
                <outbound type="feature" confirmed="no">java.lang.Double.toString(double)</outbound>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="feature" confirmed="no">org.apache.abdera.util.AbstractStreamWriter.writeAttribute(java.lang.String, java.lang.String, java.lang.String, java.lang.String)</outbound>
                <outbound type="class" confirmed="yes">org.apache.abdera.writer.StreamWriter</outbound>
                <inbound type="feature" confirmed="yes">org.apache.abdera.util.AbstractStreamWriter.writeAttribute(java.lang.String, double)</inbound>
                <inbound type="feature" confirmed="yes">org.apache.abdera.util.AbstractStreamWriter.writeAttribute(java.lang.String, java.lang.String, double)</inbound>
                <inbound type="feature" confirmed="yes">org.apache.abdera.util.AbstractStreamWriter.writeAttribute(javax.xml.namespace.QName, double)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.util.AbstractStreamWriter.writeAttribute(java.lang.String, java.lang.String, java.lang.String, int)</name>
                <outbound type="feature" confirmed="no">java.lang.Integer.toString(int)</outbound>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="feature" confirmed="no">org.apache.abdera.util.AbstractStreamWriter.writeAttribute(java.lang.String, java.lang.String, java.lang.String, java.lang.String)</outbound>
                <outbound type="class" confirmed="yes">org.apache.abdera.writer.StreamWriter</outbound>
                <inbound type="feature" confirmed="yes">org.apache.abdera.util.AbstractStreamWriter.writeAttribute(java.lang.String, int)</inbound>
                <inbound type="feature" confirmed="yes">org.apache.abdera.util.AbstractStreamWriter.writeAttribute(java.lang.String, java.lang.String, int)</inbound>
                <inbound type="feature" confirmed="yes">org.apache.abdera.util.AbstractStreamWriter.writeAttribute(javax.xml.namespace.QName, int)</inbound>
            </feature>
            <feature confirmed="no">
                <name>org.apache.abdera.util.AbstractStreamWriter.writeAttribute(java.lang.String, java.lang.String, java.lang.String, java.lang.String)</name>
                <inbound type="feature" confirmed="yes">org.apache.abdera.util.AbstractStreamWriter.writeAttribute(java.lang.String, java.lang.String)</inbound>
                <inbound type="feature" confirmed="yes">org.apache.abdera.util.AbstractStreamWriter.writeAttribute(java.lang.String, java.lang.String, java.lang.String)</inbound>
                <inbound type="feature" confirmed="yes">org.apache.abdera.util.AbstractStreamWriter.writeAttribute(java.lang.String, java.lang.String, java.lang.String, double)</inbound>
                <inbound type="feature" confirmed="yes">org.apache.abdera.util.AbstractStreamWriter.writeAttribute(java.lang.String, java.lang.String, java.lang.String, int)</inbound>
                <inbound type="feature" confirmed="yes">org.apache.abdera.util.AbstractStreamWriter.writeAttribute(java.lang.String, java.lang.String, java.lang.String, java.util.Date)</inbound>
                <inbound type="feature" confirmed="yes">org.apache.abdera.util.AbstractStreamWriter.writeAttribute(java.lang.String, java.lang.String, java.lang.String, long)</inbound>
                <inbound type="feature" confirmed="yes">org.apache.abdera.util.AbstractStreamWriter.writeAttribute(javax.xml.namespace.QName, java.lang.String)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.util.AbstractStreamWriter.writeAttribute(java.lang.String, java.lang.String, java.lang.String, java.util.Date)</name>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="class" confirmed="no">java.util.Date</outbound>
                <outbound type="feature" confirmed="yes">org.apache.abdera.model.AtomDate.format(java.util.Date)</outbound>
                <outbound type="feature" confirmed="no">org.apache.abdera.util.AbstractStreamWriter.writeAttribute(java.lang.String, java.lang.String, java.lang.String, java.lang.String)</outbound>
                <outbound type="class" confirmed="yes">org.apache.abdera.writer.StreamWriter</outbound>
                <inbound type="feature" confirmed="yes">org.apache.abdera.util.AbstractStreamWriter.writeAttribute(java.lang.String, java.lang.String, java.util.Date)</inbound>
                <inbound type="feature" confirmed="yes">org.apache.abdera.util.AbstractStreamWriter.writeAttribute(java.lang.String, java.util.Date)</inbound>
                <inbound type="feature" confirmed="yes">org.apache.abdera.util.AbstractStreamWriter.writeAttribute(javax.xml.namespace.QName, java.util.Date)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.util.AbstractStreamWriter.writeAttribute(java.lang.String, java.lang.String, java.lang.String, long)</name>
                <outbound type="feature" confirmed="no">java.lang.Long.toString(long)</outbound>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="feature" confirmed="no">org.apache.abdera.util.AbstractStreamWriter.writeAttribute(java.lang.String, java.lang.String, java.lang.String, java.lang.String)</outbound>
                <outbound type="class" confirmed="yes">org.apache.abdera.writer.StreamWriter</outbound>
                <inbound type="feature" confirmed="yes">org.apache.abdera.util.AbstractStreamWriter.writeAttribute(java.lang.String, java.lang.String, long)</inbound>
                <inbound type="feature" confirmed="yes">org.apache.abdera.util.AbstractStreamWriter.writeAttribute(java.lang.String, long)</inbound>
                <inbound type="feature" confirmed="yes">org.apache.abdera.util.AbstractStreamWriter.writeAttribute(javax.xml.namespace.QName, long)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.util.AbstractStreamWriter.writeAttribute(java.lang.String, java.lang.String, java.util.Date)</name>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="class" confirmed="no">java.util.Date</outbound>
                <outbound type="feature" confirmed="yes">org.apache.abdera.util.AbstractStreamWriter.writeAttribute(java.lang.String, java.lang.String, java.lang.String, java.util.Date)</outbound>
                <outbound type="class" confirmed="yes">org.apache.abdera.writer.StreamWriter</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.util.AbstractStreamWriter.writeAttribute(java.lang.String, java.lang.String, long)</name>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="feature" confirmed="yes">org.apache.abdera.util.AbstractStreamWriter.writeAttribute(java.lang.String, java.lang.String, java.lang.String, long)</outbound>
                <outbound type="class" confirmed="yes">org.apache.abdera.writer.StreamWriter</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.util.AbstractStreamWriter.writeAttribute(java.lang.String, java.util.Date)</name>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="class" confirmed="no">java.util.Date</outbound>
                <outbound type="feature" confirmed="yes">org.apache.abdera.util.AbstractStreamWriter.writeAttribute(java.lang.String, java.lang.String, java.lang.String, java.util.Date)</outbound>
                <outbound type="class" confirmed="yes">org.apache.abdera.writer.StreamWriter</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.util.AbstractStreamWriter.writeAttribute(java.lang.String, long)</name>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="feature" confirmed="yes">org.apache.abdera.util.AbstractStreamWriter.writeAttribute(java.lang.String, java.lang.String, java.lang.String, long)</outbound>
                <outbound type="class" confirmed="yes">org.apache.abdera.writer.StreamWriter</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.util.AbstractStreamWriter.writeAttribute(javax.xml.namespace.QName, double)</name>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="class" confirmed="no">javax.xml.namespace.QName</outbound>
                <outbound type="feature" confirmed="no">javax.xml.namespace.QName.getLocalPart()</outbound>
                <outbound type="feature" confirmed="no">javax.xml.namespace.QName.getNamespaceURI()</outbound>
                <outbound type="feature" confirmed="no">javax.xml.namespace.QName.getPrefix()</outbound>
                <outbound type="feature" confirmed="yes">org.apache.abdera.util.AbstractStreamWriter.writeAttribute(java.lang.String, java.lang.String, java.lang.String, double)</outbound>
                <outbound type="class" confirmed="yes">org.apache.abdera.writer.StreamWriter</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.util.AbstractStreamWriter.writeAttribute(javax.xml.namespace.QName, int)</name>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="class" confirmed="no">javax.xml.namespace.QName</outbound>
                <outbound type="feature" confirmed="no">javax.xml.namespace.QName.getLocalPart()</outbound>
                <outbound type="feature" confirmed="no">javax.xml.namespace.QName.getNamespaceURI()</outbound>
                <outbound type="feature" confirmed="no">javax.xml.namespace.QName.getPrefix()</outbound>
                <outbound type="feature" confirmed="yes">org.apache.abdera.util.AbstractStreamWriter.writeAttribute(java.lang.String, java.lang.String, java.lang.String, int)</outbound>
                <outbound type="class" confirmed="yes">org.apache.abdera.writer.StreamWriter</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.util.AbstractStreamWriter.writeAttribute(javax.xml.namespace.QName, java.lang.String)</name>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="class" confirmed="no">javax.xml.namespace.QName</outbound>
                <outbound type="feature" confirmed="no">javax.xml.namespace.QName.getLocalPart()</outbound>
                <outbound type="feature" confirmed="no">javax.xml.namespace.QName.getNamespaceURI()</outbound>
                <outbound type="feature" confirmed="no">javax.xml.namespace.QName.getPrefix()</outbound>
                <outbound type="feature" confirmed="no">org.apache.abdera.util.AbstractStreamWriter.writeAttribute(java.lang.String, java.lang.String, java.lang.String, java.lang.String)</outbound>
                <outbound type="class" confirmed="yes">org.apache.abdera.writer.StreamWriter</outbound>
                <inbound type="feature" confirmed="yes">org.apache.abdera.util.AbstractStreamWriter.writeBase(java.lang.String)</inbound>
                <inbound type="feature" confirmed="yes">org.apache.abdera.util.AbstractStreamWriter.writeLanguage(java.lang.String)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.util.AbstractStreamWriter.writeAttribute(javax.xml.namespace.QName, java.util.Date)</name>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="class" confirmed="no">java.util.Date</outbound>
                <outbound type="class" confirmed="no">javax.xml.namespace.QName</outbound>
                <outbound type="feature" confirmed="no">javax.xml.namespace.QName.getLocalPart()</outbound>
                <outbound type="feature" confirmed="no">javax.xml.namespace.QName.getNamespaceURI()</outbound>
                <outbound type="feature" confirmed="no">javax.xml.namespace.QName.getPrefix()</outbound>
                <outbound type="feature" confirmed="yes">org.apache.abdera.util.AbstractStreamWriter.writeAttribute(java.lang.String, java.lang.String, java.lang.String, java.util.Date)</outbound>
                <outbound type="class" confirmed="yes">org.apache.abdera.writer.StreamWriter</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.util.AbstractStreamWriter.writeAttribute(javax.xml.namespace.QName, long)</name>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="class" confirmed="no">javax.xml.namespace.QName</outbound>
                <outbound type="feature" confirmed="no">javax.xml.namespace.QName.getLocalPart()</outbound>
                <outbound type="feature" confirmed="no">javax.xml.namespace.QName.getNamespaceURI()</outbound>
                <outbound type="feature" confirmed="no">javax.xml.namespace.QName.getPrefix()</outbound>
                <outbound type="feature" confirmed="yes">org.apache.abdera.util.AbstractStreamWriter.writeAttribute(java.lang.String, java.lang.String, java.lang.String, long)</outbound>
                <outbound type="class" confirmed="yes">org.apache.abdera.writer.StreamWriter</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.util.AbstractStreamWriter.writeAuthor(java.lang.String)</name>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="feature" confirmed="yes">org.apache.abdera.util.AbstractStreamWriter.writeAuthor(java.lang.String, java.lang.String, java.lang.String)</outbound>
                <outbound type="class" confirmed="yes">org.apache.abdera.writer.StreamWriter</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.util.AbstractStreamWriter.writeAuthor(java.lang.String, java.lang.String, java.lang.String)</name>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="class" confirmed="no">javax.xml.namespace.QName</outbound>
                <outbound type="feature" confirmed="yes">org.apache.abdera.util.AbstractStreamWriter.writePerson(javax.xml.namespace.QName, java.lang.String, java.lang.String, java.lang.String)</outbound>
                <outbound type="feature" confirmed="yes">org.apache.abdera.util.Constants.AUTHOR</outbound>
                <outbound type="class" confirmed="yes">org.apache.abdera.writer.StreamWriter</outbound>
                <inbound type="feature" confirmed="yes">org.apache.abdera.util.AbstractStreamWriter.writeAuthor(java.lang.String)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.util.AbstractStreamWriter.writeBase(java.lang.String)</name>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="class" confirmed="no">javax.xml.namespace.QName</outbound>
                <outbound type="feature" confirmed="yes">org.apache.abdera.util.AbstractStreamWriter.writeAttribute(javax.xml.namespace.QName, java.lang.String)</outbound>
                <outbound type="feature" confirmed="yes">org.apache.abdera.util.Constants.BASE</outbound>
                <outbound type="class" confirmed="yes">org.apache.abdera.writer.StreamWriter</outbound>
                <inbound type="feature" confirmed="yes">org.apache.abdera.util.AbstractStreamWriter.writeBase(org.apache.abdera.i18n.iri.IRI)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.util.AbstractStreamWriter.writeBase(org.apache.abdera.i18n.iri.IRI)</name>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="class" confirmed="no">org.apache.abdera.i18n.iri.IRI</outbound>
                <outbound type="feature" confirmed="no">org.apache.abdera.i18n.iri.IRI.toString()</outbound>
                <outbound type="feature" confirmed="yes">org.apache.abdera.util.AbstractStreamWriter.writeBase(java.lang.String)</outbound>
                <outbound type="class" confirmed="yes">org.apache.abdera.writer.StreamWriter</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.util.AbstractStreamWriter.writeCategory(java.lang.String)</name>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="feature" confirmed="yes">org.apache.abdera.util.AbstractStreamWriter.writeCategory(java.lang.String, java.lang.String, java.lang.String)</outbound>
                <outbound type="class" confirmed="yes">org.apache.abdera.writer.StreamWriter</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.util.AbstractStreamWriter.writeCategory(java.lang.String, java.lang.String)</name>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="feature" confirmed="yes">org.apache.abdera.util.AbstractStreamWriter.writeCategory(java.lang.String, java.lang.String, java.lang.String)</outbound>
                <outbound type="class" confirmed="yes">org.apache.abdera.writer.StreamWriter</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.util.AbstractStreamWriter.writeCategory(java.lang.String, java.lang.String, java.lang.String)</name>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="class" confirmed="no">javax.xml.namespace.QName</outbound>
                <outbound type="feature" confirmed="yes">org.apache.abdera.util.AbstractStreamWriter.startElement(javax.xml.namespace.QName)</outbound>
                <outbound type="feature" confirmed="yes">org.apache.abdera.util.Constants.CATEGORY</outbound>
                <outbound type="class" confirmed="yes">org.apache.abdera.writer.StreamWriter</outbound>
                <outbound type="feature" confirmed="yes">org.apache.abdera.writer.StreamWriter.endElement()</outbound>
                <outbound type="feature" confirmed="yes">org.apache.abdera.writer.StreamWriter.writeAttribute(java.lang.String, java.lang.String)</outbound>
                <inbound type="feature" confirmed="yes">org.apache.abdera.util.AbstractStreamWriter.writeCategory(java.lang.String)</inbound>
                <inbound type="feature" confirmed="yes">org.apache.abdera.util.AbstractStreamWriter.writeCategory(java.lang.String, java.lang.String)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.util.AbstractStreamWriter.writeContent(java.lang.String, java.lang.String)</name>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="feature" confirmed="yes">org.apache.abdera.util.AbstractStreamWriter.startContent(java.lang.String)</outbound>
                <outbound type="class" confirmed="yes">org.apache.abdera.writer.StreamWriter</outbound>
                <outbound type="feature" confirmed="yes">org.apache.abdera.writer.StreamWriter.endContent()</outbound>
                <outbound type="feature" confirmed="yes">org.apache.abdera.writer.StreamWriter.writeElementText(java.lang.String)</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.util.AbstractStreamWriter.writeContent(org.apache.abdera.model.Content$Type, java.io.InputStream)</name>
                <outbound type="class" confirmed="no">java.io.IOException</outbound>
                <outbound type="class" confirmed="no">java.io.InputStream</outbound>
                <outbound type="class" confirmed="yes">org.apache.abdera.model.Content$Type</outbound>
                <outbound type="feature" confirmed="yes">org.apache.abdera.util.AbstractStreamWriter.startContent(org.apache.abdera.model.Content$Type)</outbound>
                <outbound type="class" confirmed="yes">org.apache.abdera.writer.StreamWriter</outbound>
                <outbound type="feature" confirmed="yes">org.apache.abdera.writer.StreamWriter.endContent()</outbound>
                <outbound type="feature" confirmed="yes">org.apache.abdera.writer.StreamWriter.writeElementText(java.io.InputStream)</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.util.AbstractStreamWriter.writeContent(org.apache.abdera.model.Content$Type, java.lang.String)</name>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="class" confirmed="yes">org.apache.abdera.model.Content$Type</outbound>
                <outbound type="feature" confirmed="yes">org.apache.abdera.util.AbstractStreamWriter.startContent(org.apache.abdera.model.Content$Type)</outbound>
                <outbound type="class" confirmed="yes">org.apache.abdera.writer.StreamWriter</outbound>
                <outbound type="feature" confirmed="yes">org.apache.abdera.writer.StreamWriter.endContent()</outbound>
                <outbound type="feature" confirmed="yes">org.apache.abdera.writer.StreamWriter.writeElementText(java.lang.String)</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.util.AbstractStreamWriter.writeContent(org.apache.abdera.model.Content$Type, javax.activation.DataHandler)</name>
                <outbound type="class" confirmed="no">java.io.IOException</outbound>
                <outbound type="class" confirmed="no">javax.activation.DataHandler</outbound>
                <outbound type="class" confirmed="yes">org.apache.abdera.model.Content$Type</outbound>
                <outbound type="feature" confirmed="yes">org.apache.abdera.util.AbstractStreamWriter.startContent(org.apache.abdera.model.Content$Type)</outbound>
                <outbound type="class" confirmed="yes">org.apache.abdera.writer.StreamWriter</outbound>
                <outbound type="feature" confirmed="yes">org.apache.abdera.writer.StreamWriter.endContent()</outbound>
                <outbound type="feature" confirmed="yes">org.apache.abdera.writer.StreamWriter.writeElementText(javax.activation.DataHandler)</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.util.AbstractStreamWriter.writeContributor(java.lang.String)</name>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="feature" confirmed="yes">org.apache.abdera.util.AbstractStreamWriter.writeContributor(java.lang.String, java.lang.String, java.lang.String)</outbound>
                <outbound type="class" confirmed="yes">org.apache.abdera.writer.StreamWriter</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.util.AbstractStreamWriter.writeContributor(java.lang.String, java.lang.String, java.lang.String)</name>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="class" confirmed="no">javax.xml.namespace.QName</outbound>
                <outbound type="feature" confirmed="yes">org.apache.abdera.util.AbstractStreamWriter.writePerson(javax.xml.namespace.QName, java.lang.String, java.lang.String, java.lang.String)</outbound>
                <outbound type="feature" confirmed="yes">org.apache.abdera.util.Constants.CONTRIBUTOR</outbound>
                <outbound type="class" confirmed="yes">org.apache.abdera.writer.StreamWriter</outbound>
                <inbound type="feature" confirmed="yes">org.apache.abdera.util.AbstractStreamWriter.writeContributor(java.lang.String)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.util.AbstractStreamWriter.writeDate(java.lang.String, java.lang.String)</name>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="feature" confirmed="yes">org.apache.abdera.util.AbstractStreamWriter.startElement(java.lang.String)</outbound>
                <outbound type="class" confirmed="yes">org.apache.abdera.writer.StreamWriter</outbound>
                <outbound type="feature" confirmed="yes">org.apache.abdera.writer.StreamWriter.endElement()</outbound>
                <outbound type="feature" confirmed="yes">org.apache.abdera.writer.StreamWriter.writeElementText(java.lang.String)</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.util.AbstractStreamWriter.writeDate(java.lang.String, java.lang.String, java.lang.String)</name>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="feature" confirmed="yes">org.apache.abdera.util.AbstractStreamWriter.startElement(java.lang.String, java.lang.String)</outbound>
                <outbound type="class" confirmed="yes">org.apache.abdera.writer.StreamWriter</outbound>
                <outbound type="feature" confirmed="yes">org.apache.abdera.writer.StreamWriter.endElement()</outbound>
                <outbound type="feature" confirmed="yes">org.apache.abdera.writer.StreamWriter.writeElementText(java.lang.String)</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.util.AbstractStreamWriter.writeDate(java.lang.String, java.lang.String, java.lang.String, java.lang.String)</name>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="feature" confirmed="no">org.apache.abdera.util.AbstractStreamWriter.startElement(java.lang.String, java.lang.String, java.lang.String)</outbound>
                <outbound type="class" confirmed="yes">org.apache.abdera.writer.StreamWriter</outbound>
                <outbound type="feature" confirmed="yes">org.apache.abdera.writer.StreamWriter.endElement()</outbound>
                <outbound type="feature" confirmed="yes">org.apache.abdera.writer.StreamWriter.writeElementText(java.lang.String)</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.util.AbstractStreamWriter.writeDate(java.lang.String, java.lang.String, java.lang.String, java.util.Date)</name>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="class" confirmed="no">java.util.Date</outbound>
                <outbound type="feature" confirmed="no">org.apache.abdera.util.AbstractStreamWriter.startElement(java.lang.String, java.lang.String, java.lang.String)</outbound>
                <outbound type="class" confirmed="yes">org.apache.abdera.writer.StreamWriter</outbound>
                <outbound type="feature" confirmed="yes">org.apache.abdera.writer.StreamWriter.endElement()</outbound>
                <outbound type="feature" confirmed="yes">org.apache.abdera.writer.StreamWriter.writeElementText(java.util.Date)</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.util.AbstractStreamWriter.writeDate(java.lang.String, java.lang.String, java.util.Date)</name>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="class" confirmed="no">java.util.Date</outbound>
                <outbound type="feature" confirmed="yes">org.apache.abdera.util.AbstractStreamWriter.startElement(java.lang.String, java.lang.String)</outbound>
                <outbound type="class" confirmed="yes">org.apache.abdera.writer.StreamWriter</outbound>
                <outbound type="feature" confirmed="yes">org.apache.abdera.writer.StreamWriter.endElement()</outbound>
                <outbound type="feature" confirmed="yes">org.apache.abdera.writer.StreamWriter.writeElementText(java.util.Date)</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.util.AbstractStreamWriter.writeDate(java.lang.String, java.util.Date)</name>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="class" confirmed="no">java.util.Date</outbound>
                <outbound type="feature" confirmed="yes">org.apache.abdera.util.AbstractStreamWriter.startElement(java.lang.String)</outbound>
                <outbound type="class" confirmed="yes">org.apache.abdera.writer.StreamWriter</outbound>
                <outbound type="feature" confirmed="yes">org.apache.abdera.writer.StreamWriter.endElement()</outbound>
                <outbound type="feature" confirmed="yes">org.apache.abdera.writer.StreamWriter.writeElementText(java.util.Date)</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.util.AbstractStreamWriter.writeDate(javax.xml.namespace.QName, java.lang.String)</name>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="class" confirmed="no">javax.xml.namespace.QName</outbound>
                <outbound type="feature" confirmed="yes">org.apache.abdera.util.AbstractStreamWriter.startElement(javax.xml.namespace.QName)</outbound>
                <outbound type="class" confirmed="yes">org.apache.abdera.writer.StreamWriter</outbound>
                <outbound type="feature" confirmed="yes">org.apache.abdera.writer.StreamWriter.endElement()</outbound>
                <outbound type="feature" confirmed="yes">org.apache.abdera.writer.StreamWriter.writeElementText(java.lang.String)</outbound>
                <inbound type="feature" confirmed="yes">org.apache.abdera.util.AbstractStreamWriter.writeDate(javax.xml.namespace.QName, java.util.Date)</inbound>
                <inbound type="feature" confirmed="yes">org.apache.abdera.util.AbstractStreamWriter.writeEdited(java.lang.String)</inbound>
                <inbound type="feature" confirmed="yes">org.apache.abdera.util.AbstractStreamWriter.writePublished(java.lang.String)</inbound>
                <inbound type="feature" confirmed="yes">org.apache.abdera.util.AbstractStreamWriter.writeUpdated(java.lang.String)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.util.AbstractStreamWriter.writeDate(javax.xml.namespace.QName, java.util.Date)</name>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="class" confirmed="no">java.util.Date</outbound>
                <outbound type="class" confirmed="no">javax.xml.namespace.QName</outbound>
                <outbound type="feature" confirmed="yes">org.apache.abdera.model.AtomDate.format(java.util.Date)</outbound>
                <outbound type="feature" confirmed="yes">org.apache.abdera.util.AbstractStreamWriter.writeDate(javax.xml.namespace.QName, java.lang.String)</outbound>
                <outbound type="class" confirmed="yes">org.apache.abdera.writer.StreamWriter</outbound>
                <inbound type="feature" confirmed="yes">org.apache.abdera.util.AbstractStreamWriter.writeEdited(java.util.Date)</inbound>
                <inbound type="feature" confirmed="yes">org.apache.abdera.util.AbstractStreamWriter.writePublished(java.util.Date)</inbound>
                <inbound type="feature" confirmed="yes">org.apache.abdera.util.AbstractStreamWriter.writeUpdated(java.util.Date)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.util.AbstractStreamWriter.writeDraft(boolean)</name>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="class" confirmed="no">javax.xml.namespace.QName</outbound>
                <outbound type="feature" confirmed="yes">org.apache.abdera.util.AbstractStreamWriter.startElement(javax.xml.namespace.QName)</outbound>
                <outbound type="feature" confirmed="yes">org.apache.abdera.util.Constants.DRAFT</outbound>
                <outbound type="class" confirmed="yes">org.apache.abdera.writer.StreamWriter</outbound>
                <outbound type="feature" confirmed="yes">org.apache.abdera.writer.StreamWriter.endElement()</outbound>
                <outbound type="feature" confirmed="yes">org.apache.abdera.writer.StreamWriter.writeElementText(java.lang.String)</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.util.AbstractStreamWriter.writeEdited(java.lang.String)</name>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="class" confirmed="no">javax.xml.namespace.QName</outbound>
                <outbound type="feature" confirmed="yes">org.apache.abdera.util.AbstractStreamWriter.writeDate(javax.xml.namespace.QName, java.lang.String)</outbound>
                <outbound type="feature" confirmed="yes">org.apache.abdera.util.Constants.EDITED</outbound>
                <outbound type="class" confirmed="yes">org.apache.abdera.writer.StreamWriter</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.util.AbstractStreamWriter.writeEdited(java.util.Date)</name>
                <outbound type="class" confirmed="no">java.util.Date</outbound>
                <outbound type="class" confirmed="no">javax.xml.namespace.QName</outbound>
                <outbound type="feature" confirmed="yes">org.apache.abdera.util.AbstractStreamWriter.writeDate(javax.xml.namespace.QName, java.util.Date)</outbound>
                <outbound type="feature" confirmed="yes">org.apache.abdera.util.Constants.EDITED</outbound>
                <outbound type="class" confirmed="yes">org.apache.abdera.writer.StreamWriter</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.util.AbstractStreamWriter.writeElementText(double)</name>
                <outbound type="feature" confirmed="no">java.lang.Double.toString(double)</outbound>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="feature" confirmed="no">org.apache.abdera.util.AbstractStreamWriter.writeElementText(java.lang.String)</outbound>
                <outbound type="class" confirmed="yes">org.apache.abdera.writer.StreamWriter</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.util.AbstractStreamWriter.writeElementText(int)</name>
                <outbound type="feature" confirmed="no">java.lang.Integer.toString(int)</outbound>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="feature" confirmed="no">org.apache.abdera.util.AbstractStreamWriter.writeElementText(java.lang.String)</outbound>
                <outbound type="class" confirmed="yes">org.apache.abdera.writer.StreamWriter</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.util.AbstractStreamWriter.writeElementText(java.io.InputStream)</name>
                <outbound type="feature" confirmed="no">java.io.ByteArrayOutputStream.ByteArrayOutputStream()</outbound>
                <outbound type="feature" confirmed="no">java.io.ByteArrayOutputStream.toByteArray()</outbound>
                <outbound type="feature" confirmed="no">java.io.ByteArrayOutputStream.write(byte[], int, int)</outbound>
                <outbound type="class" confirmed="no">java.io.IOException</outbound>
                <outbound type="class" confirmed="no">java.io.InputStream</outbound>
                <outbound type="feature" confirmed="no">java.io.InputStream.read(byte[])</outbound>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="feature" confirmed="no">java.lang.String.String(byte[], java.lang.String)</outbound>
                <outbound type="feature" confirmed="no">org.apache.abdera.util.AbstractStreamWriter.writeElementText(java.lang.String)</outbound>
                <outbound type="class" confirmed="yes">org.apache.abdera.writer.StreamWriter</outbound>
                <outbound type="feature" confirmed="no">org.apache.commons.codec.binary.Base64.encodeBase64(byte[])</outbound>
                <inbound type="feature" confirmed="yes">org.apache.abdera.util.AbstractStreamWriter.writeElementText(javax.activation.DataHandler)</inbound>
            </feature>
            <feature confirmed="no">
                <name>org.apache.abdera.util.AbstractStreamWriter.writeElementText(java.lang.String)</name>
                <inbound type="feature" confirmed="yes">org.apache.abdera.util.AbstractStreamWriter.append(char)</inbound>
                <inbound type="feature" confirmed="yes">org.apache.abdera.util.AbstractStreamWriter.append(java.lang.CharSequence)</inbound>
                <inbound type="feature" confirmed="yes">org.apache.abdera.util.AbstractStreamWriter.writeElementText(double)</inbound>
                <inbound type="feature" confirmed="yes">org.apache.abdera.util.AbstractStreamWriter.writeElementText(int)</inbound>
                <inbound type="feature" confirmed="yes">org.apache.abdera.util.AbstractStreamWriter.writeElementText(java.io.InputStream)</inbound>
                <inbound type="feature" confirmed="yes">org.apache.abdera.util.AbstractStreamWriter.writeElementText(java.util.Date)</inbound>
                <inbound type="feature" confirmed="yes">org.apache.abdera.util.AbstractStreamWriter.writeElementText(long)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.util.AbstractStreamWriter.writeElementText(java.lang.String, java.lang.Object[])</name>
                <outbound type="class" confirmed="no">java.lang.Appendable</outbound>
                <outbound type="class" confirmed="no">java.lang.Object</outbound>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="class" confirmed="no">java.util.Formatter</outbound>
                <outbound type="feature" confirmed="no">java.util.Formatter.Formatter(java.lang.Appendable)</outbound>
                <outbound type="feature" confirmed="no">java.util.Formatter.format(java.lang.String, java.lang.Object[])</outbound>
                <outbound type="class" confirmed="yes">org.apache.abdera.writer.StreamWriter</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.util.AbstractStreamWriter.writeElementText(java.util.Date)</name>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="class" confirmed="no">java.util.Date</outbound>
                <outbound type="feature" confirmed="yes">org.apache.abdera.model.AtomDate.format(java.util.Date)</outbound>
                <outbound type="feature" confirmed="no">org.apache.abdera.util.AbstractStreamWriter.writeElementText(java.lang.String)</outbound>
                <outbound type="class" confirmed="yes">org.apache.abdera.writer.StreamWriter</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.util.AbstractStreamWriter.writeElementText(javax.activation.DataHandler)</name>
                <outbound type="class" confirmed="no">java.io.IOException</outbound>
                <outbound type="class" confirmed="no">java.io.InputStream</outbound>
                <outbound type="class" confirmed="no">javax.activation.DataHandler</outbound>
                <outbound type="feature" confirmed="no">javax.activation.DataHandler.getInputStream()</outbound>
                <outbound type="feature" confirmed="yes">org.apache.abdera.util.AbstractStreamWriter.writeElementText(java.io.InputStream)</outbound>
                <outbound type="class" confirmed="yes">org.apache.abdera.writer.StreamWriter</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.util.AbstractStreamWriter.writeElementText(long)</name>
                <outbound type="feature" confirmed="no">java.lang.Long.toString(long)</outbound>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="feature" confirmed="no">org.apache.abdera.util.AbstractStreamWriter.writeElementText(java.lang.String)</outbound>
                <outbound type="class" confirmed="yes">org.apache.abdera.writer.StreamWriter</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.util.AbstractStreamWriter.writeGenerator(java.lang.String, java.lang.String, java.lang.String)</name>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="class" confirmed="no">javax.xml.namespace.QName</outbound>
                <outbound type="feature" confirmed="yes">org.apache.abdera.util.AbstractStreamWriter.startElement(javax.xml.namespace.QName)</outbound>
                <outbound type="feature" confirmed="yes">org.apache.abdera.util.Constants.GENERATOR</outbound>
                <outbound type="class" confirmed="yes">org.apache.abdera.writer.StreamWriter</outbound>
                <outbound type="feature" confirmed="yes">org.apache.abdera.writer.StreamWriter.endElement()</outbound>
                <outbound type="feature" confirmed="yes">org.apache.abdera.writer.StreamWriter.writeAttribute(java.lang.String, java.lang.String)</outbound>
                <outbound type="feature" confirmed="yes">org.apache.abdera.writer.StreamWriter.writeElementText(java.lang.String)</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.util.AbstractStreamWriter.writeIRIElement(java.lang.String, java.lang.String)</name>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="feature" confirmed="yes">org.apache.abdera.util.AbstractStreamWriter.startElement(java.lang.String)</outbound>
                <outbound type="class" confirmed="yes">org.apache.abdera.writer.StreamWriter</outbound>
                <outbound type="feature" confirmed="yes">org.apache.abdera.writer.StreamWriter.endElement()</outbound>
                <outbound type="feature" confirmed="yes">org.apache.abdera.writer.StreamWriter.writeElementText(java.lang.String)</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.util.AbstractStreamWriter.writeIRIElement(java.lang.String, java.lang.String, java.lang.String)</name>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="feature" confirmed="yes">org.apache.abdera.util.AbstractStreamWriter.startElement(java.lang.String, java.lang.String)</outbound>
                <outbound type="class" confirmed="yes">org.apache.abdera.writer.StreamWriter</outbound>
                <outbound type="feature" confirmed="yes">org.apache.abdera.writer.StreamWriter.endElement()</outbound>
                <outbound type="feature" confirmed="yes">org.apache.abdera.writer.StreamWriter.writeElementText(java.lang.String)</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.util.AbstractStreamWriter.writeIRIElement(java.lang.String, java.lang.String, java.lang.String, java.lang.String)</name>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="feature" confirmed="no">org.apache.abdera.util.AbstractStreamWriter.startElement(java.lang.String, java.lang.String, java.lang.String)</outbound>
                <outbound type="class" confirmed="yes">org.apache.abdera.writer.StreamWriter</outbound>
                <outbound type="feature" confirmed="yes">org.apache.abdera.writer.StreamWriter.endElement()</outbound>
                <outbound type="feature" confirmed="yes">org.apache.abdera.writer.StreamWriter.writeElementText(java.lang.String)</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.util.AbstractStreamWriter.writeIRIElement(java.lang.String, java.lang.String, java.lang.String, org.apache.abdera.i18n.iri.IRI)</name>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="class" confirmed="no">org.apache.abdera.i18n.iri.IRI</outbound>
                <outbound type="feature" confirmed="no">org.apache.abdera.i18n.iri.IRI.toString()</outbound>
                <outbound type="feature" confirmed="no">org.apache.abdera.util.AbstractStreamWriter.startElement(java.lang.String, java.lang.String, java.lang.String)</outbound>
                <outbound type="class" confirmed="yes">org.apache.abdera.writer.StreamWriter</outbound>
                <outbound type="feature" confirmed="yes">org.apache.abdera.writer.StreamWriter.endElement()</outbound>
                <outbound type="feature" confirmed="yes">org.apache.abdera.writer.StreamWriter.writeElementText(java.lang.String)</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.util.AbstractStreamWriter.writeIRIElement(java.lang.String, java.lang.String, org.apache.abdera.i18n.iri.IRI)</name>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="class" confirmed="no">org.apache.abdera.i18n.iri.IRI</outbound>
                <outbound type="feature" confirmed="no">org.apache.abdera.i18n.iri.IRI.toString()</outbound>
                <outbound type="feature" confirmed="yes">org.apache.abdera.util.AbstractStreamWriter.startElement(java.lang.String, java.lang.String)</outbound>
                <outbound type="class" confirmed="yes">org.apache.abdera.writer.StreamWriter</outbound>
                <outbound type="feature" confirmed="yes">org.apache.abdera.writer.StreamWriter.endElement()</outbound>
                <outbound type="feature" confirmed="yes">org.apache.abdera.writer.StreamWriter.writeElementText(java.lang.String)</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.util.AbstractStreamWriter.writeIRIElement(java.lang.String, org.apache.abdera.i18n.iri.IRI)</name>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="class" confirmed="no">org.apache.abdera.i18n.iri.IRI</outbound>
                <outbound type="feature" confirmed="no">org.apache.abdera.i18n.iri.IRI.toString()</outbound>
                <outbound type="feature" confirmed="yes">org.apache.abdera.util.AbstractStreamWriter.startElement(java.lang.String)</outbound>
                <outbound type="class" confirmed="yes">org.apache.abdera.writer.StreamWriter</outbound>
                <outbound type="feature" confirmed="yes">org.apache.abdera.writer.StreamWriter.endElement()</outbound>
                <outbound type="feature" confirmed="yes">org.apache.abdera.writer.StreamWriter.writeElementText(java.lang.String)</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.util.AbstractStreamWriter.writeIRIElement(javax.xml.namespace.QName, java.lang.String)</name>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="class" confirmed="no">javax.xml.namespace.QName</outbound>
                <outbound type="feature" confirmed="yes">org.apache.abdera.util.AbstractStreamWriter.startElement(javax.xml.namespace.QName)</outbound>
                <outbound type="class" confirmed="yes">org.apache.abdera.writer.StreamWriter</outbound>
                <outbound type="feature" confirmed="yes">org.apache.abdera.writer.StreamWriter.endElement()</outbound>
                <outbound type="feature" confirmed="yes">org.apache.abdera.writer.StreamWriter.writeElementText(java.lang.String)</outbound>
                <inbound type="feature" confirmed="yes">org.apache.abdera.util.AbstractStreamWriter.writeIRIElement(javax.xml.namespace.QName, org.apache.abdera.i18n.iri.IRI)</inbound>
                <inbound type="feature" confirmed="yes">org.apache.abdera.util.AbstractStreamWriter.writeIcon(java.lang.String)</inbound>
                <inbound type="feature" confirmed="yes">org.apache.abdera.util.AbstractStreamWriter.writeId(java.lang.String)</inbound>
                <inbound type="feature" confirmed="yes">org.apache.abdera.util.AbstractStreamWriter.writeLogo(java.lang.String)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.util.AbstractStreamWriter.writeIRIElement(javax.xml.namespace.QName, org.apache.abdera.i18n.iri.IRI)</name>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="class" confirmed="no">javax.xml.namespace.QName</outbound>
                <outbound type="class" confirmed="no">org.apache.abdera.i18n.iri.IRI</outbound>
                <outbound type="feature" confirmed="no">org.apache.abdera.i18n.iri.IRI.toString()</outbound>
                <outbound type="feature" confirmed="yes">org.apache.abdera.util.AbstractStreamWriter.writeIRIElement(javax.xml.namespace.QName, java.lang.String)</outbound>
                <outbound type="class" confirmed="yes">org.apache.abdera.writer.StreamWriter</outbound>
                <inbound type="feature" confirmed="yes">org.apache.abdera.util.AbstractStreamWriter.writeIcon(org.apache.abdera.i18n.iri.IRI)</inbound>
                <inbound type="feature" confirmed="yes">org.apache.abdera.util.AbstractStreamWriter.writeId(org.apache.abdera.i18n.iri.IRI)</inbound>
                <inbound type="feature" confirmed="yes">org.apache.abdera.util.AbstractStreamWriter.writeLogo(org.apache.abdera.i18n.iri.IRI)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.util.AbstractStreamWriter.writeIcon(java.lang.String)</name>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="class" confirmed="no">javax.xml.namespace.QName</outbound>
                <outbound type="feature" confirmed="yes">org.apache.abdera.util.AbstractStreamWriter.writeIRIElement(javax.xml.namespace.QName, java.lang.String)</outbound>
                <outbound type="feature" confirmed="yes">org.apache.abdera.util.Constants.ICON</outbound>
                <outbound type="class" confirmed="yes">org.apache.abdera.writer.StreamWriter</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.util.AbstractStreamWriter.writeIcon(org.apache.abdera.i18n.iri.IRI)</name>
                <outbound type="class" confirmed="no">javax.xml.namespace.QName</outbound>
                <outbound type="class" confirmed="no">org.apache.abdera.i18n.iri.IRI</outbound>
                <outbound type="feature" confirmed="yes">org.apache.abdera.util.AbstractStreamWriter.writeIRIElement(javax.xml.namespace.QName, org.apache.abdera.i18n.iri.IRI)</outbound>
                <outbound type="feature" confirmed="yes">org.apache.abdera.util.Constants.ICON</outbound>
                <outbound type="class" confirmed="yes">org.apache.abdera.writer.StreamWriter</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.util.AbstractStreamWriter.writeId(java.lang.String)</name>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="class" confirmed="no">javax.xml.namespace.QName</outbound>
                <outbound type="feature" confirmed="yes">org.apache.abdera.util.AbstractStreamWriter.writeIRIElement(javax.xml.namespace.QName, java.lang.String)</outbound>
                <outbound type="feature" confirmed="yes">org.apache.abdera.util.Constants.ID</outbound>
                <outbound type="class" confirmed="yes">org.apache.abdera.writer.StreamWriter</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.util.AbstractStreamWriter.writeId(org.apache.abdera.i18n.iri.IRI)</name>
                <outbound type="class" confirmed="no">javax.xml.namespace.QName</outbound>
                <outbound type="class" confirmed="no">org.apache.abdera.i18n.iri.IRI</outbound>
                <outbound type="feature" confirmed="yes">org.apache.abdera.util.AbstractStreamWriter.writeIRIElement(javax.xml.namespace.QName, org.apache.abdera.i18n.iri.IRI)</outbound>
                <outbound type="feature" confirmed="yes">org.apache.abdera.util.Constants.ID</outbound>
                <outbound type="class" confirmed="yes">org.apache.abdera.writer.StreamWriter</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.util.AbstractStreamWriter.writeLanguage(java.lang.String)</name>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="class" confirmed="no">javax.xml.namespace.QName</outbound>
                <outbound type="feature" confirmed="yes">org.apache.abdera.util.AbstractStreamWriter.writeAttribute(javax.xml.namespace.QName, java.lang.String)</outbound>
                <outbound type="feature" confirmed="yes">org.apache.abdera.util.Constants.LANG</outbound>
                <outbound type="class" confirmed="yes">org.apache.abdera.writer.StreamWriter</outbound>
                <inbound type="feature" confirmed="yes">org.apache.abdera.util.AbstractStreamWriter.writeLanguage(org.apache.abdera.i18n.rfc4646.Lang)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.util.AbstractStreamWriter.writeLanguage(java.util.Locale)</name>
                <outbound type="class" confirmed="no">java.util.Locale</outbound>
                <outbound type="class" confirmed="no">org.apache.abdera.i18n.rfc4646.Lang</outbound>
                <outbound type="feature" confirmed="no">org.apache.abdera.i18n.rfc4646.Lang.Lang(java.util.Locale)</outbound>
                <outbound type="feature" confirmed="yes">org.apache.abdera.util.AbstractStreamWriter.writeLanguage(org.apache.abdera.i18n.rfc4646.Lang)</outbound>
                <outbound type="class" confirmed="yes">org.apache.abdera.writer.StreamWriter</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.util.AbstractStreamWriter.writeLanguage(org.apache.abdera.i18n.rfc4646.Lang)</name>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="class" confirmed="no">org.apache.abdera.i18n.rfc4646.Lang</outbound>
                <outbound type="feature" confirmed="no">org.apache.abdera.i18n.rfc4646.Lang.toString()</outbound>
                <outbound type="feature" confirmed="yes">org.apache.abdera.util.AbstractStreamWriter.writeLanguage(java.lang.String)</outbound>
                <outbound type="class" confirmed="yes">org.apache.abdera.writer.StreamWriter</outbound>
                <inbound type="feature" confirmed="yes">org.apache.abdera.util.AbstractStreamWriter.writeLanguage(java.util.Locale)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.util.AbstractStreamWriter.writeLink(java.lang.String)</name>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="feature" confirmed="yes">org.apache.abdera.util.AbstractStreamWriter.writeLink(java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, long)</outbound>
                <outbound type="class" confirmed="yes">org.apache.abdera.writer.StreamWriter</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.util.AbstractStreamWriter.writeLink(java.lang.String, java.lang.String)</name>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="feature" confirmed="yes">org.apache.abdera.util.AbstractStreamWriter.writeLink(java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, long)</outbound>
                <outbound type="class" confirmed="yes">org.apache.abdera.writer.StreamWriter</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.util.AbstractStreamWriter.writeLink(java.lang.String, java.lang.String, java.lang.String)</name>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="feature" confirmed="yes">org.apache.abdera.util.AbstractStreamWriter.writeLink(java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, long)</outbound>
                <outbound type="class" confirmed="yes">org.apache.abdera.writer.StreamWriter</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.util.AbstractStreamWriter.writeLink(java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, long)</name>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="feature" confirmed="yes">org.apache.abdera.util.AbstractStreamWriter.startLink(java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, long)</outbound>
                <outbound type="class" confirmed="yes">org.apache.abdera.writer.StreamWriter</outbound>
                <outbound type="feature" confirmed="yes">org.apache.abdera.writer.StreamWriter.endLink()</outbound>
                <inbound type="feature" confirmed="yes">org.apache.abdera.util.AbstractStreamWriter.writeLink(java.lang.String)</inbound>
                <inbound type="feature" confirmed="yes">org.apache.abdera.util.AbstractStreamWriter.writeLink(java.lang.String, java.lang.String)</inbound>
                <inbound type="feature" confirmed="yes">org.apache.abdera.util.AbstractStreamWriter.writeLink(java.lang.String, java.lang.String, java.lang.String)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.util.AbstractStreamWriter.writeLogo(java.lang.String)</name>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="class" confirmed="no">javax.xml.namespace.QName</outbound>
                <outbound type="feature" confirmed="yes">org.apache.abdera.util.AbstractStreamWriter.writeIRIElement(javax.xml.namespace.QName, java.lang.String)</outbound>
                <outbound type="feature" confirmed="yes">org.apache.abdera.util.Constants.LOGO</outbound>
                <outbound type="class" confirmed="yes">org.apache.abdera.writer.StreamWriter</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.util.AbstractStreamWriter.writeLogo(org.apache.abdera.i18n.iri.IRI)</name>
                <outbound type="class" confirmed="no">javax.xml.namespace.QName</outbound>
                <outbound type="class" confirmed="no">org.apache.abdera.i18n.iri.IRI</outbound>
                <outbound type="feature" confirmed="yes">org.apache.abdera.util.AbstractStreamWriter.writeIRIElement(javax.xml.namespace.QName, org.apache.abdera.i18n.iri.IRI)</outbound>
                <outbound type="feature" confirmed="yes">org.apache.abdera.util.Constants.LOGO</outbound>
                <outbound type="class" confirmed="yes">org.apache.abdera.writer.StreamWriter</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.util.AbstractStreamWriter.writePerson(java.lang.String, java.lang.String, java.lang.String, java.lang.String)</name>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="feature" confirmed="yes">org.apache.abdera.util.AbstractStreamWriter.startPerson(java.lang.String)</outbound>
                <outbound type="class" confirmed="yes">org.apache.abdera.writer.StreamWriter</outbound>
                <outbound type="feature" confirmed="yes">org.apache.abdera.writer.StreamWriter.endPerson()</outbound>
                <outbound type="feature" confirmed="yes">org.apache.abdera.writer.StreamWriter.writePersonEmail(java.lang.String)</outbound>
                <outbound type="feature" confirmed="yes">org.apache.abdera.writer.StreamWriter.writePersonName(java.lang.String)</outbound>
                <outbound type="feature" confirmed="yes">org.apache.abdera.writer.StreamWriter.writePersonUri(java.lang.String)</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.util.AbstractStreamWriter.writePerson(java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String)</name>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="feature" confirmed="yes">org.apache.abdera.util.AbstractStreamWriter.startPerson(java.lang.String, java.lang.String)</outbound>
                <outbound type="class" confirmed="yes">org.apache.abdera.writer.StreamWriter</outbound>
                <outbound type="feature" confirmed="yes">org.apache.abdera.writer.StreamWriter.endPerson()</outbound>
                <outbound type="feature" confirmed="yes">org.apache.abdera.writer.StreamWriter.writePersonEmail(java.lang.String)</outbound>
                <outbound type="feature" confirmed="yes">org.apache.abdera.writer.StreamWriter.writePersonName(java.lang.String)</outbound>
                <outbound type="feature" confirmed="yes">org.apache.abdera.writer.StreamWriter.writePersonUri(java.lang.String)</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.util.AbstractStreamWriter.writePerson(java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String)</name>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="feature" confirmed="yes">org.apache.abdera.util.AbstractStreamWriter.startPerson(java.lang.String, java.lang.String, java.lang.String)</outbound>
                <outbound type="class" confirmed="yes">org.apache.abdera.writer.StreamWriter</outbound>
                <outbound type="feature" confirmed="yes">org.apache.abdera.writer.StreamWriter.endPerson()</outbound>
                <outbound type="feature" confirmed="yes">org.apache.abdera.writer.StreamWriter.writePersonEmail(java.lang.String)</outbound>
                <outbound type="feature" confirmed="yes">org.apache.abdera.writer.StreamWriter.writePersonName(java.lang.String)</outbound>
                <outbound type="feature" confirmed="yes">org.apache.abdera.writer.StreamWriter.writePersonUri(java.lang.String)</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.util.AbstractStreamWriter.writePerson(javax.xml.namespace.QName, java.lang.String, java.lang.String, java.lang.String)</name>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="class" confirmed="no">javax.xml.namespace.QName</outbound>
                <outbound type="feature" confirmed="yes">org.apache.abdera.util.AbstractStreamWriter.startPerson(javax.xml.namespace.QName)</outbound>
                <outbound type="class" confirmed="yes">org.apache.abdera.writer.StreamWriter</outbound>
                <outbound type="feature" confirmed="yes">org.apache.abdera.writer.StreamWriter.endPerson()</outbound>
                <outbound type="feature" confirmed="yes">org.apache.abdera.writer.StreamWriter.writePersonEmail(java.lang.String)</outbound>
                <outbound type="feature" confirmed="yes">org.apache.abdera.writer.StreamWriter.writePersonName(java.lang.String)</outbound>
                <outbound type="feature" confirmed="yes">org.apache.abdera.writer.StreamWriter.writePersonUri(java.lang.String)</outbound>
                <inbound type="feature" confirmed="yes">org.apache.abdera.util.AbstractStreamWriter.writeAuthor(java.lang.String, java.lang.String, java.lang.String)</inbound>
                <inbound type="feature" confirmed="yes">org.apache.abdera.util.AbstractStreamWriter.writeContributor(java.lang.String, java.lang.String, java.lang.String)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.util.AbstractStreamWriter.writePersonEmail(java.lang.String)</name>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="class" confirmed="no">javax.xml.namespace.QName</outbound>
                <outbound type="feature" confirmed="yes">org.apache.abdera.util.AbstractStreamWriter.startElement(javax.xml.namespace.QName)</outbound>
                <outbound type="feature" confirmed="yes">org.apache.abdera.util.Constants.EMAIL</outbound>
                <outbound type="class" confirmed="yes">org.apache.abdera.writer.StreamWriter</outbound>
                <outbound type="feature" confirmed="yes">org.apache.abdera.writer.StreamWriter.endElement()</outbound>
                <outbound type="feature" confirmed="yes">org.apache.abdera.writer.StreamWriter.writeElementText(java.lang.String)</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.util.AbstractStreamWriter.writePersonName(java.lang.String)</name>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="class" confirmed="no">javax.xml.namespace.QName</outbound>
                <outbound type="feature" confirmed="yes">org.apache.abdera.util.AbstractStreamWriter.startElement(javax.xml.namespace.QName)</outbound>
                <outbound type="feature" confirmed="yes">org.apache.abdera.util.Constants.NAME</outbound>
                <outbound type="class" confirmed="yes">org.apache.abdera.writer.StreamWriter</outbound>
                <outbound type="feature" confirmed="yes">org.apache.abdera.writer.StreamWriter.endElement()</outbound>
                <outbound type="feature" confirmed="yes">org.apache.abdera.writer.StreamWriter.writeElementText(java.lang.String)</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.util.AbstractStreamWriter.writePersonUri(java.lang.String)</name>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="class" confirmed="no">javax.xml.namespace.QName</outbound>
                <outbound type="feature" confirmed="yes">org.apache.abdera.util.AbstractStreamWriter.startElement(javax.xml.namespace.QName)</outbound>
                <outbound type="feature" confirmed="yes">org.apache.abdera.util.Constants.URI</outbound>
                <outbound type="class" confirmed="yes">org.apache.abdera.writer.StreamWriter</outbound>
                <outbound type="feature" confirmed="yes">org.apache.abdera.writer.StreamWriter.endElement()</outbound>
                <outbound type="feature" confirmed="yes">org.apache.abdera.writer.StreamWriter.writeElementText(java.lang.String)</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.util.AbstractStreamWriter.writePublished(java.lang.String)</name>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="class" confirmed="no">javax.xml.namespace.QName</outbound>
                <outbound type="feature" confirmed="yes">org.apache.abdera.util.AbstractStreamWriter.writeDate(javax.xml.namespace.QName, java.lang.String)</outbound>
                <outbound type="feature" confirmed="yes">org.apache.abdera.util.Constants.PUBLISHED</outbound>
                <outbound type="class" confirmed="yes">org.apache.abdera.writer.StreamWriter</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.util.AbstractStreamWriter.writePublished(java.util.Date)</name>
                <outbound type="class" confirmed="no">java.util.Date</outbound>
                <outbound type="class" confirmed="no">javax.xml.namespace.QName</outbound>
                <outbound type="feature" confirmed="yes">org.apache.abdera.util.AbstractStreamWriter.writeDate(javax.xml.namespace.QName, java.util.Date)</outbound>
                <outbound type="feature" confirmed="yes">org.apache.abdera.util.Constants.PUBLISHED</outbound>
                <outbound type="class" confirmed="yes">org.apache.abdera.writer.StreamWriter</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.util.AbstractStreamWriter.writeRights(java.lang.String)</name>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="class" confirmed="no">javax.xml.namespace.QName</outbound>
                <outbound type="class" confirmed="yes">org.apache.abdera.model.Text$Type</outbound>
                <outbound type="feature" confirmed="yes">org.apache.abdera.model.Text$Type.TEXT</outbound>
                <outbound type="feature" confirmed="yes">org.apache.abdera.util.AbstractStreamWriter.writeText(javax.xml.namespace.QName, org.apache.abdera.model.Text$Type, java.lang.String)</outbound>
                <outbound type="feature" confirmed="yes">org.apache.abdera.util.Constants.RIGHTS</outbound>
                <outbound type="class" confirmed="yes">org.apache.abdera.writer.StreamWriter</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.util.AbstractStreamWriter.writeRights(org.apache.abdera.model.Text$Type, java.lang.String)</name>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="class" confirmed="no">javax.xml.namespace.QName</outbound>
                <outbound type="class" confirmed="yes">org.apache.abdera.model.Text$Type</outbound>
                <outbound type="feature" confirmed="yes">org.apache.abdera.util.AbstractStreamWriter.writeText(javax.xml.namespace.QName, org.apache.abdera.model.Text$Type, java.lang.String)</outbound>
                <outbound type="feature" confirmed="yes">org.apache.abdera.util.Constants.RIGHTS</outbound>
                <outbound type="class" confirmed="yes">org.apache.abdera.writer.StreamWriter</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.util.AbstractStreamWriter.writeSubtitle(java.lang.String)</name>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="class" confirmed="no">javax.xml.namespace.QName</outbound>
                <outbound type="class" confirmed="yes">org.apache.abdera.model.Text$Type</outbound>
                <outbound type="feature" confirmed="yes">org.apache.abdera.model.Text$Type.TEXT</outbound>
                <outbound type="feature" confirmed="yes">org.apache.abdera.util.AbstractStreamWriter.writeText(javax.xml.namespace.QName, org.apache.abdera.model.Text$Type, java.lang.String)</outbound>
                <outbound type="feature" confirmed="yes">org.apache.abdera.util.Constants.SUBTITLE</outbound>
                <outbound type="class" confirmed="yes">org.apache.abdera.writer.StreamWriter</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.util.AbstractStreamWriter.writeSubtitle(org.apache.abdera.model.Text$Type, java.lang.String)</name>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="class" confirmed="no">javax.xml.namespace.QName</outbound>
                <outbound type="class" confirmed="yes">org.apache.abdera.model.Text$Type</outbound>
                <outbound type="feature" confirmed="yes">org.apache.abdera.util.AbstractStreamWriter.writeText(javax.xml.namespace.QName, org.apache.abdera.model.Text$Type, java.lang.String)</outbound>
                <outbound type="feature" confirmed="yes">org.apache.abdera.util.Constants.SUBTITLE</outbound>
                <outbound type="class" confirmed="yes">org.apache.abdera.writer.StreamWriter</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.util.AbstractStreamWriter.writeSummary(java.lang.String)</name>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="class" confirmed="no">javax.xml.namespace.QName</outbound>
                <outbound type="class" confirmed="yes">org.apache.abdera.model.Text$Type</outbound>
                <outbound type="feature" confirmed="yes">org.apache.abdera.model.Text$Type.TEXT</outbound>
                <outbound type="feature" confirmed="yes">org.apache.abdera.util.AbstractStreamWriter.writeText(javax.xml.namespace.QName, org.apache.abdera.model.Text$Type, java.lang.String)</outbound>
                <outbound type="feature" confirmed="yes">org.apache.abdera.util.Constants.SUMMARY</outbound>
                <outbound type="class" confirmed="yes">org.apache.abdera.writer.StreamWriter</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.util.AbstractStreamWriter.writeSummary(org.apache.abdera.model.Text$Type, java.lang.String)</name>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="class" confirmed="no">javax.xml.namespace.QName</outbound>
                <outbound type="class" confirmed="yes">org.apache.abdera.model.Text$Type</outbound>
                <outbound type="feature" confirmed="yes">org.apache.abdera.util.AbstractStreamWriter.writeText(javax.xml.namespace.QName, org.apache.abdera.model.Text$Type, java.lang.String)</outbound>
                <outbound type="feature" confirmed="yes">org.apache.abdera.util.Constants.SUMMARY</outbound>
                <outbound type="class" confirmed="yes">org.apache.abdera.writer.StreamWriter</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.util.AbstractStreamWriter.writeText(java.lang.String, java.lang.String, java.lang.String, org.apache.abdera.model.Text$Type, java.lang.String)</name>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="class" confirmed="yes">org.apache.abdera.model.Text$Type</outbound>
                <outbound type="feature" confirmed="yes">org.apache.abdera.util.AbstractStreamWriter.startText(java.lang.String, java.lang.String, java.lang.String, org.apache.abdera.model.Text$Type)</outbound>
                <outbound type="class" confirmed="yes">org.apache.abdera.writer.StreamWriter</outbound>
                <outbound type="feature" confirmed="yes">org.apache.abdera.writer.StreamWriter.endElement()</outbound>
                <outbound type="feature" confirmed="yes">org.apache.abdera.writer.StreamWriter.writeElementText(java.lang.String)</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.util.AbstractStreamWriter.writeText(java.lang.String, java.lang.String, org.apache.abdera.model.Text$Type, java.lang.String)</name>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="class" confirmed="yes">org.apache.abdera.model.Text$Type</outbound>
                <outbound type="feature" confirmed="yes">org.apache.abdera.util.AbstractStreamWriter.startText(java.lang.String, java.lang.String, org.apache.abdera.model.Text$Type)</outbound>
                <outbound type="class" confirmed="yes">org.apache.abdera.writer.StreamWriter</outbound>
                <outbound type="feature" confirmed="yes">org.apache.abdera.writer.StreamWriter.endElement()</outbound>
                <outbound type="feature" confirmed="yes">org.apache.abdera.writer.StreamWriter.writeElementText(java.lang.String)</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.util.AbstractStreamWriter.writeText(java.lang.String, org.apache.abdera.model.Text$Type, java.lang.String)</name>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="class" confirmed="yes">org.apache.abdera.model.Text$Type</outbound>
                <outbound type="feature" confirmed="yes">org.apache.abdera.util.AbstractStreamWriter.startText(java.lang.String, org.apache.abdera.model.Text$Type)</outbound>
                <outbound type="class" confirmed="yes">org.apache.abdera.writer.StreamWriter</outbound>
                <outbound type="feature" confirmed="yes">org.apache.abdera.writer.StreamWriter.endElement()</outbound>
                <outbound type="feature" confirmed="yes">org.apache.abdera.writer.StreamWriter.writeElementText(java.lang.String)</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.util.AbstractStreamWriter.writeText(javax.xml.namespace.QName, org.apache.abdera.model.Text$Type, java.lang.String)</name>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="class" confirmed="no">javax.xml.namespace.QName</outbound>
                <outbound type="class" confirmed="yes">org.apache.abdera.model.Text$Type</outbound>
                <outbound type="feature" confirmed="yes">org.apache.abdera.util.AbstractStreamWriter.startText(javax.xml.namespace.QName, org.apache.abdera.model.Text$Type)</outbound>
                <outbound type="class" confirmed="yes">org.apache.abdera.writer.StreamWriter</outbound>
                <outbound type="feature" confirmed="yes">org.apache.abdera.writer.StreamWriter.endElement()</outbound>
                <outbound type="feature" confirmed="yes">org.apache.abdera.writer.StreamWriter.writeElementText(java.lang.String)</outbound>
                <inbound type="feature" confirmed="yes">org.apache.abdera.util.AbstractStreamWriter.writeRights(java.lang.String)</inbound>
                <inbound type="feature" confirmed="yes">org.apache.abdera.util.AbstractStreamWriter.writeRights(org.apache.abdera.model.Text$Type, java.lang.String)</inbound>
                <inbound type="feature" confirmed="yes">org.apache.abdera.util.AbstractStreamWriter.writeSubtitle(java.lang.String)</inbound>
                <inbound type="feature" confirmed="yes">org.apache.abdera.util.AbstractStreamWriter.writeSubtitle(org.apache.abdera.model.Text$Type, java.lang.String)</inbound>
                <inbound type="feature" confirmed="yes">org.apache.abdera.util.AbstractStreamWriter.writeSummary(java.lang.String)</inbound>
                <inbound type="feature" confirmed="yes">org.apache.abdera.util.AbstractStreamWriter.writeSummary(org.apache.abdera.model.Text$Type, java.lang.String)</inbound>
                <inbound type="feature" confirmed="yes">org.apache.abdera.util.AbstractStreamWriter.writeTitle(java.lang.String)</inbound>
                <inbound type="feature" confirmed="yes">org.apache.abdera.util.AbstractStreamWriter.writeTitle(org.apache.abdera.model.Text$Type, java.lang.String)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.util.AbstractStreamWriter.writeTitle(java.lang.String)</name>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="class" confirmed="no">javax.xml.namespace.QName</outbound>
                <outbound type="class" confirmed="yes">org.apache.abdera.model.Text$Type</outbound>
                <outbound type="feature" confirmed="yes">org.apache.abdera.model.Text$Type.TEXT</outbound>
                <outbound type="feature" confirmed="yes">org.apache.abdera.util.AbstractStreamWriter.writeText(javax.xml.namespace.QName, org.apache.abdera.model.Text$Type, java.lang.String)</outbound>
                <outbound type="feature" confirmed="yes">org.apache.abdera.util.Constants.TITLE</outbound>
                <outbound type="class" confirmed="yes">org.apache.abdera.writer.StreamWriter</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.util.AbstractStreamWriter.writeTitle(org.apache.abdera.model.Text$Type, java.lang.String)</name>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="class" confirmed="no">javax.xml.namespace.QName</outbound>
                <outbound type="class" confirmed="yes">org.apache.abdera.model.Text$Type</outbound>
                <outbound type="feature" confirmed="yes">org.apache.abdera.util.AbstractStreamWriter.writeText(javax.xml.namespace.QName, org.apache.abdera.model.Text$Type, java.lang.String)</outbound>
                <outbound type="feature" confirmed="yes">org.apache.abdera.util.Constants.TITLE</outbound>
                <outbound type="class" confirmed="yes">org.apache.abdera.writer.StreamWriter</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.util.AbstractStreamWriter.writeUpdated(java.lang.String)</name>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="class" confirmed="no">javax.xml.namespace.QName</outbound>
                <outbound type="feature" confirmed="yes">org.apache.abdera.util.AbstractStreamWriter.writeDate(javax.xml.namespace.QName, java.lang.String)</outbound>
                <outbound type="feature" confirmed="yes">org.apache.abdera.util.Constants.UPDATED</outbound>
                <outbound type="class" confirmed="yes">org.apache.abdera.writer.StreamWriter</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.util.AbstractStreamWriter.writeUpdated(java.util.Date)</name>
                <outbound type="class" confirmed="no">java.util.Date</outbound>
                <outbound type="class" confirmed="no">javax.xml.namespace.QName</outbound>
                <outbound type="feature" confirmed="yes">org.apache.abdera.util.AbstractStreamWriter.writeDate(javax.xml.namespace.QName, java.util.Date)</outbound>
                <outbound type="feature" confirmed="yes">org.apache.abdera.util.Constants.UPDATED</outbound>
                <outbound type="class" confirmed="yes">org.apache.abdera.writer.StreamWriter</outbound>
            </feature>
        </class>
        <class confirmed="yes">
            <name>org.apache.abdera.util.AbstractWriter</name>
            <outbound type="class" confirmed="no">java.lang.Object</outbound>
            <outbound type="class" confirmed="yes">org.apache.abdera.writer.Writer</outbound>
            <inbound type="class" confirmed="yes">org.apache.abdera.util.AbstractNamedWriter</inbound>
            <feature confirmed="yes">
                <name>org.apache.abdera.util.AbstractWriter.AbstractWriter()</name>
                <outbound type="feature" confirmed="no">java.lang.Object.Object()</outbound>
                <inbound type="feature" confirmed="yes">org.apache.abdera.util.AbstractNamedWriter.AbstractNamedWriter(java.lang.String, java.lang.String[])</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.util.AbstractWriter.finishCompressedOutputStream(java.io.OutputStream, org.apache.abdera.writer.WriterOptions)</name>
                <outbound type="class" confirmed="no">java.io.IOException</outbound>
                <outbound type="class" confirmed="no">java.io.OutputStream</outbound>
                <outbound type="class" confirmed="no">java.util.zip.DeflaterOutputStream</outbound>
                <outbound type="feature" confirmed="no">java.util.zip.DeflaterOutputStream.finish()</outbound>
                <outbound type="class" confirmed="no">org.apache.abdera.i18n.text.io.CompressionUtil$CompressionCodec</outbound>
                <outbound type="class" confirmed="yes">org.apache.abdera.writer.WriterOptions</outbound>
                <outbound type="feature" confirmed="yes">org.apache.abdera.writer.WriterOptions.getCompressionCodecs()</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.util.AbstractWriter.getCompressedOutputStream(java.io.OutputStream, org.apache.abdera.writer.WriterOptions)</name>
                <outbound type="class" confirmed="no">java.io.IOException</outbound>
                <outbound type="class" confirmed="no">java.io.OutputStream</outbound>
                <outbound type="class" confirmed="no">org.apache.abdera.i18n.text.io.CompressionUtil$CompressionCodec</outbound>
                <outbound type="feature" confirmed="no">org.apache.abdera.i18n.text.io.CompressionUtil.getEncodedOutputStream(java.io.OutputStream, org.apache.abdera.i18n.text.io.CompressionUtil$CompressionCodec[])</outbound>
                <outbound type="class" confirmed="yes">org.apache.abdera.writer.WriterOptions</outbound>
                <outbound type="feature" confirmed="yes">org.apache.abdera.writer.WriterOptions.getCompressionCodecs()</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.util.AbstractWriter.getDefaultWriterOptions()</name>
                <outbound type="class" confirmed="no">java.lang.CloneNotSupportedException</outbound>
                <outbound type="class" confirmed="no">java.lang.Object</outbound>
                <outbound type="feature" confirmed="no">java.lang.RuntimeException.RuntimeException(java.lang.Throwable)</outbound>
                <outbound type="class" confirmed="no">java.lang.Throwable</outbound>
                <outbound type="feature" confirmed="yes">org.apache.abdera.util.AbstractWriter.initDefaultWriterOptions()</outbound>
                <outbound type="feature" confirmed="yes">org.apache.abdera.util.AbstractWriter.options</outbound>
                <outbound type="class" confirmed="yes">org.apache.abdera.writer.WriterOptions</outbound>
                <outbound type="feature" confirmed="yes">org.apache.abdera.writer.WriterOptions.clone()</outbound>
                <inbound type="feature" confirmed="yes">org.apache.abdera.util.AbstractWriter.write(org.apache.abdera.model.Base)</inbound>
                <inbound type="feature" confirmed="yes">org.apache.abdera.util.AbstractWriter.writeTo(org.apache.abdera.model.Base, java.io.OutputStream)</inbound>
                <inbound type="feature" confirmed="yes">org.apache.abdera.util.AbstractWriter.writeTo(org.apache.abdera.model.Base, java.io.Writer)</inbound>
                <inbound type="feature" confirmed="yes">org.apache.abdera.util.AbstractWriter.writeTo(org.apache.abdera.model.Base, java.nio.channels.WritableByteChannel)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.util.AbstractWriter.initDefaultWriterOptions()</name>
                <outbound type="class" confirmed="yes">org.apache.abdera.writer.WriterOptions</outbound>
                <inbound type="feature" confirmed="yes">org.apache.abdera.util.AbstractWriter.getDefaultWriterOptions()</inbound>
                <inbound type="feature" confirmed="yes">org.apache.abdera.util.AbstractWriter.setDefaultWriterOptions(org.apache.abdera.writer.WriterOptions)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.util.AbstractWriter.options</name>
                <outbound type="class" confirmed="yes">org.apache.abdera.writer.WriterOptions</outbound>
                <inbound type="feature" confirmed="yes">org.apache.abdera.util.AbstractWriter.getDefaultWriterOptions()</inbound>
                <inbound type="feature" confirmed="yes">org.apache.abdera.util.AbstractWriter.setDefaultWriterOptions(org.apache.abdera.writer.WriterOptions)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.util.AbstractWriter.setDefaultWriterOptions(org.apache.abdera.writer.WriterOptions)</name>
                <outbound type="class" confirmed="no">java.lang.CloneNotSupportedException</outbound>
                <outbound type="class" confirmed="no">java.lang.Object</outbound>
                <outbound type="feature" confirmed="no">java.lang.RuntimeException.RuntimeException(java.lang.Throwable)</outbound>
                <outbound type="class" confirmed="no">java.lang.Throwable</outbound>
                <outbound type="feature" confirmed="yes">org.apache.abdera.util.AbstractWriter.initDefaultWriterOptions()</outbound>
                <outbound type="feature" confirmed="yes">org.apache.abdera.util.AbstractWriter.options</outbound>
                <outbound type="class" confirmed="yes">org.apache.abdera.writer.Writer</outbound>
                <outbound type="class" confirmed="yes">org.apache.abdera.writer.WriterOptions</outbound>
                <outbound type="feature" confirmed="yes">org.apache.abdera.writer.WriterOptions.clone()</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.util.AbstractWriter.write(org.apache.abdera.model.Base)</name>
                <outbound type="class" confirmed="no">java.io.IOException</outbound>
                <outbound type="class" confirmed="no">java.lang.Object</outbound>
                <outbound type="class" confirmed="yes">org.apache.abdera.model.Base</outbound>
                <outbound type="feature" confirmed="yes">org.apache.abdera.util.AbstractWriter.getDefaultWriterOptions()</outbound>
                <outbound type="feature" confirmed="no">org.apache.abdera.util.AbstractWriter.write(org.apache.abdera.model.Base, org.apache.abdera.writer.WriterOptions)</outbound>
                <outbound type="class" confirmed="yes">org.apache.abdera.writer.WriterOptions</outbound>
            </feature>
            <feature confirmed="no">
                <name>org.apache.abdera.util.AbstractWriter.write(org.apache.abdera.model.Base, org.apache.abdera.writer.WriterOptions)</name>
                <inbound type="feature" confirmed="yes">org.apache.abdera.util.AbstractWriter.write(org.apache.abdera.model.Base)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.util.AbstractWriter.writeTo(org.apache.abdera.model.Base, java.io.OutputStream)</name>
                <outbound type="class" confirmed="no">java.io.IOException</outbound>
                <outbound type="class" confirmed="no">java.io.OutputStream</outbound>
                <outbound type="class" confirmed="yes">org.apache.abdera.model.Base</outbound>
                <outbound type="feature" confirmed="yes">org.apache.abdera.util.AbstractWriter.getDefaultWriterOptions()</outbound>
                <outbound type="feature" confirmed="no">org.apache.abdera.util.AbstractWriter.writeTo(org.apache.abdera.model.Base, java.io.OutputStream, org.apache.abdera.writer.WriterOptions)</outbound>
                <outbound type="class" confirmed="yes">org.apache.abdera.writer.WriterOptions</outbound>
            </feature>
            <feature confirmed="no">
                <name>org.apache.abdera.util.AbstractWriter.writeTo(org.apache.abdera.model.Base, java.io.OutputStream, org.apache.abdera.writer.WriterOptions)</name>
                <inbound type="feature" confirmed="yes">org.apache.abdera.util.AbstractWriter.writeTo(org.apache.abdera.model.Base, java.io.OutputStream)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.util.AbstractWriter.writeTo(org.apache.abdera.model.Base, java.io.Writer)</name>
                <outbound type="class" confirmed="no">java.io.IOException</outbound>
                <outbound type="class" confirmed="no">java.io.Writer</outbound>
                <outbound type="class" confirmed="yes">org.apache.abdera.model.Base</outbound>
                <outbound type="feature" confirmed="yes">org.apache.abdera.util.AbstractWriter.getDefaultWriterOptions()</outbound>
                <outbound type="feature" confirmed="no">org.apache.abdera.util.AbstractWriter.writeTo(org.apache.abdera.model.Base, java.io.Writer, org.apache.abdera.writer.WriterOptions)</outbound>
                <outbound type="class" confirmed="yes">org.apache.abdera.writer.WriterOptions</outbound>
            </feature>
            <feature confirmed="no">
                <name>org.apache.abdera.util.AbstractWriter.writeTo(org.apache.abdera.model.Base, java.io.Writer, org.apache.abdera.writer.WriterOptions)</name>
                <inbound type="feature" confirmed="yes">org.apache.abdera.util.AbstractWriter.writeTo(org.apache.abdera.model.Base, java.io.Writer)</inbound>
                <inbound type="feature" confirmed="yes">org.apache.abdera.util.AbstractWriter.writeTo(org.apache.abdera.model.Base, java.nio.channels.WritableByteChannel, org.apache.abdera.writer.WriterOptions)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.util.AbstractWriter.writeTo(org.apache.abdera.model.Base, java.nio.channels.WritableByteChannel)</name>
                <outbound type="class" confirmed="no">java.io.IOException</outbound>
                <outbound type="class" confirmed="no">java.nio.channels.WritableByteChannel</outbound>
                <outbound type="class" confirmed="yes">org.apache.abdera.model.Base</outbound>
                <outbound type="feature" confirmed="yes">org.apache.abdera.util.AbstractWriter.getDefaultWriterOptions()</outbound>
                <outbound type="feature" confirmed="yes">org.apache.abdera.util.AbstractWriter.writeTo(org.apache.abdera.model.Base, java.nio.channels.WritableByteChannel, org.apache.abdera.writer.WriterOptions)</outbound>
                <outbound type="class" confirmed="yes">org.apache.abdera.writer.WriterOptions</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.util.AbstractWriter.writeTo(org.apache.abdera.model.Base, java.nio.channels.WritableByteChannel, org.apache.abdera.writer.WriterOptions)</name>
                <outbound type="class" confirmed="no">java.io.IOException</outbound>
                <outbound type="class" confirmed="no">java.io.Writer</outbound>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="feature" confirmed="no">java.nio.channels.Channels.newWriter(java.nio.channels.WritableByteChannel, java.lang.String)</outbound>
                <outbound type="class" confirmed="no">java.nio.channels.WritableByteChannel</outbound>
                <outbound type="class" confirmed="yes">org.apache.abdera.model.Base</outbound>
                <outbound type="class" confirmed="yes">org.apache.abdera.model.Document</outbound>
                <outbound type="feature" confirmed="yes">org.apache.abdera.model.Document.getCharset()</outbound>
                <outbound type="class" confirmed="yes">org.apache.abdera.model.Element</outbound>
                <outbound type="feature" confirmed="yes">org.apache.abdera.model.Element.getDocument()</outbound>
                <outbound type="feature" confirmed="no">org.apache.abdera.util.AbstractWriter.writeTo(org.apache.abdera.model.Base, java.io.Writer, org.apache.abdera.writer.WriterOptions)</outbound>
                <outbound type="class" confirmed="yes">org.apache.abdera.writer.WriterOptions</outbound>
                <outbound type="feature" confirmed="yes">org.apache.abdera.writer.WriterOptions.getCharset()</outbound>
                <inbound type="feature" confirmed="yes">org.apache.abdera.util.AbstractWriter.writeTo(org.apache.abdera.model.Base, java.nio.channels.WritableByteChannel)</inbound>
            </feature>
        </class>
        <class confirmed="yes">
            <name>org.apache.abdera.util.AbstractWriterOptions</name>
            <outbound type="class" confirmed="no">java.lang.Object</outbound>
            <outbound type="class" confirmed="yes">org.apache.abdera.writer.WriterOptions</outbound>
            <feature confirmed="yes">
                <name>org.apache.abdera.util.AbstractWriterOptions.AbstractWriterOptions()</name>
                <outbound type="feature" confirmed="no">java.lang.Object.Object()</outbound>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="class" confirmed="no">org.apache.abdera.i18n.text.io.CompressionUtil$CompressionCodec</outbound>
                <outbound type="feature" confirmed="yes">org.apache.abdera.util.AbstractWriterOptions.autoclose</outbound>
                <outbound type="feature" confirmed="yes">org.apache.abdera.util.AbstractWriterOptions.charset</outbound>
                <outbound type="feature" confirmed="yes">org.apache.abdera.util.AbstractWriterOptions.codecs</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.util.AbstractWriterOptions.autoclose</name>
                <inbound type="feature" confirmed="yes">org.apache.abdera.util.AbstractWriterOptions.AbstractWriterOptions()</inbound>
                <inbound type="feature" confirmed="yes">org.apache.abdera.util.AbstractWriterOptions.getAutoClose()</inbound>
                <inbound type="feature" confirmed="yes">org.apache.abdera.util.AbstractWriterOptions.setAutoClose(boolean)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.util.AbstractWriterOptions.charset</name>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <inbound type="feature" confirmed="yes">org.apache.abdera.util.AbstractWriterOptions.AbstractWriterOptions()</inbound>
                <inbound type="feature" confirmed="yes">org.apache.abdera.util.AbstractWriterOptions.getCharset()</inbound>
                <inbound type="feature" confirmed="yes">org.apache.abdera.util.AbstractWriterOptions.setCharset(java.lang.String)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.util.AbstractWriterOptions.clone()</name>
                <outbound type="class" confirmed="no">java.lang.CloneNotSupportedException</outbound>
                <outbound type="class" confirmed="no">java.lang.Object</outbound>
                <outbound type="feature" confirmed="no">java.lang.Object.clone()</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.util.AbstractWriterOptions.codecs</name>
                <outbound type="class" confirmed="no">org.apache.abdera.i18n.text.io.CompressionUtil$CompressionCodec</outbound>
                <inbound type="feature" confirmed="yes">org.apache.abdera.util.AbstractWriterOptions.AbstractWriterOptions()</inbound>
                <inbound type="feature" confirmed="yes">org.apache.abdera.util.AbstractWriterOptions.getCompressionCodecs()</inbound>
                <inbound type="feature" confirmed="yes">org.apache.abdera.util.AbstractWriterOptions.setCompressionCodecs(org.apache.abdera.i18n.text.io.CompressionUtil$CompressionCodec[])</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.util.AbstractWriterOptions.getAutoClose()</name>
                <outbound type="feature" confirmed="yes">org.apache.abdera.util.AbstractWriterOptions.autoclose</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.util.AbstractWriterOptions.getCharset()</name>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="feature" confirmed="yes">org.apache.abdera.util.AbstractWriterOptions.charset</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.util.AbstractWriterOptions.getCompressionCodecs()</name>
                <outbound type="class" confirmed="no">org.apache.abdera.i18n.text.io.CompressionUtil$CompressionCodec</outbound>
                <outbound type="feature" confirmed="yes">org.apache.abdera.util.AbstractWriterOptions.codecs</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.util.AbstractWriterOptions.setAutoClose(boolean)</name>
                <outbound type="feature" confirmed="yes">org.apache.abdera.util.AbstractWriterOptions.autoclose</outbound>
                <outbound type="class" confirmed="yes">org.apache.abdera.writer.WriterOptions</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.util.AbstractWriterOptions.setCharset(java.lang.String)</name>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="feature" confirmed="yes">org.apache.abdera.util.AbstractWriterOptions.charset</outbound>
                <outbound type="class" confirmed="yes">org.apache.abdera.writer.WriterOptions</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.util.AbstractWriterOptions.setCompressionCodecs(org.apache.abdera.i18n.text.io.CompressionUtil$CompressionCodec[])</name>
                <outbound type="class" confirmed="no">org.apache.abdera.i18n.text.io.CompressionUtil$CompressionCodec</outbound>
                <outbound type="feature" confirmed="yes">org.apache.abdera.util.AbstractWriterOptions.codecs</outbound>
                <outbound type="class" confirmed="yes">org.apache.abdera.writer.WriterOptions</outbound>
            </feature>
        </class>
        <class confirmed="yes">
            <name>org.apache.abdera.util.AbstractXPath</name>
            <outbound type="class" confirmed="no">java.lang.Object</outbound>
            <outbound type="class" confirmed="yes">org.apache.abdera.xpath.XPath</outbound>
            <feature confirmed="yes">
                <name>org.apache.abdera.util.AbstractXPath.AbstractXPath()</name>
                <outbound type="class" confirmed="no">java.util.Map</outbound>
                <outbound type="feature" confirmed="yes">org.apache.abdera.util.AbstractXPath.AbstractXPath(java.util.Map)</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.util.AbstractXPath.AbstractXPath(java.util.Map)</name>
                <outbound type="feature" confirmed="no">java.lang.Object.Object()</outbound>
                <outbound type="class" confirmed="no">java.util.Map</outbound>
                <outbound type="feature" confirmed="yes">org.apache.abdera.util.AbstractXPath.initDefaultNamespaces()</outbound>
                <outbound type="feature" confirmed="yes">org.apache.abdera.util.AbstractXPath.namespaces</outbound>
                <inbound type="feature" confirmed="yes">org.apache.abdera.util.AbstractXPath.AbstractXPath()</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.util.AbstractXPath.booleanValueOf(java.lang.String, org.apache.abdera.model.Base)</name>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="class" confirmed="no">java.util.Map</outbound>
                <outbound type="class" confirmed="yes">org.apache.abdera.model.Base</outbound>
                <outbound type="feature" confirmed="no">org.apache.abdera.util.AbstractXPath.booleanValueOf(java.lang.String, org.apache.abdera.model.Base, java.util.Map)</outbound>
                <outbound type="feature" confirmed="yes">org.apache.abdera.util.AbstractXPath.getDefaultNamespaces()</outbound>
                <outbound type="class" confirmed="yes">org.apache.abdera.xpath.XPathException</outbound>
            </feature>
            <feature confirmed="no">
                <name>org.apache.abdera.util.AbstractXPath.booleanValueOf(java.lang.String, org.apache.abdera.model.Base, java.util.Map)</name>
                <inbound type="feature" confirmed="yes">org.apache.abdera.util.AbstractXPath.booleanValueOf(java.lang.String, org.apache.abdera.model.Base)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.util.AbstractXPath.evaluate(java.lang.String, org.apache.abdera.model.Base)</name>
                <outbound type="class" confirmed="no">java.lang.Object</outbound>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="class" confirmed="no">java.util.Map</outbound>
                <outbound type="class" confirmed="yes">org.apache.abdera.model.Base</outbound>
                <outbound type="feature" confirmed="no">org.apache.abdera.util.AbstractXPath.evaluate(java.lang.String, org.apache.abdera.model.Base, java.util.Map)</outbound>
                <outbound type="feature" confirmed="yes">org.apache.abdera.util.AbstractXPath.getDefaultNamespaces()</outbound>
                <outbound type="class" confirmed="yes">org.apache.abdera.xpath.XPathException</outbound>
            </feature>
            <feature confirmed="no">
                <name>org.apache.abdera.util.AbstractXPath.evaluate(java.lang.String, org.apache.abdera.model.Base, java.util.Map)</name>
                <inbound type="feature" confirmed="yes">org.apache.abdera.util.AbstractXPath.evaluate(java.lang.String, org.apache.abdera.model.Base)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.util.AbstractXPath.getDefaultNamespaces()</name>
                <outbound type="feature" confirmed="no">java.util.HashMap.HashMap(java.util.Map)</outbound>
                <outbound type="class" confirmed="no">java.util.Map</outbound>
                <outbound type="feature" confirmed="yes">org.apache.abdera.util.AbstractXPath.namespaces</outbound>
                <inbound type="feature" confirmed="yes">org.apache.abdera.util.AbstractXPath.booleanValueOf(java.lang.String, org.apache.abdera.model.Base)</inbound>
                <inbound type="feature" confirmed="yes">org.apache.abdera.util.AbstractXPath.evaluate(java.lang.String, org.apache.abdera.model.Base)</inbound>
                <inbound type="feature" confirmed="yes">org.apache.abdera.util.AbstractXPath.numericValueOf(java.lang.String, org.apache.abdera.model.Base)</inbound>
                <inbound type="feature" confirmed="yes">org.apache.abdera.util.AbstractXPath.selectNodes(java.lang.String, org.apache.abdera.model.Base)</inbound>
                <inbound type="feature" confirmed="yes">org.apache.abdera.util.AbstractXPath.selectSingleNode(java.lang.String, org.apache.abdera.model.Base)</inbound>
                <inbound type="feature" confirmed="yes">org.apache.abdera.util.AbstractXPath.valueOf(java.lang.String, org.apache.abdera.model.Base)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.util.AbstractXPath.initDefaultNamespaces()</name>
                <outbound type="class" confirmed="no">java.lang.Object</outbound>
                <outbound type="feature" confirmed="no">java.util.HashMap.HashMap()</outbound>
                <outbound type="class" confirmed="no">java.util.Map</outbound>
                <outbound type="feature" confirmed="no">java.util.Map.put(java.lang.Object, java.lang.Object)</outbound>
                <inbound type="feature" confirmed="yes">org.apache.abdera.util.AbstractXPath.AbstractXPath(java.util.Map)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.util.AbstractXPath.namespaces</name>
                <outbound type="class" confirmed="no">java.util.Map</outbound>
                <inbound type="feature" confirmed="yes">org.apache.abdera.util.AbstractXPath.AbstractXPath(java.util.Map)</inbound>
                <inbound type="feature" confirmed="yes">org.apache.abdera.util.AbstractXPath.getDefaultNamespaces()</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.util.AbstractXPath.numericValueOf(java.lang.String, org.apache.abdera.model.Base)</name>
                <outbound type="class" confirmed="no">java.lang.Number</outbound>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="class" confirmed="no">java.util.Map</outbound>
                <outbound type="class" confirmed="yes">org.apache.abdera.model.Base</outbound>
                <outbound type="feature" confirmed="yes">org.apache.abdera.util.AbstractXPath.getDefaultNamespaces()</outbound>
                <outbound type="feature" confirmed="no">org.apache.abdera.util.AbstractXPath.numericValueOf(java.lang.String, org.apache.abdera.model.Base, java.util.Map)</outbound>
                <outbound type="class" confirmed="yes">org.apache.abdera.xpath.XPathException</outbound>
            </feature>
            <feature confirmed="no">
                <name>org.apache.abdera.util.AbstractXPath.numericValueOf(java.lang.String, org.apache.abdera.model.Base, java.util.Map)</name>
                <inbound type="feature" confirmed="yes">org.apache.abdera.util.AbstractXPath.numericValueOf(java.lang.String, org.apache.abdera.model.Base)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.util.AbstractXPath.selectNodes(java.lang.String, org.apache.abdera.model.Base)</name>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="class" confirmed="no">java.util.List</outbound>
                <outbound type="class" confirmed="no">java.util.Map</outbound>
                <outbound type="class" confirmed="yes">org.apache.abdera.model.Base</outbound>
                <outbound type="feature" confirmed="yes">org.apache.abdera.util.AbstractXPath.getDefaultNamespaces()</outbound>
                <outbound type="feature" confirmed="no">org.apache.abdera.util.AbstractXPath.selectNodes(java.lang.String, org.apache.abdera.model.Base, java.util.Map)</outbound>
                <outbound type="class" confirmed="yes">org.apache.abdera.xpath.XPathException</outbound>
            </feature>
            <feature confirmed="no">
                <name>org.apache.abdera.util.AbstractXPath.selectNodes(java.lang.String, org.apache.abdera.model.Base, java.util.Map)</name>
                <inbound type="feature" confirmed="yes">org.apache.abdera.util.AbstractXPath.selectNodes(java.lang.String, org.apache.abdera.model.Base)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.util.AbstractXPath.selectSingleNode(java.lang.String, org.apache.abdera.model.Base)</name>
                <outbound type="class" confirmed="no">java.lang.Object</outbound>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="class" confirmed="no">java.util.Map</outbound>
                <outbound type="class" confirmed="yes">org.apache.abdera.model.Base</outbound>
                <outbound type="feature" confirmed="yes">org.apache.abdera.util.AbstractXPath.getDefaultNamespaces()</outbound>
                <outbound type="feature" confirmed="no">org.apache.abdera.util.AbstractXPath.selectSingleNode(java.lang.String, org.apache.abdera.model.Base, java.util.Map)</outbound>
                <outbound type="class" confirmed="yes">org.apache.abdera.xpath.XPathException</outbound>
            </feature>
            <feature confirmed="no">
                <name>org.apache.abdera.util.AbstractXPath.selectSingleNode(java.lang.String, org.apache.abdera.model.Base, java.util.Map)</name>
                <inbound type="feature" confirmed="yes">org.apache.abdera.util.AbstractXPath.selectSingleNode(java.lang.String, org.apache.abdera.model.Base)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.util.AbstractXPath.valueOf(java.lang.String, org.apache.abdera.model.Base)</name>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="class" confirmed="no">java.util.Map</outbound>
                <outbound type="class" confirmed="yes">org.apache.abdera.model.Base</outbound>
                <outbound type="feature" confirmed="yes">org.apache.abdera.util.AbstractXPath.getDefaultNamespaces()</outbound>
                <outbound type="feature" confirmed="no">org.apache.abdera.util.AbstractXPath.valueOf(java.lang.String, org.apache.abdera.model.Base, java.util.Map)</outbound>
                <outbound type="class" confirmed="yes">org.apache.abdera.xpath.XPathException</outbound>
            </feature>
            <feature confirmed="no">
                <name>org.apache.abdera.util.AbstractXPath.valueOf(java.lang.String, org.apache.abdera.model.Base, java.util.Map)</name>
                <inbound type="feature" confirmed="yes">org.apache.abdera.util.AbstractXPath.valueOf(java.lang.String, org.apache.abdera.model.Base)</inbound>
            </feature>
        </class>
        <class confirmed="yes">
            <name>org.apache.abdera.util.Configuration</name>
            <outbound type="class" confirmed="no">java.io.Serializable</outbound>
            <outbound type="class" confirmed="no">java.lang.Cloneable</outbound>
            <outbound type="class" confirmed="no">java.lang.Object</outbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.Abdera.Abdera()</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.Abdera.Abdera(org.apache.abdera.util.Configuration)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.Abdera.config</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.Abdera.getConfiguration()</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.Abdera.newFactory()</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.Abdera.newParser()</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.Abdera.newParserFactory()</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.Abdera.newStreamWriter()</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.Abdera.newWriter()</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.Abdera.newWriterFactory()</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.Abdera.newXPath()</inbound>
            <inbound type="class" confirmed="yes">org.apache.abdera.util.AbderaConfiguration</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.util.AbderaConfiguration.addExtensionFactory(org.apache.abdera.factory.ExtensionFactory)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.util.AbderaConfiguration.addNamedParser(org.apache.abdera.parser.NamedParser)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.util.AbderaConfiguration.addNamedWriter(org.apache.abdera.writer.NamedWriter)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.util.AbderaConfiguration.addStreamWriter(java.lang.Class)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.util.AbderaConfiguration.getDefault()</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.util.AbderaConfiguration.newFactoryInstance(org.apache.abdera.Abdera)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.util.AbderaConfiguration.newParserFactoryInstance(org.apache.abdera.Abdera)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.util.AbderaConfiguration.newParserInstance(org.apache.abdera.Abdera)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.util.AbderaConfiguration.newStreamWriterInstance(org.apache.abdera.Abdera)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.util.AbderaConfiguration.newWriterFactoryInstance(org.apache.abdera.Abdera)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.util.AbderaConfiguration.newWriterInstance(org.apache.abdera.Abdera)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.util.AbderaConfiguration.newXPathInstance(org.apache.abdera.Abdera)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.util.ServiceUtil.newFactoryInstance(org.apache.abdera.Abdera)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.util.ServiceUtil.newParserFactoryInstance(org.apache.abdera.Abdera)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.util.ServiceUtil.newParserInstance(org.apache.abdera.Abdera)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.util.ServiceUtil.newStreamWriterInstance(org.apache.abdera.Abdera)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.util.ServiceUtil.newWriterFactoryInstance(org.apache.abdera.Abdera)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.util.ServiceUtil.newWriterInstance(org.apache.abdera.Abdera)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.util.ServiceUtil.newXPathInstance(org.apache.abdera.Abdera)</inbound>
            <feature confirmed="yes">
                <name>org.apache.abdera.util.Configuration.addExtensionFactory(org.apache.abdera.factory.ExtensionFactory)</name>
                <outbound type="class" confirmed="yes">org.apache.abdera.factory.ExtensionFactory</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.util.Configuration.addNamedParser(org.apache.abdera.parser.NamedParser)</name>
                <outbound type="class" confirmed="yes">org.apache.abdera.parser.NamedParser</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.util.Configuration.addNamedWriter(org.apache.abdera.writer.NamedWriter)</name>
                <outbound type="class" confirmed="yes">org.apache.abdera.writer.NamedWriter</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.util.Configuration.addStreamWriter(java.lang.Class)</name>
                <outbound type="class" confirmed="no">java.lang.Class</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.util.Configuration.clone()</name>
                <outbound type="class" confirmed="no">java.lang.Object</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.util.Configuration.getConfigurationOption(java.lang.String)</name>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.util.Configuration.getConfigurationOption(java.lang.String, java.lang.String)</name>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <inbound type="feature" confirmed="yes">org.apache.abdera.util.AbderaConfiguration.newFactoryInstance(org.apache.abdera.Abdera)</inbound>
                <inbound type="feature" confirmed="yes">org.apache.abdera.util.AbderaConfiguration.newParserFactoryInstance(org.apache.abdera.Abdera)</inbound>
                <inbound type="feature" confirmed="yes">org.apache.abdera.util.AbderaConfiguration.newParserInstance(org.apache.abdera.Abdera)</inbound>
                <inbound type="feature" confirmed="yes">org.apache.abdera.util.AbderaConfiguration.newStreamWriterInstance(org.apache.abdera.Abdera)</inbound>
                <inbound type="feature" confirmed="yes">org.apache.abdera.util.AbderaConfiguration.newWriterFactoryInstance(org.apache.abdera.Abdera)</inbound>
                <inbound type="feature" confirmed="yes">org.apache.abdera.util.AbderaConfiguration.newWriterInstance(org.apache.abdera.Abdera)</inbound>
                <inbound type="feature" confirmed="yes">org.apache.abdera.util.AbderaConfiguration.newXPathInstance(org.apache.abdera.Abdera)</inbound>
                <inbound type="feature" confirmed="yes">org.apache.abdera.util.ServiceUtil.newFactoryInstance(org.apache.abdera.Abdera)</inbound>
                <inbound type="feature" confirmed="yes">org.apache.abdera.util.ServiceUtil.newParserFactoryInstance(org.apache.abdera.Abdera)</inbound>
                <inbound type="feature" confirmed="yes">org.apache.abdera.util.ServiceUtil.newParserInstance(org.apache.abdera.Abdera)</inbound>
                <inbound type="feature" confirmed="yes">org.apache.abdera.util.ServiceUtil.newStreamWriterInstance(org.apache.abdera.Abdera)</inbound>
                <inbound type="feature" confirmed="yes">org.apache.abdera.util.ServiceUtil.newWriterFactoryInstance(org.apache.abdera.Abdera)</inbound>
                <inbound type="feature" confirmed="yes">org.apache.abdera.util.ServiceUtil.newWriterInstance(org.apache.abdera.Abdera)</inbound>
                <inbound type="feature" confirmed="yes">org.apache.abdera.util.ServiceUtil.newXPathInstance(org.apache.abdera.Abdera)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.util.Configuration.getExtensionFactories()</name>
                <outbound type="class" confirmed="no">java.util.List</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.util.Configuration.getNamedParsers()</name>
                <outbound type="class" confirmed="no">java.util.Map</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.util.Configuration.getNamedWriters()</name>
                <outbound type="class" confirmed="no">java.util.Map</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.util.Configuration.getStreamWriters()</name>
                <outbound type="class" confirmed="no">java.util.Map</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.util.Configuration.newFactoryInstance(org.apache.abdera.Abdera)</name>
                <outbound type="class" confirmed="yes">org.apache.abdera.Abdera</outbound>
                <outbound type="class" confirmed="yes">org.apache.abdera.factory.Factory</outbound>
                <inbound type="feature" confirmed="yes">org.apache.abdera.Abdera.newFactory()</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.util.Configuration.newParserFactoryInstance(org.apache.abdera.Abdera)</name>
                <outbound type="class" confirmed="yes">org.apache.abdera.Abdera</outbound>
                <outbound type="class" confirmed="yes">org.apache.abdera.parser.ParserFactory</outbound>
                <inbound type="feature" confirmed="yes">org.apache.abdera.Abdera.newParserFactory()</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.util.Configuration.newParserInstance(org.apache.abdera.Abdera)</name>
                <outbound type="class" confirmed="yes">org.apache.abdera.Abdera</outbound>
                <outbound type="class" confirmed="yes">org.apache.abdera.parser.Parser</outbound>
                <inbound type="feature" confirmed="yes">org.apache.abdera.Abdera.newParser()</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.util.Configuration.newStreamWriterInstance(org.apache.abdera.Abdera)</name>
                <outbound type="class" confirmed="yes">org.apache.abdera.Abdera</outbound>
                <outbound type="class" confirmed="yes">org.apache.abdera.writer.StreamWriter</outbound>
                <inbound type="feature" confirmed="yes">org.apache.abdera.Abdera.newStreamWriter()</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.util.Configuration.newWriterFactoryInstance(org.apache.abdera.Abdera)</name>
                <outbound type="class" confirmed="yes">org.apache.abdera.Abdera</outbound>
                <outbound type="class" confirmed="yes">org.apache.abdera.writer.WriterFactory</outbound>
                <inbound type="feature" confirmed="yes">org.apache.abdera.Abdera.newWriterFactory()</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.util.Configuration.newWriterInstance(org.apache.abdera.Abdera)</name>
                <outbound type="class" confirmed="yes">org.apache.abdera.Abdera</outbound>
                <outbound type="class" confirmed="yes">org.apache.abdera.writer.Writer</outbound>
                <inbound type="feature" confirmed="yes">org.apache.abdera.Abdera.newWriter()</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.util.Configuration.newXPathInstance(org.apache.abdera.Abdera)</name>
                <outbound type="class" confirmed="yes">org.apache.abdera.Abdera</outbound>
                <outbound type="class" confirmed="yes">org.apache.abdera.xpath.XPath</outbound>
                <inbound type="feature" confirmed="yes">org.apache.abdera.Abdera.newXPath()</inbound>
            </feature>
        </class>
        <class confirmed="yes">
            <name>org.apache.abdera.util.Constants</name>
            <outbound type="class" confirmed="no">java.lang.Object</outbound>
            <inbound type="class" confirmed="yes">org.apache.abdera.model.PersonWrapper</inbound>
            <inbound type="class" confirmed="yes">org.apache.abdera.util.AbderaConfiguration</inbound>
            <inbound type="class" confirmed="yes">org.apache.abdera.util.ServiceUtil</inbound>
            <feature confirmed="yes">
                <name>org.apache.abdera.util.Constants.ACCEPT</name>
                <outbound type="class" confirmed="no">javax.xml.namespace.QName</outbound>
                <inbound type="feature" confirmed="yes">org.apache.abdera.util.AbstractStreamWriter.writeAccepts(java.lang.String[])</inbound>
                <inbound type="feature" confirmed="yes">org.apache.abdera.util.Constants.static {}</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.util.Constants.AID</name>
                <outbound type="class" confirmed="no">javax.xml.namespace.QName</outbound>
                <inbound type="feature" confirmed="yes">org.apache.abdera.util.Constants.static {}</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.util.Constants.ALTERNATE</name>
                <outbound type="class" confirmed="no">javax.xml.namespace.QName</outbound>
                <inbound type="feature" confirmed="yes">org.apache.abdera.util.Constants.static {}</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.util.Constants.APP_MEDIA_TYPE</name>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.util.Constants.APP_NS</name>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.util.Constants.APP_NS_PRE_RFC</name>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.util.Constants.APP_PREFIX</name>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.util.Constants.ATITLE</name>
                <outbound type="class" confirmed="no">javax.xml.namespace.QName</outbound>
                <inbound type="feature" confirmed="yes">org.apache.abdera.util.Constants.static {}</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.util.Constants.ATOM_MEDIA_TYPE</name>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.util.Constants.ATOM_NS</name>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.util.Constants.AURI</name>
                <outbound type="class" confirmed="no">javax.xml.namespace.QName</outbound>
                <inbound type="feature" confirmed="yes">org.apache.abdera.util.Constants.static {}</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.util.Constants.AUTHOR</name>
                <outbound type="class" confirmed="no">javax.xml.namespace.QName</outbound>
                <inbound type="feature" confirmed="yes">org.apache.abdera.util.AbstractStreamWriter.startAuthor()</inbound>
                <inbound type="feature" confirmed="yes">org.apache.abdera.util.AbstractStreamWriter.writeAuthor(java.lang.String, java.lang.String, java.lang.String)</inbound>
                <inbound type="feature" confirmed="yes">org.apache.abdera.util.Constants.static {}</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.util.Constants.BASE</name>
                <outbound type="class" confirmed="no">javax.xml.namespace.QName</outbound>
                <inbound type="feature" confirmed="yes">org.apache.abdera.util.AbstractStreamWriter.writeBase(java.lang.String)</inbound>
                <inbound type="feature" confirmed="yes">org.apache.abdera.util.Constants.static {}</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.util.Constants.CATEGORIES</name>
                <outbound type="class" confirmed="no">javax.xml.namespace.QName</outbound>
                <inbound type="feature" confirmed="yes">org.apache.abdera.util.AbstractStreamWriter.startCategories(boolean, java.lang.String)</inbound>
                <inbound type="feature" confirmed="yes">org.apache.abdera.util.Constants.static {}</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.util.Constants.CATEGORY</name>
                <outbound type="class" confirmed="no">javax.xml.namespace.QName</outbound>
                <inbound type="feature" confirmed="yes">org.apache.abdera.util.AbstractStreamWriter.startCategory(java.lang.String, java.lang.String, java.lang.String)</inbound>
                <inbound type="feature" confirmed="yes">org.apache.abdera.util.AbstractStreamWriter.writeCategory(java.lang.String, java.lang.String, java.lang.String)</inbound>
                <inbound type="feature" confirmed="yes">org.apache.abdera.util.Constants.static {}</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.util.Constants.CAT_MEDIA_TYPE</name>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.util.Constants.CLASS</name>
                <outbound type="class" confirmed="no">javax.xml.namespace.QName</outbound>
                <inbound type="feature" confirmed="yes">org.apache.abdera.util.Constants.static {}</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.util.Constants.COLLECTION</name>
                <outbound type="class" confirmed="no">javax.xml.namespace.QName</outbound>
                <inbound type="feature" confirmed="yes">org.apache.abdera.util.AbstractStreamWriter.startCollection(java.lang.String)</inbound>
                <inbound type="feature" confirmed="yes">org.apache.abdera.util.Constants.static {}</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.util.Constants.CONFIG_FACTORY</name>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.util.Constants.CONFIG_PARSER</name>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.util.Constants.CONFIG_PARSERFACTORY</name>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.util.Constants.CONFIG_STREAMWRITER</name>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.util.Constants.CONFIG_WRITER</name>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.util.Constants.CONFIG_WRITERFACTORY</name>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.util.Constants.CONFIG_XPATH</name>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.util.Constants.CONTENT</name>
                <outbound type="class" confirmed="no">javax.xml.namespace.QName</outbound>
                <inbound type="feature" confirmed="yes">org.apache.abdera.util.AbstractStreamWriter.startContent(java.lang.String, java.lang.String)</inbound>
                <inbound type="feature" confirmed="yes">org.apache.abdera.util.Constants.static {}</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.util.Constants.CONTRIBUTOR</name>
                <outbound type="class" confirmed="no">javax.xml.namespace.QName</outbound>
                <inbound type="feature" confirmed="yes">org.apache.abdera.util.AbstractStreamWriter.startContributor()</inbound>
                <inbound type="feature" confirmed="yes">org.apache.abdera.util.AbstractStreamWriter.writeContributor(java.lang.String, java.lang.String, java.lang.String)</inbound>
                <inbound type="feature" confirmed="yes">org.apache.abdera.util.Constants.static {}</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.util.Constants.CONTROL</name>
                <outbound type="class" confirmed="no">javax.xml.namespace.QName</outbound>
                <inbound type="feature" confirmed="yes">org.apache.abdera.util.AbstractStreamWriter.startControl()</inbound>
                <inbound type="feature" confirmed="yes">org.apache.abdera.util.Constants.static {}</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.util.Constants.CONTROL_NS</name>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.util.Constants.CONTROL_PREFIX</name>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.util.Constants.DEFAULT_FACTORY</name>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.util.Constants.DEFAULT_PARSER</name>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.util.Constants.DEFAULT_PARSERFACTORY</name>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.util.Constants.DEFAULT_STREAMWRITER</name>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.util.Constants.DEFAULT_WRITER</name>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.util.Constants.DEFAULT_WRITERFACTORY</name>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.util.Constants.DEFAULT_XPATH</name>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.util.Constants.DIV</name>
                <outbound type="class" confirmed="no">javax.xml.namespace.QName</outbound>
                <inbound type="feature" confirmed="yes">org.apache.abdera.util.Constants.static {}</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.util.Constants.DRAFT</name>
                <outbound type="class" confirmed="no">javax.xml.namespace.QName</outbound>
                <inbound type="feature" confirmed="yes">org.apache.abdera.util.AbstractStreamWriter.writeDraft(boolean)</inbound>
                <inbound type="feature" confirmed="yes">org.apache.abdera.util.Constants.static {}</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.util.Constants.EDITED</name>
                <outbound type="class" confirmed="no">javax.xml.namespace.QName</outbound>
                <inbound type="feature" confirmed="yes">org.apache.abdera.util.AbstractStreamWriter.writeEdited(java.lang.String)</inbound>
                <inbound type="feature" confirmed="yes">org.apache.abdera.util.AbstractStreamWriter.writeEdited(java.util.Date)</inbound>
                <inbound type="feature" confirmed="yes">org.apache.abdera.util.Constants.static {}</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.util.Constants.EMAIL</name>
                <outbound type="class" confirmed="no">javax.xml.namespace.QName</outbound>
                <inbound type="feature" confirmed="yes">org.apache.abdera.util.AbstractStreamWriter.writePersonEmail(java.lang.String)</inbound>
                <inbound type="feature" confirmed="yes">org.apache.abdera.util.Constants.static {}</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.util.Constants.ENTRY</name>
                <outbound type="class" confirmed="no">javax.xml.namespace.QName</outbound>
                <inbound type="feature" confirmed="yes">org.apache.abdera.util.AbstractStreamWriter.startEntry()</inbound>
                <inbound type="feature" confirmed="yes">org.apache.abdera.util.Constants.static {}</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.util.Constants.ENTRY_MEDIA_TYPE</name>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.util.Constants.FEED</name>
                <outbound type="class" confirmed="no">javax.xml.namespace.QName</outbound>
                <inbound type="feature" confirmed="yes">org.apache.abdera.util.AbstractStreamWriter.startFeed()</inbound>
                <inbound type="feature" confirmed="yes">org.apache.abdera.util.Constants.static {}</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.util.Constants.FEED_MEDIA_TYPE</name>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.util.Constants.FIXED</name>
                <outbound type="class" confirmed="no">javax.xml.namespace.QName</outbound>
                <inbound type="feature" confirmed="yes">org.apache.abdera.util.Constants.static {}</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.util.Constants.GENERATOR</name>
                <outbound type="class" confirmed="no">javax.xml.namespace.QName</outbound>
                <inbound type="feature" confirmed="yes">org.apache.abdera.util.AbstractStreamWriter.startGenerator(java.lang.String, java.lang.String)</inbound>
                <inbound type="feature" confirmed="yes">org.apache.abdera.util.AbstractStreamWriter.writeGenerator(java.lang.String, java.lang.String, java.lang.String)</inbound>
                <inbound type="feature" confirmed="yes">org.apache.abdera.util.Constants.static {}</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.util.Constants.HREF</name>
                <outbound type="class" confirmed="no">javax.xml.namespace.QName</outbound>
                <inbound type="feature" confirmed="yes">org.apache.abdera.util.Constants.static {}</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.util.Constants.HREFLANG</name>
                <outbound type="class" confirmed="no">javax.xml.namespace.QName</outbound>
                <inbound type="feature" confirmed="yes">org.apache.abdera.util.Constants.static {}</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.util.Constants.HTML</name>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.util.Constants.ICON</name>
                <outbound type="class" confirmed="no">javax.xml.namespace.QName</outbound>
                <inbound type="feature" confirmed="yes">org.apache.abdera.util.AbstractStreamWriter.writeIcon(java.lang.String)</inbound>
                <inbound type="feature" confirmed="yes">org.apache.abdera.util.AbstractStreamWriter.writeIcon(org.apache.abdera.i18n.iri.IRI)</inbound>
                <inbound type="feature" confirmed="yes">org.apache.abdera.util.Constants.static {}</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.util.Constants.ID</name>
                <outbound type="class" confirmed="no">javax.xml.namespace.QName</outbound>
                <inbound type="feature" confirmed="yes">org.apache.abdera.util.AbstractStreamWriter.writeId(java.lang.String)</inbound>
                <inbound type="feature" confirmed="yes">org.apache.abdera.util.AbstractStreamWriter.writeId(org.apache.abdera.i18n.iri.IRI)</inbound>
                <inbound type="feature" confirmed="yes">org.apache.abdera.util.Constants.static {}</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.util.Constants.LABEL</name>
                <outbound type="class" confirmed="no">javax.xml.namespace.QName</outbound>
                <inbound type="feature" confirmed="yes">org.apache.abdera.util.Constants.static {}</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.util.Constants.LANG</name>
                <outbound type="class" confirmed="no">javax.xml.namespace.QName</outbound>
                <inbound type="feature" confirmed="yes">org.apache.abdera.util.AbstractStreamWriter.writeLanguage(java.lang.String)</inbound>
                <inbound type="feature" confirmed="yes">org.apache.abdera.util.Constants.static {}</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.util.Constants.LENGTH</name>
                <outbound type="class" confirmed="no">javax.xml.namespace.QName</outbound>
                <inbound type="feature" confirmed="yes">org.apache.abdera.util.Constants.static {}</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.util.Constants.LINK</name>
                <outbound type="class" confirmed="no">javax.xml.namespace.QName</outbound>
                <inbound type="feature" confirmed="yes">org.apache.abdera.util.AbstractStreamWriter.startLink(java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, long)</inbound>
                <inbound type="feature" confirmed="yes">org.apache.abdera.util.Constants.static {}</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.util.Constants.LN_ACCEPT</name>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.util.Constants.LN_ALTERNATE</name>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.util.Constants.LN_ALTERNATE_MULTIPART_RELATED</name>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.util.Constants.LN_AUTHOR</name>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.util.Constants.LN_BASE</name>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.util.Constants.LN_CATEGORIES</name>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.util.Constants.LN_CATEGORY</name>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.util.Constants.LN_CLASS</name>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.util.Constants.LN_COLLECTION</name>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.util.Constants.LN_CONTENT</name>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.util.Constants.LN_CONTRIBUTOR</name>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.util.Constants.LN_CONTROL</name>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.util.Constants.LN_DIV</name>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.util.Constants.LN_DRAFT</name>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.util.Constants.LN_EDITED</name>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.util.Constants.LN_EMAIL</name>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.util.Constants.LN_ENTRY</name>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.util.Constants.LN_FEED</name>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.util.Constants.LN_FIXED</name>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.util.Constants.LN_GENERATOR</name>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.util.Constants.LN_HREF</name>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.util.Constants.LN_HREFLANG</name>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.util.Constants.LN_ICON</name>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.util.Constants.LN_ID</name>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.util.Constants.LN_LABEL</name>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.util.Constants.LN_LANG</name>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.util.Constants.LN_LENGTH</name>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.util.Constants.LN_LINK</name>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.util.Constants.LN_LOGO</name>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.util.Constants.LN_NAME</name>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.util.Constants.LN_PUBLISHED</name>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.util.Constants.LN_REL</name>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.util.Constants.LN_RIGHTS</name>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.util.Constants.LN_SCHEME</name>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.util.Constants.LN_SERVICE</name>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.util.Constants.LN_SOURCE</name>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.util.Constants.LN_SPACE</name>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.util.Constants.LN_SRC</name>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.util.Constants.LN_SUBTITLE</name>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.util.Constants.LN_SUMMARY</name>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.util.Constants.LN_TERM</name>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.util.Constants.LN_TITLE</name>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.util.Constants.LN_TYPE</name>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.util.Constants.LN_UPDATED</name>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.util.Constants.LN_URI</name>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.util.Constants.LN_VERSION</name>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.util.Constants.LN_WORKSPACE</name>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.util.Constants.LOGO</name>
                <outbound type="class" confirmed="no">javax.xml.namespace.QName</outbound>
                <inbound type="feature" confirmed="yes">org.apache.abdera.util.AbstractStreamWriter.writeLogo(java.lang.String)</inbound>
                <inbound type="feature" confirmed="yes">org.apache.abdera.util.AbstractStreamWriter.writeLogo(org.apache.abdera.i18n.iri.IRI)</inbound>
                <inbound type="feature" confirmed="yes">org.apache.abdera.util.Constants.static {}</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.util.Constants.MULTIPART_RELATED_TYPE</name>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.util.Constants.NAME</name>
                <outbound type="class" confirmed="no">javax.xml.namespace.QName</outbound>
                <inbound type="feature" confirmed="yes">org.apache.abdera.util.AbstractStreamWriter.writePersonName(java.lang.String)</inbound>
                <inbound type="feature" confirmed="yes">org.apache.abdera.util.Constants.static {}</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.util.Constants.NAMED_PARSER</name>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.util.Constants.NAMED_WRITER</name>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.util.Constants.NO</name>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.util.Constants.PREFIX</name>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.util.Constants.PREFIXED_TITLE</name>
                <outbound type="class" confirmed="no">javax.xml.namespace.QName</outbound>
                <inbound type="feature" confirmed="yes">org.apache.abdera.util.Constants.static {}</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.util.Constants.PRE_RFC_ACCEPT</name>
                <outbound type="class" confirmed="no">javax.xml.namespace.QName</outbound>
                <inbound type="feature" confirmed="yes">org.apache.abdera.util.Constants.static {}</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.util.Constants.PRE_RFC_CATEGORIES</name>
                <outbound type="class" confirmed="no">javax.xml.namespace.QName</outbound>
                <inbound type="feature" confirmed="yes">org.apache.abdera.util.Constants.static {}</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.util.Constants.PRE_RFC_COLLECTION</name>
                <outbound type="class" confirmed="no">javax.xml.namespace.QName</outbound>
                <inbound type="feature" confirmed="yes">org.apache.abdera.util.Constants.static {}</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.util.Constants.PRE_RFC_CONTROL</name>
                <outbound type="class" confirmed="no">javax.xml.namespace.QName</outbound>
                <inbound type="feature" confirmed="yes">org.apache.abdera.util.Constants.static {}</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.util.Constants.PRE_RFC_DRAFT</name>
                <outbound type="class" confirmed="no">javax.xml.namespace.QName</outbound>
                <inbound type="feature" confirmed="yes">org.apache.abdera.util.Constants.static {}</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.util.Constants.PRE_RFC_EDITED</name>
                <outbound type="class" confirmed="no">javax.xml.namespace.QName</outbound>
                <inbound type="feature" confirmed="yes">org.apache.abdera.util.Constants.static {}</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.util.Constants.PRE_RFC_SERVICE</name>
                <outbound type="class" confirmed="no">javax.xml.namespace.QName</outbound>
                <inbound type="feature" confirmed="yes">org.apache.abdera.util.Constants.static {}</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.util.Constants.PRE_RFC_WORKSPACE</name>
                <outbound type="class" confirmed="no">javax.xml.namespace.QName</outbound>
                <inbound type="feature" confirmed="yes">org.apache.abdera.util.Constants.static {}</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.util.Constants.PUBLISHED</name>
                <outbound type="class" confirmed="no">javax.xml.namespace.QName</outbound>
                <inbound type="feature" confirmed="yes">org.apache.abdera.util.AbstractStreamWriter.writePublished(java.lang.String)</inbound>
                <inbound type="feature" confirmed="yes">org.apache.abdera.util.AbstractStreamWriter.writePublished(java.util.Date)</inbound>
                <inbound type="feature" confirmed="yes">org.apache.abdera.util.Constants.static {}</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.util.Constants.REL</name>
                <outbound type="class" confirmed="no">javax.xml.namespace.QName</outbound>
                <inbound type="feature" confirmed="yes">org.apache.abdera.util.Constants.static {}</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.util.Constants.RIGHTS</name>
                <outbound type="class" confirmed="no">javax.xml.namespace.QName</outbound>
                <inbound type="feature" confirmed="yes">org.apache.abdera.util.AbstractStreamWriter.writeRights(java.lang.String)</inbound>
                <inbound type="feature" confirmed="yes">org.apache.abdera.util.AbstractStreamWriter.writeRights(org.apache.abdera.model.Text$Type, java.lang.String)</inbound>
                <inbound type="feature" confirmed="yes">org.apache.abdera.util.Constants.static {}</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.util.Constants.SCHEME</name>
                <outbound type="class" confirmed="no">javax.xml.namespace.QName</outbound>
                <inbound type="feature" confirmed="yes">org.apache.abdera.util.Constants.static {}</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.util.Constants.SERVICE</name>
                <outbound type="class" confirmed="no">javax.xml.namespace.QName</outbound>
                <inbound type="feature" confirmed="yes">org.apache.abdera.util.AbstractStreamWriter.startService()</inbound>
                <inbound type="feature" confirmed="yes">org.apache.abdera.util.Constants.static {}</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.util.Constants.SOURCE</name>
                <outbound type="class" confirmed="no">javax.xml.namespace.QName</outbound>
                <inbound type="feature" confirmed="yes">org.apache.abdera.util.AbstractStreamWriter.startSource()</inbound>
                <inbound type="feature" confirmed="yes">org.apache.abdera.util.Constants.static {}</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.util.Constants.SPACE</name>
                <outbound type="class" confirmed="no">javax.xml.namespace.QName</outbound>
                <inbound type="feature" confirmed="yes">org.apache.abdera.util.Constants.static {}</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.util.Constants.SRC</name>
                <outbound type="class" confirmed="no">javax.xml.namespace.QName</outbound>
                <inbound type="feature" confirmed="yes">org.apache.abdera.util.Constants.static {}</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.util.Constants.STREAM_WRITER</name>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.util.Constants.SUBTITLE</name>
                <outbound type="class" confirmed="no">javax.xml.namespace.QName</outbound>
                <inbound type="feature" confirmed="yes">org.apache.abdera.util.AbstractStreamWriter.writeSubtitle(java.lang.String)</inbound>
                <inbound type="feature" confirmed="yes">org.apache.abdera.util.AbstractStreamWriter.writeSubtitle(org.apache.abdera.model.Text$Type, java.lang.String)</inbound>
                <inbound type="feature" confirmed="yes">org.apache.abdera.util.Constants.static {}</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.util.Constants.SUMMARY</name>
                <outbound type="class" confirmed="no">javax.xml.namespace.QName</outbound>
                <inbound type="feature" confirmed="yes">org.apache.abdera.util.AbstractStreamWriter.writeSummary(java.lang.String)</inbound>
                <inbound type="feature" confirmed="yes">org.apache.abdera.util.AbstractStreamWriter.writeSummary(org.apache.abdera.model.Text$Type, java.lang.String)</inbound>
                <inbound type="feature" confirmed="yes">org.apache.abdera.util.Constants.static {}</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.util.Constants.TERM</name>
                <outbound type="class" confirmed="no">javax.xml.namespace.QName</outbound>
                <inbound type="feature" confirmed="yes">org.apache.abdera.util.Constants.static {}</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.util.Constants.TEXT</name>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.util.Constants.TITLE</name>
                <outbound type="class" confirmed="no">javax.xml.namespace.QName</outbound>
                <inbound type="feature" confirmed="yes">org.apache.abdera.util.AbstractStreamWriter.writeTitle(java.lang.String)</inbound>
                <inbound type="feature" confirmed="yes">org.apache.abdera.util.AbstractStreamWriter.writeTitle(org.apache.abdera.model.Text$Type, java.lang.String)</inbound>
                <inbound type="feature" confirmed="yes">org.apache.abdera.util.Constants.static {}</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.util.Constants.TYPE</name>
                <outbound type="class" confirmed="no">javax.xml.namespace.QName</outbound>
                <inbound type="feature" confirmed="yes">org.apache.abdera.util.Constants.static {}</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.util.Constants.UPDATED</name>
                <outbound type="class" confirmed="no">javax.xml.namespace.QName</outbound>
                <inbound type="feature" confirmed="yes">org.apache.abdera.util.AbstractStreamWriter.writeUpdated(java.lang.String)</inbound>
                <inbound type="feature" confirmed="yes">org.apache.abdera.util.AbstractStreamWriter.writeUpdated(java.util.Date)</inbound>
                <inbound type="feature" confirmed="yes">org.apache.abdera.util.Constants.static {}</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.util.Constants.URI</name>
                <outbound type="class" confirmed="no">javax.xml.namespace.QName</outbound>
                <inbound type="feature" confirmed="yes">org.apache.abdera.util.AbstractStreamWriter.writePersonUri(java.lang.String)</inbound>
                <inbound type="feature" confirmed="yes">org.apache.abdera.util.Constants.static {}</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.util.Constants.VERSION</name>
                <outbound type="class" confirmed="no">javax.xml.namespace.QName</outbound>
                <inbound type="feature" confirmed="yes">org.apache.abdera.util.Constants.static {}</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.util.Constants.WORKSPACE</name>
                <outbound type="class" confirmed="no">javax.xml.namespace.QName</outbound>
                <inbound type="feature" confirmed="yes">org.apache.abdera.util.AbstractStreamWriter.startWorkspace()</inbound>
                <inbound type="feature" confirmed="yes">org.apache.abdera.util.Constants.static {}</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.util.Constants.XHTML</name>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.util.Constants.XHTML_NS</name>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.util.Constants.XML</name>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.util.Constants.XML_MEDIA_TYPE</name>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.util.Constants.XML_NS</name>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.util.Constants.YES</name>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.util.Constants.static {}</name>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="class" confirmed="no">javax.xml.namespace.QName</outbound>
                <outbound type="feature" confirmed="no">javax.xml.namespace.QName.QName(java.lang.String)</outbound>
                <outbound type="feature" confirmed="no">javax.xml.namespace.QName.QName(java.lang.String, java.lang.String, java.lang.String)</outbound>
                <outbound type="feature" confirmed="yes">org.apache.abdera.util.Constants.ACCEPT</outbound>
                <outbound type="feature" confirmed="yes">org.apache.abdera.util.Constants.AID</outbound>
                <outbound type="feature" confirmed="yes">org.apache.abdera.util.Constants.ALTERNATE</outbound>
                <outbound type="feature" confirmed="yes">org.apache.abdera.util.Constants.ATITLE</outbound>
                <outbound type="feature" confirmed="yes">org.apache.abdera.util.Constants.AURI</outbound>
                <outbound type="feature" confirmed="yes">org.apache.abdera.util.Constants.AUTHOR</outbound>
                <outbound type="feature" confirmed="yes">org.apache.abdera.util.Constants.BASE</outbound>
                <outbound type="feature" confirmed="yes">org.apache.abdera.util.Constants.CATEGORIES</outbound>
                <outbound type="feature" confirmed="yes">org.apache.abdera.util.Constants.CATEGORY</outbound>
                <outbound type="feature" confirmed="yes">org.apache.abdera.util.Constants.CLASS</outbound>
                <outbound type="feature" confirmed="yes">org.apache.abdera.util.Constants.COLLECTION</outbound>
                <outbound type="feature" confirmed="yes">org.apache.abdera.util.Constants.CONTENT</outbound>
                <outbound type="feature" confirmed="yes">org.apache.abdera.util.Constants.CONTRIBUTOR</outbound>
                <outbound type="feature" confirmed="yes">org.apache.abdera.util.Constants.CONTROL</outbound>
                <outbound type="feature" confirmed="yes">org.apache.abdera.util.Constants.DIV</outbound>
                <outbound type="feature" confirmed="yes">org.apache.abdera.util.Constants.DRAFT</outbound>
                <outbound type="feature" confirmed="yes">org.apache.abdera.util.Constants.EDITED</outbound>
                <outbound type="feature" confirmed="yes">org.apache.abdera.util.Constants.EMAIL</outbound>
                <outbound type="feature" confirmed="yes">org.apache.abdera.util.Constants.ENTRY</outbound>
                <outbound type="feature" confirmed="yes">org.apache.abdera.util.Constants.FEED</outbound>
                <outbound type="feature" confirmed="yes">org.apache.abdera.util.Constants.FIXED</outbound>
                <outbound type="feature" confirmed="yes">org.apache.abdera.util.Constants.GENERATOR</outbound>
                <outbound type="feature" confirmed="yes">org.apache.abdera.util.Constants.HREF</outbound>
                <outbound type="feature" confirmed="yes">org.apache.abdera.util.Constants.HREFLANG</outbound>
                <outbound type="feature" confirmed="yes">org.apache.abdera.util.Constants.ICON</outbound>
                <outbound type="feature" confirmed="yes">org.apache.abdera.util.Constants.ID</outbound>
                <outbound type="feature" confirmed="yes">org.apache.abdera.util.Constants.LABEL</outbound>
                <outbound type="feature" confirmed="yes">org.apache.abdera.util.Constants.LANG</outbound>
                <outbound type="feature" confirmed="yes">org.apache.abdera.util.Constants.LENGTH</outbound>
                <outbound type="feature" confirmed="yes">org.apache.abdera.util.Constants.LINK</outbound>
                <outbound type="feature" confirmed="yes">org.apache.abdera.util.Constants.LOGO</outbound>
                <outbound type="feature" confirmed="yes">org.apache.abdera.util.Constants.NAME</outbound>
                <outbound type="feature" confirmed="yes">org.apache.abdera.util.Constants.PREFIXED_TITLE</outbound>
                <outbound type="feature" confirmed="yes">org.apache.abdera.util.Constants.PRE_RFC_ACCEPT</outbound>
                <outbound type="feature" confirmed="yes">org.apache.abdera.util.Constants.PRE_RFC_CATEGORIES</outbound>
                <outbound type="feature" confirmed="yes">org.apache.abdera.util.Constants.PRE_RFC_COLLECTION</outbound>
                <outbound type="feature" confirmed="yes">org.apache.abdera.util.Constants.PRE_RFC_CONTROL</outbound>
                <outbound type="feature" confirmed="yes">org.apache.abdera.util.Constants.PRE_RFC_DRAFT</outbound>
                <outbound type="feature" confirmed="yes">org.apache.abdera.util.Constants.PRE_RFC_EDITED</outbound>
                <outbound type="feature" confirmed="yes">org.apache.abdera.util.Constants.PRE_RFC_SERVICE</outbound>
                <outbound type="feature" confirmed="yes">org.apache.abdera.util.Constants.PRE_RFC_WORKSPACE</outbound>
                <outbound type="feature" confirmed="yes">org.apache.abdera.util.Constants.PUBLISHED</outbound>
                <outbound type="feature" confirmed="yes">org.apache.abdera.util.Constants.REL</outbound>
                <outbound type="feature" confirmed="yes">org.apache.abdera.util.Constants.RIGHTS</outbound>
                <outbound type="feature" confirmed="yes">org.apache.abdera.util.Constants.SCHEME</outbound>
                <outbound type="feature" confirmed="yes">org.apache.abdera.util.Constants.SERVICE</outbound>
                <outbound type="feature" confirmed="yes">org.apache.abdera.util.Constants.SOURCE</outbound>
                <outbound type="feature" confirmed="yes">org.apache.abdera.util.Constants.SPACE</outbound>
                <outbound type="feature" confirmed="yes">org.apache.abdera.util.Constants.SRC</outbound>
                <outbound type="feature" confirmed="yes">org.apache.abdera.util.Constants.SUBTITLE</outbound>
                <outbound type="feature" confirmed="yes">org.apache.abdera.util.Constants.SUMMARY</outbound>
                <outbound type="feature" confirmed="yes">org.apache.abdera.util.Constants.TERM</outbound>
                <outbound type="feature" confirmed="yes">org.apache.abdera.util.Constants.TITLE</outbound>
                <outbound type="feature" confirmed="yes">org.apache.abdera.util.Constants.TYPE</outbound>
                <outbound type="feature" confirmed="yes">org.apache.abdera.util.Constants.UPDATED</outbound>
                <outbound type="feature" confirmed="yes">org.apache.abdera.util.Constants.URI</outbound>
                <outbound type="feature" confirmed="yes">org.apache.abdera.util.Constants.VERSION</outbound>
                <outbound type="feature" confirmed="yes">org.apache.abdera.util.Constants.WORKSPACE</outbound>
            </feature>
        </class>
        <class confirmed="yes">
            <name>org.apache.abdera.util.Discover</name>
            <outbound type="class" confirmed="no">java.lang.Object</outbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.util.Discover$DefaultLoader.init(boolean)</inbound>
            <feature confirmed="yes">
                <name>org.apache.abdera.util.Discover.Discover()</name>
                <outbound type="feature" confirmed="no">java.lang.Object.Object()</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.util.Discover.access$000()</name>
                <outbound type="class" confirmed="no">java.lang.ClassLoader</outbound>
                <outbound type="feature" confirmed="yes">org.apache.abdera.util.Discover.getLoader()</outbound>
                <inbound type="feature" confirmed="yes">org.apache.abdera.util.Discover$DefaultLoader.Discover$DefaultLoader(java.lang.String, boolean, java.lang.Object[])</inbound>
                <inbound type="feature" confirmed="yes">org.apache.abdera.util.Discover$DefaultLoader.Discover$DefaultLoader(java.lang.String, boolean, java.lang.Object[], java.lang.ClassLoader)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.util.Discover.access$100(java.lang.ClassLoader, java.lang.String, boolean, java.lang.Object[])</name>
                <outbound type="class" confirmed="no">java.lang.ClassLoader</outbound>
                <outbound type="class" confirmed="no">java.lang.Exception</outbound>
                <outbound type="class" confirmed="no">java.lang.Object</outbound>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="feature" confirmed="yes">org.apache.abdera.util.Discover.load(java.lang.ClassLoader, java.lang.String, boolean, java.lang.Object[])</outbound>
                <inbound type="feature" confirmed="yes">org.apache.abdera.util.Discover$DefaultLoaderIterator.create(java.lang.String, java.lang.Object[])</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.util.Discover.getClass(java.lang.ClassLoader, java.lang.String)</name>
                <outbound type="class" confirmed="no">java.lang.Class</outbound>
                <outbound type="feature" confirmed="no">java.lang.Class.getClassLoader()</outbound>
                <outbound type="class" confirmed="no">java.lang.ClassLoader</outbound>
                <outbound type="feature" confirmed="no">java.lang.ClassLoader.loadClass(java.lang.String)</outbound>
                <outbound type="class" confirmed="no">java.lang.ClassNotFoundException</outbound>
                <outbound type="feature" confirmed="no">java.lang.RuntimeException.RuntimeException(java.lang.Throwable)</outbound>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="class" confirmed="no">java.lang.Throwable</outbound>
                <inbound type="feature" confirmed="yes">org.apache.abdera.util.Discover.load(java.lang.ClassLoader, java.lang.String, boolean, java.lang.Object[])</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.util.Discover.getLoader()</name>
                <outbound type="class" confirmed="no">java.lang.ClassLoader</outbound>
                <outbound type="class" confirmed="no">java.lang.Thread</outbound>
                <outbound type="feature" confirmed="no">java.lang.Thread.currentThread()</outbound>
                <outbound type="feature" confirmed="no">java.lang.Thread.getContextClassLoader()</outbound>
                <inbound type="feature" confirmed="yes">org.apache.abdera.util.Discover.access$000()</inbound>
                <inbound type="feature" confirmed="yes">org.apache.abdera.util.Discover.locate(java.lang.String, java.lang.String, java.lang.Object[])</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.util.Discover.load(java.lang.ClassLoader, java.lang.String, boolean, java.lang.Object[])</name>
                <outbound type="class" confirmed="no">java.lang.Class</outbound>
                <outbound type="feature" confirmed="no">java.lang.Class.getConstructor(java.lang.Class[])</outbound>
                <outbound type="feature" confirmed="no">java.lang.Class.newInstance()</outbound>
                <outbound type="class" confirmed="no">java.lang.ClassLoader</outbound>
                <outbound type="class" confirmed="no">java.lang.Exception</outbound>
                <outbound type="class" confirmed="no">java.lang.Object</outbound>
                <outbound type="feature" confirmed="no">java.lang.Object.getClass()</outbound>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="class" confirmed="no">java.lang.reflect.Constructor</outbound>
                <outbound type="feature" confirmed="no">java.lang.reflect.Constructor.newInstance(java.lang.Object[])</outbound>
                <outbound type="feature" confirmed="yes">org.apache.abdera.util.Discover.getClass(java.lang.ClassLoader, java.lang.String)</outbound>
                <inbound type="feature" confirmed="yes">org.apache.abdera.util.Discover.access$100(java.lang.ClassLoader, java.lang.String, boolean, java.lang.Object[])</inbound>
                <inbound type="feature" confirmed="yes">org.apache.abdera.util.Discover.locate(java.lang.String, java.lang.String, java.lang.ClassLoader, java.lang.Object[])</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.util.Discover.locate(java.lang.String, boolean, java.lang.ClassLoader, java.lang.Object[])</name>
                <outbound type="class" confirmed="no">java.lang.ClassLoader</outbound>
                <outbound type="class" confirmed="no">java.lang.Iterable</outbound>
                <outbound type="class" confirmed="no">java.lang.Object</outbound>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="feature" confirmed="yes">org.apache.abdera.util.Discover$DefaultLoader.Discover$DefaultLoader(java.lang.String, boolean, java.lang.Object[], java.lang.ClassLoader)</outbound>
                <outbound type="feature" confirmed="yes">org.apache.abdera.util.Discover.locate(java.lang.String, boolean, java.lang.Object[])</outbound>
                <inbound type="feature" confirmed="yes">org.apache.abdera.util.Discover.locate(java.lang.String, java.lang.ClassLoader, java.lang.Object[])</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.util.Discover.locate(java.lang.String, boolean, java.lang.Object[])</name>
                <outbound type="class" confirmed="no">java.lang.Iterable</outbound>
                <outbound type="class" confirmed="no">java.lang.Object</outbound>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="feature" confirmed="yes">org.apache.abdera.util.Discover$DefaultLoader.Discover$DefaultLoader(java.lang.String, boolean, java.lang.Object[])</outbound>
                <outbound type="feature" confirmed="yes">org.apache.abdera.util.Discover.locate(java.lang.String, java.lang.Iterable)</outbound>
                <inbound type="feature" confirmed="yes">org.apache.abdera.util.AbderaConfiguration.initStreamWriters()</inbound>
                <inbound type="feature" confirmed="yes">org.apache.abdera.util.Discover.locate(java.lang.String, boolean, java.lang.ClassLoader, java.lang.Object[])</inbound>
                <inbound type="feature" confirmed="yes">org.apache.abdera.util.Discover.locate(java.lang.String, java.lang.Object[])</inbound>
                <inbound type="feature" confirmed="yes">org.apache.abdera.util.ServiceUtil.loadimpls(java.lang.String, boolean)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.util.Discover.locate(java.lang.String, java.lang.ClassLoader, java.lang.Object[])</name>
                <outbound type="class" confirmed="no">java.lang.ClassLoader</outbound>
                <outbound type="class" confirmed="no">java.lang.Iterable</outbound>
                <outbound type="class" confirmed="no">java.lang.Object</outbound>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="feature" confirmed="yes">org.apache.abdera.util.Discover.locate(java.lang.String, boolean, java.lang.ClassLoader, java.lang.Object[])</outbound>
                <inbound type="feature" confirmed="yes">org.apache.abdera.util.Discover.locate(java.lang.String, java.lang.String, java.lang.ClassLoader, java.lang.Object[])</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.util.Discover.locate(java.lang.String, java.lang.Iterable)</name>
                <outbound type="class" confirmed="no">java.lang.Iterable</outbound>
                <outbound type="feature" confirmed="no">java.lang.Iterable.iterator()</outbound>
                <outbound type="class" confirmed="no">java.lang.Object</outbound>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="class" confirmed="no">java.lang.Throwable</outbound>
                <outbound type="feature" confirmed="no">java.lang.Throwable.printStackTrace()</outbound>
                <outbound type="feature" confirmed="no">java.util.ArrayList.ArrayList()</outbound>
                <outbound type="feature" confirmed="no">java.util.Collections.synchronizedList(java.util.List)</outbound>
                <outbound type="class" confirmed="no">java.util.Iterator</outbound>
                <outbound type="feature" confirmed="no">java.util.Iterator.hasNext()</outbound>
                <outbound type="feature" confirmed="no">java.util.Iterator.next()</outbound>
                <outbound type="class" confirmed="no">java.util.List</outbound>
                <outbound type="feature" confirmed="no">java.util.List.add(java.lang.Object)</outbound>
                <inbound type="feature" confirmed="yes">org.apache.abdera.util.Discover.locate(java.lang.String, boolean, java.lang.Object[])</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.util.Discover.locate(java.lang.String, java.lang.Object[])</name>
                <outbound type="class" confirmed="no">java.lang.Iterable</outbound>
                <outbound type="class" confirmed="no">java.lang.Object</outbound>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="feature" confirmed="yes">org.apache.abdera.util.Discover.locate(java.lang.String, boolean, java.lang.Object[])</outbound>
                <inbound type="feature" confirmed="yes">org.apache.abdera.util.AbderaConfiguration.initNamedParsers()</inbound>
                <inbound type="feature" confirmed="yes">org.apache.abdera.util.AbderaConfiguration.initNamedWriters()</inbound>
                <inbound type="feature" confirmed="yes">org.apache.abdera.util.AbderaConfiguration.loadExtensionFactories()</inbound>
                <inbound type="feature" confirmed="yes">org.apache.abdera.util.ServiceUtil.loadExtensionFactories()</inbound>
                <inbound type="feature" confirmed="yes">org.apache.abdera.util.ServiceUtil.loadimpls(java.lang.String)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.util.Discover.locate(java.lang.String, java.lang.String, java.lang.ClassLoader, java.lang.Object[])</name>
                <outbound type="class" confirmed="no">java.lang.ClassLoader</outbound>
                <outbound type="class" confirmed="no">java.lang.Iterable</outbound>
                <outbound type="feature" confirmed="no">java.lang.Iterable.iterator()</outbound>
                <outbound type="class" confirmed="no">java.lang.Object</outbound>
                <outbound type="feature" confirmed="no">java.lang.RuntimeException.RuntimeException(java.lang.Throwable)</outbound>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="class" confirmed="no">java.lang.Throwable</outbound>
                <outbound type="class" confirmed="no">java.util.Iterator</outbound>
                <outbound type="feature" confirmed="no">java.util.Iterator.hasNext()</outbound>
                <outbound type="feature" confirmed="no">java.util.Iterator.next()</outbound>
                <outbound type="feature" confirmed="yes">org.apache.abdera.util.Discover.load(java.lang.ClassLoader, java.lang.String, boolean, java.lang.Object[])</outbound>
                <outbound type="feature" confirmed="yes">org.apache.abdera.util.Discover.locate(java.lang.String, java.lang.ClassLoader, java.lang.Object[])</outbound>
                <inbound type="feature" confirmed="yes">org.apache.abdera.util.Discover.locate(java.lang.String, java.lang.String, java.lang.Object[])</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.util.Discover.locate(java.lang.String, java.lang.String, java.lang.Object[])</name>
                <outbound type="class" confirmed="no">java.lang.ClassLoader</outbound>
                <outbound type="class" confirmed="no">java.lang.Object</outbound>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="feature" confirmed="yes">org.apache.abdera.util.Discover.getLoader()</outbound>
                <outbound type="feature" confirmed="yes">org.apache.abdera.util.Discover.locate(java.lang.String, java.lang.String, java.lang.ClassLoader, java.lang.Object[])</outbound>
                <inbound type="feature" confirmed="yes">org.apache.abdera.util.AbderaConfiguration.newFactoryInstance(org.apache.abdera.Abdera)</inbound>
                <inbound type="feature" confirmed="yes">org.apache.abdera.util.AbderaConfiguration.newParserFactoryInstance(org.apache.abdera.Abdera)</inbound>
                <inbound type="feature" confirmed="yes">org.apache.abdera.util.AbderaConfiguration.newParserInstance(org.apache.abdera.Abdera)</inbound>
                <inbound type="feature" confirmed="yes">org.apache.abdera.util.AbderaConfiguration.newStreamWriterInstance(org.apache.abdera.Abdera)</inbound>
                <inbound type="feature" confirmed="yes">org.apache.abdera.util.AbderaConfiguration.newWriterFactoryInstance(org.apache.abdera.Abdera)</inbound>
                <inbound type="feature" confirmed="yes">org.apache.abdera.util.AbderaConfiguration.newWriterInstance(org.apache.abdera.Abdera)</inbound>
                <inbound type="feature" confirmed="yes">org.apache.abdera.util.AbderaConfiguration.newXPathInstance(org.apache.abdera.Abdera)</inbound>
                <inbound type="feature" confirmed="yes">org.apache.abdera.util.ServiceUtil.newFactoryInstance(org.apache.abdera.Abdera)</inbound>
                <inbound type="feature" confirmed="yes">org.apache.abdera.util.ServiceUtil.newInstance(java.lang.String, java.lang.String, java.lang.Object[])</inbound>
                <inbound type="feature" confirmed="yes">org.apache.abdera.util.ServiceUtil.newInstance(java.lang.String, java.lang.String, org.apache.abdera.Abdera)</inbound>
                <inbound type="feature" confirmed="yes">org.apache.abdera.util.ServiceUtil.newParserFactoryInstance(org.apache.abdera.Abdera)</inbound>
                <inbound type="feature" confirmed="yes">org.apache.abdera.util.ServiceUtil.newParserInstance(org.apache.abdera.Abdera)</inbound>
                <inbound type="feature" confirmed="yes">org.apache.abdera.util.ServiceUtil.newStreamWriterInstance(org.apache.abdera.Abdera)</inbound>
                <inbound type="feature" confirmed="yes">org.apache.abdera.util.ServiceUtil.newWriterFactoryInstance(org.apache.abdera.Abdera)</inbound>
                <inbound type="feature" confirmed="yes">org.apache.abdera.util.ServiceUtil.newWriterInstance(org.apache.abdera.Abdera)</inbound>
                <inbound type="feature" confirmed="yes">org.apache.abdera.util.ServiceUtil.newXPathInstance(org.apache.abdera.Abdera)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.util.Discover.locateResource(java.lang.String, java.lang.ClassLoader, java.lang.Class)</name>
                <outbound type="class" confirmed="no">java.lang.Class</outbound>
                <outbound type="feature" confirmed="no">java.lang.Class.getClassLoader()</outbound>
                <outbound type="feature" confirmed="no">java.lang.Class.getResource(java.lang.String)</outbound>
                <outbound type="class" confirmed="no">java.lang.ClassLoader</outbound>
                <outbound type="feature" confirmed="no">java.lang.ClassLoader.getResource(java.lang.String)</outbound>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="feature" confirmed="no">java.lang.String.startsWith(java.lang.String)</outbound>
                <outbound type="feature" confirmed="no">java.lang.String.substring(int)</outbound>
                <outbound type="class" confirmed="no">java.net.URL</outbound>
                <inbound type="feature" confirmed="yes">org.apache.abdera.util.Discover.locateResourceAsStream(java.lang.String, java.lang.ClassLoader, java.lang.Class)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.util.Discover.locateResourceAsStream(java.lang.String, java.lang.ClassLoader, java.lang.Class)</name>
                <outbound type="class" confirmed="no">java.io.IOException</outbound>
                <outbound type="class" confirmed="no">java.io.InputStream</outbound>
                <outbound type="class" confirmed="no">java.lang.Class</outbound>
                <outbound type="class" confirmed="no">java.lang.ClassLoader</outbound>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="class" confirmed="no">java.net.URL</outbound>
                <outbound type="feature" confirmed="no">java.net.URL.openStream()</outbound>
                <outbound type="feature" confirmed="yes">org.apache.abdera.util.Discover.locateResource(java.lang.String, java.lang.ClassLoader, java.lang.Class)</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.util.Discover.locateResources(java.lang.String, java.lang.ClassLoader, java.lang.Class)</name>
                <outbound type="class" confirmed="no">java.io.IOException</outbound>
                <outbound type="class" confirmed="no">java.lang.Class</outbound>
                <outbound type="feature" confirmed="no">java.lang.Class.getClassLoader()</outbound>
                <outbound type="class" confirmed="no">java.lang.ClassLoader</outbound>
                <outbound type="feature" confirmed="no">java.lang.ClassLoader.getResources(java.lang.String)</outbound>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="feature" confirmed="no">java.lang.String.startsWith(java.lang.String)</outbound>
                <outbound type="feature" confirmed="no">java.lang.String.substring(int)</outbound>
                <outbound type="class" confirmed="no">java.util.Enumeration</outbound>
                <inbound type="feature" confirmed="yes">org.apache.abdera.util.Discover$DefaultLoader.init(boolean)</inbound>
            </feature>
        </class>
        <class confirmed="yes">
            <name>org.apache.abdera.util.Discover$DefaultLoader</name>
            <outbound type="class" confirmed="no">java.lang.Iterable</outbound>
            <outbound type="class" confirmed="no">java.lang.Object</outbound>
            <feature confirmed="yes">
                <name>org.apache.abdera.util.Discover$DefaultLoader.Discover$DefaultLoader(java.lang.String, boolean, java.lang.Object[])</name>
                <outbound type="class" confirmed="no">java.lang.ClassLoader</outbound>
                <outbound type="class" confirmed="no">java.lang.Object</outbound>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="feature" confirmed="yes">org.apache.abdera.util.Discover$DefaultLoader.Discover$DefaultLoader(java.lang.String, boolean, java.lang.Object[], java.lang.ClassLoader)</outbound>
                <outbound type="feature" confirmed="yes">org.apache.abdera.util.Discover.access$000()</outbound>
                <inbound type="feature" confirmed="yes">org.apache.abdera.util.Discover.locate(java.lang.String, boolean, java.lang.Object[])</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.util.Discover$DefaultLoader.Discover$DefaultLoader(java.lang.String, boolean, java.lang.Object[], java.lang.ClassLoader)</name>
                <outbound type="class" confirmed="no">java.lang.ClassLoader</outbound>
                <outbound type="class" confirmed="no">java.lang.Object</outbound>
                <outbound type="feature" confirmed="no">java.lang.Object.Object()</outbound>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="class" confirmed="no">java.util.Iterator</outbound>
                <outbound type="feature" confirmed="yes">org.apache.abdera.util.Discover$DefaultLoader.args</outbound>
                <outbound type="feature" confirmed="yes">org.apache.abdera.util.Discover$DefaultLoader.id</outbound>
                <outbound type="feature" confirmed="yes">org.apache.abdera.util.Discover$DefaultLoader.init(boolean)</outbound>
                <outbound type="feature" confirmed="yes">org.apache.abdera.util.Discover$DefaultLoader.iterator</outbound>
                <outbound type="feature" confirmed="yes">org.apache.abdera.util.Discover$DefaultLoader.loader</outbound>
                <outbound type="feature" confirmed="yes">org.apache.abdera.util.Discover.access$000()</outbound>
                <inbound type="feature" confirmed="yes">org.apache.abdera.util.Discover$DefaultLoader.Discover$DefaultLoader(java.lang.String, boolean, java.lang.Object[])</inbound>
                <inbound type="feature" confirmed="yes">org.apache.abdera.util.Discover.locate(java.lang.String, boolean, java.lang.ClassLoader, java.lang.Object[])</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.util.Discover$DefaultLoader.args</name>
                <outbound type="class" confirmed="no">java.lang.Object</outbound>
                <inbound type="feature" confirmed="yes">org.apache.abdera.util.Discover$DefaultLoader.Discover$DefaultLoader(java.lang.String, boolean, java.lang.Object[], java.lang.ClassLoader)</inbound>
                <inbound type="feature" confirmed="yes">org.apache.abdera.util.Discover$DefaultLoader.init(boolean)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.util.Discover$DefaultLoader.id</name>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <inbound type="feature" confirmed="yes">org.apache.abdera.util.Discover$DefaultLoader.Discover$DefaultLoader(java.lang.String, boolean, java.lang.Object[], java.lang.ClassLoader)</inbound>
                <inbound type="feature" confirmed="yes">org.apache.abdera.util.Discover$DefaultLoader.init(boolean)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.util.Discover$DefaultLoader.init(boolean)</name>
                <outbound type="class" confirmed="no">java.io.InputStream</outbound>
                <outbound type="class" confirmed="no">java.lang.Class</outbound>
                <outbound type="class" confirmed="no">java.lang.ClassLoader</outbound>
                <outbound type="class" confirmed="no">java.lang.Iterable</outbound>
                <outbound type="class" confirmed="no">java.lang.Object</outbound>
                <outbound type="feature" confirmed="no">java.lang.RuntimeException.RuntimeException(java.lang.Throwable)</outbound>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="class" confirmed="no">java.lang.StringBuilder</outbound>
                <outbound type="feature" confirmed="no">java.lang.StringBuilder.StringBuilder()</outbound>
                <outbound type="feature" confirmed="no">java.lang.StringBuilder.append(java.lang.String)</outbound>
                <outbound type="feature" confirmed="no">java.lang.StringBuilder.toString()</outbound>
                <outbound type="class" confirmed="no">java.lang.Throwable</outbound>
                <outbound type="class" confirmed="no">java.net.URL</outbound>
                <outbound type="feature" confirmed="no">java.net.URL.openStream()</outbound>
                <outbound type="feature" confirmed="no">java.util.ArrayList.ArrayList()</outbound>
                <outbound type="class" confirmed="no">java.util.Enumeration</outbound>
                <outbound type="feature" confirmed="no">java.util.Enumeration.hasMoreElements()</outbound>
                <outbound type="feature" confirmed="no">java.util.Enumeration.nextElement()</outbound>
                <outbound type="class" confirmed="no">java.util.Iterator</outbound>
                <outbound type="feature" confirmed="no">java.util.List.add(java.lang.Object)</outbound>
                <outbound type="class" confirmed="yes">org.apache.abdera.util.Discover</outbound>
                <outbound type="feature" confirmed="yes">org.apache.abdera.util.Discover$DefaultLoader.args</outbound>
                <outbound type="feature" confirmed="yes">org.apache.abdera.util.Discover$DefaultLoader.id</outbound>
                <outbound type="feature" confirmed="yes">org.apache.abdera.util.Discover$DefaultLoader.loader</outbound>
                <outbound type="feature" confirmed="yes">org.apache.abdera.util.Discover$DefaultLoaderIterator.Discover$DefaultLoaderIterator(java.lang.ClassLoader, java.io.InputStream, boolean, java.lang.Object[])</outbound>
                <outbound type="feature" confirmed="yes">org.apache.abdera.util.Discover.locateResources(java.lang.String, java.lang.ClassLoader, java.lang.Class)</outbound>
                <outbound type="feature" confirmed="yes">org.apache.abdera.util.MultiIterator.MultiIterator(java.lang.Iterable)</outbound>
                <inbound type="feature" confirmed="yes">org.apache.abdera.util.Discover$DefaultLoader.Discover$DefaultLoader(java.lang.String, boolean, java.lang.Object[], java.lang.ClassLoader)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.util.Discover$DefaultLoader.iterator</name>
                <outbound type="class" confirmed="no">java.util.Iterator</outbound>
                <inbound type="feature" confirmed="yes">org.apache.abdera.util.Discover$DefaultLoader.Discover$DefaultLoader(java.lang.String, boolean, java.lang.Object[], java.lang.ClassLoader)</inbound>
                <inbound type="feature" confirmed="yes">org.apache.abdera.util.Discover$DefaultLoader.iterator()</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.util.Discover$DefaultLoader.iterator()</name>
                <outbound type="class" confirmed="no">java.util.Iterator</outbound>
                <outbound type="feature" confirmed="yes">org.apache.abdera.util.Discover$DefaultLoader.iterator</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.util.Discover$DefaultLoader.loader</name>
                <outbound type="class" confirmed="no">java.lang.ClassLoader</outbound>
                <inbound type="feature" confirmed="yes">org.apache.abdera.util.Discover$DefaultLoader.Discover$DefaultLoader(java.lang.String, boolean, java.lang.Object[], java.lang.ClassLoader)</inbound>
                <inbound type="feature" confirmed="yes">org.apache.abdera.util.Discover$DefaultLoader.init(boolean)</inbound>
            </feature>
        </class>
        <class confirmed="yes">
            <name>org.apache.abdera.util.Discover$DefaultLoaderIterator</name>
            <outbound type="class" confirmed="yes">org.apache.abdera.util.Discover$LineReaderLoaderIterator</outbound>
            <feature confirmed="yes">
                <name>org.apache.abdera.util.Discover$DefaultLoaderIterator.Discover$DefaultLoaderIterator(java.lang.ClassLoader, java.io.InputStream, boolean, java.lang.Object[])</name>
                <outbound type="class" confirmed="no">java.io.InputStream</outbound>
                <outbound type="class" confirmed="no">java.lang.ClassLoader</outbound>
                <outbound type="class" confirmed="no">java.lang.Object</outbound>
                <outbound type="feature" confirmed="yes">org.apache.abdera.util.Discover$LineReaderLoaderIterator.Discover$LineReaderLoaderIterator(java.lang.ClassLoader, java.io.InputStream, boolean, java.lang.Object[])</outbound>
                <inbound type="feature" confirmed="yes">org.apache.abdera.util.Discover$DefaultLoader.init(boolean)</inbound>
            </feature>
            <feature confirmed="no">
                <name>org.apache.abdera.util.Discover$DefaultLoaderIterator.args</name>
                <inbound type="feature" confirmed="yes">org.apache.abdera.util.Discover$DefaultLoaderIterator.next()</inbound>
            </feature>
            <feature confirmed="no">
                <name>org.apache.abdera.util.Discover$DefaultLoaderIterator.cl</name>
                <inbound type="feature" confirmed="yes">org.apache.abdera.util.Discover$DefaultLoaderIterator.create(java.lang.String, java.lang.Object[])</inbound>
            </feature>
            <feature confirmed="no">
                <name>org.apache.abdera.util.Discover$DefaultLoaderIterator.classesonly</name>
                <inbound type="feature" confirmed="yes">org.apache.abdera.util.Discover$DefaultLoaderIterator.create(java.lang.String, java.lang.Object[])</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.util.Discover$DefaultLoaderIterator.create(java.lang.String, java.lang.Object[])</name>
                <outbound type="class" confirmed="no">java.lang.ClassLoader</outbound>
                <outbound type="class" confirmed="no">java.lang.Object</outbound>
                <outbound type="class" confirmed="no">java.lang.RuntimeException</outbound>
                <outbound type="feature" confirmed="no">java.lang.RuntimeException.RuntimeException(java.lang.Throwable)</outbound>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="class" confirmed="no">java.lang.Throwable</outbound>
                <outbound type="feature" confirmed="no">org.apache.abdera.util.Discover$DefaultLoaderIterator.cl</outbound>
                <outbound type="feature" confirmed="no">org.apache.abdera.util.Discover$DefaultLoaderIterator.classesonly</outbound>
                <outbound type="feature" confirmed="yes">org.apache.abdera.util.Discover.access$100(java.lang.ClassLoader, java.lang.String, boolean, java.lang.Object[])</outbound>
                <inbound type="feature" confirmed="yes">org.apache.abdera.util.Discover$DefaultLoaderIterator.next()</inbound>
            </feature>
            <feature confirmed="no">
                <name>org.apache.abdera.util.Discover$DefaultLoaderIterator.hasNext()</name>
                <inbound type="feature" confirmed="yes">org.apache.abdera.util.Discover$DefaultLoaderIterator.next()</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.util.Discover$DefaultLoaderIterator.next()</name>
                <outbound type="class" confirmed="no">java.lang.Object</outbound>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="class" confirmed="no">java.lang.Throwable</outbound>
                <outbound type="feature" confirmed="no">org.apache.abdera.util.Discover$DefaultLoaderIterator.args</outbound>
                <outbound type="feature" confirmed="yes">org.apache.abdera.util.Discover$DefaultLoaderIterator.create(java.lang.String, java.lang.Object[])</outbound>
                <outbound type="feature" confirmed="no">org.apache.abdera.util.Discover$DefaultLoaderIterator.hasNext()</outbound>
                <outbound type="feature" confirmed="no">org.apache.abdera.util.Discover$DefaultLoaderIterator.read()</outbound>
            </feature>
            <feature confirmed="no">
                <name>org.apache.abdera.util.Discover$DefaultLoaderIterator.read()</name>
                <inbound type="feature" confirmed="yes">org.apache.abdera.util.Discover$DefaultLoaderIterator.next()</inbound>
            </feature>
        </class>
        <class confirmed="yes">
            <name>org.apache.abdera.util.Discover$LineReaderLoaderIterator</name>
            <outbound type="class" confirmed="yes">org.apache.abdera.util.Discover$LoaderIterator</outbound>
            <inbound type="class" confirmed="yes">org.apache.abdera.util.Discover$DefaultLoaderIterator</inbound>
            <feature confirmed="yes">
                <name>org.apache.abdera.util.Discover$LineReaderLoaderIterator.Discover$LineReaderLoaderIterator(java.lang.ClassLoader, java.io.InputStream, boolean, java.lang.Object[])</name>
                <outbound type="class" confirmed="no">java.io.BufferedReader</outbound>
                <outbound type="feature" confirmed="no">java.io.BufferedReader.BufferedReader(java.io.Reader)</outbound>
                <outbound type="class" confirmed="no">java.io.InputStream</outbound>
                <outbound type="feature" confirmed="no">java.io.InputStreamReader.InputStreamReader(java.io.InputStream, java.lang.String)</outbound>
                <outbound type="class" confirmed="no">java.io.Reader</outbound>
                <outbound type="class" confirmed="no">java.lang.ClassLoader</outbound>
                <outbound type="class" confirmed="no">java.lang.Object</outbound>
                <outbound type="feature" confirmed="no">java.lang.RuntimeException.RuntimeException(java.lang.Throwable)</outbound>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="class" confirmed="no">java.lang.Throwable</outbound>
                <outbound type="feature" confirmed="yes">org.apache.abdera.util.Discover$LineReaderLoaderIterator.args</outbound>
                <outbound type="feature" confirmed="yes">org.apache.abdera.util.Discover$LineReaderLoaderIterator.buf</outbound>
                <outbound type="feature" confirmed="yes">org.apache.abdera.util.Discover$LineReaderLoaderIterator.classesonly</outbound>
                <outbound type="feature" confirmed="yes">org.apache.abdera.util.Discover$LineReaderLoaderIterator.line</outbound>
                <outbound type="feature" confirmed="yes">org.apache.abdera.util.Discover$LineReaderLoaderIterator.readNext()</outbound>
                <outbound type="feature" confirmed="yes">org.apache.abdera.util.Discover$LoaderIterator.Discover$LoaderIterator(java.lang.ClassLoader)</outbound>
                <inbound type="feature" confirmed="yes">org.apache.abdera.util.Discover$DefaultLoaderIterator.Discover$DefaultLoaderIterator(java.lang.ClassLoader, java.io.InputStream, boolean, java.lang.Object[])</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.util.Discover$LineReaderLoaderIterator.args</name>
                <outbound type="class" confirmed="no">java.lang.Object</outbound>
                <inbound type="feature" confirmed="yes">org.apache.abdera.util.Discover$LineReaderLoaderIterator.Discover$LineReaderLoaderIterator(java.lang.ClassLoader, java.io.InputStream, boolean, java.lang.Object[])</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.util.Discover$LineReaderLoaderIterator.buf</name>
                <outbound type="class" confirmed="no">java.io.BufferedReader</outbound>
                <inbound type="feature" confirmed="yes">org.apache.abdera.util.Discover$LineReaderLoaderIterator.Discover$LineReaderLoaderIterator(java.lang.ClassLoader, java.io.InputStream, boolean, java.lang.Object[])</inbound>
                <inbound type="feature" confirmed="yes">org.apache.abdera.util.Discover$LineReaderLoaderIterator.readNext()</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.util.Discover$LineReaderLoaderIterator.classesonly</name>
                <inbound type="feature" confirmed="yes">org.apache.abdera.util.Discover$LineReaderLoaderIterator.Discover$LineReaderLoaderIterator(java.lang.ClassLoader, java.io.InputStream, boolean, java.lang.Object[])</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.util.Discover$LineReaderLoaderIterator.hasNext()</name>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="feature" confirmed="yes">org.apache.abdera.util.Discover$LineReaderLoaderIterator.line</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.util.Discover$LineReaderLoaderIterator.line</name>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <inbound type="feature" confirmed="yes">org.apache.abdera.util.Discover$LineReaderLoaderIterator.Discover$LineReaderLoaderIterator(java.lang.ClassLoader, java.io.InputStream, boolean, java.lang.Object[])</inbound>
                <inbound type="feature" confirmed="yes">org.apache.abdera.util.Discover$LineReaderLoaderIterator.hasNext()</inbound>
                <inbound type="feature" confirmed="yes">org.apache.abdera.util.Discover$LineReaderLoaderIterator.read()</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.util.Discover$LineReaderLoaderIterator.read()</name>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="feature" confirmed="yes">org.apache.abdera.util.Discover$LineReaderLoaderIterator.line</outbound>
                <outbound type="feature" confirmed="yes">org.apache.abdera.util.Discover$LineReaderLoaderIterator.readNext()</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.util.Discover$LineReaderLoaderIterator.readNext()</name>
                <outbound type="class" confirmed="no">java.io.BufferedReader</outbound>
                <outbound type="feature" confirmed="no">java.io.BufferedReader.readLine()</outbound>
                <outbound type="feature" confirmed="no">java.lang.RuntimeException.RuntimeException(java.lang.Throwable)</outbound>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="feature" confirmed="no">java.lang.String.startsWith(java.lang.String)</outbound>
                <outbound type="feature" confirmed="no">java.lang.String.trim()</outbound>
                <outbound type="class" confirmed="no">java.lang.Throwable</outbound>
                <outbound type="feature" confirmed="yes">org.apache.abdera.util.Discover$LineReaderLoaderIterator.buf</outbound>
                <inbound type="feature" confirmed="yes">org.apache.abdera.util.Discover$LineReaderLoaderIterator.Discover$LineReaderLoaderIterator(java.lang.ClassLoader, java.io.InputStream, boolean, java.lang.Object[])</inbound>
                <inbound type="feature" confirmed="yes">org.apache.abdera.util.Discover$LineReaderLoaderIterator.read()</inbound>
            </feature>
        </class>
        <class confirmed="yes">
            <name>org.apache.abdera.util.Discover$LoaderIterator</name>
            <outbound type="class" confirmed="no">java.lang.Object</outbound>
            <outbound type="class" confirmed="no">java.util.Iterator</outbound>
            <inbound type="class" confirmed="yes">org.apache.abdera.util.Discover$LineReaderLoaderIterator</inbound>
            <feature confirmed="yes">
                <name>org.apache.abdera.util.Discover$LoaderIterator.Discover$LoaderIterator(java.lang.ClassLoader)</name>
                <outbound type="class" confirmed="no">java.lang.ClassLoader</outbound>
                <outbound type="feature" confirmed="no">java.lang.Object.Object()</outbound>
                <outbound type="feature" confirmed="yes">org.apache.abdera.util.Discover$LoaderIterator.cl</outbound>
                <inbound type="feature" confirmed="yes">org.apache.abdera.util.Discover$LineReaderLoaderIterator.Discover$LineReaderLoaderIterator(java.lang.ClassLoader, java.io.InputStream, boolean, java.lang.Object[])</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.util.Discover$LoaderIterator.cl</name>
                <outbound type="class" confirmed="no">java.lang.ClassLoader</outbound>
                <inbound type="feature" confirmed="yes">org.apache.abdera.util.Discover$LoaderIterator.Discover$LoaderIterator(java.lang.ClassLoader)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.util.Discover$LoaderIterator.remove()</name>
            </feature>
        </class>
        <class confirmed="yes">
            <name>org.apache.abdera.util.EntityTag</name>
            <outbound type="class" confirmed="no">java.io.Serializable</outbound>
            <outbound type="class" confirmed="no">java.lang.Cloneable</outbound>
            <outbound type="class" confirmed="no">java.lang.Comparable</outbound>
            <outbound type="class" confirmed="no">java.lang.Object</outbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.model.Document.getEntityTag()</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.model.Document.setEntityTag(org.apache.abdera.util.EntityTag)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.protocol.EntityProvider.getEntityTag()</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.protocol.Request.getIfMatch()</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.protocol.Request.getIfNoneMatch()</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.protocol.Response.getEntityTag()</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.protocol.util.AbstractEntityProvider.getEntityTag()</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.protocol.util.AbstractRequest.getIfMatch()</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.protocol.util.AbstractRequest.getIfNoneMatch()</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.protocol.util.AbstractResponse.getEntityTag()</inbound>
            <feature confirmed="yes">
                <name>org.apache.abdera.util.EntityTag.EntityTag(java.lang.String)</name>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="feature" confirmed="yes">org.apache.abdera.util.EntityTag.EntityTag(java.lang.String, boolean)</outbound>
                <inbound type="feature" confirmed="yes">org.apache.abdera.util.EntityTag.generate(java.lang.String[])</inbound>
                <inbound type="feature" confirmed="yes">org.apache.abdera.util.EntityTag.static {}</inbound>
                <inbound type="feature" confirmed="yes">org.apache.abdera.util.EntityTag.toString(java.lang.String[])</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.util.EntityTag.EntityTag(java.lang.String, boolean)</name>
                <outbound type="feature" confirmed="no">java.lang.IllegalArgumentException.IllegalArgumentException(java.lang.String)</outbound>
                <outbound type="class" confirmed="no">java.lang.Object</outbound>
                <outbound type="feature" confirmed="no">java.lang.Object.Object()</outbound>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="feature" confirmed="no">java.lang.String.equals(java.lang.Object)</outbound>
                <outbound type="feature" confirmed="no">java.lang.String.indexOf(int)</outbound>
                <outbound type="feature" confirmed="yes">org.apache.abdera.util.EntityTag.INVALID_ENTITY_TAG</outbound>
                <outbound type="feature" confirmed="yes">org.apache.abdera.util.EntityTag.attemptParse(java.lang.String)</outbound>
                <outbound type="feature" confirmed="yes">org.apache.abdera.util.EntityTag.tag</outbound>
                <outbound type="feature" confirmed="yes">org.apache.abdera.util.EntityTag.weak</outbound>
                <outbound type="feature" confirmed="yes">org.apache.abdera.util.EntityTag.wild</outbound>
                <inbound type="feature" confirmed="yes">org.apache.abdera.util.EntityTag.EntityTag(java.lang.String)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.util.EntityTag.EntityTag(java.lang.String, boolean, boolean)</name>
                <outbound type="feature" confirmed="no">java.lang.Object.Object()</outbound>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="feature" confirmed="yes">org.apache.abdera.util.EntityTag.tag</outbound>
                <outbound type="feature" confirmed="yes">org.apache.abdera.util.EntityTag.weak</outbound>
                <outbound type="feature" confirmed="yes">org.apache.abdera.util.EntityTag.wild</outbound>
                <inbound type="feature" confirmed="yes">org.apache.abdera.util.EntityTag.parse(java.lang.String)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.util.EntityTag.INVALID_ENTITY_TAG</name>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <inbound type="feature" confirmed="yes">org.apache.abdera.util.EntityTag.EntityTag(java.lang.String, boolean)</inbound>
                <inbound type="feature" confirmed="yes">org.apache.abdera.util.EntityTag.parse(java.lang.String)</inbound>
                <inbound type="feature" confirmed="yes">org.apache.abdera.util.EntityTag.static {}</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.util.EntityTag.PATTERN</name>
                <outbound type="class" confirmed="no">java.util.regex.Pattern</outbound>
                <inbound type="feature" confirmed="yes">org.apache.abdera.util.EntityTag.parse(java.lang.String)</inbound>
                <inbound type="feature" confirmed="yes">org.apache.abdera.util.EntityTag.static {}</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.util.EntityTag.WILD</name>
                <inbound type="feature" confirmed="yes">org.apache.abdera.util.EntityTag.static {}</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.util.EntityTag.attemptParse(java.lang.String)</name>
                <outbound type="class" confirmed="no">java.lang.Exception</outbound>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="feature" confirmed="yes">org.apache.abdera.util.EntityTag.parse(java.lang.String)</outbound>
                <inbound type="feature" confirmed="yes">org.apache.abdera.util.EntityTag.EntityTag(java.lang.String, boolean)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.util.EntityTag.clone()</name>
                <outbound type="class" confirmed="no">java.lang.CloneNotSupportedException</outbound>
                <outbound type="class" confirmed="no">java.lang.Object</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.util.EntityTag.compareTo(java.lang.Object)</name>
                <outbound type="class" confirmed="no">java.lang.Object</outbound>
                <outbound type="feature" confirmed="yes">org.apache.abdera.util.EntityTag.compareTo(org.apache.abdera.util.EntityTag)</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.util.EntityTag.compareTo(org.apache.abdera.util.EntityTag)</name>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="feature" confirmed="no">java.lang.String.compareTo(java.lang.String)</outbound>
                <outbound type="feature" confirmed="yes">org.apache.abdera.util.EntityTag.isWeak()</outbound>
                <outbound type="feature" confirmed="yes">org.apache.abdera.util.EntityTag.isWild()</outbound>
                <outbound type="feature" confirmed="yes">org.apache.abdera.util.EntityTag.tag</outbound>
                <inbound type="feature" confirmed="yes">org.apache.abdera.util.EntityTag.compareTo(java.lang.Object)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.util.EntityTag.equals(java.lang.Object)</name>
                <outbound type="class" confirmed="no">java.lang.Class</outbound>
                <outbound type="class" confirmed="no">java.lang.Object</outbound>
                <outbound type="feature" confirmed="no">java.lang.Object.getClass()</outbound>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="feature" confirmed="no">java.lang.String.equals(java.lang.Object)</outbound>
                <outbound type="feature" confirmed="yes">org.apache.abdera.util.EntityTag.isWild()</outbound>
                <outbound type="feature" confirmed="yes">org.apache.abdera.util.EntityTag.tag</outbound>
                <outbound type="feature" confirmed="yes">org.apache.abdera.util.EntityTag.weak</outbound>
                <outbound type="feature" confirmed="yes">org.apache.abdera.util.EntityTag.wild</outbound>
                <inbound type="feature" confirmed="yes">org.apache.abdera.util.EntityTag.matches(java.lang.String, java.lang.String)</inbound>
                <inbound type="feature" confirmed="yes">org.apache.abdera.util.EntityTag.matches(org.apache.abdera.util.EntityTag, java.lang.String)</inbound>
                <inbound type="feature" confirmed="yes">org.apache.abdera.util.EntityTag.matches(org.apache.abdera.util.EntityTag, org.apache.abdera.util.EntityTag)</inbound>
                <inbound type="feature" confirmed="yes">org.apache.abdera.util.EntityTag.matchesAny(org.apache.abdera.util.EntityTag, org.apache.abdera.util.EntityTag[], boolean)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.util.EntityTag.generate(java.lang.String[])</name>
                <outbound type="class" confirmed="no">java.io.UnsupportedEncodingException</outbound>
                <outbound type="feature" confirmed="no">java.lang.RuntimeException.RuntimeException(java.lang.String, java.lang.Throwable)</outbound>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="feature" confirmed="no">java.lang.String.String(char[])</outbound>
                <outbound type="feature" confirmed="no">java.lang.String.getBytes(java.lang.String)</outbound>
                <outbound type="class" confirmed="no">java.lang.Throwable</outbound>
                <outbound type="feature" confirmed="no">java.lang.UnsupportedOperationException.UnsupportedOperationException(java.lang.String)</outbound>
                <outbound type="class" confirmed="no">java.security.MessageDigest</outbound>
                <outbound type="feature" confirmed="no">java.security.MessageDigest.digest()</outbound>
                <outbound type="feature" confirmed="no">java.security.MessageDigest.getInstance(java.lang.String)</outbound>
                <outbound type="feature" confirmed="no">java.security.MessageDigest.update(byte[])</outbound>
                <outbound type="class" confirmed="no">java.security.NoSuchAlgorithmException</outbound>
                <outbound type="feature" confirmed="no">org.apache.abdera.i18n.text.Localizer.get(java.lang.String)</outbound>
                <outbound type="feature" confirmed="yes">org.apache.abdera.util.EntityTag.EntityTag(java.lang.String)</outbound>
                <outbound type="feature" confirmed="no">org.apache.commons.codec.binary.Hex.encodeHex(byte[])</outbound>
                <inbound type="feature" confirmed="yes">org.apache.abdera.util.EntityTag.matches(org.apache.abdera.util.EntityTag, java.lang.String[])</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.util.EntityTag.getTag()</name>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="feature" confirmed="yes">org.apache.abdera.util.EntityTag.tag</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.util.EntityTag.hashCode()</name>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="feature" confirmed="no">java.lang.String.hashCode()</outbound>
                <outbound type="feature" confirmed="yes">org.apache.abdera.util.EntityTag.tag</outbound>
                <outbound type="feature" confirmed="yes">org.apache.abdera.util.EntityTag.weak</outbound>
                <outbound type="feature" confirmed="yes">org.apache.abdera.util.EntityTag.wild</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.util.EntityTag.isWeak()</name>
                <outbound type="feature" confirmed="yes">org.apache.abdera.util.EntityTag.weak</outbound>
                <inbound type="feature" confirmed="yes">org.apache.abdera.util.EntityTag.compareTo(org.apache.abdera.util.EntityTag)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.util.EntityTag.isWild()</name>
                <outbound type="feature" confirmed="yes">org.apache.abdera.util.EntityTag.wild</outbound>
                <inbound type="feature" confirmed="yes">org.apache.abdera.util.EntityTag.compareTo(org.apache.abdera.util.EntityTag)</inbound>
                <inbound type="feature" confirmed="yes">org.apache.abdera.util.EntityTag.equals(java.lang.Object)</inbound>
                <inbound type="feature" confirmed="yes">org.apache.abdera.util.EntityTag.matchesAny(org.apache.abdera.util.EntityTag, org.apache.abdera.util.EntityTag[], boolean)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.util.EntityTag.matches(java.lang.String, java.lang.String)</name>
                <outbound type="class" confirmed="no">java.lang.Object</outbound>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="feature" confirmed="yes">org.apache.abdera.util.EntityTag.equals(java.lang.Object)</outbound>
                <outbound type="feature" confirmed="yes">org.apache.abdera.util.EntityTag.parse(java.lang.String)</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.util.EntityTag.matches(org.apache.abdera.util.EntityTag, java.lang.String)</name>
                <outbound type="class" confirmed="no">java.lang.Object</outbound>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="feature" confirmed="yes">org.apache.abdera.util.EntityTag.equals(java.lang.Object)</outbound>
                <outbound type="feature" confirmed="yes">org.apache.abdera.util.EntityTag.parse(java.lang.String)</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.util.EntityTag.matches(org.apache.abdera.util.EntityTag, java.lang.String[])</name>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="feature" confirmed="yes">org.apache.abdera.util.EntityTag.generate(java.lang.String[])</outbound>
                <outbound type="feature" confirmed="yes">org.apache.abdera.util.EntityTag.matches(org.apache.abdera.util.EntityTag, org.apache.abdera.util.EntityTag)</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.util.EntityTag.matches(org.apache.abdera.util.EntityTag, org.apache.abdera.util.EntityTag)</name>
                <outbound type="class" confirmed="no">java.lang.Object</outbound>
                <outbound type="feature" confirmed="yes">org.apache.abdera.util.EntityTag.equals(java.lang.Object)</outbound>
                <inbound type="feature" confirmed="yes">org.apache.abdera.util.EntityTag.matches(org.apache.abdera.util.EntityTag, java.lang.String[])</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.util.EntityTag.matchesAny(java.lang.String, java.lang.String)</name>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="feature" confirmed="yes">org.apache.abdera.util.EntityTag.matchesAny(org.apache.abdera.util.EntityTag, org.apache.abdera.util.EntityTag[], boolean)</outbound>
                <outbound type="feature" confirmed="yes">org.apache.abdera.util.EntityTag.parse(java.lang.String)</outbound>
                <outbound type="feature" confirmed="yes">org.apache.abdera.util.EntityTag.parseTags(java.lang.String)</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.util.EntityTag.matchesAny(java.lang.String, java.lang.String, boolean)</name>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="feature" confirmed="yes">org.apache.abdera.util.EntityTag.matchesAny(org.apache.abdera.util.EntityTag, org.apache.abdera.util.EntityTag[], boolean)</outbound>
                <outbound type="feature" confirmed="yes">org.apache.abdera.util.EntityTag.parse(java.lang.String)</outbound>
                <outbound type="feature" confirmed="yes">org.apache.abdera.util.EntityTag.parseTags(java.lang.String)</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.util.EntityTag.matchesAny(org.apache.abdera.util.EntityTag, java.lang.String)</name>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="feature" confirmed="yes">org.apache.abdera.util.EntityTag.matchesAny(org.apache.abdera.util.EntityTag, org.apache.abdera.util.EntityTag[], boolean)</outbound>
                <outbound type="feature" confirmed="yes">org.apache.abdera.util.EntityTag.parseTags(java.lang.String)</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.util.EntityTag.matchesAny(org.apache.abdera.util.EntityTag, java.lang.String, boolean)</name>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="feature" confirmed="yes">org.apache.abdera.util.EntityTag.matchesAny(org.apache.abdera.util.EntityTag, org.apache.abdera.util.EntityTag[], boolean)</outbound>
                <outbound type="feature" confirmed="yes">org.apache.abdera.util.EntityTag.parseTags(java.lang.String)</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.util.EntityTag.matchesAny(org.apache.abdera.util.EntityTag, org.apache.abdera.util.EntityTag[])</name>
                <outbound type="feature" confirmed="yes">org.apache.abdera.util.EntityTag.matchesAny(org.apache.abdera.util.EntityTag, org.apache.abdera.util.EntityTag[], boolean)</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.util.EntityTag.matchesAny(org.apache.abdera.util.EntityTag, org.apache.abdera.util.EntityTag[], boolean)</name>
                <outbound type="class" confirmed="no">java.lang.Object</outbound>
                <outbound type="feature" confirmed="yes">org.apache.abdera.util.EntityTag.equals(java.lang.Object)</outbound>
                <outbound type="feature" confirmed="yes">org.apache.abdera.util.EntityTag.isWild()</outbound>
                <inbound type="feature" confirmed="yes">org.apache.abdera.util.EntityTag.matchesAny(java.lang.String, java.lang.String)</inbound>
                <inbound type="feature" confirmed="yes">org.apache.abdera.util.EntityTag.matchesAny(java.lang.String, java.lang.String, boolean)</inbound>
                <inbound type="feature" confirmed="yes">org.apache.abdera.util.EntityTag.matchesAny(org.apache.abdera.util.EntityTag, java.lang.String)</inbound>
                <inbound type="feature" confirmed="yes">org.apache.abdera.util.EntityTag.matchesAny(org.apache.abdera.util.EntityTag, java.lang.String, boolean)</inbound>
                <inbound type="feature" confirmed="yes">org.apache.abdera.util.EntityTag.matchesAny(org.apache.abdera.util.EntityTag, org.apache.abdera.util.EntityTag[])</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.util.EntityTag.parse(java.lang.String)</name>
                <outbound type="class" confirmed="no">java.lang.CharSequence</outbound>
                <outbound type="feature" confirmed="no">java.lang.IllegalArgumentException.IllegalArgumentException(java.lang.String)</outbound>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="feature" confirmed="no">java.lang.String.length()</outbound>
                <outbound type="class" confirmed="no">java.util.regex.Matcher</outbound>
                <outbound type="feature" confirmed="no">java.util.regex.Matcher.find()</outbound>
                <outbound type="feature" confirmed="no">java.util.regex.Matcher.group(int)</outbound>
                <outbound type="class" confirmed="no">java.util.regex.Pattern</outbound>
                <outbound type="feature" confirmed="no">java.util.regex.Pattern.matcher(java.lang.CharSequence)</outbound>
                <outbound type="feature" confirmed="yes">org.apache.abdera.util.EntityTag.EntityTag(java.lang.String, boolean, boolean)</outbound>
                <outbound type="feature" confirmed="yes">org.apache.abdera.util.EntityTag.INVALID_ENTITY_TAG</outbound>
                <outbound type="feature" confirmed="yes">org.apache.abdera.util.EntityTag.PATTERN</outbound>
                <inbound type="feature" confirmed="yes">org.apache.abdera.protocol.util.AbstractResponse.getEntityTag()</inbound>
                <inbound type="feature" confirmed="yes">org.apache.abdera.util.EntityTag.attemptParse(java.lang.String)</inbound>
                <inbound type="feature" confirmed="yes">org.apache.abdera.util.EntityTag.matches(java.lang.String, java.lang.String)</inbound>
                <inbound type="feature" confirmed="yes">org.apache.abdera.util.EntityTag.matches(org.apache.abdera.util.EntityTag, java.lang.String)</inbound>
                <inbound type="feature" confirmed="yes">org.apache.abdera.util.EntityTag.matchesAny(java.lang.String, java.lang.String)</inbound>
                <inbound type="feature" confirmed="yes">org.apache.abdera.util.EntityTag.matchesAny(java.lang.String, java.lang.String, boolean)</inbound>
                <inbound type="feature" confirmed="yes">org.apache.abdera.util.EntityTag.parseTags(java.lang.String)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.util.EntityTag.parseTags(java.lang.String)</name>
                <outbound type="class" confirmed="no">java.lang.Object</outbound>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="feature" confirmed="no">java.lang.String.length()</outbound>
                <outbound type="feature" confirmed="no">java.lang.String.split(java.lang.String)</outbound>
                <outbound type="feature" confirmed="no">java.lang.String.trim()</outbound>
                <outbound type="feature" confirmed="no">java.util.ArrayList.ArrayList()</outbound>
                <outbound type="feature" confirmed="no">java.util.List.add(java.lang.Object)</outbound>
                <outbound type="feature" confirmed="no">java.util.List.size()</outbound>
                <outbound type="feature" confirmed="no">java.util.List.toArray(java.lang.Object[])</outbound>
                <outbound type="feature" confirmed="yes">org.apache.abdera.util.EntityTag.parse(java.lang.String)</outbound>
                <outbound type="class" confirmed="no">org.apache.abdera.util.EntityTag[]</outbound>
                <inbound type="feature" confirmed="yes">org.apache.abdera.protocol.util.AbstractRequest.getIfMatch()</inbound>
                <inbound type="feature" confirmed="yes">org.apache.abdera.protocol.util.AbstractRequest.getIfNoneMatch()</inbound>
                <inbound type="feature" confirmed="yes">org.apache.abdera.util.EntityTag.matchesAny(java.lang.String, java.lang.String)</inbound>
                <inbound type="feature" confirmed="yes">org.apache.abdera.util.EntityTag.matchesAny(java.lang.String, java.lang.String, boolean)</inbound>
                <inbound type="feature" confirmed="yes">org.apache.abdera.util.EntityTag.matchesAny(org.apache.abdera.util.EntityTag, java.lang.String)</inbound>
                <inbound type="feature" confirmed="yes">org.apache.abdera.util.EntityTag.matchesAny(org.apache.abdera.util.EntityTag, java.lang.String, boolean)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.util.EntityTag.serialVersionUID</name>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.util.EntityTag.static {}</name>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="class" confirmed="no">java.util.regex.Pattern</outbound>
                <outbound type="feature" confirmed="no">java.util.regex.Pattern.compile(java.lang.String)</outbound>
                <outbound type="feature" confirmed="no">org.apache.abdera.i18n.text.Localizer.get(java.lang.String)</outbound>
                <outbound type="feature" confirmed="yes">org.apache.abdera.util.EntityTag.EntityTag(java.lang.String)</outbound>
                <outbound type="feature" confirmed="yes">org.apache.abdera.util.EntityTag.INVALID_ENTITY_TAG</outbound>
                <outbound type="feature" confirmed="yes">org.apache.abdera.util.EntityTag.PATTERN</outbound>
                <outbound type="feature" confirmed="yes">org.apache.abdera.util.EntityTag.WILD</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.util.EntityTag.tag</name>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <inbound type="feature" confirmed="yes">org.apache.abdera.util.EntityTag.EntityTag(java.lang.String, boolean)</inbound>
                <inbound type="feature" confirmed="yes">org.apache.abdera.util.EntityTag.EntityTag(java.lang.String, boolean, boolean)</inbound>
                <inbound type="feature" confirmed="yes">org.apache.abdera.util.EntityTag.compareTo(org.apache.abdera.util.EntityTag)</inbound>
                <inbound type="feature" confirmed="yes">org.apache.abdera.util.EntityTag.equals(java.lang.Object)</inbound>
                <inbound type="feature" confirmed="yes">org.apache.abdera.util.EntityTag.getTag()</inbound>
                <inbound type="feature" confirmed="yes">org.apache.abdera.util.EntityTag.hashCode()</inbound>
                <inbound type="feature" confirmed="yes">org.apache.abdera.util.EntityTag.toString()</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.util.EntityTag.toString()</name>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="class" confirmed="no">java.lang.StringBuilder</outbound>
                <outbound type="feature" confirmed="no">java.lang.StringBuilder.StringBuilder()</outbound>
                <outbound type="feature" confirmed="no">java.lang.StringBuilder.append(char)</outbound>
                <outbound type="feature" confirmed="no">java.lang.StringBuilder.append(java.lang.String)</outbound>
                <outbound type="feature" confirmed="no">java.lang.StringBuilder.toString()</outbound>
                <outbound type="feature" confirmed="yes">org.apache.abdera.util.EntityTag.tag</outbound>
                <outbound type="feature" confirmed="yes">org.apache.abdera.util.EntityTag.weak</outbound>
                <outbound type="feature" confirmed="yes">org.apache.abdera.util.EntityTag.wild</outbound>
                <inbound type="feature" confirmed="yes">org.apache.abdera.util.EntityTag.toString(java.lang.String[])</inbound>
                <inbound type="feature" confirmed="yes">org.apache.abdera.util.EntityTag.toString(org.apache.abdera.util.EntityTag[])</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.util.EntityTag.toString(java.lang.String[])</name>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="class" confirmed="no">java.lang.StringBuilder</outbound>
                <outbound type="feature" confirmed="no">java.lang.StringBuilder.StringBuilder()</outbound>
                <outbound type="feature" confirmed="no">java.lang.StringBuilder.append(java.lang.String)</outbound>
                <outbound type="feature" confirmed="no">java.lang.StringBuilder.length()</outbound>
                <outbound type="feature" confirmed="no">java.lang.StringBuilder.toString()</outbound>
                <outbound type="feature" confirmed="yes">org.apache.abdera.util.EntityTag.EntityTag(java.lang.String)</outbound>
                <outbound type="feature" confirmed="yes">org.apache.abdera.util.EntityTag.toString()</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.util.EntityTag.toString(org.apache.abdera.util.EntityTag[])</name>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="class" confirmed="no">java.lang.StringBuilder</outbound>
                <outbound type="feature" confirmed="no">java.lang.StringBuilder.StringBuilder()</outbound>
                <outbound type="feature" confirmed="no">java.lang.StringBuilder.append(java.lang.String)</outbound>
                <outbound type="feature" confirmed="no">java.lang.StringBuilder.length()</outbound>
                <outbound type="feature" confirmed="no">java.lang.StringBuilder.toString()</outbound>
                <outbound type="feature" confirmed="yes">org.apache.abdera.util.EntityTag.toString()</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.util.EntityTag.weak</name>
                <inbound type="feature" confirmed="yes">org.apache.abdera.util.EntityTag.EntityTag(java.lang.String, boolean)</inbound>
                <inbound type="feature" confirmed="yes">org.apache.abdera.util.EntityTag.EntityTag(java.lang.String, boolean, boolean)</inbound>
                <inbound type="feature" confirmed="yes">org.apache.abdera.util.EntityTag.equals(java.lang.Object)</inbound>
                <inbound type="feature" confirmed="yes">org.apache.abdera.util.EntityTag.hashCode()</inbound>
                <inbound type="feature" confirmed="yes">org.apache.abdera.util.EntityTag.isWeak()</inbound>
                <inbound type="feature" confirmed="yes">org.apache.abdera.util.EntityTag.toString()</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.util.EntityTag.wild</name>
                <inbound type="feature" confirmed="yes">org.apache.abdera.util.EntityTag.EntityTag(java.lang.String, boolean)</inbound>
                <inbound type="feature" confirmed="yes">org.apache.abdera.util.EntityTag.EntityTag(java.lang.String, boolean, boolean)</inbound>
                <inbound type="feature" confirmed="yes">org.apache.abdera.util.EntityTag.equals(java.lang.Object)</inbound>
                <inbound type="feature" confirmed="yes">org.apache.abdera.util.EntityTag.hashCode()</inbound>
                <inbound type="feature" confirmed="yes">org.apache.abdera.util.EntityTag.isWild()</inbound>
                <inbound type="feature" confirmed="yes">org.apache.abdera.util.EntityTag.toString()</inbound>
            </feature>
        </class>
        <class confirmed="no">
            <name>org.apache.abdera.util.EntityTag[]</name>
            <inbound type="feature" confirmed="yes">org.apache.abdera.util.EntityTag.parseTags(java.lang.String)</inbound>
        </class>
        <class confirmed="yes">
            <name>org.apache.abdera.util.MimeTypeHelper</name>
            <outbound type="class" confirmed="no">java.lang.Object</outbound>
            <feature confirmed="yes">
                <name>org.apache.abdera.util.MimeTypeHelper.MimeTypeHelper()</name>
                <outbound type="feature" confirmed="no">java.lang.Object.Object()</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.util.MimeTypeHelper.WILDCARD</name>
                <outbound type="class" confirmed="no">javax.activation.MimeType</outbound>
                <inbound type="feature" confirmed="yes">org.apache.abdera.util.MimeTypeHelper.isMatch(javax.activation.MimeType, javax.activation.MimeType, boolean)</inbound>
                <inbound type="feature" confirmed="yes">org.apache.abdera.util.MimeTypeHelper.static {}</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.util.MimeTypeHelper.compare(java.lang.String, java.lang.String)</name>
                <outbound type="class" confirmed="no">java.lang.Exception</outbound>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="class" confirmed="no">javax.activation.MimeType</outbound>
                <outbound type="feature" confirmed="no">javax.activation.MimeType.MimeType(java.lang.String)</outbound>
                <outbound type="feature" confirmed="yes">org.apache.abdera.util.MimeTypeHelper.compare(javax.activation.MimeType, javax.activation.MimeType)</outbound>
                <inbound type="feature" confirmed="yes">org.apache.abdera.util.MimeTypeHelper$1.compare(java.lang.String, java.lang.String)</inbound>
                <inbound type="feature" confirmed="yes">org.apache.abdera.util.MimeTypeHelper.contains(java.lang.String, java.util.List, boolean)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.util.MimeTypeHelper.compare(javax.activation.MimeType, javax.activation.MimeType)</name>
                <outbound type="class" confirmed="no">java.lang.Object</outbound>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="feature" confirmed="no">java.lang.String.equals(java.lang.Object)</outbound>
                <outbound type="class" confirmed="no">javax.activation.MimeType</outbound>
                <outbound type="feature" confirmed="no">javax.activation.MimeType.getSubType()</outbound>
                <outbound type="feature" confirmed="yes">org.apache.abdera.util.MimeTypeHelper.isMatch(javax.activation.MimeType, javax.activation.MimeType)</outbound>
                <inbound type="feature" confirmed="yes">org.apache.abdera.util.MimeTypeHelper.compare(java.lang.String, java.lang.String)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.util.MimeTypeHelper.condense(java.lang.String[])</name>
                <outbound type="class" confirmed="no">java.lang.Object</outbound>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="class" confirmed="no">java.lang.String[]</outbound>
                <outbound type="feature" confirmed="no">java.util.ArrayList.ArrayList()</outbound>
                <outbound type="feature" confirmed="no">java.util.Arrays.sort(java.lang.Object[], java.util.Comparator)</outbound>
                <outbound type="class" confirmed="no">java.util.Comparator</outbound>
                <outbound type="class" confirmed="no">java.util.List</outbound>
                <outbound type="feature" confirmed="no">java.util.List.add(java.lang.Object)</outbound>
                <outbound type="feature" confirmed="no">java.util.List.get(int)</outbound>
                <outbound type="feature" confirmed="no">java.util.List.remove(java.lang.Object)</outbound>
                <outbound type="feature" confirmed="no">java.util.List.size()</outbound>
                <outbound type="feature" confirmed="no">java.util.List.toArray(java.lang.Object[])</outbound>
                <outbound type="feature" confirmed="yes">org.apache.abdera.util.MimeTypeHelper.contains(java.lang.String, java.util.List, boolean)</outbound>
                <outbound type="feature" confirmed="yes">org.apache.abdera.util.MimeTypeHelper.getComparator()</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.util.MimeTypeHelper.contains(java.lang.String, java.util.List, boolean)</name>
                <outbound type="class" confirmed="no">java.lang.Object</outbound>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="class" confirmed="no">java.util.Iterator</outbound>
                <outbound type="feature" confirmed="no">java.util.Iterator.hasNext()</outbound>
                <outbound type="feature" confirmed="no">java.util.Iterator.next()</outbound>
                <outbound type="class" confirmed="no">java.util.List</outbound>
                <outbound type="feature" confirmed="no">java.util.List.contains(java.lang.Object)</outbound>
                <outbound type="feature" confirmed="no">java.util.List.iterator()</outbound>
                <outbound type="feature" confirmed="yes">org.apache.abdera.util.MimeTypeHelper.compare(java.lang.String, java.lang.String)</outbound>
                <inbound type="feature" confirmed="yes">org.apache.abdera.util.MimeTypeHelper.condense(java.lang.String[])</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.util.MimeTypeHelper.createWildcard()</name>
                <outbound type="class" confirmed="no">java.lang.Exception</outbound>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="class" confirmed="no">javax.activation.MimeType</outbound>
                <outbound type="feature" confirmed="no">javax.activation.MimeType.MimeType(java.lang.String)</outbound>
                <inbound type="feature" confirmed="yes">org.apache.abdera.util.MimeTypeHelper.static {}</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.util.MimeTypeHelper.getCharset(java.lang.String)</name>
                <outbound type="class" confirmed="no">java.lang.Exception</outbound>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="feature" confirmed="no">javax.activation.MimeType.MimeType(java.lang.String)</outbound>
                <outbound type="feature" confirmed="no">javax.activation.MimeType.getParameter(java.lang.String)</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.util.MimeTypeHelper.getComparator()</name>
                <outbound type="class" confirmed="no">java.util.Comparator</outbound>
                <outbound type="feature" confirmed="yes">org.apache.abdera.util.MimeTypeHelper$1.MimeTypeHelper$1()</outbound>
                <inbound type="feature" confirmed="yes">org.apache.abdera.util.MimeTypeHelper.condense(java.lang.String[])</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.util.MimeTypeHelper.getMimeType(org.apache.abdera.model.Base)</name>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="class" confirmed="no">javax.activation.MimeType</outbound>
                <outbound type="feature" confirmed="no">javax.activation.MimeType.toString()</outbound>
                <outbound type="class" confirmed="yes">org.apache.abdera.factory.Factory</outbound>
                <outbound type="feature" confirmed="yes">org.apache.abdera.factory.Factory.getMimeType(org.apache.abdera.model.Base)</outbound>
                <outbound type="class" confirmed="yes">org.apache.abdera.model.Base</outbound>
                <outbound type="feature" confirmed="yes">org.apache.abdera.model.Base.getFactory()</outbound>
                <outbound type="class" confirmed="yes">org.apache.abdera.model.Categories</outbound>
                <outbound type="class" confirmed="yes">org.apache.abdera.model.Document</outbound>
                <outbound type="feature" confirmed="yes">org.apache.abdera.model.Document.getContentType()</outbound>
                <outbound type="feature" confirmed="yes">org.apache.abdera.model.Document.getRoot()</outbound>
                <outbound type="class" confirmed="yes">org.apache.abdera.model.Element</outbound>
                <outbound type="feature" confirmed="yes">org.apache.abdera.model.Element.getDocument()</outbound>
                <outbound type="class" confirmed="yes">org.apache.abdera.model.Entry</outbound>
                <outbound type="class" confirmed="yes">org.apache.abdera.model.Feed</outbound>
                <outbound type="class" confirmed="yes">org.apache.abdera.model.Service</outbound>
                <inbound type="feature" confirmed="yes">org.apache.abdera.util.AbderaDataSource.AbderaDataSource(org.apache.abdera.model.Base)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.util.MimeTypeHelper.isApp(java.lang.String)</name>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="feature" confirmed="yes">org.apache.abdera.util.MimeTypeHelper.isMatch(java.lang.String, java.lang.String)</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.util.MimeTypeHelper.isAtom(java.lang.String)</name>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="feature" confirmed="yes">org.apache.abdera.util.MimeTypeHelper.isEntry(java.lang.String)</outbound>
                <outbound type="feature" confirmed="yes">org.apache.abdera.util.MimeTypeHelper.isFeed(java.lang.String)</outbound>
                <outbound type="feature" confirmed="yes">org.apache.abdera.util.MimeTypeHelper.isMatch(java.lang.String, java.lang.String)</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.util.MimeTypeHelper.isEntry(java.lang.String)</name>
                <outbound type="class" confirmed="no">java.lang.Exception</outbound>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="feature" confirmed="no">java.lang.String.toLowerCase()</outbound>
                <outbound type="class" confirmed="no">javax.activation.MimeType</outbound>
                <outbound type="feature" confirmed="no">javax.activation.MimeType.MimeType(java.lang.String)</outbound>
                <outbound type="feature" confirmed="no">javax.activation.MimeType.getParameter(java.lang.String)</outbound>
                <outbound type="feature" confirmed="yes">org.apache.abdera.util.MimeTypeHelper.isMatch(javax.activation.MimeType, javax.activation.MimeType)</outbound>
                <outbound type="feature" confirmed="yes">org.apache.abdera.util.MimeTypeHelper.isMatchType(java.lang.String, java.lang.String)</outbound>
                <inbound type="feature" confirmed="yes">org.apache.abdera.util.MimeTypeHelper.isAtom(java.lang.String)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.util.MimeTypeHelper.isFeed(java.lang.String)</name>
                <outbound type="class" confirmed="no">java.lang.Exception</outbound>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="feature" confirmed="no">java.lang.String.toLowerCase()</outbound>
                <outbound type="class" confirmed="no">javax.activation.MimeType</outbound>
                <outbound type="feature" confirmed="no">javax.activation.MimeType.MimeType(java.lang.String)</outbound>
                <outbound type="feature" confirmed="no">javax.activation.MimeType.getParameter(java.lang.String)</outbound>
                <outbound type="feature" confirmed="yes">org.apache.abdera.util.MimeTypeHelper.isMatch(javax.activation.MimeType, javax.activation.MimeType)</outbound>
                <outbound type="feature" confirmed="yes">org.apache.abdera.util.MimeTypeHelper.isMatchType(java.lang.String, java.lang.String)</outbound>
                <inbound type="feature" confirmed="yes">org.apache.abdera.util.MimeTypeHelper.isAtom(java.lang.String)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.util.MimeTypeHelper.isMatch(java.lang.String, java.lang.String)</name>
                <outbound type="class" confirmed="no">java.lang.Exception</outbound>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="feature" confirmed="no">java.lang.String.length()</outbound>
                <outbound type="feature" confirmed="no">java.lang.String.toLowerCase()</outbound>
                <outbound type="class" confirmed="no">javax.activation.MimeType</outbound>
                <outbound type="feature" confirmed="no">javax.activation.MimeType.MimeType(java.lang.String)</outbound>
                <outbound type="feature" confirmed="yes">org.apache.abdera.util.MimeTypeHelper.isMatch(javax.activation.MimeType, javax.activation.MimeType)</outbound>
                <inbound type="feature" confirmed="yes">org.apache.abdera.util.AbstractNamedParser.parsesFormat(java.lang.String)</inbound>
                <inbound type="feature" confirmed="yes">org.apache.abdera.util.AbstractNamedWriter.outputsFormat(java.lang.String)</inbound>
                <inbound type="feature" confirmed="yes">org.apache.abdera.util.MimeTypeHelper.isApp(java.lang.String)</inbound>
                <inbound type="feature" confirmed="yes">org.apache.abdera.util.MimeTypeHelper.isAtom(java.lang.String)</inbound>
                <inbound type="feature" confirmed="yes">org.apache.abdera.util.MimeTypeHelper.isMultipart(java.lang.String)</inbound>
                <inbound type="feature" confirmed="yes">org.apache.abdera.util.MimeTypeHelper.isText(java.lang.String)</inbound>
                <inbound type="feature" confirmed="yes">org.apache.abdera.util.MimeTypeHelper.isXml(java.lang.String)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.util.MimeTypeHelper.isMatch(javax.activation.MimeType, javax.activation.MimeType)</name>
                <outbound type="class" confirmed="no">javax.activation.MimeType</outbound>
                <outbound type="feature" confirmed="yes">org.apache.abdera.util.MimeTypeHelper.isMatch(javax.activation.MimeType, javax.activation.MimeType, boolean)</outbound>
                <inbound type="feature" confirmed="yes">org.apache.abdera.util.MimeTypeHelper.compare(javax.activation.MimeType, javax.activation.MimeType)</inbound>
                <inbound type="feature" confirmed="yes">org.apache.abdera.util.MimeTypeHelper.isEntry(java.lang.String)</inbound>
                <inbound type="feature" confirmed="yes">org.apache.abdera.util.MimeTypeHelper.isFeed(java.lang.String)</inbound>
                <inbound type="feature" confirmed="yes">org.apache.abdera.util.MimeTypeHelper.isMatch(java.lang.String, java.lang.String)</inbound>
                <inbound type="feature" confirmed="yes">org.apache.abdera.util.MimeTypeHelper.isMatch(javax.activation.MimeType, javax.activation.MimeType, boolean)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.util.MimeTypeHelper.isMatch(javax.activation.MimeType, javax.activation.MimeType, boolean)</name>
                <outbound type="class" confirmed="no">java.lang.Exception</outbound>
                <outbound type="class" confirmed="no">java.lang.Object</outbound>
                <outbound type="feature" confirmed="no">java.lang.Object.equals(java.lang.Object)</outbound>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="feature" confirmed="no">java.lang.String.equals(java.lang.Object)</outbound>
                <outbound type="class" confirmed="no">java.util.Enumeration</outbound>
                <outbound type="feature" confirmed="no">java.util.Enumeration.hasMoreElements()</outbound>
                <outbound type="feature" confirmed="no">java.util.Enumeration.nextElement()</outbound>
                <outbound type="class" confirmed="no">javax.activation.MimeType</outbound>
                <outbound type="feature" confirmed="no">javax.activation.MimeType.MimeType(java.lang.String, java.lang.String)</outbound>
                <outbound type="feature" confirmed="no">javax.activation.MimeType.getParameters()</outbound>
                <outbound type="feature" confirmed="no">javax.activation.MimeType.getPrimaryType()</outbound>
                <outbound type="feature" confirmed="no">javax.activation.MimeType.getSubType()</outbound>
                <outbound type="feature" confirmed="no">javax.activation.MimeType.match(javax.activation.MimeType)</outbound>
                <outbound type="class" confirmed="no">javax.activation.MimeTypeParameterList</outbound>
                <outbound type="feature" confirmed="no">javax.activation.MimeTypeParameterList.get(java.lang.String)</outbound>
                <outbound type="feature" confirmed="no">javax.activation.MimeTypeParameterList.getNames()</outbound>
                <outbound type="feature" confirmed="no">javax.activation.MimeTypeParameterList.isEmpty()</outbound>
                <outbound type="feature" confirmed="yes">org.apache.abdera.util.MimeTypeHelper.WILDCARD</outbound>
                <outbound type="feature" confirmed="yes">org.apache.abdera.util.MimeTypeHelper.isMatch(javax.activation.MimeType, javax.activation.MimeType)</outbound>
                <inbound type="feature" confirmed="yes">org.apache.abdera.util.MimeTypeHelper.isMatch(javax.activation.MimeType, javax.activation.MimeType)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.util.MimeTypeHelper.isMatchType(java.lang.String, java.lang.String)</name>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="feature" confirmed="no">java.lang.String.equalsIgnoreCase(java.lang.String)</outbound>
                <inbound type="feature" confirmed="yes">org.apache.abdera.util.MimeTypeHelper.isEntry(java.lang.String)</inbound>
                <inbound type="feature" confirmed="yes">org.apache.abdera.util.MimeTypeHelper.isFeed(java.lang.String)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.util.MimeTypeHelper.isMimeType(java.lang.String)</name>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="feature" confirmed="no">javax.activation.MimeType.MimeType(java.lang.String)</outbound>
                <outbound type="class" confirmed="no">javax.activation.MimeTypeParseException</outbound>
                <inbound type="feature" confirmed="yes">org.apache.abdera.model.Content$Type.typeFromString(java.lang.String)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.util.MimeTypeHelper.isMultipart(java.lang.String)</name>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="feature" confirmed="yes">org.apache.abdera.util.MimeTypeHelper.isMatch(java.lang.String, java.lang.String)</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.util.MimeTypeHelper.isText(java.lang.String)</name>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="feature" confirmed="yes">org.apache.abdera.util.MimeTypeHelper.isMatch(java.lang.String, java.lang.String)</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.util.MimeTypeHelper.isXml(java.lang.String)</name>
                <outbound type="class" confirmed="no">java.lang.Exception</outbound>
                <outbound type="class" confirmed="no">java.lang.Object</outbound>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="feature" confirmed="no">java.lang.String.endsWith(java.lang.String)</outbound>
                <outbound type="feature" confirmed="no">java.lang.String.equals(java.lang.Object)</outbound>
                <outbound type="feature" confirmed="no">java.lang.String.equalsIgnoreCase(java.lang.String)</outbound>
                <outbound type="feature" confirmed="no">javax.activation.MimeType.MimeType(java.lang.String)</outbound>
                <outbound type="feature" confirmed="no">javax.activation.MimeType.getPrimaryType()</outbound>
                <outbound type="feature" confirmed="no">javax.activation.MimeType.getSubType()</outbound>
                <outbound type="feature" confirmed="yes">org.apache.abdera.util.MimeTypeHelper.isMatch(java.lang.String, java.lang.String)</outbound>
                <inbound type="feature" confirmed="yes">org.apache.abdera.model.Content$Type.typeFromString(java.lang.String)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.util.MimeTypeHelper.static {}</name>
                <outbound type="class" confirmed="no">javax.activation.MimeType</outbound>
                <outbound type="feature" confirmed="yes">org.apache.abdera.util.MimeTypeHelper.WILDCARD</outbound>
                <outbound type="feature" confirmed="yes">org.apache.abdera.util.MimeTypeHelper.createWildcard()</outbound>
            </feature>
        </class>
        <class confirmed="yes">
            <name>org.apache.abdera.util.MimeTypeHelper$1</name>
            <outbound type="class" confirmed="no">java.lang.Object</outbound>
            <outbound type="class" confirmed="no">java.util.Comparator</outbound>
            <feature confirmed="yes">
                <name>org.apache.abdera.util.MimeTypeHelper$1.MimeTypeHelper$1()</name>
                <outbound type="feature" confirmed="no">java.lang.Object.Object()</outbound>
                <inbound type="feature" confirmed="yes">org.apache.abdera.util.MimeTypeHelper.getComparator()</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.util.MimeTypeHelper$1.compare(java.lang.Object, java.lang.Object)</name>
                <outbound type="class" confirmed="no">java.lang.Object</outbound>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="feature" confirmed="yes">org.apache.abdera.util.MimeTypeHelper$1.compare(java.lang.String, java.lang.String)</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.util.MimeTypeHelper$1.compare(java.lang.String, java.lang.String)</name>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="feature" confirmed="yes">org.apache.abdera.util.MimeTypeHelper.compare(java.lang.String, java.lang.String)</outbound>
                <inbound type="feature" confirmed="yes">org.apache.abdera.util.MimeTypeHelper$1.compare(java.lang.Object, java.lang.Object)</inbound>
            </feature>
        </class>
        <class confirmed="yes">
            <name>org.apache.abdera.util.MimeTypeParseException</name>
            <outbound type="class" confirmed="no">java.lang.RuntimeException</outbound>
            <feature confirmed="yes">
                <name>org.apache.abdera.util.MimeTypeParseException.MimeTypeParseException(javax.activation.MimeTypeParseException)</name>
                <outbound type="feature" confirmed="no">java.lang.RuntimeException.RuntimeException(java.lang.Throwable)</outbound>
                <outbound type="class" confirmed="no">java.lang.Throwable</outbound>
                <outbound type="class" confirmed="no">javax.activation.MimeTypeParseException</outbound>
                <inbound type="feature" confirmed="yes">org.apache.abdera.protocol.util.AbstractMessage.getContentType()</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.util.MimeTypeParseException.serialVersionUID</name>
            </feature>
        </class>
        <class confirmed="yes">
            <name>org.apache.abdera.util.MultiIterator</name>
            <outbound type="class" confirmed="no">java.lang.Object</outbound>
            <outbound type="class" confirmed="no">java.util.Iterator</outbound>
            <feature confirmed="yes">
                <name>org.apache.abdera.util.MultiIterator.MultiIterator(java.lang.Iterable)</name>
                <outbound type="class" confirmed="no">java.lang.Iterable</outbound>
                <outbound type="feature" confirmed="no">java.lang.Iterable.iterator()</outbound>
                <outbound type="class" confirmed="no">java.util.Iterator</outbound>
                <outbound type="feature" confirmed="yes">org.apache.abdera.util.MultiIterator.MultiIterator(java.util.Iterator)</outbound>
                <inbound type="feature" confirmed="yes">org.apache.abdera.util.Discover$DefaultLoader.init(boolean)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.util.MultiIterator.MultiIterator(java.util.Iterator)</name>
                <outbound type="feature" confirmed="no">java.lang.Object.Object()</outbound>
                <outbound type="class" confirmed="no">java.util.Iterator</outbound>
                <outbound type="feature" confirmed="yes">org.apache.abdera.util.MultiIterator.current</outbound>
                <outbound type="feature" confirmed="yes">org.apache.abdera.util.MultiIterator.iterators</outbound>
                <outbound type="feature" confirmed="yes">org.apache.abdera.util.MultiIterator.selectCurrent()</outbound>
                <inbound type="feature" confirmed="yes">org.apache.abdera.util.MultiIterator.MultiIterator(java.lang.Iterable)</inbound>
                <inbound type="feature" confirmed="yes">org.apache.abdera.util.MultiIterator.MultiIterator(java.util.Iterator[])</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.util.MultiIterator.MultiIterator(java.util.Iterator[])</name>
                <outbound type="class" confirmed="no">java.lang.Object</outbound>
                <outbound type="feature" confirmed="no">java.util.Arrays.asList(java.lang.Object[])</outbound>
                <outbound type="class" confirmed="no">java.util.Iterator</outbound>
                <outbound type="class" confirmed="no">java.util.List</outbound>
                <outbound type="feature" confirmed="no">java.util.List.iterator()</outbound>
                <outbound type="feature" confirmed="yes">org.apache.abdera.util.MultiIterator.MultiIterator(java.util.Iterator)</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.util.MultiIterator.current</name>
                <outbound type="class" confirmed="no">java.util.Iterator</outbound>
                <inbound type="feature" confirmed="yes">org.apache.abdera.util.MultiIterator.MultiIterator(java.util.Iterator)</inbound>
                <inbound type="feature" confirmed="yes">org.apache.abdera.util.MultiIterator.selectCurrent()</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.util.MultiIterator.hasNext()</name>
                <outbound type="class" confirmed="no">java.util.Iterator</outbound>
                <outbound type="feature" confirmed="no">java.util.Iterator.hasNext()</outbound>
                <outbound type="feature" confirmed="yes">org.apache.abdera.util.MultiIterator.selectCurrent()</outbound>
                <inbound type="feature" confirmed="yes">org.apache.abdera.util.MultiIterator.next()</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.util.MultiIterator.iterators</name>
                <outbound type="class" confirmed="no">java.util.Iterator</outbound>
                <inbound type="feature" confirmed="yes">org.apache.abdera.util.MultiIterator.MultiIterator(java.util.Iterator)</inbound>
                <inbound type="feature" confirmed="yes">org.apache.abdera.util.MultiIterator.selectCurrent()</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.util.MultiIterator.next()</name>
                <outbound type="class" confirmed="no">java.lang.Object</outbound>
                <outbound type="class" confirmed="no">java.util.Iterator</outbound>
                <outbound type="feature" confirmed="no">java.util.Iterator.next()</outbound>
                <outbound type="feature" confirmed="yes">org.apache.abdera.util.MultiIterator.hasNext()</outbound>
                <outbound type="feature" confirmed="yes">org.apache.abdera.util.MultiIterator.selectCurrent()</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.util.MultiIterator.remove()</name>
                <outbound type="feature" confirmed="no">java.lang.UnsupportedOperationException.UnsupportedOperationException()</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.util.MultiIterator.selectCurrent()</name>
                <outbound type="class" confirmed="no">java.lang.Object</outbound>
                <outbound type="class" confirmed="no">java.util.Iterator</outbound>
                <outbound type="feature" confirmed="no">java.util.Iterator.hasNext()</outbound>
                <outbound type="feature" confirmed="no">java.util.Iterator.next()</outbound>
                <outbound type="feature" confirmed="yes">org.apache.abdera.util.MultiIterator.current</outbound>
                <outbound type="feature" confirmed="yes">org.apache.abdera.util.MultiIterator.iterators</outbound>
                <inbound type="feature" confirmed="yes">org.apache.abdera.util.MultiIterator.MultiIterator(java.util.Iterator)</inbound>
                <inbound type="feature" confirmed="yes">org.apache.abdera.util.MultiIterator.hasNext()</inbound>
                <inbound type="feature" confirmed="yes">org.apache.abdera.util.MultiIterator.next()</inbound>
            </feature>
        </class>
        <class confirmed="yes">
            <name>org.apache.abdera.util.NamedItem</name>
            <outbound type="class" confirmed="no">java.lang.Object</outbound>
            <inbound type="class" confirmed="yes">org.apache.abdera.parser.NamedParser</inbound>
            <inbound type="class" confirmed="yes">org.apache.abdera.writer.NamedWriter</inbound>
            <inbound type="class" confirmed="yes">org.apache.abdera.writer.StreamWriter</inbound>
            <feature confirmed="yes">
                <name>org.apache.abdera.util.NamedItem.getName()</name>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
            </feature>
        </class>
        <class confirmed="yes">
            <name>org.apache.abdera.util.ServiceUtil</name>
            <outbound type="class" confirmed="no">java.lang.Object</outbound>
            <outbound type="class" confirmed="yes">org.apache.abdera.util.Constants</outbound>
            <feature confirmed="yes">
                <name>org.apache.abdera.util.ServiceUtil.ServiceUtil()</name>
                <outbound type="feature" confirmed="no">java.lang.Object.Object()</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.util.ServiceUtil.loadExtensionFactories()</name>
                <outbound type="class" confirmed="no">java.lang.Iterable</outbound>
                <outbound type="feature" confirmed="no">java.lang.Iterable.iterator()</outbound>
                <outbound type="class" confirmed="no">java.lang.Object</outbound>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="feature" confirmed="no">java.util.ArrayList.ArrayList()</outbound>
                <outbound type="class" confirmed="no">java.util.Iterator</outbound>
                <outbound type="feature" confirmed="no">java.util.Iterator.hasNext()</outbound>
                <outbound type="feature" confirmed="no">java.util.Iterator.next()</outbound>
                <outbound type="class" confirmed="no">java.util.List</outbound>
                <outbound type="feature" confirmed="no">java.util.List.add(java.lang.Object)</outbound>
                <outbound type="class" confirmed="yes">org.apache.abdera.factory.ExtensionFactory</outbound>
                <outbound type="feature" confirmed="yes">org.apache.abdera.util.Discover.locate(java.lang.String, java.lang.Object[])</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.util.ServiceUtil.loadimpls(java.lang.String)</name>
                <outbound type="class" confirmed="no">java.lang.Iterable</outbound>
                <outbound type="class" confirmed="no">java.lang.Object</outbound>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="feature" confirmed="yes">org.apache.abdera.util.Discover.locate(java.lang.String, java.lang.Object[])</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.util.ServiceUtil.loadimpls(java.lang.String, boolean)</name>
                <outbound type="class" confirmed="no">java.lang.Iterable</outbound>
                <outbound type="class" confirmed="no">java.lang.Object</outbound>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="feature" confirmed="yes">org.apache.abdera.util.Discover.locate(java.lang.String, boolean, java.lang.Object[])</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.util.ServiceUtil.newFactoryInstance(org.apache.abdera.Abdera)</name>
                <outbound type="class" confirmed="no">java.lang.Object</outbound>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="class" confirmed="yes">org.apache.abdera.Abdera</outbound>
                <outbound type="feature" confirmed="yes">org.apache.abdera.Abdera.getConfiguration()</outbound>
                <outbound type="class" confirmed="yes">org.apache.abdera.factory.Factory</outbound>
                <outbound type="class" confirmed="yes">org.apache.abdera.util.Configuration</outbound>
                <outbound type="feature" confirmed="yes">org.apache.abdera.util.Configuration.getConfigurationOption(java.lang.String, java.lang.String)</outbound>
                <outbound type="feature" confirmed="yes">org.apache.abdera.util.Discover.locate(java.lang.String, java.lang.String, java.lang.Object[])</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.util.ServiceUtil.newInstance(java.lang.String, java.lang.String, java.lang.Object[])</name>
                <outbound type="class" confirmed="no">java.lang.Object</outbound>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="feature" confirmed="yes">org.apache.abdera.util.Discover.locate(java.lang.String, java.lang.String, java.lang.Object[])</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.util.ServiceUtil.newInstance(java.lang.String, java.lang.String, org.apache.abdera.Abdera)</name>
                <outbound type="class" confirmed="no">java.lang.Object</outbound>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="class" confirmed="yes">org.apache.abdera.Abdera</outbound>
                <outbound type="feature" confirmed="yes">org.apache.abdera.util.Discover.locate(java.lang.String, java.lang.String, java.lang.Object[])</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.util.ServiceUtil.newParserFactoryInstance(org.apache.abdera.Abdera)</name>
                <outbound type="class" confirmed="no">java.lang.Object</outbound>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="class" confirmed="yes">org.apache.abdera.Abdera</outbound>
                <outbound type="feature" confirmed="yes">org.apache.abdera.Abdera.getConfiguration()</outbound>
                <outbound type="class" confirmed="yes">org.apache.abdera.parser.ParserFactory</outbound>
                <outbound type="class" confirmed="yes">org.apache.abdera.util.Configuration</outbound>
                <outbound type="feature" confirmed="yes">org.apache.abdera.util.Configuration.getConfigurationOption(java.lang.String, java.lang.String)</outbound>
                <outbound type="feature" confirmed="yes">org.apache.abdera.util.Discover.locate(java.lang.String, java.lang.String, java.lang.Object[])</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.util.ServiceUtil.newParserInstance(org.apache.abdera.Abdera)</name>
                <outbound type="class" confirmed="no">java.lang.Object</outbound>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="class" confirmed="yes">org.apache.abdera.Abdera</outbound>
                <outbound type="feature" confirmed="yes">org.apache.abdera.Abdera.getConfiguration()</outbound>
                <outbound type="class" confirmed="yes">org.apache.abdera.parser.Parser</outbound>
                <outbound type="class" confirmed="yes">org.apache.abdera.util.Configuration</outbound>
                <outbound type="feature" confirmed="yes">org.apache.abdera.util.Configuration.getConfigurationOption(java.lang.String, java.lang.String)</outbound>
                <outbound type="feature" confirmed="yes">org.apache.abdera.util.Discover.locate(java.lang.String, java.lang.String, java.lang.Object[])</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.util.ServiceUtil.newStreamWriterInstance(org.apache.abdera.Abdera)</name>
                <outbound type="class" confirmed="no">java.lang.Object</outbound>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="class" confirmed="yes">org.apache.abdera.Abdera</outbound>
                <outbound type="feature" confirmed="yes">org.apache.abdera.Abdera.getConfiguration()</outbound>
                <outbound type="class" confirmed="yes">org.apache.abdera.util.Configuration</outbound>
                <outbound type="feature" confirmed="yes">org.apache.abdera.util.Configuration.getConfigurationOption(java.lang.String, java.lang.String)</outbound>
                <outbound type="feature" confirmed="yes">org.apache.abdera.util.Discover.locate(java.lang.String, java.lang.String, java.lang.Object[])</outbound>
                <outbound type="class" confirmed="yes">org.apache.abdera.writer.StreamWriter</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.util.ServiceUtil.newWriterFactoryInstance(org.apache.abdera.Abdera)</name>
                <outbound type="class" confirmed="no">java.lang.Object</outbound>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="class" confirmed="yes">org.apache.abdera.Abdera</outbound>
                <outbound type="feature" confirmed="yes">org.apache.abdera.Abdera.getConfiguration()</outbound>
                <outbound type="class" confirmed="yes">org.apache.abdera.util.Configuration</outbound>
                <outbound type="feature" confirmed="yes">org.apache.abdera.util.Configuration.getConfigurationOption(java.lang.String, java.lang.String)</outbound>
                <outbound type="feature" confirmed="yes">org.apache.abdera.util.Discover.locate(java.lang.String, java.lang.String, java.lang.Object[])</outbound>
                <outbound type="class" confirmed="yes">org.apache.abdera.writer.WriterFactory</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.util.ServiceUtil.newWriterInstance(org.apache.abdera.Abdera)</name>
                <outbound type="class" confirmed="no">java.lang.Object</outbound>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="class" confirmed="yes">org.apache.abdera.Abdera</outbound>
                <outbound type="feature" confirmed="yes">org.apache.abdera.Abdera.getConfiguration()</outbound>
                <outbound type="class" confirmed="yes">org.apache.abdera.util.Configuration</outbound>
                <outbound type="feature" confirmed="yes">org.apache.abdera.util.Configuration.getConfigurationOption(java.lang.String, java.lang.String)</outbound>
                <outbound type="feature" confirmed="yes">org.apache.abdera.util.Discover.locate(java.lang.String, java.lang.String, java.lang.Object[])</outbound>
                <outbound type="class" confirmed="yes">org.apache.abdera.writer.Writer</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.util.ServiceUtil.newXPathInstance(org.apache.abdera.Abdera)</name>
                <outbound type="class" confirmed="no">java.lang.Object</outbound>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="class" confirmed="yes">org.apache.abdera.Abdera</outbound>
                <outbound type="feature" confirmed="yes">org.apache.abdera.Abdera.getConfiguration()</outbound>
                <outbound type="class" confirmed="yes">org.apache.abdera.util.Configuration</outbound>
                <outbound type="feature" confirmed="yes">org.apache.abdera.util.Configuration.getConfigurationOption(java.lang.String, java.lang.String)</outbound>
                <outbound type="feature" confirmed="yes">org.apache.abdera.util.Discover.locate(java.lang.String, java.lang.String, java.lang.Object[])</outbound>
                <outbound type="class" confirmed="yes">org.apache.abdera.xpath.XPath</outbound>
            </feature>
        </class>
        <class confirmed="yes">
            <name>org.apache.abdera.util.Version</name>
            <outbound type="class" confirmed="no">java.lang.Object</outbound>
            <feature confirmed="yes">
                <name>org.apache.abdera.util.Version.APP_NAME</name>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.util.Version.URI</name>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.util.Version.VERSION</name>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
            </feature>
        </class>
        <class confirmed="yes">
            <name>org.apache.abdera.util.XmlRestrictedCharReader</name>
            <outbound type="class" confirmed="no">org.apache.abdera.i18n.text.io.FilteredCharReader</outbound>
            <feature confirmed="yes">
                <name>org.apache.abdera.util.XmlRestrictedCharReader.XmlRestrictedCharReader(java.io.InputStream)</name>
                <outbound type="class" confirmed="no">java.io.InputStream</outbound>
                <outbound type="feature" confirmed="no">java.io.InputStreamReader.InputStreamReader(java.io.InputStream)</outbound>
                <outbound type="class" confirmed="no">java.io.Reader</outbound>
                <outbound type="feature" confirmed="yes">org.apache.abdera.util.XmlRestrictedCharReader.XmlRestrictedCharReader(java.io.Reader)</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.util.XmlRestrictedCharReader.XmlRestrictedCharReader(java.io.InputStream, char)</name>
                <outbound type="class" confirmed="no">java.io.InputStream</outbound>
                <outbound type="feature" confirmed="no">java.io.InputStreamReader.InputStreamReader(java.io.InputStream)</outbound>
                <outbound type="class" confirmed="no">java.io.Reader</outbound>
                <outbound type="feature" confirmed="yes">org.apache.abdera.util.XmlRestrictedCharReader.XmlRestrictedCharReader(java.io.Reader, char)</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.util.XmlRestrictedCharReader.XmlRestrictedCharReader(java.io.InputStream, java.lang.String)</name>
                <outbound type="class" confirmed="no">java.io.InputStream</outbound>
                <outbound type="feature" confirmed="no">java.io.InputStreamReader.InputStreamReader(java.io.InputStream, java.lang.String)</outbound>
                <outbound type="class" confirmed="no">java.io.Reader</outbound>
                <outbound type="class" confirmed="no">java.io.UnsupportedEncodingException</outbound>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="feature" confirmed="yes">org.apache.abdera.util.XmlRestrictedCharReader.XmlRestrictedCharReader(java.io.Reader)</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.util.XmlRestrictedCharReader.XmlRestrictedCharReader(java.io.InputStream, java.lang.String, char)</name>
                <outbound type="class" confirmed="no">java.io.InputStream</outbound>
                <outbound type="feature" confirmed="no">java.io.InputStreamReader.InputStreamReader(java.io.InputStream, java.lang.String)</outbound>
                <outbound type="class" confirmed="no">java.io.Reader</outbound>
                <outbound type="class" confirmed="no">java.io.UnsupportedEncodingException</outbound>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="feature" confirmed="yes">org.apache.abdera.util.XmlRestrictedCharReader.XmlRestrictedCharReader(java.io.Reader, char)</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.util.XmlRestrictedCharReader.XmlRestrictedCharReader(java.io.InputStream, java.lang.String, org.apache.abdera.util.XmlUtil$XMLVersion)</name>
                <outbound type="class" confirmed="no">java.io.InputStream</outbound>
                <outbound type="feature" confirmed="no">java.io.InputStreamReader.InputStreamReader(java.io.InputStream, java.lang.String)</outbound>
                <outbound type="class" confirmed="no">java.io.Reader</outbound>
                <outbound type="class" confirmed="no">java.io.UnsupportedEncodingException</outbound>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="feature" confirmed="yes">org.apache.abdera.util.XmlRestrictedCharReader.XmlRestrictedCharReader(java.io.Reader, org.apache.abdera.util.XmlUtil$XMLVersion)</outbound>
                <outbound type="class" confirmed="yes">org.apache.abdera.util.XmlUtil$XMLVersion</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.util.XmlRestrictedCharReader.XmlRestrictedCharReader(java.io.InputStream, java.lang.String, org.apache.abdera.util.XmlUtil$XMLVersion, char)</name>
                <outbound type="class" confirmed="no">java.io.InputStream</outbound>
                <outbound type="feature" confirmed="no">java.io.InputStreamReader.InputStreamReader(java.io.InputStream, java.lang.String)</outbound>
                <outbound type="class" confirmed="no">java.io.Reader</outbound>
                <outbound type="class" confirmed="no">java.io.UnsupportedEncodingException</outbound>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="feature" confirmed="yes">org.apache.abdera.util.XmlRestrictedCharReader.XmlRestrictedCharReader(java.io.Reader, org.apache.abdera.util.XmlUtil$XMLVersion, char)</outbound>
                <outbound type="class" confirmed="yes">org.apache.abdera.util.XmlUtil$XMLVersion</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.util.XmlRestrictedCharReader.XmlRestrictedCharReader(java.io.InputStream, org.apache.abdera.util.XmlUtil$XMLVersion)</name>
                <outbound type="class" confirmed="no">java.io.InputStream</outbound>
                <outbound type="feature" confirmed="no">java.io.InputStreamReader.InputStreamReader(java.io.InputStream)</outbound>
                <outbound type="class" confirmed="no">java.io.Reader</outbound>
                <outbound type="feature" confirmed="yes">org.apache.abdera.util.XmlRestrictedCharReader.XmlRestrictedCharReader(java.io.Reader, org.apache.abdera.util.XmlUtil$XMLVersion)</outbound>
                <outbound type="class" confirmed="yes">org.apache.abdera.util.XmlUtil$XMLVersion</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.util.XmlRestrictedCharReader.XmlRestrictedCharReader(java.io.InputStream, org.apache.abdera.util.XmlUtil$XMLVersion, char)</name>
                <outbound type="class" confirmed="no">java.io.InputStream</outbound>
                <outbound type="feature" confirmed="no">java.io.InputStreamReader.InputStreamReader(java.io.InputStream)</outbound>
                <outbound type="class" confirmed="no">java.io.Reader</outbound>
                <outbound type="feature" confirmed="yes">org.apache.abdera.util.XmlRestrictedCharReader.XmlRestrictedCharReader(java.io.Reader, org.apache.abdera.util.XmlUtil$XMLVersion, char)</outbound>
                <outbound type="class" confirmed="yes">org.apache.abdera.util.XmlUtil$XMLVersion</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.util.XmlRestrictedCharReader.XmlRestrictedCharReader(java.io.Reader)</name>
                <outbound type="class" confirmed="no">java.io.Reader</outbound>
                <outbound type="feature" confirmed="yes">org.apache.abdera.util.XmlRestrictedCharReader.XmlRestrictedCharReader(java.io.Reader, org.apache.abdera.util.XmlUtil$XMLVersion, char)</outbound>
                <outbound type="class" confirmed="yes">org.apache.abdera.util.XmlUtil$XMLVersion</outbound>
                <outbound type="feature" confirmed="yes">org.apache.abdera.util.XmlUtil$XMLVersion.XML10</outbound>
                <inbound type="feature" confirmed="yes">org.apache.abdera.util.XmlRestrictedCharReader.XmlRestrictedCharReader(java.io.InputStream)</inbound>
                <inbound type="feature" confirmed="yes">org.apache.abdera.util.XmlRestrictedCharReader.XmlRestrictedCharReader(java.io.InputStream, java.lang.String)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.util.XmlRestrictedCharReader.XmlRestrictedCharReader(java.io.Reader, char)</name>
                <outbound type="class" confirmed="no">java.io.Reader</outbound>
                <outbound type="feature" confirmed="yes">org.apache.abdera.util.XmlRestrictedCharReader.XmlRestrictedCharReader(java.io.Reader, org.apache.abdera.util.XmlUtil$XMLVersion, char)</outbound>
                <outbound type="class" confirmed="yes">org.apache.abdera.util.XmlUtil$XMLVersion</outbound>
                <outbound type="feature" confirmed="yes">org.apache.abdera.util.XmlUtil$XMLVersion.XML10</outbound>
                <inbound type="feature" confirmed="yes">org.apache.abdera.util.XmlRestrictedCharReader.XmlRestrictedCharReader(java.io.InputStream, char)</inbound>
                <inbound type="feature" confirmed="yes">org.apache.abdera.util.XmlRestrictedCharReader.XmlRestrictedCharReader(java.io.InputStream, java.lang.String, char)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.util.XmlRestrictedCharReader.XmlRestrictedCharReader(java.io.Reader, org.apache.abdera.util.XmlUtil$XMLVersion)</name>
                <outbound type="class" confirmed="no">java.io.Reader</outbound>
                <outbound type="feature" confirmed="yes">org.apache.abdera.util.XmlRestrictedCharReader.XmlRestrictedCharReader(java.io.Reader, org.apache.abdera.util.XmlUtil$XMLVersion, char)</outbound>
                <outbound type="class" confirmed="yes">org.apache.abdera.util.XmlUtil$XMLVersion</outbound>
                <inbound type="feature" confirmed="yes">org.apache.abdera.util.XmlRestrictedCharReader.XmlRestrictedCharReader(java.io.InputStream, java.lang.String, org.apache.abdera.util.XmlUtil$XMLVersion)</inbound>
                <inbound type="feature" confirmed="yes">org.apache.abdera.util.XmlRestrictedCharReader.XmlRestrictedCharReader(java.io.InputStream, org.apache.abdera.util.XmlUtil$XMLVersion)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.util.XmlRestrictedCharReader.XmlRestrictedCharReader(java.io.Reader, org.apache.abdera.util.XmlUtil$XMLVersion, char)</name>
                <outbound type="class" confirmed="no">java.io.Reader</outbound>
                <outbound type="class" confirmed="no">org.apache.abdera.i18n.text.Filter</outbound>
                <outbound type="feature" confirmed="no">org.apache.abdera.i18n.text.io.FilteredCharReader.FilteredCharReader(java.io.Reader, org.apache.abdera.i18n.text.Filter, char)</outbound>
                <outbound type="class" confirmed="yes">org.apache.abdera.util.XmlUtil$XMLVersion</outbound>
                <outbound type="feature" confirmed="yes">org.apache.abdera.util.XmlUtil$XMLVersion.filter()</outbound>
                <inbound type="feature" confirmed="yes">org.apache.abdera.util.XmlRestrictedCharReader.XmlRestrictedCharReader(java.io.InputStream, java.lang.String, org.apache.abdera.util.XmlUtil$XMLVersion, char)</inbound>
                <inbound type="feature" confirmed="yes">org.apache.abdera.util.XmlRestrictedCharReader.XmlRestrictedCharReader(java.io.InputStream, org.apache.abdera.util.XmlUtil$XMLVersion, char)</inbound>
                <inbound type="feature" confirmed="yes">org.apache.abdera.util.XmlRestrictedCharReader.XmlRestrictedCharReader(java.io.Reader)</inbound>
                <inbound type="feature" confirmed="yes">org.apache.abdera.util.XmlRestrictedCharReader.XmlRestrictedCharReader(java.io.Reader, char)</inbound>
                <inbound type="feature" confirmed="yes">org.apache.abdera.util.XmlRestrictedCharReader.XmlRestrictedCharReader(java.io.Reader, org.apache.abdera.util.XmlUtil$XMLVersion)</inbound>
            </feature>
        </class>
        <class confirmed="yes">
            <name>org.apache.abdera.util.XmlUtil</name>
            <outbound type="class" confirmed="no">java.lang.Object</outbound>
            <feature confirmed="yes">
                <name>org.apache.abdera.util.XmlUtil.RESTRICTED_SET_v1</name>
                <inbound type="feature" confirmed="yes">org.apache.abdera.util.XmlUtil.restricted(org.apache.abdera.util.XmlUtil$XMLVersion, int)</inbound>
                <inbound type="feature" confirmed="yes">org.apache.abdera.util.XmlUtil.static {}</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.util.XmlUtil.RESTRICTED_SET_v11</name>
                <inbound type="feature" confirmed="yes">org.apache.abdera.util.XmlUtil.restricted(org.apache.abdera.util.XmlUtil$XMLVersion, int)</inbound>
                <inbound type="feature" confirmed="yes">org.apache.abdera.util.XmlUtil.static {}</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.util.XmlUtil.XmlUtil()</name>
                <outbound type="feature" confirmed="no">java.lang.Object.Object()</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.util.XmlUtil.getVersion(java.lang.String)</name>
                <outbound type="class" confirmed="no">java.lang.Object</outbound>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="feature" confirmed="no">java.lang.String.equals(java.lang.Object)</outbound>
                <outbound type="class" confirmed="yes">org.apache.abdera.util.XmlUtil$XMLVersion</outbound>
                <outbound type="feature" confirmed="yes">org.apache.abdera.util.XmlUtil$XMLVersion.XML10</outbound>
                <outbound type="feature" confirmed="yes">org.apache.abdera.util.XmlUtil$XMLVersion.XML11</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.util.XmlUtil.restricted(org.apache.abdera.util.XmlUtil$XMLVersion, char)</name>
                <outbound type="class" confirmed="yes">org.apache.abdera.util.XmlUtil$XMLVersion</outbound>
                <outbound type="feature" confirmed="yes">org.apache.abdera.util.XmlUtil.restricted(org.apache.abdera.util.XmlUtil$XMLVersion, int)</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.util.XmlUtil.restricted(org.apache.abdera.util.XmlUtil$XMLVersion, int)</name>
                <outbound type="feature" confirmed="no">org.apache.abdera.i18n.text.CharUtils.invset_contains(int[], int)</outbound>
                <outbound type="class" confirmed="yes">org.apache.abdera.util.XmlUtil$XMLVersion</outbound>
                <outbound type="feature" confirmed="yes">org.apache.abdera.util.XmlUtil$XMLVersion.XML10</outbound>
                <outbound type="feature" confirmed="yes">org.apache.abdera.util.XmlUtil.RESTRICTED_SET_v1</outbound>
                <outbound type="feature" confirmed="yes">org.apache.abdera.util.XmlUtil.RESTRICTED_SET_v11</outbound>
                <inbound type="feature" confirmed="yes">org.apache.abdera.util.XmlUtil$XmlFilter.accept(int)</inbound>
                <inbound type="feature" confirmed="yes">org.apache.abdera.util.XmlUtil.restricted(org.apache.abdera.util.XmlUtil$XMLVersion, char)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.util.XmlUtil.static {}</name>
                <outbound type="feature" confirmed="yes">org.apache.abdera.util.XmlUtil.RESTRICTED_SET_v1</outbound>
                <outbound type="feature" confirmed="yes">org.apache.abdera.util.XmlUtil.RESTRICTED_SET_v11</outbound>
            </feature>
        </class>
        <class confirmed="yes">
            <name>org.apache.abdera.util.XmlUtil$XMLVersion</name>
            <outbound type="class" confirmed="no">java.lang.Enum</outbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.model.Document.getXmlVersion()</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.util.XmlRestrictedCharReader.XmlRestrictedCharReader(java.io.InputStream, java.lang.String, org.apache.abdera.util.XmlUtil$XMLVersion)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.util.XmlRestrictedCharReader.XmlRestrictedCharReader(java.io.InputStream, java.lang.String, org.apache.abdera.util.XmlUtil$XMLVersion, char)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.util.XmlRestrictedCharReader.XmlRestrictedCharReader(java.io.InputStream, org.apache.abdera.util.XmlUtil$XMLVersion)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.util.XmlRestrictedCharReader.XmlRestrictedCharReader(java.io.InputStream, org.apache.abdera.util.XmlUtil$XMLVersion, char)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.util.XmlRestrictedCharReader.XmlRestrictedCharReader(java.io.Reader)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.util.XmlRestrictedCharReader.XmlRestrictedCharReader(java.io.Reader, char)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.util.XmlRestrictedCharReader.XmlRestrictedCharReader(java.io.Reader, org.apache.abdera.util.XmlUtil$XMLVersion)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.util.XmlRestrictedCharReader.XmlRestrictedCharReader(java.io.Reader, org.apache.abdera.util.XmlUtil$XMLVersion, char)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.util.XmlUtil$XmlFilter.XmlUtil$XmlFilter(org.apache.abdera.util.XmlUtil$XMLVersion)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.util.XmlUtil$XmlFilter.accept(int)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.util.XmlUtil$XmlFilter.version</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.util.XmlUtil.getVersion(java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.util.XmlUtil.restricted(org.apache.abdera.util.XmlUtil$XMLVersion, char)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.util.XmlUtil.restricted(org.apache.abdera.util.XmlUtil$XMLVersion, int)</inbound>
            <feature confirmed="yes">
                <name>org.apache.abdera.util.XmlUtil$XMLVersion.$VALUES</name>
                <inbound type="feature" confirmed="yes">org.apache.abdera.util.XmlUtil$XMLVersion.static {}</inbound>
                <inbound type="feature" confirmed="yes">org.apache.abdera.util.XmlUtil$XMLVersion.values()</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.util.XmlUtil$XMLVersion.XML10</name>
                <inbound type="feature" confirmed="yes">org.apache.abdera.util.XmlRestrictedCharReader.XmlRestrictedCharReader(java.io.Reader)</inbound>
                <inbound type="feature" confirmed="yes">org.apache.abdera.util.XmlRestrictedCharReader.XmlRestrictedCharReader(java.io.Reader, char)</inbound>
                <inbound type="feature" confirmed="yes">org.apache.abdera.util.XmlUtil$XMLVersion.static {}</inbound>
                <inbound type="feature" confirmed="yes">org.apache.abdera.util.XmlUtil.getVersion(java.lang.String)</inbound>
                <inbound type="feature" confirmed="yes">org.apache.abdera.util.XmlUtil.restricted(org.apache.abdera.util.XmlUtil$XMLVersion, int)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.util.XmlUtil$XMLVersion.XML11</name>
                <inbound type="feature" confirmed="yes">org.apache.abdera.util.XmlUtil$XMLVersion.static {}</inbound>
                <inbound type="feature" confirmed="yes">org.apache.abdera.util.XmlUtil.getVersion(java.lang.String)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.util.XmlUtil$XMLVersion.XmlUtil$XMLVersion(java.lang.String, int)</name>
                <outbound type="feature" confirmed="no">java.lang.Enum.Enum(java.lang.String, int)</outbound>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="class" confirmed="no">org.apache.abdera.i18n.text.Filter</outbound>
                <outbound type="feature" confirmed="yes">org.apache.abdera.util.XmlUtil$XMLVersion.filter</outbound>
                <outbound type="feature" confirmed="yes">org.apache.abdera.util.XmlUtil$XmlFilter.XmlUtil$XmlFilter(org.apache.abdera.util.XmlUtil$XMLVersion)</outbound>
                <inbound type="feature" confirmed="yes">org.apache.abdera.util.XmlUtil$XMLVersion.static {}</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.util.XmlUtil$XMLVersion.filter</name>
                <outbound type="class" confirmed="no">org.apache.abdera.i18n.text.Filter</outbound>
                <inbound type="feature" confirmed="yes">org.apache.abdera.util.XmlUtil$XMLVersion.XmlUtil$XMLVersion(java.lang.String, int)</inbound>
                <inbound type="feature" confirmed="yes">org.apache.abdera.util.XmlUtil$XMLVersion.filter()</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.util.XmlUtil$XMLVersion.filter()</name>
                <outbound type="class" confirmed="no">org.apache.abdera.i18n.text.Filter</outbound>
                <outbound type="feature" confirmed="yes">org.apache.abdera.util.XmlUtil$XMLVersion.filter</outbound>
                <inbound type="feature" confirmed="yes">org.apache.abdera.util.XmlRestrictedCharReader.XmlRestrictedCharReader(java.io.Reader, org.apache.abdera.util.XmlUtil$XMLVersion, char)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.util.XmlUtil$XMLVersion.static {}</name>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="feature" confirmed="yes">org.apache.abdera.util.XmlUtil$XMLVersion.$VALUES</outbound>
                <outbound type="feature" confirmed="yes">org.apache.abdera.util.XmlUtil$XMLVersion.XML10</outbound>
                <outbound type="feature" confirmed="yes">org.apache.abdera.util.XmlUtil$XMLVersion.XML11</outbound>
                <outbound type="feature" confirmed="yes">org.apache.abdera.util.XmlUtil$XMLVersion.XmlUtil$XMLVersion(java.lang.String, int)</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.util.XmlUtil$XMLVersion.valueOf(java.lang.String)</name>
                <outbound type="class" confirmed="no">java.lang.Class</outbound>
                <outbound type="class" confirmed="no">java.lang.Enum</outbound>
                <outbound type="feature" confirmed="no">java.lang.Enum.valueOf(java.lang.Class, java.lang.String)</outbound>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.util.XmlUtil$XMLVersion.values()</name>
                <outbound type="class" confirmed="no">java.lang.Object</outbound>
                <outbound type="feature" confirmed="yes">org.apache.abdera.util.XmlUtil$XMLVersion.$VALUES</outbound>
                <outbound type="class" confirmed="no">org.apache.abdera.util.XmlUtil$XMLVersion[]</outbound>
                <outbound type="feature" confirmed="no">org.apache.abdera.util.XmlUtil$XMLVersion[].clone()</outbound>
            </feature>
        </class>
        <class confirmed="no">
            <name>org.apache.abdera.util.XmlUtil$XMLVersion[]</name>
            <inbound type="feature" confirmed="yes">org.apache.abdera.util.XmlUtil$XMLVersion.values()</inbound>
            <feature confirmed="no">
                <name>org.apache.abdera.util.XmlUtil$XMLVersion[].clone()</name>
                <inbound type="feature" confirmed="yes">org.apache.abdera.util.XmlUtil$XMLVersion.values()</inbound>
            </feature>
        </class>
        <class confirmed="yes">
            <name>org.apache.abdera.util.XmlUtil$XmlFilter</name>
            <outbound type="class" confirmed="no">java.lang.Object</outbound>
            <outbound type="class" confirmed="no">org.apache.abdera.i18n.text.Filter</outbound>
            <feature confirmed="yes">
                <name>org.apache.abdera.util.XmlUtil$XmlFilter.XmlUtil$XmlFilter(org.apache.abdera.util.XmlUtil$XMLVersion)</name>
                <outbound type="feature" confirmed="no">java.lang.Object.Object()</outbound>
                <outbound type="class" confirmed="yes">org.apache.abdera.util.XmlUtil$XMLVersion</outbound>
                <outbound type="feature" confirmed="yes">org.apache.abdera.util.XmlUtil$XmlFilter.version</outbound>
                <inbound type="feature" confirmed="yes">org.apache.abdera.util.XmlUtil$XMLVersion.XmlUtil$XMLVersion(java.lang.String, int)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.util.XmlUtil$XmlFilter.accept(int)</name>
                <outbound type="class" confirmed="yes">org.apache.abdera.util.XmlUtil$XMLVersion</outbound>
                <outbound type="feature" confirmed="yes">org.apache.abdera.util.XmlUtil$XmlFilter.version</outbound>
                <outbound type="feature" confirmed="yes">org.apache.abdera.util.XmlUtil.restricted(org.apache.abdera.util.XmlUtil$XMLVersion, int)</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.util.XmlUtil$XmlFilter.version</name>
                <outbound type="class" confirmed="yes">org.apache.abdera.util.XmlUtil$XMLVersion</outbound>
                <inbound type="feature" confirmed="yes">org.apache.abdera.util.XmlUtil$XmlFilter.XmlUtil$XmlFilter(org.apache.abdera.util.XmlUtil$XMLVersion)</inbound>
                <inbound type="feature" confirmed="yes">org.apache.abdera.util.XmlUtil$XmlFilter.accept(int)</inbound>
            </feature>
        </class>
    </package>
    <package confirmed="yes">
        <name>org.apache.abdera.util.filter</name>
        <class confirmed="yes">
            <name>org.apache.abdera.util.filter.AbstractListParseFilter</name>
            <outbound type="class" confirmed="no">java.lang.Cloneable</outbound>
            <outbound type="class" confirmed="yes">org.apache.abdera.filter.ListParseFilter</outbound>
            <outbound type="class" confirmed="yes">org.apache.abdera.util.filter.AbstractParseFilter</outbound>
            <inbound type="class" confirmed="yes">org.apache.abdera.util.filter.BlackListParseFilter</inbound>
            <inbound type="class" confirmed="yes">org.apache.abdera.util.filter.WhiteListParseFilter</inbound>
            <feature confirmed="yes">
                <name>org.apache.abdera.util.filter.AbstractListParseFilter.$assertionsDisabled</name>
                <inbound type="feature" confirmed="yes">org.apache.abdera.util.filter.AbstractListParseFilter.static {}</inbound>
                <inbound type="feature" confirmed="yes">org.apache.abdera.util.filter.AbstractListParseFilter.writeObject(java.io.ObjectOutputStream)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.util.filter.AbstractListParseFilter.AbstractListParseFilter()</name>
                <outbound type="feature" confirmed="no">java.util.ArrayList.ArrayList()</outbound>
                <outbound type="feature" confirmed="no">java.util.HashMap.HashMap()</outbound>
                <outbound type="class" confirmed="no">java.util.List</outbound>
                <outbound type="class" confirmed="no">java.util.Map</outbound>
                <outbound type="feature" confirmed="yes">org.apache.abdera.util.filter.AbstractListParseFilter.attributes</outbound>
                <outbound type="feature" confirmed="yes">org.apache.abdera.util.filter.AbstractListParseFilter.qnames</outbound>
                <outbound type="feature" confirmed="yes">org.apache.abdera.util.filter.AbstractParseFilter.AbstractParseFilter()</outbound>
                <inbound type="feature" confirmed="yes">org.apache.abdera.util.filter.BlackListParseFilter.BlackListParseFilter()</inbound>
                <inbound type="feature" confirmed="yes">org.apache.abdera.util.filter.WhiteListParseFilter.WhiteListParseFilter(boolean)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.util.filter.AbstractListParseFilter.acceptable(javax.xml.namespace.QName)</name>
                <outbound type="class" confirmed="no">javax.xml.namespace.QName</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.util.filter.AbstractListParseFilter.acceptable(javax.xml.namespace.QName, javax.xml.namespace.QName)</name>
                <outbound type="class" confirmed="no">javax.xml.namespace.QName</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.util.filter.AbstractListParseFilter.add(javax.xml.namespace.QName)</name>
                <outbound type="class" confirmed="no">java.lang.Object</outbound>
                <outbound type="class" confirmed="no">java.util.List</outbound>
                <outbound type="feature" confirmed="no">java.util.List.add(java.lang.Object)</outbound>
                <outbound type="class" confirmed="no">javax.xml.namespace.QName</outbound>
                <outbound type="class" confirmed="yes">org.apache.abdera.filter.ListParseFilter</outbound>
                <outbound type="feature" confirmed="yes">org.apache.abdera.util.filter.AbstractListParseFilter.contains(javax.xml.namespace.QName)</outbound>
                <outbound type="feature" confirmed="yes">org.apache.abdera.util.filter.AbstractListParseFilter.qnames</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.util.filter.AbstractListParseFilter.add(javax.xml.namespace.QName, javax.xml.namespace.QName)</name>
                <outbound type="class" confirmed="no">java.lang.Object</outbound>
                <outbound type="feature" confirmed="no">java.util.ArrayList.ArrayList()</outbound>
                <outbound type="class" confirmed="no">java.util.List</outbound>
                <outbound type="feature" confirmed="no">java.util.List.add(java.lang.Object)</outbound>
                <outbound type="feature" confirmed="no">java.util.List.contains(java.lang.Object)</outbound>
                <outbound type="class" confirmed="no">java.util.Map</outbound>
                <outbound type="feature" confirmed="no">java.util.Map.containsKey(java.lang.Object)</outbound>
                <outbound type="feature" confirmed="no">java.util.Map.get(java.lang.Object)</outbound>
                <outbound type="feature" confirmed="no">java.util.Map.put(java.lang.Object, java.lang.Object)</outbound>
                <outbound type="class" confirmed="no">javax.xml.namespace.QName</outbound>
                <outbound type="class" confirmed="yes">org.apache.abdera.filter.ListParseFilter</outbound>
                <outbound type="feature" confirmed="yes">org.apache.abdera.util.filter.AbstractListParseFilter.attributes</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.util.filter.AbstractListParseFilter.attributes</name>
                <outbound type="class" confirmed="no">java.util.Map</outbound>
                <inbound type="feature" confirmed="yes">org.apache.abdera.util.filter.AbstractListParseFilter.AbstractListParseFilter()</inbound>
                <inbound type="feature" confirmed="yes">org.apache.abdera.util.filter.AbstractListParseFilter.add(javax.xml.namespace.QName, javax.xml.namespace.QName)</inbound>
                <inbound type="feature" confirmed="yes">org.apache.abdera.util.filter.AbstractListParseFilter.contains(javax.xml.namespace.QName, javax.xml.namespace.QName)</inbound>
                <inbound type="feature" confirmed="yes">org.apache.abdera.util.filter.AbstractListParseFilter.readObject(java.io.ObjectInputStream)</inbound>
                <inbound type="feature" confirmed="yes">org.apache.abdera.util.filter.AbstractListParseFilter.writeObject(java.io.ObjectOutputStream)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.util.filter.AbstractListParseFilter.clone()</name>
                <outbound type="class" confirmed="no">java.lang.CloneNotSupportedException</outbound>
                <outbound type="class" confirmed="no">java.lang.Object</outbound>
                <outbound type="feature" confirmed="yes">org.apache.abdera.util.filter.AbstractParseFilter.clone()</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.util.filter.AbstractListParseFilter.contains(javax.xml.namespace.QName)</name>
                <outbound type="class" confirmed="no">java.lang.Object</outbound>
                <outbound type="class" confirmed="no">java.util.List</outbound>
                <outbound type="feature" confirmed="no">java.util.List.contains(java.lang.Object)</outbound>
                <outbound type="class" confirmed="no">javax.xml.namespace.QName</outbound>
                <outbound type="feature" confirmed="yes">org.apache.abdera.util.filter.AbstractListParseFilter.qnames</outbound>
                <inbound type="feature" confirmed="yes">org.apache.abdera.util.filter.AbstractListParseFilter.add(javax.xml.namespace.QName)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.util.filter.AbstractListParseFilter.contains(javax.xml.namespace.QName, javax.xml.namespace.QName)</name>
                <outbound type="class" confirmed="no">java.lang.Object</outbound>
                <outbound type="class" confirmed="no">java.util.List</outbound>
                <outbound type="feature" confirmed="no">java.util.List.contains(java.lang.Object)</outbound>
                <outbound type="class" confirmed="no">java.util.Map</outbound>
                <outbound type="feature" confirmed="no">java.util.Map.containsKey(java.lang.Object)</outbound>
                <outbound type="feature" confirmed="no">java.util.Map.get(java.lang.Object)</outbound>
                <outbound type="class" confirmed="no">javax.xml.namespace.QName</outbound>
                <outbound type="feature" confirmed="yes">org.apache.abdera.util.filter.AbstractListParseFilter.attributes</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.util.filter.AbstractListParseFilter.qnames</name>
                <outbound type="class" confirmed="no">java.util.List</outbound>
                <inbound type="feature" confirmed="yes">org.apache.abdera.util.filter.AbstractListParseFilter.AbstractListParseFilter()</inbound>
                <inbound type="feature" confirmed="yes">org.apache.abdera.util.filter.AbstractListParseFilter.add(javax.xml.namespace.QName)</inbound>
                <inbound type="feature" confirmed="yes">org.apache.abdera.util.filter.AbstractListParseFilter.contains(javax.xml.namespace.QName)</inbound>
                <inbound type="feature" confirmed="yes">org.apache.abdera.util.filter.AbstractListParseFilter.readObject(java.io.ObjectInputStream)</inbound>
                <inbound type="feature" confirmed="yes">org.apache.abdera.util.filter.AbstractListParseFilter.writeObject(java.io.ObjectOutputStream)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.util.filter.AbstractListParseFilter.readObject(java.io.ObjectInputStream)</name>
                <outbound type="class" confirmed="no">java.io.IOException</outbound>
                <outbound type="class" confirmed="no">java.io.ObjectInputStream</outbound>
                <outbound type="feature" confirmed="no">java.io.ObjectInputStream.defaultReadObject()</outbound>
                <outbound type="feature" confirmed="no">java.io.ObjectInputStream.readInt()</outbound>
                <outbound type="feature" confirmed="no">java.io.ObjectInputStream.readObject()</outbound>
                <outbound type="class" confirmed="no">java.lang.ClassNotFoundException</outbound>
                <outbound type="class" confirmed="no">java.lang.Object</outbound>
                <outbound type="feature" confirmed="no">java.util.ArrayList.ArrayList(int)</outbound>
                <outbound type="feature" confirmed="no">java.util.HashMap.HashMap(int)</outbound>
                <outbound type="class" confirmed="no">java.util.List</outbound>
                <outbound type="feature" confirmed="no">java.util.List.add(java.lang.Object)</outbound>
                <outbound type="class" confirmed="no">java.util.Map</outbound>
                <outbound type="feature" confirmed="no">java.util.Map.put(java.lang.Object, java.lang.Object)</outbound>
                <outbound type="class" confirmed="no">javax.xml.namespace.QName</outbound>
                <outbound type="feature" confirmed="yes">org.apache.abdera.util.filter.AbstractListParseFilter.attributes</outbound>
                <outbound type="feature" confirmed="yes">org.apache.abdera.util.filter.AbstractListParseFilter.qnames</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.util.filter.AbstractListParseFilter.serialVersionUID</name>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.util.filter.AbstractListParseFilter.static {}</name>
                <outbound type="feature" confirmed="no">java.lang.Class.desiredAssertionStatus()</outbound>
                <outbound type="feature" confirmed="yes">org.apache.abdera.util.filter.AbstractListParseFilter.$assertionsDisabled</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.util.filter.AbstractListParseFilter.writeObject(java.io.ObjectOutputStream)</name>
                <outbound type="class" confirmed="no">java.io.IOException</outbound>
                <outbound type="class" confirmed="no">java.io.ObjectOutputStream</outbound>
                <outbound type="feature" confirmed="no">java.io.ObjectOutputStream.defaultWriteObject()</outbound>
                <outbound type="feature" confirmed="no">java.io.ObjectOutputStream.writeInt(int)</outbound>
                <outbound type="feature" confirmed="no">java.io.ObjectOutputStream.writeObject(java.lang.Object)</outbound>
                <outbound type="feature" confirmed="no">java.lang.AssertionError.AssertionError()</outbound>
                <outbound type="class" confirmed="no">java.lang.Object</outbound>
                <outbound type="class" confirmed="no">java.util.Iterator</outbound>
                <outbound type="feature" confirmed="no">java.util.Iterator.hasNext()</outbound>
                <outbound type="feature" confirmed="no">java.util.Iterator.next()</outbound>
                <outbound type="class" confirmed="no">java.util.List</outbound>
                <outbound type="feature" confirmed="no">java.util.List.iterator()</outbound>
                <outbound type="feature" confirmed="no">java.util.List.size()</outbound>
                <outbound type="class" confirmed="no">java.util.Map</outbound>
                <outbound type="class" confirmed="no">java.util.Map$Entry</outbound>
                <outbound type="feature" confirmed="no">java.util.Map$Entry.getKey()</outbound>
                <outbound type="feature" confirmed="no">java.util.Map$Entry.getValue()</outbound>
                <outbound type="feature" confirmed="no">java.util.Map.entrySet()</outbound>
                <outbound type="feature" confirmed="no">java.util.Map.size()</outbound>
                <outbound type="class" confirmed="no">java.util.Set</outbound>
                <outbound type="feature" confirmed="no">java.util.Set.iterator()</outbound>
                <outbound type="class" confirmed="no">javax.xml.namespace.QName</outbound>
                <outbound type="feature" confirmed="yes">org.apache.abdera.util.filter.AbstractListParseFilter.$assertionsDisabled</outbound>
                <outbound type="feature" confirmed="yes">org.apache.abdera.util.filter.AbstractListParseFilter.attributes</outbound>
                <outbound type="feature" confirmed="yes">org.apache.abdera.util.filter.AbstractListParseFilter.qnames</outbound>
            </feature>
        </class>
        <class confirmed="yes">
            <name>org.apache.abdera.util.filter.AbstractParseFilter</name>
            <outbound type="class" confirmed="no">java.lang.Object</outbound>
            <outbound type="class" confirmed="yes">org.apache.abdera.filter.ParseFilter</outbound>
            <inbound type="class" confirmed="yes">org.apache.abdera.util.filter.AbstractListParseFilter</inbound>
            <inbound type="class" confirmed="yes">org.apache.abdera.util.filter.CompoundParseFilter</inbound>
            <inbound type="class" confirmed="yes">org.apache.abdera.util.filter.NonOpParseFilter</inbound>
            <inbound type="class" confirmed="yes">org.apache.abdera.util.filter.SafeContentWhiteListParseFilter</inbound>
            <feature confirmed="yes">
                <name>org.apache.abdera.util.filter.AbstractParseFilter.AbstractParseFilter()</name>
                <outbound type="feature" confirmed="no">java.lang.Object.Object()</outbound>
                <outbound type="feature" confirmed="yes">org.apache.abdera.util.filter.AbstractParseFilter.flags</outbound>
                <inbound type="feature" confirmed="yes">org.apache.abdera.util.filter.AbstractListParseFilter.AbstractListParseFilter()</inbound>
                <inbound type="feature" confirmed="yes">org.apache.abdera.util.filter.CompoundParseFilter.CompoundParseFilter(org.apache.abdera.util.filter.CompoundParseFilter$Condition, org.apache.abdera.filter.ParseFilter[])</inbound>
                <inbound type="feature" confirmed="yes">org.apache.abdera.util.filter.NonOpParseFilter.NonOpParseFilter()</inbound>
                <inbound type="feature" confirmed="yes">org.apache.abdera.util.filter.SafeContentWhiteListParseFilter.SafeContentWhiteListParseFilter()</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.util.filter.AbstractParseFilter.COMMENTS</name>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.util.filter.AbstractParseFilter.PI</name>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.util.filter.AbstractParseFilter.WHITESPACE</name>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.util.filter.AbstractParseFilter.check(byte)</name>
                <outbound type="feature" confirmed="yes">org.apache.abdera.util.filter.AbstractParseFilter.flags</outbound>
                <inbound type="feature" confirmed="yes">org.apache.abdera.util.filter.AbstractParseFilter.getIgnoreComments()</inbound>
                <inbound type="feature" confirmed="yes">org.apache.abdera.util.filter.AbstractParseFilter.getIgnoreProcessingInstructions()</inbound>
                <inbound type="feature" confirmed="yes">org.apache.abdera.util.filter.AbstractParseFilter.getIgnoreWhitespace()</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.util.filter.AbstractParseFilter.clone()</name>
                <outbound type="class" confirmed="no">java.lang.CloneNotSupportedException</outbound>
                <outbound type="class" confirmed="no">java.lang.Object</outbound>
                <outbound type="feature" confirmed="no">java.lang.Object.clone()</outbound>
                <inbound type="feature" confirmed="yes">org.apache.abdera.util.filter.AbstractListParseFilter.clone()</inbound>
                <inbound type="feature" confirmed="yes">org.apache.abdera.util.filter.CompoundParseFilter.clone()</inbound>
                <inbound type="feature" confirmed="yes">org.apache.abdera.util.filter.SafeContentWhiteListParseFilter.clone()</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.util.filter.AbstractParseFilter.flags</name>
                <inbound type="feature" confirmed="yes">org.apache.abdera.util.filter.AbstractParseFilter.AbstractParseFilter()</inbound>
                <inbound type="feature" confirmed="yes">org.apache.abdera.util.filter.AbstractParseFilter.check(byte)</inbound>
                <inbound type="feature" confirmed="yes">org.apache.abdera.util.filter.AbstractParseFilter.toggle(boolean, byte)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.util.filter.AbstractParseFilter.getIgnoreComments()</name>
                <outbound type="feature" confirmed="yes">org.apache.abdera.util.filter.AbstractParseFilter.check(byte)</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.util.filter.AbstractParseFilter.getIgnoreProcessingInstructions()</name>
                <outbound type="feature" confirmed="yes">org.apache.abdera.util.filter.AbstractParseFilter.check(byte)</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.util.filter.AbstractParseFilter.getIgnoreWhitespace()</name>
                <outbound type="feature" confirmed="yes">org.apache.abdera.util.filter.AbstractParseFilter.check(byte)</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.util.filter.AbstractParseFilter.serialVersionUID</name>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.util.filter.AbstractParseFilter.setIgnoreComments(boolean)</name>
                <outbound type="class" confirmed="yes">org.apache.abdera.filter.ParseFilter</outbound>
                <outbound type="feature" confirmed="yes">org.apache.abdera.util.filter.AbstractParseFilter.toggle(boolean, byte)</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.util.filter.AbstractParseFilter.setIgnoreProcessingInstructions(boolean)</name>
                <outbound type="class" confirmed="yes">org.apache.abdera.filter.ParseFilter</outbound>
                <outbound type="feature" confirmed="yes">org.apache.abdera.util.filter.AbstractParseFilter.toggle(boolean, byte)</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.util.filter.AbstractParseFilter.setIgnoreWhitespace(boolean)</name>
                <outbound type="class" confirmed="yes">org.apache.abdera.filter.ParseFilter</outbound>
                <outbound type="feature" confirmed="yes">org.apache.abdera.util.filter.AbstractParseFilter.toggle(boolean, byte)</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.util.filter.AbstractParseFilter.toggle(boolean, byte)</name>
                <outbound type="feature" confirmed="yes">org.apache.abdera.util.filter.AbstractParseFilter.flags</outbound>
                <inbound type="feature" confirmed="yes">org.apache.abdera.util.filter.AbstractParseFilter.setIgnoreComments(boolean)</inbound>
                <inbound type="feature" confirmed="yes">org.apache.abdera.util.filter.AbstractParseFilter.setIgnoreProcessingInstructions(boolean)</inbound>
                <inbound type="feature" confirmed="yes">org.apache.abdera.util.filter.AbstractParseFilter.setIgnoreWhitespace(boolean)</inbound>
            </feature>
        </class>
        <class confirmed="yes">
            <name>org.apache.abdera.util.filter.BlackListParseFilter</name>
            <outbound type="class" confirmed="yes">org.apache.abdera.util.filter.AbstractListParseFilter</outbound>
            <feature confirmed="yes">
                <name>org.apache.abdera.util.filter.BlackListParseFilter.BlackListParseFilter()</name>
                <outbound type="feature" confirmed="yes">org.apache.abdera.util.filter.AbstractListParseFilter.AbstractListParseFilter()</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.util.filter.BlackListParseFilter.acceptable(javax.xml.namespace.QName)</name>
                <outbound type="class" confirmed="no">javax.xml.namespace.QName</outbound>
                <outbound type="feature" confirmed="no">org.apache.abdera.util.filter.BlackListParseFilter.contains(javax.xml.namespace.QName)</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.util.filter.BlackListParseFilter.acceptable(javax.xml.namespace.QName, javax.xml.namespace.QName)</name>
                <outbound type="class" confirmed="no">javax.xml.namespace.QName</outbound>
                <outbound type="feature" confirmed="no">org.apache.abdera.util.filter.BlackListParseFilter.contains(javax.xml.namespace.QName, javax.xml.namespace.QName)</outbound>
            </feature>
            <feature confirmed="no">
                <name>org.apache.abdera.util.filter.BlackListParseFilter.contains(javax.xml.namespace.QName)</name>
                <inbound type="feature" confirmed="yes">org.apache.abdera.util.filter.BlackListParseFilter.acceptable(javax.xml.namespace.QName)</inbound>
            </feature>
            <feature confirmed="no">
                <name>org.apache.abdera.util.filter.BlackListParseFilter.contains(javax.xml.namespace.QName, javax.xml.namespace.QName)</name>
                <inbound type="feature" confirmed="yes">org.apache.abdera.util.filter.BlackListParseFilter.acceptable(javax.xml.namespace.QName, javax.xml.namespace.QName)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.util.filter.BlackListParseFilter.serialVersionUID</name>
            </feature>
        </class>
        <class confirmed="yes">
            <name>org.apache.abdera.util.filter.CompoundParseFilter</name>
            <outbound type="class" confirmed="yes">org.apache.abdera.filter.ParseFilter</outbound>
            <outbound type="class" confirmed="yes">org.apache.abdera.util.filter.AbstractParseFilter</outbound>
            <feature confirmed="yes">
                <name>org.apache.abdera.util.filter.CompoundParseFilter.CompoundParseFilter(org.apache.abdera.filter.ParseFilter[])</name>
                <outbound type="class" confirmed="yes">org.apache.abdera.filter.ParseFilter</outbound>
                <outbound type="class" confirmed="yes">org.apache.abdera.util.filter.CompoundParseFilter$Condition</outbound>
                <outbound type="feature" confirmed="yes">org.apache.abdera.util.filter.CompoundParseFilter$Condition.ACCEPTABLE_TO_ANY</outbound>
                <outbound type="feature" confirmed="yes">org.apache.abdera.util.filter.CompoundParseFilter.CompoundParseFilter(org.apache.abdera.util.filter.CompoundParseFilter$Condition, org.apache.abdera.filter.ParseFilter[])</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.util.filter.CompoundParseFilter.CompoundParseFilter(org.apache.abdera.util.filter.CompoundParseFilter$Condition, org.apache.abdera.filter.ParseFilter[])</name>
                <outbound type="class" confirmed="yes">org.apache.abdera.filter.ParseFilter</outbound>
                <outbound type="feature" confirmed="yes">org.apache.abdera.util.filter.AbstractParseFilter.AbstractParseFilter()</outbound>
                <outbound type="class" confirmed="yes">org.apache.abdera.util.filter.CompoundParseFilter$Condition</outbound>
                <outbound type="feature" confirmed="yes">org.apache.abdera.util.filter.CompoundParseFilter.condition</outbound>
                <outbound type="feature" confirmed="yes">org.apache.abdera.util.filter.CompoundParseFilter.filters</outbound>
                <inbound type="feature" confirmed="yes">org.apache.abdera.util.filter.CompoundParseFilter.CompoundParseFilter(org.apache.abdera.filter.ParseFilter[])</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.util.filter.CompoundParseFilter.acceptable(javax.xml.namespace.QName)</name>
                <outbound type="class" confirmed="no">javax.xml.namespace.QName</outbound>
                <outbound type="class" confirmed="yes">org.apache.abdera.filter.ParseFilter</outbound>
                <outbound type="feature" confirmed="yes">org.apache.abdera.filter.ParseFilter.acceptable(javax.xml.namespace.QName)</outbound>
                <outbound type="class" confirmed="yes">org.apache.abdera.util.filter.CompoundParseFilter$Condition</outbound>
                <outbound type="feature" confirmed="yes">org.apache.abdera.util.filter.CompoundParseFilter$Condition.evaluate(boolean)</outbound>
                <outbound type="feature" confirmed="yes">org.apache.abdera.util.filter.CompoundParseFilter.condition</outbound>
                <outbound type="feature" confirmed="yes">org.apache.abdera.util.filter.CompoundParseFilter.getFilters()</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.util.filter.CompoundParseFilter.acceptable(javax.xml.namespace.QName, javax.xml.namespace.QName)</name>
                <outbound type="class" confirmed="no">javax.xml.namespace.QName</outbound>
                <outbound type="class" confirmed="yes">org.apache.abdera.filter.ParseFilter</outbound>
                <outbound type="feature" confirmed="yes">org.apache.abdera.filter.ParseFilter.acceptable(javax.xml.namespace.QName, javax.xml.namespace.QName)</outbound>
                <outbound type="class" confirmed="yes">org.apache.abdera.util.filter.CompoundParseFilter$Condition</outbound>
                <outbound type="feature" confirmed="yes">org.apache.abdera.util.filter.CompoundParseFilter$Condition.evaluate(boolean)</outbound>
                <outbound type="feature" confirmed="yes">org.apache.abdera.util.filter.CompoundParseFilter.condition</outbound>
                <outbound type="feature" confirmed="yes">org.apache.abdera.util.filter.CompoundParseFilter.getFilters()</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.util.filter.CompoundParseFilter.clone()</name>
                <outbound type="class" confirmed="no">java.lang.CloneNotSupportedException</outbound>
                <outbound type="class" confirmed="no">java.lang.Object</outbound>
                <outbound type="feature" confirmed="yes">org.apache.abdera.util.filter.AbstractParseFilter.clone()</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.util.filter.CompoundParseFilter.condition</name>
                <outbound type="class" confirmed="yes">org.apache.abdera.util.filter.CompoundParseFilter$Condition</outbound>
                <inbound type="feature" confirmed="yes">org.apache.abdera.util.filter.CompoundParseFilter.CompoundParseFilter(org.apache.abdera.util.filter.CompoundParseFilter$Condition, org.apache.abdera.filter.ParseFilter[])</inbound>
                <inbound type="feature" confirmed="yes">org.apache.abdera.util.filter.CompoundParseFilter.acceptable(javax.xml.namespace.QName)</inbound>
                <inbound type="feature" confirmed="yes">org.apache.abdera.util.filter.CompoundParseFilter.acceptable(javax.xml.namespace.QName, javax.xml.namespace.QName)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.util.filter.CompoundParseFilter.filters</name>
                <outbound type="class" confirmed="yes">org.apache.abdera.filter.ParseFilter</outbound>
                <inbound type="feature" confirmed="yes">org.apache.abdera.util.filter.CompoundParseFilter.CompoundParseFilter(org.apache.abdera.util.filter.CompoundParseFilter$Condition, org.apache.abdera.filter.ParseFilter[])</inbound>
                <inbound type="feature" confirmed="yes">org.apache.abdera.util.filter.CompoundParseFilter.getFilters()</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.util.filter.CompoundParseFilter.getFilters()</name>
                <outbound type="class" confirmed="yes">org.apache.abdera.filter.ParseFilter</outbound>
                <outbound type="feature" confirmed="yes">org.apache.abdera.util.filter.CompoundParseFilter.filters</outbound>
                <inbound type="feature" confirmed="yes">org.apache.abdera.util.filter.CompoundParseFilter.acceptable(javax.xml.namespace.QName)</inbound>
                <inbound type="feature" confirmed="yes">org.apache.abdera.util.filter.CompoundParseFilter.acceptable(javax.xml.namespace.QName, javax.xml.namespace.QName)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.util.filter.CompoundParseFilter.serialVersionUID</name>
            </feature>
        </class>
        <class confirmed="yes">
            <name>org.apache.abdera.util.filter.CompoundParseFilter$1</name>
            <outbound type="class" confirmed="no">java.lang.Object</outbound>
            <feature confirmed="yes">
                <name>org.apache.abdera.util.filter.CompoundParseFilter$1.$SwitchMap$org$apache$abdera$util$filter$CompoundParseFilter$Condition</name>
                <inbound type="feature" confirmed="yes">org.apache.abdera.util.filter.CompoundParseFilter$1.static {}</inbound>
                <inbound type="feature" confirmed="yes">org.apache.abdera.util.filter.CompoundParseFilter$Condition.evaluate(boolean)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.util.filter.CompoundParseFilter$1.static {}</name>
                <outbound type="class" confirmed="no">java.lang.NoSuchFieldError</outbound>
                <outbound type="feature" confirmed="yes">org.apache.abdera.util.filter.CompoundParseFilter$1.$SwitchMap$org$apache$abdera$util$filter$CompoundParseFilter$Condition</outbound>
                <outbound type="class" confirmed="yes">org.apache.abdera.util.filter.CompoundParseFilter$Condition</outbound>
                <outbound type="feature" confirmed="yes">org.apache.abdera.util.filter.CompoundParseFilter$Condition.ACCEPTABLE_TO_ALL</outbound>
                <outbound type="feature" confirmed="yes">org.apache.abdera.util.filter.CompoundParseFilter$Condition.ACCEPTABLE_TO_ANY</outbound>
                <outbound type="feature" confirmed="yes">org.apache.abdera.util.filter.CompoundParseFilter$Condition.UNACCEPTABLE_TO_ALL</outbound>
                <outbound type="feature" confirmed="yes">org.apache.abdera.util.filter.CompoundParseFilter$Condition.UNACCEPTABLE_TO_ANY</outbound>
                <outbound type="feature" confirmed="no">org.apache.abdera.util.filter.CompoundParseFilter$Condition.ordinal()</outbound>
                <outbound type="feature" confirmed="yes">org.apache.abdera.util.filter.CompoundParseFilter$Condition.values()</outbound>
            </feature>
        </class>
        <class confirmed="yes">
            <name>org.apache.abdera.util.filter.CompoundParseFilter$Condition</name>
            <outbound type="class" confirmed="no">java.lang.Enum</outbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.util.filter.CompoundParseFilter$1.static {}</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.util.filter.CompoundParseFilter.CompoundParseFilter(org.apache.abdera.filter.ParseFilter[])</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.util.filter.CompoundParseFilter.CompoundParseFilter(org.apache.abdera.util.filter.CompoundParseFilter$Condition, org.apache.abdera.filter.ParseFilter[])</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.util.filter.CompoundParseFilter.acceptable(javax.xml.namespace.QName)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.util.filter.CompoundParseFilter.acceptable(javax.xml.namespace.QName, javax.xml.namespace.QName)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.util.filter.CompoundParseFilter.condition</inbound>
            <feature confirmed="yes">
                <name>org.apache.abdera.util.filter.CompoundParseFilter$Condition.$VALUES</name>
                <inbound type="feature" confirmed="yes">org.apache.abdera.util.filter.CompoundParseFilter$Condition.static {}</inbound>
                <inbound type="feature" confirmed="yes">org.apache.abdera.util.filter.CompoundParseFilter$Condition.values()</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.util.filter.CompoundParseFilter$Condition.ACCEPTABLE_TO_ALL</name>
                <inbound type="feature" confirmed="yes">org.apache.abdera.util.filter.CompoundParseFilter$1.static {}</inbound>
                <inbound type="feature" confirmed="yes">org.apache.abdera.util.filter.CompoundParseFilter$Condition.static {}</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.util.filter.CompoundParseFilter$Condition.ACCEPTABLE_TO_ANY</name>
                <inbound type="feature" confirmed="yes">org.apache.abdera.util.filter.CompoundParseFilter$1.static {}</inbound>
                <inbound type="feature" confirmed="yes">org.apache.abdera.util.filter.CompoundParseFilter$Condition.static {}</inbound>
                <inbound type="feature" confirmed="yes">org.apache.abdera.util.filter.CompoundParseFilter.CompoundParseFilter(org.apache.abdera.filter.ParseFilter[])</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.util.filter.CompoundParseFilter$Condition.CompoundParseFilter$Condition(java.lang.String, int)</name>
                <outbound type="feature" confirmed="no">java.lang.Enum.Enum(java.lang.String, int)</outbound>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <inbound type="feature" confirmed="yes">org.apache.abdera.util.filter.CompoundParseFilter$Condition.static {}</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.util.filter.CompoundParseFilter$Condition.UNACCEPTABLE_TO_ALL</name>
                <inbound type="feature" confirmed="yes">org.apache.abdera.util.filter.CompoundParseFilter$1.static {}</inbound>
                <inbound type="feature" confirmed="yes">org.apache.abdera.util.filter.CompoundParseFilter$Condition.static {}</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.util.filter.CompoundParseFilter$Condition.UNACCEPTABLE_TO_ANY</name>
                <inbound type="feature" confirmed="yes">org.apache.abdera.util.filter.CompoundParseFilter$1.static {}</inbound>
                <inbound type="feature" confirmed="yes">org.apache.abdera.util.filter.CompoundParseFilter$Condition.static {}</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.util.filter.CompoundParseFilter$Condition.evaluate(boolean)</name>
                <outbound type="feature" confirmed="yes">org.apache.abdera.util.filter.CompoundParseFilter$1.$SwitchMap$org$apache$abdera$util$filter$CompoundParseFilter$Condition</outbound>
                <outbound type="feature" confirmed="no">org.apache.abdera.util.filter.CompoundParseFilter$Condition.ordinal()</outbound>
                <inbound type="feature" confirmed="yes">org.apache.abdera.util.filter.CompoundParseFilter.acceptable(javax.xml.namespace.QName)</inbound>
                <inbound type="feature" confirmed="yes">org.apache.abdera.util.filter.CompoundParseFilter.acceptable(javax.xml.namespace.QName, javax.xml.namespace.QName)</inbound>
            </feature>
            <feature confirmed="no">
                <name>org.apache.abdera.util.filter.CompoundParseFilter$Condition.ordinal()</name>
                <inbound type="feature" confirmed="yes">org.apache.abdera.util.filter.CompoundParseFilter$1.static {}</inbound>
                <inbound type="feature" confirmed="yes">org.apache.abdera.util.filter.CompoundParseFilter$Condition.evaluate(boolean)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.util.filter.CompoundParseFilter$Condition.static {}</name>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="feature" confirmed="yes">org.apache.abdera.util.filter.CompoundParseFilter$Condition.$VALUES</outbound>
                <outbound type="feature" confirmed="yes">org.apache.abdera.util.filter.CompoundParseFilter$Condition.ACCEPTABLE_TO_ALL</outbound>
                <outbound type="feature" confirmed="yes">org.apache.abdera.util.filter.CompoundParseFilter$Condition.ACCEPTABLE_TO_ANY</outbound>
                <outbound type="feature" confirmed="yes">org.apache.abdera.util.filter.CompoundParseFilter$Condition.CompoundParseFilter$Condition(java.lang.String, int)</outbound>
                <outbound type="feature" confirmed="yes">org.apache.abdera.util.filter.CompoundParseFilter$Condition.UNACCEPTABLE_TO_ALL</outbound>
                <outbound type="feature" confirmed="yes">org.apache.abdera.util.filter.CompoundParseFilter$Condition.UNACCEPTABLE_TO_ANY</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.util.filter.CompoundParseFilter$Condition.valueOf(java.lang.String)</name>
                <outbound type="class" confirmed="no">java.lang.Class</outbound>
                <outbound type="class" confirmed="no">java.lang.Enum</outbound>
                <outbound type="feature" confirmed="no">java.lang.Enum.valueOf(java.lang.Class, java.lang.String)</outbound>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.util.filter.CompoundParseFilter$Condition.values()</name>
                <outbound type="class" confirmed="no">java.lang.Object</outbound>
                <outbound type="feature" confirmed="yes">org.apache.abdera.util.filter.CompoundParseFilter$Condition.$VALUES</outbound>
                <outbound type="class" confirmed="no">org.apache.abdera.util.filter.CompoundParseFilter$Condition[]</outbound>
                <outbound type="feature" confirmed="no">org.apache.abdera.util.filter.CompoundParseFilter$Condition[].clone()</outbound>
                <inbound type="feature" confirmed="yes">org.apache.abdera.util.filter.CompoundParseFilter$1.static {}</inbound>
            </feature>
        </class>
        <class confirmed="no">
            <name>org.apache.abdera.util.filter.CompoundParseFilter$Condition[]</name>
            <inbound type="feature" confirmed="yes">org.apache.abdera.util.filter.CompoundParseFilter$Condition.values()</inbound>
            <feature confirmed="no">
                <name>org.apache.abdera.util.filter.CompoundParseFilter$Condition[].clone()</name>
                <inbound type="feature" confirmed="yes">org.apache.abdera.util.filter.CompoundParseFilter$Condition.values()</inbound>
            </feature>
        </class>
        <class confirmed="yes">
            <name>org.apache.abdera.util.filter.NonOpParseFilter</name>
            <outbound type="class" confirmed="yes">org.apache.abdera.util.filter.AbstractParseFilter</outbound>
            <feature confirmed="yes">
                <name>org.apache.abdera.util.filter.NonOpParseFilter.NonOpParseFilter()</name>
                <outbound type="feature" confirmed="yes">org.apache.abdera.util.filter.AbstractParseFilter.AbstractParseFilter()</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.util.filter.NonOpParseFilter.acceptable(javax.xml.namespace.QName)</name>
                <outbound type="class" confirmed="no">javax.xml.namespace.QName</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.util.filter.NonOpParseFilter.acceptable(javax.xml.namespace.QName, javax.xml.namespace.QName)</name>
                <outbound type="class" confirmed="no">javax.xml.namespace.QName</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.util.filter.NonOpParseFilter.serialVersionUID</name>
            </feature>
        </class>
        <class confirmed="yes">
            <name>org.apache.abdera.util.filter.SafeContentWhiteListParseFilter</name>
            <outbound type="class" confirmed="yes">org.apache.abdera.filter.ParseFilter</outbound>
            <outbound type="class" confirmed="yes">org.apache.abdera.util.filter.AbstractParseFilter</outbound>
            <feature confirmed="yes">
                <name>org.apache.abdera.util.filter.SafeContentWhiteListParseFilter.SafeContentWhiteListParseFilter()</name>
                <outbound type="feature" confirmed="yes">org.apache.abdera.util.filter.AbstractParseFilter.AbstractParseFilter()</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.util.filter.SafeContentWhiteListParseFilter.acceptable(javax.xml.namespace.QName)</name>
                <outbound type="class" confirmed="no">java.lang.Exception</outbound>
                <outbound type="class" confirmed="no">java.lang.Object</outbound>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="feature" confirmed="no">java.lang.String.equals(java.lang.Object)</outbound>
                <outbound type="feature" confirmed="no">java.lang.String.toLowerCase()</outbound>
                <outbound type="class" confirmed="no">javax.xml.namespace.QName</outbound>
                <outbound type="feature" confirmed="no">javax.xml.namespace.QName.getLocalPart()</outbound>
                <outbound type="feature" confirmed="no">javax.xml.namespace.QName.getNamespaceURI()</outbound>
                <outbound type="class" confirmed="yes">org.apache.abdera.util.filter.SafeContentWhiteListParseFilter$xhtml_elements</outbound>
                <outbound type="feature" confirmed="yes">org.apache.abdera.util.filter.SafeContentWhiteListParseFilter$xhtml_elements.valueOf(java.lang.String)</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.util.filter.SafeContentWhiteListParseFilter.acceptable(javax.xml.namespace.QName, javax.xml.namespace.QName)</name>
                <outbound type="class" confirmed="no">java.lang.Exception</outbound>
                <outbound type="class" confirmed="no">java.lang.Object</outbound>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="feature" confirmed="no">java.lang.String.equals(java.lang.Object)</outbound>
                <outbound type="feature" confirmed="no">java.lang.String.toLowerCase()</outbound>
                <outbound type="class" confirmed="no">javax.xml.namespace.QName</outbound>
                <outbound type="feature" confirmed="no">javax.xml.namespace.QName.getLocalPart()</outbound>
                <outbound type="feature" confirmed="no">javax.xml.namespace.QName.getNamespaceURI()</outbound>
                <outbound type="class" confirmed="yes">org.apache.abdera.util.filter.SafeContentWhiteListParseFilter$xhtml_attributes</outbound>
                <outbound type="feature" confirmed="yes">org.apache.abdera.util.filter.SafeContentWhiteListParseFilter$xhtml_attributes.fix(java.lang.String)</outbound>
                <outbound type="feature" confirmed="yes">org.apache.abdera.util.filter.SafeContentWhiteListParseFilter$xhtml_attributes.valueOf(java.lang.String)</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.util.filter.SafeContentWhiteListParseFilter.clone()</name>
                <outbound type="class" confirmed="no">java.lang.CloneNotSupportedException</outbound>
                <outbound type="class" confirmed="no">java.lang.Object</outbound>
                <outbound type="feature" confirmed="yes">org.apache.abdera.util.filter.AbstractParseFilter.clone()</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.util.filter.SafeContentWhiteListParseFilter.serialVersionUID</name>
            </feature>
        </class>
        <class confirmed="yes">
            <name>org.apache.abdera.util.filter.SafeContentWhiteListParseFilter$xhtml_attributes</name>
            <outbound type="class" confirmed="no">java.lang.Enum</outbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.util.filter.SafeContentWhiteListParseFilter.acceptable(javax.xml.namespace.QName, javax.xml.namespace.QName)</inbound>
            <feature confirmed="yes">
                <name>org.apache.abdera.util.filter.SafeContentWhiteListParseFilter$xhtml_attributes.$VALUES</name>
                <inbound type="feature" confirmed="yes">org.apache.abdera.util.filter.SafeContentWhiteListParseFilter$xhtml_attributes.static {}</inbound>
                <inbound type="feature" confirmed="yes">org.apache.abdera.util.filter.SafeContentWhiteListParseFilter$xhtml_attributes.values()</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.util.filter.SafeContentWhiteListParseFilter$xhtml_attributes.CHAR</name>
                <inbound type="feature" confirmed="yes">org.apache.abdera.util.filter.SafeContentWhiteListParseFilter$xhtml_attributes.static {}</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.util.filter.SafeContentWhiteListParseFilter$xhtml_attributes.CLASS</name>
                <inbound type="feature" confirmed="yes">org.apache.abdera.util.filter.SafeContentWhiteListParseFilter$xhtml_attributes.static {}</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.util.filter.SafeContentWhiteListParseFilter$xhtml_attributes.FOR</name>
                <inbound type="feature" confirmed="yes">org.apache.abdera.util.filter.SafeContentWhiteListParseFilter$xhtml_attributes.static {}</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.util.filter.SafeContentWhiteListParseFilter$xhtml_attributes.SafeContentWhiteListParseFilter$xhtml_attributes(java.lang.String, int)</name>
                <outbound type="feature" confirmed="no">java.lang.Enum.Enum(java.lang.String, int)</outbound>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <inbound type="feature" confirmed="yes">org.apache.abdera.util.filter.SafeContentWhiteListParseFilter$xhtml_attributes.static {}</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.util.filter.SafeContentWhiteListParseFilter$xhtml_attributes.abbr</name>
                <inbound type="feature" confirmed="yes">org.apache.abdera.util.filter.SafeContentWhiteListParseFilter$xhtml_attributes.static {}</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.util.filter.SafeContentWhiteListParseFilter$xhtml_attributes.accept</name>
                <inbound type="feature" confirmed="yes">org.apache.abdera.util.filter.SafeContentWhiteListParseFilter$xhtml_attributes.static {}</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.util.filter.SafeContentWhiteListParseFilter$xhtml_attributes.accept_charset</name>
                <inbound type="feature" confirmed="yes">org.apache.abdera.util.filter.SafeContentWhiteListParseFilter$xhtml_attributes.static {}</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.util.filter.SafeContentWhiteListParseFilter$xhtml_attributes.accesskey</name>
                <inbound type="feature" confirmed="yes">org.apache.abdera.util.filter.SafeContentWhiteListParseFilter$xhtml_attributes.static {}</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.util.filter.SafeContentWhiteListParseFilter$xhtml_attributes.action</name>
                <inbound type="feature" confirmed="yes">org.apache.abdera.util.filter.SafeContentWhiteListParseFilter$xhtml_attributes.static {}</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.util.filter.SafeContentWhiteListParseFilter$xhtml_attributes.align</name>
                <inbound type="feature" confirmed="yes">org.apache.abdera.util.filter.SafeContentWhiteListParseFilter$xhtml_attributes.static {}</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.util.filter.SafeContentWhiteListParseFilter$xhtml_attributes.alt</name>
                <inbound type="feature" confirmed="yes">org.apache.abdera.util.filter.SafeContentWhiteListParseFilter$xhtml_attributes.static {}</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.util.filter.SafeContentWhiteListParseFilter$xhtml_attributes.axis</name>
                <inbound type="feature" confirmed="yes">org.apache.abdera.util.filter.SafeContentWhiteListParseFilter$xhtml_attributes.static {}</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.util.filter.SafeContentWhiteListParseFilter$xhtml_attributes.border</name>
                <inbound type="feature" confirmed="yes">org.apache.abdera.util.filter.SafeContentWhiteListParseFilter$xhtml_attributes.static {}</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.util.filter.SafeContentWhiteListParseFilter$xhtml_attributes.cellpadding</name>
                <inbound type="feature" confirmed="yes">org.apache.abdera.util.filter.SafeContentWhiteListParseFilter$xhtml_attributes.static {}</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.util.filter.SafeContentWhiteListParseFilter$xhtml_attributes.cellspacing</name>
                <inbound type="feature" confirmed="yes">org.apache.abdera.util.filter.SafeContentWhiteListParseFilter$xhtml_attributes.static {}</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.util.filter.SafeContentWhiteListParseFilter$xhtml_attributes.charoff</name>
                <inbound type="feature" confirmed="yes">org.apache.abdera.util.filter.SafeContentWhiteListParseFilter$xhtml_attributes.static {}</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.util.filter.SafeContentWhiteListParseFilter$xhtml_attributes.charset</name>
                <inbound type="feature" confirmed="yes">org.apache.abdera.util.filter.SafeContentWhiteListParseFilter$xhtml_attributes.static {}</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.util.filter.SafeContentWhiteListParseFilter$xhtml_attributes.checked</name>
                <inbound type="feature" confirmed="yes">org.apache.abdera.util.filter.SafeContentWhiteListParseFilter$xhtml_attributes.static {}</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.util.filter.SafeContentWhiteListParseFilter$xhtml_attributes.cite</name>
                <inbound type="feature" confirmed="yes">org.apache.abdera.util.filter.SafeContentWhiteListParseFilter$xhtml_attributes.static {}</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.util.filter.SafeContentWhiteListParseFilter$xhtml_attributes.clear</name>
                <inbound type="feature" confirmed="yes">org.apache.abdera.util.filter.SafeContentWhiteListParseFilter$xhtml_attributes.static {}</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.util.filter.SafeContentWhiteListParseFilter$xhtml_attributes.color</name>
                <inbound type="feature" confirmed="yes">org.apache.abdera.util.filter.SafeContentWhiteListParseFilter$xhtml_attributes.static {}</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.util.filter.SafeContentWhiteListParseFilter$xhtml_attributes.cols</name>
                <inbound type="feature" confirmed="yes">org.apache.abdera.util.filter.SafeContentWhiteListParseFilter$xhtml_attributes.static {}</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.util.filter.SafeContentWhiteListParseFilter$xhtml_attributes.colspan</name>
                <inbound type="feature" confirmed="yes">org.apache.abdera.util.filter.SafeContentWhiteListParseFilter$xhtml_attributes.static {}</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.util.filter.SafeContentWhiteListParseFilter$xhtml_attributes.compact</name>
                <inbound type="feature" confirmed="yes">org.apache.abdera.util.filter.SafeContentWhiteListParseFilter$xhtml_attributes.static {}</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.util.filter.SafeContentWhiteListParseFilter$xhtml_attributes.coords</name>
                <inbound type="feature" confirmed="yes">org.apache.abdera.util.filter.SafeContentWhiteListParseFilter$xhtml_attributes.static {}</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.util.filter.SafeContentWhiteListParseFilter$xhtml_attributes.datetime</name>
                <inbound type="feature" confirmed="yes">org.apache.abdera.util.filter.SafeContentWhiteListParseFilter$xhtml_attributes.static {}</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.util.filter.SafeContentWhiteListParseFilter$xhtml_attributes.dir</name>
                <inbound type="feature" confirmed="yes">org.apache.abdera.util.filter.SafeContentWhiteListParseFilter$xhtml_attributes.static {}</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.util.filter.SafeContentWhiteListParseFilter$xhtml_attributes.disabled</name>
                <inbound type="feature" confirmed="yes">org.apache.abdera.util.filter.SafeContentWhiteListParseFilter$xhtml_attributes.static {}</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.util.filter.SafeContentWhiteListParseFilter$xhtml_attributes.enctype</name>
                <inbound type="feature" confirmed="yes">org.apache.abdera.util.filter.SafeContentWhiteListParseFilter$xhtml_attributes.static {}</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.util.filter.SafeContentWhiteListParseFilter$xhtml_attributes.fix(java.lang.String)</name>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="feature" confirmed="no">java.lang.String.equalsIgnoreCase(java.lang.String)</outbound>
                <outbound type="feature" confirmed="no">java.lang.String.toLowerCase()</outbound>
                <inbound type="feature" confirmed="yes">org.apache.abdera.util.filter.SafeContentWhiteListParseFilter.acceptable(javax.xml.namespace.QName, javax.xml.namespace.QName)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.util.filter.SafeContentWhiteListParseFilter$xhtml_attributes.frame</name>
                <inbound type="feature" confirmed="yes">org.apache.abdera.util.filter.SafeContentWhiteListParseFilter$xhtml_attributes.static {}</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.util.filter.SafeContentWhiteListParseFilter$xhtml_attributes.headers</name>
                <inbound type="feature" confirmed="yes">org.apache.abdera.util.filter.SafeContentWhiteListParseFilter$xhtml_attributes.static {}</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.util.filter.SafeContentWhiteListParseFilter$xhtml_attributes.height</name>
                <inbound type="feature" confirmed="yes">org.apache.abdera.util.filter.SafeContentWhiteListParseFilter$xhtml_attributes.static {}</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.util.filter.SafeContentWhiteListParseFilter$xhtml_attributes.href</name>
                <inbound type="feature" confirmed="yes">org.apache.abdera.util.filter.SafeContentWhiteListParseFilter$xhtml_attributes.static {}</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.util.filter.SafeContentWhiteListParseFilter$xhtml_attributes.hreflang</name>
                <inbound type="feature" confirmed="yes">org.apache.abdera.util.filter.SafeContentWhiteListParseFilter$xhtml_attributes.static {}</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.util.filter.SafeContentWhiteListParseFilter$xhtml_attributes.hspace</name>
                <inbound type="feature" confirmed="yes">org.apache.abdera.util.filter.SafeContentWhiteListParseFilter$xhtml_attributes.static {}</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.util.filter.SafeContentWhiteListParseFilter$xhtml_attributes.id</name>
                <inbound type="feature" confirmed="yes">org.apache.abdera.util.filter.SafeContentWhiteListParseFilter$xhtml_attributes.static {}</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.util.filter.SafeContentWhiteListParseFilter$xhtml_attributes.ismap</name>
                <inbound type="feature" confirmed="yes">org.apache.abdera.util.filter.SafeContentWhiteListParseFilter$xhtml_attributes.static {}</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.util.filter.SafeContentWhiteListParseFilter$xhtml_attributes.label</name>
                <inbound type="feature" confirmed="yes">org.apache.abdera.util.filter.SafeContentWhiteListParseFilter$xhtml_attributes.static {}</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.util.filter.SafeContentWhiteListParseFilter$xhtml_attributes.lang</name>
                <inbound type="feature" confirmed="yes">org.apache.abdera.util.filter.SafeContentWhiteListParseFilter$xhtml_attributes.static {}</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.util.filter.SafeContentWhiteListParseFilter$xhtml_attributes.longdesc</name>
                <inbound type="feature" confirmed="yes">org.apache.abdera.util.filter.SafeContentWhiteListParseFilter$xhtml_attributes.static {}</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.util.filter.SafeContentWhiteListParseFilter$xhtml_attributes.maxlength</name>
                <inbound type="feature" confirmed="yes">org.apache.abdera.util.filter.SafeContentWhiteListParseFilter$xhtml_attributes.static {}</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.util.filter.SafeContentWhiteListParseFilter$xhtml_attributes.media</name>
                <inbound type="feature" confirmed="yes">org.apache.abdera.util.filter.SafeContentWhiteListParseFilter$xhtml_attributes.static {}</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.util.filter.SafeContentWhiteListParseFilter$xhtml_attributes.method</name>
                <inbound type="feature" confirmed="yes">org.apache.abdera.util.filter.SafeContentWhiteListParseFilter$xhtml_attributes.static {}</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.util.filter.SafeContentWhiteListParseFilter$xhtml_attributes.multiple</name>
                <inbound type="feature" confirmed="yes">org.apache.abdera.util.filter.SafeContentWhiteListParseFilter$xhtml_attributes.static {}</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.util.filter.SafeContentWhiteListParseFilter$xhtml_attributes.name</name>
                <inbound type="feature" confirmed="yes">org.apache.abdera.util.filter.SafeContentWhiteListParseFilter$xhtml_attributes.static {}</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.util.filter.SafeContentWhiteListParseFilter$xhtml_attributes.nohref</name>
                <inbound type="feature" confirmed="yes">org.apache.abdera.util.filter.SafeContentWhiteListParseFilter$xhtml_attributes.static {}</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.util.filter.SafeContentWhiteListParseFilter$xhtml_attributes.noshade</name>
                <inbound type="feature" confirmed="yes">org.apache.abdera.util.filter.SafeContentWhiteListParseFilter$xhtml_attributes.static {}</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.util.filter.SafeContentWhiteListParseFilter$xhtml_attributes.nowrap</name>
                <inbound type="feature" confirmed="yes">org.apache.abdera.util.filter.SafeContentWhiteListParseFilter$xhtml_attributes.static {}</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.util.filter.SafeContentWhiteListParseFilter$xhtml_attributes.prompt</name>
                <inbound type="feature" confirmed="yes">org.apache.abdera.util.filter.SafeContentWhiteListParseFilter$xhtml_attributes.static {}</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.util.filter.SafeContentWhiteListParseFilter$xhtml_attributes.readonly</name>
                <inbound type="feature" confirmed="yes">org.apache.abdera.util.filter.SafeContentWhiteListParseFilter$xhtml_attributes.static {}</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.util.filter.SafeContentWhiteListParseFilter$xhtml_attributes.rel</name>
                <inbound type="feature" confirmed="yes">org.apache.abdera.util.filter.SafeContentWhiteListParseFilter$xhtml_attributes.static {}</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.util.filter.SafeContentWhiteListParseFilter$xhtml_attributes.rev</name>
                <inbound type="feature" confirmed="yes">org.apache.abdera.util.filter.SafeContentWhiteListParseFilter$xhtml_attributes.static {}</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.util.filter.SafeContentWhiteListParseFilter$xhtml_attributes.rows</name>
                <inbound type="feature" confirmed="yes">org.apache.abdera.util.filter.SafeContentWhiteListParseFilter$xhtml_attributes.static {}</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.util.filter.SafeContentWhiteListParseFilter$xhtml_attributes.rowspan</name>
                <inbound type="feature" confirmed="yes">org.apache.abdera.util.filter.SafeContentWhiteListParseFilter$xhtml_attributes.static {}</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.util.filter.SafeContentWhiteListParseFilter$xhtml_attributes.rules</name>
                <inbound type="feature" confirmed="yes">org.apache.abdera.util.filter.SafeContentWhiteListParseFilter$xhtml_attributes.static {}</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.util.filter.SafeContentWhiteListParseFilter$xhtml_attributes.scope</name>
                <inbound type="feature" confirmed="yes">org.apache.abdera.util.filter.SafeContentWhiteListParseFilter$xhtml_attributes.static {}</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.util.filter.SafeContentWhiteListParseFilter$xhtml_attributes.selected</name>
                <inbound type="feature" confirmed="yes">org.apache.abdera.util.filter.SafeContentWhiteListParseFilter$xhtml_attributes.static {}</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.util.filter.SafeContentWhiteListParseFilter$xhtml_attributes.shape</name>
                <inbound type="feature" confirmed="yes">org.apache.abdera.util.filter.SafeContentWhiteListParseFilter$xhtml_attributes.static {}</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.util.filter.SafeContentWhiteListParseFilter$xhtml_attributes.size</name>
                <inbound type="feature" confirmed="yes">org.apache.abdera.util.filter.SafeContentWhiteListParseFilter$xhtml_attributes.static {}</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.util.filter.SafeContentWhiteListParseFilter$xhtml_attributes.span</name>
                <inbound type="feature" confirmed="yes">org.apache.abdera.util.filter.SafeContentWhiteListParseFilter$xhtml_attributes.static {}</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.util.filter.SafeContentWhiteListParseFilter$xhtml_attributes.src</name>
                <inbound type="feature" confirmed="yes">org.apache.abdera.util.filter.SafeContentWhiteListParseFilter$xhtml_attributes.static {}</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.util.filter.SafeContentWhiteListParseFilter$xhtml_attributes.start</name>
                <inbound type="feature" confirmed="yes">org.apache.abdera.util.filter.SafeContentWhiteListParseFilter$xhtml_attributes.static {}</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.util.filter.SafeContentWhiteListParseFilter$xhtml_attributes.static {}</name>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="feature" confirmed="yes">org.apache.abdera.util.filter.SafeContentWhiteListParseFilter$xhtml_attributes.$VALUES</outbound>
                <outbound type="feature" confirmed="yes">org.apache.abdera.util.filter.SafeContentWhiteListParseFilter$xhtml_attributes.CHAR</outbound>
                <outbound type="feature" confirmed="yes">org.apache.abdera.util.filter.SafeContentWhiteListParseFilter$xhtml_attributes.CLASS</outbound>
                <outbound type="feature" confirmed="yes">org.apache.abdera.util.filter.SafeContentWhiteListParseFilter$xhtml_attributes.FOR</outbound>
                <outbound type="feature" confirmed="yes">org.apache.abdera.util.filter.SafeContentWhiteListParseFilter$xhtml_attributes.SafeContentWhiteListParseFilter$xhtml_attributes(java.lang.String, int)</outbound>
                <outbound type="feature" confirmed="yes">org.apache.abdera.util.filter.SafeContentWhiteListParseFilter$xhtml_attributes.abbr</outbound>
                <outbound type="feature" confirmed="yes">org.apache.abdera.util.filter.SafeContentWhiteListParseFilter$xhtml_attributes.accept</outbound>
                <outbound type="feature" confirmed="yes">org.apache.abdera.util.filter.SafeContentWhiteListParseFilter$xhtml_attributes.accept_charset</outbound>
                <outbound type="feature" confirmed="yes">org.apache.abdera.util.filter.SafeContentWhiteListParseFilter$xhtml_attributes.accesskey</outbound>
                <outbound type="feature" confirmed="yes">org.apache.abdera.util.filter.SafeContentWhiteListParseFilter$xhtml_attributes.action</outbound>
                <outbound type="feature" confirmed="yes">org.apache.abdera.util.filter.SafeContentWhiteListParseFilter$xhtml_attributes.align</outbound>
                <outbound type="feature" confirmed="yes">org.apache.abdera.util.filter.SafeContentWhiteListParseFilter$xhtml_attributes.alt</outbound>
                <outbound type="feature" confirmed="yes">org.apache.abdera.util.filter.SafeContentWhiteListParseFilter$xhtml_attributes.axis</outbound>
                <outbound type="feature" confirmed="yes">org.apache.abdera.util.filter.SafeContentWhiteListParseFilter$xhtml_attributes.border</outbound>
                <outbound type="feature" confirmed="yes">org.apache.abdera.util.filter.SafeContentWhiteListParseFilter$xhtml_attributes.cellpadding</outbound>
                <outbound type="feature" confirmed="yes">org.apache.abdera.util.filter.SafeContentWhiteListParseFilter$xhtml_attributes.cellspacing</outbound>
                <outbound type="feature" confirmed="yes">org.apache.abdera.util.filter.SafeContentWhiteListParseFilter$xhtml_attributes.charoff</outbound>
                <outbound type="feature" confirmed="yes">org.apache.abdera.util.filter.SafeContentWhiteListParseFilter$xhtml_attributes.charset</outbound>
                <outbound type="feature" confirmed="yes">org.apache.abdera.util.filter.SafeContentWhiteListParseFilter$xhtml_attributes.checked</outbound>
                <outbound type="feature" confirmed="yes">org.apache.abdera.util.filter.SafeContentWhiteListParseFilter$xhtml_attributes.cite</outbound>
                <outbound type="feature" confirmed="yes">org.apache.abdera.util.filter.SafeContentWhiteListParseFilter$xhtml_attributes.clear</outbound>
                <outbound type="feature" confirmed="yes">org.apache.abdera.util.filter.SafeContentWhiteListParseFilter$xhtml_attributes.color</outbound>
                <outbound type="feature" confirmed="yes">org.apache.abdera.util.filter.SafeContentWhiteListParseFilter$xhtml_attributes.cols</outbound>
                <outbound type="feature" confirmed="yes">org.apache.abdera.util.filter.SafeContentWhiteListParseFilter$xhtml_attributes.colspan</outbound>
                <outbound type="feature" confirmed="yes">org.apache.abdera.util.filter.SafeContentWhiteListParseFilter$xhtml_attributes.compact</outbound>
                <outbound type="feature" confirmed="yes">org.apache.abdera.util.filter.SafeContentWhiteListParseFilter$xhtml_attributes.coords</outbound>
                <outbound type="feature" confirmed="yes">org.apache.abdera.util.filter.SafeContentWhiteListParseFilter$xhtml_attributes.datetime</outbound>
                <outbound type="feature" confirmed="yes">org.apache.abdera.util.filter.SafeContentWhiteListParseFilter$xhtml_attributes.dir</outbound>
                <outbound type="feature" confirmed="yes">org.apache.abdera.util.filter.SafeContentWhiteListParseFilter$xhtml_attributes.disabled</outbound>
                <outbound type="feature" confirmed="yes">org.apache.abdera.util.filter.SafeContentWhiteListParseFilter$xhtml_attributes.enctype</outbound>
                <outbound type="feature" confirmed="yes">org.apache.abdera.util.filter.SafeContentWhiteListParseFilter$xhtml_attributes.frame</outbound>
                <outbound type="feature" confirmed="yes">org.apache.abdera.util.filter.SafeContentWhiteListParseFilter$xhtml_attributes.headers</outbound>
                <outbound type="feature" confirmed="yes">org.apache.abdera.util.filter.SafeContentWhiteListParseFilter$xhtml_attributes.height</outbound>
                <outbound type="feature" confirmed="yes">org.apache.abdera.util.filter.SafeContentWhiteListParseFilter$xhtml_attributes.href</outbound>
                <outbound type="feature" confirmed="yes">org.apache.abdera.util.filter.SafeContentWhiteListParseFilter$xhtml_attributes.hreflang</outbound>
                <outbound type="feature" confirmed="yes">org.apache.abdera.util.filter.SafeContentWhiteListParseFilter$xhtml_attributes.hspace</outbound>
                <outbound type="feature" confirmed="yes">org.apache.abdera.util.filter.SafeContentWhiteListParseFilter$xhtml_attributes.id</outbound>
                <outbound type="feature" confirmed="yes">org.apache.abdera.util.filter.SafeContentWhiteListParseFilter$xhtml_attributes.ismap</outbound>
                <outbound type="feature" confirmed="yes">org.apache.abdera.util.filter.SafeContentWhiteListParseFilter$xhtml_attributes.label</outbound>
                <outbound type="feature" confirmed="yes">org.apache.abdera.util.filter.SafeContentWhiteListParseFilter$xhtml_attributes.lang</outbound>
                <outbound type="feature" confirmed="yes">org.apache.abdera.util.filter.SafeContentWhiteListParseFilter$xhtml_attributes.longdesc</outbound>
                <outbound type="feature" confirmed="yes">org.apache.abdera.util.filter.SafeContentWhiteListParseFilter$xhtml_attributes.maxlength</outbound>
                <outbound type="feature" confirmed="yes">org.apache.abdera.util.filter.SafeContentWhiteListParseFilter$xhtml_attributes.media</outbound>
                <outbound type="feature" confirmed="yes">org.apache.abdera.util.filter.SafeContentWhiteListParseFilter$xhtml_attributes.method</outbound>
                <outbound type="feature" confirmed="yes">org.apache.abdera.util.filter.SafeContentWhiteListParseFilter$xhtml_attributes.multiple</outbound>
                <outbound type="feature" confirmed="yes">org.apache.abdera.util.filter.SafeContentWhiteListParseFilter$xhtml_attributes.name</outbound>
                <outbound type="feature" confirmed="yes">org.apache.abdera.util.filter.SafeContentWhiteListParseFilter$xhtml_attributes.nohref</outbound>
                <outbound type="feature" confirmed="yes">org.apache.abdera.util.filter.SafeContentWhiteListParseFilter$xhtml_attributes.noshade</outbound>
                <outbound type="feature" confirmed="yes">org.apache.abdera.util.filter.SafeContentWhiteListParseFilter$xhtml_attributes.nowrap</outbound>
                <outbound type="feature" confirmed="yes">org.apache.abdera.util.filter.SafeContentWhiteListParseFilter$xhtml_attributes.prompt</outbound>
                <outbound type="feature" confirmed="yes">org.apache.abdera.util.filter.SafeContentWhiteListParseFilter$xhtml_attributes.readonly</outbound>
                <outbound type="feature" confirmed="yes">org.apache.abdera.util.filter.SafeContentWhiteListParseFilter$xhtml_attributes.rel</outbound>
                <outbound type="feature" confirmed="yes">org.apache.abdera.util.filter.SafeContentWhiteListParseFilter$xhtml_attributes.rev</outbound>
                <outbound type="feature" confirmed="yes">org.apache.abdera.util.filter.SafeContentWhiteListParseFilter$xhtml_attributes.rows</outbound>
                <outbound type="feature" confirmed="yes">org.apache.abdera.util.filter.SafeContentWhiteListParseFilter$xhtml_attributes.rowspan</outbound>
                <outbound type="feature" confirmed="yes">org.apache.abdera.util.filter.SafeContentWhiteListParseFilter$xhtml_attributes.rules</outbound>
                <outbound type="feature" confirmed="yes">org.apache.abdera.util.filter.SafeContentWhiteListParseFilter$xhtml_attributes.scope</outbound>
                <outbound type="feature" confirmed="yes">org.apache.abdera.util.filter.SafeContentWhiteListParseFilter$xhtml_attributes.selected</outbound>
                <outbound type="feature" confirmed="yes">org.apache.abdera.util.filter.SafeContentWhiteListParseFilter$xhtml_attributes.shape</outbound>
                <outbound type="feature" confirmed="yes">org.apache.abdera.util.filter.SafeContentWhiteListParseFilter$xhtml_attributes.size</outbound>
                <outbound type="feature" confirmed="yes">org.apache.abdera.util.filter.SafeContentWhiteListParseFilter$xhtml_attributes.span</outbound>
                <outbound type="feature" confirmed="yes">org.apache.abdera.util.filter.SafeContentWhiteListParseFilter$xhtml_attributes.src</outbound>
                <outbound type="feature" confirmed="yes">org.apache.abdera.util.filter.SafeContentWhiteListParseFilter$xhtml_attributes.start</outbound>
                <outbound type="feature" confirmed="yes">org.apache.abdera.util.filter.SafeContentWhiteListParseFilter$xhtml_attributes.summary</outbound>
                <outbound type="feature" confirmed="yes">org.apache.abdera.util.filter.SafeContentWhiteListParseFilter$xhtml_attributes.tabindex</outbound>
                <outbound type="feature" confirmed="yes">org.apache.abdera.util.filter.SafeContentWhiteListParseFilter$xhtml_attributes.target</outbound>
                <outbound type="feature" confirmed="yes">org.apache.abdera.util.filter.SafeContentWhiteListParseFilter$xhtml_attributes.title</outbound>
                <outbound type="feature" confirmed="yes">org.apache.abdera.util.filter.SafeContentWhiteListParseFilter$xhtml_attributes.type</outbound>
                <outbound type="feature" confirmed="yes">org.apache.abdera.util.filter.SafeContentWhiteListParseFilter$xhtml_attributes.usemap</outbound>
                <outbound type="feature" confirmed="yes">org.apache.abdera.util.filter.SafeContentWhiteListParseFilter$xhtml_attributes.valign</outbound>
                <outbound type="feature" confirmed="yes">org.apache.abdera.util.filter.SafeContentWhiteListParseFilter$xhtml_attributes.value</outbound>
                <outbound type="feature" confirmed="yes">org.apache.abdera.util.filter.SafeContentWhiteListParseFilter$xhtml_attributes.vspace</outbound>
                <outbound type="feature" confirmed="yes">org.apache.abdera.util.filter.SafeContentWhiteListParseFilter$xhtml_attributes.width</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.util.filter.SafeContentWhiteListParseFilter$xhtml_attributes.summary</name>
                <inbound type="feature" confirmed="yes">org.apache.abdera.util.filter.SafeContentWhiteListParseFilter$xhtml_attributes.static {}</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.util.filter.SafeContentWhiteListParseFilter$xhtml_attributes.tabindex</name>
                <inbound type="feature" confirmed="yes">org.apache.abdera.util.filter.SafeContentWhiteListParseFilter$xhtml_attributes.static {}</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.util.filter.SafeContentWhiteListParseFilter$xhtml_attributes.target</name>
                <inbound type="feature" confirmed="yes">org.apache.abdera.util.filter.SafeContentWhiteListParseFilter$xhtml_attributes.static {}</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.util.filter.SafeContentWhiteListParseFilter$xhtml_attributes.title</name>
                <inbound type="feature" confirmed="yes">org.apache.abdera.util.filter.SafeContentWhiteListParseFilter$xhtml_attributes.static {}</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.util.filter.SafeContentWhiteListParseFilter$xhtml_attributes.type</name>
                <inbound type="feature" confirmed="yes">org.apache.abdera.util.filter.SafeContentWhiteListParseFilter$xhtml_attributes.static {}</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.util.filter.SafeContentWhiteListParseFilter$xhtml_attributes.usemap</name>
                <inbound type="feature" confirmed="yes">org.apache.abdera.util.filter.SafeContentWhiteListParseFilter$xhtml_attributes.static {}</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.util.filter.SafeContentWhiteListParseFilter$xhtml_attributes.valign</name>
                <inbound type="feature" confirmed="yes">org.apache.abdera.util.filter.SafeContentWhiteListParseFilter$xhtml_attributes.static {}</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.util.filter.SafeContentWhiteListParseFilter$xhtml_attributes.value</name>
                <inbound type="feature" confirmed="yes">org.apache.abdera.util.filter.SafeContentWhiteListParseFilter$xhtml_attributes.static {}</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.util.filter.SafeContentWhiteListParseFilter$xhtml_attributes.valueOf(java.lang.String)</name>
                <outbound type="class" confirmed="no">java.lang.Class</outbound>
                <outbound type="class" confirmed="no">java.lang.Enum</outbound>
                <outbound type="feature" confirmed="no">java.lang.Enum.valueOf(java.lang.Class, java.lang.String)</outbound>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <inbound type="feature" confirmed="yes">org.apache.abdera.util.filter.SafeContentWhiteListParseFilter.acceptable(javax.xml.namespace.QName, javax.xml.namespace.QName)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.util.filter.SafeContentWhiteListParseFilter$xhtml_attributes.values()</name>
                <outbound type="class" confirmed="no">java.lang.Object</outbound>
                <outbound type="feature" confirmed="yes">org.apache.abdera.util.filter.SafeContentWhiteListParseFilter$xhtml_attributes.$VALUES</outbound>
                <outbound type="class" confirmed="no">org.apache.abdera.util.filter.SafeContentWhiteListParseFilter$xhtml_attributes[]</outbound>
                <outbound type="feature" confirmed="no">org.apache.abdera.util.filter.SafeContentWhiteListParseFilter$xhtml_attributes[].clone()</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.util.filter.SafeContentWhiteListParseFilter$xhtml_attributes.vspace</name>
                <inbound type="feature" confirmed="yes">org.apache.abdera.util.filter.SafeContentWhiteListParseFilter$xhtml_attributes.static {}</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.util.filter.SafeContentWhiteListParseFilter$xhtml_attributes.width</name>
                <inbound type="feature" confirmed="yes">org.apache.abdera.util.filter.SafeContentWhiteListParseFilter$xhtml_attributes.static {}</inbound>
            </feature>
        </class>
        <class confirmed="no">
            <name>org.apache.abdera.util.filter.SafeContentWhiteListParseFilter$xhtml_attributes[]</name>
            <inbound type="feature" confirmed="yes">org.apache.abdera.util.filter.SafeContentWhiteListParseFilter$xhtml_attributes.values()</inbound>
            <feature confirmed="no">
                <name>org.apache.abdera.util.filter.SafeContentWhiteListParseFilter$xhtml_attributes[].clone()</name>
                <inbound type="feature" confirmed="yes">org.apache.abdera.util.filter.SafeContentWhiteListParseFilter$xhtml_attributes.values()</inbound>
            </feature>
        </class>
        <class confirmed="yes">
            <name>org.apache.abdera.util.filter.SafeContentWhiteListParseFilter$xhtml_elements</name>
            <outbound type="class" confirmed="no">java.lang.Enum</outbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.util.filter.SafeContentWhiteListParseFilter.acceptable(javax.xml.namespace.QName)</inbound>
            <feature confirmed="yes">
                <name>org.apache.abdera.util.filter.SafeContentWhiteListParseFilter$xhtml_elements.$VALUES</name>
                <inbound type="feature" confirmed="yes">org.apache.abdera.util.filter.SafeContentWhiteListParseFilter$xhtml_elements.static {}</inbound>
                <inbound type="feature" confirmed="yes">org.apache.abdera.util.filter.SafeContentWhiteListParseFilter$xhtml_elements.values()</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.util.filter.SafeContentWhiteListParseFilter$xhtml_elements.SafeContentWhiteListParseFilter$xhtml_elements(java.lang.String, int)</name>
                <outbound type="feature" confirmed="no">java.lang.Enum.Enum(java.lang.String, int)</outbound>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <inbound type="feature" confirmed="yes">org.apache.abdera.util.filter.SafeContentWhiteListParseFilter$xhtml_elements.static {}</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.util.filter.SafeContentWhiteListParseFilter$xhtml_elements.a</name>
                <inbound type="feature" confirmed="yes">org.apache.abdera.util.filter.SafeContentWhiteListParseFilter$xhtml_elements.static {}</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.util.filter.SafeContentWhiteListParseFilter$xhtml_elements.abbr</name>
                <inbound type="feature" confirmed="yes">org.apache.abdera.util.filter.SafeContentWhiteListParseFilter$xhtml_elements.static {}</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.util.filter.SafeContentWhiteListParseFilter$xhtml_elements.acronym</name>
                <inbound type="feature" confirmed="yes">org.apache.abdera.util.filter.SafeContentWhiteListParseFilter$xhtml_elements.static {}</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.util.filter.SafeContentWhiteListParseFilter$xhtml_elements.address</name>
                <inbound type="feature" confirmed="yes">org.apache.abdera.util.filter.SafeContentWhiteListParseFilter$xhtml_elements.static {}</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.util.filter.SafeContentWhiteListParseFilter$xhtml_elements.area</name>
                <inbound type="feature" confirmed="yes">org.apache.abdera.util.filter.SafeContentWhiteListParseFilter$xhtml_elements.static {}</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.util.filter.SafeContentWhiteListParseFilter$xhtml_elements.b</name>
                <inbound type="feature" confirmed="yes">org.apache.abdera.util.filter.SafeContentWhiteListParseFilter$xhtml_elements.static {}</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.util.filter.SafeContentWhiteListParseFilter$xhtml_elements.bdo</name>
                <inbound type="feature" confirmed="yes">org.apache.abdera.util.filter.SafeContentWhiteListParseFilter$xhtml_elements.static {}</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.util.filter.SafeContentWhiteListParseFilter$xhtml_elements.big</name>
                <inbound type="feature" confirmed="yes">org.apache.abdera.util.filter.SafeContentWhiteListParseFilter$xhtml_elements.static {}</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.util.filter.SafeContentWhiteListParseFilter$xhtml_elements.blockquote</name>
                <inbound type="feature" confirmed="yes">org.apache.abdera.util.filter.SafeContentWhiteListParseFilter$xhtml_elements.static {}</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.util.filter.SafeContentWhiteListParseFilter$xhtml_elements.br</name>
                <inbound type="feature" confirmed="yes">org.apache.abdera.util.filter.SafeContentWhiteListParseFilter$xhtml_elements.static {}</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.util.filter.SafeContentWhiteListParseFilter$xhtml_elements.button</name>
                <inbound type="feature" confirmed="yes">org.apache.abdera.util.filter.SafeContentWhiteListParseFilter$xhtml_elements.static {}</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.util.filter.SafeContentWhiteListParseFilter$xhtml_elements.caption</name>
                <inbound type="feature" confirmed="yes">org.apache.abdera.util.filter.SafeContentWhiteListParseFilter$xhtml_elements.static {}</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.util.filter.SafeContentWhiteListParseFilter$xhtml_elements.center</name>
                <inbound type="feature" confirmed="yes">org.apache.abdera.util.filter.SafeContentWhiteListParseFilter$xhtml_elements.static {}</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.util.filter.SafeContentWhiteListParseFilter$xhtml_elements.cite</name>
                <inbound type="feature" confirmed="yes">org.apache.abdera.util.filter.SafeContentWhiteListParseFilter$xhtml_elements.static {}</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.util.filter.SafeContentWhiteListParseFilter$xhtml_elements.code</name>
                <inbound type="feature" confirmed="yes">org.apache.abdera.util.filter.SafeContentWhiteListParseFilter$xhtml_elements.static {}</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.util.filter.SafeContentWhiteListParseFilter$xhtml_elements.col</name>
                <inbound type="feature" confirmed="yes">org.apache.abdera.util.filter.SafeContentWhiteListParseFilter$xhtml_elements.static {}</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.util.filter.SafeContentWhiteListParseFilter$xhtml_elements.colgroup</name>
                <inbound type="feature" confirmed="yes">org.apache.abdera.util.filter.SafeContentWhiteListParseFilter$xhtml_elements.static {}</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.util.filter.SafeContentWhiteListParseFilter$xhtml_elements.dd</name>
                <inbound type="feature" confirmed="yes">org.apache.abdera.util.filter.SafeContentWhiteListParseFilter$xhtml_elements.static {}</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.util.filter.SafeContentWhiteListParseFilter$xhtml_elements.del</name>
                <inbound type="feature" confirmed="yes">org.apache.abdera.util.filter.SafeContentWhiteListParseFilter$xhtml_elements.static {}</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.util.filter.SafeContentWhiteListParseFilter$xhtml_elements.dfn</name>
                <inbound type="feature" confirmed="yes">org.apache.abdera.util.filter.SafeContentWhiteListParseFilter$xhtml_elements.static {}</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.util.filter.SafeContentWhiteListParseFilter$xhtml_elements.dir</name>
                <inbound type="feature" confirmed="yes">org.apache.abdera.util.filter.SafeContentWhiteListParseFilter$xhtml_elements.static {}</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.util.filter.SafeContentWhiteListParseFilter$xhtml_elements.div</name>
                <inbound type="feature" confirmed="yes">org.apache.abdera.util.filter.SafeContentWhiteListParseFilter$xhtml_elements.static {}</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.util.filter.SafeContentWhiteListParseFilter$xhtml_elements.dl</name>
                <inbound type="feature" confirmed="yes">org.apache.abdera.util.filter.SafeContentWhiteListParseFilter$xhtml_elements.static {}</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.util.filter.SafeContentWhiteListParseFilter$xhtml_elements.dt</name>
                <inbound type="feature" confirmed="yes">org.apache.abdera.util.filter.SafeContentWhiteListParseFilter$xhtml_elements.static {}</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.util.filter.SafeContentWhiteListParseFilter$xhtml_elements.em</name>
                <inbound type="feature" confirmed="yes">org.apache.abdera.util.filter.SafeContentWhiteListParseFilter$xhtml_elements.static {}</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.util.filter.SafeContentWhiteListParseFilter$xhtml_elements.fieldset</name>
                <inbound type="feature" confirmed="yes">org.apache.abdera.util.filter.SafeContentWhiteListParseFilter$xhtml_elements.static {}</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.util.filter.SafeContentWhiteListParseFilter$xhtml_elements.font</name>
                <inbound type="feature" confirmed="yes">org.apache.abdera.util.filter.SafeContentWhiteListParseFilter$xhtml_elements.static {}</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.util.filter.SafeContentWhiteListParseFilter$xhtml_elements.form</name>
                <inbound type="feature" confirmed="yes">org.apache.abdera.util.filter.SafeContentWhiteListParseFilter$xhtml_elements.static {}</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.util.filter.SafeContentWhiteListParseFilter$xhtml_elements.h1</name>
                <inbound type="feature" confirmed="yes">org.apache.abdera.util.filter.SafeContentWhiteListParseFilter$xhtml_elements.static {}</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.util.filter.SafeContentWhiteListParseFilter$xhtml_elements.h2</name>
                <inbound type="feature" confirmed="yes">org.apache.abdera.util.filter.SafeContentWhiteListParseFilter$xhtml_elements.static {}</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.util.filter.SafeContentWhiteListParseFilter$xhtml_elements.h3</name>
                <inbound type="feature" confirmed="yes">org.apache.abdera.util.filter.SafeContentWhiteListParseFilter$xhtml_elements.static {}</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.util.filter.SafeContentWhiteListParseFilter$xhtml_elements.h4</name>
                <inbound type="feature" confirmed="yes">org.apache.abdera.util.filter.SafeContentWhiteListParseFilter$xhtml_elements.static {}</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.util.filter.SafeContentWhiteListParseFilter$xhtml_elements.h5</name>
                <inbound type="feature" confirmed="yes">org.apache.abdera.util.filter.SafeContentWhiteListParseFilter$xhtml_elements.static {}</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.util.filter.SafeContentWhiteListParseFilter$xhtml_elements.h6</name>
                <inbound type="feature" confirmed="yes">org.apache.abdera.util.filter.SafeContentWhiteListParseFilter$xhtml_elements.static {}</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.util.filter.SafeContentWhiteListParseFilter$xhtml_elements.hr</name>
                <inbound type="feature" confirmed="yes">org.apache.abdera.util.filter.SafeContentWhiteListParseFilter$xhtml_elements.static {}</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.util.filter.SafeContentWhiteListParseFilter$xhtml_elements.i</name>
                <inbound type="feature" confirmed="yes">org.apache.abdera.util.filter.SafeContentWhiteListParseFilter$xhtml_elements.static {}</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.util.filter.SafeContentWhiteListParseFilter$xhtml_elements.img</name>
                <inbound type="feature" confirmed="yes">org.apache.abdera.util.filter.SafeContentWhiteListParseFilter$xhtml_elements.static {}</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.util.filter.SafeContentWhiteListParseFilter$xhtml_elements.input</name>
                <inbound type="feature" confirmed="yes">org.apache.abdera.util.filter.SafeContentWhiteListParseFilter$xhtml_elements.static {}</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.util.filter.SafeContentWhiteListParseFilter$xhtml_elements.ins</name>
                <inbound type="feature" confirmed="yes">org.apache.abdera.util.filter.SafeContentWhiteListParseFilter$xhtml_elements.static {}</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.util.filter.SafeContentWhiteListParseFilter$xhtml_elements.kbd</name>
                <inbound type="feature" confirmed="yes">org.apache.abdera.util.filter.SafeContentWhiteListParseFilter$xhtml_elements.static {}</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.util.filter.SafeContentWhiteListParseFilter$xhtml_elements.label</name>
                <inbound type="feature" confirmed="yes">org.apache.abdera.util.filter.SafeContentWhiteListParseFilter$xhtml_elements.static {}</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.util.filter.SafeContentWhiteListParseFilter$xhtml_elements.legend</name>
                <inbound type="feature" confirmed="yes">org.apache.abdera.util.filter.SafeContentWhiteListParseFilter$xhtml_elements.static {}</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.util.filter.SafeContentWhiteListParseFilter$xhtml_elements.li</name>
                <inbound type="feature" confirmed="yes">org.apache.abdera.util.filter.SafeContentWhiteListParseFilter$xhtml_elements.static {}</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.util.filter.SafeContentWhiteListParseFilter$xhtml_elements.map</name>
                <inbound type="feature" confirmed="yes">org.apache.abdera.util.filter.SafeContentWhiteListParseFilter$xhtml_elements.static {}</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.util.filter.SafeContentWhiteListParseFilter$xhtml_elements.menu</name>
                <inbound type="feature" confirmed="yes">org.apache.abdera.util.filter.SafeContentWhiteListParseFilter$xhtml_elements.static {}</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.util.filter.SafeContentWhiteListParseFilter$xhtml_elements.ol</name>
                <inbound type="feature" confirmed="yes">org.apache.abdera.util.filter.SafeContentWhiteListParseFilter$xhtml_elements.static {}</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.util.filter.SafeContentWhiteListParseFilter$xhtml_elements.optgroup</name>
                <inbound type="feature" confirmed="yes">org.apache.abdera.util.filter.SafeContentWhiteListParseFilter$xhtml_elements.static {}</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.util.filter.SafeContentWhiteListParseFilter$xhtml_elements.option</name>
                <inbound type="feature" confirmed="yes">org.apache.abdera.util.filter.SafeContentWhiteListParseFilter$xhtml_elements.static {}</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.util.filter.SafeContentWhiteListParseFilter$xhtml_elements.p</name>
                <inbound type="feature" confirmed="yes">org.apache.abdera.util.filter.SafeContentWhiteListParseFilter$xhtml_elements.static {}</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.util.filter.SafeContentWhiteListParseFilter$xhtml_elements.pre</name>
                <inbound type="feature" confirmed="yes">org.apache.abdera.util.filter.SafeContentWhiteListParseFilter$xhtml_elements.static {}</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.util.filter.SafeContentWhiteListParseFilter$xhtml_elements.q</name>
                <inbound type="feature" confirmed="yes">org.apache.abdera.util.filter.SafeContentWhiteListParseFilter$xhtml_elements.static {}</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.util.filter.SafeContentWhiteListParseFilter$xhtml_elements.s</name>
                <inbound type="feature" confirmed="yes">org.apache.abdera.util.filter.SafeContentWhiteListParseFilter$xhtml_elements.static {}</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.util.filter.SafeContentWhiteListParseFilter$xhtml_elements.samp</name>
                <inbound type="feature" confirmed="yes">org.apache.abdera.util.filter.SafeContentWhiteListParseFilter$xhtml_elements.static {}</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.util.filter.SafeContentWhiteListParseFilter$xhtml_elements.select</name>
                <inbound type="feature" confirmed="yes">org.apache.abdera.util.filter.SafeContentWhiteListParseFilter$xhtml_elements.static {}</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.util.filter.SafeContentWhiteListParseFilter$xhtml_elements.small</name>
                <inbound type="feature" confirmed="yes">org.apache.abdera.util.filter.SafeContentWhiteListParseFilter$xhtml_elements.static {}</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.util.filter.SafeContentWhiteListParseFilter$xhtml_elements.span</name>
                <inbound type="feature" confirmed="yes">org.apache.abdera.util.filter.SafeContentWhiteListParseFilter$xhtml_elements.static {}</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.util.filter.SafeContentWhiteListParseFilter$xhtml_elements.static {}</name>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="feature" confirmed="yes">org.apache.abdera.util.filter.SafeContentWhiteListParseFilter$xhtml_elements.$VALUES</outbound>
                <outbound type="feature" confirmed="yes">org.apache.abdera.util.filter.SafeContentWhiteListParseFilter$xhtml_elements.SafeContentWhiteListParseFilter$xhtml_elements(java.lang.String, int)</outbound>
                <outbound type="feature" confirmed="yes">org.apache.abdera.util.filter.SafeContentWhiteListParseFilter$xhtml_elements.a</outbound>
                <outbound type="feature" confirmed="yes">org.apache.abdera.util.filter.SafeContentWhiteListParseFilter$xhtml_elements.abbr</outbound>
                <outbound type="feature" confirmed="yes">org.apache.abdera.util.filter.SafeContentWhiteListParseFilter$xhtml_elements.acronym</outbound>
                <outbound type="feature" confirmed="yes">org.apache.abdera.util.filter.SafeContentWhiteListParseFilter$xhtml_elements.address</outbound>
                <outbound type="feature" confirmed="yes">org.apache.abdera.util.filter.SafeContentWhiteListParseFilter$xhtml_elements.area</outbound>
                <outbound type="feature" confirmed="yes">org.apache.abdera.util.filter.SafeContentWhiteListParseFilter$xhtml_elements.b</outbound>
                <outbound type="feature" confirmed="yes">org.apache.abdera.util.filter.SafeContentWhiteListParseFilter$xhtml_elements.bdo</outbound>
                <outbound type="feature" confirmed="yes">org.apache.abdera.util.filter.SafeContentWhiteListParseFilter$xhtml_elements.big</outbound>
                <outbound type="feature" confirmed="yes">org.apache.abdera.util.filter.SafeContentWhiteListParseFilter$xhtml_elements.blockquote</outbound>
                <outbound type="feature" confirmed="yes">org.apache.abdera.util.filter.SafeContentWhiteListParseFilter$xhtml_elements.br</outbound>
                <outbound type="feature" confirmed="yes">org.apache.abdera.util.filter.SafeContentWhiteListParseFilter$xhtml_elements.button</outbound>
                <outbound type="feature" confirmed="yes">org.apache.abdera.util.filter.SafeContentWhiteListParseFilter$xhtml_elements.caption</outbound>
                <outbound type="feature" confirmed="yes">org.apache.abdera.util.filter.SafeContentWhiteListParseFilter$xhtml_elements.center</outbound>
                <outbound type="feature" confirmed="yes">org.apache.abdera.util.filter.SafeContentWhiteListParseFilter$xhtml_elements.cite</outbound>
                <outbound type="feature" confirmed="yes">org.apache.abdera.util.filter.SafeContentWhiteListParseFilter$xhtml_elements.code</outbound>
                <outbound type="feature" confirmed="yes">org.apache.abdera.util.filter.SafeContentWhiteListParseFilter$xhtml_elements.col</outbound>
                <outbound type="feature" confirmed="yes">org.apache.abdera.util.filter.SafeContentWhiteListParseFilter$xhtml_elements.colgroup</outbound>
                <outbound type="feature" confirmed="yes">org.apache.abdera.util.filter.SafeContentWhiteListParseFilter$xhtml_elements.dd</outbound>
                <outbound type="feature" confirmed="yes">org.apache.abdera.util.filter.SafeContentWhiteListParseFilter$xhtml_elements.del</outbound>
                <outbound type="feature" confirmed="yes">org.apache.abdera.util.filter.SafeContentWhiteListParseFilter$xhtml_elements.dfn</outbound>
                <outbound type="feature" confirmed="yes">org.apache.abdera.util.filter.SafeContentWhiteListParseFilter$xhtml_elements.dir</outbound>
                <outbound type="feature" confirmed="yes">org.apache.abdera.util.filter.SafeContentWhiteListParseFilter$xhtml_elements.div</outbound>
                <outbound type="feature" confirmed="yes">org.apache.abdera.util.filter.SafeContentWhiteListParseFilter$xhtml_elements.dl</outbound>
                <outbound type="feature" confirmed="yes">org.apache.abdera.util.filter.SafeContentWhiteListParseFilter$xhtml_elements.dt</outbound>
                <outbound type="feature" confirmed="yes">org.apache.abdera.util.filter.SafeContentWhiteListParseFilter$xhtml_elements.em</outbound>
                <outbound type="feature" confirmed="yes">org.apache.abdera.util.filter.SafeContentWhiteListParseFilter$xhtml_elements.fieldset</outbound>
                <outbound type="feature" confirmed="yes">org.apache.abdera.util.filter.SafeContentWhiteListParseFilter$xhtml_elements.font</outbound>
                <outbound type="feature" confirmed="yes">org.apache.abdera.util.filter.SafeContentWhiteListParseFilter$xhtml_elements.form</outbound>
                <outbound type="feature" confirmed="yes">org.apache.abdera.util.filter.SafeContentWhiteListParseFilter$xhtml_elements.h1</outbound>
                <outbound type="feature" confirmed="yes">org.apache.abdera.util.filter.SafeContentWhiteListParseFilter$xhtml_elements.h2</outbound>
                <outbound type="feature" confirmed="yes">org.apache.abdera.util.filter.SafeContentWhiteListParseFilter$xhtml_elements.h3</outbound>
                <outbound type="feature" confirmed="yes">org.apache.abdera.util.filter.SafeContentWhiteListParseFilter$xhtml_elements.h4</outbound>
                <outbound type="feature" confirmed="yes">org.apache.abdera.util.filter.SafeContentWhiteListParseFilter$xhtml_elements.h5</outbound>
                <outbound type="feature" confirmed="yes">org.apache.abdera.util.filter.SafeContentWhiteListParseFilter$xhtml_elements.h6</outbound>
                <outbound type="feature" confirmed="yes">org.apache.abdera.util.filter.SafeContentWhiteListParseFilter$xhtml_elements.hr</outbound>
                <outbound type="feature" confirmed="yes">org.apache.abdera.util.filter.SafeContentWhiteListParseFilter$xhtml_elements.i</outbound>
                <outbound type="feature" confirmed="yes">org.apache.abdera.util.filter.SafeContentWhiteListParseFilter$xhtml_elements.img</outbound>
                <outbound type="feature" confirmed="yes">org.apache.abdera.util.filter.SafeContentWhiteListParseFilter$xhtml_elements.input</outbound>
                <outbound type="feature" confirmed="yes">org.apache.abdera.util.filter.SafeContentWhiteListParseFilter$xhtml_elements.ins</outbound>
                <outbound type="feature" confirmed="yes">org.apache.abdera.util.filter.SafeContentWhiteListParseFilter$xhtml_elements.kbd</outbound>
                <outbound type="feature" confirmed="yes">org.apache.abdera.util.filter.SafeContentWhiteListParseFilter$xhtml_elements.label</outbound>
                <outbound type="feature" confirmed="yes">org.apache.abdera.util.filter.SafeContentWhiteListParseFilter$xhtml_elements.legend</outbound>
                <outbound type="feature" confirmed="yes">org.apache.abdera.util.filter.SafeContentWhiteListParseFilter$xhtml_elements.li</outbound>
                <outbound type="feature" confirmed="yes">org.apache.abdera.util.filter.SafeContentWhiteListParseFilter$xhtml_elements.map</outbound>
                <outbound type="feature" confirmed="yes">org.apache.abdera.util.filter.SafeContentWhiteListParseFilter$xhtml_elements.menu</outbound>
                <outbound type="feature" confirmed="yes">org.apache.abdera.util.filter.SafeContentWhiteListParseFilter$xhtml_elements.ol</outbound>
                <outbound type="feature" confirmed="yes">org.apache.abdera.util.filter.SafeContentWhiteListParseFilter$xhtml_elements.optgroup</outbound>
                <outbound type="feature" confirmed="yes">org.apache.abdera.util.filter.SafeContentWhiteListParseFilter$xhtml_elements.option</outbound>
                <outbound type="feature" confirmed="yes">org.apache.abdera.util.filter.SafeContentWhiteListParseFilter$xhtml_elements.p</outbound>
                <outbound type="feature" confirmed="yes">org.apache.abdera.util.filter.SafeContentWhiteListParseFilter$xhtml_elements.pre</outbound>
                <outbound type="feature" confirmed="yes">org.apache.abdera.util.filter.SafeContentWhiteListParseFilter$xhtml_elements.q</outbound>
                <outbound type="feature" confirmed="yes">org.apache.abdera.util.filter.SafeContentWhiteListParseFilter$xhtml_elements.s</outbound>
                <outbound type="feature" confirmed="yes">org.apache.abdera.util.filter.SafeContentWhiteListParseFilter$xhtml_elements.samp</outbound>
                <outbound type="feature" confirmed="yes">org.apache.abdera.util.filter.SafeContentWhiteListParseFilter$xhtml_elements.select</outbound>
                <outbound type="feature" confirmed="yes">org.apache.abdera.util.filter.SafeContentWhiteListParseFilter$xhtml_elements.small</outbound>
                <outbound type="feature" confirmed="yes">org.apache.abdera.util.filter.SafeContentWhiteListParseFilter$xhtml_elements.span</outbound>
                <outbound type="feature" confirmed="yes">org.apache.abdera.util.filter.SafeContentWhiteListParseFilter$xhtml_elements.strike</outbound>
                <outbound type="feature" confirmed="yes">org.apache.abdera.util.filter.SafeContentWhiteListParseFilter$xhtml_elements.strong</outbound>
                <outbound type="feature" confirmed="yes">org.apache.abdera.util.filter.SafeContentWhiteListParseFilter$xhtml_elements.sub</outbound>
                <outbound type="feature" confirmed="yes">org.apache.abdera.util.filter.SafeContentWhiteListParseFilter$xhtml_elements.sup</outbound>
                <outbound type="feature" confirmed="yes">org.apache.abdera.util.filter.SafeContentWhiteListParseFilter$xhtml_elements.table</outbound>
                <outbound type="feature" confirmed="yes">org.apache.abdera.util.filter.SafeContentWhiteListParseFilter$xhtml_elements.tbody</outbound>
                <outbound type="feature" confirmed="yes">org.apache.abdera.util.filter.SafeContentWhiteListParseFilter$xhtml_elements.td</outbound>
                <outbound type="feature" confirmed="yes">org.apache.abdera.util.filter.SafeContentWhiteListParseFilter$xhtml_elements.textarea</outbound>
                <outbound type="feature" confirmed="yes">org.apache.abdera.util.filter.SafeContentWhiteListParseFilter$xhtml_elements.tfoot</outbound>
                <outbound type="feature" confirmed="yes">org.apache.abdera.util.filter.SafeContentWhiteListParseFilter$xhtml_elements.th</outbound>
                <outbound type="feature" confirmed="yes">org.apache.abdera.util.filter.SafeContentWhiteListParseFilter$xhtml_elements.thead</outbound>
                <outbound type="feature" confirmed="yes">org.apache.abdera.util.filter.SafeContentWhiteListParseFilter$xhtml_elements.tr</outbound>
                <outbound type="feature" confirmed="yes">org.apache.abdera.util.filter.SafeContentWhiteListParseFilter$xhtml_elements.tt</outbound>
                <outbound type="feature" confirmed="yes">org.apache.abdera.util.filter.SafeContentWhiteListParseFilter$xhtml_elements.u</outbound>
                <outbound type="feature" confirmed="yes">org.apache.abdera.util.filter.SafeContentWhiteListParseFilter$xhtml_elements.ul</outbound>
                <outbound type="feature" confirmed="yes">org.apache.abdera.util.filter.SafeContentWhiteListParseFilter$xhtml_elements.var</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.util.filter.SafeContentWhiteListParseFilter$xhtml_elements.strike</name>
                <inbound type="feature" confirmed="yes">org.apache.abdera.util.filter.SafeContentWhiteListParseFilter$xhtml_elements.static {}</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.util.filter.SafeContentWhiteListParseFilter$xhtml_elements.strong</name>
                <inbound type="feature" confirmed="yes">org.apache.abdera.util.filter.SafeContentWhiteListParseFilter$xhtml_elements.static {}</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.util.filter.SafeContentWhiteListParseFilter$xhtml_elements.sub</name>
                <inbound type="feature" confirmed="yes">org.apache.abdera.util.filter.SafeContentWhiteListParseFilter$xhtml_elements.static {}</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.util.filter.SafeContentWhiteListParseFilter$xhtml_elements.sup</name>
                <inbound type="feature" confirmed="yes">org.apache.abdera.util.filter.SafeContentWhiteListParseFilter$xhtml_elements.static {}</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.util.filter.SafeContentWhiteListParseFilter$xhtml_elements.table</name>
                <inbound type="feature" confirmed="yes">org.apache.abdera.util.filter.SafeContentWhiteListParseFilter$xhtml_elements.static {}</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.util.filter.SafeContentWhiteListParseFilter$xhtml_elements.tbody</name>
                <inbound type="feature" confirmed="yes">org.apache.abdera.util.filter.SafeContentWhiteListParseFilter$xhtml_elements.static {}</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.util.filter.SafeContentWhiteListParseFilter$xhtml_elements.td</name>
                <inbound type="feature" confirmed="yes">org.apache.abdera.util.filter.SafeContentWhiteListParseFilter$xhtml_elements.static {}</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.util.filter.SafeContentWhiteListParseFilter$xhtml_elements.textarea</name>
                <inbound type="feature" confirmed="yes">org.apache.abdera.util.filter.SafeContentWhiteListParseFilter$xhtml_elements.static {}</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.util.filter.SafeContentWhiteListParseFilter$xhtml_elements.tfoot</name>
                <inbound type="feature" confirmed="yes">org.apache.abdera.util.filter.SafeContentWhiteListParseFilter$xhtml_elements.static {}</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.util.filter.SafeContentWhiteListParseFilter$xhtml_elements.th</name>
                <inbound type="feature" confirmed="yes">org.apache.abdera.util.filter.SafeContentWhiteListParseFilter$xhtml_elements.static {}</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.util.filter.SafeContentWhiteListParseFilter$xhtml_elements.thead</name>
                <inbound type="feature" confirmed="yes">org.apache.abdera.util.filter.SafeContentWhiteListParseFilter$xhtml_elements.static {}</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.util.filter.SafeContentWhiteListParseFilter$xhtml_elements.tr</name>
                <inbound type="feature" confirmed="yes">org.apache.abdera.util.filter.SafeContentWhiteListParseFilter$xhtml_elements.static {}</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.util.filter.SafeContentWhiteListParseFilter$xhtml_elements.tt</name>
                <inbound type="feature" confirmed="yes">org.apache.abdera.util.filter.SafeContentWhiteListParseFilter$xhtml_elements.static {}</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.util.filter.SafeContentWhiteListParseFilter$xhtml_elements.u</name>
                <inbound type="feature" confirmed="yes">org.apache.abdera.util.filter.SafeContentWhiteListParseFilter$xhtml_elements.static {}</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.util.filter.SafeContentWhiteListParseFilter$xhtml_elements.ul</name>
                <inbound type="feature" confirmed="yes">org.apache.abdera.util.filter.SafeContentWhiteListParseFilter$xhtml_elements.static {}</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.util.filter.SafeContentWhiteListParseFilter$xhtml_elements.valueOf(java.lang.String)</name>
                <outbound type="class" confirmed="no">java.lang.Class</outbound>
                <outbound type="class" confirmed="no">java.lang.Enum</outbound>
                <outbound type="feature" confirmed="no">java.lang.Enum.valueOf(java.lang.Class, java.lang.String)</outbound>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <inbound type="feature" confirmed="yes">org.apache.abdera.util.filter.SafeContentWhiteListParseFilter.acceptable(javax.xml.namespace.QName)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.util.filter.SafeContentWhiteListParseFilter$xhtml_elements.values()</name>
                <outbound type="class" confirmed="no">java.lang.Object</outbound>
                <outbound type="feature" confirmed="yes">org.apache.abdera.util.filter.SafeContentWhiteListParseFilter$xhtml_elements.$VALUES</outbound>
                <outbound type="class" confirmed="no">org.apache.abdera.util.filter.SafeContentWhiteListParseFilter$xhtml_elements[]</outbound>
                <outbound type="feature" confirmed="no">org.apache.abdera.util.filter.SafeContentWhiteListParseFilter$xhtml_elements[].clone()</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.util.filter.SafeContentWhiteListParseFilter$xhtml_elements.var</name>
                <inbound type="feature" confirmed="yes">org.apache.abdera.util.filter.SafeContentWhiteListParseFilter$xhtml_elements.static {}</inbound>
            </feature>
        </class>
        <class confirmed="no">
            <name>org.apache.abdera.util.filter.SafeContentWhiteListParseFilter$xhtml_elements[]</name>
            <inbound type="feature" confirmed="yes">org.apache.abdera.util.filter.SafeContentWhiteListParseFilter$xhtml_elements.values()</inbound>
            <feature confirmed="no">
                <name>org.apache.abdera.util.filter.SafeContentWhiteListParseFilter$xhtml_elements[].clone()</name>
                <inbound type="feature" confirmed="yes">org.apache.abdera.util.filter.SafeContentWhiteListParseFilter$xhtml_elements.values()</inbound>
            </feature>
        </class>
        <class confirmed="yes">
            <name>org.apache.abdera.util.filter.WhiteListParseFilter</name>
            <outbound type="class" confirmed="yes">org.apache.abdera.util.filter.AbstractListParseFilter</outbound>
            <feature confirmed="yes">
                <name>org.apache.abdera.util.filter.WhiteListParseFilter.WhiteListParseFilter()</name>
                <outbound type="feature" confirmed="yes">org.apache.abdera.util.filter.WhiteListParseFilter.WhiteListParseFilter(boolean)</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.util.filter.WhiteListParseFilter.WhiteListParseFilter(boolean)</name>
                <outbound type="feature" confirmed="yes">org.apache.abdera.util.filter.AbstractListParseFilter.AbstractListParseFilter()</outbound>
                <outbound type="feature" confirmed="yes">org.apache.abdera.util.filter.WhiteListParseFilter.listAttributesExplicitly</outbound>
                <inbound type="feature" confirmed="yes">org.apache.abdera.util.filter.WhiteListParseFilter.WhiteListParseFilter()</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.util.filter.WhiteListParseFilter.acceptable(javax.xml.namespace.QName)</name>
                <outbound type="class" confirmed="no">javax.xml.namespace.QName</outbound>
                <outbound type="feature" confirmed="no">org.apache.abdera.util.filter.WhiteListParseFilter.contains(javax.xml.namespace.QName)</outbound>
                <inbound type="feature" confirmed="yes">org.apache.abdera.util.filter.WhiteListParseFilter.acceptable(javax.xml.namespace.QName, javax.xml.namespace.QName)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.util.filter.WhiteListParseFilter.acceptable(javax.xml.namespace.QName, javax.xml.namespace.QName)</name>
                <outbound type="class" confirmed="no">javax.xml.namespace.QName</outbound>
                <outbound type="feature" confirmed="yes">org.apache.abdera.util.filter.WhiteListParseFilter.acceptable(javax.xml.namespace.QName)</outbound>
                <outbound type="feature" confirmed="no">org.apache.abdera.util.filter.WhiteListParseFilter.contains(javax.xml.namespace.QName, javax.xml.namespace.QName)</outbound>
                <outbound type="feature" confirmed="yes">org.apache.abdera.util.filter.WhiteListParseFilter.listAttributesExplicitly</outbound>
            </feature>
            <feature confirmed="no">
                <name>org.apache.abdera.util.filter.WhiteListParseFilter.contains(javax.xml.namespace.QName)</name>
                <inbound type="feature" confirmed="yes">org.apache.abdera.util.filter.WhiteListParseFilter.acceptable(javax.xml.namespace.QName)</inbound>
            </feature>
            <feature confirmed="no">
                <name>org.apache.abdera.util.filter.WhiteListParseFilter.contains(javax.xml.namespace.QName, javax.xml.namespace.QName)</name>
                <inbound type="feature" confirmed="yes">org.apache.abdera.util.filter.WhiteListParseFilter.acceptable(javax.xml.namespace.QName, javax.xml.namespace.QName)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.util.filter.WhiteListParseFilter.listAttributesExplicitly</name>
                <inbound type="feature" confirmed="yes">org.apache.abdera.util.filter.WhiteListParseFilter.WhiteListParseFilter(boolean)</inbound>
                <inbound type="feature" confirmed="yes">org.apache.abdera.util.filter.WhiteListParseFilter.acceptable(javax.xml.namespace.QName, javax.xml.namespace.QName)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.util.filter.WhiteListParseFilter.serialVersionUID</name>
            </feature>
        </class>
    </package>
    <package confirmed="yes">
        <name>org.apache.abdera.writer</name>
        <class confirmed="yes">
            <name>org.apache.abdera.writer.NamedWriter</name>
            <outbound type="class" confirmed="no">java.lang.Object</outbound>
            <outbound type="class" confirmed="yes">org.apache.abdera.util.NamedItem</outbound>
            <outbound type="class" confirmed="yes">org.apache.abdera.writer.Writer</outbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.util.AbderaConfiguration.addNamedWriter(org.apache.abdera.writer.NamedWriter)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.util.AbderaConfiguration.initNamedWriters()</inbound>
            <inbound type="class" confirmed="yes">org.apache.abdera.util.AbstractNamedWriter</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.util.Configuration.addNamedWriter(org.apache.abdera.writer.NamedWriter)</inbound>
            <feature confirmed="no">
                <name>org.apache.abdera.writer.NamedWriter.getName()</name>
                <inbound type="feature" confirmed="yes">org.apache.abdera.util.AbderaConfiguration.initNamedWriters()</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.writer.NamedWriter.getOutputFormats()</name>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.writer.NamedWriter.outputsFormat(java.lang.String)</name>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
            </feature>
        </class>
        <class confirmed="yes">
            <name>org.apache.abdera.writer.StreamWriter</name>
            <outbound type="class" confirmed="no">java.io.Closeable</outbound>
            <outbound type="class" confirmed="no">java.lang.Appendable</outbound>
            <outbound type="class" confirmed="no">java.lang.Object</outbound>
            <outbound type="class" confirmed="yes">org.apache.abdera.util.NamedItem</outbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.Abdera.getNewStreamWriter()</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.Abdera.newStreamWriter()</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.factory.StreamBuilder.endAuthor()</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.factory.StreamBuilder.endCategories()</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.factory.StreamBuilder.endCategory()</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.factory.StreamBuilder.endCollection()</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.factory.StreamBuilder.endContent()</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.factory.StreamBuilder.endContributor()</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.factory.StreamBuilder.endControl()</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.factory.StreamBuilder.endDocument()</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.factory.StreamBuilder.endElement()</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.factory.StreamBuilder.endEntry()</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.factory.StreamBuilder.endFeed()</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.factory.StreamBuilder.endGenerator()</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.factory.StreamBuilder.endLink()</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.factory.StreamBuilder.endPerson()</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.factory.StreamBuilder.endService()</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.factory.StreamBuilder.endSource()</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.factory.StreamBuilder.endText()</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.factory.StreamBuilder.endWorkspace()</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.factory.StreamBuilder.flush()</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.factory.StreamBuilder.indent()</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.factory.StreamBuilder.setAutoIndent(boolean)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.factory.StreamBuilder.setAutoclose(boolean)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.factory.StreamBuilder.setAutoflush(boolean)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.factory.StreamBuilder.setChannel(java.nio.channels.WritableByteChannel)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.factory.StreamBuilder.setChannel(java.nio.channels.WritableByteChannel, java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.factory.StreamBuilder.setOutputStream(java.io.OutputStream)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.factory.StreamBuilder.setOutputStream(java.io.OutputStream, java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.factory.StreamBuilder.setPrefix(java.lang.String, java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.factory.StreamBuilder.setWriter(java.io.Writer)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.factory.StreamBuilder.startAuthor()</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.factory.StreamBuilder.startCategories()</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.factory.StreamBuilder.startCategories(boolean)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.factory.StreamBuilder.startCategories(boolean, java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.factory.StreamBuilder.startCategory(java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.factory.StreamBuilder.startCategory(java.lang.String, java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.factory.StreamBuilder.startCategory(java.lang.String, java.lang.String, java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.factory.StreamBuilder.startCollection(java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.factory.StreamBuilder.startContent(java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.factory.StreamBuilder.startContent(java.lang.String, java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.factory.StreamBuilder.startContent(org.apache.abdera.model.Content$Type)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.factory.StreamBuilder.startContent(org.apache.abdera.model.Content$Type, java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.factory.StreamBuilder.startContributor()</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.factory.StreamBuilder.startControl()</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.factory.StreamBuilder.startDocument()</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.factory.StreamBuilder.startDocument(java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.factory.StreamBuilder.startDocument(java.lang.String, java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.factory.StreamBuilder.startElement(java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.factory.StreamBuilder.startElement(java.lang.String, java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.factory.StreamBuilder.startElement(java.lang.String, java.lang.String, java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.factory.StreamBuilder.startElement(javax.xml.namespace.QName)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.factory.StreamBuilder.startEntry()</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.factory.StreamBuilder.startFeed()</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.factory.StreamBuilder.startGenerator(java.lang.String, java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.factory.StreamBuilder.startLink(java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.factory.StreamBuilder.startLink(java.lang.String, java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.factory.StreamBuilder.startLink(java.lang.String, java.lang.String, java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.factory.StreamBuilder.startLink(java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, long)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.factory.StreamBuilder.startPerson(java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.factory.StreamBuilder.startPerson(java.lang.String, java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.factory.StreamBuilder.startPerson(java.lang.String, java.lang.String, java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.factory.StreamBuilder.startPerson(javax.xml.namespace.QName)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.factory.StreamBuilder.startService()</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.factory.StreamBuilder.startSource()</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.factory.StreamBuilder.startText(java.lang.String, java.lang.String, java.lang.String, org.apache.abdera.model.Text$Type)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.factory.StreamBuilder.startText(java.lang.String, java.lang.String, org.apache.abdera.model.Text$Type)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.factory.StreamBuilder.startText(java.lang.String, org.apache.abdera.model.Text$Type)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.factory.StreamBuilder.startText(javax.xml.namespace.QName, org.apache.abdera.model.Text$Type)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.factory.StreamBuilder.startWorkspace()</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.factory.StreamBuilder.writeAccepts(java.lang.String[])</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.factory.StreamBuilder.writeAcceptsEntry()</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.factory.StreamBuilder.writeAcceptsNothing()</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.factory.StreamBuilder.writeAttribute(java.lang.String, double)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.factory.StreamBuilder.writeAttribute(java.lang.String, int)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.factory.StreamBuilder.writeAttribute(java.lang.String, java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.factory.StreamBuilder.writeAttribute(java.lang.String, java.lang.String, double)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.factory.StreamBuilder.writeAttribute(java.lang.String, java.lang.String, int)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.factory.StreamBuilder.writeAttribute(java.lang.String, java.lang.String, java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.factory.StreamBuilder.writeAttribute(java.lang.String, java.lang.String, java.lang.String, double)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.factory.StreamBuilder.writeAttribute(java.lang.String, java.lang.String, java.lang.String, int)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.factory.StreamBuilder.writeAttribute(java.lang.String, java.lang.String, java.lang.String, java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.factory.StreamBuilder.writeAttribute(java.lang.String, java.lang.String, java.lang.String, java.util.Date)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.factory.StreamBuilder.writeAttribute(java.lang.String, java.lang.String, java.lang.String, long)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.factory.StreamBuilder.writeAttribute(java.lang.String, java.lang.String, java.util.Date)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.factory.StreamBuilder.writeAttribute(java.lang.String, java.lang.String, long)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.factory.StreamBuilder.writeAttribute(java.lang.String, java.util.Date)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.factory.StreamBuilder.writeAttribute(java.lang.String, long)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.factory.StreamBuilder.writeAttribute(javax.xml.namespace.QName, double)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.factory.StreamBuilder.writeAttribute(javax.xml.namespace.QName, int)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.factory.StreamBuilder.writeAttribute(javax.xml.namespace.QName, java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.factory.StreamBuilder.writeAttribute(javax.xml.namespace.QName, java.util.Date)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.factory.StreamBuilder.writeAttribute(javax.xml.namespace.QName, long)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.factory.StreamBuilder.writeAuthor(java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.factory.StreamBuilder.writeAuthor(java.lang.String, java.lang.String, java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.factory.StreamBuilder.writeBase(java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.factory.StreamBuilder.writeBase(org.apache.abdera.i18n.iri.IRI)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.factory.StreamBuilder.writeCategory(java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.factory.StreamBuilder.writeCategory(java.lang.String, java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.factory.StreamBuilder.writeCategory(java.lang.String, java.lang.String, java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.factory.StreamBuilder.writeComment(java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.factory.StreamBuilder.writeContent(java.lang.String, java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.factory.StreamBuilder.writeContent(org.apache.abdera.model.Content$Type, java.io.InputStream)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.factory.StreamBuilder.writeContent(org.apache.abdera.model.Content$Type, java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.factory.StreamBuilder.writeContent(org.apache.abdera.model.Content$Type, javax.activation.DataHandler)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.factory.StreamBuilder.writeContributor(java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.factory.StreamBuilder.writeContributor(java.lang.String, java.lang.String, java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.factory.StreamBuilder.writeDate(java.lang.String, java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.factory.StreamBuilder.writeDate(java.lang.String, java.lang.String, java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.factory.StreamBuilder.writeDate(java.lang.String, java.lang.String, java.lang.String, java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.factory.StreamBuilder.writeDate(java.lang.String, java.lang.String, java.lang.String, java.util.Date)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.factory.StreamBuilder.writeDate(java.lang.String, java.lang.String, java.util.Date)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.factory.StreamBuilder.writeDate(java.lang.String, java.util.Date)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.factory.StreamBuilder.writeDate(javax.xml.namespace.QName, java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.factory.StreamBuilder.writeDate(javax.xml.namespace.QName, java.util.Date)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.factory.StreamBuilder.writeDraft(boolean)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.factory.StreamBuilder.writeEdited(java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.factory.StreamBuilder.writeEdited(java.util.Date)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.factory.StreamBuilder.writeElementText(double)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.factory.StreamBuilder.writeElementText(int)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.factory.StreamBuilder.writeElementText(java.io.InputStream)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.factory.StreamBuilder.writeElementText(java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.factory.StreamBuilder.writeElementText(java.lang.String, java.lang.Object[])</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.factory.StreamBuilder.writeElementText(java.util.Date)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.factory.StreamBuilder.writeElementText(javax.activation.DataHandler)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.factory.StreamBuilder.writeElementText(long)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.factory.StreamBuilder.writeGenerator(java.lang.String, java.lang.String, java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.factory.StreamBuilder.writeIRIElement(java.lang.String, java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.factory.StreamBuilder.writeIRIElement(java.lang.String, java.lang.String, java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.factory.StreamBuilder.writeIRIElement(java.lang.String, java.lang.String, java.lang.String, java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.factory.StreamBuilder.writeIRIElement(java.lang.String, java.lang.String, java.lang.String, org.apache.abdera.i18n.iri.IRI)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.factory.StreamBuilder.writeIRIElement(java.lang.String, java.lang.String, org.apache.abdera.i18n.iri.IRI)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.factory.StreamBuilder.writeIRIElement(java.lang.String, org.apache.abdera.i18n.iri.IRI)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.factory.StreamBuilder.writeIRIElement(javax.xml.namespace.QName, java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.factory.StreamBuilder.writeIRIElement(javax.xml.namespace.QName, org.apache.abdera.i18n.iri.IRI)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.factory.StreamBuilder.writeIcon(java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.factory.StreamBuilder.writeIcon(org.apache.abdera.i18n.iri.IRI)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.factory.StreamBuilder.writeId()</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.factory.StreamBuilder.writeId(java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.factory.StreamBuilder.writeId(org.apache.abdera.i18n.iri.IRI)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.factory.StreamBuilder.writeLanguage(java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.factory.StreamBuilder.writeLanguage(java.util.Locale)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.factory.StreamBuilder.writeLanguage(org.apache.abdera.i18n.rfc4646.Lang)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.factory.StreamBuilder.writeLink(java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.factory.StreamBuilder.writeLink(java.lang.String, java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.factory.StreamBuilder.writeLink(java.lang.String, java.lang.String, java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.factory.StreamBuilder.writeLink(java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, long)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.factory.StreamBuilder.writeLogo(java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.factory.StreamBuilder.writeLogo(org.apache.abdera.i18n.iri.IRI)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.factory.StreamBuilder.writeNamespace(java.lang.String, java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.factory.StreamBuilder.writePI(java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.factory.StreamBuilder.writePI(java.lang.String, java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.factory.StreamBuilder.writePerson(java.lang.String, java.lang.String, java.lang.String, java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.factory.StreamBuilder.writePerson(java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.factory.StreamBuilder.writePerson(java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.factory.StreamBuilder.writePerson(javax.xml.namespace.QName, java.lang.String, java.lang.String, java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.factory.StreamBuilder.writePersonEmail(java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.factory.StreamBuilder.writePersonName(java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.factory.StreamBuilder.writePersonUri(java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.factory.StreamBuilder.writePublished(java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.factory.StreamBuilder.writePublished(java.util.Date)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.factory.StreamBuilder.writeRights(java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.factory.StreamBuilder.writeRights(org.apache.abdera.model.Text$Type, java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.factory.StreamBuilder.writeSubtitle(java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.factory.StreamBuilder.writeSubtitle(org.apache.abdera.model.Text$Type, java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.factory.StreamBuilder.writeSummary(java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.factory.StreamBuilder.writeSummary(org.apache.abdera.model.Text$Type, java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.factory.StreamBuilder.writeText(java.lang.String, java.lang.String, java.lang.String, org.apache.abdera.model.Text$Type, java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.factory.StreamBuilder.writeText(java.lang.String, java.lang.String, org.apache.abdera.model.Text$Type, java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.factory.StreamBuilder.writeText(java.lang.String, org.apache.abdera.model.Text$Type, java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.factory.StreamBuilder.writeText(javax.xml.namespace.QName, org.apache.abdera.model.Text$Type, java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.factory.StreamBuilder.writeTitle(java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.factory.StreamBuilder.writeTitle(org.apache.abdera.model.Text$Type, java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.factory.StreamBuilder.writeUpdated(java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.factory.StreamBuilder.writeUpdated(java.util.Date)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.protocol.EntityProvider.writeTo(org.apache.abdera.writer.StreamWriter)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.protocol.error.Error.create(org.apache.abdera.writer.StreamWriter, int, java.lang.String, java.lang.Throwable)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.util.AbderaConfiguration.newStreamWriterInstance(org.apache.abdera.Abdera)</inbound>
            <inbound type="class" confirmed="yes">org.apache.abdera.util.AbstractStreamWriter</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.util.AbstractStreamWriter.append(char)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.util.AbstractStreamWriter.append(java.lang.CharSequence)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.util.AbstractStreamWriter.endAuthor()</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.util.AbstractStreamWriter.endCategories()</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.util.AbstractStreamWriter.endCategory()</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.util.AbstractStreamWriter.endCollection()</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.util.AbstractStreamWriter.endContent()</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.util.AbstractStreamWriter.endContributor()</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.util.AbstractStreamWriter.endControl()</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.util.AbstractStreamWriter.endDocument()</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.util.AbstractStreamWriter.endEntry()</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.util.AbstractStreamWriter.endFeed()</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.util.AbstractStreamWriter.endGenerator()</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.util.AbstractStreamWriter.endLink()</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.util.AbstractStreamWriter.endPerson()</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.util.AbstractStreamWriter.endService()</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.util.AbstractStreamWriter.endSource()</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.util.AbstractStreamWriter.endText()</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.util.AbstractStreamWriter.endWorkspace()</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.util.AbstractStreamWriter.setAutoIndent(boolean)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.util.AbstractStreamWriter.setAutoclose(boolean)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.util.AbstractStreamWriter.setAutoflush(boolean)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.util.AbstractStreamWriter.setChannel(java.nio.channels.WritableByteChannel)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.util.AbstractStreamWriter.setChannel(java.nio.channels.WritableByteChannel, java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.util.AbstractStreamWriter.startAuthor()</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.util.AbstractStreamWriter.startCategories()</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.util.AbstractStreamWriter.startCategories(boolean)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.util.AbstractStreamWriter.startCategories(boolean, java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.util.AbstractStreamWriter.startCategory(java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.util.AbstractStreamWriter.startCategory(java.lang.String, java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.util.AbstractStreamWriter.startCategory(java.lang.String, java.lang.String, java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.util.AbstractStreamWriter.startCollection(java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.util.AbstractStreamWriter.startContent(java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.util.AbstractStreamWriter.startContent(java.lang.String, java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.util.AbstractStreamWriter.startContent(org.apache.abdera.model.Content$Type)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.util.AbstractStreamWriter.startContent(org.apache.abdera.model.Content$Type, java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.util.AbstractStreamWriter.startContributor()</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.util.AbstractStreamWriter.startControl()</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.util.AbstractStreamWriter.startDocument()</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.util.AbstractStreamWriter.startElement(java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.util.AbstractStreamWriter.startElement(java.lang.String, java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.util.AbstractStreamWriter.startElement(javax.xml.namespace.QName)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.util.AbstractStreamWriter.startEntry()</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.util.AbstractStreamWriter.startFeed()</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.util.AbstractStreamWriter.startGenerator(java.lang.String, java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.util.AbstractStreamWriter.startLink(java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.util.AbstractStreamWriter.startLink(java.lang.String, java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.util.AbstractStreamWriter.startLink(java.lang.String, java.lang.String, java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.util.AbstractStreamWriter.startLink(java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, long)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.util.AbstractStreamWriter.startPerson(java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.util.AbstractStreamWriter.startPerson(java.lang.String, java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.util.AbstractStreamWriter.startPerson(java.lang.String, java.lang.String, java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.util.AbstractStreamWriter.startPerson(javax.xml.namespace.QName)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.util.AbstractStreamWriter.startService()</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.util.AbstractStreamWriter.startSource()</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.util.AbstractStreamWriter.startText(java.lang.String, java.lang.String, java.lang.String, org.apache.abdera.model.Text$Type)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.util.AbstractStreamWriter.startText(java.lang.String, java.lang.String, org.apache.abdera.model.Text$Type)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.util.AbstractStreamWriter.startText(java.lang.String, org.apache.abdera.model.Text$Type)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.util.AbstractStreamWriter.startText(javax.xml.namespace.QName, org.apache.abdera.model.Text$Type)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.util.AbstractStreamWriter.startWorkspace()</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.util.AbstractStreamWriter.writeAccepts(java.lang.String[])</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.util.AbstractStreamWriter.writeAcceptsEntry()</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.util.AbstractStreamWriter.writeAcceptsNothing()</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.util.AbstractStreamWriter.writeAttribute(java.lang.String, double)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.util.AbstractStreamWriter.writeAttribute(java.lang.String, int)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.util.AbstractStreamWriter.writeAttribute(java.lang.String, java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.util.AbstractStreamWriter.writeAttribute(java.lang.String, java.lang.String, double)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.util.AbstractStreamWriter.writeAttribute(java.lang.String, java.lang.String, int)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.util.AbstractStreamWriter.writeAttribute(java.lang.String, java.lang.String, java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.util.AbstractStreamWriter.writeAttribute(java.lang.String, java.lang.String, java.lang.String, double)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.util.AbstractStreamWriter.writeAttribute(java.lang.String, java.lang.String, java.lang.String, int)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.util.AbstractStreamWriter.writeAttribute(java.lang.String, java.lang.String, java.lang.String, java.util.Date)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.util.AbstractStreamWriter.writeAttribute(java.lang.String, java.lang.String, java.lang.String, long)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.util.AbstractStreamWriter.writeAttribute(java.lang.String, java.lang.String, java.util.Date)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.util.AbstractStreamWriter.writeAttribute(java.lang.String, java.lang.String, long)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.util.AbstractStreamWriter.writeAttribute(java.lang.String, java.util.Date)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.util.AbstractStreamWriter.writeAttribute(java.lang.String, long)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.util.AbstractStreamWriter.writeAttribute(javax.xml.namespace.QName, double)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.util.AbstractStreamWriter.writeAttribute(javax.xml.namespace.QName, int)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.util.AbstractStreamWriter.writeAttribute(javax.xml.namespace.QName, java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.util.AbstractStreamWriter.writeAttribute(javax.xml.namespace.QName, java.util.Date)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.util.AbstractStreamWriter.writeAttribute(javax.xml.namespace.QName, long)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.util.AbstractStreamWriter.writeAuthor(java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.util.AbstractStreamWriter.writeAuthor(java.lang.String, java.lang.String, java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.util.AbstractStreamWriter.writeBase(java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.util.AbstractStreamWriter.writeBase(org.apache.abdera.i18n.iri.IRI)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.util.AbstractStreamWriter.writeCategory(java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.util.AbstractStreamWriter.writeCategory(java.lang.String, java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.util.AbstractStreamWriter.writeCategory(java.lang.String, java.lang.String, java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.util.AbstractStreamWriter.writeContent(java.lang.String, java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.util.AbstractStreamWriter.writeContent(org.apache.abdera.model.Content$Type, java.io.InputStream)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.util.AbstractStreamWriter.writeContent(org.apache.abdera.model.Content$Type, java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.util.AbstractStreamWriter.writeContent(org.apache.abdera.model.Content$Type, javax.activation.DataHandler)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.util.AbstractStreamWriter.writeContributor(java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.util.AbstractStreamWriter.writeContributor(java.lang.String, java.lang.String, java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.util.AbstractStreamWriter.writeDate(java.lang.String, java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.util.AbstractStreamWriter.writeDate(java.lang.String, java.lang.String, java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.util.AbstractStreamWriter.writeDate(java.lang.String, java.lang.String, java.lang.String, java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.util.AbstractStreamWriter.writeDate(java.lang.String, java.lang.String, java.lang.String, java.util.Date)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.util.AbstractStreamWriter.writeDate(java.lang.String, java.lang.String, java.util.Date)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.util.AbstractStreamWriter.writeDate(java.lang.String, java.util.Date)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.util.AbstractStreamWriter.writeDate(javax.xml.namespace.QName, java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.util.AbstractStreamWriter.writeDate(javax.xml.namespace.QName, java.util.Date)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.util.AbstractStreamWriter.writeDraft(boolean)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.util.AbstractStreamWriter.writeEdited(java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.util.AbstractStreamWriter.writeEdited(java.util.Date)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.util.AbstractStreamWriter.writeElementText(double)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.util.AbstractStreamWriter.writeElementText(int)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.util.AbstractStreamWriter.writeElementText(java.io.InputStream)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.util.AbstractStreamWriter.writeElementText(java.lang.String, java.lang.Object[])</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.util.AbstractStreamWriter.writeElementText(java.util.Date)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.util.AbstractStreamWriter.writeElementText(javax.activation.DataHandler)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.util.AbstractStreamWriter.writeElementText(long)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.util.AbstractStreamWriter.writeGenerator(java.lang.String, java.lang.String, java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.util.AbstractStreamWriter.writeIRIElement(java.lang.String, java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.util.AbstractStreamWriter.writeIRIElement(java.lang.String, java.lang.String, java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.util.AbstractStreamWriter.writeIRIElement(java.lang.String, java.lang.String, java.lang.String, java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.util.AbstractStreamWriter.writeIRIElement(java.lang.String, java.lang.String, java.lang.String, org.apache.abdera.i18n.iri.IRI)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.util.AbstractStreamWriter.writeIRIElement(java.lang.String, java.lang.String, org.apache.abdera.i18n.iri.IRI)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.util.AbstractStreamWriter.writeIRIElement(java.lang.String, org.apache.abdera.i18n.iri.IRI)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.util.AbstractStreamWriter.writeIRIElement(javax.xml.namespace.QName, java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.util.AbstractStreamWriter.writeIRIElement(javax.xml.namespace.QName, org.apache.abdera.i18n.iri.IRI)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.util.AbstractStreamWriter.writeIcon(java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.util.AbstractStreamWriter.writeIcon(org.apache.abdera.i18n.iri.IRI)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.util.AbstractStreamWriter.writeId(java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.util.AbstractStreamWriter.writeId(org.apache.abdera.i18n.iri.IRI)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.util.AbstractStreamWriter.writeLanguage(java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.util.AbstractStreamWriter.writeLanguage(java.util.Locale)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.util.AbstractStreamWriter.writeLanguage(org.apache.abdera.i18n.rfc4646.Lang)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.util.AbstractStreamWriter.writeLink(java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.util.AbstractStreamWriter.writeLink(java.lang.String, java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.util.AbstractStreamWriter.writeLink(java.lang.String, java.lang.String, java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.util.AbstractStreamWriter.writeLink(java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, long)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.util.AbstractStreamWriter.writeLogo(java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.util.AbstractStreamWriter.writeLogo(org.apache.abdera.i18n.iri.IRI)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.util.AbstractStreamWriter.writePerson(java.lang.String, java.lang.String, java.lang.String, java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.util.AbstractStreamWriter.writePerson(java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.util.AbstractStreamWriter.writePerson(java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.util.AbstractStreamWriter.writePerson(javax.xml.namespace.QName, java.lang.String, java.lang.String, java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.util.AbstractStreamWriter.writePersonEmail(java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.util.AbstractStreamWriter.writePersonName(java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.util.AbstractStreamWriter.writePersonUri(java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.util.AbstractStreamWriter.writePublished(java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.util.AbstractStreamWriter.writePublished(java.util.Date)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.util.AbstractStreamWriter.writeRights(java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.util.AbstractStreamWriter.writeRights(org.apache.abdera.model.Text$Type, java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.util.AbstractStreamWriter.writeSubtitle(java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.util.AbstractStreamWriter.writeSubtitle(org.apache.abdera.model.Text$Type, java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.util.AbstractStreamWriter.writeSummary(java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.util.AbstractStreamWriter.writeSummary(org.apache.abdera.model.Text$Type, java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.util.AbstractStreamWriter.writeText(java.lang.String, java.lang.String, java.lang.String, org.apache.abdera.model.Text$Type, java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.util.AbstractStreamWriter.writeText(java.lang.String, java.lang.String, org.apache.abdera.model.Text$Type, java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.util.AbstractStreamWriter.writeText(java.lang.String, org.apache.abdera.model.Text$Type, java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.util.AbstractStreamWriter.writeText(javax.xml.namespace.QName, org.apache.abdera.model.Text$Type, java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.util.AbstractStreamWriter.writeTitle(java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.util.AbstractStreamWriter.writeTitle(org.apache.abdera.model.Text$Type, java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.util.AbstractStreamWriter.writeUpdated(java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.util.AbstractStreamWriter.writeUpdated(java.util.Date)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.util.Configuration.newStreamWriterInstance(org.apache.abdera.Abdera)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.util.ServiceUtil.newStreamWriterInstance(org.apache.abdera.Abdera)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.writer.WriterFactory.newStreamWriter()</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.writer.WriterFactory.newStreamWriter(java.lang.String)</inbound>
            <feature confirmed="yes">
                <name>org.apache.abdera.writer.StreamWriter.endAuthor()</name>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.writer.StreamWriter.endCategories()</name>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.writer.StreamWriter.endCategory()</name>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.writer.StreamWriter.endCollection()</name>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.writer.StreamWriter.endContent()</name>
                <inbound type="feature" confirmed="yes">org.apache.abdera.util.AbstractStreamWriter.writeContent(java.lang.String, java.lang.String)</inbound>
                <inbound type="feature" confirmed="yes">org.apache.abdera.util.AbstractStreamWriter.writeContent(org.apache.abdera.model.Content$Type, java.io.InputStream)</inbound>
                <inbound type="feature" confirmed="yes">org.apache.abdera.util.AbstractStreamWriter.writeContent(org.apache.abdera.model.Content$Type, java.lang.String)</inbound>
                <inbound type="feature" confirmed="yes">org.apache.abdera.util.AbstractStreamWriter.writeContent(org.apache.abdera.model.Content$Type, javax.activation.DataHandler)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.writer.StreamWriter.endContributor()</name>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.writer.StreamWriter.endControl()</name>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.writer.StreamWriter.endDocument()</name>
                <inbound type="feature" confirmed="yes">org.apache.abdera.protocol.error.Error.create(org.apache.abdera.writer.StreamWriter, int, java.lang.String, java.lang.Throwable)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.writer.StreamWriter.endElement()</name>
                <inbound type="feature" confirmed="yes">org.apache.abdera.protocol.error.Error.create(org.apache.abdera.writer.StreamWriter, int, java.lang.String, java.lang.Throwable)</inbound>
                <inbound type="feature" confirmed="yes">org.apache.abdera.util.AbstractStreamWriter.writeAccepts(java.lang.String[])</inbound>
                <inbound type="feature" confirmed="yes">org.apache.abdera.util.AbstractStreamWriter.writeCategory(java.lang.String, java.lang.String, java.lang.String)</inbound>
                <inbound type="feature" confirmed="yes">org.apache.abdera.util.AbstractStreamWriter.writeDate(java.lang.String, java.lang.String)</inbound>
                <inbound type="feature" confirmed="yes">org.apache.abdera.util.AbstractStreamWriter.writeDate(java.lang.String, java.lang.String, java.lang.String)</inbound>
                <inbound type="feature" confirmed="yes">org.apache.abdera.util.AbstractStreamWriter.writeDate(java.lang.String, java.lang.String, java.lang.String, java.lang.String)</inbound>
                <inbound type="feature" confirmed="yes">org.apache.abdera.util.AbstractStreamWriter.writeDate(java.lang.String, java.lang.String, java.lang.String, java.util.Date)</inbound>
                <inbound type="feature" confirmed="yes">org.apache.abdera.util.AbstractStreamWriter.writeDate(java.lang.String, java.lang.String, java.util.Date)</inbound>
                <inbound type="feature" confirmed="yes">org.apache.abdera.util.AbstractStreamWriter.writeDate(java.lang.String, java.util.Date)</inbound>
                <inbound type="feature" confirmed="yes">org.apache.abdera.util.AbstractStreamWriter.writeDate(javax.xml.namespace.QName, java.lang.String)</inbound>
                <inbound type="feature" confirmed="yes">org.apache.abdera.util.AbstractStreamWriter.writeDraft(boolean)</inbound>
                <inbound type="feature" confirmed="yes">org.apache.abdera.util.AbstractStreamWriter.writeGenerator(java.lang.String, java.lang.String, java.lang.String)</inbound>
                <inbound type="feature" confirmed="yes">org.apache.abdera.util.AbstractStreamWriter.writeIRIElement(java.lang.String, java.lang.String)</inbound>
                <inbound type="feature" confirmed="yes">org.apache.abdera.util.AbstractStreamWriter.writeIRIElement(java.lang.String, java.lang.String, java.lang.String)</inbound>
                <inbound type="feature" confirmed="yes">org.apache.abdera.util.AbstractStreamWriter.writeIRIElement(java.lang.String, java.lang.String, java.lang.String, java.lang.String)</inbound>
                <inbound type="feature" confirmed="yes">org.apache.abdera.util.AbstractStreamWriter.writeIRIElement(java.lang.String, java.lang.String, java.lang.String, org.apache.abdera.i18n.iri.IRI)</inbound>
                <inbound type="feature" confirmed="yes">org.apache.abdera.util.AbstractStreamWriter.writeIRIElement(java.lang.String, java.lang.String, org.apache.abdera.i18n.iri.IRI)</inbound>
                <inbound type="feature" confirmed="yes">org.apache.abdera.util.AbstractStreamWriter.writeIRIElement(java.lang.String, org.apache.abdera.i18n.iri.IRI)</inbound>
                <inbound type="feature" confirmed="yes">org.apache.abdera.util.AbstractStreamWriter.writeIRIElement(javax.xml.namespace.QName, java.lang.String)</inbound>
                <inbound type="feature" confirmed="yes">org.apache.abdera.util.AbstractStreamWriter.writePersonEmail(java.lang.String)</inbound>
                <inbound type="feature" confirmed="yes">org.apache.abdera.util.AbstractStreamWriter.writePersonName(java.lang.String)</inbound>
                <inbound type="feature" confirmed="yes">org.apache.abdera.util.AbstractStreamWriter.writePersonUri(java.lang.String)</inbound>
                <inbound type="feature" confirmed="yes">org.apache.abdera.util.AbstractStreamWriter.writeText(java.lang.String, java.lang.String, java.lang.String, org.apache.abdera.model.Text$Type, java.lang.String)</inbound>
                <inbound type="feature" confirmed="yes">org.apache.abdera.util.AbstractStreamWriter.writeText(java.lang.String, java.lang.String, org.apache.abdera.model.Text$Type, java.lang.String)</inbound>
                <inbound type="feature" confirmed="yes">org.apache.abdera.util.AbstractStreamWriter.writeText(java.lang.String, org.apache.abdera.model.Text$Type, java.lang.String)</inbound>
                <inbound type="feature" confirmed="yes">org.apache.abdera.util.AbstractStreamWriter.writeText(javax.xml.namespace.QName, org.apache.abdera.model.Text$Type, java.lang.String)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.writer.StreamWriter.endEntry()</name>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.writer.StreamWriter.endFeed()</name>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.writer.StreamWriter.endGenerator()</name>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.writer.StreamWriter.endLink()</name>
                <inbound type="feature" confirmed="yes">org.apache.abdera.util.AbstractStreamWriter.writeLink(java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, long)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.writer.StreamWriter.endPerson()</name>
                <inbound type="feature" confirmed="yes">org.apache.abdera.util.AbstractStreamWriter.writePerson(java.lang.String, java.lang.String, java.lang.String, java.lang.String)</inbound>
                <inbound type="feature" confirmed="yes">org.apache.abdera.util.AbstractStreamWriter.writePerson(java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String)</inbound>
                <inbound type="feature" confirmed="yes">org.apache.abdera.util.AbstractStreamWriter.writePerson(java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String)</inbound>
                <inbound type="feature" confirmed="yes">org.apache.abdera.util.AbstractStreamWriter.writePerson(javax.xml.namespace.QName, java.lang.String, java.lang.String, java.lang.String)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.writer.StreamWriter.endService()</name>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.writer.StreamWriter.endSource()</name>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.writer.StreamWriter.endWorkspace()</name>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.writer.StreamWriter.flush()</name>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.writer.StreamWriter.indent()</name>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.writer.StreamWriter.setAutoIndent(boolean)</name>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.writer.StreamWriter.setAutoclose(boolean)</name>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.writer.StreamWriter.setAutoflush(boolean)</name>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.writer.StreamWriter.setChannel(java.nio.channels.WritableByteChannel)</name>
                <outbound type="class" confirmed="no">java.nio.channels.WritableByteChannel</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.writer.StreamWriter.setChannel(java.nio.channels.WritableByteChannel, java.lang.String)</name>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="class" confirmed="no">java.nio.channels.WritableByteChannel</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.writer.StreamWriter.setOutputStream(java.io.OutputStream)</name>
                <outbound type="class" confirmed="no">java.io.OutputStream</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.writer.StreamWriter.setOutputStream(java.io.OutputStream, java.lang.String)</name>
                <outbound type="class" confirmed="no">java.io.OutputStream</outbound>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.writer.StreamWriter.setPrefix(java.lang.String, java.lang.String)</name>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.writer.StreamWriter.setWriter(java.io.Writer)</name>
                <outbound type="class" confirmed="no">java.io.Writer</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.writer.StreamWriter.startAuthor()</name>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.writer.StreamWriter.startCategories()</name>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.writer.StreamWriter.startCategories(boolean)</name>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.writer.StreamWriter.startCategories(boolean, java.lang.String)</name>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.writer.StreamWriter.startCategory(java.lang.String)</name>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.writer.StreamWriter.startCategory(java.lang.String, java.lang.String)</name>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.writer.StreamWriter.startCategory(java.lang.String, java.lang.String, java.lang.String)</name>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.writer.StreamWriter.startCollection(java.lang.String)</name>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.writer.StreamWriter.startContent(java.lang.String)</name>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.writer.StreamWriter.startContent(java.lang.String, java.lang.String)</name>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.writer.StreamWriter.startContent(org.apache.abdera.model.Content$Type)</name>
                <outbound type="class" confirmed="yes">org.apache.abdera.model.Content$Type</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.writer.StreamWriter.startContent(org.apache.abdera.model.Content$Type, java.lang.String)</name>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="class" confirmed="yes">org.apache.abdera.model.Content$Type</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.writer.StreamWriter.startContributor()</name>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.writer.StreamWriter.startControl()</name>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.writer.StreamWriter.startDocument()</name>
                <inbound type="feature" confirmed="yes">org.apache.abdera.protocol.error.Error.create(org.apache.abdera.writer.StreamWriter, int, java.lang.String, java.lang.Throwable)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.writer.StreamWriter.startDocument(java.lang.String)</name>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.writer.StreamWriter.startDocument(java.lang.String, java.lang.String)</name>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.writer.StreamWriter.startElement(java.lang.String)</name>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.writer.StreamWriter.startElement(java.lang.String, java.lang.String)</name>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.writer.StreamWriter.startElement(java.lang.String, java.lang.String, java.lang.String)</name>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.writer.StreamWriter.startElement(javax.xml.namespace.QName)</name>
                <outbound type="class" confirmed="no">javax.xml.namespace.QName</outbound>
                <inbound type="feature" confirmed="yes">org.apache.abdera.protocol.error.Error.create(org.apache.abdera.writer.StreamWriter, int, java.lang.String, java.lang.Throwable)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.writer.StreamWriter.startEntry()</name>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.writer.StreamWriter.startFeed()</name>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.writer.StreamWriter.startGenerator(java.lang.String, java.lang.String)</name>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.writer.StreamWriter.startLink(java.lang.String)</name>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.writer.StreamWriter.startLink(java.lang.String, java.lang.String)</name>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.writer.StreamWriter.startLink(java.lang.String, java.lang.String, java.lang.String)</name>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.writer.StreamWriter.startLink(java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, long)</name>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.writer.StreamWriter.startPerson(java.lang.String)</name>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.writer.StreamWriter.startPerson(java.lang.String, java.lang.String)</name>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.writer.StreamWriter.startPerson(java.lang.String, java.lang.String, java.lang.String)</name>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.writer.StreamWriter.startPerson(javax.xml.namespace.QName)</name>
                <outbound type="class" confirmed="no">javax.xml.namespace.QName</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.writer.StreamWriter.startService()</name>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.writer.StreamWriter.startSource()</name>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.writer.StreamWriter.startText(java.lang.String, java.lang.String, java.lang.String, org.apache.abdera.model.Text$Type)</name>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="class" confirmed="yes">org.apache.abdera.model.Text$Type</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.writer.StreamWriter.startText(java.lang.String, java.lang.String, org.apache.abdera.model.Text$Type)</name>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="class" confirmed="yes">org.apache.abdera.model.Text$Type</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.writer.StreamWriter.startText(java.lang.String, org.apache.abdera.model.Text$Type)</name>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="class" confirmed="yes">org.apache.abdera.model.Text$Type</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.writer.StreamWriter.startText(javax.xml.namespace.QName, org.apache.abdera.model.Text$Type)</name>
                <outbound type="class" confirmed="no">javax.xml.namespace.QName</outbound>
                <outbound type="class" confirmed="yes">org.apache.abdera.model.Text$Type</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.writer.StreamWriter.startWorkspace()</name>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.writer.StreamWriter.writeAccepts(java.lang.String[])</name>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.writer.StreamWriter.writeAcceptsEntry()</name>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.writer.StreamWriter.writeAcceptsNothing()</name>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.writer.StreamWriter.writeAttribute(java.lang.String, double)</name>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.writer.StreamWriter.writeAttribute(java.lang.String, int)</name>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.writer.StreamWriter.writeAttribute(java.lang.String, java.lang.String)</name>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <inbound type="feature" confirmed="yes">org.apache.abdera.util.AbstractStreamWriter.startCategory(java.lang.String, java.lang.String, java.lang.String)</inbound>
                <inbound type="feature" confirmed="yes">org.apache.abdera.util.AbstractStreamWriter.startCollection(java.lang.String)</inbound>
                <inbound type="feature" confirmed="yes">org.apache.abdera.util.AbstractStreamWriter.startContent(java.lang.String, java.lang.String)</inbound>
                <inbound type="feature" confirmed="yes">org.apache.abdera.util.AbstractStreamWriter.startGenerator(java.lang.String, java.lang.String)</inbound>
                <inbound type="feature" confirmed="yes">org.apache.abdera.util.AbstractStreamWriter.startLink(java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, long)</inbound>
                <inbound type="feature" confirmed="yes">org.apache.abdera.util.AbstractStreamWriter.startText(java.lang.String, java.lang.String, java.lang.String, org.apache.abdera.model.Text$Type)</inbound>
                <inbound type="feature" confirmed="yes">org.apache.abdera.util.AbstractStreamWriter.startText(java.lang.String, java.lang.String, org.apache.abdera.model.Text$Type)</inbound>
                <inbound type="feature" confirmed="yes">org.apache.abdera.util.AbstractStreamWriter.startText(java.lang.String, org.apache.abdera.model.Text$Type)</inbound>
                <inbound type="feature" confirmed="yes">org.apache.abdera.util.AbstractStreamWriter.startText(javax.xml.namespace.QName, org.apache.abdera.model.Text$Type)</inbound>
                <inbound type="feature" confirmed="yes">org.apache.abdera.util.AbstractStreamWriter.writeCategory(java.lang.String, java.lang.String, java.lang.String)</inbound>
                <inbound type="feature" confirmed="yes">org.apache.abdera.util.AbstractStreamWriter.writeGenerator(java.lang.String, java.lang.String, java.lang.String)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.writer.StreamWriter.writeAttribute(java.lang.String, java.lang.String, double)</name>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.writer.StreamWriter.writeAttribute(java.lang.String, java.lang.String, int)</name>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.writer.StreamWriter.writeAttribute(java.lang.String, java.lang.String, java.lang.String)</name>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.writer.StreamWriter.writeAttribute(java.lang.String, java.lang.String, java.lang.String, double)</name>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.writer.StreamWriter.writeAttribute(java.lang.String, java.lang.String, java.lang.String, int)</name>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.writer.StreamWriter.writeAttribute(java.lang.String, java.lang.String, java.lang.String, java.lang.String)</name>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.writer.StreamWriter.writeAttribute(java.lang.String, java.lang.String, java.lang.String, java.util.Date)</name>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="class" confirmed="no">java.util.Date</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.writer.StreamWriter.writeAttribute(java.lang.String, java.lang.String, java.lang.String, long)</name>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.writer.StreamWriter.writeAttribute(java.lang.String, java.lang.String, java.util.Date)</name>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="class" confirmed="no">java.util.Date</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.writer.StreamWriter.writeAttribute(java.lang.String, java.lang.String, long)</name>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.writer.StreamWriter.writeAttribute(java.lang.String, java.util.Date)</name>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="class" confirmed="no">java.util.Date</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.writer.StreamWriter.writeAttribute(java.lang.String, long)</name>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.writer.StreamWriter.writeAttribute(javax.xml.namespace.QName, double)</name>
                <outbound type="class" confirmed="no">javax.xml.namespace.QName</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.writer.StreamWriter.writeAttribute(javax.xml.namespace.QName, int)</name>
                <outbound type="class" confirmed="no">javax.xml.namespace.QName</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.writer.StreamWriter.writeAttribute(javax.xml.namespace.QName, java.lang.String)</name>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="class" confirmed="no">javax.xml.namespace.QName</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.writer.StreamWriter.writeAttribute(javax.xml.namespace.QName, java.util.Date)</name>
                <outbound type="class" confirmed="no">java.util.Date</outbound>
                <outbound type="class" confirmed="no">javax.xml.namespace.QName</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.writer.StreamWriter.writeAttribute(javax.xml.namespace.QName, long)</name>
                <outbound type="class" confirmed="no">javax.xml.namespace.QName</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.writer.StreamWriter.writeAuthor(java.lang.String)</name>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.writer.StreamWriter.writeAuthor(java.lang.String, java.lang.String, java.lang.String)</name>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.writer.StreamWriter.writeBase(java.lang.String)</name>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.writer.StreamWriter.writeBase(org.apache.abdera.i18n.iri.IRI)</name>
                <outbound type="class" confirmed="no">org.apache.abdera.i18n.iri.IRI</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.writer.StreamWriter.writeCategory(java.lang.String)</name>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.writer.StreamWriter.writeCategory(java.lang.String, java.lang.String)</name>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.writer.StreamWriter.writeCategory(java.lang.String, java.lang.String, java.lang.String)</name>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.writer.StreamWriter.writeComment(java.lang.String)</name>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.writer.StreamWriter.writeContent(java.lang.String, java.lang.String)</name>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.writer.StreamWriter.writeContent(org.apache.abdera.model.Content$Type, java.io.InputStream)</name>
                <outbound type="class" confirmed="no">java.io.IOException</outbound>
                <outbound type="class" confirmed="no">java.io.InputStream</outbound>
                <outbound type="class" confirmed="yes">org.apache.abdera.model.Content$Type</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.writer.StreamWriter.writeContent(org.apache.abdera.model.Content$Type, java.lang.String)</name>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="class" confirmed="yes">org.apache.abdera.model.Content$Type</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.writer.StreamWriter.writeContent(org.apache.abdera.model.Content$Type, javax.activation.DataHandler)</name>
                <outbound type="class" confirmed="no">java.io.IOException</outbound>
                <outbound type="class" confirmed="no">javax.activation.DataHandler</outbound>
                <outbound type="class" confirmed="yes">org.apache.abdera.model.Content$Type</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.writer.StreamWriter.writeContributor(java.lang.String)</name>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.writer.StreamWriter.writeContributor(java.lang.String, java.lang.String, java.lang.String)</name>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.writer.StreamWriter.writeDate(java.lang.String, java.lang.String)</name>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.writer.StreamWriter.writeDate(java.lang.String, java.lang.String, java.lang.String)</name>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.writer.StreamWriter.writeDate(java.lang.String, java.lang.String, java.lang.String, java.lang.String)</name>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.writer.StreamWriter.writeDate(java.lang.String, java.lang.String, java.lang.String, java.util.Date)</name>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="class" confirmed="no">java.util.Date</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.writer.StreamWriter.writeDate(java.lang.String, java.lang.String, java.util.Date)</name>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="class" confirmed="no">java.util.Date</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.writer.StreamWriter.writeDate(java.lang.String, java.util.Date)</name>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="class" confirmed="no">java.util.Date</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.writer.StreamWriter.writeDate(javax.xml.namespace.QName, java.lang.String)</name>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="class" confirmed="no">javax.xml.namespace.QName</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.writer.StreamWriter.writeDate(javax.xml.namespace.QName, java.util.Date)</name>
                <outbound type="class" confirmed="no">java.util.Date</outbound>
                <outbound type="class" confirmed="no">javax.xml.namespace.QName</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.writer.StreamWriter.writeDraft(boolean)</name>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.writer.StreamWriter.writeEdited(java.lang.String)</name>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.writer.StreamWriter.writeEdited(java.util.Date)</name>
                <outbound type="class" confirmed="no">java.util.Date</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.writer.StreamWriter.writeElementText(double)</name>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.writer.StreamWriter.writeElementText(int)</name>
                <inbound type="feature" confirmed="yes">org.apache.abdera.protocol.error.Error.create(org.apache.abdera.writer.StreamWriter, int, java.lang.String, java.lang.Throwable)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.writer.StreamWriter.writeElementText(java.io.InputStream)</name>
                <outbound type="class" confirmed="no">java.io.IOException</outbound>
                <outbound type="class" confirmed="no">java.io.InputStream</outbound>
                <inbound type="feature" confirmed="yes">org.apache.abdera.util.AbstractStreamWriter.writeContent(org.apache.abdera.model.Content$Type, java.io.InputStream)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.writer.StreamWriter.writeElementText(java.lang.String)</name>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <inbound type="feature" confirmed="yes">org.apache.abdera.protocol.error.Error.create(org.apache.abdera.writer.StreamWriter, int, java.lang.String, java.lang.Throwable)</inbound>
                <inbound type="feature" confirmed="yes">org.apache.abdera.util.AbstractStreamWriter.writeAccepts(java.lang.String[])</inbound>
                <inbound type="feature" confirmed="yes">org.apache.abdera.util.AbstractStreamWriter.writeContent(java.lang.String, java.lang.String)</inbound>
                <inbound type="feature" confirmed="yes">org.apache.abdera.util.AbstractStreamWriter.writeContent(org.apache.abdera.model.Content$Type, java.lang.String)</inbound>
                <inbound type="feature" confirmed="yes">org.apache.abdera.util.AbstractStreamWriter.writeDate(java.lang.String, java.lang.String)</inbound>
                <inbound type="feature" confirmed="yes">org.apache.abdera.util.AbstractStreamWriter.writeDate(java.lang.String, java.lang.String, java.lang.String)</inbound>
                <inbound type="feature" confirmed="yes">org.apache.abdera.util.AbstractStreamWriter.writeDate(java.lang.String, java.lang.String, java.lang.String, java.lang.String)</inbound>
                <inbound type="feature" confirmed="yes">org.apache.abdera.util.AbstractStreamWriter.writeDate(javax.xml.namespace.QName, java.lang.String)</inbound>
                <inbound type="feature" confirmed="yes">org.apache.abdera.util.AbstractStreamWriter.writeDraft(boolean)</inbound>
                <inbound type="feature" confirmed="yes">org.apache.abdera.util.AbstractStreamWriter.writeGenerator(java.lang.String, java.lang.String, java.lang.String)</inbound>
                <inbound type="feature" confirmed="yes">org.apache.abdera.util.AbstractStreamWriter.writeIRIElement(java.lang.String, java.lang.String)</inbound>
                <inbound type="feature" confirmed="yes">org.apache.abdera.util.AbstractStreamWriter.writeIRIElement(java.lang.String, java.lang.String, java.lang.String)</inbound>
                <inbound type="feature" confirmed="yes">org.apache.abdera.util.AbstractStreamWriter.writeIRIElement(java.lang.String, java.lang.String, java.lang.String, java.lang.String)</inbound>
                <inbound type="feature" confirmed="yes">org.apache.abdera.util.AbstractStreamWriter.writeIRIElement(java.lang.String, java.lang.String, java.lang.String, org.apache.abdera.i18n.iri.IRI)</inbound>
                <inbound type="feature" confirmed="yes">org.apache.abdera.util.AbstractStreamWriter.writeIRIElement(java.lang.String, java.lang.String, org.apache.abdera.i18n.iri.IRI)</inbound>
                <inbound type="feature" confirmed="yes">org.apache.abdera.util.AbstractStreamWriter.writeIRIElement(java.lang.String, org.apache.abdera.i18n.iri.IRI)</inbound>
                <inbound type="feature" confirmed="yes">org.apache.abdera.util.AbstractStreamWriter.writeIRIElement(javax.xml.namespace.QName, java.lang.String)</inbound>
                <inbound type="feature" confirmed="yes">org.apache.abdera.util.AbstractStreamWriter.writePersonEmail(java.lang.String)</inbound>
                <inbound type="feature" confirmed="yes">org.apache.abdera.util.AbstractStreamWriter.writePersonName(java.lang.String)</inbound>
                <inbound type="feature" confirmed="yes">org.apache.abdera.util.AbstractStreamWriter.writePersonUri(java.lang.String)</inbound>
                <inbound type="feature" confirmed="yes">org.apache.abdera.util.AbstractStreamWriter.writeText(java.lang.String, java.lang.String, java.lang.String, org.apache.abdera.model.Text$Type, java.lang.String)</inbound>
                <inbound type="feature" confirmed="yes">org.apache.abdera.util.AbstractStreamWriter.writeText(java.lang.String, java.lang.String, org.apache.abdera.model.Text$Type, java.lang.String)</inbound>
                <inbound type="feature" confirmed="yes">org.apache.abdera.util.AbstractStreamWriter.writeText(java.lang.String, org.apache.abdera.model.Text$Type, java.lang.String)</inbound>
                <inbound type="feature" confirmed="yes">org.apache.abdera.util.AbstractStreamWriter.writeText(javax.xml.namespace.QName, org.apache.abdera.model.Text$Type, java.lang.String)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.writer.StreamWriter.writeElementText(java.lang.String, java.lang.Object[])</name>
                <outbound type="class" confirmed="no">java.lang.Object</outbound>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.writer.StreamWriter.writeElementText(java.util.Date)</name>
                <outbound type="class" confirmed="no">java.util.Date</outbound>
                <inbound type="feature" confirmed="yes">org.apache.abdera.util.AbstractStreamWriter.writeDate(java.lang.String, java.lang.String, java.lang.String, java.util.Date)</inbound>
                <inbound type="feature" confirmed="yes">org.apache.abdera.util.AbstractStreamWriter.writeDate(java.lang.String, java.lang.String, java.util.Date)</inbound>
                <inbound type="feature" confirmed="yes">org.apache.abdera.util.AbstractStreamWriter.writeDate(java.lang.String, java.util.Date)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.writer.StreamWriter.writeElementText(javax.activation.DataHandler)</name>
                <outbound type="class" confirmed="no">java.io.IOException</outbound>
                <outbound type="class" confirmed="no">javax.activation.DataHandler</outbound>
                <inbound type="feature" confirmed="yes">org.apache.abdera.util.AbstractStreamWriter.writeContent(org.apache.abdera.model.Content$Type, javax.activation.DataHandler)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.writer.StreamWriter.writeElementText(long)</name>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.writer.StreamWriter.writeGenerator(java.lang.String, java.lang.String, java.lang.String)</name>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.writer.StreamWriter.writeIRIElement(java.lang.String, java.lang.String)</name>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.writer.StreamWriter.writeIRIElement(java.lang.String, java.lang.String, java.lang.String)</name>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.writer.StreamWriter.writeIRIElement(java.lang.String, java.lang.String, java.lang.String, java.lang.String)</name>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.writer.StreamWriter.writeIRIElement(java.lang.String, java.lang.String, java.lang.String, org.apache.abdera.i18n.iri.IRI)</name>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="class" confirmed="no">org.apache.abdera.i18n.iri.IRI</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.writer.StreamWriter.writeIRIElement(java.lang.String, java.lang.String, org.apache.abdera.i18n.iri.IRI)</name>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="class" confirmed="no">org.apache.abdera.i18n.iri.IRI</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.writer.StreamWriter.writeIRIElement(java.lang.String, org.apache.abdera.i18n.iri.IRI)</name>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="class" confirmed="no">org.apache.abdera.i18n.iri.IRI</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.writer.StreamWriter.writeIRIElement(javax.xml.namespace.QName, java.lang.String)</name>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="class" confirmed="no">javax.xml.namespace.QName</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.writer.StreamWriter.writeIRIElement(javax.xml.namespace.QName, org.apache.abdera.i18n.iri.IRI)</name>
                <outbound type="class" confirmed="no">javax.xml.namespace.QName</outbound>
                <outbound type="class" confirmed="no">org.apache.abdera.i18n.iri.IRI</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.writer.StreamWriter.writeIcon(java.lang.String)</name>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.writer.StreamWriter.writeIcon(org.apache.abdera.i18n.iri.IRI)</name>
                <outbound type="class" confirmed="no">org.apache.abdera.i18n.iri.IRI</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.writer.StreamWriter.writeId()</name>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.writer.StreamWriter.writeId(java.lang.String)</name>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.writer.StreamWriter.writeId(org.apache.abdera.i18n.iri.IRI)</name>
                <outbound type="class" confirmed="no">org.apache.abdera.i18n.iri.IRI</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.writer.StreamWriter.writeLanguage(java.lang.String)</name>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.writer.StreamWriter.writeLanguage(java.util.Locale)</name>
                <outbound type="class" confirmed="no">java.util.Locale</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.writer.StreamWriter.writeLanguage(org.apache.abdera.i18n.rfc4646.Lang)</name>
                <outbound type="class" confirmed="no">org.apache.abdera.i18n.rfc4646.Lang</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.writer.StreamWriter.writeLink(java.lang.String)</name>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.writer.StreamWriter.writeLink(java.lang.String, java.lang.String)</name>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.writer.StreamWriter.writeLink(java.lang.String, java.lang.String, java.lang.String)</name>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.writer.StreamWriter.writeLink(java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, long)</name>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.writer.StreamWriter.writeLogo(java.lang.String)</name>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.writer.StreamWriter.writeLogo(org.apache.abdera.i18n.iri.IRI)</name>
                <outbound type="class" confirmed="no">org.apache.abdera.i18n.iri.IRI</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.writer.StreamWriter.writeNamespace(java.lang.String, java.lang.String)</name>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.writer.StreamWriter.writePI(java.lang.String)</name>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.writer.StreamWriter.writePI(java.lang.String, java.lang.String)</name>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.writer.StreamWriter.writePerson(java.lang.String, java.lang.String, java.lang.String, java.lang.String)</name>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.writer.StreamWriter.writePerson(java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String)</name>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.writer.StreamWriter.writePerson(java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String)</name>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.writer.StreamWriter.writePerson(javax.xml.namespace.QName, java.lang.String, java.lang.String, java.lang.String)</name>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="class" confirmed="no">javax.xml.namespace.QName</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.writer.StreamWriter.writePersonEmail(java.lang.String)</name>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <inbound type="feature" confirmed="yes">org.apache.abdera.util.AbstractStreamWriter.writePerson(java.lang.String, java.lang.String, java.lang.String, java.lang.String)</inbound>
                <inbound type="feature" confirmed="yes">org.apache.abdera.util.AbstractStreamWriter.writePerson(java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String)</inbound>
                <inbound type="feature" confirmed="yes">org.apache.abdera.util.AbstractStreamWriter.writePerson(java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String)</inbound>
                <inbound type="feature" confirmed="yes">org.apache.abdera.util.AbstractStreamWriter.writePerson(javax.xml.namespace.QName, java.lang.String, java.lang.String, java.lang.String)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.writer.StreamWriter.writePersonName(java.lang.String)</name>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <inbound type="feature" confirmed="yes">org.apache.abdera.util.AbstractStreamWriter.writePerson(java.lang.String, java.lang.String, java.lang.String, java.lang.String)</inbound>
                <inbound type="feature" confirmed="yes">org.apache.abdera.util.AbstractStreamWriter.writePerson(java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String)</inbound>
                <inbound type="feature" confirmed="yes">org.apache.abdera.util.AbstractStreamWriter.writePerson(java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String)</inbound>
                <inbound type="feature" confirmed="yes">org.apache.abdera.util.AbstractStreamWriter.writePerson(javax.xml.namespace.QName, java.lang.String, java.lang.String, java.lang.String)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.writer.StreamWriter.writePersonUri(java.lang.String)</name>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <inbound type="feature" confirmed="yes">org.apache.abdera.util.AbstractStreamWriter.writePerson(java.lang.String, java.lang.String, java.lang.String, java.lang.String)</inbound>
                <inbound type="feature" confirmed="yes">org.apache.abdera.util.AbstractStreamWriter.writePerson(java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String)</inbound>
                <inbound type="feature" confirmed="yes">org.apache.abdera.util.AbstractStreamWriter.writePerson(java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String)</inbound>
                <inbound type="feature" confirmed="yes">org.apache.abdera.util.AbstractStreamWriter.writePerson(javax.xml.namespace.QName, java.lang.String, java.lang.String, java.lang.String)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.writer.StreamWriter.writePublished(java.lang.String)</name>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.writer.StreamWriter.writePublished(java.util.Date)</name>
                <outbound type="class" confirmed="no">java.util.Date</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.writer.StreamWriter.writeRights(java.lang.String)</name>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.writer.StreamWriter.writeRights(org.apache.abdera.model.Text$Type, java.lang.String)</name>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="class" confirmed="yes">org.apache.abdera.model.Text$Type</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.writer.StreamWriter.writeSubtitle(java.lang.String)</name>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.writer.StreamWriter.writeSubtitle(org.apache.abdera.model.Text$Type, java.lang.String)</name>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="class" confirmed="yes">org.apache.abdera.model.Text$Type</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.writer.StreamWriter.writeSummary(java.lang.String)</name>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.writer.StreamWriter.writeSummary(org.apache.abdera.model.Text$Type, java.lang.String)</name>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="class" confirmed="yes">org.apache.abdera.model.Text$Type</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.writer.StreamWriter.writeText(java.lang.String, java.lang.String, java.lang.String, org.apache.abdera.model.Text$Type, java.lang.String)</name>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="class" confirmed="yes">org.apache.abdera.model.Text$Type</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.writer.StreamWriter.writeText(java.lang.String, java.lang.String, org.apache.abdera.model.Text$Type, java.lang.String)</name>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="class" confirmed="yes">org.apache.abdera.model.Text$Type</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.writer.StreamWriter.writeText(java.lang.String, org.apache.abdera.model.Text$Type, java.lang.String)</name>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="class" confirmed="yes">org.apache.abdera.model.Text$Type</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.writer.StreamWriter.writeText(javax.xml.namespace.QName, org.apache.abdera.model.Text$Type, java.lang.String)</name>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="class" confirmed="no">javax.xml.namespace.QName</outbound>
                <outbound type="class" confirmed="yes">org.apache.abdera.model.Text$Type</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.writer.StreamWriter.writeTitle(java.lang.String)</name>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.writer.StreamWriter.writeTitle(org.apache.abdera.model.Text$Type, java.lang.String)</name>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="class" confirmed="yes">org.apache.abdera.model.Text$Type</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.writer.StreamWriter.writeUpdated(java.lang.String)</name>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.writer.StreamWriter.writeUpdated(java.util.Date)</name>
                <outbound type="class" confirmed="no">java.util.Date</outbound>
            </feature>
        </class>
        <class confirmed="yes">
            <name>org.apache.abdera.writer.Writer</name>
            <outbound type="class" confirmed="no">java.lang.Object</outbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.Abdera.getNewWriter()</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.Abdera.getWriter()</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.Abdera.newWriter()</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.Abdera.writer</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.model.Base.writeTo(org.apache.abdera.writer.Writer, java.io.OutputStream)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.model.Base.writeTo(org.apache.abdera.writer.Writer, java.io.OutputStream, org.apache.abdera.writer.WriterOptions)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.model.Base.writeTo(org.apache.abdera.writer.Writer, java.io.Writer)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.model.Base.writeTo(org.apache.abdera.writer.Writer, java.io.Writer, org.apache.abdera.writer.WriterOptions)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.model.ElementWrapper.writeTo(org.apache.abdera.writer.Writer, java.io.OutputStream)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.model.ElementWrapper.writeTo(org.apache.abdera.writer.Writer, java.io.OutputStream, org.apache.abdera.writer.WriterOptions)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.model.ElementWrapper.writeTo(org.apache.abdera.writer.Writer, java.io.Writer)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.model.ElementWrapper.writeTo(org.apache.abdera.writer.Writer, java.io.Writer, org.apache.abdera.writer.WriterOptions)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.util.AbderaConfiguration.newWriterInstance(org.apache.abdera.Abdera)</inbound>
            <inbound type="class" confirmed="yes">org.apache.abdera.util.AbstractWriter</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.util.AbstractWriter.setDefaultWriterOptions(org.apache.abdera.writer.WriterOptions)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.util.Configuration.newWriterInstance(org.apache.abdera.Abdera)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.util.ServiceUtil.newWriterInstance(org.apache.abdera.Abdera)</inbound>
            <inbound type="class" confirmed="yes">org.apache.abdera.writer.NamedWriter</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.writer.WriterFactory.getWriter()</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.writer.WriterFactory.getWriter(java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.writer.WriterFactory.getWriterByMediaType(java.lang.String)</inbound>
            <feature confirmed="yes">
                <name>org.apache.abdera.writer.Writer.getDefaultWriterOptions()</name>
                <outbound type="class" confirmed="yes">org.apache.abdera.writer.WriterOptions</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.writer.Writer.setDefaultWriterOptions(org.apache.abdera.writer.WriterOptions)</name>
                <outbound type="class" confirmed="yes">org.apache.abdera.writer.WriterOptions</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.writer.Writer.write(org.apache.abdera.model.Base)</name>
                <outbound type="class" confirmed="no">java.io.IOException</outbound>
                <outbound type="class" confirmed="no">java.lang.Object</outbound>
                <outbound type="class" confirmed="yes">org.apache.abdera.model.Base</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.writer.Writer.write(org.apache.abdera.model.Base, org.apache.abdera.writer.WriterOptions)</name>
                <outbound type="class" confirmed="no">java.io.IOException</outbound>
                <outbound type="class" confirmed="no">java.lang.Object</outbound>
                <outbound type="class" confirmed="yes">org.apache.abdera.model.Base</outbound>
                <outbound type="class" confirmed="yes">org.apache.abdera.writer.WriterOptions</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.writer.Writer.writeTo(org.apache.abdera.model.Base, java.io.OutputStream)</name>
                <outbound type="class" confirmed="no">java.io.IOException</outbound>
                <outbound type="class" confirmed="no">java.io.OutputStream</outbound>
                <outbound type="class" confirmed="yes">org.apache.abdera.model.Base</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.writer.Writer.writeTo(org.apache.abdera.model.Base, java.io.OutputStream, org.apache.abdera.writer.WriterOptions)</name>
                <outbound type="class" confirmed="no">java.io.IOException</outbound>
                <outbound type="class" confirmed="no">java.io.OutputStream</outbound>
                <outbound type="class" confirmed="yes">org.apache.abdera.model.Base</outbound>
                <outbound type="class" confirmed="yes">org.apache.abdera.writer.WriterOptions</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.writer.Writer.writeTo(org.apache.abdera.model.Base, java.io.Writer)</name>
                <outbound type="class" confirmed="no">java.io.IOException</outbound>
                <outbound type="class" confirmed="no">java.io.Writer</outbound>
                <outbound type="class" confirmed="yes">org.apache.abdera.model.Base</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.writer.Writer.writeTo(org.apache.abdera.model.Base, java.io.Writer, org.apache.abdera.writer.WriterOptions)</name>
                <outbound type="class" confirmed="no">java.io.IOException</outbound>
                <outbound type="class" confirmed="no">java.io.Writer</outbound>
                <outbound type="class" confirmed="yes">org.apache.abdera.model.Base</outbound>
                <outbound type="class" confirmed="yes">org.apache.abdera.writer.WriterOptions</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.writer.Writer.writeTo(org.apache.abdera.model.Base, java.nio.channels.WritableByteChannel)</name>
                <outbound type="class" confirmed="no">java.io.IOException</outbound>
                <outbound type="class" confirmed="no">java.nio.channels.WritableByteChannel</outbound>
                <outbound type="class" confirmed="yes">org.apache.abdera.model.Base</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.writer.Writer.writeTo(org.apache.abdera.model.Base, java.nio.channels.WritableByteChannel, org.apache.abdera.writer.WriterOptions)</name>
                <outbound type="class" confirmed="no">java.io.IOException</outbound>
                <outbound type="class" confirmed="no">java.nio.channels.WritableByteChannel</outbound>
                <outbound type="class" confirmed="yes">org.apache.abdera.model.Base</outbound>
                <outbound type="class" confirmed="yes">org.apache.abdera.writer.WriterOptions</outbound>
            </feature>
        </class>
        <class confirmed="yes">
            <name>org.apache.abdera.writer.WriterFactory</name>
            <outbound type="class" confirmed="no">java.lang.Object</outbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.Abdera.getNewWriterFactory()</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.Abdera.getWriterFactory()</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.Abdera.newWriterFactory()</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.Abdera.writerFactory</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.util.AbderaConfiguration.newWriterFactoryInstance(org.apache.abdera.Abdera)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.util.Configuration.newWriterFactoryInstance(org.apache.abdera.Abdera)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.util.ServiceUtil.newWriterFactoryInstance(org.apache.abdera.Abdera)</inbound>
            <feature confirmed="yes">
                <name>org.apache.abdera.writer.WriterFactory.getWriter()</name>
                <outbound type="class" confirmed="yes">org.apache.abdera.writer.Writer</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.writer.WriterFactory.getWriter(java.lang.String)</name>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="class" confirmed="yes">org.apache.abdera.writer.Writer</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.writer.WriterFactory.getWriterByMediaType(java.lang.String)</name>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="class" confirmed="yes">org.apache.abdera.writer.Writer</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.writer.WriterFactory.newStreamWriter()</name>
                <outbound type="class" confirmed="yes">org.apache.abdera.writer.StreamWriter</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.writer.WriterFactory.newStreamWriter(java.lang.String)</name>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="class" confirmed="yes">org.apache.abdera.writer.StreamWriter</outbound>
            </feature>
        </class>
        <class confirmed="yes">
            <name>org.apache.abdera.writer.WriterOptions</name>
            <outbound type="class" confirmed="no">java.lang.Cloneable</outbound>
            <outbound type="class" confirmed="no">java.lang.Object</outbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.model.Base.getDefaultWriterOptions()</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.model.Base.writeTo(java.io.OutputStream, org.apache.abdera.writer.WriterOptions)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.model.Base.writeTo(java.io.Writer, org.apache.abdera.writer.WriterOptions)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.model.Base.writeTo(java.lang.String, java.io.OutputStream, org.apache.abdera.writer.WriterOptions)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.model.Base.writeTo(java.lang.String, java.io.Writer, org.apache.abdera.writer.WriterOptions)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.model.Base.writeTo(org.apache.abdera.writer.Writer, java.io.OutputStream, org.apache.abdera.writer.WriterOptions)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.model.Base.writeTo(org.apache.abdera.writer.Writer, java.io.Writer, org.apache.abdera.writer.WriterOptions)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.model.ElementWrapper.getDefaultWriterOptions()</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.model.ElementWrapper.writeTo(java.io.OutputStream, org.apache.abdera.writer.WriterOptions)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.model.ElementWrapper.writeTo(java.io.Writer, org.apache.abdera.writer.WriterOptions)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.model.ElementWrapper.writeTo(java.lang.String, java.io.OutputStream, org.apache.abdera.writer.WriterOptions)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.model.ElementWrapper.writeTo(java.lang.String, java.io.Writer, org.apache.abdera.writer.WriterOptions)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.model.ElementWrapper.writeTo(org.apache.abdera.writer.Writer, java.io.OutputStream, org.apache.abdera.writer.WriterOptions)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.model.ElementWrapper.writeTo(org.apache.abdera.writer.Writer, java.io.Writer, org.apache.abdera.writer.WriterOptions)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.util.AbstractWriter.finishCompressedOutputStream(java.io.OutputStream, org.apache.abdera.writer.WriterOptions)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.util.AbstractWriter.getCompressedOutputStream(java.io.OutputStream, org.apache.abdera.writer.WriterOptions)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.util.AbstractWriter.getDefaultWriterOptions()</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.util.AbstractWriter.initDefaultWriterOptions()</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.util.AbstractWriter.options</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.util.AbstractWriter.setDefaultWriterOptions(org.apache.abdera.writer.WriterOptions)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.util.AbstractWriter.write(org.apache.abdera.model.Base)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.util.AbstractWriter.writeTo(org.apache.abdera.model.Base, java.io.OutputStream)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.util.AbstractWriter.writeTo(org.apache.abdera.model.Base, java.io.Writer)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.util.AbstractWriter.writeTo(org.apache.abdera.model.Base, java.nio.channels.WritableByteChannel)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.util.AbstractWriter.writeTo(org.apache.abdera.model.Base, java.nio.channels.WritableByteChannel, org.apache.abdera.writer.WriterOptions)</inbound>
            <inbound type="class" confirmed="yes">org.apache.abdera.util.AbstractWriterOptions</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.util.AbstractWriterOptions.setAutoClose(boolean)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.util.AbstractWriterOptions.setCharset(java.lang.String)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.util.AbstractWriterOptions.setCompressionCodecs(org.apache.abdera.i18n.text.io.CompressionUtil$CompressionCodec[])</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.writer.Writer.getDefaultWriterOptions()</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.writer.Writer.setDefaultWriterOptions(org.apache.abdera.writer.WriterOptions)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.writer.Writer.write(org.apache.abdera.model.Base, org.apache.abdera.writer.WriterOptions)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.writer.Writer.writeTo(org.apache.abdera.model.Base, java.io.OutputStream, org.apache.abdera.writer.WriterOptions)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.writer.Writer.writeTo(org.apache.abdera.model.Base, java.io.Writer, org.apache.abdera.writer.WriterOptions)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.writer.Writer.writeTo(org.apache.abdera.model.Base, java.nio.channels.WritableByteChannel, org.apache.abdera.writer.WriterOptions)</inbound>
            <feature confirmed="yes">
                <name>org.apache.abdera.writer.WriterOptions.clone()</name>
                <outbound type="class" confirmed="no">java.lang.CloneNotSupportedException</outbound>
                <outbound type="class" confirmed="no">java.lang.Object</outbound>
                <inbound type="feature" confirmed="yes">org.apache.abdera.util.AbstractWriter.getDefaultWriterOptions()</inbound>
                <inbound type="feature" confirmed="yes">org.apache.abdera.util.AbstractWriter.setDefaultWriterOptions(org.apache.abdera.writer.WriterOptions)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.writer.WriterOptions.getAutoClose()</name>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.writer.WriterOptions.getCharset()</name>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <inbound type="feature" confirmed="yes">org.apache.abdera.util.AbstractWriter.writeTo(org.apache.abdera.model.Base, java.nio.channels.WritableByteChannel, org.apache.abdera.writer.WriterOptions)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.writer.WriterOptions.getCompressionCodecs()</name>
                <outbound type="class" confirmed="no">org.apache.abdera.i18n.text.io.CompressionUtil$CompressionCodec</outbound>
                <inbound type="feature" confirmed="yes">org.apache.abdera.util.AbstractWriter.finishCompressedOutputStream(java.io.OutputStream, org.apache.abdera.writer.WriterOptions)</inbound>
                <inbound type="feature" confirmed="yes">org.apache.abdera.util.AbstractWriter.getCompressedOutputStream(java.io.OutputStream, org.apache.abdera.writer.WriterOptions)</inbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.writer.WriterOptions.setAutoClose(boolean)</name>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.writer.WriterOptions.setCharset(java.lang.String)</name>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.writer.WriterOptions.setCompressionCodecs(org.apache.abdera.i18n.text.io.CompressionUtil$CompressionCodec[])</name>
                <outbound type="class" confirmed="no">org.apache.abdera.i18n.text.io.CompressionUtil$CompressionCodec</outbound>
            </feature>
        </class>
    </package>
    <package confirmed="yes">
        <name>org.apache.abdera.xpath</name>
        <class confirmed="yes">
            <name>org.apache.abdera.xpath.XPath</name>
            <outbound type="class" confirmed="no">java.lang.Object</outbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.Abdera.getNewXPath()</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.Abdera.getXPath()</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.Abdera.newXPath()</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.Abdera.xpath</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.util.AbderaConfiguration.newXPathInstance(org.apache.abdera.Abdera)</inbound>
            <inbound type="class" confirmed="yes">org.apache.abdera.util.AbstractXPath</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.util.Configuration.newXPathInstance(org.apache.abdera.Abdera)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.util.ServiceUtil.newXPathInstance(org.apache.abdera.Abdera)</inbound>
            <feature confirmed="yes">
                <name>org.apache.abdera.xpath.XPath.booleanValueOf(java.lang.String, org.apache.abdera.model.Base)</name>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="class" confirmed="yes">org.apache.abdera.model.Base</outbound>
                <outbound type="class" confirmed="yes">org.apache.abdera.xpath.XPathException</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.xpath.XPath.booleanValueOf(java.lang.String, org.apache.abdera.model.Base, java.util.Map)</name>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="class" confirmed="no">java.util.Map</outbound>
                <outbound type="class" confirmed="yes">org.apache.abdera.model.Base</outbound>
                <outbound type="class" confirmed="yes">org.apache.abdera.xpath.XPathException</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.xpath.XPath.evaluate(java.lang.String, org.apache.abdera.model.Base)</name>
                <outbound type="class" confirmed="no">java.lang.Object</outbound>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="class" confirmed="yes">org.apache.abdera.model.Base</outbound>
                <outbound type="class" confirmed="yes">org.apache.abdera.xpath.XPathException</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.xpath.XPath.evaluate(java.lang.String, org.apache.abdera.model.Base, java.util.Map)</name>
                <outbound type="class" confirmed="no">java.lang.Object</outbound>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="class" confirmed="no">java.util.Map</outbound>
                <outbound type="class" confirmed="yes">org.apache.abdera.model.Base</outbound>
                <outbound type="class" confirmed="yes">org.apache.abdera.xpath.XPathException</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.xpath.XPath.getDefaultNamespaces()</name>
                <outbound type="class" confirmed="no">java.util.Map</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.xpath.XPath.numericValueOf(java.lang.String, org.apache.abdera.model.Base)</name>
                <outbound type="class" confirmed="no">java.lang.Number</outbound>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="class" confirmed="yes">org.apache.abdera.model.Base</outbound>
                <outbound type="class" confirmed="yes">org.apache.abdera.xpath.XPathException</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.xpath.XPath.numericValueOf(java.lang.String, org.apache.abdera.model.Base, java.util.Map)</name>
                <outbound type="class" confirmed="no">java.lang.Number</outbound>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="class" confirmed="no">java.util.Map</outbound>
                <outbound type="class" confirmed="yes">org.apache.abdera.model.Base</outbound>
                <outbound type="class" confirmed="yes">org.apache.abdera.xpath.XPathException</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.xpath.XPath.selectNodes(java.lang.String, org.apache.abdera.model.Base)</name>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="class" confirmed="no">java.util.List</outbound>
                <outbound type="class" confirmed="yes">org.apache.abdera.model.Base</outbound>
                <outbound type="class" confirmed="yes">org.apache.abdera.xpath.XPathException</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.xpath.XPath.selectNodes(java.lang.String, org.apache.abdera.model.Base, java.util.Map)</name>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="class" confirmed="no">java.util.List</outbound>
                <outbound type="class" confirmed="no">java.util.Map</outbound>
                <outbound type="class" confirmed="yes">org.apache.abdera.model.Base</outbound>
                <outbound type="class" confirmed="yes">org.apache.abdera.xpath.XPathException</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.xpath.XPath.selectSingleNode(java.lang.String, org.apache.abdera.model.Base)</name>
                <outbound type="class" confirmed="no">java.lang.Object</outbound>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="class" confirmed="yes">org.apache.abdera.model.Base</outbound>
                <outbound type="class" confirmed="yes">org.apache.abdera.xpath.XPathException</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.xpath.XPath.selectSingleNode(java.lang.String, org.apache.abdera.model.Base, java.util.Map)</name>
                <outbound type="class" confirmed="no">java.lang.Object</outbound>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="class" confirmed="no">java.util.Map</outbound>
                <outbound type="class" confirmed="yes">org.apache.abdera.model.Base</outbound>
                <outbound type="class" confirmed="yes">org.apache.abdera.xpath.XPathException</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.xpath.XPath.valueOf(java.lang.String, org.apache.abdera.model.Base)</name>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="class" confirmed="yes">org.apache.abdera.model.Base</outbound>
                <outbound type="class" confirmed="yes">org.apache.abdera.xpath.XPathException</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.xpath.XPath.valueOf(java.lang.String, org.apache.abdera.model.Base, java.util.Map)</name>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="class" confirmed="no">java.util.Map</outbound>
                <outbound type="class" confirmed="yes">org.apache.abdera.model.Base</outbound>
                <outbound type="class" confirmed="yes">org.apache.abdera.xpath.XPathException</outbound>
            </feature>
        </class>
        <class confirmed="yes">
            <name>org.apache.abdera.xpath.XPathException</name>
            <outbound type="class" confirmed="no">java.lang.RuntimeException</outbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.util.AbstractXPath.booleanValueOf(java.lang.String, org.apache.abdera.model.Base)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.util.AbstractXPath.evaluate(java.lang.String, org.apache.abdera.model.Base)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.util.AbstractXPath.numericValueOf(java.lang.String, org.apache.abdera.model.Base)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.util.AbstractXPath.selectNodes(java.lang.String, org.apache.abdera.model.Base)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.util.AbstractXPath.selectSingleNode(java.lang.String, org.apache.abdera.model.Base)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.util.AbstractXPath.valueOf(java.lang.String, org.apache.abdera.model.Base)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.xpath.XPath.booleanValueOf(java.lang.String, org.apache.abdera.model.Base)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.xpath.XPath.booleanValueOf(java.lang.String, org.apache.abdera.model.Base, java.util.Map)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.xpath.XPath.evaluate(java.lang.String, org.apache.abdera.model.Base)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.xpath.XPath.evaluate(java.lang.String, org.apache.abdera.model.Base, java.util.Map)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.xpath.XPath.numericValueOf(java.lang.String, org.apache.abdera.model.Base)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.xpath.XPath.numericValueOf(java.lang.String, org.apache.abdera.model.Base, java.util.Map)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.xpath.XPath.selectNodes(java.lang.String, org.apache.abdera.model.Base)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.xpath.XPath.selectNodes(java.lang.String, org.apache.abdera.model.Base, java.util.Map)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.xpath.XPath.selectSingleNode(java.lang.String, org.apache.abdera.model.Base)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.xpath.XPath.selectSingleNode(java.lang.String, org.apache.abdera.model.Base, java.util.Map)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.xpath.XPath.valueOf(java.lang.String, org.apache.abdera.model.Base)</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.xpath.XPath.valueOf(java.lang.String, org.apache.abdera.model.Base, java.util.Map)</inbound>
            <feature confirmed="yes">
                <name>org.apache.abdera.xpath.XPathException.XPathException()</name>
                <outbound type="feature" confirmed="no">java.lang.RuntimeException.RuntimeException()</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.xpath.XPathException.XPathException(java.lang.String)</name>
                <outbound type="feature" confirmed="no">java.lang.RuntimeException.RuntimeException(java.lang.String)</outbound>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.xpath.XPathException.XPathException(java.lang.String, java.lang.Throwable)</name>
                <outbound type="feature" confirmed="no">java.lang.RuntimeException.RuntimeException(java.lang.String, java.lang.Throwable)</outbound>
                <outbound type="class" confirmed="no">java.lang.String</outbound>
                <outbound type="class" confirmed="no">java.lang.Throwable</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.xpath.XPathException.XPathException(java.lang.Throwable)</name>
                <outbound type="feature" confirmed="no">java.lang.RuntimeException.RuntimeException(java.lang.Throwable)</outbound>
                <outbound type="class" confirmed="no">java.lang.Throwable</outbound>
            </feature>
            <feature confirmed="yes">
                <name>org.apache.abdera.xpath.XPathException.serialVersionUID</name>
            </feature>
        </class>
    </package>
    <package confirmed="no">
        <name>org.apache.commons.codec.binary</name>
        <class confirmed="no">
            <name>org.apache.commons.codec.binary.Base64</name>
            <feature confirmed="no">
                <name>org.apache.commons.codec.binary.Base64.encodeBase64(byte[])</name>
                <inbound type="feature" confirmed="yes">org.apache.abdera.util.AbstractStreamWriter.writeElementText(java.io.InputStream)</inbound>
            </feature>
        </class>
        <class confirmed="no">
            <name>org.apache.commons.codec.binary.Hex</name>
            <feature confirmed="no">
                <name>org.apache.commons.codec.binary.Hex.encodeHex(byte[])</name>
                <inbound type="feature" confirmed="yes">org.apache.abdera.util.EntityTag.generate(java.lang.String[])</inbound>
            </feature>
        </class>
    </package>
    <package confirmed="no">
        <name>org.apache.commons.logging</name>
        <class confirmed="no">
            <name>org.apache.commons.logging.Log</name>
            <inbound type="feature" confirmed="yes">org.apache.abdera.util.AbderaConfiguration.log</inbound>
            <inbound type="feature" confirmed="yes">org.apache.abdera.util.AbderaConfiguration.static {}</inbound>
        </class>
        <class confirmed="no">
            <name>org.apache.commons.logging.LogFactory</name>
            <feature confirmed="no">
                <name>org.apache.commons.logging.LogFactory.getLog(java.lang.Class)</name>
                <inbound type="feature" confirmed="yes">org.apache.abdera.util.AbderaConfiguration.static {}</inbound>
            </feature>
        </class>
    </package>
</dependencies>
